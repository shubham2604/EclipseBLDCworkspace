   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC2041_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	checkErrors:
  23              	.LVL0:
  24              	.LFB20:
  25              		.file 1 "boards/TMC2041_eval.c"
   1:boards/TMC2041_eval.c **** #include "Board.h"
   2:boards/TMC2041_eval.c **** #include "tmc/ic/TMC2041/TMC2041.h"
   3:boards/TMC2041_eval.c **** 
   4:boards/TMC2041_eval.c **** #include "tmc/StepDir.h"
   5:boards/TMC2041_eval.c **** 
   6:boards/TMC2041_eval.c **** #define VM_MIN  50   // 5V
   7:boards/TMC2041_eval.c **** #define VM_MAX  286  // 286V (26V + 10%)
   8:boards/TMC2041_eval.c **** 
   9:boards/TMC2041_eval.c **** // TODO: Limits
  10:boards/TMC2041_eval.c **** #undef  TMC2041_MAX_VELOCITY
  11:boards/TMC2041_eval.c **** #define TMC2041_MAX_VELOCITY  STEPDIR_MAX_VELOCITY
  12:boards/TMC2041_eval.c **** 
  13:boards/TMC2041_eval.c **** #define STEPDIR_PRECISION 100000
  14:boards/TMC2041_eval.c **** 
  15:boards/TMC2041_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  16:boards/TMC2041_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  17:boards/TMC2041_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  18:boards/TMC2041_eval.c **** static uint32_t stop(uint8_t motor);
  19:boards/TMC2041_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  20:boards/TMC2041_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  21:boards/TMC2041_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  22:boards/TMC2041_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  23:boards/TMC2041_eval.c **** 
  24:boards/TMC2041_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  25:boards/TMC2041_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  26:boards/TMC2041_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  27:boards/TMC2041_eval.c **** 
  28:boards/TMC2041_eval.c **** static void periodicJob(uint32_t tick);
  29:boards/TMC2041_eval.c **** static void checkErrors(uint32_t tick);
  30:boards/TMC2041_eval.c **** static void deInit(void);
  31:boards/TMC2041_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  32:boards/TMC2041_eval.c **** 
  33:boards/TMC2041_eval.c **** static uint8_t reset();
  34:boards/TMC2041_eval.c **** static void enableDriver(DriverState state);
  35:boards/TMC2041_eval.c **** 
  36:boards/TMC2041_eval.c **** static SPIChannelTypeDef *TMC2041_SPIChannel;
  37:boards/TMC2041_eval.c **** static TMC2041TypeDef TMC2041;
  38:boards/TMC2041_eval.c **** static ConfigurationTypeDef *TMC2041_config;
  39:boards/TMC2041_eval.c **** 
  40:boards/TMC2041_eval.c **** typedef struct
  41:boards/TMC2041_eval.c **** {
  42:boards/TMC2041_eval.c **** 	IOPinTypeDef  *REFL1_STEP1;
  43:boards/TMC2041_eval.c **** 	IOPinTypeDef  *REFL2_STEP2;
  44:boards/TMC2041_eval.c **** 	IOPinTypeDef  *REFR1_DIR1;
  45:boards/TMC2041_eval.c **** 	IOPinTypeDef  *REFR2_DIR2;
  46:boards/TMC2041_eval.c **** 	IOPinTypeDef  *DRV_ENN;
  47:boards/TMC2041_eval.c **** 	IOPinTypeDef  *SWIOP;
  48:boards/TMC2041_eval.c **** 	IOPinTypeDef  *SWION;
  49:boards/TMC2041_eval.c **** 	IOPinTypeDef  *SWSEL;
  50:boards/TMC2041_eval.c **** 	IOPinTypeDef  *INT;
  51:boards/TMC2041_eval.c **** 	IOPinTypeDef  *PP;
  52:boards/TMC2041_eval.c **** 	IOPinTypeDef  *CSN;
  53:boards/TMC2041_eval.c **** } PinsTypeDef;
  54:boards/TMC2041_eval.c **** 
  55:boards/TMC2041_eval.c **** static PinsTypeDef Pins;
  56:boards/TMC2041_eval.c **** 
  57:boards/TMC2041_eval.c **** // Translate motor number to TMC2041TypeDef
  58:boards/TMC2041_eval.c **** // When using multiple ICs you can map them here
  59:boards/TMC2041_eval.c **** static inline TMC2041TypeDef *motorToIC(uint8_t motor)
  60:boards/TMC2041_eval.c **** {
  61:boards/TMC2041_eval.c **** 	UNUSED(motor);
  62:boards/TMC2041_eval.c **** 
  63:boards/TMC2041_eval.c **** 	return &TMC2041;
  64:boards/TMC2041_eval.c **** }
  65:boards/TMC2041_eval.c **** 
  66:boards/TMC2041_eval.c **** // Translate channel number to SPI channel
  67:boards/TMC2041_eval.c **** // When using multiple ICs you can map them here
  68:boards/TMC2041_eval.c **** static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  69:boards/TMC2041_eval.c **** {
  70:boards/TMC2041_eval.c **** 	UNUSED(channel);
  71:boards/TMC2041_eval.c **** 
  72:boards/TMC2041_eval.c **** 	return TMC2041_SPIChannel;
  73:boards/TMC2041_eval.c **** }
  74:boards/TMC2041_eval.c **** 
  75:boards/TMC2041_eval.c **** // => SPI wrapper
  76:boards/TMC2041_eval.c **** void tmc2041_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  77:boards/TMC2041_eval.c **** {
  78:boards/TMC2041_eval.c **** 	// Map the channel to the corresponding SPI channel
  79:boards/TMC2041_eval.c **** 	channelToSPI(channel)->readWriteArray(&data[0], length);
  80:boards/TMC2041_eval.c **** }
  81:boards/TMC2041_eval.c **** // <= SPI wrapper
  82:boards/TMC2041_eval.c **** 
  83:boards/TMC2041_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
  84:boards/TMC2041_eval.c **** {
  85:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
  86:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
  87:boards/TMC2041_eval.c **** 
  88:boards/TMC2041_eval.c **** 	StepDir_rotate(motor, velocity);
  89:boards/TMC2041_eval.c **** 
  90:boards/TMC2041_eval.c **** 	return TMC_ERROR_NONE;
  91:boards/TMC2041_eval.c **** }
  92:boards/TMC2041_eval.c **** 
  93:boards/TMC2041_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
  94:boards/TMC2041_eval.c **** {
  95:boards/TMC2041_eval.c **** 	return rotate(motor, velocity);
  96:boards/TMC2041_eval.c **** }
  97:boards/TMC2041_eval.c **** 
  98:boards/TMC2041_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
  99:boards/TMC2041_eval.c **** {
 100:boards/TMC2041_eval.c **** 	return rotate(motor, -velocity);
 101:boards/TMC2041_eval.c **** }
 102:boards/TMC2041_eval.c **** 
 103:boards/TMC2041_eval.c **** static uint32_t stop(uint8_t motor)
 104:boards/TMC2041_eval.c **** {
 105:boards/TMC2041_eval.c **** 	return rotate(motor, 0);
 106:boards/TMC2041_eval.c **** }
 107:boards/TMC2041_eval.c **** 
 108:boards/TMC2041_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 109:boards/TMC2041_eval.c **** {
 110:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 111:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 112:boards/TMC2041_eval.c **** 
 113:boards/TMC2041_eval.c **** 	StepDir_moveTo(motor, position);
 114:boards/TMC2041_eval.c **** 
 115:boards/TMC2041_eval.c **** 	return TMC_ERROR_NONE;
 116:boards/TMC2041_eval.c **** }
 117:boards/TMC2041_eval.c **** 
 118:boards/TMC2041_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 119:boards/TMC2041_eval.c **** {
 120:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 121:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 122:boards/TMC2041_eval.c **** 
 123:boards/TMC2041_eval.c **** 	// determine actual position and add numbers of ticks to move
 124:boards/TMC2041_eval.c **** 	*ticks += StepDir_getActualPosition(motor);
 125:boards/TMC2041_eval.c **** 
 126:boards/TMC2041_eval.c **** 	return moveTo(motor, *ticks);
 127:boards/TMC2041_eval.c **** }
 128:boards/TMC2041_eval.c **** 
 129:boards/TMC2041_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 130:boards/TMC2041_eval.c **** {
 131:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 132:boards/TMC2041_eval.c **** 	int tempValue;
 133:boards/TMC2041_eval.c **** 
 134:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 135:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 136:boards/TMC2041_eval.c **** 
 137:boards/TMC2041_eval.c **** 	switch(type)
 138:boards/TMC2041_eval.c **** 	{
 139:boards/TMC2041_eval.c **** 	case 0:
 140:boards/TMC2041_eval.c **** 		// Target position
 141:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 142:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 143:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 144:boards/TMC2041_eval.c **** 			StepDir_moveTo(motor, *value);
 145:boards/TMC2041_eval.c **** 		}
 146:boards/TMC2041_eval.c **** 		break;
 147:boards/TMC2041_eval.c **** 	case 1:
 148:boards/TMC2041_eval.c **** 		// Actual position
 149:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 150:boards/TMC2041_eval.c **** 			*value = StepDir_getActualPosition(motor);
 151:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 152:boards/TMC2041_eval.c **** 			StepDir_setActualPosition(motor, *value);
 153:boards/TMC2041_eval.c **** 		}
 154:boards/TMC2041_eval.c **** 		break;
 155:boards/TMC2041_eval.c **** 	case 2:
 156:boards/TMC2041_eval.c **** 		// todo XML 3: Velocity ist signed, nicht unsigned (LH)
 157:boards/TMC2041_eval.c **** 		// Target speed
 158:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 159:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 160:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 161:boards/TMC2041_eval.c **** 			StepDir_rotate(motor, *value);
 162:boards/TMC2041_eval.c **** 		}
 163:boards/TMC2041_eval.c **** 		break;
 164:boards/TMC2041_eval.c **** 	case 3:
 165:boards/TMC2041_eval.c **** 		// todo CHECK 3: min max actually velocity min and velocity max? (JE) #1
 166:boards/TMC2041_eval.c **** 		// Actual speed
 167:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 168:boards/TMC2041_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 169:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 170:boards/TMC2041_eval.c **** 			errors |= TMC_ERROR_TYPE;
 171:boards/TMC2041_eval.c **** 		}
 172:boards/TMC2041_eval.c **** 		break;
 173:boards/TMC2041_eval.c **** 	case 4:
 174:boards/TMC2041_eval.c **** 		// Maximum speed
 175:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 176:boards/TMC2041_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 177:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 178:boards/TMC2041_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 179:boards/TMC2041_eval.c **** 		}
 180:boards/TMC2041_eval.c **** 		break;
 181:boards/TMC2041_eval.c **** 	case 5:
 182:boards/TMC2041_eval.c **** 		// Maximum acceleration
 183:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 184:boards/TMC2041_eval.c **** 			*value = StepDir_getAcceleration(motor);
 185:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 186:boards/TMC2041_eval.c **** 			StepDir_setAcceleration(motor, *value);
 187:boards/TMC2041_eval.c **** 		}
 188:boards/TMC2041_eval.c **** 		break;
 189:boards/TMC2041_eval.c **** 	case 6:
 190:boards/TMC2041_eval.c **** 		// Maximum current
 191:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 192:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2
 193:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 194:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2041_IRUN
 195:boards/TMC2041_eval.c **** 		}
 196:boards/TMC2041_eval.c **** 		break;
 197:boards/TMC2041_eval.c **** 	case 7:
 198:boards/TMC2041_eval.c **** 		// Standby current
 199:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 200:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC
 201:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 202:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC2041_IHO
 203:boards/TMC2041_eval.c **** 		}
 204:boards/TMC2041_eval.c **** 		break;
 205:boards/TMC2041_eval.c **** 	case 8:
 206:boards/TMC2041_eval.c **** 		// Position reached flag
 207:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 208:boards/TMC2041_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 209:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 210:boards/TMC2041_eval.c **** 			errors |= TMC_ERROR_TYPE;
 211:boards/TMC2041_eval.c **** 		break;
 212:boards/TMC2041_eval.c **** 	case 28:
 213:boards/TMC2041_eval.c **** 		// High speed fullstep mode
 214:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 215:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC
 216:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 217:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC2041_VHI
 218:boards/TMC2041_eval.c **** 		}
 219:boards/TMC2041_eval.c **** 		break;
 220:boards/TMC2041_eval.c **** 	case 29: // todo AP REM 2: Not documented in XML - delete? seems pointless anyways (LH)
 221:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 222:boards/TMC2041_eval.c **** 			//*value = StepDir.ch1->actualVelocity;
 223:boards/TMC2041_eval.c **** 			*value = StepDir_getActualVelocity(0);
 224:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 225:boards/TMC2041_eval.c **** 			errors |= TMC_ERROR_TYPE;
 226:boards/TMC2041_eval.c **** 		break;
 227:boards/TMC2041_eval.c **** 	case 50: // StepDir internal(0)/external(1)
 228:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 229:boards/TMC2041_eval.c **** 			*value = StepDir_getMode(motor);
 230:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 231:boards/TMC2041_eval.c **** 			StepDir_setMode(motor, *value);
 232:boards/TMC2041_eval.c **** 		}
 233:boards/TMC2041_eval.c **** 		break;
 234:boards/TMC2041_eval.c **** 	case 51: // StepDir interrupt frequency
 235:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 236:boards/TMC2041_eval.c **** 			*value = StepDir_getFrequency(motor);
 237:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 238:boards/TMC2041_eval.c **** 			StepDir_setFrequency(motor, *value);
 239:boards/TMC2041_eval.c **** 		}
 240:boards/TMC2041_eval.c **** 		break;
 241:boards/TMC2041_eval.c **** 	case 140:
 242:boards/TMC2041_eval.c **** 		// Microstep Resolution
 243:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 244:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC204
 245:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 246:boards/TMC2041_eval.c **** 			switch(*value)
 247:boards/TMC2041_eval.c **** 			{
 248:boards/TMC2041_eval.c **** 			case 1:    *value = 8;   break;
 249:boards/TMC2041_eval.c **** 			case 2:    *value = 7;   break;
 250:boards/TMC2041_eval.c **** 			case 4:    *value = 6;   break;
 251:boards/TMC2041_eval.c **** 			case 8:    *value = 5;   break;
 252:boards/TMC2041_eval.c **** 			case 16:   *value = 4;   break;
 253:boards/TMC2041_eval.c **** 			case 32:   *value = 3;   break;
 254:boards/TMC2041_eval.c **** 			case 64:   *value = 2;   break;
 255:boards/TMC2041_eval.c **** 			case 128:  *value = 1;   break;
 256:boards/TMC2041_eval.c **** 			case 256:  *value = 0;   break;
 257:boards/TMC2041_eval.c **** 			default:   *value = -1;  break;
 258:boards/TMC2041_eval.c **** 			}
 259:boards/TMC2041_eval.c **** 
 260:boards/TMC2041_eval.c **** 			if(*value != -1)
 261:boards/TMC2041_eval.c **** 			{
 262:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_
 263:boards/TMC2041_eval.c **** 			}
 264:boards/TMC2041_eval.c **** 			//else TMCL.reply->Status = REPLY_INVALID_VALUE;
 265:boards/TMC2041_eval.c **** 		}
 266:boards/TMC2041_eval.c **** 		break;
 267:boards/TMC2041_eval.c **** 	case 162:
 268:boards/TMC2041_eval.c **** 		// Chopper blank time
 269:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 270:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041
 271:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 272:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041_TBL_SHI
 273:boards/TMC2041_eval.c **** 		}
 274:boards/TMC2041_eval.c **** 		break;
 275:boards/TMC2041_eval.c **** 	case 163:
 276:boards/TMC2041_eval.c **** 		// Constant TOff Mode
 277:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 278:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041
 279:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 280:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041_CHM_SHI
 281:boards/TMC2041_eval.c **** 		}
 282:boards/TMC2041_eval.c **** 		break;
 283:boards/TMC2041_eval.c **** 	case 164:
 284:boards/TMC2041_eval.c **** 		// Disable fast decay comparator
 285:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 286:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC
 287:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 288:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC2041_DIS
 289:boards/TMC2041_eval.c **** 		}
 290:boards/TMC2041_eval.c **** 		break;
 291:boards/TMC2041_eval.c **** 	case 165:
 292:boards/TMC2041_eval.c **** 		// Chopper hysteresis end / fast decay time
 293:boards/TMC2041_eval.c **** 		tempValue = tmc2041_readInt(motorToIC(motor), TMC2041_CHOPCONF(motor));
 294:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 295:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
 296:boards/TMC2041_eval.c **** 			{
 297:boards/TMC2041_eval.c **** 				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HEND_MASK, TMC20
 298:boards/TMC2041_eval.c **** 			}
 299:boards/TMC2041_eval.c **** 			else // fast decay time
 300:boards/TMC2041_eval.c **** 			{
 301:boards/TMC2041_eval.c **** 				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_ALL_MASK, TM
 302:boards/TMC2041_eval.c **** 				if(tempValue & TMC2041_TFD_3_MASK) // add MSB of fast decay time to *value
 303:boards/TMC2041_eval.c **** 					*value |= 1<<3;
 304:boards/TMC2041_eval.c **** 			}
 305:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 306:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
 307:boards/TMC2041_eval.c **** 			{
 308:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HEND_MASK, TMC2041_HEND_
 309:boards/TMC2041_eval.c **** 			}
 310:boards/TMC2041_eval.c **** 			else // fast decay time
 311:boards/TMC2041_eval.c **** 			{
 312:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_ALL_MASK, TMC2041_TF
 313:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_3_MASK, TMC2041_TFD_
 314:boards/TMC2041_eval.c **** 			}
 315:boards/TMC2041_eval.c **** 		}
 316:boards/TMC2041_eval.c **** 		break;
 317:boards/TMC2041_eval.c **** 	case 166:
 318:boards/TMC2041_eval.c **** 		// Chopper hysteresis start / sine wave offset
 319:boards/TMC2041_eval.c **** 		tempValue = tmc2041_readInt(motorToIC(motor), TMC2041_CHOPCONF(motor));
 320:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 321:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
 322:boards/TMC2041_eval.c **** 			{
 323:boards/TMC2041_eval.c **** 				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HSTRT_MASK, TMC2
 324:boards/TMC2041_eval.c **** 			}
 325:boards/TMC2041_eval.c **** 			else // sine wave offset
 326:boards/TMC2041_eval.c **** 			{
 327:boards/TMC2041_eval.c **** 				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_OFFSET_MASK, TMC
 328:boards/TMC2041_eval.c **** 			}
 329:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 330:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
 331:boards/TMC2041_eval.c **** 			{
 332:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HSTRT_MASK, TMC2041_HSTR
 333:boards/TMC2041_eval.c **** 			}
 334:boards/TMC2041_eval.c **** 			else // sine wave offset
 335:boards/TMC2041_eval.c **** 			{
 336:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_OFFSET_MASK, TMC2041_OFF
 337:boards/TMC2041_eval.c **** 			}
 338:boards/TMC2041_eval.c **** 		}
 339:boards/TMC2041_eval.c **** 		break;
 340:boards/TMC2041_eval.c **** 	case 167:
 341:boards/TMC2041_eval.c **** 		// Chopper off time
 342:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 343:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TOFF_MASK, TMC204
 344:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 345:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TOFF_MASK, TMC2041_TOFF_S
 346:boards/TMC2041_eval.c **** 		}
 347:boards/TMC2041_eval.c **** 		break;
 348:boards/TMC2041_eval.c **** 	case 168:
 349:boards/TMC2041_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 350:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 351:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2
 352:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 353:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2041_SEIM
 354:boards/TMC2041_eval.c **** 		}
 355:boards/TMC2041_eval.c **** 		break;
 356:boards/TMC2041_eval.c **** 	case 169:
 357:boards/TMC2041_eval.c **** 		// smartEnergy current down step
 358:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 359:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC204
 360:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 361:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC2041_SEDN_S
 362:boards/TMC2041_eval.c **** 		}
 363:boards/TMC2041_eval.c **** 		break;
 364:boards/TMC2041_eval.c **** 	case 170:
 365:boards/TMC2041_eval.c **** 		// smartEnergy hysteresis
 366:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 367:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC20
 368:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 369:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC2041_SEMAX
 370:boards/TMC2041_eval.c **** 		}
 371:boards/TMC2041_eval.c **** 		break;
 372:boards/TMC2041_eval.c **** 	case 171:
 373:boards/TMC2041_eval.c **** 		// smartEnergy current up step
 374:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 375:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC204
 376:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 377:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC2041_SEUP_S
 378:boards/TMC2041_eval.c **** 		}
 379:boards/TMC2041_eval.c **** 		break;
 380:boards/TMC2041_eval.c **** 	case 172:
 381:boards/TMC2041_eval.c **** 		// smartEnergy hysteresis start
 382:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 383:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC20
 384:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 385:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN
 386:boards/TMC2041_eval.c **** 		}
 387:boards/TMC2041_eval.c **** 		break;
 388:boards/TMC2041_eval.c **** 	case 173:
 389:boards/TMC2041_eval.c **** 		// stallGuard2 filter enable
 390:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 391:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC20
 392:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 393:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC2041_SFILT
 394:boards/TMC2041_eval.c **** 		}
 395:boards/TMC2041_eval.c **** 		break;
 396:boards/TMC2041_eval.c **** 	case 174:
 397:boards/TMC2041_eval.c **** 		// stallGuard2 threshold
 398:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 399:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041
 400:boards/TMC2041_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 401:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 402:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHI
 403:boards/TMC2041_eval.c **** 		}
 404:boards/TMC2041_eval.c **** 		break;
 405:boards/TMC2041_eval.c **** 	case 179:
 406:boards/TMC2041_eval.c **** 		// VSense
 407:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 408:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2
 409:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 410:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2041_VSEN
 411:boards/TMC2041_eval.c **** 		}
 412:boards/TMC2041_eval.c **** 		break;
 413:boards/TMC2041_eval.c **** 	case 180:
 414:boards/TMC2041_eval.c **** 		// smartEnergy actual current
 415:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 416:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_CS_ACTUAL_MASK, 
 417:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 418:boards/TMC2041_eval.c **** 			errors |= TMC_ERROR_TYPE;
 419:boards/TMC2041_eval.c **** 		break;
 420:boards/TMC2041_eval.c **** 	case 181:
 421:boards/TMC2041_eval.c **** 		// smartEnergy stall velocity
 422:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 423:boards/TMC2041_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 424:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 425:boards/TMC2041_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 426:boards/TMC2041_eval.c **** 		}
 427:boards/TMC2041_eval.c **** 		break;
 428:boards/TMC2041_eval.c **** 	case 184:
 429:boards/TMC2041_eval.c **** 		// Random TOff mode
 430:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 431:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC20
 432:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 433:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC2041_RNDTF
 434:boards/TMC2041_eval.c **** 		}
 435:boards/TMC2041_eval.c **** 		break;
 436:boards/TMC2041_eval.c **** 	case 206:
 437:boards/TMC2041_eval.c **** 		// Load value
 438:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 439:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_SG_RESULT_MASK, 
 440:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 441:boards/TMC2041_eval.c **** 			errors |= TMC_ERROR_TYPE;
 442:boards/TMC2041_eval.c **** 		}
 443:boards/TMC2041_eval.c **** 		break;
 444:boards/TMC2041_eval.c **** 	default:
 445:boards/TMC2041_eval.c **** 		errors |= TMC_ERROR_TYPE;
 446:boards/TMC2041_eval.c **** 		break;
 447:boards/TMC2041_eval.c **** 	}
 448:boards/TMC2041_eval.c **** 
 449:boards/TMC2041_eval.c **** 	return errors;
 450:boards/TMC2041_eval.c **** }
 451:boards/TMC2041_eval.c **** 
 452:boards/TMC2041_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 453:boards/TMC2041_eval.c **** {
 454:boards/TMC2041_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 455:boards/TMC2041_eval.c **** }
 456:boards/TMC2041_eval.c **** 
 457:boards/TMC2041_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 458:boards/TMC2041_eval.c **** {
 459:boards/TMC2041_eval.c **** 	return handleParameter(READ, motor, type, value);
 460:boards/TMC2041_eval.c **** }
 461:boards/TMC2041_eval.c **** 
 462:boards/TMC2041_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value)
 463:boards/TMC2041_eval.c **** {
 464:boards/TMC2041_eval.c **** 	UNUSED(motor);
 465:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 466:boards/TMC2041_eval.c **** 	switch(type) {
 467:boards/TMC2041_eval.c **** 	case 2:
 468:boards/TMC2041_eval.c **** 	case 3:
 469:boards/TMC2041_eval.c **** 	case 4:
 470:boards/TMC2041_eval.c **** 	case 24:
 471:boards/TMC2041_eval.c **** 		if(limit == LIMIT_MIN) {
 472:boards/TMC2041_eval.c **** 			*value = 0; // TODO: Determine limits here
 473:boards/TMC2041_eval.c **** 		} else if(limit == LIMIT_MAX) {
 474:boards/TMC2041_eval.c **** 			*value = StepDir_getFrequency(motor);
 475:boards/TMC2041_eval.c **** 		}
 476:boards/TMC2041_eval.c **** 		break;
 477:boards/TMC2041_eval.c **** 	case 5:
 478:boards/TMC2041_eval.c **** 		if(limit == LIMIT_MIN) {
 479:boards/TMC2041_eval.c **** 			*value = 0; // TODO: Determine limits here
 480:boards/TMC2041_eval.c **** 		} else if(limit == LIMIT_MAX) {
 481:boards/TMC2041_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 482:boards/TMC2041_eval.c **** 		}
 483:boards/TMC2041_eval.c **** 		break;
 484:boards/TMC2041_eval.c **** 	default:
 485:boards/TMC2041_eval.c **** 		errors |= TMC_ERROR_TYPE;
 486:boards/TMC2041_eval.c **** 		break;
 487:boards/TMC2041_eval.c **** 	}
 488:boards/TMC2041_eval.c **** 	return errors;
 489:boards/TMC2041_eval.c **** }
 490:boards/TMC2041_eval.c **** 
 491:boards/TMC2041_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value)
 492:boards/TMC2041_eval.c **** {
 493:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 494:boards/TMC2041_eval.c **** }
 495:boards/TMC2041_eval.c **** 
 496:boards/TMC2041_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value)
 497:boards/TMC2041_eval.c **** {
 498:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 499:boards/TMC2041_eval.c **** }
 500:boards/TMC2041_eval.c **** 
 501:boards/TMC2041_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 502:boards/TMC2041_eval.c **** {
 503:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 504:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 505:boards/TMC2041_eval.c **** 
 506:boards/TMC2041_eval.c **** 	switch(motor)
 507:boards/TMC2041_eval.c **** 	{
 508:boards/TMC2041_eval.c **** 	case 0:
 509:boards/TMC2041_eval.c **** 		//*value = StepDir.ch1->actualVelocity;
 510:boards/TMC2041_eval.c **** 		*value = StepDir_getActualVelocity(0);
 511:boards/TMC2041_eval.c **** 		break;
 512:boards/TMC2041_eval.c **** 	default:
 513:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 514:boards/TMC2041_eval.c **** 		break;
 515:boards/TMC2041_eval.c **** 	}
 516:boards/TMC2041_eval.c **** 	return TMC_ERROR_NONE;
 517:boards/TMC2041_eval.c **** }
 518:boards/TMC2041_eval.c **** 
 519:boards/TMC2041_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 520:boards/TMC2041_eval.c **** {
 521:boards/TMC2041_eval.c **** 	tmc2041_writeInt(motorToIC(motor), address, value);
 522:boards/TMC2041_eval.c **** }
 523:boards/TMC2041_eval.c **** 
 524:boards/TMC2041_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 525:boards/TMC2041_eval.c **** {
 526:boards/TMC2041_eval.c **** 	*value = tmc2041_readInt(motorToIC(motor), address);
 527:boards/TMC2041_eval.c **** }
 528:boards/TMC2041_eval.c **** 
 529:boards/TMC2041_eval.c **** static void periodicJob(uint32_t tick)
 530:boards/TMC2041_eval.c **** {
 531:boards/TMC2041_eval.c **** 	tmc2041_periodicJob(&TMC2041, tick);
 532:boards/TMC2041_eval.c **** 
 533:boards/TMC2041_eval.c **** 	for(size_t motor = 0; motor < TMC2041_MOTORS; motor++)
 534:boards/TMC2041_eval.c **** 	{
 535:boards/TMC2041_eval.c **** 		StepDir_periodicJob(motor);
 536:boards/TMC2041_eval.c **** 		// Read stallGuard status and pass it to StepDir for further handling
 537:boards/TMC2041_eval.c **** 		StepDir_stallGuard(motor, TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_
 538:boards/TMC2041_eval.c **** 	}
 539:boards/TMC2041_eval.c **** }
 540:boards/TMC2041_eval.c **** 
 541:boards/TMC2041_eval.c **** static void checkErrors(uint32_t tick)
 542:boards/TMC2041_eval.c **** {
  26              		.loc 1 542 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 543:boards/TMC2041_eval.c **** 	UNUSED(tick);
  31              		.loc 1 543 2 view .LVU1
 544:boards/TMC2041_eval.c **** 	Evalboards.ch2.errors = 0;
  32              		.loc 1 544 2 view .LVU2
  33              		.loc 1 544 24 is_stmt 0 view .LVU3
  34 0000 024B     		ldr	r3, .L2
  35 0002 0022     		movs	r2, #0
  36 0004 C3F88020 		str	r2, [r3, #128]
 545:boards/TMC2041_eval.c **** }
  37              		.loc 1 545 1 view .LVU4
  38 0008 7047     		bx	lr
  39              	.L3:
  40 000a 00BF     		.align	2
  41              	.L2:
  42 000c 00000000 		.word	Evalboards
  43              		.cfi_endproc
  44              	.LFE20:
  46              		.align	1
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	readRegister:
  53              	.LVL1:
  54              	.LFB18:
 525:boards/TMC2041_eval.c **** 	*value = tmc2041_readInt(motorToIC(motor), address);
  55              		.loc 1 525 1 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
 526:boards/TMC2041_eval.c **** }
  59              		.loc 1 526 2 view .LVU6
  60              	.LBB149:
  61              	.LBI149:
  59:boards/TMC2041_eval.c **** {
  62              		.loc 1 59 31 view .LVU7
  59:boards/TMC2041_eval.c **** {
  63              		.loc 1 59 31 is_stmt 0 view .LVU8
  64              	.LBE149:
  61:boards/TMC2041_eval.c **** 
  65              		.loc 1 61 2 is_stmt 1 view .LVU9
  63:boards/TMC2041_eval.c **** }
  66              		.loc 1 63 2 view .LVU10
 525:boards/TMC2041_eval.c **** 	*value = tmc2041_readInt(motorToIC(motor), address);
  67              		.loc 1 525 1 is_stmt 0 view .LVU11
  68 0010 10B5     		push	{r4, lr}
  69              	.LCFI0:
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 4, -8
  72              		.cfi_offset 14, -4
 526:boards/TMC2041_eval.c **** }
  73              		.loc 1 526 11 view .LVU12
  74 0012 0348     		ldr	r0, .L5
  75              	.LVL2:
 525:boards/TMC2041_eval.c **** 	*value = tmc2041_readInt(motorToIC(motor), address);
  76              		.loc 1 525 1 view .LVU13
  77 0014 1446     		mov	r4, r2
 526:boards/TMC2041_eval.c **** }
  78              		.loc 1 526 11 view .LVU14
  79 0016 FFF7FEFF 		bl	tmc2041_readInt
  80              	.LVL3:
 526:boards/TMC2041_eval.c **** }
  81              		.loc 1 526 9 view .LVU15
  82 001a 2060     		str	r0, [r4]
 527:boards/TMC2041_eval.c **** 
  83              		.loc 1 527 1 view .LVU16
  84 001c 10BD     		pop	{r4, pc}
  85              	.LVL4:
  86              	.L6:
 527:boards/TMC2041_eval.c **** 
  87              		.loc 1 527 1 view .LVU17
  88 001e 00BF     		.align	2
  89              	.L5:
  90 0020 00000000 		.word	.LANCHOR0
  91              		.cfi_endproc
  92              	.LFE18:
  94              		.align	1
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	periodicJob:
 101              	.LVL5:
 102              	.LFB19:
 530:boards/TMC2041_eval.c **** 	tmc2041_periodicJob(&TMC2041, tick);
 103              		.loc 1 530 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 531:boards/TMC2041_eval.c **** 
 107              		.loc 1 531 2 view .LVU19
 530:boards/TMC2041_eval.c **** 	tmc2041_periodicJob(&TMC2041, tick);
 108              		.loc 1 530 1 is_stmt 0 view .LVU20
 109 0024 10B5     		push	{r4, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 4, -8
 113              		.cfi_offset 14, -4
 531:boards/TMC2041_eval.c **** 
 114              		.loc 1 531 2 view .LVU21
 115 0026 0F4C     		ldr	r4, .L8
 530:boards/TMC2041_eval.c **** 	tmc2041_periodicJob(&TMC2041, tick);
 116              		.loc 1 530 1 view .LVU22
 117 0028 0146     		mov	r1, r0
 531:boards/TMC2041_eval.c **** 
 118              		.loc 1 531 2 view .LVU23
 119 002a 2046     		mov	r0, r4
 120              	.LVL6:
 531:boards/TMC2041_eval.c **** 
 121              		.loc 1 531 2 view .LVU24
 122 002c FFF7FEFF 		bl	tmc2041_periodicJob
 123              	.LVL7:
 533:boards/TMC2041_eval.c **** 	{
 124              		.loc 1 533 2 is_stmt 1 view .LVU25
 125              	.LBB150:
 533:boards/TMC2041_eval.c **** 	{
 126              		.loc 1 533 6 view .LVU26
 533:boards/TMC2041_eval.c **** 	{
 127              		.loc 1 533 24 view .LVU27
 535:boards/TMC2041_eval.c **** 		// Read stallGuard status and pass it to StepDir for further handling
 128              		.loc 1 535 3 view .LVU28
 129 0030 0020     		movs	r0, #0
 130 0032 FFF7FEFF 		bl	StepDir_periodicJob
 131              	.LVL8:
 537:boards/TMC2041_eval.c **** 	}
 132              		.loc 1 537 3 view .LVU29
 133              	.LBB151:
 134              	.LBI151:
  59:boards/TMC2041_eval.c **** {
 135              		.loc 1 59 31 view .LVU30
  59:boards/TMC2041_eval.c **** {
 136              		.loc 1 59 31 is_stmt 0 view .LVU31
 137              	.LBE151:
 138              	.LBE150:
  61:boards/TMC2041_eval.c **** 
 139              		.loc 1 61 2 is_stmt 1 view .LVU32
  63:boards/TMC2041_eval.c **** }
 140              		.loc 1 63 2 view .LVU33
 141              	.LBB153:
 537:boards/TMC2041_eval.c **** 	}
 142              		.loc 1 537 29 is_stmt 0 view .LVU34
 143 0036 6F21     		movs	r1, #111
 144 0038 2046     		mov	r0, r4
 145 003a FFF7FEFF 		bl	tmc2041_readInt
 146              	.LVL9:
 537:boards/TMC2041_eval.c **** 	}
 147              		.loc 1 537 3 view .LVU35
 148 003e C0F30061 		ubfx	r1, r0, #24, #1
 149 0042 0020     		movs	r0, #0
 150 0044 FFF7FEFF 		bl	StepDir_stallGuard
 151              	.LVL10:
 533:boards/TMC2041_eval.c **** 	{
 152              		.loc 1 533 48 is_stmt 1 view .LVU36
 533:boards/TMC2041_eval.c **** 	{
 153              		.loc 1 533 24 view .LVU37
 535:boards/TMC2041_eval.c **** 		// Read stallGuard status and pass it to StepDir for further handling
 154              		.loc 1 535 3 view .LVU38
 155 0048 0120     		movs	r0, #1
 156 004a FFF7FEFF 		bl	StepDir_periodicJob
 157              	.LVL11:
 537:boards/TMC2041_eval.c **** 	}
 158              		.loc 1 537 3 view .LVU39
 159              	.LBB152:
  59:boards/TMC2041_eval.c **** {
 160              		.loc 1 59 31 view .LVU40
  59:boards/TMC2041_eval.c **** {
 161              		.loc 1 59 31 is_stmt 0 view .LVU41
 162              	.LBE152:
 163              	.LBE153:
  61:boards/TMC2041_eval.c **** 
 164              		.loc 1 61 2 is_stmt 1 view .LVU42
  63:boards/TMC2041_eval.c **** }
 165              		.loc 1 63 2 view .LVU43
 166              	.LBB154:
 537:boards/TMC2041_eval.c **** 	}
 167              		.loc 1 537 29 is_stmt 0 view .LVU44
 168 004e 7F21     		movs	r1, #127
 169 0050 2046     		mov	r0, r4
 170 0052 FFF7FEFF 		bl	tmc2041_readInt
 171              	.LVL12:
 172              	.LBE154:
 539:boards/TMC2041_eval.c **** 
 173              		.loc 1 539 1 view .LVU45
 174 0056 BDE81040 		pop	{r4, lr}
 175              	.LCFI2:
 176              		.cfi_restore 14
 177              		.cfi_restore 4
 178              		.cfi_def_cfa_offset 0
 179              	.LBB155:
 537:boards/TMC2041_eval.c **** 	}
 180              		.loc 1 537 3 view .LVU46
 181 005a C0F30061 		ubfx	r1, r0, #24, #1
 182 005e 0120     		movs	r0, #1
 183 0060 FFF7FEBF 		b	StepDir_stallGuard
 184              	.LVL13:
 185              	.L9:
 186              		.align	2
 187              	.L8:
 188 0064 00000000 		.word	.LANCHOR0
 189              	.LBE155:
 190              		.cfi_endproc
 191              	.LFE19:
 193              		.align	1
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu softvfp
 199              	writeRegister:
 200              	.LVL14:
 201              	.LFB17:
 520:boards/TMC2041_eval.c **** 	tmc2041_writeInt(motorToIC(motor), address, value);
 202              		.loc 1 520 1 is_stmt 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 521:boards/TMC2041_eval.c **** }
 207              		.loc 1 521 2 view .LVU48
 208              	.LBB156:
 209              	.LBI156:
  59:boards/TMC2041_eval.c **** {
 210              		.loc 1 59 31 view .LVU49
  59:boards/TMC2041_eval.c **** {
 211              		.loc 1 59 31 is_stmt 0 view .LVU50
 212              	.LBE156:
  61:boards/TMC2041_eval.c **** 
 213              		.loc 1 61 2 is_stmt 1 view .LVU51
  63:boards/TMC2041_eval.c **** }
 214              		.loc 1 63 2 view .LVU52
 521:boards/TMC2041_eval.c **** }
 215              		.loc 1 521 2 is_stmt 0 view .LVU53
 216 0068 0148     		ldr	r0, .L11
 217              	.LVL15:
 521:boards/TMC2041_eval.c **** }
 218              		.loc 1 521 2 view .LVU54
 219 006a FFF7FEBF 		b	tmc2041_writeInt
 220              	.LVL16:
 221              	.L12:
 521:boards/TMC2041_eval.c **** }
 222              		.loc 1 521 2 view .LVU55
 223 006e 00BF     		.align	2
 224              	.L11:
 225 0070 00000000 		.word	.LANCHOR0
 226              		.cfi_endproc
 227              	.LFE17:
 229              		.align	1
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu softvfp
 235              	moveTo:
 236              	.LVL17:
 237              	.LFB8:
 109:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 238              		.loc 1 109 1 is_stmt 1 view -0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 110:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 242              		.loc 1 110 2 view .LVU57
 110:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 243              		.loc 1 110 4 is_stmt 0 view .LVU58
 244 0074 0128     		cmp	r0, #1
 109:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 245              		.loc 1 109 1 view .LVU59
 246 0076 08B5     		push	{r3, lr}
 247              	.LCFI3:
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 3, -8
 250              		.cfi_offset 14, -4
 110:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 251              		.loc 1 110 4 view .LVU60
 252 0078 03D8     		bhi	.L15
 113:boards/TMC2041_eval.c **** 
 253              		.loc 1 113 2 is_stmt 1 view .LVU61
 254 007a FFF7FEFF 		bl	StepDir_moveTo
 255              	.LVL18:
 115:boards/TMC2041_eval.c **** }
 256              		.loc 1 115 2 view .LVU62
 115:boards/TMC2041_eval.c **** }
 257              		.loc 1 115 9 is_stmt 0 view .LVU63
 258 007e 0020     		movs	r0, #0
 259              	.L13:
 116:boards/TMC2041_eval.c **** 
 260              		.loc 1 116 1 view .LVU64
 261 0080 08BD     		pop	{r3, pc}
 262              	.LVL19:
 263              	.L15:
 111:boards/TMC2041_eval.c **** 
 264              		.loc 1 111 10 view .LVU65
 265 0082 0820     		movs	r0, #8
 266              	.LVL20:
 111:boards/TMC2041_eval.c **** 
 267              		.loc 1 111 10 view .LVU66
 268 0084 FCE7     		b	.L13
 269              		.cfi_endproc
 270              	.LFE8:
 272              		.align	1
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	rotate:
 279              	.LVL21:
 280              	.LFB4:
  84:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 281              		.loc 1 84 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
  85:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 285              		.loc 1 85 2 view .LVU68
  85:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 286              		.loc 1 85 4 is_stmt 0 view .LVU69
 287 0086 0128     		cmp	r0, #1
  84:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 288              		.loc 1 84 1 view .LVU70
 289 0088 08B5     		push	{r3, lr}
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 3, -8
 293              		.cfi_offset 14, -4
  85:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 294              		.loc 1 85 4 view .LVU71
 295 008a 03D8     		bhi	.L18
  88:boards/TMC2041_eval.c **** 
 296              		.loc 1 88 2 is_stmt 1 view .LVU72
 297 008c FFF7FEFF 		bl	StepDir_rotate
 298              	.LVL22:
  90:boards/TMC2041_eval.c **** }
 299              		.loc 1 90 2 view .LVU73
  90:boards/TMC2041_eval.c **** }
 300              		.loc 1 90 9 is_stmt 0 view .LVU74
 301 0090 0020     		movs	r0, #0
 302              	.L16:
  91:boards/TMC2041_eval.c **** 
 303              		.loc 1 91 1 view .LVU75
 304 0092 08BD     		pop	{r3, pc}
 305              	.LVL23:
 306              	.L18:
  86:boards/TMC2041_eval.c **** 
 307              		.loc 1 86 10 view .LVU76
 308 0094 0820     		movs	r0, #8
 309              	.LVL24:
  86:boards/TMC2041_eval.c **** 
 310              		.loc 1 86 10 view .LVU77
 311 0096 FCE7     		b	.L16
 312              		.cfi_endproc
 313              	.LFE4:
 315              		.align	1
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu softvfp
 321              	stop:
 322              	.LVL25:
 323              	.LFB7:
 104:boards/TMC2041_eval.c **** 	return rotate(motor, 0);
 324              		.loc 1 104 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 105:boards/TMC2041_eval.c **** }
 329              		.loc 1 105 2 view .LVU79
 105:boards/TMC2041_eval.c **** }
 330              		.loc 1 105 9 is_stmt 0 view .LVU80
 331 0098 0021     		movs	r1, #0
 332 009a F4E7     		b	rotate
 333              	.LVL26:
 105:boards/TMC2041_eval.c **** }
 334              		.loc 1 105 9 view .LVU81
 335              		.cfi_endproc
 336              	.LFE7:
 338              		.align	1
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 344              	left:
 345              	.LVL27:
 346              	.LFB6:
  99:boards/TMC2041_eval.c **** 	return rotate(motor, -velocity);
 347              		.loc 1 99 1 is_stmt 1 view -0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              		@ link register save eliminated.
 100:boards/TMC2041_eval.c **** }
 352              		.loc 1 100 2 view .LVU83
 100:boards/TMC2041_eval.c **** }
 353              		.loc 1 100 9 is_stmt 0 view .LVU84
 354 009c 4942     		rsbs	r1, r1, #0
 355              	.LVL28:
 100:boards/TMC2041_eval.c **** }
 356              		.loc 1 100 9 view .LVU85
 357 009e F2E7     		b	rotate
 358              	.LVL29:
 100:boards/TMC2041_eval.c **** }
 359              		.loc 1 100 9 view .LVU86
 360              		.cfi_endproc
 361              	.LFE6:
 363              		.align	1
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu softvfp
 369              	right:
 370              	.LVL30:
 371              	.LFB5:
  94:boards/TMC2041_eval.c **** 	return rotate(motor, velocity);
 372              		.loc 1 94 1 is_stmt 1 view -0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              		@ link register save eliminated.
  95:boards/TMC2041_eval.c **** }
 377              		.loc 1 95 2 view .LVU88
  95:boards/TMC2041_eval.c **** }
 378              		.loc 1 95 9 is_stmt 0 view .LVU89
 379 00a0 F1E7     		b	rotate
 380              	.LVL31:
  95:boards/TMC2041_eval.c **** }
 381              		.loc 1 95 9 view .LVU90
 382              		.cfi_endproc
 383              	.LFE5:
 385              		.align	1
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	handleParameter:
 392              	.LVL32:
 393              	.LFB10:
 130:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 394              		.loc 1 130 1 is_stmt 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 134:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 398              		.loc 1 134 4 is_stmt 0 view .LVU92
 399 00a2 0129     		cmp	r1, #1
 130:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 400              		.loc 1 130 1 view .LVU93
 401 00a4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 402              	.LCFI5:
 403              		.cfi_def_cfa_offset 24
 404              		.cfi_offset 4, -24
 405              		.cfi_offset 5, -20
 406              		.cfi_offset 6, -16
 407              		.cfi_offset 7, -12
 408              		.cfi_offset 8, -8
 409              		.cfi_offset 14, -4
 130:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 410              		.loc 1 130 1 view .LVU94
 411 00a8 0546     		mov	r5, r0
 131:boards/TMC2041_eval.c **** 	int tempValue;
 412              		.loc 1 131 2 is_stmt 1 view .LVU95
 413              	.LVL33:
 132:boards/TMC2041_eval.c **** 
 414              		.loc 1 132 2 view .LVU96
 134:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 415              		.loc 1 134 2 view .LVU97
 130:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 416              		.loc 1 130 1 is_stmt 0 view .LVU98
 417 00aa 1E46     		mov	r6, r3
 418 00ac 0846     		mov	r0, r1
 419              	.LVL34:
 134:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 420              		.loc 1 134 4 view .LVU99
 421 00ae 00F21F83 		bhi	.L108
 137:boards/TMC2041_eval.c **** 	{
 422              		.loc 1 137 2 is_stmt 1 view .LVU100
 423 00b2 CE2A     		cmp	r2, #206
 424 00b4 0CD8     		bhi	.L117
 425 00b6 A12A     		cmp	r2, #161
 426 00b8 0CD8     		bhi	.L24
 427 00ba 1D2A     		cmp	r2, #29
 428 00bc 6AD9     		bls	.L118
 429 00be 332A     		cmp	r2, #51
 430 00c0 00F03A81 		beq	.L58
 431 00c4 8C2A     		cmp	r2, #140
 432 00c6 00F03F81 		beq	.L59
 433 00ca 322A     		cmp	r2, #50
 434 00cc 00F02C81 		beq	.L60
 435              	.LVL35:
 436              	.L117:
 170:boards/TMC2041_eval.c **** 		}
 437              		.loc 1 170 11 is_stmt 0 view .LVU101
 438 00d0 0425     		movs	r5, #4
 439              	.LVL36:
 170:boards/TMC2041_eval.c **** 		}
 440              		.loc 1 170 11 view .LVU102
 441 00d2 A5E0     		b	.L22
 442              	.LVL37:
 443              	.L24:
 170:boards/TMC2041_eval.c **** 		}
 444              		.loc 1 170 11 view .LVU103
 445 00d4 A23A     		subs	r2, r2, #162
 446              	.LVL38:
 170:boards/TMC2041_eval.c **** 		}
 447              		.loc 1 170 11 view .LVU104
 448 00d6 2C2A     		cmp	r2, #44
 449 00d8 FAD8     		bhi	.L117
 450 00da 01A3     		adr	r3, .L28
 451 00dc 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 452              	.LVL39:
 453              		.p2align 2
 454              	.L28:
 455 00e0 DD030000 		.word	.L45+1
 456 00e4 07040000 		.word	.L44+1
 457 00e8 31040000 		.word	.L43+1
 458 00ec 5B040000 		.word	.L42+1
 459 00f0 DD040000 		.word	.L41+1
 460 00f4 1B050000 		.word	.L40+1
 461 00f8 35050000 		.word	.L39+1
 462 00fc 61050000 		.word	.L38+1
 463 0100 8B050000 		.word	.L37+1
 464 0104 B5050000 		.word	.L36+1
 465 0108 DF050000 		.word	.L35+1
 466 010c F7050000 		.word	.L34+1
 467 0110 21060000 		.word	.L33+1
 468 0114 D1000000 		.word	.L117+1
 469 0118 D1000000 		.word	.L117+1
 470 011c D1000000 		.word	.L117+1
 471 0120 D1000000 		.word	.L117+1
 472 0124 59060000 		.word	.L32+1
 473 0128 83060000 		.word	.L31+1
 474 012c 9D060000 		.word	.L30+1
 475 0130 D1000000 		.word	.L117+1
 476 0134 D1000000 		.word	.L117+1
 477 0138 AD060000 		.word	.L29+1
 478 013c D1000000 		.word	.L117+1
 479 0140 D1000000 		.word	.L117+1
 480 0144 D1000000 		.word	.L117+1
 481 0148 D1000000 		.word	.L117+1
 482 014c D1000000 		.word	.L117+1
 483 0150 D1000000 		.word	.L117+1
 484 0154 D1000000 		.word	.L117+1
 485 0158 D1000000 		.word	.L117+1
 486 015c D1000000 		.word	.L117+1
 487 0160 D1000000 		.word	.L117+1
 488 0164 D1000000 		.word	.L117+1
 489 0168 D1000000 		.word	.L117+1
 490 016c D1000000 		.word	.L117+1
 491 0170 D1000000 		.word	.L117+1
 492 0174 D1000000 		.word	.L117+1
 493 0178 D1000000 		.word	.L117+1
 494 017c D1000000 		.word	.L117+1
 495 0180 D1000000 		.word	.L117+1
 496 0184 D1000000 		.word	.L117+1
 497 0188 D1000000 		.word	.L117+1
 498 018c D1000000 		.word	.L117+1
 499 0190 D7060000 		.word	.L27+1
 500              		.p2align 1
 501              	.L118:
 170:boards/TMC2041_eval.c **** 		}
 502              		.loc 1 170 11 view .LVU105
 503 0194 1D2A     		cmp	r2, #29
 504 0196 9BD8     		bhi	.L117
 505 0198 01A3     		adr	r3, .L47
 506 019a 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 507              	.LVL40:
 508 019e 00BF     		.p2align 2
 509              	.L47:
 510 01a0 19020000 		.word	.L57+1
 511 01a4 31020000 		.word	.L56+1
 512 01a8 41020000 		.word	.L55+1
 513 01ac 51020000 		.word	.L54+1
 514 01b0 5D020000 		.word	.L53+1
 515 01b4 73020000 		.word	.L52+1
 516 01b8 83020000 		.word	.L51+1
 517 01bc B1020000 		.word	.L50+1
 518 01c0 E5020000 		.word	.L49+1
 519 01c4 D1000000 		.word	.L117+1
 520 01c8 D1000000 		.word	.L117+1
 521 01cc D1000000 		.word	.L117+1
 522 01d0 D1000000 		.word	.L117+1
 523 01d4 D1000000 		.word	.L117+1
 524 01d8 D1000000 		.word	.L117+1
 525 01dc D1000000 		.word	.L117+1
 526 01e0 D1000000 		.word	.L117+1
 527 01e4 D1000000 		.word	.L117+1
 528 01e8 D1000000 		.word	.L117+1
 529 01ec D1000000 		.word	.L117+1
 530 01f0 D1000000 		.word	.L117+1
 531 01f4 D1000000 		.word	.L117+1
 532 01f8 D1000000 		.word	.L117+1
 533 01fc D1000000 		.word	.L117+1
 534 0200 D1000000 		.word	.L117+1
 535 0204 D1000000 		.word	.L117+1
 536 0208 D1000000 		.word	.L117+1
 537 020c D1000000 		.word	.L117+1
 538 0210 F5020000 		.word	.L48+1
 539 0214 1F030000 		.word	.L46+1
 540              		.p2align 1
 541              	.L57:
 141:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 542              		.loc 1 141 3 is_stmt 1 view .LVU106
 141:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 543              		.loc 1 141 5 is_stmt 0 view .LVU107
 544 0218 2DB9     		cbnz	r5, .L61
 142:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 545              		.loc 1 142 4 is_stmt 1 view .LVU108
 142:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 546              		.loc 1 142 13 is_stmt 0 view .LVU109
 547 021a FFF7FEFF 		bl	StepDir_getTargetPosition
 548              	.LVL41:
 549              	.L120:
 150:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 550              		.loc 1 150 11 view .LVU110
 551 021e 3060     		str	r0, [r6]
 552              	.LVL42:
 553              	.L22:
 450:boards/TMC2041_eval.c **** 
 554              		.loc 1 450 1 view .LVU111
 555 0220 2846     		mov	r0, r5
 556 0222 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 557              	.LVL43:
 558              	.L61:
 143:boards/TMC2041_eval.c **** 			StepDir_moveTo(motor, *value);
 559              		.loc 1 143 10 is_stmt 1 view .LVU112
 144:boards/TMC2041_eval.c **** 		}
 560              		.loc 1 144 4 view .LVU113
 561 0226 3168     		ldr	r1, [r6]
 562              	.LVL44:
 144:boards/TMC2041_eval.c **** 		}
 563              		.loc 1 144 4 is_stmt 0 view .LVU114
 564 0228 FFF7FEFF 		bl	StepDir_moveTo
 565              	.LVL45:
 566              	.L122:
 131:boards/TMC2041_eval.c **** 	int tempValue;
 567              		.loc 1 131 11 view .LVU115
 568 022c 0025     		movs	r5, #0
 569 022e F7E7     		b	.L22
 570              	.LVL46:
 571              	.L56:
 149:boards/TMC2041_eval.c **** 			*value = StepDir_getActualPosition(motor);
 572              		.loc 1 149 3 is_stmt 1 view .LVU116
 149:boards/TMC2041_eval.c **** 			*value = StepDir_getActualPosition(motor);
 573              		.loc 1 149 5 is_stmt 0 view .LVU117
 574 0230 15B9     		cbnz	r5, .L62
 150:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 575              		.loc 1 150 4 is_stmt 1 view .LVU118
 150:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 576              		.loc 1 150 13 is_stmt 0 view .LVU119
 577 0232 FFF7FEFF 		bl	StepDir_getActualPosition
 578              	.LVL47:
 150:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 579              		.loc 1 150 13 view .LVU120
 580 0236 F2E7     		b	.L120
 581              	.LVL48:
 582              	.L62:
 151:boards/TMC2041_eval.c **** 			StepDir_setActualPosition(motor, *value);
 583              		.loc 1 151 10 is_stmt 1 view .LVU121
 152:boards/TMC2041_eval.c **** 		}
 584              		.loc 1 152 4 view .LVU122
 585 0238 3168     		ldr	r1, [r6]
 586              	.LVL49:
 152:boards/TMC2041_eval.c **** 		}
 587              		.loc 1 152 4 is_stmt 0 view .LVU123
 588 023a FFF7FEFF 		bl	StepDir_setActualPosition
 589              	.LVL50:
 152:boards/TMC2041_eval.c **** 		}
 590              		.loc 1 152 4 view .LVU124
 591 023e F5E7     		b	.L122
 592              	.LVL51:
 593              	.L55:
 158:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 594              		.loc 1 158 3 is_stmt 1 view .LVU125
 158:boards/TMC2041_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 595              		.loc 1 158 5 is_stmt 0 view .LVU126
 596 0240 15B9     		cbnz	r5, .L63
 159:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 597              		.loc 1 159 4 is_stmt 1 view .LVU127
 159:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 598              		.loc 1 159 13 is_stmt 0 view .LVU128
 599 0242 FFF7FEFF 		bl	StepDir_getTargetVelocity
 600              	.LVL52:
 159:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 601              		.loc 1 159 13 view .LVU129
 602 0246 EAE7     		b	.L120
 603              	.LVL53:
 604              	.L63:
 160:boards/TMC2041_eval.c **** 			StepDir_rotate(motor, *value);
 605              		.loc 1 160 10 is_stmt 1 view .LVU130
 161:boards/TMC2041_eval.c **** 		}
 606              		.loc 1 161 4 view .LVU131
 607 0248 3168     		ldr	r1, [r6]
 608              	.LVL54:
 161:boards/TMC2041_eval.c **** 		}
 609              		.loc 1 161 4 is_stmt 0 view .LVU132
 610 024a FFF7FEFF 		bl	StepDir_rotate
 611              	.LVL55:
 161:boards/TMC2041_eval.c **** 		}
 612              		.loc 1 161 4 view .LVU133
 613 024e EDE7     		b	.L122
 614              	.LVL56:
 615              	.L54:
 167:boards/TMC2041_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 616              		.loc 1 167 3 is_stmt 1 view .LVU134
 167:boards/TMC2041_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 617              		.loc 1 167 5 is_stmt 0 view .LVU135
 618 0250 002D     		cmp	r5, #0
 619 0252 7FF43DAF 		bne	.L117
 620              	.L126:
 223:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 621              		.loc 1 223 13 view .LVU136
 622 0256 FFF7FEFF 		bl	StepDir_getActualVelocity
 623              	.LVL57:
 223:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 624              		.loc 1 223 13 view .LVU137
 625 025a E0E7     		b	.L120
 626              	.LVL58:
 627              	.L53:
 175:boards/TMC2041_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 628              		.loc 1 175 3 is_stmt 1 view .LVU138
 175:boards/TMC2041_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 629              		.loc 1 175 5 is_stmt 0 view .LVU139
 630 025c 15B9     		cbnz	r5, .L64
 176:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 631              		.loc 1 176 4 is_stmt 1 view .LVU140
 176:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 632              		.loc 1 176 13 is_stmt 0 view .LVU141
 633 025e FFF7FEFF 		bl	StepDir_getVelocityMax
 634              	.LVL59:
 176:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 635              		.loc 1 176 13 view .LVU142
 636 0262 DCE7     		b	.L120
 637              	.LVL60:
 638              	.L64:
 177:boards/TMC2041_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 639              		.loc 1 177 10 is_stmt 1 view .LVU143
 178:boards/TMC2041_eval.c **** 		}
 640              		.loc 1 178 4 view .LVU144
 641 0264 3168     		ldr	r1, [r6]
 642              	.LVL61:
 178:boards/TMC2041_eval.c **** 		}
 643              		.loc 1 178 4 is_stmt 0 view .LVU145
 644 0266 0029     		cmp	r1, #0
 645 0268 B8BF     		it	lt
 646 026a 4942     		rsblt	r1, r1, #0
 647 026c FFF7FEFF 		bl	StepDir_setVelocityMax
 648              	.LVL62:
 178:boards/TMC2041_eval.c **** 		}
 649              		.loc 1 178 4 view .LVU146
 650 0270 DCE7     		b	.L122
 651              	.LVL63:
 652              	.L52:
 183:boards/TMC2041_eval.c **** 			*value = StepDir_getAcceleration(motor);
 653              		.loc 1 183 3 is_stmt 1 view .LVU147
 183:boards/TMC2041_eval.c **** 			*value = StepDir_getAcceleration(motor);
 654              		.loc 1 183 5 is_stmt 0 view .LVU148
 655 0272 15B9     		cbnz	r5, .L65
 184:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 656              		.loc 1 184 4 is_stmt 1 view .LVU149
 184:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 657              		.loc 1 184 13 is_stmt 0 view .LVU150
 658 0274 FFF7FEFF 		bl	StepDir_getAcceleration
 659              	.LVL64:
 184:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 660              		.loc 1 184 13 view .LVU151
 661 0278 D1E7     		b	.L120
 662              	.LVL65:
 663              	.L65:
 185:boards/TMC2041_eval.c **** 			StepDir_setAcceleration(motor, *value);
 664              		.loc 1 185 10 is_stmt 1 view .LVU152
 186:boards/TMC2041_eval.c **** 		}
 665              		.loc 1 186 4 view .LVU153
 666 027a 3168     		ldr	r1, [r6]
 667              	.LVL66:
 186:boards/TMC2041_eval.c **** 		}
 668              		.loc 1 186 4 is_stmt 0 view .LVU154
 669 027c FFF7FEFF 		bl	StepDir_setAcceleration
 670              	.LVL67:
 186:boards/TMC2041_eval.c **** 		}
 671              		.loc 1 186 4 view .LVU155
 672 0280 D4E7     		b	.L122
 673              	.LVL68:
 674              	.L51:
 191:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2
 675              		.loc 1 191 3 is_stmt 1 view .LVU156
 676 0282 2021     		movs	r1, #32
 677              	.LVL69:
 191:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2
 678              		.loc 1 191 3 is_stmt 0 view .LVU157
 679 0284 8140     		lsls	r1, r1, r0
 680 0286 41F01004 		orr	r4, r1, #16
 681 028a E4B2     		uxtb	r4, r4
 192:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 682              		.loc 1 192 13 view .LVU158
 683 028c AF48     		ldr	r0, .L130
 684 028e 2146     		mov	r1, r4
 191:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2
 685              		.loc 1 191 5 view .LVU159
 686 0290 25B9     		cbnz	r5, .L66
 192:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 687              		.loc 1 192 4 is_stmt 1 view .LVU160
 688              	.LBB157:
 689              	.LBI157:
  59:boards/TMC2041_eval.c **** {
 690              		.loc 1 59 31 view .LVU161
 691              	.LVL70:
  59:boards/TMC2041_eval.c **** {
 692              		.loc 1 59 31 is_stmt 0 view .LVU162
 693              	.LBE157:
  61:boards/TMC2041_eval.c **** 
 694              		.loc 1 61 2 is_stmt 1 view .LVU163
  63:boards/TMC2041_eval.c **** }
 695              		.loc 1 63 2 view .LVU164
 192:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 696              		.loc 1 192 13 is_stmt 0 view .LVU165
 697 0292 FFF7FEFF 		bl	tmc2041_readInt
 698              	.LVL71:
 192:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 699              		.loc 1 192 13 view .LVU166
 700 0296 C0F30420 		ubfx	r0, r0, #8, #5
 701 029a C0E7     		b	.L120
 702              	.LVL72:
 703              	.L66:
 193:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2041_IRUN
 704              		.loc 1 193 10 is_stmt 1 view .LVU167
 194:boards/TMC2041_eval.c **** 		}
 705              		.loc 1 194 4 view .LVU168
 706              	.LBB158:
 707              	.LBI158:
  59:boards/TMC2041_eval.c **** {
 708              		.loc 1 59 31 view .LVU169
  59:boards/TMC2041_eval.c **** {
 709              		.loc 1 59 31 is_stmt 0 view .LVU170
 710              	.LBE158:
  61:boards/TMC2041_eval.c **** 
 711              		.loc 1 61 2 is_stmt 1 view .LVU171
  63:boards/TMC2041_eval.c **** }
 712              		.loc 1 63 2 view .LVU172
 713              	.LBB159:
 714              	.LBI159:
  59:boards/TMC2041_eval.c **** {
 715              		.loc 1 59 31 view .LVU173
  59:boards/TMC2041_eval.c **** {
 716              		.loc 1 59 31 is_stmt 0 view .LVU174
 717              	.LBE159:
  61:boards/TMC2041_eval.c **** 
 718              		.loc 1 61 2 is_stmt 1 view .LVU175
  63:boards/TMC2041_eval.c **** }
 719              		.loc 1 63 2 view .LVU176
 194:boards/TMC2041_eval.c **** 		}
 720              		.loc 1 194 4 is_stmt 0 view .LVU177
 721 029c FFF7FEFF 		bl	tmc2041_readInt
 722              	.LVL73:
 194:boards/TMC2041_eval.c **** 		}
 723              		.loc 1 194 4 view .LVU178
 724 02a0 3368     		ldr	r3, [r6]
 725 02a2 1B02     		lsls	r3, r3, #8
 726 02a4 03F4F853 		and	r3, r3, #7936
 727 02a8 20F4F852 		bic	r2, r0, #7936
 728              	.L121:
 262:boards/TMC2041_eval.c **** 			}
 729              		.loc 1 262 5 view .LVU179
 730 02ac 1A43     		orrs	r2, r2, r3
 731 02ae 14E0     		b	.L123
 732              	.LVL74:
 733              	.L50:
 199:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC
 734              		.loc 1 199 3 is_stmt 1 view .LVU180
 735 02b0 2021     		movs	r1, #32
 736              	.LVL75:
 199:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC
 737              		.loc 1 199 3 is_stmt 0 view .LVU181
 738 02b2 8140     		lsls	r1, r1, r0
 739 02b4 41F01004 		orr	r4, r1, #16
 740 02b8 E4B2     		uxtb	r4, r4
 200:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 741              		.loc 1 200 13 view .LVU182
 742 02ba A448     		ldr	r0, .L130
 743 02bc 2146     		mov	r1, r4
 199:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC
 744              		.loc 1 199 5 view .LVU183
 745 02be 25B9     		cbnz	r5, .L67
 200:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 746              		.loc 1 200 4 is_stmt 1 view .LVU184
 747              	.LBB160:
 748              	.LBI160:
  59:boards/TMC2041_eval.c **** {
 749              		.loc 1 59 31 view .LVU185
 750              	.LVL76:
  59:boards/TMC2041_eval.c **** {
 751              		.loc 1 59 31 is_stmt 0 view .LVU186
 752              	.LBE160:
  61:boards/TMC2041_eval.c **** 
 753              		.loc 1 61 2 is_stmt 1 view .LVU187
  63:boards/TMC2041_eval.c **** }
 754              		.loc 1 63 2 view .LVU188
 200:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 755              		.loc 1 200 13 is_stmt 0 view .LVU189
 756 02c0 FFF7FEFF 		bl	tmc2041_readInt
 757              	.LVL77:
 200:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 758              		.loc 1 200 13 view .LVU190
 759 02c4 00F01F00 		and	r0, r0, #31
 760 02c8 A9E7     		b	.L120
 761              	.LVL78:
 762              	.L67:
 201:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC2041_IHO
 763              		.loc 1 201 10 is_stmt 1 view .LVU191
 202:boards/TMC2041_eval.c **** 		}
 764              		.loc 1 202 4 view .LVU192
 765              	.LBB161:
 766              	.LBI161:
  59:boards/TMC2041_eval.c **** {
 767              		.loc 1 59 31 view .LVU193
  59:boards/TMC2041_eval.c **** {
 768              		.loc 1 59 31 is_stmt 0 view .LVU194
 769              	.LBE161:
  61:boards/TMC2041_eval.c **** 
 770              		.loc 1 61 2 is_stmt 1 view .LVU195
  63:boards/TMC2041_eval.c **** }
 771              		.loc 1 63 2 view .LVU196
 772              	.LBB162:
 773              	.LBI162:
  59:boards/TMC2041_eval.c **** {
 774              		.loc 1 59 31 view .LVU197
  59:boards/TMC2041_eval.c **** {
 775              		.loc 1 59 31 is_stmt 0 view .LVU198
 776              	.LBE162:
  61:boards/TMC2041_eval.c **** 
 777              		.loc 1 61 2 is_stmt 1 view .LVU199
  63:boards/TMC2041_eval.c **** }
 778              		.loc 1 63 2 view .LVU200
 202:boards/TMC2041_eval.c **** 		}
 779              		.loc 1 202 4 is_stmt 0 view .LVU201
 780 02ca FFF7FEFF 		bl	tmc2041_readInt
 781              	.LVL79:
 202:boards/TMC2041_eval.c **** 		}
 782              		.loc 1 202 4 view .LVU202
 783 02ce 3268     		ldr	r2, [r6]
 784 02d0 20F01F00 		bic	r0, r0, #31
 785 02d4 02F01F02 		and	r2, r2, #31
 786              	.L127:
 385:boards/TMC2041_eval.c **** 		}
 787              		.loc 1 385 4 view .LVU203
 788 02d8 0243     		orrs	r2, r2, r0
 789              	.L123:
 262:boards/TMC2041_eval.c **** 			}
 790              		.loc 1 262 5 view .LVU204
 791 02da 9C48     		ldr	r0, .L130
 792 02dc 2146     		mov	r1, r4
 793 02de FFF7FEFF 		bl	tmc2041_writeInt
 794              	.LVL80:
 795 02e2 A3E7     		b	.L122
 796              	.LVL81:
 797              	.L49:
 207:boards/TMC2041_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 798              		.loc 1 207 3 is_stmt 1 view .LVU205
 207:boards/TMC2041_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 799              		.loc 1 207 5 is_stmt 0 view .LVU206
 800 02e4 002D     		cmp	r5, #0
 801 02e6 7FF4F3AE 		bne	.L117
 208:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 802              		.loc 1 208 4 is_stmt 1 view .LVU207
 208:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 803              		.loc 1 208 14 is_stmt 0 view .LVU208
 804 02ea FFF7FEFF 		bl	StepDir_getStatus
 805              	.LVL82:
 208:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 806              		.loc 1 208 66 view .LVU209
 807 02ee C0F30010 		ubfx	r0, r0, #4, #1
 808 02f2 94E7     		b	.L120
 809              	.LVL83:
 810              	.L48:
 214:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC
 811              		.loc 1 214 3 is_stmt 1 view .LVU210
 812 02f4 0C01     		lsls	r4, r1, #4
 813 02f6 44F06C04 		orr	r4, r4, #108
 814 02fa E4B2     		uxtb	r4, r4
 215:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 815              		.loc 1 215 13 is_stmt 0 view .LVU211
 816 02fc 9348     		ldr	r0, .L130
 817 02fe 2146     		mov	r1, r4
 818              	.LVL84:
 214:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC
 819              		.loc 1 214 5 view .LVU212
 820 0300 25B9     		cbnz	r5, .L68
 215:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 821              		.loc 1 215 4 is_stmt 1 view .LVU213
 822              	.LBB163:
 823              	.LBI163:
  59:boards/TMC2041_eval.c **** {
 824              		.loc 1 59 31 view .LVU214
 825              	.LVL85:
  59:boards/TMC2041_eval.c **** {
 826              		.loc 1 59 31 is_stmt 0 view .LVU215
 827              	.LBE163:
  61:boards/TMC2041_eval.c **** 
 828              		.loc 1 61 2 is_stmt 1 view .LVU216
  63:boards/TMC2041_eval.c **** }
 829              		.loc 1 63 2 view .LVU217
 215:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 830              		.loc 1 215 13 is_stmt 0 view .LVU218
 831 0302 FFF7FEFF 		bl	tmc2041_readInt
 832              	.LVL86:
 215:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 833              		.loc 1 215 13 view .LVU219
 834 0306 C0F38040 		ubfx	r0, r0, #18, #1
 835 030a 88E7     		b	.L120
 836              	.LVL87:
 837              	.L68:
 216:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC2041_VHI
 838              		.loc 1 216 10 is_stmt 1 view .LVU220
 217:boards/TMC2041_eval.c **** 		}
 839              		.loc 1 217 4 view .LVU221
 840              	.LBB164:
 841              	.LBI164:
  59:boards/TMC2041_eval.c **** {
 842              		.loc 1 59 31 view .LVU222
  59:boards/TMC2041_eval.c **** {
 843              		.loc 1 59 31 is_stmt 0 view .LVU223
 844              	.LBE164:
  61:boards/TMC2041_eval.c **** 
 845              		.loc 1 61 2 is_stmt 1 view .LVU224
  63:boards/TMC2041_eval.c **** }
 846              		.loc 1 63 2 view .LVU225
 847              	.LBB165:
 848              	.LBI165:
  59:boards/TMC2041_eval.c **** {
 849              		.loc 1 59 31 view .LVU226
  59:boards/TMC2041_eval.c **** {
 850              		.loc 1 59 31 is_stmt 0 view .LVU227
 851              	.LBE165:
  61:boards/TMC2041_eval.c **** 
 852              		.loc 1 61 2 is_stmt 1 view .LVU228
  63:boards/TMC2041_eval.c **** }
 853              		.loc 1 63 2 view .LVU229
 217:boards/TMC2041_eval.c **** 		}
 854              		.loc 1 217 4 is_stmt 0 view .LVU230
 855 030c FFF7FEFF 		bl	tmc2041_readInt
 856              	.LVL88:
 217:boards/TMC2041_eval.c **** 		}
 857              		.loc 1 217 4 view .LVU231
 858 0310 3368     		ldr	r3, [r6]
 859 0312 9B04     		lsls	r3, r3, #18
 860 0314 03F48023 		and	r3, r3, #262144
 861 0318 20F48022 		bic	r2, r0, #262144
 862 031c C6E7     		b	.L121
 863              	.LVL89:
 864              	.L46:
 221:boards/TMC2041_eval.c **** 			//*value = StepDir.ch1->actualVelocity;
 865              		.loc 1 221 3 is_stmt 1 view .LVU232
 221:boards/TMC2041_eval.c **** 			//*value = StepDir.ch1->actualVelocity;
 866              		.loc 1 221 5 is_stmt 0 view .LVU233
 867 031e 002D     		cmp	r5, #0
 868 0320 7FF4D6AE 		bne	.L117
 223:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 869              		.loc 1 223 4 is_stmt 1 view .LVU234
 223:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 870              		.loc 1 223 13 is_stmt 0 view .LVU235
 871 0324 2846     		mov	r0, r5
 872 0326 96E7     		b	.L126
 873              	.LVL90:
 874              	.L60:
 228:boards/TMC2041_eval.c **** 			*value = StepDir_getMode(motor);
 875              		.loc 1 228 3 is_stmt 1 view .LVU236
 228:boards/TMC2041_eval.c **** 			*value = StepDir_getMode(motor);
 876              		.loc 1 228 5 is_stmt 0 view .LVU237
 877 0328 15B9     		cbnz	r5, .L69
 229:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 878              		.loc 1 229 4 is_stmt 1 view .LVU238
 229:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 879              		.loc 1 229 13 is_stmt 0 view .LVU239
 880 032a FFF7FEFF 		bl	StepDir_getMode
 881              	.LVL91:
 229:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 882              		.loc 1 229 13 view .LVU240
 883 032e 76E7     		b	.L120
 884              	.LVL92:
 885              	.L69:
 230:boards/TMC2041_eval.c **** 			StepDir_setMode(motor, *value);
 886              		.loc 1 230 10 is_stmt 1 view .LVU241
 231:boards/TMC2041_eval.c **** 		}
 887              		.loc 1 231 4 view .LVU242
 888 0330 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 889              	.LVL93:
 231:boards/TMC2041_eval.c **** 		}
 890              		.loc 1 231 4 is_stmt 0 view .LVU243
 891 0332 FFF7FEFF 		bl	StepDir_setMode
 892              	.LVL94:
 231:boards/TMC2041_eval.c **** 		}
 893              		.loc 1 231 4 view .LVU244
 894 0336 79E7     		b	.L122
 895              	.LVL95:
 896              	.L58:
 235:boards/TMC2041_eval.c **** 			*value = StepDir_getFrequency(motor);
 897              		.loc 1 235 3 is_stmt 1 view .LVU245
 235:boards/TMC2041_eval.c **** 			*value = StepDir_getFrequency(motor);
 898              		.loc 1 235 5 is_stmt 0 view .LVU246
 899 0338 15B9     		cbnz	r5, .L70
 236:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 900              		.loc 1 236 4 is_stmt 1 view .LVU247
 236:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 901              		.loc 1 236 13 is_stmt 0 view .LVU248
 902 033a FFF7FEFF 		bl	StepDir_getFrequency
 903              	.LVL96:
 236:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 904              		.loc 1 236 13 view .LVU249
 905 033e 6EE7     		b	.L120
 906              	.LVL97:
 907              	.L70:
 237:boards/TMC2041_eval.c **** 			StepDir_setFrequency(motor, *value);
 908              		.loc 1 237 10 is_stmt 1 view .LVU250
 238:boards/TMC2041_eval.c **** 		}
 909              		.loc 1 238 4 view .LVU251
 910 0340 1968     		ldr	r1, [r3]
 911              	.LVL98:
 238:boards/TMC2041_eval.c **** 		}
 912              		.loc 1 238 4 is_stmt 0 view .LVU252
 913 0342 FFF7FEFF 		bl	StepDir_setFrequency
 914              	.LVL99:
 238:boards/TMC2041_eval.c **** 		}
 915              		.loc 1 238 4 view .LVU253
 916 0346 71E7     		b	.L122
 917              	.LVL100:
 918              	.L59:
 243:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC204
 919              		.loc 1 243 3 is_stmt 1 view .LVU254
 243:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC204
 920              		.loc 1 243 5 is_stmt 0 view .LVU255
 921 0348 55B9     		cbnz	r5, .L71
 244:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 922              		.loc 1 244 4 is_stmt 1 view .LVU256
 923              	.LBB166:
 924              	.LBI166:
  59:boards/TMC2041_eval.c **** {
 925              		.loc 1 59 31 view .LVU257
 926              	.LVL101:
  59:boards/TMC2041_eval.c **** {
 927              		.loc 1 59 31 is_stmt 0 view .LVU258
 928              	.LBE166:
  61:boards/TMC2041_eval.c **** 
 929              		.loc 1 61 2 is_stmt 1 view .LVU259
  63:boards/TMC2041_eval.c **** }
 930              		.loc 1 63 2 view .LVU260
 244:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 931              		.loc 1 244 13 is_stmt 0 view .LVU261
 932 034a 0901     		lsls	r1, r1, #4
 933              	.LVL102:
 244:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 934              		.loc 1 244 13 view .LVU262
 935 034c 41F06C01 		orr	r1, r1, #108
 936 0350 7E48     		ldr	r0, .L130
 937              	.LVL103:
 244:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 938              		.loc 1 244 13 view .LVU263
 939 0352 01F0FC01 		and	r1, r1, #252
 940 0356 FFF7FEFF 		bl	tmc2041_readInt
 941              	.LVL104:
 244:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 942              		.loc 1 244 13 view .LVU264
 943 035a C0F30360 		ubfx	r0, r0, #24, #4
 944 035e 5EE7     		b	.L120
 945              	.LVL105:
 946              	.L71:
 245:boards/TMC2041_eval.c **** 			switch(*value)
 947              		.loc 1 245 10 is_stmt 1 view .LVU265
 246:boards/TMC2041_eval.c **** 			{
 948              		.loc 1 246 4 view .LVU266
 246:boards/TMC2041_eval.c **** 			{
 949              		.loc 1 246 11 is_stmt 0 view .LVU267
 950 0360 1B68     		ldr	r3, [r3]
 951              	.LVL106:
 246:boards/TMC2041_eval.c **** 			{
 952              		.loc 1 246 11 view .LVU268
 953 0362 102B     		cmp	r3, #16
 954 0364 32D0     		beq	.L72
 955 0366 0ADC     		bgt	.L73
 956 0368 013B     		subs	r3, r3, #1
 957 036a 072B     		cmp	r3, #7
 958 036c 0ED8     		bhi	.L74
 959 036e 072B     		cmp	r3, #7
 960 0370 0CD8     		bhi	.L74
 961 0372 DFE803F0 		tbb	[pc, r3]
 962              	.LVL107:
 963              	.L76:
 964 0376 14       		.byte	(.L79-.L76)/2
 965 0377 25       		.byte	(.L78-.L76)/2
 966 0378 0B       		.byte	(.L74-.L76)/2
 967 0379 27       		.byte	(.L77-.L76)/2
 968 037a 0B       		.byte	(.L74-.L76)/2
 969 037b 0B       		.byte	(.L74-.L76)/2
 970 037c 0B       		.byte	(.L74-.L76)/2
 971 037d 29       		.byte	(.L75-.L76)/2
 972              		.p2align 1
 973              	.L73:
 246:boards/TMC2041_eval.c **** 			{
 974              		.loc 1 246 11 view .LVU269
 975 037e 802B     		cmp	r3, #128
 976 0380 2AD0     		beq	.L80
 977 0382 07DC     		bgt	.L81
 978 0384 202B     		cmp	r3, #32
 979 0386 23D0     		beq	.L82
 980 0388 402B     		cmp	r3, #64
 981 038a 23D0     		beq	.L83
 982              	.LVL108:
 983              	.L74:
 257:boards/TMC2041_eval.c **** 			}
 984              		.loc 1 257 15 is_stmt 1 view .LVU270
 257:boards/TMC2041_eval.c **** 			}
 985              		.loc 1 257 22 is_stmt 0 view .LVU271
 986 038c 4FF0FF33 		mov	r3, #-1
 987 0390 3360     		str	r3, [r6]
 257:boards/TMC2041_eval.c **** 			}
 988              		.loc 1 257 29 is_stmt 1 view .LVU272
 260:boards/TMC2041_eval.c **** 			{
 989              		.loc 1 260 4 view .LVU273
 990 0392 4BE7     		b	.L122
 991              	.LVL109:
 992              	.L81:
 260:boards/TMC2041_eval.c **** 			{
 993              		.loc 1 260 4 is_stmt 0 view .LVU274
 994 0394 B3F5807F 		cmp	r3, #256
 995 0398 F8D1     		bne	.L74
 256:boards/TMC2041_eval.c **** 			default:   *value = -1;  break;
 996              		.loc 1 256 15 is_stmt 1 view .LVU275
 256:boards/TMC2041_eval.c **** 			default:   *value = -1;  break;
 997              		.loc 1 256 22 is_stmt 0 view .LVU276
 998 039a 0023     		movs	r3, #0
 999 039c 00E0     		b	.L119
 1000              	.LVL110:
 1001              	.L79:
 248:boards/TMC2041_eval.c **** 			case 2:    *value = 7;   break;
 1002              		.loc 1 248 15 is_stmt 1 view .LVU277
 248:boards/TMC2041_eval.c **** 			case 2:    *value = 7;   break;
 1003              		.loc 1 248 22 is_stmt 0 view .LVU278
 1004 039e 0823     		movs	r3, #8
 1005              	.L119:
 262:boards/TMC2041_eval.c **** 			}
 1006              		.loc 1 262 5 view .LVU279
 1007 03a0 0401     		lsls	r4, r0, #4
 1008 03a2 44F06C04 		orr	r4, r4, #108
 1009 03a6 E4B2     		uxtb	r4, r4
 256:boards/TMC2041_eval.c **** 			default:   *value = -1;  break;
 1010              		.loc 1 256 22 view .LVU280
 1011 03a8 3360     		str	r3, [r6]
 256:boards/TMC2041_eval.c **** 			default:   *value = -1;  break;
 1012              		.loc 1 256 29 is_stmt 1 view .LVU281
 260:boards/TMC2041_eval.c **** 			{
 1013              		.loc 1 260 4 view .LVU282
 262:boards/TMC2041_eval.c **** 			}
 1014              		.loc 1 262 5 view .LVU283
 1015              	.LBB167:
 1016              	.LBI167:
  59:boards/TMC2041_eval.c **** {
 1017              		.loc 1 59 31 view .LVU284
 1018              	.LVL111:
  59:boards/TMC2041_eval.c **** {
 1019              		.loc 1 59 31 is_stmt 0 view .LVU285
 1020              	.LBE167:
  61:boards/TMC2041_eval.c **** 
 1021              		.loc 1 61 2 is_stmt 1 view .LVU286
  63:boards/TMC2041_eval.c **** }
 1022              		.loc 1 63 2 view .LVU287
 1023              	.LBB168:
 1024              	.LBI168:
  59:boards/TMC2041_eval.c **** {
 1025              		.loc 1 59 31 view .LVU288
  59:boards/TMC2041_eval.c **** {
 1026              		.loc 1 59 31 is_stmt 0 view .LVU289
 1027              	.LBE168:
  61:boards/TMC2041_eval.c **** 
 1028              		.loc 1 61 2 is_stmt 1 view .LVU290
  63:boards/TMC2041_eval.c **** }
 1029              		.loc 1 63 2 view .LVU291
 262:boards/TMC2041_eval.c **** 			}
 1030              		.loc 1 262 5 is_stmt 0 view .LVU292
 1031 03aa 6848     		ldr	r0, .L130
 1032              	.LVL112:
 262:boards/TMC2041_eval.c **** 			}
 1033              		.loc 1 262 5 view .LVU293
 1034 03ac 2146     		mov	r1, r4
 1035              	.LVL113:
 262:boards/TMC2041_eval.c **** 			}
 1036              		.loc 1 262 5 view .LVU294
 1037 03ae FFF7FEFF 		bl	tmc2041_readInt
 1038              	.LVL114:
 1039 03b2 3368     		ldr	r3, [r6]
 1040 03b4 1B06     		lsls	r3, r3, #24
 1041 03b6 03F07063 		and	r3, r3, #251658240
 1042 03ba 20F07062 		bic	r2, r0, #251658240
 1043 03be 75E7     		b	.L121
 1044              	.LVL115:
 1045              	.L78:
 249:boards/TMC2041_eval.c **** 			case 4:    *value = 6;   break;
 1046              		.loc 1 249 15 is_stmt 1 view .LVU295
 249:boards/TMC2041_eval.c **** 			case 4:    *value = 6;   break;
 1047              		.loc 1 249 22 is_stmt 0 view .LVU296
 1048 03c0 0723     		movs	r3, #7
 1049 03c2 EDE7     		b	.L119
 1050              	.L77:
 250:boards/TMC2041_eval.c **** 			case 8:    *value = 5;   break;
 1051              		.loc 1 250 15 is_stmt 1 view .LVU297
 250:boards/TMC2041_eval.c **** 			case 8:    *value = 5;   break;
 1052              		.loc 1 250 22 is_stmt 0 view .LVU298
 1053 03c4 0623     		movs	r3, #6
 1054 03c6 EBE7     		b	.L119
 1055              	.L75:
 251:boards/TMC2041_eval.c **** 			case 16:   *value = 4;   break;
 1056              		.loc 1 251 15 is_stmt 1 view .LVU299
 251:boards/TMC2041_eval.c **** 			case 16:   *value = 4;   break;
 1057              		.loc 1 251 22 is_stmt 0 view .LVU300
 1058 03c8 0523     		movs	r3, #5
 1059 03ca E9E7     		b	.L119
 1060              	.LVL116:
 1061              	.L72:
 252:boards/TMC2041_eval.c **** 			case 32:   *value = 3;   break;
 1062              		.loc 1 252 15 is_stmt 1 view .LVU301
 252:boards/TMC2041_eval.c **** 			case 32:   *value = 3;   break;
 1063              		.loc 1 252 22 is_stmt 0 view .LVU302
 1064 03cc 0423     		movs	r3, #4
 1065 03ce E7E7     		b	.L119
 1066              	.L82:
 253:boards/TMC2041_eval.c **** 			case 64:   *value = 2;   break;
 1067              		.loc 1 253 15 is_stmt 1 view .LVU303
 253:boards/TMC2041_eval.c **** 			case 64:   *value = 2;   break;
 1068              		.loc 1 253 22 is_stmt 0 view .LVU304
 1069 03d0 0323     		movs	r3, #3
 1070 03d2 E5E7     		b	.L119
 1071              	.L83:
 254:boards/TMC2041_eval.c **** 			case 128:  *value = 1;   break;
 1072              		.loc 1 254 15 is_stmt 1 view .LVU305
 254:boards/TMC2041_eval.c **** 			case 128:  *value = 1;   break;
 1073              		.loc 1 254 22 is_stmt 0 view .LVU306
 1074 03d4 0223     		movs	r3, #2
 1075 03d6 E3E7     		b	.L119
 1076              	.L80:
 255:boards/TMC2041_eval.c **** 			case 256:  *value = 0;   break;
 1077              		.loc 1 255 15 is_stmt 1 view .LVU307
 255:boards/TMC2041_eval.c **** 			case 256:  *value = 0;   break;
 1078              		.loc 1 255 22 is_stmt 0 view .LVU308
 1079 03d8 0123     		movs	r3, #1
 1080 03da E1E7     		b	.L119
 1081              	.LVL117:
 1082              	.L45:
 269:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041
 1083              		.loc 1 269 3 is_stmt 1 view .LVU309
 1084 03dc 0C01     		lsls	r4, r1, #4
 1085 03de 44F06C04 		orr	r4, r4, #108
 1086 03e2 E4B2     		uxtb	r4, r4
 270:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1087              		.loc 1 270 13 is_stmt 0 view .LVU310
 1088 03e4 5948     		ldr	r0, .L130
 1089 03e6 2146     		mov	r1, r4
 1090              	.LVL118:
 269:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041
 1091              		.loc 1 269 5 view .LVU311
 1092 03e8 25B9     		cbnz	r5, .L86
 270:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1093              		.loc 1 270 4 is_stmt 1 view .LVU312
 1094              	.LBB169:
 1095              	.LBI169:
  59:boards/TMC2041_eval.c **** {
 1096              		.loc 1 59 31 view .LVU313
 1097              	.LVL119:
  59:boards/TMC2041_eval.c **** {
 1098              		.loc 1 59 31 is_stmt 0 view .LVU314
 1099              	.LBE169:
  61:boards/TMC2041_eval.c **** 
 1100              		.loc 1 61 2 is_stmt 1 view .LVU315
  63:boards/TMC2041_eval.c **** }
 1101              		.loc 1 63 2 view .LVU316
 270:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1102              		.loc 1 270 13 is_stmt 0 view .LVU317
 1103 03ea FFF7FEFF 		bl	tmc2041_readInt
 1104              	.LVL120:
 1105 03ee C0F3C130 		ubfx	r0, r0, #15, #2
 1106 03f2 14E7     		b	.L120
 1107              	.L86:
 271:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041_TBL_SHI
 1108              		.loc 1 271 10 is_stmt 1 view .LVU318
 272:boards/TMC2041_eval.c **** 		}
 1109              		.loc 1 272 4 view .LVU319
 1110              	.LBB170:
 1111              	.LBI170:
  59:boards/TMC2041_eval.c **** {
 1112              		.loc 1 59 31 view .LVU320
 1113              	.LVL121:
  59:boards/TMC2041_eval.c **** {
 1114              		.loc 1 59 31 is_stmt 0 view .LVU321
 1115              	.LBE170:
  61:boards/TMC2041_eval.c **** 
 1116              		.loc 1 61 2 is_stmt 1 view .LVU322
  63:boards/TMC2041_eval.c **** }
 1117              		.loc 1 63 2 view .LVU323
 1118              	.LBB171:
 1119              	.LBI171:
  59:boards/TMC2041_eval.c **** {
 1120              		.loc 1 59 31 view .LVU324
  59:boards/TMC2041_eval.c **** {
 1121              		.loc 1 59 31 is_stmt 0 view .LVU325
 1122              	.LBE171:
  61:boards/TMC2041_eval.c **** 
 1123              		.loc 1 61 2 is_stmt 1 view .LVU326
  63:boards/TMC2041_eval.c **** }
 1124              		.loc 1 63 2 view .LVU327
 272:boards/TMC2041_eval.c **** 		}
 1125              		.loc 1 272 4 is_stmt 0 view .LVU328
 1126 03f4 FFF7FEFF 		bl	tmc2041_readInt
 1127              	.LVL122:
 1128 03f8 3368     		ldr	r3, [r6]
 1129 03fa DB03     		lsls	r3, r3, #15
 1130 03fc 03F4C033 		and	r3, r3, #98304
 1131 0400 20F4C032 		bic	r2, r0, #98304
 1132 0404 52E7     		b	.L121
 1133              	.LVL123:
 1134              	.L44:
 277:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041
 1135              		.loc 1 277 3 is_stmt 1 view .LVU329
 1136 0406 0C01     		lsls	r4, r1, #4
 1137 0408 44F06C04 		orr	r4, r4, #108
 1138 040c E4B2     		uxtb	r4, r4
 278:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1139              		.loc 1 278 13 is_stmt 0 view .LVU330
 1140 040e 4F48     		ldr	r0, .L130
 1141 0410 2146     		mov	r1, r4
 1142              	.LVL124:
 277:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041
 1143              		.loc 1 277 5 view .LVU331
 1144 0412 25B9     		cbnz	r5, .L87
 278:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1145              		.loc 1 278 4 is_stmt 1 view .LVU332
 1146              	.LBB172:
 1147              	.LBI172:
  59:boards/TMC2041_eval.c **** {
 1148              		.loc 1 59 31 view .LVU333
 1149              	.LVL125:
  59:boards/TMC2041_eval.c **** {
 1150              		.loc 1 59 31 is_stmt 0 view .LVU334
 1151              	.LBE172:
  61:boards/TMC2041_eval.c **** 
 1152              		.loc 1 61 2 is_stmt 1 view .LVU335
  63:boards/TMC2041_eval.c **** }
 1153              		.loc 1 63 2 view .LVU336
 278:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1154              		.loc 1 278 13 is_stmt 0 view .LVU337
 1155 0414 FFF7FEFF 		bl	tmc2041_readInt
 1156              	.LVL126:
 1157 0418 C0F38030 		ubfx	r0, r0, #14, #1
 1158 041c FFE6     		b	.L120
 1159              	.L87:
 279:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041_CHM_SHI
 1160              		.loc 1 279 10 is_stmt 1 view .LVU338
 280:boards/TMC2041_eval.c **** 		}
 1161              		.loc 1 280 4 view .LVU339
 1162              	.LBB173:
 1163              	.LBI173:
  59:boards/TMC2041_eval.c **** {
 1164              		.loc 1 59 31 view .LVU340
 1165              	.LVL127:
  59:boards/TMC2041_eval.c **** {
 1166              		.loc 1 59 31 is_stmt 0 view .LVU341
 1167              	.LBE173:
  61:boards/TMC2041_eval.c **** 
 1168              		.loc 1 61 2 is_stmt 1 view .LVU342
  63:boards/TMC2041_eval.c **** }
 1169              		.loc 1 63 2 view .LVU343
 1170              	.LBB174:
 1171              	.LBI174:
  59:boards/TMC2041_eval.c **** {
 1172              		.loc 1 59 31 view .LVU344
  59:boards/TMC2041_eval.c **** {
 1173              		.loc 1 59 31 is_stmt 0 view .LVU345
 1174              	.LBE174:
  61:boards/TMC2041_eval.c **** 
 1175              		.loc 1 61 2 is_stmt 1 view .LVU346
  63:boards/TMC2041_eval.c **** }
 1176              		.loc 1 63 2 view .LVU347
 280:boards/TMC2041_eval.c **** 		}
 1177              		.loc 1 280 4 is_stmt 0 view .LVU348
 1178 041e FFF7FEFF 		bl	tmc2041_readInt
 1179              	.LVL128:
 1180 0422 3368     		ldr	r3, [r6]
 1181 0424 9B03     		lsls	r3, r3, #14
 1182 0426 03F48043 		and	r3, r3, #16384
 1183 042a 20F48042 		bic	r2, r0, #16384
 1184 042e 3DE7     		b	.L121
 1185              	.LVL129:
 1186              	.L43:
 285:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC
 1187              		.loc 1 285 3 is_stmt 1 view .LVU349
 1188 0430 0C01     		lsls	r4, r1, #4
 1189 0432 44F06C04 		orr	r4, r4, #108
 1190 0436 E4B2     		uxtb	r4, r4
 286:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1191              		.loc 1 286 13 is_stmt 0 view .LVU350
 1192 0438 4448     		ldr	r0, .L130
 1193 043a 2146     		mov	r1, r4
 1194              	.LVL130:
 285:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC
 1195              		.loc 1 285 5 view .LVU351
 1196 043c 25B9     		cbnz	r5, .L88
 286:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1197              		.loc 1 286 4 is_stmt 1 view .LVU352
 1198              	.LBB175:
 1199              	.LBI175:
  59:boards/TMC2041_eval.c **** {
 1200              		.loc 1 59 31 view .LVU353
 1201              	.LVL131:
  59:boards/TMC2041_eval.c **** {
 1202              		.loc 1 59 31 is_stmt 0 view .LVU354
 1203              	.LBE175:
  61:boards/TMC2041_eval.c **** 
 1204              		.loc 1 61 2 is_stmt 1 view .LVU355
  63:boards/TMC2041_eval.c **** }
 1205              		.loc 1 63 2 view .LVU356
 286:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1206              		.loc 1 286 13 is_stmt 0 view .LVU357
 1207 043e FFF7FEFF 		bl	tmc2041_readInt
 1208              	.LVL132:
 1209 0442 C0F30030 		ubfx	r0, r0, #12, #1
 1210 0446 EAE6     		b	.L120
 1211              	.L88:
 287:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC2041_DIS
 1212              		.loc 1 287 10 is_stmt 1 view .LVU358
 288:boards/TMC2041_eval.c **** 		}
 1213              		.loc 1 288 4 view .LVU359
 1214              	.LBB176:
 1215              	.LBI176:
  59:boards/TMC2041_eval.c **** {
 1216              		.loc 1 59 31 view .LVU360
 1217              	.LVL133:
  59:boards/TMC2041_eval.c **** {
 1218              		.loc 1 59 31 is_stmt 0 view .LVU361
 1219              	.LBE176:
  61:boards/TMC2041_eval.c **** 
 1220              		.loc 1 61 2 is_stmt 1 view .LVU362
  63:boards/TMC2041_eval.c **** }
 1221              		.loc 1 63 2 view .LVU363
 1222              	.LBB177:
 1223              	.LBI177:
  59:boards/TMC2041_eval.c **** {
 1224              		.loc 1 59 31 view .LVU364
  59:boards/TMC2041_eval.c **** {
 1225              		.loc 1 59 31 is_stmt 0 view .LVU365
 1226              	.LBE177:
  61:boards/TMC2041_eval.c **** 
 1227              		.loc 1 61 2 is_stmt 1 view .LVU366
  63:boards/TMC2041_eval.c **** }
 1228              		.loc 1 63 2 view .LVU367
 288:boards/TMC2041_eval.c **** 		}
 1229              		.loc 1 288 4 is_stmt 0 view .LVU368
 1230 0448 FFF7FEFF 		bl	tmc2041_readInt
 1231              	.LVL134:
 1232 044c 3368     		ldr	r3, [r6]
 1233 044e 1B03     		lsls	r3, r3, #12
 1234 0450 03F48053 		and	r3, r3, #4096
 1235 0454 20F48052 		bic	r2, r0, #4096
 1236 0458 28E7     		b	.L121
 1237              	.LVL135:
 1238              	.L42:
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1239              		.loc 1 293 3 is_stmt 1 view .LVU369
 1240              	.LBB178:
 1241              	.LBI178:
  59:boards/TMC2041_eval.c **** {
 1242              		.loc 1 59 31 view .LVU370
  59:boards/TMC2041_eval.c **** {
 1243              		.loc 1 59 31 is_stmt 0 view .LVU371
 1244              	.LBE178:
  61:boards/TMC2041_eval.c **** 
 1245              		.loc 1 61 2 is_stmt 1 view .LVU372
  63:boards/TMC2041_eval.c **** }
 1246              		.loc 1 63 2 view .LVU373
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1247              		.loc 1 293 49 is_stmt 0 view .LVU374
 1248 045a 0C01     		lsls	r4, r1, #4
 1249 045c 44F06C04 		orr	r4, r4, #108
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1250              		.loc 1 293 15 view .LVU375
 1251 0460 E4B2     		uxtb	r4, r4
 1252 0462 2146     		mov	r1, r4
 1253              	.LVL136:
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1254              		.loc 1 293 15 view .LVU376
 1255 0464 3948     		ldr	r0, .L130
 1256              	.LVL137:
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1257              		.loc 1 293 15 view .LVU377
 1258 0466 FFF7FEFF 		bl	tmc2041_readInt
 1259              	.LVL138:
 297:boards/TMC2041_eval.c **** 			}
 1260              		.loc 1 297 14 view .LVU378
 1261 046a 2146     		mov	r1, r4
 293:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1262              		.loc 1 293 15 view .LVU379
 1263 046c 8046     		mov	r8, r0
 1264              	.LVL139:
 294:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
 1265              		.loc 1 294 3 is_stmt 1 view .LVU380
 1266 046e 00F48047 		and	r7, r0, #16384
 297:boards/TMC2041_eval.c **** 			}
 1267              		.loc 1 297 14 is_stmt 0 view .LVU381
 1268 0472 3648     		ldr	r0, .L130
 1269              	.LVL140:
 294:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
 1270              		.loc 1 294 5 view .LVU382
 1271 0474 85B9     		cbnz	r5, .L89
 295:boards/TMC2041_eval.c **** 			{
 1272              		.loc 1 295 4 is_stmt 1 view .LVU383
 295:boards/TMC2041_eval.c **** 			{
 1273              		.loc 1 295 6 is_stmt 0 view .LVU384
 1274 0476 27B1     		cbz	r7, .L90
 1275              	.LVL141:
 1276              	.L94:
 327:boards/TMC2041_eval.c **** 			}
 1277              		.loc 1 327 5 is_stmt 1 view .LVU385
 1278              	.LBB179:
 1279              	.LBI179:
  59:boards/TMC2041_eval.c **** {
 1280              		.loc 1 59 31 view .LVU386
  59:boards/TMC2041_eval.c **** {
 1281              		.loc 1 59 31 is_stmt 0 view .LVU387
 1282              	.LBE179:
  61:boards/TMC2041_eval.c **** 
 1283              		.loc 1 61 2 is_stmt 1 view .LVU388
  63:boards/TMC2041_eval.c **** }
 1284              		.loc 1 63 2 view .LVU389
 327:boards/TMC2041_eval.c **** 			}
 1285              		.loc 1 327 14 is_stmt 0 view .LVU390
 1286 0478 FFF7FEFF 		bl	tmc2041_readInt
 1287              	.LVL142:
 1288 047c C0F3C310 		ubfx	r0, r0, #7, #4
 1289 0480 CDE6     		b	.L120
 1290              	.LVL143:
 1291              	.L90:
 301:boards/TMC2041_eval.c **** 				if(tempValue & TMC2041_TFD_3_MASK) // add MSB of fast decay time to *value
 1292              		.loc 1 301 5 is_stmt 1 view .LVU391
 1293              	.LBB180:
 1294              	.LBI180:
  59:boards/TMC2041_eval.c **** {
 1295              		.loc 1 59 31 view .LVU392
  59:boards/TMC2041_eval.c **** {
 1296              		.loc 1 59 31 is_stmt 0 view .LVU393
 1297              	.LBE180:
  61:boards/TMC2041_eval.c **** 
 1298              		.loc 1 61 2 is_stmt 1 view .LVU394
  63:boards/TMC2041_eval.c **** }
 1299              		.loc 1 63 2 view .LVU395
 301:boards/TMC2041_eval.c **** 				if(tempValue & TMC2041_TFD_3_MASK) // add MSB of fast decay time to *value
 1300              		.loc 1 301 14 is_stmt 0 view .LVU396
 1301 0482 FFF7FEFF 		bl	tmc2041_readInt
 1302              	.LVL144:
 302:boards/TMC2041_eval.c **** 					*value |= 1<<3;
 1303              		.loc 1 302 7 view .LVU397
 1304 0486 18F4006F 		tst	r8, #2048
 301:boards/TMC2041_eval.c **** 				if(tempValue & TMC2041_TFD_3_MASK) // add MSB of fast decay time to *value
 1305              		.loc 1 301 14 view .LVU398
 1306 048a C0F30213 		ubfx	r3, r0, #4, #3
 302:boards/TMC2041_eval.c **** 					*value |= 1<<3;
 1307              		.loc 1 302 5 is_stmt 1 view .LVU399
 303:boards/TMC2041_eval.c **** 			}
 1308              		.loc 1 303 6 view .LVU400
 303:boards/TMC2041_eval.c **** 			}
 1309              		.loc 1 303 13 is_stmt 0 view .LVU401
 1310 048e 18BF     		it	ne
 1311 0490 43F00803 		orrne	r3, r3, #8
 1312 0494 3360     		str	r3, [r6]
 1313 0496 C3E6     		b	.L22
 1314              	.L89:
 305:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
 1315              		.loc 1 305 10 is_stmt 1 view .LVU402
 306:boards/TMC2041_eval.c **** 			{
 1316              		.loc 1 306 4 view .LVU403
 306:boards/TMC2041_eval.c **** 			{
 1317              		.loc 1 306 6 is_stmt 0 view .LVU404
 1318 0498 47B1     		cbz	r7, .L92
 1319              	.LVL145:
 1320              	.L95:
 336:boards/TMC2041_eval.c **** 			}
 1321              		.loc 1 336 5 is_stmt 1 view .LVU405
 1322              	.LBB181:
 1323              	.LBI181:
  59:boards/TMC2041_eval.c **** {
 1324              		.loc 1 59 31 view .LVU406
  59:boards/TMC2041_eval.c **** {
 1325              		.loc 1 59 31 is_stmt 0 view .LVU407
 1326              	.LBE181:
  61:boards/TMC2041_eval.c **** 
 1327              		.loc 1 61 2 is_stmt 1 view .LVU408
  63:boards/TMC2041_eval.c **** }
 1328              		.loc 1 63 2 view .LVU409
 1329              	.LBB182:
 1330              	.LBI182:
  59:boards/TMC2041_eval.c **** {
 1331              		.loc 1 59 31 view .LVU410
  59:boards/TMC2041_eval.c **** {
 1332              		.loc 1 59 31 is_stmt 0 view .LVU411
 1333              	.LBE182:
  61:boards/TMC2041_eval.c **** 
 1334              		.loc 1 61 2 is_stmt 1 view .LVU412
  63:boards/TMC2041_eval.c **** }
 1335              		.loc 1 63 2 view .LVU413
 336:boards/TMC2041_eval.c **** 			}
 1336              		.loc 1 336 5 is_stmt 0 view .LVU414
 1337 049a FFF7FEFF 		bl	tmc2041_readInt
 1338              	.LVL146:
 1339 049e 3368     		ldr	r3, [r6]
 1340 04a0 DB01     		lsls	r3, r3, #7
 1341 04a2 03F4F063 		and	r3, r3, #1920
 1342 04a6 20F4F062 		bic	r2, r0, #1920
 1343 04aa FFE6     		b	.L121
 1344              	.LVL147:
 1345              	.L92:
 312:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_3_MASK, TMC2041_TFD_
 1346              		.loc 1 312 5 is_stmt 1 view .LVU415
 1347              	.LBB183:
 1348              	.LBI183:
  59:boards/TMC2041_eval.c **** {
 1349              		.loc 1 59 31 view .LVU416
  59:boards/TMC2041_eval.c **** {
 1350              		.loc 1 59 31 is_stmt 0 view .LVU417
 1351              	.LBE183:
  61:boards/TMC2041_eval.c **** 
 1352              		.loc 1 61 2 is_stmt 1 view .LVU418
  63:boards/TMC2041_eval.c **** }
 1353              		.loc 1 63 2 view .LVU419
 1354              	.LBB184:
 1355              	.LBI184:
  59:boards/TMC2041_eval.c **** {
 1356              		.loc 1 59 31 view .LVU420
  59:boards/TMC2041_eval.c **** {
 1357              		.loc 1 59 31 is_stmt 0 view .LVU421
 1358              	.LBE184:
  61:boards/TMC2041_eval.c **** 
 1359              		.loc 1 61 2 is_stmt 1 view .LVU422
  63:boards/TMC2041_eval.c **** }
 1360              		.loc 1 63 2 view .LVU423
 312:boards/TMC2041_eval.c **** 				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_3_MASK, TMC2041_TFD_
 1361              		.loc 1 312 5 is_stmt 0 view .LVU424
 1362 04ac FFF7FEFF 		bl	tmc2041_readInt
 1363              	.LVL148:
 1364 04b0 3368     		ldr	r3, [r6]
 1365 04b2 1B01     		lsls	r3, r3, #4
 1366 04b4 03F07003 		and	r3, r3, #112
 1367 04b8 20F07002 		bic	r2, r0, #112
 1368 04bc 1A43     		orrs	r2, r2, r3
 1369 04be 2348     		ldr	r0, .L130
 1370 04c0 2146     		mov	r1, r4
 1371 04c2 FFF7FEFF 		bl	tmc2041_writeInt
 1372              	.LVL149:
 313:boards/TMC2041_eval.c **** 			}
 1373              		.loc 1 313 5 is_stmt 1 view .LVU425
 1374              	.LBB185:
 1375              	.LBI185:
  59:boards/TMC2041_eval.c **** {
 1376              		.loc 1 59 31 view .LVU426
  59:boards/TMC2041_eval.c **** {
 1377              		.loc 1 59 31 is_stmt 0 view .LVU427
 1378              	.LBE185:
  61:boards/TMC2041_eval.c **** 
 1379              		.loc 1 61 2 is_stmt 1 view .LVU428
  63:boards/TMC2041_eval.c **** }
 1380              		.loc 1 63 2 view .LVU429
 1381              	.LBB186:
 1382              	.LBI186:
  59:boards/TMC2041_eval.c **** {
 1383              		.loc 1 59 31 view .LVU430
  59:boards/TMC2041_eval.c **** {
 1384              		.loc 1 59 31 is_stmt 0 view .LVU431
 1385              	.LBE186:
  61:boards/TMC2041_eval.c **** 
 1386              		.loc 1 61 2 is_stmt 1 view .LVU432
  63:boards/TMC2041_eval.c **** }
 1387              		.loc 1 63 2 view .LVU433
 313:boards/TMC2041_eval.c **** 			}
 1388              		.loc 1 313 5 is_stmt 0 view .LVU434
 1389 04c6 2148     		ldr	r0, .L130
 1390 04c8 2146     		mov	r1, r4
 1391 04ca FFF7FEFF 		bl	tmc2041_readInt
 1392              	.LVL150:
 1393 04ce 3368     		ldr	r3, [r6]
 1394 04d0 1B02     		lsls	r3, r3, #8
 1395 04d2 03F40063 		and	r3, r3, #2048
 1396 04d6 20F40062 		bic	r2, r0, #2048
 1397 04da E7E6     		b	.L121
 1398              	.LVL151:
 1399              	.L41:
 319:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1400              		.loc 1 319 3 is_stmt 1 view .LVU435
 1401              	.LBB187:
 1402              	.LBI187:
  59:boards/TMC2041_eval.c **** {
 1403              		.loc 1 59 31 view .LVU436
  59:boards/TMC2041_eval.c **** {
 1404              		.loc 1 59 31 is_stmt 0 view .LVU437
 1405              	.LBE187:
  61:boards/TMC2041_eval.c **** 
 1406              		.loc 1 61 2 is_stmt 1 view .LVU438
  63:boards/TMC2041_eval.c **** }
 1407              		.loc 1 63 2 view .LVU439
 319:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1408              		.loc 1 319 49 is_stmt 0 view .LVU440
 1409 04dc 0C01     		lsls	r4, r1, #4
 1410 04de 44F06C04 		orr	r4, r4, #108
 319:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1411              		.loc 1 319 15 view .LVU441
 1412 04e2 E4B2     		uxtb	r4, r4
 1413 04e4 2146     		mov	r1, r4
 1414              	.LVL152:
 319:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1415              		.loc 1 319 15 view .LVU442
 1416 04e6 1948     		ldr	r0, .L130
 1417              	.LVL153:
 319:boards/TMC2041_eval.c **** 		if(readWrite == READ) {
 1418              		.loc 1 319 15 view .LVU443
 1419 04e8 FFF7FEFF 		bl	tmc2041_readInt
 1420              	.LVL154:
 320:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
 1421              		.loc 1 320 3 is_stmt 1 view .LVU444
 323:boards/TMC2041_eval.c **** 			}
 1422              		.loc 1 323 14 is_stmt 0 view .LVU445
 1423 04ec 2146     		mov	r1, r4
 1424 04ee 00F48047 		and	r7, r0, #16384
 1425 04f2 1648     		ldr	r0, .L130
 1426              	.LVL155:
 320:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
 1427              		.loc 1 320 5 view .LVU446
 1428 04f4 35B9     		cbnz	r5, .L93
 321:boards/TMC2041_eval.c **** 			{
 1429              		.loc 1 321 4 is_stmt 1 view .LVU447
 321:boards/TMC2041_eval.c **** 			{
 1430              		.loc 1 321 6 is_stmt 0 view .LVU448
 1431 04f6 002F     		cmp	r7, #0
 1432 04f8 BED0     		beq	.L94
 323:boards/TMC2041_eval.c **** 			}
 1433              		.loc 1 323 5 is_stmt 1 view .LVU449
 1434              	.LBB188:
 1435              	.LBI188:
  59:boards/TMC2041_eval.c **** {
 1436              		.loc 1 59 31 view .LVU450
 1437              	.LVL156:
  59:boards/TMC2041_eval.c **** {
 1438              		.loc 1 59 31 is_stmt 0 view .LVU451
 1439              	.LBE188:
  61:boards/TMC2041_eval.c **** 
 1440              		.loc 1 61 2 is_stmt 1 view .LVU452
  63:boards/TMC2041_eval.c **** }
 1441              		.loc 1 63 2 view .LVU453
 323:boards/TMC2041_eval.c **** 			}
 1442              		.loc 1 323 14 is_stmt 0 view .LVU454
 1443 04fa FFF7FEFF 		bl	tmc2041_readInt
 1444              	.LVL157:
 1445 04fe C0F30210 		ubfx	r0, r0, #4, #3
 1446 0502 8CE6     		b	.L120
 1447              	.L93:
 329:boards/TMC2041_eval.c **** 			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
 1448              		.loc 1 329 10 is_stmt 1 view .LVU455
 330:boards/TMC2041_eval.c **** 			{
 1449              		.loc 1 330 4 view .LVU456
 330:boards/TMC2041_eval.c **** 			{
 1450              		.loc 1 330 6 is_stmt 0 view .LVU457
 1451 0504 002F     		cmp	r7, #0
 1452 0506 C8D0     		beq	.L95
 332:boards/TMC2041_eval.c **** 			}
 1453              		.loc 1 332 5 is_stmt 1 view .LVU458
 1454              	.LBB189:
 1455              	.LBI189:
  59:boards/TMC2041_eval.c **** {
 1456              		.loc 1 59 31 view .LVU459
 1457              	.LVL158:
  59:boards/TMC2041_eval.c **** {
 1458              		.loc 1 59 31 is_stmt 0 view .LVU460
 1459              	.LBE189:
  61:boards/TMC2041_eval.c **** 
 1460              		.loc 1 61 2 is_stmt 1 view .LVU461
  63:boards/TMC2041_eval.c **** }
 1461              		.loc 1 63 2 view .LVU462
 1462              	.LBB190:
 1463              	.LBI190:
  59:boards/TMC2041_eval.c **** {
 1464              		.loc 1 59 31 view .LVU463
  59:boards/TMC2041_eval.c **** {
 1465              		.loc 1 59 31 is_stmt 0 view .LVU464
 1466              	.LBE190:
  61:boards/TMC2041_eval.c **** 
 1467              		.loc 1 61 2 is_stmt 1 view .LVU465
  63:boards/TMC2041_eval.c **** }
 1468              		.loc 1 63 2 view .LVU466
 332:boards/TMC2041_eval.c **** 			}
 1469              		.loc 1 332 5 is_stmt 0 view .LVU467
 1470 0508 FFF7FEFF 		bl	tmc2041_readInt
 1471              	.LVL159:
 1472 050c 3368     		ldr	r3, [r6]
 1473 050e 1B01     		lsls	r3, r3, #4
 1474 0510 03F07003 		and	r3, r3, #112
 1475 0514 20F07002 		bic	r2, r0, #112
 1476 0518 C8E6     		b	.L121
 1477              	.LVL160:
 1478              	.L40:
 342:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TOFF_MASK, TMC204
 1479              		.loc 1 342 3 is_stmt 1 view .LVU468
 1480 051a 0C01     		lsls	r4, r1, #4
 1481 051c 44F06C04 		orr	r4, r4, #108
 1482              	.L129:
 1483 0520 E4B2     		uxtb	r4, r4
 383:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1484              		.loc 1 383 13 is_stmt 0 view .LVU469
 1485 0522 0A48     		ldr	r0, .L130
 1486 0524 2146     		mov	r1, r4
 1487              	.LVL161:
 382:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC20
 1488              		.loc 1 382 5 view .LVU470
 1489 0526 002D     		cmp	r5, #0
 1490 0528 5DD1     		bne	.L101
 383:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1491              		.loc 1 383 4 is_stmt 1 view .LVU471
 1492              	.LBB191:
 1493              	.LBI191:
  59:boards/TMC2041_eval.c **** {
 1494              		.loc 1 59 31 view .LVU472
 1495              	.LVL162:
  59:boards/TMC2041_eval.c **** {
 1496              		.loc 1 59 31 is_stmt 0 view .LVU473
 1497              	.LBE191:
  61:boards/TMC2041_eval.c **** 
 1498              		.loc 1 61 2 is_stmt 1 view .LVU474
  63:boards/TMC2041_eval.c **** }
 1499              		.loc 1 63 2 view .LVU475
 383:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1500              		.loc 1 383 13 is_stmt 0 view .LVU476
 1501 052a FFF7FEFF 		bl	tmc2041_readInt
 1502              	.LVL163:
 1503 052e 00F00F00 		and	r0, r0, #15
 1504 0532 74E6     		b	.L120
 1505              	.LVL164:
 1506              	.L39:
 350:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2
 1507              		.loc 1 350 3 is_stmt 1 view .LVU477
 1508 0534 0C01     		lsls	r4, r1, #4
 1509 0536 44F06D04 		orr	r4, r4, #109
 1510 053a E4B2     		uxtb	r4, r4
 351:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1511              		.loc 1 351 13 is_stmt 0 view .LVU478
 1512 053c 0348     		ldr	r0, .L130
 1513 053e 2146     		mov	r1, r4
 1514              	.LVL165:
 350:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2
 1515              		.loc 1 350 5 view .LVU479
 1516 0540 35B9     		cbnz	r5, .L97
 351:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1517              		.loc 1 351 4 is_stmt 1 view .LVU480
 1518              	.LBB192:
 1519              	.LBI192:
  59:boards/TMC2041_eval.c **** {
 1520              		.loc 1 59 31 view .LVU481
 1521              	.LVL166:
  59:boards/TMC2041_eval.c **** {
 1522              		.loc 1 59 31 is_stmt 0 view .LVU482
 1523              	.LBE192:
  61:boards/TMC2041_eval.c **** 
 1524              		.loc 1 61 2 is_stmt 1 view .LVU483
  63:boards/TMC2041_eval.c **** }
 1525              		.loc 1 63 2 view .LVU484
 351:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1526              		.loc 1 351 13 is_stmt 0 view .LVU485
 1527 0542 FFF7FEFF 		bl	tmc2041_readInt
 1528              	.LVL167:
 1529 0546 C0F3C030 		ubfx	r0, r0, #15, #1
 1530 054a 68E6     		b	.L120
 1531              	.L131:
 1532              		.align	2
 1533              	.L130:
 1534 054c 00000000 		.word	.LANCHOR0
 1535              	.L97:
 352:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2041_SEIM
 1536              		.loc 1 352 10 is_stmt 1 view .LVU486
 353:boards/TMC2041_eval.c **** 		}
 1537              		.loc 1 353 4 view .LVU487
 1538              	.LBB193:
 1539              	.LBI193:
  59:boards/TMC2041_eval.c **** {
 1540              		.loc 1 59 31 view .LVU488
 1541              	.LVL168:
  59:boards/TMC2041_eval.c **** {
 1542              		.loc 1 59 31 is_stmt 0 view .LVU489
 1543              	.LBE193:
  61:boards/TMC2041_eval.c **** 
 1544              		.loc 1 61 2 is_stmt 1 view .LVU490
  63:boards/TMC2041_eval.c **** }
 1545              		.loc 1 63 2 view .LVU491
 1546              	.LBB194:
 1547              	.LBI194:
  59:boards/TMC2041_eval.c **** {
 1548              		.loc 1 59 31 view .LVU492
  59:boards/TMC2041_eval.c **** {
 1549              		.loc 1 59 31 is_stmt 0 view .LVU493
 1550              	.LBE194:
  61:boards/TMC2041_eval.c **** 
 1551              		.loc 1 61 2 is_stmt 1 view .LVU494
  63:boards/TMC2041_eval.c **** }
 1552              		.loc 1 63 2 view .LVU495
 353:boards/TMC2041_eval.c **** 		}
 1553              		.loc 1 353 4 is_stmt 0 view .LVU496
 1554 0550 FFF7FEFF 		bl	tmc2041_readInt
 1555              	.LVL169:
 1556 0554 3368     		ldr	r3, [r6]
 1557 0556 DB03     		lsls	r3, r3, #15
 1558 0558 9BB2     		uxth	r3, r3
 1559 055a 20F40042 		bic	r2, r0, #32768
 1560 055e A5E6     		b	.L121
 1561              	.LVL170:
 1562              	.L38:
 358:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC204
 1563              		.loc 1 358 3 is_stmt 1 view .LVU497
 1564 0560 0C01     		lsls	r4, r1, #4
 1565 0562 44F06D04 		orr	r4, r4, #109
 1566 0566 E4B2     		uxtb	r4, r4
 359:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1567              		.loc 1 359 13 is_stmt 0 view .LVU498
 1568 0568 6248     		ldr	r0, .L132
 1569 056a 2146     		mov	r1, r4
 1570              	.LVL171:
 358:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC204
 1571              		.loc 1 358 5 view .LVU499
 1572 056c 25B9     		cbnz	r5, .L98
 359:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1573              		.loc 1 359 4 is_stmt 1 view .LVU500
 1574              	.LBB195:
 1575              	.LBI195:
  59:boards/TMC2041_eval.c **** {
 1576              		.loc 1 59 31 view .LVU501
 1577              	.LVL172:
  59:boards/TMC2041_eval.c **** {
 1578              		.loc 1 59 31 is_stmt 0 view .LVU502
 1579              	.LBE195:
  61:boards/TMC2041_eval.c **** 
 1580              		.loc 1 61 2 is_stmt 1 view .LVU503
  63:boards/TMC2041_eval.c **** }
 1581              		.loc 1 63 2 view .LVU504
 359:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1582              		.loc 1 359 13 is_stmt 0 view .LVU505
 1583 056e FFF7FEFF 		bl	tmc2041_readInt
 1584              	.LVL173:
 1585 0572 C0F34130 		ubfx	r0, r0, #13, #2
 1586 0576 52E6     		b	.L120
 1587              	.L98:
 360:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC2041_SEDN_S
 1588              		.loc 1 360 10 is_stmt 1 view .LVU506
 361:boards/TMC2041_eval.c **** 		}
 1589              		.loc 1 361 4 view .LVU507
 1590              	.LBB196:
 1591              	.LBI196:
  59:boards/TMC2041_eval.c **** {
 1592              		.loc 1 59 31 view .LVU508
 1593              	.LVL174:
  59:boards/TMC2041_eval.c **** {
 1594              		.loc 1 59 31 is_stmt 0 view .LVU509
 1595              	.LBE196:
  61:boards/TMC2041_eval.c **** 
 1596              		.loc 1 61 2 is_stmt 1 view .LVU510
  63:boards/TMC2041_eval.c **** }
 1597              		.loc 1 63 2 view .LVU511
 1598              	.LBB197:
 1599              	.LBI197:
  59:boards/TMC2041_eval.c **** {
 1600              		.loc 1 59 31 view .LVU512
  59:boards/TMC2041_eval.c **** {
 1601              		.loc 1 59 31 is_stmt 0 view .LVU513
 1602              	.LBE197:
  61:boards/TMC2041_eval.c **** 
 1603              		.loc 1 61 2 is_stmt 1 view .LVU514
  63:boards/TMC2041_eval.c **** }
 1604              		.loc 1 63 2 view .LVU515
 361:boards/TMC2041_eval.c **** 		}
 1605              		.loc 1 361 4 is_stmt 0 view .LVU516
 1606 0578 FFF7FEFF 		bl	tmc2041_readInt
 1607              	.LVL175:
 1608 057c 3368     		ldr	r3, [r6]
 1609 057e 5B03     		lsls	r3, r3, #13
 1610 0580 03F4C043 		and	r3, r3, #24576
 1611 0584 20F4C042 		bic	r2, r0, #24576
 1612 0588 90E6     		b	.L121
 1613              	.LVL176:
 1614              	.L37:
 366:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC20
 1615              		.loc 1 366 3 is_stmt 1 view .LVU517
 1616 058a 0C01     		lsls	r4, r1, #4
 1617 058c 44F06D04 		orr	r4, r4, #109
 1618 0590 E4B2     		uxtb	r4, r4
 367:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1619              		.loc 1 367 13 is_stmt 0 view .LVU518
 1620 0592 5848     		ldr	r0, .L132
 1621 0594 2146     		mov	r1, r4
 1622              	.LVL177:
 366:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC20
 1623              		.loc 1 366 5 view .LVU519
 1624 0596 25B9     		cbnz	r5, .L99
 367:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1625              		.loc 1 367 4 is_stmt 1 view .LVU520
 1626              	.LBB198:
 1627              	.LBI198:
  59:boards/TMC2041_eval.c **** {
 1628              		.loc 1 59 31 view .LVU521
 1629              	.LVL178:
  59:boards/TMC2041_eval.c **** {
 1630              		.loc 1 59 31 is_stmt 0 view .LVU522
 1631              	.LBE198:
  61:boards/TMC2041_eval.c **** 
 1632              		.loc 1 61 2 is_stmt 1 view .LVU523
  63:boards/TMC2041_eval.c **** }
 1633              		.loc 1 63 2 view .LVU524
 367:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1634              		.loc 1 367 13 is_stmt 0 view .LVU525
 1635 0598 FFF7FEFF 		bl	tmc2041_readInt
 1636              	.LVL179:
 1637 059c C0F30320 		ubfx	r0, r0, #8, #4
 1638 05a0 3DE6     		b	.L120
 1639              	.L99:
 368:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC2041_SEMAX
 1640              		.loc 1 368 10 is_stmt 1 view .LVU526
 369:boards/TMC2041_eval.c **** 		}
 1641              		.loc 1 369 4 view .LVU527
 1642              	.LBB199:
 1643              	.LBI199:
  59:boards/TMC2041_eval.c **** {
 1644              		.loc 1 59 31 view .LVU528
 1645              	.LVL180:
  59:boards/TMC2041_eval.c **** {
 1646              		.loc 1 59 31 is_stmt 0 view .LVU529
 1647              	.LBE199:
  61:boards/TMC2041_eval.c **** 
 1648              		.loc 1 61 2 is_stmt 1 view .LVU530
  63:boards/TMC2041_eval.c **** }
 1649              		.loc 1 63 2 view .LVU531
 1650              	.LBB200:
 1651              	.LBI200:
  59:boards/TMC2041_eval.c **** {
 1652              		.loc 1 59 31 view .LVU532
  59:boards/TMC2041_eval.c **** {
 1653              		.loc 1 59 31 is_stmt 0 view .LVU533
 1654              	.LBE200:
  61:boards/TMC2041_eval.c **** 
 1655              		.loc 1 61 2 is_stmt 1 view .LVU534
  63:boards/TMC2041_eval.c **** }
 1656              		.loc 1 63 2 view .LVU535
 369:boards/TMC2041_eval.c **** 		}
 1657              		.loc 1 369 4 is_stmt 0 view .LVU536
 1658 05a2 FFF7FEFF 		bl	tmc2041_readInt
 1659              	.LVL181:
 1660 05a6 3368     		ldr	r3, [r6]
 1661 05a8 1B02     		lsls	r3, r3, #8
 1662 05aa 03F47063 		and	r3, r3, #3840
 1663 05ae 20F47062 		bic	r2, r0, #3840
 1664 05b2 7BE6     		b	.L121
 1665              	.LVL182:
 1666              	.L36:
 374:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC204
 1667              		.loc 1 374 3 is_stmt 1 view .LVU537
 1668 05b4 0C01     		lsls	r4, r1, #4
 1669 05b6 44F06D04 		orr	r4, r4, #109
 1670 05ba E4B2     		uxtb	r4, r4
 375:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1671              		.loc 1 375 13 is_stmt 0 view .LVU538
 1672 05bc 4D48     		ldr	r0, .L132
 1673 05be 2146     		mov	r1, r4
 1674              	.LVL183:
 374:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC204
 1675              		.loc 1 374 5 view .LVU539
 1676 05c0 25B9     		cbnz	r5, .L100
 375:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1677              		.loc 1 375 4 is_stmt 1 view .LVU540
 1678              	.LBB201:
 1679              	.LBI201:
  59:boards/TMC2041_eval.c **** {
 1680              		.loc 1 59 31 view .LVU541
 1681              	.LVL184:
  59:boards/TMC2041_eval.c **** {
 1682              		.loc 1 59 31 is_stmt 0 view .LVU542
 1683              	.LBE201:
  61:boards/TMC2041_eval.c **** 
 1684              		.loc 1 61 2 is_stmt 1 view .LVU543
  63:boards/TMC2041_eval.c **** }
 1685              		.loc 1 63 2 view .LVU544
 375:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1686              		.loc 1 375 13 is_stmt 0 view .LVU545
 1687 05c2 FFF7FEFF 		bl	tmc2041_readInt
 1688              	.LVL185:
 1689 05c6 C0F34110 		ubfx	r0, r0, #5, #2
 1690 05ca 28E6     		b	.L120
 1691              	.L100:
 376:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC2041_SEUP_S
 1692              		.loc 1 376 10 is_stmt 1 view .LVU546
 377:boards/TMC2041_eval.c **** 		}
 1693              		.loc 1 377 4 view .LVU547
 1694              	.LBB202:
 1695              	.LBI202:
  59:boards/TMC2041_eval.c **** {
 1696              		.loc 1 59 31 view .LVU548
 1697              	.LVL186:
  59:boards/TMC2041_eval.c **** {
 1698              		.loc 1 59 31 is_stmt 0 view .LVU549
 1699              	.LBE202:
  61:boards/TMC2041_eval.c **** 
 1700              		.loc 1 61 2 is_stmt 1 view .LVU550
  63:boards/TMC2041_eval.c **** }
 1701              		.loc 1 63 2 view .LVU551
 1702              	.LBB203:
 1703              	.LBI203:
  59:boards/TMC2041_eval.c **** {
 1704              		.loc 1 59 31 view .LVU552
  59:boards/TMC2041_eval.c **** {
 1705              		.loc 1 59 31 is_stmt 0 view .LVU553
 1706              	.LBE203:
  61:boards/TMC2041_eval.c **** 
 1707              		.loc 1 61 2 is_stmt 1 view .LVU554
  63:boards/TMC2041_eval.c **** }
 1708              		.loc 1 63 2 view .LVU555
 377:boards/TMC2041_eval.c **** 		}
 1709              		.loc 1 377 4 is_stmt 0 view .LVU556
 1710 05cc FFF7FEFF 		bl	tmc2041_readInt
 1711              	.LVL187:
 1712 05d0 3368     		ldr	r3, [r6]
 1713 05d2 5B01     		lsls	r3, r3, #5
 1714 05d4 03F06003 		and	r3, r3, #96
 1715 05d8 20F06002 		bic	r2, r0, #96
 1716 05dc 66E6     		b	.L121
 1717              	.LVL188:
 1718              	.L35:
 382:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC20
 1719              		.loc 1 382 3 is_stmt 1 view .LVU557
 1720 05de 0C01     		lsls	r4, r1, #4
 1721 05e0 44F06D04 		orr	r4, r4, #109
 1722 05e4 9CE7     		b	.L129
 1723              	.LVL189:
 1724              	.L101:
 384:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN
 1725              		.loc 1 384 10 view .LVU558
 385:boards/TMC2041_eval.c **** 		}
 1726              		.loc 1 385 4 view .LVU559
 1727              	.LBB204:
 1728              	.LBI204:
  59:boards/TMC2041_eval.c **** {
 1729              		.loc 1 59 31 view .LVU560
  59:boards/TMC2041_eval.c **** {
 1730              		.loc 1 59 31 is_stmt 0 view .LVU561
 1731              	.LBE204:
  61:boards/TMC2041_eval.c **** 
 1732              		.loc 1 61 2 is_stmt 1 view .LVU562
  63:boards/TMC2041_eval.c **** }
 1733              		.loc 1 63 2 view .LVU563
 1734              	.LBB205:
 1735              	.LBI205:
  59:boards/TMC2041_eval.c **** {
 1736              		.loc 1 59 31 view .LVU564
  59:boards/TMC2041_eval.c **** {
 1737              		.loc 1 59 31 is_stmt 0 view .LVU565
 1738              	.LBE205:
  61:boards/TMC2041_eval.c **** 
 1739              		.loc 1 61 2 is_stmt 1 view .LVU566
  63:boards/TMC2041_eval.c **** }
 1740              		.loc 1 63 2 view .LVU567
 385:boards/TMC2041_eval.c **** 		}
 1741              		.loc 1 385 4 is_stmt 0 view .LVU568
 1742 05e6 FFF7FEFF 		bl	tmc2041_readInt
 1743              	.LVL190:
 1744 05ea 3268     		ldr	r2, [r6]
 1745 05ec 20F00F00 		bic	r0, r0, #15
 1746 05f0 02F00F02 		and	r2, r2, #15
 1747 05f4 70E6     		b	.L127
 1748              	.LVL191:
 1749              	.L34:
 390:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC20
 1750              		.loc 1 390 3 is_stmt 1 view .LVU569
 1751 05f6 0C01     		lsls	r4, r1, #4
 1752 05f8 44F06D04 		orr	r4, r4, #109
 1753 05fc E4B2     		uxtb	r4, r4
 391:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1754              		.loc 1 391 13 is_stmt 0 view .LVU570
 1755 05fe 3D48     		ldr	r0, .L132
 1756 0600 2146     		mov	r1, r4
 1757              	.LVL192:
 390:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC20
 1758              		.loc 1 390 5 view .LVU571
 1759 0602 25B9     		cbnz	r5, .L102
 391:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1760              		.loc 1 391 4 is_stmt 1 view .LVU572
 1761              	.LBB206:
 1762              	.LBI206:
  59:boards/TMC2041_eval.c **** {
 1763              		.loc 1 59 31 view .LVU573
 1764              	.LVL193:
  59:boards/TMC2041_eval.c **** {
 1765              		.loc 1 59 31 is_stmt 0 view .LVU574
 1766              	.LBE206:
  61:boards/TMC2041_eval.c **** 
 1767              		.loc 1 61 2 is_stmt 1 view .LVU575
  63:boards/TMC2041_eval.c **** }
 1768              		.loc 1 63 2 view .LVU576
 391:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1769              		.loc 1 391 13 is_stmt 0 view .LVU577
 1770 0604 FFF7FEFF 		bl	tmc2041_readInt
 1771              	.LVL194:
 1772 0608 C0F30060 		ubfx	r0, r0, #24, #1
 1773 060c 07E6     		b	.L120
 1774              	.L102:
 392:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC2041_SFILT
 1775              		.loc 1 392 10 is_stmt 1 view .LVU578
 393:boards/TMC2041_eval.c **** 		}
 1776              		.loc 1 393 4 view .LVU579
 1777              	.LBB207:
 1778              	.LBI207:
  59:boards/TMC2041_eval.c **** {
 1779              		.loc 1 59 31 view .LVU580
 1780              	.LVL195:
  59:boards/TMC2041_eval.c **** {
 1781              		.loc 1 59 31 is_stmt 0 view .LVU581
 1782              	.LBE207:
  61:boards/TMC2041_eval.c **** 
 1783              		.loc 1 61 2 is_stmt 1 view .LVU582
  63:boards/TMC2041_eval.c **** }
 1784              		.loc 1 63 2 view .LVU583
 1785              	.LBB208:
 1786              	.LBI208:
  59:boards/TMC2041_eval.c **** {
 1787              		.loc 1 59 31 view .LVU584
  59:boards/TMC2041_eval.c **** {
 1788              		.loc 1 59 31 is_stmt 0 view .LVU585
 1789              	.LBE208:
  61:boards/TMC2041_eval.c **** 
 1790              		.loc 1 61 2 is_stmt 1 view .LVU586
  63:boards/TMC2041_eval.c **** }
 1791              		.loc 1 63 2 view .LVU587
 393:boards/TMC2041_eval.c **** 		}
 1792              		.loc 1 393 4 is_stmt 0 view .LVU588
 1793 060e FFF7FEFF 		bl	tmc2041_readInt
 1794              	.LVL196:
 1795 0612 3368     		ldr	r3, [r6]
 1796 0614 1B06     		lsls	r3, r3, #24
 1797 0616 03F08073 		and	r3, r3, #16777216
 1798 061a 20F08072 		bic	r2, r0, #16777216
 1799 061e 45E6     		b	.L121
 1800              	.LVL197:
 1801              	.L33:
 398:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041
 1802              		.loc 1 398 3 is_stmt 1 view .LVU589
 1803 0620 0C01     		lsls	r4, r1, #4
 1804 0622 44F06D04 		orr	r4, r4, #109
 1805 0626 E4B2     		uxtb	r4, r4
 399:boards/TMC2041_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1806              		.loc 1 399 13 is_stmt 0 view .LVU590
 1807 0628 3248     		ldr	r0, .L132
 1808 062a 2146     		mov	r1, r4
 1809              	.LVL198:
 398:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041
 1810              		.loc 1 398 5 view .LVU591
 1811 062c 5DB9     		cbnz	r5, .L103
 399:boards/TMC2041_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1812              		.loc 1 399 4 is_stmt 1 view .LVU592
 1813              	.LBB209:
 1814              	.LBI209:
  59:boards/TMC2041_eval.c **** {
 1815              		.loc 1 59 31 view .LVU593
 1816              	.LVL199:
  59:boards/TMC2041_eval.c **** {
 1817              		.loc 1 59 31 is_stmt 0 view .LVU594
 1818              	.LBE209:
  61:boards/TMC2041_eval.c **** 
 1819              		.loc 1 61 2 is_stmt 1 view .LVU595
  63:boards/TMC2041_eval.c **** }
 1820              		.loc 1 63 2 view .LVU596
 399:boards/TMC2041_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1821              		.loc 1 399 13 is_stmt 0 view .LVU597
 1822 062e FFF7FEFF 		bl	tmc2041_readInt
 1823              	.LVL200:
 1824 0632 0314     		asrs	r3, r0, #16
 400:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1825              		.loc 1 400 13 view .LVU598
 1826 0634 13F04003 		ands	r3, r3, #64
 399:boards/TMC2041_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1827              		.loc 1 399 13 view .LVU599
 1828 0638 C0F30640 		ubfx	r0, r0, #16, #7
 400:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1829              		.loc 1 400 4 is_stmt 1 view .LVU600
 400:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1830              		.loc 1 400 13 is_stmt 0 view .LVU601
 1831 063c 18BF     		it	ne
 1832 063e 6FF07F03 		mvnne	r3, #127
 1833 0642 1843     		orrs	r0, r0, r3
 1834 0644 EBE5     		b	.L120
 1835              	.L103:
 401:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHI
 1836              		.loc 1 401 10 is_stmt 1 view .LVU602
 402:boards/TMC2041_eval.c **** 		}
 1837              		.loc 1 402 4 view .LVU603
 1838              	.LBB210:
 1839              	.LBI210:
  59:boards/TMC2041_eval.c **** {
 1840              		.loc 1 59 31 view .LVU604
 1841              	.LVL201:
  59:boards/TMC2041_eval.c **** {
 1842              		.loc 1 59 31 is_stmt 0 view .LVU605
 1843              	.LBE210:
  61:boards/TMC2041_eval.c **** 
 1844              		.loc 1 61 2 is_stmt 1 view .LVU606
  63:boards/TMC2041_eval.c **** }
 1845              		.loc 1 63 2 view .LVU607
 1846              	.LBB211:
 1847              	.LBI211:
  59:boards/TMC2041_eval.c **** {
 1848              		.loc 1 59 31 view .LVU608
  59:boards/TMC2041_eval.c **** {
 1849              		.loc 1 59 31 is_stmt 0 view .LVU609
 1850              	.LBE211:
  61:boards/TMC2041_eval.c **** 
 1851              		.loc 1 61 2 is_stmt 1 view .LVU610
  63:boards/TMC2041_eval.c **** }
 1852              		.loc 1 63 2 view .LVU611
 402:boards/TMC2041_eval.c **** 		}
 1853              		.loc 1 402 4 is_stmt 0 view .LVU612
 1854 0646 FFF7FEFF 		bl	tmc2041_readInt
 1855              	.LVL202:
 1856 064a 3368     		ldr	r3, [r6]
 1857 064c 1B04     		lsls	r3, r3, #16
 1858 064e 03F4FE03 		and	r3, r3, #8323072
 1859 0652 20F4FE02 		bic	r2, r0, #8323072
 1860 0656 29E6     		b	.L121
 1861              	.LVL203:
 1862              	.L32:
 407:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2
 1863              		.loc 1 407 3 is_stmt 1 view .LVU613
 1864 0658 0C01     		lsls	r4, r1, #4
 1865 065a 44F06C04 		orr	r4, r4, #108
 1866 065e E4B2     		uxtb	r4, r4
 408:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1867              		.loc 1 408 13 is_stmt 0 view .LVU614
 1868 0660 2448     		ldr	r0, .L132
 1869 0662 2146     		mov	r1, r4
 1870              	.LVL204:
 407:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2
 1871              		.loc 1 407 5 view .LVU615
 1872 0664 25B9     		cbnz	r5, .L105
 408:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1873              		.loc 1 408 4 is_stmt 1 view .LVU616
 1874              	.LBB212:
 1875              	.LBI212:
  59:boards/TMC2041_eval.c **** {
 1876              		.loc 1 59 31 view .LVU617
 1877              	.LVL205:
  59:boards/TMC2041_eval.c **** {
 1878              		.loc 1 59 31 is_stmt 0 view .LVU618
 1879              	.LBE212:
  61:boards/TMC2041_eval.c **** 
 1880              		.loc 1 61 2 is_stmt 1 view .LVU619
  63:boards/TMC2041_eval.c **** }
 1881              		.loc 1 63 2 view .LVU620
 408:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1882              		.loc 1 408 13 is_stmt 0 view .LVU621
 1883 0666 FFF7FEFF 		bl	tmc2041_readInt
 1884              	.LVL206:
 1885 066a C0F34040 		ubfx	r0, r0, #17, #1
 1886 066e D6E5     		b	.L120
 1887              	.L105:
 409:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2041_VSEN
 1888              		.loc 1 409 10 is_stmt 1 view .LVU622
 410:boards/TMC2041_eval.c **** 		}
 1889              		.loc 1 410 4 view .LVU623
 1890              	.LBB213:
 1891              	.LBI213:
  59:boards/TMC2041_eval.c **** {
 1892              		.loc 1 59 31 view .LVU624
 1893              	.LVL207:
  59:boards/TMC2041_eval.c **** {
 1894              		.loc 1 59 31 is_stmt 0 view .LVU625
 1895              	.LBE213:
  61:boards/TMC2041_eval.c **** 
 1896              		.loc 1 61 2 is_stmt 1 view .LVU626
  63:boards/TMC2041_eval.c **** }
 1897              		.loc 1 63 2 view .LVU627
 1898              	.LBB214:
 1899              	.LBI214:
  59:boards/TMC2041_eval.c **** {
 1900              		.loc 1 59 31 view .LVU628
  59:boards/TMC2041_eval.c **** {
 1901              		.loc 1 59 31 is_stmt 0 view .LVU629
 1902              	.LBE214:
  61:boards/TMC2041_eval.c **** 
 1903              		.loc 1 61 2 is_stmt 1 view .LVU630
  63:boards/TMC2041_eval.c **** }
 1904              		.loc 1 63 2 view .LVU631
 410:boards/TMC2041_eval.c **** 		}
 1905              		.loc 1 410 4 is_stmt 0 view .LVU632
 1906 0670 FFF7FEFF 		bl	tmc2041_readInt
 1907              	.LVL208:
 1908 0674 3368     		ldr	r3, [r6]
 1909 0676 5B04     		lsls	r3, r3, #17
 1910 0678 03F40033 		and	r3, r3, #131072
 1911 067c 20F40032 		bic	r2, r0, #131072
 1912 0680 14E6     		b	.L121
 1913              	.LVL209:
 1914              	.L31:
 415:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_CS_ACTUAL_MASK, 
 1915              		.loc 1 415 3 is_stmt 1 view .LVU633
 415:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_CS_ACTUAL_MASK, 
 1916              		.loc 1 415 5 is_stmt 0 view .LVU634
 1917 0682 002D     		cmp	r5, #0
 1918 0684 7FF424AD 		bne	.L117
 416:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 1919              		.loc 1 416 4 is_stmt 1 view .LVU635
 1920              	.LBB215:
 1921              	.LBI215:
  59:boards/TMC2041_eval.c **** {
 1922              		.loc 1 59 31 view .LVU636
 1923              	.LVL210:
  59:boards/TMC2041_eval.c **** {
 1924              		.loc 1 59 31 is_stmt 0 view .LVU637
 1925              	.LBE215:
  61:boards/TMC2041_eval.c **** 
 1926              		.loc 1 61 2 is_stmt 1 view .LVU638
  63:boards/TMC2041_eval.c **** }
 1927              		.loc 1 63 2 view .LVU639
 416:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 1928              		.loc 1 416 13 is_stmt 0 view .LVU640
 1929 0688 0901     		lsls	r1, r1, #4
 1930              	.LVL211:
 416:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 1931              		.loc 1 416 13 view .LVU641
 1932 068a 41F06F01 		orr	r1, r1, #111
 1933 068e 1948     		ldr	r0, .L132
 1934              	.LVL212:
 416:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE)
 1935              		.loc 1 416 13 view .LVU642
 1936 0690 C9B2     		uxtb	r1, r1
 1937 0692 FFF7FEFF 		bl	tmc2041_readInt
 1938              	.LVL213:
 1939 0696 C0F30440 		ubfx	r0, r0, #16, #5
 1940 069a C0E5     		b	.L120
 1941              	.LVL214:
 1942              	.L30:
 422:boards/TMC2041_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 1943              		.loc 1 422 3 is_stmt 1 view .LVU643
 422:boards/TMC2041_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 1944              		.loc 1 422 5 is_stmt 0 view .LVU644
 1945 069c 15B9     		cbnz	r5, .L106
 423:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1946              		.loc 1 423 4 is_stmt 1 view .LVU645
 423:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1947              		.loc 1 423 13 is_stmt 0 view .LVU646
 1948 069e FFF7FEFF 		bl	StepDir_getStallGuardThreshold
 1949              	.LVL215:
 423:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1950              		.loc 1 423 13 view .LVU647
 1951 06a2 BCE5     		b	.L120
 1952              	.LVL216:
 1953              	.L106:
 424:boards/TMC2041_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 1954              		.loc 1 424 10 is_stmt 1 view .LVU648
 425:boards/TMC2041_eval.c **** 		}
 1955              		.loc 1 425 4 view .LVU649
 1956 06a4 3168     		ldr	r1, [r6]
 1957              	.LVL217:
 425:boards/TMC2041_eval.c **** 		}
 1958              		.loc 1 425 4 is_stmt 0 view .LVU650
 1959 06a6 FFF7FEFF 		bl	StepDir_setStallGuardThreshold
 1960              	.LVL218:
 1961 06aa BFE5     		b	.L122
 1962              	.LVL219:
 1963              	.L29:
 430:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC20
 1964              		.loc 1 430 3 is_stmt 1 view .LVU651
 1965 06ac 0C01     		lsls	r4, r1, #4
 1966 06ae 44F06C04 		orr	r4, r4, #108
 1967 06b2 E4B2     		uxtb	r4, r4
 431:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1968              		.loc 1 431 13 is_stmt 0 view .LVU652
 1969 06b4 0F48     		ldr	r0, .L132
 1970 06b6 2146     		mov	r1, r4
 1971              	.LVL220:
 430:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC20
 1972              		.loc 1 430 5 view .LVU653
 1973 06b8 25B9     		cbnz	r5, .L107
 431:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1974              		.loc 1 431 4 is_stmt 1 view .LVU654
 1975              	.LBB216:
 1976              	.LBI216:
  59:boards/TMC2041_eval.c **** {
 1977              		.loc 1 59 31 view .LVU655
 1978              	.LVL221:
  59:boards/TMC2041_eval.c **** {
 1979              		.loc 1 59 31 is_stmt 0 view .LVU656
 1980              	.LBE216:
  61:boards/TMC2041_eval.c **** 
 1981              		.loc 1 61 2 is_stmt 1 view .LVU657
  63:boards/TMC2041_eval.c **** }
 1982              		.loc 1 63 2 view .LVU658
 431:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 1983              		.loc 1 431 13 is_stmt 0 view .LVU659
 1984 06ba FFF7FEFF 		bl	tmc2041_readInt
 1985              	.LVL222:
 1986 06be C0F34030 		ubfx	r0, r0, #13, #1
 1987 06c2 ACE5     		b	.L120
 1988              	.L107:
 432:boards/TMC2041_eval.c **** 			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC2041_RNDTF
 1989              		.loc 1 432 10 is_stmt 1 view .LVU660
 433:boards/TMC2041_eval.c **** 		}
 1990              		.loc 1 433 4 view .LVU661
 1991              	.LBB217:
 1992              	.LBI217:
  59:boards/TMC2041_eval.c **** {
 1993              		.loc 1 59 31 view .LVU662
 1994              	.LVL223:
  59:boards/TMC2041_eval.c **** {
 1995              		.loc 1 59 31 is_stmt 0 view .LVU663
 1996              	.LBE217:
  61:boards/TMC2041_eval.c **** 
 1997              		.loc 1 61 2 is_stmt 1 view .LVU664
  63:boards/TMC2041_eval.c **** }
 1998              		.loc 1 63 2 view .LVU665
 1999              	.LBB218:
 2000              	.LBI218:
  59:boards/TMC2041_eval.c **** {
 2001              		.loc 1 59 31 view .LVU666
  59:boards/TMC2041_eval.c **** {
 2002              		.loc 1 59 31 is_stmt 0 view .LVU667
 2003              	.LBE218:
  61:boards/TMC2041_eval.c **** 
 2004              		.loc 1 61 2 is_stmt 1 view .LVU668
  63:boards/TMC2041_eval.c **** }
 2005              		.loc 1 63 2 view .LVU669
 433:boards/TMC2041_eval.c **** 		}
 2006              		.loc 1 433 4 is_stmt 0 view .LVU670
 2007 06c4 FFF7FEFF 		bl	tmc2041_readInt
 2008              	.LVL224:
 2009 06c8 3368     		ldr	r3, [r6]
 2010 06ca 5B03     		lsls	r3, r3, #13
 2011 06cc 03F40053 		and	r3, r3, #8192
 2012 06d0 20F40052 		bic	r2, r0, #8192
 2013 06d4 EAE5     		b	.L121
 2014              	.LVL225:
 2015              	.L27:
 438:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_SG_RESULT_MASK, 
 2016              		.loc 1 438 3 is_stmt 1 view .LVU671
 438:boards/TMC2041_eval.c **** 			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_SG_RESULT_MASK, 
 2017              		.loc 1 438 5 is_stmt 0 view .LVU672
 2018 06d6 002D     		cmp	r5, #0
 2019 06d8 7FF4FAAC 		bne	.L117
 439:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 2020              		.loc 1 439 4 is_stmt 1 view .LVU673
 2021              	.LBB219:
 2022              	.LBI219:
  59:boards/TMC2041_eval.c **** {
 2023              		.loc 1 59 31 view .LVU674
 2024              	.LVL226:
  59:boards/TMC2041_eval.c **** {
 2025              		.loc 1 59 31 is_stmt 0 view .LVU675
 2026              	.LBE219:
  61:boards/TMC2041_eval.c **** 
 2027              		.loc 1 61 2 is_stmt 1 view .LVU676
  63:boards/TMC2041_eval.c **** }
 2028              		.loc 1 63 2 view .LVU677
 439:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 2029              		.loc 1 439 13 is_stmt 0 view .LVU678
 2030 06dc 0901     		lsls	r1, r1, #4
 2031              	.LVL227:
 439:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 2032              		.loc 1 439 13 view .LVU679
 2033 06de 41F06F01 		orr	r1, r1, #111
 2034 06e2 0448     		ldr	r0, .L132
 2035              	.LVL228:
 439:boards/TMC2041_eval.c **** 		} else if(readWrite == WRITE) {
 2036              		.loc 1 439 13 view .LVU680
 2037 06e4 C9B2     		uxtb	r1, r1
 2038 06e6 FFF7FEFF 		bl	tmc2041_readInt
 2039              	.LVL229:
 2040 06ea C0F30900 		ubfx	r0, r0, #0, #10
 2041 06ee 96E5     		b	.L120
 2042              	.LVL230:
 2043              	.L108:
 135:boards/TMC2041_eval.c **** 
 2044              		.loc 1 135 10 view .LVU681
 2045 06f0 0825     		movs	r5, #8
 2046 06f2 95E5     		b	.L22
 2047              	.L133:
 2048              		.align	2
 2049              	.L132:
 2050 06f4 00000000 		.word	.LANCHOR0
 2051              		.cfi_endproc
 2052              	.LFE10:
 2054              		.align	1
 2055              		.syntax unified
 2056              		.thumb
 2057              		.thumb_func
 2058              		.fpu softvfp
 2060              	SAP:
 2061              	.LVL231:
 2062              	.LFB11:
 453:boards/TMC2041_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2063              		.loc 1 453 1 is_stmt 1 view -0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 8
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 454:boards/TMC2041_eval.c **** }
 2067              		.loc 1 454 2 view .LVU683
 453:boards/TMC2041_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2068              		.loc 1 453 1 is_stmt 0 view .LVU684
 2069 06f8 07B5     		push	{r0, r1, r2, lr}
 2070              	.LCFI6:
 2071              		.cfi_def_cfa_offset 16
 2072              		.cfi_offset 14, -4
 453:boards/TMC2041_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2073              		.loc 1 453 1 view .LVU685
 2074 06fa 0192     		str	r2, [sp, #4]
 454:boards/TMC2041_eval.c **** }
 2075              		.loc 1 454 9 view .LVU686
 2076 06fc 01AB     		add	r3, sp, #4
 2077 06fe 0246     		mov	r2, r0
 2078              	.LVL232:
 454:boards/TMC2041_eval.c **** }
 2079              		.loc 1 454 9 view .LVU687
 2080 0700 0120     		movs	r0, #1
 2081              	.LVL233:
 454:boards/TMC2041_eval.c **** }
 2082              		.loc 1 454 9 view .LVU688
 2083 0702 FFF7CEFC 		bl	handleParameter
 2084              	.LVL234:
 455:boards/TMC2041_eval.c **** 
 2085              		.loc 1 455 1 view .LVU689
 2086 0706 03B0     		add	sp, sp, #12
 2087              	.LCFI7:
 2088              		.cfi_def_cfa_offset 4
 2089              		@ sp needed
 2090 0708 5DF804FB 		ldr	pc, [sp], #4
 2091              		.cfi_endproc
 2092              	.LFE11:
 2094              		.align	1
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2098              		.fpu softvfp
 2100              	GAP:
 2101              	.LVL235:
 2102              	.LFB12:
 458:boards/TMC2041_eval.c **** 	return handleParameter(READ, motor, type, value);
 2103              		.loc 1 458 1 is_stmt 1 view -0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 2107              		@ link register save eliminated.
 459:boards/TMC2041_eval.c **** }
 2108              		.loc 1 459 2 view .LVU691
 458:boards/TMC2041_eval.c **** 	return handleParameter(READ, motor, type, value);
 2109              		.loc 1 458 1 is_stmt 0 view .LVU692
 2110 070c 1346     		mov	r3, r2
 459:boards/TMC2041_eval.c **** }
 2111              		.loc 1 459 9 view .LVU693
 2112 070e 0246     		mov	r2, r0
 2113              	.LVL236:
 459:boards/TMC2041_eval.c **** }
 2114              		.loc 1 459 9 view .LVU694
 2115 0710 0020     		movs	r0, #0
 2116              	.LVL237:
 459:boards/TMC2041_eval.c **** }
 2117              		.loc 1 459 9 view .LVU695
 2118 0712 C6E4     		b	handleParameter
 2119              	.LVL238:
 459:boards/TMC2041_eval.c **** }
 2120              		.loc 1 459 9 view .LVU696
 2121              		.cfi_endproc
 2122              	.LFE12:
 2124              		.align	1
 2125              		.syntax unified
 2126              		.thumb
 2127              		.thumb_func
 2128              		.fpu softvfp
 2130              	restore:
 2131              	.LFB24:
 546:boards/TMC2041_eval.c **** 
 547:boards/TMC2041_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 548:boards/TMC2041_eval.c **** {
 549:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 550:boards/TMC2041_eval.c **** 
 551:boards/TMC2041_eval.c **** 	switch(type)
 552:boards/TMC2041_eval.c **** 	{
 553:boards/TMC2041_eval.c **** 	case 1:  // read interrupt pin INT
 554:boards/TMC2041_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.INT)) ? 1 : 0;
 555:boards/TMC2041_eval.c **** 		break;
 556:boards/TMC2041_eval.c **** 	case 2:  // read position compare pin PP
 557:boards/TMC2041_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.PP)) ? 1 : 0;
 558:boards/TMC2041_eval.c **** 		break;
 559:boards/TMC2041_eval.c **** 	case 3:  // Read StepDir status bits
 560:boards/TMC2041_eval.c **** 		*value = StepDir_getStatus(motor);
 561:boards/TMC2041_eval.c **** 		break;
 562:boards/TMC2041_eval.c **** 	default:
 563:boards/TMC2041_eval.c **** 		errors |= TMC_ERROR_TYPE;
 564:boards/TMC2041_eval.c **** 		break;
 565:boards/TMC2041_eval.c **** 	}
 566:boards/TMC2041_eval.c **** 
 567:boards/TMC2041_eval.c **** 	return errors;
 568:boards/TMC2041_eval.c **** }
 569:boards/TMC2041_eval.c **** 
 570:boards/TMC2041_eval.c **** static void deInit(void)
 571:boards/TMC2041_eval.c **** {
 572:boards/TMC2041_eval.c **** 	enableDriver(DRIVER_DISABLE);
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 574:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 575:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.PP);
 576:boards/TMC2041_eval.c **** 
 577:boards/TMC2041_eval.c **** 	StepDir_deInit();
 578:boards/TMC2041_eval.c **** 	Timer.deInit();
 579:boards/TMC2041_eval.c **** }
 580:boards/TMC2041_eval.c **** 
 581:boards/TMC2041_eval.c **** static uint8_t reset()
 582:boards/TMC2041_eval.c **** {
 583:boards/TMC2041_eval.c **** 	for(uint8_t motor = 0; motor < TMC2041_MOTORS; motor++)
 584:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 585:boards/TMC2041_eval.c **** 			return 0;
 586:boards/TMC2041_eval.c **** 
 587:boards/TMC2041_eval.c **** 	tmc2041_reset(&TMC2041);
 588:boards/TMC2041_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 589:boards/TMC2041_eval.c **** 	StepDir_setPins(0, Pins.REFL1_STEP1, Pins.REFR1_DIR1, NULL);
 590:boards/TMC2041_eval.c **** 	StepDir_setPins(1, Pins.REFL2_STEP2, Pins.REFR2_DIR2, NULL);
 591:boards/TMC2041_eval.c **** 
 592:boards/TMC2041_eval.c **** 	return 1;
 593:boards/TMC2041_eval.c **** }
 594:boards/TMC2041_eval.c **** 
 595:boards/TMC2041_eval.c **** static uint8_t restore()
 596:boards/TMC2041_eval.c **** {
 2132              		.loc 1 596 1 is_stmt 1 view -0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 0
 2135              		@ frame_needed = 0, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 597:boards/TMC2041_eval.c **** 	return tmc2041_restore(&TMC2041);
 2137              		.loc 1 597 2 view .LVU698
 2138              		.loc 1 597 9 is_stmt 0 view .LVU699
 2139 0714 0148     		ldr	r0, .L137
 2140 0716 FFF7FEBF 		b	tmc2041_restore
 2141              	.LVL239:
 2142              	.L138:
 2143 071a 00BF     		.align	2
 2144              	.L137:
 2145 071c 00000000 		.word	.LANCHOR0
 2146              		.cfi_endproc
 2147              	.LFE24:
 2149              		.align	1
 2150              		.syntax unified
 2151              		.thumb
 2152              		.thumb_func
 2153              		.fpu softvfp
 2155              	reset:
 2156              	.LFB23:
 582:boards/TMC2041_eval.c **** 	for(uint8_t motor = 0; motor < TMC2041_MOTORS; motor++)
 2157              		.loc 1 582 1 is_stmt 1 view -0
 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 0
 2160              		@ frame_needed = 0, uses_anonymous_args = 0
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2161              		.loc 1 583 2 view .LVU701
 2162              	.LBB220:
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2163              		.loc 1 583 6 view .LVU702
 2164              	.LVL240:
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2165              		.loc 1 583 25 view .LVU703
 584:boards/TMC2041_eval.c **** 			return 0;
 2166              		.loc 1 584 3 view .LVU704
 2167              	.LBE220:
 582:boards/TMC2041_eval.c **** 	for(uint8_t motor = 0; motor < TMC2041_MOTORS; motor++)
 2168              		.loc 1 582 1 is_stmt 0 view .LVU705
 2169 0720 38B5     		push	{r3, r4, r5, lr}
 2170              	.LCFI8:
 2171              		.cfi_def_cfa_offset 16
 2172              		.cfi_offset 3, -16
 2173              		.cfi_offset 4, -12
 2174              		.cfi_offset 5, -8
 2175              		.cfi_offset 14, -4
 2176              	.LBB221:
 584:boards/TMC2041_eval.c **** 			return 0;
 2177              		.loc 1 584 6 view .LVU706
 2178 0722 0020     		movs	r0, #0
 2179 0724 FFF7FEFF 		bl	StepDir_getActualVelocity
 2180              	.LVL241:
 584:boards/TMC2041_eval.c **** 			return 0;
 2181              		.loc 1 584 5 view .LVU707
 2182 0728 08B1     		cbz	r0, .L140
 2183              	.LVL242:
 2184              	.L142:
 585:boards/TMC2041_eval.c **** 
 2185              		.loc 1 585 11 view .LVU708
 2186 072a 0020     		movs	r0, #0
 2187              	.L141:
 2188              	.LBE221:
 593:boards/TMC2041_eval.c **** 
 2189              		.loc 1 593 1 view .LVU709
 2190 072c 38BD     		pop	{r3, r4, r5, pc}
 2191              	.LVL243:
 2192              	.L140:
 2193              	.LBB222:
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2194              		.loc 1 583 49 is_stmt 1 view .LVU710
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2195              		.loc 1 583 25 view .LVU711
 584:boards/TMC2041_eval.c **** 			return 0;
 2196              		.loc 1 584 3 view .LVU712
 584:boards/TMC2041_eval.c **** 			return 0;
 2197              		.loc 1 584 6 is_stmt 0 view .LVU713
 2198 072e 0120     		movs	r0, #1
 2199 0730 FFF7FEFF 		bl	StepDir_getActualVelocity
 2200              	.LVL244:
 584:boards/TMC2041_eval.c **** 			return 0;
 2201              		.loc 1 584 5 view .LVU714
 2202 0734 0446     		mov	r4, r0
 2203 0736 0028     		cmp	r0, #0
 2204 0738 F7D1     		bne	.L142
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2205              		.loc 1 583 49 is_stmt 1 view .LVU715
 2206              	.LVL245:
 583:boards/TMC2041_eval.c **** 		if(StepDir_getActualVelocity(motor) != 0)
 2207              		.loc 1 583 25 view .LVU716
 2208              	.LBE222:
 587:boards/TMC2041_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 2209              		.loc 1 587 2 view .LVU717
 2210 073a 0C4D     		ldr	r5, .L143
 2211 073c 2846     		mov	r0, r5
 2212 073e FFF7FEFF 		bl	tmc2041_reset
 2213              	.LVL246:
 588:boards/TMC2041_eval.c **** 	StepDir_setPins(0, Pins.REFL1_STEP1, Pins.REFR1_DIR1, NULL);
 2214              		.loc 1 588 2 view .LVU718
 2215 0742 0B48     		ldr	r0, .L143+4
 2216 0744 FFF7FEFF 		bl	StepDir_init
 2217              	.LVL247:
 589:boards/TMC2041_eval.c **** 	StepDir_setPins(1, Pins.REFL2_STEP2, Pins.REFR2_DIR2, NULL);
 2218              		.loc 1 589 2 view .LVU719
 2219 0748 D5F88C22 		ldr	r2, [r5, #652]
 2220 074c D5F88412 		ldr	r1, [r5, #644]
 2221 0750 2346     		mov	r3, r4
 2222 0752 2046     		mov	r0, r4
 2223 0754 FFF7FEFF 		bl	StepDir_setPins
 2224              	.LVL248:
 590:boards/TMC2041_eval.c **** 
 2225              		.loc 1 590 2 view .LVU720
 2226 0758 0120     		movs	r0, #1
 2227 075a D5F89022 		ldr	r2, [r5, #656]
 2228 075e D5F88812 		ldr	r1, [r5, #648]
 2229 0762 2346     		mov	r3, r4
 2230 0764 FFF7FEFF 		bl	StepDir_setPins
 2231              	.LVL249:
 592:boards/TMC2041_eval.c **** }
 2232              		.loc 1 592 2 view .LVU721
 592:boards/TMC2041_eval.c **** }
 2233              		.loc 1 592 9 is_stmt 0 view .LVU722
 2234 0768 0120     		movs	r0, #1
 2235 076a DFE7     		b	.L141
 2236              	.L144:
 2237              		.align	2
 2238              	.L143:
 2239 076c 00000000 		.word	.LANCHOR0
 2240 0770 A0860100 		.word	100000
 2241              		.cfi_endproc
 2242              	.LFE23:
 2244              		.align	1
 2245              		.syntax unified
 2246              		.thumb
 2247              		.thumb_func
 2248              		.fpu softvfp
 2250              	enableDriver:
 2251              	.LVL250:
 2252              	.LFB25:
 598:boards/TMC2041_eval.c **** }
 599:boards/TMC2041_eval.c **** 
 600:boards/TMC2041_eval.c **** static void enableDriver(DriverState state)
 601:boards/TMC2041_eval.c **** {
 2253              		.loc 1 601 1 is_stmt 1 view -0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 0
 2256              		@ frame_needed = 0, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
 602:boards/TMC2041_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 2258              		.loc 1 602 2 view .LVU724
 2259              		.loc 1 602 4 is_stmt 0 view .LVU725
 2260 0774 0228     		cmp	r0, #2
 603:boards/TMC2041_eval.c **** 		state = Evalboards.driverEnable;
 2261              		.loc 1 603 3 is_stmt 1 view .LVU726
 2262              		.loc 1 603 9 is_stmt 0 view .LVU727
 2263 0776 04BF     		itt	eq
 2264 0778 0C4B     		ldreq	r3, .L150
 2265 077a 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 2266              	.LVL251:
 604:boards/TMC2041_eval.c **** 
 605:boards/TMC2041_eval.c **** 	if(state ==  DRIVER_DISABLE)
 2267              		.loc 1 605 2 is_stmt 1 view .LVU728
 2268              		.loc 1 605 4 is_stmt 0 view .LVU729
 2269 077e 38B9     		cbnz	r0, .L147
 606:boards/TMC2041_eval.c **** 		HAL.IOs->config->setHigh(Pins.DRV_ENN);
 2270              		.loc 1 606 3 is_stmt 1 view .LVU730
 2271              		.loc 1 606 6 is_stmt 0 view .LVU731
 2272 0780 0B4B     		ldr	r3, .L150+4
 2273              		.loc 1 606 10 view .LVU732
 2274 0782 DB68     		ldr	r3, [r3, #12]
 2275              		.loc 1 606 18 view .LVU733
 2276 0784 1B68     		ldr	r3, [r3]
 2277              		.loc 1 606 3 view .LVU734
 2278 0786 5B69     		ldr	r3, [r3, #20]
 2279              	.L149:
 2280              	.LBB225:
 2281              	.LBB226:
 607:boards/TMC2041_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 608:boards/TMC2041_eval.c **** 		HAL.IOs->config->setLow(Pins.DRV_ENN);
 2282              		.loc 1 608 3 view .LVU735
 2283 0788 0A4A     		ldr	r2, .L150+8
 2284 078a D2F89402 		ldr	r0, [r2, #660]
 2285 078e 1847     		bx	r3	@ indirect register sibling call
 2286              	.LVL252:
 2287              	.L147:
 2288              		.loc 1 608 3 view .LVU736
 2289              	.LBE226:
 2290              	.LBE225:
 607:boards/TMC2041_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2291              		.loc 1 607 7 is_stmt 1 view .LVU737
 607:boards/TMC2041_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2292              		.loc 1 607 9 is_stmt 0 view .LVU738
 2293 0790 0128     		cmp	r0, #1
 2294 0792 09D1     		bne	.L145
 607:boards/TMC2041_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2295              		.loc 1 607 49 discriminator 1 view .LVU739
 2296 0794 054B     		ldr	r3, .L150
 607:boards/TMC2041_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2297              		.loc 1 607 35 discriminator 1 view .LVU740
 2298 0796 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 2299 079a 012B     		cmp	r3, #1
 2300 079c 04D1     		bne	.L145
 2301              	.LBB228:
 2302              	.LBI225:
 600:boards/TMC2041_eval.c **** {
 2303              		.loc 1 600 13 is_stmt 1 view .LVU741
 2304              	.LVL253:
 2305              	.LBB227:
 2306              		.loc 1 608 3 view .LVU742
 2307              		.loc 1 608 6 is_stmt 0 view .LVU743
 2308 079e 044B     		ldr	r3, .L150+4
 2309              		.loc 1 608 10 view .LVU744
 2310 07a0 DB68     		ldr	r3, [r3, #12]
 2311              		.loc 1 608 18 view .LVU745
 2312 07a2 1B68     		ldr	r3, [r3]
 2313              		.loc 1 608 3 view .LVU746
 2314 07a4 9B69     		ldr	r3, [r3, #24]
 2315 07a6 EFE7     		b	.L149
 2316              	.LVL254:
 2317              	.L145:
 2318              		.loc 1 608 3 view .LVU747
 2319              	.LBE227:
 2320              	.LBE228:
 609:boards/TMC2041_eval.c **** }
 2321              		.loc 1 609 1 view .LVU748
 2322 07a8 7047     		bx	lr
 2323              	.L151:
 2324 07aa 00BF     		.align	2
 2325              	.L150:
 2326 07ac 00000000 		.word	Evalboards
 2327 07b0 00000000 		.word	HAL
 2328 07b4 00000000 		.word	.LANCHOR0
 2329              		.cfi_endproc
 2330              	.LFE25:
 2332              		.align	1
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2336              		.fpu softvfp
 2338              	deInit:
 2339              	.LFB22:
 571:boards/TMC2041_eval.c **** 	enableDriver(DRIVER_DISABLE);
 2340              		.loc 1 571 1 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 572:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 2344              		.loc 1 572 2 view .LVU750
 571:boards/TMC2041_eval.c **** 	enableDriver(DRIVER_DISABLE);
 2345              		.loc 1 571 1 is_stmt 0 view .LVU751
 2346 07b8 70B5     		push	{r4, r5, r6, lr}
 2347              	.LCFI9:
 2348              		.cfi_def_cfa_offset 16
 2349              		.cfi_offset 4, -16
 2350              		.cfi_offset 5, -12
 2351              		.cfi_offset 6, -8
 2352              		.cfi_offset 14, -4
 572:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 2353              		.loc 1 572 2 view .LVU752
 2354 07ba 0020     		movs	r0, #0
 2355 07bc FFF7DAFF 		bl	enableDriver
 2356              	.LVL255:
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2357              		.loc 1 573 2 is_stmt 1 view .LVU753
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2358              		.loc 1 573 5 is_stmt 0 view .LVU754
 2359 07c0 0C4B     		ldr	r3, .L153
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2360              		.loc 1 573 2 view .LVU755
 2361 07c2 0D4C     		ldr	r4, .L153+4
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2362              		.loc 1 573 5 view .LVU756
 2363 07c4 DD68     		ldr	r5, [r3, #12]
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2364              		.loc 1 573 2 view .LVU757
 2365 07c6 D4F89402 		ldr	r0, [r4, #660]
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2366              		.loc 1 573 17 view .LVU758
 2367 07ca 2B68     		ldr	r3, [r5]
 573:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.INT);
 2368              		.loc 1 573 2 view .LVU759
 2369 07cc 9B68     		ldr	r3, [r3, #8]
 2370 07ce 9847     		blx	r3
 2371              	.LVL256:
 574:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.PP);
 2372              		.loc 1 574 2 is_stmt 1 view .LVU760
 574:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.PP);
 2373              		.loc 1 574 17 is_stmt 0 view .LVU761
 2374 07d0 2B68     		ldr	r3, [r5]
 574:boards/TMC2041_eval.c **** 	HAL.IOs->config->reset(Pins.PP);
 2375              		.loc 1 574 2 view .LVU762
 2376 07d2 D4F8A402 		ldr	r0, [r4, #676]
 2377 07d6 9B68     		ldr	r3, [r3, #8]
 2378 07d8 9847     		blx	r3
 2379              	.LVL257:
 575:boards/TMC2041_eval.c **** 
 2380              		.loc 1 575 2 is_stmt 1 view .LVU763
 575:boards/TMC2041_eval.c **** 
 2381              		.loc 1 575 17 is_stmt 0 view .LVU764
 2382 07da 2B68     		ldr	r3, [r5]
 575:boards/TMC2041_eval.c **** 
 2383              		.loc 1 575 2 view .LVU765
 2384 07dc D4F8A802 		ldr	r0, [r4, #680]
 2385 07e0 9B68     		ldr	r3, [r3, #8]
 2386 07e2 9847     		blx	r3
 2387              	.LVL258:
 577:boards/TMC2041_eval.c **** 	Timer.deInit();
 2388              		.loc 1 577 2 is_stmt 1 view .LVU766
 2389 07e4 FFF7FEFF 		bl	StepDir_deInit
 2390              	.LVL259:
 578:boards/TMC2041_eval.c **** }
 2391              		.loc 1 578 2 view .LVU767
 578:boards/TMC2041_eval.c **** }
 2392              		.loc 1 578 7 is_stmt 0 view .LVU768
 2393 07e8 044B     		ldr	r3, .L153+8
 579:boards/TMC2041_eval.c **** 
 2394              		.loc 1 579 1 view .LVU769
 2395 07ea BDE87040 		pop	{r4, r5, r6, lr}
 2396              	.LCFI10:
 2397              		.cfi_restore 14
 2398              		.cfi_restore 6
 2399              		.cfi_restore 5
 2400              		.cfi_restore 4
 2401              		.cfi_def_cfa_offset 0
 578:boards/TMC2041_eval.c **** }
 2402              		.loc 1 578 2 view .LVU770
 2403 07ee 5B68     		ldr	r3, [r3, #4]
 2404 07f0 1847     		bx	r3	@ indirect register sibling call
 2405              	.LVL260:
 2406              	.L154:
 2407 07f2 00BF     		.align	2
 2408              	.L153:
 2409 07f4 00000000 		.word	HAL
 2410 07f8 00000000 		.word	.LANCHOR0
 2411 07fc 00000000 		.word	Timer
 2412              		.cfi_endproc
 2413              	.LFE22:
 2415              		.align	1
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu softvfp
 2421              	getMax:
 2422              	.LVL261:
 2423              	.LFB15:
 497:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2424              		.loc 1 497 1 is_stmt 1 view -0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 498:boards/TMC2041_eval.c **** }
 2428              		.loc 1 498 2 view .LVU772
 497:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2429              		.loc 1 497 1 is_stmt 0 view .LVU773
 2430 0800 0346     		mov	r3, r0
 2431              	.LBB233:
 2432              	.LBB234:
 466:boards/TMC2041_eval.c **** 	case 2:
 2433              		.loc 1 466 2 view .LVU774
 2434 0802 052B     		cmp	r3, #5
 2435              	.LBE234:
 2436              	.LBE233:
 497:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2437              		.loc 1 497 1 view .LVU775
 2438 0804 10B5     		push	{r4, lr}
 2439              	.LCFI11:
 2440              		.cfi_def_cfa_offset 8
 2441              		.cfi_offset 4, -8
 2442              		.cfi_offset 14, -4
 497:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2443              		.loc 1 497 1 view .LVU776
 2444 0806 0846     		mov	r0, r1
 2445              	.LVL262:
 497:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2446              		.loc 1 497 1 view .LVU777
 2447 0808 1446     		mov	r4, r2
 2448              	.LVL263:
 2449              	.LBB240:
 2450              	.LBI233:
 462:boards/TMC2041_eval.c **** {
 2451              		.loc 1 462 17 is_stmt 1 view .LVU778
 2452              	.LBB237:
 464:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 2453              		.loc 1 464 2 view .LVU779
 465:boards/TMC2041_eval.c **** 	switch(type) {
 2454              		.loc 1 465 2 view .LVU780
 466:boards/TMC2041_eval.c **** 	case 2:
 2455              		.loc 1 466 2 view .LVU781
 2456 080a 0CD0     		beq	.L156
 2457 080c 07D8     		bhi	.L157
 2458 080e 023B     		subs	r3, r3, #2
 2459              	.LVL264:
 466:boards/TMC2041_eval.c **** 	case 2:
 2460              		.loc 1 466 2 is_stmt 0 view .LVU782
 2461 0810 022B     		cmp	r3, #2
 2462 0812 06D8     		bhi	.L161
 2463              	.LVL265:
 2464              	.L159:
 471:boards/TMC2041_eval.c **** 			*value = 0; // TODO: Determine limits here
 2465              		.loc 1 471 3 is_stmt 1 view .LVU783
 2466              	.LBB235:
 2467              	.LBI235:
 462:boards/TMC2041_eval.c **** {
 2468              		.loc 1 462 17 view .LVU784
 2469              	.LBB236:
 473:boards/TMC2041_eval.c **** 			*value = StepDir_getFrequency(motor);
 2470              		.loc 1 473 10 view .LVU785
 474:boards/TMC2041_eval.c **** 		}
 2471              		.loc 1 474 4 view .LVU786
 474:boards/TMC2041_eval.c **** 		}
 2472              		.loc 1 474 13 is_stmt 0 view .LVU787
 2473 0814 FFF7FEFF 		bl	StepDir_getFrequency
 2474              	.LVL266:
 2475              	.L162:
 474:boards/TMC2041_eval.c **** 		}
 2476              		.loc 1 474 13 view .LVU788
 2477              	.LBE236:
 2478              	.LBE235:
 481:boards/TMC2041_eval.c **** 		}
 2479              		.loc 1 481 11 view .LVU789
 2480 0818 2060     		str	r0, [r4]
 465:boards/TMC2041_eval.c **** 	switch(type) {
 2481              		.loc 1 465 11 view .LVU790
 2482 081a 0020     		movs	r0, #0
 2483              	.LVL267:
 2484              	.L155:
 465:boards/TMC2041_eval.c **** 	switch(type) {
 2485              		.loc 1 465 11 view .LVU791
 2486              	.LBE237:
 2487              	.LBE240:
 499:boards/TMC2041_eval.c **** 
 2488              		.loc 1 499 1 view .LVU792
 2489 081c 10BD     		pop	{r4, pc}
 2490              	.LVL268:
 2491              	.L157:
 2492              	.LBB241:
 2493              	.LBB238:
 466:boards/TMC2041_eval.c **** 	case 2:
 2494              		.loc 1 466 2 view .LVU793
 2495 081e 182B     		cmp	r3, #24
 2496 0820 F8D0     		beq	.L159
 2497              	.LVL269:
 2498              	.L161:
 466:boards/TMC2041_eval.c **** 	case 2:
 2499              		.loc 1 466 2 view .LVU794
 2500 0822 0420     		movs	r0, #4
 2501              	.LVL270:
 488:boards/TMC2041_eval.c **** }
 2502              		.loc 1 488 2 is_stmt 1 view .LVU795
 488:boards/TMC2041_eval.c **** }
 2503              		.loc 1 488 2 is_stmt 0 view .LVU796
 2504              	.LBE238:
 2505              	.LBE241:
 498:boards/TMC2041_eval.c **** }
 2506              		.loc 1 498 9 view .LVU797
 2507 0824 FAE7     		b	.L155
 2508              	.LVL271:
 2509              	.L156:
 2510              	.LBB242:
 2511              	.LBB239:
 478:boards/TMC2041_eval.c **** 			*value = 0; // TODO: Determine limits here
 2512              		.loc 1 478 3 is_stmt 1 view .LVU798
 480:boards/TMC2041_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 2513              		.loc 1 480 10 view .LVU799
 481:boards/TMC2041_eval.c **** 		}
 2514              		.loc 1 481 4 view .LVU800
 481:boards/TMC2041_eval.c **** 		}
 2515              		.loc 1 481 13 is_stmt 0 view .LVU801
 2516 0826 FFF7FEFF 		bl	StepDir_getMaxAcceleration
 2517              	.LVL272:
 481:boards/TMC2041_eval.c **** 		}
 2518              		.loc 1 481 13 view .LVU802
 2519 082a F5E7     		b	.L162
 2520              	.LBE239:
 2521              	.LBE242:
 2522              		.cfi_endproc
 2523              	.LFE15:
 2525              		.align	1
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu softvfp
 2531              	getMeasuredSpeed:
 2532              	.LVL273:
 2533              	.LFB16:
 502:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2534              		.loc 1 502 1 is_stmt 1 view -0
 2535              		.cfi_startproc
 2536              		@ args = 0, pretend = 0, frame = 0
 2537              		@ frame_needed = 0, uses_anonymous_args = 0
 503:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 2538              		.loc 1 503 2 view .LVU804
 506:boards/TMC2041_eval.c **** 	{
 2539              		.loc 1 506 2 view .LVU805
 502:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2540              		.loc 1 502 1 is_stmt 0 view .LVU806
 2541 082c 38B5     		push	{r3, r4, r5, lr}
 2542              	.LCFI12:
 2543              		.cfi_def_cfa_offset 16
 2544              		.cfi_offset 3, -16
 2545              		.cfi_offset 4, -12
 2546              		.cfi_offset 5, -8
 2547              		.cfi_offset 14, -4
 502:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2548              		.loc 1 502 1 view .LVU807
 2549 082e 0D46     		mov	r5, r1
 506:boards/TMC2041_eval.c **** 	{
 2550              		.loc 1 506 2 view .LVU808
 2551 0830 0446     		mov	r4, r0
 2552 0832 20B9     		cbnz	r0, .L165
 2553              	.LVL274:
 2554              	.LBB245:
 2555              	.LBI245:
 501:boards/TMC2041_eval.c **** {
 2556              		.loc 1 501 17 is_stmt 1 view .LVU809
 2557              	.LBB246:
 510:boards/TMC2041_eval.c **** 		break;
 2558              		.loc 1 510 3 view .LVU810
 510:boards/TMC2041_eval.c **** 		break;
 2559              		.loc 1 510 12 is_stmt 0 view .LVU811
 2560 0834 FFF7FEFF 		bl	StepDir_getActualVelocity
 2561              	.LVL275:
 510:boards/TMC2041_eval.c **** 		break;
 2562              		.loc 1 510 10 view .LVU812
 2563 0838 2860     		str	r0, [r5]
 511:boards/TMC2041_eval.c **** 	default:
 2564              		.loc 1 511 3 is_stmt 1 view .LVU813
 514:boards/TMC2041_eval.c **** 	}
 2565              		.loc 1 514 3 view .LVU814
 516:boards/TMC2041_eval.c **** }
 2566              		.loc 1 516 2 view .LVU815
 2567              	.LVL276:
 510:boards/TMC2041_eval.c **** 		break;
 2568              		.loc 1 510 10 is_stmt 0 view .LVU816
 2569 083a 2046     		mov	r0, r4
 2570              	.L163:
 2571              	.LBE246:
 2572              	.LBE245:
 517:boards/TMC2041_eval.c **** 
 2573              		.loc 1 517 1 view .LVU817
 2574 083c 38BD     		pop	{r3, r4, r5, pc}
 2575              	.LVL277:
 2576              	.L165:
 513:boards/TMC2041_eval.c **** 		break;
 2577              		.loc 1 513 10 view .LVU818
 2578 083e 0820     		movs	r0, #8
 2579              	.LVL278:
 513:boards/TMC2041_eval.c **** 		break;
 2580              		.loc 1 513 10 view .LVU819
 2581 0840 FCE7     		b	.L163
 2582              		.cfi_endproc
 2583              	.LFE16:
 2585              		.align	1
 2586              		.syntax unified
 2587              		.thumb
 2588              		.thumb_func
 2589              		.fpu softvfp
 2591              	userFunction:
 2592              	.LVL279:
 2593              	.LFB21:
 548:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 2594              		.loc 1 548 1 is_stmt 1 view -0
 2595              		.cfi_startproc
 2596              		@ args = 0, pretend = 0, frame = 0
 2597              		@ frame_needed = 0, uses_anonymous_args = 0
 548:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 2598              		.loc 1 548 1 is_stmt 0 view .LVU821
 2599 0842 0346     		mov	r3, r0
 549:boards/TMC2041_eval.c **** 
 2600              		.loc 1 549 2 is_stmt 1 view .LVU822
 2601              	.LVL280:
 551:boards/TMC2041_eval.c **** 	{
 2602              		.loc 1 551 2 view .LVU823
 2603 0844 022B     		cmp	r3, #2
 548:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 2604              		.loc 1 548 1 is_stmt 0 view .LVU824
 2605 0846 10B5     		push	{r4, lr}
 2606              	.LCFI13:
 2607              		.cfi_def_cfa_offset 8
 2608              		.cfi_offset 4, -8
 2609              		.cfi_offset 14, -4
 548:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 2610              		.loc 1 548 1 view .LVU825
 2611 0848 0846     		mov	r0, r1
 2612              	.LVL281:
 548:boards/TMC2041_eval.c **** 	uint32_t errors = 0;
 2613              		.loc 1 548 1 view .LVU826
 2614 084a 1446     		mov	r4, r2
 551:boards/TMC2041_eval.c **** 	{
 2615              		.loc 1 551 2 view .LVU827
 2616 084c 11D0     		beq	.L167
 2617 084e 032B     		cmp	r3, #3
 2618 0850 17D0     		beq	.L168
 2619 0852 012B     		cmp	r3, #1
 2620 0854 18D1     		bne	.L170
 2621              	.LVL282:
 2622              	.LBB249:
 2623              	.LBI249:
 547:boards/TMC2041_eval.c **** {
 2624              		.loc 1 547 17 is_stmt 1 view .LVU828
 2625              	.LBB250:
 554:boards/TMC2041_eval.c **** 		break;
 2626              		.loc 1 554 3 view .LVU829
 554:boards/TMC2041_eval.c **** 		break;
 2627              		.loc 1 554 16 is_stmt 0 view .LVU830
 2628 0856 0D4B     		ldr	r3, .L173
 554:boards/TMC2041_eval.c **** 		break;
 2629              		.loc 1 554 13 view .LVU831
 2630 0858 0D4A     		ldr	r2, .L173+4
 2631              	.LVL283:
 554:boards/TMC2041_eval.c **** 		break;
 2632              		.loc 1 554 20 view .LVU832
 2633 085a DB68     		ldr	r3, [r3, #12]
 554:boards/TMC2041_eval.c **** 		break;
 2634              		.loc 1 554 13 view .LVU833
 2635 085c D2F8A402 		ldr	r0, [r2, #676]
 2636              	.LVL284:
 554:boards/TMC2041_eval.c **** 		break;
 2637              		.loc 1 554 28 view .LVU834
 2638 0860 1B68     		ldr	r3, [r3]
 554:boards/TMC2041_eval.c **** 		break;
 2639              		.loc 1 554 13 view .LVU835
 2640 0862 5B6A     		ldr	r3, [r3, #36]
 2641              	.LVL285:
 2642              	.L172:
 554:boards/TMC2041_eval.c **** 		break;
 2643              		.loc 1 554 13 view .LVU836
 2644              	.LBE250:
 2645              	.LBE249:
 557:boards/TMC2041_eval.c **** 		break;
 2646              		.loc 1 557 13 view .LVU837
 2647 0864 9847     		blx	r3
 2648              	.LVL286:
 557:boards/TMC2041_eval.c **** 		break;
 2649              		.loc 1 557 51 view .LVU838
 2650 0866 0038     		subs	r0, r0, #0
 2651 0868 18BF     		it	ne
 2652 086a 0120     		movne	r0, #1
 2653              	.L171:
 560:boards/TMC2041_eval.c **** 		break;
 2654              		.loc 1 560 12 view .LVU839
 2655 086c 2060     		str	r0, [r4]
 561:boards/TMC2041_eval.c **** 	default:
 2656              		.loc 1 561 3 is_stmt 1 view .LVU840
 549:boards/TMC2041_eval.c **** 
 2657              		.loc 1 549 11 is_stmt 0 view .LVU841
 2658 086e 0020     		movs	r0, #0
 2659              	.LVL287:
 2660              	.L166:
 568:boards/TMC2041_eval.c **** 
 2661              		.loc 1 568 1 view .LVU842
 2662 0870 10BD     		pop	{r4, pc}
 2663              	.LVL288:
 2664              	.L167:
 557:boards/TMC2041_eval.c **** 		break;
 2665              		.loc 1 557 3 is_stmt 1 view .LVU843
 557:boards/TMC2041_eval.c **** 		break;
 2666              		.loc 1 557 16 is_stmt 0 view .LVU844
 2667 0872 064B     		ldr	r3, .L173
 557:boards/TMC2041_eval.c **** 		break;
 2668              		.loc 1 557 13 view .LVU845
 2669 0874 064A     		ldr	r2, .L173+4
 2670              	.LVL289:
 557:boards/TMC2041_eval.c **** 		break;
 2671              		.loc 1 557 20 view .LVU846
 2672 0876 DB68     		ldr	r3, [r3, #12]
 557:boards/TMC2041_eval.c **** 		break;
 2673              		.loc 1 557 13 view .LVU847
 2674 0878 D2F8A802 		ldr	r0, [r2, #680]
 557:boards/TMC2041_eval.c **** 		break;
 2675              		.loc 1 557 28 view .LVU848
 2676 087c 1B68     		ldr	r3, [r3]
 557:boards/TMC2041_eval.c **** 		break;
 2677              		.loc 1 557 13 view .LVU849
 2678 087e 5B6A     		ldr	r3, [r3, #36]
 2679 0880 F0E7     		b	.L172
 2680              	.LVL290:
 2681              	.L168:
 560:boards/TMC2041_eval.c **** 		break;
 2682              		.loc 1 560 3 is_stmt 1 view .LVU850
 560:boards/TMC2041_eval.c **** 		break;
 2683              		.loc 1 560 12 is_stmt 0 view .LVU851
 2684 0882 FFF7FEFF 		bl	StepDir_getStatus
 2685              	.LVL291:
 560:boards/TMC2041_eval.c **** 		break;
 2686              		.loc 1 560 12 view .LVU852
 2687 0886 F1E7     		b	.L171
 2688              	.LVL292:
 2689              	.L170:
 551:boards/TMC2041_eval.c **** 	{
 2690              		.loc 1 551 2 view .LVU853
 2691 0888 0420     		movs	r0, #4
 2692              	.LVL293:
 567:boards/TMC2041_eval.c **** }
 2693              		.loc 1 567 2 is_stmt 1 view .LVU854
 567:boards/TMC2041_eval.c **** }
 2694              		.loc 1 567 9 is_stmt 0 view .LVU855
 2695 088a F1E7     		b	.L166
 2696              	.L174:
 2697              		.align	2
 2698              	.L173:
 2699 088c 00000000 		.word	HAL
 2700 0890 00000000 		.word	.LANCHOR0
 2701              		.cfi_endproc
 2702              	.LFE21:
 2704              		.align	1
 2705              		.syntax unified
 2706              		.thumb
 2707              		.thumb_func
 2708              		.fpu softvfp
 2710              	moveBy:
 2711              	.LVL294:
 2712              	.LFB9:
 119:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2713              		.loc 1 119 1 is_stmt 1 view -0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 120:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 2717              		.loc 1 120 2 view .LVU857
 120:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 2718              		.loc 1 120 4 is_stmt 0 view .LVU858
 2719 0894 0128     		cmp	r0, #1
 119:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2720              		.loc 1 119 1 view .LVU859
 2721 0896 38B5     		push	{r3, r4, r5, lr}
 2722              	.LCFI14:
 2723              		.cfi_def_cfa_offset 16
 2724              		.cfi_offset 3, -16
 2725              		.cfi_offset 4, -12
 2726              		.cfi_offset 5, -8
 2727              		.cfi_offset 14, -4
 119:boards/TMC2041_eval.c **** 	if(motor >= TMC2041_MOTORS)
 2728              		.loc 1 119 1 view .LVU860
 2729 0898 0446     		mov	r4, r0
 2730 089a 0D46     		mov	r5, r1
 120:boards/TMC2041_eval.c **** 		return TMC_ERROR_MOTOR;
 2731              		.loc 1 120 4 view .LVU861
 2732 089c 09D8     		bhi	.L176
 2733              	.LVL295:
 2734              	.LBB253:
 2735              	.LBI253:
 118:boards/TMC2041_eval.c **** {
 2736              		.loc 1 118 17 is_stmt 1 view .LVU862
 2737              	.LBB254:
 124:boards/TMC2041_eval.c **** 
 2738              		.loc 1 124 2 view .LVU863
 124:boards/TMC2041_eval.c **** 
 2739              		.loc 1 124 12 is_stmt 0 view .LVU864
 2740 089e FFF7FEFF 		bl	StepDir_getActualPosition
 2741              	.LVL296:
 124:boards/TMC2041_eval.c **** 
 2742              		.loc 1 124 9 view .LVU865
 2743 08a2 2968     		ldr	r1, [r5]
 2744 08a4 0144     		add	r1, r1, r0
 2745 08a6 2960     		str	r1, [r5]
 126:boards/TMC2041_eval.c **** }
 2746              		.loc 1 126 2 is_stmt 1 view .LVU866
 126:boards/TMC2041_eval.c **** }
 2747              		.loc 1 126 9 is_stmt 0 view .LVU867
 2748 08a8 2046     		mov	r0, r4
 2749              	.LBE254:
 2750              	.LBE253:
 127:boards/TMC2041_eval.c **** 
 2751              		.loc 1 127 1 view .LVU868
 2752 08aa BDE83840 		pop	{r3, r4, r5, lr}
 2753              	.LCFI15:
 2754              		.cfi_remember_state
 2755              		.cfi_restore 14
 2756              		.cfi_restore 5
 2757              		.cfi_restore 4
 2758              		.cfi_restore 3
 2759              		.cfi_def_cfa_offset 0
 2760              	.LVL297:
 2761              	.LBB256:
 2762              	.LBB255:
 126:boards/TMC2041_eval.c **** }
 2763              		.loc 1 126 9 view .LVU869
 2764 08ae FFF7E1BB 		b	moveTo
 2765              	.LVL298:
 2766              	.L176:
 2767              	.LCFI16:
 2768              		.cfi_restore_state
 126:boards/TMC2041_eval.c **** }
 2769              		.loc 1 126 9 view .LVU870
 2770              	.LBE255:
 2771              	.LBE256:
 127:boards/TMC2041_eval.c **** 
 2772              		.loc 1 127 1 view .LVU871
 2773 08b2 0820     		movs	r0, #8
 2774              	.LVL299:
 127:boards/TMC2041_eval.c **** 
 2775              		.loc 1 127 1 view .LVU872
 2776 08b4 38BD     		pop	{r3, r4, r5, pc}
 2777              		.cfi_endproc
 2778              	.LFE9:
 2780              		.align	1
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2784              		.fpu softvfp
 2786              	getMin:
 2787              	.LVL300:
 2788              	.LFB14:
 492:boards/TMC2041_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 2789              		.loc 1 492 1 is_stmt 1 view -0
 2790              		.cfi_startproc
 2791              		@ args = 0, pretend = 0, frame = 0
 2792              		@ frame_needed = 0, uses_anonymous_args = 0
 2793              		@ link register save eliminated.
 493:boards/TMC2041_eval.c **** }
 2794              		.loc 1 493 2 view .LVU874
 2795              	.LBB259:
 2796              	.LBI259:
 462:boards/TMC2041_eval.c **** {
 2797              		.loc 1 462 17 view .LVU875
 2798              	.LBB260:
 464:boards/TMC2041_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 2799              		.loc 1 464 2 view .LVU876
 465:boards/TMC2041_eval.c **** 	switch(type) {
 2800              		.loc 1 465 2 view .LVU877
 466:boards/TMC2041_eval.c **** 	case 2:
 2801              		.loc 1 466 2 view .LVU878
 2802 08b6 0528     		cmp	r0, #5
 2803 08b8 03D8     		bhi	.L178
 2804 08ba 0128     		cmp	r0, #1
 2805 08bc 03D8     		bhi	.L179
 2806              	.L181:
 2807 08be 0420     		movs	r0, #4
 2808              	.LVL301:
 488:boards/TMC2041_eval.c **** }
 2809              		.loc 1 488 2 view .LVU879
 488:boards/TMC2041_eval.c **** }
 2810              		.loc 1 488 2 is_stmt 0 view .LVU880
 2811              	.LBE260:
 2812              	.LBE259:
 494:boards/TMC2041_eval.c **** 
 2813              		.loc 1 494 1 view .LVU881
 2814 08c0 7047     		bx	lr
 2815              	.LVL302:
 2816              	.L178:
 2817              	.LBB262:
 2818              	.LBB261:
 466:boards/TMC2041_eval.c **** 	case 2:
 2819              		.loc 1 466 2 view .LVU882
 2820 08c2 1828     		cmp	r0, #24
 2821 08c4 FBD1     		bne	.L181
 2822              	.L179:
 471:boards/TMC2041_eval.c **** 			*value = 0; // TODO: Determine limits here
 2823              		.loc 1 471 3 is_stmt 1 view .LVU883
 472:boards/TMC2041_eval.c **** 		} else if(limit == LIMIT_MAX) {
 2824              		.loc 1 472 4 view .LVU884
 472:boards/TMC2041_eval.c **** 		} else if(limit == LIMIT_MAX) {
 2825              		.loc 1 472 11 is_stmt 0 view .LVU885
 2826 08c6 0020     		movs	r0, #0
 2827              	.LVL303:
 472:boards/TMC2041_eval.c **** 		} else if(limit == LIMIT_MAX) {
 2828              		.loc 1 472 11 view .LVU886
 2829 08c8 1060     		str	r0, [r2]
 2830 08ca 7047     		bx	lr
 2831              	.LBE261:
 2832              	.LBE262:
 2833              		.cfi_endproc
 2834              	.LFE14:
 2836              		.align	1
 2837              		.global	tmc2041_readWriteArray
 2838              		.syntax unified
 2839              		.thumb
 2840              		.thumb_func
 2841              		.fpu softvfp
 2843              	tmc2041_readWriteArray:
 2844              	.LVL304:
 2845              	.LFB3:
  77:boards/TMC2041_eval.c **** 	// Map the channel to the corresponding SPI channel
 2846              		.loc 1 77 1 is_stmt 1 view -0
 2847              		.cfi_startproc
 2848              		@ args = 0, pretend = 0, frame = 0
 2849              		@ frame_needed = 0, uses_anonymous_args = 0
 2850              		@ link register save eliminated.
  79:boards/TMC2041_eval.c **** }
 2851              		.loc 1 79 2 view .LVU888
 2852              	.LBB263:
 2853              	.LBI263:
  68:boards/TMC2041_eval.c **** {
 2854              		.loc 1 68 34 view .LVU889
 2855              	.LBB264:
  70:boards/TMC2041_eval.c **** 
 2856              		.loc 1 70 2 view .LVU890
  72:boards/TMC2041_eval.c **** }
 2857              		.loc 1 72 2 view .LVU891
  72:boards/TMC2041_eval.c **** }
 2858              		.loc 1 72 9 is_stmt 0 view .LVU892
 2859 08cc 034B     		ldr	r3, .L183
 2860              	.LBE264:
 2861              	.LBE263:
  79:boards/TMC2041_eval.c **** }
 2862              		.loc 1 79 23 view .LVU893
 2863 08ce D3F8B032 		ldr	r3, [r3, #688]
  77:boards/TMC2041_eval.c **** 	// Map the channel to the corresponding SPI channel
 2864              		.loc 1 77 1 view .LVU894
 2865 08d2 0846     		mov	r0, r1
 2866              	.LVL305:
  79:boards/TMC2041_eval.c **** }
 2867              		.loc 1 79 2 view .LVU895
 2868 08d4 DB68     		ldr	r3, [r3, #12]
 2869 08d6 1146     		mov	r1, r2
 2870              	.LVL306:
  79:boards/TMC2041_eval.c **** }
 2871              		.loc 1 79 2 view .LVU896
 2872 08d8 1847     		bx	r3	@ indirect register sibling call
 2873              	.LVL307:
 2874              	.L184:
  79:boards/TMC2041_eval.c **** }
 2875              		.loc 1 79 2 view .LVU897
 2876 08da 00BF     		.align	2
 2877              	.L183:
 2878 08dc 00000000 		.word	.LANCHOR0
 2879              		.cfi_endproc
 2880              	.LFE3:
 2882              		.align	1
 2883              		.global	TMC2041_init
 2884              		.syntax unified
 2885              		.thumb
 2886              		.thumb_func
 2887              		.fpu softvfp
 2889              	TMC2041_init:
 2890              	.LFB26:
 610:boards/TMC2041_eval.c **** 
 611:boards/TMC2041_eval.c **** void TMC2041_init(void)
 612:boards/TMC2041_eval.c **** {
 2891              		.loc 1 612 1 is_stmt 1 view -0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 613:boards/TMC2041_eval.c **** 	tmc2041_init(&TMC2041, 1, Evalboards.ch2.config, &tmc2041_defaultRegisterResetState[0]);
 2895              		.loc 1 613 2 view .LVU899
 612:boards/TMC2041_eval.c **** 	tmc2041_init(&TMC2041, 1, Evalboards.ch2.config, &tmc2041_defaultRegisterResetState[0]);
 2896              		.loc 1 612 1 is_stmt 0 view .LVU900
 2897 08e0 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2898              	.LCFI17:
 2899              		.cfi_def_cfa_offset 24
 2900              		.cfi_offset 4, -24
 2901              		.cfi_offset 5, -20
 2902              		.cfi_offset 6, -16
 2903              		.cfi_offset 7, -12
 2904              		.cfi_offset 8, -8
 2905              		.cfi_offset 14, -4
 2906              		.loc 1 613 2 view .LVU901
 2907 08e4 5A4C     		ldr	r4, .L186
 2908 08e6 5B4D     		ldr	r5, .L186+4
 614:boards/TMC2041_eval.c **** 
 615:boards/TMC2041_eval.c **** 	Pins.DRV_ENN      = &HAL.IOs->pins->DIO0;
 2909              		.loc 1 615 26 view .LVU902
 2910 08e8 5B4F     		ldr	r7, .L186+8
 613:boards/TMC2041_eval.c **** 
 2911              		.loc 1 613 2 view .LVU903
 2912 08ea D4F89020 		ldr	r2, [r4, #144]
 2913 08ee 5B4B     		ldr	r3, .L186+12
 2914 08f0 0121     		movs	r1, #1
 2915 08f2 2846     		mov	r0, r5
 2916 08f4 FFF7FEFF 		bl	tmc2041_init
 2917              	.LVL308:
 2918              		.loc 1 615 2 is_stmt 1 view .LVU904
 2919              		.loc 1 615 26 is_stmt 0 view .LVU905
 2920 08f8 FE68     		ldr	r6, [r7, #12]
 2921              		.loc 1 615 30 view .LVU906
 2922 08fa 7368     		ldr	r3, [r6, #4]
 2923              		.loc 1 615 22 view .LVU907
 2924 08fc 03F16802 		add	r2, r3, #104
 2925              		.loc 1 615 20 view .LVU908
 2926 0900 C5F89422 		str	r2, [r5, #660]
 616:boards/TMC2041_eval.c **** 	Pins.PP           = &HAL.IOs->pins->DIO4;
 2927              		.loc 1 616 2 is_stmt 1 view .LVU909
 2928              		.loc 1 616 22 is_stmt 0 view .LVU910
 2929 0904 03F1E802 		add	r2, r3, #232
 2930              		.loc 1 616 20 view .LVU911
 2931 0908 C5F8A822 		str	r2, [r5, #680]
 617:boards/TMC2041_eval.c **** 	Pins.INT          = &HAL.IOs->pins->DIO5;
 2932              		.loc 1 617 2 is_stmt 1 view .LVU912
 2933              		.loc 1 617 22 is_stmt 0 view .LVU913
 2934 090c 03F58472 		add	r2, r3, #264
 2935              		.loc 1 617 20 view .LVU914
 2936 0910 C5F8A422 		str	r2, [r5, #676]
 618:boards/TMC2041_eval.c **** 	Pins.REFL1_STEP1  = &HAL.IOs->pins->DIO6;
 2937              		.loc 1 618 2 is_stmt 1 view .LVU915
 619:boards/TMC2041_eval.c **** 	Pins.REFR1_DIR1   = &HAL.IOs->pins->DIO7;
 2938              		.loc 1 619 22 is_stmt 0 view .LVU916
 2939 0914 03F5A472 		add	r2, r3, #328
 2940              		.loc 1 619 20 view .LVU917
 2941 0918 C5F88C22 		str	r2, [r5, #652]
 620:boards/TMC2041_eval.c **** 	Pins.REFL2_STEP2  = &HAL.IOs->pins->DIO8;
 2942              		.loc 1 620 22 view .LVU918
 2943 091c 03F5B472 		add	r2, r3, #360
 618:boards/TMC2041_eval.c **** 	Pins.REFL1_STEP1  = &HAL.IOs->pins->DIO6;
 2944              		.loc 1 618 22 view .LVU919
 2945 0920 03F59470 		add	r0, r3, #296
 2946              		.loc 1 620 20 view .LVU920
 2947 0924 C5F88822 		str	r2, [r5, #648]
 621:boards/TMC2041_eval.c **** 	Pins.REFR2_DIR2   = &HAL.IOs->pins->DIO9;
 2948              		.loc 1 621 22 view .LVU921
 2949 0928 03F5C472 		add	r2, r3, #392
 622:boards/TMC2041_eval.c **** 	Pins.CSN          = &HAL.IOs->pins->SPI2_CSN0;
 2950              		.loc 1 622 22 view .LVU922
 2951 092c 03F50273 		add	r3, r3, #520
 2952              		.loc 1 622 20 view .LVU923
 2953 0930 C5F8AC32 		str	r3, [r5, #684]
 623:boards/TMC2041_eval.c **** 
 624:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFL1_STEP1);
 2954              		.loc 1 624 17 view .LVU924
 2955 0934 3368     		ldr	r3, [r6]
 621:boards/TMC2041_eval.c **** 	Pins.CSN          = &HAL.IOs->pins->SPI2_CSN0;
 2956              		.loc 1 621 20 view .LVU925
 2957 0936 C5F89022 		str	r2, [r5, #656]
 2958              		.loc 1 624 2 view .LVU926
 2959 093a DB68     		ldr	r3, [r3, #12]
 618:boards/TMC2041_eval.c **** 	Pins.REFR1_DIR1   = &HAL.IOs->pins->DIO7;
 2960              		.loc 1 618 20 view .LVU927
 2961 093c C5F88402 		str	r0, [r5, #644]
 619:boards/TMC2041_eval.c **** 	Pins.REFL2_STEP2  = &HAL.IOs->pins->DIO8;
 2962              		.loc 1 619 2 is_stmt 1 view .LVU928
 620:boards/TMC2041_eval.c **** 	Pins.REFR2_DIR2   = &HAL.IOs->pins->DIO9;
 2963              		.loc 1 620 2 view .LVU929
 621:boards/TMC2041_eval.c **** 	Pins.CSN          = &HAL.IOs->pins->SPI2_CSN0;
 2964              		.loc 1 621 2 view .LVU930
 622:boards/TMC2041_eval.c **** 
 2965              		.loc 1 622 2 view .LVU931
 2966              		.loc 1 624 2 view .LVU932
 2967 0940 9847     		blx	r3
 2968              	.LVL309:
 625:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFR1_DIR1);
 2969              		.loc 1 625 2 view .LVU933
 2970              		.loc 1 625 17 is_stmt 0 view .LVU934
 2971 0942 3368     		ldr	r3, [r6]
 2972              		.loc 1 625 2 view .LVU935
 2973 0944 D5F88C02 		ldr	r0, [r5, #652]
 2974 0948 DB68     		ldr	r3, [r3, #12]
 2975 094a 9847     		blx	r3
 2976              	.LVL310:
 626:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFL2_STEP2);
 2977              		.loc 1 626 2 is_stmt 1 view .LVU936
 2978              		.loc 1 626 17 is_stmt 0 view .LVU937
 2979 094c 3368     		ldr	r3, [r6]
 2980              		.loc 1 626 2 view .LVU938
 2981 094e D5F88802 		ldr	r0, [r5, #648]
 2982 0952 DB68     		ldr	r3, [r3, #12]
 2983 0954 9847     		blx	r3
 2984              	.LVL311:
 627:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFR2_DIR2);
 2985              		.loc 1 627 2 is_stmt 1 view .LVU939
 2986              		.loc 1 627 17 is_stmt 0 view .LVU940
 2987 0956 3368     		ldr	r3, [r6]
 2988              		.loc 1 627 2 view .LVU941
 2989 0958 D5F89002 		ldr	r0, [r5, #656]
 2990 095c DB68     		ldr	r3, [r3, #12]
 2991 095e 9847     		blx	r3
 2992              	.LVL312:
 628:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.DRV_ENN);
 2993              		.loc 1 628 2 is_stmt 1 view .LVU942
 2994              		.loc 1 628 17 is_stmt 0 view .LVU943
 2995 0960 3368     		ldr	r3, [r6]
 2996              		.loc 1 628 2 view .LVU944
 2997 0962 D5F89402 		ldr	r0, [r5, #660]
 2998 0966 DB68     		ldr	r3, [r3, #12]
 2999 0968 9847     		blx	r3
 3000              	.LVL313:
 629:boards/TMC2041_eval.c **** 	HAL.IOs->config->toOutput(Pins.CSN);
 3001              		.loc 1 629 2 is_stmt 1 view .LVU945
 3002              		.loc 1 629 17 is_stmt 0 view .LVU946
 3003 096a 3368     		ldr	r3, [r6]
 3004              		.loc 1 629 2 view .LVU947
 3005 096c D5F8AC02 		ldr	r0, [r5, #684]
 3006 0970 DB68     		ldr	r3, [r3, #12]
 3007 0972 9847     		blx	r3
 3008              	.LVL314:
 630:boards/TMC2041_eval.c **** 
 631:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel = &HAL.SPI->ch2;
 3009              		.loc 1 631 2 is_stmt 1 view .LVU948
 3010              		.loc 1 631 27 is_stmt 0 view .LVU949
 3011 0974 3B69     		ldr	r3, [r7, #16]
 632:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel->CSN = Pins.CSN;
 633:boards/TMC2041_eval.c **** 
 634:boards/TMC2041_eval.c **** 	TMC2041_config = &TMCDriver.config;
 635:boards/TMC2041_eval.c **** 
 636:boards/TMC2041_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 3012              		.loc 1 636 2 view .LVU950
 3013 0976 3A48     		ldr	r0, .L186+16
 631:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel->CSN = Pins.CSN;
 3014              		.loc 1 631 23 view .LVU951
 3015 0978 03F11402 		add	r2, r3, #20
 631:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel->CSN = Pins.CSN;
 3016              		.loc 1 631 21 view .LVU952
 3017 097c C5F8B022 		str	r2, [r5, #688]
 632:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel->CSN = Pins.CSN;
 3018              		.loc 1 632 2 is_stmt 1 view .LVU953
 632:boards/TMC2041_eval.c **** 	TMC2041_SPIChannel->CSN = Pins.CSN;
 3019              		.loc 1 632 26 is_stmt 0 view .LVU954
 3020 0980 D5F8AC22 		ldr	r2, [r5, #684]
 3021 0984 9A61     		str	r2, [r3, #24]
 634:boards/TMC2041_eval.c **** 
 3022              		.loc 1 634 2 is_stmt 1 view .LVU955
 3023              		.loc 1 636 2 view .LVU956
 3024 0986 FFF7FEFF 		bl	StepDir_init
 3025              	.LVL315:
 637:boards/TMC2041_eval.c **** 	StepDir_setPins(0, Pins.REFL1_STEP1, Pins.REFR1_DIR1, NULL);
 3026              		.loc 1 637 2 view .LVU957
 3027 098a 0023     		movs	r3, #0
 3028 098c D5F88C22 		ldr	r2, [r5, #652]
 3029 0990 D5F88412 		ldr	r1, [r5, #644]
 3030 0994 1846     		mov	r0, r3
 3031 0996 FFF7FEFF 		bl	StepDir_setPins
 3032              	.LVL316:
 638:boards/TMC2041_eval.c **** 	StepDir_setPins(1, Pins.REFL2_STEP2, Pins.REFR2_DIR2, NULL);
 3033              		.loc 1 638 2 view .LVU958
 3034 099a D5F88812 		ldr	r1, [r5, #648]
 3035 099e D5F89022 		ldr	r2, [r5, #656]
 3036 09a2 0023     		movs	r3, #0
 3037 09a4 0120     		movs	r0, #1
 3038 09a6 FFF7FEFF 		bl	StepDir_setPins
 3039              	.LVL317:
 639:boards/TMC2041_eval.c **** 
 640:boards/TMC2041_eval.c **** 	Evalboards.ch2.config->reset        = reset;
 3040              		.loc 1 640 2 view .LVU959
 3041              		.loc 1 640 16 is_stmt 0 view .LVU960
 3042 09aa D4F89030 		ldr	r3, [r4, #144]
 3043              		.loc 1 640 38 view .LVU961
 3044 09ae 2D4A     		ldr	r2, .L186+20
 3045 09b0 C3F80422 		str	r2, [r3, #516]
 641:boards/TMC2041_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 3046              		.loc 1 641 2 is_stmt 1 view .LVU962
 3047              		.loc 1 641 38 is_stmt 0 view .LVU963
 3048 09b4 2C4A     		ldr	r2, .L186+24
 3049 09b6 C3F80822 		str	r2, [r3, #520]
 642:boards/TMC2041_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 3050              		.loc 1 642 2 is_stmt 1 view .LVU964
 643:boards/TMC2041_eval.c **** 	Evalboards.ch2.config->configIndex  = 0;
 3051              		.loc 1 643 2 view .LVU965
 642:boards/TMC2041_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 3052              		.loc 1 642 38 is_stmt 0 view .LVU966
 3053 09ba 0122     		movs	r2, #1
 3054 09bc 1A80     		strh	r2, [r3]	@ movhi
 644:boards/TMC2041_eval.c **** 
 645:boards/TMC2041_eval.c **** 	Evalboards.ch2.rotate               = rotate;
 3055              		.loc 1 645 2 is_stmt 1 view .LVU967
 3056              		.loc 1 645 38 is_stmt 0 view .LVU968
 3057 09be 2B4B     		ldr	r3, .L186+28
 3058 09c0 C4F89C30 		str	r3, [r4, #156]
 646:boards/TMC2041_eval.c **** 	Evalboards.ch2.right                = right;
 3059              		.loc 1 646 2 is_stmt 1 view .LVU969
 3060              		.loc 1 646 38 is_stmt 0 view .LVU970
 3061 09c4 2A4B     		ldr	r3, .L186+32
 3062 09c6 C4F89830 		str	r3, [r4, #152]
 647:boards/TMC2041_eval.c **** 	Evalboards.ch2.left                 = left;
 3063              		.loc 1 647 2 is_stmt 1 view .LVU971
 3064              		.loc 1 647 38 is_stmt 0 view .LVU972
 3065 09ca 2A4B     		ldr	r3, .L186+36
 3066 09cc C4F89430 		str	r3, [r4, #148]
 648:boards/TMC2041_eval.c **** 	Evalboards.ch2.stop                 = stop;
 3067              		.loc 1 648 2 is_stmt 1 view .LVU973
 3068              		.loc 1 648 38 is_stmt 0 view .LVU974
 3069 09d0 294B     		ldr	r3, .L186+40
 3070 09d2 C4F8A030 		str	r3, [r4, #160]
 649:boards/TMC2041_eval.c **** 	Evalboards.ch2.GAP                  = GAP;
 3071              		.loc 1 649 2 is_stmt 1 view .LVU975
 3072              		.loc 1 649 38 is_stmt 0 view .LVU976
 3073 09d6 294B     		ldr	r3, .L186+44
 3074 09d8 C4F8B430 		str	r3, [r4, #180]
 650:boards/TMC2041_eval.c **** 	Evalboards.ch2.SAP                  = SAP;
 3075              		.loc 1 650 2 is_stmt 1 view .LVU977
 3076              		.loc 1 650 38 is_stmt 0 view .LVU978
 3077 09dc 284B     		ldr	r3, .L186+48
 3078 09de C4F8B030 		str	r3, [r4, #176]
 651:boards/TMC2041_eval.c **** 	Evalboards.ch2.moveTo               = moveTo;
 3079              		.loc 1 651 2 is_stmt 1 view .LVU979
 3080              		.loc 1 651 38 is_stmt 0 view .LVU980
 3081 09e2 284B     		ldr	r3, .L186+52
 3082 09e4 C4F8A430 		str	r3, [r4, #164]
 652:boards/TMC2041_eval.c **** 	Evalboards.ch2.moveBy               = moveBy;
 3083              		.loc 1 652 2 is_stmt 1 view .LVU981
 3084              		.loc 1 652 38 is_stmt 0 view .LVU982
 3085 09e8 274B     		ldr	r3, .L186+56
 3086 09ea C4F8A830 		str	r3, [r4, #168]
 653:boards/TMC2041_eval.c **** 	Evalboards.ch2.writeRegister        = writeRegister;
 3087              		.loc 1 653 2 is_stmt 1 view .LVU983
 3088              		.loc 1 653 38 is_stmt 0 view .LVU984
 3089 09ee 274B     		ldr	r3, .L186+60
 3090 09f0 C4F8C430 		str	r3, [r4, #196]
 654:boards/TMC2041_eval.c **** 	Evalboards.ch2.readRegister         = readRegister;
 3091              		.loc 1 654 2 is_stmt 1 view .LVU985
 3092              		.loc 1 654 38 is_stmt 0 view .LVU986
 3093 09f4 264B     		ldr	r3, .L186+64
 3094 09f6 C4F8C030 		str	r3, [r4, #192]
 655:boards/TMC2041_eval.c **** 	Evalboards.ch2.periodicJob          = periodicJob;
 3095              		.loc 1 655 2 is_stmt 1 view .LVU987
 3096              		.loc 1 655 38 is_stmt 0 view .LVU988
 3097 09fa 264B     		ldr	r3, .L186+68
 3098 09fc C4F8D030 		str	r3, [r4, #208]
 656:boards/TMC2041_eval.c **** 	Evalboards.ch2.userFunction         = userFunction;
 3099              		.loc 1 656 2 is_stmt 1 view .LVU989
 3100              		.loc 1 656 38 is_stmt 0 view .LVU990
 3101 0a00 254B     		ldr	r3, .L186+72
 3102 0a02 C4F8CC30 		str	r3, [r4, #204]
 657:boards/TMC2041_eval.c **** 	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
 3103              		.loc 1 657 2 is_stmt 1 view .LVU991
 3104              		.loc 1 657 38 is_stmt 0 view .LVU992
 3105 0a06 254B     		ldr	r3, .L186+76
 3106 0a08 C4F8C830 		str	r3, [r4, #200]
 658:boards/TMC2041_eval.c **** 	Evalboards.ch2.enableDriver         = enableDriver;
 3107              		.loc 1 658 2 is_stmt 1 view .LVU993
 3108              		.loc 1 658 38 is_stmt 0 view .LVU994
 3109 0a0c 244B     		ldr	r3, .L186+80
 3110 0a0e C4F8DC30 		str	r3, [r4, #220]
 659:boards/TMC2041_eval.c **** 	Evalboards.ch2.checkErrors          = checkErrors;
 3111              		.loc 1 659 2 is_stmt 1 view .LVU995
 3112              		.loc 1 659 38 is_stmt 0 view .LVU996
 3113 0a12 244B     		ldr	r3, .L186+84
 3114 0a14 C4F8D830 		str	r3, [r4, #216]
 660:boards/TMC2041_eval.c **** 	Evalboards.ch2.numberOfMotors       = TMC2041_MOTORS;
 3115              		.loc 1 660 2 is_stmt 1 view .LVU997
 661:boards/TMC2041_eval.c **** 	Evalboards.ch2.VMMin                = VM_MIN;
 662:boards/TMC2041_eval.c **** 	Evalboards.ch2.VMMax                = VM_MAX;
 3116              		.loc 1 662 38 is_stmt 0 view .LVU998
 3117 0a18 3222     		movs	r2, #50
 3118 0a1a 4FF48F73 		mov	r3, #286
 3119 0a1e C4E92132 		strd	r3, r2, [r4, #132]
 663:boards/TMC2041_eval.c **** 	Evalboards.ch2.deInit               = deInit;
 3120              		.loc 1 663 38 view .LVU999
 3121 0a22 214B     		ldr	r3, .L186+88
 3122 0a24 C4F8D430 		str	r3, [r4, #212]
 664:boards/TMC2041_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 3123              		.loc 1 664 38 view .LVU1000
 3124 0a28 204B     		ldr	r3, .L186+92
 3125 0a2a C4F8E830 		str	r3, [r4, #232]
 660:boards/TMC2041_eval.c **** 	Evalboards.ch2.VMMin                = VM_MIN;
 3126              		.loc 1 660 38 view .LVU1001
 3127 0a2e 0220     		movs	r0, #2
 665:boards/TMC2041_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 3128              		.loc 1 665 38 view .LVU1002
 3129 0a30 1F4B     		ldr	r3, .L186+96
 660:boards/TMC2041_eval.c **** 	Evalboards.ch2.VMMin                = VM_MIN;
 3130              		.loc 1 660 38 view .LVU1003
 3131 0a32 84F88C00 		strb	r0, [r4, #140]
 661:boards/TMC2041_eval.c **** 	Evalboards.ch2.VMMax                = VM_MAX;
 3132              		.loc 1 661 2 is_stmt 1 view .LVU1004
 663:boards/TMC2041_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 3133              		.loc 1 663 2 view .LVU1005
 664:boards/TMC2041_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 3134              		.loc 1 664 2 view .LVU1006
 3135              		.loc 1 665 2 view .LVU1007
 3136              		.loc 1 665 38 is_stmt 0 view .LVU1008
 3137 0a36 C4F8EC30 		str	r3, [r4, #236]
 666:boards/TMC2041_eval.c **** 
 667:boards/TMC2041_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 3138              		.loc 1 667 2 is_stmt 1 view .LVU1009
 668:boards/TMC2041_eval.c **** 
 669:boards/TMC2041_eval.c **** 	Timer.init();
 3139              		.loc 1 669 7 is_stmt 0 view .LVU1010
 3140 0a3a 1E4C     		ldr	r4, .L186+100
 667:boards/TMC2041_eval.c **** 
 3141              		.loc 1 667 2 view .LVU1011
 3142 0a3c FFF79AFE 		bl	enableDriver
 3143              	.LVL318:
 3144              		.loc 1 669 2 is_stmt 1 view .LVU1012
 3145 0a40 2368     		ldr	r3, [r4]
 3146 0a42 9847     		blx	r3
 3147              	.LVL319:
 670:boards/TMC2041_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 3148              		.loc 1 670 2 view .LVU1013
 3149 0a44 0021     		movs	r1, #0
 3150 0a46 A368     		ldr	r3, [r4, #8]
 3151 0a48 0846     		mov	r0, r1
 671:boards/TMC2041_eval.c **** }
 3152              		.loc 1 671 1 is_stmt 0 view .LVU1014
 3153 0a4a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3154              	.LCFI18:
 3155              		.cfi_restore 14
 3156              		.cfi_restore 8
 3157              		.cfi_restore 7
 3158              		.cfi_restore 6
 3159              		.cfi_restore 5
 3160              		.cfi_restore 4
 3161              		.cfi_def_cfa_offset 0
 670:boards/TMC2041_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 3162              		.loc 1 670 2 view .LVU1015
 3163 0a4e 1847     		bx	r3	@ indirect register sibling call
 3164              	.LVL320:
 3165              	.L187:
 3166              		.align	2
 3167              	.L186:
 3168 0a50 00000000 		.word	Evalboards
 3169 0a54 00000000 		.word	.LANCHOR0
 3170 0a58 00000000 		.word	HAL
 3171 0a5c 00000000 		.word	.LANCHOR1
 3172 0a60 A0860100 		.word	100000
 3173 0a64 00000000 		.word	reset
 3174 0a68 00000000 		.word	restore
 3175 0a6c 00000000 		.word	rotate
 3176 0a70 00000000 		.word	right
 3177 0a74 00000000 		.word	left
 3178 0a78 00000000 		.word	stop
 3179 0a7c 00000000 		.word	GAP
 3180 0a80 00000000 		.word	SAP
 3181 0a84 00000000 		.word	moveTo
 3182 0a88 00000000 		.word	moveBy
 3183 0a8c 00000000 		.word	writeRegister
 3184 0a90 00000000 		.word	readRegister
 3185 0a94 00000000 		.word	periodicJob
 3186 0a98 00000000 		.word	userFunction
 3187 0a9c 00000000 		.word	getMeasuredSpeed
 3188 0aa0 00000000 		.word	enableDriver
 3189 0aa4 00000000 		.word	checkErrors
 3190 0aa8 00000000 		.word	deInit
 3191 0aac 00000000 		.word	getMin
 3192 0ab0 00000000 		.word	getMax
 3193 0ab4 00000000 		.word	Timer
 3194              		.cfi_endproc
 3195              	.LFE26:
 3197              		.comm	TMCMotionController,532,4
 3198              		.comm	TMCDriver,532,4
 3199              		.comm	Evalboards,244,4
 3200              		.comm	VitalSignsMonitor,20,4
 3201              		.comm	hwid,1,1
 3202              		.comm	HAL,48,4
 3203              		.comm	UART,40,4
 3204              		.comm	Timer,16,4
 3205              		.comm	WLAN,36,4
 3206              		.comm	RS232,36,4
 3207              		.comm	LEDs,28,4
 3208              		.comm	USB,36,4
 3209              		.comm	uart0_interrupt,1,1
 3210              		.comm	ADCs,32,4
 3211              		.comm	SPI,44,4
 3212              		.comm	IOMap,2088,4
 3213              		.comm	IOs,52,4
 3214              		.comm	Cpu,8,4
 3215              		.section	.rodata
 3216              		.align	2
 3217              		.set	.LANCHOR1,. + 0
 3220              	tmc2041_defaultRegisterResetState:
 3221 0000 06000000 		.word	6
 3222 0004 00000000 		.word	0
 3223 0008 00000000 		.word	0
 3224 000c 00000000 		.word	0
 3225 0010 00000000 		.word	0
 3226 0014 00000000 		.word	0
 3227 0018 00000000 		.word	0
 3228 001c 00000000 		.word	0
 3229 0020 00000000 		.word	0
 3230 0024 00000000 		.word	0
 3231 0028 00000000 		.word	0
 3232 002c 00000000 		.word	0
 3233 0030 00000000 		.word	0
 3234 0034 00000000 		.word	0
 3235 0038 00000000 		.word	0
 3236 003c 00000000 		.word	0
 3237 0040 00000000 		.word	0
 3238 0044 00000000 		.word	0
 3239 0048 00000000 		.word	0
 3240 004c 00000000 		.word	0
 3241 0050 00000000 		.word	0
 3242 0054 00000000 		.word	0
 3243 0058 00000000 		.word	0
 3244 005c 00000000 		.word	0
 3245 0060 00000000 		.word	0
 3246 0064 00000000 		.word	0
 3247 0068 00000000 		.word	0
 3248 006c 00000000 		.word	0
 3249 0070 00000000 		.word	0
 3250 0074 00000000 		.word	0
 3251 0078 00000000 		.word	0
 3252 007c 00000000 		.word	0
 3253 0080 00000000 		.word	0
 3254 0084 00000000 		.word	0
 3255 0088 00000000 		.word	0
 3256 008c 00000000 		.word	0
 3257 0090 00000000 		.word	0
 3258 0094 00000000 		.word	0
 3259 0098 00000000 		.word	0
 3260 009c 00000000 		.word	0
 3261 00a0 00000000 		.word	0
 3262 00a4 00000000 		.word	0
 3263 00a8 00000000 		.word	0
 3264 00ac 00000000 		.word	0
 3265 00b0 00000000 		.word	0
 3266 00b4 00000000 		.word	0
 3267 00b8 00000000 		.word	0
 3268 00bc 00000000 		.word	0
 3269 00c0 03170700 		.word	464643
 3270 00c4 00000000 		.word	0
 3271 00c8 00000000 		.word	0
 3272 00cc 00000000 		.word	0
 3273 00d0 00000000 		.word	0
 3274 00d4 00000000 		.word	0
 3275 00d8 00000000 		.word	0
 3276 00dc 00000000 		.word	0
 3277 00e0 00000000 		.word	0
 3278 00e4 00000000 		.word	0
 3279 00e8 00000000 		.word	0
 3280 00ec 00000000 		.word	0
 3281 00f0 00000000 		.word	0
 3282 00f4 00000000 		.word	0
 3283 00f8 00000000 		.word	0
 3284 00fc 00000000 		.word	0
 3285 0100 00000000 		.word	0
 3286 0104 00000000 		.word	0
 3287 0108 00000000 		.word	0
 3288 010c 00000000 		.word	0
 3289 0110 00000000 		.word	0
 3290 0114 00000000 		.word	0
 3291 0118 00000000 		.word	0
 3292 011c 00000000 		.word	0
 3293 0120 00000000 		.word	0
 3294 0124 00000000 		.word	0
 3295 0128 00000000 		.word	0
 3296 012c 00000000 		.word	0
 3297 0130 00000000 		.word	0
 3298 0134 00000000 		.word	0
 3299 0138 00000000 		.word	0
 3300 013c 00000000 		.word	0
 3301 0140 03170700 		.word	464643
 3302 0144 00000000 		.word	0
 3303 0148 00000000 		.word	0
 3304 014c 00000000 		.word	0
 3305 0150 00000000 		.word	0
 3306 0154 00000000 		.word	0
 3307 0158 00000000 		.word	0
 3308 015c 00000000 		.word	0
 3309 0160 00000000 		.word	0
 3310 0164 00000000 		.word	0
 3311 0168 00000000 		.word	0
 3312 016c 00000000 		.word	0
 3313 0170 00000000 		.word	0
 3314 0174 00000000 		.word	0
 3315 0178 00000000 		.word	0
 3316 017c 00000000 		.word	0
 3317 0180 00000000 		.word	0
 3318 0184 00000000 		.word	0
 3319 0188 00000000 		.word	0
 3320 018c 00000000 		.word	0
 3321 0190 00000000 		.word	0
 3322 0194 00000000 		.word	0
 3323 0198 00000000 		.word	0
 3324 019c 00000000 		.word	0
 3325 01a0 00000000 		.word	0
 3326 01a4 00000000 		.word	0
 3327 01a8 00000000 		.word	0
 3328 01ac 00000000 		.word	0
 3329 01b0 D5010100 		.word	66005
 3330 01b4 00000000 		.word	0
 3331 01b8 00000000 		.word	0
 3332 01bc 00000000 		.word	0
 3333 01c0 00000000 		.word	0
 3334 01c4 00000000 		.word	0
 3335 01c8 00000000 		.word	0
 3336 01cc 00000000 		.word	0
 3337 01d0 00000000 		.word	0
 3338 01d4 00000000 		.word	0
 3339 01d8 00000000 		.word	0
 3340 01dc 00000000 		.word	0
 3341 01e0 00000000 		.word	0
 3342 01e4 00000000 		.word	0
 3343 01e8 00000000 		.word	0
 3344 01ec 00000000 		.word	0
 3345 01f0 D5010100 		.word	66005
 3346 01f4 00000000 		.word	0
 3347 01f8 00000000 		.word	0
 3348 01fc 00000000 		.word	0
 3349              		.bss
 3350              		.align	2
 3351              		.set	.LANCHOR0,. + 0
 3354              	TMC2041:
 3355 0000 00000000 		.space	644
 3355      00000000 
 3355      00000000 
 3355      00000000 
 3355      00000000 
 3358              	Pins:
 3359 0284 00000000 		.space	44
 3359      00000000 
 3359      00000000 
 3359      00000000 
 3359      00000000 
 3362              	TMC2041_SPIChannel:
 3363 02b0 00000000 		.space	4
 3366              	ADCValue:
 3367 02b4 00000000 		.space	12
 3367      00000000 
 3367      00000000 
 3368              		.text
 3369              	.Letext0:
 3370              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 3371              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3372              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3373              		.file 5 "TMC-API/tmc/helpers/Types.h"
 3374              		.file 6 "TMC-API/tmc/helpers/Config.h"
 3375              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3376              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3377              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3378              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 3379              		.file 11 "TMC-API/tmc/helpers/API_Header.h"
 3380              		.file 12 "hal/Landungsbruecke/freescale/MK20D10.h"
 3381              		.file 13 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 3382              		.file 14 "./hal/Landungsbruecke/freescale/Cpu.h"
 3383              		.file 15 "./hal/IOs.h"
 3384              		.file 16 "./hal/IOMap.h"
 3385              		.file 17 "./hal/SPI.h"
 3386              		.file 18 "./hal/ADCs.h"
 3387              		.file 19 "./hal/RXTX.h"
 3388              		.file 20 "./hal/USB.h"
 3389              		.file 21 "./hal/LEDs.h"
 3390              		.file 22 "./hal/RS232.h"
 3391              		.file 23 "./hal/WLAN.h"
 3392              		.file 24 "./hal/Timer.h"
 3393              		.file 25 "./hal/UART.h"
 3394              		.file 26 "./hal/HAL.h"
 3395              		.file 27 "./tmc/VitalSignsMonitor.h"
 3396              		.file 28 "boards/Board.h"
 3397              		.file 29 "boards/TMCDriver.h"
 3398              		.file 30 "boards/TMCMotionController.h"
 3399              		.file 31 "TMC-API/tmc/ic/TMC2041/TMC2041.h"
 3400              		.file 32 "./tmc/StepDir.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC2041_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:22     .text:00000000 checkErrors
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:42     .text:0000000c $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:46     .text:00000010 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:52     .text:00000010 readRegister
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:90     .text:00000020 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:94     .text:00000024 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:100    .text:00000024 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:188    .text:00000064 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:193    .text:00000068 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:199    .text:00000068 writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:225    .text:00000070 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:229    .text:00000074 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:235    .text:00000074 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:278    .text:00000086 rotate
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:321    .text:00000098 stop
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:344    .text:0000009c left
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:369    .text:000000a0 right
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:391    .text:000000a2 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:455    .text:000000e0 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:500    .text:00000194 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:510    .text:000001a0 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:540    .text:00000218 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:964    .text:00000376 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:972    .text:0000037e $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:1534   .text:0000054c $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:1554   .text:00000550 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2050   .text:000006f4 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2054   .text:000006f8 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2060   .text:000006f8 SAP
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2100   .text:0000070c GAP
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2130   .text:00000714 restore
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2145   .text:0000071c $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2149   .text:00000720 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2155   .text:00000720 reset
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2239   .text:0000076c $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2244   .text:00000774 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2250   .text:00000774 enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2326   .text:000007ac $d
                            *COM*:00000030 HAL
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2332   .text:000007b8 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2338   .text:000007b8 deInit
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2409   .text:000007f4 $d
                            *COM*:00000010 Timer
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2415   .text:00000800 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2421   .text:00000800 getMax
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2531   .text:0000082c getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2591   .text:00000842 userFunction
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2699   .text:0000088c $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2704   .text:00000894 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2710   .text:00000894 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2786   .text:000008b6 getMin
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2843   .text:000008cc tmc2041_readWriteArray
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2878   .text:000008dc $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2882   .text:000008e0 $t
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:2889   .text:000008e0 TMC2041_init
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3168   .text:00000a50 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000014 VitalSignsMonitor
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3216   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3220   .rodata:00000000 tmc2041_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3350   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3354   .bss:00000000 TMC2041
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3358   .bss:00000284 Pins
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3362   .bss:000002b0 TMC2041_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccmUu5F2.s:3366   .bss:000002b4 ADCValue

UNDEFINED SYMBOLS
tmc2041_readInt
tmc2041_periodicJob
StepDir_periodicJob
StepDir_stallGuard
tmc2041_writeInt
StepDir_moveTo
StepDir_rotate
StepDir_getTargetPosition
StepDir_getActualPosition
StepDir_setActualPosition
StepDir_getTargetVelocity
StepDir_getActualVelocity
StepDir_getVelocityMax
StepDir_setVelocityMax
StepDir_getAcceleration
StepDir_setAcceleration
StepDir_getStatus
StepDir_getMode
StepDir_setMode
StepDir_getFrequency
StepDir_setFrequency
StepDir_getStallGuardThreshold
StepDir_setStallGuardThreshold
tmc2041_restore
tmc2041_reset
StepDir_init
StepDir_setPins
StepDir_deInit
StepDir_getMaxAcceleration
tmc2041_init
