   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC2590_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	userFunction:
  23              	.LVL0:
  24              	.LFB4:
  25              		.file 1 "boards/TMC2590_eval.c"
   1:boards/TMC2590_eval.c **** #include "tmc/StepDir.h"
   2:boards/TMC2590_eval.c **** #include "Board.h"
   3:boards/TMC2590_eval.c **** #include "tmc/ic/TMC2590/TMC2590.h"
   4:boards/TMC2590_eval.c **** 
   5:boards/TMC2590_eval.c **** #undef  TMC2590_MAX_VELOCITY
   6:boards/TMC2590_eval.c **** #define TMC2590_MAX_VELOCITY  STEPDIR_MAX_VELOCITY
   7:boards/TMC2590_eval.c **** 
   8:boards/TMC2590_eval.c **** // Stepdir precision: 2^17 -> 17 digits of precision
   9:boards/TMC2590_eval.c **** #define STEPDIR_PRECISION (1 << 17)
  10:boards/TMC2590_eval.c **** 
  11:boards/TMC2590_eval.c **** #define VM_MIN  50   // VM[V/10] min
  12:boards/TMC2590_eval.c **** #define VM_MAX  600  // VM[V/10] max +10%
  13:boards/TMC2590_eval.c **** 
  14:boards/TMC2590_eval.c **** #define MOTORS 1
  15:boards/TMC2590_eval.c **** 
  16:boards/TMC2590_eval.c **** #define DEFAULT_MOTOR 0
  17:boards/TMC2590_eval.c **** 
  18:boards/TMC2590_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  19:boards/TMC2590_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  20:boards/TMC2590_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  21:boards/TMC2590_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  22:boards/TMC2590_eval.c **** static uint32_t stop(uint8_t motor);
  23:boards/TMC2590_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  24:boards/TMC2590_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  25:boards/TMC2590_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value);
  26:boards/TMC2590_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  27:boards/TMC2590_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  28:boards/TMC2590_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value);
  29:boards/TMC2590_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value);
  30:boards/TMC2590_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value);
  31:boards/TMC2590_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  32:boards/TMC2590_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  33:boards/TMC2590_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  34:boards/TMC2590_eval.c **** static void deInit(void);
  35:boards/TMC2590_eval.c **** static void periodicJob(uint32_t tick);
  36:boards/TMC2590_eval.c **** static uint8_t reset();
  37:boards/TMC2590_eval.c **** static uint8_t restore();
  38:boards/TMC2590_eval.c **** static void enableDriver(DriverState state);
  39:boards/TMC2590_eval.c **** 
  40:boards/TMC2590_eval.c **** static uint32_t compatibilityMode = 1;
  41:boards/TMC2590_eval.c **** 
  42:boards/TMC2590_eval.c **** static SPIChannelTypeDef *TMC2590_SPIChannel;
  43:boards/TMC2590_eval.c **** static TMC2590TypeDef TMC2590;
  44:boards/TMC2590_eval.c **** static ConfigurationTypeDef *TMC2590_config;
  45:boards/TMC2590_eval.c **** 
  46:boards/TMC2590_eval.c **** // Translate motor number to TMC2590TypeDef
  47:boards/TMC2590_eval.c **** // When using multiple ICs you can map them here
  48:boards/TMC2590_eval.c **** static inline TMC2590TypeDef *motorToIC(uint8_t motor)
  49:boards/TMC2590_eval.c **** {
  50:boards/TMC2590_eval.c **** 	UNUSED(motor);
  51:boards/TMC2590_eval.c **** 
  52:boards/TMC2590_eval.c **** 	return &TMC2590;
  53:boards/TMC2590_eval.c **** }
  54:boards/TMC2590_eval.c **** 
  55:boards/TMC2590_eval.c **** // Translate channel number to SPI channel
  56:boards/TMC2590_eval.c **** // When using multiple ICs you can map them here
  57:boards/TMC2590_eval.c **** static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  58:boards/TMC2590_eval.c **** {
  59:boards/TMC2590_eval.c **** 	UNUSED(channel);
  60:boards/TMC2590_eval.c **** 
  61:boards/TMC2590_eval.c **** 	return TMC2590_SPIChannel;
  62:boards/TMC2590_eval.c **** }
  63:boards/TMC2590_eval.c **** 
  64:boards/TMC2590_eval.c **** // SPI Wrapper for API
  65:boards/TMC2590_eval.c **** void tmc2590_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  66:boards/TMC2590_eval.c **** {
  67:boards/TMC2590_eval.c **** 	if(Evalboards.ch1.fullCover != NULL) {
  68:boards/TMC2590_eval.c **** 		UNUSED(channel);
  69:boards/TMC2590_eval.c **** 		Evalboards.ch1.fullCover(&data[0], length);
  70:boards/TMC2590_eval.c **** 	} else {
  71:boards/TMC2590_eval.c **** 		channelToSPI(channel)->readWriteArray(data, length);
  72:boards/TMC2590_eval.c **** 	}
  73:boards/TMC2590_eval.c **** }
  74:boards/TMC2590_eval.c **** 
  75:boards/TMC2590_eval.c **** typedef struct
  76:boards/TMC2590_eval.c **** {
  77:boards/TMC2590_eval.c **** 	IOPinTypeDef  *CSN;
  78:boards/TMC2590_eval.c **** 	IOPinTypeDef  *STEP;
  79:boards/TMC2590_eval.c **** 	IOPinTypeDef  *DIR;
  80:boards/TMC2590_eval.c **** 	IOPinTypeDef  *ENN;
  81:boards/TMC2590_eval.c **** 	IOPinTypeDef  *SG_TST;
  82:boards/TMC2590_eval.c **** 	IOPinTypeDef  *TEMP_BRIDGE;
  83:boards/TMC2590_eval.c **** } PinsTypeDef;
  84:boards/TMC2590_eval.c **** 
  85:boards/TMC2590_eval.c **** static PinsTypeDef Pins;
  86:boards/TMC2590_eval.c **** 
  87:boards/TMC2590_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
  88:boards/TMC2590_eval.c **** {
  26              		.loc 1 88 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  89:boards/TMC2590_eval.c **** 	uint32_t errors = 0;
  30              		.loc 1 89 2 view .LVU1
  90:boards/TMC2590_eval.c **** 
  91:boards/TMC2590_eval.c **** 	UNUSED(motor);
  31              		.loc 1 91 2 view .LVU2
  92:boards/TMC2590_eval.c **** 
  93:boards/TMC2590_eval.c **** 	switch(type)
  32              		.loc 1 93 2 view .LVU3
  88:boards/TMC2590_eval.c **** 	uint32_t errors = 0;
  33              		.loc 1 88 1 is_stmt 0 view .LVU4
  34 0000 0346     		mov	r3, r0
  35              		.loc 1 93 2 view .LVU5
  36 0002 012B     		cmp	r3, #1
  88:boards/TMC2590_eval.c **** 	uint32_t errors = 0;
  37              		.loc 1 88 1 view .LVU6
  38 0004 10B5     		push	{r4, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 4, -8
  42              		.cfi_offset 14, -4
  88:boards/TMC2590_eval.c **** 	uint32_t errors = 0;
  43              		.loc 1 88 1 view .LVU7
  44 0006 0846     		mov	r0, r1
  45              	.LVL1:
  88:boards/TMC2590_eval.c **** 	uint32_t errors = 0;
  46              		.loc 1 88 1 view .LVU8
  47 0008 1446     		mov	r4, r2
  48              		.loc 1 93 2 view .LVU9
  49 000a 0AD0     		beq	.L2
  50 000c 022B     		cmp	r3, #2
  51 000e 0FD0     		beq	.L3
  52 0010 93B9     		cbnz	r3, .L5
  94:boards/TMC2590_eval.c **** 	{
  95:boards/TMC2590_eval.c **** 	case 0:	// disable continuos read/write mode - used in BoardAssignment.c for the combination TMC43
  96:boards/TMC2590_eval.c **** 		// In continuos read/write mode settings will be continously written to TMC2590 and all replies a
  97:boards/TMC2590_eval.c **** 		// It's the default mode to prevent TMC2590 from loosing setting on brownout and being alway up t
  98:boards/TMC2590_eval.c **** 		TMC2590.continuousModeEnable = *value ? 0 : 1;
  53              		.loc 1 98 3 is_stmt 1 view .LVU10
  54              		.loc 1 98 45 is_stmt 0 view .LVU11
  55 0012 1268     		ldr	r2, [r2]
  56              	.LVL2:
  57              		.loc 1 98 45 view .LVU12
  58 0014 0949     		ldr	r1, .L7
  59              	.LVL3:
  60              		.loc 1 98 45 view .LVU13
  61 0016 B2FA82F2 		clz	r2, r2
  62 001a 5209     		lsrs	r2, r2, #5
  63 001c 0A71     		strb	r2, [r1, #4]
  99:boards/TMC2590_eval.c **** 		break;
  64              		.loc 1 99 3 is_stmt 1 view .LVU14
  65              	.L6:
 100:boards/TMC2590_eval.c **** 	case 1:	// disable compatibility mode
 101:boards/TMC2590_eval.c **** 		// per default compability mode is enabled,
 102:boards/TMC2590_eval.c **** 		// saying firmware works with orl TMC2590-Eval Tool
 103:boards/TMC2590_eval.c **** 		// e.g. stallGuard value is only
 104:boards/TMC2590_eval.c **** 		compatibilityMode = *value ? 0 : 1;
 105:boards/TMC2590_eval.c **** 		break;
 106:boards/TMC2590_eval.c **** 	case 2:  // Read StepDir status bits
 107:boards/TMC2590_eval.c **** 		*value = StepDir_getStatus(motor);
 108:boards/TMC2590_eval.c **** 		break;
  66              		.loc 1 108 3 view .LVU15
  89:boards/TMC2590_eval.c **** 
  67              		.loc 1 89 11 is_stmt 0 view .LVU16
  68 001e 0020     		movs	r0, #0
  69              	.LVL4:
  70              	.L1:
 109:boards/TMC2590_eval.c **** 	default:
 110:boards/TMC2590_eval.c **** 		errors |= TMC_ERROR_TYPE;
 111:boards/TMC2590_eval.c **** 		break;
 112:boards/TMC2590_eval.c **** 	}
 113:boards/TMC2590_eval.c **** 
 114:boards/TMC2590_eval.c **** 	return errors;
 115:boards/TMC2590_eval.c **** }
  71              		.loc 1 115 1 view .LVU17
  72 0020 10BD     		pop	{r4, pc}
  73              	.LVL5:
  74              	.L2:
 104:boards/TMC2590_eval.c **** 		break;
  75              		.loc 1 104 3 is_stmt 1 view .LVU18
 104:boards/TMC2590_eval.c **** 		break;
  76              		.loc 1 104 34 is_stmt 0 view .LVU19
  77 0022 1368     		ldr	r3, [r2]
 104:boards/TMC2590_eval.c **** 		break;
  78              		.loc 1 104 21 view .LVU20
  79 0024 064A     		ldr	r2, .L7+4
  80              	.LVL6:
 104:boards/TMC2590_eval.c **** 		break;
  81              		.loc 1 104 34 view .LVU21
  82 0026 B3FA83F3 		clz	r3, r3
  83 002a 5B09     		lsrs	r3, r3, #5
 104:boards/TMC2590_eval.c **** 		break;
  84              		.loc 1 104 21 view .LVU22
  85 002c 1360     		str	r3, [r2]
 105:boards/TMC2590_eval.c **** 	case 2:  // Read StepDir status bits
  86              		.loc 1 105 3 is_stmt 1 view .LVU23
  87 002e F6E7     		b	.L6
  88              	.LVL7:
  89              	.L3:
 107:boards/TMC2590_eval.c **** 		break;
  90              		.loc 1 107 3 view .LVU24
 107:boards/TMC2590_eval.c **** 		break;
  91              		.loc 1 107 12 is_stmt 0 view .LVU25
  92 0030 FFF7FEFF 		bl	StepDir_getStatus
  93              	.LVL8:
 107:boards/TMC2590_eval.c **** 		break;
  94              		.loc 1 107 12 view .LVU26
  95 0034 2060     		str	r0, [r4]
  96 0036 F2E7     		b	.L6
  97              	.LVL9:
  98              	.L5:
  93:boards/TMC2590_eval.c **** 	{
  99              		.loc 1 93 2 view .LVU27
 100 0038 0420     		movs	r0, #4
 101              	.LVL10:
 114:boards/TMC2590_eval.c **** }
 102              		.loc 1 114 2 is_stmt 1 view .LVU28
 114:boards/TMC2590_eval.c **** }
 103              		.loc 1 114 9 is_stmt 0 view .LVU29
 104 003a F1E7     		b	.L1
 105              	.L8:
 106              		.align	2
 107              	.L7:
 108 003c 00000000 		.word	.LANCHOR0
 109 0040 00000000 		.word	.LANCHOR1
 110              		.cfi_endproc
 111              	.LFE4:
 113              		.align	1
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu softvfp
 119              	readRegister:
 120              	.LVL11:
 121              	.LFB18:
 116:boards/TMC2590_eval.c **** 
 117:boards/TMC2590_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
 118:boards/TMC2590_eval.c **** {
 119:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 120:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 121:boards/TMC2590_eval.c **** 
 122:boards/TMC2590_eval.c **** 	StepDir_rotate(motor, velocity);
 123:boards/TMC2590_eval.c **** 
 124:boards/TMC2590_eval.c **** 	return TMC_ERROR_NONE;
 125:boards/TMC2590_eval.c **** }
 126:boards/TMC2590_eval.c **** 
 127:boards/TMC2590_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 128:boards/TMC2590_eval.c **** {
 129:boards/TMC2590_eval.c **** 	return rotate(motor, velocity);
 130:boards/TMC2590_eval.c **** }
 131:boards/TMC2590_eval.c **** 
 132:boards/TMC2590_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 133:boards/TMC2590_eval.c **** {
 134:boards/TMC2590_eval.c **** 	return rotate(motor, -velocity);
 135:boards/TMC2590_eval.c **** }
 136:boards/TMC2590_eval.c **** 
 137:boards/TMC2590_eval.c **** static uint32_t stop(uint8_t motor)
 138:boards/TMC2590_eval.c **** {
 139:boards/TMC2590_eval.c **** 	return rotate(motor, 0);
 140:boards/TMC2590_eval.c **** }
 141:boards/TMC2590_eval.c **** 
 142:boards/TMC2590_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 143:boards/TMC2590_eval.c **** {
 144:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 145:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 146:boards/TMC2590_eval.c **** 
 147:boards/TMC2590_eval.c **** 	StepDir_moveTo(motor, position);
 148:boards/TMC2590_eval.c **** 
 149:boards/TMC2590_eval.c **** 	return TMC_ERROR_NONE;
 150:boards/TMC2590_eval.c **** }
 151:boards/TMC2590_eval.c **** 
 152:boards/TMC2590_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 153:boards/TMC2590_eval.c **** {
 154:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 155:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 156:boards/TMC2590_eval.c **** 
 157:boards/TMC2590_eval.c **** 	// determine actual position and add numbers of ticks to move
 158:boards/TMC2590_eval.c **** 	*ticks += StepDir_getActualPosition(motor);
 159:boards/TMC2590_eval.c **** 
 160:boards/TMC2590_eval.c **** 	return moveTo(motor, *ticks);
 161:boards/TMC2590_eval.c **** }
 162:boards/TMC2590_eval.c **** 
 163:boards/TMC2590_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 164:boards/TMC2590_eval.c **** {
 165:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 166:boards/TMC2590_eval.c **** 
 167:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 168:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 169:boards/TMC2590_eval.c **** 
 170:boards/TMC2590_eval.c **** 	switch(type)
 171:boards/TMC2590_eval.c **** 	{
 172:boards/TMC2590_eval.c **** 	case 0:
 173:boards/TMC2590_eval.c **** 		// Target position
 174:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 175:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 176:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 177:boards/TMC2590_eval.c **** 			StepDir_moveTo(motor, *value);
 178:boards/TMC2590_eval.c **** 		}
 179:boards/TMC2590_eval.c **** 		break;
 180:boards/TMC2590_eval.c **** 	case 1:
 181:boards/TMC2590_eval.c **** 		// Actual position
 182:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 183:boards/TMC2590_eval.c **** 			*value = StepDir_getActualPosition(motor);
 184:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 185:boards/TMC2590_eval.c **** 			StepDir_setActualPosition(motor, *value);
 186:boards/TMC2590_eval.c **** 		}
 187:boards/TMC2590_eval.c **** 		break;
 188:boards/TMC2590_eval.c **** 	case 2:
 189:boards/TMC2590_eval.c **** 		// Target speed
 190:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 191:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 192:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 193:boards/TMC2590_eval.c **** 			StepDir_rotate(motor, *value);
 194:boards/TMC2590_eval.c **** 		}
 195:boards/TMC2590_eval.c **** 		break;
 196:boards/TMC2590_eval.c **** 	case 3:
 197:boards/TMC2590_eval.c **** 		// Actual speed
 198:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 199:boards/TMC2590_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 200:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 201:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 202:boards/TMC2590_eval.c **** 		}
 203:boards/TMC2590_eval.c **** 		break;
 204:boards/TMC2590_eval.c **** 	case 4:
 205:boards/TMC2590_eval.c **** 		// Maximum speed
 206:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 207:boards/TMC2590_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 208:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 209:boards/TMC2590_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 210:boards/TMC2590_eval.c **** 		}
 211:boards/TMC2590_eval.c **** 		break;
 212:boards/TMC2590_eval.c **** 	case 5:
 213:boards/TMC2590_eval.c **** 		// Maximum acceleration
 214:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 215:boards/TMC2590_eval.c **** 			*value = StepDir_getAcceleration(motor);
 216:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 217:boards/TMC2590_eval.c **** 			StepDir_setAcceleration(motor, *value);
 218:boards/TMC2590_eval.c **** 		}
 219:boards/TMC2590_eval.c **** 		break;
 220:boards/TMC2590_eval.c **** 	case 6:
 221:boards/TMC2590_eval.c **** 		// Maximum current
 222:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 223:boards/TMC2590_eval.c **** 			*value = TMC2590.runCurrentScale;
 224:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 225:boards/TMC2590_eval.c **** 			TMC2590.runCurrentScale = *value;
 226:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == false)
 227:boards/TMC2590_eval.c **** 			{
 228:boards/TMC2590_eval.c **** 				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, TMC
 229:boards/TMC2590_eval.c **** 			}
 230:boards/TMC2590_eval.c **** 		}
 231:boards/TMC2590_eval.c **** 		break;
 232:boards/TMC2590_eval.c **** 	case 7:
 233:boards/TMC2590_eval.c **** 		// Standby current
 234:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 235:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillCurrentScale;
 236:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 237:boards/TMC2590_eval.c **** 			TMC2590.standStillCurrentScale = *value;
 238:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == true)
 239:boards/TMC2590_eval.c **** 			{
 240:boards/TMC2590_eval.c **** 				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, TMC
 241:boards/TMC2590_eval.c **** 			}
 242:boards/TMC2590_eval.c **** 		}
 243:boards/TMC2590_eval.c **** 		break;
 244:boards/TMC2590_eval.c **** 	case 8:
 245:boards/TMC2590_eval.c **** 		// Position reached flag
 246:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 247:boards/TMC2590_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 248:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 249:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 250:boards/TMC2590_eval.c **** 		}
 251:boards/TMC2590_eval.c **** 		break;
 252:boards/TMC2590_eval.c **** 	case 29:
 253:boards/TMC2590_eval.c **** 		// Measured Speed
 254:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 255:boards/TMC2590_eval.c **** 			*value = StepDir_getActualVelocity(motor); // todo CHECK AP 2: Basically a duplicate of AP 3 - r
 256:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 257:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 258:boards/TMC2590_eval.c **** 		}
 259:boards/TMC2590_eval.c **** 		break;
 260:boards/TMC2590_eval.c **** 	case 50: // StepDir internal(0)/external(1)
 261:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 262:boards/TMC2590_eval.c **** 			*value = StepDir_getMode(motor);
 263:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 264:boards/TMC2590_eval.c **** 			StepDir_setMode(motor, *value);
 265:boards/TMC2590_eval.c **** 		}
 266:boards/TMC2590_eval.c **** 		break;
 267:boards/TMC2590_eval.c **** 	case 51: // StepDir interrupt frequency
 268:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 269:boards/TMC2590_eval.c **** 			*value = StepDir_getFrequency(motor);
 270:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 271:boards/TMC2590_eval.c **** 			StepDir_setFrequency(motor, *value);
 272:boards/TMC2590_eval.c **** 		}
 273:boards/TMC2590_eval.c **** 		break;
 274:boards/TMC2590_eval.c **** 	case 140:
 275:boards/TMC2590_eval.c **** 		// Microstep Resolution
 276:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 277:boards/TMC2590_eval.c **** 			*value = 8 - TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_M
 278:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 279:boards/TMC2590_eval.c **** 			switch(*value)
 280:boards/TMC2590_eval.c **** 			{
 281:boards/TMC2590_eval.c **** 			case 1:    *value = 8;   break;
 282:boards/TMC2590_eval.c **** 			case 2:    *value = 7;   break;
 283:boards/TMC2590_eval.c **** 			case 4:    *value = 6;   break;
 284:boards/TMC2590_eval.c **** 			case 8:    *value = 5;   break;
 285:boards/TMC2590_eval.c **** 			case 16:   *value = 4;   break;
 286:boards/TMC2590_eval.c **** 			case 32:   *value = 3;   break;
 287:boards/TMC2590_eval.c **** 			case 64:   *value = 2;   break;
 288:boards/TMC2590_eval.c **** 			case 128:  *value = 1;   break;
 289:boards/TMC2590_eval.c **** 			case 256:  *value = 0;   break;
 290:boards/TMC2590_eval.c **** 			default:   *value = -1;  break;
 291:boards/TMC2590_eval.c **** 			}
 292:boards/TMC2590_eval.c **** 
 293:boards/TMC2590_eval.c **** 			if(*value != -1)
 294:boards/TMC2590_eval.c **** 			{
 295:boards/TMC2590_eval.c **** 				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT, 
 296:boards/TMC2590_eval.c **** 			}
 297:boards/TMC2590_eval.c **** 			else
 298:boards/TMC2590_eval.c **** 			{
 299:boards/TMC2590_eval.c **** 				errors |= TMC_ERROR_VALUE;
 300:boards/TMC2590_eval.c **** 			}
 301:boards/TMC2590_eval.c **** 		}
 302:boards/TMC2590_eval.c **** 		break;
 303:boards/TMC2590_eval.c **** 	case 160:
 304:boards/TMC2590_eval.c **** 		// Microstep Interpolation
 305:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 306:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_INTPO
 307:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 308:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_INTPOL_MASK, TMC2590_INTPOL_SHIF
 309:boards/TMC2590_eval.c **** 		}
 310:boards/TMC2590_eval.c **** 		break;
 311:boards/TMC2590_eval.c **** 	case 161:
 312:boards/TMC2590_eval.c **** 		// Double Edge Steps
 313:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 314:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_DEDGE
 315:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 316:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_DEDGE_MASK, TMC2590_DEDGE_SHIFT,
 317:boards/TMC2590_eval.c **** 		}
 318:boards/TMC2590_eval.c **** 		break;
 319:boards/TMC2590_eval.c **** 	case 162:
 320:boards/TMC2590_eval.c **** 		// Chopper blank time
 321:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 322:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TBL_
 323:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 324:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TBL_MASK, TMC2590_TBL_SHIFT, *v
 325:boards/TMC2590_eval.c **** 		}
 326:boards/TMC2590_eval.c **** 		break;
 327:boards/TMC2590_eval.c **** 	case 163:
 328:boards/TMC2590_eval.c **** 		// Constant TOff Mode
 329:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 330:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_CHM_
 331:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 332:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_CHM_MASK, TMC2590_CHM_SHIFT, *v
 333:boards/TMC2590_eval.c **** 		}
 334:boards/TMC2590_eval.c **** 		break;
 335:boards/TMC2590_eval.c **** 	case 164:
 336:boards/TMC2590_eval.c **** 		// Disable fast decay comparator
 337:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 338:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HDEC
 339:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 340:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HDEC_MASK, TMC2590_HDEC_SHIFT, 
 341:boards/TMC2590_eval.c **** 		}
 342:boards/TMC2590_eval.c **** 		break;
 343:boards/TMC2590_eval.c **** 	case 165:
 344:boards/TMC2590_eval.c **** 		// Chopper hysteresis end / fast decay time
 345:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 346:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HEND
 347:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 348:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HEND_MASK, TMC2590_HEND_SHIFT, 
 349:boards/TMC2590_eval.c **** 		}
 350:boards/TMC2590_eval.c **** 		break;
 351:boards/TMC2590_eval.c **** 	case 166:
 352:boards/TMC2590_eval.c **** 		// Chopper hysteresis start / sine wave offset
 353:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 354:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HSTR
 355:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 356:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HSTRT_MASK, TMC2590_HSTRT_SHIFT
 357:boards/TMC2590_eval.c **** 		}
 358:boards/TMC2590_eval.c **** 		break;
 359:boards/TMC2590_eval.c **** 	case 167:
 360:boards/TMC2590_eval.c **** 		// Chopper off time
 361:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 362:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TOFF
 363:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 364:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TOFF_MASK, TMC2590_TOFF_SHIFT, 
 365:boards/TMC2590_eval.c **** 		}
 366:boards/TMC2590_eval.c **** 		break;
 367:boards/TMC2590_eval.c **** 	case 168:
 368:boards/TMC2590_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 369:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 370:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIM
 371:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 372:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIMIN_SHIF
 373:boards/TMC2590_eval.c **** 		}
 374:boards/TMC2590_eval.c **** 		break;
 375:boards/TMC2590_eval.c **** 	case 169:
 376:boards/TMC2590_eval.c **** 		// smartEnergy current down step
 377:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 378:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_S
 379:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 380:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_SHIFT, *
 381:boards/TMC2590_eval.c **** 		}
 382:boards/TMC2590_eval.c **** 		break;
 383:boards/TMC2590_eval.c **** 	case 170:
 384:boards/TMC2590_eval.c **** 		// smartEnergy hysteresis
 385:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 386:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX
 387:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 388:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX_SHIFT,
 389:boards/TMC2590_eval.c **** 		}
 390:boards/TMC2590_eval.c **** 		break;
 391:boards/TMC2590_eval.c **** 	case 171:
 392:boards/TMC2590_eval.c **** 		// smartEnergy current up step
 393:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 394:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_S
 395:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 396:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT, *
 397:boards/TMC2590_eval.c **** 		}
 398:boards/TMC2590_eval.c **** 		break;
 399:boards/TMC2590_eval.c **** 	case 172:
 400:boards/TMC2590_eval.c **** 		// smartEnergy hysteresis start
 401:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 402:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepActiveValue;
 403:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 404:boards/TMC2590_eval.c **** 			TMC2590.coolStepActiveValue = *value;
 405:boards/TMC2590_eval.c **** 		}
 406:boards/TMC2590_eval.c **** 		break;
 407:boards/TMC2590_eval.c **** 	case 173:
 408:boards/TMC2590_eval.c **** 		// stallGuard2 filter enable
 409:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 410:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFIL
 411:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 412:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFILT_SHIFT
 413:boards/TMC2590_eval.c **** 		}
 414:boards/TMC2590_eval.c **** 		break;
 415:boards/TMC2590_eval.c **** 	case 174:
 416:boards/TMC2590_eval.c **** 		// stallGuard2 threshold
 417:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 418:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SH
 419:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 420:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 421:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT, *v
 422:boards/TMC2590_eval.c **** 		}
 423:boards/TMC2590_eval.c **** 		break;
 424:boards/TMC2590_eval.c **** 	case 175:
 425:boards/TMC2590_eval.c **** 		// Slope control, high side
 426:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 427:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_S
 428:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 429:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_SHIFT, *
 430:boards/TMC2590_eval.c **** 		}
 431:boards/TMC2590_eval.c **** 		break;
 432:boards/TMC2590_eval.c **** 	case 176:
 433:boards/TMC2590_eval.c **** 		// Slope control, low side
 434:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 435:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_S
 436:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 437:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_SHIFT, *
 438:boards/TMC2590_eval.c **** 		}
 439:boards/TMC2590_eval.c **** 		break;
 440:boards/TMC2590_eval.c **** 	case 177:
 441:boards/TMC2590_eval.c **** 		// Short to Ground Protection
 442:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 443:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS
 444:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 445:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS2G_SHIF
 446:boards/TMC2590_eval.c **** 		}
 447:boards/TMC2590_eval.c **** 		break;
 448:boards/TMC2590_eval.c **** 	case 178:
 449:boards/TMC2590_eval.c **** 		// Short-to-ground detection timer
 450:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 451:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_S
 452:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 453:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_SHIFT, *
 454:boards/TMC2590_eval.c **** 		}
 455:boards/TMC2590_eval.c **** 		break;
 456:boards/TMC2590_eval.c **** 	case 179:
 457:boards/TMC2590_eval.c **** 		// VSense
 458:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 459:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSEN
 460:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 461:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSENSE_SHIF
 462:boards/TMC2590_eval.c **** 		}
 463:boards/TMC2590_eval.c **** 		break;
 464:boards/TMC2590_eval.c **** 	case 180:
 465:boards/TMC2590_eval.c **** 		// smartEnergy actual current
 466:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 467:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SE_MASK, TMC2590_SE_SHI
 468:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 469:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 470:boards/TMC2590_eval.c **** 		}
 471:boards/TMC2590_eval.c **** 		break;
 472:boards/TMC2590_eval.c **** 	case 181:
 473:boards/TMC2590_eval.c **** 		// smartEnergy stall velocity
 474:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 475:boards/TMC2590_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 476:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 477:boards/TMC2590_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 478:boards/TMC2590_eval.c **** 		}
 479:boards/TMC2590_eval.c **** 		break;
 480:boards/TMC2590_eval.c **** 	case 182:
 481:boards/TMC2590_eval.c **** 		// smartEnergy threshold speed
 482:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 483:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepThreshold;
 484:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 485:boards/TMC2590_eval.c **** 			TMC2590.coolStepThreshold = *value;
 486:boards/TMC2590_eval.c **** 		}
 487:boards/TMC2590_eval.c **** 		break;
 488:boards/TMC2590_eval.c **** 	case 183:
 489:boards/TMC2590_eval.c **** 		// Disable step/dir interface
 490:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 491:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF
 492:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 493:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF_SHIFT,
 494:boards/TMC2590_eval.c **** 		}
 495:boards/TMC2590_eval.c **** 		break;
 496:boards/TMC2590_eval.c **** 	case 184:
 497:boards/TMC2590_eval.c **** 		// Random TOff mode
 498:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 499:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDT
 500:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 501:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT
 502:boards/TMC2590_eval.c **** 		}
 503:boards/TMC2590_eval.c **** 		break;
 504:boards/TMC2590_eval.c **** 	case 185:
 505:boards/TMC2590_eval.c **** 		// Reserved test mode: leave undocumented?
 506:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 507:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHI
 508:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 509:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT, *va
 510:boards/TMC2590_eval.c **** 		}
 511:boards/TMC2590_eval.c **** 		break;
 512:boards/TMC2590_eval.c **** 	case 206:
 513:boards/TMC2590_eval.c **** 		// Load value
 514:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 515:boards/TMC2590_eval.c **** 			*value = (compatibilityMode) ?
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<
 517:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 518:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 519:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 520:boards/TMC2590_eval.c **** 		}
 521:boards/TMC2590_eval.c **** 		break;
 522:boards/TMC2590_eval.c **** 	case 208:
 523:boards/TMC2590_eval.c **** 		// Status Flags
 524:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 525:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE_LATEST, TMC2590_STATUS_MASK, TMC2
 526:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 527:boards/TMC2590_eval.c **** 			errors |= TMC_ERROR_TYPE;
 528:boards/TMC2590_eval.c **** 		}
 529:boards/TMC2590_eval.c **** 		break;
 530:boards/TMC2590_eval.c **** 	case 214:
 531:boards/TMC2590_eval.c **** 		// Power Down Delay
 532:boards/TMC2590_eval.c **** 		if(readWrite == READ) {
 533:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillTimeout;
 534:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 535:boards/TMC2590_eval.c **** 			TMC2590.standStillTimeout = *value;
 536:boards/TMC2590_eval.c **** 		}
 537:boards/TMC2590_eval.c **** 		break;
 538:boards/TMC2590_eval.c **** 	default:
 539:boards/TMC2590_eval.c **** 		errors |= TMC_ERROR_TYPE;
 540:boards/TMC2590_eval.c **** 		break;
 541:boards/TMC2590_eval.c **** 	}
 542:boards/TMC2590_eval.c **** 	return errors;
 543:boards/TMC2590_eval.c **** }
 544:boards/TMC2590_eval.c **** 
 545:boards/TMC2590_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 546:boards/TMC2590_eval.c **** {
 547:boards/TMC2590_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 548:boards/TMC2590_eval.c **** }
 549:boards/TMC2590_eval.c **** 
 550:boards/TMC2590_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 551:boards/TMC2590_eval.c **** {
 552:boards/TMC2590_eval.c **** 	return handleParameter(READ, motor, type, value);
 553:boards/TMC2590_eval.c **** }
 554:boards/TMC2590_eval.c **** 
 555:boards/TMC2590_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value)
 556:boards/TMC2590_eval.c **** {
 557:boards/TMC2590_eval.c **** 	UNUSED(motor);
 558:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 559:boards/TMC2590_eval.c **** 	switch(type) {
 560:boards/TMC2590_eval.c **** 	case 2:
 561:boards/TMC2590_eval.c **** 	case 3:
 562:boards/TMC2590_eval.c **** 	case 4:
 563:boards/TMC2590_eval.c **** 	case 24:
 564:boards/TMC2590_eval.c **** 		if(limit == LIMIT_MIN) {
 565:boards/TMC2590_eval.c **** 			*value = 0; // TODO: Determine limits here
 566:boards/TMC2590_eval.c **** 		} else if(limit == LIMIT_MAX) {
 567:boards/TMC2590_eval.c **** 			*value = StepDir_getFrequency(motor);
 568:boards/TMC2590_eval.c **** 		}
 569:boards/TMC2590_eval.c **** 		break;
 570:boards/TMC2590_eval.c **** 	case 5:
 571:boards/TMC2590_eval.c **** 		if(limit == LIMIT_MIN) {
 572:boards/TMC2590_eval.c **** 			*value = 0; // TODO: Determine limits here
 573:boards/TMC2590_eval.c **** 		} else if(limit == LIMIT_MAX) {
 574:boards/TMC2590_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 575:boards/TMC2590_eval.c **** 		}
 576:boards/TMC2590_eval.c **** 		break;
 577:boards/TMC2590_eval.c **** 	default:
 578:boards/TMC2590_eval.c **** 		errors |= TMC_ERROR_TYPE;
 579:boards/TMC2590_eval.c **** 		break;
 580:boards/TMC2590_eval.c **** 	}
 581:boards/TMC2590_eval.c **** 	return errors;
 582:boards/TMC2590_eval.c **** }
 583:boards/TMC2590_eval.c **** 
 584:boards/TMC2590_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value)
 585:boards/TMC2590_eval.c **** {
 586:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 587:boards/TMC2590_eval.c **** }
 588:boards/TMC2590_eval.c **** 
 589:boards/TMC2590_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value)
 590:boards/TMC2590_eval.c **** {
 591:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 592:boards/TMC2590_eval.c **** }
 593:boards/TMC2590_eval.c **** 
 594:boards/TMC2590_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 595:boards/TMC2590_eval.c **** {
 596:boards/TMC2590_eval.c **** 	tmc2590_writeInt(motorToIC(motor), address, value);
 597:boards/TMC2590_eval.c **** }
 598:boards/TMC2590_eval.c **** 
 599:boards/TMC2590_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 600:boards/TMC2590_eval.c **** {
 122              		.loc 1 600 1 is_stmt 1 view -0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 601:boards/TMC2590_eval.c **** 	*value = tmc2590_readInt(motorToIC(motor), address);
 126              		.loc 1 601 2 view .LVU31
 127              	.LBB162:
 128              	.LBI162:
  48:boards/TMC2590_eval.c **** {
 129              		.loc 1 48 31 view .LVU32
  48:boards/TMC2590_eval.c **** {
 130              		.loc 1 48 31 is_stmt 0 view .LVU33
 131              	.LBE162:
  50:boards/TMC2590_eval.c **** 
 132              		.loc 1 50 2 is_stmt 1 view .LVU34
  52:boards/TMC2590_eval.c **** }
 133              		.loc 1 52 2 view .LVU35
 600:boards/TMC2590_eval.c **** 	*value = tmc2590_readInt(motorToIC(motor), address);
 134              		.loc 1 600 1 is_stmt 0 view .LVU36
 135 0044 10B5     		push	{r4, lr}
 136              	.LCFI1:
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 4, -8
 139              		.cfi_offset 14, -4
 140              		.loc 1 601 11 view .LVU37
 141 0046 0348     		ldr	r0, .L10
 142              	.LVL12:
 600:boards/TMC2590_eval.c **** 	*value = tmc2590_readInt(motorToIC(motor), address);
 143              		.loc 1 600 1 view .LVU38
 144 0048 1446     		mov	r4, r2
 145              		.loc 1 601 11 view .LVU39
 146 004a FFF7FEFF 		bl	tmc2590_readInt
 147              	.LVL13:
 148              		.loc 1 601 9 view .LVU40
 149 004e 2060     		str	r0, [r4]
 602:boards/TMC2590_eval.c **** }
 150              		.loc 1 602 1 view .LVU41
 151 0050 10BD     		pop	{r4, pc}
 152              	.LVL14:
 153              	.L11:
 154              		.loc 1 602 1 view .LVU42
 155 0052 00BF     		.align	2
 156              	.L10:
 157 0054 00000000 		.word	.LANCHOR0
 158              		.cfi_endproc
 159              	.LFE18:
 161              		.align	1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu softvfp
 167              	periodicJob:
 168              	.LVL15:
 169              	.LFB21:
 603:boards/TMC2590_eval.c **** 
 604:boards/TMC2590_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 605:boards/TMC2590_eval.c **** {
 606:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 607:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 608:boards/TMC2590_eval.c **** 
 609:boards/TMC2590_eval.c **** 	switch(motor)
 610:boards/TMC2590_eval.c **** 	{
 611:boards/TMC2590_eval.c **** 	case 0:
 612:boards/TMC2590_eval.c **** 		*value = StepDir_getActualVelocity(motor);
 613:boards/TMC2590_eval.c **** 		break;
 614:boards/TMC2590_eval.c **** 	default:
 615:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 616:boards/TMC2590_eval.c **** 		break;
 617:boards/TMC2590_eval.c **** 	}
 618:boards/TMC2590_eval.c **** 	return TMC_ERROR_NONE;
 619:boards/TMC2590_eval.c **** }
 620:boards/TMC2590_eval.c **** 
 621:boards/TMC2590_eval.c **** static void deInit(void)
 622:boards/TMC2590_eval.c **** {
 623:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_DISABLE);
 624:boards/TMC2590_eval.c **** 
 625:boards/TMC2590_eval.c **** 	HAL.IOs->config->setHigh(Pins.ENN);
 626:boards/TMC2590_eval.c **** 
 627:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.CSN);
 628:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.DIR);
 629:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.ENN);
 630:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.SG_TST);
 631:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.STEP);
 632:boards/TMC2590_eval.c **** 
 633:boards/TMC2590_eval.c **** 	StepDir_deInit();
 634:boards/TMC2590_eval.c **** }
 635:boards/TMC2590_eval.c **** 
 636:boards/TMC2590_eval.c **** static void periodicJob(uint32_t tick)
 637:boards/TMC2590_eval.c **** {
 170              		.loc 1 637 1 is_stmt 1 view -0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 638:boards/TMC2590_eval.c **** 	static uint8_t lastCoolStepState = 0;
 174              		.loc 1 638 2 view .LVU44
 639:boards/TMC2590_eval.c **** 
 640:boards/TMC2590_eval.c **** 	tmc2590_periodicJob(&TMC2590, tick);
 175              		.loc 1 640 2 view .LVU45
 637:boards/TMC2590_eval.c **** 	static uint8_t lastCoolStepState = 0;
 176              		.loc 1 637 1 is_stmt 0 view .LVU46
 177 0058 70B5     		push	{r4, r5, r6, lr}
 178              	.LCFI2:
 179              		.cfi_def_cfa_offset 16
 180              		.cfi_offset 4, -16
 181              		.cfi_offset 5, -12
 182              		.cfi_offset 6, -8
 183              		.cfi_offset 14, -4
 184              		.loc 1 640 2 view .LVU47
 185 005a 164C     		ldr	r4, .L16
 637:boards/TMC2590_eval.c **** 	static uint8_t lastCoolStepState = 0;
 186              		.loc 1 637 1 view .LVU48
 187 005c 0146     		mov	r1, r0
 188              		.loc 1 640 2 view .LVU49
 189 005e 2046     		mov	r0, r4
 190              	.LVL16:
 191              		.loc 1 640 2 view .LVU50
 192 0060 FFF7FEFF 		bl	tmc2590_periodicJob
 193              	.LVL17:
 641:boards/TMC2590_eval.c **** 	StepDir_periodicJob(DEFAULT_MOTOR);
 194              		.loc 1 641 2 is_stmt 1 view .LVU51
 195 0064 0020     		movs	r0, #0
 196 0066 FFF7FEFF 		bl	StepDir_periodicJob
 197              	.LVL18:
 642:boards/TMC2590_eval.c **** 
 643:boards/TMC2590_eval.c **** 	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2590.coolStepThre
 198              		.loc 1 643 2 view .LVU52
 199              		.loc 1 643 35 is_stmt 0 view .LVU53
 200 006a 0020     		movs	r0, #0
 201 006c FFF7FEFF 		bl	StepDir_getActualVelocity
 202              	.LVL19:
 203              		.loc 1 643 87 view .LVU54
 204 0070 A368     		ldr	r3, [r4, #8]
 644:boards/TMC2590_eval.c **** 	if(currCoolStepState != lastCoolStepState)
 205              		.loc 1 644 4 view .LVU55
 206 0072 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 643:boards/TMC2590_eval.c **** 	if(currCoolStepState != lastCoolStepState)
 207              		.loc 1 643 31 view .LVU56
 208 0076 0028     		cmp	r0, #0
 209 0078 B8BF     		it	lt
 210 007a 4042     		rsblt	r0, r0, #0
 643:boards/TMC2590_eval.c **** 	if(currCoolStepState != lastCoolStepState)
 211              		.loc 1 643 10 view .LVU57
 212 007c 9842     		cmp	r0, r3
 213 007e 34BF     		ite	cc
 214 0080 0026     		movcc	r6, #0
 215 0082 0126     		movcs	r6, #1
 216              	.LVL20:
 217              		.loc 1 644 2 is_stmt 1 view .LVU58
 218              		.loc 1 644 4 is_stmt 0 view .LVU59
 219 0084 B242     		cmp	r2, r6
 220 0086 13D0     		beq	.L12
 221              	.LBB163:
 645:boards/TMC2590_eval.c **** 	{
 646:boards/TMC2590_eval.c **** 		uint8_t value = (currCoolStepState)? TMC2590.coolStepActiveValue : TMC2590.coolStepInactiveValue;
 222              		.loc 1 646 3 is_stmt 1 view .LVU60
 223              		.loc 1 646 11 is_stmt 0 view .LVU61
 224 0088 9842     		cmp	r0, r3
 647:boards/TMC2590_eval.c **** 		TMC2590_FIELD_UPDATE(&TMC2590, TMC2590_SMARTEN, TMC2590_SEMIN_MASK, TMC2590_SEMIN_SHIFT, value);
 225              		.loc 1 647 3 view .LVU62
 226 008a 4FF00501 		mov	r1, #5
 227 008e 0948     		ldr	r0, .L16
 646:boards/TMC2590_eval.c **** 		TMC2590_FIELD_UPDATE(&TMC2590, TMC2590_SMARTEN, TMC2590_SEMIN_MASK, TMC2590_SEMIN_SHIFT, value);
 228              		.loc 1 646 11 view .LVU63
 229 0090 2CBF     		ite	cs
 230 0092 A579     		ldrbcs	r5, [r4, #6]	@ zero_extendqisi2
 231 0094 6579     		ldrbcc	r5, [r4, #5]	@ zero_extendqisi2
 232              	.LVL21:
 233              		.loc 1 647 3 is_stmt 1 view .LVU64
 234 0096 FFF7FEFF 		bl	tmc2590_readInt
 235              	.LVL22:
 236 009a 05F00F05 		and	r5, r5, #15
 237              	.LVL23:
 238              		.loc 1 647 3 is_stmt 0 view .LVU65
 239 009e 20F00F02 		bic	r2, r0, #15
 240 00a2 2A43     		orrs	r2, r2, r5
 241 00a4 0348     		ldr	r0, .L16
 242 00a6 0521     		movs	r1, #5
 243 00a8 FFF7FEFF 		bl	tmc2590_writeInt
 244              	.LVL24:
 648:boards/TMC2590_eval.c **** 
 649:boards/TMC2590_eval.c **** 		lastCoolStepState = currCoolStepState;
 245              		.loc 1 649 3 is_stmt 1 view .LVU66
 246              		.loc 1 649 21 is_stmt 0 view .LVU67
 247 00ac 84F84060 		strb	r6, [r4, #64]
 248              	.L12:
 249              		.loc 1 649 21 view .LVU68
 250              	.LBE163:
 650:boards/TMC2590_eval.c **** 	}
 651:boards/TMC2590_eval.c **** }
 251              		.loc 1 651 1 view .LVU69
 252 00b0 70BD     		pop	{r4, r5, r6, pc}
 253              	.LVL25:
 254              	.L17:
 255              		.loc 1 651 1 view .LVU70
 256 00b2 00BF     		.align	2
 257              	.L16:
 258 00b4 00000000 		.word	.LANCHOR0
 259              		.cfi_endproc
 260              	.LFE21:
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 266              		.fpu softvfp
 268              	writeRegister:
 269              	.LVL26:
 270              	.LFB17:
 595:boards/TMC2590_eval.c **** 	tmc2590_writeInt(motorToIC(motor), address, value);
 271              		.loc 1 595 1 is_stmt 1 view -0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              		@ link register save eliminated.
 596:boards/TMC2590_eval.c **** }
 276              		.loc 1 596 2 view .LVU72
 277              	.LBB164:
 278              	.LBI164:
  48:boards/TMC2590_eval.c **** {
 279              		.loc 1 48 31 view .LVU73
  48:boards/TMC2590_eval.c **** {
 280              		.loc 1 48 31 is_stmt 0 view .LVU74
 281              	.LBE164:
  50:boards/TMC2590_eval.c **** 
 282              		.loc 1 50 2 is_stmt 1 view .LVU75
  52:boards/TMC2590_eval.c **** }
 283              		.loc 1 52 2 view .LVU76
 596:boards/TMC2590_eval.c **** }
 284              		.loc 1 596 2 is_stmt 0 view .LVU77
 285 00b8 0148     		ldr	r0, .L19
 286              	.LVL27:
 596:boards/TMC2590_eval.c **** }
 287              		.loc 1 596 2 view .LVU78
 288 00ba FFF7FEBF 		b	tmc2590_writeInt
 289              	.LVL28:
 290              	.L20:
 596:boards/TMC2590_eval.c **** }
 291              		.loc 1 596 2 view .LVU79
 292 00be 00BF     		.align	2
 293              	.L19:
 294 00c0 00000000 		.word	.LANCHOR0
 295              		.cfi_endproc
 296              	.LFE17:
 298              		.align	1
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
 304              	moveTo:
 305              	.LVL29:
 306              	.LFB9:
 143:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 307              		.loc 1 143 1 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 144:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 311              		.loc 1 144 2 view .LVU81
 143:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 312              		.loc 1 143 1 is_stmt 0 view .LVU82
 313 00c4 10B5     		push	{r4, lr}
 314              	.LCFI3:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 4, -8
 317              		.cfi_offset 14, -4
 144:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 318              		.loc 1 144 4 view .LVU83
 319 00c6 0446     		mov	r4, r0
 320 00c8 18B9     		cbnz	r0, .L23
 147:boards/TMC2590_eval.c **** 
 321              		.loc 1 147 2 is_stmt 1 view .LVU84
 322 00ca FFF7FEFF 		bl	StepDir_moveTo
 323              	.LVL30:
 149:boards/TMC2590_eval.c **** }
 324              		.loc 1 149 2 view .LVU85
 149:boards/TMC2590_eval.c **** }
 325              		.loc 1 149 9 is_stmt 0 view .LVU86
 326 00ce 2046     		mov	r0, r4
 327              	.L21:
 150:boards/TMC2590_eval.c **** 
 328              		.loc 1 150 1 view .LVU87
 329 00d0 10BD     		pop	{r4, pc}
 330              	.LVL31:
 331              	.L23:
 145:boards/TMC2590_eval.c **** 
 332              		.loc 1 145 10 view .LVU88
 333 00d2 0820     		movs	r0, #8
 334              	.LVL32:
 145:boards/TMC2590_eval.c **** 
 335              		.loc 1 145 10 view .LVU89
 336 00d4 FCE7     		b	.L21
 337              		.cfi_endproc
 338              	.LFE9:
 340              		.align	1
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu softvfp
 346              	rotate:
 347              	.LVL33:
 348              	.LFB5:
 118:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 349              		.loc 1 118 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 119:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 353              		.loc 1 119 2 view .LVU91
 118:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 354              		.loc 1 118 1 is_stmt 0 view .LVU92
 355 00d6 10B5     		push	{r4, lr}
 356              	.LCFI4:
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 4, -8
 359              		.cfi_offset 14, -4
 119:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 360              		.loc 1 119 4 view .LVU93
 361 00d8 0446     		mov	r4, r0
 362 00da 18B9     		cbnz	r0, .L26
 122:boards/TMC2590_eval.c **** 
 363              		.loc 1 122 2 is_stmt 1 view .LVU94
 364 00dc FFF7FEFF 		bl	StepDir_rotate
 365              	.LVL34:
 124:boards/TMC2590_eval.c **** }
 366              		.loc 1 124 2 view .LVU95
 124:boards/TMC2590_eval.c **** }
 367              		.loc 1 124 9 is_stmt 0 view .LVU96
 368 00e0 2046     		mov	r0, r4
 369              	.L24:
 125:boards/TMC2590_eval.c **** 
 370              		.loc 1 125 1 view .LVU97
 371 00e2 10BD     		pop	{r4, pc}
 372              	.LVL35:
 373              	.L26:
 120:boards/TMC2590_eval.c **** 
 374              		.loc 1 120 10 view .LVU98
 375 00e4 0820     		movs	r0, #8
 376              	.LVL36:
 120:boards/TMC2590_eval.c **** 
 377              		.loc 1 120 10 view .LVU99
 378 00e6 FCE7     		b	.L24
 379              		.cfi_endproc
 380              	.LFE5:
 382              		.align	1
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu softvfp
 388              	stop:
 389              	.LVL37:
 390              	.LFB8:
 138:boards/TMC2590_eval.c **** 	return rotate(motor, 0);
 391              		.loc 1 138 1 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 139:boards/TMC2590_eval.c **** }
 396              		.loc 1 139 2 view .LVU101
 139:boards/TMC2590_eval.c **** }
 397              		.loc 1 139 9 is_stmt 0 view .LVU102
 398 00e8 0021     		movs	r1, #0
 399 00ea F4E7     		b	rotate
 400              	.LVL38:
 139:boards/TMC2590_eval.c **** }
 401              		.loc 1 139 9 view .LVU103
 402              		.cfi_endproc
 403              	.LFE8:
 405              		.align	1
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu softvfp
 411              	left:
 412              	.LVL39:
 413              	.LFB7:
 133:boards/TMC2590_eval.c **** 	return rotate(motor, -velocity);
 414              		.loc 1 133 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 134:boards/TMC2590_eval.c **** }
 419              		.loc 1 134 2 view .LVU105
 134:boards/TMC2590_eval.c **** }
 420              		.loc 1 134 9 is_stmt 0 view .LVU106
 421 00ec 4942     		rsbs	r1, r1, #0
 422              	.LVL40:
 134:boards/TMC2590_eval.c **** }
 423              		.loc 1 134 9 view .LVU107
 424 00ee F2E7     		b	rotate
 425              	.LVL41:
 134:boards/TMC2590_eval.c **** }
 426              		.loc 1 134 9 view .LVU108
 427              		.cfi_endproc
 428              	.LFE7:
 430              		.align	1
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu softvfp
 436              	right:
 437              	.LVL42:
 438              	.LFB6:
 128:boards/TMC2590_eval.c **** 	return rotate(motor, velocity);
 439              		.loc 1 128 1 is_stmt 1 view -0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 129:boards/TMC2590_eval.c **** }
 444              		.loc 1 129 2 view .LVU110
 129:boards/TMC2590_eval.c **** }
 445              		.loc 1 129 9 is_stmt 0 view .LVU111
 446 00f0 F1E7     		b	rotate
 447              	.LVL43:
 129:boards/TMC2590_eval.c **** }
 448              		.loc 1 129 9 view .LVU112
 449              		.cfi_endproc
 450              	.LFE6:
 452              		.align	1
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu softvfp
 458              	handleParameter:
 459              	.LVL44:
 460              	.LFB11:
 164:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 461              		.loc 1 164 1 is_stmt 1 view -0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 165:boards/TMC2590_eval.c **** 
 465              		.loc 1 165 2 view .LVU114
 167:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 466              		.loc 1 167 2 view .LVU115
 164:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 467              		.loc 1 164 1 is_stmt 0 view .LVU116
 468 00f2 70B5     		push	{r4, r5, r6, lr}
 469              	.LCFI5:
 470              		.cfi_def_cfa_offset 16
 471              		.cfi_offset 4, -16
 472              		.cfi_offset 5, -12
 473              		.cfi_offset 6, -8
 474              		.cfi_offset 14, -4
 164:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 475              		.loc 1 164 1 view .LVU117
 476 00f4 0446     		mov	r4, r0
 477 00f6 1D46     		mov	r5, r3
 167:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 478              		.loc 1 167 4 view .LVU118
 479 00f8 0E46     		mov	r6, r1
 480 00fa 0029     		cmp	r1, #0
 481 00fc 40F09383 		bne	.L133
 170:boards/TMC2590_eval.c **** 	{
 482              		.loc 1 170 2 is_stmt 1 view .LVU119
 483 0100 D62A     		cmp	r2, #214
 484 0102 0AD8     		bhi	.L142
 485 0104 8B2A     		cmp	r2, #139
 486 0106 0AD8     		bhi	.L32
 487 0108 1D2A     		cmp	r2, #29
 488 010a 40F2A580 		bls	.L143
 489 010e 322A     		cmp	r2, #50
 490 0110 00F05681 		beq	.L76
 491 0114 332A     		cmp	r2, #51
 492 0116 00F05C81 		beq	.L77
 493              	.LVL45:
 494              	.L142:
 201:boards/TMC2590_eval.c **** 		}
 495              		.loc 1 201 11 is_stmt 0 view .LVU120
 496 011a 0424     		movs	r4, #4
 497              	.LVL46:
 201:boards/TMC2590_eval.c **** 		}
 498              		.loc 1 201 11 view .LVU121
 499 011c E2E0     		b	.L30
 500              	.LVL47:
 501              	.L32:
 201:boards/TMC2590_eval.c **** 		}
 502              		.loc 1 201 11 view .LVU122
 503 011e 8C3A     		subs	r2, r2, #140
 504              	.LVL48:
 201:boards/TMC2590_eval.c **** 		}
 505              		.loc 1 201 11 view .LVU123
 506 0120 4A2A     		cmp	r2, #74
 507 0122 FAD8     		bhi	.L142
 508 0124 01A3     		adr	r3, .L36
 509 0126 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 510              	.LVL49:
 511 012a 00BF     		.p2align 2
 512              	.L36:
 513 012c E5030000 		.word	.L65+1
 514 0130 1B010000 		.word	.L142+1
 515 0134 1B010000 		.word	.L142+1
 516 0138 1B010000 		.word	.L142+1
 517 013c 1B010000 		.word	.L142+1
 518 0140 1B010000 		.word	.L142+1
 519 0144 1B010000 		.word	.L142+1
 520 0148 1B010000 		.word	.L142+1
 521 014c 1B010000 		.word	.L142+1
 522 0150 1B010000 		.word	.L142+1
 523 0154 1B010000 		.word	.L142+1
 524 0158 1B010000 		.word	.L142+1
 525 015c 1B010000 		.word	.L142+1
 526 0160 1B010000 		.word	.L142+1
 527 0164 1B010000 		.word	.L142+1
 528 0168 1B010000 		.word	.L142+1
 529 016c 1B010000 		.word	.L142+1
 530 0170 1B010000 		.word	.L142+1
 531 0174 1B010000 		.word	.L142+1
 532 0178 1B010000 		.word	.L142+1
 533 017c 71040000 		.word	.L64+1
 534 0180 99040000 		.word	.L63+1
 535 0184 BF040000 		.word	.L62+1
 536 0188 E7040000 		.word	.L61+1
 537 018c 0D050000 		.word	.L60+1
 538 0190 33050000 		.word	.L59+1
 539 0194 59050000 		.word	.L58+1
 540 0198 7F050000 		.word	.L57+1
 541 019c A7050000 		.word	.L56+1
 542 01a0 CD050000 		.word	.L55+1
 543 01a4 F5050000 		.word	.L54+1
 544 01a8 17060000 		.word	.L53+1
 545 01ac 39060000 		.word	.L52+1
 546 01b0 47060000 		.word	.L51+1
 547 01b4 6D060000 		.word	.L50+1
 548 01b8 9D060000 		.word	.L49+1
 549 01bc C1060000 		.word	.L48+1
 550 01c0 E3060000 		.word	.L47+1
 551 01c4 05070000 		.word	.L46+1
 552 01c8 27070000 		.word	.L45+1
 553 01cc 49070000 		.word	.L44+1
 554 01d0 5D070000 		.word	.L43+1
 555 01d4 6F070000 		.word	.L42+1
 556 01d8 7D070000 		.word	.L41+1
 557 01dc 9D070000 		.word	.L40+1
 558 01e0 BF070000 		.word	.L39+1
 559 01e4 1B010000 		.word	.L142+1
 560 01e8 1B010000 		.word	.L142+1
 561 01ec 1B010000 		.word	.L142+1
 562 01f0 1B010000 		.word	.L142+1
 563 01f4 1B010000 		.word	.L142+1
 564 01f8 1B010000 		.word	.L142+1
 565 01fc 1B010000 		.word	.L142+1
 566 0200 1B010000 		.word	.L142+1
 567 0204 1B010000 		.word	.L142+1
 568 0208 1B010000 		.word	.L142+1
 569 020c 1B010000 		.word	.L142+1
 570 0210 1B010000 		.word	.L142+1
 571 0214 1B010000 		.word	.L142+1
 572 0218 1B010000 		.word	.L142+1
 573 021c 1B010000 		.word	.L142+1
 574 0220 1B010000 		.word	.L142+1
 575 0224 1B010000 		.word	.L142+1
 576 0228 1B010000 		.word	.L142+1
 577 022c 1B010000 		.word	.L142+1
 578 0230 1B010000 		.word	.L142+1
 579 0234 DB070000 		.word	.L38+1
 580 0238 1B010000 		.word	.L142+1
 581 023c 07080000 		.word	.L37+1
 582 0240 1B010000 		.word	.L142+1
 583 0244 1B010000 		.word	.L142+1
 584 0248 1B010000 		.word	.L142+1
 585 024c 1B010000 		.word	.L142+1
 586 0250 1B010000 		.word	.L142+1
 587 0254 19080000 		.word	.L35+1
 588              		.p2align 1
 589              	.L143:
 201:boards/TMC2590_eval.c **** 		}
 590              		.loc 1 201 11 view .LVU124
 591 0258 1D2A     		cmp	r2, #29
 592 025a 3FF65EAF 		bhi	.L142
 593 025e 01A3     		adr	r3, .L67
 594 0260 53F822F0 		ldr	pc, [r3, r2, lsl #2]
 595              	.LVL50:
 596              		.p2align 2
 597              	.L67:
 598 0264 DD020000 		.word	.L75+1
 599 0268 F5020000 		.word	.L74+1
 600 026c 07030000 		.word	.L73+1
 601 0270 19030000 		.word	.L66+1
 602 0274 25030000 		.word	.L72+1
 603 0278 3D030000 		.word	.L71+1
 604 027c 4F030000 		.word	.L70+1
 605 0280 81030000 		.word	.L69+1
 606 0284 B1030000 		.word	.L68+1
 607 0288 1B010000 		.word	.L142+1
 608 028c 1B010000 		.word	.L142+1
 609 0290 1B010000 		.word	.L142+1
 610 0294 1B010000 		.word	.L142+1
 611 0298 1B010000 		.word	.L142+1
 612 029c 1B010000 		.word	.L142+1
 613 02a0 1B010000 		.word	.L142+1
 614 02a4 1B010000 		.word	.L142+1
 615 02a8 1B010000 		.word	.L142+1
 616 02ac 1B010000 		.word	.L142+1
 617 02b0 1B010000 		.word	.L142+1
 618 02b4 1B010000 		.word	.L142+1
 619 02b8 1B010000 		.word	.L142+1
 620 02bc 1B010000 		.word	.L142+1
 621 02c0 1B010000 		.word	.L142+1
 622 02c4 1B010000 		.word	.L142+1
 623 02c8 1B010000 		.word	.L142+1
 624 02cc 1B010000 		.word	.L142+1
 625 02d0 1B010000 		.word	.L142+1
 626 02d4 1B010000 		.word	.L142+1
 627 02d8 19030000 		.word	.L66+1
 628              		.p2align 1
 629              	.L75:
 174:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 630              		.loc 1 174 3 is_stmt 1 view .LVU125
 174:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 631              		.loc 1 174 5 is_stmt 0 view .LVU126
 632 02dc 20B9     		cbnz	r0, .L78
 175:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 633              		.loc 1 175 4 is_stmt 1 view .LVU127
 175:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 634              		.loc 1 175 13 is_stmt 0 view .LVU128
 635 02de FFF7FEFF 		bl	StepDir_getTargetPosition
 636              	.LVL51:
 637              	.L145:
 183:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 638              		.loc 1 183 11 view .LVU129
 639 02e2 2860     		str	r0, [r5]
 640              	.LVL52:
 641              	.L30:
 543:boards/TMC2590_eval.c **** 
 642              		.loc 1 543 1 view .LVU130
 643 02e4 2046     		mov	r0, r4
 644 02e6 70BD     		pop	{r4, r5, r6, pc}
 645              	.LVL53:
 646              	.L78:
 176:boards/TMC2590_eval.c **** 			StepDir_moveTo(motor, *value);
 647              		.loc 1 176 10 is_stmt 1 view .LVU131
 177:boards/TMC2590_eval.c **** 		}
 648              		.loc 1 177 4 view .LVU132
 649 02e8 2968     		ldr	r1, [r5]
 650              	.LVL54:
 177:boards/TMC2590_eval.c **** 		}
 651              		.loc 1 177 4 is_stmt 0 view .LVU133
 652 02ea 0020     		movs	r0, #0
 653              	.LVL55:
 177:boards/TMC2590_eval.c **** 		}
 654              		.loc 1 177 4 view .LVU134
 655 02ec FFF7FEFF 		bl	StepDir_moveTo
 656              	.LVL56:
 657              	.L146:
 165:boards/TMC2590_eval.c **** 
 658              		.loc 1 165 11 view .LVU135
 659 02f0 0024     		movs	r4, #0
 660 02f2 F7E7     		b	.L30
 661              	.LVL57:
 662              	.L74:
 182:boards/TMC2590_eval.c **** 			*value = StepDir_getActualPosition(motor);
 663              		.loc 1 182 3 is_stmt 1 view .LVU136
 182:boards/TMC2590_eval.c **** 			*value = StepDir_getActualPosition(motor);
 664              		.loc 1 182 5 is_stmt 0 view .LVU137
 665 02f4 10B9     		cbnz	r0, .L79
 183:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 666              		.loc 1 183 4 is_stmt 1 view .LVU138
 183:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 667              		.loc 1 183 13 is_stmt 0 view .LVU139
 668 02f6 FFF7FEFF 		bl	StepDir_getActualPosition
 669              	.LVL58:
 183:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 670              		.loc 1 183 13 view .LVU140
 671 02fa F2E7     		b	.L145
 672              	.LVL59:
 673              	.L79:
 184:boards/TMC2590_eval.c **** 			StepDir_setActualPosition(motor, *value);
 674              		.loc 1 184 10 is_stmt 1 view .LVU141
 185:boards/TMC2590_eval.c **** 		}
 675              		.loc 1 185 4 view .LVU142
 676 02fc 2968     		ldr	r1, [r5]
 677              	.LVL60:
 185:boards/TMC2590_eval.c **** 		}
 678              		.loc 1 185 4 is_stmt 0 view .LVU143
 679 02fe 0020     		movs	r0, #0
 680              	.LVL61:
 185:boards/TMC2590_eval.c **** 		}
 681              		.loc 1 185 4 view .LVU144
 682 0300 FFF7FEFF 		bl	StepDir_setActualPosition
 683              	.LVL62:
 185:boards/TMC2590_eval.c **** 		}
 684              		.loc 1 185 4 view .LVU145
 685 0304 F4E7     		b	.L146
 686              	.LVL63:
 687              	.L73:
 190:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 688              		.loc 1 190 3 is_stmt 1 view .LVU146
 190:boards/TMC2590_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 689              		.loc 1 190 5 is_stmt 0 view .LVU147
 690 0306 10B9     		cbnz	r0, .L80
 191:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 691              		.loc 1 191 4 is_stmt 1 view .LVU148
 191:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 692              		.loc 1 191 13 is_stmt 0 view .LVU149
 693 0308 FFF7FEFF 		bl	StepDir_getTargetVelocity
 694              	.LVL64:
 191:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 695              		.loc 1 191 13 view .LVU150
 696 030c E9E7     		b	.L145
 697              	.LVL65:
 698              	.L80:
 192:boards/TMC2590_eval.c **** 			StepDir_rotate(motor, *value);
 699              		.loc 1 192 10 is_stmt 1 view .LVU151
 193:boards/TMC2590_eval.c **** 		}
 700              		.loc 1 193 4 view .LVU152
 701 030e 2968     		ldr	r1, [r5]
 702              	.LVL66:
 193:boards/TMC2590_eval.c **** 		}
 703              		.loc 1 193 4 is_stmt 0 view .LVU153
 704 0310 0020     		movs	r0, #0
 705              	.LVL67:
 193:boards/TMC2590_eval.c **** 		}
 706              		.loc 1 193 4 view .LVU154
 707 0312 FFF7FEFF 		bl	StepDir_rotate
 708              	.LVL68:
 193:boards/TMC2590_eval.c **** 		}
 709              		.loc 1 193 4 view .LVU155
 710 0316 EBE7     		b	.L146
 711              	.LVL69:
 712              	.L66:
 198:boards/TMC2590_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 713              		.loc 1 198 3 is_stmt 1 view .LVU156
 198:boards/TMC2590_eval.c **** 			*value = StepDir_getActualVelocity(motor);
 714              		.loc 1 198 5 is_stmt 0 view .LVU157
 715 0318 0028     		cmp	r0, #0
 716 031a 7FF4FEAE 		bne	.L142
 199:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 717              		.loc 1 199 4 is_stmt 1 view .LVU158
 199:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 718              		.loc 1 199 13 is_stmt 0 view .LVU159
 719 031e FFF7FEFF 		bl	StepDir_getActualVelocity
 720              	.LVL70:
 199:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 721              		.loc 1 199 13 view .LVU160
 722 0322 DEE7     		b	.L145
 723              	.LVL71:
 724              	.L72:
 206:boards/TMC2590_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 725              		.loc 1 206 3 is_stmt 1 view .LVU161
 206:boards/TMC2590_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 726              		.loc 1 206 5 is_stmt 0 view .LVU162
 727 0324 10B9     		cbnz	r0, .L81
 207:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 728              		.loc 1 207 4 is_stmt 1 view .LVU163
 207:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 729              		.loc 1 207 13 is_stmt 0 view .LVU164
 730 0326 FFF7FEFF 		bl	StepDir_getVelocityMax
 731              	.LVL72:
 207:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 732              		.loc 1 207 13 view .LVU165
 733 032a DAE7     		b	.L145
 734              	.LVL73:
 735              	.L81:
 208:boards/TMC2590_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 736              		.loc 1 208 10 is_stmt 1 view .LVU166
 209:boards/TMC2590_eval.c **** 		}
 737              		.loc 1 209 4 view .LVU167
 738 032c 2968     		ldr	r1, [r5]
 739              	.LVL74:
 209:boards/TMC2590_eval.c **** 		}
 740              		.loc 1 209 4 is_stmt 0 view .LVU168
 741 032e 0029     		cmp	r1, #0
 742 0330 B8BF     		it	lt
 743 0332 4942     		rsblt	r1, r1, #0
 744 0334 0020     		movs	r0, #0
 745              	.LVL75:
 209:boards/TMC2590_eval.c **** 		}
 746              		.loc 1 209 4 view .LVU169
 747 0336 FFF7FEFF 		bl	StepDir_setVelocityMax
 748              	.LVL76:
 209:boards/TMC2590_eval.c **** 		}
 749              		.loc 1 209 4 view .LVU170
 750 033a D9E7     		b	.L146
 751              	.LVL77:
 752              	.L71:
 214:boards/TMC2590_eval.c **** 			*value = StepDir_getAcceleration(motor);
 753              		.loc 1 214 3 is_stmt 1 view .LVU171
 214:boards/TMC2590_eval.c **** 			*value = StepDir_getAcceleration(motor);
 754              		.loc 1 214 5 is_stmt 0 view .LVU172
 755 033c 10B9     		cbnz	r0, .L82
 215:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 756              		.loc 1 215 4 is_stmt 1 view .LVU173
 215:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 757              		.loc 1 215 13 is_stmt 0 view .LVU174
 758 033e FFF7FEFF 		bl	StepDir_getAcceleration
 759              	.LVL78:
 215:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 760              		.loc 1 215 13 view .LVU175
 761 0342 CEE7     		b	.L145
 762              	.LVL79:
 763              	.L82:
 216:boards/TMC2590_eval.c **** 			StepDir_setAcceleration(motor, *value);
 764              		.loc 1 216 10 is_stmt 1 view .LVU176
 217:boards/TMC2590_eval.c **** 		}
 765              		.loc 1 217 4 view .LVU177
 766 0344 2968     		ldr	r1, [r5]
 767              	.LVL80:
 217:boards/TMC2590_eval.c **** 		}
 768              		.loc 1 217 4 is_stmt 0 view .LVU178
 769 0346 0020     		movs	r0, #0
 770              	.LVL81:
 217:boards/TMC2590_eval.c **** 		}
 771              		.loc 1 217 4 view .LVU179
 772 0348 FFF7FEFF 		bl	StepDir_setAcceleration
 773              	.LVL82:
 217:boards/TMC2590_eval.c **** 		}
 774              		.loc 1 217 4 view .LVU180
 775 034c D0E7     		b	.L146
 776              	.LVL83:
 777              	.L70:
 222:boards/TMC2590_eval.c **** 			*value = TMC2590.runCurrentScale;
 778              		.loc 1 222 3 is_stmt 1 view .LVU181
 779 034e A84E     		ldr	r6, .L158
 222:boards/TMC2590_eval.c **** 			*value = TMC2590.runCurrentScale;
 780              		.loc 1 222 5 is_stmt 0 view .LVU182
 781 0350 10B9     		cbnz	r0, .L83
 223:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 782              		.loc 1 223 4 is_stmt 1 view .LVU183
 223:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 783              		.loc 1 223 20 is_stmt 0 view .LVU184
 784 0352 737B     		ldrb	r3, [r6, #13]	@ zero_extendqisi2
 785              	.LVL84:
 786              	.L148:
 533:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 787              		.loc 1 533 11 view .LVU185
 788 0354 2B60     		str	r3, [r5]
 789 0356 C5E7     		b	.L30
 790              	.LVL85:
 791              	.L83:
 224:boards/TMC2590_eval.c **** 			TMC2590.runCurrentScale = *value;
 792              		.loc 1 224 10 is_stmt 1 view .LVU186
 225:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == false)
 793              		.loc 1 225 4 view .LVU187
 226:boards/TMC2590_eval.c **** 			{
 794              		.loc 1 226 6 is_stmt 0 view .LVU188
 795 0358 347B     		ldrb	r4, [r6, #12]	@ zero_extendqisi2
 225:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == false)
 796              		.loc 1 225 28 view .LVU189
 797 035a 2B68     		ldr	r3, [r5]
 798 035c 7373     		strb	r3, [r6, #13]
 226:boards/TMC2590_eval.c **** 			{
 799              		.loc 1 226 4 is_stmt 1 view .LVU190
 226:boards/TMC2590_eval.c **** 			{
 800              		.loc 1 226 6 is_stmt 0 view .LVU191
 801 035e 002C     		cmp	r4, #0
 802 0360 C6D1     		bne	.L146
 228:boards/TMC2590_eval.c **** 			}
 803              		.loc 1 228 5 is_stmt 1 view .LVU192
 804              	.LBB165:
 805              	.LBI165:
  48:boards/TMC2590_eval.c **** {
 806              		.loc 1 48 31 view .LVU193
 807              	.LVL86:
  48:boards/TMC2590_eval.c **** {
 808              		.loc 1 48 31 is_stmt 0 view .LVU194
 809              	.LBE165:
  50:boards/TMC2590_eval.c **** 
 810              		.loc 1 50 2 is_stmt 1 view .LVU195
  52:boards/TMC2590_eval.c **** }
 811              		.loc 1 52 2 view .LVU196
 812              	.LBB166:
 813              	.LBI166:
  48:boards/TMC2590_eval.c **** {
 814              		.loc 1 48 31 view .LVU197
  48:boards/TMC2590_eval.c **** {
 815              		.loc 1 48 31 is_stmt 0 view .LVU198
 816              	.LBE166:
  50:boards/TMC2590_eval.c **** 
 817              		.loc 1 50 2 is_stmt 1 view .LVU199
  52:boards/TMC2590_eval.c **** }
 818              		.loc 1 52 2 view .LVU200
 228:boards/TMC2590_eval.c **** 			}
 819              		.loc 1 228 5 is_stmt 0 view .LVU201
 820 0362 0621     		movs	r1, #6
 821              	.LVL87:
 228:boards/TMC2590_eval.c **** 			}
 822              		.loc 1 228 5 view .LVU202
 823 0364 3046     		mov	r0, r6
 824              	.LVL88:
 228:boards/TMC2590_eval.c **** 			}
 825              		.loc 1 228 5 view .LVU203
 826 0366 FFF7FEFF 		bl	tmc2590_readInt
 827              	.LVL89:
 228:boards/TMC2590_eval.c **** 			}
 828              		.loc 1 228 5 view .LVU204
 829 036a 727B     		ldrb	r2, [r6, #13]	@ zero_extendqisi2
 830 036c 20F01F00 		bic	r0, r0, #31
 831 0370 02F01F02 		and	r2, r2, #31
 832 0374 0243     		orrs	r2, r2, r0
 833 0376 0621     		movs	r1, #6
 834 0378 3046     		mov	r0, r6
 835 037a FFF7FEFF 		bl	tmc2590_writeInt
 836              	.LVL90:
 837 037e B1E7     		b	.L30
 838              	.LVL91:
 839              	.L69:
 234:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillCurrentScale;
 840              		.loc 1 234 3 is_stmt 1 view .LVU205
 841 0380 9B4E     		ldr	r6, .L158
 234:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillCurrentScale;
 842              		.loc 1 234 5 is_stmt 0 view .LVU206
 843 0382 08B9     		cbnz	r0, .L85
 235:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 844              		.loc 1 235 4 is_stmt 1 view .LVU207
 235:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 845              		.loc 1 235 20 is_stmt 0 view .LVU208
 846 0384 B37B     		ldrb	r3, [r6, #14]	@ zero_extendqisi2
 847 0386 E5E7     		b	.L148
 848              	.L85:
 236:boards/TMC2590_eval.c **** 			TMC2590.standStillCurrentScale = *value;
 849              		.loc 1 236 10 is_stmt 1 view .LVU209
 237:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == true)
 850              		.loc 1 237 4 view .LVU210
 237:boards/TMC2590_eval.c **** 			if(TMC2590.isStandStillCurrent == true)
 851              		.loc 1 237 35 is_stmt 0 view .LVU211
 852 0388 2B68     		ldr	r3, [r5]
 853 038a B373     		strb	r3, [r6, #14]
 238:boards/TMC2590_eval.c **** 			{
 854              		.loc 1 238 4 is_stmt 1 view .LVU212
 238:boards/TMC2590_eval.c **** 			{
 855              		.loc 1 238 6 is_stmt 0 view .LVU213
 856 038c 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
 857 038e 012B     		cmp	r3, #1
 858 0390 AED1     		bne	.L146
 240:boards/TMC2590_eval.c **** 			}
 859              		.loc 1 240 5 is_stmt 1 view .LVU214
 860              	.LBB167:
 861              	.LBI167:
  48:boards/TMC2590_eval.c **** {
 862              		.loc 1 48 31 view .LVU215
 863              	.LVL92:
  48:boards/TMC2590_eval.c **** {
 864              		.loc 1 48 31 is_stmt 0 view .LVU216
 865              	.LBE167:
  50:boards/TMC2590_eval.c **** 
 866              		.loc 1 50 2 is_stmt 1 view .LVU217
  52:boards/TMC2590_eval.c **** }
 867              		.loc 1 52 2 view .LVU218
 868              	.LBB168:
 869              	.LBI168:
  48:boards/TMC2590_eval.c **** {
 870              		.loc 1 48 31 view .LVU219
  48:boards/TMC2590_eval.c **** {
 871              		.loc 1 48 31 is_stmt 0 view .LVU220
 872              	.LBE168:
  50:boards/TMC2590_eval.c **** 
 873              		.loc 1 50 2 is_stmt 1 view .LVU221
  52:boards/TMC2590_eval.c **** }
 874              		.loc 1 52 2 view .LVU222
 240:boards/TMC2590_eval.c **** 			}
 875              		.loc 1 240 5 is_stmt 0 view .LVU223
 876 0392 0621     		movs	r1, #6
 877              	.LVL93:
 240:boards/TMC2590_eval.c **** 			}
 878              		.loc 1 240 5 view .LVU224
 879 0394 3046     		mov	r0, r6
 880              	.LVL94:
 240:boards/TMC2590_eval.c **** 			}
 881              		.loc 1 240 5 view .LVU225
 882 0396 FFF7FEFF 		bl	tmc2590_readInt
 883              	.LVL95:
 240:boards/TMC2590_eval.c **** 			}
 884              		.loc 1 240 5 view .LVU226
 885 039a B27B     		ldrb	r2, [r6, #14]	@ zero_extendqisi2
 886 039c 20F01F00 		bic	r0, r0, #31
 887 03a0 02F01F02 		and	r2, r2, #31
 888 03a4 0243     		orrs	r2, r2, r0
 889 03a6 0621     		movs	r1, #6
 890 03a8 3046     		mov	r0, r6
 891              	.LVL96:
 892              	.L150:
 295:boards/TMC2590_eval.c **** 			}
 893              		.loc 1 295 5 view .LVU227
 894 03aa FFF7FEFF 		bl	tmc2590_writeInt
 895              	.LVL97:
 896 03ae 9FE7     		b	.L146
 897              	.LVL98:
 898              	.L68:
 246:boards/TMC2590_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 899              		.loc 1 246 3 is_stmt 1 view .LVU228
 246:boards/TMC2590_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 900              		.loc 1 246 5 is_stmt 0 view .LVU229
 901 03b0 0028     		cmp	r0, #0
 902 03b2 7FF4B2AE 		bne	.L142
 247:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 903              		.loc 1 247 4 is_stmt 1 view .LVU230
 247:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 904              		.loc 1 247 14 is_stmt 0 view .LVU231
 905 03b6 FFF7FEFF 		bl	StepDir_getStatus
 906              	.LVL99:
 247:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 907              		.loc 1 247 66 view .LVU232
 908 03ba C0F30010 		ubfx	r0, r0, #4, #1
 909 03be 90E7     		b	.L145
 910              	.LVL100:
 911              	.L76:
 261:boards/TMC2590_eval.c **** 			*value = StepDir_getMode(motor);
 912              		.loc 1 261 3 is_stmt 1 view .LVU233
 261:boards/TMC2590_eval.c **** 			*value = StepDir_getMode(motor);
 913              		.loc 1 261 5 is_stmt 0 view .LVU234
 914 03c0 10B9     		cbnz	r0, .L87
 262:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 915              		.loc 1 262 4 is_stmt 1 view .LVU235
 262:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 916              		.loc 1 262 13 is_stmt 0 view .LVU236
 917 03c2 FFF7FEFF 		bl	StepDir_getMode
 918              	.LVL101:
 262:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 919              		.loc 1 262 13 view .LVU237
 920 03c6 8CE7     		b	.L145
 921              	.LVL102:
 922              	.L87:
 263:boards/TMC2590_eval.c **** 			StepDir_setMode(motor, *value);
 923              		.loc 1 263 10 is_stmt 1 view .LVU238
 264:boards/TMC2590_eval.c **** 		}
 924              		.loc 1 264 4 view .LVU239
 925 03c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 926              	.LVL103:
 264:boards/TMC2590_eval.c **** 		}
 927              		.loc 1 264 4 is_stmt 0 view .LVU240
 928 03ca 3046     		mov	r0, r6
 929              	.LVL104:
 264:boards/TMC2590_eval.c **** 		}
 930              		.loc 1 264 4 view .LVU241
 931 03cc FFF7FEFF 		bl	StepDir_setMode
 932              	.LVL105:
 264:boards/TMC2590_eval.c **** 		}
 933              		.loc 1 264 4 view .LVU242
 934 03d0 8EE7     		b	.L146
 935              	.LVL106:
 936              	.L77:
 268:boards/TMC2590_eval.c **** 			*value = StepDir_getFrequency(motor);
 937              		.loc 1 268 3 is_stmt 1 view .LVU243
 268:boards/TMC2590_eval.c **** 			*value = StepDir_getFrequency(motor);
 938              		.loc 1 268 5 is_stmt 0 view .LVU244
 939 03d2 10B9     		cbnz	r0, .L88
 269:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 940              		.loc 1 269 4 is_stmt 1 view .LVU245
 269:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 941              		.loc 1 269 13 is_stmt 0 view .LVU246
 942 03d4 FFF7FEFF 		bl	StepDir_getFrequency
 943              	.LVL107:
 269:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 944              		.loc 1 269 13 view .LVU247
 945 03d8 83E7     		b	.L145
 946              	.LVL108:
 947              	.L88:
 270:boards/TMC2590_eval.c **** 			StepDir_setFrequency(motor, *value);
 948              		.loc 1 270 10 is_stmt 1 view .LVU248
 271:boards/TMC2590_eval.c **** 		}
 949              		.loc 1 271 4 view .LVU249
 950 03da 1968     		ldr	r1, [r3]
 951              	.LVL109:
 271:boards/TMC2590_eval.c **** 		}
 952              		.loc 1 271 4 is_stmt 0 view .LVU250
 953 03dc 3046     		mov	r0, r6
 954              	.LVL110:
 271:boards/TMC2590_eval.c **** 		}
 955              		.loc 1 271 4 view .LVU251
 956 03de FFF7FEFF 		bl	StepDir_setFrequency
 957              	.LVL111:
 271:boards/TMC2590_eval.c **** 		}
 958              		.loc 1 271 4 view .LVU252
 959 03e2 85E7     		b	.L146
 960              	.LVL112:
 961              	.L65:
 276:boards/TMC2590_eval.c **** 			*value = 8 - TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_M
 962              		.loc 1 276 3 is_stmt 1 view .LVU253
 276:boards/TMC2590_eval.c **** 			*value = 8 - TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_M
 963              		.loc 1 276 5 is_stmt 0 view .LVU254
 964 03e4 40B9     		cbnz	r0, .L89
 277:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 965              		.loc 1 277 4 is_stmt 1 view .LVU255
 966              	.LBB169:
 967              	.LBI169:
  48:boards/TMC2590_eval.c **** {
 968              		.loc 1 48 31 view .LVU256
 969              	.LVL113:
  48:boards/TMC2590_eval.c **** {
 970              		.loc 1 48 31 is_stmt 0 view .LVU257
 971              	.LBE169:
  50:boards/TMC2590_eval.c **** 
 972              		.loc 1 50 2 is_stmt 1 view .LVU258
  52:boards/TMC2590_eval.c **** }
 973              		.loc 1 52 2 view .LVU259
 277:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 974              		.loc 1 277 17 is_stmt 0 view .LVU260
 975 03e6 8248     		ldr	r0, .L158
 976              	.LVL114:
 277:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 977              		.loc 1 277 17 view .LVU261
 978 03e8 0821     		movs	r1, #8
 979              	.LVL115:
 277:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 980              		.loc 1 277 17 view .LVU262
 981 03ea FFF7FEFF 		bl	tmc2590_readInt
 982              	.LVL116:
 983 03ee 00F00F00 		and	r0, r0, #15
 277:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 984              		.loc 1 277 15 view .LVU263
 985 03f2 C0F10800 		rsb	r0, r0, #8
 986 03f6 74E7     		b	.L145
 987              	.LVL117:
 988              	.L89:
 278:boards/TMC2590_eval.c **** 			switch(*value)
 989              		.loc 1 278 10 is_stmt 1 view .LVU264
 279:boards/TMC2590_eval.c **** 			{
 990              		.loc 1 279 4 view .LVU265
 279:boards/TMC2590_eval.c **** 			{
 991              		.loc 1 279 11 is_stmt 0 view .LVU266
 992 03f8 2B68     		ldr	r3, [r5]
 993 03fa 102B     		cmp	r3, #16
 994 03fc 30D0     		beq	.L90
 995 03fe 0ADC     		bgt	.L91
 996 0400 013B     		subs	r3, r3, #1
 997 0402 072B     		cmp	r3, #7
 998 0404 0ED8     		bhi	.L92
 999 0406 072B     		cmp	r3, #7
 1000 0408 0CD8     		bhi	.L92
 1001 040a DFE803F0 		tbb	[pc, r3]
 1002              	.L94:
 1003 040e 15       		.byte	(.L97-.L94)/2
 1004 040f 23       		.byte	(.L96-.L94)/2
 1005 0410 0B       		.byte	(.L92-.L94)/2
 1006 0411 25       		.byte	(.L95-.L94)/2
 1007 0412 0B       		.byte	(.L92-.L94)/2
 1008 0413 0B       		.byte	(.L92-.L94)/2
 1009 0414 0B       		.byte	(.L92-.L94)/2
 1010 0415 27       		.byte	(.L93-.L94)/2
 1011              		.p2align 1
 1012              	.L91:
 1013 0416 802B     		cmp	r3, #128
 1014 0418 28D0     		beq	.L98
 1015 041a 08DC     		bgt	.L99
 1016 041c 202B     		cmp	r3, #32
 1017 041e 21D0     		beq	.L100
 1018 0420 402B     		cmp	r3, #64
 1019 0422 21D0     		beq	.L101
 1020              	.L92:
 290:boards/TMC2590_eval.c **** 			}
 1021              		.loc 1 290 15 is_stmt 1 view .LVU267
 290:boards/TMC2590_eval.c **** 			}
 1022              		.loc 1 290 22 is_stmt 0 view .LVU268
 1023 0424 4FF0FF33 		mov	r3, #-1
 1024 0428 2B60     		str	r3, [r5]
 290:boards/TMC2590_eval.c **** 			}
 1025              		.loc 1 290 29 is_stmt 1 view .LVU269
 293:boards/TMC2590_eval.c **** 			{
 1026              		.loc 1 293 4 view .LVU270
 299:boards/TMC2590_eval.c **** 			}
 1027              		.loc 1 299 12 is_stmt 0 view .LVU271
 1028 042a 1024     		movs	r4, #16
 1029 042c 5AE7     		b	.L30
 1030              	.L99:
 299:boards/TMC2590_eval.c **** 			}
 1031              		.loc 1 299 12 view .LVU272
 1032 042e B3F5807F 		cmp	r3, #256
 1033 0432 F7D1     		bne	.L92
 289:boards/TMC2590_eval.c **** 			default:   *value = -1;  break;
 1034              		.loc 1 289 15 is_stmt 1 view .LVU273
 289:boards/TMC2590_eval.c **** 			default:   *value = -1;  break;
 1035              		.loc 1 289 22 is_stmt 0 view .LVU274
 1036 0434 0023     		movs	r3, #0
 1037 0436 00E0     		b	.L144
 1038              	.L97:
 281:boards/TMC2590_eval.c **** 			case 2:    *value = 7;   break;
 1039              		.loc 1 281 15 is_stmt 1 view .LVU275
 281:boards/TMC2590_eval.c **** 			case 2:    *value = 7;   break;
 1040              		.loc 1 281 22 is_stmt 0 view .LVU276
 1041 0438 0823     		movs	r3, #8
 1042              	.L144:
 295:boards/TMC2590_eval.c **** 			}
 1043              		.loc 1 295 5 view .LVU277
 1044 043a 6D48     		ldr	r0, .L158
 1045              	.LVL118:
 289:boards/TMC2590_eval.c **** 			default:   *value = -1;  break;
 1046              		.loc 1 289 22 view .LVU278
 1047 043c 2B60     		str	r3, [r5]
 289:boards/TMC2590_eval.c **** 			default:   *value = -1;  break;
 1048              		.loc 1 289 29 is_stmt 1 view .LVU279
 293:boards/TMC2590_eval.c **** 			{
 1049              		.loc 1 293 4 view .LVU280
 295:boards/TMC2590_eval.c **** 			}
 1050              		.loc 1 295 5 view .LVU281
 1051              	.LBB170:
 1052              	.LBI170:
  48:boards/TMC2590_eval.c **** {
 1053              		.loc 1 48 31 view .LVU282
 1054              	.LVL119:
  48:boards/TMC2590_eval.c **** {
 1055              		.loc 1 48 31 is_stmt 0 view .LVU283
 1056              	.LBE170:
  50:boards/TMC2590_eval.c **** 
 1057              		.loc 1 50 2 is_stmt 1 view .LVU284
  52:boards/TMC2590_eval.c **** }
 1058              		.loc 1 52 2 view .LVU285
 1059              	.LBB171:
 1060              	.LBI171:
  48:boards/TMC2590_eval.c **** {
 1061              		.loc 1 48 31 view .LVU286
  48:boards/TMC2590_eval.c **** {
 1062              		.loc 1 48 31 is_stmt 0 view .LVU287
 1063              	.LBE171:
  50:boards/TMC2590_eval.c **** 
 1064              		.loc 1 50 2 is_stmt 1 view .LVU288
  52:boards/TMC2590_eval.c **** }
 1065              		.loc 1 52 2 view .LVU289
 295:boards/TMC2590_eval.c **** 			}
 1066              		.loc 1 295 5 is_stmt 0 view .LVU290
 1067 043e 0021     		movs	r1, #0
 1068              	.LVL120:
 295:boards/TMC2590_eval.c **** 			}
 1069              		.loc 1 295 5 view .LVU291
 1070 0440 FFF7FEFF 		bl	tmc2590_readInt
 1071              	.LVL121:
 1072 0444 2A68     		ldr	r2, [r5]
 1073 0446 20F00F00 		bic	r0, r0, #15
 1074 044a 02F00F02 		and	r2, r2, #15
 1075 044e 0243     		orrs	r2, r2, r0
 1076              	.LVL122:
 1077              	.L149:
 295:boards/TMC2590_eval.c **** 			}
 1078              		.loc 1 295 5 view .LVU292
 1079 0450 0021     		movs	r1, #0
 1080 0452 B9E0     		b	.L147
 1081              	.LVL123:
 1082              	.L96:
 282:boards/TMC2590_eval.c **** 			case 4:    *value = 6;   break;
 1083              		.loc 1 282 15 is_stmt 1 view .LVU293
 282:boards/TMC2590_eval.c **** 			case 4:    *value = 6;   break;
 1084              		.loc 1 282 22 is_stmt 0 view .LVU294
 1085 0454 0723     		movs	r3, #7
 1086 0456 F0E7     		b	.L144
 1087              	.L95:
 283:boards/TMC2590_eval.c **** 			case 8:    *value = 5;   break;
 1088              		.loc 1 283 15 is_stmt 1 view .LVU295
 283:boards/TMC2590_eval.c **** 			case 8:    *value = 5;   break;
 1089              		.loc 1 283 22 is_stmt 0 view .LVU296
 1090 0458 0623     		movs	r3, #6
 1091 045a EEE7     		b	.L144
 1092              	.L93:
 284:boards/TMC2590_eval.c **** 			case 16:   *value = 4;   break;
 1093              		.loc 1 284 15 is_stmt 1 view .LVU297
 284:boards/TMC2590_eval.c **** 			case 16:   *value = 4;   break;
 1094              		.loc 1 284 22 is_stmt 0 view .LVU298
 1095 045c 0523     		movs	r3, #5
 1096 045e ECE7     		b	.L144
 1097              	.L90:
 285:boards/TMC2590_eval.c **** 			case 32:   *value = 3;   break;
 1098              		.loc 1 285 15 is_stmt 1 view .LVU299
 285:boards/TMC2590_eval.c **** 			case 32:   *value = 3;   break;
 1099              		.loc 1 285 22 is_stmt 0 view .LVU300
 1100 0460 0423     		movs	r3, #4
 1101 0462 EAE7     		b	.L144
 1102              	.L100:
 286:boards/TMC2590_eval.c **** 			case 64:   *value = 2;   break;
 1103              		.loc 1 286 15 is_stmt 1 view .LVU301
 286:boards/TMC2590_eval.c **** 			case 64:   *value = 2;   break;
 1104              		.loc 1 286 22 is_stmt 0 view .LVU302
 1105 0464 0323     		movs	r3, #3
 1106 0466 E8E7     		b	.L144
 1107              	.L101:
 287:boards/TMC2590_eval.c **** 			case 128:  *value = 1;   break;
 1108              		.loc 1 287 15 is_stmt 1 view .LVU303
 287:boards/TMC2590_eval.c **** 			case 128:  *value = 1;   break;
 1109              		.loc 1 287 22 is_stmt 0 view .LVU304
 1110 0468 0223     		movs	r3, #2
 1111 046a E6E7     		b	.L144
 1112              	.L98:
 288:boards/TMC2590_eval.c **** 			case 256:  *value = 0;   break;
 1113              		.loc 1 288 15 is_stmt 1 view .LVU305
 288:boards/TMC2590_eval.c **** 			case 256:  *value = 0;   break;
 1114              		.loc 1 288 22 is_stmt 0 view .LVU306
 1115 046c 0123     		movs	r3, #1
 1116 046e E4E7     		b	.L144
 1117              	.L64:
 305:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_INTPO
 1118              		.loc 1 305 3 is_stmt 1 view .LVU307
 305:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_INTPO
 1119              		.loc 1 305 5 is_stmt 0 view .LVU308
 1120 0470 30B9     		cbnz	r0, .L104
 306:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1121              		.loc 1 306 4 is_stmt 1 view .LVU309
 1122              	.LBB172:
 1123              	.LBI172:
  48:boards/TMC2590_eval.c **** {
 1124              		.loc 1 48 31 view .LVU310
 1125              	.LVL124:
  48:boards/TMC2590_eval.c **** {
 1126              		.loc 1 48 31 is_stmt 0 view .LVU311
 1127              	.LBE172:
  50:boards/TMC2590_eval.c **** 
 1128              		.loc 1 50 2 is_stmt 1 view .LVU312
  52:boards/TMC2590_eval.c **** }
 1129              		.loc 1 52 2 view .LVU313
 306:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1130              		.loc 1 306 13 is_stmt 0 view .LVU314
 1131 0472 5F48     		ldr	r0, .L158
 1132              	.LVL125:
 306:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1133              		.loc 1 306 13 view .LVU315
 1134 0474 0821     		movs	r1, #8
 1135              	.LVL126:
 306:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1136              		.loc 1 306 13 view .LVU316
 1137 0476 FFF7FEFF 		bl	tmc2590_readInt
 1138              	.LVL127:
 1139 047a C0F34020 		ubfx	r0, r0, #9, #1
 1140 047e 30E7     		b	.L145
 1141              	.LVL128:
 1142              	.L104:
 307:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_INTPOL_MASK, TMC2590_INTPOL_SHIF
 1143              		.loc 1 307 10 is_stmt 1 view .LVU317
 308:boards/TMC2590_eval.c **** 		}
 1144              		.loc 1 308 4 view .LVU318
 1145              	.LBB173:
 1146              	.LBI173:
  48:boards/TMC2590_eval.c **** {
 1147              		.loc 1 48 31 view .LVU319
  48:boards/TMC2590_eval.c **** {
 1148              		.loc 1 48 31 is_stmt 0 view .LVU320
 1149              	.LBE173:
  50:boards/TMC2590_eval.c **** 
 1150              		.loc 1 50 2 is_stmt 1 view .LVU321
  52:boards/TMC2590_eval.c **** }
 1151              		.loc 1 52 2 view .LVU322
 1152              	.LBB174:
 1153              	.LBI174:
  48:boards/TMC2590_eval.c **** {
 1154              		.loc 1 48 31 view .LVU323
  48:boards/TMC2590_eval.c **** {
 1155              		.loc 1 48 31 is_stmt 0 view .LVU324
 1156              	.LBE174:
  50:boards/TMC2590_eval.c **** 
 1157              		.loc 1 50 2 is_stmt 1 view .LVU325
  52:boards/TMC2590_eval.c **** }
 1158              		.loc 1 52 2 view .LVU326
 308:boards/TMC2590_eval.c **** 		}
 1159              		.loc 1 308 4 is_stmt 0 view .LVU327
 1160 0480 5B48     		ldr	r0, .L158
 1161              	.LVL129:
 308:boards/TMC2590_eval.c **** 		}
 1162              		.loc 1 308 4 view .LVU328
 1163 0482 0021     		movs	r1, #0
 1164              	.LVL130:
 308:boards/TMC2590_eval.c **** 		}
 1165              		.loc 1 308 4 view .LVU329
 1166 0484 FFF7FEFF 		bl	tmc2590_readInt
 1167              	.LVL131:
 1168 0488 2B68     		ldr	r3, [r5]
 1169 048a 5B02     		lsls	r3, r3, #9
 1170 048c 03F40073 		and	r3, r3, #512
 1171 0490 20F40072 		bic	r2, r0, #512
 1172              	.LVL132:
 1173              	.L152:
 316:boards/TMC2590_eval.c **** 		}
 1174              		.loc 1 316 4 view .LVU330
 1175 0494 1A43     		orrs	r2, r2, r3
 1176 0496 DBE7     		b	.L149
 1177              	.LVL133:
 1178              	.L63:
 313:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_DEDGE
 1179              		.loc 1 313 3 is_stmt 1 view .LVU331
 313:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_DEDGE
 1180              		.loc 1 313 5 is_stmt 0 view .LVU332
 1181 0498 30B9     		cbnz	r0, .L105
 314:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1182              		.loc 1 314 4 is_stmt 1 view .LVU333
 1183              	.LBB175:
 1184              	.LBI175:
  48:boards/TMC2590_eval.c **** {
 1185              		.loc 1 48 31 view .LVU334
 1186              	.LVL134:
  48:boards/TMC2590_eval.c **** {
 1187              		.loc 1 48 31 is_stmt 0 view .LVU335
 1188              	.LBE175:
  50:boards/TMC2590_eval.c **** 
 1189              		.loc 1 50 2 is_stmt 1 view .LVU336
  52:boards/TMC2590_eval.c **** }
 1190              		.loc 1 52 2 view .LVU337
 314:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1191              		.loc 1 314 13 is_stmt 0 view .LVU338
 1192 049a 5548     		ldr	r0, .L158
 1193              	.LVL135:
 314:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1194              		.loc 1 314 13 view .LVU339
 1195 049c 0821     		movs	r1, #8
 1196              	.LVL136:
 314:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1197              		.loc 1 314 13 view .LVU340
 1198 049e FFF7FEFF 		bl	tmc2590_readInt
 1199              	.LVL137:
 1200 04a2 C0F30020 		ubfx	r0, r0, #8, #1
 1201 04a6 1CE7     		b	.L145
 1202              	.LVL138:
 1203              	.L105:
 315:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_DEDGE_MASK, TMC2590_DEDGE_SHIFT,
 1204              		.loc 1 315 10 is_stmt 1 view .LVU341
 316:boards/TMC2590_eval.c **** 		}
 1205              		.loc 1 316 4 view .LVU342
 1206              	.LBB176:
 1207              	.LBI176:
  48:boards/TMC2590_eval.c **** {
 1208              		.loc 1 48 31 view .LVU343
  48:boards/TMC2590_eval.c **** {
 1209              		.loc 1 48 31 is_stmt 0 view .LVU344
 1210              	.LBE176:
  50:boards/TMC2590_eval.c **** 
 1211              		.loc 1 50 2 is_stmt 1 view .LVU345
  52:boards/TMC2590_eval.c **** }
 1212              		.loc 1 52 2 view .LVU346
 1213              	.LBB177:
 1214              	.LBI177:
  48:boards/TMC2590_eval.c **** {
 1215              		.loc 1 48 31 view .LVU347
  48:boards/TMC2590_eval.c **** {
 1216              		.loc 1 48 31 is_stmt 0 view .LVU348
 1217              	.LBE177:
  50:boards/TMC2590_eval.c **** 
 1218              		.loc 1 50 2 is_stmt 1 view .LVU349
  52:boards/TMC2590_eval.c **** }
 1219              		.loc 1 52 2 view .LVU350
 316:boards/TMC2590_eval.c **** 		}
 1220              		.loc 1 316 4 is_stmt 0 view .LVU351
 1221 04a8 5148     		ldr	r0, .L158
 1222              	.LVL139:
 316:boards/TMC2590_eval.c **** 		}
 1223              		.loc 1 316 4 view .LVU352
 1224 04aa 0021     		movs	r1, #0
 1225              	.LVL140:
 316:boards/TMC2590_eval.c **** 		}
 1226              		.loc 1 316 4 view .LVU353
 1227 04ac FFF7FEFF 		bl	tmc2590_readInt
 1228              	.LVL141:
 1229 04b0 2B68     		ldr	r3, [r5]
 1230 04b2 1B02     		lsls	r3, r3, #8
 1231 04b4 03F48073 		and	r3, r3, #256
 1232 04b8 20F48072 		bic	r2, r0, #256
 1233 04bc EAE7     		b	.L152
 1234              	.LVL142:
 1235              	.L62:
 321:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TBL_
 1236              		.loc 1 321 3 is_stmt 1 view .LVU354
 321:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TBL_
 1237              		.loc 1 321 5 is_stmt 0 view .LVU355
 1238 04be 30B9     		cbnz	r0, .L106
 322:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1239              		.loc 1 322 4 is_stmt 1 view .LVU356
 1240              	.LBB178:
 1241              	.LBI178:
  48:boards/TMC2590_eval.c **** {
 1242              		.loc 1 48 31 view .LVU357
 1243              	.LVL143:
  48:boards/TMC2590_eval.c **** {
 1244              		.loc 1 48 31 is_stmt 0 view .LVU358
 1245              	.LBE178:
  50:boards/TMC2590_eval.c **** 
 1246              		.loc 1 50 2 is_stmt 1 view .LVU359
  52:boards/TMC2590_eval.c **** }
 1247              		.loc 1 52 2 view .LVU360
 322:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1248              		.loc 1 322 13 is_stmt 0 view .LVU361
 1249 04c0 4B48     		ldr	r0, .L158
 1250              	.LVL144:
 322:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1251              		.loc 1 322 13 view .LVU362
 1252 04c2 0C21     		movs	r1, #12
 1253              	.LVL145:
 322:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1254              		.loc 1 322 13 view .LVU363
 1255 04c4 FFF7FEFF 		bl	tmc2590_readInt
 1256              	.LVL146:
 1257 04c8 C0F3C130 		ubfx	r0, r0, #15, #2
 1258 04cc 09E7     		b	.L145
 1259              	.LVL147:
 1260              	.L106:
 323:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TBL_MASK, TMC2590_TBL_SHIFT, *v
 1261              		.loc 1 323 10 is_stmt 1 view .LVU364
 324:boards/TMC2590_eval.c **** 		}
 1262              		.loc 1 324 4 view .LVU365
 1263              	.LBB179:
 1264              	.LBI179:
  48:boards/TMC2590_eval.c **** {
 1265              		.loc 1 48 31 view .LVU366
  48:boards/TMC2590_eval.c **** {
 1266              		.loc 1 48 31 is_stmt 0 view .LVU367
 1267              	.LBE179:
  50:boards/TMC2590_eval.c **** 
 1268              		.loc 1 50 2 is_stmt 1 view .LVU368
  52:boards/TMC2590_eval.c **** }
 1269              		.loc 1 52 2 view .LVU369
 1270              	.LBB180:
 1271              	.LBI180:
  48:boards/TMC2590_eval.c **** {
 1272              		.loc 1 48 31 view .LVU370
  48:boards/TMC2590_eval.c **** {
 1273              		.loc 1 48 31 is_stmt 0 view .LVU371
 1274              	.LBE180:
  50:boards/TMC2590_eval.c **** 
 1275              		.loc 1 50 2 is_stmt 1 view .LVU372
  52:boards/TMC2590_eval.c **** }
 1276              		.loc 1 52 2 view .LVU373
 324:boards/TMC2590_eval.c **** 		}
 1277              		.loc 1 324 4 is_stmt 0 view .LVU374
 1278 04ce 4848     		ldr	r0, .L158
 1279              	.LVL148:
 324:boards/TMC2590_eval.c **** 		}
 1280              		.loc 1 324 4 view .LVU375
 1281 04d0 0421     		movs	r1, #4
 1282              	.LVL149:
 324:boards/TMC2590_eval.c **** 		}
 1283              		.loc 1 324 4 view .LVU376
 1284 04d2 FFF7FEFF 		bl	tmc2590_readInt
 1285              	.LVL150:
 1286 04d6 2B68     		ldr	r3, [r5]
 1287 04d8 DB03     		lsls	r3, r3, #15
 1288 04da 03F4C033 		and	r3, r3, #98304
 1289 04de 20F4C032 		bic	r2, r0, #98304
 1290              	.LVL151:
 1291              	.L154:
 501:boards/TMC2590_eval.c **** 		}
 1292              		.loc 1 501 4 view .LVU377
 1293 04e2 1A43     		orrs	r2, r2, r3
 1294 04e4 5DE0     		b	.L155
 1295              	.LVL152:
 1296              	.L61:
 329:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_CHM_
 1297              		.loc 1 329 3 is_stmt 1 view .LVU378
 329:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_CHM_
 1298              		.loc 1 329 5 is_stmt 0 view .LVU379
 1299 04e6 30B9     		cbnz	r0, .L107
 330:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1300              		.loc 1 330 4 is_stmt 1 view .LVU380
 1301              	.LBB181:
 1302              	.LBI181:
  48:boards/TMC2590_eval.c **** {
 1303              		.loc 1 48 31 view .LVU381
 1304              	.LVL153:
  48:boards/TMC2590_eval.c **** {
 1305              		.loc 1 48 31 is_stmt 0 view .LVU382
 1306              	.LBE181:
  50:boards/TMC2590_eval.c **** 
 1307              		.loc 1 50 2 is_stmt 1 view .LVU383
  52:boards/TMC2590_eval.c **** }
 1308              		.loc 1 52 2 view .LVU384
 330:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1309              		.loc 1 330 13 is_stmt 0 view .LVU385
 1310 04e8 4148     		ldr	r0, .L158
 1311              	.LVL154:
 330:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1312              		.loc 1 330 13 view .LVU386
 1313 04ea 0C21     		movs	r1, #12
 1314              	.LVL155:
 330:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1315              		.loc 1 330 13 view .LVU387
 1316 04ec FFF7FEFF 		bl	tmc2590_readInt
 1317              	.LVL156:
 1318 04f0 C0F38030 		ubfx	r0, r0, #14, #1
 1319 04f4 F5E6     		b	.L145
 1320              	.LVL157:
 1321              	.L107:
 331:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_CHM_MASK, TMC2590_CHM_SHIFT, *v
 1322              		.loc 1 331 10 is_stmt 1 view .LVU388
 332:boards/TMC2590_eval.c **** 		}
 1323              		.loc 1 332 4 view .LVU389
 1324              	.LBB182:
 1325              	.LBI182:
  48:boards/TMC2590_eval.c **** {
 1326              		.loc 1 48 31 view .LVU390
  48:boards/TMC2590_eval.c **** {
 1327              		.loc 1 48 31 is_stmt 0 view .LVU391
 1328              	.LBE182:
  50:boards/TMC2590_eval.c **** 
 1329              		.loc 1 50 2 is_stmt 1 view .LVU392
  52:boards/TMC2590_eval.c **** }
 1330              		.loc 1 52 2 view .LVU393
 1331              	.LBB183:
 1332              	.LBI183:
  48:boards/TMC2590_eval.c **** {
 1333              		.loc 1 48 31 view .LVU394
  48:boards/TMC2590_eval.c **** {
 1334              		.loc 1 48 31 is_stmt 0 view .LVU395
 1335              	.LBE183:
  50:boards/TMC2590_eval.c **** 
 1336              		.loc 1 50 2 is_stmt 1 view .LVU396
  52:boards/TMC2590_eval.c **** }
 1337              		.loc 1 52 2 view .LVU397
 332:boards/TMC2590_eval.c **** 		}
 1338              		.loc 1 332 4 is_stmt 0 view .LVU398
 1339 04f6 3E48     		ldr	r0, .L158
 1340              	.LVL158:
 332:boards/TMC2590_eval.c **** 		}
 1341              		.loc 1 332 4 view .LVU399
 1342 04f8 0421     		movs	r1, #4
 1343              	.LVL159:
 332:boards/TMC2590_eval.c **** 		}
 1344              		.loc 1 332 4 view .LVU400
 1345 04fa FFF7FEFF 		bl	tmc2590_readInt
 1346              	.LVL160:
 1347 04fe 2B68     		ldr	r3, [r5]
 1348 0500 9B03     		lsls	r3, r3, #14
 1349 0502 03F48043 		and	r3, r3, #16384
 1350 0506 20F48042 		bic	r2, r0, #16384
 1351 050a EAE7     		b	.L154
 1352              	.LVL161:
 1353              	.L60:
 337:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HDEC
 1354              		.loc 1 337 3 is_stmt 1 view .LVU401
 337:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HDEC
 1355              		.loc 1 337 5 is_stmt 0 view .LVU402
 1356 050c 30B9     		cbnz	r0, .L108
 338:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1357              		.loc 1 338 4 is_stmt 1 view .LVU403
 1358              	.LBB184:
 1359              	.LBI184:
  48:boards/TMC2590_eval.c **** {
 1360              		.loc 1 48 31 view .LVU404
 1361              	.LVL162:
  48:boards/TMC2590_eval.c **** {
 1362              		.loc 1 48 31 is_stmt 0 view .LVU405
 1363              	.LBE184:
  50:boards/TMC2590_eval.c **** 
 1364              		.loc 1 50 2 is_stmt 1 view .LVU406
  52:boards/TMC2590_eval.c **** }
 1365              		.loc 1 52 2 view .LVU407
 338:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1366              		.loc 1 338 13 is_stmt 0 view .LVU408
 1367 050e 3848     		ldr	r0, .L158
 1368              	.LVL163:
 338:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1369              		.loc 1 338 13 view .LVU409
 1370 0510 0C21     		movs	r1, #12
 1371              	.LVL164:
 338:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1372              		.loc 1 338 13 view .LVU410
 1373 0512 FFF7FEFF 		bl	tmc2590_readInt
 1374              	.LVL165:
 1375 0516 C0F3C120 		ubfx	r0, r0, #11, #2
 1376 051a E2E6     		b	.L145
 1377              	.LVL166:
 1378              	.L108:
 339:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HDEC_MASK, TMC2590_HDEC_SHIFT, 
 1379              		.loc 1 339 10 is_stmt 1 view .LVU411
 340:boards/TMC2590_eval.c **** 		}
 1380              		.loc 1 340 4 view .LVU412
 1381              	.LBB185:
 1382              	.LBI185:
  48:boards/TMC2590_eval.c **** {
 1383              		.loc 1 48 31 view .LVU413
  48:boards/TMC2590_eval.c **** {
 1384              		.loc 1 48 31 is_stmt 0 view .LVU414
 1385              	.LBE185:
  50:boards/TMC2590_eval.c **** 
 1386              		.loc 1 50 2 is_stmt 1 view .LVU415
  52:boards/TMC2590_eval.c **** }
 1387              		.loc 1 52 2 view .LVU416
 1388              	.LBB186:
 1389              	.LBI186:
  48:boards/TMC2590_eval.c **** {
 1390              		.loc 1 48 31 view .LVU417
  48:boards/TMC2590_eval.c **** {
 1391              		.loc 1 48 31 is_stmt 0 view .LVU418
 1392              	.LBE186:
  50:boards/TMC2590_eval.c **** 
 1393              		.loc 1 50 2 is_stmt 1 view .LVU419
  52:boards/TMC2590_eval.c **** }
 1394              		.loc 1 52 2 view .LVU420
 340:boards/TMC2590_eval.c **** 		}
 1395              		.loc 1 340 4 is_stmt 0 view .LVU421
 1396 051c 3448     		ldr	r0, .L158
 1397              	.LVL167:
 340:boards/TMC2590_eval.c **** 		}
 1398              		.loc 1 340 4 view .LVU422
 1399 051e 0421     		movs	r1, #4
 1400              	.LVL168:
 340:boards/TMC2590_eval.c **** 		}
 1401              		.loc 1 340 4 view .LVU423
 1402 0520 FFF7FEFF 		bl	tmc2590_readInt
 1403              	.LVL169:
 1404 0524 2B68     		ldr	r3, [r5]
 1405 0526 DB02     		lsls	r3, r3, #11
 1406 0528 03F4C053 		and	r3, r3, #6144
 1407 052c 20F4C052 		bic	r2, r0, #6144
 1408 0530 D7E7     		b	.L154
 1409              	.LVL170:
 1410              	.L59:
 345:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HEND
 1411              		.loc 1 345 3 is_stmt 1 view .LVU424
 345:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HEND
 1412              		.loc 1 345 5 is_stmt 0 view .LVU425
 1413 0532 30B9     		cbnz	r0, .L109
 346:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1414              		.loc 1 346 4 is_stmt 1 view .LVU426
 1415              	.LBB187:
 1416              	.LBI187:
  48:boards/TMC2590_eval.c **** {
 1417              		.loc 1 48 31 view .LVU427
 1418              	.LVL171:
  48:boards/TMC2590_eval.c **** {
 1419              		.loc 1 48 31 is_stmt 0 view .LVU428
 1420              	.LBE187:
  50:boards/TMC2590_eval.c **** 
 1421              		.loc 1 50 2 is_stmt 1 view .LVU429
  52:boards/TMC2590_eval.c **** }
 1422              		.loc 1 52 2 view .LVU430
 346:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1423              		.loc 1 346 13 is_stmt 0 view .LVU431
 1424 0534 2E48     		ldr	r0, .L158
 1425              	.LVL172:
 346:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1426              		.loc 1 346 13 view .LVU432
 1427 0536 0C21     		movs	r1, #12
 1428              	.LVL173:
 346:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1429              		.loc 1 346 13 view .LVU433
 1430 0538 FFF7FEFF 		bl	tmc2590_readInt
 1431              	.LVL174:
 1432 053c C0F3C310 		ubfx	r0, r0, #7, #4
 1433 0540 CFE6     		b	.L145
 1434              	.LVL175:
 1435              	.L109:
 347:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HEND_MASK, TMC2590_HEND_SHIFT, 
 1436              		.loc 1 347 10 is_stmt 1 view .LVU434
 348:boards/TMC2590_eval.c **** 		}
 1437              		.loc 1 348 4 view .LVU435
 1438              	.LBB188:
 1439              	.LBI188:
  48:boards/TMC2590_eval.c **** {
 1440              		.loc 1 48 31 view .LVU436
  48:boards/TMC2590_eval.c **** {
 1441              		.loc 1 48 31 is_stmt 0 view .LVU437
 1442              	.LBE188:
  50:boards/TMC2590_eval.c **** 
 1443              		.loc 1 50 2 is_stmt 1 view .LVU438
  52:boards/TMC2590_eval.c **** }
 1444              		.loc 1 52 2 view .LVU439
 1445              	.LBB189:
 1446              	.LBI189:
  48:boards/TMC2590_eval.c **** {
 1447              		.loc 1 48 31 view .LVU440
  48:boards/TMC2590_eval.c **** {
 1448              		.loc 1 48 31 is_stmt 0 view .LVU441
 1449              	.LBE189:
  50:boards/TMC2590_eval.c **** 
 1450              		.loc 1 50 2 is_stmt 1 view .LVU442
  52:boards/TMC2590_eval.c **** }
 1451              		.loc 1 52 2 view .LVU443
 348:boards/TMC2590_eval.c **** 		}
 1452              		.loc 1 348 4 is_stmt 0 view .LVU444
 1453 0542 2B48     		ldr	r0, .L158
 1454              	.LVL176:
 348:boards/TMC2590_eval.c **** 		}
 1455              		.loc 1 348 4 view .LVU445
 1456 0544 0421     		movs	r1, #4
 1457              	.LVL177:
 348:boards/TMC2590_eval.c **** 		}
 1458              		.loc 1 348 4 view .LVU446
 1459 0546 FFF7FEFF 		bl	tmc2590_readInt
 1460              	.LVL178:
 1461 054a 2B68     		ldr	r3, [r5]
 1462 054c DB01     		lsls	r3, r3, #7
 1463 054e 03F4F063 		and	r3, r3, #1920
 1464 0552 20F4F062 		bic	r2, r0, #1920
 1465 0556 C4E7     		b	.L154
 1466              	.LVL179:
 1467              	.L58:
 353:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HSTR
 1468              		.loc 1 353 3 is_stmt 1 view .LVU447
 353:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HSTR
 1469              		.loc 1 353 5 is_stmt 0 view .LVU448
 1470 0558 30B9     		cbnz	r0, .L110
 354:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1471              		.loc 1 354 4 is_stmt 1 view .LVU449
 1472              	.LBB190:
 1473              	.LBI190:
  48:boards/TMC2590_eval.c **** {
 1474              		.loc 1 48 31 view .LVU450
 1475              	.LVL180:
  48:boards/TMC2590_eval.c **** {
 1476              		.loc 1 48 31 is_stmt 0 view .LVU451
 1477              	.LBE190:
  50:boards/TMC2590_eval.c **** 
 1478              		.loc 1 50 2 is_stmt 1 view .LVU452
  52:boards/TMC2590_eval.c **** }
 1479              		.loc 1 52 2 view .LVU453
 354:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1480              		.loc 1 354 13 is_stmt 0 view .LVU454
 1481 055a 2548     		ldr	r0, .L158
 1482              	.LVL181:
 354:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1483              		.loc 1 354 13 view .LVU455
 1484 055c 0C21     		movs	r1, #12
 1485              	.LVL182:
 354:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1486              		.loc 1 354 13 view .LVU456
 1487 055e FFF7FEFF 		bl	tmc2590_readInt
 1488              	.LVL183:
 1489 0562 C0F30210 		ubfx	r0, r0, #4, #3
 1490 0566 BCE6     		b	.L145
 1491              	.LVL184:
 1492              	.L110:
 355:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HSTRT_MASK, TMC2590_HSTRT_SHIFT
 1493              		.loc 1 355 10 is_stmt 1 view .LVU457
 356:boards/TMC2590_eval.c **** 		}
 1494              		.loc 1 356 4 view .LVU458
 1495              	.LBB191:
 1496              	.LBI191:
  48:boards/TMC2590_eval.c **** {
 1497              		.loc 1 48 31 view .LVU459
  48:boards/TMC2590_eval.c **** {
 1498              		.loc 1 48 31 is_stmt 0 view .LVU460
 1499              	.LBE191:
  50:boards/TMC2590_eval.c **** 
 1500              		.loc 1 50 2 is_stmt 1 view .LVU461
  52:boards/TMC2590_eval.c **** }
 1501              		.loc 1 52 2 view .LVU462
 1502              	.LBB192:
 1503              	.LBI192:
  48:boards/TMC2590_eval.c **** {
 1504              		.loc 1 48 31 view .LVU463
  48:boards/TMC2590_eval.c **** {
 1505              		.loc 1 48 31 is_stmt 0 view .LVU464
 1506              	.LBE192:
  50:boards/TMC2590_eval.c **** 
 1507              		.loc 1 50 2 is_stmt 1 view .LVU465
  52:boards/TMC2590_eval.c **** }
 1508              		.loc 1 52 2 view .LVU466
 356:boards/TMC2590_eval.c **** 		}
 1509              		.loc 1 356 4 is_stmt 0 view .LVU467
 1510 0568 2148     		ldr	r0, .L158
 1511              	.LVL185:
 356:boards/TMC2590_eval.c **** 		}
 1512              		.loc 1 356 4 view .LVU468
 1513 056a 0421     		movs	r1, #4
 1514              	.LVL186:
 356:boards/TMC2590_eval.c **** 		}
 1515              		.loc 1 356 4 view .LVU469
 1516 056c FFF7FEFF 		bl	tmc2590_readInt
 1517              	.LVL187:
 1518 0570 2B68     		ldr	r3, [r5]
 1519 0572 1B01     		lsls	r3, r3, #4
 1520 0574 03F07003 		and	r3, r3, #112
 1521 0578 20F07002 		bic	r2, r0, #112
 1522 057c B1E7     		b	.L154
 1523              	.LVL188:
 1524              	.L57:
 361:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TOFF
 1525              		.loc 1 361 3 is_stmt 1 view .LVU470
 361:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TOFF
 1526              		.loc 1 361 5 is_stmt 0 view .LVU471
 1527 057e 30B9     		cbnz	r0, .L111
 362:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1528              		.loc 1 362 4 is_stmt 1 view .LVU472
 1529              	.LBB193:
 1530              	.LBI193:
  48:boards/TMC2590_eval.c **** {
 1531              		.loc 1 48 31 view .LVU473
 1532              	.LVL189:
  48:boards/TMC2590_eval.c **** {
 1533              		.loc 1 48 31 is_stmt 0 view .LVU474
 1534              	.LBE193:
  50:boards/TMC2590_eval.c **** 
 1535              		.loc 1 50 2 is_stmt 1 view .LVU475
  52:boards/TMC2590_eval.c **** }
 1536              		.loc 1 52 2 view .LVU476
 362:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1537              		.loc 1 362 13 is_stmt 0 view .LVU477
 1538 0580 1B48     		ldr	r0, .L158
 1539              	.LVL190:
 362:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1540              		.loc 1 362 13 view .LVU478
 1541 0582 0C21     		movs	r1, #12
 1542              	.LVL191:
 362:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1543              		.loc 1 362 13 view .LVU479
 1544 0584 FFF7FEFF 		bl	tmc2590_readInt
 1545              	.LVL192:
 1546 0588 00F00F00 		and	r0, r0, #15
 1547 058c A9E6     		b	.L145
 1548              	.LVL193:
 1549              	.L111:
 363:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TOFF_MASK, TMC2590_TOFF_SHIFT, 
 1550              		.loc 1 363 10 is_stmt 1 view .LVU480
 364:boards/TMC2590_eval.c **** 		}
 1551              		.loc 1 364 4 view .LVU481
 1552              	.LBB194:
 1553              	.LBI194:
  48:boards/TMC2590_eval.c **** {
 1554              		.loc 1 48 31 view .LVU482
  48:boards/TMC2590_eval.c **** {
 1555              		.loc 1 48 31 is_stmt 0 view .LVU483
 1556              	.LBE194:
  50:boards/TMC2590_eval.c **** 
 1557              		.loc 1 50 2 is_stmt 1 view .LVU484
  52:boards/TMC2590_eval.c **** }
 1558              		.loc 1 52 2 view .LVU485
 1559              	.LBB195:
 1560              	.LBI195:
  48:boards/TMC2590_eval.c **** {
 1561              		.loc 1 48 31 view .LVU486
  48:boards/TMC2590_eval.c **** {
 1562              		.loc 1 48 31 is_stmt 0 view .LVU487
 1563              	.LBE195:
  50:boards/TMC2590_eval.c **** 
 1564              		.loc 1 50 2 is_stmt 1 view .LVU488
  52:boards/TMC2590_eval.c **** }
 1565              		.loc 1 52 2 view .LVU489
 364:boards/TMC2590_eval.c **** 		}
 1566              		.loc 1 364 4 is_stmt 0 view .LVU490
 1567 058e 1848     		ldr	r0, .L158
 1568              	.LVL194:
 364:boards/TMC2590_eval.c **** 		}
 1569              		.loc 1 364 4 view .LVU491
 1570 0590 0421     		movs	r1, #4
 1571              	.LVL195:
 364:boards/TMC2590_eval.c **** 		}
 1572              		.loc 1 364 4 view .LVU492
 1573 0592 FFF7FEFF 		bl	tmc2590_readInt
 1574              	.LVL196:
 1575 0596 2A68     		ldr	r2, [r5]
 1576 0598 20F00F00 		bic	r0, r0, #15
 1577 059c 02F00F02 		and	r2, r2, #15
 1578 05a0 0243     		orrs	r2, r2, r0
 1579              	.LVL197:
 1580              	.L155:
 501:boards/TMC2590_eval.c **** 		}
 1581              		.loc 1 501 4 view .LVU493
 1582 05a2 0421     		movs	r1, #4
 1583 05a4 10E0     		b	.L147
 1584              	.LVL198:
 1585              	.L56:
 369:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIM
 1586              		.loc 1 369 3 is_stmt 1 view .LVU494
 370:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1587              		.loc 1 370 13 is_stmt 0 view .LVU495
 1588 05a6 1248     		ldr	r0, .L158
 1589              	.LVL199:
 370:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1590              		.loc 1 370 13 view .LVU496
 1591 05a8 0521     		movs	r1, #5
 1592              	.LVL200:
 369:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIM
 1593              		.loc 1 369 5 view .LVU497
 1594 05aa 24B9     		cbnz	r4, .L112
 370:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1595              		.loc 1 370 4 is_stmt 1 view .LVU498
 1596              	.LBB196:
 1597              	.LBI196:
  48:boards/TMC2590_eval.c **** {
 1598              		.loc 1 48 31 view .LVU499
 1599              	.LVL201:
  48:boards/TMC2590_eval.c **** {
 1600              		.loc 1 48 31 is_stmt 0 view .LVU500
 1601              	.LBE196:
  50:boards/TMC2590_eval.c **** 
 1602              		.loc 1 50 2 is_stmt 1 view .LVU501
  52:boards/TMC2590_eval.c **** }
 1603              		.loc 1 52 2 view .LVU502
 370:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1604              		.loc 1 370 13 is_stmt 0 view .LVU503
 1605 05ac FFF7FEFF 		bl	tmc2590_readInt
 1606              	.LVL202:
 1607 05b0 C0F3C030 		ubfx	r0, r0, #15, #1
 1608 05b4 95E6     		b	.L145
 1609              	.LVL203:
 1610              	.L112:
 371:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIMIN_SHIF
 1611              		.loc 1 371 10 is_stmt 1 view .LVU504
 372:boards/TMC2590_eval.c **** 		}
 1612              		.loc 1 372 4 view .LVU505
 1613              	.LBB197:
 1614              	.LBI197:
  48:boards/TMC2590_eval.c **** {
 1615              		.loc 1 48 31 view .LVU506
  48:boards/TMC2590_eval.c **** {
 1616              		.loc 1 48 31 is_stmt 0 view .LVU507
 1617              	.LBE197:
  50:boards/TMC2590_eval.c **** 
 1618              		.loc 1 50 2 is_stmt 1 view .LVU508
  52:boards/TMC2590_eval.c **** }
 1619              		.loc 1 52 2 view .LVU509
 1620              	.LBB198:
 1621              	.LBI198:
  48:boards/TMC2590_eval.c **** {
 1622              		.loc 1 48 31 view .LVU510
  48:boards/TMC2590_eval.c **** {
 1623              		.loc 1 48 31 is_stmt 0 view .LVU511
 1624              	.LBE198:
  50:boards/TMC2590_eval.c **** 
 1625              		.loc 1 50 2 is_stmt 1 view .LVU512
  52:boards/TMC2590_eval.c **** }
 1626              		.loc 1 52 2 view .LVU513
 372:boards/TMC2590_eval.c **** 		}
 1627              		.loc 1 372 4 is_stmt 0 view .LVU514
 1628 05b6 FFF7FEFF 		bl	tmc2590_readInt
 1629              	.LVL204:
 1630 05ba 2B68     		ldr	r3, [r5]
 1631 05bc DB03     		lsls	r3, r3, #15
 1632 05be 9BB2     		uxth	r3, r3
 1633 05c0 20F40042 		bic	r2, r0, #32768
 1634              	.LVL205:
 1635              	.L156:
 396:boards/TMC2590_eval.c **** 		}
 1636              		.loc 1 396 4 view .LVU515
 1637 05c4 1A43     		orrs	r2, r2, r3
 1638 05c6 0521     		movs	r1, #5
 1639              	.L147:
 295:boards/TMC2590_eval.c **** 			}
 1640              		.loc 1 295 5 view .LVU516
 1641 05c8 0948     		ldr	r0, .L158
 1642 05ca EEE6     		b	.L150
 1643              	.LVL206:
 1644              	.L55:
 377:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_S
 1645              		.loc 1 377 3 is_stmt 1 view .LVU517
 378:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1646              		.loc 1 378 13 is_stmt 0 view .LVU518
 1647 05cc 0848     		ldr	r0, .L158
 1648              	.LVL207:
 378:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1649              		.loc 1 378 13 view .LVU519
 1650 05ce 0521     		movs	r1, #5
 1651              	.LVL208:
 377:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_S
 1652              		.loc 1 377 5 view .LVU520
 1653 05d0 24B9     		cbnz	r4, .L113
 378:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1654              		.loc 1 378 4 is_stmt 1 view .LVU521
 1655              	.LBB199:
 1656              	.LBI199:
  48:boards/TMC2590_eval.c **** {
 1657              		.loc 1 48 31 view .LVU522
 1658              	.LVL209:
  48:boards/TMC2590_eval.c **** {
 1659              		.loc 1 48 31 is_stmt 0 view .LVU523
 1660              	.LBE199:
  50:boards/TMC2590_eval.c **** 
 1661              		.loc 1 50 2 is_stmt 1 view .LVU524
  52:boards/TMC2590_eval.c **** }
 1662              		.loc 1 52 2 view .LVU525
 378:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1663              		.loc 1 378 13 is_stmt 0 view .LVU526
 1664 05d2 FFF7FEFF 		bl	tmc2590_readInt
 1665              	.LVL210:
 1666 05d6 C0F34130 		ubfx	r0, r0, #13, #2
 1667 05da 82E6     		b	.L145
 1668              	.LVL211:
 1669              	.L113:
 379:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_SHIFT, *
 1670              		.loc 1 379 10 is_stmt 1 view .LVU527
 380:boards/TMC2590_eval.c **** 		}
 1671              		.loc 1 380 4 view .LVU528
 1672              	.LBB200:
 1673              	.LBI200:
  48:boards/TMC2590_eval.c **** {
 1674              		.loc 1 48 31 view .LVU529
  48:boards/TMC2590_eval.c **** {
 1675              		.loc 1 48 31 is_stmt 0 view .LVU530
 1676              	.LBE200:
  50:boards/TMC2590_eval.c **** 
 1677              		.loc 1 50 2 is_stmt 1 view .LVU531
  52:boards/TMC2590_eval.c **** }
 1678              		.loc 1 52 2 view .LVU532
 1679              	.LBB201:
 1680              	.LBI201:
  48:boards/TMC2590_eval.c **** {
 1681              		.loc 1 48 31 view .LVU533
  48:boards/TMC2590_eval.c **** {
 1682              		.loc 1 48 31 is_stmt 0 view .LVU534
 1683              	.LBE201:
  50:boards/TMC2590_eval.c **** 
 1684              		.loc 1 50 2 is_stmt 1 view .LVU535
  52:boards/TMC2590_eval.c **** }
 1685              		.loc 1 52 2 view .LVU536
 380:boards/TMC2590_eval.c **** 		}
 1686              		.loc 1 380 4 is_stmt 0 view .LVU537
 1687 05dc FFF7FEFF 		bl	tmc2590_readInt
 1688              	.LVL212:
 1689 05e0 2B68     		ldr	r3, [r5]
 1690 05e2 5B03     		lsls	r3, r3, #13
 1691 05e4 03F4C043 		and	r3, r3, #24576
 1692 05e8 20F4C042 		bic	r2, r0, #24576
 1693 05ec EAE7     		b	.L156
 1694              	.L159:
 1695 05ee 00BF     		.align	2
 1696              	.L158:
 1697 05f0 00000000 		.word	.LANCHOR0
 1698              	.LVL213:
 1699              	.L54:
 385:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX
 1700              		.loc 1 385 3 is_stmt 1 view .LVU538
 386:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1701              		.loc 1 386 13 is_stmt 0 view .LVU539
 1702 05f4 8D48     		ldr	r0, .L160
 1703              	.LVL214:
 386:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1704              		.loc 1 386 13 view .LVU540
 1705 05f6 0521     		movs	r1, #5
 1706              	.LVL215:
 385:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX
 1707              		.loc 1 385 5 view .LVU541
 1708 05f8 24B9     		cbnz	r4, .L114
 386:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1709              		.loc 1 386 4 is_stmt 1 view .LVU542
 1710              	.LBB202:
 1711              	.LBI202:
  48:boards/TMC2590_eval.c **** {
 1712              		.loc 1 48 31 view .LVU543
 1713              	.LVL216:
  48:boards/TMC2590_eval.c **** {
 1714              		.loc 1 48 31 is_stmt 0 view .LVU544
 1715              	.LBE202:
  50:boards/TMC2590_eval.c **** 
 1716              		.loc 1 50 2 is_stmt 1 view .LVU545
  52:boards/TMC2590_eval.c **** }
 1717              		.loc 1 52 2 view .LVU546
 386:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1718              		.loc 1 386 13 is_stmt 0 view .LVU547
 1719 05fa FFF7FEFF 		bl	tmc2590_readInt
 1720              	.LVL217:
 1721 05fe C0F30320 		ubfx	r0, r0, #8, #4
 1722 0602 6EE6     		b	.L145
 1723              	.LVL218:
 1724              	.L114:
 387:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX_SHIFT,
 1725              		.loc 1 387 10 is_stmt 1 view .LVU548
 388:boards/TMC2590_eval.c **** 		}
 1726              		.loc 1 388 4 view .LVU549
 1727              	.LBB203:
 1728              	.LBI203:
  48:boards/TMC2590_eval.c **** {
 1729              		.loc 1 48 31 view .LVU550
  48:boards/TMC2590_eval.c **** {
 1730              		.loc 1 48 31 is_stmt 0 view .LVU551
 1731              	.LBE203:
  50:boards/TMC2590_eval.c **** 
 1732              		.loc 1 50 2 is_stmt 1 view .LVU552
  52:boards/TMC2590_eval.c **** }
 1733              		.loc 1 52 2 view .LVU553
 1734              	.LBB204:
 1735              	.LBI204:
  48:boards/TMC2590_eval.c **** {
 1736              		.loc 1 48 31 view .LVU554
  48:boards/TMC2590_eval.c **** {
 1737              		.loc 1 48 31 is_stmt 0 view .LVU555
 1738              	.LBE204:
  50:boards/TMC2590_eval.c **** 
 1739              		.loc 1 50 2 is_stmt 1 view .LVU556
  52:boards/TMC2590_eval.c **** }
 1740              		.loc 1 52 2 view .LVU557
 388:boards/TMC2590_eval.c **** 		}
 1741              		.loc 1 388 4 is_stmt 0 view .LVU558
 1742 0604 FFF7FEFF 		bl	tmc2590_readInt
 1743              	.LVL219:
 1744 0608 2B68     		ldr	r3, [r5]
 1745 060a 1B02     		lsls	r3, r3, #8
 1746 060c 03F47063 		and	r3, r3, #3840
 1747 0610 20F47062 		bic	r2, r0, #3840
 1748 0614 D6E7     		b	.L156
 1749              	.LVL220:
 1750              	.L53:
 393:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_S
 1751              		.loc 1 393 3 is_stmt 1 view .LVU559
 394:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1752              		.loc 1 394 13 is_stmt 0 view .LVU560
 1753 0616 8548     		ldr	r0, .L160
 1754              	.LVL221:
 394:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1755              		.loc 1 394 13 view .LVU561
 1756 0618 0521     		movs	r1, #5
 1757              	.LVL222:
 393:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_S
 1758              		.loc 1 393 5 view .LVU562
 1759 061a 24B9     		cbnz	r4, .L115
 394:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1760              		.loc 1 394 4 is_stmt 1 view .LVU563
 1761              	.LBB205:
 1762              	.LBI205:
  48:boards/TMC2590_eval.c **** {
 1763              		.loc 1 48 31 view .LVU564
 1764              	.LVL223:
  48:boards/TMC2590_eval.c **** {
 1765              		.loc 1 48 31 is_stmt 0 view .LVU565
 1766              	.LBE205:
  50:boards/TMC2590_eval.c **** 
 1767              		.loc 1 50 2 is_stmt 1 view .LVU566
  52:boards/TMC2590_eval.c **** }
 1768              		.loc 1 52 2 view .LVU567
 394:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1769              		.loc 1 394 13 is_stmt 0 view .LVU568
 1770 061c FFF7FEFF 		bl	tmc2590_readInt
 1771              	.LVL224:
 1772 0620 C0F34110 		ubfx	r0, r0, #5, #2
 1773 0624 5DE6     		b	.L145
 1774              	.LVL225:
 1775              	.L115:
 395:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT, *
 1776              		.loc 1 395 10 is_stmt 1 view .LVU569
 396:boards/TMC2590_eval.c **** 		}
 1777              		.loc 1 396 4 view .LVU570
 1778              	.LBB206:
 1779              	.LBI206:
  48:boards/TMC2590_eval.c **** {
 1780              		.loc 1 48 31 view .LVU571
  48:boards/TMC2590_eval.c **** {
 1781              		.loc 1 48 31 is_stmt 0 view .LVU572
 1782              	.LBE206:
  50:boards/TMC2590_eval.c **** 
 1783              		.loc 1 50 2 is_stmt 1 view .LVU573
  52:boards/TMC2590_eval.c **** }
 1784              		.loc 1 52 2 view .LVU574
 1785              	.LBB207:
 1786              	.LBI207:
  48:boards/TMC2590_eval.c **** {
 1787              		.loc 1 48 31 view .LVU575
  48:boards/TMC2590_eval.c **** {
 1788              		.loc 1 48 31 is_stmt 0 view .LVU576
 1789              	.LBE207:
  50:boards/TMC2590_eval.c **** 
 1790              		.loc 1 50 2 is_stmt 1 view .LVU577
  52:boards/TMC2590_eval.c **** }
 1791              		.loc 1 52 2 view .LVU578
 396:boards/TMC2590_eval.c **** 		}
 1792              		.loc 1 396 4 is_stmt 0 view .LVU579
 1793 0626 FFF7FEFF 		bl	tmc2590_readInt
 1794              	.LVL226:
 1795 062a 2B68     		ldr	r3, [r5]
 1796 062c 5B01     		lsls	r3, r3, #5
 1797 062e 03F06003 		and	r3, r3, #96
 1798 0632 20F06002 		bic	r2, r0, #96
 1799 0636 C5E7     		b	.L156
 1800              	.LVL227:
 1801              	.L52:
 401:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepActiveValue;
 1802              		.loc 1 401 3 is_stmt 1 view .LVU580
 1803 0638 7C4B     		ldr	r3, .L160
 401:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepActiveValue;
 1804              		.loc 1 401 5 is_stmt 0 view .LVU581
 1805 063a 08B9     		cbnz	r0, .L116
 402:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1806              		.loc 1 402 4 is_stmt 1 view .LVU582
 402:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1807              		.loc 1 402 20 is_stmt 0 view .LVU583
 1808 063c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1809 063e 89E6     		b	.L148
 1810              	.L116:
 403:boards/TMC2590_eval.c **** 			TMC2590.coolStepActiveValue = *value;
 1811              		.loc 1 403 10 is_stmt 1 view .LVU584
 404:boards/TMC2590_eval.c **** 		}
 1812              		.loc 1 404 4 view .LVU585
 404:boards/TMC2590_eval.c **** 		}
 1813              		.loc 1 404 32 is_stmt 0 view .LVU586
 1814 0640 2A68     		ldr	r2, [r5]
 1815 0642 9A71     		strb	r2, [r3, #6]
 1816 0644 54E6     		b	.L146
 1817              	.L51:
 409:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFIL
 1818              		.loc 1 409 3 is_stmt 1 view .LVU587
 410:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1819              		.loc 1 410 13 is_stmt 0 view .LVU588
 1820 0646 7948     		ldr	r0, .L160
 1821              	.LVL228:
 410:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1822              		.loc 1 410 13 view .LVU589
 1823 0648 0621     		movs	r1, #6
 1824              	.LVL229:
 409:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFIL
 1825              		.loc 1 409 5 view .LVU590
 1826 064a 24B9     		cbnz	r4, .L117
 1827              	.L151:
 507:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1828              		.loc 1 507 4 is_stmt 1 view .LVU591
 1829              	.LBB208:
 1830              	.LBI208:
  48:boards/TMC2590_eval.c **** {
 1831              		.loc 1 48 31 view .LVU592
 1832              	.LVL230:
  48:boards/TMC2590_eval.c **** {
 1833              		.loc 1 48 31 is_stmt 0 view .LVU593
 1834              	.LBE208:
  50:boards/TMC2590_eval.c **** 
 1835              		.loc 1 50 2 is_stmt 1 view .LVU594
  52:boards/TMC2590_eval.c **** }
 1836              		.loc 1 52 2 view .LVU595
 507:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1837              		.loc 1 507 13 is_stmt 0 view .LVU596
 1838 064c FFF7FEFF 		bl	tmc2590_readInt
 1839              	.LVL231:
 1840 0650 C0F30040 		ubfx	r0, r0, #16, #1
 1841 0654 45E6     		b	.L145
 1842              	.LVL232:
 1843              	.L117:
 411:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFILT_SHIFT
 1844              		.loc 1 411 10 is_stmt 1 view .LVU597
 412:boards/TMC2590_eval.c **** 		}
 1845              		.loc 1 412 4 view .LVU598
 1846              	.LBB209:
 1847              	.LBI209:
  48:boards/TMC2590_eval.c **** {
 1848              		.loc 1 48 31 view .LVU599
  48:boards/TMC2590_eval.c **** {
 1849              		.loc 1 48 31 is_stmt 0 view .LVU600
 1850              	.LBE209:
  50:boards/TMC2590_eval.c **** 
 1851              		.loc 1 50 2 is_stmt 1 view .LVU601
  52:boards/TMC2590_eval.c **** }
 1852              		.loc 1 52 2 view .LVU602
 1853              	.LBB210:
 1854              	.LBI210:
  48:boards/TMC2590_eval.c **** {
 1855              		.loc 1 48 31 view .LVU603
  48:boards/TMC2590_eval.c **** {
 1856              		.loc 1 48 31 is_stmt 0 view .LVU604
 1857              	.LBE210:
  50:boards/TMC2590_eval.c **** 
 1858              		.loc 1 50 2 is_stmt 1 view .LVU605
  52:boards/TMC2590_eval.c **** }
 1859              		.loc 1 52 2 view .LVU606
 412:boards/TMC2590_eval.c **** 		}
 1860              		.loc 1 412 4 is_stmt 0 view .LVU607
 1861 0656 FFF7FEFF 		bl	tmc2590_readInt
 1862              	.LVL233:
 1863 065a 2B68     		ldr	r3, [r5]
 1864 065c 1B04     		lsls	r3, r3, #16
 1865 065e 03F48033 		and	r3, r3, #65536
 1866 0662 20F48032 		bic	r2, r0, #65536
 1867              	.LVL234:
 1868              	.L157:
 421:boards/TMC2590_eval.c **** 		}
 1869              		.loc 1 421 4 view .LVU608
 1870 0666 1A43     		orrs	r2, r2, r3
 1871 0668 0621     		movs	r1, #6
 1872 066a ADE7     		b	.L147
 1873              	.LVL235:
 1874              	.L50:
 417:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SH
 1875              		.loc 1 417 3 is_stmt 1 view .LVU609
 418:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1876              		.loc 1 418 13 is_stmt 0 view .LVU610
 1877 066c 6F48     		ldr	r0, .L160
 1878              	.LVL236:
 418:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1879              		.loc 1 418 13 view .LVU611
 1880 066e 0621     		movs	r1, #6
 1881              	.LVL237:
 417:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SH
 1882              		.loc 1 417 5 view .LVU612
 1883 0670 5CB9     		cbnz	r4, .L118
 418:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1884              		.loc 1 418 4 is_stmt 1 view .LVU613
 1885              	.LBB211:
 1886              	.LBI211:
  48:boards/TMC2590_eval.c **** {
 1887              		.loc 1 48 31 view .LVU614
 1888              	.LVL238:
  48:boards/TMC2590_eval.c **** {
 1889              		.loc 1 48 31 is_stmt 0 view .LVU615
 1890              	.LBE211:
  50:boards/TMC2590_eval.c **** 
 1891              		.loc 1 50 2 is_stmt 1 view .LVU616
  52:boards/TMC2590_eval.c **** }
 1892              		.loc 1 52 2 view .LVU617
 418:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1893              		.loc 1 418 13 is_stmt 0 view .LVU618
 1894 0672 FFF7FEFF 		bl	tmc2590_readInt
 1895              	.LVL239:
 1896 0676 030A     		lsrs	r3, r0, #8
 419:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1897              		.loc 1 419 13 view .LVU619
 1898 0678 13F04003 		ands	r3, r3, #64
 418:boards/TMC2590_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 1899              		.loc 1 418 13 view .LVU620
 1900 067c C0F30620 		ubfx	r0, r0, #8, #7
 419:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1901              		.loc 1 419 4 is_stmt 1 view .LVU621
 419:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1902              		.loc 1 419 13 is_stmt 0 view .LVU622
 1903 0680 18BF     		it	ne
 1904 0682 6FF07F03 		mvnne	r3, #127
 1905 0686 1843     		orrs	r0, r0, r3
 1906 0688 2BE6     		b	.L145
 1907              	.LVL240:
 1908              	.L118:
 420:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT, *v
 1909              		.loc 1 420 10 is_stmt 1 view .LVU623
 421:boards/TMC2590_eval.c **** 		}
 1910              		.loc 1 421 4 view .LVU624
 1911              	.LBB212:
 1912              	.LBI212:
  48:boards/TMC2590_eval.c **** {
 1913              		.loc 1 48 31 view .LVU625
  48:boards/TMC2590_eval.c **** {
 1914              		.loc 1 48 31 is_stmt 0 view .LVU626
 1915              	.LBE212:
  50:boards/TMC2590_eval.c **** 
 1916              		.loc 1 50 2 is_stmt 1 view .LVU627
  52:boards/TMC2590_eval.c **** }
 1917              		.loc 1 52 2 view .LVU628
 1918              	.LBB213:
 1919              	.LBI213:
  48:boards/TMC2590_eval.c **** {
 1920              		.loc 1 48 31 view .LVU629
  48:boards/TMC2590_eval.c **** {
 1921              		.loc 1 48 31 is_stmt 0 view .LVU630
 1922              	.LBE213:
  50:boards/TMC2590_eval.c **** 
 1923              		.loc 1 50 2 is_stmt 1 view .LVU631
  52:boards/TMC2590_eval.c **** }
 1924              		.loc 1 52 2 view .LVU632
 421:boards/TMC2590_eval.c **** 		}
 1925              		.loc 1 421 4 is_stmt 0 view .LVU633
 1926 068a FFF7FEFF 		bl	tmc2590_readInt
 1927              	.LVL241:
 1928 068e 2B68     		ldr	r3, [r5]
 1929 0690 1B02     		lsls	r3, r3, #8
 1930 0692 03F4FE43 		and	r3, r3, #32512
 1931 0696 20F4FE42 		bic	r2, r0, #32512
 1932 069a E4E7     		b	.L157
 1933              	.LVL242:
 1934              	.L49:
 426:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_S
 1935              		.loc 1 426 3 is_stmt 1 view .LVU634
 427:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1936              		.loc 1 427 13 is_stmt 0 view .LVU635
 1937 069c 6348     		ldr	r0, .L160
 1938              	.LVL243:
 427:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1939              		.loc 1 427 13 view .LVU636
 1940 069e 0721     		movs	r1, #7
 1941              	.LVL244:
 426:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_S
 1942              		.loc 1 426 5 view .LVU637
 1943 06a0 24B9     		cbnz	r4, .L120
 427:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1944              		.loc 1 427 4 is_stmt 1 view .LVU638
 1945              	.LBB214:
 1946              	.LBI214:
  48:boards/TMC2590_eval.c **** {
 1947              		.loc 1 48 31 view .LVU639
 1948              	.LVL245:
  48:boards/TMC2590_eval.c **** {
 1949              		.loc 1 48 31 is_stmt 0 view .LVU640
 1950              	.LBE214:
  50:boards/TMC2590_eval.c **** 
 1951              		.loc 1 50 2 is_stmt 1 view .LVU641
  52:boards/TMC2590_eval.c **** }
 1952              		.loc 1 52 2 view .LVU642
 427:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1953              		.loc 1 427 13 is_stmt 0 view .LVU643
 1954 06a2 FFF7FEFF 		bl	tmc2590_readInt
 1955              	.LVL246:
 1956 06a6 C0F38130 		ubfx	r0, r0, #14, #2
 1957 06aa 1AE6     		b	.L145
 1958              	.LVL247:
 1959              	.L120:
 428:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_SHIFT, *
 1960              		.loc 1 428 10 is_stmt 1 view .LVU644
 429:boards/TMC2590_eval.c **** 		}
 1961              		.loc 1 429 4 view .LVU645
 1962              	.LBB215:
 1963              	.LBI215:
  48:boards/TMC2590_eval.c **** {
 1964              		.loc 1 48 31 view .LVU646
  48:boards/TMC2590_eval.c **** {
 1965              		.loc 1 48 31 is_stmt 0 view .LVU647
 1966              	.LBE215:
  50:boards/TMC2590_eval.c **** 
 1967              		.loc 1 50 2 is_stmt 1 view .LVU648
  52:boards/TMC2590_eval.c **** }
 1968              		.loc 1 52 2 view .LVU649
 1969              	.LBB216:
 1970              	.LBI216:
  48:boards/TMC2590_eval.c **** {
 1971              		.loc 1 48 31 view .LVU650
  48:boards/TMC2590_eval.c **** {
 1972              		.loc 1 48 31 is_stmt 0 view .LVU651
 1973              	.LBE216:
  50:boards/TMC2590_eval.c **** 
 1974              		.loc 1 50 2 is_stmt 1 view .LVU652
  52:boards/TMC2590_eval.c **** }
 1975              		.loc 1 52 2 view .LVU653
 429:boards/TMC2590_eval.c **** 		}
 1976              		.loc 1 429 4 is_stmt 0 view .LVU654
 1977 06ac FFF7FEFF 		bl	tmc2590_readInt
 1978              	.LVL248:
 1979 06b0 2B68     		ldr	r3, [r5]
 1980 06b2 9B03     		lsls	r3, r3, #14
 1981 06b4 9BB2     		uxth	r3, r3
 1982 06b6 20F44042 		bic	r2, r0, #49152
 1983              	.LVL249:
 1984              	.L153:
 509:boards/TMC2590_eval.c **** 		}
 1985              		.loc 1 509 4 view .LVU655
 1986 06ba 1A43     		orrs	r2, r2, r3
 1987 06bc 0721     		movs	r1, #7
 1988 06be 83E7     		b	.L147
 1989              	.LVL250:
 1990              	.L48:
 434:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_S
 1991              		.loc 1 434 3 is_stmt 1 view .LVU656
 435:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1992              		.loc 1 435 13 is_stmt 0 view .LVU657
 1993 06c0 5A48     		ldr	r0, .L160
 1994              	.LVL251:
 435:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 1995              		.loc 1 435 13 view .LVU658
 1996 06c2 0721     		movs	r1, #7
 1997              	.LVL252:
 434:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_S
 1998              		.loc 1 434 5 view .LVU659
 1999 06c4 24B9     		cbnz	r4, .L121
 435:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2000              		.loc 1 435 4 is_stmt 1 view .LVU660
 2001              	.LBB217:
 2002              	.LBI217:
  48:boards/TMC2590_eval.c **** {
 2003              		.loc 1 48 31 view .LVU661
 2004              	.LVL253:
  48:boards/TMC2590_eval.c **** {
 2005              		.loc 1 48 31 is_stmt 0 view .LVU662
 2006              	.LBE217:
  50:boards/TMC2590_eval.c **** 
 2007              		.loc 1 50 2 is_stmt 1 view .LVU663
  52:boards/TMC2590_eval.c **** }
 2008              		.loc 1 52 2 view .LVU664
 435:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2009              		.loc 1 435 13 is_stmt 0 view .LVU665
 2010 06c6 FFF7FEFF 		bl	tmc2590_readInt
 2011              	.LVL254:
 2012 06ca C0F30130 		ubfx	r0, r0, #12, #2
 2013 06ce 08E6     		b	.L145
 2014              	.LVL255:
 2015              	.L121:
 436:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_SHIFT, *
 2016              		.loc 1 436 10 is_stmt 1 view .LVU666
 437:boards/TMC2590_eval.c **** 		}
 2017              		.loc 1 437 4 view .LVU667
 2018              	.LBB218:
 2019              	.LBI218:
  48:boards/TMC2590_eval.c **** {
 2020              		.loc 1 48 31 view .LVU668
  48:boards/TMC2590_eval.c **** {
 2021              		.loc 1 48 31 is_stmt 0 view .LVU669
 2022              	.LBE218:
  50:boards/TMC2590_eval.c **** 
 2023              		.loc 1 50 2 is_stmt 1 view .LVU670
  52:boards/TMC2590_eval.c **** }
 2024              		.loc 1 52 2 view .LVU671
 2025              	.LBB219:
 2026              	.LBI219:
  48:boards/TMC2590_eval.c **** {
 2027              		.loc 1 48 31 view .LVU672
  48:boards/TMC2590_eval.c **** {
 2028              		.loc 1 48 31 is_stmt 0 view .LVU673
 2029              	.LBE219:
  50:boards/TMC2590_eval.c **** 
 2030              		.loc 1 50 2 is_stmt 1 view .LVU674
  52:boards/TMC2590_eval.c **** }
 2031              		.loc 1 52 2 view .LVU675
 437:boards/TMC2590_eval.c **** 		}
 2032              		.loc 1 437 4 is_stmt 0 view .LVU676
 2033 06d0 FFF7FEFF 		bl	tmc2590_readInt
 2034              	.LVL256:
 2035 06d4 2B68     		ldr	r3, [r5]
 2036 06d6 1B03     		lsls	r3, r3, #12
 2037 06d8 03F44053 		and	r3, r3, #12288
 2038 06dc 20F44052 		bic	r2, r0, #12288
 2039 06e0 EBE7     		b	.L153
 2040              	.LVL257:
 2041              	.L47:
 442:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS
 2042              		.loc 1 442 3 is_stmt 1 view .LVU677
 443:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2043              		.loc 1 443 13 is_stmt 0 view .LVU678
 2044 06e2 5248     		ldr	r0, .L160
 2045              	.LVL258:
 443:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2046              		.loc 1 443 13 view .LVU679
 2047 06e4 0721     		movs	r1, #7
 2048              	.LVL259:
 442:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS
 2049              		.loc 1 442 5 view .LVU680
 2050 06e6 24B9     		cbnz	r4, .L122
 443:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2051              		.loc 1 443 4 is_stmt 1 view .LVU681
 2052              	.LBB220:
 2053              	.LBI220:
  48:boards/TMC2590_eval.c **** {
 2054              		.loc 1 48 31 view .LVU682
 2055              	.LVL260:
  48:boards/TMC2590_eval.c **** {
 2056              		.loc 1 48 31 is_stmt 0 view .LVU683
 2057              	.LBE220:
  50:boards/TMC2590_eval.c **** 
 2058              		.loc 1 50 2 is_stmt 1 view .LVU684
  52:boards/TMC2590_eval.c **** }
 2059              		.loc 1 52 2 view .LVU685
 443:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2060              		.loc 1 443 13 is_stmt 0 view .LVU686
 2061 06e8 FFF7FEFF 		bl	tmc2590_readInt
 2062              	.LVL261:
 2063 06ec C0F38020 		ubfx	r0, r0, #10, #1
 2064 06f0 F7E5     		b	.L145
 2065              	.LVL262:
 2066              	.L122:
 444:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS2G_SHIF
 2067              		.loc 1 444 10 is_stmt 1 view .LVU687
 445:boards/TMC2590_eval.c **** 		}
 2068              		.loc 1 445 4 view .LVU688
 2069              	.LBB221:
 2070              	.LBI221:
  48:boards/TMC2590_eval.c **** {
 2071              		.loc 1 48 31 view .LVU689
  48:boards/TMC2590_eval.c **** {
 2072              		.loc 1 48 31 is_stmt 0 view .LVU690
 2073              	.LBE221:
  50:boards/TMC2590_eval.c **** 
 2074              		.loc 1 50 2 is_stmt 1 view .LVU691
  52:boards/TMC2590_eval.c **** }
 2075              		.loc 1 52 2 view .LVU692
 2076              	.LBB222:
 2077              	.LBI222:
  48:boards/TMC2590_eval.c **** {
 2078              		.loc 1 48 31 view .LVU693
  48:boards/TMC2590_eval.c **** {
 2079              		.loc 1 48 31 is_stmt 0 view .LVU694
 2080              	.LBE222:
  50:boards/TMC2590_eval.c **** 
 2081              		.loc 1 50 2 is_stmt 1 view .LVU695
  52:boards/TMC2590_eval.c **** }
 2082              		.loc 1 52 2 view .LVU696
 445:boards/TMC2590_eval.c **** 		}
 2083              		.loc 1 445 4 is_stmt 0 view .LVU697
 2084 06f2 FFF7FEFF 		bl	tmc2590_readInt
 2085              	.LVL263:
 2086 06f6 2B68     		ldr	r3, [r5]
 2087 06f8 9B02     		lsls	r3, r3, #10
 2088 06fa 03F48063 		and	r3, r3, #1024
 2089 06fe 20F48062 		bic	r2, r0, #1024
 2090 0702 DAE7     		b	.L153
 2091              	.LVL264:
 2092              	.L46:
 450:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_S
 2093              		.loc 1 450 3 is_stmt 1 view .LVU698
 451:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2094              		.loc 1 451 13 is_stmt 0 view .LVU699
 2095 0704 4948     		ldr	r0, .L160
 2096              	.LVL265:
 451:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2097              		.loc 1 451 13 view .LVU700
 2098 0706 0721     		movs	r1, #7
 2099              	.LVL266:
 450:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_S
 2100              		.loc 1 450 5 view .LVU701
 2101 0708 24B9     		cbnz	r4, .L123
 451:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2102              		.loc 1 451 4 is_stmt 1 view .LVU702
 2103              	.LBB223:
 2104              	.LBI223:
  48:boards/TMC2590_eval.c **** {
 2105              		.loc 1 48 31 view .LVU703
 2106              	.LVL267:
  48:boards/TMC2590_eval.c **** {
 2107              		.loc 1 48 31 is_stmt 0 view .LVU704
 2108              	.LBE223:
  50:boards/TMC2590_eval.c **** 
 2109              		.loc 1 50 2 is_stmt 1 view .LVU705
  52:boards/TMC2590_eval.c **** }
 2110              		.loc 1 52 2 view .LVU706
 451:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2111              		.loc 1 451 13 is_stmt 0 view .LVU707
 2112 070a FFF7FEFF 		bl	tmc2590_readInt
 2113              	.LVL268:
 2114 070e C0F30120 		ubfx	r0, r0, #8, #2
 2115 0712 E6E5     		b	.L145
 2116              	.LVL269:
 2117              	.L123:
 452:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_SHIFT, *
 2118              		.loc 1 452 10 is_stmt 1 view .LVU708
 453:boards/TMC2590_eval.c **** 		}
 2119              		.loc 1 453 4 view .LVU709
 2120              	.LBB224:
 2121              	.LBI224:
  48:boards/TMC2590_eval.c **** {
 2122              		.loc 1 48 31 view .LVU710
  48:boards/TMC2590_eval.c **** {
 2123              		.loc 1 48 31 is_stmt 0 view .LVU711
 2124              	.LBE224:
  50:boards/TMC2590_eval.c **** 
 2125              		.loc 1 50 2 is_stmt 1 view .LVU712
  52:boards/TMC2590_eval.c **** }
 2126              		.loc 1 52 2 view .LVU713
 2127              	.LBB225:
 2128              	.LBI225:
  48:boards/TMC2590_eval.c **** {
 2129              		.loc 1 48 31 view .LVU714
  48:boards/TMC2590_eval.c **** {
 2130              		.loc 1 48 31 is_stmt 0 view .LVU715
 2131              	.LBE225:
  50:boards/TMC2590_eval.c **** 
 2132              		.loc 1 50 2 is_stmt 1 view .LVU716
  52:boards/TMC2590_eval.c **** }
 2133              		.loc 1 52 2 view .LVU717
 453:boards/TMC2590_eval.c **** 		}
 2134              		.loc 1 453 4 is_stmt 0 view .LVU718
 2135 0714 FFF7FEFF 		bl	tmc2590_readInt
 2136              	.LVL270:
 2137 0718 2B68     		ldr	r3, [r5]
 2138 071a 1B02     		lsls	r3, r3, #8
 2139 071c 03F44073 		and	r3, r3, #768
 2140 0720 20F44072 		bic	r2, r0, #768
 2141 0724 C9E7     		b	.L153
 2142              	.LVL271:
 2143              	.L45:
 458:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSEN
 2144              		.loc 1 458 3 is_stmt 1 view .LVU719
 459:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2145              		.loc 1 459 13 is_stmt 0 view .LVU720
 2146 0726 4148     		ldr	r0, .L160
 2147              	.LVL272:
 459:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2148              		.loc 1 459 13 view .LVU721
 2149 0728 0721     		movs	r1, #7
 2150              	.LVL273:
 458:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSEN
 2151              		.loc 1 458 5 view .LVU722
 2152 072a 24B9     		cbnz	r4, .L124
 459:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2153              		.loc 1 459 4 is_stmt 1 view .LVU723
 2154              	.LBB226:
 2155              	.LBI226:
  48:boards/TMC2590_eval.c **** {
 2156              		.loc 1 48 31 view .LVU724
 2157              	.LVL274:
  48:boards/TMC2590_eval.c **** {
 2158              		.loc 1 48 31 is_stmt 0 view .LVU725
 2159              	.LBE226:
  50:boards/TMC2590_eval.c **** 
 2160              		.loc 1 50 2 is_stmt 1 view .LVU726
  52:boards/TMC2590_eval.c **** }
 2161              		.loc 1 52 2 view .LVU727
 459:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2162              		.loc 1 459 13 is_stmt 0 view .LVU728
 2163 072c FFF7FEFF 		bl	tmc2590_readInt
 2164              	.LVL275:
 2165 0730 C0F38010 		ubfx	r0, r0, #6, #1
 2166 0734 D5E5     		b	.L145
 2167              	.LVL276:
 2168              	.L124:
 460:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSENSE_SHIF
 2169              		.loc 1 460 10 is_stmt 1 view .LVU729
 461:boards/TMC2590_eval.c **** 		}
 2170              		.loc 1 461 4 view .LVU730
 2171              	.LBB227:
 2172              	.LBI227:
  48:boards/TMC2590_eval.c **** {
 2173              		.loc 1 48 31 view .LVU731
  48:boards/TMC2590_eval.c **** {
 2174              		.loc 1 48 31 is_stmt 0 view .LVU732
 2175              	.LBE227:
  50:boards/TMC2590_eval.c **** 
 2176              		.loc 1 50 2 is_stmt 1 view .LVU733
  52:boards/TMC2590_eval.c **** }
 2177              		.loc 1 52 2 view .LVU734
 2178              	.LBB228:
 2179              	.LBI228:
  48:boards/TMC2590_eval.c **** {
 2180              		.loc 1 48 31 view .LVU735
  48:boards/TMC2590_eval.c **** {
 2181              		.loc 1 48 31 is_stmt 0 view .LVU736
 2182              	.LBE228:
  50:boards/TMC2590_eval.c **** 
 2183              		.loc 1 50 2 is_stmt 1 view .LVU737
  52:boards/TMC2590_eval.c **** }
 2184              		.loc 1 52 2 view .LVU738
 461:boards/TMC2590_eval.c **** 		}
 2185              		.loc 1 461 4 is_stmt 0 view .LVU739
 2186 0736 FFF7FEFF 		bl	tmc2590_readInt
 2187              	.LVL277:
 2188 073a 2B68     		ldr	r3, [r5]
 2189 073c 9B01     		lsls	r3, r3, #6
 2190 073e 03F04003 		and	r3, r3, #64
 2191 0742 20F04002 		bic	r2, r0, #64
 2192 0746 B8E7     		b	.L153
 2193              	.LVL278:
 2194              	.L44:
 466:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SE_MASK, TMC2590_SE_SHI
 2195              		.loc 1 466 3 is_stmt 1 view .LVU740
 466:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SE_MASK, TMC2590_SE_SHI
 2196              		.loc 1 466 5 is_stmt 0 view .LVU741
 2197 0748 0028     		cmp	r0, #0
 2198 074a 7FF4E6AC 		bne	.L142
 467:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2199              		.loc 1 467 4 is_stmt 1 view .LVU742
 2200              	.LBB229:
 2201              	.LBI229:
  48:boards/TMC2590_eval.c **** {
 2202              		.loc 1 48 31 view .LVU743
 2203              	.LVL279:
  48:boards/TMC2590_eval.c **** {
 2204              		.loc 1 48 31 is_stmt 0 view .LVU744
 2205              	.LBE229:
  50:boards/TMC2590_eval.c **** 
 2206              		.loc 1 50 2 is_stmt 1 view .LVU745
  52:boards/TMC2590_eval.c **** }
 2207              		.loc 1 52 2 view .LVU746
 467:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2208              		.loc 1 467 13 is_stmt 0 view .LVU747
 2209 074e 3748     		ldr	r0, .L160
 2210              	.LVL280:
 467:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2211              		.loc 1 467 13 view .LVU748
 2212 0750 0221     		movs	r1, #2
 2213              	.LVL281:
 467:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2214              		.loc 1 467 13 view .LVU749
 2215 0752 FFF7FEFF 		bl	tmc2590_readInt
 2216              	.LVL282:
 2217 0756 C0F38420 		ubfx	r0, r0, #10, #5
 2218 075a C2E5     		b	.L145
 2219              	.LVL283:
 2220              	.L43:
 474:boards/TMC2590_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2221              		.loc 1 474 3 is_stmt 1 view .LVU750
 474:boards/TMC2590_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2222              		.loc 1 474 5 is_stmt 0 view .LVU751
 2223 075c 10B9     		cbnz	r0, .L125
 475:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2224              		.loc 1 475 4 is_stmt 1 view .LVU752
 475:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2225              		.loc 1 475 13 is_stmt 0 view .LVU753
 2226 075e FFF7FEFF 		bl	StepDir_getStallGuardThreshold
 2227              	.LVL284:
 475:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2228              		.loc 1 475 13 view .LVU754
 2229 0762 BEE5     		b	.L145
 2230              	.LVL285:
 2231              	.L125:
 476:boards/TMC2590_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 2232              		.loc 1 476 10 is_stmt 1 view .LVU755
 477:boards/TMC2590_eval.c **** 		}
 2233              		.loc 1 477 4 view .LVU756
 2234 0764 2968     		ldr	r1, [r5]
 2235              	.LVL286:
 477:boards/TMC2590_eval.c **** 		}
 2236              		.loc 1 477 4 is_stmt 0 view .LVU757
 2237 0766 0020     		movs	r0, #0
 2238              	.LVL287:
 477:boards/TMC2590_eval.c **** 		}
 2239              		.loc 1 477 4 view .LVU758
 2240 0768 FFF7FEFF 		bl	StepDir_setStallGuardThreshold
 2241              	.LVL288:
 2242 076c C0E5     		b	.L146
 2243              	.LVL289:
 2244              	.L42:
 482:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepThreshold;
 2245              		.loc 1 482 3 is_stmt 1 view .LVU759
 2246 076e 2F4B     		ldr	r3, .L160
 482:boards/TMC2590_eval.c **** 			*value = TMC2590.coolStepThreshold;
 2247              		.loc 1 482 5 is_stmt 0 view .LVU760
 2248 0770 08B9     		cbnz	r0, .L126
 483:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2249              		.loc 1 483 4 is_stmt 1 view .LVU761
 483:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2250              		.loc 1 483 11 is_stmt 0 view .LVU762
 2251 0772 9B68     		ldr	r3, [r3, #8]
 2252 0774 EEE5     		b	.L148
 2253              	.L126:
 484:boards/TMC2590_eval.c **** 			TMC2590.coolStepThreshold = *value;
 2254              		.loc 1 484 10 is_stmt 1 view .LVU763
 485:boards/TMC2590_eval.c **** 		}
 2255              		.loc 1 485 4 view .LVU764
 485:boards/TMC2590_eval.c **** 		}
 2256              		.loc 1 485 30 is_stmt 0 view .LVU765
 2257 0776 2A68     		ldr	r2, [r5]
 2258 0778 9A60     		str	r2, [r3, #8]
 2259 077a B9E5     		b	.L146
 2260              	.L41:
 490:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF
 2261              		.loc 1 490 3 is_stmt 1 view .LVU766
 491:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2262              		.loc 1 491 13 is_stmt 0 view .LVU767
 2263 077c 2B48     		ldr	r0, .L160
 2264              	.LVL290:
 491:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2265              		.loc 1 491 13 view .LVU768
 2266 077e 0721     		movs	r1, #7
 2267              	.LVL291:
 490:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF
 2268              		.loc 1 490 5 view .LVU769
 2269 0780 24B9     		cbnz	r4, .L127
 491:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2270              		.loc 1 491 4 is_stmt 1 view .LVU770
 2271              	.LBB230:
 2272              	.LBI230:
  48:boards/TMC2590_eval.c **** {
 2273              		.loc 1 48 31 view .LVU771
 2274              	.LVL292:
  48:boards/TMC2590_eval.c **** {
 2275              		.loc 1 48 31 is_stmt 0 view .LVU772
 2276              	.LBE230:
  50:boards/TMC2590_eval.c **** 
 2277              		.loc 1 50 2 is_stmt 1 view .LVU773
  52:boards/TMC2590_eval.c **** }
 2278              		.loc 1 52 2 view .LVU774
 491:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2279              		.loc 1 491 13 is_stmt 0 view .LVU775
 2280 0782 FFF7FEFF 		bl	tmc2590_readInt
 2281              	.LVL293:
 2282 0786 C0F3C010 		ubfx	r0, r0, #7, #1
 2283 078a AAE5     		b	.L145
 2284              	.LVL294:
 2285              	.L127:
 492:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF_SHIFT,
 2286              		.loc 1 492 10 is_stmt 1 view .LVU776
 493:boards/TMC2590_eval.c **** 		}
 2287              		.loc 1 493 4 view .LVU777
 2288              	.LBB231:
 2289              	.LBI231:
  48:boards/TMC2590_eval.c **** {
 2290              		.loc 1 48 31 view .LVU778
  48:boards/TMC2590_eval.c **** {
 2291              		.loc 1 48 31 is_stmt 0 view .LVU779
 2292              	.LBE231:
  50:boards/TMC2590_eval.c **** 
 2293              		.loc 1 50 2 is_stmt 1 view .LVU780
  52:boards/TMC2590_eval.c **** }
 2294              		.loc 1 52 2 view .LVU781
 2295              	.LBB232:
 2296              	.LBI232:
  48:boards/TMC2590_eval.c **** {
 2297              		.loc 1 48 31 view .LVU782
  48:boards/TMC2590_eval.c **** {
 2298              		.loc 1 48 31 is_stmt 0 view .LVU783
 2299              	.LBE232:
  50:boards/TMC2590_eval.c **** 
 2300              		.loc 1 50 2 is_stmt 1 view .LVU784
  52:boards/TMC2590_eval.c **** }
 2301              		.loc 1 52 2 view .LVU785
 493:boards/TMC2590_eval.c **** 		}
 2302              		.loc 1 493 4 is_stmt 0 view .LVU786
 2303 078c FFF7FEFF 		bl	tmc2590_readInt
 2304              	.LVL295:
 2305 0790 2B68     		ldr	r3, [r5]
 2306 0792 DB01     		lsls	r3, r3, #7
 2307 0794 DBB2     		uxtb	r3, r3
 2308 0796 20F08002 		bic	r2, r0, #128
 2309 079a 8EE7     		b	.L153
 2310              	.LVL296:
 2311              	.L40:
 498:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDT
 2312              		.loc 1 498 3 is_stmt 1 view .LVU787
 499:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2313              		.loc 1 499 13 is_stmt 0 view .LVU788
 2314 079c 2348     		ldr	r0, .L160
 2315              	.LVL297:
 499:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2316              		.loc 1 499 13 view .LVU789
 2317 079e 0421     		movs	r1, #4
 2318              	.LVL298:
 498:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDT
 2319              		.loc 1 498 5 view .LVU790
 2320 07a0 24B9     		cbnz	r4, .L128
 499:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2321              		.loc 1 499 4 is_stmt 1 view .LVU791
 2322              	.LBB233:
 2323              	.LBI233:
  48:boards/TMC2590_eval.c **** {
 2324              		.loc 1 48 31 view .LVU792
 2325              	.LVL299:
  48:boards/TMC2590_eval.c **** {
 2326              		.loc 1 48 31 is_stmt 0 view .LVU793
 2327              	.LBE233:
  50:boards/TMC2590_eval.c **** 
 2328              		.loc 1 50 2 is_stmt 1 view .LVU794
  52:boards/TMC2590_eval.c **** }
 2329              		.loc 1 52 2 view .LVU795
 499:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2330              		.loc 1 499 13 is_stmt 0 view .LVU796
 2331 07a2 FFF7FEFF 		bl	tmc2590_readInt
 2332              	.LVL300:
 2333 07a6 C0F34030 		ubfx	r0, r0, #13, #1
 2334 07aa 9AE5     		b	.L145
 2335              	.LVL301:
 2336              	.L128:
 500:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT
 2337              		.loc 1 500 10 is_stmt 1 view .LVU797
 501:boards/TMC2590_eval.c **** 		}
 2338              		.loc 1 501 4 view .LVU798
 2339              	.LBB234:
 2340              	.LBI234:
  48:boards/TMC2590_eval.c **** {
 2341              		.loc 1 48 31 view .LVU799
  48:boards/TMC2590_eval.c **** {
 2342              		.loc 1 48 31 is_stmt 0 view .LVU800
 2343              	.LBE234:
  50:boards/TMC2590_eval.c **** 
 2344              		.loc 1 50 2 is_stmt 1 view .LVU801
  52:boards/TMC2590_eval.c **** }
 2345              		.loc 1 52 2 view .LVU802
 2346              	.LBB235:
 2347              	.LBI235:
  48:boards/TMC2590_eval.c **** {
 2348              		.loc 1 48 31 view .LVU803
  48:boards/TMC2590_eval.c **** {
 2349              		.loc 1 48 31 is_stmt 0 view .LVU804
 2350              	.LBE235:
  50:boards/TMC2590_eval.c **** 
 2351              		.loc 1 50 2 is_stmt 1 view .LVU805
  52:boards/TMC2590_eval.c **** }
 2352              		.loc 1 52 2 view .LVU806
 501:boards/TMC2590_eval.c **** 		}
 2353              		.loc 1 501 4 is_stmt 0 view .LVU807
 2354 07ac FFF7FEFF 		bl	tmc2590_readInt
 2355              	.LVL302:
 2356 07b0 2B68     		ldr	r3, [r5]
 2357 07b2 5B03     		lsls	r3, r3, #13
 2358 07b4 03F40053 		and	r3, r3, #8192
 2359 07b8 20F40052 		bic	r2, r0, #8192
 2360 07bc 91E6     		b	.L154
 2361              	.LVL303:
 2362              	.L39:
 506:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHI
 2363              		.loc 1 506 3 is_stmt 1 view .LVU808
 507:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2364              		.loc 1 507 13 is_stmt 0 view .LVU809
 2365 07be 1B48     		ldr	r0, .L160
 2366              	.LVL304:
 507:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2367              		.loc 1 507 13 view .LVU810
 2368 07c0 0721     		movs	r1, #7
 2369              	.LVL305:
 506:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHI
 2370              		.loc 1 506 5 view .LVU811
 2371 07c2 002C     		cmp	r4, #0
 2372 07c4 3FF442AF 		beq	.L151
 508:boards/TMC2590_eval.c **** 			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT, *va
 2373              		.loc 1 508 10 is_stmt 1 view .LVU812
 509:boards/TMC2590_eval.c **** 		}
 2374              		.loc 1 509 4 view .LVU813
 2375              	.LBB236:
 2376              	.LBI236:
  48:boards/TMC2590_eval.c **** {
 2377              		.loc 1 48 31 view .LVU814
 2378              	.LVL306:
  48:boards/TMC2590_eval.c **** {
 2379              		.loc 1 48 31 is_stmt 0 view .LVU815
 2380              	.LBE236:
  50:boards/TMC2590_eval.c **** 
 2381              		.loc 1 50 2 is_stmt 1 view .LVU816
  52:boards/TMC2590_eval.c **** }
 2382              		.loc 1 52 2 view .LVU817
 2383              	.LBB237:
 2384              	.LBI237:
  48:boards/TMC2590_eval.c **** {
 2385              		.loc 1 48 31 view .LVU818
  48:boards/TMC2590_eval.c **** {
 2386              		.loc 1 48 31 is_stmt 0 view .LVU819
 2387              	.LBE237:
  50:boards/TMC2590_eval.c **** 
 2388              		.loc 1 50 2 is_stmt 1 view .LVU820
  52:boards/TMC2590_eval.c **** }
 2389              		.loc 1 52 2 view .LVU821
 509:boards/TMC2590_eval.c **** 		}
 2390              		.loc 1 509 4 is_stmt 0 view .LVU822
 2391 07c8 FFF7FEFF 		bl	tmc2590_readInt
 2392              	.LVL307:
 2393 07cc 2B68     		ldr	r3, [r5]
 2394 07ce 1B04     		lsls	r3, r3, #16
 2395 07d0 03F48033 		and	r3, r3, #65536
 2396 07d4 20F48032 		bic	r2, r0, #65536
 2397 07d8 6FE7     		b	.L153
 2398              	.LVL308:
 2399              	.L38:
 514:boards/TMC2590_eval.c **** 			*value = (compatibilityMode) ?
 2400              		.loc 1 514 3 is_stmt 1 view .LVU823
 514:boards/TMC2590_eval.c **** 			*value = (compatibilityMode) ?
 2401              		.loc 1 514 5 is_stmt 0 view .LVU824
 2402 07da 0028     		cmp	r0, #0
 2403 07dc 7FF49DAC 		bne	.L142
 515:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<
 2404              		.loc 1 515 4 is_stmt 1 view .LVU825
 515:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<
 2405              		.loc 1 515 33 is_stmt 0 view .LVU826
 2406 07e0 134B     		ldr	r3, .L160+4
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2407              		.loc 1 516 102 view .LVU827
 2408 07e2 1B68     		ldr	r3, [r3]
 2409 07e4 43B1     		cbz	r3, .L130
 2410              	.LBB238:
 2411              	.LBI238:
  48:boards/TMC2590_eval.c **** {
 2412              		.loc 1 48 31 is_stmt 1 view .LVU828
 2413              	.LVL309:
  48:boards/TMC2590_eval.c **** {
 2414              		.loc 1 48 31 is_stmt 0 view .LVU829
 2415              	.LBE238:
  50:boards/TMC2590_eval.c **** 
 2416              		.loc 1 50 2 is_stmt 1 view .LVU830
  52:boards/TMC2590_eval.c **** }
 2417              		.loc 1 52 2 view .LVU831
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2418              		.loc 1 516 6 is_stmt 0 view .LVU832
 2419 07e6 1148     		ldr	r0, .L160
 2420              	.LVL310:
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2421              		.loc 1 516 6 view .LVU833
 2422 07e8 0221     		movs	r1, #2
 2423              	.LVL311:
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2424              		.loc 1 516 6 view .LVU834
 2425 07ea FFF7FEFF 		bl	tmc2590_readInt
 2426              	.LVL312:
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2427              		.loc 1 516 98 view .LVU835
 2428 07ee 800A     		lsrs	r0, r0, #10
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2429              		.loc 1 516 102 view .LVU836
 2430 07f0 00F47870 		and	r0, r0, #992
 2431              	.LVL313:
 2432              	.L131:
 515:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<
 2433              		.loc 1 515 11 view .LVU837
 2434 07f4 2860     		str	r0, [r5]
 2435 07f6 7BE5     		b	.L146
 2436              	.LVL314:
 2437              	.L130:
 2438              	.LBB239:
 2439              	.LBI239:
  48:boards/TMC2590_eval.c **** {
 2440              		.loc 1 48 31 is_stmt 1 view .LVU838
  48:boards/TMC2590_eval.c **** {
 2441              		.loc 1 48 31 is_stmt 0 view .LVU839
 2442              	.LBE239:
  50:boards/TMC2590_eval.c **** 
 2443              		.loc 1 50 2 is_stmt 1 view .LVU840
  52:boards/TMC2590_eval.c **** }
 2444              		.loc 1 52 2 view .LVU841
 517:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2445              		.loc 1 517 6 is_stmt 0 view .LVU842
 2446 07f8 0C48     		ldr	r0, .L160
 2447              	.LVL315:
 517:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2448              		.loc 1 517 6 view .LVU843
 2449 07fa 0121     		movs	r1, #1
 2450              	.LVL316:
 517:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2451              		.loc 1 517 6 view .LVU844
 2452 07fc FFF7FEFF 		bl	tmc2590_readInt
 2453              	.LVL317:
 516:boards/TMC2590_eval.c **** 					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
 2454              		.loc 1 516 102 view .LVU845
 2455 0800 C0F38920 		ubfx	r0, r0, #10, #10
 2456 0804 F6E7     		b	.L131
 2457              	.LVL318:
 2458              	.L37:
 524:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE_LATEST, TMC2590_STATUS_MASK, TMC2
 2459              		.loc 1 524 3 is_stmt 1 view .LVU846
 524:boards/TMC2590_eval.c **** 			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE_LATEST, TMC2590_STATUS_MASK, TMC2
 2460              		.loc 1 524 5 is_stmt 0 view .LVU847
 2461 0806 0028     		cmp	r0, #0
 2462 0808 7FF487AC 		bne	.L142
 525:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2463              		.loc 1 525 4 is_stmt 1 view .LVU848
 2464              	.LBB240:
 2465              	.LBI240:
  48:boards/TMC2590_eval.c **** {
 2466              		.loc 1 48 31 view .LVU849
 2467              	.LVL319:
  48:boards/TMC2590_eval.c **** {
 2468              		.loc 1 48 31 is_stmt 0 view .LVU850
 2469              	.LBE240:
  50:boards/TMC2590_eval.c **** 
 2470              		.loc 1 50 2 is_stmt 1 view .LVU851
  52:boards/TMC2590_eval.c **** }
 2471              		.loc 1 52 2 view .LVU852
 525:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2472              		.loc 1 525 13 is_stmt 0 view .LVU853
 2473 080c 0748     		ldr	r0, .L160
 2474              	.LVL320:
 525:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2475              		.loc 1 525 13 view .LVU854
 2476 080e 0321     		movs	r1, #3
 2477              	.LVL321:
 525:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2478              		.loc 1 525 13 view .LVU855
 2479 0810 FFF7FEFF 		bl	tmc2590_readInt
 2480              	.LVL322:
 2481 0814 C0B2     		uxtb	r0, r0
 2482 0816 64E5     		b	.L145
 2483              	.LVL323:
 2484              	.L35:
 532:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillTimeout;
 2485              		.loc 1 532 3 is_stmt 1 view .LVU856
 2486 0818 044B     		ldr	r3, .L160
 532:boards/TMC2590_eval.c **** 			*value = TMC2590.standStillTimeout;
 2487              		.loc 1 532 5 is_stmt 0 view .LVU857
 2488 081a 08B9     		cbnz	r0, .L132
 533:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2489              		.loc 1 533 4 is_stmt 1 view .LVU858
 533:boards/TMC2590_eval.c **** 		} else if(readWrite == WRITE) {
 2490              		.loc 1 533 11 is_stmt 0 view .LVU859
 2491 081c 1B69     		ldr	r3, [r3, #16]
 2492 081e 99E5     		b	.L148
 2493              	.L132:
 534:boards/TMC2590_eval.c **** 			TMC2590.standStillTimeout = *value;
 2494              		.loc 1 534 10 is_stmt 1 view .LVU860
 535:boards/TMC2590_eval.c **** 		}
 2495              		.loc 1 535 4 view .LVU861
 535:boards/TMC2590_eval.c **** 		}
 2496              		.loc 1 535 30 is_stmt 0 view .LVU862
 2497 0820 2A68     		ldr	r2, [r5]
 2498 0822 1A61     		str	r2, [r3, #16]
 2499 0824 64E5     		b	.L146
 2500              	.LVL324:
 2501              	.L133:
 168:boards/TMC2590_eval.c **** 
 2502              		.loc 1 168 10 view .LVU863
 2503 0826 0824     		movs	r4, #8
 2504 0828 5CE5     		b	.L30
 2505              	.L161:
 2506 082a 00BF     		.align	2
 2507              	.L160:
 2508 082c 00000000 		.word	.LANCHOR0
 2509 0830 00000000 		.word	.LANCHOR1
 2510              		.cfi_endproc
 2511              	.LFE11:
 2513              		.align	1
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
 2517              		.fpu softvfp
 2519              	SAP:
 2520              	.LVL325:
 2521              	.LFB12:
 546:boards/TMC2590_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2522              		.loc 1 546 1 is_stmt 1 view -0
 2523              		.cfi_startproc
 2524              		@ args = 0, pretend = 0, frame = 8
 2525              		@ frame_needed = 0, uses_anonymous_args = 0
 547:boards/TMC2590_eval.c **** }
 2526              		.loc 1 547 2 view .LVU865
 546:boards/TMC2590_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2527              		.loc 1 546 1 is_stmt 0 view .LVU866
 2528 0834 07B5     		push	{r0, r1, r2, lr}
 2529              	.LCFI6:
 2530              		.cfi_def_cfa_offset 16
 2531              		.cfi_offset 14, -4
 546:boards/TMC2590_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 2532              		.loc 1 546 1 view .LVU867
 2533 0836 0192     		str	r2, [sp, #4]
 547:boards/TMC2590_eval.c **** }
 2534              		.loc 1 547 9 view .LVU868
 2535 0838 01AB     		add	r3, sp, #4
 2536 083a 0246     		mov	r2, r0
 2537              	.LVL326:
 547:boards/TMC2590_eval.c **** }
 2538              		.loc 1 547 9 view .LVU869
 2539 083c 0120     		movs	r0, #1
 2540              	.LVL327:
 547:boards/TMC2590_eval.c **** }
 2541              		.loc 1 547 9 view .LVU870
 2542 083e FFF758FC 		bl	handleParameter
 2543              	.LVL328:
 548:boards/TMC2590_eval.c **** 
 2544              		.loc 1 548 1 view .LVU871
 2545 0842 03B0     		add	sp, sp, #12
 2546              	.LCFI7:
 2547              		.cfi_def_cfa_offset 4
 2548              		@ sp needed
 2549 0844 5DF804FB 		ldr	pc, [sp], #4
 2550              		.cfi_endproc
 2551              	.LFE12:
 2553              		.align	1
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
 2557              		.fpu softvfp
 2559              	GAP:
 2560              	.LVL329:
 2561              	.LFB13:
 551:boards/TMC2590_eval.c **** 	return handleParameter(READ, motor, type, value);
 2562              		.loc 1 551 1 is_stmt 1 view -0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 0
 2565              		@ frame_needed = 0, uses_anonymous_args = 0
 2566              		@ link register save eliminated.
 552:boards/TMC2590_eval.c **** }
 2567              		.loc 1 552 2 view .LVU873
 551:boards/TMC2590_eval.c **** 	return handleParameter(READ, motor, type, value);
 2568              		.loc 1 551 1 is_stmt 0 view .LVU874
 2569 0848 1346     		mov	r3, r2
 552:boards/TMC2590_eval.c **** }
 2570              		.loc 1 552 9 view .LVU875
 2571 084a 0246     		mov	r2, r0
 2572              	.LVL330:
 552:boards/TMC2590_eval.c **** }
 2573              		.loc 1 552 9 view .LVU876
 2574 084c 0020     		movs	r0, #0
 2575              	.LVL331:
 552:boards/TMC2590_eval.c **** }
 2576              		.loc 1 552 9 view .LVU877
 2577 084e 50E4     		b	handleParameter
 2578              	.LVL332:
 552:boards/TMC2590_eval.c **** }
 2579              		.loc 1 552 9 view .LVU878
 2580              		.cfi_endproc
 2581              	.LFE13:
 2583              		.align	1
 2584              		.syntax unified
 2585              		.thumb
 2586              		.thumb_func
 2587              		.fpu softvfp
 2589              	restore:
 2590              	.LFB23:
 652:boards/TMC2590_eval.c **** 
 653:boards/TMC2590_eval.c **** static uint8_t reset()
 654:boards/TMC2590_eval.c **** {
 655:boards/TMC2590_eval.c **** 	if(StepDir_getActualVelocity(0) != 0)
 656:boards/TMC2590_eval.c **** 		return 0;
 657:boards/TMC2590_eval.c **** 
 658:boards/TMC2590_eval.c **** 	tmc2590_reset(&TMC2590);
 659:boards/TMC2590_eval.c **** 	compatibilityMode = 1;
 660:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 661:boards/TMC2590_eval.c **** 
 662:boards/TMC2590_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 663:boards/TMC2590_eval.c **** 	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
 664:boards/TMC2590_eval.c **** 
 665:boards/TMC2590_eval.c **** 	return 1;
 666:boards/TMC2590_eval.c **** }
 667:boards/TMC2590_eval.c **** 
 668:boards/TMC2590_eval.c **** static uint8_t restore()
 669:boards/TMC2590_eval.c **** {
 2591              		.loc 1 669 1 is_stmt 1 view -0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 0
 2594              		@ frame_needed = 0, uses_anonymous_args = 0
 2595              		@ link register save eliminated.
 670:boards/TMC2590_eval.c **** 	return tmc2590_restore(&TMC2590);
 2596              		.loc 1 670 2 view .LVU880
 2597              		.loc 1 670 9 is_stmt 0 view .LVU881
 2598 0850 0148     		ldr	r0, .L165
 2599 0852 FFF7FEBF 		b	tmc2590_restore
 2600              	.LVL333:
 2601              	.L166:
 2602 0856 00BF     		.align	2
 2603              	.L165:
 2604 0858 00000000 		.word	.LANCHOR0
 2605              		.cfi_endproc
 2606              	.LFE23:
 2608              		.align	1
 2609              		.syntax unified
 2610              		.thumb
 2611              		.thumb_func
 2612              		.fpu softvfp
 2614              	enableDriver:
 2615              	.LVL334:
 2616              	.LFB24:
 671:boards/TMC2590_eval.c **** }
 672:boards/TMC2590_eval.c **** 
 673:boards/TMC2590_eval.c **** static void enableDriver(DriverState state)
 674:boards/TMC2590_eval.c **** {
 2617              		.loc 1 674 1 is_stmt 1 view -0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 675:boards/TMC2590_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 2622              		.loc 1 675 2 view .LVU883
 2623              		.loc 1 675 4 is_stmt 0 view .LVU884
 2624 085c 0228     		cmp	r0, #2
 676:boards/TMC2590_eval.c **** 		state = Evalboards.driverEnable;
 2625              		.loc 1 676 3 is_stmt 1 view .LVU885
 2626              		.loc 1 676 9 is_stmt 0 view .LVU886
 2627 085e 04BF     		itt	eq
 2628 0860 0B4B     		ldreq	r3, .L172
 2629 0862 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 2630              	.LVL335:
 677:boards/TMC2590_eval.c **** 
 678:boards/TMC2590_eval.c **** 	if(state == DRIVER_DISABLE)
 2631              		.loc 1 678 2 is_stmt 1 view .LVU887
 2632              		.loc 1 678 4 is_stmt 0 view .LVU888
 2633 0866 30B9     		cbnz	r0, .L169
 679:boards/TMC2590_eval.c **** 		HAL.IOs->config->setHigh(Pins.ENN);
 2634              		.loc 1 679 3 is_stmt 1 view .LVU889
 2635              		.loc 1 679 6 is_stmt 0 view .LVU890
 2636 0868 0A4B     		ldr	r3, .L172+4
 2637              		.loc 1 679 10 view .LVU891
 2638 086a DB68     		ldr	r3, [r3, #12]
 2639              		.loc 1 679 18 view .LVU892
 2640 086c 1B68     		ldr	r3, [r3]
 2641              		.loc 1 679 3 view .LVU893
 2642 086e 5B69     		ldr	r3, [r3, #20]
 2643              	.L171:
 2644              	.LBB243:
 2645              	.LBB244:
 680:boards/TMC2590_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 681:boards/TMC2590_eval.c **** 		HAL.IOs->config->setLow(Pins.ENN);
 2646              		.loc 1 681 3 view .LVU894
 2647 0870 094A     		ldr	r2, .L172+8
 2648 0872 106D     		ldr	r0, [r2, #80]
 2649 0874 1847     		bx	r3	@ indirect register sibling call
 2650              	.LVL336:
 2651              	.L169:
 2652              		.loc 1 681 3 view .LVU895
 2653              	.LBE244:
 2654              	.LBE243:
 680:boards/TMC2590_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2655              		.loc 1 680 7 is_stmt 1 view .LVU896
 680:boards/TMC2590_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2656              		.loc 1 680 9 is_stmt 0 view .LVU897
 2657 0876 0128     		cmp	r0, #1
 2658 0878 09D1     		bne	.L167
 680:boards/TMC2590_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2659              		.loc 1 680 49 discriminator 1 view .LVU898
 2660 087a 054B     		ldr	r3, .L172
 680:boards/TMC2590_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 2661              		.loc 1 680 35 discriminator 1 view .LVU899
 2662 087c 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 2663 0880 012B     		cmp	r3, #1
 2664 0882 04D1     		bne	.L167
 2665              	.LBB246:
 2666              	.LBI243:
 673:boards/TMC2590_eval.c **** {
 2667              		.loc 1 673 13 is_stmt 1 view .LVU900
 2668              	.LVL337:
 2669              	.LBB245:
 2670              		.loc 1 681 3 view .LVU901
 2671              		.loc 1 681 6 is_stmt 0 view .LVU902
 2672 0884 034B     		ldr	r3, .L172+4
 2673              		.loc 1 681 10 view .LVU903
 2674 0886 DB68     		ldr	r3, [r3, #12]
 2675              		.loc 1 681 18 view .LVU904
 2676 0888 1B68     		ldr	r3, [r3]
 2677              		.loc 1 681 3 view .LVU905
 2678 088a 9B69     		ldr	r3, [r3, #24]
 2679 088c F0E7     		b	.L171
 2680              	.LVL338:
 2681              	.L167:
 2682              		.loc 1 681 3 view .LVU906
 2683              	.LBE245:
 2684              	.LBE246:
 682:boards/TMC2590_eval.c **** }
 2685              		.loc 1 682 1 view .LVU907
 2686 088e 7047     		bx	lr
 2687              	.L173:
 2688              		.align	2
 2689              	.L172:
 2690 0890 00000000 		.word	Evalboards
 2691 0894 00000000 		.word	HAL
 2692 0898 00000000 		.word	.LANCHOR0
 2693              		.cfi_endproc
 2694              	.LFE24:
 2696              		.align	1
 2697              		.syntax unified
 2698              		.thumb
 2699              		.thumb_func
 2700              		.fpu softvfp
 2702              	deInit:
 2703              	.LFB20:
 622:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_DISABLE);
 2704              		.loc 1 622 1 is_stmt 1 view -0
 2705              		.cfi_startproc
 2706              		@ args = 0, pretend = 0, frame = 0
 2707              		@ frame_needed = 0, uses_anonymous_args = 0
 623:boards/TMC2590_eval.c **** 
 2708              		.loc 1 623 2 view .LVU909
 622:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_DISABLE);
 2709              		.loc 1 622 1 is_stmt 0 view .LVU910
 2710 089c 38B5     		push	{r3, r4, r5, lr}
 2711              	.LCFI8:
 2712              		.cfi_def_cfa_offset 16
 2713              		.cfi_offset 3, -16
 2714              		.cfi_offset 4, -12
 2715              		.cfi_offset 5, -8
 2716              		.cfi_offset 14, -4
 623:boards/TMC2590_eval.c **** 
 2717              		.loc 1 623 2 view .LVU911
 2718 089e 0020     		movs	r0, #0
 2719 08a0 FFF7DCFF 		bl	enableDriver
 2720              	.LVL339:
 625:boards/TMC2590_eval.c **** 
 2721              		.loc 1 625 2 is_stmt 1 view .LVU912
 625:boards/TMC2590_eval.c **** 
 2722              		.loc 1 625 5 is_stmt 0 view .LVU913
 2723 08a4 0F4B     		ldr	r3, .L175
 625:boards/TMC2590_eval.c **** 
 2724              		.loc 1 625 2 view .LVU914
 2725 08a6 104C     		ldr	r4, .L175+4
 625:boards/TMC2590_eval.c **** 
 2726              		.loc 1 625 5 view .LVU915
 2727 08a8 DD68     		ldr	r5, [r3, #12]
 625:boards/TMC2590_eval.c **** 
 2728              		.loc 1 625 2 view .LVU916
 2729 08aa 206D     		ldr	r0, [r4, #80]
 625:boards/TMC2590_eval.c **** 
 2730              		.loc 1 625 17 view .LVU917
 2731 08ac 2B68     		ldr	r3, [r5]
 625:boards/TMC2590_eval.c **** 
 2732              		.loc 1 625 2 view .LVU918
 2733 08ae 5B69     		ldr	r3, [r3, #20]
 2734 08b0 9847     		blx	r3
 2735              	.LVL340:
 627:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.DIR);
 2736              		.loc 1 627 2 is_stmt 1 view .LVU919
 627:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.DIR);
 2737              		.loc 1 627 17 is_stmt 0 view .LVU920
 2738 08b2 2B68     		ldr	r3, [r5]
 627:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.DIR);
 2739              		.loc 1 627 2 view .LVU921
 2740 08b4 606C     		ldr	r0, [r4, #68]
 2741 08b6 9B68     		ldr	r3, [r3, #8]
 2742 08b8 9847     		blx	r3
 2743              	.LVL341:
 628:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.ENN);
 2744              		.loc 1 628 2 is_stmt 1 view .LVU922
 628:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.ENN);
 2745              		.loc 1 628 17 is_stmt 0 view .LVU923
 2746 08ba 2B68     		ldr	r3, [r5]
 628:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.ENN);
 2747              		.loc 1 628 2 view .LVU924
 2748 08bc E06C     		ldr	r0, [r4, #76]
 2749 08be 9B68     		ldr	r3, [r3, #8]
 2750 08c0 9847     		blx	r3
 2751              	.LVL342:
 629:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.SG_TST);
 2752              		.loc 1 629 2 is_stmt 1 view .LVU925
 629:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.SG_TST);
 2753              		.loc 1 629 17 is_stmt 0 view .LVU926
 2754 08c2 2B68     		ldr	r3, [r5]
 629:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.SG_TST);
 2755              		.loc 1 629 2 view .LVU927
 2756 08c4 206D     		ldr	r0, [r4, #80]
 2757 08c6 9B68     		ldr	r3, [r3, #8]
 2758 08c8 9847     		blx	r3
 2759              	.LVL343:
 630:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.STEP);
 2760              		.loc 1 630 2 is_stmt 1 view .LVU928
 630:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.STEP);
 2761              		.loc 1 630 17 is_stmt 0 view .LVU929
 2762 08ca 2B68     		ldr	r3, [r5]
 630:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.STEP);
 2763              		.loc 1 630 2 view .LVU930
 2764 08cc 606D     		ldr	r0, [r4, #84]
 2765 08ce 9B68     		ldr	r3, [r3, #8]
 2766 08d0 9847     		blx	r3
 2767              	.LVL344:
 631:boards/TMC2590_eval.c **** 
 2768              		.loc 1 631 2 is_stmt 1 view .LVU931
 631:boards/TMC2590_eval.c **** 
 2769              		.loc 1 631 17 is_stmt 0 view .LVU932
 2770 08d2 2B68     		ldr	r3, [r5]
 631:boards/TMC2590_eval.c **** 
 2771              		.loc 1 631 2 view .LVU933
 2772 08d4 A06C     		ldr	r0, [r4, #72]
 2773 08d6 9B68     		ldr	r3, [r3, #8]
 2774 08d8 9847     		blx	r3
 2775              	.LVL345:
 633:boards/TMC2590_eval.c **** }
 2776              		.loc 1 633 2 is_stmt 1 view .LVU934
 634:boards/TMC2590_eval.c **** 
 2777              		.loc 1 634 1 is_stmt 0 view .LVU935
 2778 08da BDE83840 		pop	{r3, r4, r5, lr}
 2779              	.LCFI9:
 2780              		.cfi_restore 14
 2781              		.cfi_restore 5
 2782              		.cfi_restore 4
 2783              		.cfi_restore 3
 2784              		.cfi_def_cfa_offset 0
 633:boards/TMC2590_eval.c **** }
 2785              		.loc 1 633 2 view .LVU936
 2786 08de FFF7FEBF 		b	StepDir_deInit
 2787              	.LVL346:
 2788              	.L176:
 2789 08e2 00BF     		.align	2
 2790              	.L175:
 2791 08e4 00000000 		.word	HAL
 2792 08e8 00000000 		.word	.LANCHOR0
 2793              		.cfi_endproc
 2794              	.LFE20:
 2796              		.align	1
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu softvfp
 2802              	getMax:
 2803              	.LVL347:
 2804              	.LFB16:
 590:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2805              		.loc 1 590 1 is_stmt 1 view -0
 2806              		.cfi_startproc
 2807              		@ args = 0, pretend = 0, frame = 0
 2808              		@ frame_needed = 0, uses_anonymous_args = 0
 591:boards/TMC2590_eval.c **** }
 2809              		.loc 1 591 2 view .LVU938
 590:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2810              		.loc 1 590 1 is_stmt 0 view .LVU939
 2811 08ec 0346     		mov	r3, r0
 2812              	.LBB251:
 2813              	.LBB252:
 559:boards/TMC2590_eval.c **** 	case 2:
 2814              		.loc 1 559 2 view .LVU940
 2815 08ee 052B     		cmp	r3, #5
 2816              	.LBE252:
 2817              	.LBE251:
 590:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2818              		.loc 1 590 1 view .LVU941
 2819 08f0 10B5     		push	{r4, lr}
 2820              	.LCFI10:
 2821              		.cfi_def_cfa_offset 8
 2822              		.cfi_offset 4, -8
 2823              		.cfi_offset 14, -4
 590:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2824              		.loc 1 590 1 view .LVU942
 2825 08f2 0846     		mov	r0, r1
 2826              	.LVL348:
 590:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 2827              		.loc 1 590 1 view .LVU943
 2828 08f4 1446     		mov	r4, r2
 2829              	.LVL349:
 2830              	.LBB258:
 2831              	.LBI251:
 555:boards/TMC2590_eval.c **** {
 2832              		.loc 1 555 17 is_stmt 1 view .LVU944
 2833              	.LBB255:
 557:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 2834              		.loc 1 557 2 view .LVU945
 558:boards/TMC2590_eval.c **** 	switch(type) {
 2835              		.loc 1 558 2 view .LVU946
 559:boards/TMC2590_eval.c **** 	case 2:
 2836              		.loc 1 559 2 view .LVU947
 2837 08f6 0CD0     		beq	.L178
 2838 08f8 07D8     		bhi	.L179
 2839 08fa 023B     		subs	r3, r3, #2
 2840              	.LVL350:
 559:boards/TMC2590_eval.c **** 	case 2:
 2841              		.loc 1 559 2 is_stmt 0 view .LVU948
 2842 08fc 022B     		cmp	r3, #2
 2843 08fe 06D8     		bhi	.L183
 2844              	.LVL351:
 2845              	.L181:
 564:boards/TMC2590_eval.c **** 			*value = 0; // TODO: Determine limits here
 2846              		.loc 1 564 3 is_stmt 1 view .LVU949
 2847              	.LBB253:
 2848              	.LBI253:
 555:boards/TMC2590_eval.c **** {
 2849              		.loc 1 555 17 view .LVU950
 2850              	.LBB254:
 566:boards/TMC2590_eval.c **** 			*value = StepDir_getFrequency(motor);
 2851              		.loc 1 566 10 view .LVU951
 567:boards/TMC2590_eval.c **** 		}
 2852              		.loc 1 567 4 view .LVU952
 567:boards/TMC2590_eval.c **** 		}
 2853              		.loc 1 567 13 is_stmt 0 view .LVU953
 2854 0900 FFF7FEFF 		bl	StepDir_getFrequency
 2855              	.LVL352:
 2856              	.L184:
 567:boards/TMC2590_eval.c **** 		}
 2857              		.loc 1 567 13 view .LVU954
 2858              	.LBE254:
 2859              	.LBE253:
 574:boards/TMC2590_eval.c **** 		}
 2860              		.loc 1 574 11 view .LVU955
 2861 0904 2060     		str	r0, [r4]
 558:boards/TMC2590_eval.c **** 	switch(type) {
 2862              		.loc 1 558 11 view .LVU956
 2863 0906 0020     		movs	r0, #0
 2864              	.LVL353:
 2865              	.L177:
 558:boards/TMC2590_eval.c **** 	switch(type) {
 2866              		.loc 1 558 11 view .LVU957
 2867              	.LBE255:
 2868              	.LBE258:
 592:boards/TMC2590_eval.c **** 
 2869              		.loc 1 592 1 view .LVU958
 2870 0908 10BD     		pop	{r4, pc}
 2871              	.LVL354:
 2872              	.L179:
 2873              	.LBB259:
 2874              	.LBB256:
 559:boards/TMC2590_eval.c **** 	case 2:
 2875              		.loc 1 559 2 view .LVU959
 2876 090a 182B     		cmp	r3, #24
 2877 090c F8D0     		beq	.L181
 2878              	.LVL355:
 2879              	.L183:
 559:boards/TMC2590_eval.c **** 	case 2:
 2880              		.loc 1 559 2 view .LVU960
 2881 090e 0420     		movs	r0, #4
 2882              	.LVL356:
 581:boards/TMC2590_eval.c **** }
 2883              		.loc 1 581 2 is_stmt 1 view .LVU961
 581:boards/TMC2590_eval.c **** }
 2884              		.loc 1 581 2 is_stmt 0 view .LVU962
 2885              	.LBE256:
 2886              	.LBE259:
 591:boards/TMC2590_eval.c **** }
 2887              		.loc 1 591 9 view .LVU963
 2888 0910 FAE7     		b	.L177
 2889              	.LVL357:
 2890              	.L178:
 2891              	.LBB260:
 2892              	.LBB257:
 571:boards/TMC2590_eval.c **** 			*value = 0; // TODO: Determine limits here
 2893              		.loc 1 571 3 is_stmt 1 view .LVU964
 573:boards/TMC2590_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 2894              		.loc 1 573 10 view .LVU965
 574:boards/TMC2590_eval.c **** 		}
 2895              		.loc 1 574 4 view .LVU966
 574:boards/TMC2590_eval.c **** 		}
 2896              		.loc 1 574 13 is_stmt 0 view .LVU967
 2897 0912 FFF7FEFF 		bl	StepDir_getMaxAcceleration
 2898              	.LVL358:
 574:boards/TMC2590_eval.c **** 		}
 2899              		.loc 1 574 13 view .LVU968
 2900 0916 F5E7     		b	.L184
 2901              	.LBE257:
 2902              	.LBE260:
 2903              		.cfi_endproc
 2904              	.LFE16:
 2906              		.align	1
 2907              		.syntax unified
 2908              		.thumb
 2909              		.thumb_func
 2910              		.fpu softvfp
 2912              	getMeasuredSpeed:
 2913              	.LVL359:
 2914              	.LFB19:
 605:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 2915              		.loc 1 605 1 is_stmt 1 view -0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 0
 2918              		@ frame_needed = 0, uses_anonymous_args = 0
 606:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 2919              		.loc 1 606 2 view .LVU970
 605:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 2920              		.loc 1 605 1 is_stmt 0 view .LVU971
 2921 0918 38B5     		push	{r3, r4, r5, lr}
 2922              	.LCFI11:
 2923              		.cfi_def_cfa_offset 16
 2924              		.cfi_offset 3, -16
 2925              		.cfi_offset 4, -12
 2926              		.cfi_offset 5, -8
 2927              		.cfi_offset 14, -4
 605:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 2928              		.loc 1 605 1 view .LVU972
 2929 091a 0D46     		mov	r5, r1
 606:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 2930              		.loc 1 606 4 view .LVU973
 2931 091c 0446     		mov	r4, r0
 2932 091e 20B9     		cbnz	r0, .L187
 2933              	.LVL360:
 2934              	.LBB263:
 2935              	.LBI263:
 604:boards/TMC2590_eval.c **** {
 2936              		.loc 1 604 17 is_stmt 1 view .LVU974
 2937              	.LBB264:
 609:boards/TMC2590_eval.c **** 	{
 2938              		.loc 1 609 2 view .LVU975
 612:boards/TMC2590_eval.c **** 		break;
 2939              		.loc 1 612 3 view .LVU976
 612:boards/TMC2590_eval.c **** 		break;
 2940              		.loc 1 612 12 is_stmt 0 view .LVU977
 2941 0920 FFF7FEFF 		bl	StepDir_getActualVelocity
 2942              	.LVL361:
 612:boards/TMC2590_eval.c **** 		break;
 2943              		.loc 1 612 10 view .LVU978
 2944 0924 2860     		str	r0, [r5]
 613:boards/TMC2590_eval.c **** 	default:
 2945              		.loc 1 613 3 is_stmt 1 view .LVU979
 616:boards/TMC2590_eval.c **** 	}
 2946              		.loc 1 616 3 view .LVU980
 618:boards/TMC2590_eval.c **** }
 2947              		.loc 1 618 2 view .LVU981
 2948              	.LVL362:
 612:boards/TMC2590_eval.c **** 		break;
 2949              		.loc 1 612 10 is_stmt 0 view .LVU982
 2950 0926 2046     		mov	r0, r4
 2951              	.L185:
 2952              	.LBE264:
 2953              	.LBE263:
 619:boards/TMC2590_eval.c **** 
 2954              		.loc 1 619 1 view .LVU983
 2955 0928 38BD     		pop	{r3, r4, r5, pc}
 2956              	.LVL363:
 2957              	.L187:
 607:boards/TMC2590_eval.c **** 
 2958              		.loc 1 607 10 view .LVU984
 2959 092a 0820     		movs	r0, #8
 2960              	.LVL364:
 607:boards/TMC2590_eval.c **** 
 2961              		.loc 1 607 10 view .LVU985
 2962 092c FCE7     		b	.L185
 2963              		.cfi_endproc
 2964              	.LFE19:
 2966              		.align	1
 2967              		.syntax unified
 2968              		.thumb
 2969              		.thumb_func
 2970              		.fpu softvfp
 2972              	reset:
 2973              	.LFB22:
 654:boards/TMC2590_eval.c **** 	if(StepDir_getActualVelocity(0) != 0)
 2974              		.loc 1 654 1 is_stmt 1 view -0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 0
 2977              		@ frame_needed = 0, uses_anonymous_args = 0
 655:boards/TMC2590_eval.c **** 		return 0;
 2978              		.loc 1 655 2 view .LVU987
 654:boards/TMC2590_eval.c **** 	if(StepDir_getActualVelocity(0) != 0)
 2979              		.loc 1 654 1 is_stmt 0 view .LVU988
 2980 092e 70B5     		push	{r4, r5, r6, lr}
 2981              	.LCFI12:
 2982              		.cfi_def_cfa_offset 16
 2983              		.cfi_offset 4, -16
 2984              		.cfi_offset 5, -12
 2985              		.cfi_offset 6, -8
 2986              		.cfi_offset 14, -4
 655:boards/TMC2590_eval.c **** 		return 0;
 2987              		.loc 1 655 5 view .LVU989
 2988 0930 0020     		movs	r0, #0
 2989 0932 FFF7FEFF 		bl	StepDir_getActualVelocity
 2990              	.LVL365:
 655:boards/TMC2590_eval.c **** 		return 0;
 2991              		.loc 1 655 4 view .LVU990
 2992 0936 0546     		mov	r5, r0
 2993 0938 A8B9     		cbnz	r0, .L190
 2994              	.LBB267:
 2995              	.LBI267:
 653:boards/TMC2590_eval.c **** {
 2996              		.loc 1 653 16 is_stmt 1 view .LVU991
 2997              	.LBB268:
 658:boards/TMC2590_eval.c **** 	compatibilityMode = 1;
 2998              		.loc 1 658 2 view .LVU992
 2999 093a 0C4E     		ldr	r6, .L191
 3000 093c 3046     		mov	r0, r6
 3001 093e FFF7FEFF 		bl	tmc2590_reset
 3002              	.LVL366:
 659:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 3003              		.loc 1 659 2 view .LVU993
 659:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 3004              		.loc 1 659 20 is_stmt 0 view .LVU994
 3005 0942 0B4B     		ldr	r3, .L191+4
 3006 0944 0124     		movs	r4, #1
 660:boards/TMC2590_eval.c **** 
 3007              		.loc 1 660 2 view .LVU995
 3008 0946 0220     		movs	r0, #2
 659:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 3009              		.loc 1 659 20 view .LVU996
 3010 0948 1C60     		str	r4, [r3]
 660:boards/TMC2590_eval.c **** 
 3011              		.loc 1 660 2 is_stmt 1 view .LVU997
 3012 094a FFF787FF 		bl	enableDriver
 3013              	.LVL367:
 662:boards/TMC2590_eval.c **** 	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
 3014              		.loc 1 662 2 view .LVU998
 3015 094e 4FF40030 		mov	r0, #131072
 3016 0952 FFF7FEFF 		bl	StepDir_init
 3017              	.LVL368:
 663:boards/TMC2590_eval.c **** 
 3018              		.loc 1 663 2 view .LVU999
 3019 0956 2846     		mov	r0, r5
 3020 0958 D6E91212 		ldrd	r1, r2, [r6, #72]
 3021 095c 736D     		ldr	r3, [r6, #84]
 3022 095e FFF7FEFF 		bl	StepDir_setPins
 3023              	.LVL369:
 665:boards/TMC2590_eval.c **** }
 3024              		.loc 1 665 2 view .LVU1000
 663:boards/TMC2590_eval.c **** 
 3025              		.loc 1 663 2 is_stmt 0 view .LVU1001
 3026 0962 2046     		mov	r0, r4
 3027              	.L189:
 3028              	.LBE268:
 3029              	.LBE267:
 666:boards/TMC2590_eval.c **** 
 3030              		.loc 1 666 1 view .LVU1002
 3031 0964 70BD     		pop	{r4, r5, r6, pc}
 3032              	.L190:
 656:boards/TMC2590_eval.c **** 
 3033              		.loc 1 656 10 view .LVU1003
 3034 0966 0020     		movs	r0, #0
 3035 0968 FCE7     		b	.L189
 3036              	.L192:
 3037 096a 00BF     		.align	2
 3038              	.L191:
 3039 096c 00000000 		.word	.LANCHOR0
 3040 0970 00000000 		.word	.LANCHOR1
 3041              		.cfi_endproc
 3042              	.LFE22:
 3044              		.align	1
 3045              		.syntax unified
 3046              		.thumb
 3047              		.thumb_func
 3048              		.fpu softvfp
 3050              	moveBy:
 3051              	.LVL370:
 3052              	.LFB10:
 153:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 3053              		.loc 1 153 1 is_stmt 1 view -0
 3054              		.cfi_startproc
 3055              		@ args = 0, pretend = 0, frame = 0
 3056              		@ frame_needed = 0, uses_anonymous_args = 0
 154:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 3057              		.loc 1 154 2 view .LVU1005
 153:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 3058              		.loc 1 153 1 is_stmt 0 view .LVU1006
 3059 0974 38B5     		push	{r3, r4, r5, lr}
 3060              	.LCFI13:
 3061              		.cfi_def_cfa_offset 16
 3062              		.cfi_offset 3, -16
 3063              		.cfi_offset 4, -12
 3064              		.cfi_offset 5, -8
 3065              		.cfi_offset 14, -4
 153:boards/TMC2590_eval.c **** 	if(motor >= MOTORS)
 3066              		.loc 1 153 1 view .LVU1007
 3067 0976 0D46     		mov	r5, r1
 154:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 3068              		.loc 1 154 4 view .LVU1008
 3069 0978 0446     		mov	r4, r0
 3070 097a 48B9     		cbnz	r0, .L195
 3071              	.LVL371:
 3072              	.LBB273:
 3073              	.LBI273:
 152:boards/TMC2590_eval.c **** {
 3074              		.loc 1 152 17 is_stmt 1 view .LVU1009
 3075              	.LBB274:
 158:boards/TMC2590_eval.c **** 
 3076              		.loc 1 158 2 view .LVU1010
 158:boards/TMC2590_eval.c **** 
 3077              		.loc 1 158 12 is_stmt 0 view .LVU1011
 3078 097c FFF7FEFF 		bl	StepDir_getActualPosition
 3079              	.LVL372:
 158:boards/TMC2590_eval.c **** 
 3080              		.loc 1 158 9 view .LVU1012
 3081 0980 2968     		ldr	r1, [r5]
 3082 0982 0144     		add	r1, r1, r0
 3083 0984 2960     		str	r1, [r5]
 160:boards/TMC2590_eval.c **** }
 3084              		.loc 1 160 2 is_stmt 1 view .LVU1013
 3085              	.LVL373:
 3086              	.LBB275:
 3087              	.LBI275:
 142:boards/TMC2590_eval.c **** {
 3088              		.loc 1 142 17 view .LVU1014
 3089              	.LBB276:
 144:boards/TMC2590_eval.c **** 		return TMC_ERROR_MOTOR;
 3090              		.loc 1 144 2 view .LVU1015
 147:boards/TMC2590_eval.c **** 
 3091              		.loc 1 147 2 view .LVU1016
 3092 0986 2046     		mov	r0, r4
 3093 0988 FFF7FEFF 		bl	StepDir_moveTo
 3094              	.LVL374:
 149:boards/TMC2590_eval.c **** }
 3095              		.loc 1 149 2 view .LVU1017
 147:boards/TMC2590_eval.c **** 
 3096              		.loc 1 147 2 is_stmt 0 view .LVU1018
 3097 098c 2046     		mov	r0, r4
 3098              	.L193:
 3099              	.LBE276:
 3100              	.LBE275:
 3101              	.LBE274:
 3102              	.LBE273:
 161:boards/TMC2590_eval.c **** 
 3103              		.loc 1 161 1 view .LVU1019
 3104 098e 38BD     		pop	{r3, r4, r5, pc}
 3105              	.LVL375:
 3106              	.L195:
 155:boards/TMC2590_eval.c **** 
 3107              		.loc 1 155 10 view .LVU1020
 3108 0990 0820     		movs	r0, #8
 3109              	.LVL376:
 155:boards/TMC2590_eval.c **** 
 3110              		.loc 1 155 10 view .LVU1021
 3111 0992 FCE7     		b	.L193
 3112              		.cfi_endproc
 3113              	.LFE10:
 3115              		.align	1
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3119              		.fpu softvfp
 3121              	getMin:
 3122              	.LVL377:
 3123              	.LFB15:
 585:boards/TMC2590_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 3124              		.loc 1 585 1 is_stmt 1 view -0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128              		@ link register save eliminated.
 586:boards/TMC2590_eval.c **** }
 3129              		.loc 1 586 2 view .LVU1023
 3130              	.LBB279:
 3131              	.LBI279:
 555:boards/TMC2590_eval.c **** {
 3132              		.loc 1 555 17 view .LVU1024
 3133              	.LBB280:
 557:boards/TMC2590_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 3134              		.loc 1 557 2 view .LVU1025
 558:boards/TMC2590_eval.c **** 	switch(type) {
 3135              		.loc 1 558 2 view .LVU1026
 559:boards/TMC2590_eval.c **** 	case 2:
 3136              		.loc 1 559 2 view .LVU1027
 3137 0994 0528     		cmp	r0, #5
 3138 0996 03D8     		bhi	.L197
 3139 0998 0128     		cmp	r0, #1
 3140 099a 03D8     		bhi	.L198
 3141              	.L200:
 3142 099c 0420     		movs	r0, #4
 3143              	.LVL378:
 581:boards/TMC2590_eval.c **** }
 3144              		.loc 1 581 2 view .LVU1028
 581:boards/TMC2590_eval.c **** }
 3145              		.loc 1 581 2 is_stmt 0 view .LVU1029
 3146              	.LBE280:
 3147              	.LBE279:
 587:boards/TMC2590_eval.c **** 
 3148              		.loc 1 587 1 view .LVU1030
 3149 099e 7047     		bx	lr
 3150              	.LVL379:
 3151              	.L197:
 3152              	.LBB282:
 3153              	.LBB281:
 559:boards/TMC2590_eval.c **** 	case 2:
 3154              		.loc 1 559 2 view .LVU1031
 3155 09a0 1828     		cmp	r0, #24
 3156 09a2 FBD1     		bne	.L200
 3157              	.L198:
 564:boards/TMC2590_eval.c **** 			*value = 0; // TODO: Determine limits here
 3158              		.loc 1 564 3 is_stmt 1 view .LVU1032
 565:boards/TMC2590_eval.c **** 		} else if(limit == LIMIT_MAX) {
 3159              		.loc 1 565 4 view .LVU1033
 565:boards/TMC2590_eval.c **** 		} else if(limit == LIMIT_MAX) {
 3160              		.loc 1 565 11 is_stmt 0 view .LVU1034
 3161 09a4 0020     		movs	r0, #0
 3162              	.LVL380:
 565:boards/TMC2590_eval.c **** 		} else if(limit == LIMIT_MAX) {
 3163              		.loc 1 565 11 view .LVU1035
 3164 09a6 1060     		str	r0, [r2]
 3165 09a8 7047     		bx	lr
 3166              	.LBE281:
 3167              	.LBE282:
 3168              		.cfi_endproc
 3169              	.LFE15:
 3171              		.align	1
 3172              		.global	tmc2590_readWriteArray
 3173              		.syntax unified
 3174              		.thumb
 3175              		.thumb_func
 3176              		.fpu softvfp
 3178              	tmc2590_readWriteArray:
 3179              	.LVL381:
 3180              	.LFB3:
  66:boards/TMC2590_eval.c **** 	if(Evalboards.ch1.fullCover != NULL) {
 3181              		.loc 1 66 1 is_stmt 1 view -0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 3185              		@ link register save eliminated.
  67:boards/TMC2590_eval.c **** 		UNUSED(channel);
 3186              		.loc 1 67 2 view .LVU1037
  67:boards/TMC2590_eval.c **** 		UNUSED(channel);
 3187              		.loc 1 67 19 is_stmt 0 view .LVU1038
 3188 09aa 054B     		ldr	r3, .L204
 3189 09ac DB6E     		ldr	r3, [r3, #108]
  66:boards/TMC2590_eval.c **** 	if(Evalboards.ch1.fullCover != NULL) {
 3190              		.loc 1 66 1 view .LVU1039
 3191 09ae 0846     		mov	r0, r1
 3192              	.LVL382:
  66:boards/TMC2590_eval.c **** 	if(Evalboards.ch1.fullCover != NULL) {
 3193              		.loc 1 66 1 view .LVU1040
 3194 09b0 1146     		mov	r1, r2
 3195              	.LVL383:
  67:boards/TMC2590_eval.c **** 		UNUSED(channel);
 3196              		.loc 1 67 4 view .LVU1041
 3197 09b2 03B1     		cbz	r3, .L202
 3198              	.L203:
  71:boards/TMC2590_eval.c **** 	}
 3199              		.loc 1 71 3 view .LVU1042
 3200 09b4 1847     		bx	r3	@ indirect register sibling call
 3201              	.LVL384:
 3202              	.L202:
  71:boards/TMC2590_eval.c **** 	}
 3203              		.loc 1 71 3 is_stmt 1 view .LVU1043
 3204              	.LBB283:
 3205              	.LBI283:
  57:boards/TMC2590_eval.c **** {
 3206              		.loc 1 57 34 view .LVU1044
 3207              	.LBB284:
  59:boards/TMC2590_eval.c **** 
 3208              		.loc 1 59 2 view .LVU1045
  61:boards/TMC2590_eval.c **** }
 3209              		.loc 1 61 2 view .LVU1046
  61:boards/TMC2590_eval.c **** }
 3210              		.loc 1 61 9 is_stmt 0 view .LVU1047
 3211 09b6 034B     		ldr	r3, .L204+4
 3212              	.LBE284:
 3213              	.LBE283:
  71:boards/TMC2590_eval.c **** 	}
 3214              		.loc 1 71 24 view .LVU1048
 3215 09b8 DB6D     		ldr	r3, [r3, #92]
  71:boards/TMC2590_eval.c **** 	}
 3216              		.loc 1 71 3 view .LVU1049
 3217 09ba DB68     		ldr	r3, [r3, #12]
 3218 09bc FAE7     		b	.L203
 3219              	.L205:
 3220 09be 00BF     		.align	2
 3221              	.L204:
 3222 09c0 00000000 		.word	Evalboards
 3223 09c4 00000000 		.word	.LANCHOR0
 3224              		.cfi_endproc
 3225              	.LFE3:
 3227              		.align	1
 3228              		.global	TMC2590_init
 3229              		.syntax unified
 3230              		.thumb
 3231              		.thumb_func
 3232              		.fpu softvfp
 3234              	TMC2590_init:
 3235              	.LFB25:
 683:boards/TMC2590_eval.c **** 
 684:boards/TMC2590_eval.c **** void TMC2590_init(void)
 685:boards/TMC2590_eval.c **** {
 3236              		.loc 1 685 1 is_stmt 1 view -0
 3237              		.cfi_startproc
 3238              		@ args = 0, pretend = 0, frame = 0
 3239              		@ frame_needed = 0, uses_anonymous_args = 0
 686:boards/TMC2590_eval.c **** 	compatibilityMode = 1;
 3240              		.loc 1 686 2 view .LVU1051
 685:boards/TMC2590_eval.c **** 	compatibilityMode = 1;
 3241              		.loc 1 685 1 is_stmt 0 view .LVU1052
 3242 09c8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3243              	.LCFI14:
 3244              		.cfi_def_cfa_offset 24
 3245              		.cfi_offset 4, -24
 3246              		.cfi_offset 5, -20
 3247              		.cfi_offset 6, -16
 3248              		.cfi_offset 7, -12
 3249              		.cfi_offset 8, -8
 3250              		.cfi_offset 14, -4
 3251              		.loc 1 686 20 view .LVU1053
 3252 09cc 444B     		ldr	r3, .L207
 687:boards/TMC2590_eval.c **** 
 688:boards/TMC2590_eval.c **** 	tmc2590_init(&TMC2590, 0, Evalboards.ch2.config, &tmc2590_defaultRegisterResetState[0]);
 3253              		.loc 1 688 2 view .LVU1054
 3254 09ce 454C     		ldr	r4, .L207+4
 3255 09d0 454D     		ldr	r5, .L207+8
 689:boards/TMC2590_eval.c **** 
 690:boards/TMC2590_eval.c **** 	Pins.ENN     = &HAL.IOs->pins->DIO0;
 3256              		.loc 1 690 21 view .LVU1055
 3257 09d2 DFF86881 		ldr	r8, .L207+92
 688:boards/TMC2590_eval.c **** 
 3258              		.loc 1 688 2 view .LVU1056
 3259 09d6 D4F89020 		ldr	r2, [r4, #144]
 686:boards/TMC2590_eval.c **** 
 3260              		.loc 1 686 20 view .LVU1057
 3261 09da 0127     		movs	r7, #1
 688:boards/TMC2590_eval.c **** 
 3262              		.loc 1 688 2 view .LVU1058
 3263 09dc 0021     		movs	r1, #0
 686:boards/TMC2590_eval.c **** 
 3264              		.loc 1 686 20 view .LVU1059
 3265 09de 1F60     		str	r7, [r3]
 688:boards/TMC2590_eval.c **** 
 3266              		.loc 1 688 2 is_stmt 1 view .LVU1060
 3267 09e0 2846     		mov	r0, r5
 3268 09e2 424B     		ldr	r3, .L207+12
 3269 09e4 FFF7FEFF 		bl	tmc2590_init
 3270              	.LVL385:
 3271              		.loc 1 690 2 view .LVU1061
 3272              		.loc 1 690 21 is_stmt 0 view .LVU1062
 3273 09e8 D8F80C60 		ldr	r6, [r8, #12]
 3274              		.loc 1 690 25 view .LVU1063
 3275 09ec 7368     		ldr	r3, [r6, #4]
 3276              		.loc 1 690 17 view .LVU1064
 3277 09ee 03F16802 		add	r2, r3, #104
 3278              		.loc 1 690 15 view .LVU1065
 3279 09f2 2A65     		str	r2, [r5, #80]
 691:boards/TMC2590_eval.c **** 	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
 3280              		.loc 1 691 2 is_stmt 1 view .LVU1066
 3281              		.loc 1 691 17 is_stmt 0 view .LVU1067
 3282 09f4 03F18802 		add	r2, r3, #136
 692:boards/TMC2590_eval.c **** 	Pins.STEP    = &HAL.IOs->pins->DIO6;
 3283              		.loc 1 692 17 view .LVU1068
 3284 09f8 03F59470 		add	r0, r3, #296
 691:boards/TMC2590_eval.c **** 	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
 3285              		.loc 1 691 15 view .LVU1069
 3286 09fc 6A65     		str	r2, [r5, #84]
 3287              		.loc 1 692 2 is_stmt 1 view .LVU1070
 693:boards/TMC2590_eval.c **** 	Pins.DIR     = &HAL.IOs->pins->DIO7;
 3288              		.loc 1 693 17 is_stmt 0 view .LVU1071
 3289 09fe 03F5A472 		add	r2, r3, #328
 694:boards/TMC2590_eval.c **** 	Pins.CSN     = &HAL.IOs->pins->SPI2_CSN0;
 3290              		.loc 1 694 17 view .LVU1072
 3291 0a02 03F50273 		add	r3, r3, #520
 3292              		.loc 1 694 15 view .LVU1073
 3293 0a06 6B64     		str	r3, [r5, #68]
 695:boards/TMC2590_eval.c **** 
 696:boards/TMC2590_eval.c **** 	HAL.IOs->config->toOutput(Pins.STEP);
 3294              		.loc 1 696 17 view .LVU1074
 3295 0a08 3368     		ldr	r3, [r6]
 693:boards/TMC2590_eval.c **** 	Pins.CSN     = &HAL.IOs->pins->SPI2_CSN0;
 3296              		.loc 1 693 15 view .LVU1075
 3297 0a0a EA64     		str	r2, [r5, #76]
 3298              		.loc 1 696 2 view .LVU1076
 3299 0a0c DB68     		ldr	r3, [r3, #12]
 692:boards/TMC2590_eval.c **** 	Pins.DIR     = &HAL.IOs->pins->DIO7;
 3300              		.loc 1 692 15 view .LVU1077
 3301 0a0e A864     		str	r0, [r5, #72]
 693:boards/TMC2590_eval.c **** 	Pins.CSN     = &HAL.IOs->pins->SPI2_CSN0;
 3302              		.loc 1 693 2 is_stmt 1 view .LVU1078
 694:boards/TMC2590_eval.c **** 
 3303              		.loc 1 694 2 view .LVU1079
 3304              		.loc 1 696 2 view .LVU1080
 3305 0a10 9847     		blx	r3
 3306              	.LVL386:
 697:boards/TMC2590_eval.c **** 	HAL.IOs->config->toOutput(Pins.DIR);
 3307              		.loc 1 697 2 view .LVU1081
 3308              		.loc 1 697 17 is_stmt 0 view .LVU1082
 3309 0a12 3368     		ldr	r3, [r6]
 3310              		.loc 1 697 2 view .LVU1083
 3311 0a14 E86C     		ldr	r0, [r5, #76]
 3312 0a16 DB68     		ldr	r3, [r3, #12]
 3313 0a18 9847     		blx	r3
 3314              	.LVL387:
 698:boards/TMC2590_eval.c **** 	HAL.IOs->config->toOutput(Pins.ENN);
 3315              		.loc 1 698 2 is_stmt 1 view .LVU1084
 3316              		.loc 1 698 17 is_stmt 0 view .LVU1085
 3317 0a1a 3368     		ldr	r3, [r6]
 3318              		.loc 1 698 2 view .LVU1086
 3319 0a1c 286D     		ldr	r0, [r5, #80]
 3320 0a1e DB68     		ldr	r3, [r3, #12]
 3321 0a20 9847     		blx	r3
 3322              	.LVL388:
 699:boards/TMC2590_eval.c **** 	HAL.IOs->config->toInput(Pins.SG_TST);
 3323              		.loc 1 699 2 is_stmt 1 view .LVU1087
 3324              		.loc 1 699 17 is_stmt 0 view .LVU1088
 3325 0a22 3368     		ldr	r3, [r6]
 3326              		.loc 1 699 2 view .LVU1089
 3327 0a24 686D     		ldr	r0, [r5, #84]
 3328 0a26 1B69     		ldr	r3, [r3, #16]
 3329 0a28 9847     		blx	r3
 3330              	.LVL389:
 700:boards/TMC2590_eval.c **** 	HAL.IOs->config->toOutput(Pins.CSN);
 3331              		.loc 1 700 2 is_stmt 1 view .LVU1090
 3332              		.loc 1 700 17 is_stmt 0 view .LVU1091
 3333 0a2a 3368     		ldr	r3, [r6]
 3334              		.loc 1 700 2 view .LVU1092
 3335 0a2c 686C     		ldr	r0, [r5, #68]
 3336 0a2e DB68     		ldr	r3, [r3, #12]
 3337 0a30 9847     		blx	r3
 3338              	.LVL390:
 701:boards/TMC2590_eval.c **** 
 702:boards/TMC2590_eval.c **** #if defined(Startrampe)
 703:boards/TMC2590_eval.c **** 	Pins.TEMP_BRIDGE	= &HAL.IOs->pins->AIN0;
 704:boards/TMC2590_eval.c **** 	HAL.IOs->config->reset(Pins.TEMP_BRIDGE);
 705:boards/TMC2590_eval.c **** #endif
 706:boards/TMC2590_eval.c **** 
 707:boards/TMC2590_eval.c **** 	TMC2590_SPIChannel = &HAL.SPI->ch2;
 3339              		.loc 1 707 2 is_stmt 1 view .LVU1093
 3340              		.loc 1 707 27 is_stmt 0 view .LVU1094
 3341 0a32 D8F81030 		ldr	r3, [r8, #16]
 3342              		.loc 1 707 23 view .LVU1095
 3343 0a36 03F11402 		add	r2, r3, #20
 3344              		.loc 1 707 21 view .LVU1096
 3345 0a3a EA65     		str	r2, [r5, #92]
 708:boards/TMC2590_eval.c **** 	TMC2590_SPIChannel->CSN = Pins.CSN;
 3346              		.loc 1 708 2 is_stmt 1 view .LVU1097
 3347              		.loc 1 708 26 is_stmt 0 view .LVU1098
 3348 0a3c 6A6C     		ldr	r2, [r5, #68]
 3349 0a3e 9A61     		str	r2, [r3, #24]
 709:boards/TMC2590_eval.c **** 
 710:boards/TMC2590_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 3350              		.loc 1 710 2 is_stmt 1 view .LVU1099
 3351 0a40 4FF40030 		mov	r0, #131072
 3352 0a44 FFF7FEFF 		bl	StepDir_init
 3353              	.LVL391:
 711:boards/TMC2590_eval.c **** 	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
 3354              		.loc 1 711 2 view .LVU1100
 3355 0a48 D5E91212 		ldrd	r1, r2, [r5, #72]
 3356 0a4c 6B6D     		ldr	r3, [r5, #84]
 3357 0a4e 0020     		movs	r0, #0
 3358 0a50 FFF7FEFF 		bl	StepDir_setPins
 3359              	.LVL392:
 712:boards/TMC2590_eval.c **** 
 713:boards/TMC2590_eval.c **** 	TMC2590_config = Evalboards.ch2.config;
 3360              		.loc 1 713 2 view .LVU1101
 3361              		.loc 1 713 33 is_stmt 0 view .LVU1102
 3362 0a54 D4F89030 		ldr	r3, [r4, #144]
 714:boards/TMC2590_eval.c **** 
 715:boards/TMC2590_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 3363              		.loc 1 715 2 is_stmt 1 view .LVU1103
 3364              		.loc 1 715 38 is_stmt 0 view .LVU1104
 3365 0a58 254A     		ldr	r2, .L207+16
 3366 0a5a C3F80822 		str	r2, [r3, #520]
 716:boards/TMC2590_eval.c **** 	Evalboards.ch2.config->reset        = reset;
 3367              		.loc 1 716 2 is_stmt 1 view .LVU1105
 3368              		.loc 1 716 38 is_stmt 0 view .LVU1106
 3369 0a5e 254A     		ldr	r2, .L207+20
 3370 0a60 C3F80422 		str	r2, [r3, #516]
 717:boards/TMC2590_eval.c **** 
 718:boards/TMC2590_eval.c **** 	Evalboards.ch2.rotate               = rotate;
 3371              		.loc 1 718 2 is_stmt 1 view .LVU1107
 3372              		.loc 1 718 38 is_stmt 0 view .LVU1108
 3373 0a64 244B     		ldr	r3, .L207+24
 3374 0a66 C4F89C30 		str	r3, [r4, #156]
 719:boards/TMC2590_eval.c **** 	Evalboards.ch2.right                = right;
 3375              		.loc 1 719 2 is_stmt 1 view .LVU1109
 3376              		.loc 1 719 38 is_stmt 0 view .LVU1110
 3377 0a6a 244B     		ldr	r3, .L207+28
 3378 0a6c C4F89830 		str	r3, [r4, #152]
 720:boards/TMC2590_eval.c **** 	Evalboards.ch2.left                 = left;
 3379              		.loc 1 720 2 is_stmt 1 view .LVU1111
 3380              		.loc 1 720 38 is_stmt 0 view .LVU1112
 3381 0a70 234B     		ldr	r3, .L207+32
 3382 0a72 C4F89430 		str	r3, [r4, #148]
 721:boards/TMC2590_eval.c **** 	Evalboards.ch2.stop                 = stop;
 3383              		.loc 1 721 2 is_stmt 1 view .LVU1113
 3384              		.loc 1 721 38 is_stmt 0 view .LVU1114
 3385 0a76 234B     		ldr	r3, .L207+36
 3386 0a78 C4F8A030 		str	r3, [r4, #160]
 722:boards/TMC2590_eval.c **** 	Evalboards.ch2.GAP                  = GAP;
 3387              		.loc 1 722 2 is_stmt 1 view .LVU1115
 3388              		.loc 1 722 38 is_stmt 0 view .LVU1116
 3389 0a7c 224B     		ldr	r3, .L207+40
 3390 0a7e C4F8B430 		str	r3, [r4, #180]
 723:boards/TMC2590_eval.c **** 	Evalboards.ch2.SAP                  = SAP;
 3391              		.loc 1 723 2 is_stmt 1 view .LVU1117
 3392              		.loc 1 723 38 is_stmt 0 view .LVU1118
 3393 0a82 224B     		ldr	r3, .L207+44
 3394 0a84 C4F8B030 		str	r3, [r4, #176]
 724:boards/TMC2590_eval.c **** 	Evalboards.ch2.moveTo               = moveTo;
 3395              		.loc 1 724 2 is_stmt 1 view .LVU1119
 3396              		.loc 1 724 38 is_stmt 0 view .LVU1120
 3397 0a88 214B     		ldr	r3, .L207+48
 3398 0a8a C4F8A430 		str	r3, [r4, #164]
 725:boards/TMC2590_eval.c **** 	Evalboards.ch2.moveBy               = moveBy;
 3399              		.loc 1 725 2 is_stmt 1 view .LVU1121
 3400              		.loc 1 725 38 is_stmt 0 view .LVU1122
 3401 0a8e 214B     		ldr	r3, .L207+52
 3402 0a90 C4F8A830 		str	r3, [r4, #168]
 726:boards/TMC2590_eval.c **** 	Evalboards.ch2.writeRegister        = writeRegister;
 3403              		.loc 1 726 2 is_stmt 1 view .LVU1123
 3404              		.loc 1 726 38 is_stmt 0 view .LVU1124
 3405 0a94 204B     		ldr	r3, .L207+56
 3406 0a96 C4F8C430 		str	r3, [r4, #196]
 727:boards/TMC2590_eval.c **** 	Evalboards.ch2.readRegister         = readRegister;
 3407              		.loc 1 727 2 is_stmt 1 view .LVU1125
 3408              		.loc 1 727 38 is_stmt 0 view .LVU1126
 3409 0a9a 204B     		ldr	r3, .L207+60
 3410 0a9c C4F8C030 		str	r3, [r4, #192]
 728:boards/TMC2590_eval.c **** 	Evalboards.ch2.periodicJob          = periodicJob;
 3411              		.loc 1 728 2 is_stmt 1 view .LVU1127
 3412              		.loc 1 728 38 is_stmt 0 view .LVU1128
 3413 0aa0 1F4B     		ldr	r3, .L207+64
 3414 0aa2 C4F8D030 		str	r3, [r4, #208]
 729:boards/TMC2590_eval.c **** 	Evalboards.ch2.userFunction         = userFunction;
 3415              		.loc 1 729 2 is_stmt 1 view .LVU1129
 3416              		.loc 1 729 38 is_stmt 0 view .LVU1130
 3417 0aa6 1F4B     		ldr	r3, .L207+68
 3418 0aa8 C4F8CC30 		str	r3, [r4, #204]
 730:boards/TMC2590_eval.c **** 	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
 3419              		.loc 1 730 2 is_stmt 1 view .LVU1131
 3420              		.loc 1 730 38 is_stmt 0 view .LVU1132
 3421 0aac 1E4B     		ldr	r3, .L207+72
 3422 0aae C4F8C830 		str	r3, [r4, #200]
 731:boards/TMC2590_eval.c **** 	Evalboards.ch2.enableDriver         = enableDriver;
 3423              		.loc 1 731 2 is_stmt 1 view .LVU1133
 3424              		.loc 1 731 38 is_stmt 0 view .LVU1134
 3425 0ab2 1E4B     		ldr	r3, .L207+76
 3426 0ab4 C4F8DC30 		str	r3, [r4, #220]
 732:boards/TMC2590_eval.c **** 	Evalboards.ch2.numberOfMotors       = MOTORS;
 3427              		.loc 1 732 2 is_stmt 1 view .LVU1135
 733:boards/TMC2590_eval.c **** 	Evalboards.ch2.VMMin                = VM_MIN;
 734:boards/TMC2590_eval.c **** 	Evalboards.ch2.VMMax                = VM_MAX;
 3428              		.loc 1 734 38 is_stmt 0 view .LVU1136
 3429 0ab8 3222     		movs	r2, #50
 3430 0aba 4FF41673 		mov	r3, #600
 3431 0abe C4E92132 		strd	r3, r2, [r4, #132]
 735:boards/TMC2590_eval.c **** 	Evalboards.ch2.deInit               = deInit;
 3432              		.loc 1 735 38 view .LVU1137
 3433 0ac2 1B4B     		ldr	r3, .L207+80
 3434 0ac4 C4F8D430 		str	r3, [r4, #212]
 736:boards/TMC2590_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 3435              		.loc 1 736 38 view .LVU1138
 3436 0ac8 1A4B     		ldr	r3, .L207+84
 3437 0aca C4F8E830 		str	r3, [r4, #232]
 737:boards/TMC2590_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 3438              		.loc 1 737 38 view .LVU1139
 3439 0ace 1A4B     		ldr	r3, .L207+88
 732:boards/TMC2590_eval.c **** 	Evalboards.ch2.VMMin                = VM_MIN;
 3440              		.loc 1 732 38 view .LVU1140
 3441 0ad0 84F88C70 		strb	r7, [r4, #140]
 733:boards/TMC2590_eval.c **** 	Evalboards.ch2.VMMax                = VM_MAX;
 3442              		.loc 1 733 2 is_stmt 1 view .LVU1141
 735:boards/TMC2590_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 3443              		.loc 1 735 2 view .LVU1142
 736:boards/TMC2590_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 3444              		.loc 1 736 2 view .LVU1143
 3445              		.loc 1 737 2 view .LVU1144
 3446              		.loc 1 737 38 is_stmt 0 view .LVU1145
 3447 0ad4 C4F8EC30 		str	r3, [r4, #236]
 738:boards/TMC2590_eval.c **** 
 739:boards/TMC2590_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 3448              		.loc 1 739 2 is_stmt 1 view .LVU1146
 3449 0ad8 0220     		movs	r0, #2
 740:boards/TMC2590_eval.c **** }
 3450              		.loc 1 740 1 is_stmt 0 view .LVU1147
 3451 0ada BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3452              	.LCFI15:
 3453              		.cfi_restore 14
 3454              		.cfi_restore 8
 3455              		.cfi_restore 7
 3456              		.cfi_restore 6
 3457              		.cfi_restore 5
 3458              		.cfi_restore 4
 3459              		.cfi_def_cfa_offset 0
 739:boards/TMC2590_eval.c **** }
 3460              		.loc 1 739 2 view .LVU1148
 3461 0ade BDE6     		b	enableDriver
 3462              	.LVL393:
 3463              	.L208:
 3464              		.align	2
 3465              	.L207:
 3466 0ae0 00000000 		.word	.LANCHOR1
 3467 0ae4 00000000 		.word	Evalboards
 3468 0ae8 00000000 		.word	.LANCHOR0
 3469 0aec 00000000 		.word	.LANCHOR2
 3470 0af0 00000000 		.word	restore
 3471 0af4 00000000 		.word	reset
 3472 0af8 00000000 		.word	rotate
 3473 0afc 00000000 		.word	right
 3474 0b00 00000000 		.word	left
 3475 0b04 00000000 		.word	stop
 3476 0b08 00000000 		.word	GAP
 3477 0b0c 00000000 		.word	SAP
 3478 0b10 00000000 		.word	moveTo
 3479 0b14 00000000 		.word	moveBy
 3480 0b18 00000000 		.word	writeRegister
 3481 0b1c 00000000 		.word	readRegister
 3482 0b20 00000000 		.word	periodicJob
 3483 0b24 00000000 		.word	userFunction
 3484 0b28 00000000 		.word	getMeasuredSpeed
 3485 0b2c 00000000 		.word	enableDriver
 3486 0b30 00000000 		.word	deInit
 3487 0b34 00000000 		.word	getMin
 3488 0b38 00000000 		.word	getMax
 3489 0b3c 00000000 		.word	HAL
 3490              		.cfi_endproc
 3491              	.LFE25:
 3493              		.comm	TMCMotionController,532,4
 3494              		.comm	TMCDriver,532,4
 3495              		.comm	Evalboards,244,4
 3496              		.comm	VitalSignsMonitor,20,4
 3497              		.comm	hwid,1,1
 3498              		.comm	HAL,48,4
 3499              		.comm	UART,40,4
 3500              		.comm	Timer,16,4
 3501              		.comm	WLAN,36,4
 3502              		.comm	RS232,36,4
 3503              		.comm	LEDs,28,4
 3504              		.comm	USB,36,4
 3505              		.comm	uart0_interrupt,1,1
 3506              		.comm	ADCs,32,4
 3507              		.comm	SPI,44,4
 3508              		.comm	IOMap,2088,4
 3509              		.comm	IOs,52,4
 3510              		.comm	Cpu,8,4
 3511              		.section	.rodata
 3512              		.align	2
 3513              		.set	.LANCHOR2,. + 0
 3516              	tmc2590_defaultRegisterResetState:
 3517 0000 00000010 		.word	268435456
 3518 0004 00000000 		.word	0
 3519 0008 00000000 		.word	0
 3520 000c 00000000 		.word	0
 3521 0010 35190900 		.word	596277
 3522 0014 00000A00 		.word	655360
 3523 0018 05050D00 		.word	853253
 3524 001c 40F00E00 		.word	979008
 3525              		.data
 3526              		.align	2
 3527              		.set	.LANCHOR1,. + 0
 3530              	compatibilityMode:
 3531 0000 01000000 		.word	1
 3532              		.bss
 3533              		.align	2
 3534              		.set	.LANCHOR0,. + 0
 3537              	TMC2590:
 3538 0000 00000000 		.space	64
 3538      00000000 
 3538      00000000 
 3538      00000000 
 3538      00000000 
 3541              	lastCoolStepState.7967:
 3542 0040 00       		.space	1
 3543 0041 000000   		.space	3
 3546              	Pins:
 3547 0044 00000000 		.space	24
 3547      00000000 
 3547      00000000 
 3547      00000000 
 3547      00000000 
 3550              	TMC2590_SPIChannel:
 3551 005c 00000000 		.space	4
 3554              	ADCValue:
 3555 0060 00000000 		.space	12
 3555      00000000 
 3555      00000000 
 3556              		.text
 3557              	.Letext0:
 3558              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 3559              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3560              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3561              		.file 5 "TMC-API/tmc/helpers/Types.h"
 3562              		.file 6 "TMC-API/tmc/helpers/Config.h"
 3563              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3564              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3565              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 3566              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 3567              		.file 11 "TMC-API/tmc/helpers/API_Header.h"
 3568              		.file 12 "hal/Landungsbruecke/freescale/MK20D10.h"
 3569              		.file 13 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 3570              		.file 14 "./hal/Landungsbruecke/freescale/Cpu.h"
 3571              		.file 15 "./hal/IOs.h"
 3572              		.file 16 "./hal/IOMap.h"
 3573              		.file 17 "./hal/SPI.h"
 3574              		.file 18 "./hal/ADCs.h"
 3575              		.file 19 "./hal/RXTX.h"
 3576              		.file 20 "./hal/USB.h"
 3577              		.file 21 "./hal/LEDs.h"
 3578              		.file 22 "./hal/RS232.h"
 3579              		.file 23 "./hal/WLAN.h"
 3580              		.file 24 "./hal/Timer.h"
 3581              		.file 25 "./hal/UART.h"
 3582              		.file 26 "./hal/HAL.h"
 3583              		.file 27 "./tmc/VitalSignsMonitor.h"
 3584              		.file 28 "boards/Board.h"
 3585              		.file 29 "boards/TMCDriver.h"
 3586              		.file 30 "boards/TMCMotionController.h"
 3587              		.file 31 "TMC-API/tmc/ic/TMC2590/TMC2590.h"
 3588              		.file 32 "./tmc/StepDir.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC2590_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:22     .text:00000000 userFunction
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:108    .text:0000003c $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:113    .text:00000044 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:119    .text:00000044 readRegister
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:157    .text:00000054 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:161    .text:00000058 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:167    .text:00000058 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:258    .text:000000b4 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:262    .text:000000b8 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:268    .text:000000b8 writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:294    .text:000000c0 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:298    .text:000000c4 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:304    .text:000000c4 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:346    .text:000000d6 rotate
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:388    .text:000000e8 stop
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:411    .text:000000ec left
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:436    .text:000000f0 right
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:458    .text:000000f2 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:513    .text:0000012c $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:588    .text:00000258 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:598    .text:00000264 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:628    .text:000002dc $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:1003   .text:0000040e $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:1011   .text:00000416 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:1697   .text:000005f0 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:1702   .text:000005f4 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2508   .text:0000082c $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2513   .text:00000834 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2519   .text:00000834 SAP
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2559   .text:00000848 GAP
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2589   .text:00000850 restore
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2604   .text:00000858 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2608   .text:0000085c $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2614   .text:0000085c enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2690   .text:00000890 $d
                            *COM*:000000f4 Evalboards
                            *COM*:00000030 HAL
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2696   .text:0000089c $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2702   .text:0000089c deInit
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2791   .text:000008e4 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2796   .text:000008ec $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2802   .text:000008ec getMax
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2912   .text:00000918 getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:2972   .text:0000092e reset
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3039   .text:0000096c $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3044   .text:00000974 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3050   .text:00000974 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3121   .text:00000994 getMin
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3178   .text:000009aa tmc2590_readWriteArray
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3222   .text:000009c0 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3227   .text:000009c8 $t
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3234   .text:000009c8 TMC2590_init
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3466   .text:00000ae0 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000014 VitalSignsMonitor
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000010 Timer
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3512   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3516   .rodata:00000000 tmc2590_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3526   .data:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3530   .data:00000000 compatibilityMode
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3533   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3537   .bss:00000000 TMC2590
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3541   .bss:00000040 lastCoolStepState.7967
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3546   .bss:00000044 Pins
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3550   .bss:0000005c TMC2590_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccEkIk6v.s:3554   .bss:00000060 ADCValue

UNDEFINED SYMBOLS
StepDir_getStatus
tmc2590_readInt
tmc2590_periodicJob
StepDir_periodicJob
StepDir_getActualVelocity
tmc2590_writeInt
StepDir_moveTo
StepDir_rotate
StepDir_getTargetPosition
StepDir_getActualPosition
StepDir_setActualPosition
StepDir_getTargetVelocity
StepDir_getVelocityMax
StepDir_setVelocityMax
StepDir_getAcceleration
StepDir_setAcceleration
StepDir_getMode
StepDir_setMode
StepDir_getFrequency
StepDir_setFrequency
StepDir_getStallGuardThreshold
StepDir_setStallGuardThreshold
tmc2590_restore
StepDir_deInit
StepDir_getMaxAcceleration
tmc2590_reset
StepDir_init
StepDir_setPins
tmc2590_init
