   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC2160_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	deInit:
  23              	.LFB21:
  24              		.file 1 "boards/TMC2160_eval.c"
   1:boards/TMC2160_eval.c **** #include "tmc/StepDir.h"
   2:boards/TMC2160_eval.c **** #include "Board.h"
   3:boards/TMC2160_eval.c **** #include "tmc/ic/TMC2160/TMC2160.h"
   4:boards/TMC2160_eval.c **** 
   5:boards/TMC2160_eval.c **** #define TMC2160_EVAL_VM_MIN  50   // VM[V/10] min
   6:boards/TMC2160_eval.c **** #define TMC2160_EVAL_VM_MAX  480  // VM[V/10] max +5%
   7:boards/TMC2160_eval.c **** 
   8:boards/TMC2160_eval.c **** #undef  TMC2160_MAX_VELOCITY
   9:boards/TMC2160_eval.c **** #define TMC2160_MAX_VELOCITY  STEPDIR_MAX_VELOCITY
  10:boards/TMC2160_eval.c **** 
  11:boards/TMC2160_eval.c **** // Stepdir precision: 2^17 -> 17 digits of precision
  12:boards/TMC2160_eval.c **** #define STEPDIR_PRECISION (1 << 17)
  13:boards/TMC2160_eval.c **** 
  14:boards/TMC2160_eval.c **** #define TMC2160_DRVENN_DELAY 2000 // Driver enable delay preventing overload on power-on.
  15:boards/TMC2160_eval.c **** 
  16:boards/TMC2160_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  17:boards/TMC2160_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  18:boards/TMC2160_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  19:boards/TMC2160_eval.c **** static uint32_t stop(uint8_t motor);
  20:boards/TMC2160_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  21:boards/TMC2160_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  22:boards/TMC2160_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value);
  23:boards/TMC2160_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  24:boards/TMC2160_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  25:boards/TMC2160_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value);
  26:boards/TMC2160_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value);
  27:boards/TMC2160_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value);
  28:boards/TMC2160_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  29:boards/TMC2160_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  30:boards/TMC2160_eval.c **** static void periodicJob(uint32_t tick);
  31:boards/TMC2160_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  32:boards/TMC2160_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  33:boards/TMC2160_eval.c **** static void deInit(void);
  34:boards/TMC2160_eval.c **** static uint8_t reset();
  35:boards/TMC2160_eval.c **** static uint8_t restore();
  36:boards/TMC2160_eval.c **** static void configCallback(TMC2160TypeDef *tmc2160, ConfigState state);
  37:boards/TMC2160_eval.c **** static void enableDriver(DriverState state);
  38:boards/TMC2160_eval.c **** 
  39:boards/TMC2160_eval.c **** static uint8_t init_state = 0;
  40:boards/TMC2160_eval.c **** 
  41:boards/TMC2160_eval.c **** typedef struct
  42:boards/TMC2160_eval.c **** {
  43:boards/TMC2160_eval.c **** 	IOPinTypeDef *DRV_ENN;
  44:boards/TMC2160_eval.c **** 	IOPinTypeDef *REFL_STEP;
  45:boards/TMC2160_eval.c **** 	IOPinTypeDef *REFR_DIR;
  46:boards/TMC2160_eval.c **** 	IOPinTypeDef *SPI_MODE;
  47:boards/TMC2160_eval.c **** 	IOPinTypeDef *DCIN;
  48:boards/TMC2160_eval.c **** 	IOPinTypeDef *DCEN;
  49:boards/TMC2160_eval.c **** 	IOPinTypeDef *DCO;
  50:boards/TMC2160_eval.c **** 	IOPinTypeDef *DIAG0;
  51:boards/TMC2160_eval.c **** 	IOPinTypeDef *DIAG1;
  52:boards/TMC2160_eval.c **** } PinsTypeDef;
  53:boards/TMC2160_eval.c **** 
  54:boards/TMC2160_eval.c **** static PinsTypeDef Pins;
  55:boards/TMC2160_eval.c **** 
  56:boards/TMC2160_eval.c **** SPIChannelTypeDef *TMC2160_SPIChannel;
  57:boards/TMC2160_eval.c **** TMC2160TypeDef TMC2160;
  58:boards/TMC2160_eval.c **** 
  59:boards/TMC2160_eval.c **** // Translate motor number to TMC5130TypeDef
  60:boards/TMC2160_eval.c **** // When using multiple ICs you can map them here
  61:boards/TMC2160_eval.c **** static inline TMC2160TypeDef *motorToIC(uint8_t motor)
  62:boards/TMC2160_eval.c **** {
  63:boards/TMC2160_eval.c **** 	UNUSED(motor);
  64:boards/TMC2160_eval.c **** 
  65:boards/TMC2160_eval.c **** 	return &TMC2160;
  66:boards/TMC2160_eval.c **** }
  67:boards/TMC2160_eval.c **** 
  68:boards/TMC2160_eval.c **** // Translate channel number to SPI channel
  69:boards/TMC2160_eval.c **** // When using multiple ICs you can map them here
  70:boards/TMC2160_eval.c **** static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  71:boards/TMC2160_eval.c **** {
  72:boards/TMC2160_eval.c **** 	UNUSED(channel);
  73:boards/TMC2160_eval.c **** 
  74:boards/TMC2160_eval.c **** 	return TMC2160_SPIChannel;
  75:boards/TMC2160_eval.c **** }
  76:boards/TMC2160_eval.c **** 
  77:boards/TMC2160_eval.c **** // => SPI wrapper (also takes care of cover mode)
  78:boards/TMC2160_eval.c **** void tmc2160_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  79:boards/TMC2160_eval.c **** {
  80:boards/TMC2160_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
  81:boards/TMC2160_eval.c **** 	{
  82:boards/TMC2160_eval.c **** 		UNUSED(channel);
  83:boards/TMC2160_eval.c **** 		Evalboards.ch1.fullCover(&data[0], length);
  84:boards/TMC2160_eval.c **** 	}
  85:boards/TMC2160_eval.c **** 	else
  86:boards/TMC2160_eval.c **** 	{
  87:boards/TMC2160_eval.c **** 		// Map the channel to the corresponding SPI channel
  88:boards/TMC2160_eval.c **** 		channelToSPI(channel)->readWriteArray(&data[0], length);
  89:boards/TMC2160_eval.c **** 	}
  90:boards/TMC2160_eval.c **** }
  91:boards/TMC2160_eval.c **** // <= SPI wrapper
  92:boards/TMC2160_eval.c **** 
  93:boards/TMC2160_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
  94:boards/TMC2160_eval.c **** {
  95:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
  96:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
  97:boards/TMC2160_eval.c **** 
  98:boards/TMC2160_eval.c **** 	StepDir_rotate(motor, velocity);
  99:boards/TMC2160_eval.c **** 
 100:boards/TMC2160_eval.c **** 	return TMC_ERROR_NONE;
 101:boards/TMC2160_eval.c **** }
 102:boards/TMC2160_eval.c **** 
 103:boards/TMC2160_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 104:boards/TMC2160_eval.c **** {
 105:boards/TMC2160_eval.c **** 	return rotate(motor, velocity);
 106:boards/TMC2160_eval.c **** }
 107:boards/TMC2160_eval.c **** 
 108:boards/TMC2160_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 109:boards/TMC2160_eval.c **** {
 110:boards/TMC2160_eval.c **** 	return rotate(motor, -velocity);
 111:boards/TMC2160_eval.c **** }
 112:boards/TMC2160_eval.c **** 
 113:boards/TMC2160_eval.c **** static uint32_t stop(uint8_t motor)
 114:boards/TMC2160_eval.c **** {
 115:boards/TMC2160_eval.c **** 	return rotate(motor, 0);
 116:boards/TMC2160_eval.c **** }
 117:boards/TMC2160_eval.c **** 
 118:boards/TMC2160_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 119:boards/TMC2160_eval.c **** {
 120:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 121:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 122:boards/TMC2160_eval.c **** 
 123:boards/TMC2160_eval.c **** 	StepDir_moveTo(motor, position);
 124:boards/TMC2160_eval.c **** 
 125:boards/TMC2160_eval.c **** 	return TMC_ERROR_NONE;
 126:boards/TMC2160_eval.c **** }
 127:boards/TMC2160_eval.c **** 
 128:boards/TMC2160_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 129:boards/TMC2160_eval.c **** {
 130:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 131:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 132:boards/TMC2160_eval.c **** 
 133:boards/TMC2160_eval.c **** 	// determine actual position and add numbers of ticks to move
 134:boards/TMC2160_eval.c **** 	*ticks += StepDir_getActualPosition(motor);
 135:boards/TMC2160_eval.c **** 
 136:boards/TMC2160_eval.c **** 	return moveTo(motor, *ticks);
 137:boards/TMC2160_eval.c **** }
 138:boards/TMC2160_eval.c **** 
 139:boards/TMC2160_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 140:boards/TMC2160_eval.c **** {
 141:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 142:boards/TMC2160_eval.c **** 
 143:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 144:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 145:boards/TMC2160_eval.c **** 
 146:boards/TMC2160_eval.c **** 	int32_t tempValue;
 147:boards/TMC2160_eval.c **** 
 148:boards/TMC2160_eval.c **** 	switch(type)
 149:boards/TMC2160_eval.c **** 	{
 150:boards/TMC2160_eval.c **** 	case 0:
 151:boards/TMC2160_eval.c **** 		// Target position
 152:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 153:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 154:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 155:boards/TMC2160_eval.c **** 			StepDir_moveTo(motor, *value);
 156:boards/TMC2160_eval.c **** 		}
 157:boards/TMC2160_eval.c **** 		break;
 158:boards/TMC2160_eval.c **** 	case 1:
 159:boards/TMC2160_eval.c **** 		// Actual position
 160:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 161:boards/TMC2160_eval.c **** 			*value = StepDir_getActualPosition(motor);
 162:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 163:boards/TMC2160_eval.c **** 			StepDir_setActualPosition(motor, *value);
 164:boards/TMC2160_eval.c **** 		}
 165:boards/TMC2160_eval.c **** 		break;
 166:boards/TMC2160_eval.c **** 	case 2:
 167:boards/TMC2160_eval.c **** 		// Target speed
 168:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 169:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 170:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 171:boards/TMC2160_eval.c **** 			StepDir_rotate(motor, *value);
 172:boards/TMC2160_eval.c **** 		}
 173:boards/TMC2160_eval.c **** 		break;
 174:boards/TMC2160_eval.c **** 	case 3:
 175:boards/TMC2160_eval.c **** 		// Actual speed
 176:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 177:boards/TMC2160_eval.c **** 			switch(StepDir_getMode(motor)) {
 178:boards/TMC2160_eval.c **** 			case STEPDIR_INTERNAL:
 179:boards/TMC2160_eval.c **** 				*value = StepDir_getActualVelocity(motor);
 180:boards/TMC2160_eval.c **** 				break;
 181:boards/TMC2160_eval.c **** 			case STEPDIR_EXTERNAL:
 182:boards/TMC2160_eval.c **** 			default:
 183:boards/TMC2160_eval.c **** 				tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_
 184:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 185:boards/TMC2160_eval.c **** 				break;
 186:boards/TMC2160_eval.c **** 			}
 187:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 188:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 189:boards/TMC2160_eval.c **** 		}
 190:boards/TMC2160_eval.c **** 		break;
 191:boards/TMC2160_eval.c **** 	case 4:
 192:boards/TMC2160_eval.c **** 		// Maximum speed
 193:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 194:boards/TMC2160_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 195:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 196:boards/TMC2160_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 197:boards/TMC2160_eval.c **** 		}
 198:boards/TMC2160_eval.c **** 		break;
 199:boards/TMC2160_eval.c **** 	case 5:
 200:boards/TMC2160_eval.c **** 		// Maximum acceleration
 201:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 202:boards/TMC2160_eval.c **** 			*value = StepDir_getAcceleration(motor);
 203:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 204:boards/TMC2160_eval.c **** 			StepDir_setAcceleration(motor, *value);
 205:boards/TMC2160_eval.c **** 		}
 206:boards/TMC2160_eval.c **** 		break;
 207:boards/TMC2160_eval.c **** 	case 6:
 208:boards/TMC2160_eval.c **** 		// Maximum current
 209:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 210:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRU
 211:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 212:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRUN_SHIFT
 213:boards/TMC2160_eval.c **** 		}
 214:boards/TMC2160_eval.c **** 		break;
 215:boards/TMC2160_eval.c **** 	case 7:
 216:boards/TMC2160_eval.c **** 		// Standby current
 217:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 218:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IH
 219:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 220:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHI
 221:boards/TMC2160_eval.c **** 		}
 222:boards/TMC2160_eval.c **** 		break;
 223:boards/TMC2160_eval.c **** 	case 8:
 224:boards/TMC2160_eval.c **** 		// Position reached flag
 225:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 226:boards/TMC2160_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 227:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 228:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 229:boards/TMC2160_eval.c **** 		}
 230:boards/TMC2160_eval.c **** 		break;
 231:boards/TMC2160_eval.c **** 	case 21:
 232:boards/TMC2160_eval.c **** 		// todo CHECK 3: Funktionalität prüfen (JE)
 233:boards/TMC2160_eval.c **** 		// todo XML 3: XML Beschreibung hinzufügen (JE)
 234:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 235:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 236:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 237:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPOWERDOWN, *value);
 238:boards/TMC2160_eval.c **** 		}
 239:boards/TMC2160_eval.c **** 		break;
 240:boards/TMC2160_eval.c **** 	case 23:
 241:boards/TMC2160_eval.c **** 		// Speed threshold for high speed mode
 242:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 243:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_THIGH);
 244:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 245:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 246:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 247:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 248:boards/TMC2160_eval.c **** 		}
 249:boards/TMC2160_eval.c **** 		break;
 250:boards/TMC2160_eval.c **** 	case 24:
 251:boards/TMC2160_eval.c **** 		// Minimum speed for switching to dcStep
 252:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 253:boards/TMC2160_eval.c **** 			*value = tmc2160_readInt(motorToIC(motor), TMC2160_VDCMIN);
 254:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 255:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_VDCMIN, *value);
 256:boards/TMC2160_eval.c **** 		}
 257:boards/TMC2160_eval.c **** 		break;
 258:boards/TMC2160_eval.c **** 	case 26:
 259:boards/TMC2160_eval.c **** 		// High speed fullstep mode
 260:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 261:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VH
 262:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 263:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VHIGHFS_S
 264:boards/TMC2160_eval.c **** 		}
 265:boards/TMC2160_eval.c **** 		break;
 266:boards/TMC2160_eval.c **** 	case 27:
 267:boards/TMC2160_eval.c **** 		// High speed chopper mode
 268:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 269:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_V
 270:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 271:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_VHIGHCHM
 272:boards/TMC2160_eval.c **** 		}
 273:boards/TMC2160_eval.c **** 		break;
 274:boards/TMC2160_eval.c **** 	case 28:
 275:boards/TMC2160_eval.c **** 		// Internal RSense
 276:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 277:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC21
 278:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 279:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC2160_INTE
 280:boards/TMC2160_eval.c **** 		}
 281:boards/TMC2160_eval.c **** 		break;
 282:boards/TMC2160_eval.c **** 	case 29:
 283:boards/TMC2160_eval.c **** 		// Measured Speed
 284:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 285:boards/TMC2160_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_F
 286:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 287:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 288:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 289:boards/TMC2160_eval.c **** 		}
 290:boards/TMC2160_eval.c **** 		break;
 291:boards/TMC2160_eval.c **** 	case 50: // StepDir internal(0)/external(1)
 292:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 293:boards/TMC2160_eval.c **** 			*value = StepDir_getMode(motor);
 294:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 295:boards/TMC2160_eval.c **** 			StepDir_setMode(motor, *value);
 296:boards/TMC2160_eval.c **** 		}
 297:boards/TMC2160_eval.c **** 		break;
 298:boards/TMC2160_eval.c **** 	case 51: // StepDir interrupt frequency
 299:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 300:boards/TMC2160_eval.c **** 			*value = StepDir_getFrequency(motor);
 301:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 302:boards/TMC2160_eval.c **** 			StepDir_setFrequency(motor, *value);
 303:boards/TMC2160_eval.c **** 		}
 304:boards/TMC2160_eval.c **** 		break;
 305:boards/TMC2160_eval.c **** 	case 140:
 306:boards/TMC2160_eval.c **** 		// Microstep Resolution
 307:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 308:boards/TMC2160_eval.c **** 			*value = 256 >> TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC216
 309:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 310:boards/TMC2160_eval.c **** 			switch(*value)
 311:boards/TMC2160_eval.c **** 			{
 312:boards/TMC2160_eval.c **** 			case 1:    *value = 8;   break;
 313:boards/TMC2160_eval.c **** 			case 2:    *value = 7;   break;
 314:boards/TMC2160_eval.c **** 			case 4:    *value = 6;   break;
 315:boards/TMC2160_eval.c **** 			case 8:    *value = 5;   break;
 316:boards/TMC2160_eval.c **** 			case 16:   *value = 4;   break;
 317:boards/TMC2160_eval.c **** 			case 32:   *value = 3;   break;
 318:boards/TMC2160_eval.c **** 			case 64:   *value = 2;   break;
 319:boards/TMC2160_eval.c **** 			case 128:  *value = 1;   break;
 320:boards/TMC2160_eval.c **** 			case 256:  *value = 0;   break;
 321:boards/TMC2160_eval.c **** 			default:   *value = -1;  break;
 322:boards/TMC2160_eval.c **** 			}
 323:boards/TMC2160_eval.c **** 
 324:boards/TMC2160_eval.c **** 			if(*value != -1)
 325:boards/TMC2160_eval.c **** 			{
 326:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC2160_MRES_SHIFT,
 327:boards/TMC2160_eval.c **** 			}
 328:boards/TMC2160_eval.c **** 			else
 329:boards/TMC2160_eval.c **** 			{
 330:boards/TMC2160_eval.c **** 				errors |= TMC_ERROR_VALUE;
 331:boards/TMC2160_eval.c **** 			}
 332:boards/TMC2160_eval.c **** 		}
 333:boards/TMC2160_eval.c **** 		break;
 334:boards/TMC2160_eval.c **** 	case 162:
 335:boards/TMC2160_eval.c **** 		// Chopper blank time
 336:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 337:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SH
 338:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 339:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SHIFT, *v
 340:boards/TMC2160_eval.c **** 		}
 341:boards/TMC2160_eval.c **** 		break;
 342:boards/TMC2160_eval.c **** 	case 163:
 343:boards/TMC2160_eval.c **** 		// Constant TOff Mode
 344:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 345:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SH
 346:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 347:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SHIFT, *v
 348:boards/TMC2160_eval.c **** 		}
 349:boards/TMC2160_eval.c **** 		break;
 350:boards/TMC2160_eval.c **** 	case 164:
 351:boards/TMC2160_eval.c **** 		// Disable fast decay comparator
 352:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 353:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DI
 354:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 355:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DISFDCC_S
 356:boards/TMC2160_eval.c **** 		}
 357:boards/TMC2160_eval.c **** 		break;
 358:boards/TMC2160_eval.c **** 	case 165:
 359:boards/TMC2160_eval.c **** 		// Chopper hysteresis end / fast decay time
 360:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 361:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 362:boards/TMC2160_eval.c **** 			{
 363:boards/TMC2160_eval.c **** 				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND
 364:boards/TMC2160_eval.c **** 			}
 365:boards/TMC2160_eval.c **** 			else
 366:boards/TMC2160_eval.c **** 			{
 367:boards/TMC2160_eval.c **** 				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
 368:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
 369:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 370:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 371:boards/TMC2160_eval.c **** 			}
 372:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 373:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 374:boards/TMC2160_eval.c **** 			{
 375:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND_SHIFT,
 376:boards/TMC2160_eval.c **** 			}
 377:boards/TMC2160_eval.c **** 			else
 378:boards/TMC2160_eval.c **** 			{
 379:boards/TMC2160_eval.c **** 				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
 380:boards/TMC2160_eval.c **** 
 381:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_3_MASK, TMC2160_TFD_3_SHIF
 382:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_ALL_MASK, TMC2160_TFD_ALL_
 383:boards/TMC2160_eval.c **** 			}
 384:boards/TMC2160_eval.c **** 		}
 385:boards/TMC2160_eval.c **** 		break;
 386:boards/TMC2160_eval.c **** 	case 166:
 387:boards/TMC2160_eval.c **** 		// Chopper hysteresis start / sine wave offset
 388:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 389:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 390:boards/TMC2160_eval.c **** 			{
 391:boards/TMC2160_eval.c **** 				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HST
 392:boards/TMC2160_eval.c **** 			}
 393:boards/TMC2160_eval.c **** 			else
 394:boards/TMC2160_eval.c **** 			{
 395:boards/TMC2160_eval.c **** 				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
 396:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
 397:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 398:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 399:boards/TMC2160_eval.c **** 			}
 400:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 401:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 402:boards/TMC2160_eval.c **** 			{
 403:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HSTRT_SHIF
 404:boards/TMC2160_eval.c **** 			}
 405:boards/TMC2160_eval.c **** 			else
 406:boards/TMC2160_eval.c **** 			{
 407:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_OFFSET_MASK, TMC2160_OFFSET_SH
 408:boards/TMC2160_eval.c **** 			}
 409:boards/TMC2160_eval.c **** 		}
 410:boards/TMC2160_eval.c **** 		break;
 411:boards/TMC2160_eval.c **** 	case 167:
 412:boards/TMC2160_eval.c **** 		// Chopper off time
 413:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 414:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_
 415:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 416:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_SHIFT, 
 417:boards/TMC2160_eval.c **** 		}
 418:boards/TMC2160_eval.c **** 		break;
 419:boards/TMC2160_eval.c **** 	case 168:
 420:boards/TMC2160_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 421:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 422:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEI
 423:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 424:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEIMIN_SHI
 425:boards/TMC2160_eval.c **** 		}
 426:boards/TMC2160_eval.c **** 		break;
 427:boards/TMC2160_eval.c **** 	case 169:
 428:boards/TMC2160_eval.c **** 		// smartEnergy current down step
 429:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 430:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_
 431:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 432:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_SHIFT, 
 433:boards/TMC2160_eval.c **** 		}
 434:boards/TMC2160_eval.c **** 		break;
 435:boards/TMC2160_eval.c **** 	case 170:
 436:boards/TMC2160_eval.c **** 		// smartEnergy hysteresis
 437:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 438:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMA
 439:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 440:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMAX_SHIFT
 441:boards/TMC2160_eval.c **** 		}
 442:boards/TMC2160_eval.c **** 		break;
 443:boards/TMC2160_eval.c **** 	case 171:
 444:boards/TMC2160_eval.c **** 		// smartEnergy current up step
 445:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 446:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_
 447:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 448:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_SHIFT, 
 449:boards/TMC2160_eval.c **** 		}
 450:boards/TMC2160_eval.c **** 		break;
 451:boards/TMC2160_eval.c **** 	case 172:
 452:boards/TMC2160_eval.c **** 		// smartEnergy hysteresis start
 453:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 454:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMI
 455:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 456:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMIN_SHIFT
 457:boards/TMC2160_eval.c **** 		}
 458:boards/TMC2160_eval.c **** 		break;
 459:boards/TMC2160_eval.c **** 	case 173:
 460:boards/TMC2160_eval.c **** 		// stallGuard2 filter enable
 461:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 462:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFIL
 463:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 464:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFILT_SHIFT
 465:boards/TMC2160_eval.c **** 		}
 466:boards/TMC2160_eval.c **** 		break;
 467:boards/TMC2160_eval.c **** 	case 174:
 468:boards/TMC2160_eval.c **** 		// stallGuard2 threshold
 469:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 470:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SH
 471:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 472:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 473:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT, *v
 474:boards/TMC2160_eval.c **** 		}
 475:boards/TMC2160_eval.c **** 		break;
 476:boards/TMC2160_eval.c **** 	case 179:
 477:boards/TMC2160_eval.c **** 		// VSense
 478:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 479:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSE
 480:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 481:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSENSE_SHI
 482:boards/TMC2160_eval.c **** 		}
 483:boards/TMC2160_eval.c **** 		break;
 484:boards/TMC2160_eval.c **** 	case 180:
 485:boards/TMC2160_eval.c **** 		// smartEnergy actual current
 486:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 487:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_CS_ACTUAL_MASK, TMC216
 488:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 489:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 490:boards/TMC2160_eval.c **** 		}
 491:boards/TMC2160_eval.c **** 		break;
 492:boards/TMC2160_eval.c **** 	case 181:
 493:boards/TMC2160_eval.c **** 		// smartEnergy stall velocity
 494:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 495:boards/TMC2160_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 496:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 497:boards/TMC2160_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 498:boards/TMC2160_eval.c **** 		}
 499:boards/TMC2160_eval.c **** 		break;
 500:boards/TMC2160_eval.c **** 	case 182:
 501:boards/TMC2160_eval.c **** 		// smartEnergy threshold speed
 502:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 503:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TCOOLTHRS);
 504:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 505:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 506:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 507:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
 508:boards/TMC2160_eval.c **** 		}
 509:boards/TMC2160_eval.c **** 		break;
 510:boards/TMC2160_eval.c **** 	case 184:
 511:boards/TMC2160_eval.c **** 		// Random TOff mode
 512:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 513:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDT
 514:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 515:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDTF_SHIFT
 516:boards/TMC2160_eval.c **** 		}
 517:boards/TMC2160_eval.c **** 		break;
 518:boards/TMC2160_eval.c **** 	case 185:
 519:boards/TMC2160_eval.c **** 		// Chopper synchronization
 520:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 521:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_
 522:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 523:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_SHIFT, 
 524:boards/TMC2160_eval.c **** 		}
 525:boards/TMC2160_eval.c **** 		break;
 526:boards/TMC2160_eval.c **** 	case 186:
 527:boards/TMC2160_eval.c **** 		// PWM threshold speed
 528:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 529:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TPWMTHRS);
 530:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 531:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 532:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 533:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
 534:boards/TMC2160_eval.c **** 		}
 535:boards/TMC2160_eval.c **** 		break;
 536:boards/TMC2160_eval.c **** 	case 187:
 537:boards/TMC2160_eval.c **** 		// PWM gradient
 538:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 539:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PW
 540:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 541:boards/TMC2160_eval.c **** 			// Set gradient
 542:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PWM_GRAD_
 543:boards/TMC2160_eval.c **** 
 544:boards/TMC2160_eval.c **** 			// Enable/disable stealthChop accordingly
 545:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_GCONF, TMC2160_EN_PWM_MODE_MASK, TMC2160_EN_PWM_M
 546:boards/TMC2160_eval.c **** 		}
 547:boards/TMC2160_eval.c **** 		break;
 548:boards/TMC2160_eval.c **** 	case 188:
 549:boards/TMC2160_eval.c **** 		// PWM amplitude
 550:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 551:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PW
 552:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 553:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PWM_AMPL_
 554:boards/TMC2160_eval.c **** 		}
 555:boards/TMC2160_eval.c **** 		break;
 556:boards/TMC2160_eval.c **** 	case 191:
 557:boards/TMC2160_eval.c **** 		// PWM frequency
 558:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 559:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PW
 560:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 561:boards/TMC2160_eval.c **** 			if(*value >= 0 && *value < 4)
 562:boards/TMC2160_eval.c **** 			{
 563:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PWM_FREQ
 564:boards/TMC2160_eval.c **** 			}
 565:boards/TMC2160_eval.c **** 			else
 566:boards/TMC2160_eval.c **** 			{
 567:boards/TMC2160_eval.c **** 				errors |= TMC_ERROR_VALUE;
 568:boards/TMC2160_eval.c **** 			}
 569:boards/TMC2160_eval.c **** 		}
 570:boards/TMC2160_eval.c **** 		break;
 571:boards/TMC2160_eval.c **** 	case 192:
 572:boards/TMC2160_eval.c **** 		// PWM autoscale
 573:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 574:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC21
 575:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 576:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC2160_PWM_
 577:boards/TMC2160_eval.c **** 		}
 578:boards/TMC2160_eval.c **** 		break;
 579:boards/TMC2160_eval.c **** 	case 204:
 580:boards/TMC2160_eval.c **** 		// Freewheeling mode
 581:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 582:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_F
 583:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 584:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_FREEWHEE
 585:boards/TMC2160_eval.c **** 		}
 586:boards/TMC2160_eval.c **** 		break;
 587:boards/TMC2160_eval.c **** 	case 206:
 588:boards/TMC2160_eval.c **** 		// Load value
 589:boards/TMC2160_eval.c **** 		if(readWrite == READ) {
 590:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_SG_RESULT_MASK, TMC216
 591:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 592:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 593:boards/TMC2160_eval.c **** 		}
 594:boards/TMC2160_eval.c **** 		break;
 595:boards/TMC2160_eval.c **** 	default:
 596:boards/TMC2160_eval.c **** 		errors |= TMC_ERROR_TYPE;
 597:boards/TMC2160_eval.c **** 		break;
 598:boards/TMC2160_eval.c **** 	}
 599:boards/TMC2160_eval.c **** 	return errors;
 600:boards/TMC2160_eval.c **** }
 601:boards/TMC2160_eval.c **** 
 602:boards/TMC2160_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 603:boards/TMC2160_eval.c **** {
 604:boards/TMC2160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 605:boards/TMC2160_eval.c **** }
 606:boards/TMC2160_eval.c **** 
 607:boards/TMC2160_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 608:boards/TMC2160_eval.c **** {
 609:boards/TMC2160_eval.c **** 	return handleParameter(READ, motor, type, value);
 610:boards/TMC2160_eval.c **** }
 611:boards/TMC2160_eval.c **** 
 612:boards/TMC2160_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value)
 613:boards/TMC2160_eval.c **** {
 614:boards/TMC2160_eval.c **** 	UNUSED(motor);
 615:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 616:boards/TMC2160_eval.c **** 	switch(type) {
 617:boards/TMC2160_eval.c **** 	case 2:
 618:boards/TMC2160_eval.c **** 	case 3:
 619:boards/TMC2160_eval.c **** 	case 4:
 620:boards/TMC2160_eval.c **** 	case 24:
 621:boards/TMC2160_eval.c **** 		if(limit == LIMIT_MIN) {
 622:boards/TMC2160_eval.c **** 			*value = 0; // TODO: Determine limits here
 623:boards/TMC2160_eval.c **** 		} else if(limit == LIMIT_MAX) {
 624:boards/TMC2160_eval.c **** 			*value = StepDir_getFrequency(motor);
 625:boards/TMC2160_eval.c **** 		}
 626:boards/TMC2160_eval.c **** 		break;
 627:boards/TMC2160_eval.c **** 	case 5:
 628:boards/TMC2160_eval.c **** 		if(limit == LIMIT_MIN) {
 629:boards/TMC2160_eval.c **** 			*value = 0; // TODO: Determine limits here
 630:boards/TMC2160_eval.c **** 		} else if(limit == LIMIT_MAX) {
 631:boards/TMC2160_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 632:boards/TMC2160_eval.c **** 		}
 633:boards/TMC2160_eval.c **** 		break;
 634:boards/TMC2160_eval.c **** 	default:
 635:boards/TMC2160_eval.c **** 		errors |= TMC_ERROR_TYPE;
 636:boards/TMC2160_eval.c **** 		break;
 637:boards/TMC2160_eval.c **** 	}
 638:boards/TMC2160_eval.c **** 	return errors;
 639:boards/TMC2160_eval.c **** }
 640:boards/TMC2160_eval.c **** 
 641:boards/TMC2160_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value)
 642:boards/TMC2160_eval.c **** {
 643:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 644:boards/TMC2160_eval.c **** }
 645:boards/TMC2160_eval.c **** 
 646:boards/TMC2160_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value)
 647:boards/TMC2160_eval.c **** {
 648:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 649:boards/TMC2160_eval.c **** }
 650:boards/TMC2160_eval.c **** 
 651:boards/TMC2160_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 652:boards/TMC2160_eval.c **** {
 653:boards/TMC2160_eval.c **** 	tmc2160_writeInt(motorToIC(motor), address, value);
 654:boards/TMC2160_eval.c **** }
 655:boards/TMC2160_eval.c **** 
 656:boards/TMC2160_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 657:boards/TMC2160_eval.c **** {
 658:boards/TMC2160_eval.c **** 	*value = tmc2160_readInt(motorToIC(motor), address);
 659:boards/TMC2160_eval.c **** }
 660:boards/TMC2160_eval.c **** 
 661:boards/TMC2160_eval.c **** static void periodicJob(uint32_t tick)
 662:boards/TMC2160_eval.c **** {
 663:boards/TMC2160_eval.c **** 	static uint32_t old_tick = 0;
 664:boards/TMC2160_eval.c **** 
 665:boards/TMC2160_eval.c **** 	switch(init_state) {
 666:boards/TMC2160_eval.c **** 	case 1: // Initialization done
 667:boards/TMC2160_eval.c **** 		old_tick = tick;
 668:boards/TMC2160_eval.c **** 		init_state = 2;
 669:boards/TMC2160_eval.c **** 		break;
 670:boards/TMC2160_eval.c **** 	case 2: // Caps loaded, enabling MOSFETs
 671:boards/TMC2160_eval.c **** 		if((tick - old_tick) > TMC2160_DRVENN_DELAY) {
 672:boards/TMC2160_eval.c **** 			enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 673:boards/TMC2160_eval.c **** 			init_state = 3;
 674:boards/TMC2160_eval.c **** 		}
 675:boards/TMC2160_eval.c **** 		break;
 676:boards/TMC2160_eval.c **** 	}
 677:boards/TMC2160_eval.c **** 
 678:boards/TMC2160_eval.c **** 	tmc2160_periodicJob(&TMC2160, tick);
 679:boards/TMC2160_eval.c **** 
 680:boards/TMC2160_eval.c **** 	StepDir_periodicJob(0);
 681:boards/TMC2160_eval.c **** 
 682:boards/TMC2160_eval.c **** 	uint8_t status = StepDir_getStatus(0);
 683:boards/TMC2160_eval.c **** 	// Already stalled -> skip stallGuard check
 684:boards/TMC2160_eval.c **** 	if(status & STATUS_STALLED)
 685:boards/TMC2160_eval.c **** 		return;
 686:boards/TMC2160_eval.c **** 
 687:boards/TMC2160_eval.c **** 	// Stallguard not enabled -> skip stallGuard check
 688:boards/TMC2160_eval.c **** 	if(!(status & STATUS_STALLGUARD_ACTIVE))
 689:boards/TMC2160_eval.c **** 		return;
 690:boards/TMC2160_eval.c **** 
 691:boards/TMC2160_eval.c **** 	// Check stallGuard
 692:boards/TMC2160_eval.c **** 	if(tmc2160_readInt(&TMC2160, TMC2160_DRV_STATUS) & TMC2160_STALLGUARD_MASK)
 693:boards/TMC2160_eval.c **** 		StepDir_stop(0, STOP_STALL);
 694:boards/TMC2160_eval.c **** }
 695:boards/TMC2160_eval.c **** 
 696:boards/TMC2160_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 697:boards/TMC2160_eval.c **** {
 698:boards/TMC2160_eval.c **** 	uint32_t errors = 0;
 699:boards/TMC2160_eval.c **** 
 700:boards/TMC2160_eval.c **** 	uint32_t uvalue;
 701:boards/TMC2160_eval.c **** 
 702:boards/TMC2160_eval.c **** 	switch(type)
 703:boards/TMC2160_eval.c **** 	{
 704:boards/TMC2160_eval.c **** 	case 0:	// set analogue current duty
 705:boards/TMC2160_eval.c **** 		/*
 706:boards/TMC2160_eval.c **** 		 * Current will be defined by analogue value voltage or current signal. In any case this function
 707:boards/TMC2160_eval.c **** 		 * will generate a analogue voltage by PWM for up to 50% duty and a switch for the other 50%.
 708:boards/TMC2160_eval.c **** 		 * The reference voltage will be AIN_REF = VCC_IO * value/20000 with value = {0..20000}
 709:boards/TMC2160_eval.c **** 		 */
 710:boards/TMC2160_eval.c **** 
 711:boards/TMC2160_eval.c **** 		uvalue = (uint32_t) *value;
 712:boards/TMC2160_eval.c **** 
 713:boards/TMC2160_eval.c **** 		if(uvalue <= 20000)
 714:boards/TMC2160_eval.c **** 		{
 715:boards/TMC2160_eval.c **** 			//HAL.IOs->config->setToState(Pins.AIN_REF_SW, (uvalue > 10000) ? IOS_HIGH : IOS_LOW);
 716:boards/TMC2160_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 717:boards/TMC2160_eval.c **** 		}
 718:boards/TMC2160_eval.c **** 		else
 719:boards/TMC2160_eval.c **** 		{
 720:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_VALUE;
 721:boards/TMC2160_eval.c **** 		}
 722:boards/TMC2160_eval.c **** 		break;
 723:boards/TMC2160_eval.c **** 	case 1:	// Use internal clock
 724:boards/TMC2160_eval.c **** 		/*
 725:boards/TMC2160_eval.c **** 		 * Internel clock will be enabled by calling this function with a value != 0 and unpower and repo
 726:boards/TMC2160_eval.c **** 		 */
 727:boards/TMC2160_eval.c **** 		if(*value)
 728:boards/TMC2160_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 729:boards/TMC2160_eval.c **** 		else
 730:boards/TMC2160_eval.c **** 			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
 731:boards/TMC2160_eval.c **** 		break;
 732:boards/TMC2160_eval.c **** 	case 2:	// writing a register at address = motor with value = value and reading back the value
 733:boards/TMC2160_eval.c **** 		// DO NOT USE!
 734:boards/TMC2160_eval.c **** 		// todo BUG 3: using the motor for both address and motor value can lead to trying to get struct 
 735:boards/TMC2160_eval.c **** 		//             and then loading a function pointer from that. That is pretty a much guaranteed cr
 736:boards/TMC2160_eval.c **** 
 737:boards/TMC2160_eval.c **** 		//tmc2160_writeInt(motorToIC(motor), motor, *value);
 738:boards/TMC2160_eval.c **** 		//*value = tmc2160_readInt(motorToIC(motor), motor);
 739:boards/TMC2160_eval.c **** 		break;
 740:boards/TMC2160_eval.c **** 	case 3:	 // set DC_EN
 741:boards/TMC2160_eval.c **** 		HAL.IOs->config->setToState(Pins.DCEN, (*value) ? IOS_HIGH : IOS_LOW);
 742:boards/TMC2160_eval.c **** 		break;
 743:boards/TMC2160_eval.c **** 	case 4:  // Read StepDir status bits
 744:boards/TMC2160_eval.c **** 		*value = StepDir_getStatus(motor);
 745:boards/TMC2160_eval.c **** 		break;
 746:boards/TMC2160_eval.c **** 	case 5:  // When running with the TMC4330 v1.2: CFG4 is routed from DIO6 (Motion Controller) to DI
 747:boards/TMC2160_eval.c **** 		Pins.DCEN = &HAL.IOs->pins->DIO6;
 748:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 749:boards/TMC2160_eval.c **** 		break;
 750:boards/TMC2160_eval.c **** 	case 6:
 751:boards/TMC2160_eval.c **** 		enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 752:boards/TMC2160_eval.c **** 		break;
 753:boards/TMC2160_eval.c **** 	default:
 754:boards/TMC2160_eval.c **** 		errors |= TMC_ERROR_TYPE;
 755:boards/TMC2160_eval.c **** 		break;
 756:boards/TMC2160_eval.c **** 	}
 757:boards/TMC2160_eval.c **** 	return errors;
 758:boards/TMC2160_eval.c **** }
 759:boards/TMC2160_eval.c **** 
 760:boards/TMC2160_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 761:boards/TMC2160_eval.c **** {
 762:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 763:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 764:boards/TMC2160_eval.c **** 
 765:boards/TMC2160_eval.c **** 	switch(motor)
 766:boards/TMC2160_eval.c **** 	{
 767:boards/TMC2160_eval.c **** 	case 0:
 768:boards/TMC2160_eval.c **** 		//*value = StepDir.ch1->actualVelocity;
 769:boards/TMC2160_eval.c **** 		*value = StepDir_getActualVelocity(0);
 770:boards/TMC2160_eval.c **** 		break;
 771:boards/TMC2160_eval.c **** 	default:
 772:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 773:boards/TMC2160_eval.c **** 		break;
 774:boards/TMC2160_eval.c **** 	}
 775:boards/TMC2160_eval.c **** 	return TMC_ERROR_NONE;
 776:boards/TMC2160_eval.c **** }
 777:boards/TMC2160_eval.c **** 
 778:boards/TMC2160_eval.c **** static void deInit(void)
 779:boards/TMC2160_eval.c **** {
  25              		.loc 1 779 1 view -0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
 780:boards/TMC2160_eval.c **** 	HAL.IOs->config->setHigh(Pins.DRV_ENN);	// DISABLE DRIVER
  29              		.loc 1 780 2 view .LVU1
 779:boards/TMC2160_eval.c **** 	HAL.IOs->config->setHigh(Pins.DRV_ENN);	// DISABLE DRIVER
  30              		.loc 1 779 1 is_stmt 0 view .LVU2
  31 0000 38B5     		push	{r3, r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 780 5 view .LVU3
  39 0002 184B     		ldr	r3, .L2
  40              		.loc 1 780 2 view .LVU4
  41 0004 184C     		ldr	r4, .L2+4
  42              		.loc 1 780 5 view .LVU5
  43 0006 DD68     		ldr	r5, [r3, #12]
  44              		.loc 1 780 2 view .LVU6
  45 0008 2068     		ldr	r0, [r4]
  46              		.loc 1 780 17 view .LVU7
  47 000a 2B68     		ldr	r3, [r5]
  48              		.loc 1 780 2 view .LVU8
  49 000c 5B69     		ldr	r3, [r3, #20]
  50 000e 9847     		blx	r3
  51              	.LVL0:
 781:boards/TMC2160_eval.c **** 
 782:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.REFL_STEP);
  52              		.loc 1 782 2 is_stmt 1 view .LVU9
  53              		.loc 1 782 17 is_stmt 0 view .LVU10
  54 0010 2B68     		ldr	r3, [r5]
  55              		.loc 1 782 2 view .LVU11
  56 0012 6068     		ldr	r0, [r4, #4]
  57 0014 9B68     		ldr	r3, [r3, #8]
  58 0016 9847     		blx	r3
  59              	.LVL1:
 783:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.REFR_DIR);
  60              		.loc 1 783 2 is_stmt 1 view .LVU12
  61              		.loc 1 783 17 is_stmt 0 view .LVU13
  62 0018 2B68     		ldr	r3, [r5]
  63              		.loc 1 783 2 view .LVU14
  64 001a A068     		ldr	r0, [r4, #8]
  65 001c 9B68     		ldr	r3, [r3, #8]
  66 001e 9847     		blx	r3
  67              	.LVL2:
 784:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.SPI_MODE);
  68              		.loc 1 784 2 is_stmt 1 view .LVU15
  69              		.loc 1 784 17 is_stmt 0 view .LVU16
  70 0020 2B68     		ldr	r3, [r5]
  71              		.loc 1 784 2 view .LVU17
  72 0022 E068     		ldr	r0, [r4, #12]
  73 0024 9B68     		ldr	r3, [r3, #8]
  74 0026 9847     		blx	r3
  75              	.LVL3:
 785:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.DCIN);
  76              		.loc 1 785 2 is_stmt 1 view .LVU18
  77              		.loc 1 785 17 is_stmt 0 view .LVU19
  78 0028 2B68     		ldr	r3, [r5]
  79              		.loc 1 785 2 view .LVU20
  80 002a 2069     		ldr	r0, [r4, #16]
  81 002c 9B68     		ldr	r3, [r3, #8]
  82 002e 9847     		blx	r3
  83              	.LVL4:
 786:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.DCEN);
  84              		.loc 1 786 2 is_stmt 1 view .LVU21
  85              		.loc 1 786 17 is_stmt 0 view .LVU22
  86 0030 2B68     		ldr	r3, [r5]
  87              		.loc 1 786 2 view .LVU23
  88 0032 6069     		ldr	r0, [r4, #20]
  89 0034 9B68     		ldr	r3, [r3, #8]
  90 0036 9847     		blx	r3
  91              	.LVL5:
 787:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.DCO);
  92              		.loc 1 787 2 is_stmt 1 view .LVU24
  93              		.loc 1 787 17 is_stmt 0 view .LVU25
  94 0038 2B68     		ldr	r3, [r5]
  95              		.loc 1 787 2 view .LVU26
  96 003a A069     		ldr	r0, [r4, #24]
  97 003c 9B68     		ldr	r3, [r3, #8]
  98 003e 9847     		blx	r3
  99              	.LVL6:
 788:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.DIAG0);
 100              		.loc 1 788 2 is_stmt 1 view .LVU27
 101              		.loc 1 788 17 is_stmt 0 view .LVU28
 102 0040 2B68     		ldr	r3, [r5]
 103              		.loc 1 788 2 view .LVU29
 104 0042 E069     		ldr	r0, [r4, #28]
 105 0044 9B68     		ldr	r3, [r3, #8]
 106 0046 9847     		blx	r3
 107              	.LVL7:
 789:boards/TMC2160_eval.c **** 	HAL.IOs->config->reset(Pins.DIAG1);
 108              		.loc 1 789 2 is_stmt 1 view .LVU30
 109              		.loc 1 789 17 is_stmt 0 view .LVU31
 110 0048 2B68     		ldr	r3, [r5]
 111              		.loc 1 789 2 view .LVU32
 112 004a 206A     		ldr	r0, [r4, #32]
 113 004c 9B68     		ldr	r3, [r3, #8]
 114 004e 9847     		blx	r3
 115              	.LVL8:
 790:boards/TMC2160_eval.c **** 	//HAL.IOs->config->reset(Pins.DRV_ENN);
 791:boards/TMC2160_eval.c **** 
 792:boards/TMC2160_eval.c **** 	StepDir_deInit();
 116              		.loc 1 792 2 is_stmt 1 view .LVU33
 117 0050 FFF7FEFF 		bl	StepDir_deInit
 118              	.LVL9:
 793:boards/TMC2160_eval.c **** 	Timer.deInit();
 119              		.loc 1 793 2 view .LVU34
 120              		.loc 1 793 7 is_stmt 0 view .LVU35
 121 0054 054B     		ldr	r3, .L2+8
 122              		.loc 1 793 2 view .LVU36
 123 0056 5B68     		ldr	r3, [r3, #4]
 124 0058 9847     		blx	r3
 125              	.LVL10:
 794:boards/TMC2160_eval.c **** 	init_state = 0;
 126              		.loc 1 794 2 is_stmt 1 view .LVU37
 127              		.loc 1 794 13 is_stmt 0 view .LVU38
 128 005a 0023     		movs	r3, #0
 129 005c 84F82430 		strb	r3, [r4, #36]
 795:boards/TMC2160_eval.c **** }
 130              		.loc 1 795 1 view .LVU39
 131 0060 38BD     		pop	{r3, r4, r5, pc}
 132              	.L3:
 133 0062 00BF     		.align	2
 134              	.L2:
 135 0064 00000000 		.word	HAL
 136 0068 00000000 		.word	.LANCHOR0
 137 006c 00000000 		.word	Timer
 138              		.cfi_endproc
 139              	.LFE21:
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	readRegister:
 148              	.LVL11:
 149              	.LFB17:
 657:boards/TMC2160_eval.c **** 	*value = tmc2160_readInt(motorToIC(motor), address);
 150              		.loc 1 657 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 658:boards/TMC2160_eval.c **** }
 154              		.loc 1 658 2 view .LVU41
 155              	.LBB230:
 156              	.LBI230:
  61:boards/TMC2160_eval.c **** {
 157              		.loc 1 61 31 view .LVU42
  61:boards/TMC2160_eval.c **** {
 158              		.loc 1 61 31 is_stmt 0 view .LVU43
 159              	.LBE230:
  63:boards/TMC2160_eval.c **** 
 160              		.loc 1 63 2 is_stmt 1 view .LVU44
  65:boards/TMC2160_eval.c **** }
 161              		.loc 1 65 2 view .LVU45
 657:boards/TMC2160_eval.c **** 	*value = tmc2160_readInt(motorToIC(motor), address);
 162              		.loc 1 657 1 is_stmt 0 view .LVU46
 163 0070 10B5     		push	{r4, lr}
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 658:boards/TMC2160_eval.c **** }
 168              		.loc 1 658 11 view .LVU47
 169 0072 0348     		ldr	r0, .L5
 170              	.LVL12:
 657:boards/TMC2160_eval.c **** 	*value = tmc2160_readInt(motorToIC(motor), address);
 171              		.loc 1 657 1 view .LVU48
 172 0074 1446     		mov	r4, r2
 658:boards/TMC2160_eval.c **** }
 173              		.loc 1 658 11 view .LVU49
 174 0076 FFF7FEFF 		bl	tmc2160_readInt
 175              	.LVL13:
 658:boards/TMC2160_eval.c **** }
 176              		.loc 1 658 9 view .LVU50
 177 007a 2060     		str	r0, [r4]
 659:boards/TMC2160_eval.c **** 
 178              		.loc 1 659 1 view .LVU51
 179 007c 10BD     		pop	{r4, pc}
 180              	.LVL14:
 181              	.L6:
 659:boards/TMC2160_eval.c **** 
 182              		.loc 1 659 1 view .LVU52
 183 007e 00BF     		.align	2
 184              	.L5:
 185 0080 00000000 		.word	TMC2160
 186              		.cfi_endproc
 187              	.LFE17:
 189              		.align	1
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu softvfp
 195              	writeRegister:
 196              	.LVL15:
 197              	.LFB16:
 652:boards/TMC2160_eval.c **** 	tmc2160_writeInt(motorToIC(motor), address, value);
 198              		.loc 1 652 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 653:boards/TMC2160_eval.c **** }
 203              		.loc 1 653 2 view .LVU54
 204              	.LBB231:
 205              	.LBI231:
  61:boards/TMC2160_eval.c **** {
 206              		.loc 1 61 31 view .LVU55
  61:boards/TMC2160_eval.c **** {
 207              		.loc 1 61 31 is_stmt 0 view .LVU56
 208              	.LBE231:
  63:boards/TMC2160_eval.c **** 
 209              		.loc 1 63 2 is_stmt 1 view .LVU57
  65:boards/TMC2160_eval.c **** }
 210              		.loc 1 65 2 view .LVU58
 653:boards/TMC2160_eval.c **** }
 211              		.loc 1 653 2 is_stmt 0 view .LVU59
 212 0084 0148     		ldr	r0, .L8
 213              	.LVL16:
 653:boards/TMC2160_eval.c **** }
 214              		.loc 1 653 2 view .LVU60
 215 0086 FFF7FEBF 		b	tmc2160_writeInt
 216              	.LVL17:
 217              	.L9:
 653:boards/TMC2160_eval.c **** }
 218              		.loc 1 653 2 view .LVU61
 219 008a 00BF     		.align	2
 220              	.L8:
 221 008c 00000000 		.word	TMC2160
 222              		.cfi_endproc
 223              	.LFE16:
 225              		.align	1
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu softvfp
 231              	moveTo:
 232              	.LVL18:
 233              	.LFB8:
 119:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 234              		.loc 1 119 1 is_stmt 1 view -0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 120:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 238              		.loc 1 120 2 view .LVU63
 119:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 239              		.loc 1 119 1 is_stmt 0 view .LVU64
 240 0090 10B5     		push	{r4, lr}
 241              	.LCFI2:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 4, -8
 244              		.cfi_offset 14, -4
 120:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 245              		.loc 1 120 4 view .LVU65
 246 0092 0446     		mov	r4, r0
 247 0094 18B9     		cbnz	r0, .L12
 123:boards/TMC2160_eval.c **** 
 248              		.loc 1 123 2 is_stmt 1 view .LVU66
 249 0096 FFF7FEFF 		bl	StepDir_moveTo
 250              	.LVL19:
 125:boards/TMC2160_eval.c **** }
 251              		.loc 1 125 2 view .LVU67
 125:boards/TMC2160_eval.c **** }
 252              		.loc 1 125 9 is_stmt 0 view .LVU68
 253 009a 2046     		mov	r0, r4
 254              	.L10:
 126:boards/TMC2160_eval.c **** 
 255              		.loc 1 126 1 view .LVU69
 256 009c 10BD     		pop	{r4, pc}
 257              	.LVL20:
 258              	.L12:
 121:boards/TMC2160_eval.c **** 
 259              		.loc 1 121 10 view .LVU70
 260 009e 0820     		movs	r0, #8
 261              	.LVL21:
 121:boards/TMC2160_eval.c **** 
 262              		.loc 1 121 10 view .LVU71
 263 00a0 FCE7     		b	.L10
 264              		.cfi_endproc
 265              	.LFE8:
 267              		.align	1
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	rotate:
 274              	.LVL22:
 275              	.LFB4:
  94:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 276              		.loc 1 94 1 is_stmt 1 view -0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
  95:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 280              		.loc 1 95 2 view .LVU73
  94:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 281              		.loc 1 94 1 is_stmt 0 view .LVU74
 282 00a2 10B5     		push	{r4, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
  95:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 287              		.loc 1 95 4 view .LVU75
 288 00a4 0446     		mov	r4, r0
 289 00a6 18B9     		cbnz	r0, .L15
  98:boards/TMC2160_eval.c **** 
 290              		.loc 1 98 2 is_stmt 1 view .LVU76
 291 00a8 FFF7FEFF 		bl	StepDir_rotate
 292              	.LVL23:
 100:boards/TMC2160_eval.c **** }
 293              		.loc 1 100 2 view .LVU77
 100:boards/TMC2160_eval.c **** }
 294              		.loc 1 100 9 is_stmt 0 view .LVU78
 295 00ac 2046     		mov	r0, r4
 296              	.L13:
 101:boards/TMC2160_eval.c **** 
 297              		.loc 1 101 1 view .LVU79
 298 00ae 10BD     		pop	{r4, pc}
 299              	.LVL24:
 300              	.L15:
  96:boards/TMC2160_eval.c **** 
 301              		.loc 1 96 10 view .LVU80
 302 00b0 0820     		movs	r0, #8
 303              	.LVL25:
  96:boards/TMC2160_eval.c **** 
 304              		.loc 1 96 10 view .LVU81
 305 00b2 FCE7     		b	.L13
 306              		.cfi_endproc
 307              	.LFE4:
 309              		.align	1
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu softvfp
 315              	stop:
 316              	.LVL26:
 317              	.LFB7:
 114:boards/TMC2160_eval.c **** 	return rotate(motor, 0);
 318              		.loc 1 114 1 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 115:boards/TMC2160_eval.c **** }
 323              		.loc 1 115 2 view .LVU83
 115:boards/TMC2160_eval.c **** }
 324              		.loc 1 115 9 is_stmt 0 view .LVU84
 325 00b4 0021     		movs	r1, #0
 326 00b6 F4E7     		b	rotate
 327              	.LVL27:
 115:boards/TMC2160_eval.c **** }
 328              		.loc 1 115 9 view .LVU85
 329              		.cfi_endproc
 330              	.LFE7:
 332              		.align	1
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu softvfp
 338              	left:
 339              	.LVL28:
 340              	.LFB6:
 109:boards/TMC2160_eval.c **** 	return rotate(motor, -velocity);
 341              		.loc 1 109 1 is_stmt 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 110:boards/TMC2160_eval.c **** }
 346              		.loc 1 110 2 view .LVU87
 110:boards/TMC2160_eval.c **** }
 347              		.loc 1 110 9 is_stmt 0 view .LVU88
 348 00b8 4942     		rsbs	r1, r1, #0
 349              	.LVL29:
 110:boards/TMC2160_eval.c **** }
 350              		.loc 1 110 9 view .LVU89
 351 00ba F2E7     		b	rotate
 352              	.LVL30:
 110:boards/TMC2160_eval.c **** }
 353              		.loc 1 110 9 view .LVU90
 354              		.cfi_endproc
 355              	.LFE6:
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu softvfp
 363              	right:
 364              	.LVL31:
 365              	.LFB5:
 104:boards/TMC2160_eval.c **** 	return rotate(motor, velocity);
 366              		.loc 1 104 1 is_stmt 1 view -0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 105:boards/TMC2160_eval.c **** }
 371              		.loc 1 105 2 view .LVU92
 105:boards/TMC2160_eval.c **** }
 372              		.loc 1 105 9 is_stmt 0 view .LVU93
 373 00bc F1E7     		b	rotate
 374              	.LVL32:
 105:boards/TMC2160_eval.c **** }
 375              		.loc 1 105 9 view .LVU94
 376              		.cfi_endproc
 377              	.LFE5:
 379              		.global	__aeabi_uldivmod
 380              		.global	__aeabi_ldivmod
 381              		.align	1
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	handleParameter:
 388              	.LVL33:
 389              	.LFB10:
 140:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 390              		.loc 1 140 1 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 141:boards/TMC2160_eval.c **** 
 394              		.loc 1 141 2 view .LVU96
 143:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 395              		.loc 1 143 2 view .LVU97
 140:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 396              		.loc 1 140 1 is_stmt 0 view .LVU98
 397 00be 70B5     		push	{r4, r5, r6, lr}
 398              	.LCFI4:
 399              		.cfi_def_cfa_offset 16
 400              		.cfi_offset 4, -16
 401              		.cfi_offset 5, -12
 402              		.cfi_offset 6, -8
 403              		.cfi_offset 14, -4
 140:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 404              		.loc 1 140 1 view .LVU99
 405 00c0 0446     		mov	r4, r0
 406 00c2 1D46     		mov	r5, r3
 143:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 407              		.loc 1 143 4 view .LVU100
 408 00c4 0029     		cmp	r1, #0
 409 00c6 40F01F85 		bne	.L143
 146:boards/TMC2160_eval.c **** 
 410              		.loc 1 146 2 is_stmt 1 view .LVU101
 148:boards/TMC2160_eval.c **** 	{
 411              		.loc 1 148 2 view .LVU102
 412 00ca 332A     		cmp	r2, #51
 413 00cc 00F28280 		bhi	.L21
 414 00d0 332A     		cmp	r2, #51
 415 00d2 00F21F85 		bhi	.L145
 416 00d6 DFE812F0 		tbh	[pc, r2, lsl #1]
 417              	.LVL34:
 418              	.L52:
 419 00da 8500     		.2byte	(.L69-.L52)/2
 420 00dc 9000     		.2byte	(.L68-.L52)/2
 421 00de 9B00     		.2byte	(.L67-.L52)/2
 422 00e0 A600     		.2byte	(.L66-.L52)/2
 423 00e2 C700     		.2byte	(.L65-.L52)/2
 424 00e4 D500     		.2byte	(.L64-.L52)/2
 425 00e6 E000     		.2byte	(.L63-.L52)/2
 426 00e8 F800     		.2byte	(.L62-.L52)/2
 427 00ea 0F01     		.2byte	(.L61-.L52)/2
 428 00ec 1D05     		.2byte	(.L145-.L52)/2
 429 00ee 1D05     		.2byte	(.L145-.L52)/2
 430 00f0 1D05     		.2byte	(.L145-.L52)/2
 431 00f2 1D05     		.2byte	(.L145-.L52)/2
 432 00f4 1D05     		.2byte	(.L145-.L52)/2
 433 00f6 1D05     		.2byte	(.L145-.L52)/2
 434 00f8 1D05     		.2byte	(.L145-.L52)/2
 435 00fa 1D05     		.2byte	(.L145-.L52)/2
 436 00fc 1D05     		.2byte	(.L145-.L52)/2
 437 00fe 1D05     		.2byte	(.L145-.L52)/2
 438 0100 1D05     		.2byte	(.L145-.L52)/2
 439 0102 1D05     		.2byte	(.L145-.L52)/2
 440 0104 1801     		.2byte	(.L60-.L52)/2
 441 0106 1D05     		.2byte	(.L145-.L52)/2
 442 0108 2201     		.2byte	(.L59-.L52)/2
 443 010a 4701     		.2byte	(.L58-.L52)/2
 444 010c 1D05     		.2byte	(.L145-.L52)/2
 445 010e 5501     		.2byte	(.L57-.L52)/2
 446 0110 6D01     		.2byte	(.L56-.L52)/2
 447 0112 8501     		.2byte	(.L55-.L52)/2
 448 0114 9F01     		.2byte	(.L54-.L52)/2
 449 0116 1D05     		.2byte	(.L145-.L52)/2
 450 0118 1D05     		.2byte	(.L145-.L52)/2
 451 011a 1D05     		.2byte	(.L145-.L52)/2
 452 011c 1D05     		.2byte	(.L145-.L52)/2
 453 011e 1D05     		.2byte	(.L145-.L52)/2
 454 0120 1D05     		.2byte	(.L145-.L52)/2
 455 0122 1D05     		.2byte	(.L145-.L52)/2
 456 0124 1D05     		.2byte	(.L145-.L52)/2
 457 0126 1D05     		.2byte	(.L145-.L52)/2
 458 0128 1D05     		.2byte	(.L145-.L52)/2
 459 012a 1D05     		.2byte	(.L145-.L52)/2
 460 012c 1D05     		.2byte	(.L145-.L52)/2
 461 012e 1D05     		.2byte	(.L145-.L52)/2
 462 0130 1D05     		.2byte	(.L145-.L52)/2
 463 0132 1D05     		.2byte	(.L145-.L52)/2
 464 0134 1D05     		.2byte	(.L145-.L52)/2
 465 0136 1D05     		.2byte	(.L145-.L52)/2
 466 0138 1D05     		.2byte	(.L145-.L52)/2
 467 013a 1D05     		.2byte	(.L145-.L52)/2
 468 013c 1D05     		.2byte	(.L145-.L52)/2
 469 013e B801     		.2byte	(.L53-.L52)/2
 470 0140 C301     		.2byte	(.L51-.L52)/2
 471              		.p2align 1
 472              	.L70:
 148:boards/TMC2160_eval.c **** 	{
 473              		.loc 1 148 2 is_stmt 0 view .LVU103
 474 0142 8C3A     		subs	r2, r2, #140
 475              	.LVL35:
 148:boards/TMC2160_eval.c **** 	{
 476              		.loc 1 148 2 view .LVU104
 477 0144 422A     		cmp	r2, #66
 478 0146 00F2E284 		bhi	.L144
 479 014a DFE812F0 		tbh	[pc, r2, lsl #1]
 480              	.L24:
 481 014e 9401     		.2byte	(.L50-.L24)/2
 482 0150 E004     		.2byte	(.L144-.L24)/2
 483 0152 E004     		.2byte	(.L144-.L24)/2
 484 0154 E004     		.2byte	(.L144-.L24)/2
 485 0156 E004     		.2byte	(.L144-.L24)/2
 486 0158 E004     		.2byte	(.L144-.L24)/2
 487 015a E004     		.2byte	(.L144-.L24)/2
 488 015c E004     		.2byte	(.L144-.L24)/2
 489 015e E004     		.2byte	(.L144-.L24)/2
 490 0160 E004     		.2byte	(.L144-.L24)/2
 491 0162 E004     		.2byte	(.L144-.L24)/2
 492 0164 E004     		.2byte	(.L144-.L24)/2
 493 0166 E004     		.2byte	(.L144-.L24)/2
 494 0168 E004     		.2byte	(.L144-.L24)/2
 495 016a E004     		.2byte	(.L144-.L24)/2
 496 016c E004     		.2byte	(.L144-.L24)/2
 497 016e E004     		.2byte	(.L144-.L24)/2
 498 0170 E004     		.2byte	(.L144-.L24)/2
 499 0172 E004     		.2byte	(.L144-.L24)/2
 500 0174 E004     		.2byte	(.L144-.L24)/2
 501 0176 E004     		.2byte	(.L144-.L24)/2
 502 0178 E004     		.2byte	(.L144-.L24)/2
 503 017a E501     		.2byte	(.L49-.L24)/2
 504 017c FD01     		.2byte	(.L48-.L24)/2
 505 017e 1502     		.2byte	(.L47-.L24)/2
 506 0180 2D02     		.2byte	(.L46-.L24)/2
 507 0182 8802     		.2byte	(.L45-.L24)/2
 508 0184 CD02     		.2byte	(.L44-.L24)/2
 509 0186 E402     		.2byte	(.L43-.L24)/2
 510 0188 FB02     		.2byte	(.L42-.L24)/2
 511 018a 1303     		.2byte	(.L41-.L24)/2
 512 018c 2B03     		.2byte	(.L40-.L24)/2
 513 018e 4303     		.2byte	(.L39-.L24)/2
 514 0190 5D03     		.2byte	(.L38-.L24)/2
 515 0192 7503     		.2byte	(.L37-.L24)/2
 516 0194 E004     		.2byte	(.L144-.L24)/2
 517 0196 E004     		.2byte	(.L144-.L24)/2
 518 0198 E004     		.2byte	(.L144-.L24)/2
 519 019a E004     		.2byte	(.L144-.L24)/2
 520 019c 9403     		.2byte	(.L36-.L24)/2
 521 019e AC03     		.2byte	(.L35-.L24)/2
 522 01a0 B703     		.2byte	(.L34-.L24)/2
 523 01a2 C303     		.2byte	(.L33-.L24)/2
 524 01a4 E004     		.2byte	(.L144-.L24)/2
 525 01a6 E803     		.2byte	(.L32-.L24)/2
 526 01a8 0004     		.2byte	(.L31-.L24)/2
 527 01aa 1804     		.2byte	(.L30-.L24)/2
 528 01ac 3D04     		.2byte	(.L29-.L24)/2
 529 01ae 6404     		.2byte	(.L28-.L24)/2
 530 01b0 E004     		.2byte	(.L144-.L24)/2
 531 01b2 E004     		.2byte	(.L144-.L24)/2
 532 01b4 7A04     		.2byte	(.L27-.L24)/2
 533 01b6 9904     		.2byte	(.L26-.L24)/2
 534 01b8 E004     		.2byte	(.L144-.L24)/2
 535 01ba E004     		.2byte	(.L144-.L24)/2
 536 01bc E004     		.2byte	(.L144-.L24)/2
 537 01be E004     		.2byte	(.L144-.L24)/2
 538 01c0 E004     		.2byte	(.L144-.L24)/2
 539 01c2 E004     		.2byte	(.L144-.L24)/2
 540 01c4 E004     		.2byte	(.L144-.L24)/2
 541 01c6 E004     		.2byte	(.L144-.L24)/2
 542 01c8 E004     		.2byte	(.L144-.L24)/2
 543 01ca E004     		.2byte	(.L144-.L24)/2
 544 01cc E004     		.2byte	(.L144-.L24)/2
 545 01ce B404     		.2byte	(.L25-.L24)/2
 546 01d0 E004     		.2byte	(.L144-.L24)/2
 547 01d2 D304     		.2byte	(.L23-.L24)/2
 548              	.LVL36:
 549              		.p2align 1
 550              	.L21:
 148:boards/TMC2160_eval.c **** 	{
 551              		.loc 1 148 2 view .LVU105
 552 01d4 02F17403 		add	r3, r2, #116
 553              	.LVL37:
 148:boards/TMC2160_eval.c **** 	{
 554              		.loc 1 148 2 view .LVU106
 555 01d8 DBB2     		uxtb	r3, r3
 556 01da 422B     		cmp	r3, #66
 557 01dc B1D9     		bls	.L70
 558 01de 0424     		movs	r4, #4
 559              	.LVL38:
 560              	.L19:
 600:boards/TMC2160_eval.c **** 
 561              		.loc 1 600 1 view .LVU107
 562 01e0 2046     		mov	r0, r4
 563 01e2 70BD     		pop	{r4, r5, r6, pc}
 564              	.LVL39:
 565              	.L69:
 152:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 566              		.loc 1 152 3 is_stmt 1 view .LVU108
 152:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 567              		.loc 1 152 5 is_stmt 0 view .LVU109
 568 01e4 18B9     		cbnz	r0, .L71
 153:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 569              		.loc 1 153 4 is_stmt 1 view .LVU110
 153:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 570              		.loc 1 153 13 is_stmt 0 view .LVU111
 571 01e6 FFF7FEFF 		bl	StepDir_getTargetPosition
 572              	.LVL40:
 153:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 573              		.loc 1 153 11 view .LVU112
 574 01ea 2860     		str	r0, [r5]
 575 01ec F8E7     		b	.L19
 576              	.LVL41:
 577              	.L71:
 154:boards/TMC2160_eval.c **** 			StepDir_moveTo(motor, *value);
 578              		.loc 1 154 10 is_stmt 1 view .LVU113
 155:boards/TMC2160_eval.c **** 		}
 579              		.loc 1 155 4 view .LVU114
 580 01ee 2968     		ldr	r1, [r5]
 581              	.LVL42:
 155:boards/TMC2160_eval.c **** 		}
 582              		.loc 1 155 4 is_stmt 0 view .LVU115
 583 01f0 0020     		movs	r0, #0
 584              	.LVL43:
 155:boards/TMC2160_eval.c **** 		}
 585              		.loc 1 155 4 view .LVU116
 586 01f2 FFF7FEFF 		bl	StepDir_moveTo
 587              	.LVL44:
 141:boards/TMC2160_eval.c **** 
 588              		.loc 1 141 11 view .LVU117
 589 01f6 0024     		movs	r4, #0
 590 01f8 F2E7     		b	.L19
 591              	.LVL45:
 592              	.L68:
 160:boards/TMC2160_eval.c **** 			*value = StepDir_getActualPosition(motor);
 593              		.loc 1 160 3 is_stmt 1 view .LVU118
 160:boards/TMC2160_eval.c **** 			*value = StepDir_getActualPosition(motor);
 594              		.loc 1 160 5 is_stmt 0 view .LVU119
 595 01fa 18B9     		cbnz	r0, .L72
 161:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 596              		.loc 1 161 4 is_stmt 1 view .LVU120
 161:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 597              		.loc 1 161 13 is_stmt 0 view .LVU121
 598 01fc FFF7FEFF 		bl	StepDir_getActualPosition
 599              	.LVL46:
 161:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 600              		.loc 1 161 11 view .LVU122
 601 0200 2860     		str	r0, [r5]
 602 0202 EDE7     		b	.L19
 603              	.LVL47:
 604              	.L72:
 162:boards/TMC2160_eval.c **** 			StepDir_setActualPosition(motor, *value);
 605              		.loc 1 162 10 is_stmt 1 view .LVU123
 163:boards/TMC2160_eval.c **** 		}
 606              		.loc 1 163 4 view .LVU124
 607 0204 2968     		ldr	r1, [r5]
 608              	.LVL48:
 163:boards/TMC2160_eval.c **** 		}
 609              		.loc 1 163 4 is_stmt 0 view .LVU125
 610 0206 0020     		movs	r0, #0
 611              	.LVL49:
 163:boards/TMC2160_eval.c **** 		}
 612              		.loc 1 163 4 view .LVU126
 613 0208 FFF7FEFF 		bl	StepDir_setActualPosition
 614              	.LVL50:
 141:boards/TMC2160_eval.c **** 
 615              		.loc 1 141 11 view .LVU127
 616 020c 0024     		movs	r4, #0
 617 020e E7E7     		b	.L19
 618              	.LVL51:
 619              	.L67:
 168:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 620              		.loc 1 168 3 is_stmt 1 view .LVU128
 168:boards/TMC2160_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 621              		.loc 1 168 5 is_stmt 0 view .LVU129
 622 0210 18B9     		cbnz	r0, .L73
 169:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 623              		.loc 1 169 4 is_stmt 1 view .LVU130
 169:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 624              		.loc 1 169 13 is_stmt 0 view .LVU131
 625 0212 FFF7FEFF 		bl	StepDir_getTargetVelocity
 626              	.LVL52:
 169:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 627              		.loc 1 169 11 view .LVU132
 628 0216 2860     		str	r0, [r5]
 629 0218 E2E7     		b	.L19
 630              	.LVL53:
 631              	.L73:
 170:boards/TMC2160_eval.c **** 			StepDir_rotate(motor, *value);
 632              		.loc 1 170 10 is_stmt 1 view .LVU133
 171:boards/TMC2160_eval.c **** 		}
 633              		.loc 1 171 4 view .LVU134
 634 021a 2968     		ldr	r1, [r5]
 635              	.LVL54:
 171:boards/TMC2160_eval.c **** 		}
 636              		.loc 1 171 4 is_stmt 0 view .LVU135
 637 021c 0020     		movs	r0, #0
 638              	.LVL55:
 171:boards/TMC2160_eval.c **** 		}
 639              		.loc 1 171 4 view .LVU136
 640 021e FFF7FEFF 		bl	StepDir_rotate
 641              	.LVL56:
 141:boards/TMC2160_eval.c **** 
 642              		.loc 1 141 11 view .LVU137
 643 0222 0024     		movs	r4, #0
 644 0224 DCE7     		b	.L19
 645              	.LVL57:
 646              	.L66:
 176:boards/TMC2160_eval.c **** 			switch(StepDir_getMode(motor)) {
 647              		.loc 1 176 3 is_stmt 1 view .LVU138
 176:boards/TMC2160_eval.c **** 			switch(StepDir_getMode(motor)) {
 648              		.loc 1 176 5 is_stmt 0 view .LVU139
 649 0226 0028     		cmp	r0, #0
 650 0228 40F07784 		bne	.L146
 177:boards/TMC2160_eval.c **** 			case STEPDIR_INTERNAL:
 651              		.loc 1 177 4 is_stmt 1 view .LVU140
 177:boards/TMC2160_eval.c **** 			case STEPDIR_INTERNAL:
 652              		.loc 1 177 11 is_stmt 0 view .LVU141
 653 022c FFF7FEFF 		bl	StepDir_getMode
 654              	.LVL58:
 177:boards/TMC2160_eval.c **** 			case STEPDIR_INTERNAL:
 655              		.loc 1 177 11 view .LVU142
 656 0230 18B9     		cbnz	r0, .L74
 179:boards/TMC2160_eval.c **** 				break;
 657              		.loc 1 179 5 is_stmt 1 view .LVU143
 179:boards/TMC2160_eval.c **** 				break;
 658              		.loc 1 179 14 is_stmt 0 view .LVU144
 659 0232 FFF7FEFF 		bl	StepDir_getActualVelocity
 660              	.LVL59:
 179:boards/TMC2160_eval.c **** 				break;
 661              		.loc 1 179 12 view .LVU145
 662 0236 2860     		str	r0, [r5]
 180:boards/TMC2160_eval.c **** 			case STEPDIR_EXTERNAL:
 663              		.loc 1 180 5 is_stmt 1 view .LVU146
 664 0238 D2E7     		b	.L19
 665              	.L74:
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 666              		.loc 1 183 5 view .LVU147
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 667              		.loc 1 183 37 is_stmt 0 view .LVU148
 668 023a 2046     		mov	r0, r4
 669 023c FFF7FEFF 		bl	StepDir_getFrequency
 670              	.LVL60:
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 671              		.loc 1 183 92 view .LVU149
 672 0240 1221     		movs	r1, #18
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 673              		.loc 1 183 37 view .LVU150
 674 0242 0646     		mov	r6, r0
 675              	.LBB232:
 676              	.LBI232:
  61:boards/TMC2160_eval.c **** {
 677              		.loc 1 61 31 is_stmt 1 view .LVU151
 678              	.LVL61:
  61:boards/TMC2160_eval.c **** {
 679              		.loc 1 61 31 is_stmt 0 view .LVU152
 680              	.LBE232:
  63:boards/TMC2160_eval.c **** 
 681              		.loc 1 63 2 is_stmt 1 view .LVU153
  65:boards/TMC2160_eval.c **** }
 682              		.loc 1 65 2 view .LVU154
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 683              		.loc 1 183 92 is_stmt 0 view .LVU155
 684 0244 AD48     		ldr	r0, .L162
 685 0246 FFF7FEFF 		bl	tmc2160_readInt
 686              	.LVL62:
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 687              		.loc 1 183 83 view .LVU156
 688 024a C0F31302 		ubfx	r2, r0, #0, #20
 183:boards/TMC2160_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 689              		.loc 1 183 81 view .LVU157
 690 024e 7A20     		movs	r0, #122
 691 0250 D317     		asrs	r3, r2, #31
 692 0252 A6FB0001 		umull	r0, r1, r6, r0
 693 0256 FFF7FEFF 		bl	__aeabi_ldivmod
 694              	.LVL63:
 184:boards/TMC2160_eval.c **** 				break;
 695              		.loc 1 184 5 is_stmt 1 view .LVU158
 184:boards/TMC2160_eval.c **** 				break;
 696              		.loc 1 184 30 is_stmt 0 view .LVU159
 697 025a 00F11303 		add	r3, r0, #19
 184:boards/TMC2160_eval.c **** 				break;
 698              		.loc 1 184 40 view .LVU160
 699 025e 262B     		cmp	r3, #38
 700 0260 98BF     		it	ls
 701 0262 0020     		movls	r0, #0
 702              	.LVL64:
 184:boards/TMC2160_eval.c **** 				break;
 703              		.loc 1 184 12 view .LVU161
 704 0264 2860     		str	r0, [r5]
 185:boards/TMC2160_eval.c **** 			}
 705              		.loc 1 185 5 is_stmt 1 view .LVU162
 706 0266 BBE7     		b	.L19
 707              	.LVL65:
 708              	.L65:
 193:boards/TMC2160_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 709              		.loc 1 193 3 view .LVU163
 193:boards/TMC2160_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 710              		.loc 1 193 5 is_stmt 0 view .LVU164
 711 0268 18B9     		cbnz	r0, .L76
 194:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 712              		.loc 1 194 4 is_stmt 1 view .LVU165
 194:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 713              		.loc 1 194 13 is_stmt 0 view .LVU166
 714 026a FFF7FEFF 		bl	StepDir_getVelocityMax
 715              	.LVL66:
 194:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 716              		.loc 1 194 11 view .LVU167
 717 026e 2860     		str	r0, [r5]
 718 0270 B6E7     		b	.L19
 719              	.LVL67:
 720              	.L76:
 195:boards/TMC2160_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 721              		.loc 1 195 10 is_stmt 1 view .LVU168
 196:boards/TMC2160_eval.c **** 		}
 722              		.loc 1 196 4 view .LVU169
 723 0272 2968     		ldr	r1, [r5]
 724              	.LVL68:
 196:boards/TMC2160_eval.c **** 		}
 725              		.loc 1 196 4 is_stmt 0 view .LVU170
 726 0274 0029     		cmp	r1, #0
 727 0276 B8BF     		it	lt
 728 0278 4942     		rsblt	r1, r1, #0
 729 027a 0020     		movs	r0, #0
 730              	.LVL69:
 196:boards/TMC2160_eval.c **** 		}
 731              		.loc 1 196 4 view .LVU171
 732 027c FFF7FEFF 		bl	StepDir_setVelocityMax
 733              	.LVL70:
 141:boards/TMC2160_eval.c **** 
 734              		.loc 1 141 11 view .LVU172
 735 0280 0024     		movs	r4, #0
 736 0282 ADE7     		b	.L19
 737              	.LVL71:
 738              	.L64:
 201:boards/TMC2160_eval.c **** 			*value = StepDir_getAcceleration(motor);
 739              		.loc 1 201 3 is_stmt 1 view .LVU173
 201:boards/TMC2160_eval.c **** 			*value = StepDir_getAcceleration(motor);
 740              		.loc 1 201 5 is_stmt 0 view .LVU174
 741 0284 18B9     		cbnz	r0, .L77
 202:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 742              		.loc 1 202 4 is_stmt 1 view .LVU175
 202:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 743              		.loc 1 202 13 is_stmt 0 view .LVU176
 744 0286 FFF7FEFF 		bl	StepDir_getAcceleration
 745              	.LVL72:
 202:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 746              		.loc 1 202 11 view .LVU177
 747 028a 2860     		str	r0, [r5]
 748 028c A8E7     		b	.L19
 749              	.LVL73:
 750              	.L77:
 203:boards/TMC2160_eval.c **** 			StepDir_setAcceleration(motor, *value);
 751              		.loc 1 203 10 is_stmt 1 view .LVU178
 204:boards/TMC2160_eval.c **** 		}
 752              		.loc 1 204 4 view .LVU179
 753 028e 2968     		ldr	r1, [r5]
 754              	.LVL74:
 204:boards/TMC2160_eval.c **** 		}
 755              		.loc 1 204 4 is_stmt 0 view .LVU180
 756 0290 0020     		movs	r0, #0
 757              	.LVL75:
 204:boards/TMC2160_eval.c **** 		}
 758              		.loc 1 204 4 view .LVU181
 759 0292 FFF7FEFF 		bl	StepDir_setAcceleration
 760              	.LVL76:
 141:boards/TMC2160_eval.c **** 
 761              		.loc 1 141 11 view .LVU182
 762 0296 0024     		movs	r4, #0
 763 0298 A2E7     		b	.L19
 764              	.LVL77:
 765              	.L63:
 209:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRU
 766              		.loc 1 209 3 is_stmt 1 view .LVU183
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 767              		.loc 1 210 13 is_stmt 0 view .LVU184
 768 029a 9848     		ldr	r0, .L162
 769              	.LVL78:
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 770              		.loc 1 210 13 view .LVU185
 771 029c 1021     		movs	r1, #16
 772              	.LVL79:
 209:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRU
 773              		.loc 1 209 5 view .LVU186
 774 029e 2CB9     		cbnz	r4, .L78
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 775              		.loc 1 210 4 is_stmt 1 view .LVU187
 776              	.LBB233:
 777              	.LBI233:
  61:boards/TMC2160_eval.c **** {
 778              		.loc 1 61 31 view .LVU188
 779              	.LVL80:
  61:boards/TMC2160_eval.c **** {
 780              		.loc 1 61 31 is_stmt 0 view .LVU189
 781              	.LBE233:
  63:boards/TMC2160_eval.c **** 
 782              		.loc 1 63 2 is_stmt 1 view .LVU190
  65:boards/TMC2160_eval.c **** }
 783              		.loc 1 65 2 view .LVU191
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 784              		.loc 1 210 13 is_stmt 0 view .LVU192
 785 02a0 FFF7FEFF 		bl	tmc2160_readInt
 786              	.LVL81:
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 787              		.loc 1 210 13 view .LVU193
 788 02a4 C0F30420 		ubfx	r0, r0, #8, #5
 210:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 789              		.loc 1 210 11 view .LVU194
 790 02a8 2860     		str	r0, [r5]
 791 02aa 99E7     		b	.L19
 792              	.LVL82:
 793              	.L78:
 211:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRUN_SHIFT
 794              		.loc 1 211 10 is_stmt 1 view .LVU195
 212:boards/TMC2160_eval.c **** 		}
 795              		.loc 1 212 4 view .LVU196
 796              	.LBB234:
 797              	.LBI234:
  61:boards/TMC2160_eval.c **** {
 798              		.loc 1 61 31 view .LVU197
  61:boards/TMC2160_eval.c **** {
 799              		.loc 1 61 31 is_stmt 0 view .LVU198
 800              	.LBE234:
  63:boards/TMC2160_eval.c **** 
 801              		.loc 1 63 2 is_stmt 1 view .LVU199
  65:boards/TMC2160_eval.c **** }
 802              		.loc 1 65 2 view .LVU200
 803              	.LBB235:
 804              	.LBI235:
  61:boards/TMC2160_eval.c **** {
 805              		.loc 1 61 31 view .LVU201
  61:boards/TMC2160_eval.c **** {
 806              		.loc 1 61 31 is_stmt 0 view .LVU202
 807              	.LBE235:
  63:boards/TMC2160_eval.c **** 
 808              		.loc 1 63 2 is_stmt 1 view .LVU203
  65:boards/TMC2160_eval.c **** }
 809              		.loc 1 65 2 view .LVU204
 212:boards/TMC2160_eval.c **** 		}
 810              		.loc 1 212 4 is_stmt 0 view .LVU205
 811 02ac FFF7FEFF 		bl	tmc2160_readInt
 812              	.LVL83:
 212:boards/TMC2160_eval.c **** 		}
 813              		.loc 1 212 4 view .LVU206
 814 02b0 2B68     		ldr	r3, [r5]
 815 02b2 1B02     		lsls	r3, r3, #8
 816 02b4 03F4F853 		and	r3, r3, #7936
 817 02b8 20F4F852 		bic	r2, r0, #7936
 818 02bc 1A43     		orrs	r2, r2, r3
 819 02be 8F48     		ldr	r0, .L162
 820 02c0 1021     		movs	r1, #16
 821 02c2 FFF7FEFF 		bl	tmc2160_writeInt
 822              	.LVL84:
 141:boards/TMC2160_eval.c **** 
 823              		.loc 1 141 11 view .LVU207
 824 02c6 0024     		movs	r4, #0
 825 02c8 8AE7     		b	.L19
 826              	.LVL85:
 827              	.L62:
 217:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IH
 828              		.loc 1 217 3 is_stmt 1 view .LVU208
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 829              		.loc 1 218 13 is_stmt 0 view .LVU209
 830 02ca 8C48     		ldr	r0, .L162
 831              	.LVL86:
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 832              		.loc 1 218 13 view .LVU210
 833 02cc 1021     		movs	r1, #16
 834              	.LVL87:
 217:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IH
 835              		.loc 1 217 5 view .LVU211
 836 02ce 2CB9     		cbnz	r4, .L79
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 837              		.loc 1 218 4 is_stmt 1 view .LVU212
 838              	.LBB236:
 839              	.LBI236:
  61:boards/TMC2160_eval.c **** {
 840              		.loc 1 61 31 view .LVU213
 841              	.LVL88:
  61:boards/TMC2160_eval.c **** {
 842              		.loc 1 61 31 is_stmt 0 view .LVU214
 843              	.LBE236:
  63:boards/TMC2160_eval.c **** 
 844              		.loc 1 63 2 is_stmt 1 view .LVU215
  65:boards/TMC2160_eval.c **** }
 845              		.loc 1 65 2 view .LVU216
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 846              		.loc 1 218 13 is_stmt 0 view .LVU217
 847 02d0 FFF7FEFF 		bl	tmc2160_readInt
 848              	.LVL89:
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 849              		.loc 1 218 13 view .LVU218
 850 02d4 00F01F00 		and	r0, r0, #31
 218:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 851              		.loc 1 218 11 view .LVU219
 852 02d8 2860     		str	r0, [r5]
 853 02da 81E7     		b	.L19
 854              	.LVL90:
 855              	.L79:
 219:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHI
 856              		.loc 1 219 10 is_stmt 1 view .LVU220
 220:boards/TMC2160_eval.c **** 		}
 857              		.loc 1 220 4 view .LVU221
 858              	.LBB237:
 859              	.LBI237:
  61:boards/TMC2160_eval.c **** {
 860              		.loc 1 61 31 view .LVU222
  61:boards/TMC2160_eval.c **** {
 861              		.loc 1 61 31 is_stmt 0 view .LVU223
 862              	.LBE237:
  63:boards/TMC2160_eval.c **** 
 863              		.loc 1 63 2 is_stmt 1 view .LVU224
  65:boards/TMC2160_eval.c **** }
 864              		.loc 1 65 2 view .LVU225
 865              	.LBB238:
 866              	.LBI238:
  61:boards/TMC2160_eval.c **** {
 867              		.loc 1 61 31 view .LVU226
  61:boards/TMC2160_eval.c **** {
 868              		.loc 1 61 31 is_stmt 0 view .LVU227
 869              	.LBE238:
  63:boards/TMC2160_eval.c **** 
 870              		.loc 1 63 2 is_stmt 1 view .LVU228
  65:boards/TMC2160_eval.c **** }
 871              		.loc 1 65 2 view .LVU229
 220:boards/TMC2160_eval.c **** 		}
 872              		.loc 1 220 4 is_stmt 0 view .LVU230
 873 02dc FFF7FEFF 		bl	tmc2160_readInt
 874              	.LVL91:
 220:boards/TMC2160_eval.c **** 		}
 875              		.loc 1 220 4 view .LVU231
 876 02e0 2A68     		ldr	r2, [r5]
 877 02e2 20F01F00 		bic	r0, r0, #31
 878 02e6 02F01F02 		and	r2, r2, #31
 879 02ea 0243     		orrs	r2, r2, r0
 880 02ec 1021     		movs	r1, #16
 881 02ee 8348     		ldr	r0, .L162
 882 02f0 FFF7FEFF 		bl	tmc2160_writeInt
 883              	.LVL92:
 141:boards/TMC2160_eval.c **** 
 884              		.loc 1 141 11 view .LVU232
 885 02f4 0024     		movs	r4, #0
 886 02f6 73E7     		b	.L19
 887              	.LVL93:
 888              	.L61:
 225:boards/TMC2160_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 889              		.loc 1 225 3 is_stmt 1 view .LVU233
 225:boards/TMC2160_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 890              		.loc 1 225 5 is_stmt 0 view .LVU234
 891 02f8 0028     		cmp	r0, #0
 892 02fa 40F01184 		bne	.L147
 226:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 893              		.loc 1 226 4 is_stmt 1 view .LVU235
 226:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 894              		.loc 1 226 14 is_stmt 0 view .LVU236
 895 02fe FFF7FEFF 		bl	StepDir_getStatus
 896              	.LVL94:
 226:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 897              		.loc 1 226 66 view .LVU237
 898 0302 C0F30010 		ubfx	r0, r0, #4, #1
 226:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 899              		.loc 1 226 11 view .LVU238
 900 0306 2860     		str	r0, [r5]
 901 0308 6AE7     		b	.L19
 902              	.LVL95:
 903              	.L60:
 234:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 904              		.loc 1 234 3 is_stmt 1 view .LVU239
 234:boards/TMC2160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 905              		.loc 1 234 5 is_stmt 0 view .LVU240
 906 030a 0028     		cmp	r0, #0
 907 030c 00F00B84 		beq	.L148
 236:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPOWERDOWN, *value);
 908              		.loc 1 236 10 is_stmt 1 view .LVU241
 237:boards/TMC2160_eval.c **** 		}
 909              		.loc 1 237 4 view .LVU242
 910              	.LBB239:
 911              	.LBI239:
  61:boards/TMC2160_eval.c **** {
 912              		.loc 1 61 31 view .LVU243
 913              	.LVL96:
  61:boards/TMC2160_eval.c **** {
 914              		.loc 1 61 31 is_stmt 0 view .LVU244
 915              	.LBE239:
  63:boards/TMC2160_eval.c **** 
 916              		.loc 1 63 2 is_stmt 1 view .LVU245
  65:boards/TMC2160_eval.c **** }
 917              		.loc 1 65 2 view .LVU246
 237:boards/TMC2160_eval.c **** 		}
 918              		.loc 1 237 4 is_stmt 0 view .LVU247
 919 0310 2A68     		ldr	r2, [r5]
 920              	.LVL97:
 237:boards/TMC2160_eval.c **** 		}
 921              		.loc 1 237 4 view .LVU248
 922 0312 7A48     		ldr	r0, .L162
 923              	.LVL98:
 237:boards/TMC2160_eval.c **** 		}
 924              		.loc 1 237 4 view .LVU249
 925 0314 1121     		movs	r1, #17
 926              	.LVL99:
 237:boards/TMC2160_eval.c **** 		}
 927              		.loc 1 237 4 view .LVU250
 928 0316 FFF7FEFF 		bl	tmc2160_writeInt
 929              	.LVL100:
 141:boards/TMC2160_eval.c **** 
 930              		.loc 1 141 11 view .LVU251
 931 031a 0024     		movs	r4, #0
 932 031c 60E7     		b	.L19
 933              	.LVL101:
 934              	.L59:
 242:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_THIGH);
 935              		.loc 1 242 3 is_stmt 1 view .LVU252
 242:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_THIGH);
 936              		.loc 1 242 5 is_stmt 0 view .LVU253
 937 031e 80B9     		cbnz	r0, .L80
 243:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 938              		.loc 1 243 4 is_stmt 1 view .LVU254
 939              	.LBB240:
 940              	.LBI240:
  61:boards/TMC2160_eval.c **** {
 941              		.loc 1 61 31 view .LVU255
 942              	.LVL102:
  61:boards/TMC2160_eval.c **** {
 943              		.loc 1 61 31 is_stmt 0 view .LVU256
 944              	.LBE240:
  63:boards/TMC2160_eval.c **** 
 945              		.loc 1 63 2 is_stmt 1 view .LVU257
  65:boards/TMC2160_eval.c **** }
 946              		.loc 1 65 2 view .LVU258
 243:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 947              		.loc 1 243 16 is_stmt 0 view .LVU259
 948 0320 7648     		ldr	r0, .L162
 949              	.LVL103:
 243:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 950              		.loc 1 243 16 view .LVU260
 951 0322 1521     		movs	r1, #21
 952              	.LVL104:
 243:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 953              		.loc 1 243 16 view .LVU261
 954 0324 FFF7FEFF 		bl	tmc2160_readInt
 955              	.LVL105:
 244:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 956              		.loc 1 244 4 is_stmt 1 view .LVU262
 244:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 957              		.loc 1 244 13 is_stmt 0 view .LVU263
 958 0328 0028     		cmp	r0, #0
 244:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 959              		.loc 1 244 13 view .LVU264
 960 032a 08BF     		it	eq
 961 032c 0120     		moveq	r0, #1
 962              	.LVL106:
 244:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 963              		.loc 1 244 13 view .LVU265
 964 032e 4FF08073 		mov	r3, #16777216
 965 0332 93FBF0F0 		sdiv	r0, r3, r0
 244:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 966              		.loc 1 244 11 view .LVU266
 967 0336 724B     		ldr	r3, .L162+4
 968 0338 9842     		cmp	r0, r3
 969 033a D4BF     		ite	le
 970 033c 2860     		strle	r0, [r5]
 971 033e 2B60     		strgt	r3, [r5]
 972 0340 4EE7     		b	.L19
 973              	.LVL107:
 974              	.L80:
 245:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 975              		.loc 1 245 10 is_stmt 1 view .LVU267
 246:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 976              		.loc 1 246 4 view .LVU268
 246:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 977              		.loc 1 246 13 is_stmt 0 view .LVU269
 978 0342 2B68     		ldr	r3, [r5]
 247:boards/TMC2160_eval.c **** 		}
 979              		.loc 1 247 4 view .LVU270
 980 0344 6D48     		ldr	r0, .L162
 981              	.LVL108:
 246:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 982              		.loc 1 246 13 view .LVU271
 983 0346 002B     		cmp	r3, #0
 984 0348 08BF     		it	eq
 985 034a 0123     		moveq	r3, #1
 986 034c 4FF08072 		mov	r2, #16777216
 987              	.LVL109:
 246:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 988              		.loc 1 246 13 view .LVU272
 989 0350 92FBF3F2 		sdiv	r2, r2, r3
 990 0354 6A4B     		ldr	r3, .L162+4
 991 0356 9A42     		cmp	r2, r3
 992 0358 A8BF     		it	ge
 993 035a 1A46     		movge	r2, r3
 246:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
 994              		.loc 1 246 11 view .LVU273
 995 035c 2A60     		str	r2, [r5]
 247:boards/TMC2160_eval.c **** 		}
 996              		.loc 1 247 4 is_stmt 1 view .LVU274
 997              	.LBB241:
 998              	.LBI241:
  61:boards/TMC2160_eval.c **** {
 999              		.loc 1 61 31 view .LVU275
 1000              	.LVL110:
  61:boards/TMC2160_eval.c **** {
 1001              		.loc 1 61 31 is_stmt 0 view .LVU276
 1002              	.LBE241:
  63:boards/TMC2160_eval.c **** 
 1003              		.loc 1 63 2 is_stmt 1 view .LVU277
  65:boards/TMC2160_eval.c **** }
 1004              		.loc 1 65 2 view .LVU278
 247:boards/TMC2160_eval.c **** 		}
 1005              		.loc 1 247 4 is_stmt 0 view .LVU279
 1006 035e 1521     		movs	r1, #21
 1007              	.LVL111:
 247:boards/TMC2160_eval.c **** 		}
 1008              		.loc 1 247 4 view .LVU280
 1009 0360 FFF7FEFF 		bl	tmc2160_writeInt
 1010              	.LVL112:
 141:boards/TMC2160_eval.c **** 
 1011              		.loc 1 141 11 view .LVU281
 1012 0364 0024     		movs	r4, #0
 1013 0366 3BE7     		b	.L19
 1014              	.LVL113:
 1015              	.L58:
 252:boards/TMC2160_eval.c **** 			*value = tmc2160_readInt(motorToIC(motor), TMC2160_VDCMIN);
 1016              		.loc 1 252 3 is_stmt 1 view .LVU282
 252:boards/TMC2160_eval.c **** 			*value = tmc2160_readInt(motorToIC(motor), TMC2160_VDCMIN);
 1017              		.loc 1 252 5 is_stmt 0 view .LVU283
 1018 0368 28B9     		cbnz	r0, .L83
 253:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1019              		.loc 1 253 4 is_stmt 1 view .LVU284
 1020              	.LBB242:
 1021              	.LBI242:
  61:boards/TMC2160_eval.c **** {
 1022              		.loc 1 61 31 view .LVU285
 1023              	.LVL114:
  61:boards/TMC2160_eval.c **** {
 1024              		.loc 1 61 31 is_stmt 0 view .LVU286
 1025              	.LBE242:
  63:boards/TMC2160_eval.c **** 
 1026              		.loc 1 63 2 is_stmt 1 view .LVU287
  65:boards/TMC2160_eval.c **** }
 1027              		.loc 1 65 2 view .LVU288
 253:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1028              		.loc 1 253 13 is_stmt 0 view .LVU289
 1029 036a 6448     		ldr	r0, .L162
 1030              	.LVL115:
 253:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1031              		.loc 1 253 13 view .LVU290
 1032 036c 3321     		movs	r1, #51
 1033              	.LVL116:
 253:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1034              		.loc 1 253 13 view .LVU291
 1035 036e FFF7FEFF 		bl	tmc2160_readInt
 1036              	.LVL117:
 253:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1037              		.loc 1 253 11 view .LVU292
 1038 0372 2860     		str	r0, [r5]
 1039 0374 34E7     		b	.L19
 1040              	.LVL118:
 1041              	.L83:
 254:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_VDCMIN, *value);
 1042              		.loc 1 254 10 is_stmt 1 view .LVU293
 255:boards/TMC2160_eval.c **** 		}
 1043              		.loc 1 255 4 view .LVU294
 1044              	.LBB243:
 1045              	.LBI243:
  61:boards/TMC2160_eval.c **** {
 1046              		.loc 1 61 31 view .LVU295
  61:boards/TMC2160_eval.c **** {
 1047              		.loc 1 61 31 is_stmt 0 view .LVU296
 1048              	.LBE243:
  63:boards/TMC2160_eval.c **** 
 1049              		.loc 1 63 2 is_stmt 1 view .LVU297
  65:boards/TMC2160_eval.c **** }
 1050              		.loc 1 65 2 view .LVU298
 255:boards/TMC2160_eval.c **** 		}
 1051              		.loc 1 255 4 is_stmt 0 view .LVU299
 1052 0376 2A68     		ldr	r2, [r5]
 1053              	.LVL119:
 255:boards/TMC2160_eval.c **** 		}
 1054              		.loc 1 255 4 view .LVU300
 1055 0378 6048     		ldr	r0, .L162
 1056              	.LVL120:
 255:boards/TMC2160_eval.c **** 		}
 1057              		.loc 1 255 4 view .LVU301
 1058 037a 3321     		movs	r1, #51
 1059              	.LVL121:
 255:boards/TMC2160_eval.c **** 		}
 1060              		.loc 1 255 4 view .LVU302
 1061 037c FFF7FEFF 		bl	tmc2160_writeInt
 1062              	.LVL122:
 141:boards/TMC2160_eval.c **** 
 1063              		.loc 1 141 11 view .LVU303
 1064 0380 0024     		movs	r4, #0
 1065 0382 2DE7     		b	.L19
 1066              	.LVL123:
 1067              	.L57:
 260:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VH
 1068              		.loc 1 260 3 is_stmt 1 view .LVU304
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1069              		.loc 1 261 13 is_stmt 0 view .LVU305
 1070 0384 5D48     		ldr	r0, .L162
 1071              	.LVL124:
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1072              		.loc 1 261 13 view .LVU306
 1073 0386 6C21     		movs	r1, #108
 1074              	.LVL125:
 260:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VH
 1075              		.loc 1 260 5 view .LVU307
 1076 0388 2CB9     		cbnz	r4, .L84
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1077              		.loc 1 261 4 is_stmt 1 view .LVU308
 1078              	.LBB244:
 1079              	.LBI244:
  61:boards/TMC2160_eval.c **** {
 1080              		.loc 1 61 31 view .LVU309
 1081              	.LVL126:
  61:boards/TMC2160_eval.c **** {
 1082              		.loc 1 61 31 is_stmt 0 view .LVU310
 1083              	.LBE244:
  63:boards/TMC2160_eval.c **** 
 1084              		.loc 1 63 2 is_stmt 1 view .LVU311
  65:boards/TMC2160_eval.c **** }
 1085              		.loc 1 65 2 view .LVU312
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1086              		.loc 1 261 13 is_stmt 0 view .LVU313
 1087 038a FFF7FEFF 		bl	tmc2160_readInt
 1088              	.LVL127:
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1089              		.loc 1 261 13 view .LVU314
 1090 038e C0F38040 		ubfx	r0, r0, #18, #1
 261:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1091              		.loc 1 261 11 view .LVU315
 1092 0392 2860     		str	r0, [r5]
 1093 0394 24E7     		b	.L19
 1094              	.LVL128:
 1095              	.L84:
 262:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VHIGHFS_S
 1096              		.loc 1 262 10 is_stmt 1 view .LVU316
 263:boards/TMC2160_eval.c **** 		}
 1097              		.loc 1 263 4 view .LVU317
 1098              	.LBB245:
 1099              	.LBI245:
  61:boards/TMC2160_eval.c **** {
 1100              		.loc 1 61 31 view .LVU318
  61:boards/TMC2160_eval.c **** {
 1101              		.loc 1 61 31 is_stmt 0 view .LVU319
 1102              	.LBE245:
  63:boards/TMC2160_eval.c **** 
 1103              		.loc 1 63 2 is_stmt 1 view .LVU320
  65:boards/TMC2160_eval.c **** }
 1104              		.loc 1 65 2 view .LVU321
 1105              	.LBB246:
 1106              	.LBI246:
  61:boards/TMC2160_eval.c **** {
 1107              		.loc 1 61 31 view .LVU322
  61:boards/TMC2160_eval.c **** {
 1108              		.loc 1 61 31 is_stmt 0 view .LVU323
 1109              	.LBE246:
  63:boards/TMC2160_eval.c **** 
 1110              		.loc 1 63 2 is_stmt 1 view .LVU324
  65:boards/TMC2160_eval.c **** }
 1111              		.loc 1 65 2 view .LVU325
 263:boards/TMC2160_eval.c **** 		}
 1112              		.loc 1 263 4 is_stmt 0 view .LVU326
 1113 0396 FFF7FEFF 		bl	tmc2160_readInt
 1114              	.LVL129:
 263:boards/TMC2160_eval.c **** 		}
 1115              		.loc 1 263 4 view .LVU327
 1116 039a 2B68     		ldr	r3, [r5]
 1117 039c 9B04     		lsls	r3, r3, #18
 1118 039e 03F48023 		and	r3, r3, #262144
 1119 03a2 20F48022 		bic	r2, r0, #262144
 1120 03a6 1A43     		orrs	r2, r2, r3
 1121 03a8 5448     		ldr	r0, .L162
 1122 03aa 6C21     		movs	r1, #108
 1123 03ac FFF7FEFF 		bl	tmc2160_writeInt
 1124              	.LVL130:
 141:boards/TMC2160_eval.c **** 
 1125              		.loc 1 141 11 view .LVU328
 1126 03b0 0024     		movs	r4, #0
 1127 03b2 15E7     		b	.L19
 1128              	.LVL131:
 1129              	.L56:
 268:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_V
 1130              		.loc 1 268 3 is_stmt 1 view .LVU329
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1131              		.loc 1 269 13 is_stmt 0 view .LVU330
 1132 03b4 5148     		ldr	r0, .L162
 1133              	.LVL132:
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1134              		.loc 1 269 13 view .LVU331
 1135 03b6 6C21     		movs	r1, #108
 1136              	.LVL133:
 268:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_V
 1137              		.loc 1 268 5 view .LVU332
 1138 03b8 2CB9     		cbnz	r4, .L85
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1139              		.loc 1 269 4 is_stmt 1 view .LVU333
 1140              	.LBB247:
 1141              	.LBI247:
  61:boards/TMC2160_eval.c **** {
 1142              		.loc 1 61 31 view .LVU334
 1143              	.LVL134:
  61:boards/TMC2160_eval.c **** {
 1144              		.loc 1 61 31 is_stmt 0 view .LVU335
 1145              	.LBE247:
  63:boards/TMC2160_eval.c **** 
 1146              		.loc 1 63 2 is_stmt 1 view .LVU336
  65:boards/TMC2160_eval.c **** }
 1147              		.loc 1 65 2 view .LVU337
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1148              		.loc 1 269 13 is_stmt 0 view .LVU338
 1149 03ba FFF7FEFF 		bl	tmc2160_readInt
 1150              	.LVL135:
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1151              		.loc 1 269 13 view .LVU339
 1152 03be C0F3C040 		ubfx	r0, r0, #19, #1
 269:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1153              		.loc 1 269 11 view .LVU340
 1154 03c2 2860     		str	r0, [r5]
 1155 03c4 0CE7     		b	.L19
 1156              	.LVL136:
 1157              	.L85:
 270:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_VHIGHCHM
 1158              		.loc 1 270 10 is_stmt 1 view .LVU341
 271:boards/TMC2160_eval.c **** 		}
 1159              		.loc 1 271 4 view .LVU342
 1160              	.LBB248:
 1161              	.LBI248:
  61:boards/TMC2160_eval.c **** {
 1162              		.loc 1 61 31 view .LVU343
  61:boards/TMC2160_eval.c **** {
 1163              		.loc 1 61 31 is_stmt 0 view .LVU344
 1164              	.LBE248:
  63:boards/TMC2160_eval.c **** 
 1165              		.loc 1 63 2 is_stmt 1 view .LVU345
  65:boards/TMC2160_eval.c **** }
 1166              		.loc 1 65 2 view .LVU346
 1167              	.LBB249:
 1168              	.LBI249:
  61:boards/TMC2160_eval.c **** {
 1169              		.loc 1 61 31 view .LVU347
  61:boards/TMC2160_eval.c **** {
 1170              		.loc 1 61 31 is_stmt 0 view .LVU348
 1171              	.LBE249:
  63:boards/TMC2160_eval.c **** 
 1172              		.loc 1 63 2 is_stmt 1 view .LVU349
  65:boards/TMC2160_eval.c **** }
 1173              		.loc 1 65 2 view .LVU350
 271:boards/TMC2160_eval.c **** 		}
 1174              		.loc 1 271 4 is_stmt 0 view .LVU351
 1175 03c6 FFF7FEFF 		bl	tmc2160_readInt
 1176              	.LVL137:
 271:boards/TMC2160_eval.c **** 		}
 1177              		.loc 1 271 4 view .LVU352
 1178 03ca 2B68     		ldr	r3, [r5]
 1179 03cc DB04     		lsls	r3, r3, #19
 1180 03ce 03F40023 		and	r3, r3, #524288
 1181 03d2 20F40022 		bic	r2, r0, #524288
 1182 03d6 1A43     		orrs	r2, r2, r3
 1183 03d8 4848     		ldr	r0, .L162
 1184 03da 6C21     		movs	r1, #108
 1185 03dc FFF7FEFF 		bl	tmc2160_writeInt
 1186              	.LVL138:
 141:boards/TMC2160_eval.c **** 
 1187              		.loc 1 141 11 view .LVU353
 1188 03e0 0024     		movs	r4, #0
 1189 03e2 FDE6     		b	.L19
 1190              	.LVL139:
 1191              	.L55:
 276:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC21
 1192              		.loc 1 276 3 is_stmt 1 view .LVU354
 276:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC21
 1193              		.loc 1 276 5 is_stmt 0 view .LVU355
 1194 03e4 38B9     		cbnz	r0, .L86
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1195              		.loc 1 277 4 is_stmt 1 view .LVU356
 1196              	.LBB250:
 1197              	.LBI250:
  61:boards/TMC2160_eval.c **** {
 1198              		.loc 1 61 31 view .LVU357
 1199              	.LVL140:
  61:boards/TMC2160_eval.c **** {
 1200              		.loc 1 61 31 is_stmt 0 view .LVU358
 1201              	.LBE250:
  63:boards/TMC2160_eval.c **** 
 1202              		.loc 1 63 2 is_stmt 1 view .LVU359
  65:boards/TMC2160_eval.c **** }
 1203              		.loc 1 65 2 view .LVU360
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1204              		.loc 1 277 13 is_stmt 0 view .LVU361
 1205 03e6 0146     		mov	r1, r0
 1206              	.LVL141:
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1207              		.loc 1 277 13 view .LVU362
 1208 03e8 4448     		ldr	r0, .L162
 1209              	.LVL142:
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1210              		.loc 1 277 13 view .LVU363
 1211 03ea FFF7FEFF 		bl	tmc2160_readInt
 1212              	.LVL143:
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1213              		.loc 1 277 13 view .LVU364
 1214 03ee C0F34000 		ubfx	r0, r0, #1, #1
 277:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1215              		.loc 1 277 11 view .LVU365
 1216 03f2 2860     		str	r0, [r5]
 1217 03f4 F4E6     		b	.L19
 1218              	.LVL144:
 1219              	.L86:
 278:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC2160_INTE
 1220              		.loc 1 278 10 is_stmt 1 view .LVU366
 279:boards/TMC2160_eval.c **** 		}
 1221              		.loc 1 279 4 view .LVU367
 1222              	.LBB251:
 1223              	.LBI251:
  61:boards/TMC2160_eval.c **** {
 1224              		.loc 1 61 31 view .LVU368
  61:boards/TMC2160_eval.c **** {
 1225              		.loc 1 61 31 is_stmt 0 view .LVU369
 1226              	.LBE251:
  63:boards/TMC2160_eval.c **** 
 1227              		.loc 1 63 2 is_stmt 1 view .LVU370
  65:boards/TMC2160_eval.c **** }
 1228              		.loc 1 65 2 view .LVU371
 1229              	.LBB252:
 1230              	.LBI252:
  61:boards/TMC2160_eval.c **** {
 1231              		.loc 1 61 31 view .LVU372
  61:boards/TMC2160_eval.c **** {
 1232              		.loc 1 61 31 is_stmt 0 view .LVU373
 1233              	.LBE252:
  63:boards/TMC2160_eval.c **** 
 1234              		.loc 1 63 2 is_stmt 1 view .LVU374
  65:boards/TMC2160_eval.c **** }
 1235              		.loc 1 65 2 view .LVU375
 279:boards/TMC2160_eval.c **** 		}
 1236              		.loc 1 279 4 is_stmt 0 view .LVU376
 1237 03f6 0021     		movs	r1, #0
 1238              	.LVL145:
 279:boards/TMC2160_eval.c **** 		}
 1239              		.loc 1 279 4 view .LVU377
 1240 03f8 4048     		ldr	r0, .L162
 1241              	.LVL146:
 279:boards/TMC2160_eval.c **** 		}
 1242              		.loc 1 279 4 view .LVU378
 1243 03fa FFF7FEFF 		bl	tmc2160_readInt
 1244              	.LVL147:
 279:boards/TMC2160_eval.c **** 		}
 1245              		.loc 1 279 4 view .LVU379
 1246 03fe 2B68     		ldr	r3, [r5]
 1247 0400 5B00     		lsls	r3, r3, #1
 1248 0402 03F00203 		and	r3, r3, #2
 1249 0406 20F00202 		bic	r2, r0, #2
 1250 040a 1A43     		orrs	r2, r2, r3
 1251 040c 3B48     		ldr	r0, .L162
 1252 040e 0021     		movs	r1, #0
 1253 0410 FFF7FEFF 		bl	tmc2160_writeInt
 1254              	.LVL148:
 141:boards/TMC2160_eval.c **** 
 1255              		.loc 1 141 11 view .LVU380
 1256 0414 0024     		movs	r4, #0
 1257 0416 E3E6     		b	.L19
 1258              	.LVL149:
 1259              	.L54:
 284:boards/TMC2160_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_F
 1260              		.loc 1 284 3 is_stmt 1 view .LVU381
 284:boards/TMC2160_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_F
 1261              		.loc 1 284 5 is_stmt 0 view .LVU382
 1262 0418 0028     		cmp	r0, #0
 1263 041a 40F08783 		bne	.L150
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1264              		.loc 1 285 4 is_stmt 1 view .LVU383
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1265              		.loc 1 285 36 is_stmt 0 view .LVU384
 1266 041e FFF7FEFF 		bl	StepDir_getFrequency
 1267              	.LVL150:
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1268              		.loc 1 285 91 view .LVU385
 1269 0422 1221     		movs	r1, #18
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1270              		.loc 1 285 36 view .LVU386
 1271 0424 0646     		mov	r6, r0
 1272              	.LBB253:
 1273              	.LBI253:
  61:boards/TMC2160_eval.c **** {
 1274              		.loc 1 61 31 is_stmt 1 view .LVU387
 1275              	.LVL151:
  61:boards/TMC2160_eval.c **** {
 1276              		.loc 1 61 31 is_stmt 0 view .LVU388
 1277              	.LBE253:
  63:boards/TMC2160_eval.c **** 
 1278              		.loc 1 63 2 is_stmt 1 view .LVU389
  65:boards/TMC2160_eval.c **** }
 1279              		.loc 1 65 2 view .LVU390
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1280              		.loc 1 285 91 is_stmt 0 view .LVU391
 1281 0426 3548     		ldr	r0, .L162
 1282 0428 FFF7FEFF 		bl	tmc2160_readInt
 1283              	.LVL152:
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1284              		.loc 1 285 82 view .LVU392
 1285 042c C0F31302 		ubfx	r2, r0, #0, #20
 285:boards/TMC2160_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1286              		.loc 1 285 80 view .LVU393
 1287 0430 7A20     		movs	r0, #122
 1288 0432 D317     		asrs	r3, r2, #31
 1289 0434 A6FB0001 		umull	r0, r1, r6, r0
 1290 0438 FFF7FEFF 		bl	__aeabi_ldivmod
 1291              	.LVL153:
 286:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1292              		.loc 1 286 4 is_stmt 1 view .LVU394
 286:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1293              		.loc 1 286 29 is_stmt 0 view .LVU395
 1294 043c 00F11303 		add	r3, r0, #19
 286:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1295              		.loc 1 286 39 view .LVU396
 1296 0440 262B     		cmp	r3, #38
 1297 0442 98BF     		it	ls
 1298 0444 0020     		movls	r0, #0
 1299              	.LVL154:
 286:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1300              		.loc 1 286 11 view .LVU397
 1301 0446 2860     		str	r0, [r5]
 1302 0448 CAE6     		b	.L19
 1303              	.LVL155:
 1304              	.L53:
 292:boards/TMC2160_eval.c **** 			*value = StepDir_getMode(motor);
 1305              		.loc 1 292 3 is_stmt 1 view .LVU398
 292:boards/TMC2160_eval.c **** 			*value = StepDir_getMode(motor);
 1306              		.loc 1 292 5 is_stmt 0 view .LVU399
 1307 044a 18B9     		cbnz	r0, .L88
 293:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1308              		.loc 1 293 4 is_stmt 1 view .LVU400
 293:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1309              		.loc 1 293 13 is_stmt 0 view .LVU401
 1310 044c FFF7FEFF 		bl	StepDir_getMode
 1311              	.LVL156:
 293:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1312              		.loc 1 293 13 view .LVU402
 1313 0450 2860     		str	r0, [r5]
 1314 0452 C5E6     		b	.L19
 1315              	.LVL157:
 1316              	.L88:
 294:boards/TMC2160_eval.c **** 			StepDir_setMode(motor, *value);
 1317              		.loc 1 294 10 is_stmt 1 view .LVU403
 295:boards/TMC2160_eval.c **** 		}
 1318              		.loc 1 295 4 view .LVU404
 1319 0454 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1320              	.LVL158:
 295:boards/TMC2160_eval.c **** 		}
 1321              		.loc 1 295 4 is_stmt 0 view .LVU405
 1322 0456 0020     		movs	r0, #0
 1323              	.LVL159:
 295:boards/TMC2160_eval.c **** 		}
 1324              		.loc 1 295 4 view .LVU406
 1325 0458 FFF7FEFF 		bl	StepDir_setMode
 1326              	.LVL160:
 141:boards/TMC2160_eval.c **** 
 1327              		.loc 1 141 11 view .LVU407
 1328 045c 0024     		movs	r4, #0
 1329 045e BFE6     		b	.L19
 1330              	.LVL161:
 1331              	.L51:
 299:boards/TMC2160_eval.c **** 			*value = StepDir_getFrequency(motor);
 1332              		.loc 1 299 3 is_stmt 1 view .LVU408
 299:boards/TMC2160_eval.c **** 			*value = StepDir_getFrequency(motor);
 1333              		.loc 1 299 5 is_stmt 0 view .LVU409
 1334 0460 18B9     		cbnz	r0, .L89
 300:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1335              		.loc 1 300 4 is_stmt 1 view .LVU410
 300:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1336              		.loc 1 300 13 is_stmt 0 view .LVU411
 1337 0462 FFF7FEFF 		bl	StepDir_getFrequency
 1338              	.LVL162:
 300:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1339              		.loc 1 300 11 view .LVU412
 1340 0466 2860     		str	r0, [r5]
 1341 0468 BAE6     		b	.L19
 1342              	.LVL163:
 1343              	.L89:
 301:boards/TMC2160_eval.c **** 			StepDir_setFrequency(motor, *value);
 1344              		.loc 1 301 10 is_stmt 1 view .LVU413
 302:boards/TMC2160_eval.c **** 		}
 1345              		.loc 1 302 4 view .LVU414
 1346 046a 2968     		ldr	r1, [r5]
 1347              	.LVL164:
 302:boards/TMC2160_eval.c **** 		}
 1348              		.loc 1 302 4 is_stmt 0 view .LVU415
 1349 046c 0020     		movs	r0, #0
 1350              	.LVL165:
 302:boards/TMC2160_eval.c **** 		}
 1351              		.loc 1 302 4 view .LVU416
 1352 046e FFF7FEFF 		bl	StepDir_setFrequency
 1353              	.LVL166:
 141:boards/TMC2160_eval.c **** 
 1354              		.loc 1 141 11 view .LVU417
 1355 0472 0024     		movs	r4, #0
 1356 0474 B4E6     		b	.L19
 1357              	.LVL167:
 1358              	.L50:
 307:boards/TMC2160_eval.c **** 			*value = 256 >> TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC216
 1359              		.loc 1 307 3 is_stmt 1 view .LVU418
 307:boards/TMC2160_eval.c **** 			*value = 256 >> TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC216
 1360              		.loc 1 307 5 is_stmt 0 view .LVU419
 1361 0476 54B9     		cbnz	r4, .L90
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1362              		.loc 1 308 4 is_stmt 1 view .LVU420
 1363              	.LBB254:
 1364              	.LBI254:
  61:boards/TMC2160_eval.c **** {
 1365              		.loc 1 61 31 view .LVU421
 1366              	.LVL168:
  61:boards/TMC2160_eval.c **** {
 1367              		.loc 1 61 31 is_stmt 0 view .LVU422
 1368              	.LBE254:
  63:boards/TMC2160_eval.c **** 
 1369              		.loc 1 63 2 is_stmt 1 view .LVU423
  65:boards/TMC2160_eval.c **** }
 1370              		.loc 1 65 2 view .LVU424
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1371              		.loc 1 308 20 is_stmt 0 view .LVU425
 1372 0478 2048     		ldr	r0, .L162
 1373              	.LVL169:
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1374              		.loc 1 308 20 view .LVU426
 1375 047a 6C21     		movs	r1, #108
 1376              	.LVL170:
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1377              		.loc 1 308 20 view .LVU427
 1378 047c FFF7FEFF 		bl	tmc2160_readInt
 1379              	.LVL171:
 1380 0480 C0F30363 		ubfx	r3, r0, #24, #4
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1381              		.loc 1 308 17 view .LVU428
 1382 0484 4FF48070 		mov	r0, #256
 1383 0488 1841     		asrs	r0, r0, r3
 308:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1384              		.loc 1 308 11 view .LVU429
 1385 048a 2860     		str	r0, [r5]
 1386 048c A8E6     		b	.L19
 1387              	.LVL172:
 1388              	.L90:
 309:boards/TMC2160_eval.c **** 			switch(*value)
 1389              		.loc 1 309 10 is_stmt 1 view .LVU430
 310:boards/TMC2160_eval.c **** 			{
 1390              		.loc 1 310 4 view .LVU431
 310:boards/TMC2160_eval.c **** 			{
 1391              		.loc 1 310 11 is_stmt 0 view .LVU432
 1392 048e 2B68     		ldr	r3, [r5]
 1393 0490 102B     		cmp	r3, #16
 1394 0492 39D0     		beq	.L91
 1395 0494 0ADC     		bgt	.L92
 1396 0496 013B     		subs	r3, r3, #1
 1397 0498 072B     		cmp	r3, #7
 1398 049a 0ED8     		bhi	.L93
 1399 049c 072B     		cmp	r3, #7
 1400 049e 0CD8     		bhi	.L93
 1401 04a0 DFE803F0 		tbb	[pc, r3]
 1402              	.L95:
 1403 04a4 15       		.byte	(.L98-.L95)/2
 1404 04a5 28       		.byte	(.L97-.L95)/2
 1405 04a6 0B       		.byte	(.L93-.L95)/2
 1406 04a7 2A       		.byte	(.L96-.L95)/2
 1407 04a8 0B       		.byte	(.L93-.L95)/2
 1408 04a9 0B       		.byte	(.L93-.L95)/2
 1409 04aa 0B       		.byte	(.L93-.L95)/2
 1410 04ab 30       		.byte	(.L94-.L95)/2
 1411              		.p2align 1
 1412              	.L92:
 1413 04ac 802B     		cmp	r3, #128
 1414 04ae 31D0     		beq	.L99
 1415 04b0 08DC     		bgt	.L100
 1416 04b2 202B     		cmp	r3, #32
 1417 04b4 2AD0     		beq	.L101
 1418 04b6 402B     		cmp	r3, #64
 1419 04b8 2AD0     		beq	.L102
 1420              	.L93:
 321:boards/TMC2160_eval.c **** 			}
 1421              		.loc 1 321 15 is_stmt 1 view .LVU433
 321:boards/TMC2160_eval.c **** 			}
 1422              		.loc 1 321 22 is_stmt 0 view .LVU434
 1423 04ba 4FF0FF33 		mov	r3, #-1
 1424 04be 2B60     		str	r3, [r5]
 321:boards/TMC2160_eval.c **** 			}
 1425              		.loc 1 321 29 is_stmt 1 view .LVU435
 324:boards/TMC2160_eval.c **** 			{
 1426              		.loc 1 324 4 view .LVU436
 330:boards/TMC2160_eval.c **** 			}
 1427              		.loc 1 330 12 is_stmt 0 view .LVU437
 1428 04c0 1024     		movs	r4, #16
 1429 04c2 8DE6     		b	.L19
 1430              	.L100:
 330:boards/TMC2160_eval.c **** 			}
 1431              		.loc 1 330 12 view .LVU438
 1432 04c4 B3F5807F 		cmp	r3, #256
 1433 04c8 F7D1     		bne	.L93
 320:boards/TMC2160_eval.c **** 			default:   *value = -1;  break;
 1434              		.loc 1 320 15 is_stmt 1 view .LVU439
 320:boards/TMC2160_eval.c **** 			default:   *value = -1;  break;
 1435              		.loc 1 320 22 is_stmt 0 view .LVU440
 1436 04ca 0023     		movs	r3, #0
 1437 04cc 00E0     		b	.L161
 1438              	.L98:
 312:boards/TMC2160_eval.c **** 			case 2:    *value = 7;   break;
 1439              		.loc 1 312 15 is_stmt 1 view .LVU441
 312:boards/TMC2160_eval.c **** 			case 2:    *value = 7;   break;
 1440              		.loc 1 312 22 is_stmt 0 view .LVU442
 1441 04ce 0823     		movs	r3, #8
 1442              	.L161:
 320:boards/TMC2160_eval.c **** 			default:   *value = -1;  break;
 1443              		.loc 1 320 22 view .LVU443
 1444 04d0 2B60     		str	r3, [r5]
 320:boards/TMC2160_eval.c **** 			default:   *value = -1;  break;
 1445              		.loc 1 320 29 is_stmt 1 view .LVU444
 324:boards/TMC2160_eval.c **** 			{
 1446              		.loc 1 324 4 view .LVU445
 326:boards/TMC2160_eval.c **** 			}
 1447              		.loc 1 326 5 view .LVU446
 1448              	.LBB255:
 1449              	.LBI255:
  61:boards/TMC2160_eval.c **** {
 1450              		.loc 1 61 31 view .LVU447
 1451              	.LVL173:
  61:boards/TMC2160_eval.c **** {
 1452              		.loc 1 61 31 is_stmt 0 view .LVU448
 1453              	.LBE255:
  63:boards/TMC2160_eval.c **** 
 1454              		.loc 1 63 2 is_stmt 1 view .LVU449
  65:boards/TMC2160_eval.c **** }
 1455              		.loc 1 65 2 view .LVU450
 1456              	.LBB256:
 1457              	.LBI256:
  61:boards/TMC2160_eval.c **** {
 1458              		.loc 1 61 31 view .LVU451
  61:boards/TMC2160_eval.c **** {
 1459              		.loc 1 61 31 is_stmt 0 view .LVU452
 1460              	.LBE256:
  63:boards/TMC2160_eval.c **** 
 1461              		.loc 1 63 2 is_stmt 1 view .LVU453
  65:boards/TMC2160_eval.c **** }
 1462              		.loc 1 65 2 view .LVU454
 326:boards/TMC2160_eval.c **** 			}
 1463              		.loc 1 326 5 is_stmt 0 view .LVU455
 1464 04d2 6C21     		movs	r1, #108
 1465              	.LVL174:
 326:boards/TMC2160_eval.c **** 			}
 1466              		.loc 1 326 5 view .LVU456
 1467 04d4 0948     		ldr	r0, .L162
 1468              	.LVL175:
 326:boards/TMC2160_eval.c **** 			}
 1469              		.loc 1 326 5 view .LVU457
 1470 04d6 FFF7FEFF 		bl	tmc2160_readInt
 1471              	.LVL176:
 1472 04da 2B68     		ldr	r3, [r5]
 1473 04dc 1B06     		lsls	r3, r3, #24
 1474 04de 03F07063 		and	r3, r3, #251658240
 1475 04e2 20F07062 		bic	r2, r0, #251658240
 1476 04e6 1A43     		orrs	r2, r2, r3
 1477 04e8 0448     		ldr	r0, .L162
 1478 04ea 6C21     		movs	r1, #108
 1479 04ec FFF7FEFF 		bl	tmc2160_writeInt
 1480              	.LVL177:
 141:boards/TMC2160_eval.c **** 
 1481              		.loc 1 141 11 view .LVU458
 1482 04f0 0024     		movs	r4, #0
 1483 04f2 75E6     		b	.L19
 1484              	.LVL178:
 1485              	.L97:
 313:boards/TMC2160_eval.c **** 			case 4:    *value = 6;   break;
 1486              		.loc 1 313 15 is_stmt 1 view .LVU459
 313:boards/TMC2160_eval.c **** 			case 4:    *value = 6;   break;
 1487              		.loc 1 313 22 is_stmt 0 view .LVU460
 1488 04f4 0723     		movs	r3, #7
 1489 04f6 EBE7     		b	.L161
 1490              	.L96:
 314:boards/TMC2160_eval.c **** 			case 8:    *value = 5;   break;
 1491              		.loc 1 314 15 is_stmt 1 view .LVU461
 314:boards/TMC2160_eval.c **** 			case 8:    *value = 5;   break;
 1492              		.loc 1 314 22 is_stmt 0 view .LVU462
 1493 04f8 0623     		movs	r3, #6
 1494 04fa E9E7     		b	.L161
 1495              	.L163:
 1496              		.align	2
 1497              	.L162:
 1498 04fc 00000000 		.word	TMC2160
 1499 0500 FFFF0F00 		.word	1048575
 1500              	.L94:
 315:boards/TMC2160_eval.c **** 			case 16:   *value = 4;   break;
 1501              		.loc 1 315 15 is_stmt 1 view .LVU463
 315:boards/TMC2160_eval.c **** 			case 16:   *value = 4;   break;
 1502              		.loc 1 315 22 is_stmt 0 view .LVU464
 1503 0504 0523     		movs	r3, #5
 1504 0506 E3E7     		b	.L161
 1505              	.L91:
 316:boards/TMC2160_eval.c **** 			case 32:   *value = 3;   break;
 1506              		.loc 1 316 15 is_stmt 1 view .LVU465
 316:boards/TMC2160_eval.c **** 			case 32:   *value = 3;   break;
 1507              		.loc 1 316 22 is_stmt 0 view .LVU466
 1508 0508 0423     		movs	r3, #4
 1509 050a E1E7     		b	.L161
 1510              	.L101:
 317:boards/TMC2160_eval.c **** 			case 64:   *value = 2;   break;
 1511              		.loc 1 317 15 is_stmt 1 view .LVU467
 317:boards/TMC2160_eval.c **** 			case 64:   *value = 2;   break;
 1512              		.loc 1 317 22 is_stmt 0 view .LVU468
 1513 050c 0323     		movs	r3, #3
 1514 050e DFE7     		b	.L161
 1515              	.L102:
 318:boards/TMC2160_eval.c **** 			case 128:  *value = 1;   break;
 1516              		.loc 1 318 15 is_stmt 1 view .LVU469
 318:boards/TMC2160_eval.c **** 			case 128:  *value = 1;   break;
 1517              		.loc 1 318 22 is_stmt 0 view .LVU470
 1518 0510 0223     		movs	r3, #2
 1519 0512 DDE7     		b	.L161
 1520              	.L99:
 319:boards/TMC2160_eval.c **** 			case 256:  *value = 0;   break;
 1521              		.loc 1 319 15 is_stmt 1 view .LVU471
 319:boards/TMC2160_eval.c **** 			case 256:  *value = 0;   break;
 1522              		.loc 1 319 22 is_stmt 0 view .LVU472
 1523 0514 0123     		movs	r3, #1
 1524 0516 DBE7     		b	.L161
 1525              	.L49:
 336:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SH
 1526              		.loc 1 336 3 is_stmt 1 view .LVU473
 337:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1527              		.loc 1 337 13 is_stmt 0 view .LVU474
 1528 0518 BA48     		ldr	r0, .L164
 1529              	.LVL179:
 337:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1530              		.loc 1 337 13 view .LVU475
 1531 051a 6C21     		movs	r1, #108
 1532              	.LVL180:
 336:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SH
 1533              		.loc 1 336 5 view .LVU476
 1534 051c 2CB9     		cbnz	r4, .L105
 337:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1535              		.loc 1 337 4 is_stmt 1 view .LVU477
 1536              	.LBB257:
 1537              	.LBI257:
  61:boards/TMC2160_eval.c **** {
 1538              		.loc 1 61 31 view .LVU478
 1539              	.LVL181:
  61:boards/TMC2160_eval.c **** {
 1540              		.loc 1 61 31 is_stmt 0 view .LVU479
 1541              	.LBE257:
  63:boards/TMC2160_eval.c **** 
 1542              		.loc 1 63 2 is_stmt 1 view .LVU480
  65:boards/TMC2160_eval.c **** }
 1543              		.loc 1 65 2 view .LVU481
 337:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1544              		.loc 1 337 13 is_stmt 0 view .LVU482
 1545 051e FFF7FEFF 		bl	tmc2160_readInt
 1546              	.LVL182:
 1547 0522 C0F3C130 		ubfx	r0, r0, #15, #2
 337:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1548              		.loc 1 337 11 view .LVU483
 1549 0526 2860     		str	r0, [r5]
 1550 0528 5AE6     		b	.L19
 1551              	.LVL183:
 1552              	.L105:
 338:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SHIFT, *v
 1553              		.loc 1 338 10 is_stmt 1 view .LVU484
 339:boards/TMC2160_eval.c **** 		}
 1554              		.loc 1 339 4 view .LVU485
 1555              	.LBB258:
 1556              	.LBI258:
  61:boards/TMC2160_eval.c **** {
 1557              		.loc 1 61 31 view .LVU486
  61:boards/TMC2160_eval.c **** {
 1558              		.loc 1 61 31 is_stmt 0 view .LVU487
 1559              	.LBE258:
  63:boards/TMC2160_eval.c **** 
 1560              		.loc 1 63 2 is_stmt 1 view .LVU488
  65:boards/TMC2160_eval.c **** }
 1561              		.loc 1 65 2 view .LVU489
 1562              	.LBB259:
 1563              	.LBI259:
  61:boards/TMC2160_eval.c **** {
 1564              		.loc 1 61 31 view .LVU490
  61:boards/TMC2160_eval.c **** {
 1565              		.loc 1 61 31 is_stmt 0 view .LVU491
 1566              	.LBE259:
  63:boards/TMC2160_eval.c **** 
 1567              		.loc 1 63 2 is_stmt 1 view .LVU492
  65:boards/TMC2160_eval.c **** }
 1568              		.loc 1 65 2 view .LVU493
 339:boards/TMC2160_eval.c **** 		}
 1569              		.loc 1 339 4 is_stmt 0 view .LVU494
 1570 052a FFF7FEFF 		bl	tmc2160_readInt
 1571              	.LVL184:
 1572 052e 2B68     		ldr	r3, [r5]
 1573 0530 DB03     		lsls	r3, r3, #15
 1574 0532 03F4C033 		and	r3, r3, #98304
 1575 0536 20F4C032 		bic	r2, r0, #98304
 1576 053a 1A43     		orrs	r2, r2, r3
 1577 053c B148     		ldr	r0, .L164
 1578 053e 6C21     		movs	r1, #108
 1579 0540 FFF7FEFF 		bl	tmc2160_writeInt
 1580              	.LVL185:
 141:boards/TMC2160_eval.c **** 
 1581              		.loc 1 141 11 view .LVU495
 1582 0544 0024     		movs	r4, #0
 1583 0546 4BE6     		b	.L19
 1584              	.LVL186:
 1585              	.L48:
 344:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SH
 1586              		.loc 1 344 3 is_stmt 1 view .LVU496
 345:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1587              		.loc 1 345 13 is_stmt 0 view .LVU497
 1588 0548 AE48     		ldr	r0, .L164
 1589              	.LVL187:
 345:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1590              		.loc 1 345 13 view .LVU498
 1591 054a 6C21     		movs	r1, #108
 1592              	.LVL188:
 344:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SH
 1593              		.loc 1 344 5 view .LVU499
 1594 054c 2CB9     		cbnz	r4, .L106
 345:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1595              		.loc 1 345 4 is_stmt 1 view .LVU500
 1596              	.LBB260:
 1597              	.LBI260:
  61:boards/TMC2160_eval.c **** {
 1598              		.loc 1 61 31 view .LVU501
 1599              	.LVL189:
  61:boards/TMC2160_eval.c **** {
 1600              		.loc 1 61 31 is_stmt 0 view .LVU502
 1601              	.LBE260:
  63:boards/TMC2160_eval.c **** 
 1602              		.loc 1 63 2 is_stmt 1 view .LVU503
  65:boards/TMC2160_eval.c **** }
 1603              		.loc 1 65 2 view .LVU504
 345:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1604              		.loc 1 345 13 is_stmt 0 view .LVU505
 1605 054e FFF7FEFF 		bl	tmc2160_readInt
 1606              	.LVL190:
 1607 0552 C0F38030 		ubfx	r0, r0, #14, #1
 345:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1608              		.loc 1 345 11 view .LVU506
 1609 0556 2860     		str	r0, [r5]
 1610 0558 42E6     		b	.L19
 1611              	.LVL191:
 1612              	.L106:
 346:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SHIFT, *v
 1613              		.loc 1 346 10 is_stmt 1 view .LVU507
 347:boards/TMC2160_eval.c **** 		}
 1614              		.loc 1 347 4 view .LVU508
 1615              	.LBB261:
 1616              	.LBI261:
  61:boards/TMC2160_eval.c **** {
 1617              		.loc 1 61 31 view .LVU509
  61:boards/TMC2160_eval.c **** {
 1618              		.loc 1 61 31 is_stmt 0 view .LVU510
 1619              	.LBE261:
  63:boards/TMC2160_eval.c **** 
 1620              		.loc 1 63 2 is_stmt 1 view .LVU511
  65:boards/TMC2160_eval.c **** }
 1621              		.loc 1 65 2 view .LVU512
 1622              	.LBB262:
 1623              	.LBI262:
  61:boards/TMC2160_eval.c **** {
 1624              		.loc 1 61 31 view .LVU513
  61:boards/TMC2160_eval.c **** {
 1625              		.loc 1 61 31 is_stmt 0 view .LVU514
 1626              	.LBE262:
  63:boards/TMC2160_eval.c **** 
 1627              		.loc 1 63 2 is_stmt 1 view .LVU515
  65:boards/TMC2160_eval.c **** }
 1628              		.loc 1 65 2 view .LVU516
 347:boards/TMC2160_eval.c **** 		}
 1629              		.loc 1 347 4 is_stmt 0 view .LVU517
 1630 055a FFF7FEFF 		bl	tmc2160_readInt
 1631              	.LVL192:
 1632 055e 2B68     		ldr	r3, [r5]
 1633 0560 9B03     		lsls	r3, r3, #14
 1634 0562 03F48043 		and	r3, r3, #16384
 1635 0566 20F48042 		bic	r2, r0, #16384
 1636 056a 1A43     		orrs	r2, r2, r3
 1637 056c A548     		ldr	r0, .L164
 1638 056e 6C21     		movs	r1, #108
 1639 0570 FFF7FEFF 		bl	tmc2160_writeInt
 1640              	.LVL193:
 141:boards/TMC2160_eval.c **** 
 1641              		.loc 1 141 11 view .LVU518
 1642 0574 0024     		movs	r4, #0
 1643 0576 33E6     		b	.L19
 1644              	.LVL194:
 1645              	.L47:
 352:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DI
 1646              		.loc 1 352 3 is_stmt 1 view .LVU519
 353:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1647              		.loc 1 353 13 is_stmt 0 view .LVU520
 1648 0578 A248     		ldr	r0, .L164
 1649              	.LVL195:
 353:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1650              		.loc 1 353 13 view .LVU521
 1651 057a 6C21     		movs	r1, #108
 1652              	.LVL196:
 352:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DI
 1653              		.loc 1 352 5 view .LVU522
 1654 057c 2CB9     		cbnz	r4, .L107
 353:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1655              		.loc 1 353 4 is_stmt 1 view .LVU523
 1656              	.LBB263:
 1657              	.LBI263:
  61:boards/TMC2160_eval.c **** {
 1658              		.loc 1 61 31 view .LVU524
 1659              	.LVL197:
  61:boards/TMC2160_eval.c **** {
 1660              		.loc 1 61 31 is_stmt 0 view .LVU525
 1661              	.LBE263:
  63:boards/TMC2160_eval.c **** 
 1662              		.loc 1 63 2 is_stmt 1 view .LVU526
  65:boards/TMC2160_eval.c **** }
 1663              		.loc 1 65 2 view .LVU527
 353:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1664              		.loc 1 353 13 is_stmt 0 view .LVU528
 1665 057e FFF7FEFF 		bl	tmc2160_readInt
 1666              	.LVL198:
 1667 0582 C0F30030 		ubfx	r0, r0, #12, #1
 353:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 1668              		.loc 1 353 11 view .LVU529
 1669 0586 2860     		str	r0, [r5]
 1670 0588 2AE6     		b	.L19
 1671              	.LVL199:
 1672              	.L107:
 354:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DISFDCC_S
 1673              		.loc 1 354 10 is_stmt 1 view .LVU530
 355:boards/TMC2160_eval.c **** 		}
 1674              		.loc 1 355 4 view .LVU531
 1675              	.LBB264:
 1676              	.LBI264:
  61:boards/TMC2160_eval.c **** {
 1677              		.loc 1 61 31 view .LVU532
  61:boards/TMC2160_eval.c **** {
 1678              		.loc 1 61 31 is_stmt 0 view .LVU533
 1679              	.LBE264:
  63:boards/TMC2160_eval.c **** 
 1680              		.loc 1 63 2 is_stmt 1 view .LVU534
  65:boards/TMC2160_eval.c **** }
 1681              		.loc 1 65 2 view .LVU535
 1682              	.LBB265:
 1683              	.LBI265:
  61:boards/TMC2160_eval.c **** {
 1684              		.loc 1 61 31 view .LVU536
  61:boards/TMC2160_eval.c **** {
 1685              		.loc 1 61 31 is_stmt 0 view .LVU537
 1686              	.LBE265:
  63:boards/TMC2160_eval.c **** 
 1687              		.loc 1 63 2 is_stmt 1 view .LVU538
  65:boards/TMC2160_eval.c **** }
 1688              		.loc 1 65 2 view .LVU539
 355:boards/TMC2160_eval.c **** 		}
 1689              		.loc 1 355 4 is_stmt 0 view .LVU540
 1690 058a FFF7FEFF 		bl	tmc2160_readInt
 1691              	.LVL200:
 1692 058e 2B68     		ldr	r3, [r5]
 1693 0590 1B03     		lsls	r3, r3, #12
 1694 0592 03F48053 		and	r3, r3, #4096
 1695 0596 20F48052 		bic	r2, r0, #4096
 1696 059a 1A43     		orrs	r2, r2, r3
 1697 059c 9948     		ldr	r0, .L164
 1698 059e 6C21     		movs	r1, #108
 1699 05a0 FFF7FEFF 		bl	tmc2160_writeInt
 1700              	.LVL201:
 141:boards/TMC2160_eval.c **** 
 1701              		.loc 1 141 11 view .LVU541
 1702 05a4 0024     		movs	r4, #0
 1703 05a6 1BE6     		b	.L19
 1704              	.LVL202:
 1705              	.L46:
 360:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 1706              		.loc 1 360 3 is_stmt 1 view .LVU542
 361:boards/TMC2160_eval.c **** 			{
 1707              		.loc 1 361 7 is_stmt 0 view .LVU543
 1708 05a8 9648     		ldr	r0, .L164
 1709              	.LVL203:
 361:boards/TMC2160_eval.c **** 			{
 1710              		.loc 1 361 7 view .LVU544
 1711 05aa 6C21     		movs	r1, #108
 1712              	.LVL204:
 360:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 1713              		.loc 1 360 5 view .LVU545
 1714 05ac FCB9     		cbnz	r4, .L108
 361:boards/TMC2160_eval.c **** 			{
 1715              		.loc 1 361 4 is_stmt 1 view .LVU546
 1716              	.LBB266:
 1717              	.LBI266:
  61:boards/TMC2160_eval.c **** {
 1718              		.loc 1 61 31 view .LVU547
 1719              	.LVL205:
  61:boards/TMC2160_eval.c **** {
 1720              		.loc 1 61 31 is_stmt 0 view .LVU548
 1721              	.LBE266:
  63:boards/TMC2160_eval.c **** 
 1722              		.loc 1 63 2 is_stmt 1 view .LVU549
  65:boards/TMC2160_eval.c **** }
 1723              		.loc 1 65 2 view .LVU550
 361:boards/TMC2160_eval.c **** 			{
 1724              		.loc 1 361 7 is_stmt 0 view .LVU551
 1725 05ae FFF7FEFF 		bl	tmc2160_readInt
 1726              	.LVL206:
 361:boards/TMC2160_eval.c **** 			{
 1727              		.loc 1 361 6 view .LVU552
 1728 05b2 10F4804F 		tst	r0, #16384
 363:boards/TMC2160_eval.c **** 			}
 1729              		.loc 1 363 14 view .LVU553
 1730 05b6 4FF06C01 		mov	r1, #108
 1731 05ba 9248     		ldr	r0, .L164
 361:boards/TMC2160_eval.c **** 			{
 1732              		.loc 1 361 6 view .LVU554
 1733 05bc 05D0     		beq	.L109
 363:boards/TMC2160_eval.c **** 			}
 1734              		.loc 1 363 5 is_stmt 1 view .LVU555
 1735              	.LBB267:
 1736              	.LBI267:
  61:boards/TMC2160_eval.c **** {
 1737              		.loc 1 61 31 view .LVU556
 1738              	.LVL207:
  61:boards/TMC2160_eval.c **** {
 1739              		.loc 1 61 31 is_stmt 0 view .LVU557
 1740              	.LBE267:
  63:boards/TMC2160_eval.c **** 
 1741              		.loc 1 63 2 is_stmt 1 view .LVU558
  65:boards/TMC2160_eval.c **** }
 1742              		.loc 1 65 2 view .LVU559
 363:boards/TMC2160_eval.c **** 			}
 1743              		.loc 1 363 14 is_stmt 0 view .LVU560
 1744 05be FFF7FEFF 		bl	tmc2160_readInt
 1745              	.LVL208:
 1746 05c2 C0F3C310 		ubfx	r0, r0, #7, #4
 363:boards/TMC2160_eval.c **** 			}
 1747              		.loc 1 363 12 view .LVU561
 1748 05c6 2860     		str	r0, [r5]
 1749 05c8 0AE6     		b	.L19
 1750              	.LVL209:
 1751              	.L109:
 367:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
 1752              		.loc 1 367 5 is_stmt 1 view .LVU562
 1753              	.LBB268:
 1754              	.LBI268:
  61:boards/TMC2160_eval.c **** {
 1755              		.loc 1 61 31 view .LVU563
  61:boards/TMC2160_eval.c **** {
 1756              		.loc 1 61 31 is_stmt 0 view .LVU564
 1757              	.LBE268:
  63:boards/TMC2160_eval.c **** 
 1758              		.loc 1 63 2 is_stmt 1 view .LVU565
  65:boards/TMC2160_eval.c **** }
 1759              		.loc 1 65 2 view .LVU566
 367:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
 1760              		.loc 1 367 17 is_stmt 0 view .LVU567
 1761 05ca FFF7FEFF 		bl	tmc2160_readInt
 1762              	.LVL210:
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1763              		.loc 1 368 15 view .LVU568
 1764 05ce 6C21     		movs	r1, #108
 367:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
 1765              		.loc 1 367 17 view .LVU569
 1766 05d0 0646     		mov	r6, r0
 1767              	.LVL211:
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1768              		.loc 1 368 5 is_stmt 1 view .LVU570
 1769              	.LBB269:
 1770              	.LBI269:
  61:boards/TMC2160_eval.c **** {
 1771              		.loc 1 61 31 view .LVU571
  61:boards/TMC2160_eval.c **** {
 1772              		.loc 1 61 31 is_stmt 0 view .LVU572
 1773              	.LBE269:
  63:boards/TMC2160_eval.c **** 
 1774              		.loc 1 63 2 is_stmt 1 view .LVU573
  65:boards/TMC2160_eval.c **** }
 1775              		.loc 1 65 2 view .LVU574
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1776              		.loc 1 368 15 is_stmt 0 view .LVU575
 1777 05d2 8C48     		ldr	r0, .L164
 1778              	.LVL212:
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1779              		.loc 1 368 15 view .LVU576
 1780 05d4 FFF7FEFF 		bl	tmc2160_readInt
 1781              	.LVL213:
 369:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 1782              		.loc 1 369 7 view .LVU577
 1783 05d8 3105     		lsls	r1, r6, #20
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1784              		.loc 1 368 73 view .LVU578
 1785 05da C0F30213 		ubfx	r3, r0, #4, #3
 369:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 1786              		.loc 1 369 5 is_stmt 1 view .LVU579
 369:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 1787              		.loc 1 369 7 is_stmt 0 view .LVU580
 1788 05de 02D4     		bmi	.L110
 1789              	.LVL214:
 1790              	.L160:
 368:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1791              		.loc 1 368 12 view .LVU581
 1792 05e0 2B60     		str	r3, [r5]
 141:boards/TMC2160_eval.c **** 
 1793              		.loc 1 141 11 view .LVU582
 1794 05e2 0024     		movs	r4, #0
 1795 05e4 FCE5     		b	.L19
 1796              	.LVL215:
 1797              	.L110:
 370:boards/TMC2160_eval.c **** 			}
 1798              		.loc 1 370 6 is_stmt 1 view .LVU583
 370:boards/TMC2160_eval.c **** 			}
 1799              		.loc 1 370 13 is_stmt 0 view .LVU584
 1800 05e6 43F00803 		orr	r3, r3, #8
 1801 05ea 2B60     		str	r3, [r5]
 1802 05ec F8E5     		b	.L19
 1803              	.LVL216:
 1804              	.L108:
 372:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 1805              		.loc 1 372 10 is_stmt 1 view .LVU585
 373:boards/TMC2160_eval.c **** 			{
 1806              		.loc 1 373 4 view .LVU586
 1807              	.LBB270:
 1808              	.LBI270:
  61:boards/TMC2160_eval.c **** {
 1809              		.loc 1 61 31 view .LVU587
  61:boards/TMC2160_eval.c **** {
 1810              		.loc 1 61 31 is_stmt 0 view .LVU588
 1811              	.LBE270:
  63:boards/TMC2160_eval.c **** 
 1812              		.loc 1 63 2 is_stmt 1 view .LVU589
  65:boards/TMC2160_eval.c **** }
 1813              		.loc 1 65 2 view .LVU590
 373:boards/TMC2160_eval.c **** 			{
 1814              		.loc 1 373 7 is_stmt 0 view .LVU591
 1815 05ee FFF7FEFF 		bl	tmc2160_readInt
 1816              	.LVL217:
 373:boards/TMC2160_eval.c **** 			{
 1817              		.loc 1 373 6 view .LVU592
 1818 05f2 10F48044 		ands	r4, r0, #16384
 375:boards/TMC2160_eval.c **** 			}
 1819              		.loc 1 375 5 view .LVU593
 1820 05f6 4FF06C01 		mov	r1, #108
 1821 05fa 8248     		ldr	r0, .L164
 373:boards/TMC2160_eval.c **** 			{
 1822              		.loc 1 373 6 view .LVU594
 1823 05fc 0ED0     		beq	.L111
 375:boards/TMC2160_eval.c **** 			}
 1824              		.loc 1 375 5 is_stmt 1 view .LVU595
 1825              	.LBB271:
 1826              	.LBI271:
  61:boards/TMC2160_eval.c **** {
 1827              		.loc 1 61 31 view .LVU596
 1828              	.LVL218:
  61:boards/TMC2160_eval.c **** {
 1829              		.loc 1 61 31 is_stmt 0 view .LVU597
 1830              	.LBE271:
  63:boards/TMC2160_eval.c **** 
 1831              		.loc 1 63 2 is_stmt 1 view .LVU598
  65:boards/TMC2160_eval.c **** }
 1832              		.loc 1 65 2 view .LVU599
 1833              	.LBB272:
 1834              	.LBI272:
  61:boards/TMC2160_eval.c **** {
 1835              		.loc 1 61 31 view .LVU600
  61:boards/TMC2160_eval.c **** {
 1836              		.loc 1 61 31 is_stmt 0 view .LVU601
 1837              	.LBE272:
  63:boards/TMC2160_eval.c **** 
 1838              		.loc 1 63 2 is_stmt 1 view .LVU602
  65:boards/TMC2160_eval.c **** }
 1839              		.loc 1 65 2 view .LVU603
 375:boards/TMC2160_eval.c **** 			}
 1840              		.loc 1 375 5 is_stmt 0 view .LVU604
 1841 05fe FFF7FEFF 		bl	tmc2160_readInt
 1842              	.LVL219:
 1843 0602 2B68     		ldr	r3, [r5]
 1844 0604 DB01     		lsls	r3, r3, #7
 1845 0606 03F4F063 		and	r3, r3, #1920
 1846 060a 20F4F062 		bic	r2, r0, #1920
 1847 060e 1A43     		orrs	r2, r2, r3
 1848 0610 7C48     		ldr	r0, .L164
 1849 0612 6C21     		movs	r1, #108
 1850 0614 FFF7FEFF 		bl	tmc2160_writeInt
 1851              	.LVL220:
 141:boards/TMC2160_eval.c **** 
 1852              		.loc 1 141 11 view .LVU605
 1853 0618 0024     		movs	r4, #0
 1854 061a E1E5     		b	.L19
 1855              	.LVL221:
 1856              	.L111:
 379:boards/TMC2160_eval.c **** 
 1857              		.loc 1 379 5 is_stmt 1 view .LVU606
 1858              	.LBB273:
 1859              	.LBI273:
  61:boards/TMC2160_eval.c **** {
 1860              		.loc 1 61 31 view .LVU607
  61:boards/TMC2160_eval.c **** {
 1861              		.loc 1 61 31 is_stmt 0 view .LVU608
 1862              	.LBE273:
  63:boards/TMC2160_eval.c **** 
 1863              		.loc 1 63 2 is_stmt 1 view .LVU609
  65:boards/TMC2160_eval.c **** }
 1864              		.loc 1 65 2 view .LVU610
 379:boards/TMC2160_eval.c **** 
 1865              		.loc 1 379 17 is_stmt 0 view .LVU611
 1866 061c FFF7FEFF 		bl	tmc2160_readInt
 1867              	.LVL222:
 381:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_ALL_MASK, TMC2160_TFD_ALL_
 1868              		.loc 1 381 5 is_stmt 1 view .LVU612
 1869              	.LBB274:
 1870              	.LBI274:
  61:boards/TMC2160_eval.c **** {
 1871              		.loc 1 61 31 view .LVU613
  61:boards/TMC2160_eval.c **** {
 1872              		.loc 1 61 31 is_stmt 0 view .LVU614
 1873              	.LBE274:
  63:boards/TMC2160_eval.c **** 
 1874              		.loc 1 63 2 is_stmt 1 view .LVU615
  65:boards/TMC2160_eval.c **** }
 1875              		.loc 1 65 2 view .LVU616
 1876              	.LBB275:
 1877              	.LBI275:
  61:boards/TMC2160_eval.c **** {
 1878              		.loc 1 61 31 view .LVU617
  61:boards/TMC2160_eval.c **** {
 1879              		.loc 1 61 31 is_stmt 0 view .LVU618
 1880              	.LBE275:
  63:boards/TMC2160_eval.c **** 
 1881              		.loc 1 63 2 is_stmt 1 view .LVU619
  65:boards/TMC2160_eval.c **** }
 1882              		.loc 1 65 2 view .LVU620
 381:boards/TMC2160_eval.c **** 				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_ALL_MASK, TMC2160_TFD_ALL_
 1883              		.loc 1 381 5 is_stmt 0 view .LVU621
 1884 0620 6C21     		movs	r1, #108
 1885 0622 7848     		ldr	r0, .L164
 1886 0624 FFF7FEFF 		bl	tmc2160_readInt
 1887              	.LVL223:
 1888 0628 2B68     		ldr	r3, [r5]
 1889 062a 1B02     		lsls	r3, r3, #8
 1890 062c 03F40063 		and	r3, r3, #2048
 1891 0630 20F40062 		bic	r2, r0, #2048
 1892 0634 1A43     		orrs	r2, r2, r3
 1893 0636 7348     		ldr	r0, .L164
 1894 0638 6C21     		movs	r1, #108
 1895 063a FFF7FEFF 		bl	tmc2160_writeInt
 1896              	.LVL224:
 382:boards/TMC2160_eval.c **** 			}
 1897              		.loc 1 382 5 is_stmt 1 view .LVU622
 1898              	.LBB276:
 1899              	.LBI276:
  61:boards/TMC2160_eval.c **** {
 1900              		.loc 1 61 31 view .LVU623
  61:boards/TMC2160_eval.c **** {
 1901              		.loc 1 61 31 is_stmt 0 view .LVU624
 1902              	.LBE276:
  63:boards/TMC2160_eval.c **** 
 1903              		.loc 1 63 2 is_stmt 1 view .LVU625
  65:boards/TMC2160_eval.c **** }
 1904              		.loc 1 65 2 view .LVU626
 1905              	.LBB277:
 1906              	.LBI277:
  61:boards/TMC2160_eval.c **** {
 1907              		.loc 1 61 31 view .LVU627
  61:boards/TMC2160_eval.c **** {
 1908              		.loc 1 61 31 is_stmt 0 view .LVU628
 1909              	.LBE277:
  63:boards/TMC2160_eval.c **** 
 1910              		.loc 1 63 2 is_stmt 1 view .LVU629
  65:boards/TMC2160_eval.c **** }
 1911              		.loc 1 65 2 view .LVU630
 382:boards/TMC2160_eval.c **** 			}
 1912              		.loc 1 382 5 is_stmt 0 view .LVU631
 1913 063e 6C21     		movs	r1, #108
 1914 0640 7048     		ldr	r0, .L164
 1915 0642 FFF7FEFF 		bl	tmc2160_readInt
 1916              	.LVL225:
 1917 0646 2B68     		ldr	r3, [r5]
 1918 0648 1B01     		lsls	r3, r3, #4
 1919 064a 03F07003 		and	r3, r3, #112
 1920 064e 20F07002 		bic	r2, r0, #112
 1921 0652 1A43     		orrs	r2, r2, r3
 1922 0654 6B48     		ldr	r0, .L164
 1923 0656 6C21     		movs	r1, #108
 1924 0658 FFF7FEFF 		bl	tmc2160_writeInt
 1925              	.LVL226:
 1926 065c C0E5     		b	.L19
 1927              	.LVL227:
 1928              	.L45:
 388:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 1929              		.loc 1 388 3 is_stmt 1 view .LVU632
 389:boards/TMC2160_eval.c **** 			{
 1930              		.loc 1 389 7 is_stmt 0 view .LVU633
 1931 065e 6948     		ldr	r0, .L164
 1932              	.LVL228:
 389:boards/TMC2160_eval.c **** 			{
 1933              		.loc 1 389 7 view .LVU634
 1934 0660 6C21     		movs	r1, #108
 1935              	.LVL229:
 388:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 1936              		.loc 1 388 5 view .LVU635
 1937 0662 E4B9     		cbnz	r4, .L112
 389:boards/TMC2160_eval.c **** 			{
 1938              		.loc 1 389 4 is_stmt 1 view .LVU636
 1939              	.LBB278:
 1940              	.LBI278:
  61:boards/TMC2160_eval.c **** {
 1941              		.loc 1 61 31 view .LVU637
 1942              	.LVL230:
  61:boards/TMC2160_eval.c **** {
 1943              		.loc 1 61 31 is_stmt 0 view .LVU638
 1944              	.LBE278:
  63:boards/TMC2160_eval.c **** 
 1945              		.loc 1 63 2 is_stmt 1 view .LVU639
  65:boards/TMC2160_eval.c **** }
 1946              		.loc 1 65 2 view .LVU640
 389:boards/TMC2160_eval.c **** 			{
 1947              		.loc 1 389 7 is_stmt 0 view .LVU641
 1948 0664 FFF7FEFF 		bl	tmc2160_readInt
 1949              	.LVL231:
 389:boards/TMC2160_eval.c **** 			{
 1950              		.loc 1 389 6 view .LVU642
 1951 0668 10F4804F 		tst	r0, #16384
 391:boards/TMC2160_eval.c **** 			}
 1952              		.loc 1 391 14 view .LVU643
 1953 066c 4FF06C01 		mov	r1, #108
 1954 0670 6448     		ldr	r0, .L164
 389:boards/TMC2160_eval.c **** 			{
 1955              		.loc 1 389 6 view .LVU644
 1956 0672 05D0     		beq	.L113
 391:boards/TMC2160_eval.c **** 			}
 1957              		.loc 1 391 5 is_stmt 1 view .LVU645
 1958              	.LBB279:
 1959              	.LBI279:
  61:boards/TMC2160_eval.c **** {
 1960              		.loc 1 61 31 view .LVU646
 1961              	.LVL232:
  61:boards/TMC2160_eval.c **** {
 1962              		.loc 1 61 31 is_stmt 0 view .LVU647
 1963              	.LBE279:
  63:boards/TMC2160_eval.c **** 
 1964              		.loc 1 63 2 is_stmt 1 view .LVU648
  65:boards/TMC2160_eval.c **** }
 1965              		.loc 1 65 2 view .LVU649
 391:boards/TMC2160_eval.c **** 			}
 1966              		.loc 1 391 14 is_stmt 0 view .LVU650
 1967 0674 FFF7FEFF 		bl	tmc2160_readInt
 1968              	.LVL233:
 1969 0678 C0F30210 		ubfx	r0, r0, #4, #3
 391:boards/TMC2160_eval.c **** 			}
 1970              		.loc 1 391 12 view .LVU651
 1971 067c 2860     		str	r0, [r5]
 1972 067e AFE5     		b	.L19
 1973              	.LVL234:
 1974              	.L113:
 395:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
 1975              		.loc 1 395 5 is_stmt 1 view .LVU652
 1976              	.LBB280:
 1977              	.LBI280:
  61:boards/TMC2160_eval.c **** {
 1978              		.loc 1 61 31 view .LVU653
  61:boards/TMC2160_eval.c **** {
 1979              		.loc 1 61 31 is_stmt 0 view .LVU654
 1980              	.LBE280:
  63:boards/TMC2160_eval.c **** 
 1981              		.loc 1 63 2 is_stmt 1 view .LVU655
  65:boards/TMC2160_eval.c **** }
 1982              		.loc 1 65 2 view .LVU656
 395:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
 1983              		.loc 1 395 17 is_stmt 0 view .LVU657
 1984 0680 FFF7FEFF 		bl	tmc2160_readInt
 1985              	.LVL235:
 396:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1986              		.loc 1 396 15 view .LVU658
 1987 0684 6C21     		movs	r1, #108
 395:boards/TMC2160_eval.c **** 				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
 1988              		.loc 1 395 17 view .LVU659
 1989 0686 0646     		mov	r6, r0
 1990              	.LVL236:
 396:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1991              		.loc 1 396 5 is_stmt 1 view .LVU660
 1992              	.LBB281:
 1993              	.LBI281:
  61:boards/TMC2160_eval.c **** {
 1994              		.loc 1 61 31 view .LVU661
  61:boards/TMC2160_eval.c **** {
 1995              		.loc 1 61 31 is_stmt 0 view .LVU662
 1996              	.LBE281:
  63:boards/TMC2160_eval.c **** 
 1997              		.loc 1 63 2 is_stmt 1 view .LVU663
  65:boards/TMC2160_eval.c **** }
 1998              		.loc 1 65 2 view .LVU664
 396:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 1999              		.loc 1 396 15 is_stmt 0 view .LVU665
 2000 0688 5E48     		ldr	r0, .L164
 2001              	.LVL237:
 396:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 2002              		.loc 1 396 15 view .LVU666
 2003 068a FFF7FEFF 		bl	tmc2160_readInt
 2004              	.LVL238:
 397:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 2005              		.loc 1 397 7 view .LVU667
 2006 068e 3205     		lsls	r2, r6, #20
 396:boards/TMC2160_eval.c **** 				if(tempValue & (1<<11))
 2007              		.loc 1 396 73 view .LVU668
 2008 0690 C0F3C313 		ubfx	r3, r0, #7, #4
 397:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 2009              		.loc 1 397 5 is_stmt 1 view .LVU669
 397:boards/TMC2160_eval.c **** 					*value |= 1<<3;
 2010              		.loc 1 397 7 is_stmt 0 view .LVU670
 2011 0694 A4D5     		bpl	.L160
 398:boards/TMC2160_eval.c **** 			}
 2012              		.loc 1 398 6 is_stmt 1 view .LVU671
 398:boards/TMC2160_eval.c **** 			}
 2013              		.loc 1 398 13 is_stmt 0 view .LVU672
 2014 0696 43F00803 		orr	r3, r3, #8
 2015 069a 2B60     		str	r3, [r5]
 2016 069c A0E5     		b	.L19
 2017              	.LVL239:
 2018              	.L112:
 400:boards/TMC2160_eval.c **** 			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
 2019              		.loc 1 400 10 is_stmt 1 view .LVU673
 401:boards/TMC2160_eval.c **** 			{
 2020              		.loc 1 401 4 view .LVU674
 2021              	.LBB282:
 2022              	.LBI282:
  61:boards/TMC2160_eval.c **** {
 2023              		.loc 1 61 31 view .LVU675
  61:boards/TMC2160_eval.c **** {
 2024              		.loc 1 61 31 is_stmt 0 view .LVU676
 2025              	.LBE282:
  63:boards/TMC2160_eval.c **** 
 2026              		.loc 1 63 2 is_stmt 1 view .LVU677
  65:boards/TMC2160_eval.c **** }
 2027              		.loc 1 65 2 view .LVU678
 401:boards/TMC2160_eval.c **** 			{
 2028              		.loc 1 401 7 is_stmt 0 view .LVU679
 2029 069e FFF7FEFF 		bl	tmc2160_readInt
 2030              	.LVL240:
 401:boards/TMC2160_eval.c **** 			{
 2031              		.loc 1 401 6 view .LVU680
 2032 06a2 10F48044 		ands	r4, r0, #16384
 403:boards/TMC2160_eval.c **** 			}
 2033              		.loc 1 403 5 view .LVU681
 2034 06a6 4FF06C01 		mov	r1, #108
 2035 06aa 5648     		ldr	r0, .L164
 401:boards/TMC2160_eval.c **** 			{
 2036              		.loc 1 401 6 view .LVU682
 2037 06ac 0ED0     		beq	.L116
 403:boards/TMC2160_eval.c **** 			}
 2038              		.loc 1 403 5 is_stmt 1 view .LVU683
 2039              	.LBB283:
 2040              	.LBI283:
  61:boards/TMC2160_eval.c **** {
 2041              		.loc 1 61 31 view .LVU684
 2042              	.LVL241:
  61:boards/TMC2160_eval.c **** {
 2043              		.loc 1 61 31 is_stmt 0 view .LVU685
 2044              	.LBE283:
  63:boards/TMC2160_eval.c **** 
 2045              		.loc 1 63 2 is_stmt 1 view .LVU686
  65:boards/TMC2160_eval.c **** }
 2046              		.loc 1 65 2 view .LVU687
 2047              	.LBB284:
 2048              	.LBI284:
  61:boards/TMC2160_eval.c **** {
 2049              		.loc 1 61 31 view .LVU688
  61:boards/TMC2160_eval.c **** {
 2050              		.loc 1 61 31 is_stmt 0 view .LVU689
 2051              	.LBE284:
  63:boards/TMC2160_eval.c **** 
 2052              		.loc 1 63 2 is_stmt 1 view .LVU690
  65:boards/TMC2160_eval.c **** }
 2053              		.loc 1 65 2 view .LVU691
 403:boards/TMC2160_eval.c **** 			}
 2054              		.loc 1 403 5 is_stmt 0 view .LVU692
 2055 06ae FFF7FEFF 		bl	tmc2160_readInt
 2056              	.LVL242:
 2057 06b2 2B68     		ldr	r3, [r5]
 2058 06b4 1B01     		lsls	r3, r3, #4
 2059 06b6 03F07003 		and	r3, r3, #112
 2060 06ba 20F07002 		bic	r2, r0, #112
 2061 06be 1A43     		orrs	r2, r2, r3
 2062 06c0 5048     		ldr	r0, .L164
 2063 06c2 6C21     		movs	r1, #108
 2064 06c4 FFF7FEFF 		bl	tmc2160_writeInt
 2065              	.LVL243:
 141:boards/TMC2160_eval.c **** 
 2066              		.loc 1 141 11 view .LVU693
 2067 06c8 0024     		movs	r4, #0
 2068 06ca 89E5     		b	.L19
 2069              	.LVL244:
 2070              	.L116:
 407:boards/TMC2160_eval.c **** 			}
 2071              		.loc 1 407 5 is_stmt 1 view .LVU694
 2072              	.LBB285:
 2073              	.LBI285:
  61:boards/TMC2160_eval.c **** {
 2074              		.loc 1 61 31 view .LVU695
  61:boards/TMC2160_eval.c **** {
 2075              		.loc 1 61 31 is_stmt 0 view .LVU696
 2076              	.LBE285:
  63:boards/TMC2160_eval.c **** 
 2077              		.loc 1 63 2 is_stmt 1 view .LVU697
  65:boards/TMC2160_eval.c **** }
 2078              		.loc 1 65 2 view .LVU698
 2079              	.LBB286:
 2080              	.LBI286:
  61:boards/TMC2160_eval.c **** {
 2081              		.loc 1 61 31 view .LVU699
  61:boards/TMC2160_eval.c **** {
 2082              		.loc 1 61 31 is_stmt 0 view .LVU700
 2083              	.LBE286:
  63:boards/TMC2160_eval.c **** 
 2084              		.loc 1 63 2 is_stmt 1 view .LVU701
  65:boards/TMC2160_eval.c **** }
 2085              		.loc 1 65 2 view .LVU702
 407:boards/TMC2160_eval.c **** 			}
 2086              		.loc 1 407 5 is_stmt 0 view .LVU703
 2087 06cc FFF7FEFF 		bl	tmc2160_readInt
 2088              	.LVL245:
 2089 06d0 2B68     		ldr	r3, [r5]
 2090 06d2 DB01     		lsls	r3, r3, #7
 2091 06d4 03F4F063 		and	r3, r3, #1920
 2092 06d8 20F4F062 		bic	r2, r0, #1920
 2093 06dc 1A43     		orrs	r2, r2, r3
 2094 06de 4948     		ldr	r0, .L164
 2095 06e0 6C21     		movs	r1, #108
 2096 06e2 FFF7FEFF 		bl	tmc2160_writeInt
 2097              	.LVL246:
 2098 06e6 7BE5     		b	.L19
 2099              	.LVL247:
 2100              	.L44:
 413:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_
 2101              		.loc 1 413 3 is_stmt 1 view .LVU704
 414:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2102              		.loc 1 414 13 is_stmt 0 view .LVU705
 2103 06e8 4648     		ldr	r0, .L164
 2104              	.LVL248:
 414:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2105              		.loc 1 414 13 view .LVU706
 2106 06ea 6C21     		movs	r1, #108
 2107              	.LVL249:
 413:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_
 2108              		.loc 1 413 5 view .LVU707
 2109 06ec 2CB9     		cbnz	r4, .L117
 414:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2110              		.loc 1 414 4 is_stmt 1 view .LVU708
 2111              	.LBB287:
 2112              	.LBI287:
  61:boards/TMC2160_eval.c **** {
 2113              		.loc 1 61 31 view .LVU709
 2114              	.LVL250:
  61:boards/TMC2160_eval.c **** {
 2115              		.loc 1 61 31 is_stmt 0 view .LVU710
 2116              	.LBE287:
  63:boards/TMC2160_eval.c **** 
 2117              		.loc 1 63 2 is_stmt 1 view .LVU711
  65:boards/TMC2160_eval.c **** }
 2118              		.loc 1 65 2 view .LVU712
 414:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2119              		.loc 1 414 13 is_stmt 0 view .LVU713
 2120 06ee FFF7FEFF 		bl	tmc2160_readInt
 2121              	.LVL251:
 2122 06f2 00F00F00 		and	r0, r0, #15
 414:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2123              		.loc 1 414 11 view .LVU714
 2124 06f6 2860     		str	r0, [r5]
 2125 06f8 72E5     		b	.L19
 2126              	.LVL252:
 2127              	.L117:
 415:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_SHIFT, 
 2128              		.loc 1 415 10 is_stmt 1 view .LVU715
 416:boards/TMC2160_eval.c **** 		}
 2129              		.loc 1 416 4 view .LVU716
 2130              	.LBB288:
 2131              	.LBI288:
  61:boards/TMC2160_eval.c **** {
 2132              		.loc 1 61 31 view .LVU717
  61:boards/TMC2160_eval.c **** {
 2133              		.loc 1 61 31 is_stmt 0 view .LVU718
 2134              	.LBE288:
  63:boards/TMC2160_eval.c **** 
 2135              		.loc 1 63 2 is_stmt 1 view .LVU719
  65:boards/TMC2160_eval.c **** }
 2136              		.loc 1 65 2 view .LVU720
 2137              	.LBB289:
 2138              	.LBI289:
  61:boards/TMC2160_eval.c **** {
 2139              		.loc 1 61 31 view .LVU721
  61:boards/TMC2160_eval.c **** {
 2140              		.loc 1 61 31 is_stmt 0 view .LVU722
 2141              	.LBE289:
  63:boards/TMC2160_eval.c **** 
 2142              		.loc 1 63 2 is_stmt 1 view .LVU723
  65:boards/TMC2160_eval.c **** }
 2143              		.loc 1 65 2 view .LVU724
 416:boards/TMC2160_eval.c **** 		}
 2144              		.loc 1 416 4 is_stmt 0 view .LVU725
 2145 06fa FFF7FEFF 		bl	tmc2160_readInt
 2146              	.LVL253:
 2147 06fe 2A68     		ldr	r2, [r5]
 2148 0700 20F00F00 		bic	r0, r0, #15
 2149 0704 02F00F02 		and	r2, r2, #15
 2150 0708 0243     		orrs	r2, r2, r0
 2151 070a 6C21     		movs	r1, #108
 2152 070c 3D48     		ldr	r0, .L164
 2153 070e FFF7FEFF 		bl	tmc2160_writeInt
 2154              	.LVL254:
 141:boards/TMC2160_eval.c **** 
 2155              		.loc 1 141 11 view .LVU726
 2156 0712 0024     		movs	r4, #0
 2157 0714 64E5     		b	.L19
 2158              	.LVL255:
 2159              	.L43:
 421:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEI
 2160              		.loc 1 421 3 is_stmt 1 view .LVU727
 422:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2161              		.loc 1 422 13 is_stmt 0 view .LVU728
 2162 0716 3B48     		ldr	r0, .L164
 2163              	.LVL256:
 422:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2164              		.loc 1 422 13 view .LVU729
 2165 0718 6D21     		movs	r1, #109
 2166              	.LVL257:
 421:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEI
 2167              		.loc 1 421 5 view .LVU730
 2168 071a 2CB9     		cbnz	r4, .L118
 422:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2169              		.loc 1 422 4 is_stmt 1 view .LVU731
 2170              	.LBB290:
 2171              	.LBI290:
  61:boards/TMC2160_eval.c **** {
 2172              		.loc 1 61 31 view .LVU732
 2173              	.LVL258:
  61:boards/TMC2160_eval.c **** {
 2174              		.loc 1 61 31 is_stmt 0 view .LVU733
 2175              	.LBE290:
  63:boards/TMC2160_eval.c **** 
 2176              		.loc 1 63 2 is_stmt 1 view .LVU734
  65:boards/TMC2160_eval.c **** }
 2177              		.loc 1 65 2 view .LVU735
 422:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2178              		.loc 1 422 13 is_stmt 0 view .LVU736
 2179 071c FFF7FEFF 		bl	tmc2160_readInt
 2180              	.LVL259:
 2181 0720 C0F3C030 		ubfx	r0, r0, #15, #1
 422:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2182              		.loc 1 422 11 view .LVU737
 2183 0724 2860     		str	r0, [r5]
 2184 0726 5BE5     		b	.L19
 2185              	.LVL260:
 2186              	.L118:
 423:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEIMIN_SHI
 2187              		.loc 1 423 10 is_stmt 1 view .LVU738
 424:boards/TMC2160_eval.c **** 		}
 2188              		.loc 1 424 4 view .LVU739
 2189              	.LBB291:
 2190              	.LBI291:
  61:boards/TMC2160_eval.c **** {
 2191              		.loc 1 61 31 view .LVU740
  61:boards/TMC2160_eval.c **** {
 2192              		.loc 1 61 31 is_stmt 0 view .LVU741
 2193              	.LBE291:
  63:boards/TMC2160_eval.c **** 
 2194              		.loc 1 63 2 is_stmt 1 view .LVU742
  65:boards/TMC2160_eval.c **** }
 2195              		.loc 1 65 2 view .LVU743
 2196              	.LBB292:
 2197              	.LBI292:
  61:boards/TMC2160_eval.c **** {
 2198              		.loc 1 61 31 view .LVU744
  61:boards/TMC2160_eval.c **** {
 2199              		.loc 1 61 31 is_stmt 0 view .LVU745
 2200              	.LBE292:
  63:boards/TMC2160_eval.c **** 
 2201              		.loc 1 63 2 is_stmt 1 view .LVU746
  65:boards/TMC2160_eval.c **** }
 2202              		.loc 1 65 2 view .LVU747
 424:boards/TMC2160_eval.c **** 		}
 2203              		.loc 1 424 4 is_stmt 0 view .LVU748
 2204 0728 FFF7FEFF 		bl	tmc2160_readInt
 2205              	.LVL261:
 2206 072c 2B68     		ldr	r3, [r5]
 2207 072e DB03     		lsls	r3, r3, #15
 2208 0730 9BB2     		uxth	r3, r3
 2209 0732 20F40042 		bic	r2, r0, #32768
 2210 0736 1A43     		orrs	r2, r2, r3
 2211 0738 3248     		ldr	r0, .L164
 2212 073a 6D21     		movs	r1, #109
 2213 073c FFF7FEFF 		bl	tmc2160_writeInt
 2214              	.LVL262:
 141:boards/TMC2160_eval.c **** 
 2215              		.loc 1 141 11 view .LVU749
 2216 0740 0024     		movs	r4, #0
 2217 0742 4DE5     		b	.L19
 2218              	.LVL263:
 2219              	.L42:
 429:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_
 2220              		.loc 1 429 3 is_stmt 1 view .LVU750
 430:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2221              		.loc 1 430 13 is_stmt 0 view .LVU751
 2222 0744 2F48     		ldr	r0, .L164
 2223              	.LVL264:
 430:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2224              		.loc 1 430 13 view .LVU752
 2225 0746 6D21     		movs	r1, #109
 2226              	.LVL265:
 429:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_
 2227              		.loc 1 429 5 view .LVU753
 2228 0748 2CB9     		cbnz	r4, .L119
 430:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2229              		.loc 1 430 4 is_stmt 1 view .LVU754
 2230              	.LBB293:
 2231              	.LBI293:
  61:boards/TMC2160_eval.c **** {
 2232              		.loc 1 61 31 view .LVU755
 2233              	.LVL266:
  61:boards/TMC2160_eval.c **** {
 2234              		.loc 1 61 31 is_stmt 0 view .LVU756
 2235              	.LBE293:
  63:boards/TMC2160_eval.c **** 
 2236              		.loc 1 63 2 is_stmt 1 view .LVU757
  65:boards/TMC2160_eval.c **** }
 2237              		.loc 1 65 2 view .LVU758
 430:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2238              		.loc 1 430 13 is_stmt 0 view .LVU759
 2239 074a FFF7FEFF 		bl	tmc2160_readInt
 2240              	.LVL267:
 2241 074e C0F34130 		ubfx	r0, r0, #13, #2
 430:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2242              		.loc 1 430 11 view .LVU760
 2243 0752 2860     		str	r0, [r5]
 2244 0754 44E5     		b	.L19
 2245              	.LVL268:
 2246              	.L119:
 431:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_SHIFT, 
 2247              		.loc 1 431 10 is_stmt 1 view .LVU761
 432:boards/TMC2160_eval.c **** 		}
 2248              		.loc 1 432 4 view .LVU762
 2249              	.LBB294:
 2250              	.LBI294:
  61:boards/TMC2160_eval.c **** {
 2251              		.loc 1 61 31 view .LVU763
  61:boards/TMC2160_eval.c **** {
 2252              		.loc 1 61 31 is_stmt 0 view .LVU764
 2253              	.LBE294:
  63:boards/TMC2160_eval.c **** 
 2254              		.loc 1 63 2 is_stmt 1 view .LVU765
  65:boards/TMC2160_eval.c **** }
 2255              		.loc 1 65 2 view .LVU766
 2256              	.LBB295:
 2257              	.LBI295:
  61:boards/TMC2160_eval.c **** {
 2258              		.loc 1 61 31 view .LVU767
  61:boards/TMC2160_eval.c **** {
 2259              		.loc 1 61 31 is_stmt 0 view .LVU768
 2260              	.LBE295:
  63:boards/TMC2160_eval.c **** 
 2261              		.loc 1 63 2 is_stmt 1 view .LVU769
  65:boards/TMC2160_eval.c **** }
 2262              		.loc 1 65 2 view .LVU770
 432:boards/TMC2160_eval.c **** 		}
 2263              		.loc 1 432 4 is_stmt 0 view .LVU771
 2264 0756 FFF7FEFF 		bl	tmc2160_readInt
 2265              	.LVL269:
 2266 075a 2B68     		ldr	r3, [r5]
 2267 075c 5B03     		lsls	r3, r3, #13
 2268 075e 03F4C043 		and	r3, r3, #24576
 2269 0762 20F4C042 		bic	r2, r0, #24576
 2270 0766 1A43     		orrs	r2, r2, r3
 2271 0768 2648     		ldr	r0, .L164
 2272 076a 6D21     		movs	r1, #109
 2273 076c FFF7FEFF 		bl	tmc2160_writeInt
 2274              	.LVL270:
 141:boards/TMC2160_eval.c **** 
 2275              		.loc 1 141 11 view .LVU772
 2276 0770 0024     		movs	r4, #0
 2277 0772 35E5     		b	.L19
 2278              	.LVL271:
 2279              	.L41:
 437:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMA
 2280              		.loc 1 437 3 is_stmt 1 view .LVU773
 438:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2281              		.loc 1 438 13 is_stmt 0 view .LVU774
 2282 0774 2348     		ldr	r0, .L164
 2283              	.LVL272:
 438:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2284              		.loc 1 438 13 view .LVU775
 2285 0776 6D21     		movs	r1, #109
 2286              	.LVL273:
 437:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMA
 2287              		.loc 1 437 5 view .LVU776
 2288 0778 2CB9     		cbnz	r4, .L120
 438:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2289              		.loc 1 438 4 is_stmt 1 view .LVU777
 2290              	.LBB296:
 2291              	.LBI296:
  61:boards/TMC2160_eval.c **** {
 2292              		.loc 1 61 31 view .LVU778
 2293              	.LVL274:
  61:boards/TMC2160_eval.c **** {
 2294              		.loc 1 61 31 is_stmt 0 view .LVU779
 2295              	.LBE296:
  63:boards/TMC2160_eval.c **** 
 2296              		.loc 1 63 2 is_stmt 1 view .LVU780
  65:boards/TMC2160_eval.c **** }
 2297              		.loc 1 65 2 view .LVU781
 438:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2298              		.loc 1 438 13 is_stmt 0 view .LVU782
 2299 077a FFF7FEFF 		bl	tmc2160_readInt
 2300              	.LVL275:
 2301 077e C0F30320 		ubfx	r0, r0, #8, #4
 438:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2302              		.loc 1 438 11 view .LVU783
 2303 0782 2860     		str	r0, [r5]
 2304 0784 2CE5     		b	.L19
 2305              	.LVL276:
 2306              	.L120:
 439:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMAX_SHIFT
 2307              		.loc 1 439 10 is_stmt 1 view .LVU784
 440:boards/TMC2160_eval.c **** 		}
 2308              		.loc 1 440 4 view .LVU785
 2309              	.LBB297:
 2310              	.LBI297:
  61:boards/TMC2160_eval.c **** {
 2311              		.loc 1 61 31 view .LVU786
  61:boards/TMC2160_eval.c **** {
 2312              		.loc 1 61 31 is_stmt 0 view .LVU787
 2313              	.LBE297:
  63:boards/TMC2160_eval.c **** 
 2314              		.loc 1 63 2 is_stmt 1 view .LVU788
  65:boards/TMC2160_eval.c **** }
 2315              		.loc 1 65 2 view .LVU789
 2316              	.LBB298:
 2317              	.LBI298:
  61:boards/TMC2160_eval.c **** {
 2318              		.loc 1 61 31 view .LVU790
  61:boards/TMC2160_eval.c **** {
 2319              		.loc 1 61 31 is_stmt 0 view .LVU791
 2320              	.LBE298:
  63:boards/TMC2160_eval.c **** 
 2321              		.loc 1 63 2 is_stmt 1 view .LVU792
  65:boards/TMC2160_eval.c **** }
 2322              		.loc 1 65 2 view .LVU793
 440:boards/TMC2160_eval.c **** 		}
 2323              		.loc 1 440 4 is_stmt 0 view .LVU794
 2324 0786 FFF7FEFF 		bl	tmc2160_readInt
 2325              	.LVL277:
 2326 078a 2B68     		ldr	r3, [r5]
 2327 078c 1B02     		lsls	r3, r3, #8
 2328 078e 03F47063 		and	r3, r3, #3840
 2329 0792 20F47062 		bic	r2, r0, #3840
 2330 0796 1A43     		orrs	r2, r2, r3
 2331 0798 1A48     		ldr	r0, .L164
 2332 079a 6D21     		movs	r1, #109
 2333 079c FFF7FEFF 		bl	tmc2160_writeInt
 2334              	.LVL278:
 141:boards/TMC2160_eval.c **** 
 2335              		.loc 1 141 11 view .LVU795
 2336 07a0 0024     		movs	r4, #0
 2337 07a2 1DE5     		b	.L19
 2338              	.LVL279:
 2339              	.L40:
 445:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_
 2340              		.loc 1 445 3 is_stmt 1 view .LVU796
 446:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2341              		.loc 1 446 13 is_stmt 0 view .LVU797
 2342 07a4 1748     		ldr	r0, .L164
 2343              	.LVL280:
 446:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2344              		.loc 1 446 13 view .LVU798
 2345 07a6 6D21     		movs	r1, #109
 2346              	.LVL281:
 445:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_
 2347              		.loc 1 445 5 view .LVU799
 2348 07a8 2CB9     		cbnz	r4, .L121
 446:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2349              		.loc 1 446 4 is_stmt 1 view .LVU800
 2350              	.LBB299:
 2351              	.LBI299:
  61:boards/TMC2160_eval.c **** {
 2352              		.loc 1 61 31 view .LVU801
 2353              	.LVL282:
  61:boards/TMC2160_eval.c **** {
 2354              		.loc 1 61 31 is_stmt 0 view .LVU802
 2355              	.LBE299:
  63:boards/TMC2160_eval.c **** 
 2356              		.loc 1 63 2 is_stmt 1 view .LVU803
  65:boards/TMC2160_eval.c **** }
 2357              		.loc 1 65 2 view .LVU804
 446:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2358              		.loc 1 446 13 is_stmt 0 view .LVU805
 2359 07aa FFF7FEFF 		bl	tmc2160_readInt
 2360              	.LVL283:
 2361 07ae C0F34110 		ubfx	r0, r0, #5, #2
 446:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2362              		.loc 1 446 11 view .LVU806
 2363 07b2 2860     		str	r0, [r5]
 2364 07b4 14E5     		b	.L19
 2365              	.LVL284:
 2366              	.L121:
 447:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_SHIFT, 
 2367              		.loc 1 447 10 is_stmt 1 view .LVU807
 448:boards/TMC2160_eval.c **** 		}
 2368              		.loc 1 448 4 view .LVU808
 2369              	.LBB300:
 2370              	.LBI300:
  61:boards/TMC2160_eval.c **** {
 2371              		.loc 1 61 31 view .LVU809
  61:boards/TMC2160_eval.c **** {
 2372              		.loc 1 61 31 is_stmt 0 view .LVU810
 2373              	.LBE300:
  63:boards/TMC2160_eval.c **** 
 2374              		.loc 1 63 2 is_stmt 1 view .LVU811
  65:boards/TMC2160_eval.c **** }
 2375              		.loc 1 65 2 view .LVU812
 2376              	.LBB301:
 2377              	.LBI301:
  61:boards/TMC2160_eval.c **** {
 2378              		.loc 1 61 31 view .LVU813
  61:boards/TMC2160_eval.c **** {
 2379              		.loc 1 61 31 is_stmt 0 view .LVU814
 2380              	.LBE301:
  63:boards/TMC2160_eval.c **** 
 2381              		.loc 1 63 2 is_stmt 1 view .LVU815
  65:boards/TMC2160_eval.c **** }
 2382              		.loc 1 65 2 view .LVU816
 448:boards/TMC2160_eval.c **** 		}
 2383              		.loc 1 448 4 is_stmt 0 view .LVU817
 2384 07b6 FFF7FEFF 		bl	tmc2160_readInt
 2385              	.LVL285:
 2386 07ba 2B68     		ldr	r3, [r5]
 2387 07bc 5B01     		lsls	r3, r3, #5
 2388 07be 03F06003 		and	r3, r3, #96
 2389 07c2 20F06002 		bic	r2, r0, #96
 2390 07c6 1A43     		orrs	r2, r2, r3
 2391 07c8 0E48     		ldr	r0, .L164
 2392 07ca 6D21     		movs	r1, #109
 2393 07cc FFF7FEFF 		bl	tmc2160_writeInt
 2394              	.LVL286:
 141:boards/TMC2160_eval.c **** 
 2395              		.loc 1 141 11 view .LVU818
 2396 07d0 0024     		movs	r4, #0
 2397 07d2 05E5     		b	.L19
 2398              	.LVL287:
 2399              	.L39:
 453:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMI
 2400              		.loc 1 453 3 is_stmt 1 view .LVU819
 454:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2401              		.loc 1 454 13 is_stmt 0 view .LVU820
 2402 07d4 0B48     		ldr	r0, .L164
 2403              	.LVL288:
 454:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2404              		.loc 1 454 13 view .LVU821
 2405 07d6 6D21     		movs	r1, #109
 2406              	.LVL289:
 453:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMI
 2407              		.loc 1 453 5 view .LVU822
 2408 07d8 2CB9     		cbnz	r4, .L122
 454:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2409              		.loc 1 454 4 is_stmt 1 view .LVU823
 2410              	.LBB302:
 2411              	.LBI302:
  61:boards/TMC2160_eval.c **** {
 2412              		.loc 1 61 31 view .LVU824
 2413              	.LVL290:
  61:boards/TMC2160_eval.c **** {
 2414              		.loc 1 61 31 is_stmt 0 view .LVU825
 2415              	.LBE302:
  63:boards/TMC2160_eval.c **** 
 2416              		.loc 1 63 2 is_stmt 1 view .LVU826
  65:boards/TMC2160_eval.c **** }
 2417              		.loc 1 65 2 view .LVU827
 454:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2418              		.loc 1 454 13 is_stmt 0 view .LVU828
 2419 07da FFF7FEFF 		bl	tmc2160_readInt
 2420              	.LVL291:
 2421 07de 00F00F00 		and	r0, r0, #15
 454:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2422              		.loc 1 454 11 view .LVU829
 2423 07e2 2860     		str	r0, [r5]
 2424 07e4 FCE4     		b	.L19
 2425              	.LVL292:
 2426              	.L122:
 455:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMIN_SHIFT
 2427              		.loc 1 455 10 is_stmt 1 view .LVU830
 456:boards/TMC2160_eval.c **** 		}
 2428              		.loc 1 456 4 view .LVU831
 2429              	.LBB303:
 2430              	.LBI303:
  61:boards/TMC2160_eval.c **** {
 2431              		.loc 1 61 31 view .LVU832
  61:boards/TMC2160_eval.c **** {
 2432              		.loc 1 61 31 is_stmt 0 view .LVU833
 2433              	.LBE303:
  63:boards/TMC2160_eval.c **** 
 2434              		.loc 1 63 2 is_stmt 1 view .LVU834
  65:boards/TMC2160_eval.c **** }
 2435              		.loc 1 65 2 view .LVU835
 2436              	.LBB304:
 2437              	.LBI304:
  61:boards/TMC2160_eval.c **** {
 2438              		.loc 1 61 31 view .LVU836
  61:boards/TMC2160_eval.c **** {
 2439              		.loc 1 61 31 is_stmt 0 view .LVU837
 2440              	.LBE304:
  63:boards/TMC2160_eval.c **** 
 2441              		.loc 1 63 2 is_stmt 1 view .LVU838
  65:boards/TMC2160_eval.c **** }
 2442              		.loc 1 65 2 view .LVU839
 456:boards/TMC2160_eval.c **** 		}
 2443              		.loc 1 456 4 is_stmt 0 view .LVU840
 2444 07e6 FFF7FEFF 		bl	tmc2160_readInt
 2445              	.LVL293:
 2446 07ea 2A68     		ldr	r2, [r5]
 2447 07ec 20F00F00 		bic	r0, r0, #15
 2448 07f0 02F00F02 		and	r2, r2, #15
 2449 07f4 0243     		orrs	r2, r2, r0
 2450 07f6 6D21     		movs	r1, #109
 2451 07f8 0248     		ldr	r0, .L164
 2452 07fa FFF7FEFF 		bl	tmc2160_writeInt
 2453              	.LVL294:
 141:boards/TMC2160_eval.c **** 
 2454              		.loc 1 141 11 view .LVU841
 2455 07fe 0024     		movs	r4, #0
 2456 0800 EEE4     		b	.L19
 2457              	.L165:
 2458 0802 00BF     		.align	2
 2459              	.L164:
 2460 0804 00000000 		.word	TMC2160
 2461              	.LVL295:
 2462              	.L38:
 461:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFIL
 2463              		.loc 1 461 3 is_stmt 1 view .LVU842
 462:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2464              		.loc 1 462 13 is_stmt 0 view .LVU843
 2465 0808 B848     		ldr	r0, .L166
 2466              	.LVL296:
 462:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2467              		.loc 1 462 13 view .LVU844
 2468 080a 6D21     		movs	r1, #109
 2469              	.LVL297:
 461:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFIL
 2470              		.loc 1 461 5 view .LVU845
 2471 080c 2CB9     		cbnz	r4, .L123
 462:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2472              		.loc 1 462 4 is_stmt 1 view .LVU846
 2473              	.LBB305:
 2474              	.LBI305:
  61:boards/TMC2160_eval.c **** {
 2475              		.loc 1 61 31 view .LVU847
 2476              	.LVL298:
  61:boards/TMC2160_eval.c **** {
 2477              		.loc 1 61 31 is_stmt 0 view .LVU848
 2478              	.LBE305:
  63:boards/TMC2160_eval.c **** 
 2479              		.loc 1 63 2 is_stmt 1 view .LVU849
  65:boards/TMC2160_eval.c **** }
 2480              		.loc 1 65 2 view .LVU850
 462:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2481              		.loc 1 462 13 is_stmt 0 view .LVU851
 2482 080e FFF7FEFF 		bl	tmc2160_readInt
 2483              	.LVL299:
 2484 0812 C0F30060 		ubfx	r0, r0, #24, #1
 462:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2485              		.loc 1 462 11 view .LVU852
 2486 0816 2860     		str	r0, [r5]
 2487 0818 E2E4     		b	.L19
 2488              	.LVL300:
 2489              	.L123:
 463:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFILT_SHIFT
 2490              		.loc 1 463 10 is_stmt 1 view .LVU853
 464:boards/TMC2160_eval.c **** 		}
 2491              		.loc 1 464 4 view .LVU854
 2492              	.LBB306:
 2493              	.LBI306:
  61:boards/TMC2160_eval.c **** {
 2494              		.loc 1 61 31 view .LVU855
  61:boards/TMC2160_eval.c **** {
 2495              		.loc 1 61 31 is_stmt 0 view .LVU856
 2496              	.LBE306:
  63:boards/TMC2160_eval.c **** 
 2497              		.loc 1 63 2 is_stmt 1 view .LVU857
  65:boards/TMC2160_eval.c **** }
 2498              		.loc 1 65 2 view .LVU858
 2499              	.LBB307:
 2500              	.LBI307:
  61:boards/TMC2160_eval.c **** {
 2501              		.loc 1 61 31 view .LVU859
  61:boards/TMC2160_eval.c **** {
 2502              		.loc 1 61 31 is_stmt 0 view .LVU860
 2503              	.LBE307:
  63:boards/TMC2160_eval.c **** 
 2504              		.loc 1 63 2 is_stmt 1 view .LVU861
  65:boards/TMC2160_eval.c **** }
 2505              		.loc 1 65 2 view .LVU862
 464:boards/TMC2160_eval.c **** 		}
 2506              		.loc 1 464 4 is_stmt 0 view .LVU863
 2507 081a FFF7FEFF 		bl	tmc2160_readInt
 2508              	.LVL301:
 2509 081e 2B68     		ldr	r3, [r5]
 2510 0820 1B06     		lsls	r3, r3, #24
 2511 0822 03F08073 		and	r3, r3, #16777216
 2512 0826 20F08072 		bic	r2, r0, #16777216
 2513 082a 1A43     		orrs	r2, r2, r3
 2514 082c AF48     		ldr	r0, .L166
 2515 082e 6D21     		movs	r1, #109
 2516 0830 FFF7FEFF 		bl	tmc2160_writeInt
 2517              	.LVL302:
 141:boards/TMC2160_eval.c **** 
 2518              		.loc 1 141 11 view .LVU864
 2519 0834 0024     		movs	r4, #0
 2520 0836 D3E4     		b	.L19
 2521              	.LVL303:
 2522              	.L37:
 469:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SH
 2523              		.loc 1 469 3 is_stmt 1 view .LVU865
 470:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2524              		.loc 1 470 13 is_stmt 0 view .LVU866
 2525 0838 AC48     		ldr	r0, .L166
 2526              	.LVL304:
 470:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2527              		.loc 1 470 13 view .LVU867
 2528 083a 6D21     		movs	r1, #109
 2529              	.LVL305:
 469:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SH
 2530              		.loc 1 469 5 view .LVU868
 2531 083c 64B9     		cbnz	r4, .L124
 470:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2532              		.loc 1 470 4 is_stmt 1 view .LVU869
 2533              	.LBB308:
 2534              	.LBI308:
  61:boards/TMC2160_eval.c **** {
 2535              		.loc 1 61 31 view .LVU870
 2536              	.LVL306:
  61:boards/TMC2160_eval.c **** {
 2537              		.loc 1 61 31 is_stmt 0 view .LVU871
 2538              	.LBE308:
  63:boards/TMC2160_eval.c **** 
 2539              		.loc 1 63 2 is_stmt 1 view .LVU872
  65:boards/TMC2160_eval.c **** }
 2540              		.loc 1 65 2 view .LVU873
 470:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2541              		.loc 1 470 13 is_stmt 0 view .LVU874
 2542 083e FFF7FEFF 		bl	tmc2160_readInt
 2543              	.LVL307:
 2544 0842 0314     		asrs	r3, r0, #16
 471:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2545              		.loc 1 471 13 view .LVU875
 2546 0844 13F04003 		ands	r3, r3, #64
 470:boards/TMC2160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2547              		.loc 1 470 13 view .LVU876
 2548 0848 C0F30640 		ubfx	r0, r0, #16, #7
 471:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2549              		.loc 1 471 4 is_stmt 1 view .LVU877
 471:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2550              		.loc 1 471 13 is_stmt 0 view .LVU878
 2551 084c 18BF     		it	ne
 2552 084e 6FF07F03 		mvnne	r3, #127
 2553 0852 1843     		orrs	r0, r0, r3
 471:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2554              		.loc 1 471 11 view .LVU879
 2555 0854 2860     		str	r0, [r5]
 2556 0856 C3E4     		b	.L19
 2557              	.LVL308:
 2558              	.L124:
 472:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT, *v
 2559              		.loc 1 472 10 is_stmt 1 view .LVU880
 473:boards/TMC2160_eval.c **** 		}
 2560              		.loc 1 473 4 view .LVU881
 2561              	.LBB309:
 2562              	.LBI309:
  61:boards/TMC2160_eval.c **** {
 2563              		.loc 1 61 31 view .LVU882
  61:boards/TMC2160_eval.c **** {
 2564              		.loc 1 61 31 is_stmt 0 view .LVU883
 2565              	.LBE309:
  63:boards/TMC2160_eval.c **** 
 2566              		.loc 1 63 2 is_stmt 1 view .LVU884
  65:boards/TMC2160_eval.c **** }
 2567              		.loc 1 65 2 view .LVU885
 2568              	.LBB310:
 2569              	.LBI310:
  61:boards/TMC2160_eval.c **** {
 2570              		.loc 1 61 31 view .LVU886
  61:boards/TMC2160_eval.c **** {
 2571              		.loc 1 61 31 is_stmt 0 view .LVU887
 2572              	.LBE310:
  63:boards/TMC2160_eval.c **** 
 2573              		.loc 1 63 2 is_stmt 1 view .LVU888
  65:boards/TMC2160_eval.c **** }
 2574              		.loc 1 65 2 view .LVU889
 473:boards/TMC2160_eval.c **** 		}
 2575              		.loc 1 473 4 is_stmt 0 view .LVU890
 2576 0858 FFF7FEFF 		bl	tmc2160_readInt
 2577              	.LVL309:
 2578 085c 2B68     		ldr	r3, [r5]
 2579 085e 1B04     		lsls	r3, r3, #16
 2580 0860 03F4FE03 		and	r3, r3, #8323072
 2581 0864 20F4FE02 		bic	r2, r0, #8323072
 2582 0868 1A43     		orrs	r2, r2, r3
 2583 086a A048     		ldr	r0, .L166
 2584 086c 6D21     		movs	r1, #109
 2585 086e FFF7FEFF 		bl	tmc2160_writeInt
 2586              	.LVL310:
 141:boards/TMC2160_eval.c **** 
 2587              		.loc 1 141 11 view .LVU891
 2588 0872 0024     		movs	r4, #0
 2589 0874 B4E4     		b	.L19
 2590              	.LVL311:
 2591              	.L36:
 478:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSE
 2592              		.loc 1 478 3 is_stmt 1 view .LVU892
 479:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2593              		.loc 1 479 13 is_stmt 0 view .LVU893
 2594 0876 9D48     		ldr	r0, .L166
 2595              	.LVL312:
 479:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2596              		.loc 1 479 13 view .LVU894
 2597 0878 6C21     		movs	r1, #108
 2598              	.LVL313:
 478:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSE
 2599              		.loc 1 478 5 view .LVU895
 2600 087a 2CB9     		cbnz	r4, .L126
 479:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2601              		.loc 1 479 4 is_stmt 1 view .LVU896
 2602              	.LBB311:
 2603              	.LBI311:
  61:boards/TMC2160_eval.c **** {
 2604              		.loc 1 61 31 view .LVU897
 2605              	.LVL314:
  61:boards/TMC2160_eval.c **** {
 2606              		.loc 1 61 31 is_stmt 0 view .LVU898
 2607              	.LBE311:
  63:boards/TMC2160_eval.c **** 
 2608              		.loc 1 63 2 is_stmt 1 view .LVU899
  65:boards/TMC2160_eval.c **** }
 2609              		.loc 1 65 2 view .LVU900
 479:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2610              		.loc 1 479 13 is_stmt 0 view .LVU901
 2611 087c FFF7FEFF 		bl	tmc2160_readInt
 2612              	.LVL315:
 2613 0880 C0F34040 		ubfx	r0, r0, #17, #1
 479:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2614              		.loc 1 479 11 view .LVU902
 2615 0884 2860     		str	r0, [r5]
 2616 0886 ABE4     		b	.L19
 2617              	.LVL316:
 2618              	.L126:
 480:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSENSE_SHI
 2619              		.loc 1 480 10 is_stmt 1 view .LVU903
 481:boards/TMC2160_eval.c **** 		}
 2620              		.loc 1 481 4 view .LVU904
 2621              	.LBB312:
 2622              	.LBI312:
  61:boards/TMC2160_eval.c **** {
 2623              		.loc 1 61 31 view .LVU905
  61:boards/TMC2160_eval.c **** {
 2624              		.loc 1 61 31 is_stmt 0 view .LVU906
 2625              	.LBE312:
  63:boards/TMC2160_eval.c **** 
 2626              		.loc 1 63 2 is_stmt 1 view .LVU907
  65:boards/TMC2160_eval.c **** }
 2627              		.loc 1 65 2 view .LVU908
 2628              	.LBB313:
 2629              	.LBI313:
  61:boards/TMC2160_eval.c **** {
 2630              		.loc 1 61 31 view .LVU909
  61:boards/TMC2160_eval.c **** {
 2631              		.loc 1 61 31 is_stmt 0 view .LVU910
 2632              	.LBE313:
  63:boards/TMC2160_eval.c **** 
 2633              		.loc 1 63 2 is_stmt 1 view .LVU911
  65:boards/TMC2160_eval.c **** }
 2634              		.loc 1 65 2 view .LVU912
 481:boards/TMC2160_eval.c **** 		}
 2635              		.loc 1 481 4 is_stmt 0 view .LVU913
 2636 0888 FFF7FEFF 		bl	tmc2160_readInt
 2637              	.LVL317:
 2638 088c 2B68     		ldr	r3, [r5]
 2639 088e 5B04     		lsls	r3, r3, #17
 2640 0890 03F40033 		and	r3, r3, #131072
 2641 0894 20F40032 		bic	r2, r0, #131072
 2642 0898 1A43     		orrs	r2, r2, r3
 2643 089a 9448     		ldr	r0, .L166
 2644 089c 6C21     		movs	r1, #108
 2645 089e FFF7FEFF 		bl	tmc2160_writeInt
 2646              	.LVL318:
 141:boards/TMC2160_eval.c **** 
 2647              		.loc 1 141 11 view .LVU914
 2648 08a2 0024     		movs	r4, #0
 2649 08a4 9CE4     		b	.L19
 2650              	.LVL319:
 2651              	.L35:
 486:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_CS_ACTUAL_MASK, TMC216
 2652              		.loc 1 486 3 is_stmt 1 view .LVU915
 486:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_CS_ACTUAL_MASK, TMC216
 2653              		.loc 1 486 5 is_stmt 0 view .LVU916
 2654 08a6 002C     		cmp	r4, #0
 2655 08a8 40F04381 		bne	.L152
 487:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2656              		.loc 1 487 4 is_stmt 1 view .LVU917
 2657              	.LBB314:
 2658              	.LBI314:
  61:boards/TMC2160_eval.c **** {
 2659              		.loc 1 61 31 view .LVU918
 2660              	.LVL320:
  61:boards/TMC2160_eval.c **** {
 2661              		.loc 1 61 31 is_stmt 0 view .LVU919
 2662              	.LBE314:
  63:boards/TMC2160_eval.c **** 
 2663              		.loc 1 63 2 is_stmt 1 view .LVU920
  65:boards/TMC2160_eval.c **** }
 2664              		.loc 1 65 2 view .LVU921
 487:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2665              		.loc 1 487 13 is_stmt 0 view .LVU922
 2666 08ac 8F48     		ldr	r0, .L166
 2667              	.LVL321:
 487:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2668              		.loc 1 487 13 view .LVU923
 2669 08ae 6F21     		movs	r1, #111
 2670              	.LVL322:
 487:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2671              		.loc 1 487 13 view .LVU924
 2672 08b0 FFF7FEFF 		bl	tmc2160_readInt
 2673              	.LVL323:
 2674 08b4 C0F30440 		ubfx	r0, r0, #16, #5
 487:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2675              		.loc 1 487 11 view .LVU925
 2676 08b8 2860     		str	r0, [r5]
 2677 08ba 91E4     		b	.L19
 2678              	.LVL324:
 2679              	.L34:
 494:boards/TMC2160_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2680              		.loc 1 494 3 is_stmt 1 view .LVU926
 494:boards/TMC2160_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2681              		.loc 1 494 5 is_stmt 0 view .LVU927
 2682 08bc 24B9     		cbnz	r4, .L127
 495:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2683              		.loc 1 495 4 is_stmt 1 view .LVU928
 495:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2684              		.loc 1 495 13 is_stmt 0 view .LVU929
 2685 08be 2046     		mov	r0, r4
 2686              	.LVL325:
 495:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2687              		.loc 1 495 13 view .LVU930
 2688 08c0 FFF7FEFF 		bl	StepDir_getStallGuardThreshold
 2689              	.LVL326:
 495:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2690              		.loc 1 495 11 view .LVU931
 2691 08c4 2860     		str	r0, [r5]
 2692 08c6 8BE4     		b	.L19
 2693              	.LVL327:
 2694              	.L127:
 496:boards/TMC2160_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 2695              		.loc 1 496 10 is_stmt 1 view .LVU932
 497:boards/TMC2160_eval.c **** 		}
 2696              		.loc 1 497 4 view .LVU933
 2697 08c8 2968     		ldr	r1, [r5]
 2698              	.LVL328:
 497:boards/TMC2160_eval.c **** 		}
 2699              		.loc 1 497 4 is_stmt 0 view .LVU934
 2700 08ca 0020     		movs	r0, #0
 2701              	.LVL329:
 497:boards/TMC2160_eval.c **** 		}
 2702              		.loc 1 497 4 view .LVU935
 2703 08cc FFF7FEFF 		bl	StepDir_setStallGuardThreshold
 2704              	.LVL330:
 141:boards/TMC2160_eval.c **** 
 2705              		.loc 1 141 11 view .LVU936
 2706 08d0 0024     		movs	r4, #0
 2707 08d2 85E4     		b	.L19
 2708              	.LVL331:
 2709              	.L33:
 502:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TCOOLTHRS);
 2710              		.loc 1 502 3 is_stmt 1 view .LVU937
 502:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TCOOLTHRS);
 2711              		.loc 1 502 5 is_stmt 0 view .LVU938
 2712 08d4 84B9     		cbnz	r4, .L128
 503:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2713              		.loc 1 503 4 is_stmt 1 view .LVU939
 2714              	.LBB315:
 2715              	.LBI315:
  61:boards/TMC2160_eval.c **** {
 2716              		.loc 1 61 31 view .LVU940
 2717              	.LVL332:
  61:boards/TMC2160_eval.c **** {
 2718              		.loc 1 61 31 is_stmt 0 view .LVU941
 2719              	.LBE315:
  63:boards/TMC2160_eval.c **** 
 2720              		.loc 1 63 2 is_stmt 1 view .LVU942
  65:boards/TMC2160_eval.c **** }
 2721              		.loc 1 65 2 view .LVU943
 503:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2722              		.loc 1 503 16 is_stmt 0 view .LVU944
 2723 08d6 8548     		ldr	r0, .L166
 2724              	.LVL333:
 503:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2725              		.loc 1 503 16 view .LVU945
 2726 08d8 1421     		movs	r1, #20
 2727              	.LVL334:
 503:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2728              		.loc 1 503 16 view .LVU946
 2729 08da FFF7FEFF 		bl	tmc2160_readInt
 2730              	.LVL335:
 504:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2731              		.loc 1 504 4 is_stmt 1 view .LVU947
 504:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2732              		.loc 1 504 13 is_stmt 0 view .LVU948
 2733 08de 0028     		cmp	r0, #0
 504:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2734              		.loc 1 504 13 view .LVU949
 2735 08e0 08BF     		it	eq
 2736 08e2 0120     		moveq	r0, #1
 2737              	.LVL336:
 504:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2738              		.loc 1 504 13 view .LVU950
 2739 08e4 4FF08073 		mov	r3, #16777216
 2740 08e8 93FBF0F0 		sdiv	r0, r3, r0
 504:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2741              		.loc 1 504 11 view .LVU951
 2742 08ec 804B     		ldr	r3, .L166+4
 2743 08ee 9842     		cmp	r0, r3
 2744 08f0 D4BF     		ite	le
 2745 08f2 2860     		strle	r0, [r5]
 2746 08f4 2B60     		strgt	r3, [r5]
 2747 08f6 73E4     		b	.L19
 2748              	.LVL337:
 2749              	.L128:
 505:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 2750              		.loc 1 505 10 is_stmt 1 view .LVU952
 506:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
 2751              		.loc 1 506 4 view .LVU953
 506:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
 2752              		.loc 1 506 13 is_stmt 0 view .LVU954
 2753 08f8 2B68     		ldr	r3, [r5]
 507:boards/TMC2160_eval.c **** 		}
 2754              		.loc 1 507 4 view .LVU955
 2755 08fa 7C48     		ldr	r0, .L166
 2756              	.LVL338:
 506:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
 2757              		.loc 1 506 13 view .LVU956
 2758 08fc 002B     		cmp	r3, #0
 2759 08fe 08BF     		it	eq
 2760 0900 0123     		moveq	r3, #1
 2761 0902 4FF08072 		mov	r2, #16777216
 2762 0906 92FBF3F2 		sdiv	r2, r2, r3
 2763 090a 794B     		ldr	r3, .L166+4
 2764 090c 9A42     		cmp	r2, r3
 2765 090e A8BF     		it	ge
 2766 0910 1A46     		movge	r2, r3
 506:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
 2767              		.loc 1 506 11 view .LVU957
 2768 0912 2A60     		str	r2, [r5]
 507:boards/TMC2160_eval.c **** 		}
 2769              		.loc 1 507 4 is_stmt 1 view .LVU958
 2770              	.LBB316:
 2771              	.LBI316:
  61:boards/TMC2160_eval.c **** {
 2772              		.loc 1 61 31 view .LVU959
 2773              	.LVL339:
  61:boards/TMC2160_eval.c **** {
 2774              		.loc 1 61 31 is_stmt 0 view .LVU960
 2775              	.LBE316:
  63:boards/TMC2160_eval.c **** 
 2776              		.loc 1 63 2 is_stmt 1 view .LVU961
  65:boards/TMC2160_eval.c **** }
 2777              		.loc 1 65 2 view .LVU962
 507:boards/TMC2160_eval.c **** 		}
 2778              		.loc 1 507 4 is_stmt 0 view .LVU963
 2779 0914 1421     		movs	r1, #20
 2780              	.LVL340:
 507:boards/TMC2160_eval.c **** 		}
 2781              		.loc 1 507 4 view .LVU964
 2782 0916 FFF7FEFF 		bl	tmc2160_writeInt
 2783              	.LVL341:
 141:boards/TMC2160_eval.c **** 
 2784              		.loc 1 141 11 view .LVU965
 2785 091a 0024     		movs	r4, #0
 2786 091c 60E4     		b	.L19
 2787              	.LVL342:
 2788              	.L32:
 512:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDT
 2789              		.loc 1 512 3 is_stmt 1 view .LVU966
 513:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2790              		.loc 1 513 13 is_stmt 0 view .LVU967
 2791 091e 7348     		ldr	r0, .L166
 2792              	.LVL343:
 513:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2793              		.loc 1 513 13 view .LVU968
 2794 0920 6C21     		movs	r1, #108
 2795              	.LVL344:
 512:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDT
 2796              		.loc 1 512 5 view .LVU969
 2797 0922 2CB9     		cbnz	r4, .L131
 513:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2798              		.loc 1 513 4 is_stmt 1 view .LVU970
 2799              	.LBB317:
 2800              	.LBI317:
  61:boards/TMC2160_eval.c **** {
 2801              		.loc 1 61 31 view .LVU971
 2802              	.LVL345:
  61:boards/TMC2160_eval.c **** {
 2803              		.loc 1 61 31 is_stmt 0 view .LVU972
 2804              	.LBE317:
  63:boards/TMC2160_eval.c **** 
 2805              		.loc 1 63 2 is_stmt 1 view .LVU973
  65:boards/TMC2160_eval.c **** }
 2806              		.loc 1 65 2 view .LVU974
 513:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2807              		.loc 1 513 13 is_stmt 0 view .LVU975
 2808 0924 FFF7FEFF 		bl	tmc2160_readInt
 2809              	.LVL346:
 2810 0928 C0F34030 		ubfx	r0, r0, #13, #1
 513:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2811              		.loc 1 513 11 view .LVU976
 2812 092c 2860     		str	r0, [r5]
 2813 092e 57E4     		b	.L19
 2814              	.LVL347:
 2815              	.L131:
 514:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDTF_SHIFT
 2816              		.loc 1 514 10 is_stmt 1 view .LVU977
 515:boards/TMC2160_eval.c **** 		}
 2817              		.loc 1 515 4 view .LVU978
 2818              	.LBB318:
 2819              	.LBI318:
  61:boards/TMC2160_eval.c **** {
 2820              		.loc 1 61 31 view .LVU979
  61:boards/TMC2160_eval.c **** {
 2821              		.loc 1 61 31 is_stmt 0 view .LVU980
 2822              	.LBE318:
  63:boards/TMC2160_eval.c **** 
 2823              		.loc 1 63 2 is_stmt 1 view .LVU981
  65:boards/TMC2160_eval.c **** }
 2824              		.loc 1 65 2 view .LVU982
 2825              	.LBB319:
 2826              	.LBI319:
  61:boards/TMC2160_eval.c **** {
 2827              		.loc 1 61 31 view .LVU983
  61:boards/TMC2160_eval.c **** {
 2828              		.loc 1 61 31 is_stmt 0 view .LVU984
 2829              	.LBE319:
  63:boards/TMC2160_eval.c **** 
 2830              		.loc 1 63 2 is_stmt 1 view .LVU985
  65:boards/TMC2160_eval.c **** }
 2831              		.loc 1 65 2 view .LVU986
 515:boards/TMC2160_eval.c **** 		}
 2832              		.loc 1 515 4 is_stmt 0 view .LVU987
 2833 0930 FFF7FEFF 		bl	tmc2160_readInt
 2834              	.LVL348:
 2835 0934 2B68     		ldr	r3, [r5]
 2836 0936 5B03     		lsls	r3, r3, #13
 2837 0938 03F40053 		and	r3, r3, #8192
 2838 093c 20F40052 		bic	r2, r0, #8192
 2839 0940 1A43     		orrs	r2, r2, r3
 2840 0942 6A48     		ldr	r0, .L166
 2841 0944 6C21     		movs	r1, #108
 2842 0946 FFF7FEFF 		bl	tmc2160_writeInt
 2843              	.LVL349:
 141:boards/TMC2160_eval.c **** 
 2844              		.loc 1 141 11 view .LVU988
 2845 094a 0024     		movs	r4, #0
 2846 094c 48E4     		b	.L19
 2847              	.LVL350:
 2848              	.L31:
 520:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_
 2849              		.loc 1 520 3 is_stmt 1 view .LVU989
 521:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2850              		.loc 1 521 13 is_stmt 0 view .LVU990
 2851 094e 6748     		ldr	r0, .L166
 2852              	.LVL351:
 521:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2853              		.loc 1 521 13 view .LVU991
 2854 0950 6C21     		movs	r1, #108
 2855              	.LVL352:
 520:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_
 2856              		.loc 1 520 5 view .LVU992
 2857 0952 2CB9     		cbnz	r4, .L132
 521:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2858              		.loc 1 521 4 is_stmt 1 view .LVU993
 2859              	.LBB320:
 2860              	.LBI320:
  61:boards/TMC2160_eval.c **** {
 2861              		.loc 1 61 31 view .LVU994
 2862              	.LVL353:
  61:boards/TMC2160_eval.c **** {
 2863              		.loc 1 61 31 is_stmt 0 view .LVU995
 2864              	.LBE320:
  63:boards/TMC2160_eval.c **** 
 2865              		.loc 1 63 2 is_stmt 1 view .LVU996
  65:boards/TMC2160_eval.c **** }
 2866              		.loc 1 65 2 view .LVU997
 521:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2867              		.loc 1 521 13 is_stmt 0 view .LVU998
 2868 0954 FFF7FEFF 		bl	tmc2160_readInt
 2869              	.LVL354:
 2870 0958 C0F30350 		ubfx	r0, r0, #20, #4
 521:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2871              		.loc 1 521 11 view .LVU999
 2872 095c 2860     		str	r0, [r5]
 2873 095e 3FE4     		b	.L19
 2874              	.LVL355:
 2875              	.L132:
 522:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_SHIFT, 
 2876              		.loc 1 522 10 is_stmt 1 view .LVU1000
 523:boards/TMC2160_eval.c **** 		}
 2877              		.loc 1 523 4 view .LVU1001
 2878              	.LBB321:
 2879              	.LBI321:
  61:boards/TMC2160_eval.c **** {
 2880              		.loc 1 61 31 view .LVU1002
  61:boards/TMC2160_eval.c **** {
 2881              		.loc 1 61 31 is_stmt 0 view .LVU1003
 2882              	.LBE321:
  63:boards/TMC2160_eval.c **** 
 2883              		.loc 1 63 2 is_stmt 1 view .LVU1004
  65:boards/TMC2160_eval.c **** }
 2884              		.loc 1 65 2 view .LVU1005
 2885              	.LBB322:
 2886              	.LBI322:
  61:boards/TMC2160_eval.c **** {
 2887              		.loc 1 61 31 view .LVU1006
  61:boards/TMC2160_eval.c **** {
 2888              		.loc 1 61 31 is_stmt 0 view .LVU1007
 2889              	.LBE322:
  63:boards/TMC2160_eval.c **** 
 2890              		.loc 1 63 2 is_stmt 1 view .LVU1008
  65:boards/TMC2160_eval.c **** }
 2891              		.loc 1 65 2 view .LVU1009
 523:boards/TMC2160_eval.c **** 		}
 2892              		.loc 1 523 4 is_stmt 0 view .LVU1010
 2893 0960 FFF7FEFF 		bl	tmc2160_readInt
 2894              	.LVL356:
 2895 0964 2B68     		ldr	r3, [r5]
 2896 0966 1B05     		lsls	r3, r3, #20
 2897 0968 03F47003 		and	r3, r3, #15728640
 2898 096c 20F47002 		bic	r2, r0, #15728640
 2899 0970 1A43     		orrs	r2, r2, r3
 2900 0972 5E48     		ldr	r0, .L166
 2901 0974 6C21     		movs	r1, #108
 2902 0976 FFF7FEFF 		bl	tmc2160_writeInt
 2903              	.LVL357:
 141:boards/TMC2160_eval.c **** 
 2904              		.loc 1 141 11 view .LVU1011
 2905 097a 0024     		movs	r4, #0
 2906 097c 30E4     		b	.L19
 2907              	.LVL358:
 2908              	.L30:
 528:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TPWMTHRS);
 2909              		.loc 1 528 3 is_stmt 1 view .LVU1012
 528:boards/TMC2160_eval.c **** 			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TPWMTHRS);
 2910              		.loc 1 528 5 is_stmt 0 view .LVU1013
 2911 097e 84B9     		cbnz	r4, .L133
 529:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2912              		.loc 1 529 4 is_stmt 1 view .LVU1014
 2913              	.LBB323:
 2914              	.LBI323:
  61:boards/TMC2160_eval.c **** {
 2915              		.loc 1 61 31 view .LVU1015
 2916              	.LVL359:
  61:boards/TMC2160_eval.c **** {
 2917              		.loc 1 61 31 is_stmt 0 view .LVU1016
 2918              	.LBE323:
  63:boards/TMC2160_eval.c **** 
 2919              		.loc 1 63 2 is_stmt 1 view .LVU1017
  65:boards/TMC2160_eval.c **** }
 2920              		.loc 1 65 2 view .LVU1018
 529:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2921              		.loc 1 529 16 is_stmt 0 view .LVU1019
 2922 0980 5A48     		ldr	r0, .L166
 2923              	.LVL360:
 529:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2924              		.loc 1 529 16 view .LVU1020
 2925 0982 1321     		movs	r1, #19
 2926              	.LVL361:
 529:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 2927              		.loc 1 529 16 view .LVU1021
 2928 0984 FFF7FEFF 		bl	tmc2160_readInt
 2929              	.LVL362:
 530:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2930              		.loc 1 530 4 is_stmt 1 view .LVU1022
 530:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2931              		.loc 1 530 13 is_stmt 0 view .LVU1023
 2932 0988 0028     		cmp	r0, #0
 530:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2933              		.loc 1 530 13 view .LVU1024
 2934 098a 08BF     		it	eq
 2935 098c 0120     		moveq	r0, #1
 2936              	.LVL363:
 530:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2937              		.loc 1 530 13 view .LVU1025
 2938 098e 4FF08073 		mov	r3, #16777216
 2939 0992 93FBF0F0 		sdiv	r0, r3, r0
 530:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2940              		.loc 1 530 11 view .LVU1026
 2941 0996 564B     		ldr	r3, .L166+4
 2942 0998 9842     		cmp	r0, r3
 2943 099a D4BF     		ite	le
 2944 099c 2860     		strle	r0, [r5]
 2945 099e 2B60     		strgt	r3, [r5]
 2946 09a0 1EE4     		b	.L19
 2947              	.LVL364:
 2948              	.L133:
 531:boards/TMC2160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 2949              		.loc 1 531 10 is_stmt 1 view .LVU1027
 532:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
 2950              		.loc 1 532 4 view .LVU1028
 532:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
 2951              		.loc 1 532 13 is_stmt 0 view .LVU1029
 2952 09a2 2B68     		ldr	r3, [r5]
 533:boards/TMC2160_eval.c **** 		}
 2953              		.loc 1 533 4 view .LVU1030
 2954 09a4 5148     		ldr	r0, .L166
 2955              	.LVL365:
 532:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
 2956              		.loc 1 532 13 view .LVU1031
 2957 09a6 002B     		cmp	r3, #0
 2958 09a8 08BF     		it	eq
 2959 09aa 0123     		moveq	r3, #1
 2960 09ac 4FF08072 		mov	r2, #16777216
 2961 09b0 92FBF3F2 		sdiv	r2, r2, r3
 2962 09b4 4E4B     		ldr	r3, .L166+4
 2963 09b6 9A42     		cmp	r2, r3
 2964 09b8 A8BF     		it	ge
 2965 09ba 1A46     		movge	r2, r3
 532:boards/TMC2160_eval.c **** 			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
 2966              		.loc 1 532 11 view .LVU1032
 2967 09bc 2A60     		str	r2, [r5]
 533:boards/TMC2160_eval.c **** 		}
 2968              		.loc 1 533 4 is_stmt 1 view .LVU1033
 2969              	.LBB324:
 2970              	.LBI324:
  61:boards/TMC2160_eval.c **** {
 2971              		.loc 1 61 31 view .LVU1034
 2972              	.LVL366:
  61:boards/TMC2160_eval.c **** {
 2973              		.loc 1 61 31 is_stmt 0 view .LVU1035
 2974              	.LBE324:
  63:boards/TMC2160_eval.c **** 
 2975              		.loc 1 63 2 is_stmt 1 view .LVU1036
  65:boards/TMC2160_eval.c **** }
 2976              		.loc 1 65 2 view .LVU1037
 533:boards/TMC2160_eval.c **** 		}
 2977              		.loc 1 533 4 is_stmt 0 view .LVU1038
 2978 09be 1321     		movs	r1, #19
 2979              	.LVL367:
 533:boards/TMC2160_eval.c **** 		}
 2980              		.loc 1 533 4 view .LVU1039
 2981 09c0 FFF7FEFF 		bl	tmc2160_writeInt
 2982              	.LVL368:
 141:boards/TMC2160_eval.c **** 
 2983              		.loc 1 141 11 view .LVU1040
 2984 09c4 0024     		movs	r4, #0
 2985 09c6 0BE4     		b	.L19
 2986              	.LVL369:
 2987              	.L29:
 538:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PW
 2988              		.loc 1 538 3 is_stmt 1 view .LVU1041
 539:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2989              		.loc 1 539 13 is_stmt 0 view .LVU1042
 2990 09c8 4848     		ldr	r0, .L166
 2991              	.LVL370:
 539:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2992              		.loc 1 539 13 view .LVU1043
 2993 09ca 7021     		movs	r1, #112
 2994              	.LVL371:
 538:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PW
 2995              		.loc 1 538 5 view .LVU1044
 2996 09cc 2CB9     		cbnz	r4, .L136
 539:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 2997              		.loc 1 539 4 is_stmt 1 view .LVU1045
 2998              	.LBB325:
 2999              	.LBI325:
  61:boards/TMC2160_eval.c **** {
 3000              		.loc 1 61 31 view .LVU1046
 3001              	.LVL372:
  61:boards/TMC2160_eval.c **** {
 3002              		.loc 1 61 31 is_stmt 0 view .LVU1047
 3003              	.LBE325:
  63:boards/TMC2160_eval.c **** 
 3004              		.loc 1 63 2 is_stmt 1 view .LVU1048
  65:boards/TMC2160_eval.c **** }
 3005              		.loc 1 65 2 view .LVU1049
 539:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3006              		.loc 1 539 13 is_stmt 0 view .LVU1050
 3007 09ce FFF7FEFF 		bl	tmc2160_readInt
 3008              	.LVL373:
 3009 09d2 C0F30720 		ubfx	r0, r0, #8, #8
 539:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3010              		.loc 1 539 11 view .LVU1051
 3011 09d6 2860     		str	r0, [r5]
 3012 09d8 02E4     		b	.L19
 3013              	.LVL374:
 3014              	.L136:
 540:boards/TMC2160_eval.c **** 			// Set gradient
 3015              		.loc 1 540 10 is_stmt 1 view .LVU1052
 542:boards/TMC2160_eval.c **** 
 3016              		.loc 1 542 4 view .LVU1053
 3017              	.LBB326:
 3018              	.LBI326:
  61:boards/TMC2160_eval.c **** {
 3019              		.loc 1 61 31 view .LVU1054
  61:boards/TMC2160_eval.c **** {
 3020              		.loc 1 61 31 is_stmt 0 view .LVU1055
 3021              	.LBE326:
  63:boards/TMC2160_eval.c **** 
 3022              		.loc 1 63 2 is_stmt 1 view .LVU1056
  65:boards/TMC2160_eval.c **** }
 3023              		.loc 1 65 2 view .LVU1057
 3024              	.LBB327:
 3025              	.LBI327:
  61:boards/TMC2160_eval.c **** {
 3026              		.loc 1 61 31 view .LVU1058
  61:boards/TMC2160_eval.c **** {
 3027              		.loc 1 61 31 is_stmt 0 view .LVU1059
 3028              	.LBE327:
  63:boards/TMC2160_eval.c **** 
 3029              		.loc 1 63 2 is_stmt 1 view .LVU1060
  65:boards/TMC2160_eval.c **** }
 3030              		.loc 1 65 2 view .LVU1061
 542:boards/TMC2160_eval.c **** 
 3031              		.loc 1 542 4 is_stmt 0 view .LVU1062
 3032 09da FFF7FEFF 		bl	tmc2160_readInt
 3033              	.LVL375:
 3034 09de 2B68     		ldr	r3, [r5]
 3035 09e0 1B02     		lsls	r3, r3, #8
 3036 09e2 9BB2     		uxth	r3, r3
 3037 09e4 20F47F42 		bic	r2, r0, #65280
 3038 09e8 1A43     		orrs	r2, r2, r3
 3039 09ea 4048     		ldr	r0, .L166
 3040 09ec 7021     		movs	r1, #112
 3041 09ee FFF7FEFF 		bl	tmc2160_writeInt
 3042              	.LVL376:
 545:boards/TMC2160_eval.c **** 		}
 3043              		.loc 1 545 4 is_stmt 1 view .LVU1063
 3044              	.LBB328:
 3045              	.LBI328:
  61:boards/TMC2160_eval.c **** {
 3046              		.loc 1 61 31 view .LVU1064
  61:boards/TMC2160_eval.c **** {
 3047              		.loc 1 61 31 is_stmt 0 view .LVU1065
 3048              	.LBE328:
  63:boards/TMC2160_eval.c **** 
 3049              		.loc 1 63 2 is_stmt 1 view .LVU1066
  65:boards/TMC2160_eval.c **** }
 3050              		.loc 1 65 2 view .LVU1067
 3051              	.LBB329:
 3052              	.LBI329:
  61:boards/TMC2160_eval.c **** {
 3053              		.loc 1 61 31 view .LVU1068
  61:boards/TMC2160_eval.c **** {
 3054              		.loc 1 61 31 is_stmt 0 view .LVU1069
 3055              	.LBE329:
  63:boards/TMC2160_eval.c **** 
 3056              		.loc 1 63 2 is_stmt 1 view .LVU1070
  65:boards/TMC2160_eval.c **** }
 3057              		.loc 1 65 2 view .LVU1071
 545:boards/TMC2160_eval.c **** 		}
 3058              		.loc 1 545 4 is_stmt 0 view .LVU1072
 3059 09f2 0021     		movs	r1, #0
 3060 09f4 3D48     		ldr	r0, .L166
 3061 09f6 FFF7FEFF 		bl	tmc2160_readInt
 3062              	.LVL377:
 3063 09fa 2B68     		ldr	r3, [r5]
 3064 09fc 002B     		cmp	r3, #0
 3065 09fe 20F00402 		bic	r2, r0, #4
 3066 0a02 18BF     		it	ne
 3067 0a04 0423     		movne	r3, #4
 3068 0a06 3948     		ldr	r0, .L166
 3069 0a08 1A43     		orrs	r2, r2, r3
 3070 0a0a 0021     		movs	r1, #0
 3071 0a0c FFF7FEFF 		bl	tmc2160_writeInt
 3072              	.LVL378:
 141:boards/TMC2160_eval.c **** 
 3073              		.loc 1 141 11 view .LVU1073
 3074 0a10 0024     		movs	r4, #0
 3075 0a12 FFF7E5BB 		b	.L19
 3076              	.LVL379:
 3077              	.L28:
 550:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PW
 3078              		.loc 1 550 3 is_stmt 1 view .LVU1074
 551:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3079              		.loc 1 551 13 is_stmt 0 view .LVU1075
 3080 0a16 3548     		ldr	r0, .L166
 3081              	.LVL380:
 551:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3082              		.loc 1 551 13 view .LVU1076
 3083 0a18 7021     		movs	r1, #112
 3084              	.LVL381:
 550:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PW
 3085              		.loc 1 550 5 view .LVU1077
 3086 0a1a 2CB9     		cbnz	r4, .L138
 551:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3087              		.loc 1 551 4 is_stmt 1 view .LVU1078
 3088              	.LBB330:
 3089              	.LBI330:
  61:boards/TMC2160_eval.c **** {
 3090              		.loc 1 61 31 view .LVU1079
 3091              	.LVL382:
  61:boards/TMC2160_eval.c **** {
 3092              		.loc 1 61 31 is_stmt 0 view .LVU1080
 3093              	.LBE330:
  63:boards/TMC2160_eval.c **** 
 3094              		.loc 1 63 2 is_stmt 1 view .LVU1081
  65:boards/TMC2160_eval.c **** }
 3095              		.loc 1 65 2 view .LVU1082
 551:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3096              		.loc 1 551 13 is_stmt 0 view .LVU1083
 3097 0a1c FFF7FEFF 		bl	tmc2160_readInt
 3098              	.LVL383:
 3099 0a20 C0B2     		uxtb	r0, r0
 551:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3100              		.loc 1 551 11 view .LVU1084
 3101 0a22 2860     		str	r0, [r5]
 3102 0a24 FFF7DCBB 		b	.L19
 3103              	.LVL384:
 3104              	.L138:
 552:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PWM_AMPL_
 3105              		.loc 1 552 10 is_stmt 1 view .LVU1085
 553:boards/TMC2160_eval.c **** 		}
 3106              		.loc 1 553 4 view .LVU1086
 3107              	.LBB331:
 3108              	.LBI331:
  61:boards/TMC2160_eval.c **** {
 3109              		.loc 1 61 31 view .LVU1087
  61:boards/TMC2160_eval.c **** {
 3110              		.loc 1 61 31 is_stmt 0 view .LVU1088
 3111              	.LBE331:
  63:boards/TMC2160_eval.c **** 
 3112              		.loc 1 63 2 is_stmt 1 view .LVU1089
  65:boards/TMC2160_eval.c **** }
 3113              		.loc 1 65 2 view .LVU1090
 3114              	.LBB332:
 3115              	.LBI332:
  61:boards/TMC2160_eval.c **** {
 3116              		.loc 1 61 31 view .LVU1091
  61:boards/TMC2160_eval.c **** {
 3117              		.loc 1 61 31 is_stmt 0 view .LVU1092
 3118              	.LBE332:
  63:boards/TMC2160_eval.c **** 
 3119              		.loc 1 63 2 is_stmt 1 view .LVU1093
  65:boards/TMC2160_eval.c **** }
 3120              		.loc 1 65 2 view .LVU1094
 553:boards/TMC2160_eval.c **** 		}
 3121              		.loc 1 553 4 is_stmt 0 view .LVU1095
 3122 0a28 FFF7FEFF 		bl	tmc2160_readInt
 3123              	.LVL385:
 3124 0a2c 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 3125 0a2e 20F0FF00 		bic	r0, r0, #255
 3126 0a32 0243     		orrs	r2, r2, r0
 3127 0a34 7021     		movs	r1, #112
 3128 0a36 2D48     		ldr	r0, .L166
 3129 0a38 FFF7FEFF 		bl	tmc2160_writeInt
 3130              	.LVL386:
 141:boards/TMC2160_eval.c **** 
 3131              		.loc 1 141 11 view .LVU1096
 3132 0a3c 0024     		movs	r4, #0
 3133 0a3e FFF7CFBB 		b	.L19
 3134              	.LVL387:
 3135              	.L27:
 558:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PW
 3136              		.loc 1 558 3 is_stmt 1 view .LVU1097
 558:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PW
 3137              		.loc 1 558 5 is_stmt 0 view .LVU1098
 3138 0a42 44B9     		cbnz	r4, .L139
 559:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3139              		.loc 1 559 4 is_stmt 1 view .LVU1099
 3140              	.LBB333:
 3141              	.LBI333:
  61:boards/TMC2160_eval.c **** {
 3142              		.loc 1 61 31 view .LVU1100
 3143              	.LVL388:
  61:boards/TMC2160_eval.c **** {
 3144              		.loc 1 61 31 is_stmt 0 view .LVU1101
 3145              	.LBE333:
  63:boards/TMC2160_eval.c **** 
 3146              		.loc 1 63 2 is_stmt 1 view .LVU1102
  65:boards/TMC2160_eval.c **** }
 3147              		.loc 1 65 2 view .LVU1103
 559:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3148              		.loc 1 559 13 is_stmt 0 view .LVU1104
 3149 0a44 2948     		ldr	r0, .L166
 3150              	.LVL389:
 559:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3151              		.loc 1 559 13 view .LVU1105
 3152 0a46 7021     		movs	r1, #112
 3153              	.LVL390:
 559:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3154              		.loc 1 559 13 view .LVU1106
 3155 0a48 FFF7FEFF 		bl	tmc2160_readInt
 3156              	.LVL391:
 3157 0a4c C0F30140 		ubfx	r0, r0, #16, #2
 559:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3158              		.loc 1 559 11 view .LVU1107
 3159 0a50 2860     		str	r0, [r5]
 3160 0a52 FFF7C5BB 		b	.L19
 3161              	.LVL392:
 3162              	.L139:
 560:boards/TMC2160_eval.c **** 			if(*value >= 0 && *value < 4)
 3163              		.loc 1 560 10 is_stmt 1 view .LVU1108
 561:boards/TMC2160_eval.c **** 			{
 3164              		.loc 1 561 4 view .LVU1109
 561:boards/TMC2160_eval.c **** 			{
 3165              		.loc 1 561 6 is_stmt 0 view .LVU1110
 3166 0a56 2B68     		ldr	r3, [r5]
 3167 0a58 032B     		cmp	r3, #3
 3168 0a5a 6DD8     		bhi	.L156
 563:boards/TMC2160_eval.c **** 			}
 3169              		.loc 1 563 5 is_stmt 1 view .LVU1111
 3170              	.LBB334:
 3171              	.LBI334:
  61:boards/TMC2160_eval.c **** {
 3172              		.loc 1 61 31 view .LVU1112
 3173              	.LVL393:
  61:boards/TMC2160_eval.c **** {
 3174              		.loc 1 61 31 is_stmt 0 view .LVU1113
 3175              	.LBE334:
  63:boards/TMC2160_eval.c **** 
 3176              		.loc 1 63 2 is_stmt 1 view .LVU1114
  65:boards/TMC2160_eval.c **** }
 3177              		.loc 1 65 2 view .LVU1115
 3178              	.LBB335:
 3179              	.LBI335:
  61:boards/TMC2160_eval.c **** {
 3180              		.loc 1 61 31 view .LVU1116
  61:boards/TMC2160_eval.c **** {
 3181              		.loc 1 61 31 is_stmt 0 view .LVU1117
 3182              	.LBE335:
  63:boards/TMC2160_eval.c **** 
 3183              		.loc 1 63 2 is_stmt 1 view .LVU1118
  65:boards/TMC2160_eval.c **** }
 3184              		.loc 1 65 2 view .LVU1119
 563:boards/TMC2160_eval.c **** 			}
 3185              		.loc 1 563 5 is_stmt 0 view .LVU1120
 3186 0a5c 7021     		movs	r1, #112
 3187              	.LVL394:
 563:boards/TMC2160_eval.c **** 			}
 3188              		.loc 1 563 5 view .LVU1121
 3189 0a5e 2348     		ldr	r0, .L166
 3190              	.LVL395:
 563:boards/TMC2160_eval.c **** 			}
 3191              		.loc 1 563 5 view .LVU1122
 3192 0a60 FFF7FEFF 		bl	tmc2160_readInt
 3193              	.LVL396:
 3194 0a64 2B68     		ldr	r3, [r5]
 3195 0a66 1B04     		lsls	r3, r3, #16
 3196 0a68 03F44033 		and	r3, r3, #196608
 3197 0a6c 20F44032 		bic	r2, r0, #196608
 3198 0a70 1A43     		orrs	r2, r2, r3
 3199 0a72 1E48     		ldr	r0, .L166
 3200 0a74 7021     		movs	r1, #112
 3201 0a76 FFF7FEFF 		bl	tmc2160_writeInt
 3202              	.LVL397:
 141:boards/TMC2160_eval.c **** 
 3203              		.loc 1 141 11 view .LVU1123
 3204 0a7a 0024     		movs	r4, #0
 3205 0a7c FFF7B0BB 		b	.L19
 3206              	.LVL398:
 3207              	.L26:
 573:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC21
 3208              		.loc 1 573 3 is_stmt 1 view .LVU1124
 574:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3209              		.loc 1 574 13 is_stmt 0 view .LVU1125
 3210 0a80 1A48     		ldr	r0, .L166
 3211              	.LVL399:
 574:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3212              		.loc 1 574 13 view .LVU1126
 3213 0a82 7021     		movs	r1, #112
 3214              	.LVL400:
 573:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC21
 3215              		.loc 1 573 5 view .LVU1127
 3216 0a84 34B9     		cbnz	r4, .L140
 574:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3217              		.loc 1 574 4 is_stmt 1 view .LVU1128
 3218              	.LBB336:
 3219              	.LBI336:
  61:boards/TMC2160_eval.c **** {
 3220              		.loc 1 61 31 view .LVU1129
 3221              	.LVL401:
  61:boards/TMC2160_eval.c **** {
 3222              		.loc 1 61 31 is_stmt 0 view .LVU1130
 3223              	.LBE336:
  63:boards/TMC2160_eval.c **** 
 3224              		.loc 1 63 2 is_stmt 1 view .LVU1131
  65:boards/TMC2160_eval.c **** }
 3225              		.loc 1 65 2 view .LVU1132
 574:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3226              		.loc 1 574 13 is_stmt 0 view .LVU1133
 3227 0a86 FFF7FEFF 		bl	tmc2160_readInt
 3228              	.LVL402:
 3229 0a8a C0F38040 		ubfx	r0, r0, #18, #1
 574:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3230              		.loc 1 574 11 view .LVU1134
 3231 0a8e 2860     		str	r0, [r5]
 3232 0a90 FFF7A6BB 		b	.L19
 3233              	.LVL403:
 3234              	.L140:
 575:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC2160_PWM_
 3235              		.loc 1 575 10 is_stmt 1 view .LVU1135
 576:boards/TMC2160_eval.c **** 		}
 3236              		.loc 1 576 4 view .LVU1136
 3237              	.LBB337:
 3238              	.LBI337:
  61:boards/TMC2160_eval.c **** {
 3239              		.loc 1 61 31 view .LVU1137
  61:boards/TMC2160_eval.c **** {
 3240              		.loc 1 61 31 is_stmt 0 view .LVU1138
 3241              	.LBE337:
  63:boards/TMC2160_eval.c **** 
 3242              		.loc 1 63 2 is_stmt 1 view .LVU1139
  65:boards/TMC2160_eval.c **** }
 3243              		.loc 1 65 2 view .LVU1140
 3244              	.LBB338:
 3245              	.LBI338:
  61:boards/TMC2160_eval.c **** {
 3246              		.loc 1 61 31 view .LVU1141
  61:boards/TMC2160_eval.c **** {
 3247              		.loc 1 61 31 is_stmt 0 view .LVU1142
 3248              	.LBE338:
  63:boards/TMC2160_eval.c **** 
 3249              		.loc 1 63 2 is_stmt 1 view .LVU1143
  65:boards/TMC2160_eval.c **** }
 3250              		.loc 1 65 2 view .LVU1144
 576:boards/TMC2160_eval.c **** 		}
 3251              		.loc 1 576 4 is_stmt 0 view .LVU1145
 3252 0a94 FFF7FEFF 		bl	tmc2160_readInt
 3253              	.LVL404:
 3254 0a98 2B68     		ldr	r3, [r5]
 3255 0a9a 002B     		cmp	r3, #0
 3256 0a9c 20F48022 		bic	r2, r0, #262144
 3257 0aa0 18BF     		it	ne
 3258 0aa2 4FF48023 		movne	r3, #262144
 3259 0aa6 1148     		ldr	r0, .L166
 3260 0aa8 1A43     		orrs	r2, r2, r3
 3261 0aaa 7021     		movs	r1, #112
 3262 0aac FFF7FEFF 		bl	tmc2160_writeInt
 3263              	.LVL405:
 141:boards/TMC2160_eval.c **** 
 3264              		.loc 1 141 11 view .LVU1146
 3265 0ab0 0024     		movs	r4, #0
 3266 0ab2 FFF795BB 		b	.L19
 3267              	.LVL406:
 3268              	.L25:
 581:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_F
 3269              		.loc 1 581 3 is_stmt 1 view .LVU1147
 582:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3270              		.loc 1 582 13 is_stmt 0 view .LVU1148
 3271 0ab6 0D48     		ldr	r0, .L166
 3272              	.LVL407:
 582:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3273              		.loc 1 582 13 view .LVU1149
 3274 0ab8 7021     		movs	r1, #112
 3275              	.LVL408:
 581:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_F
 3276              		.loc 1 581 5 view .LVU1150
 3277 0aba 34B9     		cbnz	r4, .L142
 582:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3278              		.loc 1 582 4 is_stmt 1 view .LVU1151
 3279              	.LBB339:
 3280              	.LBI339:
  61:boards/TMC2160_eval.c **** {
 3281              		.loc 1 61 31 view .LVU1152
 3282              	.LVL409:
  61:boards/TMC2160_eval.c **** {
 3283              		.loc 1 61 31 is_stmt 0 view .LVU1153
 3284              	.LBE339:
  63:boards/TMC2160_eval.c **** 
 3285              		.loc 1 63 2 is_stmt 1 view .LVU1154
  65:boards/TMC2160_eval.c **** }
 3286              		.loc 1 65 2 view .LVU1155
 582:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3287              		.loc 1 582 13 is_stmt 0 view .LVU1156
 3288 0abc FFF7FEFF 		bl	tmc2160_readInt
 3289              	.LVL410:
 3290 0ac0 C0F30150 		ubfx	r0, r0, #20, #2
 582:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3291              		.loc 1 582 11 view .LVU1157
 3292 0ac4 2860     		str	r0, [r5]
 3293 0ac6 FFF78BBB 		b	.L19
 3294              	.LVL411:
 3295              	.L142:
 583:boards/TMC2160_eval.c **** 			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_FREEWHEE
 3296              		.loc 1 583 10 is_stmt 1 view .LVU1158
 584:boards/TMC2160_eval.c **** 		}
 3297              		.loc 1 584 4 view .LVU1159
 3298              	.LBB340:
 3299              	.LBI340:
  61:boards/TMC2160_eval.c **** {
 3300              		.loc 1 61 31 view .LVU1160
  61:boards/TMC2160_eval.c **** {
 3301              		.loc 1 61 31 is_stmt 0 view .LVU1161
 3302              	.LBE340:
  63:boards/TMC2160_eval.c **** 
 3303              		.loc 1 63 2 is_stmt 1 view .LVU1162
  65:boards/TMC2160_eval.c **** }
 3304              		.loc 1 65 2 view .LVU1163
 3305              	.LBB341:
 3306              	.LBI341:
  61:boards/TMC2160_eval.c **** {
 3307              		.loc 1 61 31 view .LVU1164
  61:boards/TMC2160_eval.c **** {
 3308              		.loc 1 61 31 is_stmt 0 view .LVU1165
 3309              	.LBE341:
  63:boards/TMC2160_eval.c **** 
 3310              		.loc 1 63 2 is_stmt 1 view .LVU1166
  65:boards/TMC2160_eval.c **** }
 3311              		.loc 1 65 2 view .LVU1167
 584:boards/TMC2160_eval.c **** 		}
 3312              		.loc 1 584 4 is_stmt 0 view .LVU1168
 3313 0aca FFF7FEFF 		bl	tmc2160_readInt
 3314              	.LVL412:
 3315 0ace 2B68     		ldr	r3, [r5]
 3316 0ad0 1B05     		lsls	r3, r3, #20
 3317 0ad2 03F44013 		and	r3, r3, #3145728
 3318 0ad6 20F44012 		bic	r2, r0, #3145728
 3319 0ada 1A43     		orrs	r2, r2, r3
 3320 0adc 0348     		ldr	r0, .L166
 3321 0ade 7021     		movs	r1, #112
 3322 0ae0 FFF7FEFF 		bl	tmc2160_writeInt
 3323              	.LVL413:
 141:boards/TMC2160_eval.c **** 
 3324              		.loc 1 141 11 view .LVU1169
 3325 0ae4 0024     		movs	r4, #0
 3326 0ae6 FFF77BBB 		b	.L19
 3327              	.L167:
 3328 0aea 00BF     		.align	2
 3329              	.L166:
 3330 0aec 00000000 		.word	TMC2160
 3331 0af0 FFFF0F00 		.word	1048575
 3332              	.LVL414:
 3333              	.L23:
 589:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_SG_RESULT_MASK, TMC216
 3334              		.loc 1 589 3 is_stmt 1 view .LVU1170
 589:boards/TMC2160_eval.c **** 			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_SG_RESULT_MASK, TMC216
 3335              		.loc 1 589 5 is_stmt 0 view .LVU1171
 3336 0af4 1CBB     		cbnz	r4, .L158
 590:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3337              		.loc 1 590 4 is_stmt 1 view .LVU1172
 3338              	.LBB342:
 3339              	.LBI342:
  61:boards/TMC2160_eval.c **** {
 3340              		.loc 1 61 31 view .LVU1173
 3341              	.LVL415:
  61:boards/TMC2160_eval.c **** {
 3342              		.loc 1 61 31 is_stmt 0 view .LVU1174
 3343              	.LBE342:
  63:boards/TMC2160_eval.c **** 
 3344              		.loc 1 63 2 is_stmt 1 view .LVU1175
  65:boards/TMC2160_eval.c **** }
 3345              		.loc 1 65 2 view .LVU1176
 590:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3346              		.loc 1 590 13 is_stmt 0 view .LVU1177
 3347 0af6 1348     		ldr	r0, .L168
 3348              	.LVL416:
 590:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3349              		.loc 1 590 13 view .LVU1178
 3350 0af8 6F21     		movs	r1, #111
 3351              	.LVL417:
 590:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3352              		.loc 1 590 13 view .LVU1179
 3353 0afa FFF7FEFF 		bl	tmc2160_readInt
 3354              	.LVL418:
 3355 0afe C0F30900 		ubfx	r0, r0, #0, #10
 590:boards/TMC2160_eval.c **** 		} else if(readWrite == WRITE) {
 3356              		.loc 1 590 11 view .LVU1180
 3357 0b02 2860     		str	r0, [r5]
 3358 0b04 FFF76CBB 		b	.L19
 3359              	.LVL419:
 3360              	.L143:
 144:boards/TMC2160_eval.c **** 
 3361              		.loc 1 144 10 view .LVU1181
 3362 0b08 0824     		movs	r4, #8
 3363 0b0a FFF769BB 		b	.L19
 3364              	.LVL420:
 3365              	.L144:
 148:boards/TMC2160_eval.c **** 	{
 3366              		.loc 1 148 2 view .LVU1182
 3367 0b0e 0424     		movs	r4, #4
 3368 0b10 FFF766BB 		b	.L19
 3369              	.LVL421:
 3370              	.L145:
 148:boards/TMC2160_eval.c **** 	{
 3371              		.loc 1 148 2 view .LVU1183
 3372 0b14 0424     		movs	r4, #4
 3373 0b16 FFF763BB 		b	.L19
 3374              	.L146:
 188:boards/TMC2160_eval.c **** 		}
 3375              		.loc 1 188 11 view .LVU1184
 3376 0b1a 0424     		movs	r4, #4
 3377 0b1c FFF760BB 		b	.L19
 3378              	.L147:
 3379 0b20 0424     		movs	r4, #4
 3380 0b22 FFF75DBB 		b	.L19
 3381              	.L148:
 3382 0b26 0424     		movs	r4, #4
 3383 0b28 FFF75ABB 		b	.L19
 3384              	.L150:
 3385 0b2c 0424     		movs	r4, #4
 3386 0b2e FFF757BB 		b	.L19
 3387              	.LVL422:
 3388              	.L152:
 188:boards/TMC2160_eval.c **** 		}
 3389              		.loc 1 188 11 view .LVU1185
 3390 0b32 0424     		movs	r4, #4
 3391 0b34 FFF754BB 		b	.L19
 3392              	.L156:
 567:boards/TMC2160_eval.c **** 			}
 3393              		.loc 1 567 12 view .LVU1186
 3394 0b38 1024     		movs	r4, #16
 3395 0b3a FFF751BB 		b	.L19
 3396              	.L158:
 188:boards/TMC2160_eval.c **** 		}
 3397              		.loc 1 188 11 view .LVU1187
 3398 0b3e 0424     		movs	r4, #4
 3399              	.LVL423:
 188:boards/TMC2160_eval.c **** 		}
 3400              		.loc 1 188 11 view .LVU1188
 3401 0b40 FFF74EBB 		b	.L19
 3402              	.L169:
 3403              		.align	2
 3404              	.L168:
 3405 0b44 00000000 		.word	TMC2160
 3406              		.cfi_endproc
 3407              	.LFE10:
 3409              		.align	1
 3410              		.syntax unified
 3411              		.thumb
 3412              		.thumb_func
 3413              		.fpu softvfp
 3415              	SAP:
 3416              	.LVL424:
 3417              	.LFB11:
 603:boards/TMC2160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3418              		.loc 1 603 1 is_stmt 1 view -0
 3419              		.cfi_startproc
 3420              		@ args = 0, pretend = 0, frame = 8
 3421              		@ frame_needed = 0, uses_anonymous_args = 0
 604:boards/TMC2160_eval.c **** }
 3422              		.loc 1 604 2 view .LVU1190
 603:boards/TMC2160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3423              		.loc 1 603 1 is_stmt 0 view .LVU1191
 3424 0b48 07B5     		push	{r0, r1, r2, lr}
 3425              	.LCFI5:
 3426              		.cfi_def_cfa_offset 16
 3427              		.cfi_offset 14, -4
 603:boards/TMC2160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3428              		.loc 1 603 1 view .LVU1192
 3429 0b4a 0192     		str	r2, [sp, #4]
 604:boards/TMC2160_eval.c **** }
 3430              		.loc 1 604 9 view .LVU1193
 3431 0b4c 01AB     		add	r3, sp, #4
 3432 0b4e 0246     		mov	r2, r0
 3433              	.LVL425:
 604:boards/TMC2160_eval.c **** }
 3434              		.loc 1 604 9 view .LVU1194
 3435 0b50 0120     		movs	r0, #1
 3436              	.LVL426:
 604:boards/TMC2160_eval.c **** }
 3437              		.loc 1 604 9 view .LVU1195
 3438 0b52 FFF7B4FA 		bl	handleParameter
 3439              	.LVL427:
 605:boards/TMC2160_eval.c **** 
 3440              		.loc 1 605 1 view .LVU1196
 3441 0b56 03B0     		add	sp, sp, #12
 3442              	.LCFI6:
 3443              		.cfi_def_cfa_offset 4
 3444              		@ sp needed
 3445 0b58 5DF804FB 		ldr	pc, [sp], #4
 3446              		.cfi_endproc
 3447              	.LFE11:
 3449              		.align	1
 3450              		.syntax unified
 3451              		.thumb
 3452              		.thumb_func
 3453              		.fpu softvfp
 3455              	GAP:
 3456              	.LVL428:
 3457              	.LFB12:
 608:boards/TMC2160_eval.c **** 	return handleParameter(READ, motor, type, value);
 3458              		.loc 1 608 1 is_stmt 1 view -0
 3459              		.cfi_startproc
 3460              		@ args = 0, pretend = 0, frame = 0
 3461              		@ frame_needed = 0, uses_anonymous_args = 0
 3462              		@ link register save eliminated.
 609:boards/TMC2160_eval.c **** }
 3463              		.loc 1 609 2 view .LVU1198
 608:boards/TMC2160_eval.c **** 	return handleParameter(READ, motor, type, value);
 3464              		.loc 1 608 1 is_stmt 0 view .LVU1199
 3465 0b5c 1346     		mov	r3, r2
 609:boards/TMC2160_eval.c **** }
 3466              		.loc 1 609 9 view .LVU1200
 3467 0b5e 0246     		mov	r2, r0
 3468              	.LVL429:
 609:boards/TMC2160_eval.c **** }
 3469              		.loc 1 609 9 view .LVU1201
 3470 0b60 0020     		movs	r0, #0
 3471              	.LVL430:
 609:boards/TMC2160_eval.c **** }
 3472              		.loc 1 609 9 view .LVU1202
 3473 0b62 FFF7ACBA 		b	handleParameter
 3474              	.LVL431:
 609:boards/TMC2160_eval.c **** }
 3475              		.loc 1 609 9 view .LVU1203
 3476              		.cfi_endproc
 3477              	.LFE12:
 3479              		.align	1
 3480              		.syntax unified
 3481              		.thumb
 3482              		.thumb_func
 3483              		.fpu softvfp
 3485              	restore:
 3486              	.LFB23:
 796:boards/TMC2160_eval.c **** 
 797:boards/TMC2160_eval.c **** static uint8_t reset()
 798:boards/TMC2160_eval.c **** {
 799:boards/TMC2160_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 800:boards/TMC2160_eval.c **** 		return 0;
 801:boards/TMC2160_eval.c **** 
 802:boards/TMC2160_eval.c **** 	tmc2160_reset(&TMC2160);
 803:boards/TMC2160_eval.c **** 
 804:boards/TMC2160_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 805:boards/TMC2160_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 806:boards/TMC2160_eval.c **** 
 807:boards/TMC2160_eval.c **** 	return 1;
 808:boards/TMC2160_eval.c **** }
 809:boards/TMC2160_eval.c **** 
 810:boards/TMC2160_eval.c **** static uint8_t restore()
 811:boards/TMC2160_eval.c **** {
 3487              		.loc 1 811 1 is_stmt 1 view -0
 3488              		.cfi_startproc
 3489              		@ args = 0, pretend = 0, frame = 0
 3490              		@ frame_needed = 0, uses_anonymous_args = 0
 3491              		@ link register save eliminated.
 812:boards/TMC2160_eval.c **** 	return tmc2160_restore(&TMC2160);
 3492              		.loc 1 812 2 view .LVU1205
 3493              		.loc 1 812 9 is_stmt 0 view .LVU1206
 3494 0b66 0148     		ldr	r0, .L173
 3495 0b68 FFF7FEBF 		b	tmc2160_restore
 3496              	.LVL432:
 3497              	.L174:
 3498              		.align	2
 3499              	.L173:
 3500 0b6c 00000000 		.word	TMC2160
 3501              		.cfi_endproc
 3502              	.LFE23:
 3504              		.align	1
 3505              		.syntax unified
 3506              		.thumb
 3507              		.thumb_func
 3508              		.fpu softvfp
 3510              	reset:
 3511              	.LFB22:
 798:boards/TMC2160_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 3512              		.loc 1 798 1 is_stmt 1 view -0
 3513              		.cfi_startproc
 3514              		@ args = 0, pretend = 0, frame = 0
 3515              		@ frame_needed = 0, uses_anonymous_args = 0
 799:boards/TMC2160_eval.c **** 		return 0;
 3516              		.loc 1 799 2 view .LVU1208
 798:boards/TMC2160_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 3517              		.loc 1 798 1 is_stmt 0 view .LVU1209
 3518 0b70 08B5     		push	{r3, lr}
 3519              	.LCFI7:
 3520              		.cfi_def_cfa_offset 8
 3521              		.cfi_offset 3, -8
 3522              		.cfi_offset 14, -4
 799:boards/TMC2160_eval.c **** 		return 0;
 3523              		.loc 1 799 5 view .LVU1210
 3524 0b72 0020     		movs	r0, #0
 3525 0b74 FFF7FEFF 		bl	StepDir_getActualVelocity
 3526              	.LVL433:
 799:boards/TMC2160_eval.c **** 		return 0;
 3527              		.loc 1 799 4 view .LVU1211
 3528 0b78 10B1     		cbz	r0, .L176
 799:boards/TMC2160_eval.c **** 		return 0;
 3529              		.loc 1 799 55 discriminator 1 view .LVU1212
 3530 0b7a 094B     		ldr	r3, .L184
 3531 0b7c 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 799:boards/TMC2160_eval.c **** 		return 0;
 3532              		.loc 1 799 34 discriminator 1 view .LVU1213
 3533 0b7e 70B1     		cbz	r0, .L177
 3534              	.L176:
 802:boards/TMC2160_eval.c **** 
 3535              		.loc 1 802 2 is_stmt 1 view .LVU1214
 3536 0b80 0848     		ldr	r0, .L184+4
 3537 0b82 FFF7FEFF 		bl	tmc2160_reset
 3538              	.LVL434:
 804:boards/TMC2160_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 3539              		.loc 1 804 2 view .LVU1215
 3540 0b86 4FF40030 		mov	r0, #131072
 3541 0b8a FFF7FEFF 		bl	StepDir_init
 3542              	.LVL435:
 805:boards/TMC2160_eval.c **** 
 3543              		.loc 1 805 2 view .LVU1216
 3544 0b8e 0649     		ldr	r1, .L184+8
 3545 0b90 0023     		movs	r3, #0
 3546 0b92 1846     		mov	r0, r3
 3547 0b94 D1E90112 		ldrd	r1, r2, [r1, #4]
 3548 0b98 FFF7FEFF 		bl	StepDir_setPins
 3549              	.LVL436:
 807:boards/TMC2160_eval.c **** }
 3550              		.loc 1 807 2 view .LVU1217
 807:boards/TMC2160_eval.c **** }
 3551              		.loc 1 807 9 is_stmt 0 view .LVU1218
 3552 0b9c 0120     		movs	r0, #1
 3553              	.L177:
 808:boards/TMC2160_eval.c **** 
 3554              		.loc 1 808 1 view .LVU1219
 3555 0b9e 08BD     		pop	{r3, pc}
 3556              	.L185:
 3557              		.align	2
 3558              	.L184:
 3559 0ba0 00000000 		.word	VitalSignsMonitor
 3560 0ba4 00000000 		.word	TMC2160
 3561 0ba8 00000000 		.word	.LANCHOR0
 3562              		.cfi_endproc
 3563              	.LFE22:
 3565              		.align	1
 3566              		.syntax unified
 3567              		.thumb
 3568              		.thumb_func
 3569              		.fpu softvfp
 3571              	enableDriver:
 3572              	.LVL437:
 3573              	.LFB25:
 813:boards/TMC2160_eval.c **** }
 814:boards/TMC2160_eval.c **** 
 815:boards/TMC2160_eval.c **** static void configCallback(TMC2160TypeDef *tmc2160, ConfigState state)
 816:boards/TMC2160_eval.c **** {
 817:boards/TMC2160_eval.c **** 	if(state == CONFIG_RESET)
 818:boards/TMC2160_eval.c **** 	{	// Change hardware-preset registers here
 819:boards/TMC2160_eval.c **** 		tmc2160_writeInt(tmc2160, TMC2160_PWMCONF, 0xC40C001E);
 820:boards/TMC2160_eval.c **** 		tmc2160_writeInt(tmc2160, TMC2160_DRV_CONF, 0x00080400);
 821:boards/TMC2160_eval.c **** 		//tmc2160_writeInt(tmc2160, TMC2160_PWMCONF, 0x000504C8);
 822:boards/TMC2160_eval.c **** 
 823:boards/TMC2160_eval.c **** 		tmc2160_fillShadowRegisters(tmc2160);
 824:boards/TMC2160_eval.c **** 	}
 825:boards/TMC2160_eval.c **** }
 826:boards/TMC2160_eval.c **** 
 827:boards/TMC2160_eval.c **** static void enableDriver(DriverState state)
 828:boards/TMC2160_eval.c **** {
 3574              		.loc 1 828 1 is_stmt 1 view -0
 3575              		.cfi_startproc
 3576              		@ args = 0, pretend = 0, frame = 0
 3577              		@ frame_needed = 0, uses_anonymous_args = 0
 3578              		@ link register save eliminated.
 829:boards/TMC2160_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 3579              		.loc 1 829 2 view .LVU1221
 3580              		.loc 1 829 4 is_stmt 0 view .LVU1222
 3581 0bac 0228     		cmp	r0, #2
 830:boards/TMC2160_eval.c **** 		state = Evalboards.driverEnable;
 3582              		.loc 1 830 3 is_stmt 1 view .LVU1223
 3583              		.loc 1 830 9 is_stmt 0 view .LVU1224
 3584 0bae 04BF     		itt	eq
 3585 0bb0 0B4B     		ldreq	r3, .L191
 3586 0bb2 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 3587              	.LVL438:
 831:boards/TMC2160_eval.c **** 
 832:boards/TMC2160_eval.c **** 	if(state == DRIVER_DISABLE)
 3588              		.loc 1 832 2 is_stmt 1 view .LVU1225
 3589              		.loc 1 832 4 is_stmt 0 view .LVU1226
 3590 0bb6 30B9     		cbnz	r0, .L188
 833:boards/TMC2160_eval.c **** 		HAL.IOs->config->setHigh(Pins.DRV_ENN);
 3591              		.loc 1 833 3 is_stmt 1 view .LVU1227
 3592              		.loc 1 833 6 is_stmt 0 view .LVU1228
 3593 0bb8 0A4B     		ldr	r3, .L191+4
 3594              		.loc 1 833 10 view .LVU1229
 3595 0bba DB68     		ldr	r3, [r3, #12]
 3596              		.loc 1 833 18 view .LVU1230
 3597 0bbc 1B68     		ldr	r3, [r3]
 3598              		.loc 1 833 3 view .LVU1231
 3599 0bbe 5B69     		ldr	r3, [r3, #20]
 3600              	.L190:
 3601              	.LBB345:
 3602              	.LBB346:
 834:boards/TMC2160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 835:boards/TMC2160_eval.c **** 		HAL.IOs->config->setLow(Pins.DRV_ENN);
 3603              		.loc 1 835 3 view .LVU1232
 3604 0bc0 094A     		ldr	r2, .L191+8
 3605 0bc2 1068     		ldr	r0, [r2]
 3606 0bc4 1847     		bx	r3	@ indirect register sibling call
 3607              	.LVL439:
 3608              	.L188:
 3609              		.loc 1 835 3 view .LVU1233
 3610              	.LBE346:
 3611              	.LBE345:
 834:boards/TMC2160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3612              		.loc 1 834 7 is_stmt 1 view .LVU1234
 834:boards/TMC2160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3613              		.loc 1 834 9 is_stmt 0 view .LVU1235
 3614 0bc6 0128     		cmp	r0, #1
 3615 0bc8 09D1     		bne	.L186
 834:boards/TMC2160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3616              		.loc 1 834 49 discriminator 1 view .LVU1236
 3617 0bca 054B     		ldr	r3, .L191
 834:boards/TMC2160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3618              		.loc 1 834 35 discriminator 1 view .LVU1237
 3619 0bcc 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 3620 0bd0 012B     		cmp	r3, #1
 3621 0bd2 04D1     		bne	.L186
 3622              	.LBB348:
 3623              	.LBI345:
 827:boards/TMC2160_eval.c **** {
 3624              		.loc 1 827 13 is_stmt 1 view .LVU1238
 3625              	.LVL440:
 3626              	.LBB347:
 3627              		.loc 1 835 3 view .LVU1239
 3628              		.loc 1 835 6 is_stmt 0 view .LVU1240
 3629 0bd4 034B     		ldr	r3, .L191+4
 3630              		.loc 1 835 10 view .LVU1241
 3631 0bd6 DB68     		ldr	r3, [r3, #12]
 3632              		.loc 1 835 18 view .LVU1242
 3633 0bd8 1B68     		ldr	r3, [r3]
 3634              		.loc 1 835 3 view .LVU1243
 3635 0bda 9B69     		ldr	r3, [r3, #24]
 3636 0bdc F0E7     		b	.L190
 3637              	.LVL441:
 3638              	.L186:
 3639              		.loc 1 835 3 view .LVU1244
 3640              	.LBE347:
 3641              	.LBE348:
 836:boards/TMC2160_eval.c **** }
 3642              		.loc 1 836 1 view .LVU1245
 3643 0bde 7047     		bx	lr
 3644              	.L192:
 3645              		.align	2
 3646              	.L191:
 3647 0be0 00000000 		.word	Evalboards
 3648 0be4 00000000 		.word	HAL
 3649 0be8 00000000 		.word	.LANCHOR0
 3650              		.cfi_endproc
 3651              	.LFE25:
 3653              		.align	1
 3654              		.syntax unified
 3655              		.thumb
 3656              		.thumb_func
 3657              		.fpu softvfp
 3659              	userFunction:
 3660              	.LVL442:
 3661              	.LFB19:
 697:boards/TMC2160_eval.c **** 	uint32_t errors = 0;
 3662              		.loc 1 697 1 is_stmt 1 view -0
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 0
 3665              		@ frame_needed = 0, uses_anonymous_args = 0
 698:boards/TMC2160_eval.c **** 
 3666              		.loc 1 698 2 view .LVU1247
 700:boards/TMC2160_eval.c **** 
 3667              		.loc 1 700 2 view .LVU1248
 702:boards/TMC2160_eval.c **** 	{
 3668              		.loc 1 702 2 view .LVU1249
 697:boards/TMC2160_eval.c **** 	uint32_t errors = 0;
 3669              		.loc 1 697 1 is_stmt 0 view .LVU1250
 3670 0bec 10B5     		push	{r4, lr}
 3671              	.LCFI8:
 3672              		.cfi_def_cfa_offset 8
 3673              		.cfi_offset 4, -8
 3674              		.cfi_offset 14, -4
 697:boards/TMC2160_eval.c **** 	uint32_t errors = 0;
 3675              		.loc 1 697 1 view .LVU1251
 3676 0bee 1446     		mov	r4, r2
 3677 0bf0 0628     		cmp	r0, #6
 3678 0bf2 05D8     		bhi	.L194
 3679 0bf4 DFE800F0 		tbb	[pc, r0]
 3680              	.L196:
 3681 0bf8 06       		.byte	(.L202-.L196)/2
 3682 0bf9 18       		.byte	(.L201-.L196)/2
 3683 0bfa 16       		.byte	(.L204-.L196)/2
 3684 0bfb 27       		.byte	(.L199-.L196)/2
 3685 0bfc 32       		.byte	(.L198-.L196)/2
 3686 0bfd 37       		.byte	(.L197-.L196)/2
 3687 0bfe 41       		.byte	(.L195-.L196)/2
 3688 0bff 00       		.p2align 1
 3689              	.L194:
 698:boards/TMC2160_eval.c **** 
 3690              		.loc 1 698 11 view .LVU1252
 3691 0c00 0420     		movs	r0, #4
 3692              	.LVL443:
 3693              	.L193:
 758:boards/TMC2160_eval.c **** 
 3694              		.loc 1 758 1 view .LVU1253
 3695 0c02 10BD     		pop	{r4, pc}
 3696              	.LVL444:
 3697              	.L202:
 711:boards/TMC2160_eval.c **** 
 3698              		.loc 1 711 3 is_stmt 1 view .LVU1254
 711:boards/TMC2160_eval.c **** 
 3699              		.loc 1 711 10 is_stmt 0 view .LVU1255
 3700 0c04 1368     		ldr	r3, [r2]
 3701              	.LVL445:
 713:boards/TMC2160_eval.c **** 		{
 3702              		.loc 1 713 3 is_stmt 1 view .LVU1256
 713:boards/TMC2160_eval.c **** 		{
 3703              		.loc 1 713 5 is_stmt 0 view .LVU1257
 3704 0c06 44F62062 		movw	r2, #20000
 3705              	.LVL446:
 713:boards/TMC2160_eval.c **** 		{
 3706              		.loc 1 713 5 view .LVU1258
 3707 0c0a 9342     		cmp	r3, r2
 3708 0c0c 39D8     		bhi	.L205
 716:boards/TMC2160_eval.c **** 		}
 3709              		.loc 1 716 4 is_stmt 1 view .LVU1259
 716:boards/TMC2160_eval.c **** 		}
 3710              		.loc 1 716 41 is_stmt 0 view .LVU1260
 3711 0c0e 42F21172 		movw	r2, #10001
 3712 0c12 B3FBF2F1 		udiv	r1, r3, r2
 3713              	.LVL447:
 716:boards/TMC2160_eval.c **** 		}
 3714              		.loc 1 716 41 view .LVU1261
 3715 0c16 02FB1131 		mls	r1, r2, r1, r3
 716:boards/TMC2160_eval.c **** 		}
 3716              		.loc 1 716 9 view .LVU1262
 3717 0c1a 1B4B     		ldr	r3, .L208
 3718              	.LVL448:
 716:boards/TMC2160_eval.c **** 		}
 3719              		.loc 1 716 4 view .LVU1263
 3720 0c1c 89B2     		uxth	r1, r1
 3721 0c1e 9B68     		ldr	r3, [r3, #8]
 3722 0c20 0020     		movs	r0, #0
 3723              	.LVL449:
 716:boards/TMC2160_eval.c **** 		}
 3724              		.loc 1 716 4 view .LVU1264
 3725 0c22 9847     		blx	r3
 3726              	.LVL450:
 3727              	.L204:
 698:boards/TMC2160_eval.c **** 
 3728              		.loc 1 698 11 view .LVU1265
 3729 0c24 0020     		movs	r0, #0
 3730 0c26 ECE7     		b	.L193
 3731              	.LVL451:
 3732              	.L201:
 727:boards/TMC2160_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 3733              		.loc 1 727 3 is_stmt 1 view .LVU1266
 3734 0c28 184B     		ldr	r3, .L208+4
 727:boards/TMC2160_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 3735              		.loc 1 727 5 is_stmt 0 view .LVU1267
 3736 0c2a 2468     		ldr	r4, [r4]
 3737 0c2c DA68     		ldr	r2, [r3, #12]
 3738              	.LVL452:
 727:boards/TMC2160_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 3739              		.loc 1 727 5 view .LVU1268
 3740 0c2e D2E90030 		ldrd	r3, r0, [r2]
 3741              	.LVL453:
 727:boards/TMC2160_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 3742              		.loc 1 727 5 view .LVU1269
 3743 0c32 00F5F470 		add	r0, r0, #488
 3744 0c36 1CB1     		cbz	r4, .L203
 728:boards/TMC2160_eval.c **** 		else
 3745              		.loc 1 728 4 is_stmt 1 view .LVU1270
 3746 0c38 DB69     		ldr	r3, [r3, #28]
 3747 0c3a 0021     		movs	r1, #0
 3748              	.LVL454:
 3749              	.L207:
 741:boards/TMC2160_eval.c **** 		break;
 3750              		.loc 1 741 3 is_stmt 0 view .LVU1271
 3751 0c3c 9847     		blx	r3
 3752              	.LVL455:
 742:boards/TMC2160_eval.c **** 	case 4:  // Read StepDir status bits
 3753              		.loc 1 742 3 is_stmt 1 view .LVU1272
 3754 0c3e F1E7     		b	.L204
 3755              	.LVL456:
 3756              	.L203:
 730:boards/TMC2160_eval.c **** 		break;
 3757              		.loc 1 730 4 view .LVU1273
 3758 0c40 9B68     		ldr	r3, [r3, #8]
 3759              	.L206:
 748:boards/TMC2160_eval.c **** 		break;
 3760              		.loc 1 748 3 is_stmt 0 view .LVU1274
 3761 0c42 9847     		blx	r3
 3762              	.LVL457:
 749:boards/TMC2160_eval.c **** 	case 6:
 3763              		.loc 1 749 3 is_stmt 1 view .LVU1275
 3764 0c44 EEE7     		b	.L204
 3765              	.LVL458:
 3766              	.L199:
 741:boards/TMC2160_eval.c **** 		break;
 3767              		.loc 1 741 3 view .LVU1276
 741:boards/TMC2160_eval.c **** 		break;
 3768              		.loc 1 741 6 is_stmt 0 view .LVU1277
 3769 0c46 114B     		ldr	r3, .L208+4
 741:boards/TMC2160_eval.c **** 		break;
 3770              		.loc 1 741 3 view .LVU1278
 3771 0c48 1168     		ldr	r1, [r2]
 3772              	.LVL459:
 741:boards/TMC2160_eval.c **** 		break;
 3773              		.loc 1 741 10 view .LVU1279
 3774 0c4a DB68     		ldr	r3, [r3, #12]
 741:boards/TMC2160_eval.c **** 		break;
 3775              		.loc 1 741 3 view .LVU1280
 3776 0c4c 104A     		ldr	r2, .L208+8
 3777              	.LVL460:
 741:boards/TMC2160_eval.c **** 		break;
 3778              		.loc 1 741 18 view .LVU1281
 3779 0c4e 1B68     		ldr	r3, [r3]
 741:boards/TMC2160_eval.c **** 		break;
 3780              		.loc 1 741 3 view .LVU1282
 3781 0c50 5069     		ldr	r0, [r2, #20]
 3782              	.LVL461:
 741:boards/TMC2160_eval.c **** 		break;
 3783              		.loc 1 741 3 view .LVU1283
 3784 0c52 DB69     		ldr	r3, [r3, #28]
 3785 0c54 0039     		subs	r1, r1, #0
 3786 0c56 18BF     		it	ne
 3787 0c58 0121     		movne	r1, #1
 3788 0c5a EFE7     		b	.L207
 3789              	.LVL462:
 3790              	.L198:
 744:boards/TMC2160_eval.c **** 		break;
 3791              		.loc 1 744 3 is_stmt 1 view .LVU1284
 744:boards/TMC2160_eval.c **** 		break;
 3792              		.loc 1 744 12 is_stmt 0 view .LVU1285
 3793 0c5c 0846     		mov	r0, r1
 3794              	.LVL463:
 744:boards/TMC2160_eval.c **** 		break;
 3795              		.loc 1 744 12 view .LVU1286
 3796 0c5e FFF7FEFF 		bl	StepDir_getStatus
 3797              	.LVL464:
 744:boards/TMC2160_eval.c **** 		break;
 3798              		.loc 1 744 12 view .LVU1287
 3799 0c62 2060     		str	r0, [r4]
 745:boards/TMC2160_eval.c **** 	case 5:  // When running with the TMC4330 v1.2: CFG4 is routed from DIO6 (Motion Controller) to DI
 3800              		.loc 1 745 3 is_stmt 1 view .LVU1288
 3801 0c64 DEE7     		b	.L204
 3802              	.LVL465:
 3803              	.L197:
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3804              		.loc 1 747 3 view .LVU1289
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3805              		.loc 1 747 19 is_stmt 0 view .LVU1290
 3806 0c66 094B     		ldr	r3, .L208+4
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3807              		.loc 1 747 13 view .LVU1291
 3808 0c68 094A     		ldr	r2, .L208+8
 3809              	.LVL466:
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3810              		.loc 1 747 19 view .LVU1292
 3811 0c6a DB68     		ldr	r3, [r3, #12]
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3812              		.loc 1 747 15 view .LVU1293
 3813 0c6c 5868     		ldr	r0, [r3, #4]
 3814              	.LVL467:
 748:boards/TMC2160_eval.c **** 		break;
 3815              		.loc 1 748 18 view .LVU1294
 3816 0c6e 1B68     		ldr	r3, [r3]
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3817              		.loc 1 747 15 view .LVU1295
 3818 0c70 00F59470 		add	r0, r0, #296
 748:boards/TMC2160_eval.c **** 		break;
 3819              		.loc 1 748 3 view .LVU1296
 3820 0c74 DB68     		ldr	r3, [r3, #12]
 747:boards/TMC2160_eval.c **** 		HAL.IOs->config->toOutput(Pins.DCEN);
 3821              		.loc 1 747 13 view .LVU1297
 3822 0c76 5061     		str	r0, [r2, #20]
 748:boards/TMC2160_eval.c **** 		break;
 3823              		.loc 1 748 3 is_stmt 1 view .LVU1298
 3824 0c78 E3E7     		b	.L206
 3825              	.LVL468:
 3826              	.L195:
 751:boards/TMC2160_eval.c **** 		break;
 3827              		.loc 1 751 3 view .LVU1299
 3828 0c7a 0220     		movs	r0, #2
 3829              	.LVL469:
 751:boards/TMC2160_eval.c **** 		break;
 3830              		.loc 1 751 3 is_stmt 0 view .LVU1300
 3831 0c7c FFF796FF 		bl	enableDriver
 3832              	.LVL470:
 752:boards/TMC2160_eval.c **** 	default:
 3833              		.loc 1 752 3 is_stmt 1 view .LVU1301
 3834 0c80 D0E7     		b	.L204
 3835              	.LVL471:
 3836              	.L205:
 720:boards/TMC2160_eval.c **** 		}
 3837              		.loc 1 720 11 is_stmt 0 view .LVU1302
 3838 0c82 1020     		movs	r0, #16
 3839              	.LVL472:
 757:boards/TMC2160_eval.c **** }
 3840              		.loc 1 757 2 is_stmt 1 view .LVU1303
 757:boards/TMC2160_eval.c **** }
 3841              		.loc 1 757 9 is_stmt 0 view .LVU1304
 3842 0c84 BDE7     		b	.L193
 3843              	.L209:
 3844 0c86 00BF     		.align	2
 3845              	.L208:
 3846 0c88 00000000 		.word	Timer
 3847 0c8c 00000000 		.word	HAL
 3848 0c90 00000000 		.word	.LANCHOR0
 3849              		.cfi_endproc
 3850              	.LFE19:
 3852              		.align	1
 3853              		.syntax unified
 3854              		.thumb
 3855              		.thumb_func
 3856              		.fpu softvfp
 3858              	getMax:
 3859              	.LVL473:
 3860              	.LFB15:
 647:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3861              		.loc 1 647 1 is_stmt 1 view -0
 3862              		.cfi_startproc
 3863              		@ args = 0, pretend = 0, frame = 0
 3864              		@ frame_needed = 0, uses_anonymous_args = 0
 648:boards/TMC2160_eval.c **** }
 3865              		.loc 1 648 2 view .LVU1306
 647:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3866              		.loc 1 647 1 is_stmt 0 view .LVU1307
 3867 0c94 0346     		mov	r3, r0
 3868              	.LBB353:
 3869              	.LBB354:
 616:boards/TMC2160_eval.c **** 	case 2:
 3870              		.loc 1 616 2 view .LVU1308
 3871 0c96 052B     		cmp	r3, #5
 3872              	.LBE354:
 3873              	.LBE353:
 647:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3874              		.loc 1 647 1 view .LVU1309
 3875 0c98 10B5     		push	{r4, lr}
 3876              	.LCFI9:
 3877              		.cfi_def_cfa_offset 8
 3878              		.cfi_offset 4, -8
 3879              		.cfi_offset 14, -4
 647:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3880              		.loc 1 647 1 view .LVU1310
 3881 0c9a 0846     		mov	r0, r1
 3882              	.LVL474:
 647:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3883              		.loc 1 647 1 view .LVU1311
 3884 0c9c 1446     		mov	r4, r2
 3885              	.LVL475:
 3886              	.LBB360:
 3887              	.LBI353:
 612:boards/TMC2160_eval.c **** {
 3888              		.loc 1 612 17 is_stmt 1 view .LVU1312
 3889              	.LBB357:
 614:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 3890              		.loc 1 614 2 view .LVU1313
 615:boards/TMC2160_eval.c **** 	switch(type) {
 3891              		.loc 1 615 2 view .LVU1314
 616:boards/TMC2160_eval.c **** 	case 2:
 3892              		.loc 1 616 2 view .LVU1315
 3893 0c9e 0CD0     		beq	.L211
 3894 0ca0 07D8     		bhi	.L212
 3895 0ca2 023B     		subs	r3, r3, #2
 3896              	.LVL476:
 616:boards/TMC2160_eval.c **** 	case 2:
 3897              		.loc 1 616 2 is_stmt 0 view .LVU1316
 3898 0ca4 022B     		cmp	r3, #2
 3899 0ca6 06D8     		bhi	.L216
 3900              	.LVL477:
 3901              	.L214:
 621:boards/TMC2160_eval.c **** 			*value = 0; // TODO: Determine limits here
 3902              		.loc 1 621 3 is_stmt 1 view .LVU1317
 3903              	.LBB355:
 3904              	.LBI355:
 612:boards/TMC2160_eval.c **** {
 3905              		.loc 1 612 17 view .LVU1318
 3906              	.LBB356:
 623:boards/TMC2160_eval.c **** 			*value = StepDir_getFrequency(motor);
 3907              		.loc 1 623 10 view .LVU1319
 624:boards/TMC2160_eval.c **** 		}
 3908              		.loc 1 624 4 view .LVU1320
 624:boards/TMC2160_eval.c **** 		}
 3909              		.loc 1 624 13 is_stmt 0 view .LVU1321
 3910 0ca8 FFF7FEFF 		bl	StepDir_getFrequency
 3911              	.LVL478:
 3912              	.L217:
 624:boards/TMC2160_eval.c **** 		}
 3913              		.loc 1 624 13 view .LVU1322
 3914              	.LBE356:
 3915              	.LBE355:
 631:boards/TMC2160_eval.c **** 		}
 3916              		.loc 1 631 11 view .LVU1323
 3917 0cac 2060     		str	r0, [r4]
 615:boards/TMC2160_eval.c **** 	switch(type) {
 3918              		.loc 1 615 11 view .LVU1324
 3919 0cae 0020     		movs	r0, #0
 3920              	.LVL479:
 3921              	.L210:
 615:boards/TMC2160_eval.c **** 	switch(type) {
 3922              		.loc 1 615 11 view .LVU1325
 3923              	.LBE357:
 3924              	.LBE360:
 649:boards/TMC2160_eval.c **** 
 3925              		.loc 1 649 1 view .LVU1326
 3926 0cb0 10BD     		pop	{r4, pc}
 3927              	.LVL480:
 3928              	.L212:
 3929              	.LBB361:
 3930              	.LBB358:
 616:boards/TMC2160_eval.c **** 	case 2:
 3931              		.loc 1 616 2 view .LVU1327
 3932 0cb2 182B     		cmp	r3, #24
 3933 0cb4 F8D0     		beq	.L214
 3934              	.LVL481:
 3935              	.L216:
 616:boards/TMC2160_eval.c **** 	case 2:
 3936              		.loc 1 616 2 view .LVU1328
 3937 0cb6 0420     		movs	r0, #4
 3938              	.LVL482:
 638:boards/TMC2160_eval.c **** }
 3939              		.loc 1 638 2 is_stmt 1 view .LVU1329
 638:boards/TMC2160_eval.c **** }
 3940              		.loc 1 638 2 is_stmt 0 view .LVU1330
 3941              	.LBE358:
 3942              	.LBE361:
 648:boards/TMC2160_eval.c **** }
 3943              		.loc 1 648 9 view .LVU1331
 3944 0cb8 FAE7     		b	.L210
 3945              	.LVL483:
 3946              	.L211:
 3947              	.LBB362:
 3948              	.LBB359:
 628:boards/TMC2160_eval.c **** 			*value = 0; // TODO: Determine limits here
 3949              		.loc 1 628 3 is_stmt 1 view .LVU1332
 630:boards/TMC2160_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 3950              		.loc 1 630 10 view .LVU1333
 631:boards/TMC2160_eval.c **** 		}
 3951              		.loc 1 631 4 view .LVU1334
 631:boards/TMC2160_eval.c **** 		}
 3952              		.loc 1 631 13 is_stmt 0 view .LVU1335
 3953 0cba FFF7FEFF 		bl	StepDir_getMaxAcceleration
 3954              	.LVL484:
 631:boards/TMC2160_eval.c **** 		}
 3955              		.loc 1 631 13 view .LVU1336
 3956 0cbe F5E7     		b	.L217
 3957              	.LBE359:
 3958              	.LBE362:
 3959              		.cfi_endproc
 3960              	.LFE15:
 3962              		.align	1
 3963              		.syntax unified
 3964              		.thumb
 3965              		.thumb_func
 3966              		.fpu softvfp
 3968              	getMeasuredSpeed:
 3969              	.LVL485:
 3970              	.LFB20:
 761:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 3971              		.loc 1 761 1 is_stmt 1 view -0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 0
 3974              		@ frame_needed = 0, uses_anonymous_args = 0
 762:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 3975              		.loc 1 762 2 view .LVU1338
 761:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 3976              		.loc 1 761 1 is_stmt 0 view .LVU1339
 3977 0cc0 38B5     		push	{r3, r4, r5, lr}
 3978              	.LCFI10:
 3979              		.cfi_def_cfa_offset 16
 3980              		.cfi_offset 3, -16
 3981              		.cfi_offset 4, -12
 3982              		.cfi_offset 5, -8
 3983              		.cfi_offset 14, -4
 761:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 3984              		.loc 1 761 1 view .LVU1340
 3985 0cc2 0D46     		mov	r5, r1
 762:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 3986              		.loc 1 762 4 view .LVU1341
 3987 0cc4 0446     		mov	r4, r0
 3988 0cc6 20B9     		cbnz	r0, .L220
 3989              	.LVL486:
 3990              	.LBB365:
 3991              	.LBI365:
 760:boards/TMC2160_eval.c **** {
 3992              		.loc 1 760 17 is_stmt 1 view .LVU1342
 3993              	.LBB366:
 765:boards/TMC2160_eval.c **** 	{
 3994              		.loc 1 765 2 view .LVU1343
 769:boards/TMC2160_eval.c **** 		break;
 3995              		.loc 1 769 3 view .LVU1344
 769:boards/TMC2160_eval.c **** 		break;
 3996              		.loc 1 769 12 is_stmt 0 view .LVU1345
 3997 0cc8 FFF7FEFF 		bl	StepDir_getActualVelocity
 3998              	.LVL487:
 769:boards/TMC2160_eval.c **** 		break;
 3999              		.loc 1 769 10 view .LVU1346
 4000 0ccc 2860     		str	r0, [r5]
 770:boards/TMC2160_eval.c **** 	default:
 4001              		.loc 1 770 3 is_stmt 1 view .LVU1347
 773:boards/TMC2160_eval.c **** 	}
 4002              		.loc 1 773 3 view .LVU1348
 775:boards/TMC2160_eval.c **** }
 4003              		.loc 1 775 2 view .LVU1349
 4004              	.LVL488:
 769:boards/TMC2160_eval.c **** 		break;
 4005              		.loc 1 769 10 is_stmt 0 view .LVU1350
 4006 0cce 2046     		mov	r0, r4
 4007              	.L218:
 4008              	.LBE366:
 4009              	.LBE365:
 776:boards/TMC2160_eval.c **** 
 4010              		.loc 1 776 1 view .LVU1351
 4011 0cd0 38BD     		pop	{r3, r4, r5, pc}
 4012              	.LVL489:
 4013              	.L220:
 763:boards/TMC2160_eval.c **** 
 4014              		.loc 1 763 10 view .LVU1352
 4015 0cd2 0820     		movs	r0, #8
 4016              	.LVL490:
 763:boards/TMC2160_eval.c **** 
 4017              		.loc 1 763 10 view .LVU1353
 4018 0cd4 FCE7     		b	.L218
 4019              		.cfi_endproc
 4020              	.LFE20:
 4022              		.align	1
 4023              		.syntax unified
 4024              		.thumb
 4025              		.thumb_func
 4026              		.fpu softvfp
 4028              	periodicJob:
 4029              	.LVL491:
 4030              	.LFB18:
 662:boards/TMC2160_eval.c **** 	static uint32_t old_tick = 0;
 4031              		.loc 1 662 1 is_stmt 1 view -0
 4032              		.cfi_startproc
 4033              		@ args = 0, pretend = 0, frame = 0
 4034              		@ frame_needed = 0, uses_anonymous_args = 0
 663:boards/TMC2160_eval.c **** 
 4035              		.loc 1 663 2 view .LVU1355
 665:boards/TMC2160_eval.c **** 	case 1: // Initialization done
 4036              		.loc 1 665 2 view .LVU1356
 662:boards/TMC2160_eval.c **** 	static uint32_t old_tick = 0;
 4037              		.loc 1 662 1 is_stmt 0 view .LVU1357
 4038 0cd6 38B5     		push	{r3, r4, r5, lr}
 4039              	.LCFI11:
 4040              		.cfi_def_cfa_offset 16
 4041              		.cfi_offset 3, -16
 4042              		.cfi_offset 4, -12
 4043              		.cfi_offset 5, -8
 4044              		.cfi_offset 14, -4
 665:boards/TMC2160_eval.c **** 	case 1: // Initialization done
 4045              		.loc 1 665 2 view .LVU1358
 4046 0cd8 184D     		ldr	r5, .L235
 662:boards/TMC2160_eval.c **** 	static uint32_t old_tick = 0;
 4047              		.loc 1 662 1 view .LVU1359
 4048 0cda 0446     		mov	r4, r0
 665:boards/TMC2160_eval.c **** 	case 1: // Initialization done
 4049              		.loc 1 665 2 view .LVU1360
 4050 0cdc 95F82400 		ldrb	r0, [r5, #36]	@ zero_extendqisi2
 4051              	.LVL492:
 665:boards/TMC2160_eval.c **** 	case 1: // Initialization done
 4052              		.loc 1 665 2 view .LVU1361
 4053 0ce0 0128     		cmp	r0, #1
 4054 0ce2 1CD0     		beq	.L222
 4055 0ce4 0228     		cmp	r0, #2
 4056 0ce6 1FD0     		beq	.L223
 4057              	.L224:
 678:boards/TMC2160_eval.c **** 
 4058              		.loc 1 678 2 is_stmt 1 view .LVU1362
 4059 0ce8 2146     		mov	r1, r4
 4060 0cea 1548     		ldr	r0, .L235+4
 4061 0cec FFF7FEFF 		bl	tmc2160_periodicJob
 4062              	.LVL493:
 680:boards/TMC2160_eval.c **** 
 4063              		.loc 1 680 2 view .LVU1363
 4064 0cf0 0020     		movs	r0, #0
 4065 0cf2 FFF7FEFF 		bl	StepDir_periodicJob
 4066              	.LVL494:
 682:boards/TMC2160_eval.c **** 	// Already stalled -> skip stallGuard check
 4067              		.loc 1 682 2 view .LVU1364
 682:boards/TMC2160_eval.c **** 	// Already stalled -> skip stallGuard check
 4068              		.loc 1 682 19 is_stmt 0 view .LVU1365
 4069 0cf6 0020     		movs	r0, #0
 4070 0cf8 FFF7FEFF 		bl	StepDir_getStatus
 4071              	.LVL495:
 684:boards/TMC2160_eval.c **** 		return;
 4072              		.loc 1 684 2 is_stmt 1 view .LVU1366
 684:boards/TMC2160_eval.c **** 		return;
 4073              		.loc 1 684 4 is_stmt 0 view .LVU1367
 4074 0cfc 10F00804 		ands	r4, r0, #8
 4075              	.LVL496:
 684:boards/TMC2160_eval.c **** 		return;
 4076              		.loc 1 684 4 view .LVU1368
 4077 0d00 1BD1     		bne	.L221
 688:boards/TMC2160_eval.c **** 		return;
 4078              		.loc 1 688 2 is_stmt 1 view .LVU1369
 688:boards/TMC2160_eval.c **** 		return;
 4079              		.loc 1 688 4 is_stmt 0 view .LVU1370
 4080 0d02 8206     		lsls	r2, r0, #26
 4081 0d04 19D5     		bpl	.L221
 4082              	.LBB369:
 4083              	.LBI369:
 661:boards/TMC2160_eval.c **** {
 4084              		.loc 1 661 13 is_stmt 1 view .LVU1371
 4085              	.LVL497:
 4086              	.LBB370:
 692:boards/TMC2160_eval.c **** 		StepDir_stop(0, STOP_STALL);
 4087              		.loc 1 692 2 view .LVU1372
 692:boards/TMC2160_eval.c **** 		StepDir_stop(0, STOP_STALL);
 4088              		.loc 1 692 5 is_stmt 0 view .LVU1373
 4089 0d06 0E48     		ldr	r0, .L235+4
 4090              	.LVL498:
 692:boards/TMC2160_eval.c **** 		StepDir_stop(0, STOP_STALL);
 4091              		.loc 1 692 5 view .LVU1374
 4092 0d08 6F21     		movs	r1, #111
 4093 0d0a FFF7FEFF 		bl	tmc2160_readInt
 4094              	.LVL499:
 692:boards/TMC2160_eval.c **** 		StepDir_stop(0, STOP_STALL);
 4095              		.loc 1 692 4 view .LVU1375
 4096 0d0e C301     		lsls	r3, r0, #7
 4097 0d10 13D5     		bpl	.L221
 693:boards/TMC2160_eval.c **** }
 4098              		.loc 1 693 3 is_stmt 1 view .LVU1376
 4099 0d12 2046     		mov	r0, r4
 4100 0d14 0221     		movs	r1, #2
 4101              	.LBE370:
 4102              	.LBE369:
 694:boards/TMC2160_eval.c **** 
 4103              		.loc 1 694 1 is_stmt 0 view .LVU1377
 4104 0d16 BDE83840 		pop	{r3, r4, r5, lr}
 4105              	.LCFI12:
 4106              		.cfi_remember_state
 4107              		.cfi_restore 14
 4108              		.cfi_restore 5
 4109              		.cfi_restore 4
 4110              		.cfi_restore 3
 4111              		.cfi_def_cfa_offset 0
 4112              	.LBB372:
 4113              	.LBB371:
 693:boards/TMC2160_eval.c **** }
 4114              		.loc 1 693 3 view .LVU1378
 4115 0d1a FFF7FEBF 		b	StepDir_stop
 4116              	.LVL500:
 4117              	.L222:
 4118              	.LCFI13:
 4119              		.cfi_restore_state
 693:boards/TMC2160_eval.c **** }
 4120              		.loc 1 693 3 view .LVU1379
 4121              	.LBE371:
 4122              	.LBE372:
 667:boards/TMC2160_eval.c **** 		init_state = 2;
 4123              		.loc 1 667 3 is_stmt 1 view .LVU1380
 667:boards/TMC2160_eval.c **** 		init_state = 2;
 4124              		.loc 1 667 12 is_stmt 0 view .LVU1381
 4125 0d1e AC62     		str	r4, [r5, #40]
 668:boards/TMC2160_eval.c **** 		break;
 4126              		.loc 1 668 3 is_stmt 1 view .LVU1382
 668:boards/TMC2160_eval.c **** 		break;
 4127              		.loc 1 668 14 is_stmt 0 view .LVU1383
 4128 0d20 0223     		movs	r3, #2
 4129              	.L234:
 673:boards/TMC2160_eval.c **** 		}
 4130              		.loc 1 673 15 view .LVU1384
 4131 0d22 85F82430 		strb	r3, [r5, #36]
 4132 0d26 DFE7     		b	.L224
 4133              	.L223:
 671:boards/TMC2160_eval.c **** 			enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 4134              		.loc 1 671 3 is_stmt 1 view .LVU1385
 671:boards/TMC2160_eval.c **** 			enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 4135              		.loc 1 671 12 is_stmt 0 view .LVU1386
 4136 0d28 AB6A     		ldr	r3, [r5, #40]
 4137 0d2a E31A     		subs	r3, r4, r3
 671:boards/TMC2160_eval.c **** 			enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 4138              		.loc 1 671 5 view .LVU1387
 4139 0d2c B3F5FA6F 		cmp	r3, #2000
 4140 0d30 DAD9     		bls	.L224
 672:boards/TMC2160_eval.c **** 			init_state = 3;
 4141              		.loc 1 672 4 is_stmt 1 view .LVU1388
 4142 0d32 FFF73BFF 		bl	enableDriver
 4143              	.LVL501:
 673:boards/TMC2160_eval.c **** 		}
 4144              		.loc 1 673 4 view .LVU1389
 673:boards/TMC2160_eval.c **** 		}
 4145              		.loc 1 673 15 is_stmt 0 view .LVU1390
 4146 0d36 0323     		movs	r3, #3
 4147 0d38 F3E7     		b	.L234
 4148              	.LVL502:
 4149              	.L221:
 694:boards/TMC2160_eval.c **** 
 4150              		.loc 1 694 1 view .LVU1391
 4151 0d3a 38BD     		pop	{r3, r4, r5, pc}
 4152              	.L236:
 4153              		.align	2
 4154              	.L235:
 4155 0d3c 00000000 		.word	.LANCHOR0
 4156 0d40 00000000 		.word	TMC2160
 4157              		.cfi_endproc
 4158              	.LFE18:
 4160              		.align	1
 4161              		.syntax unified
 4162              		.thumb
 4163              		.thumb_func
 4164              		.fpu softvfp
 4166              	configCallback:
 4167              	.LVL503:
 4168              	.LFB24:
 816:boards/TMC2160_eval.c **** 	if(state == CONFIG_RESET)
 4169              		.loc 1 816 1 is_stmt 1 view -0
 4170              		.cfi_startproc
 4171              		@ args = 0, pretend = 0, frame = 0
 4172              		@ frame_needed = 0, uses_anonymous_args = 0
 817:boards/TMC2160_eval.c **** 	{	// Change hardware-preset registers here
 4173              		.loc 1 817 2 view .LVU1393
 817:boards/TMC2160_eval.c **** 	{	// Change hardware-preset registers here
 4174              		.loc 1 817 4 is_stmt 0 view .LVU1394
 4175 0d44 0129     		cmp	r1, #1
 816:boards/TMC2160_eval.c **** 	if(state == CONFIG_RESET)
 4176              		.loc 1 816 1 view .LVU1395
 4177 0d46 10B5     		push	{r4, lr}
 4178              	.LCFI14:
 4179              		.cfi_def_cfa_offset 8
 4180              		.cfi_offset 4, -8
 4181              		.cfi_offset 14, -4
 816:boards/TMC2160_eval.c **** 	if(state == CONFIG_RESET)
 4182              		.loc 1 816 1 view .LVU1396
 4183 0d48 0446     		mov	r4, r0
 817:boards/TMC2160_eval.c **** 	{	// Change hardware-preset registers here
 4184              		.loc 1 817 4 view .LVU1397
 4185 0d4a 0DD1     		bne	.L237
 4186              	.LVL504:
 4187              	.LBB375:
 4188              	.LBI375:
 815:boards/TMC2160_eval.c **** {
 4189              		.loc 1 815 13 is_stmt 1 view .LVU1398
 4190              	.LBB376:
 819:boards/TMC2160_eval.c **** 		tmc2160_writeInt(tmc2160, TMC2160_DRV_CONF, 0x00080400);
 4191              		.loc 1 819 3 view .LVU1399
 4192 0d4c 074A     		ldr	r2, .L239
 4193 0d4e 7021     		movs	r1, #112
 4194              	.LVL505:
 819:boards/TMC2160_eval.c **** 		tmc2160_writeInt(tmc2160, TMC2160_DRV_CONF, 0x00080400);
 4195              		.loc 1 819 3 is_stmt 0 view .LVU1400
 4196 0d50 FFF7FEFF 		bl	tmc2160_writeInt
 4197              	.LVL506:
 820:boards/TMC2160_eval.c **** 		//tmc2160_writeInt(tmc2160, TMC2160_PWMCONF, 0x000504C8);
 4198              		.loc 1 820 3 is_stmt 1 view .LVU1401
 4199 0d54 2046     		mov	r0, r4
 4200 0d56 064A     		ldr	r2, .L239+4
 4201 0d58 0A21     		movs	r1, #10
 4202 0d5a FFF7FEFF 		bl	tmc2160_writeInt
 4203              	.LVL507:
 823:boards/TMC2160_eval.c **** 	}
 4204              		.loc 1 823 3 view .LVU1402
 4205 0d5e 2046     		mov	r0, r4
 4206              	.LBE376:
 4207              	.LBE375:
 825:boards/TMC2160_eval.c **** 
 4208              		.loc 1 825 1 is_stmt 0 view .LVU1403
 4209 0d60 BDE81040 		pop	{r4, lr}
 4210              	.LCFI15:
 4211              		.cfi_remember_state
 4212              		.cfi_restore 14
 4213              		.cfi_restore 4
 4214              		.cfi_def_cfa_offset 0
 4215              	.LVL508:
 4216              	.LBB378:
 4217              	.LBB377:
 823:boards/TMC2160_eval.c **** 	}
 4218              		.loc 1 823 3 view .LVU1404
 4219 0d64 FFF7FEBF 		b	tmc2160_fillShadowRegisters
 4220              	.LVL509:
 4221              	.L237:
 4222              	.LCFI16:
 4223              		.cfi_restore_state
 823:boards/TMC2160_eval.c **** 	}
 4224              		.loc 1 823 3 view .LVU1405
 4225              	.LBE377:
 4226              	.LBE378:
 825:boards/TMC2160_eval.c **** 
 4227              		.loc 1 825 1 view .LVU1406
 4228 0d68 10BD     		pop	{r4, pc}
 4229              	.L240:
 4230 0d6a 00BF     		.align	2
 4231              	.L239:
 4232 0d6c 1E000CC4 		.word	-1005846498
 4233 0d70 00040800 		.word	525312
 4234              		.cfi_endproc
 4235              	.LFE24:
 4237              		.align	1
 4238              		.syntax unified
 4239              		.thumb
 4240              		.thumb_func
 4241              		.fpu softvfp
 4243              	moveBy:
 4244              	.LVL510:
 4245              	.LFB9:
 129:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 4246              		.loc 1 129 1 is_stmt 1 view -0
 4247              		.cfi_startproc
 4248              		@ args = 0, pretend = 0, frame = 0
 4249              		@ frame_needed = 0, uses_anonymous_args = 0
 130:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 4250              		.loc 1 130 2 view .LVU1408
 129:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 4251              		.loc 1 129 1 is_stmt 0 view .LVU1409
 4252 0d74 38B5     		push	{r3, r4, r5, lr}
 4253              	.LCFI17:
 4254              		.cfi_def_cfa_offset 16
 4255              		.cfi_offset 3, -16
 4256              		.cfi_offset 4, -12
 4257              		.cfi_offset 5, -8
 4258              		.cfi_offset 14, -4
 129:boards/TMC2160_eval.c **** 	if(motor >= TMC2160_MOTORS)
 4259              		.loc 1 129 1 view .LVU1410
 4260 0d76 0D46     		mov	r5, r1
 130:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 4261              		.loc 1 130 4 view .LVU1411
 4262 0d78 0446     		mov	r4, r0
 4263 0d7a 48B9     		cbnz	r0, .L243
 4264              	.LVL511:
 4265              	.LBB383:
 4266              	.LBI383:
 128:boards/TMC2160_eval.c **** {
 4267              		.loc 1 128 17 is_stmt 1 view .LVU1412
 4268              	.LBB384:
 134:boards/TMC2160_eval.c **** 
 4269              		.loc 1 134 2 view .LVU1413
 134:boards/TMC2160_eval.c **** 
 4270              		.loc 1 134 12 is_stmt 0 view .LVU1414
 4271 0d7c FFF7FEFF 		bl	StepDir_getActualPosition
 4272              	.LVL512:
 134:boards/TMC2160_eval.c **** 
 4273              		.loc 1 134 9 view .LVU1415
 4274 0d80 2968     		ldr	r1, [r5]
 4275 0d82 0144     		add	r1, r1, r0
 4276 0d84 2960     		str	r1, [r5]
 136:boards/TMC2160_eval.c **** }
 4277              		.loc 1 136 2 is_stmt 1 view .LVU1416
 4278              	.LVL513:
 4279              	.LBB385:
 4280              	.LBI385:
 118:boards/TMC2160_eval.c **** {
 4281              		.loc 1 118 17 view .LVU1417
 4282              	.LBB386:
 120:boards/TMC2160_eval.c **** 		return TMC_ERROR_MOTOR;
 4283              		.loc 1 120 2 view .LVU1418
 123:boards/TMC2160_eval.c **** 
 4284              		.loc 1 123 2 view .LVU1419
 4285 0d86 2046     		mov	r0, r4
 4286 0d88 FFF7FEFF 		bl	StepDir_moveTo
 4287              	.LVL514:
 125:boards/TMC2160_eval.c **** }
 4288              		.loc 1 125 2 view .LVU1420
 123:boards/TMC2160_eval.c **** 
 4289              		.loc 1 123 2 is_stmt 0 view .LVU1421
 4290 0d8c 2046     		mov	r0, r4
 4291              	.L241:
 4292              	.LBE386:
 4293              	.LBE385:
 4294              	.LBE384:
 4295              	.LBE383:
 137:boards/TMC2160_eval.c **** 
 4296              		.loc 1 137 1 view .LVU1422
 4297 0d8e 38BD     		pop	{r3, r4, r5, pc}
 4298              	.LVL515:
 4299              	.L243:
 131:boards/TMC2160_eval.c **** 
 4300              		.loc 1 131 10 view .LVU1423
 4301 0d90 0820     		movs	r0, #8
 4302              	.LVL516:
 131:boards/TMC2160_eval.c **** 
 4303              		.loc 1 131 10 view .LVU1424
 4304 0d92 FCE7     		b	.L241
 4305              		.cfi_endproc
 4306              	.LFE9:
 4308              		.align	1
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4312              		.fpu softvfp
 4314              	getMin:
 4315              	.LVL517:
 4316              	.LFB14:
 642:boards/TMC2160_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 4317              		.loc 1 642 1 is_stmt 1 view -0
 4318              		.cfi_startproc
 4319              		@ args = 0, pretend = 0, frame = 0
 4320              		@ frame_needed = 0, uses_anonymous_args = 0
 4321              		@ link register save eliminated.
 643:boards/TMC2160_eval.c **** }
 4322              		.loc 1 643 2 view .LVU1426
 4323              	.LBB389:
 4324              	.LBI389:
 612:boards/TMC2160_eval.c **** {
 4325              		.loc 1 612 17 view .LVU1427
 4326              	.LBB390:
 614:boards/TMC2160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 4327              		.loc 1 614 2 view .LVU1428
 615:boards/TMC2160_eval.c **** 	switch(type) {
 4328              		.loc 1 615 2 view .LVU1429
 616:boards/TMC2160_eval.c **** 	case 2:
 4329              		.loc 1 616 2 view .LVU1430
 4330 0d94 0528     		cmp	r0, #5
 4331 0d96 03D8     		bhi	.L245
 4332 0d98 0128     		cmp	r0, #1
 4333 0d9a 03D8     		bhi	.L246
 4334              	.L248:
 4335 0d9c 0420     		movs	r0, #4
 4336              	.LVL518:
 638:boards/TMC2160_eval.c **** }
 4337              		.loc 1 638 2 view .LVU1431
 638:boards/TMC2160_eval.c **** }
 4338              		.loc 1 638 2 is_stmt 0 view .LVU1432
 4339              	.LBE390:
 4340              	.LBE389:
 644:boards/TMC2160_eval.c **** 
 4341              		.loc 1 644 1 view .LVU1433
 4342 0d9e 7047     		bx	lr
 4343              	.LVL519:
 4344              	.L245:
 4345              	.LBB392:
 4346              	.LBB391:
 616:boards/TMC2160_eval.c **** 	case 2:
 4347              		.loc 1 616 2 view .LVU1434
 4348 0da0 1828     		cmp	r0, #24
 4349 0da2 FBD1     		bne	.L248
 4350              	.L246:
 621:boards/TMC2160_eval.c **** 			*value = 0; // TODO: Determine limits here
 4351              		.loc 1 621 3 is_stmt 1 view .LVU1435
 622:boards/TMC2160_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4352              		.loc 1 622 4 view .LVU1436
 622:boards/TMC2160_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4353              		.loc 1 622 11 is_stmt 0 view .LVU1437
 4354 0da4 0020     		movs	r0, #0
 4355              	.LVL520:
 622:boards/TMC2160_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4356              		.loc 1 622 11 view .LVU1438
 4357 0da6 1060     		str	r0, [r2]
 4358 0da8 7047     		bx	lr
 4359              	.LBE391:
 4360              	.LBE392:
 4361              		.cfi_endproc
 4362              	.LFE14:
 4364              		.align	1
 4365              		.global	tmc2160_readWriteArray
 4366              		.syntax unified
 4367              		.thumb
 4368              		.thumb_func
 4369              		.fpu softvfp
 4371              	tmc2160_readWriteArray:
 4372              	.LVL521:
 4373              	.LFB3:
  79:boards/TMC2160_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4374              		.loc 1 79 1 is_stmt 1 view -0
 4375              		.cfi_startproc
 4376              		@ args = 0, pretend = 0, frame = 0
 4377              		@ frame_needed = 0, uses_anonymous_args = 0
 4378              		@ link register save eliminated.
  80:boards/TMC2160_eval.c **** 	{
 4379              		.loc 1 80 2 view .LVU1440
  80:boards/TMC2160_eval.c **** 	{
 4380              		.loc 1 80 19 is_stmt 0 view .LVU1441
 4381 0daa 054B     		ldr	r3, .L252
 4382 0dac DB6E     		ldr	r3, [r3, #108]
  79:boards/TMC2160_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4383              		.loc 1 79 1 view .LVU1442
 4384 0dae 0846     		mov	r0, r1
 4385              	.LVL522:
  79:boards/TMC2160_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4386              		.loc 1 79 1 view .LVU1443
 4387 0db0 1146     		mov	r1, r2
 4388              	.LVL523:
  80:boards/TMC2160_eval.c **** 	{
 4389              		.loc 1 80 4 view .LVU1444
 4390 0db2 03B1     		cbz	r3, .L250
 4391              	.L251:
  88:boards/TMC2160_eval.c **** 	}
 4392              		.loc 1 88 3 view .LVU1445
 4393 0db4 1847     		bx	r3	@ indirect register sibling call
 4394              	.LVL524:
 4395              	.L250:
  88:boards/TMC2160_eval.c **** 	}
 4396              		.loc 1 88 3 is_stmt 1 view .LVU1446
 4397              	.LBB393:
 4398              	.LBI393:
  70:boards/TMC2160_eval.c **** {
 4399              		.loc 1 70 34 view .LVU1447
 4400              	.LBB394:
  72:boards/TMC2160_eval.c **** 
 4401              		.loc 1 72 2 view .LVU1448
  74:boards/TMC2160_eval.c **** }
 4402              		.loc 1 74 2 view .LVU1449
 4403              	.LBE394:
 4404              	.LBE393:
  88:boards/TMC2160_eval.c **** 	}
 4405              		.loc 1 88 24 is_stmt 0 view .LVU1450
 4406 0db6 034B     		ldr	r3, .L252+4
 4407 0db8 1B68     		ldr	r3, [r3]
  88:boards/TMC2160_eval.c **** 	}
 4408              		.loc 1 88 3 view .LVU1451
 4409 0dba DB68     		ldr	r3, [r3, #12]
 4410 0dbc FAE7     		b	.L251
 4411              	.L253:
 4412 0dbe 00BF     		.align	2
 4413              	.L252:
 4414 0dc0 00000000 		.word	Evalboards
 4415 0dc4 00000000 		.word	TMC2160_SPIChannel
 4416              		.cfi_endproc
 4417              	.LFE3:
 4419              		.align	1
 4420              		.global	TMC2160_init
 4421              		.syntax unified
 4422              		.thumb
 4423              		.thumb_func
 4424              		.fpu softvfp
 4426              	TMC2160_init:
 4427              	.LFB26:
 837:boards/TMC2160_eval.c **** 
 838:boards/TMC2160_eval.c **** void TMC2160_init(void)
 839:boards/TMC2160_eval.c **** {
 4428              		.loc 1 839 1 is_stmt 1 view -0
 4429              		.cfi_startproc
 4430              		@ args = 0, pretend = 0, frame = 0
 4431              		@ frame_needed = 0, uses_anonymous_args = 0
 840:boards/TMC2160_eval.c **** 	tmc2160_init(&TMC2160, 1, Evalboards.ch2.config, &tmc2160_defaultRegisterResetState[0]);
 4432              		.loc 1 840 2 view .LVU1453
 839:boards/TMC2160_eval.c **** 	tmc2160_init(&TMC2160, 1, Evalboards.ch2.config, &tmc2160_defaultRegisterResetState[0]);
 4433              		.loc 1 839 1 is_stmt 0 view .LVU1454
 4434 0dc8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4435              	.LCFI18:
 4436              		.cfi_def_cfa_offset 24
 4437              		.cfi_offset 4, -24
 4438              		.cfi_offset 5, -20
 4439              		.cfi_offset 6, -16
 4440              		.cfi_offset 7, -12
 4441              		.cfi_offset 8, -8
 4442              		.cfi_offset 14, -4
 4443              		.loc 1 840 2 view .LVU1455
 4444 0dcc 5C4C     		ldr	r4, .L255
 4445 0dce 5D4F     		ldr	r7, .L255+4
 4446 0dd0 D4F89020 		ldr	r2, [r4, #144]
 4447 0dd4 5C4B     		ldr	r3, .L255+8
 841:boards/TMC2160_eval.c **** 	tmc2160_setCallback(&TMC2160, configCallback);
 842:boards/TMC2160_eval.c **** 
 843:boards/TMC2160_eval.c **** 	Pins.DRV_ENN = &HAL.IOs->pins->DIO0;
 4448              		.loc 1 843 21 view .LVU1456
 4449 0dd6 DFF8D081 		ldr	r8, .L255+104
 4450              		.loc 1 843 15 view .LVU1457
 4451 0dda 5C4D     		ldr	r5, .L255+12
 840:boards/TMC2160_eval.c **** 	tmc2160_setCallback(&TMC2160, configCallback);
 4452              		.loc 1 840 2 view .LVU1458
 4453 0ddc 3846     		mov	r0, r7
 4454 0dde 0121     		movs	r1, #1
 4455 0de0 FFF7FEFF 		bl	tmc2160_init
 4456              	.LVL525:
 841:boards/TMC2160_eval.c **** 	tmc2160_setCallback(&TMC2160, configCallback);
 4457              		.loc 1 841 2 is_stmt 1 view .LVU1459
 4458 0de4 5A49     		ldr	r1, .L255+16
 4459 0de6 3846     		mov	r0, r7
 4460 0de8 FFF7FEFF 		bl	tmc2160_setCallback
 4461              	.LVL526:
 4462              		.loc 1 843 2 view .LVU1460
 4463              		.loc 1 843 21 is_stmt 0 view .LVU1461
 4464 0dec D8F80C60 		ldr	r6, [r8, #12]
 4465              		.loc 1 843 25 view .LVU1462
 4466 0df0 7368     		ldr	r3, [r6, #4]
 4467              		.loc 1 843 17 view .LVU1463
 4468 0df2 03F16802 		add	r2, r3, #104
 4469              		.loc 1 843 15 view .LVU1464
 4470 0df6 2A60     		str	r2, [r5]
 844:boards/TMC2160_eval.c **** 	Pins.REFL_STEP = &HAL.IOs->pins->DIO6;
 4471              		.loc 1 844 2 is_stmt 1 view .LVU1465
 4472              		.loc 1 844 19 is_stmt 0 view .LVU1466
 4473 0df8 03F59472 		add	r2, r3, #296
 4474              		.loc 1 844 17 view .LVU1467
 4475 0dfc 6A60     		str	r2, [r5, #4]
 845:boards/TMC2160_eval.c **** 	Pins.REFR_DIR = &HAL.IOs->pins->DIO7;
 4476              		.loc 1 845 2 is_stmt 1 view .LVU1468
 4477              		.loc 1 845 18 is_stmt 0 view .LVU1469
 4478 0dfe 03F5A472 		add	r2, r3, #328
 4479              		.loc 1 845 16 view .LVU1470
 4480 0e02 AA60     		str	r2, [r5, #8]
 846:boards/TMC2160_eval.c **** 	Pins.SPI_MODE = &HAL.IOs->pins->DIO11;
 4481              		.loc 1 846 2 is_stmt 1 view .LVU1471
 4482              		.loc 1 846 18 is_stmt 0 view .LVU1472
 4483 0e04 03F5E472 		add	r2, r3, #456
 4484              		.loc 1 846 16 view .LVU1473
 4485 0e08 EA60     		str	r2, [r5, #12]
 847:boards/TMC2160_eval.c **** 	Pins.DCIN = &HAL.IOs->pins->DIO12;
 4486              		.loc 1 847 2 is_stmt 1 view .LVU1474
 4487              		.loc 1 847 14 is_stmt 0 view .LVU1475
 4488 0e0a 03F55272 		add	r2, r3, #840
 4489              		.loc 1 847 12 view .LVU1476
 4490 0e0e 2A61     		str	r2, [r5, #16]
 848:boards/TMC2160_eval.c **** 	Pins.DCEN = &HAL.IOs->pins->DIO13;
 4491              		.loc 1 848 2 is_stmt 1 view .LVU1477
 4492              		.loc 1 848 14 is_stmt 0 view .LVU1478
 4493 0e10 03F55A72 		add	r2, r3, #872
 849:boards/TMC2160_eval.c **** 	Pins.DCO = &HAL.IOs->pins->DIO14;
 4494              		.loc 1 849 13 view .LVU1479
 4495 0e14 03F56270 		add	r0, r3, #904
 848:boards/TMC2160_eval.c **** 	Pins.DCEN = &HAL.IOs->pins->DIO13;
 4496              		.loc 1 848 12 view .LVU1480
 4497 0e18 6A61     		str	r2, [r5, #20]
 4498              		.loc 1 849 2 is_stmt 1 view .LVU1481
 850:boards/TMC2160_eval.c **** 	Pins.DIAG0 = &HAL.IOs->pins->DIO15;
 4499              		.loc 1 850 15 is_stmt 0 view .LVU1482
 4500 0e1a 03F56A72 		add	r2, r3, #936
 851:boards/TMC2160_eval.c **** 	Pins.DIAG1 = &HAL.IOs->pins->DIO16;
 4501              		.loc 1 851 15 view .LVU1483
 4502 0e1e 03F57273 		add	r3, r3, #968
 4503              		.loc 1 851 13 view .LVU1484
 4504 0e22 2B62     		str	r3, [r5, #32]
 852:boards/TMC2160_eval.c **** 
 853:boards/TMC2160_eval.c **** 	//HAL.IOs->config->toInput(Pins.DIAG0);
 854:boards/TMC2160_eval.c **** 	//HAL.IOs->config->toInput(Pins.DIAG1);
 855:boards/TMC2160_eval.c **** 	HAL.IOs->config->toInput(Pins.DCO);
 4505              		.loc 1 855 17 view .LVU1485
 4506 0e24 3368     		ldr	r3, [r6]
 850:boards/TMC2160_eval.c **** 	Pins.DIAG1 = &HAL.IOs->pins->DIO16;
 4507              		.loc 1 850 13 view .LVU1486
 4508 0e26 EA61     		str	r2, [r5, #28]
 4509              		.loc 1 855 2 view .LVU1487
 4510 0e28 1B69     		ldr	r3, [r3, #16]
 849:boards/TMC2160_eval.c **** 	Pins.DIAG0 = &HAL.IOs->pins->DIO15;
 4511              		.loc 1 849 11 view .LVU1488
 4512 0e2a A861     		str	r0, [r5, #24]
 850:boards/TMC2160_eval.c **** 	Pins.DIAG1 = &HAL.IOs->pins->DIO16;
 4513              		.loc 1 850 2 is_stmt 1 view .LVU1489
 851:boards/TMC2160_eval.c **** 
 4514              		.loc 1 851 2 view .LVU1490
 4515              		.loc 1 855 2 view .LVU1491
 4516 0e2c 9847     		blx	r3
 4517              	.LVL527:
 856:boards/TMC2160_eval.c **** 
 857:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.DRV_ENN);
 4518              		.loc 1 857 2 view .LVU1492
 4519              		.loc 1 857 17 is_stmt 0 view .LVU1493
 4520 0e2e 3368     		ldr	r3, [r6]
 4521              		.loc 1 857 2 view .LVU1494
 4522 0e30 2868     		ldr	r0, [r5]
 4523 0e32 DB68     		ldr	r3, [r3, #12]
 4524 0e34 9847     		blx	r3
 4525              	.LVL528:
 858:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFL_STEP);
 4526              		.loc 1 858 2 is_stmt 1 view .LVU1495
 4527              		.loc 1 858 17 is_stmt 0 view .LVU1496
 4528 0e36 3368     		ldr	r3, [r6]
 4529              		.loc 1 858 2 view .LVU1497
 4530 0e38 6868     		ldr	r0, [r5, #4]
 4531 0e3a DB68     		ldr	r3, [r3, #12]
 4532 0e3c 9847     		blx	r3
 4533              	.LVL529:
 859:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFR_DIR);
 4534              		.loc 1 859 2 is_stmt 1 view .LVU1498
 4535              		.loc 1 859 17 is_stmt 0 view .LVU1499
 4536 0e3e 3368     		ldr	r3, [r6]
 4537              		.loc 1 859 2 view .LVU1500
 4538 0e40 A868     		ldr	r0, [r5, #8]
 4539 0e42 DB68     		ldr	r3, [r3, #12]
 4540 0e44 9847     		blx	r3
 4541              	.LVL530:
 860:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.SPI_MODE);
 4542              		.loc 1 860 2 is_stmt 1 view .LVU1501
 4543              		.loc 1 860 17 is_stmt 0 view .LVU1502
 4544 0e46 3368     		ldr	r3, [r6]
 4545              		.loc 1 860 2 view .LVU1503
 4546 0e48 E868     		ldr	r0, [r5, #12]
 4547 0e4a DB68     		ldr	r3, [r3, #12]
 4548 0e4c 9847     		blx	r3
 4549              	.LVL531:
 861:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.DCEN);
 4550              		.loc 1 861 2 is_stmt 1 view .LVU1504
 4551              		.loc 1 861 17 is_stmt 0 view .LVU1505
 4552 0e4e 3368     		ldr	r3, [r6]
 4553              		.loc 1 861 2 view .LVU1506
 4554 0e50 6869     		ldr	r0, [r5, #20]
 4555 0e52 DB68     		ldr	r3, [r3, #12]
 4556 0e54 9847     		blx	r3
 4557              	.LVL532:
 862:boards/TMC2160_eval.c **** 	HAL.IOs->config->toOutput(Pins.DCIN);
 4558              		.loc 1 862 2 is_stmt 1 view .LVU1507
 4559              		.loc 1 862 17 is_stmt 0 view .LVU1508
 4560 0e56 3368     		ldr	r3, [r6]
 4561              		.loc 1 862 2 view .LVU1509
 4562 0e58 2869     		ldr	r0, [r5, #16]
 4563 0e5a DB68     		ldr	r3, [r3, #12]
 4564 0e5c 9847     		blx	r3
 4565              	.LVL533:
 863:boards/TMC2160_eval.c **** 
 864:boards/TMC2160_eval.c **** 	HAL.IOs->config->setHigh(Pins.SPI_MODE);
 4566              		.loc 1 864 2 is_stmt 1 view .LVU1510
 4567              		.loc 1 864 17 is_stmt 0 view .LVU1511
 4568 0e5e 3368     		ldr	r3, [r6]
 4569              		.loc 1 864 2 view .LVU1512
 4570 0e60 E868     		ldr	r0, [r5, #12]
 4571 0e62 5B69     		ldr	r3, [r3, #20]
 4572 0e64 9847     		blx	r3
 4573              	.LVL534:
 865:boards/TMC2160_eval.c **** 
 866:boards/TMC2160_eval.c **** 	HAL.IOs->config->setLow(Pins.DCO);
 4574              		.loc 1 866 2 is_stmt 1 view .LVU1513
 4575              		.loc 1 866 17 is_stmt 0 view .LVU1514
 4576 0e66 3368     		ldr	r3, [r6]
 4577              		.loc 1 866 2 view .LVU1515
 4578 0e68 A869     		ldr	r0, [r5, #24]
 4579 0e6a 9B69     		ldr	r3, [r3, #24]
 4580 0e6c 9847     		blx	r3
 4581              	.LVL535:
 867:boards/TMC2160_eval.c **** 	HAL.IOs->config->setLow(Pins.DCIN);
 4582              		.loc 1 867 2 is_stmt 1 view .LVU1516
 4583              		.loc 1 867 17 is_stmt 0 view .LVU1517
 4584 0e6e 3368     		ldr	r3, [r6]
 4585              		.loc 1 867 2 view .LVU1518
 4586 0e70 2869     		ldr	r0, [r5, #16]
 4587 0e72 9B69     		ldr	r3, [r3, #24]
 4588 0e74 9847     		blx	r3
 4589              	.LVL536:
 868:boards/TMC2160_eval.c **** 
 869:boards/TMC2160_eval.c **** //	HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
 870:boards/TMC2160_eval.c **** //	HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
 871:boards/TMC2160_eval.c **** 
 872:boards/TMC2160_eval.c **** 	TMC2160_SPIChannel       = &HAL.SPI->ch2;
 4590              		.loc 1 872 2 is_stmt 1 view .LVU1519
 4591              		.loc 1 872 33 is_stmt 0 view .LVU1520
 4592 0e76 D8F81020 		ldr	r2, [r8, #16]
 4593              		.loc 1 872 27 view .LVU1521
 4594 0e7a 364B     		ldr	r3, .L255+20
 4595              		.loc 1 872 29 view .LVU1522
 4596 0e7c 02F11401 		add	r1, r2, #20
 4597              		.loc 1 872 27 view .LVU1523
 4598 0e80 1960     		str	r1, [r3]
 873:boards/TMC2160_eval.c **** 	TMC2160_SPIChannel->CSN  = &HAL.IOs->pins->SPI2_CSN0;
 4599              		.loc 1 873 2 is_stmt 1 view .LVU1524
 4600              		.loc 1 873 29 is_stmt 0 view .LVU1525
 4601 0e82 7368     		ldr	r3, [r6, #4]
 4602 0e84 03F50273 		add	r3, r3, #520
 4603              		.loc 1 873 27 view .LVU1526
 4604 0e88 9361     		str	r3, [r2, #24]
 874:boards/TMC2160_eval.c **** 
 875:boards/TMC2160_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 4605              		.loc 1 875 2 is_stmt 1 view .LVU1527
 4606 0e8a 4FF40030 		mov	r0, #131072
 4607 0e8e FFF7FEFF 		bl	StepDir_init
 4608              	.LVL537:
 876:boards/TMC2160_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 4609              		.loc 1 876 2 view .LVU1528
 4610 0e92 0023     		movs	r3, #0
 4611 0e94 D5E90112 		ldrd	r1, r2, [r5, #4]
 4612 0e98 1846     		mov	r0, r3
 4613 0e9a FFF7FEFF 		bl	StepDir_setPins
 4614              	.LVL538:
 877:boards/TMC2160_eval.c **** 
 878:boards/TMC2160_eval.c **** 	Evalboards.ch2.type = (void *)&TMC2160;
 4615              		.loc 1 878 2 view .LVU1529
 879:boards/TMC2160_eval.c **** 
 880:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->reset        = reset;
 4616              		.loc 1 880 16 is_stmt 0 view .LVU1530
 4617 0e9e D4F89020 		ldr	r2, [r4, #144]
 4618              		.loc 1 880 38 view .LVU1531
 4619 0ea2 2D4B     		ldr	r3, .L255+24
 4620 0ea4 C2F80432 		str	r3, [r2, #516]
 881:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 4621              		.loc 1 881 38 view .LVU1532
 4622 0ea8 2C4B     		ldr	r3, .L255+28
 4623 0eaa C2F80832 		str	r3, [r2, #520]
 882:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 4624              		.loc 1 882 38 view .LVU1533
 4625 0eae 0123     		movs	r3, #1
 878:boards/TMC2160_eval.c **** 
 4626              		.loc 1 878 22 view .LVU1534
 4627 0eb0 A767     		str	r7, [r4, #120]
 880:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 4628              		.loc 1 880 2 is_stmt 1 view .LVU1535
 881:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 4629              		.loc 1 881 2 view .LVU1536
 4630              		.loc 1 882 2 view .LVU1537
 883:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->configIndex  = 0;
 4631              		.loc 1 883 2 view .LVU1538
 882:boards/TMC2160_eval.c **** 	Evalboards.ch2.config->configIndex  = 0;
 4632              		.loc 1 882 38 is_stmt 0 view .LVU1539
 4633 0eb2 1380     		strh	r3, [r2]	@ movhi
 884:boards/TMC2160_eval.c **** 
 885:boards/TMC2160_eval.c **** 	Evalboards.ch2.rotate               = rotate;
 4634              		.loc 1 885 2 is_stmt 1 view .LVU1540
 4635              		.loc 1 885 38 is_stmt 0 view .LVU1541
 4636 0eb4 2A4A     		ldr	r2, .L255+32
 4637 0eb6 C4F89C20 		str	r2, [r4, #156]
 886:boards/TMC2160_eval.c **** 	Evalboards.ch2.right                = right;
 4638              		.loc 1 886 2 is_stmt 1 view .LVU1542
 4639              		.loc 1 886 38 is_stmt 0 view .LVU1543
 4640 0eba 2A4A     		ldr	r2, .L255+36
 4641 0ebc C4F89820 		str	r2, [r4, #152]
 887:boards/TMC2160_eval.c **** 	Evalboards.ch2.left                 = left;
 4642              		.loc 1 887 2 is_stmt 1 view .LVU1544
 4643              		.loc 1 887 38 is_stmt 0 view .LVU1545
 4644 0ec0 294A     		ldr	r2, .L255+40
 4645 0ec2 C4F89420 		str	r2, [r4, #148]
 888:boards/TMC2160_eval.c **** 	Evalboards.ch2.stop                 = stop;
 4646              		.loc 1 888 2 is_stmt 1 view .LVU1546
 4647              		.loc 1 888 38 is_stmt 0 view .LVU1547
 4648 0ec6 294A     		ldr	r2, .L255+44
 4649 0ec8 C4F8A020 		str	r2, [r4, #160]
 889:boards/TMC2160_eval.c **** 	Evalboards.ch2.GAP                  = GAP;
 4650              		.loc 1 889 2 is_stmt 1 view .LVU1548
 4651              		.loc 1 889 38 is_stmt 0 view .LVU1549
 4652 0ecc 284A     		ldr	r2, .L255+48
 4653 0ece C4F8B420 		str	r2, [r4, #180]
 890:boards/TMC2160_eval.c **** 	Evalboards.ch2.SAP                  = SAP;
 4654              		.loc 1 890 2 is_stmt 1 view .LVU1550
 4655              		.loc 1 890 38 is_stmt 0 view .LVU1551
 4656 0ed2 284A     		ldr	r2, .L255+52
 4657 0ed4 C4F8B020 		str	r2, [r4, #176]
 891:boards/TMC2160_eval.c **** 	Evalboards.ch2.moveTo               = moveTo;
 4658              		.loc 1 891 2 is_stmt 1 view .LVU1552
 4659              		.loc 1 891 38 is_stmt 0 view .LVU1553
 4660 0ed8 274A     		ldr	r2, .L255+56
 4661 0eda C4F8A420 		str	r2, [r4, #164]
 892:boards/TMC2160_eval.c **** 	Evalboards.ch2.moveBy               = moveBy;
 4662              		.loc 1 892 2 is_stmt 1 view .LVU1554
 4663              		.loc 1 892 38 is_stmt 0 view .LVU1555
 4664 0ede 274A     		ldr	r2, .L255+60
 4665 0ee0 C4F8A820 		str	r2, [r4, #168]
 893:boards/TMC2160_eval.c **** 	Evalboards.ch2.writeRegister        = writeRegister;
 4666              		.loc 1 893 2 is_stmt 1 view .LVU1556
 4667              		.loc 1 893 38 is_stmt 0 view .LVU1557
 4668 0ee4 264A     		ldr	r2, .L255+64
 4669 0ee6 C4F8C420 		str	r2, [r4, #196]
 894:boards/TMC2160_eval.c **** 	Evalboards.ch2.readRegister         = readRegister;
 4670              		.loc 1 894 2 is_stmt 1 view .LVU1558
 4671              		.loc 1 894 38 is_stmt 0 view .LVU1559
 4672 0eea 264A     		ldr	r2, .L255+68
 4673 0eec C4F8C020 		str	r2, [r4, #192]
 895:boards/TMC2160_eval.c **** 	Evalboards.ch2.periodicJob          = periodicJob;
 4674              		.loc 1 895 2 is_stmt 1 view .LVU1560
 4675              		.loc 1 895 38 is_stmt 0 view .LVU1561
 4676 0ef0 254A     		ldr	r2, .L255+72
 4677 0ef2 C4F8D020 		str	r2, [r4, #208]
 896:boards/TMC2160_eval.c **** 	Evalboards.ch2.userFunction         = userFunction;
 4678              		.loc 1 896 2 is_stmt 1 view .LVU1562
 4679              		.loc 1 896 38 is_stmt 0 view .LVU1563
 4680 0ef6 254A     		ldr	r2, .L255+76
 4681 0ef8 C4F8CC20 		str	r2, [r4, #204]
 897:boards/TMC2160_eval.c **** 	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
 4682              		.loc 1 897 2 is_stmt 1 view .LVU1564
 4683              		.loc 1 897 38 is_stmt 0 view .LVU1565
 4684 0efc 244A     		ldr	r2, .L255+80
 4685 0efe C4F8C820 		str	r2, [r4, #200]
 898:boards/TMC2160_eval.c **** 	Evalboards.ch2.enableDriver         = enableDriver;
 4686              		.loc 1 898 2 is_stmt 1 view .LVU1566
 4687              		.loc 1 898 38 is_stmt 0 view .LVU1567
 4688 0f02 244A     		ldr	r2, .L255+84
 4689 0f04 C4F8DC20 		str	r2, [r4, #220]
 899:boards/TMC2160_eval.c **** 	Evalboards.ch2.numberOfMotors       = TMC2160_MOTORS;
 4690              		.loc 1 899 2 is_stmt 1 view .LVU1568
 900:boards/TMC2160_eval.c **** 	Evalboards.ch2.VMMin                = TMC2160_EVAL_VM_MIN;
 901:boards/TMC2160_eval.c **** 	Evalboards.ch2.VMMax                = TMC2160_EVAL_VM_MAX;
 4691              		.loc 1 901 38 is_stmt 0 view .LVU1569
 4692 0f08 3221     		movs	r1, #50
 4693 0f0a 4FF4F072 		mov	r2, #480
 4694 0f0e C4E92121 		strd	r2, r1, [r4, #132]
 902:boards/TMC2160_eval.c **** 	Evalboards.ch2.deInit               = deInit;
 4695              		.loc 1 902 38 view .LVU1570
 4696 0f12 214A     		ldr	r2, .L255+88
 4697 0f14 C4F8D420 		str	r2, [r4, #212]
 903:boards/TMC2160_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 4698              		.loc 1 903 38 view .LVU1571
 4699 0f18 204A     		ldr	r2, .L255+92
 4700 0f1a C4F8E820 		str	r2, [r4, #232]
 904:boards/TMC2160_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 4701              		.loc 1 904 38 view .LVU1572
 4702 0f1e 204A     		ldr	r2, .L255+96
 899:boards/TMC2160_eval.c **** 	Evalboards.ch2.VMMin                = TMC2160_EVAL_VM_MIN;
 4703              		.loc 1 899 38 view .LVU1573
 4704 0f20 84F88C30 		strb	r3, [r4, #140]
 900:boards/TMC2160_eval.c **** 	Evalboards.ch2.VMMax                = TMC2160_EVAL_VM_MAX;
 4705              		.loc 1 900 2 is_stmt 1 view .LVU1574
 902:boards/TMC2160_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 4706              		.loc 1 902 2 view .LVU1575
 903:boards/TMC2160_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 4707              		.loc 1 903 2 view .LVU1576
 4708              		.loc 1 904 2 view .LVU1577
 4709              		.loc 1 904 38 is_stmt 0 view .LVU1578
 4710 0f24 C4F8EC20 		str	r2, [r4, #236]
 905:boards/TMC2160_eval.c **** 
 906:boards/TMC2160_eval.c **** 	init_state = 1;
 4711              		.loc 1 906 2 is_stmt 1 view .LVU1579
 907:boards/TMC2160_eval.c **** 
 908:boards/TMC2160_eval.c **** 	Timer.init();
 4712              		.loc 1 908 7 is_stmt 0 view .LVU1580
 4713 0f28 1E4C     		ldr	r4, .L255+100
 906:boards/TMC2160_eval.c **** 
 4714              		.loc 1 906 13 view .LVU1581
 4715 0f2a 85F82430 		strb	r3, [r5, #36]
 4716              		.loc 1 908 2 is_stmt 1 view .LVU1582
 4717 0f2e 2368     		ldr	r3, [r4]
 4718 0f30 9847     		blx	r3
 4719              	.LVL539:
 909:boards/TMC2160_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 4720              		.loc 1 909 2 view .LVU1583
 4721 0f32 0021     		movs	r1, #0
 4722 0f34 A368     		ldr	r3, [r4, #8]
 4723 0f36 0846     		mov	r0, r1
 910:boards/TMC2160_eval.c **** }
 4724              		.loc 1 910 1 is_stmt 0 view .LVU1584
 4725 0f38 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 4726              	.LCFI19:
 4727              		.cfi_restore 14
 4728              		.cfi_restore 8
 4729              		.cfi_restore 7
 4730              		.cfi_restore 6
 4731              		.cfi_restore 5
 4732              		.cfi_restore 4
 4733              		.cfi_def_cfa_offset 0
 909:boards/TMC2160_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 4734              		.loc 1 909 2 view .LVU1585
 4735 0f3c 1847     		bx	r3	@ indirect register sibling call
 4736              	.LVL540:
 4737              	.L256:
 4738 0f3e 00BF     		.align	2
 4739              	.L255:
 4740 0f40 00000000 		.word	Evalboards
 4741 0f44 00000000 		.word	TMC2160
 4742 0f48 00000000 		.word	.LANCHOR1
 4743 0f4c 00000000 		.word	.LANCHOR0
 4744 0f50 00000000 		.word	configCallback
 4745 0f54 00000000 		.word	TMC2160_SPIChannel
 4746 0f58 00000000 		.word	reset
 4747 0f5c 00000000 		.word	restore
 4748 0f60 00000000 		.word	rotate
 4749 0f64 00000000 		.word	right
 4750 0f68 00000000 		.word	left
 4751 0f6c 00000000 		.word	stop
 4752 0f70 00000000 		.word	GAP
 4753 0f74 00000000 		.word	SAP
 4754 0f78 00000000 		.word	moveTo
 4755 0f7c 00000000 		.word	moveBy
 4756 0f80 00000000 		.word	writeRegister
 4757 0f84 00000000 		.word	readRegister
 4758 0f88 00000000 		.word	periodicJob
 4759 0f8c 00000000 		.word	userFunction
 4760 0f90 00000000 		.word	getMeasuredSpeed
 4761 0f94 00000000 		.word	enableDriver
 4762 0f98 00000000 		.word	deInit
 4763 0f9c 00000000 		.word	getMin
 4764 0fa0 00000000 		.word	getMax
 4765 0fa4 00000000 		.word	Timer
 4766 0fa8 00000000 		.word	HAL
 4767              		.cfi_endproc
 4768              	.LFE26:
 4770              		.comm	TMC2160,644,4
 4771              		.comm	TMC2160_SPIChannel,4,4
 4772              		.comm	TMCMotionController,532,4
 4773              		.comm	TMCDriver,532,4
 4774              		.comm	Evalboards,244,4
 4775              		.comm	VitalSignsMonitor,20,4
 4776              		.comm	hwid,1,1
 4777              		.comm	HAL,48,4
 4778              		.comm	UART,40,4
 4779              		.comm	Timer,16,4
 4780              		.comm	WLAN,36,4
 4781              		.comm	RS232,36,4
 4782              		.comm	LEDs,28,4
 4783              		.comm	USB,36,4
 4784              		.comm	uart0_interrupt,1,1
 4785              		.comm	ADCs,32,4
 4786              		.comm	SPI,44,4
 4787              		.comm	IOMap,2088,4
 4788              		.comm	IOs,52,4
 4789              		.comm	Cpu,8,4
 4790              		.section	.rodata
 4791              		.align	2
 4792              		.set	.LANCHOR1,. + 0
 4795              	tmc2160_defaultRegisterResetState:
 4796 0000 00000000 		.word	0
 4797 0004 00000000 		.word	0
 4798 0008 00000000 		.word	0
 4799 000c 00000000 		.word	0
 4800 0010 00000000 		.word	0
 4801 0014 00000000 		.word	0
 4802 0018 00000000 		.word	0
 4803 001c 00000000 		.word	0
 4804 0020 00000000 		.word	0
 4805 0024 00000000 		.word	0
 4806 0028 00000000 		.word	0
 4807 002c 00000000 		.word	0
 4808 0030 00000000 		.word	0
 4809 0034 00000000 		.word	0
 4810 0038 00000000 		.word	0
 4811 003c 00000000 		.word	0
 4812 0040 030A0700 		.word	461315
 4813 0044 00000000 		.word	0
 4814 0048 00000000 		.word	0
 4815 004c 00000000 		.word	0
 4816 0050 00000000 		.word	0
 4817 0054 00000000 		.word	0
 4818 0058 00000000 		.word	0
 4819 005c 00000000 		.word	0
 4820 0060 00000000 		.word	0
 4821 0064 00000000 		.word	0
 4822 0068 00000000 		.word	0
 4823 006c 00000000 		.word	0
 4824 0070 00000000 		.word	0
 4825 0074 00000000 		.word	0
 4826 0078 00000000 		.word	0
 4827 007c 00000000 		.word	0
 4828 0080 00000000 		.word	0
 4829 0084 00000000 		.word	0
 4830 0088 00000000 		.word	0
 4831 008c 00000000 		.word	0
 4832 0090 00000000 		.word	0
 4833 0094 00000000 		.word	0
 4834 0098 00000000 		.word	0
 4835 009c 00000000 		.word	0
 4836 00a0 00000000 		.word	0
 4837 00a4 00000000 		.word	0
 4838 00a8 00000000 		.word	0
 4839 00ac 00000000 		.word	0
 4840 00b0 00000000 		.word	0
 4841 00b4 00000000 		.word	0
 4842 00b8 00000000 		.word	0
 4843 00bc 00000000 		.word	0
 4844 00c0 00000000 		.word	0
 4845 00c4 00000000 		.word	0
 4846 00c8 00000000 		.word	0
 4847 00cc 00000000 		.word	0
 4848 00d0 00000000 		.word	0
 4849 00d4 00000000 		.word	0
 4850 00d8 00000000 		.word	0
 4851 00dc 00000000 		.word	0
 4852 00e0 00000000 		.word	0
 4853 00e4 00000000 		.word	0
 4854 00e8 00000000 		.word	0
 4855 00ec 00000000 		.word	0
 4856 00f0 00000000 		.word	0
 4857 00f4 00000000 		.word	0
 4858 00f8 00000000 		.word	0
 4859 00fc 00000000 		.word	0
 4860 0100 00000000 		.word	0
 4861 0104 00000000 		.word	0
 4862 0108 00000000 		.word	0
 4863 010c 00000000 		.word	0
 4864 0110 00000000 		.word	0
 4865 0114 00000000 		.word	0
 4866 0118 00000000 		.word	0
 4867 011c 00000000 		.word	0
 4868 0120 00000000 		.word	0
 4869 0124 00000000 		.word	0
 4870 0128 00000000 		.word	0
 4871 012c 00000000 		.word	0
 4872 0130 00000000 		.word	0
 4873 0134 00000000 		.word	0
 4874 0138 00000000 		.word	0
 4875 013c 00000000 		.word	0
 4876 0140 00000000 		.word	0
 4877 0144 00000000 		.word	0
 4878 0148 00000000 		.word	0
 4879 014c 00000000 		.word	0
 4880 0150 00000000 		.word	0
 4881 0154 00000000 		.word	0
 4882 0158 00000000 		.word	0
 4883 015c 00000000 		.word	0
 4884 0160 00000000 		.word	0
 4885 0164 00000000 		.word	0
 4886 0168 00000000 		.word	0
 4887 016c 00000000 		.word	0
 4888 0170 00000000 		.word	0
 4889 0174 00000000 		.word	0
 4890 0178 00000000 		.word	0
 4891 017c 00000000 		.word	0
 4892 0180 00000000 		.word	0
 4893 0184 00000000 		.word	0
 4894 0188 00000000 		.word	0
 4895 018c 00000000 		.word	0
 4896 0190 00000000 		.word	0
 4897 0194 00000000 		.word	0
 4898 0198 00000000 		.word	0
 4899 019c 00000000 		.word	0
 4900 01a0 00000000 		.word	0
 4901 01a4 00000000 		.word	0
 4902 01a8 00000000 		.word	0
 4903 01ac 00000000 		.word	0
 4904 01b0 53014110 		.word	272695635
 4905 01b4 00000000 		.word	0
 4906 01b8 00000000 		.word	0
 4907 01bc 00000000 		.word	0
 4908 01c0 1E000CC4 		.word	-1005846498
 4909 01c4 00000000 		.word	0
 4910 01c8 00000000 		.word	0
 4911 01cc 00000000 		.word	0
 4912 01d0 00000000 		.word	0
 4913 01d4 00000000 		.word	0
 4914 01d8 00000000 		.word	0
 4915 01dc 00000000 		.word	0
 4916 01e0 00000000 		.word	0
 4917 01e4 00000000 		.word	0
 4918 01e8 00000000 		.word	0
 4919 01ec 00000000 		.word	0
 4920 01f0 00000000 		.word	0
 4921 01f4 00000000 		.word	0
 4922 01f8 00000000 		.word	0
 4923 01fc 00000000 		.word	0
 4924              		.bss
 4925              		.align	2
 4926              		.set	.LANCHOR0,. + 0
 4929              	Pins:
 4930 0000 00000000 		.space	36
 4930      00000000 
 4930      00000000 
 4930      00000000 
 4930      00000000 
 4933              	init_state:
 4934 0024 00       		.space	1
 4935 0025 000000   		.space	3
 4938              	old_tick.7969:
 4939 0028 00000000 		.space	4
 4942              	ADCValue:
 4943 002c 00000000 		.space	12
 4943      00000000 
 4943      00000000 
 4944              		.text
 4945              	.Letext0:
 4946              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 4947              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4948              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4949              		.file 5 "TMC-API/tmc/helpers/Types.h"
 4950              		.file 6 "TMC-API/tmc/helpers/Config.h"
 4951              		.file 7 "TMC-API/tmc/helpers/RegisterAccess.h"
 4952              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4953              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4954              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4955              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4956              		.file 12 "TMC-API/tmc/helpers/API_Header.h"
 4957              		.file 13 "hal/Landungsbruecke/freescale/MK20D10.h"
 4958              		.file 14 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 4959              		.file 15 "./hal/Landungsbruecke/freescale/Cpu.h"
 4960              		.file 16 "./hal/IOs.h"
 4961              		.file 17 "./hal/IOMap.h"
 4962              		.file 18 "./hal/SPI.h"
 4963              		.file 19 "./hal/ADCs.h"
 4964              		.file 20 "./hal/RXTX.h"
 4965              		.file 21 "./hal/USB.h"
 4966              		.file 22 "./hal/LEDs.h"
 4967              		.file 23 "./hal/RS232.h"
 4968              		.file 24 "./hal/WLAN.h"
 4969              		.file 25 "./hal/Timer.h"
 4970              		.file 26 "./hal/UART.h"
 4971              		.file 27 "./hal/HAL.h"
 4972              		.file 28 "./tmc/StepDir.h"
 4973              		.file 29 "./tmc/VitalSignsMonitor.h"
 4974              		.file 30 "boards/Board.h"
 4975              		.file 31 "boards/TMCDriver.h"
 4976              		.file 32 "boards/TMCMotionController.h"
 4977              		.file 33 "TMC-API/tmc/ic/TMC2160/TMC2160.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC2160_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:22     .text:00000000 deInit
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:135    .text:00000064 $d
                            *COM*:00000030 HAL
                            *COM*:00000010 Timer
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:141    .text:00000070 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:147    .text:00000070 readRegister
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:185    .text:00000080 $d
                            *COM*:00000284 TMC2160
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:189    .text:00000084 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:195    .text:00000084 writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:221    .text:0000008c $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:225    .text:00000090 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:231    .text:00000090 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:273    .text:000000a2 rotate
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:315    .text:000000b4 stop
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:338    .text:000000b8 left
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:363    .text:000000bc right
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:387    .text:000000be handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:419    .text:000000da $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:471    .text:00000142 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:481    .text:0000014e $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:549    .text:000001d4 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:1403   .text:000004a4 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:1411   .text:000004ac $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:1498   .text:000004fc $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:1503   .text:00000504 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:2460   .text:00000804 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:2465   .text:00000808 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3330   .text:00000aec $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3336   .text:00000af4 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3405   .text:00000b44 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3409   .text:00000b48 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3415   .text:00000b48 SAP
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3455   .text:00000b5c GAP
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3485   .text:00000b66 restore
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3500   .text:00000b6c $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3504   .text:00000b70 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3510   .text:00000b70 reset
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3559   .text:00000ba0 $d
                            *COM*:00000014 VitalSignsMonitor
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3565   .text:00000bac $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3571   .text:00000bac enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3647   .text:00000be0 $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3653   .text:00000bec $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3659   .text:00000bec userFunction
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3681   .text:00000bf8 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3846   .text:00000c88 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3852   .text:00000c94 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3858   .text:00000c94 getMax
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3968   .text:00000cc0 getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4028   .text:00000cd6 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4155   .text:00000d3c $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4160   .text:00000d44 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4166   .text:00000d44 configCallback
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4232   .text:00000d6c $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4237   .text:00000d74 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4243   .text:00000d74 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4314   .text:00000d94 getMin
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4371   .text:00000daa tmc2160_readWriteArray
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4414   .text:00000dc0 $d
                            *COM*:00000004 TMC2160_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4419   .text:00000dc8 $t
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4426   .text:00000dc8 TMC2160_init
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4740   .text:00000f40 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4791   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4795   .rodata:00000000 tmc2160_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4925   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4929   .bss:00000000 Pins
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4933   .bss:00000024 init_state
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4938   .bss:00000028 old_tick.7969
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:4942   .bss:0000002c ADCValue
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3688   .text:00000bff $d
C:\Users\Shubham\AppData\Local\Temp\ccFXpEzD.s:3688   .text:00000c00 $t

UNDEFINED SYMBOLS
StepDir_deInit
tmc2160_readInt
tmc2160_writeInt
StepDir_moveTo
StepDir_rotate
__aeabi_uldivmod
__aeabi_ldivmod
StepDir_getTargetPosition
StepDir_getActualPosition
StepDir_setActualPosition
StepDir_getTargetVelocity
StepDir_getMode
StepDir_getActualVelocity
StepDir_getFrequency
StepDir_getVelocityMax
StepDir_setVelocityMax
StepDir_getAcceleration
StepDir_setAcceleration
StepDir_getStatus
StepDir_setMode
StepDir_setFrequency
StepDir_getStallGuardThreshold
StepDir_setStallGuardThreshold
tmc2160_restore
tmc2160_reset
StepDir_init
StepDir_setPins
StepDir_getMaxAcceleration
tmc2160_periodicJob
StepDir_periodicJob
StepDir_stop
tmc2160_fillShadowRegisters
tmc2160_init
tmc2160_setCallback
