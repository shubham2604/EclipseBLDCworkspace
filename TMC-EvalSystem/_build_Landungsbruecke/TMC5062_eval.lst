   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC5062_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	getMeasuredSpeed:
  23              	.LVL0:
  24              	.LFB15:
  25              		.file 1 "boards/TMC5062_eval.c"
   1:boards/TMC5062_eval.c **** #include "Board.h"
   2:boards/TMC5062_eval.c **** #include "tmc/ic/TMC5062/TMC5062.h"
   3:boards/TMC5062_eval.c **** 
   4:boards/TMC5062_eval.c **** #define ERRORS_VM        (1<<0)
   5:boards/TMC5062_eval.c **** #define ERRORS_VM_UNDER  (1<<1)
   6:boards/TMC5062_eval.c **** #define ERRORS_VM_OVER   (1<<2)
   7:boards/TMC5062_eval.c **** 
   8:boards/TMC5062_eval.c **** #define VM_MIN  50   // VM[V/10] min
   9:boards/TMC5062_eval.c **** #define VM_MAX  222  // VM[V/10] max +10%
  10:boards/TMC5062_eval.c **** 
  11:boards/TMC5062_eval.c **** #define MOTORS  2
  12:boards/TMC5062_eval.c **** 
  13:boards/TMC5062_eval.c **** // Map our motor index to IC/channel pair
  14:boards/TMC5062_eval.c **** // We only have one IC, so we always choose that IC and map the motor index directly to the channel
  15:boards/TMC5062_eval.c **** #define MOTOR_TO_IC(motor)       (&TMC5062)
  16:boards/TMC5062_eval.c **** #define MOTOR_TO_CHANNEL(motor)  (motor)
  17:boards/TMC5062_eval.c **** 
  18:boards/TMC5062_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  19:boards/TMC5062_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  20:boards/TMC5062_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  21:boards/TMC5062_eval.c **** static uint32_t stop(uint8_t motor);
  22:boards/TMC5062_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  23:boards/TMC5062_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  24:boards/TMC5062_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  25:boards/TMC5062_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  26:boards/TMC5062_eval.c **** 
  27:boards/TMC5062_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  28:boards/TMC5062_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  29:boards/TMC5062_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  30:boards/TMC5062_eval.c **** 
  31:boards/TMC5062_eval.c **** static void periodicJob(uint32_t tick);
  32:boards/TMC5062_eval.c **** static void checkErrors	(uint32_t tick);
  33:boards/TMC5062_eval.c **** static void deInit(void);
  34:boards/TMC5062_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  35:boards/TMC5062_eval.c **** 
  36:boards/TMC5062_eval.c **** static uint8_t reset();
  37:boards/TMC5062_eval.c **** static void enableDriver(DriverState state);
  38:boards/TMC5062_eval.c **** static void configCallback(TMC5062TypeDef *tmc5062, ConfigState state);
  39:boards/TMC5062_eval.c **** 
  40:boards/TMC5062_eval.c **** static SPIChannelTypeDef *TMC5062_SPIChannel;
  41:boards/TMC5062_eval.c **** static TMC5062TypeDef TMC5062;
  42:boards/TMC5062_eval.c **** static ConfigurationTypeDef *TMC5062_config;
  43:boards/TMC5062_eval.c **** 
  44:boards/TMC5062_eval.c **** // Position and velocity mode both use VMAX. In order to preserve VMAX of
  45:boards/TMC5062_eval.c **** // position mode we store the value when switching to velocity mode and
  46:boards/TMC5062_eval.c **** // reapply the stored value when entering position mode.
  47:boards/TMC5062_eval.c **** // A nonzero value represents a stored value, a zero value represents
  48:boards/TMC5062_eval.c **** // no value being stored (VMAX = 0 is a useless case for position mode, so
  49:boards/TMC5062_eval.c **** // using 0 as special value works). No stored value results in VMAX of
  50:boards/TMC5062_eval.c **** // velocity mode being kept for position mode.
  51:boards/TMC5062_eval.c **** static uint32_t vMaxPosMode[MOTORS] = { 0 };
  52:boards/TMC5062_eval.c **** 
  53:boards/TMC5062_eval.c **** typedef struct
  54:boards/TMC5062_eval.c **** {
  55:boards/TMC5062_eval.c **** 	IOPinTypeDef  *DRV_ENN;
  56:boards/TMC5062_eval.c **** 	IOPinTypeDef  *INT_ENCA;
  57:boards/TMC5062_eval.c **** 	IOPinTypeDef  *PP_ENCB;
  58:boards/TMC5062_eval.c **** 	IOPinTypeDef  *SWSEL;
  59:boards/TMC5062_eval.c **** 	IOPinTypeDef  *SWIOP1;
  60:boards/TMC5062_eval.c **** 	IOPinTypeDef  *SWIOP2;
  61:boards/TMC5062_eval.c **** 	IOPinTypeDef  *SWION;
  62:boards/TMC5062_eval.c **** } PinsTypeDef;
  63:boards/TMC5062_eval.c **** 
  64:boards/TMC5062_eval.c **** static PinsTypeDef Pins;
  65:boards/TMC5062_eval.c **** 
  66:boards/TMC5062_eval.c **** // => SPI Wrapper
  67:boards/TMC5062_eval.c **** uint8_t tmc5062_readWrite(uint8_t motor, uint8_t data, uint8_t lastTransfer)
  68:boards/TMC5062_eval.c **** {
  69:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
  70:boards/TMC5062_eval.c **** 		return 0;
  71:boards/TMC5062_eval.c **** 
  72:boards/TMC5062_eval.c **** 	// Only one IC (TMC5062) -> always the same bus to use
  73:boards/TMC5062_eval.c **** 	return TMC5062_SPIChannel->readWrite(data, lastTransfer);
  74:boards/TMC5062_eval.c **** }
  75:boards/TMC5062_eval.c **** // <= SPI Wrapper
  76:boards/TMC5062_eval.c **** 
  77:boards/TMC5062_eval.c **** // => Motor -> IC/channel translation
  78:boards/TMC5062_eval.c **** inline static int readInt(uint8_t motor, uint8_t address)
  79:boards/TMC5062_eval.c **** {
  80:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
  81:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
  82:boards/TMC5062_eval.c **** 
  83:boards/TMC5062_eval.c **** 	return tmc5062_readInt(IC, channel, address);
  84:boards/TMC5062_eval.c **** }
  85:boards/TMC5062_eval.c **** 
  86:boards/TMC5062_eval.c **** inline static void writeInt(uint8_t motor, uint8_t address, int value)
  87:boards/TMC5062_eval.c **** {
  88:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
  89:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
  90:boards/TMC5062_eval.c **** 
  91:boards/TMC5062_eval.c **** 	tmc5062_writeInt(IC, channel, address, value);
  92:boards/TMC5062_eval.c **** }
  93:boards/TMC5062_eval.c **** 
  94:boards/TMC5062_eval.c **** inline static int readField(uint8_t motor, uint8_t address, uint32_t mask, uint8_t shift)
  95:boards/TMC5062_eval.c **** {
  96:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
  97:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
  98:boards/TMC5062_eval.c **** 
  99:boards/TMC5062_eval.c **** 	return TMC5062_FIELD_READ(IC, channel, address, mask, shift);
 100:boards/TMC5062_eval.c **** }
 101:boards/TMC5062_eval.c **** 
 102:boards/TMC5062_eval.c **** inline static void writeField(uint8_t motor, uint8_t address, uint32_t mask, uint8_t shift, uint32_
 103:boards/TMC5062_eval.c **** {
 104:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 105:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
 106:boards/TMC5062_eval.c **** 
 107:boards/TMC5062_eval.c **** 	TMC5062_FIELD_WRITE(IC, channel, address, mask, shift, value);
 108:boards/TMC5062_eval.c **** }
 109:boards/TMC5062_eval.c **** // <= Motor -> IC/channel translation
 110:boards/TMC5062_eval.c **** 
 111:boards/TMC5062_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
 112:boards/TMC5062_eval.c **** {
 113:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 114:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 115:boards/TMC5062_eval.c **** 
 116:boards/TMC5062_eval.c **** 	// Save VMAX if there is no saved value yet (restore when (re-)entering position mode)
 117:boards/TMC5062_eval.c **** 	if(vMaxPosMode[motor] == 0)
 118:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = readInt(motor, TMC5062_VMAX(motor));
 119:boards/TMC5062_eval.c **** 
 120:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_VMAX(motor), abs(velocity));
 121:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), (velocity >= 0)? TMC5062_MODE_VELPOS:TMC5062_MODE_VELNEG)
 122:boards/TMC5062_eval.c **** 
 123:boards/TMC5062_eval.c **** 	return TMC_ERROR_NONE;
 124:boards/TMC5062_eval.c **** }
 125:boards/TMC5062_eval.c **** 
 126:boards/TMC5062_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 127:boards/TMC5062_eval.c **** {
 128:boards/TMC5062_eval.c **** 	return rotate(motor, velocity);
 129:boards/TMC5062_eval.c **** }
 130:boards/TMC5062_eval.c **** 
 131:boards/TMC5062_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 132:boards/TMC5062_eval.c **** {
 133:boards/TMC5062_eval.c **** 	return rotate(motor, -velocity);
 134:boards/TMC5062_eval.c **** }
 135:boards/TMC5062_eval.c **** 
 136:boards/TMC5062_eval.c **** static uint32_t stop(uint8_t motor)
 137:boards/TMC5062_eval.c **** {
 138:boards/TMC5062_eval.c **** 	return rotate(motor, 0);
 139:boards/TMC5062_eval.c **** }
 140:boards/TMC5062_eval.c **** 
 141:boards/TMC5062_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 142:boards/TMC5062_eval.c **** {
 143:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 144:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 145:boards/TMC5062_eval.c **** 
 146:boards/TMC5062_eval.c **** 	// If we have a saved VMAX, apply and then delete ( = 0) the copy
 147:boards/TMC5062_eval.c **** 	if(vMaxPosMode[motor])
 148:boards/TMC5062_eval.c **** 	{
 149:boards/TMC5062_eval.c **** 		writeInt(motor, TMC5062_VMAX(motor), vMaxPosMode[motor]);
 150:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = 0;
 151:boards/TMC5062_eval.c **** 	}
 152:boards/TMC5062_eval.c **** 
 153:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_XTARGET(motor), position);
 154:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
 155:boards/TMC5062_eval.c **** 
 156:boards/TMC5062_eval.c **** 	return TMC_ERROR_NONE;
 157:boards/TMC5062_eval.c **** }
 158:boards/TMC5062_eval.c **** 
 159:boards/TMC5062_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 160:boards/TMC5062_eval.c **** {
 161:boards/TMC5062_eval.c **** 	// determine actual position and add numbers of ticks to move
 162:boards/TMC5062_eval.c **** 	*ticks = readInt(motor, TMC5062_XACTUAL(motor)) + *ticks;
 163:boards/TMC5062_eval.c **** 
 164:boards/TMC5062_eval.c **** 	return moveTo(motor, *ticks);
 165:boards/TMC5062_eval.c **** }
 166:boards/TMC5062_eval.c **** 
 167:boards/TMC5062_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 168:boards/TMC5062_eval.c **** {
 169:boards/TMC5062_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 170:boards/TMC5062_eval.c **** 	int tempValue;
 171:boards/TMC5062_eval.c **** 
 172:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 173:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 174:boards/TMC5062_eval.c **** 
 175:boards/TMC5062_eval.c **** 	switch(type)
 176:boards/TMC5062_eval.c **** 	{
 177:boards/TMC5062_eval.c **** 	case 0:
 178:boards/TMC5062_eval.c **** 		// Target position
 179:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 180:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XTARGET(motor));
 181:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 182:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XTARGET(motor), *value);
 183:boards/TMC5062_eval.c **** 		}
 184:boards/TMC5062_eval.c **** 		break;
 185:boards/TMC5062_eval.c **** 	case 1:
 186:boards/TMC5062_eval.c **** 		// Actual position
 187:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 188:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XACTUAL(motor));
 189:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 190:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XACTUAL(motor), *value);
 191:boards/TMC5062_eval.c **** 		}
 192:boards/TMC5062_eval.c **** 		break;
 193:boards/TMC5062_eval.c **** 	case 2:
 194:boards/TMC5062_eval.c **** 		// Target speed
 195:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 196:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VMAX(motor));
 197:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 198:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 199:boards/TMC5062_eval.c **** 		}
 200:boards/TMC5062_eval.c **** 		break;
 201:boards/TMC5062_eval.c **** 	case 3:
 202:boards/TMC5062_eval.c **** 		// todo CHECK 3: min max actually velocity min and velocity max? (JE) #4
 203:boards/TMC5062_eval.c **** 		// Actual speed
 204:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 205:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VACTUAL(motor));
 206:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 207:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 208:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 209:boards/TMC5062_eval.c **** 		}
 210:boards/TMC5062_eval.c **** 		break;
 211:boards/TMC5062_eval.c **** 	case 4:
 212:boards/TMC5062_eval.c **** 		// Maximum speed
 213:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 214:boards/TMC5062_eval.c **** 			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
 215:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 216:boards/TMC5062_eval.c **** 			TMC5062_config->shadowRegister[TMC5062_VMAX(motor)] = abs(*value);
 217:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_RAMPMODE(motor)) == TMC5062_MODE_POSITION)
 218:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 219:boards/TMC5062_eval.c **** 		}
 220:boards/TMC5062_eval.c **** 		break;
 221:boards/TMC5062_eval.c **** 	case 5:
 222:boards/TMC5062_eval.c **** 		// Maximum acceleration
 223:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 224:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_AMAX(motor));
 225:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 226:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_AMAX(motor), *value);
 227:boards/TMC5062_eval.c **** 		}
 228:boards/TMC5062_eval.c **** 		break;
 229:boards/TMC5062_eval.c **** 	case 6:
 230:boards/TMC5062_eval.c **** 		// Maximum current
 231:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 232:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT);
 233:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 234:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT, *value);
 235:boards/TMC5062_eval.c **** 		}
 236:boards/TMC5062_eval.c **** 		break;
 237:boards/TMC5062_eval.c **** 	case 7:
 238:boards/TMC5062_eval.c **** 		// Standby current
 239:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 240:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT);
 241:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 242:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT, *value);
 243:boards/TMC5062_eval.c **** 		}
 244:boards/TMC5062_eval.c **** 		break;
 245:boards/TMC5062_eval.c **** 	case 8:
 246:boards/TMC5062_eval.c **** 		// Position reached flag
 247:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 248:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_POSITION_REACHED_MASK, TMC5062_POSITI
 249:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 250:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 251:boards/TMC5062_eval.c **** 		}
 252:boards/TMC5062_eval.c **** 		break;
 253:boards/TMC5062_eval.c **** 	case 10:
 254:boards/TMC5062_eval.c **** 		// Right endstop
 255:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 256:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_R_MASK, TMC5062_STATUS_S
 257:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 258:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 259:boards/TMC5062_eval.c **** 		}
 260:boards/TMC5062_eval.c **** 		break;
 261:boards/TMC5062_eval.c **** 	case 11:
 262:boards/TMC5062_eval.c **** 		// Left endstop
 263:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 264:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_L_MASK, TMC5062_STATUS_S
 265:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 266:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 267:boards/TMC5062_eval.c **** 		}
 268:boards/TMC5062_eval.c **** 		break;
 269:boards/TMC5062_eval.c **** 	case 12:
 270:boards/TMC5062_eval.c **** 		// Automatic right stop
 271:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 272:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENAB
 273:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 274:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENABLE_SHIFT
 275:boards/TMC5062_eval.c **** 		}
 276:boards/TMC5062_eval.c **** 		break;
 277:boards/TMC5062_eval.c **** 	case 13:
 278:boards/TMC5062_eval.c **** 		// Automatic left stop
 279:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 280:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENAB
 281:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 282:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENABLE_SHIFT
 283:boards/TMC5062_eval.c **** 		}
 284:boards/TMC5062_eval.c **** 		break;
 285:boards/TMC5062_eval.c **** 	case 14:
 286:boards/TMC5062_eval.c **** 		// SW_MODE Register
 287:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 288:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_SWMODE(motor));
 289:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 290:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_SWMODE(motor), *value);
 291:boards/TMC5062_eval.c **** 		}
 292:boards/TMC5062_eval.c **** 		break;
 293:boards/TMC5062_eval.c **** 	case 15:
 294:boards/TMC5062_eval.c **** 		// Acceleration A1
 295:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 296:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_A1(motor));
 297:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 298:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_A1(motor), *value);
 299:boards/TMC5062_eval.c **** 		}
 300:boards/TMC5062_eval.c **** 		break;
 301:boards/TMC5062_eval.c **** 	case 16:
 302:boards/TMC5062_eval.c **** 		// Velocity V1
 303:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 304:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_V1(motor));
 305:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 306:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_V1(motor), *value);
 307:boards/TMC5062_eval.c **** 		}
 308:boards/TMC5062_eval.c **** 		break;
 309:boards/TMC5062_eval.c **** 	case 17:
 310:boards/TMC5062_eval.c **** 		// Maximum Deceleration
 311:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 312:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_DMAX(motor));
 313:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 314:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_DMAX(motor), *value);
 315:boards/TMC5062_eval.c **** 		}
 316:boards/TMC5062_eval.c **** 		break;
 317:boards/TMC5062_eval.c **** 	case 18:
 318:boards/TMC5062_eval.c **** 		// Deceleration D1
 319:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 320:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_D1(motor));
 321:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 322:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_D1(motor), *value);
 323:boards/TMC5062_eval.c **** 		}
 324:boards/TMC5062_eval.c **** 		break;
 325:boards/TMC5062_eval.c **** 	case 19:
 326:boards/TMC5062_eval.c **** 		// VSTART
 327:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 328:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTART(motor));
 329:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 330:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VSTART(motor), *value);
 331:boards/TMC5062_eval.c **** 		}
 332:boards/TMC5062_eval.c **** 		break;
 333:boards/TMC5062_eval.c **** 	case 20:
 334:boards/TMC5062_eval.c **** 		// Velocity VSTOP
 335:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 336:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTOP(motor));
 337:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 338:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VSTOP(motor), *value);
 339:boards/TMC5062_eval.c **** 		}
 340:boards/TMC5062_eval.c **** 		break;
 341:boards/TMC5062_eval.c **** 	case 21:
 342:boards/TMC5062_eval.c **** 		// Waiting time after ramp down
 343:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 344:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_TZEROWAIT(motor));
 345:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 346:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_TZEROWAIT(motor), *value);
 347:boards/TMC5062_eval.c **** 		}
 348:boards/TMC5062_eval.c **** 		break;
 349:boards/TMC5062_eval.c **** 	case 22:
 350:boards/TMC5062_eval.c **** 		// smartEnergy threshold speed
 351:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 352:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 353:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 354:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor), *value);
 355:boards/TMC5062_eval.c **** 		}
 356:boards/TMC5062_eval.c **** 		break;
 357:boards/TMC5062_eval.c **** 	case 23:
 358:boards/TMC5062_eval.c **** 		// Speed threshold for high speed mode
 359:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 360:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VHIGH(motor));
 361:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 362:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VHIGH(motor), *value);
 363:boards/TMC5062_eval.c **** 		}
 364:boards/TMC5062_eval.c **** 		break;
 365:boards/TMC5062_eval.c **** 	case 24:
 366:boards/TMC5062_eval.c **** 		// Minimum speed for switching to dcStep
 367:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 368:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VDCMIN(motor));
 369:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 370:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VDCMIN(motor), *value);
 371:boards/TMC5062_eval.c **** 		}
 372:boards/TMC5062_eval.c **** 		break;
 373:boards/TMC5062_eval.c **** 	case 28:
 374:boards/TMC5062_eval.c **** 		// High speed fullstep mode
 375:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 376:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT);
 377:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 378:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT, *value);
 379:boards/TMC5062_eval.c **** 		}
 380:boards/TMC5062_eval.c **** 		break;
 381:boards/TMC5062_eval.c **** 	case 29:
 382:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 383:boards/TMC5062_eval.c **** 			*value = TMC5062.velocity[motor];
 384:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 385:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 386:boards/TMC5062_eval.c **** 		}
 387:boards/TMC5062_eval.c **** 		break;
 388:boards/TMC5062_eval.c **** 	case 140:
 389:boards/TMC5062_eval.c **** 		// Microstep Resolution
 390:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 391:boards/TMC5062_eval.c **** 			*value = 256 >> readField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT)
 392:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 393:boards/TMC5062_eval.c **** 			switch(*value)
 394:boards/TMC5062_eval.c **** 			{
 395:boards/TMC5062_eval.c **** 			case 1:    *value = 8;   break;
 396:boards/TMC5062_eval.c **** 			case 2:    *value = 7;   break;
 397:boards/TMC5062_eval.c **** 			case 4:    *value = 6;   break;
 398:boards/TMC5062_eval.c **** 			case 8:    *value = 5;   break;
 399:boards/TMC5062_eval.c **** 			case 16:   *value = 4;   break;
 400:boards/TMC5062_eval.c **** 			case 32:   *value = 3;   break;
 401:boards/TMC5062_eval.c **** 			case 64:   *value = 2;   break;
 402:boards/TMC5062_eval.c **** 			case 128:  *value = 1;   break;
 403:boards/TMC5062_eval.c **** 			case 256:  *value = 0;   break;
 404:boards/TMC5062_eval.c **** 			default:   *value = -1;  break;
 405:boards/TMC5062_eval.c **** 			}
 406:boards/TMC5062_eval.c **** 
 407:boards/TMC5062_eval.c **** 			if(*value != -1)
 408:boards/TMC5062_eval.c **** 			{
 409:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT, *value);
 410:boards/TMC5062_eval.c **** 			}
 411:boards/TMC5062_eval.c **** 		}
 412:boards/TMC5062_eval.c **** 		break;
 413:boards/TMC5062_eval.c **** 	case 162:
 414:boards/TMC5062_eval.c **** 		// Chopper blank time
 415:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 416:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT);
 417:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 418:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT, *value);
 419:boards/TMC5062_eval.c **** 		}
 420:boards/TMC5062_eval.c **** 		break;
 421:boards/TMC5062_eval.c **** 	case 163:
 422:boards/TMC5062_eval.c **** 		// Constant TOff Mode
 423:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 424:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT);
 425:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 426:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT, *value);
 427:boards/TMC5062_eval.c **** 		}
 428:boards/TMC5062_eval.c **** 		break;
 429:boards/TMC5062_eval.c **** 	case 164:
 430:boards/TMC5062_eval.c **** 		// Disable fast decay comparator
 431:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 432:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT);
 433:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 434:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT, *value);
 435:boards/TMC5062_eval.c **** 		}
 436:boards/TMC5062_eval.c **** 		break;
 437:boards/TMC5062_eval.c **** 	case 165:
 438:boards/TMC5062_eval.c **** 		// Chopper hysteresis end / fast decay time
 439:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 440:boards/TMC5062_eval.c **** 			if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT))
 441:boards/TMC5062_eval.c **** 			{
 442:boards/TMC5062_eval.c **** 				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_HEND_MASK, TMC5062_HEND_SHIFT);
 443:boards/TMC5062_eval.c **** 			}
 444:boards/TMC5062_eval.c **** 			else
 445:boards/TMC5062_eval.c **** 			{
 446:boards/TMC5062_eval.c **** 				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT)
 447:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 448:boards/TMC5062_eval.c **** 					*value |= 1<<3; // MSB wird zu value hinzugefügt
 449:boards/TMC5062_eval.c **** 			}
 450:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 451:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 452:boards/TMC5062_eval.c **** 			{
 453:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_HEND_MASK, TMC5062_HEND_SHIFT, *value);
 454:boards/TMC5062_eval.c **** 			}
 455:boards/TMC5062_eval.c **** 			else
 456:boards/TMC5062_eval.c **** 			{
 457:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT, (*value & 1
 458:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT, *value)
 459:boards/TMC5062_eval.c **** 			}
 460:boards/TMC5062_eval.c **** 		}
 461:boards/TMC5062_eval.c **** 		break;
 462:boards/TMC5062_eval.c **** 	case 166:
 463:boards/TMC5062_eval.c **** 		// Chopper hysteresis start / sine wave offset
 464:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 465:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 466:boards/TMC5062_eval.c **** 			{
 467:boards/TMC5062_eval.c **** 				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_HSTRT_MASK, TMC5062_HSTRT_SHIFT);
 468:boards/TMC5062_eval.c **** 			}
 469:boards/TMC5062_eval.c **** 			else
 470:boards/TMC5062_eval.c **** 			{
 471:boards/TMC5062_eval.c **** 				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_OFFSET_MASK, TMC5062_OFFSET_SHIFT);
 472:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 473:boards/TMC5062_eval.c **** 					*value |= 1<<3;
 474:boards/TMC5062_eval.c **** 			}
 475:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 476:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 477:boards/TMC5062_eval.c **** 			{
 478:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_HSTRT_MASK, TMC5062_HSTRT_SHIFT, *value);
 479:boards/TMC5062_eval.c **** 			}
 480:boards/TMC5062_eval.c **** 			else
 481:boards/TMC5062_eval.c **** 			{
 482:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_OFFSET_MASK, TMC5062_OFFSET_SHIFT, *value);
 483:boards/TMC5062_eval.c **** 			}
 484:boards/TMC5062_eval.c **** 		}
 485:boards/TMC5062_eval.c **** 		break;
 486:boards/TMC5062_eval.c **** 	case 167:
 487:boards/TMC5062_eval.c **** 		// Chopper off time
 488:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 489:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT);
 490:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 491:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT, *value);
 492:boards/TMC5062_eval.c **** 		}
 493:boards/TMC5062_eval.c **** 		break;
 494:boards/TMC5062_eval.c **** 	case 168:
 495:boards/TMC5062_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 496:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 497:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT);
 498:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 499:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT, *value);
 500:boards/TMC5062_eval.c **** 		}
 501:boards/TMC5062_eval.c **** 		break;
 502:boards/TMC5062_eval.c **** 	case 169:
 503:boards/TMC5062_eval.c **** 		// smartEnergy current down step
 504:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 505:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT);
 506:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 507:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT, *value);
 508:boards/TMC5062_eval.c **** 		}
 509:boards/TMC5062_eval.c **** 		break;
 510:boards/TMC5062_eval.c **** 	case 170:
 511:boards/TMC5062_eval.c **** 		// smartEnergy hysteresis
 512:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 513:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT);
 514:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 515:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT, *value);
 516:boards/TMC5062_eval.c **** 		}
 517:boards/TMC5062_eval.c **** 		break;
 518:boards/TMC5062_eval.c **** 	case 171:
 519:boards/TMC5062_eval.c **** 		// smartEnergy current up step
 520:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 521:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT);
 522:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 523:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT, *value);
 524:boards/TMC5062_eval.c **** 		}
 525:boards/TMC5062_eval.c **** 		break;
 526:boards/TMC5062_eval.c **** 	case 172:
 527:boards/TMC5062_eval.c **** 		// smartEnergy hysteresis start
 528:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 529:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT);
 530:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 531:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT, *value);
 532:boards/TMC5062_eval.c **** 		}
 533:boards/TMC5062_eval.c **** 		break;
 534:boards/TMC5062_eval.c **** 	case 173:
 535:boards/TMC5062_eval.c **** 		// stallGuard2 filter enable
 536:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 537:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT);
 538:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 539:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT, *value);
 540:boards/TMC5062_eval.c **** 		}
 541:boards/TMC5062_eval.c **** 		break;
 542:boards/TMC5062_eval.c **** 	case 174:
 543:boards/TMC5062_eval.c **** 		// stallGuard2 threshold
 544:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 545:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT);
 546:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 547:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 548:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT, *value);
 549:boards/TMC5062_eval.c **** 		}
 550:boards/TMC5062_eval.c **** 		break;
 551:boards/TMC5062_eval.c **** 	case 179:
 552:boards/TMC5062_eval.c **** 		// VSense
 553:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 554:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT);
 555:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 556:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT, *value);
 557:boards/TMC5062_eval.c **** 		}
 558:boards/TMC5062_eval.c **** 		break;
 559:boards/TMC5062_eval.c **** 	case 180:
 560:boards/TMC5062_eval.c **** 		// smartEnergy actual current
 561:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 562:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_CS_ACTUAL_MASK, TMC5062_CS_ACTUAL_SH
 563:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 564:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 565:boards/TMC5062_eval.c **** 		}
 566:boards/TMC5062_eval.c **** 		break;
 567:boards/TMC5062_eval.c **** 	case 181:
 568:boards/TMC5062_eval.c **** 		// reset stall
 569:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 570:boards/TMC5062_eval.c **** 			if( readInt(motor, TMC5062_SWMODE(motor)) & (1<<10))
 571:boards/TMC5062_eval.c **** 			{
 572:boards/TMC5062_eval.c **** 				*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 573:boards/TMC5062_eval.c **** 			}
 574:boards/TMC5062_eval.c **** 			else
 575:boards/TMC5062_eval.c **** 				tempValue = 0;
 576:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 577:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
 578:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 
 579:boards/TMC5062_eval.c **** 		}
 580:boards/TMC5062_eval.c **** 		break;
 581:boards/TMC5062_eval.c **** 	case 182:
 582:boards/TMC5062_eval.c **** 		// smartEnergy threshold speed
 583:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 584:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 585:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 586:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
 587:boards/TMC5062_eval.c **** 		}
 588:boards/TMC5062_eval.c **** 		break;
 589:boards/TMC5062_eval.c **** 	case 184:
 590:boards/TMC5062_eval.c **** 		// Random TOff mode
 591:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 592:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT);
 593:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 594:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT, *value);
 595:boards/TMC5062_eval.c **** 		}
 596:boards/TMC5062_eval.c **** 		break;
 597:boards/TMC5062_eval.c **** 	case 185:
 598:boards/TMC5062_eval.c **** 		// Chopper synchronization
 599:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 600:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT);
 601:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 602:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT, *value);
 603:boards/TMC5062_eval.c **** 		}
 604:boards/TMC5062_eval.c **** 		break;
 605:boards/TMC5062_eval.c **** 	case 206:
 606:boards/TMC5062_eval.c **** 		// Load value
 607:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 608:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_SG_RESULT_MASK, TMC5062_SG_RESULT_SH
 609:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 610:boards/TMC5062_eval.c **** 			errors |= TMC_ERROR_TYPE;
 611:boards/TMC5062_eval.c **** 		}
 612:boards/TMC5062_eval.c **** 		break;
 613:boards/TMC5062_eval.c **** 	case 209:
 614:boards/TMC5062_eval.c **** 		// Encoder position
 615:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 616:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XENC(motor));
 617:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 618:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XENC(motor),*value);
 619:boards/TMC5062_eval.c **** 		}
 620:boards/TMC5062_eval.c **** 		break;
 621:boards/TMC5062_eval.c **** 	case 210:
 622:boards/TMC5062_eval.c **** 		// Encoder Resolution
 623:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 624:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_ENC_CONST(motor));
 625:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 626:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_ENC_CONST(motor),*value);
 627:boards/TMC5062_eval.c **** 		}
 628:boards/TMC5062_eval.c **** 		break;
 629:boards/TMC5062_eval.c **** 	case 211:
 630:boards/TMC5062_eval.c **** 		if(readWrite == READ) {
 631:boards/TMC5062_eval.c **** 			// encoder enable
 632:boards/TMC5062_eval.c **** 			switch(motor)
 633:boards/TMC5062_eval.c **** 			{
 634:boards/TMC5062_eval.c **** 			case 0:
 635:boards/TMC5062_eval.c **** 				tempValue = readInt(motor, TMC5062_GCONF);
 636:boards/TMC5062_eval.c **** 				tempValue &= (1<<3) | (1<<4);
 637:boards/TMC5062_eval.c **** 				*value = (tempValue == (1<<4))? 1 : 0;
 638:boards/TMC5062_eval.c **** 				break;
 639:boards/TMC5062_eval.c **** 			case 1:
 640:boards/TMC5062_eval.c **** 				tempValue = readInt(motor, TMC5062_GCONF);
 641:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 642:boards/TMC5062_eval.c **** 				*value = (tempValue == ((1<<5) | (0<<6)))? 1 : 0;
 643:boards/TMC5062_eval.c **** 				break;
 644:boards/TMC5062_eval.c **** 			}
 645:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 646:boards/TMC5062_eval.c **** 			// encoder enable
 647:boards/TMC5062_eval.c **** 			switch(motor)
 648:boards/TMC5062_eval.c **** 			{
 649:boards/TMC5062_eval.c **** 			case 0:
 650:boards/TMC5062_eval.c **** 				tempValue = readInt(motor, TMC5062_GCONF);
 651:boards/TMC5062_eval.c **** 				if(*value)
 652:boards/TMC5062_eval.c **** 					tempValue = (tempValue & ~(1<<3)) | (1<<4);
 653:boards/TMC5062_eval.c **** 				else
 654:boards/TMC5062_eval.c **** 					tempValue = (tempValue | (1<<3)) & ~(1<<4);
 655:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 656:boards/TMC5062_eval.c **** 				break;
 657:boards/TMC5062_eval.c **** 			case 1:		// enable ENCODER2 - disable REF
 658:boards/TMC5062_eval.c **** 				tempValue = readInt(motor, TMC5062_GCONF);
 659:boards/TMC5062_eval.c **** 				if(*value)
 660:boards/TMC5062_eval.c **** 					//tempValue = (tempValue | (1<<5)) & ~(5<<5);
 661:boards/TMC5062_eval.c **** 					tempValue = (tempValue | (1<<5)) & ~(1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Cod
 662:boards/TMC5062_eval.c **** 				else
 663:boards/TMC5062_eval.c **** 					//tempValue = (tempValue & ~(1<<6)) | ~(1<<6);
 664:boards/TMC5062_eval.c **** 					tempValue = (tempValue & ~(1<<5)) | (1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Cod
 665:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 666:boards/TMC5062_eval.c **** 				break;
 667:boards/TMC5062_eval.c **** 			}
 668:boards/TMC5062_eval.c **** 		}
 669:boards/TMC5062_eval.c **** 		break;
 670:boards/TMC5062_eval.c **** 	default:
 671:boards/TMC5062_eval.c **** 		errors |= TMC_ERROR_TYPE;
 672:boards/TMC5062_eval.c **** 		break;
 673:boards/TMC5062_eval.c **** 	}
 674:boards/TMC5062_eval.c **** 
 675:boards/TMC5062_eval.c **** 	return errors;
 676:boards/TMC5062_eval.c **** }
 677:boards/TMC5062_eval.c **** 
 678:boards/TMC5062_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 679:boards/TMC5062_eval.c **** {
 680:boards/TMC5062_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 681:boards/TMC5062_eval.c **** }
 682:boards/TMC5062_eval.c **** 
 683:boards/TMC5062_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 684:boards/TMC5062_eval.c **** {
 685:boards/TMC5062_eval.c **** 	return handleParameter(READ, motor, type, value);
 686:boards/TMC5062_eval.c **** }
 687:boards/TMC5062_eval.c **** 
 688:boards/TMC5062_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 689:boards/TMC5062_eval.c **** {
  26              		.loc 1 689 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 690:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
  31              		.loc 1 690 2 view .LVU1
  32              		.loc 1 690 4 is_stmt 0 view .LVU2
  33 0000 0128     		cmp	r0, #1
 691:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 692:boards/TMC5062_eval.c **** 
 693:boards/TMC5062_eval.c **** 	*value = TMC5062.velocity[motor];
  34              		.loc 1 693 2 is_stmt 1 view .LVU3
  35              		.loc 1 693 27 is_stmt 0 view .LVU4
  36 0002 9FBF     		itttt	ls
  37 0004 044B     		ldrls	r3, .L4
  38 0006 03EB8000 		addls	r0, r3, r0, lsl #2
  39              	.LVL1:
  40              		.loc 1 693 9 view .LVU5
  41 000a C369     		ldrls	r3, [r0, #28]
  42 000c 0B60     		strls	r3, [r1]
 694:boards/TMC5062_eval.c **** 
 695:boards/TMC5062_eval.c **** 	return TMC_ERROR_NONE;
  43              		.loc 1 695 2 is_stmt 1 view .LVU6
  44              		.loc 1 695 9 is_stmt 0 view .LVU7
  45 000e 94BF     		ite	ls
  46 0010 0020     		movls	r0, #0
 691:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
  47              		.loc 1 691 10 view .LVU8
  48 0012 0820     		movhi	r0, #8
 696:boards/TMC5062_eval.c **** }
  49              		.loc 1 696 1 view .LVU9
  50 0014 7047     		bx	lr
  51              	.L5:
  52 0016 00BF     		.align	2
  53              	.L4:
  54 0018 00000000 		.word	.LANCHOR0
  55              		.cfi_endproc
  56              	.LFE15:
  58              		.align	1
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	checkErrors:
  65              	.LVL2:
  66              	.LFB19:
 697:boards/TMC5062_eval.c **** 
 698:boards/TMC5062_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 699:boards/TMC5062_eval.c **** {
 700:boards/TMC5062_eval.c **** 	UNUSED(motor);
 701:boards/TMC5062_eval.c **** 	writeInt(0, address, value);
 702:boards/TMC5062_eval.c **** }
 703:boards/TMC5062_eval.c **** 
 704:boards/TMC5062_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 705:boards/TMC5062_eval.c **** {
 706:boards/TMC5062_eval.c **** 	UNUSED(motor);
 707:boards/TMC5062_eval.c **** 	*value	= readInt(0, address);
 708:boards/TMC5062_eval.c **** }
 709:boards/TMC5062_eval.c **** 
 710:boards/TMC5062_eval.c **** static void periodicJob(uint32_t tick)
 711:boards/TMC5062_eval.c **** {
 712:boards/TMC5062_eval.c **** 	tmc5062_periodicJob(&TMC5062, tick);
 713:boards/TMC5062_eval.c **** }
 714:boards/TMC5062_eval.c **** 
 715:boards/TMC5062_eval.c **** static void checkErrors(uint32_t tick)
 716:boards/TMC5062_eval.c **** {
  67              		.loc 1 716 1 is_stmt 1 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
 717:boards/TMC5062_eval.c **** 	UNUSED(tick);
  72              		.loc 1 717 2 view .LVU11
 718:boards/TMC5062_eval.c **** 	Evalboards.ch1.errors = 0;
  73              		.loc 1 718 2 view .LVU12
  74              		.loc 1 718 24 is_stmt 0 view .LVU13
  75 001c 014B     		ldr	r3, .L7
  76 001e 0022     		movs	r2, #0
  77 0020 9A60     		str	r2, [r3, #8]
 719:boards/TMC5062_eval.c **** }
  78              		.loc 1 719 1 view .LVU14
  79 0022 7047     		bx	lr
  80              	.L8:
  81              		.align	2
  82              	.L7:
  83 0024 00000000 		.word	Evalboards
  84              		.cfi_endproc
  85              	.LFE19:
  87              		.align	1
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  91              		.fpu softvfp
  93              	periodicJob:
  94              	.LVL3:
  95              	.LFB18:
 711:boards/TMC5062_eval.c **** 	tmc5062_periodicJob(&TMC5062, tick);
  96              		.loc 1 711 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 712:boards/TMC5062_eval.c **** }
 101              		.loc 1 712 2 view .LVU16
 711:boards/TMC5062_eval.c **** 	tmc5062_periodicJob(&TMC5062, tick);
 102              		.loc 1 711 1 is_stmt 0 view .LVU17
 103 0028 0146     		mov	r1, r0
 712:boards/TMC5062_eval.c **** }
 104              		.loc 1 712 2 view .LVU18
 105 002a 0148     		ldr	r0, .L10
 106              	.LVL4:
 712:boards/TMC5062_eval.c **** }
 107              		.loc 1 712 2 view .LVU19
 108 002c FFF7FEBF 		b	tmc5062_periodicJob
 109              	.LVL5:
 110              	.L11:
 712:boards/TMC5062_eval.c **** }
 111              		.loc 1 712 2 view .LVU20
 112              		.align	2
 113              	.L10:
 114 0030 00000000 		.word	.LANCHOR0
 115              		.cfi_endproc
 116              	.LFE18:
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu softvfp
 124              	readInt:
 125              	.LVL6:
 126              	.LFB2:
  79:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 127              		.loc 1 79 1 is_stmt 1 view -0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
  80:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
 132              		.loc 1 80 2 view .LVU22
  81:boards/TMC5062_eval.c **** 
 133              		.loc 1 81 2 view .LVU23
  83:boards/TMC5062_eval.c **** }
 134              		.loc 1 83 2 view .LVU24
  79:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 135              		.loc 1 79 1 is_stmt 0 view .LVU25
 136 0034 0A46     		mov	r2, r1
  83:boards/TMC5062_eval.c **** }
 137              		.loc 1 83 9 view .LVU26
 138 0036 0146     		mov	r1, r0
 139              	.LVL7:
  83:boards/TMC5062_eval.c **** }
 140              		.loc 1 83 9 view .LVU27
 141 0038 0148     		ldr	r0, .L13
 142              	.LVL8:
  83:boards/TMC5062_eval.c **** }
 143              		.loc 1 83 9 view .LVU28
 144 003a FFF7FEBF 		b	tmc5062_readInt
 145              	.LVL9:
 146              	.L14:
 147 003e 00BF     		.align	2
 148              	.L13:
 149 0040 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE2:
 153              		.align	1
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu softvfp
 159              	readRegister:
 160              	.LVL10:
 161              	.LFB17:
 705:boards/TMC5062_eval.c **** 	UNUSED(motor);
 162              		.loc 1 705 1 is_stmt 1 view -0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 706:boards/TMC5062_eval.c **** 	*value	= readInt(0, address);
 166              		.loc 1 706 2 view .LVU30
 707:boards/TMC5062_eval.c **** }
 167              		.loc 1 707 2 view .LVU31
 705:boards/TMC5062_eval.c **** 	UNUSED(motor);
 168              		.loc 1 705 1 is_stmt 0 view .LVU32
 169 0044 10B5     		push	{r4, lr}
 170              	.LCFI0:
 171              		.cfi_def_cfa_offset 8
 172              		.cfi_offset 4, -8
 173              		.cfi_offset 14, -4
 707:boards/TMC5062_eval.c **** }
 174              		.loc 1 707 11 view .LVU33
 175 0046 0020     		movs	r0, #0
 176              	.LVL11:
 705:boards/TMC5062_eval.c **** 	UNUSED(motor);
 177              		.loc 1 705 1 view .LVU34
 178 0048 1446     		mov	r4, r2
 707:boards/TMC5062_eval.c **** }
 179              		.loc 1 707 11 view .LVU35
 180 004a FFF7F3FF 		bl	readInt
 181              	.LVL12:
 707:boards/TMC5062_eval.c **** }
 182              		.loc 1 707 9 view .LVU36
 183 004e 2060     		str	r0, [r4]
 708:boards/TMC5062_eval.c **** 
 184              		.loc 1 708 1 view .LVU37
 185 0050 10BD     		pop	{r4, pc}
 708:boards/TMC5062_eval.c **** 
 186              		.loc 1 708 1 view .LVU38
 187              		.cfi_endproc
 188              	.LFE17:
 190              		.align	1
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	readField:
 197              	.LVL13:
 198              	.LFB4:
  95:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 199              		.loc 1 95 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
  96:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
 203              		.loc 1 96 2 view .LVU40
  97:boards/TMC5062_eval.c **** 
 204              		.loc 1 97 2 view .LVU41
  99:boards/TMC5062_eval.c **** }
 205              		.loc 1 99 2 view .LVU42
  95:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 206              		.loc 1 95 1 is_stmt 0 view .LVU43
 207 0052 38B5     		push	{r3, r4, r5, lr}
 208              	.LCFI1:
 209              		.cfi_def_cfa_offset 16
 210              		.cfi_offset 3, -16
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 5, -8
 213              		.cfi_offset 14, -4
  95:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 214              		.loc 1 95 1 view .LVU44
 215 0054 1546     		mov	r5, r2
  99:boards/TMC5062_eval.c **** }
 216              		.loc 1 99 9 view .LVU45
 217 0056 0A46     		mov	r2, r1
 218              	.LVL14:
  99:boards/TMC5062_eval.c **** }
 219              		.loc 1 99 9 view .LVU46
 220 0058 0146     		mov	r1, r0
 221              	.LVL15:
  99:boards/TMC5062_eval.c **** }
 222              		.loc 1 99 9 view .LVU47
 223 005a 0348     		ldr	r0, .L17
 224              	.LVL16:
  95:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 225              		.loc 1 95 1 view .LVU48
 226 005c 1C46     		mov	r4, r3
  99:boards/TMC5062_eval.c **** }
 227              		.loc 1 99 9 view .LVU49
 228 005e FFF7FEFF 		bl	tmc5062_readInt
 229              	.LVL17:
  99:boards/TMC5062_eval.c **** }
 230              		.loc 1 99 9 view .LVU50
 231 0062 2840     		ands	r0, r0, r5
 100:boards/TMC5062_eval.c **** 
 232              		.loc 1 100 1 view .LVU51
 233 0064 E040     		lsrs	r0, r0, r4
 234 0066 38BD     		pop	{r3, r4, r5, pc}
 235              	.LVL18:
 236              	.L18:
 100:boards/TMC5062_eval.c **** 
 237              		.loc 1 100 1 view .LVU52
 238              		.align	2
 239              	.L17:
 240 0068 00000000 		.word	.LANCHOR0
 241              		.cfi_endproc
 242              	.LFE4:
 244              		.align	1
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	writeInt:
 251              	.LVL19:
 252              	.LFB3:
  87:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 253              		.loc 1 87 1 is_stmt 1 view -0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257              		@ link register save eliminated.
  88:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
 258              		.loc 1 88 2 view .LVU54
  89:boards/TMC5062_eval.c **** 
 259              		.loc 1 89 2 view .LVU55
  91:boards/TMC5062_eval.c **** }
 260              		.loc 1 91 2 view .LVU56
  87:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 261              		.loc 1 87 1 is_stmt 0 view .LVU57
 262 006c 1346     		mov	r3, r2
  91:boards/TMC5062_eval.c **** }
 263              		.loc 1 91 2 view .LVU58
 264 006e 0A46     		mov	r2, r1
 265              	.LVL20:
  91:boards/TMC5062_eval.c **** }
 266              		.loc 1 91 2 view .LVU59
 267 0070 0146     		mov	r1, r0
 268              	.LVL21:
  91:boards/TMC5062_eval.c **** }
 269              		.loc 1 91 2 view .LVU60
 270 0072 0148     		ldr	r0, .L20
 271              	.LVL22:
  91:boards/TMC5062_eval.c **** }
 272              		.loc 1 91 2 view .LVU61
 273 0074 FFF7FEBF 		b	tmc5062_writeInt
 274              	.LVL23:
 275              	.L21:
  91:boards/TMC5062_eval.c **** }
 276              		.loc 1 91 2 view .LVU62
 277              		.align	2
 278              	.L20:
 279 0078 00000000 		.word	.LANCHOR0
 280              		.cfi_endproc
 281              	.LFE3:
 283              		.align	1
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu softvfp
 289              	writeRegister:
 290              	.LVL24:
 291              	.LFB16:
 699:boards/TMC5062_eval.c **** 	UNUSED(motor);
 292              		.loc 1 699 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 700:boards/TMC5062_eval.c **** 	writeInt(0, address, value);
 297              		.loc 1 700 2 view .LVU64
 701:boards/TMC5062_eval.c **** }
 298              		.loc 1 701 2 view .LVU65
 299 007c 0020     		movs	r0, #0
 300              	.LVL25:
 701:boards/TMC5062_eval.c **** }
 301              		.loc 1 701 2 is_stmt 0 view .LVU66
 302 007e F5E7     		b	writeInt
 303              	.LVL26:
 701:boards/TMC5062_eval.c **** }
 304              		.loc 1 701 2 view .LVU67
 305              		.cfi_endproc
 306              	.LFE16:
 308              		.align	1
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu softvfp
 314              	moveTo:
 315              	.LVL27:
 316              	.LFB10:
 142:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 317              		.loc 1 142 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 143:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 321              		.loc 1 143 2 view .LVU69
 143:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 322              		.loc 1 143 4 is_stmt 0 view .LVU70
 323 0080 0128     		cmp	r0, #1
 142:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 324              		.loc 1 142 1 view .LVU71
 325 0082 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 326              	.LCFI2:
 327              		.cfi_def_cfa_offset 24
 328              		.cfi_offset 4, -24
 329              		.cfi_offset 5, -20
 330              		.cfi_offset 6, -16
 331              		.cfi_offset 7, -12
 332              		.cfi_offset 8, -8
 333              		.cfi_offset 14, -4
 142:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 334              		.loc 1 142 1 view .LVU72
 335 0086 0446     		mov	r4, r0
 336 0088 8846     		mov	r8, r1
 143:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 337              		.loc 1 143 4 view .LVU73
 338 008a 1FD8     		bhi	.L26
 147:boards/TMC5062_eval.c **** 	{
 339              		.loc 1 147 2 is_stmt 1 view .LVU74
 147:boards/TMC5062_eval.c **** 	{
 340              		.loc 1 147 16 is_stmt 0 view .LVU75
 341 008c 104F     		ldr	r7, .L30
 342 008e 07EB8007 		add	r7, r7, r0, lsl #2
 343 0092 2025     		movs	r5, #32
 344 0094 D7F8A422 		ldr	r2, [r7, #676]
 345 0098 8540     		lsls	r5, r5, r0
 346 009a 6EB2     		sxtb	r6, r5
 147:boards/TMC5062_eval.c **** 	{
 347              		.loc 1 147 4 view .LVU76
 348 009c 3AB1     		cbz	r2, .L25
 149:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = 0;
 349              		.loc 1 149 3 is_stmt 1 view .LVU77
 149:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = 0;
 350              		.loc 1 149 19 is_stmt 0 view .LVU78
 351 009e 46F00701 		orr	r1, r6, #7
 352              	.LVL28:
 149:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = 0;
 353              		.loc 1 149 3 view .LVU79
 354 00a2 C9B2     		uxtb	r1, r1
 355 00a4 FFF7E2FF 		bl	writeInt
 356              	.LVL29:
 150:boards/TMC5062_eval.c **** 	}
 357              		.loc 1 150 3 is_stmt 1 view .LVU80
 150:boards/TMC5062_eval.c **** 	}
 358              		.loc 1 150 22 is_stmt 0 view .LVU81
 359 00a8 0023     		movs	r3, #0
 360 00aa C7F8A432 		str	r3, [r7, #676]
 361              	.L25:
 153:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
 362              		.loc 1 153 2 is_stmt 1 view .LVU82
 153:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
 363              		.loc 1 153 18 is_stmt 0 view .LVU83
 364 00ae 46F00D06 		orr	r6, r6, #13
 153:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
 365              		.loc 1 153 2 view .LVU84
 366 00b2 4246     		mov	r2, r8
 367 00b4 F1B2     		uxtb	r1, r6
 368 00b6 2046     		mov	r0, r4
 369 00b8 FFF7D8FF 		bl	writeInt
 370              	.LVL30:
 154:boards/TMC5062_eval.c **** 
 371              		.loc 1 154 2 is_stmt 1 view .LVU85
 372 00bc 2046     		mov	r0, r4
 373 00be 0022     		movs	r2, #0
 374 00c0 E9B2     		uxtb	r1, r5
 375 00c2 FFF7D3FF 		bl	writeInt
 376              	.LVL31:
 156:boards/TMC5062_eval.c **** }
 377              		.loc 1 156 2 view .LVU86
 156:boards/TMC5062_eval.c **** }
 378              		.loc 1 156 9 is_stmt 0 view .LVU87
 379 00c6 0020     		movs	r0, #0
 380              	.L23:
 157:boards/TMC5062_eval.c **** 
 381              		.loc 1 157 1 view .LVU88
 382 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 383              	.LVL32:
 384              	.L26:
 144:boards/TMC5062_eval.c **** 
 385              		.loc 1 144 10 view .LVU89
 386 00cc 0820     		movs	r0, #8
 387              	.LVL33:
 144:boards/TMC5062_eval.c **** 
 388              		.loc 1 144 10 view .LVU90
 389 00ce FBE7     		b	.L23
 390              	.L31:
 391              		.align	2
 392              	.L30:
 393 00d0 00000000 		.word	.LANCHOR0
 394              		.cfi_endproc
 395              	.LFE10:
 397              		.align	1
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu softvfp
 403              	moveBy:
 404              	.LVL34:
 405              	.LFB11:
 160:boards/TMC5062_eval.c **** 	// determine actual position and add numbers of ticks to move
 406              		.loc 1 160 1 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 162:boards/TMC5062_eval.c **** 
 410              		.loc 1 162 2 view .LVU92
 160:boards/TMC5062_eval.c **** 	// determine actual position and add numbers of ticks to move
 411              		.loc 1 160 1 is_stmt 0 view .LVU93
 412 00d4 38B5     		push	{r3, r4, r5, lr}
 413              	.LCFI3:
 414              		.cfi_def_cfa_offset 16
 415              		.cfi_offset 3, -16
 416              		.cfi_offset 4, -12
 417              		.cfi_offset 5, -8
 418              		.cfi_offset 14, -4
 162:boards/TMC5062_eval.c **** 
 419              		.loc 1 162 26 view .LVU94
 420 00d6 2023     		movs	r3, #32
 421 00d8 8340     		lsls	r3, r3, r0
 422 00da 43F00103 		orr	r3, r3, #1
 160:boards/TMC5062_eval.c **** 	// determine actual position and add numbers of ticks to move
 423              		.loc 1 160 1 view .LVU95
 424 00de 0D46     		mov	r5, r1
 162:boards/TMC5062_eval.c **** 
 425              		.loc 1 162 11 view .LVU96
 426 00e0 D9B2     		uxtb	r1, r3
 427              	.LVL35:
 160:boards/TMC5062_eval.c **** 	// determine actual position and add numbers of ticks to move
 428              		.loc 1 160 1 view .LVU97
 429 00e2 0446     		mov	r4, r0
 162:boards/TMC5062_eval.c **** 
 430              		.loc 1 162 11 view .LVU98
 431 00e4 FFF7A6FF 		bl	readInt
 432              	.LVL36:
 162:boards/TMC5062_eval.c **** 
 433              		.loc 1 162 50 view .LVU99
 434 00e8 2968     		ldr	r1, [r5]
 435 00ea 0144     		add	r1, r1, r0
 162:boards/TMC5062_eval.c **** 
 436              		.loc 1 162 9 view .LVU100
 437 00ec 2960     		str	r1, [r5]
 164:boards/TMC5062_eval.c **** }
 438              		.loc 1 164 2 is_stmt 1 view .LVU101
 164:boards/TMC5062_eval.c **** }
 439              		.loc 1 164 9 is_stmt 0 view .LVU102
 440 00ee 2046     		mov	r0, r4
 165:boards/TMC5062_eval.c **** 
 441              		.loc 1 165 1 view .LVU103
 442 00f0 BDE83840 		pop	{r3, r4, r5, lr}
 443              	.LCFI4:
 444              		.cfi_restore 14
 445              		.cfi_restore 5
 446              		.cfi_restore 4
 447              		.cfi_restore 3
 448              		.cfi_def_cfa_offset 0
 449              	.LVL37:
 164:boards/TMC5062_eval.c **** }
 450              		.loc 1 164 9 view .LVU104
 451 00f4 C4E7     		b	moveTo
 452              	.LVL38:
 453              		.cfi_endproc
 454              	.LFE11:
 456              		.align	1
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu softvfp
 462              	rotate:
 463              	.LVL39:
 464              	.LFB6:
 112:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 465              		.loc 1 112 1 is_stmt 1 view -0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 113:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 469              		.loc 1 113 2 view .LVU106
 113:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 470              		.loc 1 113 4 is_stmt 0 view .LVU107
 471 00f6 0128     		cmp	r0, #1
 112:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 472              		.loc 1 112 1 view .LVU108
 473 00f8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 474              	.LCFI5:
 475              		.cfi_def_cfa_offset 24
 476              		.cfi_offset 4, -24
 477              		.cfi_offset 5, -20
 478              		.cfi_offset 6, -16
 479              		.cfi_offset 7, -12
 480              		.cfi_offset 8, -8
 481              		.cfi_offset 14, -4
 112:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 482              		.loc 1 112 1 view .LVU109
 483 00fc 0446     		mov	r4, r0
 484 00fe 0E46     		mov	r6, r1
 113:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 485              		.loc 1 113 4 view .LVU110
 486 0100 22D8     		bhi	.L37
 117:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = readInt(motor, TMC5062_VMAX(motor));
 487              		.loc 1 117 2 is_stmt 1 view .LVU111
 117:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = readInt(motor, TMC5062_VMAX(motor));
 488              		.loc 1 117 16 is_stmt 0 view .LVU112
 489 0102 124B     		ldr	r3, .L39
 490 0104 03EB8008 		add	r8, r3, r0, lsl #2
 491 0108 2025     		movs	r5, #32
 492 010a 8540     		lsls	r5, r5, r0
 117:boards/TMC5062_eval.c **** 		vMaxPosMode[motor] = readInt(motor, TMC5062_VMAX(motor));
 493              		.loc 1 117 4 view .LVU113
 494 010c D8F8A432 		ldr	r3, [r8, #676]
 495 0110 45F00707 		orr	r7, r5, #7
 496 0114 FFB2     		uxtb	r7, r7
 497 0116 23B9     		cbnz	r3, .L35
 118:boards/TMC5062_eval.c **** 
 498              		.loc 1 118 3 is_stmt 1 view .LVU114
 118:boards/TMC5062_eval.c **** 
 499              		.loc 1 118 24 is_stmt 0 view .LVU115
 500 0118 3946     		mov	r1, r7
 501              	.LVL40:
 118:boards/TMC5062_eval.c **** 
 502              		.loc 1 118 24 view .LVU116
 503 011a FFF78BFF 		bl	readInt
 504              	.LVL41:
 118:boards/TMC5062_eval.c **** 
 505              		.loc 1 118 22 view .LVU117
 506 011e C8F8A402 		str	r0, [r8, #676]
 507              	.L35:
 120:boards/TMC5062_eval.c **** 	writeInt(motor, TMC5062_RAMPMODE(motor), (velocity >= 0)? TMC5062_MODE_VELPOS:TMC5062_MODE_VELNEG)
 508              		.loc 1 120 2 is_stmt 1 view .LVU118
 509 0122 86EAE672 		eor	r2, r6, r6, asr #31
 510 0126 A2EBE672 		sub	r2, r2, r6, asr #31
 511 012a 3946     		mov	r1, r7
 512 012c 2046     		mov	r0, r4
 513 012e FFF79DFF 		bl	writeInt
 514              	.LVL42:
 121:boards/TMC5062_eval.c **** 
 515              		.loc 1 121 2 view .LVU119
 516 0132 002E     		cmp	r6, #0
 517 0134 2046     		mov	r0, r4
 518 0136 ACBF     		ite	ge
 519 0138 0122     		movge	r2, #1
 520 013a 0222     		movlt	r2, #2
 521 013c E9B2     		uxtb	r1, r5
 522 013e FFF795FF 		bl	writeInt
 523              	.LVL43:
 123:boards/TMC5062_eval.c **** }
 524              		.loc 1 123 2 view .LVU120
 123:boards/TMC5062_eval.c **** }
 525              		.loc 1 123 9 is_stmt 0 view .LVU121
 526 0142 0020     		movs	r0, #0
 527              	.L33:
 124:boards/TMC5062_eval.c **** 
 528              		.loc 1 124 1 view .LVU122
 529 0144 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 530              	.LVL44:
 531              	.L37:
 114:boards/TMC5062_eval.c **** 
 532              		.loc 1 114 10 view .LVU123
 533 0148 0820     		movs	r0, #8
 534              	.LVL45:
 114:boards/TMC5062_eval.c **** 
 535              		.loc 1 114 10 view .LVU124
 536 014a FBE7     		b	.L33
 537              	.L40:
 538              		.align	2
 539              	.L39:
 540 014c 00000000 		.word	.LANCHOR0
 541              		.cfi_endproc
 542              	.LFE6:
 544              		.align	1
 545              		.syntax unified
 546              		.thumb
 547              		.thumb_func
 548              		.fpu softvfp
 550              	stop:
 551              	.LVL46:
 552              	.LFB9:
 137:boards/TMC5062_eval.c **** 	return rotate(motor, 0);
 553              		.loc 1 137 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 138:boards/TMC5062_eval.c **** }
 558              		.loc 1 138 2 view .LVU126
 138:boards/TMC5062_eval.c **** }
 559              		.loc 1 138 9 is_stmt 0 view .LVU127
 560 0150 0021     		movs	r1, #0
 561 0152 D0E7     		b	rotate
 562              	.LVL47:
 138:boards/TMC5062_eval.c **** }
 563              		.loc 1 138 9 view .LVU128
 564              		.cfi_endproc
 565              	.LFE9:
 567              		.align	1
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	left:
 574              	.LVL48:
 575              	.LFB8:
 132:boards/TMC5062_eval.c **** 	return rotate(motor, -velocity);
 576              		.loc 1 132 1 is_stmt 1 view -0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              		@ link register save eliminated.
 133:boards/TMC5062_eval.c **** }
 581              		.loc 1 133 2 view .LVU130
 133:boards/TMC5062_eval.c **** }
 582              		.loc 1 133 9 is_stmt 0 view .LVU131
 583 0154 4942     		rsbs	r1, r1, #0
 584              	.LVL49:
 133:boards/TMC5062_eval.c **** }
 585              		.loc 1 133 9 view .LVU132
 586 0156 CEE7     		b	rotate
 587              	.LVL50:
 133:boards/TMC5062_eval.c **** }
 588              		.loc 1 133 9 view .LVU133
 589              		.cfi_endproc
 590              	.LFE8:
 592              		.align	1
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu softvfp
 598              	right:
 599              	.LVL51:
 600              	.LFB7:
 127:boards/TMC5062_eval.c **** 	return rotate(motor, velocity);
 601              		.loc 1 127 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 128:boards/TMC5062_eval.c **** }
 606              		.loc 1 128 2 view .LVU135
 128:boards/TMC5062_eval.c **** }
 607              		.loc 1 128 9 is_stmt 0 view .LVU136
 608 0158 CDE7     		b	rotate
 609              	.LVL52:
 128:boards/TMC5062_eval.c **** }
 610              		.loc 1 128 9 view .LVU137
 611              		.cfi_endproc
 612              	.LFE7:
 614              		.align	1
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu softvfp
 620              	writeField:
 621              	.LVL53:
 622              	.LFB5:
 103:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 623              		.loc 1 103 1 is_stmt 1 view -0
 624              		.cfi_startproc
 625              		@ args = 4, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 104:boards/TMC5062_eval.c **** 	uint8_t channel = MOTOR_TO_CHANNEL(motor);
 627              		.loc 1 104 2 view .LVU139
 105:boards/TMC5062_eval.c **** 
 628              		.loc 1 105 2 view .LVU140
 107:boards/TMC5062_eval.c **** }
 629              		.loc 1 107 2 view .LVU141
 103:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 630              		.loc 1 103 1 is_stmt 0 view .LVU142
 631 015a 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 632              	.LCFI6:
 633              		.cfi_def_cfa_offset 32
 634              		.cfi_offset 4, -32
 635              		.cfi_offset 5, -28
 636              		.cfi_offset 6, -24
 637              		.cfi_offset 7, -20
 638              		.cfi_offset 8, -16
 639              		.cfi_offset 9, -12
 640              		.cfi_offset 10, -8
 641              		.cfi_offset 14, -4
 107:boards/TMC5062_eval.c **** }
 642              		.loc 1 107 2 view .LVU143
 643 015e 0C4F     		ldr	r7, .L45
 103:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 644              		.loc 1 103 1 view .LVU144
 645 0160 089C     		ldr	r4, [sp, #32]
 646 0162 0546     		mov	r5, r0
 647 0164 0E46     		mov	r6, r1
 648 0166 9046     		mov	r8, r2
 107:boards/TMC5062_eval.c **** }
 649              		.loc 1 107 2 view .LVU145
 650 0168 0A46     		mov	r2, r1
 651              	.LVL54:
 107:boards/TMC5062_eval.c **** }
 652              		.loc 1 107 2 view .LVU146
 653 016a 0146     		mov	r1, r0
 654              	.LVL55:
 107:boards/TMC5062_eval.c **** }
 655              		.loc 1 107 2 view .LVU147
 656 016c 3846     		mov	r0, r7
 657              	.LVL56:
 103:boards/TMC5062_eval.c **** 	TMC5062TypeDef *IC = MOTOR_TO_IC(motor);
 658              		.loc 1 103 1 view .LVU148
 659 016e 9946     		mov	r9, r3
 107:boards/TMC5062_eval.c **** }
 660              		.loc 1 107 2 view .LVU149
 661 0170 FFF7FEFF 		bl	tmc5062_readInt
 662              	.LVL57:
 107:boards/TMC5062_eval.c **** }
 663              		.loc 1 107 2 view .LVU150
 664 0174 04FA09F4 		lsl	r4, r4, r9
 665 0178 4440     		eors	r4, r4, r0
 666 017a 04EA0803 		and	r3, r4, r8
 667 017e 4340     		eors	r3, r3, r0
 668 0180 3246     		mov	r2, r6
 669 0182 2946     		mov	r1, r5
 670 0184 3846     		mov	r0, r7
 108:boards/TMC5062_eval.c **** // <= Motor -> IC/channel translation
 671              		.loc 1 108 1 view .LVU151
 672 0186 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 673              	.LCFI7:
 674              		.cfi_restore 14
 675              		.cfi_restore 10
 676              		.cfi_restore 9
 677              		.cfi_restore 8
 678              		.cfi_restore 7
 679              		.cfi_restore 6
 680              		.cfi_restore 5
 681              		.cfi_restore 4
 682              		.cfi_def_cfa_offset 0
 683              	.LVL58:
 107:boards/TMC5062_eval.c **** }
 684              		.loc 1 107 2 view .LVU152
 685 018a FFF7FEBF 		b	tmc5062_writeInt
 686              	.LVL59:
 687              	.L46:
 688 018e 00BF     		.align	2
 689              	.L45:
 690 0190 00000000 		.word	.LANCHOR0
 691              		.cfi_endproc
 692              	.LFE5:
 694              		.align	1
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu softvfp
 700              	handleParameter:
 701              	.LVL60:
 702              	.LFB12:
 168:boards/TMC5062_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 703              		.loc 1 168 1 is_stmt 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 169:boards/TMC5062_eval.c **** 	int tempValue;
 707              		.loc 1 169 2 view .LVU154
 170:boards/TMC5062_eval.c **** 
 708              		.loc 1 170 2 view .LVU155
 172:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 709              		.loc 1 172 2 view .LVU156
 172:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 710              		.loc 1 172 4 is_stmt 0 view .LVU157
 711 0194 0129     		cmp	r1, #1
 168:boards/TMC5062_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 712              		.loc 1 168 1 view .LVU158
 713 0196 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 714              	.LCFI8:
 715              		.cfi_def_cfa_offset 32
 716              		.cfi_offset 4, -24
 717              		.cfi_offset 5, -20
 718              		.cfi_offset 6, -16
 719              		.cfi_offset 7, -12
 720              		.cfi_offset 8, -8
 721              		.cfi_offset 14, -4
 168:boards/TMC5062_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 722              		.loc 1 168 1 view .LVU159
 723 019a 0446     		mov	r4, r0
 724 019c 0D46     		mov	r5, r1
 725 019e 1E46     		mov	r6, r3
 172:boards/TMC5062_eval.c **** 		return TMC_ERROR_MOTOR;
 726              		.loc 1 172 4 view .LVU160
 727 01a0 00F26785 		bhi	.L175
 175:boards/TMC5062_eval.c **** 	{
 728              		.loc 1 175 2 is_stmt 1 view .LVU161
 729 01a4 1D2A     		cmp	r2, #29
 730 01a6 57D9     		bls	.L199
 731 01a8 02F17403 		add	r3, r2, #116
 732              	.LVL61:
 175:boards/TMC5062_eval.c **** 	{
 733              		.loc 1 175 2 is_stmt 0 view .LVU162
 734 01ac DBB2     		uxtb	r3, r3
 735 01ae 472B     		cmp	r3, #71
 736 01b0 04D9     		bls	.L103
 737 01b2 0424     		movs	r4, #4
 738              	.LVL62:
 739              	.L47:
 676:boards/TMC5062_eval.c **** 
 740              		.loc 1 676 1 view .LVU163
 741 01b4 2046     		mov	r0, r4
 742 01b6 02B0     		add	sp, sp, #8
 743              	.LCFI9:
 744              		.cfi_remember_state
 745              		.cfi_def_cfa_offset 24
 746              		@ sp needed
 747 01b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 748              	.LVL63:
 749              	.L103:
 750              	.LCFI10:
 751              		.cfi_restore_state
 676:boards/TMC5062_eval.c **** 
 752              		.loc 1 676 1 view .LVU164
 753 01bc 8C3A     		subs	r2, r2, #140
 754              	.LVL64:
 676:boards/TMC5062_eval.c **** 
 755              		.loc 1 676 1 view .LVU165
 756 01be 472A     		cmp	r2, #71
 757 01c0 00F25A85 		bhi	.L176
 758 01c4 DFE812F0 		tbh	[pc, r2, lsl #1]
 759              	.L52:
 760 01c8 5402     		.2byte	(.L75-.L52)/2
 761 01ca 5805     		.2byte	(.L176-.L52)/2
 762 01cc 5805     		.2byte	(.L176-.L52)/2
 763 01ce 5805     		.2byte	(.L176-.L52)/2
 764 01d0 5805     		.2byte	(.L176-.L52)/2
 765 01d2 5805     		.2byte	(.L176-.L52)/2
 766 01d4 5805     		.2byte	(.L176-.L52)/2
 767 01d6 5805     		.2byte	(.L176-.L52)/2
 768 01d8 5805     		.2byte	(.L176-.L52)/2
 769 01da 5805     		.2byte	(.L176-.L52)/2
 770 01dc 5805     		.2byte	(.L176-.L52)/2
 771 01de 5805     		.2byte	(.L176-.L52)/2
 772 01e0 5805     		.2byte	(.L176-.L52)/2
 773 01e2 5805     		.2byte	(.L176-.L52)/2
 774 01e4 5805     		.2byte	(.L176-.L52)/2
 775 01e6 5805     		.2byte	(.L176-.L52)/2
 776 01e8 5805     		.2byte	(.L176-.L52)/2
 777 01ea 5805     		.2byte	(.L176-.L52)/2
 778 01ec 5805     		.2byte	(.L176-.L52)/2
 779 01ee 5805     		.2byte	(.L176-.L52)/2
 780 01f0 5805     		.2byte	(.L176-.L52)/2
 781 01f2 5805     		.2byte	(.L176-.L52)/2
 782 01f4 A502     		.2byte	(.L74-.L52)/2
 783 01f6 BC02     		.2byte	(.L73-.L52)/2
 784 01f8 D302     		.2byte	(.L72-.L52)/2
 785 01fa EA02     		.2byte	(.L71-.L52)/2
 786 01fc 3B03     		.2byte	(.L70-.L52)/2
 787 01fe 7C03     		.2byte	(.L69-.L52)/2
 788 0200 9103     		.2byte	(.L68-.L52)/2
 789 0202 A803     		.2byte	(.L67-.L52)/2
 790 0204 C203     		.2byte	(.L66-.L52)/2
 791 0206 D903     		.2byte	(.L65-.L52)/2
 792 0208 EE03     		.2byte	(.L64-.L52)/2
 793 020a 0504     		.2byte	(.L63-.L52)/2
 794 020c 1E04     		.2byte	(.L62-.L52)/2
 795 020e 5805     		.2byte	(.L176-.L52)/2
 796 0210 5805     		.2byte	(.L176-.L52)/2
 797 0212 5805     		.2byte	(.L176-.L52)/2
 798 0214 5805     		.2byte	(.L176-.L52)/2
 799 0216 3D04     		.2byte	(.L61-.L52)/2
 800 0218 5604     		.2byte	(.L60-.L52)/2
 801 021a 6604     		.2byte	(.L59-.L52)/2
 802 021c 9404     		.2byte	(.L58-.L52)/2
 803 021e 5805     		.2byte	(.L176-.L52)/2
 804 0220 A704     		.2byte	(.L57-.L52)/2
 805 0222 C004     		.2byte	(.L56-.L52)/2
 806 0224 5805     		.2byte	(.L176-.L52)/2
 807 0226 5805     		.2byte	(.L176-.L52)/2
 808 0228 5805     		.2byte	(.L176-.L52)/2
 809 022a 5805     		.2byte	(.L176-.L52)/2
 810 022c 5805     		.2byte	(.L176-.L52)/2
 811 022e 5805     		.2byte	(.L176-.L52)/2
 812 0230 5805     		.2byte	(.L176-.L52)/2
 813 0232 5805     		.2byte	(.L176-.L52)/2
 814 0234 5805     		.2byte	(.L176-.L52)/2
 815 0236 5805     		.2byte	(.L176-.L52)/2
 816 0238 5805     		.2byte	(.L176-.L52)/2
 817 023a 5805     		.2byte	(.L176-.L52)/2
 818 023c 5805     		.2byte	(.L176-.L52)/2
 819 023e 5805     		.2byte	(.L176-.L52)/2
 820 0240 5805     		.2byte	(.L176-.L52)/2
 821 0242 5805     		.2byte	(.L176-.L52)/2
 822 0244 5805     		.2byte	(.L176-.L52)/2
 823 0246 5805     		.2byte	(.L176-.L52)/2
 824 0248 5805     		.2byte	(.L176-.L52)/2
 825 024a 5805     		.2byte	(.L176-.L52)/2
 826 024c D904     		.2byte	(.L55-.L52)/2
 827 024e 5805     		.2byte	(.L176-.L52)/2
 828 0250 5805     		.2byte	(.L176-.L52)/2
 829 0252 E904     		.2byte	(.L54-.L52)/2
 830 0254 FC04     		.2byte	(.L53-.L52)/2
 831 0256 0F05     		.2byte	(.L51-.L52)/2
 832              	.LVL65:
 833              		.p2align 1
 834              	.L199:
 676:boards/TMC5062_eval.c **** 
 835              		.loc 1 676 1 view .LVU166
 836 0258 1D2A     		cmp	r2, #29
 837 025a 00F21085 		bhi	.L177
 838 025e DFE812F0 		tbh	[pc, r2, lsl #1]
 839              	.LVL66:
 840              	.L77:
 841 0262 1E00     		.2byte	(.L102-.L77)/2
 842 0264 2F00     		.2byte	(.L101-.L77)/2
 843 0266 4000     		.2byte	(.L100-.L77)/2
 844 0268 5400     		.2byte	(.L99-.L77)/2
 845 026a 6700     		.2byte	(.L98-.L77)/2
 846 026c 8A00     		.2byte	(.L97-.L77)/2
 847 026e 9B00     		.2byte	(.L96-.L77)/2
 848 0270 B300     		.2byte	(.L95-.L77)/2
 849 0272 C900     		.2byte	(.L94-.L77)/2
 850 0274 0E05     		.2byte	(.L177-.L77)/2
 851 0276 D900     		.2byte	(.L93-.L77)/2
 852 0278 EB00     		.2byte	(.L92-.L77)/2
 853 027a FD00     		.2byte	(.L91-.L77)/2
 854 027c 1301     		.2byte	(.L90-.L77)/2
 855 027e 2901     		.2byte	(.L89-.L77)/2
 856 0280 3A01     		.2byte	(.L88-.L77)/2
 857 0282 4B01     		.2byte	(.L87-.L77)/2
 858 0284 5C01     		.2byte	(.L86-.L77)/2
 859 0286 6D01     		.2byte	(.L85-.L77)/2
 860 0288 7E01     		.2byte	(.L84-.L77)/2
 861 028a 8F01     		.2byte	(.L83-.L77)/2
 862 028c A001     		.2byte	(.L82-.L77)/2
 863 028e B101     		.2byte	(.L81-.L77)/2
 864 0290 C501     		.2byte	(.L80-.L77)/2
 865 0292 D601     		.2byte	(.L79-.L77)/2
 866 0294 0E05     		.2byte	(.L177-.L77)/2
 867 0296 0E05     		.2byte	(.L177-.L77)/2
 868 0298 0E05     		.2byte	(.L177-.L77)/2
 869 029a E701     		.2byte	(.L78-.L77)/2
 870 029c FE01     		.2byte	(.L76-.L77)/2
 871              		.p2align 1
 872              	.L102:
 179:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XTARGET(motor));
 873              		.loc 1 179 3 is_stmt 1 view .LVU167
 874 029e 2021     		movs	r1, #32
 875              	.LVL67:
 179:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XTARGET(motor));
 876              		.loc 1 179 3 is_stmt 0 view .LVU168
 877 02a0 A940     		lsls	r1, r1, r5
 878 02a2 41F00D01 		orr	r1, r1, #13
 879 02a6 C9B2     		uxtb	r1, r1
 179:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XTARGET(motor));
 880              		.loc 1 179 5 view .LVU169
 881 02a8 20B9     		cbnz	r0, .L104
 180:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 882              		.loc 1 180 4 is_stmt 1 view .LVU170
 180:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 883              		.loc 1 180 13 is_stmt 0 view .LVU171
 884 02aa 2846     		mov	r0, r5
 885              	.LVL68:
 180:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 886              		.loc 1 180 13 view .LVU172
 887 02ac FFF7C2FE 		bl	readInt
 888              	.LVL69:
 180:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 889              		.loc 1 180 11 view .LVU173
 890 02b0 3060     		str	r0, [r6]
 891 02b2 7FE7     		b	.L47
 892              	.LVL70:
 893              	.L104:
 181:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XTARGET(motor), *value);
 894              		.loc 1 181 10 is_stmt 1 view .LVU174
 182:boards/TMC5062_eval.c **** 		}
 895              		.loc 1 182 4 view .LVU175
 896 02b4 3268     		ldr	r2, [r6]
 897              	.LVL71:
 182:boards/TMC5062_eval.c **** 		}
 898              		.loc 1 182 4 is_stmt 0 view .LVU176
 899 02b6 2846     		mov	r0, r5
 900              	.LVL72:
 182:boards/TMC5062_eval.c **** 		}
 901              		.loc 1 182 4 view .LVU177
 902 02b8 FFF7D8FE 		bl	writeInt
 903              	.LVL73:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 904              		.loc 1 169 11 view .LVU178
 905 02bc 0024     		movs	r4, #0
 906 02be 79E7     		b	.L47
 907              	.LVL74:
 908              	.L101:
 187:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XACTUAL(motor));
 909              		.loc 1 187 3 is_stmt 1 view .LVU179
 910 02c0 2021     		movs	r1, #32
 911              	.LVL75:
 187:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XACTUAL(motor));
 912              		.loc 1 187 3 is_stmt 0 view .LVU180
 913 02c2 A940     		lsls	r1, r1, r5
 914 02c4 41F00101 		orr	r1, r1, #1
 915 02c8 C9B2     		uxtb	r1, r1
 187:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XACTUAL(motor));
 916              		.loc 1 187 5 view .LVU181
 917 02ca 20B9     		cbnz	r0, .L105
 188:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 918              		.loc 1 188 4 is_stmt 1 view .LVU182
 188:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 919              		.loc 1 188 13 is_stmt 0 view .LVU183
 920 02cc 2846     		mov	r0, r5
 921              	.LVL76:
 188:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 922              		.loc 1 188 13 view .LVU184
 923 02ce FFF7B1FE 		bl	readInt
 924              	.LVL77:
 188:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 925              		.loc 1 188 11 view .LVU185
 926 02d2 3060     		str	r0, [r6]
 927 02d4 6EE7     		b	.L47
 928              	.LVL78:
 929              	.L105:
 189:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XACTUAL(motor), *value);
 930              		.loc 1 189 10 is_stmt 1 view .LVU186
 190:boards/TMC5062_eval.c **** 		}
 931              		.loc 1 190 4 view .LVU187
 932 02d6 3268     		ldr	r2, [r6]
 933              	.LVL79:
 190:boards/TMC5062_eval.c **** 		}
 934              		.loc 1 190 4 is_stmt 0 view .LVU188
 935 02d8 2846     		mov	r0, r5
 936              	.LVL80:
 190:boards/TMC5062_eval.c **** 		}
 937              		.loc 1 190 4 view .LVU189
 938 02da FFF7C7FE 		bl	writeInt
 939              	.LVL81:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 940              		.loc 1 169 11 view .LVU190
 941 02de 0024     		movs	r4, #0
 942 02e0 68E7     		b	.L47
 943              	.LVL82:
 944              	.L100:
 195:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VMAX(motor));
 945              		.loc 1 195 3 is_stmt 1 view .LVU191
 946 02e2 2021     		movs	r1, #32
 947              	.LVL83:
 195:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VMAX(motor));
 948              		.loc 1 195 3 is_stmt 0 view .LVU192
 949 02e4 A940     		lsls	r1, r1, r5
 950 02e6 41F00701 		orr	r1, r1, #7
 951 02ea C9B2     		uxtb	r1, r1
 195:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VMAX(motor));
 952              		.loc 1 195 5 view .LVU193
 953 02ec 20B9     		cbnz	r0, .L106
 196:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 954              		.loc 1 196 4 is_stmt 1 view .LVU194
 196:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 955              		.loc 1 196 13 is_stmt 0 view .LVU195
 956 02ee 2846     		mov	r0, r5
 957              	.LVL84:
 196:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 958              		.loc 1 196 13 view .LVU196
 959 02f0 FFF7A0FE 		bl	readInt
 960              	.LVL85:
 196:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 961              		.loc 1 196 11 view .LVU197
 962 02f4 3060     		str	r0, [r6]
 963 02f6 5DE7     		b	.L47
 964              	.LVL86:
 965              	.L106:
 197:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 966              		.loc 1 197 10 is_stmt 1 view .LVU198
 198:boards/TMC5062_eval.c **** 		}
 967              		.loc 1 198 4 view .LVU199
 968 02f8 3268     		ldr	r2, [r6]
 969              	.LVL87:
 198:boards/TMC5062_eval.c **** 		}
 970              		.loc 1 198 4 is_stmt 0 view .LVU200
 971 02fa 002A     		cmp	r2, #0
 972 02fc B8BF     		it	lt
 973 02fe 5242     		rsblt	r2, r2, #0
 974 0300 2846     		mov	r0, r5
 975              	.LVL88:
 198:boards/TMC5062_eval.c **** 		}
 976              		.loc 1 198 4 view .LVU201
 977 0302 FFF7B3FE 		bl	writeInt
 978              	.LVL89:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 979              		.loc 1 169 11 view .LVU202
 980 0306 0024     		movs	r4, #0
 981 0308 54E7     		b	.L47
 982              	.LVL90:
 983              	.L99:
 204:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VACTUAL(motor));
 984              		.loc 1 204 3 is_stmt 1 view .LVU203
 204:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VACTUAL(motor));
 985              		.loc 1 204 5 is_stmt 0 view .LVU204
 986 030a 0028     		cmp	r0, #0
 987 030c 40F0BA84 		bne	.L178
 205:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 988              		.loc 1 205 4 is_stmt 1 view .LVU205
 205:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 989              		.loc 1 205 28 is_stmt 0 view .LVU206
 990 0310 2021     		movs	r1, #32
 991              	.LVL91:
 205:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 992              		.loc 1 205 28 view .LVU207
 993 0312 A940     		lsls	r1, r1, r5
 994 0314 41F00201 		orr	r1, r1, #2
 205:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 995              		.loc 1 205 13 view .LVU208
 996 0318 C9B2     		uxtb	r1, r1
 997 031a 2846     		mov	r0, r5
 998              	.LVL92:
 205:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 999              		.loc 1 205 13 view .LVU209
 1000 031c FFF78AFE 		bl	readInt
 1001              	.LVL93:
 206:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1002              		.loc 1 206 4 is_stmt 1 view .LVU210
 206:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1003              		.loc 1 206 13 is_stmt 0 view .LVU211
 1004 0320 10F40003 		ands	r3, r0, #8388608
 1005 0324 18BF     		it	ne
 1006 0326 4FF07F43 		movne	r3, #-16777216
 1007 032a 1843     		orrs	r0, r0, r3
 206:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1008              		.loc 1 206 11 view .LVU212
 1009 032c 3060     		str	r0, [r6]
 1010 032e 41E7     		b	.L47
 1011              	.LVL94:
 1012              	.L98:
 213:boards/TMC5062_eval.c **** 			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
 1013              		.loc 1 213 3 is_stmt 1 view .LVU213
 1014 0330 AD4B     		ldr	r3, .L201
 1015 0332 2021     		movs	r1, #32
 1016              	.LVL95:
 213:boards/TMC5062_eval.c **** 			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
 1017              		.loc 1 213 3 is_stmt 0 view .LVU214
 1018 0334 A940     		lsls	r1, r1, r5
 1019 0336 D3F8AC32 		ldr	r3, [r3, #684]
 1020 033a 41F00707 		orr	r7, r1, #7
 1021 033e BA00     		lsls	r2, r7, #2
 1022              	.LVL96:
 214:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1023              		.loc 1 214 43 view .LVU215
 1024 0340 1344     		add	r3, r3, r2
 213:boards/TMC5062_eval.c **** 			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
 1025              		.loc 1 213 5 view .LVU216
 1026 0342 10B9     		cbnz	r0, .L108
 214:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1027              		.loc 1 214 4 is_stmt 1 view .LVU217
 214:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1028              		.loc 1 214 43 is_stmt 0 view .LVU218
 1029 0344 5B68     		ldr	r3, [r3, #4]
 214:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1030              		.loc 1 214 11 view .LVU219
 1031 0346 3360     		str	r3, [r6]
 1032 0348 34E7     		b	.L47
 1033              	.L108:
 215:boards/TMC5062_eval.c **** 			TMC5062_config->shadowRegister[TMC5062_VMAX(motor)] = abs(*value);
 1034              		.loc 1 215 10 is_stmt 1 view .LVU220
 216:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_RAMPMODE(motor)) == TMC5062_MODE_POSITION)
 1035              		.loc 1 216 4 view .LVU221
 216:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_RAMPMODE(motor)) == TMC5062_MODE_POSITION)
 1036              		.loc 1 216 58 is_stmt 0 view .LVU222
 1037 034a 3268     		ldr	r2, [r6]
 1038 034c 002A     		cmp	r2, #0
 1039 034e B8BF     		it	lt
 1040 0350 5242     		rsblt	r2, r2, #0
 216:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_RAMPMODE(motor)) == TMC5062_MODE_POSITION)
 1041              		.loc 1 216 56 view .LVU223
 1042 0352 5A60     		str	r2, [r3, #4]
 217:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 1043              		.loc 1 217 4 is_stmt 1 view .LVU224
 217:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 1044              		.loc 1 217 7 is_stmt 0 view .LVU225
 1045 0354 C9B2     		uxtb	r1, r1
 1046 0356 2846     		mov	r0, r5
 1047              	.LVL97:
 217:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 1048              		.loc 1 217 7 view .LVU226
 1049 0358 FFF76CFE 		bl	readInt
 1050              	.LVL98:
 217:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
 1051              		.loc 1 217 6 view .LVU227
 1052 035c 0446     		mov	r4, r0
 1053 035e 08B1     		cbz	r0, .L109
 1054              	.L142:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1055              		.loc 1 169 11 view .LVU228
 1056 0360 0024     		movs	r4, #0
 1057 0362 27E7     		b	.L47
 1058              	.L109:
 218:boards/TMC5062_eval.c **** 		}
 1059              		.loc 1 218 5 is_stmt 1 view .LVU229
 1060 0364 3268     		ldr	r2, [r6]
 1061 0366 002A     		cmp	r2, #0
 1062 0368 B8BF     		it	lt
 1063 036a 5242     		rsblt	r2, r2, #0
 1064 036c F9B2     		uxtb	r1, r7
 1065 036e 2846     		mov	r0, r5
 1066 0370 FFF77CFE 		bl	writeInt
 1067              	.LVL99:
 1068 0374 1EE7     		b	.L47
 1069              	.LVL100:
 1070              	.L97:
 223:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_AMAX(motor));
 1071              		.loc 1 223 3 view .LVU230
 1072 0376 2021     		movs	r1, #32
 1073              	.LVL101:
 223:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_AMAX(motor));
 1074              		.loc 1 223 3 is_stmt 0 view .LVU231
 1075 0378 A940     		lsls	r1, r1, r5
 1076 037a 41F00601 		orr	r1, r1, #6
 1077 037e C9B2     		uxtb	r1, r1
 223:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_AMAX(motor));
 1078              		.loc 1 223 5 view .LVU232
 1079 0380 20B9     		cbnz	r0, .L110
 224:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1080              		.loc 1 224 4 is_stmt 1 view .LVU233
 224:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1081              		.loc 1 224 13 is_stmt 0 view .LVU234
 1082 0382 2846     		mov	r0, r5
 1083              	.LVL102:
 224:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1084              		.loc 1 224 13 view .LVU235
 1085 0384 FFF756FE 		bl	readInt
 1086              	.LVL103:
 224:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1087              		.loc 1 224 11 view .LVU236
 1088 0388 3060     		str	r0, [r6]
 1089 038a 13E7     		b	.L47
 1090              	.LVL104:
 1091              	.L110:
 225:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_AMAX(motor), *value);
 1092              		.loc 1 225 10 is_stmt 1 view .LVU237
 226:boards/TMC5062_eval.c **** 		}
 1093              		.loc 1 226 4 view .LVU238
 1094 038c 3268     		ldr	r2, [r6]
 1095              	.LVL105:
 226:boards/TMC5062_eval.c **** 		}
 1096              		.loc 1 226 4 is_stmt 0 view .LVU239
 1097 038e 2846     		mov	r0, r5
 1098              	.LVL106:
 226:boards/TMC5062_eval.c **** 		}
 1099              		.loc 1 226 4 view .LVU240
 1100 0390 FFF76CFE 		bl	writeInt
 1101              	.LVL107:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1102              		.loc 1 169 11 view .LVU241
 1103 0394 0024     		movs	r4, #0
 1104 0396 0DE7     		b	.L47
 1105              	.LVL108:
 1106              	.L96:
 231:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT);
 1107              		.loc 1 231 3 is_stmt 1 view .LVU242
 1108 0398 2021     		movs	r1, #32
 1109              	.LVL109:
 231:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT);
 1110              		.loc 1 231 3 is_stmt 0 view .LVU243
 1111 039a A940     		lsls	r1, r1, r5
 1112 039c 41F01001 		orr	r1, r1, #16
 1113 03a0 C9B2     		uxtb	r1, r1
 231:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT);
 1114              		.loc 1 231 5 view .LVU244
 1115 03a2 38B9     		cbnz	r0, .L111
 232:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1116              		.loc 1 232 4 is_stmt 1 view .LVU245
 232:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1117              		.loc 1 232 13 is_stmt 0 view .LVU246
 1118 03a4 0823     		movs	r3, #8
 1119 03a6 4FF4F852 		mov	r2, #7936
 1120              	.LVL110:
 232:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1121              		.loc 1 232 13 view .LVU247
 1122 03aa 2846     		mov	r0, r5
 1123              	.LVL111:
 232:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1124              		.loc 1 232 13 view .LVU248
 1125 03ac FFF751FE 		bl	readField
 1126              	.LVL112:
 232:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1127              		.loc 1 232 11 view .LVU249
 1128 03b0 3060     		str	r0, [r6]
 1129 03b2 FFE6     		b	.L47
 1130              	.LVL113:
 1131              	.L111:
 233:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT, *value);
 1132              		.loc 1 233 10 is_stmt 1 view .LVU250
 234:boards/TMC5062_eval.c **** 		}
 1133              		.loc 1 234 4 view .LVU251
 1134 03b4 3368     		ldr	r3, [r6]
 1135 03b6 0093     		str	r3, [sp]
 1136 03b8 4FF4F852 		mov	r2, #7936
 1137              	.LVL114:
 234:boards/TMC5062_eval.c **** 		}
 1138              		.loc 1 234 4 is_stmt 0 view .LVU252
 1139 03bc 0823     		movs	r3, #8
 1140 03be 2846     		mov	r0, r5
 1141              	.LVL115:
 234:boards/TMC5062_eval.c **** 		}
 1142              		.loc 1 234 4 view .LVU253
 1143 03c0 FFF7CBFE 		bl	writeField
 1144              	.LVL116:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1145              		.loc 1 169 11 view .LVU254
 1146 03c4 0024     		movs	r4, #0
 1147 03c6 F5E6     		b	.L47
 1148              	.LVL117:
 1149              	.L95:
 239:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT);
 1150              		.loc 1 239 3 is_stmt 1 view .LVU255
 1151 03c8 2021     		movs	r1, #32
 1152              	.LVL118:
 239:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT);
 1153              		.loc 1 239 3 is_stmt 0 view .LVU256
 1154 03ca A940     		lsls	r1, r1, r5
 1155 03cc 41F01001 		orr	r1, r1, #16
 1156 03d0 C9B2     		uxtb	r1, r1
 239:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT);
 1157              		.loc 1 239 5 view .LVU257
 1158 03d2 30B9     		cbnz	r0, .L112
 240:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1159              		.loc 1 240 4 is_stmt 1 view .LVU258
 240:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1160              		.loc 1 240 13 is_stmt 0 view .LVU259
 1161 03d4 0346     		mov	r3, r0
 1162 03d6 1F22     		movs	r2, #31
 1163              	.LVL119:
 240:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1164              		.loc 1 240 13 view .LVU260
 1165 03d8 2846     		mov	r0, r5
 1166              	.LVL120:
 240:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1167              		.loc 1 240 13 view .LVU261
 1168 03da FFF73AFE 		bl	readField
 1169              	.LVL121:
 240:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1170              		.loc 1 240 11 view .LVU262
 1171 03de 3060     		str	r0, [r6]
 1172 03e0 E8E6     		b	.L47
 1173              	.LVL122:
 1174              	.L112:
 241:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT, *value);
 1175              		.loc 1 241 10 is_stmt 1 view .LVU263
 242:boards/TMC5062_eval.c **** 		}
 1176              		.loc 1 242 4 view .LVU264
 1177 03e2 3368     		ldr	r3, [r6]
 1178 03e4 0093     		str	r3, [sp]
 1179 03e6 1F22     		movs	r2, #31
 1180              	.LVL123:
 242:boards/TMC5062_eval.c **** 		}
 1181              		.loc 1 242 4 is_stmt 0 view .LVU265
 1182 03e8 0023     		movs	r3, #0
 1183 03ea 2846     		mov	r0, r5
 1184              	.LVL124:
 242:boards/TMC5062_eval.c **** 		}
 1185              		.loc 1 242 4 view .LVU266
 1186 03ec FFF7B5FE 		bl	writeField
 1187              	.LVL125:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1188              		.loc 1 169 11 view .LVU267
 1189 03f0 0024     		movs	r4, #0
 1190 03f2 DFE6     		b	.L47
 1191              	.LVL126:
 1192              	.L94:
 247:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_POSITION_REACHED_MASK, TMC5062_POSITI
 1193              		.loc 1 247 3 is_stmt 1 view .LVU268
 247:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_POSITION_REACHED_MASK, TMC5062_POSITI
 1194              		.loc 1 247 5 is_stmt 0 view .LVU269
 1195 03f4 0028     		cmp	r0, #0
 1196 03f6 40F04884 		bne	.L180
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1197              		.loc 1 248 4 is_stmt 1 view .LVU270
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1198              		.loc 1 248 30 is_stmt 0 view .LVU271
 1199 03fa 2021     		movs	r1, #32
 1200              	.LVL127:
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1201              		.loc 1 248 30 view .LVU272
 1202 03fc A940     		lsls	r1, r1, r5
 1203 03fe 41F01501 		orr	r1, r1, #21
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1204              		.loc 1 248 13 view .LVU273
 1205 0402 0923     		movs	r3, #9
 1206 0404 4FF40072 		mov	r2, #512
 1207              	.LVL128:
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1208              		.loc 1 248 13 view .LVU274
 1209 0408 C9B2     		uxtb	r1, r1
 1210 040a 2846     		mov	r0, r5
 1211              	.LVL129:
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1212              		.loc 1 248 13 view .LVU275
 1213 040c FFF721FE 		bl	readField
 1214              	.LVL130:
 248:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1215              		.loc 1 248 11 view .LVU276
 1216 0410 3060     		str	r0, [r6]
 1217 0412 CFE6     		b	.L47
 1218              	.LVL131:
 1219              	.L93:
 255:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_R_MASK, TMC5062_STATUS_S
 1220              		.loc 1 255 3 is_stmt 1 view .LVU277
 255:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_R_MASK, TMC5062_STATUS_S
 1221              		.loc 1 255 5 is_stmt 0 view .LVU278
 1222 0414 0028     		cmp	r0, #0
 1223 0416 40F03B84 		bne	.L181
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1224              		.loc 1 256 4 is_stmt 1 view .LVU279
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1225              		.loc 1 256 31 is_stmt 0 view .LVU280
 1226 041a 2021     		movs	r1, #32
 1227              	.LVL132:
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1228              		.loc 1 256 31 view .LVU281
 1229 041c A940     		lsls	r1, r1, r5
 1230 041e 41F01501 		orr	r1, r1, #21
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1231              		.loc 1 256 14 view .LVU282
 1232 0422 0123     		movs	r3, #1
 1233 0424 0222     		movs	r2, #2
 1234              	.LVL133:
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1235              		.loc 1 256 14 view .LVU283
 1236 0426 C9B2     		uxtb	r1, r1
 1237 0428 2846     		mov	r0, r5
 1238              	.LVL134:
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1239              		.loc 1 256 14 view .LVU284
 1240 042a FFF712FE 		bl	readField
 1241              	.LVL135:
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1242              		.loc 1 256 13 view .LVU285
 1243 042e B0FA80F0 		clz	r0, r0
 1244 0432 4009     		lsrs	r0, r0, #5
 256:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1245              		.loc 1 256 11 view .LVU286
 1246 0434 3060     		str	r0, [r6]
 1247 0436 BDE6     		b	.L47
 1248              	.LVL136:
 1249              	.L92:
 263:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_L_MASK, TMC5062_STATUS_S
 1250              		.loc 1 263 3 is_stmt 1 view .LVU287
 263:boards/TMC5062_eval.c **** 			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_L_MASK, TMC5062_STATUS_S
 1251              		.loc 1 263 5 is_stmt 0 view .LVU288
 1252 0438 0028     		cmp	r0, #0
 1253 043a 40F02C84 		bne	.L182
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1254              		.loc 1 264 4 is_stmt 1 view .LVU289
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1255              		.loc 1 264 31 is_stmt 0 view .LVU290
 1256 043e 2021     		movs	r1, #32
 1257              	.LVL137:
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1258              		.loc 1 264 31 view .LVU291
 1259 0440 A940     		lsls	r1, r1, r5
 1260 0442 41F01501 		orr	r1, r1, #21
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1261              		.loc 1 264 14 view .LVU292
 1262 0446 0346     		mov	r3, r0
 1263 0448 0122     		movs	r2, #1
 1264              	.LVL138:
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1265              		.loc 1 264 14 view .LVU293
 1266 044a C9B2     		uxtb	r1, r1
 1267 044c 2846     		mov	r0, r5
 1268              	.LVL139:
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1269              		.loc 1 264 14 view .LVU294
 1270 044e FFF700FE 		bl	readField
 1271              	.LVL140:
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1272              		.loc 1 264 13 view .LVU295
 1273 0452 B0FA80F0 		clz	r0, r0
 1274 0456 4009     		lsrs	r0, r0, #5
 264:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1275              		.loc 1 264 11 view .LVU296
 1276 0458 3060     		str	r0, [r6]
 1277 045a ABE6     		b	.L47
 1278              	.LVL141:
 1279              	.L91:
 271:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENAB
 1280              		.loc 1 271 3 is_stmt 1 view .LVU297
 1281 045c 2021     		movs	r1, #32
 1282              	.LVL142:
 271:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENAB
 1283              		.loc 1 271 3 is_stmt 0 view .LVU298
 1284 045e A940     		lsls	r1, r1, r5
 1285 0460 41F01401 		orr	r1, r1, #20
 1286 0464 C9B2     		uxtb	r1, r1
 271:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENAB
 1287              		.loc 1 271 5 view .LVU299
 1288 0466 30B9     		cbnz	r0, .L113
 272:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1289              		.loc 1 272 4 is_stmt 1 view .LVU300
 272:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1290              		.loc 1 272 13 is_stmt 0 view .LVU301
 1291 0468 0123     		movs	r3, #1
 1292 046a 0222     		movs	r2, #2
 1293              	.LVL143:
 272:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1294              		.loc 1 272 13 view .LVU302
 1295 046c 2846     		mov	r0, r5
 1296              	.LVL144:
 272:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1297              		.loc 1 272 13 view .LVU303
 1298 046e FFF7F0FD 		bl	readField
 1299              	.LVL145:
 272:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1300              		.loc 1 272 11 view .LVU304
 1301 0472 3060     		str	r0, [r6]
 1302 0474 9EE6     		b	.L47
 1303              	.LVL146:
 1304              	.L113:
 273:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENABLE_SHIFT
 1305              		.loc 1 273 10 is_stmt 1 view .LVU305
 274:boards/TMC5062_eval.c **** 		}
 1306              		.loc 1 274 4 view .LVU306
 1307 0476 3368     		ldr	r3, [r6]
 1308 0478 0093     		str	r3, [sp]
 1309 047a 0222     		movs	r2, #2
 1310              	.LVL147:
 274:boards/TMC5062_eval.c **** 		}
 1311              		.loc 1 274 4 is_stmt 0 view .LVU307
 1312 047c 0123     		movs	r3, #1
 1313 047e 2846     		mov	r0, r5
 1314              	.LVL148:
 274:boards/TMC5062_eval.c **** 		}
 1315              		.loc 1 274 4 view .LVU308
 1316 0480 FFF76BFE 		bl	writeField
 1317              	.LVL149:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1318              		.loc 1 169 11 view .LVU309
 1319 0484 0024     		movs	r4, #0
 1320 0486 95E6     		b	.L47
 1321              	.LVL150:
 1322              	.L90:
 279:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENAB
 1323              		.loc 1 279 3 is_stmt 1 view .LVU310
 1324 0488 2021     		movs	r1, #32
 1325              	.LVL151:
 279:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENAB
 1326              		.loc 1 279 3 is_stmt 0 view .LVU311
 1327 048a A940     		lsls	r1, r1, r5
 1328 048c 41F01401 		orr	r1, r1, #20
 1329 0490 C9B2     		uxtb	r1, r1
 279:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENAB
 1330              		.loc 1 279 5 view .LVU312
 1331 0492 30B9     		cbnz	r0, .L114
 280:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1332              		.loc 1 280 4 is_stmt 1 view .LVU313
 280:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1333              		.loc 1 280 13 is_stmt 0 view .LVU314
 1334 0494 0346     		mov	r3, r0
 1335 0496 0122     		movs	r2, #1
 1336              	.LVL152:
 280:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1337              		.loc 1 280 13 view .LVU315
 1338 0498 2846     		mov	r0, r5
 1339              	.LVL153:
 280:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1340              		.loc 1 280 13 view .LVU316
 1341 049a FFF7DAFD 		bl	readField
 1342              	.LVL154:
 280:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1343              		.loc 1 280 11 view .LVU317
 1344 049e 3060     		str	r0, [r6]
 1345 04a0 88E6     		b	.L47
 1346              	.LVL155:
 1347              	.L114:
 281:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENABLE_SHIFT
 1348              		.loc 1 281 10 is_stmt 1 view .LVU318
 282:boards/TMC5062_eval.c **** 		}
 1349              		.loc 1 282 4 view .LVU319
 1350 04a2 3368     		ldr	r3, [r6]
 1351 04a4 0093     		str	r3, [sp]
 1352 04a6 0122     		movs	r2, #1
 1353              	.LVL156:
 282:boards/TMC5062_eval.c **** 		}
 1354              		.loc 1 282 4 is_stmt 0 view .LVU320
 1355 04a8 0023     		movs	r3, #0
 1356 04aa 2846     		mov	r0, r5
 1357              	.LVL157:
 282:boards/TMC5062_eval.c **** 		}
 1358              		.loc 1 282 4 view .LVU321
 1359 04ac FFF755FE 		bl	writeField
 1360              	.LVL158:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1361              		.loc 1 169 11 view .LVU322
 1362 04b0 0024     		movs	r4, #0
 1363 04b2 7FE6     		b	.L47
 1364              	.LVL159:
 1365              	.L89:
 287:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_SWMODE(motor));
 1366              		.loc 1 287 3 is_stmt 1 view .LVU323
 1367 04b4 2021     		movs	r1, #32
 1368              	.LVL160:
 287:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_SWMODE(motor));
 1369              		.loc 1 287 3 is_stmt 0 view .LVU324
 1370 04b6 A940     		lsls	r1, r1, r5
 1371 04b8 41F01401 		orr	r1, r1, #20
 1372 04bc C9B2     		uxtb	r1, r1
 287:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_SWMODE(motor));
 1373              		.loc 1 287 5 view .LVU325
 1374 04be 20B9     		cbnz	r0, .L115
 288:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1375              		.loc 1 288 4 is_stmt 1 view .LVU326
 288:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1376              		.loc 1 288 13 is_stmt 0 view .LVU327
 1377 04c0 2846     		mov	r0, r5
 1378              	.LVL161:
 288:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1379              		.loc 1 288 13 view .LVU328
 1380 04c2 FFF7B7FD 		bl	readInt
 1381              	.LVL162:
 288:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1382              		.loc 1 288 11 view .LVU329
 1383 04c6 3060     		str	r0, [r6]
 1384 04c8 74E6     		b	.L47
 1385              	.LVL163:
 1386              	.L115:
 289:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_SWMODE(motor), *value);
 1387              		.loc 1 289 10 is_stmt 1 view .LVU330
 290:boards/TMC5062_eval.c **** 		}
 1388              		.loc 1 290 4 view .LVU331
 1389 04ca 3268     		ldr	r2, [r6]
 1390              	.LVL164:
 290:boards/TMC5062_eval.c **** 		}
 1391              		.loc 1 290 4 is_stmt 0 view .LVU332
 1392 04cc 2846     		mov	r0, r5
 1393              	.LVL165:
 290:boards/TMC5062_eval.c **** 		}
 1394              		.loc 1 290 4 view .LVU333
 1395 04ce FFF7CDFD 		bl	writeInt
 1396              	.LVL166:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1397              		.loc 1 169 11 view .LVU334
 1398 04d2 0024     		movs	r4, #0
 1399 04d4 6EE6     		b	.L47
 1400              	.LVL167:
 1401              	.L88:
 295:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_A1(motor));
 1402              		.loc 1 295 3 is_stmt 1 view .LVU335
 1403 04d6 2021     		movs	r1, #32
 1404              	.LVL168:
 295:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_A1(motor));
 1405              		.loc 1 295 3 is_stmt 0 view .LVU336
 1406 04d8 A940     		lsls	r1, r1, r5
 1407 04da 41F00401 		orr	r1, r1, #4
 1408 04de C9B2     		uxtb	r1, r1
 295:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_A1(motor));
 1409              		.loc 1 295 5 view .LVU337
 1410 04e0 20B9     		cbnz	r0, .L116
 296:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1411              		.loc 1 296 4 is_stmt 1 view .LVU338
 296:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1412              		.loc 1 296 13 is_stmt 0 view .LVU339
 1413 04e2 2846     		mov	r0, r5
 1414              	.LVL169:
 296:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1415              		.loc 1 296 13 view .LVU340
 1416 04e4 FFF7A6FD 		bl	readInt
 1417              	.LVL170:
 296:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1418              		.loc 1 296 11 view .LVU341
 1419 04e8 3060     		str	r0, [r6]
 1420 04ea 63E6     		b	.L47
 1421              	.LVL171:
 1422              	.L116:
 297:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_A1(motor), *value);
 1423              		.loc 1 297 10 is_stmt 1 view .LVU342
 298:boards/TMC5062_eval.c **** 		}
 1424              		.loc 1 298 4 view .LVU343
 1425 04ec 3268     		ldr	r2, [r6]
 1426              	.LVL172:
 298:boards/TMC5062_eval.c **** 		}
 1427              		.loc 1 298 4 is_stmt 0 view .LVU344
 1428 04ee 2846     		mov	r0, r5
 1429              	.LVL173:
 298:boards/TMC5062_eval.c **** 		}
 1430              		.loc 1 298 4 view .LVU345
 1431 04f0 FFF7BCFD 		bl	writeInt
 1432              	.LVL174:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1433              		.loc 1 169 11 view .LVU346
 1434 04f4 0024     		movs	r4, #0
 1435 04f6 5DE6     		b	.L47
 1436              	.LVL175:
 1437              	.L87:
 303:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_V1(motor));
 1438              		.loc 1 303 3 is_stmt 1 view .LVU347
 1439 04f8 2021     		movs	r1, #32
 1440              	.LVL176:
 303:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_V1(motor));
 1441              		.loc 1 303 3 is_stmt 0 view .LVU348
 1442 04fa A940     		lsls	r1, r1, r5
 1443 04fc 41F00501 		orr	r1, r1, #5
 1444 0500 C9B2     		uxtb	r1, r1
 303:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_V1(motor));
 1445              		.loc 1 303 5 view .LVU349
 1446 0502 20B9     		cbnz	r0, .L117
 304:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1447              		.loc 1 304 4 is_stmt 1 view .LVU350
 304:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1448              		.loc 1 304 13 is_stmt 0 view .LVU351
 1449 0504 2846     		mov	r0, r5
 1450              	.LVL177:
 304:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1451              		.loc 1 304 13 view .LVU352
 1452 0506 FFF795FD 		bl	readInt
 1453              	.LVL178:
 304:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1454              		.loc 1 304 11 view .LVU353
 1455 050a 3060     		str	r0, [r6]
 1456 050c 52E6     		b	.L47
 1457              	.LVL179:
 1458              	.L117:
 305:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_V1(motor), *value);
 1459              		.loc 1 305 10 is_stmt 1 view .LVU354
 306:boards/TMC5062_eval.c **** 		}
 1460              		.loc 1 306 4 view .LVU355
 1461 050e 3268     		ldr	r2, [r6]
 1462              	.LVL180:
 306:boards/TMC5062_eval.c **** 		}
 1463              		.loc 1 306 4 is_stmt 0 view .LVU356
 1464 0510 2846     		mov	r0, r5
 1465              	.LVL181:
 306:boards/TMC5062_eval.c **** 		}
 1466              		.loc 1 306 4 view .LVU357
 1467 0512 FFF7ABFD 		bl	writeInt
 1468              	.LVL182:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1469              		.loc 1 169 11 view .LVU358
 1470 0516 0024     		movs	r4, #0
 1471 0518 4CE6     		b	.L47
 1472              	.LVL183:
 1473              	.L86:
 311:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_DMAX(motor));
 1474              		.loc 1 311 3 is_stmt 1 view .LVU359
 1475 051a 2021     		movs	r1, #32
 1476              	.LVL184:
 311:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_DMAX(motor));
 1477              		.loc 1 311 3 is_stmt 0 view .LVU360
 1478 051c A940     		lsls	r1, r1, r5
 1479 051e 41F00801 		orr	r1, r1, #8
 1480 0522 C9B2     		uxtb	r1, r1
 311:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_DMAX(motor));
 1481              		.loc 1 311 5 view .LVU361
 1482 0524 20B9     		cbnz	r0, .L118
 312:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1483              		.loc 1 312 4 is_stmt 1 view .LVU362
 312:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1484              		.loc 1 312 13 is_stmt 0 view .LVU363
 1485 0526 2846     		mov	r0, r5
 1486              	.LVL185:
 312:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1487              		.loc 1 312 13 view .LVU364
 1488 0528 FFF784FD 		bl	readInt
 1489              	.LVL186:
 312:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1490              		.loc 1 312 11 view .LVU365
 1491 052c 3060     		str	r0, [r6]
 1492 052e 41E6     		b	.L47
 1493              	.LVL187:
 1494              	.L118:
 313:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_DMAX(motor), *value);
 1495              		.loc 1 313 10 is_stmt 1 view .LVU366
 314:boards/TMC5062_eval.c **** 		}
 1496              		.loc 1 314 4 view .LVU367
 1497 0530 3268     		ldr	r2, [r6]
 1498              	.LVL188:
 314:boards/TMC5062_eval.c **** 		}
 1499              		.loc 1 314 4 is_stmt 0 view .LVU368
 1500 0532 2846     		mov	r0, r5
 1501              	.LVL189:
 314:boards/TMC5062_eval.c **** 		}
 1502              		.loc 1 314 4 view .LVU369
 1503 0534 FFF79AFD 		bl	writeInt
 1504              	.LVL190:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1505              		.loc 1 169 11 view .LVU370
 1506 0538 0024     		movs	r4, #0
 1507 053a 3BE6     		b	.L47
 1508              	.LVL191:
 1509              	.L85:
 319:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_D1(motor));
 1510              		.loc 1 319 3 is_stmt 1 view .LVU371
 1511 053c 2021     		movs	r1, #32
 1512              	.LVL192:
 319:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_D1(motor));
 1513              		.loc 1 319 3 is_stmt 0 view .LVU372
 1514 053e A940     		lsls	r1, r1, r5
 1515 0540 41F00A01 		orr	r1, r1, #10
 1516 0544 C9B2     		uxtb	r1, r1
 319:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_D1(motor));
 1517              		.loc 1 319 5 view .LVU373
 1518 0546 20B9     		cbnz	r0, .L119
 320:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1519              		.loc 1 320 4 is_stmt 1 view .LVU374
 320:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1520              		.loc 1 320 13 is_stmt 0 view .LVU375
 1521 0548 2846     		mov	r0, r5
 1522              	.LVL193:
 320:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1523              		.loc 1 320 13 view .LVU376
 1524 054a FFF773FD 		bl	readInt
 1525              	.LVL194:
 320:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1526              		.loc 1 320 11 view .LVU377
 1527 054e 3060     		str	r0, [r6]
 1528 0550 30E6     		b	.L47
 1529              	.LVL195:
 1530              	.L119:
 321:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_D1(motor), *value);
 1531              		.loc 1 321 10 is_stmt 1 view .LVU378
 322:boards/TMC5062_eval.c **** 		}
 1532              		.loc 1 322 4 view .LVU379
 1533 0552 3268     		ldr	r2, [r6]
 1534              	.LVL196:
 322:boards/TMC5062_eval.c **** 		}
 1535              		.loc 1 322 4 is_stmt 0 view .LVU380
 1536 0554 2846     		mov	r0, r5
 1537              	.LVL197:
 322:boards/TMC5062_eval.c **** 		}
 1538              		.loc 1 322 4 view .LVU381
 1539 0556 FFF789FD 		bl	writeInt
 1540              	.LVL198:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1541              		.loc 1 169 11 view .LVU382
 1542 055a 0024     		movs	r4, #0
 1543 055c 2AE6     		b	.L47
 1544              	.LVL199:
 1545              	.L84:
 327:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTART(motor));
 1546              		.loc 1 327 3 is_stmt 1 view .LVU383
 1547 055e 2021     		movs	r1, #32
 1548              	.LVL200:
 327:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTART(motor));
 1549              		.loc 1 327 3 is_stmt 0 view .LVU384
 1550 0560 A940     		lsls	r1, r1, r5
 1551 0562 41F00301 		orr	r1, r1, #3
 1552 0566 C9B2     		uxtb	r1, r1
 327:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTART(motor));
 1553              		.loc 1 327 5 view .LVU385
 1554 0568 20B9     		cbnz	r0, .L120
 328:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1555              		.loc 1 328 4 is_stmt 1 view .LVU386
 328:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1556              		.loc 1 328 13 is_stmt 0 view .LVU387
 1557 056a 2846     		mov	r0, r5
 1558              	.LVL201:
 328:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1559              		.loc 1 328 13 view .LVU388
 1560 056c FFF762FD 		bl	readInt
 1561              	.LVL202:
 328:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1562              		.loc 1 328 11 view .LVU389
 1563 0570 3060     		str	r0, [r6]
 1564 0572 1FE6     		b	.L47
 1565              	.LVL203:
 1566              	.L120:
 329:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VSTART(motor), *value);
 1567              		.loc 1 329 10 is_stmt 1 view .LVU390
 330:boards/TMC5062_eval.c **** 		}
 1568              		.loc 1 330 4 view .LVU391
 1569 0574 3268     		ldr	r2, [r6]
 1570              	.LVL204:
 330:boards/TMC5062_eval.c **** 		}
 1571              		.loc 1 330 4 is_stmt 0 view .LVU392
 1572 0576 2846     		mov	r0, r5
 1573              	.LVL205:
 330:boards/TMC5062_eval.c **** 		}
 1574              		.loc 1 330 4 view .LVU393
 1575 0578 FFF778FD 		bl	writeInt
 1576              	.LVL206:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1577              		.loc 1 169 11 view .LVU394
 1578 057c 0024     		movs	r4, #0
 1579 057e 19E6     		b	.L47
 1580              	.LVL207:
 1581              	.L83:
 335:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTOP(motor));
 1582              		.loc 1 335 3 is_stmt 1 view .LVU395
 1583 0580 2021     		movs	r1, #32
 1584              	.LVL208:
 335:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTOP(motor));
 1585              		.loc 1 335 3 is_stmt 0 view .LVU396
 1586 0582 A940     		lsls	r1, r1, r5
 1587 0584 41F00B01 		orr	r1, r1, #11
 1588 0588 C9B2     		uxtb	r1, r1
 335:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VSTOP(motor));
 1589              		.loc 1 335 5 view .LVU397
 1590 058a 20B9     		cbnz	r0, .L121
 336:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1591              		.loc 1 336 4 is_stmt 1 view .LVU398
 336:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1592              		.loc 1 336 13 is_stmt 0 view .LVU399
 1593 058c 2846     		mov	r0, r5
 1594              	.LVL209:
 336:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1595              		.loc 1 336 13 view .LVU400
 1596 058e FFF751FD 		bl	readInt
 1597              	.LVL210:
 336:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1598              		.loc 1 336 11 view .LVU401
 1599 0592 3060     		str	r0, [r6]
 1600 0594 0EE6     		b	.L47
 1601              	.LVL211:
 1602              	.L121:
 337:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VSTOP(motor), *value);
 1603              		.loc 1 337 10 is_stmt 1 view .LVU402
 338:boards/TMC5062_eval.c **** 		}
 1604              		.loc 1 338 4 view .LVU403
 1605 0596 3268     		ldr	r2, [r6]
 1606              	.LVL212:
 338:boards/TMC5062_eval.c **** 		}
 1607              		.loc 1 338 4 is_stmt 0 view .LVU404
 1608 0598 2846     		mov	r0, r5
 1609              	.LVL213:
 338:boards/TMC5062_eval.c **** 		}
 1610              		.loc 1 338 4 view .LVU405
 1611 059a FFF767FD 		bl	writeInt
 1612              	.LVL214:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1613              		.loc 1 169 11 view .LVU406
 1614 059e 0024     		movs	r4, #0
 1615 05a0 08E6     		b	.L47
 1616              	.LVL215:
 1617              	.L82:
 343:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_TZEROWAIT(motor));
 1618              		.loc 1 343 3 is_stmt 1 view .LVU407
 1619 05a2 2021     		movs	r1, #32
 1620              	.LVL216:
 343:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_TZEROWAIT(motor));
 1621              		.loc 1 343 3 is_stmt 0 view .LVU408
 1622 05a4 A940     		lsls	r1, r1, r5
 1623 05a6 41F00C01 		orr	r1, r1, #12
 1624 05aa C9B2     		uxtb	r1, r1
 343:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_TZEROWAIT(motor));
 1625              		.loc 1 343 5 view .LVU409
 1626 05ac 20B9     		cbnz	r0, .L122
 344:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1627              		.loc 1 344 4 is_stmt 1 view .LVU410
 344:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1628              		.loc 1 344 13 is_stmt 0 view .LVU411
 1629 05ae 2846     		mov	r0, r5
 1630              	.LVL217:
 344:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1631              		.loc 1 344 13 view .LVU412
 1632 05b0 FFF740FD 		bl	readInt
 1633              	.LVL218:
 344:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1634              		.loc 1 344 11 view .LVU413
 1635 05b4 3060     		str	r0, [r6]
 1636 05b6 FDE5     		b	.L47
 1637              	.LVL219:
 1638              	.L122:
 345:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_TZEROWAIT(motor), *value);
 1639              		.loc 1 345 10 is_stmt 1 view .LVU414
 346:boards/TMC5062_eval.c **** 		}
 1640              		.loc 1 346 4 view .LVU415
 1641 05b8 3268     		ldr	r2, [r6]
 1642              	.LVL220:
 346:boards/TMC5062_eval.c **** 		}
 1643              		.loc 1 346 4 is_stmt 0 view .LVU416
 1644 05ba 2846     		mov	r0, r5
 1645              	.LVL221:
 346:boards/TMC5062_eval.c **** 		}
 1646              		.loc 1 346 4 view .LVU417
 1647 05bc FFF756FD 		bl	writeInt
 1648              	.LVL222:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1649              		.loc 1 169 11 view .LVU418
 1650 05c0 0024     		movs	r4, #0
 1651 05c2 F7E5     		b	.L47
 1652              	.LVL223:
 1653              	.L81:
 351:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 1654              		.loc 1 351 3 is_stmt 1 view .LVU419
 1655 05c4 2021     		movs	r1, #32
 1656              	.LVL224:
 351:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 1657              		.loc 1 351 3 is_stmt 0 view .LVU420
 1658 05c6 A940     		lsls	r1, r1, r5
 1659 05c8 41F01101 		orr	r1, r1, #17
 1660 05cc C9B2     		uxtb	r1, r1
 351:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 1661              		.loc 1 351 5 view .LVU421
 1662 05ce 20B9     		cbnz	r0, .L123
 352:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1663              		.loc 1 352 4 is_stmt 1 view .LVU422
 352:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1664              		.loc 1 352 13 is_stmt 0 view .LVU423
 1665 05d0 2846     		mov	r0, r5
 1666              	.LVL225:
 352:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1667              		.loc 1 352 13 view .LVU424
 1668 05d2 FFF72FFD 		bl	readInt
 1669              	.LVL226:
 352:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1670              		.loc 1 352 11 view .LVU425
 1671 05d6 3060     		str	r0, [r6]
 1672 05d8 ECE5     		b	.L47
 1673              	.LVL227:
 1674              	.L123:
 353:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor), *value);
 1675              		.loc 1 353 10 is_stmt 1 view .LVU426
 354:boards/TMC5062_eval.c **** 		}
 1676              		.loc 1 354 4 view .LVU427
 1677 05da 3268     		ldr	r2, [r6]
 1678              	.LVL228:
 354:boards/TMC5062_eval.c **** 		}
 1679              		.loc 1 354 4 is_stmt 0 view .LVU428
 1680 05dc 2846     		mov	r0, r5
 1681              	.LVL229:
 354:boards/TMC5062_eval.c **** 		}
 1682              		.loc 1 354 4 view .LVU429
 1683 05de FFF745FD 		bl	writeInt
 1684              	.LVL230:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1685              		.loc 1 169 11 view .LVU430
 1686 05e2 0024     		movs	r4, #0
 1687 05e4 E6E5     		b	.L47
 1688              	.L202:
 1689 05e6 00BF     		.align	2
 1690              	.L201:
 1691 05e8 00000000 		.word	.LANCHOR0
 1692              	.LVL231:
 1693              	.L80:
 359:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VHIGH(motor));
 1694              		.loc 1 359 3 is_stmt 1 view .LVU431
 1695 05ec 2021     		movs	r1, #32
 1696              	.LVL232:
 359:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VHIGH(motor));
 1697              		.loc 1 359 3 is_stmt 0 view .LVU432
 1698 05ee A940     		lsls	r1, r1, r5
 1699 05f0 41F01201 		orr	r1, r1, #18
 1700 05f4 C9B2     		uxtb	r1, r1
 359:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VHIGH(motor));
 1701              		.loc 1 359 5 view .LVU433
 1702 05f6 20B9     		cbnz	r0, .L124
 360:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1703              		.loc 1 360 4 is_stmt 1 view .LVU434
 360:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1704              		.loc 1 360 13 is_stmt 0 view .LVU435
 1705 05f8 2846     		mov	r0, r5
 1706              	.LVL233:
 360:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1707              		.loc 1 360 13 view .LVU436
 1708 05fa FFF71BFD 		bl	readInt
 1709              	.LVL234:
 360:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1710              		.loc 1 360 11 view .LVU437
 1711 05fe 3060     		str	r0, [r6]
 1712 0600 D8E5     		b	.L47
 1713              	.LVL235:
 1714              	.L124:
 361:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VHIGH(motor), *value);
 1715              		.loc 1 361 10 is_stmt 1 view .LVU438
 362:boards/TMC5062_eval.c **** 		}
 1716              		.loc 1 362 4 view .LVU439
 1717 0602 3268     		ldr	r2, [r6]
 1718              	.LVL236:
 362:boards/TMC5062_eval.c **** 		}
 1719              		.loc 1 362 4 is_stmt 0 view .LVU440
 1720 0604 2846     		mov	r0, r5
 1721              	.LVL237:
 362:boards/TMC5062_eval.c **** 		}
 1722              		.loc 1 362 4 view .LVU441
 1723 0606 FFF731FD 		bl	writeInt
 1724              	.LVL238:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1725              		.loc 1 169 11 view .LVU442
 1726 060a 0024     		movs	r4, #0
 1727 060c D2E5     		b	.L47
 1728              	.LVL239:
 1729              	.L79:
 367:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VDCMIN(motor));
 1730              		.loc 1 367 3 is_stmt 1 view .LVU443
 1731 060e 2021     		movs	r1, #32
 1732              	.LVL240:
 367:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VDCMIN(motor));
 1733              		.loc 1 367 3 is_stmt 0 view .LVU444
 1734 0610 A940     		lsls	r1, r1, r5
 1735 0612 41F01301 		orr	r1, r1, #19
 1736 0616 C9B2     		uxtb	r1, r1
 367:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VDCMIN(motor));
 1737              		.loc 1 367 5 view .LVU445
 1738 0618 20B9     		cbnz	r0, .L125
 368:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1739              		.loc 1 368 4 is_stmt 1 view .LVU446
 368:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1740              		.loc 1 368 13 is_stmt 0 view .LVU447
 1741 061a 2846     		mov	r0, r5
 1742              	.LVL241:
 368:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1743              		.loc 1 368 13 view .LVU448
 1744 061c FFF70AFD 		bl	readInt
 1745              	.LVL242:
 368:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1746              		.loc 1 368 11 view .LVU449
 1747 0620 3060     		str	r0, [r6]
 1748 0622 C7E5     		b	.L47
 1749              	.LVL243:
 1750              	.L125:
 369:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VDCMIN(motor), *value);
 1751              		.loc 1 369 10 is_stmt 1 view .LVU450
 370:boards/TMC5062_eval.c **** 		}
 1752              		.loc 1 370 4 view .LVU451
 1753 0624 3268     		ldr	r2, [r6]
 1754              	.LVL244:
 370:boards/TMC5062_eval.c **** 		}
 1755              		.loc 1 370 4 is_stmt 0 view .LVU452
 1756 0626 2846     		mov	r0, r5
 1757              	.LVL245:
 370:boards/TMC5062_eval.c **** 		}
 1758              		.loc 1 370 4 view .LVU453
 1759 0628 FFF720FD 		bl	writeInt
 1760              	.LVL246:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1761              		.loc 1 169 11 view .LVU454
 1762 062c 0024     		movs	r4, #0
 1763 062e C1E5     		b	.L47
 1764              	.LVL247:
 1765              	.L78:
 375:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT);
 1766              		.loc 1 375 3 is_stmt 1 view .LVU455
 1767 0630 0901     		lsls	r1, r1, #4
 1768              	.LVL248:
 375:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT);
 1769              		.loc 1 375 3 is_stmt 0 view .LVU456
 1770 0632 41F06C01 		orr	r1, r1, #108
 1771 0636 C9B2     		uxtb	r1, r1
 375:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT);
 1772              		.loc 1 375 5 view .LVU457
 1773 0638 38B9     		cbnz	r0, .L126
 376:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1774              		.loc 1 376 4 is_stmt 1 view .LVU458
 376:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1775              		.loc 1 376 13 is_stmt 0 view .LVU459
 1776 063a 1223     		movs	r3, #18
 1777 063c 4FF48022 		mov	r2, #262144
 1778              	.LVL249:
 376:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1779              		.loc 1 376 13 view .LVU460
 1780 0640 2846     		mov	r0, r5
 1781              	.LVL250:
 376:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1782              		.loc 1 376 13 view .LVU461
 1783 0642 FFF706FD 		bl	readField
 1784              	.LVL251:
 376:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1785              		.loc 1 376 11 view .LVU462
 1786 0646 3060     		str	r0, [r6]
 1787 0648 B4E5     		b	.L47
 1788              	.LVL252:
 1789              	.L126:
 377:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT, *value);
 1790              		.loc 1 377 10 is_stmt 1 view .LVU463
 378:boards/TMC5062_eval.c **** 		}
 1791              		.loc 1 378 4 view .LVU464
 1792 064a 3368     		ldr	r3, [r6]
 1793 064c 0093     		str	r3, [sp]
 1794 064e 4FF48022 		mov	r2, #262144
 1795              	.LVL253:
 378:boards/TMC5062_eval.c **** 		}
 1796              		.loc 1 378 4 is_stmt 0 view .LVU465
 1797 0652 1223     		movs	r3, #18
 1798 0654 2846     		mov	r0, r5
 1799              	.LVL254:
 378:boards/TMC5062_eval.c **** 		}
 1800              		.loc 1 378 4 view .LVU466
 1801 0656 FFF780FD 		bl	writeField
 1802              	.LVL255:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1803              		.loc 1 169 11 view .LVU467
 1804 065a 0024     		movs	r4, #0
 1805 065c AAE5     		b	.L47
 1806              	.LVL256:
 1807              	.L76:
 382:boards/TMC5062_eval.c **** 			*value = TMC5062.velocity[motor];
 1808              		.loc 1 382 3 is_stmt 1 view .LVU468
 382:boards/TMC5062_eval.c **** 			*value = TMC5062.velocity[motor];
 1809              		.loc 1 382 5 is_stmt 0 view .LVU469
 1810 065e 0028     		cmp	r0, #0
 1811 0660 40F01C83 		bne	.L183
 383:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1812              		.loc 1 383 4 is_stmt 1 view .LVU470
 383:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1813              		.loc 1 383 29 is_stmt 0 view .LVU471
 1814 0664 B349     		ldr	r1, .L203
 1815              	.LVL257:
 383:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1816              		.loc 1 383 29 view .LVU472
 1817 0666 01EB8505 		add	r5, r1, r5, lsl #2
 383:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1818              		.loc 1 383 11 view .LVU473
 1819 066a EB69     		ldr	r3, [r5, #28]
 1820 066c 3360     		str	r3, [r6]
 1821 066e A1E5     		b	.L47
 1822              	.LVL258:
 1823              	.L75:
 390:boards/TMC5062_eval.c **** 			*value = 256 >> readField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT)
 1824              		.loc 1 390 3 is_stmt 1 view .LVU474
 390:boards/TMC5062_eval.c **** 			*value = 256 >> readField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT)
 1825              		.loc 1 390 5 is_stmt 0 view .LVU475
 1826 0670 7CB9     		cbnz	r4, .L127
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1827              		.loc 1 391 4 is_stmt 1 view .LVU476
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1828              		.loc 1 391 37 is_stmt 0 view .LVU477
 1829 0672 2901     		lsls	r1, r5, #4
 1830              	.LVL259:
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1831              		.loc 1 391 37 view .LVU478
 1832 0674 41F06C01 		orr	r1, r1, #108
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1833              		.loc 1 391 20 view .LVU479
 1834 0678 1823     		movs	r3, #24
 1835 067a 4FF07062 		mov	r2, #251658240
 1836 067e 01F0FC01 		and	r1, r1, #252
 1837 0682 2846     		mov	r0, r5
 1838              	.LVL260:
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1839              		.loc 1 391 20 view .LVU480
 1840 0684 FFF7E5FC 		bl	readField
 1841              	.LVL261:
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1842              		.loc 1 391 17 view .LVU481
 1843 0688 4FF48073 		mov	r3, #256
 1844 068c 0341     		asrs	r3, r3, r0
 391:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1845              		.loc 1 391 11 view .LVU482
 1846 068e 3360     		str	r3, [r6]
 1847 0690 90E5     		b	.L47
 1848              	.LVL262:
 1849              	.L127:
 392:boards/TMC5062_eval.c **** 			switch(*value)
 1850              		.loc 1 392 10 is_stmt 1 view .LVU483
 393:boards/TMC5062_eval.c **** 			{
 1851              		.loc 1 393 4 view .LVU484
 393:boards/TMC5062_eval.c **** 			{
 1852              		.loc 1 393 11 is_stmt 0 view .LVU485
 1853 0692 3368     		ldr	r3, [r6]
 1854 0694 102B     		cmp	r3, #16
 1855 0696 34D0     		beq	.L128
 1856 0698 0ADC     		bgt	.L129
 1857 069a 013B     		subs	r3, r3, #1
 1858 069c 072B     		cmp	r3, #7
 1859 069e 0ED8     		bhi	.L130
 1860 06a0 072B     		cmp	r3, #7
 1861 06a2 0CD8     		bhi	.L130
 1862 06a4 DFE803F0 		tbb	[pc, r3]
 1863              	.L132:
 1864 06a8 13       		.byte	(.L135-.L132)/2
 1865 06a9 27       		.byte	(.L134-.L132)/2
 1866 06aa 0B       		.byte	(.L130-.L132)/2
 1867 06ab 29       		.byte	(.L133-.L132)/2
 1868 06ac 0B       		.byte	(.L130-.L132)/2
 1869 06ad 0B       		.byte	(.L130-.L132)/2
 1870 06ae 0B       		.byte	(.L130-.L132)/2
 1871 06af 2B       		.byte	(.L131-.L132)/2
 1872              		.p2align 1
 1873              	.L129:
 1874 06b0 802B     		cmp	r3, #128
 1875 06b2 2CD0     		beq	.L136
 1876 06b4 06DC     		bgt	.L137
 1877 06b6 202B     		cmp	r3, #32
 1878 06b8 25D0     		beq	.L138
 1879 06ba 402B     		cmp	r3, #64
 1880 06bc 25D0     		beq	.L139
 1881              	.L130:
 404:boards/TMC5062_eval.c **** 			}
 1882              		.loc 1 404 15 is_stmt 1 view .LVU486
 404:boards/TMC5062_eval.c **** 			}
 1883              		.loc 1 404 22 is_stmt 0 view .LVU487
 1884 06be 4FF0FF33 		mov	r3, #-1
 1885 06c2 05E0     		b	.L200
 1886              	.L137:
 1887 06c4 B3F5807F 		cmp	r3, #256
 1888 06c8 F9D1     		bne	.L130
 403:boards/TMC5062_eval.c **** 			default:   *value = -1;  break;
 1889              		.loc 1 403 15 is_stmt 1 view .LVU488
 403:boards/TMC5062_eval.c **** 			default:   *value = -1;  break;
 1890              		.loc 1 403 22 is_stmt 0 view .LVU489
 1891 06ca 0023     		movs	r3, #0
 1892 06cc 00E0     		b	.L200
 1893              	.L135:
 395:boards/TMC5062_eval.c **** 			case 2:    *value = 7;   break;
 1894              		.loc 1 395 15 is_stmt 1 view .LVU490
 395:boards/TMC5062_eval.c **** 			case 2:    *value = 7;   break;
 1895              		.loc 1 395 22 is_stmt 0 view .LVU491
 1896 06ce 0823     		movs	r3, #8
 1897              	.L200:
 404:boards/TMC5062_eval.c **** 			}
 1898              		.loc 1 404 22 view .LVU492
 1899 06d0 3360     		str	r3, [r6]
 404:boards/TMC5062_eval.c **** 			}
 1900              		.loc 1 404 29 is_stmt 1 view .LVU493
 407:boards/TMC5062_eval.c **** 			{
 1901              		.loc 1 407 4 view .LVU494
 407:boards/TMC5062_eval.c **** 			{
 1902              		.loc 1 407 7 is_stmt 0 view .LVU495
 1903 06d2 3368     		ldr	r3, [r6]
 407:boards/TMC5062_eval.c **** 			{
 1904              		.loc 1 407 6 view .LVU496
 1905 06d4 5C1C     		adds	r4, r3, #1
 1906 06d6 3FF443AE 		beq	.L142
 409:boards/TMC5062_eval.c **** 			}
 1907              		.loc 1 409 5 is_stmt 1 view .LVU497
 409:boards/TMC5062_eval.c **** 			}
 1908              		.loc 1 409 23 is_stmt 0 view .LVU498
 1909 06da 2901     		lsls	r1, r5, #4
 1910              	.LVL263:
 409:boards/TMC5062_eval.c **** 			}
 1911              		.loc 1 409 23 view .LVU499
 1912 06dc 41F06C01 		orr	r1, r1, #108
 409:boards/TMC5062_eval.c **** 			}
 1913              		.loc 1 409 5 view .LVU500
 1914 06e0 0093     		str	r3, [sp]
 1915 06e2 4FF07062 		mov	r2, #251658240
 1916 06e6 1823     		movs	r3, #24
 1917 06e8 01F0FC01 		and	r1, r1, #252
 1918 06ec 2846     		mov	r0, r5
 1919              	.LVL264:
 409:boards/TMC5062_eval.c **** 			}
 1920              		.loc 1 409 5 view .LVU501
 1921 06ee FFF734FD 		bl	writeField
 1922              	.LVL265:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1923              		.loc 1 169 11 view .LVU502
 1924 06f2 0024     		movs	r4, #0
 1925 06f4 5EE5     		b	.L47
 1926              	.LVL266:
 1927              	.L134:
 396:boards/TMC5062_eval.c **** 			case 4:    *value = 6;   break;
 1928              		.loc 1 396 15 is_stmt 1 view .LVU503
 396:boards/TMC5062_eval.c **** 			case 4:    *value = 6;   break;
 1929              		.loc 1 396 22 is_stmt 0 view .LVU504
 1930 06f6 0723     		movs	r3, #7
 1931 06f8 EAE7     		b	.L200
 1932              	.L133:
 397:boards/TMC5062_eval.c **** 			case 8:    *value = 5;   break;
 1933              		.loc 1 397 15 is_stmt 1 view .LVU505
 397:boards/TMC5062_eval.c **** 			case 8:    *value = 5;   break;
 1934              		.loc 1 397 22 is_stmt 0 view .LVU506
 1935 06fa 0623     		movs	r3, #6
 1936 06fc E8E7     		b	.L200
 1937              	.L131:
 398:boards/TMC5062_eval.c **** 			case 16:   *value = 4;   break;
 1938              		.loc 1 398 15 is_stmt 1 view .LVU507
 398:boards/TMC5062_eval.c **** 			case 16:   *value = 4;   break;
 1939              		.loc 1 398 22 is_stmt 0 view .LVU508
 1940 06fe 0523     		movs	r3, #5
 1941 0700 E6E7     		b	.L200
 1942              	.L128:
 399:boards/TMC5062_eval.c **** 			case 32:   *value = 3;   break;
 1943              		.loc 1 399 15 is_stmt 1 view .LVU509
 399:boards/TMC5062_eval.c **** 			case 32:   *value = 3;   break;
 1944              		.loc 1 399 22 is_stmt 0 view .LVU510
 1945 0702 0423     		movs	r3, #4
 1946 0704 E4E7     		b	.L200
 1947              	.L138:
 400:boards/TMC5062_eval.c **** 			case 64:   *value = 2;   break;
 1948              		.loc 1 400 15 is_stmt 1 view .LVU511
 400:boards/TMC5062_eval.c **** 			case 64:   *value = 2;   break;
 1949              		.loc 1 400 22 is_stmt 0 view .LVU512
 1950 0706 0323     		movs	r3, #3
 1951 0708 E2E7     		b	.L200
 1952              	.L139:
 401:boards/TMC5062_eval.c **** 			case 128:  *value = 1;   break;
 1953              		.loc 1 401 15 is_stmt 1 view .LVU513
 401:boards/TMC5062_eval.c **** 			case 128:  *value = 1;   break;
 1954              		.loc 1 401 22 is_stmt 0 view .LVU514
 1955 070a 0223     		movs	r3, #2
 1956 070c E0E7     		b	.L200
 1957              	.L136:
 402:boards/TMC5062_eval.c **** 			case 256:  *value = 0;   break;
 1958              		.loc 1 402 15 is_stmt 1 view .LVU515
 402:boards/TMC5062_eval.c **** 			case 256:  *value = 0;   break;
 1959              		.loc 1 402 22 is_stmt 0 view .LVU516
 1960 070e 0123     		movs	r3, #1
 1961 0710 DEE7     		b	.L200
 1962              	.L74:
 415:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT);
 1963              		.loc 1 415 3 is_stmt 1 view .LVU517
 1964 0712 2901     		lsls	r1, r5, #4
 1965              	.LVL267:
 415:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT);
 1966              		.loc 1 415 3 is_stmt 0 view .LVU518
 1967 0714 41F06C01 		orr	r1, r1, #108
 1968 0718 C9B2     		uxtb	r1, r1
 415:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT);
 1969              		.loc 1 415 5 view .LVU519
 1970 071a 3CB9     		cbnz	r4, .L143
 416:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1971              		.loc 1 416 4 is_stmt 1 view .LVU520
 416:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1972              		.loc 1 416 13 is_stmt 0 view .LVU521
 1973 071c 0F23     		movs	r3, #15
 1974 071e 4FF4C032 		mov	r2, #98304
 1975 0722 2846     		mov	r0, r5
 1976              	.LVL268:
 416:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1977              		.loc 1 416 13 view .LVU522
 1978 0724 FFF795FC 		bl	readField
 1979              	.LVL269:
 416:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 1980              		.loc 1 416 11 view .LVU523
 1981 0728 3060     		str	r0, [r6]
 1982 072a 43E5     		b	.L47
 1983              	.LVL270:
 1984              	.L143:
 417:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT, *value);
 1985              		.loc 1 417 10 is_stmt 1 view .LVU524
 418:boards/TMC5062_eval.c **** 		}
 1986              		.loc 1 418 4 view .LVU525
 1987 072c 3368     		ldr	r3, [r6]
 1988 072e 0093     		str	r3, [sp]
 1989 0730 4FF4C032 		mov	r2, #98304
 1990 0734 0F23     		movs	r3, #15
 1991 0736 2846     		mov	r0, r5
 1992              	.LVL271:
 418:boards/TMC5062_eval.c **** 		}
 1993              		.loc 1 418 4 is_stmt 0 view .LVU526
 1994 0738 FFF70FFD 		bl	writeField
 1995              	.LVL272:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 1996              		.loc 1 169 11 view .LVU527
 1997 073c 0024     		movs	r4, #0
 1998 073e 39E5     		b	.L47
 1999              	.LVL273:
 2000              	.L73:
 423:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT);
 2001              		.loc 1 423 3 is_stmt 1 view .LVU528
 2002 0740 2901     		lsls	r1, r5, #4
 2003              	.LVL274:
 423:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT);
 2004              		.loc 1 423 3 is_stmt 0 view .LVU529
 2005 0742 41F06C01 		orr	r1, r1, #108
 2006 0746 C9B2     		uxtb	r1, r1
 423:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT);
 2007              		.loc 1 423 5 view .LVU530
 2008 0748 3CB9     		cbnz	r4, .L144
 424:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2009              		.loc 1 424 4 is_stmt 1 view .LVU531
 424:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2010              		.loc 1 424 13 is_stmt 0 view .LVU532
 2011 074a 0E23     		movs	r3, #14
 2012 074c 4FF48042 		mov	r2, #16384
 2013 0750 2846     		mov	r0, r5
 2014              	.LVL275:
 424:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2015              		.loc 1 424 13 view .LVU533
 2016 0752 FFF77EFC 		bl	readField
 2017              	.LVL276:
 424:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2018              		.loc 1 424 11 view .LVU534
 2019 0756 3060     		str	r0, [r6]
 2020 0758 2CE5     		b	.L47
 2021              	.LVL277:
 2022              	.L144:
 425:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT, *value);
 2023              		.loc 1 425 10 is_stmt 1 view .LVU535
 426:boards/TMC5062_eval.c **** 		}
 2024              		.loc 1 426 4 view .LVU536
 2025 075a 3368     		ldr	r3, [r6]
 2026 075c 0093     		str	r3, [sp]
 2027 075e 4FF48042 		mov	r2, #16384
 2028 0762 0E23     		movs	r3, #14
 2029 0764 2846     		mov	r0, r5
 2030              	.LVL278:
 426:boards/TMC5062_eval.c **** 		}
 2031              		.loc 1 426 4 is_stmt 0 view .LVU537
 2032 0766 FFF7F8FC 		bl	writeField
 2033              	.LVL279:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2034              		.loc 1 169 11 view .LVU538
 2035 076a 0024     		movs	r4, #0
 2036 076c 22E5     		b	.L47
 2037              	.LVL280:
 2038              	.L72:
 431:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT);
 2039              		.loc 1 431 3 is_stmt 1 view .LVU539
 2040 076e 2901     		lsls	r1, r5, #4
 2041              	.LVL281:
 431:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT);
 2042              		.loc 1 431 3 is_stmt 0 view .LVU540
 2043 0770 41F06C01 		orr	r1, r1, #108
 2044 0774 C9B2     		uxtb	r1, r1
 431:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT);
 2045              		.loc 1 431 5 view .LVU541
 2046 0776 3CB9     		cbnz	r4, .L145
 432:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2047              		.loc 1 432 4 is_stmt 1 view .LVU542
 432:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2048              		.loc 1 432 13 is_stmt 0 view .LVU543
 2049 0778 0C23     		movs	r3, #12
 2050 077a 4FF48052 		mov	r2, #4096
 2051 077e 2846     		mov	r0, r5
 2052              	.LVL282:
 432:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2053              		.loc 1 432 13 view .LVU544
 2054 0780 FFF767FC 		bl	readField
 2055              	.LVL283:
 432:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2056              		.loc 1 432 11 view .LVU545
 2057 0784 3060     		str	r0, [r6]
 2058 0786 15E5     		b	.L47
 2059              	.LVL284:
 2060              	.L145:
 433:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT, *value);
 2061              		.loc 1 433 10 is_stmt 1 view .LVU546
 434:boards/TMC5062_eval.c **** 		}
 2062              		.loc 1 434 4 view .LVU547
 2063 0788 3368     		ldr	r3, [r6]
 2064 078a 0093     		str	r3, [sp]
 2065 078c 4FF48052 		mov	r2, #4096
 2066 0790 0C23     		movs	r3, #12
 2067 0792 2846     		mov	r0, r5
 2068              	.LVL285:
 434:boards/TMC5062_eval.c **** 		}
 2069              		.loc 1 434 4 is_stmt 0 view .LVU548
 2070 0794 FFF7E1FC 		bl	writeField
 2071              	.LVL286:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2072              		.loc 1 169 11 view .LVU549
 2073 0798 0024     		movs	r4, #0
 2074 079a 0BE5     		b	.L47
 2075              	.LVL287:
 2076              	.L71:
 439:boards/TMC5062_eval.c **** 			if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT))
 2077              		.loc 1 439 3 is_stmt 1 view .LVU550
 2078 079c 2F01     		lsls	r7, r5, #4
 2079 079e 47F06C07 		orr	r7, r7, #108
 2080 07a2 FFB2     		uxtb	r7, r7
 439:boards/TMC5062_eval.c **** 			if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT))
 2081              		.loc 1 439 5 is_stmt 0 view .LVU551
 2082 07a4 34BB     		cbnz	r4, .L146
 440:boards/TMC5062_eval.c **** 			{
 2083              		.loc 1 440 4 is_stmt 1 view .LVU552
 440:boards/TMC5062_eval.c **** 			{
 2084              		.loc 1 440 7 is_stmt 0 view .LVU553
 2085 07a6 0E23     		movs	r3, #14
 2086 07a8 4FF48042 		mov	r2, #16384
 2087 07ac 3946     		mov	r1, r7
 2088              	.LVL288:
 440:boards/TMC5062_eval.c **** 			{
 2089              		.loc 1 440 7 view .LVU554
 2090 07ae 2846     		mov	r0, r5
 2091              	.LVL289:
 440:boards/TMC5062_eval.c **** 			{
 2092              		.loc 1 440 7 view .LVU555
 2093 07b0 FFF74FFC 		bl	readField
 2094              	.LVL290:
 440:boards/TMC5062_eval.c **** 			{
 2095              		.loc 1 440 6 view .LVU556
 2096 07b4 40B1     		cbz	r0, .L147
 442:boards/TMC5062_eval.c **** 			}
 2097              		.loc 1 442 5 is_stmt 1 view .LVU557
 442:boards/TMC5062_eval.c **** 			}
 2098              		.loc 1 442 14 is_stmt 0 view .LVU558
 2099 07b6 0723     		movs	r3, #7
 2100 07b8 4FF4F062 		mov	r2, #1920
 2101 07bc 3946     		mov	r1, r7
 2102 07be 2846     		mov	r0, r5
 2103 07c0 FFF747FC 		bl	readField
 2104              	.LVL291:
 442:boards/TMC5062_eval.c **** 			}
 2105              		.loc 1 442 12 view .LVU559
 2106 07c4 3060     		str	r0, [r6]
 2107 07c6 F5E4     		b	.L47
 2108              	.L147:
 446:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2109              		.loc 1 446 5 is_stmt 1 view .LVU560
 446:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2110              		.loc 1 446 14 is_stmt 0 view .LVU561
 2111 07c8 0423     		movs	r3, #4
 2112 07ca 7022     		movs	r2, #112
 2113 07cc 3946     		mov	r1, r7
 2114 07ce 2846     		mov	r0, r5
 2115 07d0 FFF73FFC 		bl	readField
 2116              	.LVL292:
 447:boards/TMC5062_eval.c **** 					*value |= 1<<3; // MSB wird zu value hinzugefügt
 2117              		.loc 1 447 8 view .LVU562
 2118 07d4 0B23     		movs	r3, #11
 446:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2119              		.loc 1 446 12 view .LVU563
 2120 07d6 3060     		str	r0, [r6]
 447:boards/TMC5062_eval.c **** 					*value |= 1<<3; // MSB wird zu value hinzugefügt
 2121              		.loc 1 447 5 is_stmt 1 view .LVU564
 447:boards/TMC5062_eval.c **** 					*value |= 1<<3; // MSB wird zu value hinzugefügt
 2122              		.loc 1 447 8 is_stmt 0 view .LVU565
 2123 07d8 4FF40062 		mov	r2, #2048
 2124 07dc 3946     		mov	r1, r7
 2125 07de 2846     		mov	r0, r5
 2126 07e0 FFF737FC 		bl	readField
 2127              	.LVL293:
 447:boards/TMC5062_eval.c **** 					*value |= 1<<3; // MSB wird zu value hinzugefügt
 2128              		.loc 1 447 7 view .LVU566
 2129 07e4 0028     		cmp	r0, #0
 2130 07e6 3FF4BBAD 		beq	.L142
 448:boards/TMC5062_eval.c **** 			}
 2131              		.loc 1 448 6 is_stmt 1 view .LVU567
 448:boards/TMC5062_eval.c **** 			}
 2132              		.loc 1 448 13 is_stmt 0 view .LVU568
 2133 07ea 3368     		ldr	r3, [r6]
 2134 07ec 43F00803 		orr	r3, r3, #8
 2135 07f0 3360     		str	r3, [r6]
 2136 07f2 DFE4     		b	.L47
 2137              	.LVL294:
 2138              	.L146:
 450:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 2139              		.loc 1 450 10 is_stmt 1 view .LVU569
 451:boards/TMC5062_eval.c **** 			{
 2140              		.loc 1 451 4 view .LVU570
 451:boards/TMC5062_eval.c **** 			{
 2141              		.loc 1 451 7 is_stmt 0 view .LVU571
 2142 07f4 3946     		mov	r1, r7
 2143              	.LVL295:
 451:boards/TMC5062_eval.c **** 			{
 2144              		.loc 1 451 7 view .LVU572
 2145 07f6 2846     		mov	r0, r5
 2146              	.LVL296:
 451:boards/TMC5062_eval.c **** 			{
 2147              		.loc 1 451 7 view .LVU573
 2148 07f8 FFF71CFC 		bl	readInt
 2149              	.LVL297:
 451:boards/TMC5062_eval.c **** 			{
 2150              		.loc 1 451 6 view .LVU574
 2151 07fc 10F48044 		ands	r4, r0, #16384
 2152 0800 3368     		ldr	r3, [r6]
 2153 0802 09D0     		beq	.L148
 453:boards/TMC5062_eval.c **** 			}
 2154              		.loc 1 453 5 is_stmt 1 view .LVU575
 2155 0804 0093     		str	r3, [sp]
 2156 0806 4FF4F062 		mov	r2, #1920
 2157 080a 0723     		movs	r3, #7
 2158 080c 3946     		mov	r1, r7
 2159 080e 2846     		mov	r0, r5
 2160 0810 FFF7A3FC 		bl	writeField
 2161              	.LVL298:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2162              		.loc 1 169 11 is_stmt 0 view .LVU576
 2163 0814 0024     		movs	r4, #0
 2164 0816 CDE4     		b	.L47
 2165              	.L148:
 457:boards/TMC5062_eval.c **** 				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT, *value)
 2166              		.loc 1 457 5 is_stmt 1 view .LVU577
 2167 0818 C3F3C003 		ubfx	r3, r3, #3, #1
 2168 081c 0093     		str	r3, [sp]
 2169 081e 3946     		mov	r1, r7
 2170 0820 2846     		mov	r0, r5
 2171 0822 0B23     		movs	r3, #11
 2172 0824 4FF40062 		mov	r2, #2048
 2173 0828 FFF797FC 		bl	writeField
 2174              	.LVL299:
 458:boards/TMC5062_eval.c **** 			}
 2175              		.loc 1 458 5 view .LVU578
 2176 082c 3368     		ldr	r3, [r6]
 2177 082e 0093     		str	r3, [sp]
 2178 0830 7022     		movs	r2, #112
 2179 0832 0423     		movs	r3, #4
 2180 0834 3946     		mov	r1, r7
 2181 0836 2846     		mov	r0, r5
 2182 0838 FFF78FFC 		bl	writeField
 2183              	.LVL300:
 2184 083c BAE4     		b	.L47
 2185              	.LVL301:
 2186              	.L70:
 464:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 2187              		.loc 1 464 3 view .LVU579
 2188 083e 2F01     		lsls	r7, r5, #4
 2189 0840 47F06C07 		orr	r7, r7, #108
 2190 0844 FFB2     		uxtb	r7, r7
 465:boards/TMC5062_eval.c **** 			{
 2191              		.loc 1 465 7 is_stmt 0 view .LVU580
 2192 0846 3946     		mov	r1, r7
 2193              	.LVL302:
 465:boards/TMC5062_eval.c **** 			{
 2194              		.loc 1 465 7 view .LVU581
 2195 0848 2846     		mov	r0, r5
 2196              	.LVL303:
 464:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 2197              		.loc 1 464 5 view .LVU582
 2198 084a 14BB     		cbnz	r4, .L149
 465:boards/TMC5062_eval.c **** 			{
 2199              		.loc 1 465 4 is_stmt 1 view .LVU583
 465:boards/TMC5062_eval.c **** 			{
 2200              		.loc 1 465 7 is_stmt 0 view .LVU584
 2201 084c FFF7F2FB 		bl	readInt
 2202              	.LVL304:
 465:boards/TMC5062_eval.c **** 			{
 2203              		.loc 1 465 6 view .LVU585
 2204 0850 4004     		lsls	r0, r0, #17
 2205 0852 07D5     		bpl	.L150
 467:boards/TMC5062_eval.c **** 			}
 2206              		.loc 1 467 5 is_stmt 1 view .LVU586
 467:boards/TMC5062_eval.c **** 			}
 2207              		.loc 1 467 14 is_stmt 0 view .LVU587
 2208 0854 0423     		movs	r3, #4
 2209 0856 7022     		movs	r2, #112
 2210 0858 3946     		mov	r1, r7
 2211 085a 2846     		mov	r0, r5
 2212 085c FFF7F9FB 		bl	readField
 2213              	.LVL305:
 467:boards/TMC5062_eval.c **** 			}
 2214              		.loc 1 467 12 view .LVU588
 2215 0860 3060     		str	r0, [r6]
 2216 0862 A7E4     		b	.L47
 2217              	.L150:
 471:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2218              		.loc 1 471 5 is_stmt 1 view .LVU589
 471:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2219              		.loc 1 471 14 is_stmt 0 view .LVU590
 2220 0864 0723     		movs	r3, #7
 2221 0866 4FF4F062 		mov	r2, #1920
 2222 086a 3946     		mov	r1, r7
 2223 086c 2846     		mov	r0, r5
 2224 086e FFF7F0FB 		bl	readField
 2225              	.LVL306:
 472:boards/TMC5062_eval.c **** 					*value |= 1<<3;
 2226              		.loc 1 472 8 view .LVU591
 2227 0872 0B23     		movs	r3, #11
 471:boards/TMC5062_eval.c **** 				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
 2228              		.loc 1 471 12 view .LVU592
 2229 0874 3060     		str	r0, [r6]
 472:boards/TMC5062_eval.c **** 					*value |= 1<<3;
 2230              		.loc 1 472 5 is_stmt 1 view .LVU593
 472:boards/TMC5062_eval.c **** 					*value |= 1<<3;
 2231              		.loc 1 472 8 is_stmt 0 view .LVU594
 2232 0876 4FF40062 		mov	r2, #2048
 2233 087a 3946     		mov	r1, r7
 2234 087c 2846     		mov	r0, r5
 2235 087e FFF7E8FB 		bl	readField
 2236              	.LVL307:
 472:boards/TMC5062_eval.c **** 					*value |= 1<<3;
 2237              		.loc 1 472 7 view .LVU595
 2238 0882 0028     		cmp	r0, #0
 2239 0884 3FF46CAD 		beq	.L142
 473:boards/TMC5062_eval.c **** 			}
 2240              		.loc 1 473 6 is_stmt 1 view .LVU596
 473:boards/TMC5062_eval.c **** 			}
 2241              		.loc 1 473 13 is_stmt 0 view .LVU597
 2242 0888 3368     		ldr	r3, [r6]
 2243 088a 43F00803 		orr	r3, r3, #8
 2244 088e 3360     		str	r3, [r6]
 2245 0890 90E4     		b	.L47
 2246              	.L149:
 475:boards/TMC5062_eval.c **** 			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
 2247              		.loc 1 475 10 is_stmt 1 view .LVU598
 476:boards/TMC5062_eval.c **** 			{
 2248              		.loc 1 476 4 view .LVU599
 476:boards/TMC5062_eval.c **** 			{
 2249              		.loc 1 476 7 is_stmt 0 view .LVU600
 2250 0892 FFF7CFFB 		bl	readInt
 2251              	.LVL308:
 2252 0896 3368     		ldr	r3, [r6]
 478:boards/TMC5062_eval.c **** 			}
 2253              		.loc 1 478 5 view .LVU601
 2254 0898 0093     		str	r3, [sp]
 476:boards/TMC5062_eval.c **** 			{
 2255              		.loc 1 476 6 view .LVU602
 2256 089a 10F48044 		ands	r4, r0, #16384
 2257 089e 07D0     		beq	.L151
 478:boards/TMC5062_eval.c **** 			}
 2258              		.loc 1 478 5 is_stmt 1 view .LVU603
 2259 08a0 0423     		movs	r3, #4
 2260 08a2 7022     		movs	r2, #112
 2261 08a4 3946     		mov	r1, r7
 2262 08a6 2846     		mov	r0, r5
 2263 08a8 FFF757FC 		bl	writeField
 2264              	.LVL309:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2265              		.loc 1 169 11 is_stmt 0 view .LVU604
 2266 08ac 0024     		movs	r4, #0
 2267 08ae 81E4     		b	.L47
 2268              	.L151:
 482:boards/TMC5062_eval.c **** 			}
 2269              		.loc 1 482 5 is_stmt 1 view .LVU605
 2270 08b0 0723     		movs	r3, #7
 2271 08b2 4FF4F062 		mov	r2, #1920
 2272 08b6 3946     		mov	r1, r7
 2273 08b8 2846     		mov	r0, r5
 2274 08ba FFF74EFC 		bl	writeField
 2275              	.LVL310:
 2276 08be 79E4     		b	.L47
 2277              	.LVL311:
 2278              	.L69:
 488:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT);
 2279              		.loc 1 488 3 view .LVU606
 2280 08c0 2901     		lsls	r1, r5, #4
 2281              	.LVL312:
 488:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT);
 2282              		.loc 1 488 3 is_stmt 0 view .LVU607
 2283 08c2 41F06C01 		orr	r1, r1, #108
 2284 08c6 C9B2     		uxtb	r1, r1
 488:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT);
 2285              		.loc 1 488 5 view .LVU608
 2286 08c8 34B9     		cbnz	r4, .L152
 489:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2287              		.loc 1 489 4 is_stmt 1 view .LVU609
 489:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2288              		.loc 1 489 13 is_stmt 0 view .LVU610
 2289 08ca 2346     		mov	r3, r4
 2290 08cc 0F22     		movs	r2, #15
 2291 08ce 2846     		mov	r0, r5
 2292              	.LVL313:
 489:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2293              		.loc 1 489 13 view .LVU611
 2294 08d0 FFF7BFFB 		bl	readField
 2295              	.LVL314:
 489:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2296              		.loc 1 489 11 view .LVU612
 2297 08d4 3060     		str	r0, [r6]
 2298 08d6 6DE4     		b	.L47
 2299              	.LVL315:
 2300              	.L152:
 490:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT, *value);
 2301              		.loc 1 490 10 is_stmt 1 view .LVU613
 491:boards/TMC5062_eval.c **** 		}
 2302              		.loc 1 491 4 view .LVU614
 2303 08d8 3368     		ldr	r3, [r6]
 2304 08da 0093     		str	r3, [sp]
 2305 08dc 0F22     		movs	r2, #15
 2306 08de 0023     		movs	r3, #0
 2307 08e0 2846     		mov	r0, r5
 2308              	.LVL316:
 491:boards/TMC5062_eval.c **** 		}
 2309              		.loc 1 491 4 is_stmt 0 view .LVU615
 2310 08e2 FFF73AFC 		bl	writeField
 2311              	.LVL317:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2312              		.loc 1 169 11 view .LVU616
 2313 08e6 0024     		movs	r4, #0
 2314 08e8 64E4     		b	.L47
 2315              	.LVL318:
 2316              	.L68:
 496:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT);
 2317              		.loc 1 496 3 is_stmt 1 view .LVU617
 2318 08ea 2901     		lsls	r1, r5, #4
 2319              	.LVL319:
 496:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT);
 2320              		.loc 1 496 3 is_stmt 0 view .LVU618
 2321 08ec 41F06D01 		orr	r1, r1, #109
 2322 08f0 C9B2     		uxtb	r1, r1
 496:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT);
 2323              		.loc 1 496 5 view .LVU619
 2324 08f2 3CB9     		cbnz	r4, .L153
 497:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2325              		.loc 1 497 4 is_stmt 1 view .LVU620
 497:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2326              		.loc 1 497 13 is_stmt 0 view .LVU621
 2327 08f4 0F23     		movs	r3, #15
 2328 08f6 4FF40042 		mov	r2, #32768
 2329 08fa 2846     		mov	r0, r5
 2330              	.LVL320:
 497:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2331              		.loc 1 497 13 view .LVU622
 2332 08fc FFF7A9FB 		bl	readField
 2333              	.LVL321:
 497:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2334              		.loc 1 497 11 view .LVU623
 2335 0900 3060     		str	r0, [r6]
 2336 0902 57E4     		b	.L47
 2337              	.LVL322:
 2338              	.L153:
 498:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT, *value);
 2339              		.loc 1 498 10 is_stmt 1 view .LVU624
 499:boards/TMC5062_eval.c **** 		}
 2340              		.loc 1 499 4 view .LVU625
 2341 0904 3368     		ldr	r3, [r6]
 2342 0906 0093     		str	r3, [sp]
 2343 0908 4FF40042 		mov	r2, #32768
 2344 090c 0F23     		movs	r3, #15
 2345 090e 2846     		mov	r0, r5
 2346              	.LVL323:
 499:boards/TMC5062_eval.c **** 		}
 2347              		.loc 1 499 4 is_stmt 0 view .LVU626
 2348 0910 FFF723FC 		bl	writeField
 2349              	.LVL324:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2350              		.loc 1 169 11 view .LVU627
 2351 0914 0024     		movs	r4, #0
 2352 0916 4DE4     		b	.L47
 2353              	.LVL325:
 2354              	.L67:
 504:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT);
 2355              		.loc 1 504 3 is_stmt 1 view .LVU628
 2356 0918 2901     		lsls	r1, r5, #4
 2357              	.LVL326:
 504:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT);
 2358              		.loc 1 504 3 is_stmt 0 view .LVU629
 2359 091a 41F06D01 		orr	r1, r1, #109
 2360 091e C9B2     		uxtb	r1, r1
 504:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT);
 2361              		.loc 1 504 5 view .LVU630
 2362 0920 54B9     		cbnz	r4, .L154
 505:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2363              		.loc 1 505 4 is_stmt 1 view .LVU631
 505:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2364              		.loc 1 505 13 is_stmt 0 view .LVU632
 2365 0922 0D23     		movs	r3, #13
 2366 0924 4FF4C042 		mov	r2, #24576
 2367 0928 2846     		mov	r0, r5
 2368              	.LVL327:
 505:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2369              		.loc 1 505 13 view .LVU633
 2370 092a FFF792FB 		bl	readField
 2371              	.LVL328:
 505:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2372              		.loc 1 505 11 view .LVU634
 2373 092e 3060     		str	r0, [r6]
 2374 0930 40E4     		b	.L47
 2375              	.L204:
 2376 0932 00BF     		.align	2
 2377              	.L203:
 2378 0934 00000000 		.word	.LANCHOR0
 2379              	.LVL329:
 2380              	.L154:
 506:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT, *value);
 2381              		.loc 1 506 10 is_stmt 1 view .LVU635
 507:boards/TMC5062_eval.c **** 		}
 2382              		.loc 1 507 4 view .LVU636
 2383 0938 3368     		ldr	r3, [r6]
 2384 093a 0093     		str	r3, [sp]
 2385 093c 4FF4C042 		mov	r2, #24576
 2386 0940 0D23     		movs	r3, #13
 2387 0942 2846     		mov	r0, r5
 2388              	.LVL330:
 507:boards/TMC5062_eval.c **** 		}
 2389              		.loc 1 507 4 is_stmt 0 view .LVU637
 2390 0944 FFF709FC 		bl	writeField
 2391              	.LVL331:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2392              		.loc 1 169 11 view .LVU638
 2393 0948 0024     		movs	r4, #0
 2394 094a 33E4     		b	.L47
 2395              	.LVL332:
 2396              	.L66:
 512:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT);
 2397              		.loc 1 512 3 is_stmt 1 view .LVU639
 2398 094c 2901     		lsls	r1, r5, #4
 2399              	.LVL333:
 512:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT);
 2400              		.loc 1 512 3 is_stmt 0 view .LVU640
 2401 094e 41F06D01 		orr	r1, r1, #109
 2402 0952 C9B2     		uxtb	r1, r1
 512:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT);
 2403              		.loc 1 512 5 view .LVU641
 2404 0954 3CB9     		cbnz	r4, .L155
 513:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2405              		.loc 1 513 4 is_stmt 1 view .LVU642
 513:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2406              		.loc 1 513 13 is_stmt 0 view .LVU643
 2407 0956 0823     		movs	r3, #8
 2408 0958 4FF47062 		mov	r2, #3840
 2409 095c 2846     		mov	r0, r5
 2410              	.LVL334:
 513:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2411              		.loc 1 513 13 view .LVU644
 2412 095e FFF778FB 		bl	readField
 2413              	.LVL335:
 513:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2414              		.loc 1 513 11 view .LVU645
 2415 0962 3060     		str	r0, [r6]
 2416 0964 26E4     		b	.L47
 2417              	.LVL336:
 2418              	.L155:
 514:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT, *value);
 2419              		.loc 1 514 10 is_stmt 1 view .LVU646
 515:boards/TMC5062_eval.c **** 		}
 2420              		.loc 1 515 4 view .LVU647
 2421 0966 3368     		ldr	r3, [r6]
 2422 0968 0093     		str	r3, [sp]
 2423 096a 4FF47062 		mov	r2, #3840
 2424 096e 0823     		movs	r3, #8
 2425 0970 2846     		mov	r0, r5
 2426              	.LVL337:
 515:boards/TMC5062_eval.c **** 		}
 2427              		.loc 1 515 4 is_stmt 0 view .LVU648
 2428 0972 FFF7F2FB 		bl	writeField
 2429              	.LVL338:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2430              		.loc 1 169 11 view .LVU649
 2431 0976 0024     		movs	r4, #0
 2432 0978 1CE4     		b	.L47
 2433              	.LVL339:
 2434              	.L65:
 520:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT);
 2435              		.loc 1 520 3 is_stmt 1 view .LVU650
 2436 097a 2901     		lsls	r1, r5, #4
 2437              	.LVL340:
 520:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT);
 2438              		.loc 1 520 3 is_stmt 0 view .LVU651
 2439 097c 41F06D01 		orr	r1, r1, #109
 2440 0980 C9B2     		uxtb	r1, r1
 520:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT);
 2441              		.loc 1 520 5 view .LVU652
 2442 0982 34B9     		cbnz	r4, .L156
 521:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2443              		.loc 1 521 4 is_stmt 1 view .LVU653
 521:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2444              		.loc 1 521 13 is_stmt 0 view .LVU654
 2445 0984 0523     		movs	r3, #5
 2446 0986 6022     		movs	r2, #96
 2447 0988 2846     		mov	r0, r5
 2448              	.LVL341:
 521:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2449              		.loc 1 521 13 view .LVU655
 2450 098a FFF762FB 		bl	readField
 2451              	.LVL342:
 521:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2452              		.loc 1 521 11 view .LVU656
 2453 098e 3060     		str	r0, [r6]
 2454 0990 10E4     		b	.L47
 2455              	.LVL343:
 2456              	.L156:
 522:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT, *value);
 2457              		.loc 1 522 10 is_stmt 1 view .LVU657
 523:boards/TMC5062_eval.c **** 		}
 2458              		.loc 1 523 4 view .LVU658
 2459 0992 3368     		ldr	r3, [r6]
 2460 0994 0093     		str	r3, [sp]
 2461 0996 6022     		movs	r2, #96
 2462 0998 0523     		movs	r3, #5
 2463 099a 2846     		mov	r0, r5
 2464              	.LVL344:
 523:boards/TMC5062_eval.c **** 		}
 2465              		.loc 1 523 4 is_stmt 0 view .LVU659
 2466 099c FFF7DDFB 		bl	writeField
 2467              	.LVL345:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2468              		.loc 1 169 11 view .LVU660
 2469 09a0 0024     		movs	r4, #0
 2470 09a2 07E4     		b	.L47
 2471              	.LVL346:
 2472              	.L64:
 528:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT);
 2473              		.loc 1 528 3 is_stmt 1 view .LVU661
 2474 09a4 2901     		lsls	r1, r5, #4
 2475              	.LVL347:
 528:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT);
 2476              		.loc 1 528 3 is_stmt 0 view .LVU662
 2477 09a6 41F06D01 		orr	r1, r1, #109
 2478 09aa C9B2     		uxtb	r1, r1
 528:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT);
 2479              		.loc 1 528 5 view .LVU663
 2480 09ac 3CB9     		cbnz	r4, .L157
 529:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2481              		.loc 1 529 4 is_stmt 1 view .LVU664
 529:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2482              		.loc 1 529 13 is_stmt 0 view .LVU665
 2483 09ae 2346     		mov	r3, r4
 2484 09b0 0F22     		movs	r2, #15
 2485 09b2 2846     		mov	r0, r5
 2486              	.LVL348:
 529:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2487              		.loc 1 529 13 view .LVU666
 2488 09b4 FFF74DFB 		bl	readField
 2489              	.LVL349:
 529:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2490              		.loc 1 529 11 view .LVU667
 2491 09b8 3060     		str	r0, [r6]
 2492 09ba FFF7FBBB 		b	.L47
 2493              	.LVL350:
 2494              	.L157:
 530:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT, *value);
 2495              		.loc 1 530 10 is_stmt 1 view .LVU668
 531:boards/TMC5062_eval.c **** 		}
 2496              		.loc 1 531 4 view .LVU669
 2497 09be 3368     		ldr	r3, [r6]
 2498 09c0 0093     		str	r3, [sp]
 2499 09c2 0F22     		movs	r2, #15
 2500 09c4 0023     		movs	r3, #0
 2501 09c6 2846     		mov	r0, r5
 2502              	.LVL351:
 531:boards/TMC5062_eval.c **** 		}
 2503              		.loc 1 531 4 is_stmt 0 view .LVU670
 2504 09c8 FFF7C7FB 		bl	writeField
 2505              	.LVL352:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2506              		.loc 1 169 11 view .LVU671
 2507 09cc 0024     		movs	r4, #0
 2508 09ce FFF7F1BB 		b	.L47
 2509              	.LVL353:
 2510              	.L63:
 536:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT);
 2511              		.loc 1 536 3 is_stmt 1 view .LVU672
 2512 09d2 2901     		lsls	r1, r5, #4
 2513              	.LVL354:
 536:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT);
 2514              		.loc 1 536 3 is_stmt 0 view .LVU673
 2515 09d4 41F06D01 		orr	r1, r1, #109
 2516 09d8 C9B2     		uxtb	r1, r1
 536:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT);
 2517              		.loc 1 536 5 view .LVU674
 2518 09da 44B9     		cbnz	r4, .L158
 537:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2519              		.loc 1 537 4 is_stmt 1 view .LVU675
 537:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2520              		.loc 1 537 13 is_stmt 0 view .LVU676
 2521 09dc 1823     		movs	r3, #24
 2522 09de 4FF08072 		mov	r2, #16777216
 2523 09e2 2846     		mov	r0, r5
 2524              	.LVL355:
 537:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2525              		.loc 1 537 13 view .LVU677
 2526 09e4 FFF735FB 		bl	readField
 2527              	.LVL356:
 537:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2528              		.loc 1 537 11 view .LVU678
 2529 09e8 3060     		str	r0, [r6]
 2530 09ea FFF7E3BB 		b	.L47
 2531              	.LVL357:
 2532              	.L158:
 538:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT, *value);
 2533              		.loc 1 538 10 is_stmt 1 view .LVU679
 539:boards/TMC5062_eval.c **** 		}
 2534              		.loc 1 539 4 view .LVU680
 2535 09ee 3368     		ldr	r3, [r6]
 2536 09f0 0093     		str	r3, [sp]
 2537 09f2 4FF08072 		mov	r2, #16777216
 2538 09f6 1823     		movs	r3, #24
 2539 09f8 2846     		mov	r0, r5
 2540              	.LVL358:
 539:boards/TMC5062_eval.c **** 		}
 2541              		.loc 1 539 4 is_stmt 0 view .LVU681
 2542 09fa FFF7AEFB 		bl	writeField
 2543              	.LVL359:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2544              		.loc 1 169 11 view .LVU682
 2545 09fe 0024     		movs	r4, #0
 2546 0a00 FFF7D8BB 		b	.L47
 2547              	.LVL360:
 2548              	.L62:
 544:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT);
 2549              		.loc 1 544 3 is_stmt 1 view .LVU683
 2550 0a04 2901     		lsls	r1, r5, #4
 2551              	.LVL361:
 544:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT);
 2552              		.loc 1 544 3 is_stmt 0 view .LVU684
 2553 0a06 41F06D01 		orr	r1, r1, #109
 2554 0a0a C9B2     		uxtb	r1, r1
 544:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT);
 2555              		.loc 1 544 5 view .LVU685
 2556 0a0c 74B9     		cbnz	r4, .L159
 545:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2557              		.loc 1 545 4 is_stmt 1 view .LVU686
 545:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2558              		.loc 1 545 13 is_stmt 0 view .LVU687
 2559 0a0e 1023     		movs	r3, #16
 2560 0a10 4FF4FE02 		mov	r2, #8323072
 2561 0a14 2846     		mov	r0, r5
 2562              	.LVL362:
 545:boards/TMC5062_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2563              		.loc 1 545 13 view .LVU688
 2564 0a16 FFF71CFB 		bl	readField
 2565              	.LVL363:
 546:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2566              		.loc 1 546 4 is_stmt 1 view .LVU689
 546:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2567              		.loc 1 546 13 is_stmt 0 view .LVU690
 2568 0a1a 10F04003 		ands	r3, r0, #64
 2569 0a1e 18BF     		it	ne
 2570 0a20 6FF07F03 		mvnne	r3, #127
 2571 0a24 1843     		orrs	r0, r0, r3
 546:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2572              		.loc 1 546 11 view .LVU691
 2573 0a26 3060     		str	r0, [r6]
 2574 0a28 FFF7C4BB 		b	.L47
 2575              	.LVL364:
 2576              	.L159:
 547:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT, *value);
 2577              		.loc 1 547 10 is_stmt 1 view .LVU692
 548:boards/TMC5062_eval.c **** 		}
 2578              		.loc 1 548 4 view .LVU693
 2579 0a2c 3368     		ldr	r3, [r6]
 2580 0a2e 0093     		str	r3, [sp]
 2581 0a30 4FF4FE02 		mov	r2, #8323072
 2582 0a34 1023     		movs	r3, #16
 2583 0a36 2846     		mov	r0, r5
 2584              	.LVL365:
 548:boards/TMC5062_eval.c **** 		}
 2585              		.loc 1 548 4 is_stmt 0 view .LVU694
 2586 0a38 FFF78FFB 		bl	writeField
 2587              	.LVL366:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2588              		.loc 1 169 11 view .LVU695
 2589 0a3c 0024     		movs	r4, #0
 2590 0a3e FFF7B9BB 		b	.L47
 2591              	.LVL367:
 2592              	.L61:
 553:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT);
 2593              		.loc 1 553 3 is_stmt 1 view .LVU696
 2594 0a42 2901     		lsls	r1, r5, #4
 2595              	.LVL368:
 553:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT);
 2596              		.loc 1 553 3 is_stmt 0 view .LVU697
 2597 0a44 41F06C01 		orr	r1, r1, #108
 2598 0a48 C9B2     		uxtb	r1, r1
 553:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT);
 2599              		.loc 1 553 5 view .LVU698
 2600 0a4a 44B9     		cbnz	r4, .L161
 554:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2601              		.loc 1 554 4 is_stmt 1 view .LVU699
 554:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2602              		.loc 1 554 13 is_stmt 0 view .LVU700
 2603 0a4c 1123     		movs	r3, #17
 2604 0a4e 4FF40032 		mov	r2, #131072
 2605 0a52 2846     		mov	r0, r5
 2606              	.LVL369:
 554:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2607              		.loc 1 554 13 view .LVU701
 2608 0a54 FFF7FDFA 		bl	readField
 2609              	.LVL370:
 554:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2610              		.loc 1 554 11 view .LVU702
 2611 0a58 3060     		str	r0, [r6]
 2612 0a5a FFF7ABBB 		b	.L47
 2613              	.LVL371:
 2614              	.L161:
 555:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT, *value);
 2615              		.loc 1 555 10 is_stmt 1 view .LVU703
 556:boards/TMC5062_eval.c **** 		}
 2616              		.loc 1 556 4 view .LVU704
 2617 0a5e 3368     		ldr	r3, [r6]
 2618 0a60 0093     		str	r3, [sp]
 2619 0a62 4FF40032 		mov	r2, #131072
 2620 0a66 1123     		movs	r3, #17
 2621 0a68 2846     		mov	r0, r5
 2622              	.LVL372:
 556:boards/TMC5062_eval.c **** 		}
 2623              		.loc 1 556 4 is_stmt 0 view .LVU705
 2624 0a6a FFF776FB 		bl	writeField
 2625              	.LVL373:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2626              		.loc 1 169 11 view .LVU706
 2627 0a6e 0024     		movs	r4, #0
 2628 0a70 FFF7A0BB 		b	.L47
 2629              	.LVL374:
 2630              	.L60:
 561:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_CS_ACTUAL_MASK, TMC5062_CS_ACTUAL_SH
 2631              		.loc 1 561 3 is_stmt 1 view .LVU707
 561:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_CS_ACTUAL_MASK, TMC5062_CS_ACTUAL_SH
 2632              		.loc 1 561 5 is_stmt 0 view .LVU708
 2633 0a74 002C     		cmp	r4, #0
 2634 0a76 40F01481 		bne	.L185
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2635              		.loc 1 562 4 is_stmt 1 view .LVU709
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2636              		.loc 1 562 30 is_stmt 0 view .LVU710
 2637 0a7a 2901     		lsls	r1, r5, #4
 2638              	.LVL375:
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2639              		.loc 1 562 30 view .LVU711
 2640 0a7c 41F06F01 		orr	r1, r1, #111
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2641              		.loc 1 562 13 view .LVU712
 2642 0a80 1023     		movs	r3, #16
 2643 0a82 4FF4F812 		mov	r2, #2031616
 2644 0a86 C9B2     		uxtb	r1, r1
 2645 0a88 2846     		mov	r0, r5
 2646              	.LVL376:
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2647              		.loc 1 562 13 view .LVU713
 2648 0a8a FFF7E2FA 		bl	readField
 2649              	.LVL377:
 562:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2650              		.loc 1 562 11 view .LVU714
 2651 0a8e 3060     		str	r0, [r6]
 2652 0a90 FFF790BB 		b	.L47
 2653              	.LVL378:
 2654              	.L59:
 569:boards/TMC5062_eval.c **** 			if( readInt(motor, TMC5062_SWMODE(motor)) & (1<<10))
 2655              		.loc 1 569 3 is_stmt 1 view .LVU715
 2656 0a94 2027     		movs	r7, #32
 2657 0a96 AF40     		lsls	r7, r7, r5
 2658 0a98 7FB2     		sxtb	r7, r7
 2659 0a9a 47F01408 		orr	r8, r7, #20
 2660 0a9e 5FFA88F8 		uxtb	r8, r8
 569:boards/TMC5062_eval.c **** 			if( readInt(motor, TMC5062_SWMODE(motor)) & (1<<10))
 2661              		.loc 1 569 5 is_stmt 0 view .LVU716
 2662 0aa2 7CB9     		cbnz	r4, .L162
 570:boards/TMC5062_eval.c **** 			{
 2663              		.loc 1 570 4 is_stmt 1 view .LVU717
 570:boards/TMC5062_eval.c **** 			{
 2664              		.loc 1 570 8 is_stmt 0 view .LVU718
 2665 0aa4 4146     		mov	r1, r8
 2666              	.LVL379:
 570:boards/TMC5062_eval.c **** 			{
 2667              		.loc 1 570 8 view .LVU719
 2668 0aa6 2846     		mov	r0, r5
 2669              	.LVL380:
 570:boards/TMC5062_eval.c **** 			{
 2670              		.loc 1 570 8 view .LVU720
 2671 0aa8 FFF7C4FA 		bl	readInt
 2672              	.LVL381:
 570:boards/TMC5062_eval.c **** 			{
 2673              		.loc 1 570 6 view .LVU721
 2674 0aac 4105     		lsls	r1, r0, #21
 2675 0aae 7FF557AC 		bpl	.L142
 572:boards/TMC5062_eval.c **** 			}
 2676              		.loc 1 572 5 is_stmt 1 view .LVU722
 572:boards/TMC5062_eval.c **** 			}
 2677              		.loc 1 572 29 is_stmt 0 view .LVU723
 2678 0ab2 47F01101 		orr	r1, r7, #17
 572:boards/TMC5062_eval.c **** 			}
 2679              		.loc 1 572 14 view .LVU724
 2680 0ab6 C9B2     		uxtb	r1, r1
 2681 0ab8 2846     		mov	r0, r5
 2682 0aba FFF7BBFA 		bl	readInt
 2683              	.LVL382:
 572:boards/TMC5062_eval.c **** 			}
 2684              		.loc 1 572 12 view .LVU725
 2685 0abe 3060     		str	r0, [r6]
 2686 0ac0 FFF778BB 		b	.L47
 2687              	.LVL383:
 2688              	.L162:
 576:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
 2689              		.loc 1 576 10 is_stmt 1 view .LVU726
 577:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 
 2690              		.loc 1 577 4 view .LVU727
 577:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 
 2691              		.loc 1 577 20 is_stmt 0 view .LVU728
 2692 0ac4 47F01101 		orr	r1, r7, #17
 2693              	.LVL384:
 577:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 
 2694              		.loc 1 577 4 view .LVU729
 2695 0ac8 3268     		ldr	r2, [r6]
 2696 0aca C9B2     		uxtb	r1, r1
 2697 0acc 2846     		mov	r0, r5
 2698              	.LVL385:
 577:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 
 2699              		.loc 1 577 4 view .LVU730
 2700 0ace FFF7CDFA 		bl	writeInt
 2701              	.LVL386:
 578:boards/TMC5062_eval.c **** 		}
 2702              		.loc 1 578 4 is_stmt 1 view .LVU731
 2703 0ad2 3368     		ldr	r3, [r6]
 2704 0ad4 003B     		subs	r3, r3, #0
 2705 0ad6 18BF     		it	ne
 2706 0ad8 0123     		movne	r3, #1
 2707 0ada 0093     		str	r3, [sp]
 2708 0adc 4FF48062 		mov	r2, #1024
 2709 0ae0 0A23     		movs	r3, #10
 2710 0ae2 4146     		mov	r1, r8
 2711 0ae4 2846     		mov	r0, r5
 2712 0ae6 FFF738FB 		bl	writeField
 2713              	.LVL387:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2714              		.loc 1 169 11 is_stmt 0 view .LVU732
 2715 0aea 0024     		movs	r4, #0
 2716 0aec FFF762BB 		b	.L47
 2717              	.LVL388:
 2718              	.L58:
 583:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 2719              		.loc 1 583 3 is_stmt 1 view .LVU733
 2720 0af0 2021     		movs	r1, #32
 2721              	.LVL389:
 583:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 2722              		.loc 1 583 3 is_stmt 0 view .LVU734
 2723 0af2 A940     		lsls	r1, r1, r5
 2724 0af4 41F01101 		orr	r1, r1, #17
 2725 0af8 C9B2     		uxtb	r1, r1
 583:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
 2726              		.loc 1 583 5 view .LVU735
 2727 0afa 2CB9     		cbnz	r4, .L163
 584:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2728              		.loc 1 584 4 is_stmt 1 view .LVU736
 584:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2729              		.loc 1 584 13 is_stmt 0 view .LVU737
 2730 0afc 2846     		mov	r0, r5
 2731              	.LVL390:
 584:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2732              		.loc 1 584 13 view .LVU738
 2733 0afe FFF799FA 		bl	readInt
 2734              	.LVL391:
 584:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2735              		.loc 1 584 11 view .LVU739
 2736 0b02 3060     		str	r0, [r6]
 2737 0b04 FFF756BB 		b	.L47
 2738              	.LVL392:
 2739              	.L163:
 585:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
 2740              		.loc 1 585 10 is_stmt 1 view .LVU740
 586:boards/TMC5062_eval.c **** 		}
 2741              		.loc 1 586 4 view .LVU741
 2742 0b08 3268     		ldr	r2, [r6]
 2743 0b0a 2846     		mov	r0, r5
 2744              	.LVL393:
 586:boards/TMC5062_eval.c **** 		}
 2745              		.loc 1 586 4 is_stmt 0 view .LVU742
 2746 0b0c FFF7AEFA 		bl	writeInt
 2747              	.LVL394:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2748              		.loc 1 169 11 view .LVU743
 2749 0b10 0024     		movs	r4, #0
 2750 0b12 FFF74FBB 		b	.L47
 2751              	.LVL395:
 2752              	.L57:
 591:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT);
 2753              		.loc 1 591 3 is_stmt 1 view .LVU744
 2754 0b16 2901     		lsls	r1, r5, #4
 2755              	.LVL396:
 591:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT);
 2756              		.loc 1 591 3 is_stmt 0 view .LVU745
 2757 0b18 41F06C01 		orr	r1, r1, #108
 2758 0b1c C9B2     		uxtb	r1, r1
 591:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT);
 2759              		.loc 1 591 5 view .LVU746
 2760 0b1e 44B9     		cbnz	r4, .L164
 592:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2761              		.loc 1 592 4 is_stmt 1 view .LVU747
 592:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2762              		.loc 1 592 13 is_stmt 0 view .LVU748
 2763 0b20 0D23     		movs	r3, #13
 2764 0b22 4FF40052 		mov	r2, #8192
 2765 0b26 2846     		mov	r0, r5
 2766              	.LVL397:
 592:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2767              		.loc 1 592 13 view .LVU749
 2768 0b28 FFF793FA 		bl	readField
 2769              	.LVL398:
 592:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2770              		.loc 1 592 11 view .LVU750
 2771 0b2c 3060     		str	r0, [r6]
 2772 0b2e FFF741BB 		b	.L47
 2773              	.LVL399:
 2774              	.L164:
 593:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT, *value);
 2775              		.loc 1 593 10 is_stmt 1 view .LVU751
 594:boards/TMC5062_eval.c **** 		}
 2776              		.loc 1 594 4 view .LVU752
 2777 0b32 3368     		ldr	r3, [r6]
 2778 0b34 0093     		str	r3, [sp]
 2779 0b36 4FF40052 		mov	r2, #8192
 2780 0b3a 0D23     		movs	r3, #13
 2781 0b3c 2846     		mov	r0, r5
 2782              	.LVL400:
 594:boards/TMC5062_eval.c **** 		}
 2783              		.loc 1 594 4 is_stmt 0 view .LVU753
 2784 0b3e FFF70CFB 		bl	writeField
 2785              	.LVL401:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2786              		.loc 1 169 11 view .LVU754
 2787 0b42 0024     		movs	r4, #0
 2788 0b44 FFF736BB 		b	.L47
 2789              	.LVL402:
 2790              	.L56:
 599:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT);
 2791              		.loc 1 599 3 is_stmt 1 view .LVU755
 2792 0b48 2901     		lsls	r1, r5, #4
 2793              	.LVL403:
 599:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT);
 2794              		.loc 1 599 3 is_stmt 0 view .LVU756
 2795 0b4a 41F06C01 		orr	r1, r1, #108
 2796 0b4e C9B2     		uxtb	r1, r1
 599:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT);
 2797              		.loc 1 599 5 view .LVU757
 2798 0b50 44B9     		cbnz	r4, .L165
 600:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2799              		.loc 1 600 4 is_stmt 1 view .LVU758
 600:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2800              		.loc 1 600 13 is_stmt 0 view .LVU759
 2801 0b52 1423     		movs	r3, #20
 2802 0b54 4FF47002 		mov	r2, #15728640
 2803 0b58 2846     		mov	r0, r5
 2804              	.LVL404:
 600:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2805              		.loc 1 600 13 view .LVU760
 2806 0b5a FFF77AFA 		bl	readField
 2807              	.LVL405:
 600:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2808              		.loc 1 600 11 view .LVU761
 2809 0b5e 3060     		str	r0, [r6]
 2810 0b60 FFF728BB 		b	.L47
 2811              	.LVL406:
 2812              	.L165:
 601:boards/TMC5062_eval.c **** 			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT, *value);
 2813              		.loc 1 601 10 is_stmt 1 view .LVU762
 602:boards/TMC5062_eval.c **** 		}
 2814              		.loc 1 602 4 view .LVU763
 2815 0b64 3368     		ldr	r3, [r6]
 2816 0b66 0093     		str	r3, [sp]
 2817 0b68 4FF47002 		mov	r2, #15728640
 2818 0b6c 1423     		movs	r3, #20
 2819 0b6e 2846     		mov	r0, r5
 2820              	.LVL407:
 602:boards/TMC5062_eval.c **** 		}
 2821              		.loc 1 602 4 is_stmt 0 view .LVU764
 2822 0b70 FFF7F3FA 		bl	writeField
 2823              	.LVL408:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2824              		.loc 1 169 11 view .LVU765
 2825 0b74 0024     		movs	r4, #0
 2826 0b76 FFF71DBB 		b	.L47
 2827              	.LVL409:
 2828              	.L55:
 607:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_SG_RESULT_MASK, TMC5062_SG_RESULT_SH
 2829              		.loc 1 607 3 is_stmt 1 view .LVU766
 607:boards/TMC5062_eval.c **** 			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_SG_RESULT_MASK, TMC5062_SG_RESULT_SH
 2830              		.loc 1 607 5 is_stmt 0 view .LVU767
 2831 0b7a 002C     		cmp	r4, #0
 2832 0b7c 40F09480 		bne	.L186
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2833              		.loc 1 608 4 is_stmt 1 view .LVU768
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2834              		.loc 1 608 30 is_stmt 0 view .LVU769
 2835 0b80 2901     		lsls	r1, r5, #4
 2836              	.LVL410:
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2837              		.loc 1 608 30 view .LVU770
 2838 0b82 41F06F01 		orr	r1, r1, #111
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2839              		.loc 1 608 13 view .LVU771
 2840 0b86 2346     		mov	r3, r4
 2841 0b88 40F2FF32 		movw	r2, #1023
 2842 0b8c C9B2     		uxtb	r1, r1
 2843 0b8e 2846     		mov	r0, r5
 2844              	.LVL411:
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2845              		.loc 1 608 13 view .LVU772
 2846 0b90 FFF75FFA 		bl	readField
 2847              	.LVL412:
 608:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2848              		.loc 1 608 11 view .LVU773
 2849 0b94 3060     		str	r0, [r6]
 2850 0b96 FFF70DBB 		b	.L47
 2851              	.LVL413:
 2852              	.L54:
 615:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XENC(motor));
 2853              		.loc 1 615 3 is_stmt 1 view .LVU774
 2854 0b9a 2021     		movs	r1, #32
 2855              	.LVL414:
 615:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XENC(motor));
 2856              		.loc 1 615 3 is_stmt 0 view .LVU775
 2857 0b9c A940     		lsls	r1, r1, r5
 2858 0b9e 41F01901 		orr	r1, r1, #25
 2859 0ba2 C9B2     		uxtb	r1, r1
 615:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_XENC(motor));
 2860              		.loc 1 615 5 view .LVU776
 2861 0ba4 2CB9     		cbnz	r4, .L166
 616:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2862              		.loc 1 616 4 is_stmt 1 view .LVU777
 616:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2863              		.loc 1 616 13 is_stmt 0 view .LVU778
 2864 0ba6 2846     		mov	r0, r5
 2865              	.LVL415:
 616:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2866              		.loc 1 616 13 view .LVU779
 2867 0ba8 FFF744FA 		bl	readInt
 2868              	.LVL416:
 616:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2869              		.loc 1 616 11 view .LVU780
 2870 0bac 3060     		str	r0, [r6]
 2871 0bae FFF701BB 		b	.L47
 2872              	.LVL417:
 2873              	.L166:
 617:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_XENC(motor),*value);
 2874              		.loc 1 617 10 is_stmt 1 view .LVU781
 618:boards/TMC5062_eval.c **** 		}
 2875              		.loc 1 618 4 view .LVU782
 2876 0bb2 3268     		ldr	r2, [r6]
 2877 0bb4 2846     		mov	r0, r5
 2878              	.LVL418:
 618:boards/TMC5062_eval.c **** 		}
 2879              		.loc 1 618 4 is_stmt 0 view .LVU783
 2880 0bb6 FFF759FA 		bl	writeInt
 2881              	.LVL419:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2882              		.loc 1 169 11 view .LVU784
 2883 0bba 0024     		movs	r4, #0
 2884 0bbc FFF7FABA 		b	.L47
 2885              	.LVL420:
 2886              	.L53:
 623:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_ENC_CONST(motor));
 2887              		.loc 1 623 3 is_stmt 1 view .LVU785
 2888 0bc0 2021     		movs	r1, #32
 2889              	.LVL421:
 623:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_ENC_CONST(motor));
 2890              		.loc 1 623 3 is_stmt 0 view .LVU786
 2891 0bc2 A940     		lsls	r1, r1, r5
 2892 0bc4 41F01A01 		orr	r1, r1, #26
 2893 0bc8 C9B2     		uxtb	r1, r1
 623:boards/TMC5062_eval.c **** 			*value = readInt(motor, TMC5062_ENC_CONST(motor));
 2894              		.loc 1 623 5 view .LVU787
 2895 0bca 2CB9     		cbnz	r4, .L167
 624:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2896              		.loc 1 624 4 is_stmt 1 view .LVU788
 624:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2897              		.loc 1 624 13 is_stmt 0 view .LVU789
 2898 0bcc 2846     		mov	r0, r5
 2899              	.LVL422:
 624:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2900              		.loc 1 624 13 view .LVU790
 2901 0bce FFF731FA 		bl	readInt
 2902              	.LVL423:
 624:boards/TMC5062_eval.c **** 		} else if(readWrite == WRITE) {
 2903              		.loc 1 624 11 view .LVU791
 2904 0bd2 3060     		str	r0, [r6]
 2905 0bd4 FFF7EEBA 		b	.L47
 2906              	.LVL424:
 2907              	.L167:
 625:boards/TMC5062_eval.c **** 			writeInt(motor, TMC5062_ENC_CONST(motor),*value);
 2908              		.loc 1 625 10 is_stmt 1 view .LVU792
 626:boards/TMC5062_eval.c **** 		}
 2909              		.loc 1 626 4 view .LVU793
 2910 0bd8 3268     		ldr	r2, [r6]
 2911 0bda 2846     		mov	r0, r5
 2912              	.LVL425:
 626:boards/TMC5062_eval.c **** 		}
 2913              		.loc 1 626 4 is_stmt 0 view .LVU794
 2914 0bdc FFF746FA 		bl	writeInt
 2915              	.LVL426:
 169:boards/TMC5062_eval.c **** 	int tempValue;
 2916              		.loc 1 169 11 view .LVU795
 2917 0be0 0024     		movs	r4, #0
 2918 0be2 FFF7E7BA 		b	.L47
 2919              	.LVL427:
 2920              	.L51:
 630:boards/TMC5062_eval.c **** 			// encoder enable
 2921              		.loc 1 630 3 is_stmt 1 view .LVU796
 630:boards/TMC5062_eval.c **** 			// encoder enable
 2922              		.loc 1 630 5 is_stmt 0 view .LVU797
 2923 0be6 D4B9     		cbnz	r4, .L168
 632:boards/TMC5062_eval.c **** 			{
 2924              		.loc 1 632 4 is_stmt 1 view .LVU798
 2925 0be8 012D     		cmp	r5, #1
 640:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 2926              		.loc 1 640 17 is_stmt 0 view .LVU799
 2927 0bea 2146     		mov	r1, r4
 2928              	.LVL428:
 640:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 2929              		.loc 1 640 17 view .LVU800
 2930 0bec 0BD0     		beq	.L169
 635:boards/TMC5062_eval.c **** 				tempValue &= (1<<3) | (1<<4);
 2931              		.loc 1 635 5 is_stmt 1 view .LVU801
 635:boards/TMC5062_eval.c **** 				tempValue &= (1<<3) | (1<<4);
 2932              		.loc 1 635 17 is_stmt 0 view .LVU802
 2933 0bee 2046     		mov	r0, r4
 2934              	.LVL429:
 635:boards/TMC5062_eval.c **** 				tempValue &= (1<<3) | (1<<4);
 2935              		.loc 1 635 17 view .LVU803
 2936 0bf0 FFF720FA 		bl	readInt
 2937              	.LVL430:
 636:boards/TMC5062_eval.c **** 				*value = (tempValue == (1<<4))? 1 : 0;
 2938              		.loc 1 636 5 is_stmt 1 view .LVU804
 637:boards/TMC5062_eval.c **** 				break;
 2939              		.loc 1 637 5 view .LVU805
 636:boards/TMC5062_eval.c **** 				*value = (tempValue == (1<<4))? 1 : 0;
 2940              		.loc 1 636 15 is_stmt 0 view .LVU806
 2941 0bf4 00F01800 		and	r0, r0, #24
 2942              	.LVL431:
 637:boards/TMC5062_eval.c **** 				break;
 2943              		.loc 1 637 39 view .LVU807
 2944 0bf8 A0F11002 		sub	r2, r0, #16
 2945 0bfc 5042     		rsbs	r0, r2, #0
 2946              	.LVL432:
 637:boards/TMC5062_eval.c **** 				break;
 2947              		.loc 1 637 39 view .LVU808
 2948 0bfe 5041     		adcs	r0, r0, r2
 637:boards/TMC5062_eval.c **** 				break;
 2949              		.loc 1 637 12 view .LVU809
 2950 0c00 3060     		str	r0, [r6]
 638:boards/TMC5062_eval.c **** 			case 1:
 2951              		.loc 1 638 5 is_stmt 1 view .LVU810
 2952 0c02 FFF7D7BA 		b	.L47
 2953              	.LVL433:
 2954              	.L169:
 640:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 2955              		.loc 1 640 5 view .LVU811
 640:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 2956              		.loc 1 640 17 is_stmt 0 view .LVU812
 2957 0c06 2846     		mov	r0, r5
 2958              	.LVL434:
 640:boards/TMC5062_eval.c **** 				tempValue &= (1<<5) | (1<<6);
 2959              		.loc 1 640 17 view .LVU813
 2960 0c08 FFF714FA 		bl	readInt
 2961              	.LVL435:
 641:boards/TMC5062_eval.c **** 				*value = (tempValue == ((1<<5) | (0<<6)))? 1 : 0;
 2962              		.loc 1 641 5 is_stmt 1 view .LVU814
 642:boards/TMC5062_eval.c **** 				break;
 2963              		.loc 1 642 5 view .LVU815
 641:boards/TMC5062_eval.c **** 				*value = (tempValue == ((1<<5) | (0<<6)))? 1 : 0;
 2964              		.loc 1 641 15 is_stmt 0 view .LVU816
 2965 0c0c 00F06000 		and	r0, r0, #96
 2966              	.LVL436:
 642:boards/TMC5062_eval.c **** 				break;
 2967              		.loc 1 642 50 view .LVU817
 2968 0c10 A0F12003 		sub	r3, r0, #32
 2969 0c14 5842     		rsbs	r0, r3, #0
 2970              	.LVL437:
 642:boards/TMC5062_eval.c **** 				break;
 2971              		.loc 1 642 50 view .LVU818
 2972 0c16 5841     		adcs	r0, r0, r3
 642:boards/TMC5062_eval.c **** 				break;
 2973              		.loc 1 642 12 view .LVU819
 2974 0c18 3060     		str	r0, [r6]
 643:boards/TMC5062_eval.c **** 			}
 2975              		.loc 1 643 5 is_stmt 1 view .LVU820
 2976 0c1a FFF7CBBA 		b	.L47
 2977              	.LVL438:
 2978              	.L168:
 645:boards/TMC5062_eval.c **** 			// encoder enable
 2979              		.loc 1 645 10 view .LVU821
 647:boards/TMC5062_eval.c **** 			{
 2980              		.loc 1 647 4 view .LVU822
 2981 0c1e 012D     		cmp	r5, #1
 658:boards/TMC5062_eval.c **** 				if(*value)
 2982              		.loc 1 658 17 is_stmt 0 view .LVU823
 2983 0c20 4FF00001 		mov	r1, #0
 2984              	.LVL439:
 658:boards/TMC5062_eval.c **** 				if(*value)
 2985              		.loc 1 658 17 view .LVU824
 2986 0c24 12D0     		beq	.L170
 650:boards/TMC5062_eval.c **** 				if(*value)
 2987              		.loc 1 650 5 is_stmt 1 view .LVU825
 650:boards/TMC5062_eval.c **** 				if(*value)
 2988              		.loc 1 650 17 is_stmt 0 view .LVU826
 2989 0c26 0846     		mov	r0, r1
 2990              	.LVL440:
 650:boards/TMC5062_eval.c **** 				if(*value)
 2991              		.loc 1 650 17 view .LVU827
 2992 0c28 FFF704FA 		bl	readInt
 2993              	.LVL441:
 651:boards/TMC5062_eval.c **** 					tempValue = (tempValue & ~(1<<3)) | (1<<4);
 2994              		.loc 1 651 5 is_stmt 1 view .LVU828
 651:boards/TMC5062_eval.c **** 					tempValue = (tempValue & ~(1<<3)) | (1<<4);
 2995              		.loc 1 651 7 is_stmt 0 view .LVU829
 2996 0c2c 3368     		ldr	r3, [r6]
 2997 0c2e 20F01802 		bic	r2, r0, #24
 2998 0c32 43B1     		cbz	r3, .L171
 652:boards/TMC5062_eval.c **** 				else
 2999              		.loc 1 652 6 is_stmt 1 view .LVU830
 652:boards/TMC5062_eval.c **** 				else
 3000              		.loc 1 652 16 is_stmt 0 view .LVU831
 3001 0c34 42F01002 		orr	r2, r2, #16
 3002              	.LVL442:
 3003              	.L172:
 655:boards/TMC5062_eval.c **** 				break;
 3004              		.loc 1 655 5 is_stmt 1 view .LVU832
 3005 0c38 0021     		movs	r1, #0
 3006 0c3a 0846     		mov	r0, r1
 3007 0c3c FFF716FA 		bl	writeInt
 3008              	.LVL443:
 656:boards/TMC5062_eval.c **** 			case 1:		// enable ENCODER2 - disable REF
 3009              		.loc 1 656 5 view .LVU833
 169:boards/TMC5062_eval.c **** 	int tempValue;
 3010              		.loc 1 169 11 is_stmt 0 view .LVU834
 3011 0c40 0024     		movs	r4, #0
 656:boards/TMC5062_eval.c **** 			case 1:		// enable ENCODER2 - disable REF
 3012              		.loc 1 656 5 view .LVU835
 3013 0c42 FFF7B7BA 		b	.L47
 3014              	.LVL444:
 3015              	.L171:
 654:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3016              		.loc 1 654 6 is_stmt 1 view .LVU836
 654:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3017              		.loc 1 654 16 is_stmt 0 view .LVU837
 3018 0c46 42F00802 		orr	r2, r2, #8
 3019              	.LVL445:
 654:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3020              		.loc 1 654 16 view .LVU838
 3021 0c4a F5E7     		b	.L172
 3022              	.LVL446:
 3023              	.L170:
 658:boards/TMC5062_eval.c **** 				if(*value)
 3024              		.loc 1 658 5 is_stmt 1 view .LVU839
 658:boards/TMC5062_eval.c **** 				if(*value)
 3025              		.loc 1 658 17 is_stmt 0 view .LVU840
 3026 0c4c 2846     		mov	r0, r5
 3027              	.LVL447:
 658:boards/TMC5062_eval.c **** 				if(*value)
 3028              		.loc 1 658 17 view .LVU841
 3029 0c4e FFF7F1F9 		bl	readInt
 3030              	.LVL448:
 659:boards/TMC5062_eval.c **** 					//tempValue = (tempValue | (1<<5)) & ~(5<<5);
 3031              		.loc 1 659 5 is_stmt 1 view .LVU842
 659:boards/TMC5062_eval.c **** 					//tempValue = (tempValue | (1<<5)) & ~(5<<5);
 3032              		.loc 1 659 7 is_stmt 0 view .LVU843
 3033 0c52 3368     		ldr	r3, [r6]
 3034 0c54 20F06002 		bic	r2, r0, #96
 3035 0c58 43B1     		cbz	r3, .L173
 661:boards/TMC5062_eval.c **** 				else
 3036              		.loc 1 661 6 is_stmt 1 view .LVU844
 661:boards/TMC5062_eval.c **** 				else
 3037              		.loc 1 661 16 is_stmt 0 view .LVU845
 3038 0c5a 42F02002 		orr	r2, r2, #32
 3039              	.LVL449:
 3040              	.L174:
 665:boards/TMC5062_eval.c **** 				break;
 3041              		.loc 1 665 5 is_stmt 1 view .LVU846
 3042 0c5e 0021     		movs	r1, #0
 3043 0c60 0120     		movs	r0, #1
 3044 0c62 FFF703FA 		bl	writeInt
 3045              	.LVL450:
 666:boards/TMC5062_eval.c **** 			}
 3046              		.loc 1 666 5 view .LVU847
 169:boards/TMC5062_eval.c **** 	int tempValue;
 3047              		.loc 1 169 11 is_stmt 0 view .LVU848
 3048 0c66 0024     		movs	r4, #0
 666:boards/TMC5062_eval.c **** 			}
 3049              		.loc 1 666 5 view .LVU849
 3050 0c68 FFF7A4BA 		b	.L47
 3051              	.LVL451:
 3052              	.L173:
 664:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3053              		.loc 1 664 6 is_stmt 1 view .LVU850
 664:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3054              		.loc 1 664 16 is_stmt 0 view .LVU851
 3055 0c6c 42F04002 		orr	r2, r2, #64
 3056              	.LVL452:
 664:boards/TMC5062_eval.c **** 				writeInt(motor, TMC5062_GCONF, tempValue);
 3057              		.loc 1 664 16 view .LVU852
 3058 0c70 F5E7     		b	.L174
 3059              	.LVL453:
 3060              	.L175:
 173:boards/TMC5062_eval.c **** 
 3061              		.loc 1 173 10 view .LVU853
 3062 0c72 0824     		movs	r4, #8
 3063 0c74 FFF79EBA 		b	.L47
 3064              	.LVL454:
 3065              	.L176:
 175:boards/TMC5062_eval.c **** 	{
 3066              		.loc 1 175 2 view .LVU854
 3067 0c78 0424     		movs	r4, #4
 3068 0c7a FFF79BBA 		b	.L47
 3069              	.LVL455:
 3070              	.L177:
 175:boards/TMC5062_eval.c **** 	{
 3071              		.loc 1 175 2 view .LVU855
 3072 0c7e 0424     		movs	r4, #4
 3073 0c80 FFF798BA 		b	.L47
 3074              	.L178:
 208:boards/TMC5062_eval.c **** 		}
 3075              		.loc 1 208 11 view .LVU856
 3076 0c84 0424     		movs	r4, #4
 3077 0c86 FFF795BA 		b	.L47
 3078              	.L180:
 3079 0c8a 0424     		movs	r4, #4
 3080 0c8c FFF792BA 		b	.L47
 3081              	.L181:
 3082 0c90 0424     		movs	r4, #4
 3083 0c92 FFF78FBA 		b	.L47
 3084              	.L182:
 3085 0c96 0424     		movs	r4, #4
 3086 0c98 FFF78CBA 		b	.L47
 3087              	.L183:
 3088 0c9c 0424     		movs	r4, #4
 3089 0c9e FFF789BA 		b	.L47
 3090              	.LVL456:
 3091              	.L185:
 208:boards/TMC5062_eval.c **** 		}
 3092              		.loc 1 208 11 view .LVU857
 3093 0ca2 0424     		movs	r4, #4
 3094 0ca4 FFF786BA 		b	.L47
 3095              	.L186:
 3096 0ca8 0424     		movs	r4, #4
 3097              	.LVL457:
 208:boards/TMC5062_eval.c **** 		}
 3098              		.loc 1 208 11 view .LVU858
 3099 0caa FFF783BA 		b	.L47
 3100              		.cfi_endproc
 3101              	.LFE12:
 3103              		.align	1
 3104              		.syntax unified
 3105              		.thumb
 3106              		.thumb_func
 3107              		.fpu softvfp
 3109              	SAP:
 3110              	.LVL458:
 3111              	.LFB13:
 679:boards/TMC5062_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3112              		.loc 1 679 1 is_stmt 1 view -0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 8
 3115              		@ frame_needed = 0, uses_anonymous_args = 0
 680:boards/TMC5062_eval.c **** }
 3116              		.loc 1 680 2 view .LVU860
 679:boards/TMC5062_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3117              		.loc 1 679 1 is_stmt 0 view .LVU861
 3118 0cae 07B5     		push	{r0, r1, r2, lr}
 3119              	.LCFI11:
 3120              		.cfi_def_cfa_offset 16
 3121              		.cfi_offset 14, -4
 679:boards/TMC5062_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3122              		.loc 1 679 1 view .LVU862
 3123 0cb0 0192     		str	r2, [sp, #4]
 680:boards/TMC5062_eval.c **** }
 3124              		.loc 1 680 9 view .LVU863
 3125 0cb2 01AB     		add	r3, sp, #4
 3126 0cb4 0246     		mov	r2, r0
 3127              	.LVL459:
 680:boards/TMC5062_eval.c **** }
 3128              		.loc 1 680 9 view .LVU864
 3129 0cb6 0120     		movs	r0, #1
 3130              	.LVL460:
 680:boards/TMC5062_eval.c **** }
 3131              		.loc 1 680 9 view .LVU865
 3132 0cb8 FFF76CFA 		bl	handleParameter
 3133              	.LVL461:
 681:boards/TMC5062_eval.c **** 
 3134              		.loc 1 681 1 view .LVU866
 3135 0cbc 03B0     		add	sp, sp, #12
 3136              	.LCFI12:
 3137              		.cfi_def_cfa_offset 4
 3138              		@ sp needed
 3139 0cbe 5DF804FB 		ldr	pc, [sp], #4
 3140              		.cfi_endproc
 3141              	.LFE13:
 3143              		.align	1
 3144              		.syntax unified
 3145              		.thumb
 3146              		.thumb_func
 3147              		.fpu softvfp
 3149              	GAP:
 3150              	.LVL462:
 3151              	.LFB14:
 684:boards/TMC5062_eval.c **** 	return handleParameter(READ, motor, type, value);
 3152              		.loc 1 684 1 is_stmt 1 view -0
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 0
 3155              		@ frame_needed = 0, uses_anonymous_args = 0
 3156              		@ link register save eliminated.
 685:boards/TMC5062_eval.c **** }
 3157              		.loc 1 685 2 view .LVU868
 684:boards/TMC5062_eval.c **** 	return handleParameter(READ, motor, type, value);
 3158              		.loc 1 684 1 is_stmt 0 view .LVU869
 3159 0cc2 1346     		mov	r3, r2
 685:boards/TMC5062_eval.c **** }
 3160              		.loc 1 685 9 view .LVU870
 3161 0cc4 0246     		mov	r2, r0
 3162              	.LVL463:
 685:boards/TMC5062_eval.c **** }
 3163              		.loc 1 685 9 view .LVU871
 3164 0cc6 0020     		movs	r0, #0
 3165              	.LVL464:
 685:boards/TMC5062_eval.c **** }
 3166              		.loc 1 685 9 view .LVU872
 3167 0cc8 FFF764BA 		b	handleParameter
 3168              	.LVL465:
 685:boards/TMC5062_eval.c **** }
 3169              		.loc 1 685 9 view .LVU873
 3170              		.cfi_endproc
 3171              	.LFE14:
 3173              		.align	1
 3174              		.syntax unified
 3175              		.thumb
 3176              		.thumb_func
 3177              		.fpu softvfp
 3179              	restore:
 3180              	.LFB23:
 720:boards/TMC5062_eval.c **** 
 721:boards/TMC5062_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 722:boards/TMC5062_eval.c **** {
 723:boards/TMC5062_eval.c **** 	uint32_t errors = 0;
 724:boards/TMC5062_eval.c **** 
 725:boards/TMC5062_eval.c **** 	UNUSED(motor);
 726:boards/TMC5062_eval.c **** 
 727:boards/TMC5062_eval.c **** 	switch(type)
 728:boards/TMC5062_eval.c **** 	{
 729:boards/TMC5062_eval.c **** 	case 0:		// enable Single Wire Mode
 730:boards/TMC5062_eval.c **** 		if(*value)
 731:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 732:boards/TMC5062_eval.c **** 		else
 733:boards/TMC5062_eval.c **** 			HAL.IOs->config->setLow(Pins.SWSEL);
 734:boards/TMC5062_eval.c **** 		break;
 735:boards/TMC5062_eval.c **** 	case 1:		// read interrupt pin INT
 736:boards/TMC5062_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.INT_ENCA))? 1 : 0;
 737:boards/TMC5062_eval.c **** 		break;
 738:boards/TMC5062_eval.c **** 	case 2:		// read position compare pin PP
 739:boards/TMC5062_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
 740:boards/TMC5062_eval.c **** 		break;
 741:boards/TMC5062_eval.c **** 	default:
 742:boards/TMC5062_eval.c **** 		errors |= TMC_ERROR_TYPE;
 743:boards/TMC5062_eval.c **** 		break;
 744:boards/TMC5062_eval.c **** 	}
 745:boards/TMC5062_eval.c **** 	return errors;
 746:boards/TMC5062_eval.c **** }
 747:boards/TMC5062_eval.c **** 
 748:boards/TMC5062_eval.c **** static void deInit(void)
 749:boards/TMC5062_eval.c **** {
 750:boards/TMC5062_eval.c **** 	enableDriver(DRIVER_DISABLE);
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 752:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 753:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.PP_ENCB);
 754:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWION);
 755:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP1);
 756:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP2);
 757:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWSEL);
 758:boards/TMC5062_eval.c **** };
 759:boards/TMC5062_eval.c **** 
 760:boards/TMC5062_eval.c **** static uint8_t reset()
 761:boards/TMC5062_eval.c **** {
 762:boards/TMC5062_eval.c **** 	for(uint8_t motor = 0; motor < MOTORS; motor++)
 763:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 764:boards/TMC5062_eval.c **** 			return 0;
 765:boards/TMC5062_eval.c **** 
 766:boards/TMC5062_eval.c **** 	return tmc5062_reset(&TMC5062);
 767:boards/TMC5062_eval.c **** }
 768:boards/TMC5062_eval.c **** 
 769:boards/TMC5062_eval.c **** static uint8_t restore()
 770:boards/TMC5062_eval.c **** {
 3181              		.loc 1 770 1 is_stmt 1 view -0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 3185              		@ link register save eliminated.
 771:boards/TMC5062_eval.c **** 	return tmc5062_restore(&TMC5062);
 3186              		.loc 1 771 2 view .LVU875
 3187              		.loc 1 771 9 is_stmt 0 view .LVU876
 3188 0ccc 0148     		ldr	r0, .L208
 3189 0cce FFF7FEBF 		b	tmc5062_restore
 3190              	.LVL466:
 3191              	.L209:
 3192 0cd2 00BF     		.align	2
 3193              	.L208:
 3194 0cd4 00000000 		.word	.LANCHOR0
 3195              		.cfi_endproc
 3196              	.LFE23:
 3198              		.align	1
 3199              		.syntax unified
 3200              		.thumb
 3201              		.thumb_func
 3202              		.fpu softvfp
 3204              	reset:
 3205              	.LFB22:
 761:boards/TMC5062_eval.c **** 	for(uint8_t motor = 0; motor < MOTORS; motor++)
 3206              		.loc 1 761 1 is_stmt 1 view -0
 3207              		.cfi_startproc
 3208              		@ args = 0, pretend = 0, frame = 0
 3209              		@ frame_needed = 0, uses_anonymous_args = 0
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3210              		.loc 1 762 2 view .LVU878
 3211              	.LBB3:
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3212              		.loc 1 762 6 view .LVU879
 3213              	.LVL467:
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3214              		.loc 1 762 25 view .LVU880
 763:boards/TMC5062_eval.c **** 			return 0;
 3215              		.loc 1 763 3 view .LVU881
 3216              	.LBE3:
 761:boards/TMC5062_eval.c **** 	for(uint8_t motor = 0; motor < MOTORS; motor++)
 3217              		.loc 1 761 1 is_stmt 0 view .LVU882
 3218 0cd8 08B5     		push	{r3, lr}
 3219              	.LCFI13:
 3220              		.cfi_def_cfa_offset 8
 3221              		.cfi_offset 3, -8
 3222              		.cfi_offset 14, -4
 3223              	.LBB4:
 763:boards/TMC5062_eval.c **** 			return 0;
 3224              		.loc 1 763 6 view .LVU883
 3225 0cda 2221     		movs	r1, #34
 3226 0cdc 0020     		movs	r0, #0
 3227 0cde FFF7A9F9 		bl	readInt
 3228              	.LVL468:
 763:boards/TMC5062_eval.c **** 			return 0;
 3229              		.loc 1 763 5 view .LVU884
 3230 0ce2 48B9     		cbnz	r0, .L212
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3231              		.loc 1 762 41 is_stmt 1 view .LVU885
 3232              	.LVL469:
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3233              		.loc 1 762 25 view .LVU886
 763:boards/TMC5062_eval.c **** 			return 0;
 3234              		.loc 1 763 3 view .LVU887
 763:boards/TMC5062_eval.c **** 			return 0;
 3235              		.loc 1 763 6 is_stmt 0 view .LVU888
 3236 0ce4 4221     		movs	r1, #66
 3237 0ce6 0120     		movs	r0, #1
 3238 0ce8 FFF7A4F9 		bl	readInt
 3239              	.LVL470:
 763:boards/TMC5062_eval.c **** 			return 0;
 3240              		.loc 1 763 5 view .LVU889
 3241 0cec 20B9     		cbnz	r0, .L212
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3242              		.loc 1 762 41 is_stmt 1 view .LVU890
 3243              	.LVL471:
 762:boards/TMC5062_eval.c **** 		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
 3244              		.loc 1 762 25 view .LVU891
 3245              	.LBE4:
 766:boards/TMC5062_eval.c **** }
 3246              		.loc 1 766 2 view .LVU892
 767:boards/TMC5062_eval.c **** 
 3247              		.loc 1 767 1 is_stmt 0 view .LVU893
 3248 0cee BDE80840 		pop	{r3, lr}
 3249              	.LCFI14:
 3250              		.cfi_remember_state
 3251              		.cfi_restore 14
 3252              		.cfi_restore 3
 3253              		.cfi_def_cfa_offset 0
 766:boards/TMC5062_eval.c **** }
 3254              		.loc 1 766 9 view .LVU894
 3255 0cf2 0248     		ldr	r0, .L214
 3256 0cf4 FFF7FEBF 		b	tmc5062_reset
 3257              	.LVL472:
 3258              	.L212:
 3259              	.LCFI15:
 3260              		.cfi_restore_state
 767:boards/TMC5062_eval.c **** 
 3261              		.loc 1 767 1 view .LVU895
 3262 0cf8 0020     		movs	r0, #0
 3263 0cfa 08BD     		pop	{r3, pc}
 3264              	.L215:
 3265              		.align	2
 3266              	.L214:
 3267 0cfc 00000000 		.word	.LANCHOR0
 3268              		.cfi_endproc
 3269              	.LFE22:
 3271              		.align	1
 3272              		.syntax unified
 3273              		.thumb
 3274              		.thumb_func
 3275              		.fpu softvfp
 3277              	userFunction:
 3278              	.LVL473:
 3279              	.LFB20:
 722:boards/TMC5062_eval.c **** 	uint32_t errors = 0;
 3280              		.loc 1 722 1 is_stmt 1 view -0
 3281              		.cfi_startproc
 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 0, uses_anonymous_args = 0
 723:boards/TMC5062_eval.c **** 
 3284              		.loc 1 723 2 view .LVU897
 725:boards/TMC5062_eval.c **** 
 3285              		.loc 1 725 2 view .LVU898
 727:boards/TMC5062_eval.c **** 	{
 3286              		.loc 1 727 2 view .LVU899
 3287 0d00 0128     		cmp	r0, #1
 722:boards/TMC5062_eval.c **** 	uint32_t errors = 0;
 3288              		.loc 1 722 1 is_stmt 0 view .LVU900
 3289 0d02 38B5     		push	{r3, r4, r5, lr}
 3290              	.LCFI16:
 3291              		.cfi_def_cfa_offset 16
 3292              		.cfi_offset 3, -16
 3293              		.cfi_offset 4, -12
 3294              		.cfi_offset 5, -8
 3295              		.cfi_offset 14, -4
 722:boards/TMC5062_eval.c **** 	uint32_t errors = 0;
 3296              		.loc 1 722 1 view .LVU901
 3297 0d04 1446     		mov	r4, r2
 727:boards/TMC5062_eval.c **** 	{
 3298              		.loc 1 727 2 view .LVU902
 3299 0d06 10D0     		beq	.L217
 3300 0d08 0228     		cmp	r0, #2
 3301 0d0a 1BD0     		beq	.L218
 3302 0d0c 10BB     		cbnz	r0, .L221
 3303              	.LVL474:
 3304              	.LBB7:
 3305              	.LBI7:
 721:boards/TMC5062_eval.c **** {
 3306              		.loc 1 721 17 is_stmt 1 view .LVU903
 3307              	.LBB8:
 730:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 3308              		.loc 1 730 3 view .LVU904
 3309 0d0e 124B     		ldr	r3, .L225
 3310 0d10 124A     		ldr	r2, .L225+4
 3311              	.LVL475:
 730:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 3312              		.loc 1 730 3 is_stmt 0 view .LVU905
 3313 0d12 DB68     		ldr	r3, [r3, #12]
 730:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 3314              		.loc 1 730 5 view .LVU906
 3315 0d14 2468     		ldr	r4, [r4]
 3316              	.LVL476:
 730:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 3317              		.loc 1 730 5 view .LVU907
 3318 0d16 1B68     		ldr	r3, [r3]
 3319 0d18 D2F8BC02 		ldr	r0, [r2, #700]
 3320              	.LVL477:
 730:boards/TMC5062_eval.c **** 			HAL.IOs->config->setHigh(Pins.SWSEL);
 3321              		.loc 1 730 5 view .LVU908
 3322 0d1c 1CB1     		cbz	r4, .L220
 731:boards/TMC5062_eval.c **** 		else
 3323              		.loc 1 731 4 is_stmt 1 view .LVU909
 3324 0d1e 5B69     		ldr	r3, [r3, #20]
 3325              	.L224:
 733:boards/TMC5062_eval.c **** 		break;
 3326              		.loc 1 733 4 is_stmt 0 view .LVU910
 3327 0d20 9847     		blx	r3
 3328              	.LVL478:
 3329              	.L223:
 733:boards/TMC5062_eval.c **** 		break;
 3330              		.loc 1 733 4 view .LVU911
 3331              	.LBE8:
 3332              	.LBE7:
 740:boards/TMC5062_eval.c **** 	default:
 3333              		.loc 1 740 3 is_stmt 1 view .LVU912
 723:boards/TMC5062_eval.c **** 
 3334              		.loc 1 723 11 is_stmt 0 view .LVU913
 3335 0d22 0020     		movs	r0, #0
 3336              	.LVL479:
 3337              	.L216:
 746:boards/TMC5062_eval.c **** 
 3338              		.loc 1 746 1 view .LVU914
 3339 0d24 38BD     		pop	{r3, r4, r5, pc}
 3340              	.LVL480:
 3341              	.L220:
 3342              	.LBB10:
 3343              	.LBB9:
 733:boards/TMC5062_eval.c **** 		break;
 3344              		.loc 1 733 4 is_stmt 1 view .LVU915
 3345 0d26 9B69     		ldr	r3, [r3, #24]
 3346 0d28 FAE7     		b	.L224
 3347              	.LVL481:
 3348              	.L217:
 733:boards/TMC5062_eval.c **** 		break;
 3349              		.loc 1 733 4 is_stmt 0 view .LVU916
 3350              	.LBE9:
 3351              	.LBE10:
 736:boards/TMC5062_eval.c **** 		break;
 3352              		.loc 1 736 3 is_stmt 1 view .LVU917
 736:boards/TMC5062_eval.c **** 		break;
 3353              		.loc 1 736 16 is_stmt 0 view .LVU918
 3354 0d2a 0B4B     		ldr	r3, .L225
 736:boards/TMC5062_eval.c **** 		break;
 3355              		.loc 1 736 13 view .LVU919
 3356 0d2c 0B4A     		ldr	r2, .L225+4
 3357              	.LVL482:
 736:boards/TMC5062_eval.c **** 		break;
 3358              		.loc 1 736 20 view .LVU920
 3359 0d2e DB68     		ldr	r3, [r3, #12]
 736:boards/TMC5062_eval.c **** 		break;
 3360              		.loc 1 736 13 view .LVU921
 3361 0d30 D2F8B402 		ldr	r0, [r2, #692]
 3362              	.LVL483:
 736:boards/TMC5062_eval.c **** 		break;
 3363              		.loc 1 736 28 view .LVU922
 3364 0d34 1B68     		ldr	r3, [r3]
 736:boards/TMC5062_eval.c **** 		break;
 3365              		.loc 1 736 13 view .LVU923
 3366 0d36 5B6A     		ldr	r3, [r3, #36]
 3367              	.L222:
 739:boards/TMC5062_eval.c **** 		break;
 3368              		.loc 1 739 13 view .LVU924
 3369 0d38 9847     		blx	r3
 3370              	.LVL484:
 739:boards/TMC5062_eval.c **** 		break;
 3371              		.loc 1 739 55 view .LVU925
 3372 0d3a 0038     		subs	r0, r0, #0
 3373 0d3c 18BF     		it	ne
 3374 0d3e 0120     		movne	r0, #1
 739:boards/TMC5062_eval.c **** 		break;
 3375              		.loc 1 739 10 view .LVU926
 3376 0d40 2060     		str	r0, [r4]
 3377 0d42 EEE7     		b	.L223
 3378              	.LVL485:
 3379              	.L218:
 739:boards/TMC5062_eval.c **** 		break;
 3380              		.loc 1 739 3 is_stmt 1 view .LVU927
 739:boards/TMC5062_eval.c **** 		break;
 3381              		.loc 1 739 16 is_stmt 0 view .LVU928
 3382 0d44 044B     		ldr	r3, .L225
 739:boards/TMC5062_eval.c **** 		break;
 3383              		.loc 1 739 13 view .LVU929
 3384 0d46 054A     		ldr	r2, .L225+4
 3385              	.LVL486:
 739:boards/TMC5062_eval.c **** 		break;
 3386              		.loc 1 739 20 view .LVU930
 3387 0d48 DB68     		ldr	r3, [r3, #12]
 739:boards/TMC5062_eval.c **** 		break;
 3388              		.loc 1 739 13 view .LVU931
 3389 0d4a D2F8B802 		ldr	r0, [r2, #696]
 3390              	.LVL487:
 739:boards/TMC5062_eval.c **** 		break;
 3391              		.loc 1 739 28 view .LVU932
 3392 0d4e 1B68     		ldr	r3, [r3]
 739:boards/TMC5062_eval.c **** 		break;
 3393              		.loc 1 739 13 view .LVU933
 3394 0d50 5B6A     		ldr	r3, [r3, #36]
 3395 0d52 F1E7     		b	.L222
 3396              	.LVL488:
 3397              	.L221:
 727:boards/TMC5062_eval.c **** 	{
 3398              		.loc 1 727 2 view .LVU934
 3399 0d54 0420     		movs	r0, #4
 3400              	.LVL489:
 745:boards/TMC5062_eval.c **** }
 3401              		.loc 1 745 2 is_stmt 1 view .LVU935
 745:boards/TMC5062_eval.c **** }
 3402              		.loc 1 745 9 is_stmt 0 view .LVU936
 3403 0d56 E5E7     		b	.L216
 3404              	.L226:
 3405              		.align	2
 3406              	.L225:
 3407 0d58 00000000 		.word	HAL
 3408 0d5c 00000000 		.word	.LANCHOR0
 3409              		.cfi_endproc
 3410              	.LFE20:
 3412              		.align	1
 3413              		.syntax unified
 3414              		.thumb
 3415              		.thumb_func
 3416              		.fpu softvfp
 3418              	enableDriver:
 3419              	.LVL490:
 3420              	.LFB24:
 772:boards/TMC5062_eval.c **** }
 773:boards/TMC5062_eval.c **** 
 774:boards/TMC5062_eval.c **** static void enableDriver(DriverState state)
 775:boards/TMC5062_eval.c **** {
 3421              		.loc 1 775 1 is_stmt 1 view -0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 0
 3424              		@ frame_needed = 0, uses_anonymous_args = 0
 3425              		@ link register save eliminated.
 776:boards/TMC5062_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 3426              		.loc 1 776 2 view .LVU938
 3427              		.loc 1 776 4 is_stmt 0 view .LVU939
 3428 0d60 0228     		cmp	r0, #2
 777:boards/TMC5062_eval.c **** 		state = Evalboards.driverEnable;
 3429              		.loc 1 777 3 is_stmt 1 view .LVU940
 3430              		.loc 1 777 9 is_stmt 0 view .LVU941
 3431 0d62 04BF     		itt	eq
 3432 0d64 0C4B     		ldreq	r3, .L232
 3433 0d66 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 3434              	.LVL491:
 778:boards/TMC5062_eval.c **** 
 779:boards/TMC5062_eval.c **** 	if(state ==  DRIVER_DISABLE)
 3435              		.loc 1 779 2 is_stmt 1 view .LVU942
 3436              		.loc 1 779 4 is_stmt 0 view .LVU943
 3437 0d6a 38B9     		cbnz	r0, .L229
 780:boards/TMC5062_eval.c **** 		HAL.IOs->config->setHigh(Pins.DRV_ENN);
 3438              		.loc 1 780 3 is_stmt 1 view .LVU944
 3439              		.loc 1 780 6 is_stmt 0 view .LVU945
 3440 0d6c 0B4B     		ldr	r3, .L232+4
 3441              		.loc 1 780 10 view .LVU946
 3442 0d6e DB68     		ldr	r3, [r3, #12]
 3443              		.loc 1 780 18 view .LVU947
 3444 0d70 1B68     		ldr	r3, [r3]
 3445              		.loc 1 780 3 view .LVU948
 3446 0d72 5B69     		ldr	r3, [r3, #20]
 3447              	.L231:
 3448              	.LBB13:
 3449              	.LBB14:
 781:boards/TMC5062_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 782:boards/TMC5062_eval.c **** 		HAL.IOs->config->setLow(Pins.DRV_ENN);
 3450              		.loc 1 782 3 view .LVU949
 3451 0d74 0A4A     		ldr	r2, .L232+8
 3452 0d76 D2F8B002 		ldr	r0, [r2, #688]
 3453 0d7a 1847     		bx	r3	@ indirect register sibling call
 3454              	.LVL492:
 3455              	.L229:
 3456              		.loc 1 782 3 view .LVU950
 3457              	.LBE14:
 3458              	.LBE13:
 781:boards/TMC5062_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3459              		.loc 1 781 7 is_stmt 1 view .LVU951
 781:boards/TMC5062_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3460              		.loc 1 781 9 is_stmt 0 view .LVU952
 3461 0d7c 0128     		cmp	r0, #1
 3462 0d7e 09D1     		bne	.L227
 781:boards/TMC5062_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3463              		.loc 1 781 49 discriminator 1 view .LVU953
 3464 0d80 054B     		ldr	r3, .L232
 781:boards/TMC5062_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3465              		.loc 1 781 35 discriminator 1 view .LVU954
 3466 0d82 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 3467 0d86 012B     		cmp	r3, #1
 3468 0d88 04D1     		bne	.L227
 3469              	.LBB16:
 3470              	.LBI13:
 774:boards/TMC5062_eval.c **** {
 3471              		.loc 1 774 13 is_stmt 1 view .LVU955
 3472              	.LVL493:
 3473              	.LBB15:
 3474              		.loc 1 782 3 view .LVU956
 3475              		.loc 1 782 6 is_stmt 0 view .LVU957
 3476 0d8a 044B     		ldr	r3, .L232+4
 3477              		.loc 1 782 10 view .LVU958
 3478 0d8c DB68     		ldr	r3, [r3, #12]
 3479              		.loc 1 782 18 view .LVU959
 3480 0d8e 1B68     		ldr	r3, [r3]
 3481              		.loc 1 782 3 view .LVU960
 3482 0d90 9B69     		ldr	r3, [r3, #24]
 3483 0d92 EFE7     		b	.L231
 3484              	.LVL494:
 3485              	.L227:
 3486              		.loc 1 782 3 view .LVU961
 3487              	.LBE15:
 3488              	.LBE16:
 783:boards/TMC5062_eval.c **** }
 3489              		.loc 1 783 1 view .LVU962
 3490 0d94 7047     		bx	lr
 3491              	.L233:
 3492 0d96 00BF     		.align	2
 3493              	.L232:
 3494 0d98 00000000 		.word	Evalboards
 3495 0d9c 00000000 		.word	HAL
 3496 0da0 00000000 		.word	.LANCHOR0
 3497              		.cfi_endproc
 3498              	.LFE24:
 3500              		.align	1
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3504              		.fpu softvfp
 3506              	deInit:
 3507              	.LFB21:
 749:boards/TMC5062_eval.c **** 	enableDriver(DRIVER_DISABLE);
 3508              		.loc 1 749 1 is_stmt 1 view -0
 3509              		.cfi_startproc
 3510              		@ args = 0, pretend = 0, frame = 0
 3511              		@ frame_needed = 0, uses_anonymous_args = 0
 750:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 3512              		.loc 1 750 2 view .LVU964
 749:boards/TMC5062_eval.c **** 	enableDriver(DRIVER_DISABLE);
 3513              		.loc 1 749 1 is_stmt 0 view .LVU965
 3514 0da4 70B5     		push	{r4, r5, r6, lr}
 3515              	.LCFI17:
 3516              		.cfi_def_cfa_offset 16
 3517              		.cfi_offset 4, -16
 3518              		.cfi_offset 5, -12
 3519              		.cfi_offset 6, -8
 3520              		.cfi_offset 14, -4
 750:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN);
 3521              		.loc 1 750 2 view .LVU966
 3522 0da6 0020     		movs	r0, #0
 3523 0da8 FFF7DAFF 		bl	enableDriver
 3524              	.LVL495:
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3525              		.loc 1 751 2 is_stmt 1 view .LVU967
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3526              		.loc 1 751 5 is_stmt 0 view .LVU968
 3527 0dac 134B     		ldr	r3, .L235
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3528              		.loc 1 751 2 view .LVU969
 3529 0dae 144C     		ldr	r4, .L235+4
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3530              		.loc 1 751 5 view .LVU970
 3531 0db0 DD68     		ldr	r5, [r3, #12]
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3532              		.loc 1 751 2 view .LVU971
 3533 0db2 D4F8B002 		ldr	r0, [r4, #688]
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3534              		.loc 1 751 17 view .LVU972
 3535 0db6 2B68     		ldr	r3, [r5]
 751:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.INT_ENCA);
 3536              		.loc 1 751 2 view .LVU973
 3537 0db8 9B68     		ldr	r3, [r3, #8]
 3538 0dba 9847     		blx	r3
 3539              	.LVL496:
 752:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.PP_ENCB);
 3540              		.loc 1 752 2 is_stmt 1 view .LVU974
 752:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.PP_ENCB);
 3541              		.loc 1 752 17 is_stmt 0 view .LVU975
 3542 0dbc 2B68     		ldr	r3, [r5]
 752:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.PP_ENCB);
 3543              		.loc 1 752 2 view .LVU976
 3544 0dbe D4F8B402 		ldr	r0, [r4, #692]
 3545 0dc2 9B68     		ldr	r3, [r3, #8]
 3546 0dc4 9847     		blx	r3
 3547              	.LVL497:
 753:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWION);
 3548              		.loc 1 753 2 is_stmt 1 view .LVU977
 753:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWION);
 3549              		.loc 1 753 17 is_stmt 0 view .LVU978
 3550 0dc6 2B68     		ldr	r3, [r5]
 753:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWION);
 3551              		.loc 1 753 2 view .LVU979
 3552 0dc8 D4F8B802 		ldr	r0, [r4, #696]
 3553 0dcc 9B68     		ldr	r3, [r3, #8]
 3554 0dce 9847     		blx	r3
 3555              	.LVL498:
 754:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP1);
 3556              		.loc 1 754 2 is_stmt 1 view .LVU980
 754:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP1);
 3557              		.loc 1 754 17 is_stmt 0 view .LVU981
 3558 0dd0 2B68     		ldr	r3, [r5]
 754:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP1);
 3559              		.loc 1 754 2 view .LVU982
 3560 0dd2 D4F8C802 		ldr	r0, [r4, #712]
 3561 0dd6 9B68     		ldr	r3, [r3, #8]
 3562 0dd8 9847     		blx	r3
 3563              	.LVL499:
 755:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP2);
 3564              		.loc 1 755 2 is_stmt 1 view .LVU983
 755:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP2);
 3565              		.loc 1 755 17 is_stmt 0 view .LVU984
 3566 0dda 2B68     		ldr	r3, [r5]
 755:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWIOP2);
 3567              		.loc 1 755 2 view .LVU985
 3568 0ddc D4F8C002 		ldr	r0, [r4, #704]
 3569 0de0 9B68     		ldr	r3, [r3, #8]
 3570 0de2 9847     		blx	r3
 3571              	.LVL500:
 756:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWSEL);
 3572              		.loc 1 756 2 is_stmt 1 view .LVU986
 756:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWSEL);
 3573              		.loc 1 756 17 is_stmt 0 view .LVU987
 3574 0de4 2B68     		ldr	r3, [r5]
 756:boards/TMC5062_eval.c **** 	HAL.IOs->config->reset(Pins.SWSEL);
 3575              		.loc 1 756 2 view .LVU988
 3576 0de6 D4F8C402 		ldr	r0, [r4, #708]
 3577 0dea 9B68     		ldr	r3, [r3, #8]
 3578 0dec 9847     		blx	r3
 3579              	.LVL501:
 757:boards/TMC5062_eval.c **** };
 3580              		.loc 1 757 2 is_stmt 1 view .LVU989
 757:boards/TMC5062_eval.c **** };
 3581              		.loc 1 757 17 is_stmt 0 view .LVU990
 3582 0dee 2B68     		ldr	r3, [r5]
 757:boards/TMC5062_eval.c **** };
 3583              		.loc 1 757 2 view .LVU991
 3584 0df0 D4F8BC02 		ldr	r0, [r4, #700]
 3585 0df4 9B68     		ldr	r3, [r3, #8]
 758:boards/TMC5062_eval.c **** 
 3586              		.loc 1 758 1 view .LVU992
 3587 0df6 BDE87040 		pop	{r4, r5, r6, lr}
 3588              	.LCFI18:
 3589              		.cfi_restore 14
 3590              		.cfi_restore 6
 3591              		.cfi_restore 5
 3592              		.cfi_restore 4
 3593              		.cfi_def_cfa_offset 0
 757:boards/TMC5062_eval.c **** };
 3594              		.loc 1 757 2 view .LVU993
 3595 0dfa 1847     		bx	r3	@ indirect register sibling call
 3596              	.LVL502:
 3597              	.L236:
 3598              		.align	2
 3599              	.L235:
 3600 0dfc 00000000 		.word	HAL
 3601 0e00 00000000 		.word	.LANCHOR0
 3602              		.cfi_endproc
 3603              	.LFE21:
 3605              		.align	1
 3606              		.syntax unified
 3607              		.thumb
 3608              		.thumb_func
 3609              		.fpu softvfp
 3611              	configCallback:
 3612              	.LVL503:
 3613              	.LFB25:
 784:boards/TMC5062_eval.c **** 
 785:boards/TMC5062_eval.c **** static void configCallback(TMC5062TypeDef *tmc5062, ConfigState state)
 786:boards/TMC5062_eval.c **** {
 3614              		.loc 1 786 1 is_stmt 1 view -0
 3615              		.cfi_startproc
 3616              		@ args = 0, pretend = 0, frame = 0
 3617              		@ frame_needed = 0, uses_anonymous_args = 0
 787:boards/TMC5062_eval.c **** 	if(state == CONFIG_RESET)
 3618              		.loc 1 787 2 view .LVU995
 3619              		.loc 1 787 4 is_stmt 0 view .LVU996
 3620 0e04 0129     		cmp	r1, #1
 786:boards/TMC5062_eval.c **** 	if(state == CONFIG_RESET)
 3621              		.loc 1 786 1 view .LVU997
 3622 0e06 38B5     		push	{r3, r4, r5, lr}
 3623              	.LCFI19:
 3624              		.cfi_def_cfa_offset 16
 3625              		.cfi_offset 3, -16
 3626              		.cfi_offset 4, -12
 3627              		.cfi_offset 5, -8
 3628              		.cfi_offset 14, -4
 786:boards/TMC5062_eval.c **** 	if(state == CONFIG_RESET)
 3629              		.loc 1 786 1 view .LVU998
 3630 0e08 0546     		mov	r5, r0
 3631 0e0a 0C46     		mov	r4, r1
 3632              		.loc 1 787 4 view .LVU999
 3633 0e0c 0FD1     		bne	.L237
 3634              	.LVL504:
 3635              	.LBB21:
 3636              	.LBI21:
 785:boards/TMC5062_eval.c **** {
 3637              		.loc 1 785 13 is_stmt 1 discriminator 1 view .LVU1000
 3638              	.LBB22:
 3639              	.LBB23:
 788:boards/TMC5062_eval.c **** 	{	// Change hardware-preset registers here
 789:boards/TMC5062_eval.c **** 		for(uint8_t motor = 0; motor < TMC5062_MOTORS; motor++)
 3640              		.loc 1 789 26 discriminator 1 view .LVU1001
 790:boards/TMC5062_eval.c **** 			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
 3641              		.loc 1 790 4 discriminator 1 view .LVU1002
 3642 0e0e 084B     		ldr	r3, .L239
 3643 0e10 1022     		movs	r2, #16
 3644 0e12 0021     		movs	r1, #0
 3645              	.LVL505:
 3646              		.loc 1 790 4 is_stmt 0 discriminator 1 view .LVU1003
 3647 0e14 FFF7FEFF 		bl	tmc5062_writeInt
 3648              	.LVL506:
 789:boards/TMC5062_eval.c **** 			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
 3649              		.loc 1 789 50 is_stmt 1 discriminator 1 view .LVU1004
 789:boards/TMC5062_eval.c **** 			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
 3650              		.loc 1 789 26 discriminator 1 view .LVU1005
 3651              		.loc 1 790 4 discriminator 1 view .LVU1006
 3652 0e18 2846     		mov	r0, r5
 3653 0e1a 054B     		ldr	r3, .L239
 3654 0e1c 2146     		mov	r1, r4
 3655 0e1e 1822     		movs	r2, #24
 3656 0e20 FFF7FEFF 		bl	tmc5062_writeInt
 3657              	.LVL507:
 789:boards/TMC5062_eval.c **** 			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
 3658              		.loc 1 789 50 discriminator 1 view .LVU1007
 789:boards/TMC5062_eval.c **** 			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
 3659              		.loc 1 789 26 discriminator 1 view .LVU1008
 3660              	.LBE23:
 791:boards/TMC5062_eval.c **** 
 792:boards/TMC5062_eval.c **** 		// Fill missing shadow registers (hardware preset registers)
 793:boards/TMC5062_eval.c **** 		tmc5062_fillShadowRegisters(&TMC5062);
 3661              		.loc 1 793 3 discriminator 1 view .LVU1009
 3662              	.LBE22:
 3663              	.LBE21:
 794:boards/TMC5062_eval.c **** 	}
 795:boards/TMC5062_eval.c **** }
 3664              		.loc 1 795 1 is_stmt 0 discriminator 1 view .LVU1010
 3665 0e24 BDE83840 		pop	{r3, r4, r5, lr}
 3666              	.LCFI20:
 3667              		.cfi_remember_state
 3668              		.cfi_restore 14
 3669              		.cfi_restore 5
 3670              		.cfi_restore 4
 3671              		.cfi_restore 3
 3672              		.cfi_def_cfa_offset 0
 3673              	.LVL508:
 3674              	.LBB25:
 3675              	.LBB24:
 793:boards/TMC5062_eval.c **** 	}
 3676              		.loc 1 793 3 discriminator 1 view .LVU1011
 3677 0e28 0248     		ldr	r0, .L239+4
 3678 0e2a FFF7FEBF 		b	tmc5062_fillShadowRegisters
 3679              	.LVL509:
 3680              	.L237:
 3681              	.LCFI21:
 3682              		.cfi_restore_state
 793:boards/TMC5062_eval.c **** 	}
 3683              		.loc 1 793 3 discriminator 1 view .LVU1012
 3684              	.LBE24:
 3685              	.LBE25:
 3686              		.loc 1 795 1 view .LVU1013
 3687 0e2e 38BD     		pop	{r3, r4, r5, pc}
 3688              	.L240:
 3689              		.align	2
 3690              	.L239:
 3691 0e30 C8040500 		.word	328904
 3692 0e34 00000000 		.word	.LANCHOR0
 3693              		.cfi_endproc
 3694              	.LFE25:
 3696              		.align	1
 3697              		.global	tmc5062_readWrite
 3698              		.syntax unified
 3699              		.thumb
 3700              		.thumb_func
 3701              		.fpu softvfp
 3703              	tmc5062_readWrite:
 3704              	.LVL510:
 3705              	.LFB1:
  68:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 3706              		.loc 1 68 1 is_stmt 1 view -0
 3707              		.cfi_startproc
 3708              		@ args = 0, pretend = 0, frame = 0
 3709              		@ frame_needed = 0, uses_anonymous_args = 0
 3710              		@ link register save eliminated.
  69:boards/TMC5062_eval.c **** 		return 0;
 3711              		.loc 1 69 2 view .LVU1015
  68:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 3712              		.loc 1 68 1 is_stmt 0 view .LVU1016
 3713 0e38 0346     		mov	r3, r0
  69:boards/TMC5062_eval.c **** 		return 0;
 3714              		.loc 1 69 4 view .LVU1017
 3715 0e3a 012B     		cmp	r3, #1
  68:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 3716              		.loc 1 68 1 view .LVU1018
 3717 0e3c 0846     		mov	r0, r1
 3718              	.LVL511:
  68:boards/TMC5062_eval.c **** 	if(motor >= MOTORS)
 3719              		.loc 1 68 1 view .LVU1019
 3720 0e3e 1146     		mov	r1, r2
 3721              	.LVL512:
  69:boards/TMC5062_eval.c **** 		return 0;
 3722              		.loc 1 69 4 view .LVU1020
 3723 0e40 04D8     		bhi	.L242
  73:boards/TMC5062_eval.c **** }
 3724              		.loc 1 73 2 is_stmt 1 view .LVU1021
  73:boards/TMC5062_eval.c **** }
 3725              		.loc 1 73 27 is_stmt 0 view .LVU1022
 3726 0e42 034B     		ldr	r3, .L243
 3727 0e44 D3F8CC32 		ldr	r3, [r3, #716]
  73:boards/TMC5062_eval.c **** }
 3728              		.loc 1 73 9 view .LVU1023
 3729 0e48 9B68     		ldr	r3, [r3, #8]
 3730 0e4a 1847     		bx	r3
 3731              	.LVL513:
 3732              	.L242:
  74:boards/TMC5062_eval.c **** // <= SPI Wrapper
 3733              		.loc 1 74 1 view .LVU1024
 3734 0e4c 0020     		movs	r0, #0
 3735 0e4e 7047     		bx	lr
 3736              	.L244:
 3737              		.align	2
 3738              	.L243:
 3739 0e50 00000000 		.word	.LANCHOR0
 3740              		.cfi_endproc
 3741              	.LFE1:
 3743              		.align	1
 3744              		.global	TMC5062_init
 3745              		.syntax unified
 3746              		.thumb
 3747              		.thumb_func
 3748              		.fpu softvfp
 3750              	TMC5062_init:
 3751              	.LFB26:
 796:boards/TMC5062_eval.c **** 
 797:boards/TMC5062_eval.c **** void TMC5062_init(void)
 798:boards/TMC5062_eval.c **** {
 3752              		.loc 1 798 1 is_stmt 1 view -0
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 40
 3755              		@ frame_needed = 0, uses_anonymous_args = 0
 799:boards/TMC5062_eval.c **** 	TMC5062_config = Evalboards.ch1.config;
 3756              		.loc 1 799 2 view .LVU1026
 798:boards/TMC5062_eval.c **** 	TMC5062_config = Evalboards.ch1.config;
 3757              		.loc 1 798 1 is_stmt 0 view .LVU1027
 3758 0e54 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3759              	.LCFI22:
 3760              		.cfi_def_cfa_offset 24
 3761              		.cfi_offset 4, -24
 3762              		.cfi_offset 5, -20
 3763              		.cfi_offset 6, -16
 3764              		.cfi_offset 7, -12
 3765              		.cfi_offset 8, -8
 3766              		.cfi_offset 14, -4
 3767              		.loc 1 799 33 view .LVU1028
 3768 0e58 5F4C     		ldr	r4, .L246
 3769              		.loc 1 799 17 view .LVU1029
 3770 0e5a 604D     		ldr	r5, .L246+4
 800:boards/TMC5062_eval.c **** 	tmc5062_init(&TMC5062, TMC5062_config, &tmc5062_defaultRegisterResetState[0], 0, 1, 16000000);
 3771              		.loc 1 800 2 view .LVU1030
 3772 0e5c 604B     		ldr	r3, .L246+8
 799:boards/TMC5062_eval.c **** 	TMC5062_config = Evalboards.ch1.config;
 3773              		.loc 1 799 33 view .LVU1031
 3774 0e5e A169     		ldr	r1, [r4, #24]
 799:boards/TMC5062_eval.c **** 	TMC5062_config = Evalboards.ch1.config;
 3775              		.loc 1 799 17 view .LVU1032
 3776 0e60 C5F8AC12 		str	r1, [r5, #684]
 3777              		.loc 1 800 2 is_stmt 1 view .LVU1033
 798:boards/TMC5062_eval.c **** 	TMC5062_config = Evalboards.ch1.config;
 3778              		.loc 1 798 1 is_stmt 0 view .LVU1034
 3779 0e64 8CB0     		sub	sp, sp, #48
 3780              	.LCFI23:
 3781              		.cfi_def_cfa_offset 72
 3782              		.loc 1 800 2 view .LVU1035
 3783 0e66 0127     		movs	r7, #1
 3784 0e68 CDE90073 		strd	r7, r3, [sp]
 3785 0e6c 5D4A     		ldr	r2, .L246+12
 801:boards/TMC5062_eval.c **** 	tmc5062_setCallback(&TMC5062, configCallback);
 802:boards/TMC5062_eval.c **** 
 803:boards/TMC5062_eval.c **** 	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
 3786              		.loc 1 803 23 view .LVU1036
 3787 0e6e DFF8DC81 		ldr	r8, .L246+116
 800:boards/TMC5062_eval.c **** 	tmc5062_init(&TMC5062, TMC5062_config, &tmc5062_defaultRegisterResetState[0], 0, 1, 16000000);
 3788              		.loc 1 800 2 view .LVU1037
 3789 0e72 0023     		movs	r3, #0
 3790 0e74 2846     		mov	r0, r5
 3791 0e76 FFF7FEFF 		bl	tmc5062_init
 3792              	.LVL514:
 801:boards/TMC5062_eval.c **** 	tmc5062_setCallback(&TMC5062, configCallback);
 3793              		.loc 1 801 2 is_stmt 1 view .LVU1038
 3794 0e7a 5B49     		ldr	r1, .L246+16
 3795 0e7c 2846     		mov	r0, r5
 3796 0e7e FFF7FEFF 		bl	tmc5062_setCallback
 3797              	.LVL515:
 3798              		.loc 1 803 2 view .LVU1039
 3799              		.loc 1 803 23 is_stmt 0 view .LVU1040
 3800 0e82 D8F80C60 		ldr	r6, [r8, #12]
 3801              		.loc 1 803 27 view .LVU1041
 3802 0e86 7368     		ldr	r3, [r6, #4]
 804:boards/TMC5062_eval.c **** 	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
 3803              		.loc 1 804 19 view .LVU1042
 3804 0e88 03F58472 		add	r2, r3, #264
 3805              		.loc 1 804 17 view .LVU1043
 3806 0e8c C5F8B422 		str	r2, [r5, #692]
 805:boards/TMC5062_eval.c **** 	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
 3807              		.loc 1 805 19 view .LVU1044
 3808 0e90 03F59472 		add	r2, r3, #296
 3809              		.loc 1 805 17 view .LVU1045
 3810 0e94 C5F8B822 		str	r2, [r5, #696]
 806:boards/TMC5062_eval.c **** 	Pins.SWSEL     = &HAL.IOs->pins->DIO16;
 3811              		.loc 1 806 19 view .LVU1046
 3812 0e98 03F57272 		add	r2, r3, #968
 3813              		.loc 1 806 17 view .LVU1047
 3814 0e9c C5F8BC22 		str	r2, [r5, #700]
 807:boards/TMC5062_eval.c **** 	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
 3815              		.loc 1 807 19 view .LVU1048
 3816 0ea0 03F57A72 		add	r2, r3, #1000
 803:boards/TMC5062_eval.c **** 	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
 3817              		.loc 1 803 19 view .LVU1049
 3818 0ea4 03F16800 		add	r0, r3, #104
 3819              		.loc 1 807 17 view .LVU1050
 3820 0ea8 C5F8C022 		str	r2, [r5, #704]
 808:boards/TMC5062_eval.c **** 	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
 3821              		.loc 1 808 19 view .LVU1051
 3822 0eac 03F58162 		add	r2, r3, #1032
 809:boards/TMC5062_eval.c **** 	Pins.SWION     = &HAL.IOs->pins->DIO19;
 3823              		.loc 1 809 19 view .LVU1052
 3824 0eb0 03F58563 		add	r3, r3, #1064
 3825              		.loc 1 809 17 view .LVU1053
 3826 0eb4 C5F8C832 		str	r3, [r5, #712]
 810:boards/TMC5062_eval.c **** 
 811:boards/TMC5062_eval.c **** 	HAL.IOs->config->toOutput(Pins.DRV_ENN);
 3827              		.loc 1 811 17 view .LVU1054
 3828 0eb8 3368     		ldr	r3, [r6]
 808:boards/TMC5062_eval.c **** 	Pins.SWION     = &HAL.IOs->pins->DIO19;
 3829              		.loc 1 808 17 view .LVU1055
 3830 0eba C5F8C422 		str	r2, [r5, #708]
 3831              		.loc 1 811 2 view .LVU1056
 3832 0ebe DB68     		ldr	r3, [r3, #12]
 803:boards/TMC5062_eval.c **** 	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
 3833              		.loc 1 803 17 view .LVU1057
 3834 0ec0 C5F8B002 		str	r0, [r5, #688]
 804:boards/TMC5062_eval.c **** 	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
 3835              		.loc 1 804 2 is_stmt 1 view .LVU1058
 805:boards/TMC5062_eval.c **** 	Pins.SWSEL     = &HAL.IOs->pins->DIO16;
 3836              		.loc 1 805 2 view .LVU1059
 806:boards/TMC5062_eval.c **** 	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
 3837              		.loc 1 806 2 view .LVU1060
 807:boards/TMC5062_eval.c **** 	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
 3838              		.loc 1 807 2 view .LVU1061
 808:boards/TMC5062_eval.c **** 	Pins.SWION     = &HAL.IOs->pins->DIO19;
 3839              		.loc 1 808 2 view .LVU1062
 809:boards/TMC5062_eval.c **** 
 3840              		.loc 1 809 2 view .LVU1063
 3841              		.loc 1 811 2 view .LVU1064
 3842 0ec4 9847     		blx	r3
 3843              	.LVL516:
 812:boards/TMC5062_eval.c **** 	HAL.IOs->config->toOutput(Pins.SWSEL);
 3844              		.loc 1 812 2 view .LVU1065
 3845              		.loc 1 812 17 is_stmt 0 view .LVU1066
 3846 0ec6 3368     		ldr	r3, [r6]
 3847              		.loc 1 812 2 view .LVU1067
 3848 0ec8 D5F8BC02 		ldr	r0, [r5, #700]
 3849 0ecc DB68     		ldr	r3, [r3, #12]
 3850 0ece 9847     		blx	r3
 3851              	.LVL517:
 813:boards/TMC5062_eval.c **** 
 814:boards/TMC5062_eval.c **** 	HAL.IOs->config->setLow(Pins.SWSEL);
 3852              		.loc 1 814 2 is_stmt 1 view .LVU1068
 3853              		.loc 1 814 17 is_stmt 0 view .LVU1069
 3854 0ed0 3368     		ldr	r3, [r6]
 3855              		.loc 1 814 2 view .LVU1070
 3856 0ed2 D5F8BC02 		ldr	r0, [r5, #700]
 3857 0ed6 9B69     		ldr	r3, [r3, #24]
 3858 0ed8 9847     		blx	r3
 3859              	.LVL518:
 815:boards/TMC5062_eval.c **** 
 816:boards/TMC5062_eval.c **** 	HAL.IOs->config->toInput(Pins.INT_ENCA);
 3860              		.loc 1 816 2 is_stmt 1 view .LVU1071
 3861              		.loc 1 816 17 is_stmt 0 view .LVU1072
 3862 0eda 3368     		ldr	r3, [r6]
 3863              		.loc 1 816 2 view .LVU1073
 3864 0edc D5F8B402 		ldr	r0, [r5, #692]
 3865 0ee0 1B69     		ldr	r3, [r3, #16]
 3866 0ee2 9847     		blx	r3
 3867              	.LVL519:
 817:boards/TMC5062_eval.c **** 	HAL.IOs->config->toInput(Pins.PP_ENCB);
 3868              		.loc 1 817 2 is_stmt 1 view .LVU1074
 3869              		.loc 1 817 17 is_stmt 0 view .LVU1075
 3870 0ee4 3368     		ldr	r3, [r6]
 3871              		.loc 1 817 2 view .LVU1076
 3872 0ee6 D5F8B802 		ldr	r0, [r5, #696]
 3873 0eea 1B69     		ldr	r3, [r3, #16]
 3874 0eec 9847     		blx	r3
 3875              	.LVL520:
 818:boards/TMC5062_eval.c **** 	HAL.IOs->config->toInput(Pins.SWION);
 3876              		.loc 1 818 2 is_stmt 1 view .LVU1077
 3877              		.loc 1 818 17 is_stmt 0 view .LVU1078
 3878 0eee 3368     		ldr	r3, [r6]
 3879              		.loc 1 818 2 view .LVU1079
 3880 0ef0 D5F8C802 		ldr	r0, [r5, #712]
 3881 0ef4 1B69     		ldr	r3, [r3, #16]
 3882 0ef6 9847     		blx	r3
 3883              	.LVL521:
 819:boards/TMC5062_eval.c **** 	HAL.IOs->config->toInput(Pins.SWIOP1);
 3884              		.loc 1 819 2 is_stmt 1 view .LVU1080
 3885              		.loc 1 819 17 is_stmt 0 view .LVU1081
 3886 0ef8 3368     		ldr	r3, [r6]
 3887              		.loc 1 819 2 view .LVU1082
 3888 0efa D5F8C002 		ldr	r0, [r5, #704]
 3889 0efe 1B69     		ldr	r3, [r3, #16]
 3890 0f00 9847     		blx	r3
 3891              	.LVL522:
 820:boards/TMC5062_eval.c **** 	HAL.IOs->config->toInput(Pins.SWIOP2);
 3892              		.loc 1 820 2 is_stmt 1 view .LVU1083
 3893              		.loc 1 820 17 is_stmt 0 view .LVU1084
 3894 0f02 3368     		ldr	r3, [r6]
 3895              		.loc 1 820 2 view .LVU1085
 3896 0f04 D5F8C402 		ldr	r0, [r5, #708]
 3897 0f08 1B69     		ldr	r3, [r3, #16]
 3898 0f0a 9847     		blx	r3
 3899              	.LVL523:
 821:boards/TMC5062_eval.c **** 
 822:boards/TMC5062_eval.c **** 	TMC5062_SPIChannel = &HAL.SPI->ch1;
 3900              		.loc 1 822 2 is_stmt 1 view .LVU1086
 823:boards/TMC5062_eval.c **** 	TMC5062_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 3901              		.loc 1 823 28 is_stmt 0 view .LVU1087
 3902 0f0c 7368     		ldr	r3, [r6, #4]
 822:boards/TMC5062_eval.c **** 	TMC5062_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 3903              		.loc 1 822 27 view .LVU1088
 3904 0f0e D8F81020 		ldr	r2, [r8, #16]
 822:boards/TMC5062_eval.c **** 	TMC5062_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 3905              		.loc 1 822 21 view .LVU1089
 3906 0f12 C5F8CC22 		str	r2, [r5, #716]
 3907              		.loc 1 823 2 is_stmt 1 view .LVU1090
 3908              		.loc 1 823 28 is_stmt 0 view .LVU1091
 3909 0f16 03F53273 		add	r3, r3, #712
 3910              		.loc 1 823 26 view .LVU1092
 3911 0f1a 5360     		str	r3, [r2, #4]
 824:boards/TMC5062_eval.c **** 
 825:boards/TMC5062_eval.c **** 	TMC5062_MicroStepTable microStepTable;
 3912              		.loc 1 825 2 is_stmt 1 view .LVU1093
 826:boards/TMC5062_eval.c **** 	microStepTable.LUT_0  = 0xAAAAB554;
 3913              		.loc 1 826 2 view .LVU1094
 827:boards/TMC5062_eval.c **** 	microStepTable.LUT_1  = 0x4A9554AA;
 3914              		.loc 1 827 2 view .LVU1095
 828:boards/TMC5062_eval.c **** 	microStepTable.LUT_2  = 0x24492929;
 3915              		.loc 1 828 2 view .LVU1096
 829:boards/TMC5062_eval.c **** 	microStepTable.LUT_3  = 0x10104222;
 3916              		.loc 1 829 2 view .LVU1097
 830:boards/TMC5062_eval.c **** 	microStepTable.LUT_4  = 0xFBFFFFFF;
 3917              		.loc 1 830 2 view .LVU1098
 831:boards/TMC5062_eval.c **** 	microStepTable.LUT_5  = 0xB5BB777D;
 3918              		.loc 1 831 2 view .LVU1099
 832:boards/TMC5062_eval.c **** 	microStepTable.LUT_6  = 0x49295556;
 3919              		.loc 1 832 2 view .LVU1100
 833:boards/TMC5062_eval.c **** 	microStepTable.LUT_7  = 0x00404222;
 3920              		.loc 1 833 2 view .LVU1101
 834:boards/TMC5062_eval.c **** 
 835:boards/TMC5062_eval.c **** 	microStepTable.X1  = 0x80;
 3921              		.loc 1 835 2 view .LVU1102
 836:boards/TMC5062_eval.c **** 	microStepTable.X2  = 0xFF;
 3922              		.loc 1 836 2 view .LVU1103
 837:boards/TMC5062_eval.c **** 	microStepTable.X3  = 0xFF;
 3923              		.loc 1 837 2 view .LVU1104
 838:boards/TMC5062_eval.c **** 	microStepTable.W0  = 2;
 3924              		.loc 1 838 2 view .LVU1105
 839:boards/TMC5062_eval.c **** 	microStepTable.W1  = 1;
 3925              		.loc 1 839 2 view .LVU1106
 840:boards/TMC5062_eval.c **** 	microStepTable.W2  = 1;
 3926              		.loc 1 840 2 view .LVU1107
 841:boards/TMC5062_eval.c **** 	microStepTable.W3  = 1;
 3927              		.loc 1 841 2 view .LVU1108
 842:boards/TMC5062_eval.c **** 
 843:boards/TMC5062_eval.c **** 	microStepTable.START_SIN    = 0x00;
 3928              		.loc 1 843 2 view .LVU1109
 844:boards/TMC5062_eval.c **** 	microStepTable.START_SIN90  = 0xF7;
 3929              		.loc 1 844 2 view .LVU1110
 826:boards/TMC5062_eval.c **** 	microStepTable.LUT_1  = 0x4A9554AA;
 3930              		.loc 1 826 24 is_stmt 0 view .LVU1111
 3931 0f1c 334B     		ldr	r3, .L246+20
 3932 0f1e 0293     		str	r3, [sp, #8]
 827:boards/TMC5062_eval.c **** 	microStepTable.LUT_2  = 0x24492929;
 3933              		.loc 1 827 24 view .LVU1112
 3934 0f20 03F19F23 		add	r3, r3, #-1627349248
 3935 0f24 03F56A03 		add	r3, r3, #15335424
 3936 0f28 5633     		adds	r3, r3, #86
 3937 0f2a 0393     		str	r3, [sp, #12]
 829:boards/TMC5062_eval.c **** 	microStepTable.LUT_4  = 0xFBFFFFFF;
 3938              		.loc 1 829 24 view .LVU1113
 3939 0f2c 304A     		ldr	r2, .L246+24
 3940 0f2e 314B     		ldr	r3, .L246+28
 835:boards/TMC5062_eval.c **** 	microStepTable.X2  = 0xFF;
 3941              		.loc 1 835 21 view .LVU1114
 3942 0f30 3148     		ldr	r0, .L246+32
 829:boards/TMC5062_eval.c **** 	microStepTable.LUT_4  = 0xFBFFFFFF;
 3943              		.loc 1 829 24 view .LVU1115
 3944 0f32 CDE90423 		strd	r2, r3, [sp, #16]
 831:boards/TMC5062_eval.c **** 	microStepTable.LUT_6  = 0x49295556;
 3945              		.loc 1 831 24 view .LVU1116
 3946 0f36 314B     		ldr	r3, .L246+36
 3947 0f38 6FF08061 		mvn	r1, #67108864
 3948 0f3c CDE90613 		strd	r1, r3, [sp, #24]
 832:boards/TMC5062_eval.c **** 	microStepTable.LUT_7  = 0x00404222;
 3949              		.loc 1 832 24 view .LVU1117
 3950 0f40 A3F1D943 		sub	r3, r3, #1820327936
 3951 0f44 A3F59113 		sub	r3, r3, #1187840
 3952 0f48 A3F22723 		subw	r3, r3, #551
 3953 0f4c 0893     		str	r3, [sp, #32]
 835:boards/TMC5062_eval.c **** 	microStepTable.X2  = 0xFF;
 3954              		.loc 1 835 21 view .LVU1118
 3955 0f4e 2C4B     		ldr	r3, .L246+40
 845:boards/TMC5062_eval.c **** 
 846:boards/TMC5062_eval.c **** 	setMicroStepTable(&TMC5062, 0, &microStepTable);
 3956              		.loc 1 846 2 view .LVU1119
 3957 0f50 02AA     		add	r2, sp, #8
 835:boards/TMC5062_eval.c **** 	microStepTable.X2  = 0xFF;
 3958              		.loc 1 835 21 view .LVU1120
 3959 0f52 CDE90903 		strd	r0, r3, [sp, #36]
 3960              		.loc 1 846 2 view .LVU1121
 3961 0f56 0021     		movs	r1, #0
 843:boards/TMC5062_eval.c **** 	microStepTable.START_SIN90  = 0xF7;
 3962              		.loc 1 843 30 view .LVU1122
 3963 0f58 4FF47743 		mov	r3, #63232
 3964              		.loc 1 846 2 view .LVU1123
 3965 0f5c 2846     		mov	r0, r5
 843:boards/TMC5062_eval.c **** 	microStepTable.START_SIN90  = 0xF7;
 3966              		.loc 1 843 30 view .LVU1124
 3967 0f5e ADF82C30 		strh	r3, [sp, #44]	@ movhi
 3968              		.loc 1 846 2 is_stmt 1 view .LVU1125
 3969 0f62 FFF7FEFF 		bl	setMicroStepTable
 3970              	.LVL524:
 847:boards/TMC5062_eval.c **** 	setMicroStepTable(&TMC5062, 1, &microStepTable);
 3971              		.loc 1 847 2 view .LVU1126
 3972 0f66 02AA     		add	r2, sp, #8
 3973 0f68 3946     		mov	r1, r7
 3974 0f6a 2846     		mov	r0, r5
 3975 0f6c FFF7FEFF 		bl	setMicroStepTable
 3976              	.LVL525:
 848:boards/TMC5062_eval.c **** 
 849:boards/TMC5062_eval.c **** 	Evalboards.ch1.config->reset        = reset;
 3977              		.loc 1 849 2 view .LVU1127
 3978              		.loc 1 849 16 is_stmt 0 view .LVU1128
 3979 0f70 A369     		ldr	r3, [r4, #24]
 3980              		.loc 1 849 38 view .LVU1129
 3981 0f72 244A     		ldr	r2, .L246+44
 3982 0f74 C3F80422 		str	r2, [r3, #516]
 850:boards/TMC5062_eval.c **** 	Evalboards.ch1.config->restore      = restore;
 3983              		.loc 1 850 2 is_stmt 1 view .LVU1130
 3984              		.loc 1 850 38 is_stmt 0 view .LVU1131
 3985 0f78 234A     		ldr	r2, .L246+48
 851:boards/TMC5062_eval.c **** 	Evalboards.ch1.config->state        = CONFIG_RESET;
 3986              		.loc 1 851 38 view .LVU1132
 3987 0f7a 1F80     		strh	r7, [r3]	@ movhi
 850:boards/TMC5062_eval.c **** 	Evalboards.ch1.config->restore      = restore;
 3988              		.loc 1 850 38 view .LVU1133
 3989 0f7c C3F80822 		str	r2, [r3, #520]
 3990              		.loc 1 851 2 is_stmt 1 view .LVU1134
 852:boards/TMC5062_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 3991              		.loc 1 852 2 view .LVU1135
 853:boards/TMC5062_eval.c **** 
 854:boards/TMC5062_eval.c **** 	Evalboards.ch1.rotate               = rotate;
 3992              		.loc 1 854 2 view .LVU1136
 3993              		.loc 1 854 38 is_stmt 0 view .LVU1137
 3994 0f80 224B     		ldr	r3, .L246+52
 3995 0f82 6362     		str	r3, [r4, #36]
 855:boards/TMC5062_eval.c **** 	Evalboards.ch1.right                = right;
 3996              		.loc 1 855 2 is_stmt 1 view .LVU1138
 3997              		.loc 1 855 38 is_stmt 0 view .LVU1139
 3998 0f84 224B     		ldr	r3, .L246+56
 3999 0f86 2362     		str	r3, [r4, #32]
 856:boards/TMC5062_eval.c **** 	Evalboards.ch1.left                 = left;
 4000              		.loc 1 856 2 is_stmt 1 view .LVU1140
 4001              		.loc 1 856 38 is_stmt 0 view .LVU1141
 4002 0f88 224B     		ldr	r3, .L246+60
 4003 0f8a E361     		str	r3, [r4, #28]
 857:boards/TMC5062_eval.c **** 	Evalboards.ch1.stop                 = stop;
 4004              		.loc 1 857 2 is_stmt 1 view .LVU1142
 4005              		.loc 1 857 38 is_stmt 0 view .LVU1143
 4006 0f8c 224B     		ldr	r3, .L246+64
 4007 0f8e A362     		str	r3, [r4, #40]
 858:boards/TMC5062_eval.c **** 	Evalboards.ch1.GAP                  = GAP;
 4008              		.loc 1 858 2 is_stmt 1 view .LVU1144
 4009              		.loc 1 858 38 is_stmt 0 view .LVU1145
 4010 0f90 224B     		ldr	r3, .L246+68
 4011 0f92 E363     		str	r3, [r4, #60]
 859:boards/TMC5062_eval.c **** 	Evalboards.ch1.SAP                  = SAP;
 4012              		.loc 1 859 2 is_stmt 1 view .LVU1146
 4013              		.loc 1 859 38 is_stmt 0 view .LVU1147
 4014 0f94 224B     		ldr	r3, .L246+72
 4015 0f96 A363     		str	r3, [r4, #56]
 860:boards/TMC5062_eval.c **** 	Evalboards.ch1.moveTo               = moveTo;
 4016              		.loc 1 860 2 is_stmt 1 view .LVU1148
 4017              		.loc 1 860 38 is_stmt 0 view .LVU1149
 4018 0f98 224B     		ldr	r3, .L246+76
 4019 0f9a E362     		str	r3, [r4, #44]
 861:boards/TMC5062_eval.c **** 	Evalboards.ch1.moveBy               = moveBy;
 4020              		.loc 1 861 2 is_stmt 1 view .LVU1150
 4021              		.loc 1 861 38 is_stmt 0 view .LVU1151
 4022 0f9c 224B     		ldr	r3, .L246+80
 4023 0f9e 2363     		str	r3, [r4, #48]
 862:boards/TMC5062_eval.c **** 	Evalboards.ch1.writeRegister        = writeRegister;
 4024              		.loc 1 862 2 is_stmt 1 view .LVU1152
 4025              		.loc 1 862 38 is_stmt 0 view .LVU1153
 4026 0fa0 224B     		ldr	r3, .L246+84
 4027 0fa2 E364     		str	r3, [r4, #76]
 863:boards/TMC5062_eval.c **** 	Evalboards.ch1.readRegister         = readRegister;
 4028              		.loc 1 863 2 is_stmt 1 view .LVU1154
 4029              		.loc 1 863 38 is_stmt 0 view .LVU1155
 4030 0fa4 224B     		ldr	r3, .L246+88
 4031 0fa6 A364     		str	r3, [r4, #72]
 864:boards/TMC5062_eval.c **** 	Evalboards.ch1.periodicJob          = periodicJob;
 4032              		.loc 1 864 2 is_stmt 1 view .LVU1156
 4033              		.loc 1 864 38 is_stmt 0 view .LVU1157
 4034 0fa8 224B     		ldr	r3, .L246+92
 4035 0faa A365     		str	r3, [r4, #88]
 865:boards/TMC5062_eval.c **** 	Evalboards.ch1.userFunction         = userFunction;
 4036              		.loc 1 865 2 is_stmt 1 view .LVU1158
 4037              		.loc 1 865 38 is_stmt 0 view .LVU1159
 4038 0fac 224B     		ldr	r3, .L246+96
 4039 0fae 6365     		str	r3, [r4, #84]
 866:boards/TMC5062_eval.c **** 	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
 4040              		.loc 1 866 2 is_stmt 1 view .LVU1160
 4041              		.loc 1 866 38 is_stmt 0 view .LVU1161
 4042 0fb0 224B     		ldr	r3, .L246+100
 4043 0fb2 2365     		str	r3, [r4, #80]
 867:boards/TMC5062_eval.c **** 	Evalboards.ch1.enableDriver         = enableDriver;
 4044              		.loc 1 867 2 is_stmt 1 view .LVU1162
 4045              		.loc 1 867 38 is_stmt 0 view .LVU1163
 4046 0fb4 224B     		ldr	r3, .L246+104
 4047 0fb6 6366     		str	r3, [r4, #100]
 868:boards/TMC5062_eval.c **** 	Evalboards.ch1.checkErrors          = checkErrors;
 4048              		.loc 1 868 2 is_stmt 1 view .LVU1164
 4049              		.loc 1 868 38 is_stmt 0 view .LVU1165
 4050 0fb8 224B     		ldr	r3, .L246+108
 4051 0fba 2366     		str	r3, [r4, #96]
 869:boards/TMC5062_eval.c **** 	Evalboards.ch1.numberOfMotors       = MOTORS;
 4052              		.loc 1 869 2 is_stmt 1 view .LVU1166
 4053              		.loc 1 869 38 is_stmt 0 view .LVU1167
 4054 0fbc 0223     		movs	r3, #2
 4055 0fbe 2375     		strb	r3, [r4, #20]
 870:boards/TMC5062_eval.c **** 	Evalboards.ch1.VMMin                = VM_MIN;
 4056              		.loc 1 870 2 is_stmt 1 view .LVU1168
 871:boards/TMC5062_eval.c **** 	Evalboards.ch1.VMMax                = VM_MAX;
 4057              		.loc 1 871 38 is_stmt 0 view .LVU1169
 4058 0fc0 3225     		movs	r5, #50
 4059 0fc2 DE23     		movs	r3, #222
 4060 0fc4 C4E90335 		strd	r3, r5, [r4, #12]
 872:boards/TMC5062_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4061              		.loc 1 872 2 is_stmt 1 view .LVU1170
 873:boards/TMC5062_eval.c **** 
 874:boards/TMC5062_eval.c **** 	enableDriver(DRIVER_ENABLE);
 4062              		.loc 1 874 2 is_stmt 0 view .LVU1171
 4063 0fc8 3846     		mov	r0, r7
 872:boards/TMC5062_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4064              		.loc 1 872 38 view .LVU1172
 4065 0fca 1F4B     		ldr	r3, .L246+112
 4066 0fcc E365     		str	r3, [r4, #92]
 4067              		.loc 1 874 2 is_stmt 1 view .LVU1173
 4068 0fce FFF7C7FE 		bl	enableDriver
 4069              	.LVL526:
 875:boards/TMC5062_eval.c **** };
 4070              		.loc 1 875 1 is_stmt 0 view .LVU1174
 4071 0fd2 0CB0     		add	sp, sp, #48
 4072              	.LCFI24:
 4073              		.cfi_def_cfa_offset 24
 4074              		@ sp needed
 4075 0fd4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4076              	.L247:
 4077              		.align	2
 4078              	.L246:
 4079 0fd8 00000000 		.word	Evalboards
 4080 0fdc 00000000 		.word	.LANCHOR0
 4081 0fe0 0024F400 		.word	16000000
 4082 0fe4 00000000 		.word	.LANCHOR1
 4083 0fe8 00000000 		.word	configCallback
 4084 0fec 54B5AAAA 		.word	-1431653036
 4085 0ff0 29294924 		.word	608774441
 4086 0ff4 22421010 		.word	269500962
 4087 0ff8 22424000 		.word	4211234
 4088 0ffc 7D77BBB5 		.word	-1246005379
 4089 1000 80FFFF56 		.word	1459617664
 4090 1004 00000000 		.word	reset
 4091 1008 00000000 		.word	restore
 4092 100c 00000000 		.word	rotate
 4093 1010 00000000 		.word	right
 4094 1014 00000000 		.word	left
 4095 1018 00000000 		.word	stop
 4096 101c 00000000 		.word	GAP
 4097 1020 00000000 		.word	SAP
 4098 1024 00000000 		.word	moveTo
 4099 1028 00000000 		.word	moveBy
 4100 102c 00000000 		.word	writeRegister
 4101 1030 00000000 		.word	readRegister
 4102 1034 00000000 		.word	periodicJob
 4103 1038 00000000 		.word	userFunction
 4104 103c 00000000 		.word	getMeasuredSpeed
 4105 1040 00000000 		.word	enableDriver
 4106 1044 00000000 		.word	checkErrors
 4107 1048 00000000 		.word	deInit
 4108 104c 00000000 		.word	HAL
 4109              		.cfi_endproc
 4110              	.LFE26:
 4112              		.comm	TMCMotionController,532,4
 4113              		.comm	TMCDriver,532,4
 4114              		.comm	Evalboards,244,4
 4115              		.comm	VitalSignsMonitor,20,4
 4116              		.comm	hwid,1,1
 4117              		.comm	HAL,48,4
 4118              		.comm	UART,40,4
 4119              		.comm	Timer,16,4
 4120              		.comm	WLAN,36,4
 4121              		.comm	RS232,36,4
 4122              		.comm	LEDs,28,4
 4123              		.comm	USB,36,4
 4124              		.comm	uart0_interrupt,1,1
 4125              		.comm	ADCs,32,4
 4126              		.comm	SPI,44,4
 4127              		.comm	IOMap,2088,4
 4128              		.comm	IOs,52,4
 4129              		.comm	Cpu,8,4
 4130              		.section	.rodata
 4131              		.align	2
 4132              		.set	.LANCHOR1,. + 0
 4135              	tmc5062_defaultRegisterResetState:
 4136 0000 00000000 		.word	0
 4137 0004 00000000 		.word	0
 4138 0008 00000000 		.word	0
 4139 000c 00000000 		.word	0
 4140 0010 00000000 		.word	0
 4141 0014 00000000 		.word	0
 4142 0018 00000000 		.word	0
 4143 001c 00000000 		.word	0
 4144 0020 00000000 		.word	0
 4145 0024 00000000 		.word	0
 4146 0028 00000000 		.word	0
 4147 002c 00000000 		.word	0
 4148 0030 00000000 		.word	0
 4149 0034 00000000 		.word	0
 4150 0038 00000000 		.word	0
 4151 003c 00000000 		.word	0
 4152 0040 00000000 		.word	0
 4153 0044 00000000 		.word	0
 4154 0048 00000000 		.word	0
 4155 004c 00000000 		.word	0
 4156 0050 00000000 		.word	0
 4157 0054 00000000 		.word	0
 4158 0058 00000000 		.word	0
 4159 005c 00000000 		.word	0
 4160 0060 00000000 		.word	0
 4161 0064 00000000 		.word	0
 4162 0068 00000000 		.word	0
 4163 006c 00000000 		.word	0
 4164 0070 00000000 		.word	0
 4165 0074 00000000 		.word	0
 4166 0078 00000000 		.word	0
 4167 007c 00000000 		.word	0
 4168 0080 00000000 		.word	0
 4169 0084 00000000 		.word	0
 4170 0088 00000000 		.word	0
 4171 008c 00000000 		.word	0
 4172 0090 00000000 		.word	0
 4173 0094 00000000 		.word	0
 4174 0098 00000000 		.word	0
 4175 009c 00000000 		.word	0
 4176 00a0 00000000 		.word	0
 4177 00a4 00000000 		.word	0
 4178 00a8 00000000 		.word	0
 4179 00ac 00000000 		.word	0
 4180 00b0 00000000 		.word	0
 4181 00b4 00000000 		.word	0
 4182 00b8 00000000 		.word	0
 4183 00bc 00000000 		.word	0
 4184 00c0 03170700 		.word	464643
 4185 00c4 00000000 		.word	0
 4186 00c8 FFFFFF00 		.word	16777215
 4187 00cc 00000000 		.word	0
 4188 00d0 00000000 		.word	0
 4189 00d4 00000000 		.word	0
 4190 00d8 00000000 		.word	0
 4191 00dc 00000000 		.word	0
 4192 00e0 00000000 		.word	0
 4193 00e4 00000000 		.word	0
 4194 00e8 00000100 		.word	65536
 4195 00ec 00000000 		.word	0
 4196 00f0 00000000 		.word	0
 4197 00f4 00000000 		.word	0
 4198 00f8 00000000 		.word	0
 4199 00fc 00000000 		.word	0
 4200 0100 00000000 		.word	0
 4201 0104 00000000 		.word	0
 4202 0108 00000000 		.word	0
 4203 010c 00000000 		.word	0
 4204 0110 00000000 		.word	0
 4205 0114 00000000 		.word	0
 4206 0118 00000000 		.word	0
 4207 011c 00000000 		.word	0
 4208 0120 00000000 		.word	0
 4209 0124 00000000 		.word	0
 4210 0128 00000000 		.word	0
 4211 012c 00000000 		.word	0
 4212 0130 00000000 		.word	0
 4213 0134 00000000 		.word	0
 4214 0138 00000000 		.word	0
 4215 013c 00000000 		.word	0
 4216 0140 03170700 		.word	464643
 4217 0144 00000000 		.word	0
 4218 0148 FFFFFF00 		.word	16777215
 4219 014c 00000000 		.word	0
 4220 0150 00000000 		.word	0
 4221 0154 00000000 		.word	0
 4222 0158 00000000 		.word	0
 4223 015c 00000000 		.word	0
 4224 0160 00000000 		.word	0
 4225 0164 00000000 		.word	0
 4226 0168 00000100 		.word	65536
 4227 016c 00000000 		.word	0
 4228 0170 00000000 		.word	0
 4229 0174 00000000 		.word	0
 4230 0178 00000000 		.word	0
 4231 017c 00000000 		.word	0
 4232 0180 00000000 		.word	0
 4233 0184 00000000 		.word	0
 4234 0188 00000000 		.word	0
 4235 018c 00000000 		.word	0
 4236 0190 00000000 		.word	0
 4237 0194 00000000 		.word	0
 4238 0198 00000000 		.word	0
 4239 019c 00000000 		.word	0
 4240 01a0 00000000 		.word	0
 4241 01a4 00000000 		.word	0
 4242 01a8 00000000 		.word	0
 4243 01ac 00000000 		.word	0
 4244 01b0 D5010100 		.word	66005
 4245 01b4 00000000 		.word	0
 4246 01b8 00000000 		.word	0
 4247 01bc 00000000 		.word	0
 4248 01c0 00000000 		.word	0
 4249 01c4 00000000 		.word	0
 4250 01c8 00000000 		.word	0
 4251 01cc 00000000 		.word	0
 4252 01d0 00000000 		.word	0
 4253 01d4 00000000 		.word	0
 4254 01d8 00000000 		.word	0
 4255 01dc 00000000 		.word	0
 4256 01e0 00000000 		.word	0
 4257 01e4 00000000 		.word	0
 4258 01e8 00000000 		.word	0
 4259 01ec 00000000 		.word	0
 4260 01f0 D5010100 		.word	66005
 4261 01f4 00000000 		.word	0
 4262 01f8 00000000 		.word	0
 4263 01fc 00000000 		.word	0
 4264              		.bss
 4265              		.align	2
 4266              		.set	.LANCHOR0,. + 0
 4269              	TMC5062:
 4270 0000 00000000 		.space	676
 4270      00000000 
 4270      00000000 
 4270      00000000 
 4270      00000000 
 4273              	vMaxPosMode:
 4274 02a4 00000000 		.space	8
 4274      00000000 
 4277              	TMC5062_config:
 4278 02ac 00000000 		.space	4
 4281              	Pins:
 4282 02b0 00000000 		.space	28
 4282      00000000 
 4282      00000000 
 4282      00000000 
 4282      00000000 
 4285              	TMC5062_SPIChannel:
 4286 02cc 00000000 		.space	4
 4289              	ADCValue:
 4290 02d0 00000000 		.space	12
 4290      00000000 
 4290      00000000 
 4291              		.text
 4292              	.Letext0:
 4293              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 4294              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4295              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4296              		.file 5 "TMC-API/tmc/helpers/Types.h"
 4297              		.file 6 "TMC-API/tmc/helpers/Config.h"
 4298              		.file 7 "TMC-API/tmc/helpers/RegisterAccess.h"
 4299              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4300              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4301              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4302              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4303              		.file 12 "TMC-API/tmc/helpers/API_Header.h"
 4304              		.file 13 "hal/Landungsbruecke/freescale/MK20D10.h"
 4305              		.file 14 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 4306              		.file 15 "./hal/Landungsbruecke/freescale/Cpu.h"
 4307              		.file 16 "./hal/IOs.h"
 4308              		.file 17 "./hal/IOMap.h"
 4309              		.file 18 "./hal/SPI.h"
 4310              		.file 19 "./hal/ADCs.h"
 4311              		.file 20 "./hal/RXTX.h"
 4312              		.file 21 "./hal/USB.h"
 4313              		.file 22 "./hal/LEDs.h"
 4314              		.file 23 "./hal/RS232.h"
 4315              		.file 24 "./hal/WLAN.h"
 4316              		.file 25 "./hal/Timer.h"
 4317              		.file 26 "./hal/UART.h"
 4318              		.file 27 "./hal/HAL.h"
 4319              		.file 28 "./tmc/VitalSignsMonitor.h"
 4320              		.file 29 "boards/Board.h"
 4321              		.file 30 "boards/TMCDriver.h"
 4322              		.file 31 "boards/TMCMotionController.h"
 4323              		.file 32 "TMC-API/tmc/ic/TMC5062/TMC5062.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC5062_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:22     .text:00000000 getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:54     .text:00000018 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:58     .text:0000001c $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:64     .text:0000001c checkErrors
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:83     .text:00000024 $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:87     .text:00000028 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:93     .text:00000028 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:114    .text:00000030 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:118    .text:00000034 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:124    .text:00000034 readInt
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:149    .text:00000040 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:153    .text:00000044 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:159    .text:00000044 readRegister
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:196    .text:00000052 readField
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:240    .text:00000068 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:244    .text:0000006c $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:250    .text:0000006c writeInt
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:279    .text:00000078 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:283    .text:0000007c $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:289    .text:0000007c writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:314    .text:00000080 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:393    .text:000000d0 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:397    .text:000000d4 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:403    .text:000000d4 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:462    .text:000000f6 rotate
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:540    .text:0000014c $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:544    .text:00000150 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:550    .text:00000150 stop
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:573    .text:00000154 left
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:598    .text:00000158 right
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:620    .text:0000015a writeField
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:690    .text:00000190 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:694    .text:00000194 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:700    .text:00000194 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:760    .text:000001c8 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:833    .text:00000258 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:841    .text:00000262 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:871    .text:0000029e $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:1691   .text:000005e8 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:1695   .text:000005ec $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:1864   .text:000006a8 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:1872   .text:000006b0 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:2378   .text:00000934 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:2383   .text:00000938 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3109   .text:00000cae SAP
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3149   .text:00000cc2 GAP
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3179   .text:00000ccc restore
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3194   .text:00000cd4 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3198   .text:00000cd8 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3204   .text:00000cd8 reset
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3267   .text:00000cfc $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3271   .text:00000d00 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3277   .text:00000d00 userFunction
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3407   .text:00000d58 $d
                            *COM*:00000030 HAL
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3412   .text:00000d60 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3418   .text:00000d60 enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3494   .text:00000d98 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3500   .text:00000da4 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3506   .text:00000da4 deInit
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3600   .text:00000dfc $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3605   .text:00000e04 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3611   .text:00000e04 configCallback
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3691   .text:00000e30 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3696   .text:00000e38 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3703   .text:00000e38 tmc5062_readWrite
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3739   .text:00000e50 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3743   .text:00000e54 $t
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:3750   .text:00000e54 TMC5062_init
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4079   .text:00000fd8 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000014 VitalSignsMonitor
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000010 Timer
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4131   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4135   .rodata:00000000 tmc5062_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4265   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4269   .bss:00000000 TMC5062
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4273   .bss:000002a4 vMaxPosMode
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4277   .bss:000002ac TMC5062_config
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4281   .bss:000002b0 Pins
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4285   .bss:000002cc TMC5062_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccbQe4hm.s:4289   .bss:000002d0 ADCValue

UNDEFINED SYMBOLS
tmc5062_periodicJob
tmc5062_readInt
tmc5062_writeInt
tmc5062_restore
tmc5062_reset
tmc5062_fillShadowRegisters
tmc5062_init
tmc5062_setCallback
setMicroStepTable
