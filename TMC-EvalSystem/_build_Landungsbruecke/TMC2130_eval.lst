   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC2130_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	deInit:
  23              	.LFB21:
  24              		.file 1 "boards/TMC2130_eval.c"
   1:boards/TMC2130_eval.c **** #include "tmc/StepDir.h"
   2:boards/TMC2130_eval.c **** #include "Board.h"
   3:boards/TMC2130_eval.c **** #include "tmc/ic/TMC2130/TMC2130.h"
   4:boards/TMC2130_eval.c **** 
   5:boards/TMC2130_eval.c **** #define TMC2130_EVAL_VM_MIN  50   // VM[V/10] min
   6:boards/TMC2130_eval.c **** #define TMC2130_EVAL_VM_MAX  480  // VM[V/10] max +5%
   7:boards/TMC2130_eval.c **** 
   8:boards/TMC2130_eval.c **** #undef  TMC2130_MAX_VELOCITY
   9:boards/TMC2130_eval.c **** #define TMC2130_MAX_VELOCITY  STEPDIR_MAX_VELOCITY
  10:boards/TMC2130_eval.c **** 
  11:boards/TMC2130_eval.c **** // Stepdir precision: 2^17 -> 17 digits of precision
  12:boards/TMC2130_eval.c **** #define STEPDIR_PRECISION (1 << 17)
  13:boards/TMC2130_eval.c **** 
  14:boards/TMC2130_eval.c **** #define TMC2130_DEFAULT_MOTOR 0
  15:boards/TMC2130_eval.c **** 
  16:boards/TMC2130_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  17:boards/TMC2130_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  18:boards/TMC2130_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  19:boards/TMC2130_eval.c **** static uint32_t stop(uint8_t motor);
  20:boards/TMC2130_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  21:boards/TMC2130_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  22:boards/TMC2130_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value);
  23:boards/TMC2130_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  24:boards/TMC2130_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  25:boards/TMC2130_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value);
  26:boards/TMC2130_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value);
  27:boards/TMC2130_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value);
  28:boards/TMC2130_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  29:boards/TMC2130_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  30:boards/TMC2130_eval.c **** static void periodicJob(uint32_t tick);
  31:boards/TMC2130_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  32:boards/TMC2130_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  33:boards/TMC2130_eval.c **** static void deInit(void);
  34:boards/TMC2130_eval.c **** static uint8_t reset();
  35:boards/TMC2130_eval.c **** static uint8_t restore();
  36:boards/TMC2130_eval.c **** static void configCallback(TMC2130TypeDef *tmc2130, ConfigState state);
  37:boards/TMC2130_eval.c **** static void enableDriver(DriverState state);
  38:boards/TMC2130_eval.c **** 
  39:boards/TMC2130_eval.c **** //static int32_t measured_velocity = 0;
  40:boards/TMC2130_eval.c **** 
  41:boards/TMC2130_eval.c **** typedef struct
  42:boards/TMC2130_eval.c **** {
  43:boards/TMC2130_eval.c **** 	IOPinTypeDef *REFL_STEP;
  44:boards/TMC2130_eval.c **** 	IOPinTypeDef *REFR_DIR;
  45:boards/TMC2130_eval.c **** 	IOPinTypeDef *DRV_ENN_CFG6;
  46:boards/TMC2130_eval.c **** 	IOPinTypeDef *ENCA_DCIN_CFG5;
  47:boards/TMC2130_eval.c **** 	IOPinTypeDef *ENCB_DCEN_CFG4;
  48:boards/TMC2130_eval.c **** 	IOPinTypeDef *ENCN_DCO;
  49:boards/TMC2130_eval.c **** 	IOPinTypeDef *DIAG0;
  50:boards/TMC2130_eval.c **** 	IOPinTypeDef *DIAG1;
  51:boards/TMC2130_eval.c **** 	IOPinTypeDef *AIN_REF_SW;
  52:boards/TMC2130_eval.c **** 	IOPinTypeDef *AIN_REF_PWM;
  53:boards/TMC2130_eval.c **** } PinsTypeDef;
  54:boards/TMC2130_eval.c **** 
  55:boards/TMC2130_eval.c **** static PinsTypeDef Pins;
  56:boards/TMC2130_eval.c **** 
  57:boards/TMC2130_eval.c **** SPIChannelTypeDef *TMC2130_SPIChannel;
  58:boards/TMC2130_eval.c **** TMC2130TypeDef TMC2130;
  59:boards/TMC2130_eval.c **** 
  60:boards/TMC2130_eval.c **** // Translate motor number to TMC2130TypeDef
  61:boards/TMC2130_eval.c **** // When using multiple ICs you can map them here
  62:boards/TMC2130_eval.c **** static inline TMC2130TypeDef *motorToIC(uint8_t motor)
  63:boards/TMC2130_eval.c **** {
  64:boards/TMC2130_eval.c **** 	UNUSED(motor);
  65:boards/TMC2130_eval.c **** 
  66:boards/TMC2130_eval.c **** 	return &TMC2130;
  67:boards/TMC2130_eval.c **** }
  68:boards/TMC2130_eval.c **** 
  69:boards/TMC2130_eval.c **** // Translate channel number to SPI channel
  70:boards/TMC2130_eval.c **** // When using multiple ICs you can map them here
  71:boards/TMC2130_eval.c **** static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  72:boards/TMC2130_eval.c **** {
  73:boards/TMC2130_eval.c **** 	UNUSED(channel);
  74:boards/TMC2130_eval.c **** 
  75:boards/TMC2130_eval.c **** 	return TMC2130_SPIChannel;
  76:boards/TMC2130_eval.c **** }
  77:boards/TMC2130_eval.c **** 
  78:boards/TMC2130_eval.c **** // => SPI wrapper (also takes care of cover mode)
  79:boards/TMC2130_eval.c **** void tmc2130_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  80:boards/TMC2130_eval.c **** {
  81:boards/TMC2130_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
  82:boards/TMC2130_eval.c **** 	{
  83:boards/TMC2130_eval.c **** 		UNUSED(channel);
  84:boards/TMC2130_eval.c **** 		Evalboards.ch1.fullCover(&data[0], length);
  85:boards/TMC2130_eval.c **** 	}
  86:boards/TMC2130_eval.c **** 	else
  87:boards/TMC2130_eval.c **** 	{
  88:boards/TMC2130_eval.c **** 		// Map the channel to the corresponding SPI channel
  89:boards/TMC2130_eval.c **** 		channelToSPI(channel)->readWriteArray(&data[0], length);
  90:boards/TMC2130_eval.c **** 	}
  91:boards/TMC2130_eval.c **** }
  92:boards/TMC2130_eval.c **** // <= SPI wrapper
  93:boards/TMC2130_eval.c **** 
  94:boards/TMC2130_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
  95:boards/TMC2130_eval.c **** {
  96:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
  97:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
  98:boards/TMC2130_eval.c **** 
  99:boards/TMC2130_eval.c **** 	StepDir_rotate(motor, velocity);
 100:boards/TMC2130_eval.c **** 
 101:boards/TMC2130_eval.c **** 	return TMC_ERROR_NONE;
 102:boards/TMC2130_eval.c **** }
 103:boards/TMC2130_eval.c **** 
 104:boards/TMC2130_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 105:boards/TMC2130_eval.c **** {
 106:boards/TMC2130_eval.c **** 	return rotate(motor, velocity);
 107:boards/TMC2130_eval.c **** }
 108:boards/TMC2130_eval.c **** 
 109:boards/TMC2130_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 110:boards/TMC2130_eval.c **** {
 111:boards/TMC2130_eval.c **** 	return rotate(motor, -velocity);
 112:boards/TMC2130_eval.c **** }
 113:boards/TMC2130_eval.c **** 
 114:boards/TMC2130_eval.c **** static uint32_t stop(uint8_t motor)
 115:boards/TMC2130_eval.c **** {
 116:boards/TMC2130_eval.c **** 	return rotate(motor, 0);
 117:boards/TMC2130_eval.c **** }
 118:boards/TMC2130_eval.c **** 
 119:boards/TMC2130_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 120:boards/TMC2130_eval.c **** {
 121:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 122:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 123:boards/TMC2130_eval.c **** 
 124:boards/TMC2130_eval.c **** 	StepDir_moveTo(motor, position);
 125:boards/TMC2130_eval.c **** 
 126:boards/TMC2130_eval.c **** 	return TMC_ERROR_NONE;
 127:boards/TMC2130_eval.c **** }
 128:boards/TMC2130_eval.c **** 
 129:boards/TMC2130_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 130:boards/TMC2130_eval.c **** {
 131:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 132:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 133:boards/TMC2130_eval.c **** 
 134:boards/TMC2130_eval.c **** 	// determine actual position and add numbers of ticks to move
 135:boards/TMC2130_eval.c **** 	*ticks += StepDir_getActualPosition(motor);
 136:boards/TMC2130_eval.c **** 
 137:boards/TMC2130_eval.c **** 	return moveTo(motor, *ticks);
 138:boards/TMC2130_eval.c **** }
 139:boards/TMC2130_eval.c **** 
 140:boards/TMC2130_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 141:boards/TMC2130_eval.c **** {
 142:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 143:boards/TMC2130_eval.c **** 
 144:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 145:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 146:boards/TMC2130_eval.c **** 
 147:boards/TMC2130_eval.c **** 	int32_t tempValue;
 148:boards/TMC2130_eval.c **** 
 149:boards/TMC2130_eval.c **** 	switch(type)
 150:boards/TMC2130_eval.c **** 	{
 151:boards/TMC2130_eval.c **** 	case 0:
 152:boards/TMC2130_eval.c **** 		// Target position
 153:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 154:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 155:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 156:boards/TMC2130_eval.c **** 			StepDir_moveTo(motor, *value);
 157:boards/TMC2130_eval.c **** 		}
 158:boards/TMC2130_eval.c **** 		break;
 159:boards/TMC2130_eval.c **** 	case 1:
 160:boards/TMC2130_eval.c **** 		// Actual position
 161:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 162:boards/TMC2130_eval.c **** 			*value = StepDir_getActualPosition(motor);
 163:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 164:boards/TMC2130_eval.c **** 			StepDir_setActualPosition(motor, *value);
 165:boards/TMC2130_eval.c **** 		}
 166:boards/TMC2130_eval.c **** 		break;
 167:boards/TMC2130_eval.c **** 	case 2:
 168:boards/TMC2130_eval.c **** 		// Target speed
 169:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 170:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 171:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 172:boards/TMC2130_eval.c **** 			StepDir_rotate(motor, *value);
 173:boards/TMC2130_eval.c **** 		}
 174:boards/TMC2130_eval.c **** 		break;
 175:boards/TMC2130_eval.c **** 	case 3:
 176:boards/TMC2130_eval.c **** 		// Actual speed
 177:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 178:boards/TMC2130_eval.c **** 			switch(StepDir_getMode(motor)) {
 179:boards/TMC2130_eval.c **** 			case STEPDIR_INTERNAL:
 180:boards/TMC2130_eval.c **** 				*value = StepDir_getActualVelocity(motor);
 181:boards/TMC2130_eval.c **** 				break;
 182:boards/TMC2130_eval.c **** 			case STEPDIR_EXTERNAL:
 183:boards/TMC2130_eval.c **** 			default:
 184:boards/TMC2130_eval.c **** 				tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_
 185:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 186:boards/TMC2130_eval.c **** 				break;
 187:boards/TMC2130_eval.c **** 			}
 188:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 189:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 190:boards/TMC2130_eval.c **** 		}
 191:boards/TMC2130_eval.c **** 		break;
 192:boards/TMC2130_eval.c **** 	case 4:
 193:boards/TMC2130_eval.c **** 		// Maximum speed
 194:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 195:boards/TMC2130_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 196:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 197:boards/TMC2130_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 198:boards/TMC2130_eval.c **** 		}
 199:boards/TMC2130_eval.c **** 		break;
 200:boards/TMC2130_eval.c **** 	case 5:
 201:boards/TMC2130_eval.c **** 		// Maximum acceleration
 202:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 203:boards/TMC2130_eval.c **** 			*value = StepDir_getAcceleration(motor);
 204:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 205:boards/TMC2130_eval.c **** 			StepDir_setAcceleration(motor, *value);
 206:boards/TMC2130_eval.c **** 		}
 207:boards/TMC2130_eval.c **** 		break;
 208:boards/TMC2130_eval.c **** 	case 6:
 209:boards/TMC2130_eval.c **** 		// Maximum current
 210:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 211:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRU
 212:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 213:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRUN_SHIFT
 214:boards/TMC2130_eval.c **** 		}
 215:boards/TMC2130_eval.c **** 		break;
 216:boards/TMC2130_eval.c **** 	case 7:
 217:boards/TMC2130_eval.c **** 		// Standby current
 218:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 219:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IH
 220:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 221:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHI
 222:boards/TMC2130_eval.c **** 		}
 223:boards/TMC2130_eval.c **** 		break;
 224:boards/TMC2130_eval.c **** 	case 8:
 225:boards/TMC2130_eval.c **** 		// Position reached flag
 226:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 227:boards/TMC2130_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 228:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 229:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 230:boards/TMC2130_eval.c **** 		}
 231:boards/TMC2130_eval.c **** 		break;
 232:boards/TMC2130_eval.c **** 	case 21:
 233:boards/TMC2130_eval.c **** 		// todo CHECK 3: Funktionalität prüfen (JE)
 234:boards/TMC2130_eval.c **** 		// todo XML 3: XML Beschreibung hinzufügen (JE)
 235:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 236:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 237:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 238:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPOWERDOWN, *value);
 239:boards/TMC2130_eval.c **** 		}
 240:boards/TMC2130_eval.c **** 		break;
 241:boards/TMC2130_eval.c **** 	case 23:
 242:boards/TMC2130_eval.c **** 		// Speed threshold for high speed mode
 243:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 244:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_THIGH);
 245:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 246:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 247:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 248:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 249:boards/TMC2130_eval.c **** 		}
 250:boards/TMC2130_eval.c **** 		break;
 251:boards/TMC2130_eval.c **** 	case 24:
 252:boards/TMC2130_eval.c **** 		// Minimum speed for switching to dcStep
 253:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 254:boards/TMC2130_eval.c **** 			*value = tmc2130_readInt(motorToIC(motor), TMC2130_VDCMIN);
 255:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 256:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_VDCMIN, *value);
 257:boards/TMC2130_eval.c **** 		}
 258:boards/TMC2130_eval.c **** 		break;
 259:boards/TMC2130_eval.c **** 	case 26:
 260:boards/TMC2130_eval.c **** 		// High speed fullstep mode
 261:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 262:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VH
 263:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 264:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VHIGHFS_S
 265:boards/TMC2130_eval.c **** 		}
 266:boards/TMC2130_eval.c **** 		break;
 267:boards/TMC2130_eval.c **** 	case 27:
 268:boards/TMC2130_eval.c **** 		// High speed chopper mode
 269:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 270:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_V
 271:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 272:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_VHIGHCHM
 273:boards/TMC2130_eval.c **** 		}
 274:boards/TMC2130_eval.c **** 		break;
 275:boards/TMC2130_eval.c **** 	case 28:
 276:boards/TMC2130_eval.c **** 		// Internal RSense
 277:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 278:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC21
 279:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 280:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC2130_INTE
 281:boards/TMC2130_eval.c **** 		}
 282:boards/TMC2130_eval.c **** 		break;
 283:boards/TMC2130_eval.c **** 	case 29:
 284:boards/TMC2130_eval.c **** 		// Measured Speed
 285:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 286:boards/TMC2130_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_F
 287:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 288:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 289:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 290:boards/TMC2130_eval.c **** 		}
 291:boards/TMC2130_eval.c **** 		break;
 292:boards/TMC2130_eval.c **** 	case 50: // StepDir internal(0)/external(1)
 293:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 294:boards/TMC2130_eval.c **** 			*value = StepDir_getMode(motor);
 295:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 296:boards/TMC2130_eval.c **** 			StepDir_setMode(motor, *value);
 297:boards/TMC2130_eval.c **** 		}
 298:boards/TMC2130_eval.c **** 		break;
 299:boards/TMC2130_eval.c **** 	case 51: // StepDir interrupt frequency
 300:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 301:boards/TMC2130_eval.c **** 			*value = StepDir_getFrequency(motor);
 302:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 303:boards/TMC2130_eval.c **** 			StepDir_setFrequency(motor, *value);
 304:boards/TMC2130_eval.c **** 		}
 305:boards/TMC2130_eval.c **** 		break;
 306:boards/TMC2130_eval.c **** 	case 140:
 307:boards/TMC2130_eval.c **** 		// Microstep Resolution
 308:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 309:boards/TMC2130_eval.c **** 			*value = 256 >> TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC213
 310:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 311:boards/TMC2130_eval.c **** 			switch(*value)
 312:boards/TMC2130_eval.c **** 			{
 313:boards/TMC2130_eval.c **** 			case 1:    *value = 8;   break;
 314:boards/TMC2130_eval.c **** 			case 2:    *value = 7;   break;
 315:boards/TMC2130_eval.c **** 			case 4:    *value = 6;   break;
 316:boards/TMC2130_eval.c **** 			case 8:    *value = 5;   break;
 317:boards/TMC2130_eval.c **** 			case 16:   *value = 4;   break;
 318:boards/TMC2130_eval.c **** 			case 32:   *value = 3;   break;
 319:boards/TMC2130_eval.c **** 			case 64:   *value = 2;   break;
 320:boards/TMC2130_eval.c **** 			case 128:  *value = 1;   break;
 321:boards/TMC2130_eval.c **** 			case 256:  *value = 0;   break;
 322:boards/TMC2130_eval.c **** 			default:   *value = -1;  break;
 323:boards/TMC2130_eval.c **** 			}
 324:boards/TMC2130_eval.c **** 
 325:boards/TMC2130_eval.c **** 			if(*value != -1)
 326:boards/TMC2130_eval.c **** 			{
 327:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC2130_MRES_SHIFT,
 328:boards/TMC2130_eval.c **** 			}
 329:boards/TMC2130_eval.c **** 			else
 330:boards/TMC2130_eval.c **** 			{
 331:boards/TMC2130_eval.c **** 				errors |= TMC_ERROR_VALUE;
 332:boards/TMC2130_eval.c **** 			}
 333:boards/TMC2130_eval.c **** 		}
 334:boards/TMC2130_eval.c **** 		break;
 335:boards/TMC2130_eval.c **** 	case 162:
 336:boards/TMC2130_eval.c **** 		// Chopper blank time
 337:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 338:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SH
 339:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 340:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SHIFT, *v
 341:boards/TMC2130_eval.c **** 		}
 342:boards/TMC2130_eval.c **** 		break;
 343:boards/TMC2130_eval.c **** 	case 163:
 344:boards/TMC2130_eval.c **** 		// Constant TOff Mode
 345:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 346:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SH
 347:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 348:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SHIFT, *v
 349:boards/TMC2130_eval.c **** 		}
 350:boards/TMC2130_eval.c **** 		break;
 351:boards/TMC2130_eval.c **** 	case 164:
 352:boards/TMC2130_eval.c **** 		// Disable fast decay comparator
 353:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 354:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DI
 355:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 356:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DISFDCC_S
 357:boards/TMC2130_eval.c **** 		}
 358:boards/TMC2130_eval.c **** 		break;
 359:boards/TMC2130_eval.c **** 	case 165:
 360:boards/TMC2130_eval.c **** 		// Chopper hysteresis end / fast decay time
 361:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 362:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 363:boards/TMC2130_eval.c **** 			{
 364:boards/TMC2130_eval.c **** 				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND
 365:boards/TMC2130_eval.c **** 			}
 366:boards/TMC2130_eval.c **** 			else
 367:boards/TMC2130_eval.c **** 			{
 368:boards/TMC2130_eval.c **** 				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
 369:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
 370:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 371:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 372:boards/TMC2130_eval.c **** 			}
 373:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 374:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 375:boards/TMC2130_eval.c **** 			{
 376:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND_SHIFT,
 377:boards/TMC2130_eval.c **** 			}
 378:boards/TMC2130_eval.c **** 			else
 379:boards/TMC2130_eval.c **** 			{
 380:boards/TMC2130_eval.c **** 				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
 381:boards/TMC2130_eval.c **** 
 382:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_3_MASK, TMC2130_TFD_3_SHIF
 383:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_ALL_MASK, TMC2130_TFD_ALL_
 384:boards/TMC2130_eval.c **** 			}
 385:boards/TMC2130_eval.c **** 		}
 386:boards/TMC2130_eval.c **** 		break;
 387:boards/TMC2130_eval.c **** 	case 166:
 388:boards/TMC2130_eval.c **** 		// Chopper hysteresis start / sine wave offset
 389:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 390:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 391:boards/TMC2130_eval.c **** 			{
 392:boards/TMC2130_eval.c **** 				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HST
 393:boards/TMC2130_eval.c **** 			}
 394:boards/TMC2130_eval.c **** 			else
 395:boards/TMC2130_eval.c **** 			{
 396:boards/TMC2130_eval.c **** 				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
 397:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
 398:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 399:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 400:boards/TMC2130_eval.c **** 			}
 401:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 402:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 403:boards/TMC2130_eval.c **** 			{
 404:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HSTRT_SHIF
 405:boards/TMC2130_eval.c **** 			}
 406:boards/TMC2130_eval.c **** 			else
 407:boards/TMC2130_eval.c **** 			{
 408:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_OFFSET_MASK, TMC2130_OFFSET_SH
 409:boards/TMC2130_eval.c **** 			}
 410:boards/TMC2130_eval.c **** 		}
 411:boards/TMC2130_eval.c **** 		break;
 412:boards/TMC2130_eval.c **** 	case 167:
 413:boards/TMC2130_eval.c **** 		// Chopper off time
 414:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 415:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_
 416:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 417:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_SHIFT, 
 418:boards/TMC2130_eval.c **** 		}
 419:boards/TMC2130_eval.c **** 		break;
 420:boards/TMC2130_eval.c **** 	case 168:
 421:boards/TMC2130_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 422:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 423:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEI
 424:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 425:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEIMIN_SHI
 426:boards/TMC2130_eval.c **** 		}
 427:boards/TMC2130_eval.c **** 		break;
 428:boards/TMC2130_eval.c **** 	case 169:
 429:boards/TMC2130_eval.c **** 		// smartEnergy current down step
 430:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 431:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_
 432:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 433:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_SHIFT, 
 434:boards/TMC2130_eval.c **** 		}
 435:boards/TMC2130_eval.c **** 		break;
 436:boards/TMC2130_eval.c **** 	case 170:
 437:boards/TMC2130_eval.c **** 		// smartEnergy hysteresis
 438:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 439:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMA
 440:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 441:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMAX_SHIFT
 442:boards/TMC2130_eval.c **** 		}
 443:boards/TMC2130_eval.c **** 		break;
 444:boards/TMC2130_eval.c **** 	case 171:
 445:boards/TMC2130_eval.c **** 		// smartEnergy current up step
 446:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 447:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_
 448:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 449:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_SHIFT, 
 450:boards/TMC2130_eval.c **** 		}
 451:boards/TMC2130_eval.c **** 		break;
 452:boards/TMC2130_eval.c **** 	case 172:
 453:boards/TMC2130_eval.c **** 		// smartEnergy hysteresis start
 454:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 455:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMI
 456:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 457:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMIN_SHIFT
 458:boards/TMC2130_eval.c **** 		}
 459:boards/TMC2130_eval.c **** 		break;
 460:boards/TMC2130_eval.c **** 	case 173:
 461:boards/TMC2130_eval.c **** 		// stallGuard2 filter enable
 462:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 463:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFIL
 464:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 465:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFILT_SHIFT
 466:boards/TMC2130_eval.c **** 		}
 467:boards/TMC2130_eval.c **** 		break;
 468:boards/TMC2130_eval.c **** 	case 174:
 469:boards/TMC2130_eval.c **** 		// stallGuard2 threshold
 470:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 471:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SH
 472:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 473:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 474:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT, *v
 475:boards/TMC2130_eval.c **** 		}
 476:boards/TMC2130_eval.c **** 		break;
 477:boards/TMC2130_eval.c **** 	case 179:
 478:boards/TMC2130_eval.c **** 		// VSense
 479:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 480:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSE
 481:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 482:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSENSE_SHI
 483:boards/TMC2130_eval.c **** 		}
 484:boards/TMC2130_eval.c **** 		break;
 485:boards/TMC2130_eval.c **** 	case 180:
 486:boards/TMC2130_eval.c **** 		// smartEnergy actual current
 487:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 488:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_CS_ACTUAL_MASK, TMC213
 489:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 490:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 491:boards/TMC2130_eval.c **** 		}
 492:boards/TMC2130_eval.c **** 		break;
 493:boards/TMC2130_eval.c **** 	case 181:
 494:boards/TMC2130_eval.c **** 		// smartEnergy stall velocity
 495:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 496:boards/TMC2130_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 497:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 498:boards/TMC2130_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 499:boards/TMC2130_eval.c **** 		}
 500:boards/TMC2130_eval.c **** 		break;
 501:boards/TMC2130_eval.c **** 	case 182:
 502:boards/TMC2130_eval.c **** 		// smartEnergy threshold speed
 503:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 504:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TCOOLTHRS);
 505:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 506:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 507:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 508:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
 509:boards/TMC2130_eval.c **** 		}
 510:boards/TMC2130_eval.c **** 		break;
 511:boards/TMC2130_eval.c **** 	case 184:
 512:boards/TMC2130_eval.c **** 		// Random TOff mode
 513:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 514:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDT
 515:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 516:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDTF_SHIFT
 517:boards/TMC2130_eval.c **** 		}
 518:boards/TMC2130_eval.c **** 		break;
 519:boards/TMC2130_eval.c **** 	case 185:
 520:boards/TMC2130_eval.c **** 		// Chopper synchronization
 521:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 522:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_
 523:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 524:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_SHIFT, 
 525:boards/TMC2130_eval.c **** 		}
 526:boards/TMC2130_eval.c **** 		break;
 527:boards/TMC2130_eval.c **** 	case 186:
 528:boards/TMC2130_eval.c **** 		// PWM threshold speed
 529:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 530:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TPWMTHRS);
 531:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 532:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 533:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 534:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
 535:boards/TMC2130_eval.c **** 		}
 536:boards/TMC2130_eval.c **** 		break;
 537:boards/TMC2130_eval.c **** 	case 187:
 538:boards/TMC2130_eval.c **** 		// PWM gradient
 539:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 540:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PW
 541:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 542:boards/TMC2130_eval.c **** 			// Set gradient
 543:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PWM_GRAD_
 544:boards/TMC2130_eval.c **** 
 545:boards/TMC2130_eval.c **** 			// Enable/disable stealthChop accordingly
 546:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_GCONF, TMC2130_EN_PWM_MODE_MASK, TMC2130_EN_PWM_M
 547:boards/TMC2130_eval.c **** 		}
 548:boards/TMC2130_eval.c **** 		break;
 549:boards/TMC2130_eval.c **** 	case 188:
 550:boards/TMC2130_eval.c **** 		// PWM amplitude
 551:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 552:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PW
 553:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 554:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PWM_AMPL_
 555:boards/TMC2130_eval.c **** 		}
 556:boards/TMC2130_eval.c **** 		break;
 557:boards/TMC2130_eval.c **** 	case 191:
 558:boards/TMC2130_eval.c **** 		// PWM frequency
 559:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 560:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PW
 561:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 562:boards/TMC2130_eval.c **** 			if(*value >= 0 && *value < 4)
 563:boards/TMC2130_eval.c **** 			{
 564:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PWM_FREQ
 565:boards/TMC2130_eval.c **** 			}
 566:boards/TMC2130_eval.c **** 			else
 567:boards/TMC2130_eval.c **** 			{
 568:boards/TMC2130_eval.c **** 				errors |= TMC_ERROR_VALUE;
 569:boards/TMC2130_eval.c **** 			}
 570:boards/TMC2130_eval.c **** 		}
 571:boards/TMC2130_eval.c **** 		break;
 572:boards/TMC2130_eval.c **** 	case 192:
 573:boards/TMC2130_eval.c **** 		// PWM autoscale
 574:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 575:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC21
 576:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 577:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC2130_PWM_
 578:boards/TMC2130_eval.c **** 		}
 579:boards/TMC2130_eval.c **** 		break;
 580:boards/TMC2130_eval.c **** 	case 204:
 581:boards/TMC2130_eval.c **** 		// Freewheeling mode
 582:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 583:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_F
 584:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 585:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_FREEWHEE
 586:boards/TMC2130_eval.c **** 		}
 587:boards/TMC2130_eval.c **** 		break;
 588:boards/TMC2130_eval.c **** 	case 206:
 589:boards/TMC2130_eval.c **** 		// Load value
 590:boards/TMC2130_eval.c **** 		if(readWrite == READ) {
 591:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_SG_RESULT_MASK, TMC213
 592:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 593:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 594:boards/TMC2130_eval.c **** 		}
 595:boards/TMC2130_eval.c **** 		break;
 596:boards/TMC2130_eval.c **** 	default:
 597:boards/TMC2130_eval.c **** 		errors |= TMC_ERROR_TYPE;
 598:boards/TMC2130_eval.c **** 		break;
 599:boards/TMC2130_eval.c **** 	}
 600:boards/TMC2130_eval.c **** 	return errors;
 601:boards/TMC2130_eval.c **** }
 602:boards/TMC2130_eval.c **** 
 603:boards/TMC2130_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 604:boards/TMC2130_eval.c **** {
 605:boards/TMC2130_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 606:boards/TMC2130_eval.c **** }
 607:boards/TMC2130_eval.c **** 
 608:boards/TMC2130_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 609:boards/TMC2130_eval.c **** {
 610:boards/TMC2130_eval.c **** 	return handleParameter(READ, motor, type, value);
 611:boards/TMC2130_eval.c **** }
 612:boards/TMC2130_eval.c **** 
 613:boards/TMC2130_eval.c **** static uint32_t getLimit(AxisParameterLimit limit, uint8_t type, uint8_t motor, int32_t *value)
 614:boards/TMC2130_eval.c **** {
 615:boards/TMC2130_eval.c **** 	UNUSED(motor);
 616:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 617:boards/TMC2130_eval.c **** 	switch(type) {
 618:boards/TMC2130_eval.c **** 	case 2:
 619:boards/TMC2130_eval.c **** 	case 3:
 620:boards/TMC2130_eval.c **** 	case 4:
 621:boards/TMC2130_eval.c **** 	case 24:
 622:boards/TMC2130_eval.c **** 		if(limit == LIMIT_MIN) {
 623:boards/TMC2130_eval.c **** 			*value = 0; // TODO: Determine limits here
 624:boards/TMC2130_eval.c **** 		} else if(limit == LIMIT_MAX) {
 625:boards/TMC2130_eval.c **** 			*value = StepDir_getFrequency(motor);
 626:boards/TMC2130_eval.c **** 		}
 627:boards/TMC2130_eval.c **** 		break;
 628:boards/TMC2130_eval.c **** 	case 5:
 629:boards/TMC2130_eval.c **** 		if(limit == LIMIT_MIN) {
 630:boards/TMC2130_eval.c **** 			*value = 0; // TODO: Determine limits here
 631:boards/TMC2130_eval.c **** 		} else if(limit == LIMIT_MAX) {
 632:boards/TMC2130_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 633:boards/TMC2130_eval.c **** 		}
 634:boards/TMC2130_eval.c **** 		break;
 635:boards/TMC2130_eval.c **** 	default:
 636:boards/TMC2130_eval.c **** 		errors |= TMC_ERROR_TYPE;
 637:boards/TMC2130_eval.c **** 		break;
 638:boards/TMC2130_eval.c **** 	}
 639:boards/TMC2130_eval.c **** 	return errors;
 640:boards/TMC2130_eval.c **** }
 641:boards/TMC2130_eval.c **** 
 642:boards/TMC2130_eval.c **** static uint32_t getMin(uint8_t type, uint8_t motor, int32_t *value)
 643:boards/TMC2130_eval.c **** {
 644:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 645:boards/TMC2130_eval.c **** }
 646:boards/TMC2130_eval.c **** 
 647:boards/TMC2130_eval.c **** static uint32_t getMax(uint8_t type, uint8_t motor, int32_t *value)
 648:boards/TMC2130_eval.c **** {
 649:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 650:boards/TMC2130_eval.c **** }
 651:boards/TMC2130_eval.c **** 
 652:boards/TMC2130_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 653:boards/TMC2130_eval.c **** {
 654:boards/TMC2130_eval.c **** 	tmc2130_writeInt(motorToIC(motor), address, value);
 655:boards/TMC2130_eval.c **** }
 656:boards/TMC2130_eval.c **** 
 657:boards/TMC2130_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 658:boards/TMC2130_eval.c **** {
 659:boards/TMC2130_eval.c **** 	*value = tmc2130_readInt(motorToIC(motor), address);
 660:boards/TMC2130_eval.c **** }
 661:boards/TMC2130_eval.c **** 
 662:boards/TMC2130_eval.c **** static void periodicJob(uint32_t tick)
 663:boards/TMC2130_eval.c **** {
 664:boards/TMC2130_eval.c **** //	static int32_t m_velocity = 0;
 665:boards/TMC2130_eval.c **** //	static uint32_t old_tick = 0;
 666:boards/TMC2130_eval.c **** //
 667:boards/TMC2130_eval.c **** //	m_velocity += (int32_t)((StepDir_getFrequency(0) * 12) / TMC2130_FIELD_READ(motorToIC(0), TMC213
 668:boards/TMC2130_eval.c **** //
 669:boards/TMC2130_eval.c **** //	if(tick - old_tick > 10)
 670:boards/TMC2130_eval.c **** //	{
 671:boards/TMC2130_eval.c **** //		measured_velocity = m_velocity / (tick - old_tick);
 672:boards/TMC2130_eval.c **** //		m_velocity = 0;
 673:boards/TMC2130_eval.c **** //		old_tick = tick;
 674:boards/TMC2130_eval.c **** //	}
 675:boards/TMC2130_eval.c **** 
 676:boards/TMC2130_eval.c **** 	tmc2130_periodicJob(&TMC2130, tick);
 677:boards/TMC2130_eval.c **** 
 678:boards/TMC2130_eval.c **** 	StepDir_periodicJob(TMC2130_DEFAULT_MOTOR);
 679:boards/TMC2130_eval.c **** 
 680:boards/TMC2130_eval.c **** 	StepDir_stallGuard(TMC2130_DEFAULT_MOTOR, TMC2130_FIELD_READ(motorToIC(TMC2130_DEFAULT_MOTOR), TMC
 681:boards/TMC2130_eval.c **** 
 682:boards/TMC2130_eval.c **** //	uint8_t status = StepDir_getStatus(0);
 683:boards/TMC2130_eval.c **** //	// Already stalled -> skip stallGuard check
 684:boards/TMC2130_eval.c **** //	if(status & STATUS_STALLED)
 685:boards/TMC2130_eval.c **** //		return;
 686:boards/TMC2130_eval.c **** //
 687:boards/TMC2130_eval.c **** //	// Stallguard not enabled -> skip stallGuard check
 688:boards/TMC2130_eval.c **** //	if(!(status & STATUS_STALLGUARD_ACTIVE))
 689:boards/TMC2130_eval.c **** //		return;
 690:boards/TMC2130_eval.c **** //
 691:boards/TMC2130_eval.c **** //	// Check stallGuard
 692:boards/TMC2130_eval.c **** //	if(tmc2130_readInt(&TMC2130, TMC2130_DRV_STATUS) & TMC2130_STALLGUARD_MASK)
 693:boards/TMC2130_eval.c **** //		StepDir_stop(0, STOP_STALL);
 694:boards/TMC2130_eval.c **** }
 695:boards/TMC2130_eval.c **** 
 696:boards/TMC2130_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 697:boards/TMC2130_eval.c **** {
 698:boards/TMC2130_eval.c **** 	uint32_t errors = 0;
 699:boards/TMC2130_eval.c **** 
 700:boards/TMC2130_eval.c **** 	uint32_t uvalue;
 701:boards/TMC2130_eval.c **** 
 702:boards/TMC2130_eval.c **** 	switch(type)
 703:boards/TMC2130_eval.c **** 	{
 704:boards/TMC2130_eval.c **** 	case 0:	// set analogue current duty
 705:boards/TMC2130_eval.c **** 		/*
 706:boards/TMC2130_eval.c **** 		 * Current will be defined by analogue value voltage or current signal. In any case this function
 707:boards/TMC2130_eval.c **** 		 * will generate a analogue voltage by PWM for up to 50% duty and a switch for the other 50%.
 708:boards/TMC2130_eval.c **** 		 * The reference voltage will be AIN_REF = VCC_IO * value/20000 with value = {0..20000}
 709:boards/TMC2130_eval.c **** 		 */
 710:boards/TMC2130_eval.c **** 
 711:boards/TMC2130_eval.c **** 		uvalue = (uint32_t) *value;
 712:boards/TMC2130_eval.c **** 
 713:boards/TMC2130_eval.c **** 		if(uvalue <= 20000)
 714:boards/TMC2130_eval.c **** 		{
 715:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(Pins.AIN_REF_SW, (uvalue > 10000) ? IOS_HIGH : IOS_LOW);
 716:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 717:boards/TMC2130_eval.c **** 		}
 718:boards/TMC2130_eval.c **** 		else
 719:boards/TMC2130_eval.c **** 		{
 720:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_VALUE;
 721:boards/TMC2130_eval.c **** 		}
 722:boards/TMC2130_eval.c **** 		break;
 723:boards/TMC2130_eval.c **** 	case 1:	// Use internal clock
 724:boards/TMC2130_eval.c **** 		/*
 725:boards/TMC2130_eval.c **** 		 * Internel clock will be enabled by calling this function with a value != 0 and unpower and repo
 726:boards/TMC2130_eval.c **** 		 */
 727:boards/TMC2130_eval.c **** 		if(*value)
 728:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 729:boards/TMC2130_eval.c **** 		else
 730:boards/TMC2130_eval.c **** 			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
 731:boards/TMC2130_eval.c **** 		break;
 732:boards/TMC2130_eval.c **** 	case 2:	// writing a register at address = motor with value = value and reading back the value
 733:boards/TMC2130_eval.c **** 		// DO NOT USE!
 734:boards/TMC2130_eval.c **** 		// todo BUG 3: using the motor for both address and motor value can lead to trying to get struct 
 735:boards/TMC2130_eval.c **** 		//             and then loading a function pointer from that. That is pretty a much guaranteed cr
 736:boards/TMC2130_eval.c **** 
 737:boards/TMC2130_eval.c **** 		//tmc2130_writeInt(motorToIC(motor), motor, *value);
 738:boards/TMC2130_eval.c **** 		//*value = tmc2130_readInt(motorToIC(motor), motor);
 739:boards/TMC2130_eval.c **** 		break;
 740:boards/TMC2130_eval.c **** 	case 3:	 // set DC_EN
 741:boards/TMC2130_eval.c **** 		HAL.IOs->config->setToState(Pins.ENCB_DCEN_CFG4, (*value) ? IOS_HIGH : IOS_LOW);
 742:boards/TMC2130_eval.c **** 		break;
 743:boards/TMC2130_eval.c **** 	case 4:  // Read StepDir status bits
 744:boards/TMC2130_eval.c **** 		*value = StepDir_getStatus(motor);
 745:boards/TMC2130_eval.c **** 		break;
 746:boards/TMC2130_eval.c **** 	case 5:  // When running with the TMC4330 v1.2: CFG4 is routed from DIO6 (Motion Controller) to DI
 747:boards/TMC2130_eval.c **** 		Pins.ENCB_DCEN_CFG4 = &HAL.IOs->pins->DIO6;
 748:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 749:boards/TMC2130_eval.c **** 		break;
 750:boards/TMC2130_eval.c **** 	case 6:
 751:boards/TMC2130_eval.c **** 		// When running with any of the TMC43XX Evals, CFG5 is not routed through.
 752:boards/TMC2130_eval.c **** 		// The DIO12 pin not usable by the TMC2130 and is reset to a HIGH level.
 753:boards/TMC2130_eval.c **** 		Pins.ENCA_DCIN_CFG5 = &HAL.IOs->pins->DUMMY;
 754:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 755:boards/TMC2130_eval.c **** 		break;
 756:boards/TMC2130_eval.c **** 	default:
 757:boards/TMC2130_eval.c **** 		errors |= TMC_ERROR_TYPE;
 758:boards/TMC2130_eval.c **** 		break;
 759:boards/TMC2130_eval.c **** 	}
 760:boards/TMC2130_eval.c **** 	return errors;
 761:boards/TMC2130_eval.c **** }
 762:boards/TMC2130_eval.c **** 
 763:boards/TMC2130_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 764:boards/TMC2130_eval.c **** {
 765:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 766:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 767:boards/TMC2130_eval.c **** 
 768:boards/TMC2130_eval.c **** 	switch(motor)
 769:boards/TMC2130_eval.c **** 	{
 770:boards/TMC2130_eval.c **** 	case 0:
 771:boards/TMC2130_eval.c **** 		//*value = StepDir.ch1->actualVelocity;
 772:boards/TMC2130_eval.c **** 		*value = StepDir_getActualVelocity(0);
 773:boards/TMC2130_eval.c **** 		break;
 774:boards/TMC2130_eval.c **** 	default:
 775:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 776:boards/TMC2130_eval.c **** 		break;
 777:boards/TMC2130_eval.c **** 	}
 778:boards/TMC2130_eval.c **** 	return TMC_ERROR_NONE;
 779:boards/TMC2130_eval.c **** }
 780:boards/TMC2130_eval.c **** 
 781:boards/TMC2130_eval.c **** static void deInit(void)
 782:boards/TMC2130_eval.c **** {
  25              		.loc 1 782 1 view -0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
 783:boards/TMC2130_eval.c **** 	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);	// DISABLE DRIVER
  29              		.loc 1 783 2 view .LVU1
  30              		.loc 1 783 5 is_stmt 0 view .LVU2
  31 0000 1B4B     		ldr	r3, .L2
 782:boards/TMC2130_eval.c **** 	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);	// DISABLE DRIVER
  32              		.loc 1 782 1 view .LVU3
  33 0002 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 783 5 view .LVU4
  41 0004 DD68     		ldr	r5, [r3, #12]
  42              		.loc 1 783 2 view .LVU5
  43 0006 1B4C     		ldr	r4, .L2+4
  44              		.loc 1 783 17 view .LVU6
  45 0008 2B68     		ldr	r3, [r5]
  46              		.loc 1 783 2 view .LVU7
  47 000a A068     		ldr	r0, [r4, #8]
  48 000c 5B69     		ldr	r3, [r3, #20]
  49 000e 9847     		blx	r3
  50              	.LVL0:
 784:boards/TMC2130_eval.c **** 
 785:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.REFL_STEP);
  51              		.loc 1 785 2 is_stmt 1 view .LVU8
  52              		.loc 1 785 17 is_stmt 0 view .LVU9
  53 0010 2B68     		ldr	r3, [r5]
  54              		.loc 1 785 2 view .LVU10
  55 0012 2068     		ldr	r0, [r4]
  56 0014 9B68     		ldr	r3, [r3, #8]
  57 0016 9847     		blx	r3
  58              	.LVL1:
 786:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.REFR_DIR);
  59              		.loc 1 786 2 is_stmt 1 view .LVU11
  60              		.loc 1 786 17 is_stmt 0 view .LVU12
  61 0018 2B68     		ldr	r3, [r5]
  62              		.loc 1 786 2 view .LVU13
  63 001a 6068     		ldr	r0, [r4, #4]
  64 001c 9B68     		ldr	r3, [r3, #8]
  65 001e 9847     		blx	r3
  66              	.LVL2:
 787:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.AIN_REF_SW);
  67              		.loc 1 787 2 is_stmt 1 view .LVU14
  68              		.loc 1 787 17 is_stmt 0 view .LVU15
  69 0020 2B68     		ldr	r3, [r5]
  70              		.loc 1 787 2 view .LVU16
  71 0022 206A     		ldr	r0, [r4, #32]
  72 0024 9B68     		ldr	r3, [r3, #8]
  73 0026 9847     		blx	r3
  74              	.LVL3:
 788:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.AIN_REF_PWM);
  75              		.loc 1 788 2 is_stmt 1 view .LVU17
  76              		.loc 1 788 17 is_stmt 0 view .LVU18
  77 0028 2B68     		ldr	r3, [r5]
  78              		.loc 1 788 2 view .LVU19
  79 002a 606A     		ldr	r0, [r4, #36]
  80 002c 9B68     		ldr	r3, [r3, #8]
  81 002e 9847     		blx	r3
  82              	.LVL4:
 789:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
  83              		.loc 1 789 2 is_stmt 1 view .LVU20
  84              		.loc 1 789 17 is_stmt 0 view .LVU21
  85 0030 2B68     		ldr	r3, [r5]
  86              		.loc 1 789 2 view .LVU22
  87 0032 E068     		ldr	r0, [r4, #12]
  88 0034 9B68     		ldr	r3, [r3, #8]
  89 0036 9847     		blx	r3
  90              	.LVL5:
 790:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
  91              		.loc 1 790 2 is_stmt 1 view .LVU23
  92              		.loc 1 790 17 is_stmt 0 view .LVU24
  93 0038 2B68     		ldr	r3, [r5]
  94              		.loc 1 790 2 view .LVU25
  95 003a 2069     		ldr	r0, [r4, #16]
  96 003c 9B68     		ldr	r3, [r3, #8]
  97 003e 9847     		blx	r3
  98              	.LVL6:
 791:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.ENCN_DCO);
  99              		.loc 1 791 2 is_stmt 1 view .LVU26
 100              		.loc 1 791 17 is_stmt 0 view .LVU27
 101 0040 2B68     		ldr	r3, [r5]
 102              		.loc 1 791 2 view .LVU28
 103 0042 6069     		ldr	r0, [r4, #20]
 104 0044 9B68     		ldr	r3, [r3, #8]
 105 0046 9847     		blx	r3
 106              	.LVL7:
 792:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.DIAG0);
 107              		.loc 1 792 2 is_stmt 1 view .LVU29
 108              		.loc 1 792 17 is_stmt 0 view .LVU30
 109 0048 2B68     		ldr	r3, [r5]
 110              		.loc 1 792 2 view .LVU31
 111 004a A069     		ldr	r0, [r4, #24]
 112 004c 9B68     		ldr	r3, [r3, #8]
 113 004e 9847     		blx	r3
 114              	.LVL8:
 793:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.DIAG1);
 115              		.loc 1 793 2 is_stmt 1 view .LVU32
 116              		.loc 1 793 17 is_stmt 0 view .LVU33
 117 0050 2B68     		ldr	r3, [r5]
 118              		.loc 1 793 2 view .LVU34
 119 0052 E069     		ldr	r0, [r4, #28]
 120 0054 9B68     		ldr	r3, [r3, #8]
 121 0056 9847     		blx	r3
 122              	.LVL9:
 794:boards/TMC2130_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
 123              		.loc 1 794 2 is_stmt 1 view .LVU35
 124              		.loc 1 794 17 is_stmt 0 view .LVU36
 125 0058 2B68     		ldr	r3, [r5]
 126              		.loc 1 794 2 view .LVU37
 127 005a A068     		ldr	r0, [r4, #8]
 128 005c 9B68     		ldr	r3, [r3, #8]
 129 005e 9847     		blx	r3
 130              	.LVL10:
 795:boards/TMC2130_eval.c **** 
 796:boards/TMC2130_eval.c **** 	StepDir_deInit();
 131              		.loc 1 796 2 is_stmt 1 view .LVU38
 132 0060 FFF7FEFF 		bl	StepDir_deInit
 133              	.LVL11:
 797:boards/TMC2130_eval.c **** 	Timer.deInit();
 134              		.loc 1 797 2 view .LVU39
 135              		.loc 1 797 7 is_stmt 0 view .LVU40
 136 0064 044B     		ldr	r3, .L2+8
 798:boards/TMC2130_eval.c **** }
 137              		.loc 1 798 1 view .LVU41
 138 0066 BDE87040 		pop	{r4, r5, r6, lr}
 139              	.LCFI1:
 140              		.cfi_restore 14
 141              		.cfi_restore 6
 142              		.cfi_restore 5
 143              		.cfi_restore 4
 144              		.cfi_def_cfa_offset 0
 797:boards/TMC2130_eval.c **** 	Timer.deInit();
 145              		.loc 1 797 2 view .LVU42
 146 006a 5B68     		ldr	r3, [r3, #4]
 147 006c 1847     		bx	r3	@ indirect register sibling call
 148              	.LVL12:
 149              	.L3:
 150 006e 00BF     		.align	2
 151              	.L2:
 152 0070 00000000 		.word	HAL
 153 0074 00000000 		.word	.LANCHOR0
 154 0078 00000000 		.word	Timer
 155              		.cfi_endproc
 156              	.LFE21:
 158              		.align	1
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu softvfp
 164              	userFunction:
 165              	.LVL13:
 166              	.LFB19:
 697:boards/TMC2130_eval.c **** 	uint32_t errors = 0;
 167              		.loc 1 697 1 is_stmt 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 698:boards/TMC2130_eval.c **** 
 171              		.loc 1 698 2 view .LVU44
 700:boards/TMC2130_eval.c **** 
 172              		.loc 1 700 2 view .LVU45
 702:boards/TMC2130_eval.c **** 	{
 173              		.loc 1 702 2 view .LVU46
 697:boards/TMC2130_eval.c **** 	uint32_t errors = 0;
 174              		.loc 1 697 1 is_stmt 0 view .LVU47
 175 007c 10B5     		push	{r4, lr}
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 697:boards/TMC2130_eval.c **** 	uint32_t errors = 0;
 180              		.loc 1 697 1 view .LVU48
 181 007e 1446     		mov	r4, r2
 182 0080 0628     		cmp	r0, #6
 183 0082 05D8     		bhi	.L5
 184 0084 DFE800F0 		tbb	[pc, r0]
 185              	.L7:
 186 0088 06       		.byte	(.L13-.L7)/2
 187 0089 25       		.byte	(.L12-.L7)/2
 188 008a 23       		.byte	(.L15-.L7)/2
 189 008b 34       		.byte	(.L10-.L7)/2
 190 008c 3F       		.byte	(.L9-.L7)/2
 191 008d 44       		.byte	(.L8-.L7)/2
 192 008e 4E       		.byte	(.L6-.L7)/2
 193 008f 00       		.p2align 1
 194              	.L5:
 698:boards/TMC2130_eval.c **** 
 195              		.loc 1 698 11 view .LVU49
 196 0090 0420     		movs	r0, #4
 197              	.LVL14:
 198              	.L4:
 761:boards/TMC2130_eval.c **** 
 199              		.loc 1 761 1 view .LVU50
 200 0092 10BD     		pop	{r4, pc}
 201              	.LVL15:
 202              	.L13:
 711:boards/TMC2130_eval.c **** 
 203              		.loc 1 711 3 is_stmt 1 view .LVU51
 711:boards/TMC2130_eval.c **** 
 204              		.loc 1 711 10 is_stmt 0 view .LVU52
 205 0094 1468     		ldr	r4, [r2]
 206              	.LVL16:
 713:boards/TMC2130_eval.c **** 		{
 207              		.loc 1 713 3 is_stmt 1 view .LVU53
 713:boards/TMC2130_eval.c **** 		{
 208              		.loc 1 713 5 is_stmt 0 view .LVU54
 209 0096 44F62063 		movw	r3, #20000
 210 009a 9C42     		cmp	r4, r3
 211 009c 4ED8     		bhi	.L16
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 212              		.loc 1 715 4 is_stmt 1 view .LVU55
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 213              		.loc 1 715 7 is_stmt 0 view .LVU56
 214 009e 284B     		ldr	r3, .L19
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 215              		.loc 1 715 4 view .LVU57
 216 00a0 284A     		ldr	r2, .L19+4
 217              	.LVL17:
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 218              		.loc 1 715 11 view .LVU58
 219 00a2 DB68     		ldr	r3, [r3, #12]
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 220              		.loc 1 715 4 view .LVU59
 221 00a4 106A     		ldr	r0, [r2, #32]
 222              	.LVL18:
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 223              		.loc 1 715 19 view .LVU60
 224 00a6 1B68     		ldr	r3, [r3]
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 225              		.loc 1 715 4 view .LVU61
 226 00a8 42F21071 		movw	r1, #10000
 227              	.LVL19:
 715:boards/TMC2130_eval.c **** 			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
 228              		.loc 1 715 4 view .LVU62
 229 00ac 8C42     		cmp	r4, r1
 230 00ae DB69     		ldr	r3, [r3, #28]
 231 00b0 94BF     		ite	ls
 232 00b2 0021     		movls	r1, #0
 233 00b4 0121     		movhi	r1, #1
 234 00b6 9847     		blx	r3
 235              	.LVL20:
 716:boards/TMC2130_eval.c **** 		}
 236              		.loc 1 716 4 is_stmt 1 view .LVU63
 716:boards/TMC2130_eval.c **** 		}
 237              		.loc 1 716 41 is_stmt 0 view .LVU64
 238 00b8 42F21173 		movw	r3, #10001
 239 00bc B4FBF3F1 		udiv	r1, r4, r3
 240 00c0 03FB1141 		mls	r1, r3, r1, r4
 716:boards/TMC2130_eval.c **** 		}
 241              		.loc 1 716 9 view .LVU65
 242 00c4 204B     		ldr	r3, .L19+8
 716:boards/TMC2130_eval.c **** 		}
 243              		.loc 1 716 4 view .LVU66
 244 00c6 89B2     		uxth	r1, r1
 245 00c8 9B68     		ldr	r3, [r3, #8]
 246 00ca 0020     		movs	r0, #0
 247 00cc 9847     		blx	r3
 248              	.LVL21:
 249              	.L15:
 698:boards/TMC2130_eval.c **** 
 250              		.loc 1 698 11 view .LVU67
 251 00ce 0020     		movs	r0, #0
 252 00d0 DFE7     		b	.L4
 253              	.LVL22:
 254              	.L12:
 727:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 255              		.loc 1 727 3 is_stmt 1 view .LVU68
 256 00d2 1B4B     		ldr	r3, .L19
 727:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 257              		.loc 1 727 5 is_stmt 0 view .LVU69
 258 00d4 2468     		ldr	r4, [r4]
 259 00d6 DA68     		ldr	r2, [r3, #12]
 260              	.LVL23:
 727:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 261              		.loc 1 727 5 view .LVU70
 262 00d8 D2E90030 		ldrd	r3, r0, [r2]
 263              	.LVL24:
 727:boards/TMC2130_eval.c **** 			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
 264              		.loc 1 727 5 view .LVU71
 265 00dc 00F5F470 		add	r0, r0, #488
 266 00e0 1CB1     		cbz	r4, .L14
 728:boards/TMC2130_eval.c **** 		else
 267              		.loc 1 728 4 is_stmt 1 view .LVU72
 268 00e2 DB69     		ldr	r3, [r3, #28]
 269 00e4 0021     		movs	r1, #0
 270              	.LVL25:
 271              	.L18:
 741:boards/TMC2130_eval.c **** 		break;
 272              		.loc 1 741 3 is_stmt 0 view .LVU73
 273 00e6 9847     		blx	r3
 274              	.LVL26:
 742:boards/TMC2130_eval.c **** 	case 4:  // Read StepDir status bits
 275              		.loc 1 742 3 is_stmt 1 view .LVU74
 276 00e8 F1E7     		b	.L15
 277              	.LVL27:
 278              	.L14:
 730:boards/TMC2130_eval.c **** 		break;
 279              		.loc 1 730 4 view .LVU75
 280 00ea 9B68     		ldr	r3, [r3, #8]
 281              	.LVL28:
 282              	.L17:
 754:boards/TMC2130_eval.c **** 		break;
 283              		.loc 1 754 3 is_stmt 0 view .LVU76
 284 00ec 9847     		blx	r3
 285              	.LVL29:
 755:boards/TMC2130_eval.c **** 	default:
 286              		.loc 1 755 3 is_stmt 1 view .LVU77
 287 00ee EEE7     		b	.L15
 288              	.LVL30:
 289              	.L10:
 741:boards/TMC2130_eval.c **** 		break;
 290              		.loc 1 741 3 view .LVU78
 741:boards/TMC2130_eval.c **** 		break;
 291              		.loc 1 741 6 is_stmt 0 view .LVU79
 292 00f0 134B     		ldr	r3, .L19
 741:boards/TMC2130_eval.c **** 		break;
 293              		.loc 1 741 3 view .LVU80
 294 00f2 1168     		ldr	r1, [r2]
 295              	.LVL31:
 741:boards/TMC2130_eval.c **** 		break;
 296              		.loc 1 741 10 view .LVU81
 297 00f4 DB68     		ldr	r3, [r3, #12]
 741:boards/TMC2130_eval.c **** 		break;
 298              		.loc 1 741 3 view .LVU82
 299 00f6 134A     		ldr	r2, .L19+4
 300              	.LVL32:
 741:boards/TMC2130_eval.c **** 		break;
 301              		.loc 1 741 18 view .LVU83
 302 00f8 1B68     		ldr	r3, [r3]
 741:boards/TMC2130_eval.c **** 		break;
 303              		.loc 1 741 3 view .LVU84
 304 00fa 1069     		ldr	r0, [r2, #16]
 305              	.LVL33:
 741:boards/TMC2130_eval.c **** 		break;
 306              		.loc 1 741 3 view .LVU85
 307 00fc DB69     		ldr	r3, [r3, #28]
 308 00fe 0039     		subs	r1, r1, #0
 309 0100 18BF     		it	ne
 310 0102 0121     		movne	r1, #1
 311 0104 EFE7     		b	.L18
 312              	.LVL34:
 313              	.L9:
 744:boards/TMC2130_eval.c **** 		break;
 314              		.loc 1 744 3 is_stmt 1 view .LVU86
 744:boards/TMC2130_eval.c **** 		break;
 315              		.loc 1 744 12 is_stmt 0 view .LVU87
 316 0106 0846     		mov	r0, r1
 317              	.LVL35:
 744:boards/TMC2130_eval.c **** 		break;
 318              		.loc 1 744 12 view .LVU88
 319 0108 FFF7FEFF 		bl	StepDir_getStatus
 320              	.LVL36:
 744:boards/TMC2130_eval.c **** 		break;
 321              		.loc 1 744 12 view .LVU89
 322 010c 2060     		str	r0, [r4]
 745:boards/TMC2130_eval.c **** 	case 5:  // When running with the TMC4330 v1.2: CFG4 is routed from DIO6 (Motion Controller) to DI
 323              		.loc 1 745 3 is_stmt 1 view .LVU90
 324 010e DEE7     		b	.L15
 325              	.LVL37:
 326              	.L8:
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 327              		.loc 1 747 3 view .LVU91
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 328              		.loc 1 747 29 is_stmt 0 view .LVU92
 329 0110 0B4B     		ldr	r3, .L19
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 330              		.loc 1 747 23 view .LVU93
 331 0112 0C4A     		ldr	r2, .L19+4
 332              	.LVL38:
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 333              		.loc 1 747 29 view .LVU94
 334 0114 DB68     		ldr	r3, [r3, #12]
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 335              		.loc 1 747 25 view .LVU95
 336 0116 5868     		ldr	r0, [r3, #4]
 337              	.LVL39:
 748:boards/TMC2130_eval.c **** 		break;
 338              		.loc 1 748 18 view .LVU96
 339 0118 1B68     		ldr	r3, [r3]
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 340              		.loc 1 747 25 view .LVU97
 341 011a 00F59470 		add	r0, r0, #296
 748:boards/TMC2130_eval.c **** 		break;
 342              		.loc 1 748 3 view .LVU98
 343 011e DB68     		ldr	r3, [r3, #12]
 747:boards/TMC2130_eval.c **** 		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 344              		.loc 1 747 23 view .LVU99
 345 0120 1061     		str	r0, [r2, #16]
 748:boards/TMC2130_eval.c **** 		break;
 346              		.loc 1 748 3 is_stmt 1 view .LVU100
 347 0122 E3E7     		b	.L17
 348              	.LVL40:
 349              	.L6:
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 350              		.loc 1 753 3 view .LVU101
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 351              		.loc 1 753 29 is_stmt 0 view .LVU102
 352 0124 064B     		ldr	r3, .L19
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 353              		.loc 1 753 23 view .LVU103
 354 0126 074A     		ldr	r2, .L19+4
 355              	.LVL41:
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 356              		.loc 1 753 29 view .LVU104
 357 0128 DB68     		ldr	r3, [r3, #12]
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 358              		.loc 1 753 33 view .LVU105
 359 012a 5868     		ldr	r0, [r3, #4]
 360              	.LVL42:
 754:boards/TMC2130_eval.c **** 		break;
 361              		.loc 1 754 18 view .LVU106
 362 012c 1B68     		ldr	r3, [r3]
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 363              		.loc 1 753 25 view .LVU107
 364 012e 00F60801 		addw	r1, r0, #2056
 365              	.LVL43:
 754:boards/TMC2130_eval.c **** 		break;
 366              		.loc 1 754 3 view .LVU108
 367 0132 5B69     		ldr	r3, [r3, #20]
 753:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
 368              		.loc 1 753 23 view .LVU109
 369 0134 D160     		str	r1, [r2, #12]
 754:boards/TMC2130_eval.c **** 		break;
 370              		.loc 1 754 3 is_stmt 1 view .LVU110
 371 0136 00F55270 		add	r0, r0, #840
 372 013a D7E7     		b	.L17
 373              	.LVL44:
 374              	.L16:
 720:boards/TMC2130_eval.c **** 		}
 375              		.loc 1 720 11 is_stmt 0 view .LVU111
 376 013c 1020     		movs	r0, #16
 377              	.LVL45:
 760:boards/TMC2130_eval.c **** }
 378              		.loc 1 760 2 is_stmt 1 view .LVU112
 760:boards/TMC2130_eval.c **** }
 379              		.loc 1 760 9 is_stmt 0 view .LVU113
 380 013e A8E7     		b	.L4
 381              	.L20:
 382              		.align	2
 383              	.L19:
 384 0140 00000000 		.word	HAL
 385 0144 00000000 		.word	.LANCHOR0
 386 0148 00000000 		.word	Timer
 387              		.cfi_endproc
 388              	.LFE19:
 390              		.align	1
 391              		.syntax unified
 392              		.thumb
 393              		.thumb_func
 394              		.fpu softvfp
 396              	readRegister:
 397              	.LVL46:
 398              	.LFB17:
 658:boards/TMC2130_eval.c **** 	*value = tmc2130_readInt(motorToIC(motor), address);
 399              		.loc 1 658 1 is_stmt 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 659:boards/TMC2130_eval.c **** }
 403              		.loc 1 659 2 view .LVU115
 404              	.LBB232:
 405              	.LBI232:
  62:boards/TMC2130_eval.c **** {
 406              		.loc 1 62 31 view .LVU116
  62:boards/TMC2130_eval.c **** {
 407              		.loc 1 62 31 is_stmt 0 view .LVU117
 408              	.LBE232:
  64:boards/TMC2130_eval.c **** 
 409              		.loc 1 64 2 is_stmt 1 view .LVU118
  66:boards/TMC2130_eval.c **** }
 410              		.loc 1 66 2 view .LVU119
 658:boards/TMC2130_eval.c **** 	*value = tmc2130_readInt(motorToIC(motor), address);
 411              		.loc 1 658 1 is_stmt 0 view .LVU120
 412 014c 10B5     		push	{r4, lr}
 413              	.LCFI3:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 4, -8
 416              		.cfi_offset 14, -4
 659:boards/TMC2130_eval.c **** }
 417              		.loc 1 659 11 view .LVU121
 418 014e 0348     		ldr	r0, .L22
 419              	.LVL47:
 658:boards/TMC2130_eval.c **** 	*value = tmc2130_readInt(motorToIC(motor), address);
 420              		.loc 1 658 1 view .LVU122
 421 0150 1446     		mov	r4, r2
 659:boards/TMC2130_eval.c **** }
 422              		.loc 1 659 11 view .LVU123
 423 0152 FFF7FEFF 		bl	tmc2130_readInt
 424              	.LVL48:
 659:boards/TMC2130_eval.c **** }
 425              		.loc 1 659 9 view .LVU124
 426 0156 2060     		str	r0, [r4]
 660:boards/TMC2130_eval.c **** 
 427              		.loc 1 660 1 view .LVU125
 428 0158 10BD     		pop	{r4, pc}
 429              	.LVL49:
 430              	.L23:
 660:boards/TMC2130_eval.c **** 
 431              		.loc 1 660 1 view .LVU126
 432 015a 00BF     		.align	2
 433              	.L22:
 434 015c 00000000 		.word	TMC2130
 435              		.cfi_endproc
 436              	.LFE17:
 438              		.align	1
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu softvfp
 444              	periodicJob:
 445              	.LVL50:
 446              	.LFB18:
 663:boards/TMC2130_eval.c **** //	static int32_t m_velocity = 0;
 447              		.loc 1 663 1 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 676:boards/TMC2130_eval.c **** 
 451              		.loc 1 676 2 view .LVU128
 663:boards/TMC2130_eval.c **** //	static int32_t m_velocity = 0;
 452              		.loc 1 663 1 is_stmt 0 view .LVU129
 453 0160 10B5     		push	{r4, lr}
 454              	.LCFI4:
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 4, -8
 457              		.cfi_offset 14, -4
 676:boards/TMC2130_eval.c **** 
 458              		.loc 1 676 2 view .LVU130
 459 0162 094C     		ldr	r4, .L25
 663:boards/TMC2130_eval.c **** //	static int32_t m_velocity = 0;
 460              		.loc 1 663 1 view .LVU131
 461 0164 0146     		mov	r1, r0
 676:boards/TMC2130_eval.c **** 
 462              		.loc 1 676 2 view .LVU132
 463 0166 2046     		mov	r0, r4
 464              	.LVL51:
 676:boards/TMC2130_eval.c **** 
 465              		.loc 1 676 2 view .LVU133
 466 0168 FFF7FEFF 		bl	tmc2130_periodicJob
 467              	.LVL52:
 678:boards/TMC2130_eval.c **** 
 468              		.loc 1 678 2 is_stmt 1 view .LVU134
 469 016c 0020     		movs	r0, #0
 470 016e FFF7FEFF 		bl	StepDir_periodicJob
 471              	.LVL53:
 680:boards/TMC2130_eval.c **** 
 472              		.loc 1 680 2 view .LVU135
 473              	.LBB233:
 474              	.LBI233:
  62:boards/TMC2130_eval.c **** {
 475              		.loc 1 62 31 view .LVU136
  62:boards/TMC2130_eval.c **** {
 476              		.loc 1 62 31 is_stmt 0 view .LVU137
 477              	.LBE233:
  64:boards/TMC2130_eval.c **** 
 478              		.loc 1 64 2 is_stmt 1 view .LVU138
  66:boards/TMC2130_eval.c **** }
 479              		.loc 1 66 2 view .LVU139
 680:boards/TMC2130_eval.c **** 
 480              		.loc 1 680 44 is_stmt 0 view .LVU140
 481 0172 6F21     		movs	r1, #111
 482 0174 2046     		mov	r0, r4
 483 0176 FFF7FEFF 		bl	tmc2130_readInt
 484              	.LVL54:
 694:boards/TMC2130_eval.c **** 
 485              		.loc 1 694 1 view .LVU141
 486 017a BDE81040 		pop	{r4, lr}
 487              	.LCFI5:
 488              		.cfi_restore 14
 489              		.cfi_restore 4
 490              		.cfi_def_cfa_offset 0
 680:boards/TMC2130_eval.c **** 
 491              		.loc 1 680 2 view .LVU142
 492 017e C0F30061 		ubfx	r1, r0, #24, #1
 493 0182 0020     		movs	r0, #0
 494 0184 FFF7FEBF 		b	StepDir_stallGuard
 495              	.LVL55:
 496              	.L26:
 497              		.align	2
 498              	.L25:
 499 0188 00000000 		.word	TMC2130
 500              		.cfi_endproc
 501              	.LFE18:
 503              		.align	1
 504              		.syntax unified
 505              		.thumb
 506              		.thumb_func
 507              		.fpu softvfp
 509              	writeRegister:
 510              	.LVL56:
 511              	.LFB16:
 653:boards/TMC2130_eval.c **** 	tmc2130_writeInt(motorToIC(motor), address, value);
 512              		.loc 1 653 1 is_stmt 1 view -0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 654:boards/TMC2130_eval.c **** }
 517              		.loc 1 654 2 view .LVU144
 518              	.LBB234:
 519              	.LBI234:
  62:boards/TMC2130_eval.c **** {
 520              		.loc 1 62 31 view .LVU145
  62:boards/TMC2130_eval.c **** {
 521              		.loc 1 62 31 is_stmt 0 view .LVU146
 522              	.LBE234:
  64:boards/TMC2130_eval.c **** 
 523              		.loc 1 64 2 is_stmt 1 view .LVU147
  66:boards/TMC2130_eval.c **** }
 524              		.loc 1 66 2 view .LVU148
 654:boards/TMC2130_eval.c **** }
 525              		.loc 1 654 2 is_stmt 0 view .LVU149
 526 018c 0148     		ldr	r0, .L28
 527              	.LVL57:
 654:boards/TMC2130_eval.c **** }
 528              		.loc 1 654 2 view .LVU150
 529 018e FFF7FEBF 		b	tmc2130_writeInt
 530              	.LVL58:
 531              	.L29:
 654:boards/TMC2130_eval.c **** }
 532              		.loc 1 654 2 view .LVU151
 533 0192 00BF     		.align	2
 534              	.L28:
 535 0194 00000000 		.word	TMC2130
 536              		.cfi_endproc
 537              	.LFE16:
 539              		.align	1
 540              		.syntax unified
 541              		.thumb
 542              		.thumb_func
 543              		.fpu softvfp
 545              	moveTo:
 546              	.LVL59:
 547              	.LFB8:
 120:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 548              		.loc 1 120 1 is_stmt 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 121:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 552              		.loc 1 121 2 view .LVU153
 120:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 553              		.loc 1 120 1 is_stmt 0 view .LVU154
 554 0198 10B5     		push	{r4, lr}
 555              	.LCFI6:
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 4, -8
 558              		.cfi_offset 14, -4
 121:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 559              		.loc 1 121 4 view .LVU155
 560 019a 0446     		mov	r4, r0
 561 019c 18B9     		cbnz	r0, .L32
 124:boards/TMC2130_eval.c **** 
 562              		.loc 1 124 2 is_stmt 1 view .LVU156
 563 019e FFF7FEFF 		bl	StepDir_moveTo
 564              	.LVL60:
 126:boards/TMC2130_eval.c **** }
 565              		.loc 1 126 2 view .LVU157
 126:boards/TMC2130_eval.c **** }
 566              		.loc 1 126 9 is_stmt 0 view .LVU158
 567 01a2 2046     		mov	r0, r4
 568              	.L30:
 127:boards/TMC2130_eval.c **** 
 569              		.loc 1 127 1 view .LVU159
 570 01a4 10BD     		pop	{r4, pc}
 571              	.LVL61:
 572              	.L32:
 122:boards/TMC2130_eval.c **** 
 573              		.loc 1 122 10 view .LVU160
 574 01a6 0820     		movs	r0, #8
 575              	.LVL62:
 122:boards/TMC2130_eval.c **** 
 576              		.loc 1 122 10 view .LVU161
 577 01a8 FCE7     		b	.L30
 578              		.cfi_endproc
 579              	.LFE8:
 581              		.align	1
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu softvfp
 587              	rotate:
 588              	.LVL63:
 589              	.LFB4:
  95:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 590              		.loc 1 95 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
  96:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 594              		.loc 1 96 2 view .LVU163
  95:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 595              		.loc 1 95 1 is_stmt 0 view .LVU164
 596 01aa 10B5     		push	{r4, lr}
 597              	.LCFI7:
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 4, -8
 600              		.cfi_offset 14, -4
  96:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 601              		.loc 1 96 4 view .LVU165
 602 01ac 0446     		mov	r4, r0
 603 01ae 18B9     		cbnz	r0, .L35
  99:boards/TMC2130_eval.c **** 
 604              		.loc 1 99 2 is_stmt 1 view .LVU166
 605 01b0 FFF7FEFF 		bl	StepDir_rotate
 606              	.LVL64:
 101:boards/TMC2130_eval.c **** }
 607              		.loc 1 101 2 view .LVU167
 101:boards/TMC2130_eval.c **** }
 608              		.loc 1 101 9 is_stmt 0 view .LVU168
 609 01b4 2046     		mov	r0, r4
 610              	.L33:
 102:boards/TMC2130_eval.c **** 
 611              		.loc 1 102 1 view .LVU169
 612 01b6 10BD     		pop	{r4, pc}
 613              	.LVL65:
 614              	.L35:
  97:boards/TMC2130_eval.c **** 
 615              		.loc 1 97 10 view .LVU170
 616 01b8 0820     		movs	r0, #8
 617              	.LVL66:
  97:boards/TMC2130_eval.c **** 
 618              		.loc 1 97 10 view .LVU171
 619 01ba FCE7     		b	.L33
 620              		.cfi_endproc
 621              	.LFE4:
 623              		.align	1
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 627              		.fpu softvfp
 629              	stop:
 630              	.LVL67:
 631              	.LFB7:
 115:boards/TMC2130_eval.c **** 	return rotate(motor, 0);
 632              		.loc 1 115 1 is_stmt 1 view -0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 116:boards/TMC2130_eval.c **** }
 637              		.loc 1 116 2 view .LVU173
 116:boards/TMC2130_eval.c **** }
 638              		.loc 1 116 9 is_stmt 0 view .LVU174
 639 01bc 0021     		movs	r1, #0
 640 01be F4E7     		b	rotate
 641              	.LVL68:
 116:boards/TMC2130_eval.c **** }
 642              		.loc 1 116 9 view .LVU175
 643              		.cfi_endproc
 644              	.LFE7:
 646              		.align	1
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu softvfp
 652              	left:
 653              	.LVL69:
 654              	.LFB6:
 110:boards/TMC2130_eval.c **** 	return rotate(motor, -velocity);
 655              		.loc 1 110 1 is_stmt 1 view -0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 111:boards/TMC2130_eval.c **** }
 660              		.loc 1 111 2 view .LVU177
 111:boards/TMC2130_eval.c **** }
 661              		.loc 1 111 9 is_stmt 0 view .LVU178
 662 01c0 4942     		rsbs	r1, r1, #0
 663              	.LVL70:
 111:boards/TMC2130_eval.c **** }
 664              		.loc 1 111 9 view .LVU179
 665 01c2 F2E7     		b	rotate
 666              	.LVL71:
 111:boards/TMC2130_eval.c **** }
 667              		.loc 1 111 9 view .LVU180
 668              		.cfi_endproc
 669              	.LFE6:
 671              		.align	1
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 675              		.fpu softvfp
 677              	right:
 678              	.LVL72:
 679              	.LFB5:
 105:boards/TMC2130_eval.c **** 	return rotate(motor, velocity);
 680              		.loc 1 105 1 is_stmt 1 view -0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              		@ link register save eliminated.
 106:boards/TMC2130_eval.c **** }
 685              		.loc 1 106 2 view .LVU182
 106:boards/TMC2130_eval.c **** }
 686              		.loc 1 106 9 is_stmt 0 view .LVU183
 687 01c4 F1E7     		b	rotate
 688              	.LVL73:
 106:boards/TMC2130_eval.c **** }
 689              		.loc 1 106 9 view .LVU184
 690              		.cfi_endproc
 691              	.LFE5:
 693              		.global	__aeabi_uldivmod
 694              		.global	__aeabi_ldivmod
 695              		.align	1
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu softvfp
 701              	handleParameter:
 702              	.LVL74:
 703              	.LFB10:
 141:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 704              		.loc 1 141 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 142:boards/TMC2130_eval.c **** 
 708              		.loc 1 142 2 view .LVU186
 144:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 709              		.loc 1 144 2 view .LVU187
 141:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 710              		.loc 1 141 1 is_stmt 0 view .LVU188
 711 01c6 70B5     		push	{r4, r5, r6, lr}
 712              	.LCFI8:
 713              		.cfi_def_cfa_offset 16
 714              		.cfi_offset 4, -16
 715              		.cfi_offset 5, -12
 716              		.cfi_offset 6, -8
 717              		.cfi_offset 14, -4
 141:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 718              		.loc 1 141 1 view .LVU189
 719 01c8 0446     		mov	r4, r0
 720 01ca 1D46     		mov	r5, r3
 144:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 721              		.loc 1 144 4 view .LVU190
 722 01cc 0029     		cmp	r1, #0
 723 01ce 40F01F85 		bne	.L163
 147:boards/TMC2130_eval.c **** 
 724              		.loc 1 147 2 is_stmt 1 view .LVU191
 149:boards/TMC2130_eval.c **** 	{
 725              		.loc 1 149 2 view .LVU192
 726 01d2 332A     		cmp	r2, #51
 727 01d4 00F28280 		bhi	.L41
 728 01d8 332A     		cmp	r2, #51
 729 01da 00F21F85 		bhi	.L165
 730 01de DFE812F0 		tbh	[pc, r2, lsl #1]
 731              	.LVL75:
 732              	.L72:
 733 01e2 8500     		.2byte	(.L89-.L72)/2
 734 01e4 9000     		.2byte	(.L88-.L72)/2
 735 01e6 9B00     		.2byte	(.L87-.L72)/2
 736 01e8 A600     		.2byte	(.L86-.L72)/2
 737 01ea C700     		.2byte	(.L85-.L72)/2
 738 01ec D500     		.2byte	(.L84-.L72)/2
 739 01ee E000     		.2byte	(.L83-.L72)/2
 740 01f0 F800     		.2byte	(.L82-.L72)/2
 741 01f2 0F01     		.2byte	(.L81-.L72)/2
 742 01f4 1D05     		.2byte	(.L165-.L72)/2
 743 01f6 1D05     		.2byte	(.L165-.L72)/2
 744 01f8 1D05     		.2byte	(.L165-.L72)/2
 745 01fa 1D05     		.2byte	(.L165-.L72)/2
 746 01fc 1D05     		.2byte	(.L165-.L72)/2
 747 01fe 1D05     		.2byte	(.L165-.L72)/2
 748 0200 1D05     		.2byte	(.L165-.L72)/2
 749 0202 1D05     		.2byte	(.L165-.L72)/2
 750 0204 1D05     		.2byte	(.L165-.L72)/2
 751 0206 1D05     		.2byte	(.L165-.L72)/2
 752 0208 1D05     		.2byte	(.L165-.L72)/2
 753 020a 1D05     		.2byte	(.L165-.L72)/2
 754 020c 1801     		.2byte	(.L80-.L72)/2
 755 020e 1D05     		.2byte	(.L165-.L72)/2
 756 0210 2201     		.2byte	(.L79-.L72)/2
 757 0212 4701     		.2byte	(.L78-.L72)/2
 758 0214 1D05     		.2byte	(.L165-.L72)/2
 759 0216 5501     		.2byte	(.L77-.L72)/2
 760 0218 6D01     		.2byte	(.L76-.L72)/2
 761 021a 8501     		.2byte	(.L75-.L72)/2
 762 021c 9F01     		.2byte	(.L74-.L72)/2
 763 021e 1D05     		.2byte	(.L165-.L72)/2
 764 0220 1D05     		.2byte	(.L165-.L72)/2
 765 0222 1D05     		.2byte	(.L165-.L72)/2
 766 0224 1D05     		.2byte	(.L165-.L72)/2
 767 0226 1D05     		.2byte	(.L165-.L72)/2
 768 0228 1D05     		.2byte	(.L165-.L72)/2
 769 022a 1D05     		.2byte	(.L165-.L72)/2
 770 022c 1D05     		.2byte	(.L165-.L72)/2
 771 022e 1D05     		.2byte	(.L165-.L72)/2
 772 0230 1D05     		.2byte	(.L165-.L72)/2
 773 0232 1D05     		.2byte	(.L165-.L72)/2
 774 0234 1D05     		.2byte	(.L165-.L72)/2
 775 0236 1D05     		.2byte	(.L165-.L72)/2
 776 0238 1D05     		.2byte	(.L165-.L72)/2
 777 023a 1D05     		.2byte	(.L165-.L72)/2
 778 023c 1D05     		.2byte	(.L165-.L72)/2
 779 023e 1D05     		.2byte	(.L165-.L72)/2
 780 0240 1D05     		.2byte	(.L165-.L72)/2
 781 0242 1D05     		.2byte	(.L165-.L72)/2
 782 0244 1D05     		.2byte	(.L165-.L72)/2
 783 0246 B801     		.2byte	(.L73-.L72)/2
 784 0248 C301     		.2byte	(.L71-.L72)/2
 785              		.p2align 1
 786              	.L90:
 149:boards/TMC2130_eval.c **** 	{
 787              		.loc 1 149 2 is_stmt 0 view .LVU193
 788 024a 8C3A     		subs	r2, r2, #140
 789              	.LVL76:
 149:boards/TMC2130_eval.c **** 	{
 790              		.loc 1 149 2 view .LVU194
 791 024c 422A     		cmp	r2, #66
 792 024e 00F2E284 		bhi	.L164
 793 0252 DFE812F0 		tbh	[pc, r2, lsl #1]
 794              	.L44:
 795 0256 9401     		.2byte	(.L70-.L44)/2
 796 0258 E004     		.2byte	(.L164-.L44)/2
 797 025a E004     		.2byte	(.L164-.L44)/2
 798 025c E004     		.2byte	(.L164-.L44)/2
 799 025e E004     		.2byte	(.L164-.L44)/2
 800 0260 E004     		.2byte	(.L164-.L44)/2
 801 0262 E004     		.2byte	(.L164-.L44)/2
 802 0264 E004     		.2byte	(.L164-.L44)/2
 803 0266 E004     		.2byte	(.L164-.L44)/2
 804 0268 E004     		.2byte	(.L164-.L44)/2
 805 026a E004     		.2byte	(.L164-.L44)/2
 806 026c E004     		.2byte	(.L164-.L44)/2
 807 026e E004     		.2byte	(.L164-.L44)/2
 808 0270 E004     		.2byte	(.L164-.L44)/2
 809 0272 E004     		.2byte	(.L164-.L44)/2
 810 0274 E004     		.2byte	(.L164-.L44)/2
 811 0276 E004     		.2byte	(.L164-.L44)/2
 812 0278 E004     		.2byte	(.L164-.L44)/2
 813 027a E004     		.2byte	(.L164-.L44)/2
 814 027c E004     		.2byte	(.L164-.L44)/2
 815 027e E004     		.2byte	(.L164-.L44)/2
 816 0280 E004     		.2byte	(.L164-.L44)/2
 817 0282 E501     		.2byte	(.L69-.L44)/2
 818 0284 FD01     		.2byte	(.L68-.L44)/2
 819 0286 1502     		.2byte	(.L67-.L44)/2
 820 0288 2D02     		.2byte	(.L66-.L44)/2
 821 028a 8802     		.2byte	(.L65-.L44)/2
 822 028c CD02     		.2byte	(.L64-.L44)/2
 823 028e E402     		.2byte	(.L63-.L44)/2
 824 0290 FB02     		.2byte	(.L62-.L44)/2
 825 0292 1303     		.2byte	(.L61-.L44)/2
 826 0294 2B03     		.2byte	(.L60-.L44)/2
 827 0296 4303     		.2byte	(.L59-.L44)/2
 828 0298 5D03     		.2byte	(.L58-.L44)/2
 829 029a 7503     		.2byte	(.L57-.L44)/2
 830 029c E004     		.2byte	(.L164-.L44)/2
 831 029e E004     		.2byte	(.L164-.L44)/2
 832 02a0 E004     		.2byte	(.L164-.L44)/2
 833 02a2 E004     		.2byte	(.L164-.L44)/2
 834 02a4 9403     		.2byte	(.L56-.L44)/2
 835 02a6 AC03     		.2byte	(.L55-.L44)/2
 836 02a8 B703     		.2byte	(.L54-.L44)/2
 837 02aa C303     		.2byte	(.L53-.L44)/2
 838 02ac E004     		.2byte	(.L164-.L44)/2
 839 02ae E803     		.2byte	(.L52-.L44)/2
 840 02b0 0004     		.2byte	(.L51-.L44)/2
 841 02b2 1804     		.2byte	(.L50-.L44)/2
 842 02b4 3D04     		.2byte	(.L49-.L44)/2
 843 02b6 6404     		.2byte	(.L48-.L44)/2
 844 02b8 E004     		.2byte	(.L164-.L44)/2
 845 02ba E004     		.2byte	(.L164-.L44)/2
 846 02bc 7A04     		.2byte	(.L47-.L44)/2
 847 02be 9904     		.2byte	(.L46-.L44)/2
 848 02c0 E004     		.2byte	(.L164-.L44)/2
 849 02c2 E004     		.2byte	(.L164-.L44)/2
 850 02c4 E004     		.2byte	(.L164-.L44)/2
 851 02c6 E004     		.2byte	(.L164-.L44)/2
 852 02c8 E004     		.2byte	(.L164-.L44)/2
 853 02ca E004     		.2byte	(.L164-.L44)/2
 854 02cc E004     		.2byte	(.L164-.L44)/2
 855 02ce E004     		.2byte	(.L164-.L44)/2
 856 02d0 E004     		.2byte	(.L164-.L44)/2
 857 02d2 E004     		.2byte	(.L164-.L44)/2
 858 02d4 E004     		.2byte	(.L164-.L44)/2
 859 02d6 B404     		.2byte	(.L45-.L44)/2
 860 02d8 E004     		.2byte	(.L164-.L44)/2
 861 02da D304     		.2byte	(.L43-.L44)/2
 862              	.LVL77:
 863              		.p2align 1
 864              	.L41:
 149:boards/TMC2130_eval.c **** 	{
 865              		.loc 1 149 2 view .LVU195
 866 02dc 02F17403 		add	r3, r2, #116
 867              	.LVL78:
 149:boards/TMC2130_eval.c **** 	{
 868              		.loc 1 149 2 view .LVU196
 869 02e0 DBB2     		uxtb	r3, r3
 870 02e2 422B     		cmp	r3, #66
 871 02e4 B1D9     		bls	.L90
 872 02e6 0424     		movs	r4, #4
 873              	.LVL79:
 874              	.L39:
 601:boards/TMC2130_eval.c **** 
 875              		.loc 1 601 1 view .LVU197
 876 02e8 2046     		mov	r0, r4
 877 02ea 70BD     		pop	{r4, r5, r6, pc}
 878              	.LVL80:
 879              	.L89:
 153:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 880              		.loc 1 153 3 is_stmt 1 view .LVU198
 153:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetPosition(motor);
 881              		.loc 1 153 5 is_stmt 0 view .LVU199
 882 02ec 18B9     		cbnz	r0, .L91
 154:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 883              		.loc 1 154 4 is_stmt 1 view .LVU200
 154:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 884              		.loc 1 154 13 is_stmt 0 view .LVU201
 885 02ee FFF7FEFF 		bl	StepDir_getTargetPosition
 886              	.LVL81:
 154:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 887              		.loc 1 154 11 view .LVU202
 888 02f2 2860     		str	r0, [r5]
 889 02f4 F8E7     		b	.L39
 890              	.LVL82:
 891              	.L91:
 155:boards/TMC2130_eval.c **** 			StepDir_moveTo(motor, *value);
 892              		.loc 1 155 10 is_stmt 1 view .LVU203
 156:boards/TMC2130_eval.c **** 		}
 893              		.loc 1 156 4 view .LVU204
 894 02f6 2968     		ldr	r1, [r5]
 895              	.LVL83:
 156:boards/TMC2130_eval.c **** 		}
 896              		.loc 1 156 4 is_stmt 0 view .LVU205
 897 02f8 0020     		movs	r0, #0
 898              	.LVL84:
 156:boards/TMC2130_eval.c **** 		}
 899              		.loc 1 156 4 view .LVU206
 900 02fa FFF7FEFF 		bl	StepDir_moveTo
 901              	.LVL85:
 142:boards/TMC2130_eval.c **** 
 902              		.loc 1 142 11 view .LVU207
 903 02fe 0024     		movs	r4, #0
 904 0300 F2E7     		b	.L39
 905              	.LVL86:
 906              	.L88:
 161:boards/TMC2130_eval.c **** 			*value = StepDir_getActualPosition(motor);
 907              		.loc 1 161 3 is_stmt 1 view .LVU208
 161:boards/TMC2130_eval.c **** 			*value = StepDir_getActualPosition(motor);
 908              		.loc 1 161 5 is_stmt 0 view .LVU209
 909 0302 18B9     		cbnz	r0, .L92
 162:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 910              		.loc 1 162 4 is_stmt 1 view .LVU210
 162:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 911              		.loc 1 162 13 is_stmt 0 view .LVU211
 912 0304 FFF7FEFF 		bl	StepDir_getActualPosition
 913              	.LVL87:
 162:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 914              		.loc 1 162 11 view .LVU212
 915 0308 2860     		str	r0, [r5]
 916 030a EDE7     		b	.L39
 917              	.LVL88:
 918              	.L92:
 163:boards/TMC2130_eval.c **** 			StepDir_setActualPosition(motor, *value);
 919              		.loc 1 163 10 is_stmt 1 view .LVU213
 164:boards/TMC2130_eval.c **** 		}
 920              		.loc 1 164 4 view .LVU214
 921 030c 2968     		ldr	r1, [r5]
 922              	.LVL89:
 164:boards/TMC2130_eval.c **** 		}
 923              		.loc 1 164 4 is_stmt 0 view .LVU215
 924 030e 0020     		movs	r0, #0
 925              	.LVL90:
 164:boards/TMC2130_eval.c **** 		}
 926              		.loc 1 164 4 view .LVU216
 927 0310 FFF7FEFF 		bl	StepDir_setActualPosition
 928              	.LVL91:
 142:boards/TMC2130_eval.c **** 
 929              		.loc 1 142 11 view .LVU217
 930 0314 0024     		movs	r4, #0
 931 0316 E7E7     		b	.L39
 932              	.LVL92:
 933              	.L87:
 169:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 934              		.loc 1 169 3 is_stmt 1 view .LVU218
 169:boards/TMC2130_eval.c **** 			*value = StepDir_getTargetVelocity(motor);
 935              		.loc 1 169 5 is_stmt 0 view .LVU219
 936 0318 18B9     		cbnz	r0, .L93
 170:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 937              		.loc 1 170 4 is_stmt 1 view .LVU220
 170:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 938              		.loc 1 170 13 is_stmt 0 view .LVU221
 939 031a FFF7FEFF 		bl	StepDir_getTargetVelocity
 940              	.LVL93:
 170:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 941              		.loc 1 170 11 view .LVU222
 942 031e 2860     		str	r0, [r5]
 943 0320 E2E7     		b	.L39
 944              	.LVL94:
 945              	.L93:
 171:boards/TMC2130_eval.c **** 			StepDir_rotate(motor, *value);
 946              		.loc 1 171 10 is_stmt 1 view .LVU223
 172:boards/TMC2130_eval.c **** 		}
 947              		.loc 1 172 4 view .LVU224
 948 0322 2968     		ldr	r1, [r5]
 949              	.LVL95:
 172:boards/TMC2130_eval.c **** 		}
 950              		.loc 1 172 4 is_stmt 0 view .LVU225
 951 0324 0020     		movs	r0, #0
 952              	.LVL96:
 172:boards/TMC2130_eval.c **** 		}
 953              		.loc 1 172 4 view .LVU226
 954 0326 FFF7FEFF 		bl	StepDir_rotate
 955              	.LVL97:
 142:boards/TMC2130_eval.c **** 
 956              		.loc 1 142 11 view .LVU227
 957 032a 0024     		movs	r4, #0
 958 032c DCE7     		b	.L39
 959              	.LVL98:
 960              	.L86:
 177:boards/TMC2130_eval.c **** 			switch(StepDir_getMode(motor)) {
 961              		.loc 1 177 3 is_stmt 1 view .LVU228
 177:boards/TMC2130_eval.c **** 			switch(StepDir_getMode(motor)) {
 962              		.loc 1 177 5 is_stmt 0 view .LVU229
 963 032e 0028     		cmp	r0, #0
 964 0330 40F07784 		bne	.L166
 178:boards/TMC2130_eval.c **** 			case STEPDIR_INTERNAL:
 965              		.loc 1 178 4 is_stmt 1 view .LVU230
 178:boards/TMC2130_eval.c **** 			case STEPDIR_INTERNAL:
 966              		.loc 1 178 11 is_stmt 0 view .LVU231
 967 0334 FFF7FEFF 		bl	StepDir_getMode
 968              	.LVL99:
 178:boards/TMC2130_eval.c **** 			case STEPDIR_INTERNAL:
 969              		.loc 1 178 11 view .LVU232
 970 0338 18B9     		cbnz	r0, .L94
 180:boards/TMC2130_eval.c **** 				break;
 971              		.loc 1 180 5 is_stmt 1 view .LVU233
 180:boards/TMC2130_eval.c **** 				break;
 972              		.loc 1 180 14 is_stmt 0 view .LVU234
 973 033a FFF7FEFF 		bl	StepDir_getActualVelocity
 974              	.LVL100:
 180:boards/TMC2130_eval.c **** 				break;
 975              		.loc 1 180 12 view .LVU235
 976 033e 2860     		str	r0, [r5]
 181:boards/TMC2130_eval.c **** 			case STEPDIR_EXTERNAL:
 977              		.loc 1 181 5 is_stmt 1 view .LVU236
 978 0340 D2E7     		b	.L39
 979              	.L94:
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 980              		.loc 1 184 5 view .LVU237
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 981              		.loc 1 184 37 is_stmt 0 view .LVU238
 982 0342 2046     		mov	r0, r4
 983 0344 FFF7FEFF 		bl	StepDir_getFrequency
 984              	.LVL101:
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 985              		.loc 1 184 92 view .LVU239
 986 0348 1221     		movs	r1, #18
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 987              		.loc 1 184 37 view .LVU240
 988 034a 0646     		mov	r6, r0
 989              	.LBB235:
 990              	.LBI235:
  62:boards/TMC2130_eval.c **** {
 991              		.loc 1 62 31 is_stmt 1 view .LVU241
 992              	.LVL102:
  62:boards/TMC2130_eval.c **** {
 993              		.loc 1 62 31 is_stmt 0 view .LVU242
 994              	.LBE235:
  64:boards/TMC2130_eval.c **** 
 995              		.loc 1 64 2 is_stmt 1 view .LVU243
  66:boards/TMC2130_eval.c **** }
 996              		.loc 1 66 2 view .LVU244
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 997              		.loc 1 184 92 is_stmt 0 view .LVU245
 998 034c AD48     		ldr	r0, .L182
 999 034e FFF7FEFF 		bl	tmc2130_readInt
 1000              	.LVL103:
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1001              		.loc 1 184 83 view .LVU246
 1002 0352 C0F31302 		ubfx	r2, r0, #0, #20
 184:boards/TMC2130_eval.c **** 				*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1003              		.loc 1 184 81 view .LVU247
 1004 0356 7A20     		movs	r0, #122
 1005 0358 D317     		asrs	r3, r2, #31
 1006 035a A6FB0001 		umull	r0, r1, r6, r0
 1007 035e FFF7FEFF 		bl	__aeabi_ldivmod
 1008              	.LVL104:
 185:boards/TMC2130_eval.c **** 				break;
 1009              		.loc 1 185 5 is_stmt 1 view .LVU248
 185:boards/TMC2130_eval.c **** 				break;
 1010              		.loc 1 185 30 is_stmt 0 view .LVU249
 1011 0362 00F11303 		add	r3, r0, #19
 185:boards/TMC2130_eval.c **** 				break;
 1012              		.loc 1 185 40 view .LVU250
 1013 0366 262B     		cmp	r3, #38
 1014 0368 98BF     		it	ls
 1015 036a 0020     		movls	r0, #0
 1016              	.LVL105:
 185:boards/TMC2130_eval.c **** 				break;
 1017              		.loc 1 185 12 view .LVU251
 1018 036c 2860     		str	r0, [r5]
 186:boards/TMC2130_eval.c **** 			}
 1019              		.loc 1 186 5 is_stmt 1 view .LVU252
 1020 036e BBE7     		b	.L39
 1021              	.LVL106:
 1022              	.L85:
 194:boards/TMC2130_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 1023              		.loc 1 194 3 view .LVU253
 194:boards/TMC2130_eval.c **** 			*value = StepDir_getVelocityMax(motor);
 1024              		.loc 1 194 5 is_stmt 0 view .LVU254
 1025 0370 18B9     		cbnz	r0, .L96
 195:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1026              		.loc 1 195 4 is_stmt 1 view .LVU255
 195:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1027              		.loc 1 195 13 is_stmt 0 view .LVU256
 1028 0372 FFF7FEFF 		bl	StepDir_getVelocityMax
 1029              	.LVL107:
 195:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1030              		.loc 1 195 11 view .LVU257
 1031 0376 2860     		str	r0, [r5]
 1032 0378 B6E7     		b	.L39
 1033              	.LVL108:
 1034              	.L96:
 196:boards/TMC2130_eval.c **** 			StepDir_setVelocityMax(motor, abs(*value));
 1035              		.loc 1 196 10 is_stmt 1 view .LVU258
 197:boards/TMC2130_eval.c **** 		}
 1036              		.loc 1 197 4 view .LVU259
 1037 037a 2968     		ldr	r1, [r5]
 1038              	.LVL109:
 197:boards/TMC2130_eval.c **** 		}
 1039              		.loc 1 197 4 is_stmt 0 view .LVU260
 1040 037c 0029     		cmp	r1, #0
 1041 037e B8BF     		it	lt
 1042 0380 4942     		rsblt	r1, r1, #0
 1043 0382 0020     		movs	r0, #0
 1044              	.LVL110:
 197:boards/TMC2130_eval.c **** 		}
 1045              		.loc 1 197 4 view .LVU261
 1046 0384 FFF7FEFF 		bl	StepDir_setVelocityMax
 1047              	.LVL111:
 142:boards/TMC2130_eval.c **** 
 1048              		.loc 1 142 11 view .LVU262
 1049 0388 0024     		movs	r4, #0
 1050 038a ADE7     		b	.L39
 1051              	.LVL112:
 1052              	.L84:
 202:boards/TMC2130_eval.c **** 			*value = StepDir_getAcceleration(motor);
 1053              		.loc 1 202 3 is_stmt 1 view .LVU263
 202:boards/TMC2130_eval.c **** 			*value = StepDir_getAcceleration(motor);
 1054              		.loc 1 202 5 is_stmt 0 view .LVU264
 1055 038c 18B9     		cbnz	r0, .L97
 203:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1056              		.loc 1 203 4 is_stmt 1 view .LVU265
 203:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1057              		.loc 1 203 13 is_stmt 0 view .LVU266
 1058 038e FFF7FEFF 		bl	StepDir_getAcceleration
 1059              	.LVL113:
 203:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1060              		.loc 1 203 11 view .LVU267
 1061 0392 2860     		str	r0, [r5]
 1062 0394 A8E7     		b	.L39
 1063              	.LVL114:
 1064              	.L97:
 204:boards/TMC2130_eval.c **** 			StepDir_setAcceleration(motor, *value);
 1065              		.loc 1 204 10 is_stmt 1 view .LVU268
 205:boards/TMC2130_eval.c **** 		}
 1066              		.loc 1 205 4 view .LVU269
 1067 0396 2968     		ldr	r1, [r5]
 1068              	.LVL115:
 205:boards/TMC2130_eval.c **** 		}
 1069              		.loc 1 205 4 is_stmt 0 view .LVU270
 1070 0398 0020     		movs	r0, #0
 1071              	.LVL116:
 205:boards/TMC2130_eval.c **** 		}
 1072              		.loc 1 205 4 view .LVU271
 1073 039a FFF7FEFF 		bl	StepDir_setAcceleration
 1074              	.LVL117:
 142:boards/TMC2130_eval.c **** 
 1075              		.loc 1 142 11 view .LVU272
 1076 039e 0024     		movs	r4, #0
 1077 03a0 A2E7     		b	.L39
 1078              	.LVL118:
 1079              	.L83:
 210:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRU
 1080              		.loc 1 210 3 is_stmt 1 view .LVU273
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1081              		.loc 1 211 13 is_stmt 0 view .LVU274
 1082 03a2 9848     		ldr	r0, .L182
 1083              	.LVL119:
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1084              		.loc 1 211 13 view .LVU275
 1085 03a4 1021     		movs	r1, #16
 1086              	.LVL120:
 210:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRU
 1087              		.loc 1 210 5 view .LVU276
 1088 03a6 2CB9     		cbnz	r4, .L98
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1089              		.loc 1 211 4 is_stmt 1 view .LVU277
 1090              	.LBB236:
 1091              	.LBI236:
  62:boards/TMC2130_eval.c **** {
 1092              		.loc 1 62 31 view .LVU278
 1093              	.LVL121:
  62:boards/TMC2130_eval.c **** {
 1094              		.loc 1 62 31 is_stmt 0 view .LVU279
 1095              	.LBE236:
  64:boards/TMC2130_eval.c **** 
 1096              		.loc 1 64 2 is_stmt 1 view .LVU280
  66:boards/TMC2130_eval.c **** }
 1097              		.loc 1 66 2 view .LVU281
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1098              		.loc 1 211 13 is_stmt 0 view .LVU282
 1099 03a8 FFF7FEFF 		bl	tmc2130_readInt
 1100              	.LVL122:
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1101              		.loc 1 211 13 view .LVU283
 1102 03ac C0F30420 		ubfx	r0, r0, #8, #5
 211:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1103              		.loc 1 211 11 view .LVU284
 1104 03b0 2860     		str	r0, [r5]
 1105 03b2 99E7     		b	.L39
 1106              	.LVL123:
 1107              	.L98:
 212:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRUN_SHIFT
 1108              		.loc 1 212 10 is_stmt 1 view .LVU285
 213:boards/TMC2130_eval.c **** 		}
 1109              		.loc 1 213 4 view .LVU286
 1110              	.LBB237:
 1111              	.LBI237:
  62:boards/TMC2130_eval.c **** {
 1112              		.loc 1 62 31 view .LVU287
  62:boards/TMC2130_eval.c **** {
 1113              		.loc 1 62 31 is_stmt 0 view .LVU288
 1114              	.LBE237:
  64:boards/TMC2130_eval.c **** 
 1115              		.loc 1 64 2 is_stmt 1 view .LVU289
  66:boards/TMC2130_eval.c **** }
 1116              		.loc 1 66 2 view .LVU290
 1117              	.LBB238:
 1118              	.LBI238:
  62:boards/TMC2130_eval.c **** {
 1119              		.loc 1 62 31 view .LVU291
  62:boards/TMC2130_eval.c **** {
 1120              		.loc 1 62 31 is_stmt 0 view .LVU292
 1121              	.LBE238:
  64:boards/TMC2130_eval.c **** 
 1122              		.loc 1 64 2 is_stmt 1 view .LVU293
  66:boards/TMC2130_eval.c **** }
 1123              		.loc 1 66 2 view .LVU294
 213:boards/TMC2130_eval.c **** 		}
 1124              		.loc 1 213 4 is_stmt 0 view .LVU295
 1125 03b4 FFF7FEFF 		bl	tmc2130_readInt
 1126              	.LVL124:
 213:boards/TMC2130_eval.c **** 		}
 1127              		.loc 1 213 4 view .LVU296
 1128 03b8 2B68     		ldr	r3, [r5]
 1129 03ba 1B02     		lsls	r3, r3, #8
 1130 03bc 03F4F853 		and	r3, r3, #7936
 1131 03c0 20F4F852 		bic	r2, r0, #7936
 1132 03c4 1A43     		orrs	r2, r2, r3
 1133 03c6 8F48     		ldr	r0, .L182
 1134 03c8 1021     		movs	r1, #16
 1135 03ca FFF7FEFF 		bl	tmc2130_writeInt
 1136              	.LVL125:
 142:boards/TMC2130_eval.c **** 
 1137              		.loc 1 142 11 view .LVU297
 1138 03ce 0024     		movs	r4, #0
 1139 03d0 8AE7     		b	.L39
 1140              	.LVL126:
 1141              	.L82:
 218:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IH
 1142              		.loc 1 218 3 is_stmt 1 view .LVU298
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1143              		.loc 1 219 13 is_stmt 0 view .LVU299
 1144 03d2 8C48     		ldr	r0, .L182
 1145              	.LVL127:
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1146              		.loc 1 219 13 view .LVU300
 1147 03d4 1021     		movs	r1, #16
 1148              	.LVL128:
 218:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IH
 1149              		.loc 1 218 5 view .LVU301
 1150 03d6 2CB9     		cbnz	r4, .L99
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1151              		.loc 1 219 4 is_stmt 1 view .LVU302
 1152              	.LBB239:
 1153              	.LBI239:
  62:boards/TMC2130_eval.c **** {
 1154              		.loc 1 62 31 view .LVU303
 1155              	.LVL129:
  62:boards/TMC2130_eval.c **** {
 1156              		.loc 1 62 31 is_stmt 0 view .LVU304
 1157              	.LBE239:
  64:boards/TMC2130_eval.c **** 
 1158              		.loc 1 64 2 is_stmt 1 view .LVU305
  66:boards/TMC2130_eval.c **** }
 1159              		.loc 1 66 2 view .LVU306
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1160              		.loc 1 219 13 is_stmt 0 view .LVU307
 1161 03d8 FFF7FEFF 		bl	tmc2130_readInt
 1162              	.LVL130:
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1163              		.loc 1 219 13 view .LVU308
 1164 03dc 00F01F00 		and	r0, r0, #31
 219:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1165              		.loc 1 219 11 view .LVU309
 1166 03e0 2860     		str	r0, [r5]
 1167 03e2 81E7     		b	.L39
 1168              	.LVL131:
 1169              	.L99:
 220:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHI
 1170              		.loc 1 220 10 is_stmt 1 view .LVU310
 221:boards/TMC2130_eval.c **** 		}
 1171              		.loc 1 221 4 view .LVU311
 1172              	.LBB240:
 1173              	.LBI240:
  62:boards/TMC2130_eval.c **** {
 1174              		.loc 1 62 31 view .LVU312
  62:boards/TMC2130_eval.c **** {
 1175              		.loc 1 62 31 is_stmt 0 view .LVU313
 1176              	.LBE240:
  64:boards/TMC2130_eval.c **** 
 1177              		.loc 1 64 2 is_stmt 1 view .LVU314
  66:boards/TMC2130_eval.c **** }
 1178              		.loc 1 66 2 view .LVU315
 1179              	.LBB241:
 1180              	.LBI241:
  62:boards/TMC2130_eval.c **** {
 1181              		.loc 1 62 31 view .LVU316
  62:boards/TMC2130_eval.c **** {
 1182              		.loc 1 62 31 is_stmt 0 view .LVU317
 1183              	.LBE241:
  64:boards/TMC2130_eval.c **** 
 1184              		.loc 1 64 2 is_stmt 1 view .LVU318
  66:boards/TMC2130_eval.c **** }
 1185              		.loc 1 66 2 view .LVU319
 221:boards/TMC2130_eval.c **** 		}
 1186              		.loc 1 221 4 is_stmt 0 view .LVU320
 1187 03e4 FFF7FEFF 		bl	tmc2130_readInt
 1188              	.LVL132:
 221:boards/TMC2130_eval.c **** 		}
 1189              		.loc 1 221 4 view .LVU321
 1190 03e8 2A68     		ldr	r2, [r5]
 1191 03ea 20F01F00 		bic	r0, r0, #31
 1192 03ee 02F01F02 		and	r2, r2, #31
 1193 03f2 0243     		orrs	r2, r2, r0
 1194 03f4 1021     		movs	r1, #16
 1195 03f6 8348     		ldr	r0, .L182
 1196 03f8 FFF7FEFF 		bl	tmc2130_writeInt
 1197              	.LVL133:
 142:boards/TMC2130_eval.c **** 
 1198              		.loc 1 142 11 view .LVU322
 1199 03fc 0024     		movs	r4, #0
 1200 03fe 73E7     		b	.L39
 1201              	.LVL134:
 1202              	.L81:
 226:boards/TMC2130_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 1203              		.loc 1 226 3 is_stmt 1 view .LVU323
 226:boards/TMC2130_eval.c **** 			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
 1204              		.loc 1 226 5 is_stmt 0 view .LVU324
 1205 0400 0028     		cmp	r0, #0
 1206 0402 40F01184 		bne	.L167
 227:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1207              		.loc 1 227 4 is_stmt 1 view .LVU325
 227:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1208              		.loc 1 227 14 is_stmt 0 view .LVU326
 1209 0406 FFF7FEFF 		bl	StepDir_getStatus
 1210              	.LVL135:
 227:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1211              		.loc 1 227 66 view .LVU327
 1212 040a C0F30010 		ubfx	r0, r0, #4, #1
 227:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1213              		.loc 1 227 11 view .LVU328
 1214 040e 2860     		str	r0, [r5]
 1215 0410 6AE7     		b	.L39
 1216              	.LVL136:
 1217              	.L80:
 235:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 1218              		.loc 1 235 3 is_stmt 1 view .LVU329
 235:boards/TMC2130_eval.c **** 			errors |= TMC_ERROR_TYPE;
 1219              		.loc 1 235 5 is_stmt 0 view .LVU330
 1220 0412 0028     		cmp	r0, #0
 1221 0414 00F00B84 		beq	.L168
 237:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPOWERDOWN, *value);
 1222              		.loc 1 237 10 is_stmt 1 view .LVU331
 238:boards/TMC2130_eval.c **** 		}
 1223              		.loc 1 238 4 view .LVU332
 1224              	.LBB242:
 1225              	.LBI242:
  62:boards/TMC2130_eval.c **** {
 1226              		.loc 1 62 31 view .LVU333
 1227              	.LVL137:
  62:boards/TMC2130_eval.c **** {
 1228              		.loc 1 62 31 is_stmt 0 view .LVU334
 1229              	.LBE242:
  64:boards/TMC2130_eval.c **** 
 1230              		.loc 1 64 2 is_stmt 1 view .LVU335
  66:boards/TMC2130_eval.c **** }
 1231              		.loc 1 66 2 view .LVU336
 238:boards/TMC2130_eval.c **** 		}
 1232              		.loc 1 238 4 is_stmt 0 view .LVU337
 1233 0418 2A68     		ldr	r2, [r5]
 1234              	.LVL138:
 238:boards/TMC2130_eval.c **** 		}
 1235              		.loc 1 238 4 view .LVU338
 1236 041a 7A48     		ldr	r0, .L182
 1237              	.LVL139:
 238:boards/TMC2130_eval.c **** 		}
 1238              		.loc 1 238 4 view .LVU339
 1239 041c 1121     		movs	r1, #17
 1240              	.LVL140:
 238:boards/TMC2130_eval.c **** 		}
 1241              		.loc 1 238 4 view .LVU340
 1242 041e FFF7FEFF 		bl	tmc2130_writeInt
 1243              	.LVL141:
 142:boards/TMC2130_eval.c **** 
 1244              		.loc 1 142 11 view .LVU341
 1245 0422 0024     		movs	r4, #0
 1246 0424 60E7     		b	.L39
 1247              	.LVL142:
 1248              	.L79:
 243:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_THIGH);
 1249              		.loc 1 243 3 is_stmt 1 view .LVU342
 243:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_THIGH);
 1250              		.loc 1 243 5 is_stmt 0 view .LVU343
 1251 0426 80B9     		cbnz	r0, .L100
 244:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 1252              		.loc 1 244 4 is_stmt 1 view .LVU344
 1253              	.LBB243:
 1254              	.LBI243:
  62:boards/TMC2130_eval.c **** {
 1255              		.loc 1 62 31 view .LVU345
 1256              	.LVL143:
  62:boards/TMC2130_eval.c **** {
 1257              		.loc 1 62 31 is_stmt 0 view .LVU346
 1258              	.LBE243:
  64:boards/TMC2130_eval.c **** 
 1259              		.loc 1 64 2 is_stmt 1 view .LVU347
  66:boards/TMC2130_eval.c **** }
 1260              		.loc 1 66 2 view .LVU348
 244:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 1261              		.loc 1 244 16 is_stmt 0 view .LVU349
 1262 0428 7648     		ldr	r0, .L182
 1263              	.LVL144:
 244:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 1264              		.loc 1 244 16 view .LVU350
 1265 042a 1521     		movs	r1, #21
 1266              	.LVL145:
 244:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 1267              		.loc 1 244 16 view .LVU351
 1268 042c FFF7FEFF 		bl	tmc2130_readInt
 1269              	.LVL146:
 245:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1270              		.loc 1 245 4 is_stmt 1 view .LVU352
 245:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1271              		.loc 1 245 13 is_stmt 0 view .LVU353
 1272 0430 0028     		cmp	r0, #0
 245:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1273              		.loc 1 245 13 view .LVU354
 1274 0432 08BF     		it	eq
 1275 0434 0120     		moveq	r0, #1
 1276              	.LVL147:
 245:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1277              		.loc 1 245 13 view .LVU355
 1278 0436 4FF08073 		mov	r3, #16777216
 1279 043a 93FBF0F0 		sdiv	r0, r3, r0
 245:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1280              		.loc 1 245 11 view .LVU356
 1281 043e 724B     		ldr	r3, .L182+4
 1282 0440 9842     		cmp	r0, r3
 1283 0442 D4BF     		ite	le
 1284 0444 2860     		strle	r0, [r5]
 1285 0446 2B60     		strgt	r3, [r5]
 1286 0448 4EE7     		b	.L39
 1287              	.LVL148:
 1288              	.L100:
 246:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 1289              		.loc 1 246 10 is_stmt 1 view .LVU357
 247:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 1290              		.loc 1 247 4 view .LVU358
 247:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 1291              		.loc 1 247 13 is_stmt 0 view .LVU359
 1292 044a 2B68     		ldr	r3, [r5]
 248:boards/TMC2130_eval.c **** 		}
 1293              		.loc 1 248 4 view .LVU360
 1294 044c 6D48     		ldr	r0, .L182
 1295              	.LVL149:
 247:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 1296              		.loc 1 247 13 view .LVU361
 1297 044e 002B     		cmp	r3, #0
 1298 0450 08BF     		it	eq
 1299 0452 0123     		moveq	r3, #1
 1300 0454 4FF08072 		mov	r2, #16777216
 1301              	.LVL150:
 247:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 1302              		.loc 1 247 13 view .LVU362
 1303 0458 92FBF3F2 		sdiv	r2, r2, r3
 1304 045c 6A4B     		ldr	r3, .L182+4
 1305 045e 9A42     		cmp	r2, r3
 1306 0460 A8BF     		it	ge
 1307 0462 1A46     		movge	r2, r3
 247:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
 1308              		.loc 1 247 11 view .LVU363
 1309 0464 2A60     		str	r2, [r5]
 248:boards/TMC2130_eval.c **** 		}
 1310              		.loc 1 248 4 is_stmt 1 view .LVU364
 1311              	.LBB244:
 1312              	.LBI244:
  62:boards/TMC2130_eval.c **** {
 1313              		.loc 1 62 31 view .LVU365
 1314              	.LVL151:
  62:boards/TMC2130_eval.c **** {
 1315              		.loc 1 62 31 is_stmt 0 view .LVU366
 1316              	.LBE244:
  64:boards/TMC2130_eval.c **** 
 1317              		.loc 1 64 2 is_stmt 1 view .LVU367
  66:boards/TMC2130_eval.c **** }
 1318              		.loc 1 66 2 view .LVU368
 248:boards/TMC2130_eval.c **** 		}
 1319              		.loc 1 248 4 is_stmt 0 view .LVU369
 1320 0466 1521     		movs	r1, #21
 1321              	.LVL152:
 248:boards/TMC2130_eval.c **** 		}
 1322              		.loc 1 248 4 view .LVU370
 1323 0468 FFF7FEFF 		bl	tmc2130_writeInt
 1324              	.LVL153:
 142:boards/TMC2130_eval.c **** 
 1325              		.loc 1 142 11 view .LVU371
 1326 046c 0024     		movs	r4, #0
 1327 046e 3BE7     		b	.L39
 1328              	.LVL154:
 1329              	.L78:
 253:boards/TMC2130_eval.c **** 			*value = tmc2130_readInt(motorToIC(motor), TMC2130_VDCMIN);
 1330              		.loc 1 253 3 is_stmt 1 view .LVU372
 253:boards/TMC2130_eval.c **** 			*value = tmc2130_readInt(motorToIC(motor), TMC2130_VDCMIN);
 1331              		.loc 1 253 5 is_stmt 0 view .LVU373
 1332 0470 28B9     		cbnz	r0, .L103
 254:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1333              		.loc 1 254 4 is_stmt 1 view .LVU374
 1334              	.LBB245:
 1335              	.LBI245:
  62:boards/TMC2130_eval.c **** {
 1336              		.loc 1 62 31 view .LVU375
 1337              	.LVL155:
  62:boards/TMC2130_eval.c **** {
 1338              		.loc 1 62 31 is_stmt 0 view .LVU376
 1339              	.LBE245:
  64:boards/TMC2130_eval.c **** 
 1340              		.loc 1 64 2 is_stmt 1 view .LVU377
  66:boards/TMC2130_eval.c **** }
 1341              		.loc 1 66 2 view .LVU378
 254:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1342              		.loc 1 254 13 is_stmt 0 view .LVU379
 1343 0472 6448     		ldr	r0, .L182
 1344              	.LVL156:
 254:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1345              		.loc 1 254 13 view .LVU380
 1346 0474 3321     		movs	r1, #51
 1347              	.LVL157:
 254:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1348              		.loc 1 254 13 view .LVU381
 1349 0476 FFF7FEFF 		bl	tmc2130_readInt
 1350              	.LVL158:
 254:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1351              		.loc 1 254 11 view .LVU382
 1352 047a 2860     		str	r0, [r5]
 1353 047c 34E7     		b	.L39
 1354              	.LVL159:
 1355              	.L103:
 255:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_VDCMIN, *value);
 1356              		.loc 1 255 10 is_stmt 1 view .LVU383
 256:boards/TMC2130_eval.c **** 		}
 1357              		.loc 1 256 4 view .LVU384
 1358              	.LBB246:
 1359              	.LBI246:
  62:boards/TMC2130_eval.c **** {
 1360              		.loc 1 62 31 view .LVU385
  62:boards/TMC2130_eval.c **** {
 1361              		.loc 1 62 31 is_stmt 0 view .LVU386
 1362              	.LBE246:
  64:boards/TMC2130_eval.c **** 
 1363              		.loc 1 64 2 is_stmt 1 view .LVU387
  66:boards/TMC2130_eval.c **** }
 1364              		.loc 1 66 2 view .LVU388
 256:boards/TMC2130_eval.c **** 		}
 1365              		.loc 1 256 4 is_stmt 0 view .LVU389
 1366 047e 2A68     		ldr	r2, [r5]
 1367              	.LVL160:
 256:boards/TMC2130_eval.c **** 		}
 1368              		.loc 1 256 4 view .LVU390
 1369 0480 6048     		ldr	r0, .L182
 1370              	.LVL161:
 256:boards/TMC2130_eval.c **** 		}
 1371              		.loc 1 256 4 view .LVU391
 1372 0482 3321     		movs	r1, #51
 1373              	.LVL162:
 256:boards/TMC2130_eval.c **** 		}
 1374              		.loc 1 256 4 view .LVU392
 1375 0484 FFF7FEFF 		bl	tmc2130_writeInt
 1376              	.LVL163:
 142:boards/TMC2130_eval.c **** 
 1377              		.loc 1 142 11 view .LVU393
 1378 0488 0024     		movs	r4, #0
 1379 048a 2DE7     		b	.L39
 1380              	.LVL164:
 1381              	.L77:
 261:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VH
 1382              		.loc 1 261 3 is_stmt 1 view .LVU394
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1383              		.loc 1 262 13 is_stmt 0 view .LVU395
 1384 048c 5D48     		ldr	r0, .L182
 1385              	.LVL165:
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1386              		.loc 1 262 13 view .LVU396
 1387 048e 6C21     		movs	r1, #108
 1388              	.LVL166:
 261:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VH
 1389              		.loc 1 261 5 view .LVU397
 1390 0490 2CB9     		cbnz	r4, .L104
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1391              		.loc 1 262 4 is_stmt 1 view .LVU398
 1392              	.LBB247:
 1393              	.LBI247:
  62:boards/TMC2130_eval.c **** {
 1394              		.loc 1 62 31 view .LVU399
 1395              	.LVL167:
  62:boards/TMC2130_eval.c **** {
 1396              		.loc 1 62 31 is_stmt 0 view .LVU400
 1397              	.LBE247:
  64:boards/TMC2130_eval.c **** 
 1398              		.loc 1 64 2 is_stmt 1 view .LVU401
  66:boards/TMC2130_eval.c **** }
 1399              		.loc 1 66 2 view .LVU402
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1400              		.loc 1 262 13 is_stmt 0 view .LVU403
 1401 0492 FFF7FEFF 		bl	tmc2130_readInt
 1402              	.LVL168:
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1403              		.loc 1 262 13 view .LVU404
 1404 0496 C0F38040 		ubfx	r0, r0, #18, #1
 262:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1405              		.loc 1 262 11 view .LVU405
 1406 049a 2860     		str	r0, [r5]
 1407 049c 24E7     		b	.L39
 1408              	.LVL169:
 1409              	.L104:
 263:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VHIGHFS_S
 1410              		.loc 1 263 10 is_stmt 1 view .LVU406
 264:boards/TMC2130_eval.c **** 		}
 1411              		.loc 1 264 4 view .LVU407
 1412              	.LBB248:
 1413              	.LBI248:
  62:boards/TMC2130_eval.c **** {
 1414              		.loc 1 62 31 view .LVU408
  62:boards/TMC2130_eval.c **** {
 1415              		.loc 1 62 31 is_stmt 0 view .LVU409
 1416              	.LBE248:
  64:boards/TMC2130_eval.c **** 
 1417              		.loc 1 64 2 is_stmt 1 view .LVU410
  66:boards/TMC2130_eval.c **** }
 1418              		.loc 1 66 2 view .LVU411
 1419              	.LBB249:
 1420              	.LBI249:
  62:boards/TMC2130_eval.c **** {
 1421              		.loc 1 62 31 view .LVU412
  62:boards/TMC2130_eval.c **** {
 1422              		.loc 1 62 31 is_stmt 0 view .LVU413
 1423              	.LBE249:
  64:boards/TMC2130_eval.c **** 
 1424              		.loc 1 64 2 is_stmt 1 view .LVU414
  66:boards/TMC2130_eval.c **** }
 1425              		.loc 1 66 2 view .LVU415
 264:boards/TMC2130_eval.c **** 		}
 1426              		.loc 1 264 4 is_stmt 0 view .LVU416
 1427 049e FFF7FEFF 		bl	tmc2130_readInt
 1428              	.LVL170:
 264:boards/TMC2130_eval.c **** 		}
 1429              		.loc 1 264 4 view .LVU417
 1430 04a2 2B68     		ldr	r3, [r5]
 1431 04a4 9B04     		lsls	r3, r3, #18
 1432 04a6 03F48023 		and	r3, r3, #262144
 1433 04aa 20F48022 		bic	r2, r0, #262144
 1434 04ae 1A43     		orrs	r2, r2, r3
 1435 04b0 5448     		ldr	r0, .L182
 1436 04b2 6C21     		movs	r1, #108
 1437 04b4 FFF7FEFF 		bl	tmc2130_writeInt
 1438              	.LVL171:
 142:boards/TMC2130_eval.c **** 
 1439              		.loc 1 142 11 view .LVU418
 1440 04b8 0024     		movs	r4, #0
 1441 04ba 15E7     		b	.L39
 1442              	.LVL172:
 1443              	.L76:
 269:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_V
 1444              		.loc 1 269 3 is_stmt 1 view .LVU419
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1445              		.loc 1 270 13 is_stmt 0 view .LVU420
 1446 04bc 5148     		ldr	r0, .L182
 1447              	.LVL173:
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1448              		.loc 1 270 13 view .LVU421
 1449 04be 6C21     		movs	r1, #108
 1450              	.LVL174:
 269:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_V
 1451              		.loc 1 269 5 view .LVU422
 1452 04c0 2CB9     		cbnz	r4, .L105
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1453              		.loc 1 270 4 is_stmt 1 view .LVU423
 1454              	.LBB250:
 1455              	.LBI250:
  62:boards/TMC2130_eval.c **** {
 1456              		.loc 1 62 31 view .LVU424
 1457              	.LVL175:
  62:boards/TMC2130_eval.c **** {
 1458              		.loc 1 62 31 is_stmt 0 view .LVU425
 1459              	.LBE250:
  64:boards/TMC2130_eval.c **** 
 1460              		.loc 1 64 2 is_stmt 1 view .LVU426
  66:boards/TMC2130_eval.c **** }
 1461              		.loc 1 66 2 view .LVU427
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1462              		.loc 1 270 13 is_stmt 0 view .LVU428
 1463 04c2 FFF7FEFF 		bl	tmc2130_readInt
 1464              	.LVL176:
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1465              		.loc 1 270 13 view .LVU429
 1466 04c6 C0F3C040 		ubfx	r0, r0, #19, #1
 270:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1467              		.loc 1 270 11 view .LVU430
 1468 04ca 2860     		str	r0, [r5]
 1469 04cc 0CE7     		b	.L39
 1470              	.LVL177:
 1471              	.L105:
 271:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_VHIGHCHM
 1472              		.loc 1 271 10 is_stmt 1 view .LVU431
 272:boards/TMC2130_eval.c **** 		}
 1473              		.loc 1 272 4 view .LVU432
 1474              	.LBB251:
 1475              	.LBI251:
  62:boards/TMC2130_eval.c **** {
 1476              		.loc 1 62 31 view .LVU433
  62:boards/TMC2130_eval.c **** {
 1477              		.loc 1 62 31 is_stmt 0 view .LVU434
 1478              	.LBE251:
  64:boards/TMC2130_eval.c **** 
 1479              		.loc 1 64 2 is_stmt 1 view .LVU435
  66:boards/TMC2130_eval.c **** }
 1480              		.loc 1 66 2 view .LVU436
 1481              	.LBB252:
 1482              	.LBI252:
  62:boards/TMC2130_eval.c **** {
 1483              		.loc 1 62 31 view .LVU437
  62:boards/TMC2130_eval.c **** {
 1484              		.loc 1 62 31 is_stmt 0 view .LVU438
 1485              	.LBE252:
  64:boards/TMC2130_eval.c **** 
 1486              		.loc 1 64 2 is_stmt 1 view .LVU439
  66:boards/TMC2130_eval.c **** }
 1487              		.loc 1 66 2 view .LVU440
 272:boards/TMC2130_eval.c **** 		}
 1488              		.loc 1 272 4 is_stmt 0 view .LVU441
 1489 04ce FFF7FEFF 		bl	tmc2130_readInt
 1490              	.LVL178:
 272:boards/TMC2130_eval.c **** 		}
 1491              		.loc 1 272 4 view .LVU442
 1492 04d2 2B68     		ldr	r3, [r5]
 1493 04d4 DB04     		lsls	r3, r3, #19
 1494 04d6 03F40023 		and	r3, r3, #524288
 1495 04da 20F40022 		bic	r2, r0, #524288
 1496 04de 1A43     		orrs	r2, r2, r3
 1497 04e0 4848     		ldr	r0, .L182
 1498 04e2 6C21     		movs	r1, #108
 1499 04e4 FFF7FEFF 		bl	tmc2130_writeInt
 1500              	.LVL179:
 142:boards/TMC2130_eval.c **** 
 1501              		.loc 1 142 11 view .LVU443
 1502 04e8 0024     		movs	r4, #0
 1503 04ea FDE6     		b	.L39
 1504              	.LVL180:
 1505              	.L75:
 277:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC21
 1506              		.loc 1 277 3 is_stmt 1 view .LVU444
 277:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC21
 1507              		.loc 1 277 5 is_stmt 0 view .LVU445
 1508 04ec 38B9     		cbnz	r0, .L106
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1509              		.loc 1 278 4 is_stmt 1 view .LVU446
 1510              	.LBB253:
 1511              	.LBI253:
  62:boards/TMC2130_eval.c **** {
 1512              		.loc 1 62 31 view .LVU447
 1513              	.LVL181:
  62:boards/TMC2130_eval.c **** {
 1514              		.loc 1 62 31 is_stmt 0 view .LVU448
 1515              	.LBE253:
  64:boards/TMC2130_eval.c **** 
 1516              		.loc 1 64 2 is_stmt 1 view .LVU449
  66:boards/TMC2130_eval.c **** }
 1517              		.loc 1 66 2 view .LVU450
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1518              		.loc 1 278 13 is_stmt 0 view .LVU451
 1519 04ee 0146     		mov	r1, r0
 1520              	.LVL182:
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1521              		.loc 1 278 13 view .LVU452
 1522 04f0 4448     		ldr	r0, .L182
 1523              	.LVL183:
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1524              		.loc 1 278 13 view .LVU453
 1525 04f2 FFF7FEFF 		bl	tmc2130_readInt
 1526              	.LVL184:
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1527              		.loc 1 278 13 view .LVU454
 1528 04f6 C0F34000 		ubfx	r0, r0, #1, #1
 278:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1529              		.loc 1 278 11 view .LVU455
 1530 04fa 2860     		str	r0, [r5]
 1531 04fc F4E6     		b	.L39
 1532              	.LVL185:
 1533              	.L106:
 279:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC2130_INTE
 1534              		.loc 1 279 10 is_stmt 1 view .LVU456
 280:boards/TMC2130_eval.c **** 		}
 1535              		.loc 1 280 4 view .LVU457
 1536              	.LBB254:
 1537              	.LBI254:
  62:boards/TMC2130_eval.c **** {
 1538              		.loc 1 62 31 view .LVU458
  62:boards/TMC2130_eval.c **** {
 1539              		.loc 1 62 31 is_stmt 0 view .LVU459
 1540              	.LBE254:
  64:boards/TMC2130_eval.c **** 
 1541              		.loc 1 64 2 is_stmt 1 view .LVU460
  66:boards/TMC2130_eval.c **** }
 1542              		.loc 1 66 2 view .LVU461
 1543              	.LBB255:
 1544              	.LBI255:
  62:boards/TMC2130_eval.c **** {
 1545              		.loc 1 62 31 view .LVU462
  62:boards/TMC2130_eval.c **** {
 1546              		.loc 1 62 31 is_stmt 0 view .LVU463
 1547              	.LBE255:
  64:boards/TMC2130_eval.c **** 
 1548              		.loc 1 64 2 is_stmt 1 view .LVU464
  66:boards/TMC2130_eval.c **** }
 1549              		.loc 1 66 2 view .LVU465
 280:boards/TMC2130_eval.c **** 		}
 1550              		.loc 1 280 4 is_stmt 0 view .LVU466
 1551 04fe 0021     		movs	r1, #0
 1552              	.LVL186:
 280:boards/TMC2130_eval.c **** 		}
 1553              		.loc 1 280 4 view .LVU467
 1554 0500 4048     		ldr	r0, .L182
 1555              	.LVL187:
 280:boards/TMC2130_eval.c **** 		}
 1556              		.loc 1 280 4 view .LVU468
 1557 0502 FFF7FEFF 		bl	tmc2130_readInt
 1558              	.LVL188:
 280:boards/TMC2130_eval.c **** 		}
 1559              		.loc 1 280 4 view .LVU469
 1560 0506 2B68     		ldr	r3, [r5]
 1561 0508 5B00     		lsls	r3, r3, #1
 1562 050a 03F00203 		and	r3, r3, #2
 1563 050e 20F00202 		bic	r2, r0, #2
 1564 0512 1A43     		orrs	r2, r2, r3
 1565 0514 3B48     		ldr	r0, .L182
 1566 0516 0021     		movs	r1, #0
 1567 0518 FFF7FEFF 		bl	tmc2130_writeInt
 1568              	.LVL189:
 142:boards/TMC2130_eval.c **** 
 1569              		.loc 1 142 11 view .LVU470
 1570 051c 0024     		movs	r4, #0
 1571 051e E3E6     		b	.L39
 1572              	.LVL190:
 1573              	.L74:
 285:boards/TMC2130_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_F
 1574              		.loc 1 285 3 is_stmt 1 view .LVU471
 285:boards/TMC2130_eval.c **** 			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_F
 1575              		.loc 1 285 5 is_stmt 0 view .LVU472
 1576 0520 0028     		cmp	r0, #0
 1577 0522 40F08783 		bne	.L170
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1578              		.loc 1 286 4 is_stmt 1 view .LVU473
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1579              		.loc 1 286 36 is_stmt 0 view .LVU474
 1580 0526 FFF7FEFF 		bl	StepDir_getFrequency
 1581              	.LVL191:
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1582              		.loc 1 286 91 view .LVU475
 1583 052a 1221     		movs	r1, #18
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1584              		.loc 1 286 36 view .LVU476
 1585 052c 0646     		mov	r6, r0
 1586              	.LBB256:
 1587              	.LBI256:
  62:boards/TMC2130_eval.c **** {
 1588              		.loc 1 62 31 is_stmt 1 view .LVU477
 1589              	.LVL192:
  62:boards/TMC2130_eval.c **** {
 1590              		.loc 1 62 31 is_stmt 0 view .LVU478
 1591              	.LBE256:
  64:boards/TMC2130_eval.c **** 
 1592              		.loc 1 64 2 is_stmt 1 view .LVU479
  66:boards/TMC2130_eval.c **** }
 1593              		.loc 1 66 2 view .LVU480
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1594              		.loc 1 286 91 is_stmt 0 view .LVU481
 1595 052e 3548     		ldr	r0, .L182
 1596 0530 FFF7FEFF 		bl	tmc2130_readInt
 1597              	.LVL193:
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1598              		.loc 1 286 82 view .LVU482
 1599 0534 C0F31302 		ubfx	r2, r0, #0, #20
 286:boards/TMC2130_eval.c **** 			*value = (abs(tempValue) < 20) ? 0 : tempValue;
 1600              		.loc 1 286 80 view .LVU483
 1601 0538 7A20     		movs	r0, #122
 1602 053a D317     		asrs	r3, r2, #31
 1603 053c A6FB0001 		umull	r0, r1, r6, r0
 1604 0540 FFF7FEFF 		bl	__aeabi_ldivmod
 1605              	.LVL194:
 287:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1606              		.loc 1 287 4 is_stmt 1 view .LVU484
 287:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1607              		.loc 1 287 29 is_stmt 0 view .LVU485
 1608 0544 00F11303 		add	r3, r0, #19
 287:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1609              		.loc 1 287 39 view .LVU486
 1610 0548 262B     		cmp	r3, #38
 1611 054a 98BF     		it	ls
 1612 054c 0020     		movls	r0, #0
 1613              	.LVL195:
 287:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1614              		.loc 1 287 11 view .LVU487
 1615 054e 2860     		str	r0, [r5]
 1616 0550 CAE6     		b	.L39
 1617              	.LVL196:
 1618              	.L73:
 293:boards/TMC2130_eval.c **** 			*value = StepDir_getMode(motor);
 1619              		.loc 1 293 3 is_stmt 1 view .LVU488
 293:boards/TMC2130_eval.c **** 			*value = StepDir_getMode(motor);
 1620              		.loc 1 293 5 is_stmt 0 view .LVU489
 1621 0552 18B9     		cbnz	r0, .L108
 294:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1622              		.loc 1 294 4 is_stmt 1 view .LVU490
 294:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1623              		.loc 1 294 13 is_stmt 0 view .LVU491
 1624 0554 FFF7FEFF 		bl	StepDir_getMode
 1625              	.LVL197:
 294:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1626              		.loc 1 294 13 view .LVU492
 1627 0558 2860     		str	r0, [r5]
 1628 055a C5E6     		b	.L39
 1629              	.LVL198:
 1630              	.L108:
 295:boards/TMC2130_eval.c **** 			StepDir_setMode(motor, *value);
 1631              		.loc 1 295 10 is_stmt 1 view .LVU493
 296:boards/TMC2130_eval.c **** 		}
 1632              		.loc 1 296 4 view .LVU494
 1633 055c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1634              	.LVL199:
 296:boards/TMC2130_eval.c **** 		}
 1635              		.loc 1 296 4 is_stmt 0 view .LVU495
 1636 055e 0020     		movs	r0, #0
 1637              	.LVL200:
 296:boards/TMC2130_eval.c **** 		}
 1638              		.loc 1 296 4 view .LVU496
 1639 0560 FFF7FEFF 		bl	StepDir_setMode
 1640              	.LVL201:
 142:boards/TMC2130_eval.c **** 
 1641              		.loc 1 142 11 view .LVU497
 1642 0564 0024     		movs	r4, #0
 1643 0566 BFE6     		b	.L39
 1644              	.LVL202:
 1645              	.L71:
 300:boards/TMC2130_eval.c **** 			*value = StepDir_getFrequency(motor);
 1646              		.loc 1 300 3 is_stmt 1 view .LVU498
 300:boards/TMC2130_eval.c **** 			*value = StepDir_getFrequency(motor);
 1647              		.loc 1 300 5 is_stmt 0 view .LVU499
 1648 0568 18B9     		cbnz	r0, .L109
 301:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1649              		.loc 1 301 4 is_stmt 1 view .LVU500
 301:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1650              		.loc 1 301 13 is_stmt 0 view .LVU501
 1651 056a FFF7FEFF 		bl	StepDir_getFrequency
 1652              	.LVL203:
 301:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1653              		.loc 1 301 11 view .LVU502
 1654 056e 2860     		str	r0, [r5]
 1655 0570 BAE6     		b	.L39
 1656              	.LVL204:
 1657              	.L109:
 302:boards/TMC2130_eval.c **** 			StepDir_setFrequency(motor, *value);
 1658              		.loc 1 302 10 is_stmt 1 view .LVU503
 303:boards/TMC2130_eval.c **** 		}
 1659              		.loc 1 303 4 view .LVU504
 1660 0572 2968     		ldr	r1, [r5]
 1661              	.LVL205:
 303:boards/TMC2130_eval.c **** 		}
 1662              		.loc 1 303 4 is_stmt 0 view .LVU505
 1663 0574 0020     		movs	r0, #0
 1664              	.LVL206:
 303:boards/TMC2130_eval.c **** 		}
 1665              		.loc 1 303 4 view .LVU506
 1666 0576 FFF7FEFF 		bl	StepDir_setFrequency
 1667              	.LVL207:
 142:boards/TMC2130_eval.c **** 
 1668              		.loc 1 142 11 view .LVU507
 1669 057a 0024     		movs	r4, #0
 1670 057c B4E6     		b	.L39
 1671              	.LVL208:
 1672              	.L70:
 308:boards/TMC2130_eval.c **** 			*value = 256 >> TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC213
 1673              		.loc 1 308 3 is_stmt 1 view .LVU508
 308:boards/TMC2130_eval.c **** 			*value = 256 >> TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC213
 1674              		.loc 1 308 5 is_stmt 0 view .LVU509
 1675 057e 54B9     		cbnz	r4, .L110
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1676              		.loc 1 309 4 is_stmt 1 view .LVU510
 1677              	.LBB257:
 1678              	.LBI257:
  62:boards/TMC2130_eval.c **** {
 1679              		.loc 1 62 31 view .LVU511
 1680              	.LVL209:
  62:boards/TMC2130_eval.c **** {
 1681              		.loc 1 62 31 is_stmt 0 view .LVU512
 1682              	.LBE257:
  64:boards/TMC2130_eval.c **** 
 1683              		.loc 1 64 2 is_stmt 1 view .LVU513
  66:boards/TMC2130_eval.c **** }
 1684              		.loc 1 66 2 view .LVU514
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1685              		.loc 1 309 20 is_stmt 0 view .LVU515
 1686 0580 2048     		ldr	r0, .L182
 1687              	.LVL210:
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1688              		.loc 1 309 20 view .LVU516
 1689 0582 6C21     		movs	r1, #108
 1690              	.LVL211:
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1691              		.loc 1 309 20 view .LVU517
 1692 0584 FFF7FEFF 		bl	tmc2130_readInt
 1693              	.LVL212:
 1694 0588 C0F30363 		ubfx	r3, r0, #24, #4
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1695              		.loc 1 309 17 view .LVU518
 1696 058c 4FF48070 		mov	r0, #256
 1697 0590 1841     		asrs	r0, r0, r3
 309:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1698              		.loc 1 309 11 view .LVU519
 1699 0592 2860     		str	r0, [r5]
 1700 0594 A8E6     		b	.L39
 1701              	.LVL213:
 1702              	.L110:
 310:boards/TMC2130_eval.c **** 			switch(*value)
 1703              		.loc 1 310 10 is_stmt 1 view .LVU520
 311:boards/TMC2130_eval.c **** 			{
 1704              		.loc 1 311 4 view .LVU521
 311:boards/TMC2130_eval.c **** 			{
 1705              		.loc 1 311 11 is_stmt 0 view .LVU522
 1706 0596 2B68     		ldr	r3, [r5]
 1707 0598 102B     		cmp	r3, #16
 1708 059a 39D0     		beq	.L111
 1709 059c 0ADC     		bgt	.L112
 1710 059e 013B     		subs	r3, r3, #1
 1711 05a0 072B     		cmp	r3, #7
 1712 05a2 0ED8     		bhi	.L113
 1713 05a4 072B     		cmp	r3, #7
 1714 05a6 0CD8     		bhi	.L113
 1715 05a8 DFE803F0 		tbb	[pc, r3]
 1716              	.L115:
 1717 05ac 15       		.byte	(.L118-.L115)/2
 1718 05ad 28       		.byte	(.L117-.L115)/2
 1719 05ae 0B       		.byte	(.L113-.L115)/2
 1720 05af 2A       		.byte	(.L116-.L115)/2
 1721 05b0 0B       		.byte	(.L113-.L115)/2
 1722 05b1 0B       		.byte	(.L113-.L115)/2
 1723 05b2 0B       		.byte	(.L113-.L115)/2
 1724 05b3 30       		.byte	(.L114-.L115)/2
 1725              		.p2align 1
 1726              	.L112:
 1727 05b4 802B     		cmp	r3, #128
 1728 05b6 31D0     		beq	.L119
 1729 05b8 08DC     		bgt	.L120
 1730 05ba 202B     		cmp	r3, #32
 1731 05bc 2AD0     		beq	.L121
 1732 05be 402B     		cmp	r3, #64
 1733 05c0 2AD0     		beq	.L122
 1734              	.L113:
 322:boards/TMC2130_eval.c **** 			}
 1735              		.loc 1 322 15 is_stmt 1 view .LVU523
 322:boards/TMC2130_eval.c **** 			}
 1736              		.loc 1 322 22 is_stmt 0 view .LVU524
 1737 05c2 4FF0FF33 		mov	r3, #-1
 1738 05c6 2B60     		str	r3, [r5]
 322:boards/TMC2130_eval.c **** 			}
 1739              		.loc 1 322 29 is_stmt 1 view .LVU525
 325:boards/TMC2130_eval.c **** 			{
 1740              		.loc 1 325 4 view .LVU526
 331:boards/TMC2130_eval.c **** 			}
 1741              		.loc 1 331 12 is_stmt 0 view .LVU527
 1742 05c8 1024     		movs	r4, #16
 1743 05ca 8DE6     		b	.L39
 1744              	.L120:
 331:boards/TMC2130_eval.c **** 			}
 1745              		.loc 1 331 12 view .LVU528
 1746 05cc B3F5807F 		cmp	r3, #256
 1747 05d0 F7D1     		bne	.L113
 321:boards/TMC2130_eval.c **** 			default:   *value = -1;  break;
 1748              		.loc 1 321 15 is_stmt 1 view .LVU529
 321:boards/TMC2130_eval.c **** 			default:   *value = -1;  break;
 1749              		.loc 1 321 22 is_stmt 0 view .LVU530
 1750 05d2 0023     		movs	r3, #0
 1751 05d4 00E0     		b	.L181
 1752              	.L118:
 313:boards/TMC2130_eval.c **** 			case 2:    *value = 7;   break;
 1753              		.loc 1 313 15 is_stmt 1 view .LVU531
 313:boards/TMC2130_eval.c **** 			case 2:    *value = 7;   break;
 1754              		.loc 1 313 22 is_stmt 0 view .LVU532
 1755 05d6 0823     		movs	r3, #8
 1756              	.L181:
 321:boards/TMC2130_eval.c **** 			default:   *value = -1;  break;
 1757              		.loc 1 321 22 view .LVU533
 1758 05d8 2B60     		str	r3, [r5]
 321:boards/TMC2130_eval.c **** 			default:   *value = -1;  break;
 1759              		.loc 1 321 29 is_stmt 1 view .LVU534
 325:boards/TMC2130_eval.c **** 			{
 1760              		.loc 1 325 4 view .LVU535
 327:boards/TMC2130_eval.c **** 			}
 1761              		.loc 1 327 5 view .LVU536
 1762              	.LBB258:
 1763              	.LBI258:
  62:boards/TMC2130_eval.c **** {
 1764              		.loc 1 62 31 view .LVU537
 1765              	.LVL214:
  62:boards/TMC2130_eval.c **** {
 1766              		.loc 1 62 31 is_stmt 0 view .LVU538
 1767              	.LBE258:
  64:boards/TMC2130_eval.c **** 
 1768              		.loc 1 64 2 is_stmt 1 view .LVU539
  66:boards/TMC2130_eval.c **** }
 1769              		.loc 1 66 2 view .LVU540
 1770              	.LBB259:
 1771              	.LBI259:
  62:boards/TMC2130_eval.c **** {
 1772              		.loc 1 62 31 view .LVU541
  62:boards/TMC2130_eval.c **** {
 1773              		.loc 1 62 31 is_stmt 0 view .LVU542
 1774              	.LBE259:
  64:boards/TMC2130_eval.c **** 
 1775              		.loc 1 64 2 is_stmt 1 view .LVU543
  66:boards/TMC2130_eval.c **** }
 1776              		.loc 1 66 2 view .LVU544
 327:boards/TMC2130_eval.c **** 			}
 1777              		.loc 1 327 5 is_stmt 0 view .LVU545
 1778 05da 6C21     		movs	r1, #108
 1779              	.LVL215:
 327:boards/TMC2130_eval.c **** 			}
 1780              		.loc 1 327 5 view .LVU546
 1781 05dc 0948     		ldr	r0, .L182
 1782              	.LVL216:
 327:boards/TMC2130_eval.c **** 			}
 1783              		.loc 1 327 5 view .LVU547
 1784 05de FFF7FEFF 		bl	tmc2130_readInt
 1785              	.LVL217:
 1786 05e2 2B68     		ldr	r3, [r5]
 1787 05e4 1B06     		lsls	r3, r3, #24
 1788 05e6 03F07063 		and	r3, r3, #251658240
 1789 05ea 20F07062 		bic	r2, r0, #251658240
 1790 05ee 1A43     		orrs	r2, r2, r3
 1791 05f0 0448     		ldr	r0, .L182
 1792 05f2 6C21     		movs	r1, #108
 1793 05f4 FFF7FEFF 		bl	tmc2130_writeInt
 1794              	.LVL218:
 142:boards/TMC2130_eval.c **** 
 1795              		.loc 1 142 11 view .LVU548
 1796 05f8 0024     		movs	r4, #0
 1797 05fa 75E6     		b	.L39
 1798              	.LVL219:
 1799              	.L117:
 314:boards/TMC2130_eval.c **** 			case 4:    *value = 6;   break;
 1800              		.loc 1 314 15 is_stmt 1 view .LVU549
 314:boards/TMC2130_eval.c **** 			case 4:    *value = 6;   break;
 1801              		.loc 1 314 22 is_stmt 0 view .LVU550
 1802 05fc 0723     		movs	r3, #7
 1803 05fe EBE7     		b	.L181
 1804              	.L116:
 315:boards/TMC2130_eval.c **** 			case 8:    *value = 5;   break;
 1805              		.loc 1 315 15 is_stmt 1 view .LVU551
 315:boards/TMC2130_eval.c **** 			case 8:    *value = 5;   break;
 1806              		.loc 1 315 22 is_stmt 0 view .LVU552
 1807 0600 0623     		movs	r3, #6
 1808 0602 E9E7     		b	.L181
 1809              	.L183:
 1810              		.align	2
 1811              	.L182:
 1812 0604 00000000 		.word	TMC2130
 1813 0608 FFFF0F00 		.word	1048575
 1814              	.L114:
 316:boards/TMC2130_eval.c **** 			case 16:   *value = 4;   break;
 1815              		.loc 1 316 15 is_stmt 1 view .LVU553
 316:boards/TMC2130_eval.c **** 			case 16:   *value = 4;   break;
 1816              		.loc 1 316 22 is_stmt 0 view .LVU554
 1817 060c 0523     		movs	r3, #5
 1818 060e E3E7     		b	.L181
 1819              	.L111:
 317:boards/TMC2130_eval.c **** 			case 32:   *value = 3;   break;
 1820              		.loc 1 317 15 is_stmt 1 view .LVU555
 317:boards/TMC2130_eval.c **** 			case 32:   *value = 3;   break;
 1821              		.loc 1 317 22 is_stmt 0 view .LVU556
 1822 0610 0423     		movs	r3, #4
 1823 0612 E1E7     		b	.L181
 1824              	.L121:
 318:boards/TMC2130_eval.c **** 			case 64:   *value = 2;   break;
 1825              		.loc 1 318 15 is_stmt 1 view .LVU557
 318:boards/TMC2130_eval.c **** 			case 64:   *value = 2;   break;
 1826              		.loc 1 318 22 is_stmt 0 view .LVU558
 1827 0614 0323     		movs	r3, #3
 1828 0616 DFE7     		b	.L181
 1829              	.L122:
 319:boards/TMC2130_eval.c **** 			case 128:  *value = 1;   break;
 1830              		.loc 1 319 15 is_stmt 1 view .LVU559
 319:boards/TMC2130_eval.c **** 			case 128:  *value = 1;   break;
 1831              		.loc 1 319 22 is_stmt 0 view .LVU560
 1832 0618 0223     		movs	r3, #2
 1833 061a DDE7     		b	.L181
 1834              	.L119:
 320:boards/TMC2130_eval.c **** 			case 256:  *value = 0;   break;
 1835              		.loc 1 320 15 is_stmt 1 view .LVU561
 320:boards/TMC2130_eval.c **** 			case 256:  *value = 0;   break;
 1836              		.loc 1 320 22 is_stmt 0 view .LVU562
 1837 061c 0123     		movs	r3, #1
 1838 061e DBE7     		b	.L181
 1839              	.L69:
 337:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SH
 1840              		.loc 1 337 3 is_stmt 1 view .LVU563
 338:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1841              		.loc 1 338 13 is_stmt 0 view .LVU564
 1842 0620 BA48     		ldr	r0, .L184
 1843              	.LVL220:
 338:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1844              		.loc 1 338 13 view .LVU565
 1845 0622 6C21     		movs	r1, #108
 1846              	.LVL221:
 337:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SH
 1847              		.loc 1 337 5 view .LVU566
 1848 0624 2CB9     		cbnz	r4, .L125
 338:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1849              		.loc 1 338 4 is_stmt 1 view .LVU567
 1850              	.LBB260:
 1851              	.LBI260:
  62:boards/TMC2130_eval.c **** {
 1852              		.loc 1 62 31 view .LVU568
 1853              	.LVL222:
  62:boards/TMC2130_eval.c **** {
 1854              		.loc 1 62 31 is_stmt 0 view .LVU569
 1855              	.LBE260:
  64:boards/TMC2130_eval.c **** 
 1856              		.loc 1 64 2 is_stmt 1 view .LVU570
  66:boards/TMC2130_eval.c **** }
 1857              		.loc 1 66 2 view .LVU571
 338:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1858              		.loc 1 338 13 is_stmt 0 view .LVU572
 1859 0626 FFF7FEFF 		bl	tmc2130_readInt
 1860              	.LVL223:
 1861 062a C0F3C130 		ubfx	r0, r0, #15, #2
 338:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1862              		.loc 1 338 11 view .LVU573
 1863 062e 2860     		str	r0, [r5]
 1864 0630 5AE6     		b	.L39
 1865              	.LVL224:
 1866              	.L125:
 339:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SHIFT, *v
 1867              		.loc 1 339 10 is_stmt 1 view .LVU574
 340:boards/TMC2130_eval.c **** 		}
 1868              		.loc 1 340 4 view .LVU575
 1869              	.LBB261:
 1870              	.LBI261:
  62:boards/TMC2130_eval.c **** {
 1871              		.loc 1 62 31 view .LVU576
  62:boards/TMC2130_eval.c **** {
 1872              		.loc 1 62 31 is_stmt 0 view .LVU577
 1873              	.LBE261:
  64:boards/TMC2130_eval.c **** 
 1874              		.loc 1 64 2 is_stmt 1 view .LVU578
  66:boards/TMC2130_eval.c **** }
 1875              		.loc 1 66 2 view .LVU579
 1876              	.LBB262:
 1877              	.LBI262:
  62:boards/TMC2130_eval.c **** {
 1878              		.loc 1 62 31 view .LVU580
  62:boards/TMC2130_eval.c **** {
 1879              		.loc 1 62 31 is_stmt 0 view .LVU581
 1880              	.LBE262:
  64:boards/TMC2130_eval.c **** 
 1881              		.loc 1 64 2 is_stmt 1 view .LVU582
  66:boards/TMC2130_eval.c **** }
 1882              		.loc 1 66 2 view .LVU583
 340:boards/TMC2130_eval.c **** 		}
 1883              		.loc 1 340 4 is_stmt 0 view .LVU584
 1884 0632 FFF7FEFF 		bl	tmc2130_readInt
 1885              	.LVL225:
 1886 0636 2B68     		ldr	r3, [r5]
 1887 0638 DB03     		lsls	r3, r3, #15
 1888 063a 03F4C033 		and	r3, r3, #98304
 1889 063e 20F4C032 		bic	r2, r0, #98304
 1890 0642 1A43     		orrs	r2, r2, r3
 1891 0644 B148     		ldr	r0, .L184
 1892 0646 6C21     		movs	r1, #108
 1893 0648 FFF7FEFF 		bl	tmc2130_writeInt
 1894              	.LVL226:
 142:boards/TMC2130_eval.c **** 
 1895              		.loc 1 142 11 view .LVU585
 1896 064c 0024     		movs	r4, #0
 1897 064e 4BE6     		b	.L39
 1898              	.LVL227:
 1899              	.L68:
 345:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SH
 1900              		.loc 1 345 3 is_stmt 1 view .LVU586
 346:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1901              		.loc 1 346 13 is_stmt 0 view .LVU587
 1902 0650 AE48     		ldr	r0, .L184
 1903              	.LVL228:
 346:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1904              		.loc 1 346 13 view .LVU588
 1905 0652 6C21     		movs	r1, #108
 1906              	.LVL229:
 345:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SH
 1907              		.loc 1 345 5 view .LVU589
 1908 0654 2CB9     		cbnz	r4, .L126
 346:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1909              		.loc 1 346 4 is_stmt 1 view .LVU590
 1910              	.LBB263:
 1911              	.LBI263:
  62:boards/TMC2130_eval.c **** {
 1912              		.loc 1 62 31 view .LVU591
 1913              	.LVL230:
  62:boards/TMC2130_eval.c **** {
 1914              		.loc 1 62 31 is_stmt 0 view .LVU592
 1915              	.LBE263:
  64:boards/TMC2130_eval.c **** 
 1916              		.loc 1 64 2 is_stmt 1 view .LVU593
  66:boards/TMC2130_eval.c **** }
 1917              		.loc 1 66 2 view .LVU594
 346:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1918              		.loc 1 346 13 is_stmt 0 view .LVU595
 1919 0656 FFF7FEFF 		bl	tmc2130_readInt
 1920              	.LVL231:
 1921 065a C0F38030 		ubfx	r0, r0, #14, #1
 346:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1922              		.loc 1 346 11 view .LVU596
 1923 065e 2860     		str	r0, [r5]
 1924 0660 42E6     		b	.L39
 1925              	.LVL232:
 1926              	.L126:
 347:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SHIFT, *v
 1927              		.loc 1 347 10 is_stmt 1 view .LVU597
 348:boards/TMC2130_eval.c **** 		}
 1928              		.loc 1 348 4 view .LVU598
 1929              	.LBB264:
 1930              	.LBI264:
  62:boards/TMC2130_eval.c **** {
 1931              		.loc 1 62 31 view .LVU599
  62:boards/TMC2130_eval.c **** {
 1932              		.loc 1 62 31 is_stmt 0 view .LVU600
 1933              	.LBE264:
  64:boards/TMC2130_eval.c **** 
 1934              		.loc 1 64 2 is_stmt 1 view .LVU601
  66:boards/TMC2130_eval.c **** }
 1935              		.loc 1 66 2 view .LVU602
 1936              	.LBB265:
 1937              	.LBI265:
  62:boards/TMC2130_eval.c **** {
 1938              		.loc 1 62 31 view .LVU603
  62:boards/TMC2130_eval.c **** {
 1939              		.loc 1 62 31 is_stmt 0 view .LVU604
 1940              	.LBE265:
  64:boards/TMC2130_eval.c **** 
 1941              		.loc 1 64 2 is_stmt 1 view .LVU605
  66:boards/TMC2130_eval.c **** }
 1942              		.loc 1 66 2 view .LVU606
 348:boards/TMC2130_eval.c **** 		}
 1943              		.loc 1 348 4 is_stmt 0 view .LVU607
 1944 0662 FFF7FEFF 		bl	tmc2130_readInt
 1945              	.LVL233:
 1946 0666 2B68     		ldr	r3, [r5]
 1947 0668 9B03     		lsls	r3, r3, #14
 1948 066a 03F48043 		and	r3, r3, #16384
 1949 066e 20F48042 		bic	r2, r0, #16384
 1950 0672 1A43     		orrs	r2, r2, r3
 1951 0674 A548     		ldr	r0, .L184
 1952 0676 6C21     		movs	r1, #108
 1953 0678 FFF7FEFF 		bl	tmc2130_writeInt
 1954              	.LVL234:
 142:boards/TMC2130_eval.c **** 
 1955              		.loc 1 142 11 view .LVU608
 1956 067c 0024     		movs	r4, #0
 1957 067e 33E6     		b	.L39
 1958              	.LVL235:
 1959              	.L67:
 353:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DI
 1960              		.loc 1 353 3 is_stmt 1 view .LVU609
 354:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1961              		.loc 1 354 13 is_stmt 0 view .LVU610
 1962 0680 A248     		ldr	r0, .L184
 1963              	.LVL236:
 354:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1964              		.loc 1 354 13 view .LVU611
 1965 0682 6C21     		movs	r1, #108
 1966              	.LVL237:
 353:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DI
 1967              		.loc 1 353 5 view .LVU612
 1968 0684 2CB9     		cbnz	r4, .L127
 354:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1969              		.loc 1 354 4 is_stmt 1 view .LVU613
 1970              	.LBB266:
 1971              	.LBI266:
  62:boards/TMC2130_eval.c **** {
 1972              		.loc 1 62 31 view .LVU614
 1973              	.LVL238:
  62:boards/TMC2130_eval.c **** {
 1974              		.loc 1 62 31 is_stmt 0 view .LVU615
 1975              	.LBE266:
  64:boards/TMC2130_eval.c **** 
 1976              		.loc 1 64 2 is_stmt 1 view .LVU616
  66:boards/TMC2130_eval.c **** }
 1977              		.loc 1 66 2 view .LVU617
 354:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1978              		.loc 1 354 13 is_stmt 0 view .LVU618
 1979 0686 FFF7FEFF 		bl	tmc2130_readInt
 1980              	.LVL239:
 1981 068a C0F30030 		ubfx	r0, r0, #12, #1
 354:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 1982              		.loc 1 354 11 view .LVU619
 1983 068e 2860     		str	r0, [r5]
 1984 0690 2AE6     		b	.L39
 1985              	.LVL240:
 1986              	.L127:
 355:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DISFDCC_S
 1987              		.loc 1 355 10 is_stmt 1 view .LVU620
 356:boards/TMC2130_eval.c **** 		}
 1988              		.loc 1 356 4 view .LVU621
 1989              	.LBB267:
 1990              	.LBI267:
  62:boards/TMC2130_eval.c **** {
 1991              		.loc 1 62 31 view .LVU622
  62:boards/TMC2130_eval.c **** {
 1992              		.loc 1 62 31 is_stmt 0 view .LVU623
 1993              	.LBE267:
  64:boards/TMC2130_eval.c **** 
 1994              		.loc 1 64 2 is_stmt 1 view .LVU624
  66:boards/TMC2130_eval.c **** }
 1995              		.loc 1 66 2 view .LVU625
 1996              	.LBB268:
 1997              	.LBI268:
  62:boards/TMC2130_eval.c **** {
 1998              		.loc 1 62 31 view .LVU626
  62:boards/TMC2130_eval.c **** {
 1999              		.loc 1 62 31 is_stmt 0 view .LVU627
 2000              	.LBE268:
  64:boards/TMC2130_eval.c **** 
 2001              		.loc 1 64 2 is_stmt 1 view .LVU628
  66:boards/TMC2130_eval.c **** }
 2002              		.loc 1 66 2 view .LVU629
 356:boards/TMC2130_eval.c **** 		}
 2003              		.loc 1 356 4 is_stmt 0 view .LVU630
 2004 0692 FFF7FEFF 		bl	tmc2130_readInt
 2005              	.LVL241:
 2006 0696 2B68     		ldr	r3, [r5]
 2007 0698 1B03     		lsls	r3, r3, #12
 2008 069a 03F48053 		and	r3, r3, #4096
 2009 069e 20F48052 		bic	r2, r0, #4096
 2010 06a2 1A43     		orrs	r2, r2, r3
 2011 06a4 9948     		ldr	r0, .L184
 2012 06a6 6C21     		movs	r1, #108
 2013 06a8 FFF7FEFF 		bl	tmc2130_writeInt
 2014              	.LVL242:
 142:boards/TMC2130_eval.c **** 
 2015              		.loc 1 142 11 view .LVU631
 2016 06ac 0024     		movs	r4, #0
 2017 06ae 1BE6     		b	.L39
 2018              	.LVL243:
 2019              	.L66:
 361:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2020              		.loc 1 361 3 is_stmt 1 view .LVU632
 362:boards/TMC2130_eval.c **** 			{
 2021              		.loc 1 362 7 is_stmt 0 view .LVU633
 2022 06b0 9648     		ldr	r0, .L184
 2023              	.LVL244:
 362:boards/TMC2130_eval.c **** 			{
 2024              		.loc 1 362 7 view .LVU634
 2025 06b2 6C21     		movs	r1, #108
 2026              	.LVL245:
 361:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2027              		.loc 1 361 5 view .LVU635
 2028 06b4 FCB9     		cbnz	r4, .L128
 362:boards/TMC2130_eval.c **** 			{
 2029              		.loc 1 362 4 is_stmt 1 view .LVU636
 2030              	.LBB269:
 2031              	.LBI269:
  62:boards/TMC2130_eval.c **** {
 2032              		.loc 1 62 31 view .LVU637
 2033              	.LVL246:
  62:boards/TMC2130_eval.c **** {
 2034              		.loc 1 62 31 is_stmt 0 view .LVU638
 2035              	.LBE269:
  64:boards/TMC2130_eval.c **** 
 2036              		.loc 1 64 2 is_stmt 1 view .LVU639
  66:boards/TMC2130_eval.c **** }
 2037              		.loc 1 66 2 view .LVU640
 362:boards/TMC2130_eval.c **** 			{
 2038              		.loc 1 362 7 is_stmt 0 view .LVU641
 2039 06b6 FFF7FEFF 		bl	tmc2130_readInt
 2040              	.LVL247:
 362:boards/TMC2130_eval.c **** 			{
 2041              		.loc 1 362 6 view .LVU642
 2042 06ba 10F4804F 		tst	r0, #16384
 364:boards/TMC2130_eval.c **** 			}
 2043              		.loc 1 364 14 view .LVU643
 2044 06be 4FF06C01 		mov	r1, #108
 2045 06c2 9248     		ldr	r0, .L184
 362:boards/TMC2130_eval.c **** 			{
 2046              		.loc 1 362 6 view .LVU644
 2047 06c4 05D0     		beq	.L129
 364:boards/TMC2130_eval.c **** 			}
 2048              		.loc 1 364 5 is_stmt 1 view .LVU645
 2049              	.LBB270:
 2050              	.LBI270:
  62:boards/TMC2130_eval.c **** {
 2051              		.loc 1 62 31 view .LVU646
 2052              	.LVL248:
  62:boards/TMC2130_eval.c **** {
 2053              		.loc 1 62 31 is_stmt 0 view .LVU647
 2054              	.LBE270:
  64:boards/TMC2130_eval.c **** 
 2055              		.loc 1 64 2 is_stmt 1 view .LVU648
  66:boards/TMC2130_eval.c **** }
 2056              		.loc 1 66 2 view .LVU649
 364:boards/TMC2130_eval.c **** 			}
 2057              		.loc 1 364 14 is_stmt 0 view .LVU650
 2058 06c6 FFF7FEFF 		bl	tmc2130_readInt
 2059              	.LVL249:
 2060 06ca C0F3C310 		ubfx	r0, r0, #7, #4
 364:boards/TMC2130_eval.c **** 			}
 2061              		.loc 1 364 12 view .LVU651
 2062 06ce 2860     		str	r0, [r5]
 2063 06d0 0AE6     		b	.L39
 2064              	.LVL250:
 2065              	.L129:
 368:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
 2066              		.loc 1 368 5 is_stmt 1 view .LVU652
 2067              	.LBB271:
 2068              	.LBI271:
  62:boards/TMC2130_eval.c **** {
 2069              		.loc 1 62 31 view .LVU653
  62:boards/TMC2130_eval.c **** {
 2070              		.loc 1 62 31 is_stmt 0 view .LVU654
 2071              	.LBE271:
  64:boards/TMC2130_eval.c **** 
 2072              		.loc 1 64 2 is_stmt 1 view .LVU655
  66:boards/TMC2130_eval.c **** }
 2073              		.loc 1 66 2 view .LVU656
 368:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
 2074              		.loc 1 368 17 is_stmt 0 view .LVU657
 2075 06d2 FFF7FEFF 		bl	tmc2130_readInt
 2076              	.LVL251:
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2077              		.loc 1 369 15 view .LVU658
 2078 06d6 6C21     		movs	r1, #108
 368:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
 2079              		.loc 1 368 17 view .LVU659
 2080 06d8 0646     		mov	r6, r0
 2081              	.LVL252:
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2082              		.loc 1 369 5 is_stmt 1 view .LVU660
 2083              	.LBB272:
 2084              	.LBI272:
  62:boards/TMC2130_eval.c **** {
 2085              		.loc 1 62 31 view .LVU661
  62:boards/TMC2130_eval.c **** {
 2086              		.loc 1 62 31 is_stmt 0 view .LVU662
 2087              	.LBE272:
  64:boards/TMC2130_eval.c **** 
 2088              		.loc 1 64 2 is_stmt 1 view .LVU663
  66:boards/TMC2130_eval.c **** }
 2089              		.loc 1 66 2 view .LVU664
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2090              		.loc 1 369 15 is_stmt 0 view .LVU665
 2091 06da 8C48     		ldr	r0, .L184
 2092              	.LVL253:
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2093              		.loc 1 369 15 view .LVU666
 2094 06dc FFF7FEFF 		bl	tmc2130_readInt
 2095              	.LVL254:
 370:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2096              		.loc 1 370 7 view .LVU667
 2097 06e0 3105     		lsls	r1, r6, #20
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2098              		.loc 1 369 73 view .LVU668
 2099 06e2 C0F30213 		ubfx	r3, r0, #4, #3
 370:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2100              		.loc 1 370 5 is_stmt 1 view .LVU669
 370:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2101              		.loc 1 370 7 is_stmt 0 view .LVU670
 2102 06e6 02D4     		bmi	.L130
 2103              	.LVL255:
 2104              	.L180:
 369:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2105              		.loc 1 369 12 view .LVU671
 2106 06e8 2B60     		str	r3, [r5]
 142:boards/TMC2130_eval.c **** 
 2107              		.loc 1 142 11 view .LVU672
 2108 06ea 0024     		movs	r4, #0
 2109 06ec FCE5     		b	.L39
 2110              	.LVL256:
 2111              	.L130:
 371:boards/TMC2130_eval.c **** 			}
 2112              		.loc 1 371 6 is_stmt 1 view .LVU673
 371:boards/TMC2130_eval.c **** 			}
 2113              		.loc 1 371 13 is_stmt 0 view .LVU674
 2114 06ee 43F00803 		orr	r3, r3, #8
 2115 06f2 2B60     		str	r3, [r5]
 2116 06f4 F8E5     		b	.L39
 2117              	.LVL257:
 2118              	.L128:
 373:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2119              		.loc 1 373 10 is_stmt 1 view .LVU675
 374:boards/TMC2130_eval.c **** 			{
 2120              		.loc 1 374 4 view .LVU676
 2121              	.LBB273:
 2122              	.LBI273:
  62:boards/TMC2130_eval.c **** {
 2123              		.loc 1 62 31 view .LVU677
  62:boards/TMC2130_eval.c **** {
 2124              		.loc 1 62 31 is_stmt 0 view .LVU678
 2125              	.LBE273:
  64:boards/TMC2130_eval.c **** 
 2126              		.loc 1 64 2 is_stmt 1 view .LVU679
  66:boards/TMC2130_eval.c **** }
 2127              		.loc 1 66 2 view .LVU680
 374:boards/TMC2130_eval.c **** 			{
 2128              		.loc 1 374 7 is_stmt 0 view .LVU681
 2129 06f6 FFF7FEFF 		bl	tmc2130_readInt
 2130              	.LVL258:
 374:boards/TMC2130_eval.c **** 			{
 2131              		.loc 1 374 6 view .LVU682
 2132 06fa 10F48044 		ands	r4, r0, #16384
 376:boards/TMC2130_eval.c **** 			}
 2133              		.loc 1 376 5 view .LVU683
 2134 06fe 4FF06C01 		mov	r1, #108
 2135 0702 8248     		ldr	r0, .L184
 374:boards/TMC2130_eval.c **** 			{
 2136              		.loc 1 374 6 view .LVU684
 2137 0704 0ED0     		beq	.L131
 376:boards/TMC2130_eval.c **** 			}
 2138              		.loc 1 376 5 is_stmt 1 view .LVU685
 2139              	.LBB274:
 2140              	.LBI274:
  62:boards/TMC2130_eval.c **** {
 2141              		.loc 1 62 31 view .LVU686
 2142              	.LVL259:
  62:boards/TMC2130_eval.c **** {
 2143              		.loc 1 62 31 is_stmt 0 view .LVU687
 2144              	.LBE274:
  64:boards/TMC2130_eval.c **** 
 2145              		.loc 1 64 2 is_stmt 1 view .LVU688
  66:boards/TMC2130_eval.c **** }
 2146              		.loc 1 66 2 view .LVU689
 2147              	.LBB275:
 2148              	.LBI275:
  62:boards/TMC2130_eval.c **** {
 2149              		.loc 1 62 31 view .LVU690
  62:boards/TMC2130_eval.c **** {
 2150              		.loc 1 62 31 is_stmt 0 view .LVU691
 2151              	.LBE275:
  64:boards/TMC2130_eval.c **** 
 2152              		.loc 1 64 2 is_stmt 1 view .LVU692
  66:boards/TMC2130_eval.c **** }
 2153              		.loc 1 66 2 view .LVU693
 376:boards/TMC2130_eval.c **** 			}
 2154              		.loc 1 376 5 is_stmt 0 view .LVU694
 2155 0706 FFF7FEFF 		bl	tmc2130_readInt
 2156              	.LVL260:
 2157 070a 2B68     		ldr	r3, [r5]
 2158 070c DB01     		lsls	r3, r3, #7
 2159 070e 03F4F063 		and	r3, r3, #1920
 2160 0712 20F4F062 		bic	r2, r0, #1920
 2161 0716 1A43     		orrs	r2, r2, r3
 2162 0718 7C48     		ldr	r0, .L184
 2163 071a 6C21     		movs	r1, #108
 2164 071c FFF7FEFF 		bl	tmc2130_writeInt
 2165              	.LVL261:
 142:boards/TMC2130_eval.c **** 
 2166              		.loc 1 142 11 view .LVU695
 2167 0720 0024     		movs	r4, #0
 2168 0722 E1E5     		b	.L39
 2169              	.LVL262:
 2170              	.L131:
 380:boards/TMC2130_eval.c **** 
 2171              		.loc 1 380 5 is_stmt 1 view .LVU696
 2172              	.LBB276:
 2173              	.LBI276:
  62:boards/TMC2130_eval.c **** {
 2174              		.loc 1 62 31 view .LVU697
  62:boards/TMC2130_eval.c **** {
 2175              		.loc 1 62 31 is_stmt 0 view .LVU698
 2176              	.LBE276:
  64:boards/TMC2130_eval.c **** 
 2177              		.loc 1 64 2 is_stmt 1 view .LVU699
  66:boards/TMC2130_eval.c **** }
 2178              		.loc 1 66 2 view .LVU700
 380:boards/TMC2130_eval.c **** 
 2179              		.loc 1 380 17 is_stmt 0 view .LVU701
 2180 0724 FFF7FEFF 		bl	tmc2130_readInt
 2181              	.LVL263:
 382:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_ALL_MASK, TMC2130_TFD_ALL_
 2182              		.loc 1 382 5 is_stmt 1 view .LVU702
 2183              	.LBB277:
 2184              	.LBI277:
  62:boards/TMC2130_eval.c **** {
 2185              		.loc 1 62 31 view .LVU703
  62:boards/TMC2130_eval.c **** {
 2186              		.loc 1 62 31 is_stmt 0 view .LVU704
 2187              	.LBE277:
  64:boards/TMC2130_eval.c **** 
 2188              		.loc 1 64 2 is_stmt 1 view .LVU705
  66:boards/TMC2130_eval.c **** }
 2189              		.loc 1 66 2 view .LVU706
 2190              	.LBB278:
 2191              	.LBI278:
  62:boards/TMC2130_eval.c **** {
 2192              		.loc 1 62 31 view .LVU707
  62:boards/TMC2130_eval.c **** {
 2193              		.loc 1 62 31 is_stmt 0 view .LVU708
 2194              	.LBE278:
  64:boards/TMC2130_eval.c **** 
 2195              		.loc 1 64 2 is_stmt 1 view .LVU709
  66:boards/TMC2130_eval.c **** }
 2196              		.loc 1 66 2 view .LVU710
 382:boards/TMC2130_eval.c **** 				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_ALL_MASK, TMC2130_TFD_ALL_
 2197              		.loc 1 382 5 is_stmt 0 view .LVU711
 2198 0728 6C21     		movs	r1, #108
 2199 072a 7848     		ldr	r0, .L184
 2200 072c FFF7FEFF 		bl	tmc2130_readInt
 2201              	.LVL264:
 2202 0730 2B68     		ldr	r3, [r5]
 2203 0732 1B02     		lsls	r3, r3, #8
 2204 0734 03F40063 		and	r3, r3, #2048
 2205 0738 20F40062 		bic	r2, r0, #2048
 2206 073c 1A43     		orrs	r2, r2, r3
 2207 073e 7348     		ldr	r0, .L184
 2208 0740 6C21     		movs	r1, #108
 2209 0742 FFF7FEFF 		bl	tmc2130_writeInt
 2210              	.LVL265:
 383:boards/TMC2130_eval.c **** 			}
 2211              		.loc 1 383 5 is_stmt 1 view .LVU712
 2212              	.LBB279:
 2213              	.LBI279:
  62:boards/TMC2130_eval.c **** {
 2214              		.loc 1 62 31 view .LVU713
  62:boards/TMC2130_eval.c **** {
 2215              		.loc 1 62 31 is_stmt 0 view .LVU714
 2216              	.LBE279:
  64:boards/TMC2130_eval.c **** 
 2217              		.loc 1 64 2 is_stmt 1 view .LVU715
  66:boards/TMC2130_eval.c **** }
 2218              		.loc 1 66 2 view .LVU716
 2219              	.LBB280:
 2220              	.LBI280:
  62:boards/TMC2130_eval.c **** {
 2221              		.loc 1 62 31 view .LVU717
  62:boards/TMC2130_eval.c **** {
 2222              		.loc 1 62 31 is_stmt 0 view .LVU718
 2223              	.LBE280:
  64:boards/TMC2130_eval.c **** 
 2224              		.loc 1 64 2 is_stmt 1 view .LVU719
  66:boards/TMC2130_eval.c **** }
 2225              		.loc 1 66 2 view .LVU720
 383:boards/TMC2130_eval.c **** 			}
 2226              		.loc 1 383 5 is_stmt 0 view .LVU721
 2227 0746 6C21     		movs	r1, #108
 2228 0748 7048     		ldr	r0, .L184
 2229 074a FFF7FEFF 		bl	tmc2130_readInt
 2230              	.LVL266:
 2231 074e 2B68     		ldr	r3, [r5]
 2232 0750 1B01     		lsls	r3, r3, #4
 2233 0752 03F07003 		and	r3, r3, #112
 2234 0756 20F07002 		bic	r2, r0, #112
 2235 075a 1A43     		orrs	r2, r2, r3
 2236 075c 6B48     		ldr	r0, .L184
 2237 075e 6C21     		movs	r1, #108
 2238 0760 FFF7FEFF 		bl	tmc2130_writeInt
 2239              	.LVL267:
 2240 0764 C0E5     		b	.L39
 2241              	.LVL268:
 2242              	.L65:
 389:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2243              		.loc 1 389 3 is_stmt 1 view .LVU722
 390:boards/TMC2130_eval.c **** 			{
 2244              		.loc 1 390 7 is_stmt 0 view .LVU723
 2245 0766 6948     		ldr	r0, .L184
 2246              	.LVL269:
 390:boards/TMC2130_eval.c **** 			{
 2247              		.loc 1 390 7 view .LVU724
 2248 0768 6C21     		movs	r1, #108
 2249              	.LVL270:
 389:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2250              		.loc 1 389 5 view .LVU725
 2251 076a E4B9     		cbnz	r4, .L132
 390:boards/TMC2130_eval.c **** 			{
 2252              		.loc 1 390 4 is_stmt 1 view .LVU726
 2253              	.LBB281:
 2254              	.LBI281:
  62:boards/TMC2130_eval.c **** {
 2255              		.loc 1 62 31 view .LVU727
 2256              	.LVL271:
  62:boards/TMC2130_eval.c **** {
 2257              		.loc 1 62 31 is_stmt 0 view .LVU728
 2258              	.LBE281:
  64:boards/TMC2130_eval.c **** 
 2259              		.loc 1 64 2 is_stmt 1 view .LVU729
  66:boards/TMC2130_eval.c **** }
 2260              		.loc 1 66 2 view .LVU730
 390:boards/TMC2130_eval.c **** 			{
 2261              		.loc 1 390 7 is_stmt 0 view .LVU731
 2262 076c FFF7FEFF 		bl	tmc2130_readInt
 2263              	.LVL272:
 390:boards/TMC2130_eval.c **** 			{
 2264              		.loc 1 390 6 view .LVU732
 2265 0770 10F4804F 		tst	r0, #16384
 392:boards/TMC2130_eval.c **** 			}
 2266              		.loc 1 392 14 view .LVU733
 2267 0774 4FF06C01 		mov	r1, #108
 2268 0778 6448     		ldr	r0, .L184
 390:boards/TMC2130_eval.c **** 			{
 2269              		.loc 1 390 6 view .LVU734
 2270 077a 05D0     		beq	.L133
 392:boards/TMC2130_eval.c **** 			}
 2271              		.loc 1 392 5 is_stmt 1 view .LVU735
 2272              	.LBB282:
 2273              	.LBI282:
  62:boards/TMC2130_eval.c **** {
 2274              		.loc 1 62 31 view .LVU736
 2275              	.LVL273:
  62:boards/TMC2130_eval.c **** {
 2276              		.loc 1 62 31 is_stmt 0 view .LVU737
 2277              	.LBE282:
  64:boards/TMC2130_eval.c **** 
 2278              		.loc 1 64 2 is_stmt 1 view .LVU738
  66:boards/TMC2130_eval.c **** }
 2279              		.loc 1 66 2 view .LVU739
 392:boards/TMC2130_eval.c **** 			}
 2280              		.loc 1 392 14 is_stmt 0 view .LVU740
 2281 077c FFF7FEFF 		bl	tmc2130_readInt
 2282              	.LVL274:
 2283 0780 C0F30210 		ubfx	r0, r0, #4, #3
 392:boards/TMC2130_eval.c **** 			}
 2284              		.loc 1 392 12 view .LVU741
 2285 0784 2860     		str	r0, [r5]
 2286 0786 AFE5     		b	.L39
 2287              	.LVL275:
 2288              	.L133:
 396:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
 2289              		.loc 1 396 5 is_stmt 1 view .LVU742
 2290              	.LBB283:
 2291              	.LBI283:
  62:boards/TMC2130_eval.c **** {
 2292              		.loc 1 62 31 view .LVU743
  62:boards/TMC2130_eval.c **** {
 2293              		.loc 1 62 31 is_stmt 0 view .LVU744
 2294              	.LBE283:
  64:boards/TMC2130_eval.c **** 
 2295              		.loc 1 64 2 is_stmt 1 view .LVU745
  66:boards/TMC2130_eval.c **** }
 2296              		.loc 1 66 2 view .LVU746
 396:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
 2297              		.loc 1 396 17 is_stmt 0 view .LVU747
 2298 0788 FFF7FEFF 		bl	tmc2130_readInt
 2299              	.LVL276:
 397:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2300              		.loc 1 397 15 view .LVU748
 2301 078c 6C21     		movs	r1, #108
 396:boards/TMC2130_eval.c **** 				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
 2302              		.loc 1 396 17 view .LVU749
 2303 078e 0646     		mov	r6, r0
 2304              	.LVL277:
 397:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2305              		.loc 1 397 5 is_stmt 1 view .LVU750
 2306              	.LBB284:
 2307              	.LBI284:
  62:boards/TMC2130_eval.c **** {
 2308              		.loc 1 62 31 view .LVU751
  62:boards/TMC2130_eval.c **** {
 2309              		.loc 1 62 31 is_stmt 0 view .LVU752
 2310              	.LBE284:
  64:boards/TMC2130_eval.c **** 
 2311              		.loc 1 64 2 is_stmt 1 view .LVU753
  66:boards/TMC2130_eval.c **** }
 2312              		.loc 1 66 2 view .LVU754
 397:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2313              		.loc 1 397 15 is_stmt 0 view .LVU755
 2314 0790 5E48     		ldr	r0, .L184
 2315              	.LVL278:
 397:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2316              		.loc 1 397 15 view .LVU756
 2317 0792 FFF7FEFF 		bl	tmc2130_readInt
 2318              	.LVL279:
 398:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2319              		.loc 1 398 7 view .LVU757
 2320 0796 3205     		lsls	r2, r6, #20
 397:boards/TMC2130_eval.c **** 				if(tempValue & (1<<11))
 2321              		.loc 1 397 73 view .LVU758
 2322 0798 C0F3C313 		ubfx	r3, r0, #7, #4
 398:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2323              		.loc 1 398 5 is_stmt 1 view .LVU759
 398:boards/TMC2130_eval.c **** 					*value |= 1<<3;
 2324              		.loc 1 398 7 is_stmt 0 view .LVU760
 2325 079c A4D5     		bpl	.L180
 399:boards/TMC2130_eval.c **** 			}
 2326              		.loc 1 399 6 is_stmt 1 view .LVU761
 399:boards/TMC2130_eval.c **** 			}
 2327              		.loc 1 399 13 is_stmt 0 view .LVU762
 2328 079e 43F00803 		orr	r3, r3, #8
 2329 07a2 2B60     		str	r3, [r5]
 2330 07a4 A0E5     		b	.L39
 2331              	.LVL280:
 2332              	.L132:
 401:boards/TMC2130_eval.c **** 			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
 2333              		.loc 1 401 10 is_stmt 1 view .LVU763
 402:boards/TMC2130_eval.c **** 			{
 2334              		.loc 1 402 4 view .LVU764
 2335              	.LBB285:
 2336              	.LBI285:
  62:boards/TMC2130_eval.c **** {
 2337              		.loc 1 62 31 view .LVU765
  62:boards/TMC2130_eval.c **** {
 2338              		.loc 1 62 31 is_stmt 0 view .LVU766
 2339              	.LBE285:
  64:boards/TMC2130_eval.c **** 
 2340              		.loc 1 64 2 is_stmt 1 view .LVU767
  66:boards/TMC2130_eval.c **** }
 2341              		.loc 1 66 2 view .LVU768
 402:boards/TMC2130_eval.c **** 			{
 2342              		.loc 1 402 7 is_stmt 0 view .LVU769
 2343 07a6 FFF7FEFF 		bl	tmc2130_readInt
 2344              	.LVL281:
 402:boards/TMC2130_eval.c **** 			{
 2345              		.loc 1 402 6 view .LVU770
 2346 07aa 10F48044 		ands	r4, r0, #16384
 404:boards/TMC2130_eval.c **** 			}
 2347              		.loc 1 404 5 view .LVU771
 2348 07ae 4FF06C01 		mov	r1, #108
 2349 07b2 5648     		ldr	r0, .L184
 402:boards/TMC2130_eval.c **** 			{
 2350              		.loc 1 402 6 view .LVU772
 2351 07b4 0ED0     		beq	.L136
 404:boards/TMC2130_eval.c **** 			}
 2352              		.loc 1 404 5 is_stmt 1 view .LVU773
 2353              	.LBB286:
 2354              	.LBI286:
  62:boards/TMC2130_eval.c **** {
 2355              		.loc 1 62 31 view .LVU774
 2356              	.LVL282:
  62:boards/TMC2130_eval.c **** {
 2357              		.loc 1 62 31 is_stmt 0 view .LVU775
 2358              	.LBE286:
  64:boards/TMC2130_eval.c **** 
 2359              		.loc 1 64 2 is_stmt 1 view .LVU776
  66:boards/TMC2130_eval.c **** }
 2360              		.loc 1 66 2 view .LVU777
 2361              	.LBB287:
 2362              	.LBI287:
  62:boards/TMC2130_eval.c **** {
 2363              		.loc 1 62 31 view .LVU778
  62:boards/TMC2130_eval.c **** {
 2364              		.loc 1 62 31 is_stmt 0 view .LVU779
 2365              	.LBE287:
  64:boards/TMC2130_eval.c **** 
 2366              		.loc 1 64 2 is_stmt 1 view .LVU780
  66:boards/TMC2130_eval.c **** }
 2367              		.loc 1 66 2 view .LVU781
 404:boards/TMC2130_eval.c **** 			}
 2368              		.loc 1 404 5 is_stmt 0 view .LVU782
 2369 07b6 FFF7FEFF 		bl	tmc2130_readInt
 2370              	.LVL283:
 2371 07ba 2B68     		ldr	r3, [r5]
 2372 07bc 1B01     		lsls	r3, r3, #4
 2373 07be 03F07003 		and	r3, r3, #112
 2374 07c2 20F07002 		bic	r2, r0, #112
 2375 07c6 1A43     		orrs	r2, r2, r3
 2376 07c8 5048     		ldr	r0, .L184
 2377 07ca 6C21     		movs	r1, #108
 2378 07cc FFF7FEFF 		bl	tmc2130_writeInt
 2379              	.LVL284:
 142:boards/TMC2130_eval.c **** 
 2380              		.loc 1 142 11 view .LVU783
 2381 07d0 0024     		movs	r4, #0
 2382 07d2 89E5     		b	.L39
 2383              	.LVL285:
 2384              	.L136:
 408:boards/TMC2130_eval.c **** 			}
 2385              		.loc 1 408 5 is_stmt 1 view .LVU784
 2386              	.LBB288:
 2387              	.LBI288:
  62:boards/TMC2130_eval.c **** {
 2388              		.loc 1 62 31 view .LVU785
  62:boards/TMC2130_eval.c **** {
 2389              		.loc 1 62 31 is_stmt 0 view .LVU786
 2390              	.LBE288:
  64:boards/TMC2130_eval.c **** 
 2391              		.loc 1 64 2 is_stmt 1 view .LVU787
  66:boards/TMC2130_eval.c **** }
 2392              		.loc 1 66 2 view .LVU788
 2393              	.LBB289:
 2394              	.LBI289:
  62:boards/TMC2130_eval.c **** {
 2395              		.loc 1 62 31 view .LVU789
  62:boards/TMC2130_eval.c **** {
 2396              		.loc 1 62 31 is_stmt 0 view .LVU790
 2397              	.LBE289:
  64:boards/TMC2130_eval.c **** 
 2398              		.loc 1 64 2 is_stmt 1 view .LVU791
  66:boards/TMC2130_eval.c **** }
 2399              		.loc 1 66 2 view .LVU792
 408:boards/TMC2130_eval.c **** 			}
 2400              		.loc 1 408 5 is_stmt 0 view .LVU793
 2401 07d4 FFF7FEFF 		bl	tmc2130_readInt
 2402              	.LVL286:
 2403 07d8 2B68     		ldr	r3, [r5]
 2404 07da DB01     		lsls	r3, r3, #7
 2405 07dc 03F4F063 		and	r3, r3, #1920
 2406 07e0 20F4F062 		bic	r2, r0, #1920
 2407 07e4 1A43     		orrs	r2, r2, r3
 2408 07e6 4948     		ldr	r0, .L184
 2409 07e8 6C21     		movs	r1, #108
 2410 07ea FFF7FEFF 		bl	tmc2130_writeInt
 2411              	.LVL287:
 2412 07ee 7BE5     		b	.L39
 2413              	.LVL288:
 2414              	.L64:
 414:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_
 2415              		.loc 1 414 3 is_stmt 1 view .LVU794
 415:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2416              		.loc 1 415 13 is_stmt 0 view .LVU795
 2417 07f0 4648     		ldr	r0, .L184
 2418              	.LVL289:
 415:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2419              		.loc 1 415 13 view .LVU796
 2420 07f2 6C21     		movs	r1, #108
 2421              	.LVL290:
 414:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_
 2422              		.loc 1 414 5 view .LVU797
 2423 07f4 2CB9     		cbnz	r4, .L137
 415:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2424              		.loc 1 415 4 is_stmt 1 view .LVU798
 2425              	.LBB290:
 2426              	.LBI290:
  62:boards/TMC2130_eval.c **** {
 2427              		.loc 1 62 31 view .LVU799
 2428              	.LVL291:
  62:boards/TMC2130_eval.c **** {
 2429              		.loc 1 62 31 is_stmt 0 view .LVU800
 2430              	.LBE290:
  64:boards/TMC2130_eval.c **** 
 2431              		.loc 1 64 2 is_stmt 1 view .LVU801
  66:boards/TMC2130_eval.c **** }
 2432              		.loc 1 66 2 view .LVU802
 415:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2433              		.loc 1 415 13 is_stmt 0 view .LVU803
 2434 07f6 FFF7FEFF 		bl	tmc2130_readInt
 2435              	.LVL292:
 2436 07fa 00F00F00 		and	r0, r0, #15
 415:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2437              		.loc 1 415 11 view .LVU804
 2438 07fe 2860     		str	r0, [r5]
 2439 0800 72E5     		b	.L39
 2440              	.LVL293:
 2441              	.L137:
 416:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_SHIFT, 
 2442              		.loc 1 416 10 is_stmt 1 view .LVU805
 417:boards/TMC2130_eval.c **** 		}
 2443              		.loc 1 417 4 view .LVU806
 2444              	.LBB291:
 2445              	.LBI291:
  62:boards/TMC2130_eval.c **** {
 2446              		.loc 1 62 31 view .LVU807
  62:boards/TMC2130_eval.c **** {
 2447              		.loc 1 62 31 is_stmt 0 view .LVU808
 2448              	.LBE291:
  64:boards/TMC2130_eval.c **** 
 2449              		.loc 1 64 2 is_stmt 1 view .LVU809
  66:boards/TMC2130_eval.c **** }
 2450              		.loc 1 66 2 view .LVU810
 2451              	.LBB292:
 2452              	.LBI292:
  62:boards/TMC2130_eval.c **** {
 2453              		.loc 1 62 31 view .LVU811
  62:boards/TMC2130_eval.c **** {
 2454              		.loc 1 62 31 is_stmt 0 view .LVU812
 2455              	.LBE292:
  64:boards/TMC2130_eval.c **** 
 2456              		.loc 1 64 2 is_stmt 1 view .LVU813
  66:boards/TMC2130_eval.c **** }
 2457              		.loc 1 66 2 view .LVU814
 417:boards/TMC2130_eval.c **** 		}
 2458              		.loc 1 417 4 is_stmt 0 view .LVU815
 2459 0802 FFF7FEFF 		bl	tmc2130_readInt
 2460              	.LVL294:
 2461 0806 2A68     		ldr	r2, [r5]
 2462 0808 20F00F00 		bic	r0, r0, #15
 2463 080c 02F00F02 		and	r2, r2, #15
 2464 0810 0243     		orrs	r2, r2, r0
 2465 0812 6C21     		movs	r1, #108
 2466 0814 3D48     		ldr	r0, .L184
 2467 0816 FFF7FEFF 		bl	tmc2130_writeInt
 2468              	.LVL295:
 142:boards/TMC2130_eval.c **** 
 2469              		.loc 1 142 11 view .LVU816
 2470 081a 0024     		movs	r4, #0
 2471 081c 64E5     		b	.L39
 2472              	.LVL296:
 2473              	.L63:
 422:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEI
 2474              		.loc 1 422 3 is_stmt 1 view .LVU817
 423:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2475              		.loc 1 423 13 is_stmt 0 view .LVU818
 2476 081e 3B48     		ldr	r0, .L184
 2477              	.LVL297:
 423:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2478              		.loc 1 423 13 view .LVU819
 2479 0820 6D21     		movs	r1, #109
 2480              	.LVL298:
 422:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEI
 2481              		.loc 1 422 5 view .LVU820
 2482 0822 2CB9     		cbnz	r4, .L138
 423:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2483              		.loc 1 423 4 is_stmt 1 view .LVU821
 2484              	.LBB293:
 2485              	.LBI293:
  62:boards/TMC2130_eval.c **** {
 2486              		.loc 1 62 31 view .LVU822
 2487              	.LVL299:
  62:boards/TMC2130_eval.c **** {
 2488              		.loc 1 62 31 is_stmt 0 view .LVU823
 2489              	.LBE293:
  64:boards/TMC2130_eval.c **** 
 2490              		.loc 1 64 2 is_stmt 1 view .LVU824
  66:boards/TMC2130_eval.c **** }
 2491              		.loc 1 66 2 view .LVU825
 423:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2492              		.loc 1 423 13 is_stmt 0 view .LVU826
 2493 0824 FFF7FEFF 		bl	tmc2130_readInt
 2494              	.LVL300:
 2495 0828 C0F3C030 		ubfx	r0, r0, #15, #1
 423:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2496              		.loc 1 423 11 view .LVU827
 2497 082c 2860     		str	r0, [r5]
 2498 082e 5BE5     		b	.L39
 2499              	.LVL301:
 2500              	.L138:
 424:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEIMIN_SHI
 2501              		.loc 1 424 10 is_stmt 1 view .LVU828
 425:boards/TMC2130_eval.c **** 		}
 2502              		.loc 1 425 4 view .LVU829
 2503              	.LBB294:
 2504              	.LBI294:
  62:boards/TMC2130_eval.c **** {
 2505              		.loc 1 62 31 view .LVU830
  62:boards/TMC2130_eval.c **** {
 2506              		.loc 1 62 31 is_stmt 0 view .LVU831
 2507              	.LBE294:
  64:boards/TMC2130_eval.c **** 
 2508              		.loc 1 64 2 is_stmt 1 view .LVU832
  66:boards/TMC2130_eval.c **** }
 2509              		.loc 1 66 2 view .LVU833
 2510              	.LBB295:
 2511              	.LBI295:
  62:boards/TMC2130_eval.c **** {
 2512              		.loc 1 62 31 view .LVU834
  62:boards/TMC2130_eval.c **** {
 2513              		.loc 1 62 31 is_stmt 0 view .LVU835
 2514              	.LBE295:
  64:boards/TMC2130_eval.c **** 
 2515              		.loc 1 64 2 is_stmt 1 view .LVU836
  66:boards/TMC2130_eval.c **** }
 2516              		.loc 1 66 2 view .LVU837
 425:boards/TMC2130_eval.c **** 		}
 2517              		.loc 1 425 4 is_stmt 0 view .LVU838
 2518 0830 FFF7FEFF 		bl	tmc2130_readInt
 2519              	.LVL302:
 2520 0834 2B68     		ldr	r3, [r5]
 2521 0836 DB03     		lsls	r3, r3, #15
 2522 0838 9BB2     		uxth	r3, r3
 2523 083a 20F40042 		bic	r2, r0, #32768
 2524 083e 1A43     		orrs	r2, r2, r3
 2525 0840 3248     		ldr	r0, .L184
 2526 0842 6D21     		movs	r1, #109
 2527 0844 FFF7FEFF 		bl	tmc2130_writeInt
 2528              	.LVL303:
 142:boards/TMC2130_eval.c **** 
 2529              		.loc 1 142 11 view .LVU839
 2530 0848 0024     		movs	r4, #0
 2531 084a 4DE5     		b	.L39
 2532              	.LVL304:
 2533              	.L62:
 430:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_
 2534              		.loc 1 430 3 is_stmt 1 view .LVU840
 431:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2535              		.loc 1 431 13 is_stmt 0 view .LVU841
 2536 084c 2F48     		ldr	r0, .L184
 2537              	.LVL305:
 431:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2538              		.loc 1 431 13 view .LVU842
 2539 084e 6D21     		movs	r1, #109
 2540              	.LVL306:
 430:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_
 2541              		.loc 1 430 5 view .LVU843
 2542 0850 2CB9     		cbnz	r4, .L139
 431:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2543              		.loc 1 431 4 is_stmt 1 view .LVU844
 2544              	.LBB296:
 2545              	.LBI296:
  62:boards/TMC2130_eval.c **** {
 2546              		.loc 1 62 31 view .LVU845
 2547              	.LVL307:
  62:boards/TMC2130_eval.c **** {
 2548              		.loc 1 62 31 is_stmt 0 view .LVU846
 2549              	.LBE296:
  64:boards/TMC2130_eval.c **** 
 2550              		.loc 1 64 2 is_stmt 1 view .LVU847
  66:boards/TMC2130_eval.c **** }
 2551              		.loc 1 66 2 view .LVU848
 431:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2552              		.loc 1 431 13 is_stmt 0 view .LVU849
 2553 0852 FFF7FEFF 		bl	tmc2130_readInt
 2554              	.LVL308:
 2555 0856 C0F34130 		ubfx	r0, r0, #13, #2
 431:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2556              		.loc 1 431 11 view .LVU850
 2557 085a 2860     		str	r0, [r5]
 2558 085c 44E5     		b	.L39
 2559              	.LVL309:
 2560              	.L139:
 432:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_SHIFT, 
 2561              		.loc 1 432 10 is_stmt 1 view .LVU851
 433:boards/TMC2130_eval.c **** 		}
 2562              		.loc 1 433 4 view .LVU852
 2563              	.LBB297:
 2564              	.LBI297:
  62:boards/TMC2130_eval.c **** {
 2565              		.loc 1 62 31 view .LVU853
  62:boards/TMC2130_eval.c **** {
 2566              		.loc 1 62 31 is_stmt 0 view .LVU854
 2567              	.LBE297:
  64:boards/TMC2130_eval.c **** 
 2568              		.loc 1 64 2 is_stmt 1 view .LVU855
  66:boards/TMC2130_eval.c **** }
 2569              		.loc 1 66 2 view .LVU856
 2570              	.LBB298:
 2571              	.LBI298:
  62:boards/TMC2130_eval.c **** {
 2572              		.loc 1 62 31 view .LVU857
  62:boards/TMC2130_eval.c **** {
 2573              		.loc 1 62 31 is_stmt 0 view .LVU858
 2574              	.LBE298:
  64:boards/TMC2130_eval.c **** 
 2575              		.loc 1 64 2 is_stmt 1 view .LVU859
  66:boards/TMC2130_eval.c **** }
 2576              		.loc 1 66 2 view .LVU860
 433:boards/TMC2130_eval.c **** 		}
 2577              		.loc 1 433 4 is_stmt 0 view .LVU861
 2578 085e FFF7FEFF 		bl	tmc2130_readInt
 2579              	.LVL310:
 2580 0862 2B68     		ldr	r3, [r5]
 2581 0864 5B03     		lsls	r3, r3, #13
 2582 0866 03F4C043 		and	r3, r3, #24576
 2583 086a 20F4C042 		bic	r2, r0, #24576
 2584 086e 1A43     		orrs	r2, r2, r3
 2585 0870 2648     		ldr	r0, .L184
 2586 0872 6D21     		movs	r1, #109
 2587 0874 FFF7FEFF 		bl	tmc2130_writeInt
 2588              	.LVL311:
 142:boards/TMC2130_eval.c **** 
 2589              		.loc 1 142 11 view .LVU862
 2590 0878 0024     		movs	r4, #0
 2591 087a 35E5     		b	.L39
 2592              	.LVL312:
 2593              	.L61:
 438:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMA
 2594              		.loc 1 438 3 is_stmt 1 view .LVU863
 439:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2595              		.loc 1 439 13 is_stmt 0 view .LVU864
 2596 087c 2348     		ldr	r0, .L184
 2597              	.LVL313:
 439:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2598              		.loc 1 439 13 view .LVU865
 2599 087e 6D21     		movs	r1, #109
 2600              	.LVL314:
 438:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMA
 2601              		.loc 1 438 5 view .LVU866
 2602 0880 2CB9     		cbnz	r4, .L140
 439:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2603              		.loc 1 439 4 is_stmt 1 view .LVU867
 2604              	.LBB299:
 2605              	.LBI299:
  62:boards/TMC2130_eval.c **** {
 2606              		.loc 1 62 31 view .LVU868
 2607              	.LVL315:
  62:boards/TMC2130_eval.c **** {
 2608              		.loc 1 62 31 is_stmt 0 view .LVU869
 2609              	.LBE299:
  64:boards/TMC2130_eval.c **** 
 2610              		.loc 1 64 2 is_stmt 1 view .LVU870
  66:boards/TMC2130_eval.c **** }
 2611              		.loc 1 66 2 view .LVU871
 439:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2612              		.loc 1 439 13 is_stmt 0 view .LVU872
 2613 0882 FFF7FEFF 		bl	tmc2130_readInt
 2614              	.LVL316:
 2615 0886 C0F30320 		ubfx	r0, r0, #8, #4
 439:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2616              		.loc 1 439 11 view .LVU873
 2617 088a 2860     		str	r0, [r5]
 2618 088c 2CE5     		b	.L39
 2619              	.LVL317:
 2620              	.L140:
 440:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMAX_SHIFT
 2621              		.loc 1 440 10 is_stmt 1 view .LVU874
 441:boards/TMC2130_eval.c **** 		}
 2622              		.loc 1 441 4 view .LVU875
 2623              	.LBB300:
 2624              	.LBI300:
  62:boards/TMC2130_eval.c **** {
 2625              		.loc 1 62 31 view .LVU876
  62:boards/TMC2130_eval.c **** {
 2626              		.loc 1 62 31 is_stmt 0 view .LVU877
 2627              	.LBE300:
  64:boards/TMC2130_eval.c **** 
 2628              		.loc 1 64 2 is_stmt 1 view .LVU878
  66:boards/TMC2130_eval.c **** }
 2629              		.loc 1 66 2 view .LVU879
 2630              	.LBB301:
 2631              	.LBI301:
  62:boards/TMC2130_eval.c **** {
 2632              		.loc 1 62 31 view .LVU880
  62:boards/TMC2130_eval.c **** {
 2633              		.loc 1 62 31 is_stmt 0 view .LVU881
 2634              	.LBE301:
  64:boards/TMC2130_eval.c **** 
 2635              		.loc 1 64 2 is_stmt 1 view .LVU882
  66:boards/TMC2130_eval.c **** }
 2636              		.loc 1 66 2 view .LVU883
 441:boards/TMC2130_eval.c **** 		}
 2637              		.loc 1 441 4 is_stmt 0 view .LVU884
 2638 088e FFF7FEFF 		bl	tmc2130_readInt
 2639              	.LVL318:
 2640 0892 2B68     		ldr	r3, [r5]
 2641 0894 1B02     		lsls	r3, r3, #8
 2642 0896 03F47063 		and	r3, r3, #3840
 2643 089a 20F47062 		bic	r2, r0, #3840
 2644 089e 1A43     		orrs	r2, r2, r3
 2645 08a0 1A48     		ldr	r0, .L184
 2646 08a2 6D21     		movs	r1, #109
 2647 08a4 FFF7FEFF 		bl	tmc2130_writeInt
 2648              	.LVL319:
 142:boards/TMC2130_eval.c **** 
 2649              		.loc 1 142 11 view .LVU885
 2650 08a8 0024     		movs	r4, #0
 2651 08aa 1DE5     		b	.L39
 2652              	.LVL320:
 2653              	.L60:
 446:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_
 2654              		.loc 1 446 3 is_stmt 1 view .LVU886
 447:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2655              		.loc 1 447 13 is_stmt 0 view .LVU887
 2656 08ac 1748     		ldr	r0, .L184
 2657              	.LVL321:
 447:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2658              		.loc 1 447 13 view .LVU888
 2659 08ae 6D21     		movs	r1, #109
 2660              	.LVL322:
 446:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_
 2661              		.loc 1 446 5 view .LVU889
 2662 08b0 2CB9     		cbnz	r4, .L141
 447:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2663              		.loc 1 447 4 is_stmt 1 view .LVU890
 2664              	.LBB302:
 2665              	.LBI302:
  62:boards/TMC2130_eval.c **** {
 2666              		.loc 1 62 31 view .LVU891
 2667              	.LVL323:
  62:boards/TMC2130_eval.c **** {
 2668              		.loc 1 62 31 is_stmt 0 view .LVU892
 2669              	.LBE302:
  64:boards/TMC2130_eval.c **** 
 2670              		.loc 1 64 2 is_stmt 1 view .LVU893
  66:boards/TMC2130_eval.c **** }
 2671              		.loc 1 66 2 view .LVU894
 447:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2672              		.loc 1 447 13 is_stmt 0 view .LVU895
 2673 08b2 FFF7FEFF 		bl	tmc2130_readInt
 2674              	.LVL324:
 2675 08b6 C0F34110 		ubfx	r0, r0, #5, #2
 447:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2676              		.loc 1 447 11 view .LVU896
 2677 08ba 2860     		str	r0, [r5]
 2678 08bc 14E5     		b	.L39
 2679              	.LVL325:
 2680              	.L141:
 448:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_SHIFT, 
 2681              		.loc 1 448 10 is_stmt 1 view .LVU897
 449:boards/TMC2130_eval.c **** 		}
 2682              		.loc 1 449 4 view .LVU898
 2683              	.LBB303:
 2684              	.LBI303:
  62:boards/TMC2130_eval.c **** {
 2685              		.loc 1 62 31 view .LVU899
  62:boards/TMC2130_eval.c **** {
 2686              		.loc 1 62 31 is_stmt 0 view .LVU900
 2687              	.LBE303:
  64:boards/TMC2130_eval.c **** 
 2688              		.loc 1 64 2 is_stmt 1 view .LVU901
  66:boards/TMC2130_eval.c **** }
 2689              		.loc 1 66 2 view .LVU902
 2690              	.LBB304:
 2691              	.LBI304:
  62:boards/TMC2130_eval.c **** {
 2692              		.loc 1 62 31 view .LVU903
  62:boards/TMC2130_eval.c **** {
 2693              		.loc 1 62 31 is_stmt 0 view .LVU904
 2694              	.LBE304:
  64:boards/TMC2130_eval.c **** 
 2695              		.loc 1 64 2 is_stmt 1 view .LVU905
  66:boards/TMC2130_eval.c **** }
 2696              		.loc 1 66 2 view .LVU906
 449:boards/TMC2130_eval.c **** 		}
 2697              		.loc 1 449 4 is_stmt 0 view .LVU907
 2698 08be FFF7FEFF 		bl	tmc2130_readInt
 2699              	.LVL326:
 2700 08c2 2B68     		ldr	r3, [r5]
 2701 08c4 5B01     		lsls	r3, r3, #5
 2702 08c6 03F06003 		and	r3, r3, #96
 2703 08ca 20F06002 		bic	r2, r0, #96
 2704 08ce 1A43     		orrs	r2, r2, r3
 2705 08d0 0E48     		ldr	r0, .L184
 2706 08d2 6D21     		movs	r1, #109
 2707 08d4 FFF7FEFF 		bl	tmc2130_writeInt
 2708              	.LVL327:
 142:boards/TMC2130_eval.c **** 
 2709              		.loc 1 142 11 view .LVU908
 2710 08d8 0024     		movs	r4, #0
 2711 08da 05E5     		b	.L39
 2712              	.LVL328:
 2713              	.L59:
 454:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMI
 2714              		.loc 1 454 3 is_stmt 1 view .LVU909
 455:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2715              		.loc 1 455 13 is_stmt 0 view .LVU910
 2716 08dc 0B48     		ldr	r0, .L184
 2717              	.LVL329:
 455:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2718              		.loc 1 455 13 view .LVU911
 2719 08de 6D21     		movs	r1, #109
 2720              	.LVL330:
 454:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMI
 2721              		.loc 1 454 5 view .LVU912
 2722 08e0 2CB9     		cbnz	r4, .L142
 455:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2723              		.loc 1 455 4 is_stmt 1 view .LVU913
 2724              	.LBB305:
 2725              	.LBI305:
  62:boards/TMC2130_eval.c **** {
 2726              		.loc 1 62 31 view .LVU914
 2727              	.LVL331:
  62:boards/TMC2130_eval.c **** {
 2728              		.loc 1 62 31 is_stmt 0 view .LVU915
 2729              	.LBE305:
  64:boards/TMC2130_eval.c **** 
 2730              		.loc 1 64 2 is_stmt 1 view .LVU916
  66:boards/TMC2130_eval.c **** }
 2731              		.loc 1 66 2 view .LVU917
 455:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2732              		.loc 1 455 13 is_stmt 0 view .LVU918
 2733 08e2 FFF7FEFF 		bl	tmc2130_readInt
 2734              	.LVL332:
 2735 08e6 00F00F00 		and	r0, r0, #15
 455:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2736              		.loc 1 455 11 view .LVU919
 2737 08ea 2860     		str	r0, [r5]
 2738 08ec FCE4     		b	.L39
 2739              	.LVL333:
 2740              	.L142:
 456:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMIN_SHIFT
 2741              		.loc 1 456 10 is_stmt 1 view .LVU920
 457:boards/TMC2130_eval.c **** 		}
 2742              		.loc 1 457 4 view .LVU921
 2743              	.LBB306:
 2744              	.LBI306:
  62:boards/TMC2130_eval.c **** {
 2745              		.loc 1 62 31 view .LVU922
  62:boards/TMC2130_eval.c **** {
 2746              		.loc 1 62 31 is_stmt 0 view .LVU923
 2747              	.LBE306:
  64:boards/TMC2130_eval.c **** 
 2748              		.loc 1 64 2 is_stmt 1 view .LVU924
  66:boards/TMC2130_eval.c **** }
 2749              		.loc 1 66 2 view .LVU925
 2750              	.LBB307:
 2751              	.LBI307:
  62:boards/TMC2130_eval.c **** {
 2752              		.loc 1 62 31 view .LVU926
  62:boards/TMC2130_eval.c **** {
 2753              		.loc 1 62 31 is_stmt 0 view .LVU927
 2754              	.LBE307:
  64:boards/TMC2130_eval.c **** 
 2755              		.loc 1 64 2 is_stmt 1 view .LVU928
  66:boards/TMC2130_eval.c **** }
 2756              		.loc 1 66 2 view .LVU929
 457:boards/TMC2130_eval.c **** 		}
 2757              		.loc 1 457 4 is_stmt 0 view .LVU930
 2758 08ee FFF7FEFF 		bl	tmc2130_readInt
 2759              	.LVL334:
 2760 08f2 2A68     		ldr	r2, [r5]
 2761 08f4 20F00F00 		bic	r0, r0, #15
 2762 08f8 02F00F02 		and	r2, r2, #15
 2763 08fc 0243     		orrs	r2, r2, r0
 2764 08fe 6D21     		movs	r1, #109
 2765 0900 0248     		ldr	r0, .L184
 2766 0902 FFF7FEFF 		bl	tmc2130_writeInt
 2767              	.LVL335:
 142:boards/TMC2130_eval.c **** 
 2768              		.loc 1 142 11 view .LVU931
 2769 0906 0024     		movs	r4, #0
 2770 0908 EEE4     		b	.L39
 2771              	.L185:
 2772 090a 00BF     		.align	2
 2773              	.L184:
 2774 090c 00000000 		.word	TMC2130
 2775              	.LVL336:
 2776              	.L58:
 462:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFIL
 2777              		.loc 1 462 3 is_stmt 1 view .LVU932
 463:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2778              		.loc 1 463 13 is_stmt 0 view .LVU933
 2779 0910 B848     		ldr	r0, .L186
 2780              	.LVL337:
 463:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2781              		.loc 1 463 13 view .LVU934
 2782 0912 6D21     		movs	r1, #109
 2783              	.LVL338:
 462:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFIL
 2784              		.loc 1 462 5 view .LVU935
 2785 0914 2CB9     		cbnz	r4, .L143
 463:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2786              		.loc 1 463 4 is_stmt 1 view .LVU936
 2787              	.LBB308:
 2788              	.LBI308:
  62:boards/TMC2130_eval.c **** {
 2789              		.loc 1 62 31 view .LVU937
 2790              	.LVL339:
  62:boards/TMC2130_eval.c **** {
 2791              		.loc 1 62 31 is_stmt 0 view .LVU938
 2792              	.LBE308:
  64:boards/TMC2130_eval.c **** 
 2793              		.loc 1 64 2 is_stmt 1 view .LVU939
  66:boards/TMC2130_eval.c **** }
 2794              		.loc 1 66 2 view .LVU940
 463:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2795              		.loc 1 463 13 is_stmt 0 view .LVU941
 2796 0916 FFF7FEFF 		bl	tmc2130_readInt
 2797              	.LVL340:
 2798 091a C0F30060 		ubfx	r0, r0, #24, #1
 463:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2799              		.loc 1 463 11 view .LVU942
 2800 091e 2860     		str	r0, [r5]
 2801 0920 E2E4     		b	.L39
 2802              	.LVL341:
 2803              	.L143:
 464:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFILT_SHIFT
 2804              		.loc 1 464 10 is_stmt 1 view .LVU943
 465:boards/TMC2130_eval.c **** 		}
 2805              		.loc 1 465 4 view .LVU944
 2806              	.LBB309:
 2807              	.LBI309:
  62:boards/TMC2130_eval.c **** {
 2808              		.loc 1 62 31 view .LVU945
  62:boards/TMC2130_eval.c **** {
 2809              		.loc 1 62 31 is_stmt 0 view .LVU946
 2810              	.LBE309:
  64:boards/TMC2130_eval.c **** 
 2811              		.loc 1 64 2 is_stmt 1 view .LVU947
  66:boards/TMC2130_eval.c **** }
 2812              		.loc 1 66 2 view .LVU948
 2813              	.LBB310:
 2814              	.LBI310:
  62:boards/TMC2130_eval.c **** {
 2815              		.loc 1 62 31 view .LVU949
  62:boards/TMC2130_eval.c **** {
 2816              		.loc 1 62 31 is_stmt 0 view .LVU950
 2817              	.LBE310:
  64:boards/TMC2130_eval.c **** 
 2818              		.loc 1 64 2 is_stmt 1 view .LVU951
  66:boards/TMC2130_eval.c **** }
 2819              		.loc 1 66 2 view .LVU952
 465:boards/TMC2130_eval.c **** 		}
 2820              		.loc 1 465 4 is_stmt 0 view .LVU953
 2821 0922 FFF7FEFF 		bl	tmc2130_readInt
 2822              	.LVL342:
 2823 0926 2B68     		ldr	r3, [r5]
 2824 0928 1B06     		lsls	r3, r3, #24
 2825 092a 03F08073 		and	r3, r3, #16777216
 2826 092e 20F08072 		bic	r2, r0, #16777216
 2827 0932 1A43     		orrs	r2, r2, r3
 2828 0934 AF48     		ldr	r0, .L186
 2829 0936 6D21     		movs	r1, #109
 2830 0938 FFF7FEFF 		bl	tmc2130_writeInt
 2831              	.LVL343:
 142:boards/TMC2130_eval.c **** 
 2832              		.loc 1 142 11 view .LVU954
 2833 093c 0024     		movs	r4, #0
 2834 093e D3E4     		b	.L39
 2835              	.LVL344:
 2836              	.L57:
 470:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SH
 2837              		.loc 1 470 3 is_stmt 1 view .LVU955
 471:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2838              		.loc 1 471 13 is_stmt 0 view .LVU956
 2839 0940 AC48     		ldr	r0, .L186
 2840              	.LVL345:
 471:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2841              		.loc 1 471 13 view .LVU957
 2842 0942 6D21     		movs	r1, #109
 2843              	.LVL346:
 470:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SH
 2844              		.loc 1 470 5 view .LVU958
 2845 0944 64B9     		cbnz	r4, .L144
 471:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2846              		.loc 1 471 4 is_stmt 1 view .LVU959
 2847              	.LBB311:
 2848              	.LBI311:
  62:boards/TMC2130_eval.c **** {
 2849              		.loc 1 62 31 view .LVU960
 2850              	.LVL347:
  62:boards/TMC2130_eval.c **** {
 2851              		.loc 1 62 31 is_stmt 0 view .LVU961
 2852              	.LBE311:
  64:boards/TMC2130_eval.c **** 
 2853              		.loc 1 64 2 is_stmt 1 view .LVU962
  66:boards/TMC2130_eval.c **** }
 2854              		.loc 1 66 2 view .LVU963
 471:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2855              		.loc 1 471 13 is_stmt 0 view .LVU964
 2856 0946 FFF7FEFF 		bl	tmc2130_readInt
 2857              	.LVL348:
 2858 094a 0314     		asrs	r3, r0, #16
 472:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2859              		.loc 1 472 13 view .LVU965
 2860 094c 13F04003 		ands	r3, r3, #64
 471:boards/TMC2130_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 2861              		.loc 1 471 13 view .LVU966
 2862 0950 C0F30640 		ubfx	r0, r0, #16, #7
 472:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2863              		.loc 1 472 4 is_stmt 1 view .LVU967
 472:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2864              		.loc 1 472 13 is_stmt 0 view .LVU968
 2865 0954 18BF     		it	ne
 2866 0956 6FF07F03 		mvnne	r3, #127
 2867 095a 1843     		orrs	r0, r0, r3
 472:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2868              		.loc 1 472 11 view .LVU969
 2869 095c 2860     		str	r0, [r5]
 2870 095e C3E4     		b	.L39
 2871              	.LVL349:
 2872              	.L144:
 473:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT, *v
 2873              		.loc 1 473 10 is_stmt 1 view .LVU970
 474:boards/TMC2130_eval.c **** 		}
 2874              		.loc 1 474 4 view .LVU971
 2875              	.LBB312:
 2876              	.LBI312:
  62:boards/TMC2130_eval.c **** {
 2877              		.loc 1 62 31 view .LVU972
  62:boards/TMC2130_eval.c **** {
 2878              		.loc 1 62 31 is_stmt 0 view .LVU973
 2879              	.LBE312:
  64:boards/TMC2130_eval.c **** 
 2880              		.loc 1 64 2 is_stmt 1 view .LVU974
  66:boards/TMC2130_eval.c **** }
 2881              		.loc 1 66 2 view .LVU975
 2882              	.LBB313:
 2883              	.LBI313:
  62:boards/TMC2130_eval.c **** {
 2884              		.loc 1 62 31 view .LVU976
  62:boards/TMC2130_eval.c **** {
 2885              		.loc 1 62 31 is_stmt 0 view .LVU977
 2886              	.LBE313:
  64:boards/TMC2130_eval.c **** 
 2887              		.loc 1 64 2 is_stmt 1 view .LVU978
  66:boards/TMC2130_eval.c **** }
 2888              		.loc 1 66 2 view .LVU979
 474:boards/TMC2130_eval.c **** 		}
 2889              		.loc 1 474 4 is_stmt 0 view .LVU980
 2890 0960 FFF7FEFF 		bl	tmc2130_readInt
 2891              	.LVL350:
 2892 0964 2B68     		ldr	r3, [r5]
 2893 0966 1B04     		lsls	r3, r3, #16
 2894 0968 03F4FE03 		and	r3, r3, #8323072
 2895 096c 20F4FE02 		bic	r2, r0, #8323072
 2896 0970 1A43     		orrs	r2, r2, r3
 2897 0972 A048     		ldr	r0, .L186
 2898 0974 6D21     		movs	r1, #109
 2899 0976 FFF7FEFF 		bl	tmc2130_writeInt
 2900              	.LVL351:
 142:boards/TMC2130_eval.c **** 
 2901              		.loc 1 142 11 view .LVU981
 2902 097a 0024     		movs	r4, #0
 2903 097c B4E4     		b	.L39
 2904              	.LVL352:
 2905              	.L56:
 479:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSE
 2906              		.loc 1 479 3 is_stmt 1 view .LVU982
 480:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2907              		.loc 1 480 13 is_stmt 0 view .LVU983
 2908 097e 9D48     		ldr	r0, .L186
 2909              	.LVL353:
 480:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2910              		.loc 1 480 13 view .LVU984
 2911 0980 6C21     		movs	r1, #108
 2912              	.LVL354:
 479:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSE
 2913              		.loc 1 479 5 view .LVU985
 2914 0982 2CB9     		cbnz	r4, .L146
 480:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2915              		.loc 1 480 4 is_stmt 1 view .LVU986
 2916              	.LBB314:
 2917              	.LBI314:
  62:boards/TMC2130_eval.c **** {
 2918              		.loc 1 62 31 view .LVU987
 2919              	.LVL355:
  62:boards/TMC2130_eval.c **** {
 2920              		.loc 1 62 31 is_stmt 0 view .LVU988
 2921              	.LBE314:
  64:boards/TMC2130_eval.c **** 
 2922              		.loc 1 64 2 is_stmt 1 view .LVU989
  66:boards/TMC2130_eval.c **** }
 2923              		.loc 1 66 2 view .LVU990
 480:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2924              		.loc 1 480 13 is_stmt 0 view .LVU991
 2925 0984 FFF7FEFF 		bl	tmc2130_readInt
 2926              	.LVL356:
 2927 0988 C0F34040 		ubfx	r0, r0, #17, #1
 480:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2928              		.loc 1 480 11 view .LVU992
 2929 098c 2860     		str	r0, [r5]
 2930 098e ABE4     		b	.L39
 2931              	.LVL357:
 2932              	.L146:
 481:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSENSE_SHI
 2933              		.loc 1 481 10 is_stmt 1 view .LVU993
 482:boards/TMC2130_eval.c **** 		}
 2934              		.loc 1 482 4 view .LVU994
 2935              	.LBB315:
 2936              	.LBI315:
  62:boards/TMC2130_eval.c **** {
 2937              		.loc 1 62 31 view .LVU995
  62:boards/TMC2130_eval.c **** {
 2938              		.loc 1 62 31 is_stmt 0 view .LVU996
 2939              	.LBE315:
  64:boards/TMC2130_eval.c **** 
 2940              		.loc 1 64 2 is_stmt 1 view .LVU997
  66:boards/TMC2130_eval.c **** }
 2941              		.loc 1 66 2 view .LVU998
 2942              	.LBB316:
 2943              	.LBI316:
  62:boards/TMC2130_eval.c **** {
 2944              		.loc 1 62 31 view .LVU999
  62:boards/TMC2130_eval.c **** {
 2945              		.loc 1 62 31 is_stmt 0 view .LVU1000
 2946              	.LBE316:
  64:boards/TMC2130_eval.c **** 
 2947              		.loc 1 64 2 is_stmt 1 view .LVU1001
  66:boards/TMC2130_eval.c **** }
 2948              		.loc 1 66 2 view .LVU1002
 482:boards/TMC2130_eval.c **** 		}
 2949              		.loc 1 482 4 is_stmt 0 view .LVU1003
 2950 0990 FFF7FEFF 		bl	tmc2130_readInt
 2951              	.LVL358:
 2952 0994 2B68     		ldr	r3, [r5]
 2953 0996 5B04     		lsls	r3, r3, #17
 2954 0998 03F40033 		and	r3, r3, #131072
 2955 099c 20F40032 		bic	r2, r0, #131072
 2956 09a0 1A43     		orrs	r2, r2, r3
 2957 09a2 9448     		ldr	r0, .L186
 2958 09a4 6C21     		movs	r1, #108
 2959 09a6 FFF7FEFF 		bl	tmc2130_writeInt
 2960              	.LVL359:
 142:boards/TMC2130_eval.c **** 
 2961              		.loc 1 142 11 view .LVU1004
 2962 09aa 0024     		movs	r4, #0
 2963 09ac 9CE4     		b	.L39
 2964              	.LVL360:
 2965              	.L55:
 487:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_CS_ACTUAL_MASK, TMC213
 2966              		.loc 1 487 3 is_stmt 1 view .LVU1005
 487:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_CS_ACTUAL_MASK, TMC213
 2967              		.loc 1 487 5 is_stmt 0 view .LVU1006
 2968 09ae 002C     		cmp	r4, #0
 2969 09b0 40F04381 		bne	.L172
 488:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2970              		.loc 1 488 4 is_stmt 1 view .LVU1007
 2971              	.LBB317:
 2972              	.LBI317:
  62:boards/TMC2130_eval.c **** {
 2973              		.loc 1 62 31 view .LVU1008
 2974              	.LVL361:
  62:boards/TMC2130_eval.c **** {
 2975              		.loc 1 62 31 is_stmt 0 view .LVU1009
 2976              	.LBE317:
  64:boards/TMC2130_eval.c **** 
 2977              		.loc 1 64 2 is_stmt 1 view .LVU1010
  66:boards/TMC2130_eval.c **** }
 2978              		.loc 1 66 2 view .LVU1011
 488:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2979              		.loc 1 488 13 is_stmt 0 view .LVU1012
 2980 09b4 8F48     		ldr	r0, .L186
 2981              	.LVL362:
 488:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2982              		.loc 1 488 13 view .LVU1013
 2983 09b6 6F21     		movs	r1, #111
 2984              	.LVL363:
 488:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2985              		.loc 1 488 13 view .LVU1014
 2986 09b8 FFF7FEFF 		bl	tmc2130_readInt
 2987              	.LVL364:
 2988 09bc C0F30440 		ubfx	r0, r0, #16, #5
 488:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2989              		.loc 1 488 11 view .LVU1015
 2990 09c0 2860     		str	r0, [r5]
 2991 09c2 91E4     		b	.L39
 2992              	.LVL365:
 2993              	.L54:
 495:boards/TMC2130_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2994              		.loc 1 495 3 is_stmt 1 view .LVU1016
 495:boards/TMC2130_eval.c **** 			*value = StepDir_getStallGuardThreshold(motor);
 2995              		.loc 1 495 5 is_stmt 0 view .LVU1017
 2996 09c4 24B9     		cbnz	r4, .L147
 496:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2997              		.loc 1 496 4 is_stmt 1 view .LVU1018
 496:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 2998              		.loc 1 496 13 is_stmt 0 view .LVU1019
 2999 09c6 2046     		mov	r0, r4
 3000              	.LVL366:
 496:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3001              		.loc 1 496 13 view .LVU1020
 3002 09c8 FFF7FEFF 		bl	StepDir_getStallGuardThreshold
 3003              	.LVL367:
 496:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3004              		.loc 1 496 11 view .LVU1021
 3005 09cc 2860     		str	r0, [r5]
 3006 09ce 8BE4     		b	.L39
 3007              	.LVL368:
 3008              	.L147:
 497:boards/TMC2130_eval.c **** 			StepDir_setStallGuardThreshold(motor, *value);
 3009              		.loc 1 497 10 is_stmt 1 view .LVU1022
 498:boards/TMC2130_eval.c **** 		}
 3010              		.loc 1 498 4 view .LVU1023
 3011 09d0 2968     		ldr	r1, [r5]
 3012              	.LVL369:
 498:boards/TMC2130_eval.c **** 		}
 3013              		.loc 1 498 4 is_stmt 0 view .LVU1024
 3014 09d2 0020     		movs	r0, #0
 3015              	.LVL370:
 498:boards/TMC2130_eval.c **** 		}
 3016              		.loc 1 498 4 view .LVU1025
 3017 09d4 FFF7FEFF 		bl	StepDir_setStallGuardThreshold
 3018              	.LVL371:
 142:boards/TMC2130_eval.c **** 
 3019              		.loc 1 142 11 view .LVU1026
 3020 09d8 0024     		movs	r4, #0
 3021 09da 85E4     		b	.L39
 3022              	.LVL372:
 3023              	.L53:
 503:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TCOOLTHRS);
 3024              		.loc 1 503 3 is_stmt 1 view .LVU1027
 503:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TCOOLTHRS);
 3025              		.loc 1 503 5 is_stmt 0 view .LVU1028
 3026 09dc 84B9     		cbnz	r4, .L148
 504:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3027              		.loc 1 504 4 is_stmt 1 view .LVU1029
 3028              	.LBB318:
 3029              	.LBI318:
  62:boards/TMC2130_eval.c **** {
 3030              		.loc 1 62 31 view .LVU1030
 3031              	.LVL373:
  62:boards/TMC2130_eval.c **** {
 3032              		.loc 1 62 31 is_stmt 0 view .LVU1031
 3033              	.LBE318:
  64:boards/TMC2130_eval.c **** 
 3034              		.loc 1 64 2 is_stmt 1 view .LVU1032
  66:boards/TMC2130_eval.c **** }
 3035              		.loc 1 66 2 view .LVU1033
 504:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3036              		.loc 1 504 16 is_stmt 0 view .LVU1034
 3037 09de 8548     		ldr	r0, .L186
 3038              	.LVL374:
 504:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3039              		.loc 1 504 16 view .LVU1035
 3040 09e0 1421     		movs	r1, #20
 3041              	.LVL375:
 504:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3042              		.loc 1 504 16 view .LVU1036
 3043 09e2 FFF7FEFF 		bl	tmc2130_readInt
 3044              	.LVL376:
 505:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3045              		.loc 1 505 4 is_stmt 1 view .LVU1037
 505:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3046              		.loc 1 505 13 is_stmt 0 view .LVU1038
 3047 09e6 0028     		cmp	r0, #0
 505:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3048              		.loc 1 505 13 view .LVU1039
 3049 09e8 08BF     		it	eq
 3050 09ea 0120     		moveq	r0, #1
 3051              	.LVL377:
 505:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3052              		.loc 1 505 13 view .LVU1040
 3053 09ec 4FF08073 		mov	r3, #16777216
 3054 09f0 93FBF0F0 		sdiv	r0, r3, r0
 505:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3055              		.loc 1 505 11 view .LVU1041
 3056 09f4 804B     		ldr	r3, .L186+4
 3057 09f6 9842     		cmp	r0, r3
 3058 09f8 D4BF     		ite	le
 3059 09fa 2860     		strle	r0, [r5]
 3060 09fc 2B60     		strgt	r3, [r5]
 3061 09fe 73E4     		b	.L39
 3062              	.LVL378:
 3063              	.L148:
 506:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 3064              		.loc 1 506 10 is_stmt 1 view .LVU1042
 507:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
 3065              		.loc 1 507 4 view .LVU1043
 507:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
 3066              		.loc 1 507 13 is_stmt 0 view .LVU1044
 3067 0a00 2B68     		ldr	r3, [r5]
 508:boards/TMC2130_eval.c **** 		}
 3068              		.loc 1 508 4 view .LVU1045
 3069 0a02 7C48     		ldr	r0, .L186
 3070              	.LVL379:
 507:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
 3071              		.loc 1 507 13 view .LVU1046
 3072 0a04 002B     		cmp	r3, #0
 3073 0a06 08BF     		it	eq
 3074 0a08 0123     		moveq	r3, #1
 3075 0a0a 4FF08072 		mov	r2, #16777216
 3076 0a0e 92FBF3F2 		sdiv	r2, r2, r3
 3077 0a12 794B     		ldr	r3, .L186+4
 3078 0a14 9A42     		cmp	r2, r3
 3079 0a16 A8BF     		it	ge
 3080 0a18 1A46     		movge	r2, r3
 507:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
 3081              		.loc 1 507 11 view .LVU1047
 3082 0a1a 2A60     		str	r2, [r5]
 508:boards/TMC2130_eval.c **** 		}
 3083              		.loc 1 508 4 is_stmt 1 view .LVU1048
 3084              	.LBB319:
 3085              	.LBI319:
  62:boards/TMC2130_eval.c **** {
 3086              		.loc 1 62 31 view .LVU1049
 3087              	.LVL380:
  62:boards/TMC2130_eval.c **** {
 3088              		.loc 1 62 31 is_stmt 0 view .LVU1050
 3089              	.LBE319:
  64:boards/TMC2130_eval.c **** 
 3090              		.loc 1 64 2 is_stmt 1 view .LVU1051
  66:boards/TMC2130_eval.c **** }
 3091              		.loc 1 66 2 view .LVU1052
 508:boards/TMC2130_eval.c **** 		}
 3092              		.loc 1 508 4 is_stmt 0 view .LVU1053
 3093 0a1c 1421     		movs	r1, #20
 3094              	.LVL381:
 508:boards/TMC2130_eval.c **** 		}
 3095              		.loc 1 508 4 view .LVU1054
 3096 0a1e FFF7FEFF 		bl	tmc2130_writeInt
 3097              	.LVL382:
 142:boards/TMC2130_eval.c **** 
 3098              		.loc 1 142 11 view .LVU1055
 3099 0a22 0024     		movs	r4, #0
 3100 0a24 60E4     		b	.L39
 3101              	.LVL383:
 3102              	.L52:
 513:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDT
 3103              		.loc 1 513 3 is_stmt 1 view .LVU1056
 514:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3104              		.loc 1 514 13 is_stmt 0 view .LVU1057
 3105 0a26 7348     		ldr	r0, .L186
 3106              	.LVL384:
 514:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3107              		.loc 1 514 13 view .LVU1058
 3108 0a28 6C21     		movs	r1, #108
 3109              	.LVL385:
 513:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDT
 3110              		.loc 1 513 5 view .LVU1059
 3111 0a2a 2CB9     		cbnz	r4, .L151
 514:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3112              		.loc 1 514 4 is_stmt 1 view .LVU1060
 3113              	.LBB320:
 3114              	.LBI320:
  62:boards/TMC2130_eval.c **** {
 3115              		.loc 1 62 31 view .LVU1061
 3116              	.LVL386:
  62:boards/TMC2130_eval.c **** {
 3117              		.loc 1 62 31 is_stmt 0 view .LVU1062
 3118              	.LBE320:
  64:boards/TMC2130_eval.c **** 
 3119              		.loc 1 64 2 is_stmt 1 view .LVU1063
  66:boards/TMC2130_eval.c **** }
 3120              		.loc 1 66 2 view .LVU1064
 514:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3121              		.loc 1 514 13 is_stmt 0 view .LVU1065
 3122 0a2c FFF7FEFF 		bl	tmc2130_readInt
 3123              	.LVL387:
 3124 0a30 C0F34030 		ubfx	r0, r0, #13, #1
 514:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3125              		.loc 1 514 11 view .LVU1066
 3126 0a34 2860     		str	r0, [r5]
 3127 0a36 57E4     		b	.L39
 3128              	.LVL388:
 3129              	.L151:
 515:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDTF_SHIFT
 3130              		.loc 1 515 10 is_stmt 1 view .LVU1067
 516:boards/TMC2130_eval.c **** 		}
 3131              		.loc 1 516 4 view .LVU1068
 3132              	.LBB321:
 3133              	.LBI321:
  62:boards/TMC2130_eval.c **** {
 3134              		.loc 1 62 31 view .LVU1069
  62:boards/TMC2130_eval.c **** {
 3135              		.loc 1 62 31 is_stmt 0 view .LVU1070
 3136              	.LBE321:
  64:boards/TMC2130_eval.c **** 
 3137              		.loc 1 64 2 is_stmt 1 view .LVU1071
  66:boards/TMC2130_eval.c **** }
 3138              		.loc 1 66 2 view .LVU1072
 3139              	.LBB322:
 3140              	.LBI322:
  62:boards/TMC2130_eval.c **** {
 3141              		.loc 1 62 31 view .LVU1073
  62:boards/TMC2130_eval.c **** {
 3142              		.loc 1 62 31 is_stmt 0 view .LVU1074
 3143              	.LBE322:
  64:boards/TMC2130_eval.c **** 
 3144              		.loc 1 64 2 is_stmt 1 view .LVU1075
  66:boards/TMC2130_eval.c **** }
 3145              		.loc 1 66 2 view .LVU1076
 516:boards/TMC2130_eval.c **** 		}
 3146              		.loc 1 516 4 is_stmt 0 view .LVU1077
 3147 0a38 FFF7FEFF 		bl	tmc2130_readInt
 3148              	.LVL389:
 3149 0a3c 2B68     		ldr	r3, [r5]
 3150 0a3e 5B03     		lsls	r3, r3, #13
 3151 0a40 03F40053 		and	r3, r3, #8192
 3152 0a44 20F40052 		bic	r2, r0, #8192
 3153 0a48 1A43     		orrs	r2, r2, r3
 3154 0a4a 6A48     		ldr	r0, .L186
 3155 0a4c 6C21     		movs	r1, #108
 3156 0a4e FFF7FEFF 		bl	tmc2130_writeInt
 3157              	.LVL390:
 142:boards/TMC2130_eval.c **** 
 3158              		.loc 1 142 11 view .LVU1078
 3159 0a52 0024     		movs	r4, #0
 3160 0a54 48E4     		b	.L39
 3161              	.LVL391:
 3162              	.L51:
 521:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_
 3163              		.loc 1 521 3 is_stmt 1 view .LVU1079
 522:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3164              		.loc 1 522 13 is_stmt 0 view .LVU1080
 3165 0a56 6748     		ldr	r0, .L186
 3166              	.LVL392:
 522:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3167              		.loc 1 522 13 view .LVU1081
 3168 0a58 6C21     		movs	r1, #108
 3169              	.LVL393:
 521:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_
 3170              		.loc 1 521 5 view .LVU1082
 3171 0a5a 2CB9     		cbnz	r4, .L152
 522:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3172              		.loc 1 522 4 is_stmt 1 view .LVU1083
 3173              	.LBB323:
 3174              	.LBI323:
  62:boards/TMC2130_eval.c **** {
 3175              		.loc 1 62 31 view .LVU1084
 3176              	.LVL394:
  62:boards/TMC2130_eval.c **** {
 3177              		.loc 1 62 31 is_stmt 0 view .LVU1085
 3178              	.LBE323:
  64:boards/TMC2130_eval.c **** 
 3179              		.loc 1 64 2 is_stmt 1 view .LVU1086
  66:boards/TMC2130_eval.c **** }
 3180              		.loc 1 66 2 view .LVU1087
 522:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3181              		.loc 1 522 13 is_stmt 0 view .LVU1088
 3182 0a5c FFF7FEFF 		bl	tmc2130_readInt
 3183              	.LVL395:
 3184 0a60 C0F30350 		ubfx	r0, r0, #20, #4
 522:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3185              		.loc 1 522 11 view .LVU1089
 3186 0a64 2860     		str	r0, [r5]
 3187 0a66 3FE4     		b	.L39
 3188              	.LVL396:
 3189              	.L152:
 523:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_SHIFT, 
 3190              		.loc 1 523 10 is_stmt 1 view .LVU1090
 524:boards/TMC2130_eval.c **** 		}
 3191              		.loc 1 524 4 view .LVU1091
 3192              	.LBB324:
 3193              	.LBI324:
  62:boards/TMC2130_eval.c **** {
 3194              		.loc 1 62 31 view .LVU1092
  62:boards/TMC2130_eval.c **** {
 3195              		.loc 1 62 31 is_stmt 0 view .LVU1093
 3196              	.LBE324:
  64:boards/TMC2130_eval.c **** 
 3197              		.loc 1 64 2 is_stmt 1 view .LVU1094
  66:boards/TMC2130_eval.c **** }
 3198              		.loc 1 66 2 view .LVU1095
 3199              	.LBB325:
 3200              	.LBI325:
  62:boards/TMC2130_eval.c **** {
 3201              		.loc 1 62 31 view .LVU1096
  62:boards/TMC2130_eval.c **** {
 3202              		.loc 1 62 31 is_stmt 0 view .LVU1097
 3203              	.LBE325:
  64:boards/TMC2130_eval.c **** 
 3204              		.loc 1 64 2 is_stmt 1 view .LVU1098
  66:boards/TMC2130_eval.c **** }
 3205              		.loc 1 66 2 view .LVU1099
 524:boards/TMC2130_eval.c **** 		}
 3206              		.loc 1 524 4 is_stmt 0 view .LVU1100
 3207 0a68 FFF7FEFF 		bl	tmc2130_readInt
 3208              	.LVL397:
 3209 0a6c 2B68     		ldr	r3, [r5]
 3210 0a6e 1B05     		lsls	r3, r3, #20
 3211 0a70 03F47003 		and	r3, r3, #15728640
 3212 0a74 20F47002 		bic	r2, r0, #15728640
 3213 0a78 1A43     		orrs	r2, r2, r3
 3214 0a7a 5E48     		ldr	r0, .L186
 3215 0a7c 6C21     		movs	r1, #108
 3216 0a7e FFF7FEFF 		bl	tmc2130_writeInt
 3217              	.LVL398:
 142:boards/TMC2130_eval.c **** 
 3218              		.loc 1 142 11 view .LVU1101
 3219 0a82 0024     		movs	r4, #0
 3220 0a84 30E4     		b	.L39
 3221              	.LVL399:
 3222              	.L50:
 529:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TPWMTHRS);
 3223              		.loc 1 529 3 is_stmt 1 view .LVU1102
 529:boards/TMC2130_eval.c **** 			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TPWMTHRS);
 3224              		.loc 1 529 5 is_stmt 0 view .LVU1103
 3225 0a86 84B9     		cbnz	r4, .L153
 530:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3226              		.loc 1 530 4 is_stmt 1 view .LVU1104
 3227              	.LBB326:
 3228              	.LBI326:
  62:boards/TMC2130_eval.c **** {
 3229              		.loc 1 62 31 view .LVU1105
 3230              	.LVL400:
  62:boards/TMC2130_eval.c **** {
 3231              		.loc 1 62 31 is_stmt 0 view .LVU1106
 3232              	.LBE326:
  64:boards/TMC2130_eval.c **** 
 3233              		.loc 1 64 2 is_stmt 1 view .LVU1107
  66:boards/TMC2130_eval.c **** }
 3234              		.loc 1 66 2 view .LVU1108
 530:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3235              		.loc 1 530 16 is_stmt 0 view .LVU1109
 3236 0a88 5A48     		ldr	r0, .L186
 3237              	.LVL401:
 530:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3238              		.loc 1 530 16 view .LVU1110
 3239 0a8a 1321     		movs	r1, #19
 3240              	.LVL402:
 530:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
 3241              		.loc 1 530 16 view .LVU1111
 3242 0a8c FFF7FEFF 		bl	tmc2130_readInt
 3243              	.LVL403:
 531:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3244              		.loc 1 531 4 is_stmt 1 view .LVU1112
 531:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3245              		.loc 1 531 13 is_stmt 0 view .LVU1113
 3246 0a90 0028     		cmp	r0, #0
 531:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3247              		.loc 1 531 13 view .LVU1114
 3248 0a92 08BF     		it	eq
 3249 0a94 0120     		moveq	r0, #1
 3250              	.LVL404:
 531:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3251              		.loc 1 531 13 view .LVU1115
 3252 0a96 4FF08073 		mov	r3, #16777216
 3253 0a9a 93FBF0F0 		sdiv	r0, r3, r0
 531:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3254              		.loc 1 531 11 view .LVU1116
 3255 0a9e 564B     		ldr	r3, .L186+4
 3256 0aa0 9842     		cmp	r0, r3
 3257 0aa2 D4BF     		ite	le
 3258 0aa4 2860     		strle	r0, [r5]
 3259 0aa6 2B60     		strgt	r3, [r5]
 3260 0aa8 1EE4     		b	.L39
 3261              	.LVL405:
 3262              	.L153:
 532:boards/TMC2130_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 3263              		.loc 1 532 10 is_stmt 1 view .LVU1117
 533:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
 3264              		.loc 1 533 4 view .LVU1118
 533:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
 3265              		.loc 1 533 13 is_stmt 0 view .LVU1119
 3266 0aaa 2B68     		ldr	r3, [r5]
 534:boards/TMC2130_eval.c **** 		}
 3267              		.loc 1 534 4 view .LVU1120
 3268 0aac 5148     		ldr	r0, .L186
 3269              	.LVL406:
 533:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
 3270              		.loc 1 533 13 view .LVU1121
 3271 0aae 002B     		cmp	r3, #0
 3272 0ab0 08BF     		it	eq
 3273 0ab2 0123     		moveq	r3, #1
 3274 0ab4 4FF08072 		mov	r2, #16777216
 3275 0ab8 92FBF3F2 		sdiv	r2, r2, r3
 3276 0abc 4E4B     		ldr	r3, .L186+4
 3277 0abe 9A42     		cmp	r2, r3
 3278 0ac0 A8BF     		it	ge
 3279 0ac2 1A46     		movge	r2, r3
 533:boards/TMC2130_eval.c **** 			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
 3280              		.loc 1 533 11 view .LVU1122
 3281 0ac4 2A60     		str	r2, [r5]
 534:boards/TMC2130_eval.c **** 		}
 3282              		.loc 1 534 4 is_stmt 1 view .LVU1123
 3283              	.LBB327:
 3284              	.LBI327:
  62:boards/TMC2130_eval.c **** {
 3285              		.loc 1 62 31 view .LVU1124
 3286              	.LVL407:
  62:boards/TMC2130_eval.c **** {
 3287              		.loc 1 62 31 is_stmt 0 view .LVU1125
 3288              	.LBE327:
  64:boards/TMC2130_eval.c **** 
 3289              		.loc 1 64 2 is_stmt 1 view .LVU1126
  66:boards/TMC2130_eval.c **** }
 3290              		.loc 1 66 2 view .LVU1127
 534:boards/TMC2130_eval.c **** 		}
 3291              		.loc 1 534 4 is_stmt 0 view .LVU1128
 3292 0ac6 1321     		movs	r1, #19
 3293              	.LVL408:
 534:boards/TMC2130_eval.c **** 		}
 3294              		.loc 1 534 4 view .LVU1129
 3295 0ac8 FFF7FEFF 		bl	tmc2130_writeInt
 3296              	.LVL409:
 142:boards/TMC2130_eval.c **** 
 3297              		.loc 1 142 11 view .LVU1130
 3298 0acc 0024     		movs	r4, #0
 3299 0ace 0BE4     		b	.L39
 3300              	.LVL410:
 3301              	.L49:
 539:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PW
 3302              		.loc 1 539 3 is_stmt 1 view .LVU1131
 540:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3303              		.loc 1 540 13 is_stmt 0 view .LVU1132
 3304 0ad0 4848     		ldr	r0, .L186
 3305              	.LVL411:
 540:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3306              		.loc 1 540 13 view .LVU1133
 3307 0ad2 7021     		movs	r1, #112
 3308              	.LVL412:
 539:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PW
 3309              		.loc 1 539 5 view .LVU1134
 3310 0ad4 2CB9     		cbnz	r4, .L156
 540:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3311              		.loc 1 540 4 is_stmt 1 view .LVU1135
 3312              	.LBB328:
 3313              	.LBI328:
  62:boards/TMC2130_eval.c **** {
 3314              		.loc 1 62 31 view .LVU1136
 3315              	.LVL413:
  62:boards/TMC2130_eval.c **** {
 3316              		.loc 1 62 31 is_stmt 0 view .LVU1137
 3317              	.LBE328:
  64:boards/TMC2130_eval.c **** 
 3318              		.loc 1 64 2 is_stmt 1 view .LVU1138
  66:boards/TMC2130_eval.c **** }
 3319              		.loc 1 66 2 view .LVU1139
 540:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3320              		.loc 1 540 13 is_stmt 0 view .LVU1140
 3321 0ad6 FFF7FEFF 		bl	tmc2130_readInt
 3322              	.LVL414:
 3323 0ada C0F30720 		ubfx	r0, r0, #8, #8
 540:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3324              		.loc 1 540 11 view .LVU1141
 3325 0ade 2860     		str	r0, [r5]
 3326 0ae0 02E4     		b	.L39
 3327              	.LVL415:
 3328              	.L156:
 541:boards/TMC2130_eval.c **** 			// Set gradient
 3329              		.loc 1 541 10 is_stmt 1 view .LVU1142
 543:boards/TMC2130_eval.c **** 
 3330              		.loc 1 543 4 view .LVU1143
 3331              	.LBB329:
 3332              	.LBI329:
  62:boards/TMC2130_eval.c **** {
 3333              		.loc 1 62 31 view .LVU1144
  62:boards/TMC2130_eval.c **** {
 3334              		.loc 1 62 31 is_stmt 0 view .LVU1145
 3335              	.LBE329:
  64:boards/TMC2130_eval.c **** 
 3336              		.loc 1 64 2 is_stmt 1 view .LVU1146
  66:boards/TMC2130_eval.c **** }
 3337              		.loc 1 66 2 view .LVU1147
 3338              	.LBB330:
 3339              	.LBI330:
  62:boards/TMC2130_eval.c **** {
 3340              		.loc 1 62 31 view .LVU1148
  62:boards/TMC2130_eval.c **** {
 3341              		.loc 1 62 31 is_stmt 0 view .LVU1149
 3342              	.LBE330:
  64:boards/TMC2130_eval.c **** 
 3343              		.loc 1 64 2 is_stmt 1 view .LVU1150
  66:boards/TMC2130_eval.c **** }
 3344              		.loc 1 66 2 view .LVU1151
 543:boards/TMC2130_eval.c **** 
 3345              		.loc 1 543 4 is_stmt 0 view .LVU1152
 3346 0ae2 FFF7FEFF 		bl	tmc2130_readInt
 3347              	.LVL416:
 3348 0ae6 2B68     		ldr	r3, [r5]
 3349 0ae8 1B02     		lsls	r3, r3, #8
 3350 0aea 9BB2     		uxth	r3, r3
 3351 0aec 20F47F42 		bic	r2, r0, #65280
 3352 0af0 1A43     		orrs	r2, r2, r3
 3353 0af2 4048     		ldr	r0, .L186
 3354 0af4 7021     		movs	r1, #112
 3355 0af6 FFF7FEFF 		bl	tmc2130_writeInt
 3356              	.LVL417:
 546:boards/TMC2130_eval.c **** 		}
 3357              		.loc 1 546 4 is_stmt 1 view .LVU1153
 3358              	.LBB331:
 3359              	.LBI331:
  62:boards/TMC2130_eval.c **** {
 3360              		.loc 1 62 31 view .LVU1154
  62:boards/TMC2130_eval.c **** {
 3361              		.loc 1 62 31 is_stmt 0 view .LVU1155
 3362              	.LBE331:
  64:boards/TMC2130_eval.c **** 
 3363              		.loc 1 64 2 is_stmt 1 view .LVU1156
  66:boards/TMC2130_eval.c **** }
 3364              		.loc 1 66 2 view .LVU1157
 3365              	.LBB332:
 3366              	.LBI332:
  62:boards/TMC2130_eval.c **** {
 3367              		.loc 1 62 31 view .LVU1158
  62:boards/TMC2130_eval.c **** {
 3368              		.loc 1 62 31 is_stmt 0 view .LVU1159
 3369              	.LBE332:
  64:boards/TMC2130_eval.c **** 
 3370              		.loc 1 64 2 is_stmt 1 view .LVU1160
  66:boards/TMC2130_eval.c **** }
 3371              		.loc 1 66 2 view .LVU1161
 546:boards/TMC2130_eval.c **** 		}
 3372              		.loc 1 546 4 is_stmt 0 view .LVU1162
 3373 0afa 0021     		movs	r1, #0
 3374 0afc 3D48     		ldr	r0, .L186
 3375 0afe FFF7FEFF 		bl	tmc2130_readInt
 3376              	.LVL418:
 3377 0b02 2B68     		ldr	r3, [r5]
 3378 0b04 002B     		cmp	r3, #0
 3379 0b06 20F00402 		bic	r2, r0, #4
 3380 0b0a 18BF     		it	ne
 3381 0b0c 0423     		movne	r3, #4
 3382 0b0e 3948     		ldr	r0, .L186
 3383 0b10 1A43     		orrs	r2, r2, r3
 3384 0b12 0021     		movs	r1, #0
 3385 0b14 FFF7FEFF 		bl	tmc2130_writeInt
 3386              	.LVL419:
 142:boards/TMC2130_eval.c **** 
 3387              		.loc 1 142 11 view .LVU1163
 3388 0b18 0024     		movs	r4, #0
 3389 0b1a FFF7E5BB 		b	.L39
 3390              	.LVL420:
 3391              	.L48:
 551:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PW
 3392              		.loc 1 551 3 is_stmt 1 view .LVU1164
 552:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3393              		.loc 1 552 13 is_stmt 0 view .LVU1165
 3394 0b1e 3548     		ldr	r0, .L186
 3395              	.LVL421:
 552:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3396              		.loc 1 552 13 view .LVU1166
 3397 0b20 7021     		movs	r1, #112
 3398              	.LVL422:
 551:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PW
 3399              		.loc 1 551 5 view .LVU1167
 3400 0b22 2CB9     		cbnz	r4, .L158
 552:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3401              		.loc 1 552 4 is_stmt 1 view .LVU1168
 3402              	.LBB333:
 3403              	.LBI333:
  62:boards/TMC2130_eval.c **** {
 3404              		.loc 1 62 31 view .LVU1169
 3405              	.LVL423:
  62:boards/TMC2130_eval.c **** {
 3406              		.loc 1 62 31 is_stmt 0 view .LVU1170
 3407              	.LBE333:
  64:boards/TMC2130_eval.c **** 
 3408              		.loc 1 64 2 is_stmt 1 view .LVU1171
  66:boards/TMC2130_eval.c **** }
 3409              		.loc 1 66 2 view .LVU1172
 552:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3410              		.loc 1 552 13 is_stmt 0 view .LVU1173
 3411 0b24 FFF7FEFF 		bl	tmc2130_readInt
 3412              	.LVL424:
 3413 0b28 C0B2     		uxtb	r0, r0
 552:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3414              		.loc 1 552 11 view .LVU1174
 3415 0b2a 2860     		str	r0, [r5]
 3416 0b2c FFF7DCBB 		b	.L39
 3417              	.LVL425:
 3418              	.L158:
 553:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PWM_AMPL_
 3419              		.loc 1 553 10 is_stmt 1 view .LVU1175
 554:boards/TMC2130_eval.c **** 		}
 3420              		.loc 1 554 4 view .LVU1176
 3421              	.LBB334:
 3422              	.LBI334:
  62:boards/TMC2130_eval.c **** {
 3423              		.loc 1 62 31 view .LVU1177
  62:boards/TMC2130_eval.c **** {
 3424              		.loc 1 62 31 is_stmt 0 view .LVU1178
 3425              	.LBE334:
  64:boards/TMC2130_eval.c **** 
 3426              		.loc 1 64 2 is_stmt 1 view .LVU1179
  66:boards/TMC2130_eval.c **** }
 3427              		.loc 1 66 2 view .LVU1180
 3428              	.LBB335:
 3429              	.LBI335:
  62:boards/TMC2130_eval.c **** {
 3430              		.loc 1 62 31 view .LVU1181
  62:boards/TMC2130_eval.c **** {
 3431              		.loc 1 62 31 is_stmt 0 view .LVU1182
 3432              	.LBE335:
  64:boards/TMC2130_eval.c **** 
 3433              		.loc 1 64 2 is_stmt 1 view .LVU1183
  66:boards/TMC2130_eval.c **** }
 3434              		.loc 1 66 2 view .LVU1184
 554:boards/TMC2130_eval.c **** 		}
 3435              		.loc 1 554 4 is_stmt 0 view .LVU1185
 3436 0b30 FFF7FEFF 		bl	tmc2130_readInt
 3437              	.LVL426:
 3438 0b34 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 3439 0b36 20F0FF00 		bic	r0, r0, #255
 3440 0b3a 0243     		orrs	r2, r2, r0
 3441 0b3c 7021     		movs	r1, #112
 3442 0b3e 2D48     		ldr	r0, .L186
 3443 0b40 FFF7FEFF 		bl	tmc2130_writeInt
 3444              	.LVL427:
 142:boards/TMC2130_eval.c **** 
 3445              		.loc 1 142 11 view .LVU1186
 3446 0b44 0024     		movs	r4, #0
 3447 0b46 FFF7CFBB 		b	.L39
 3448              	.LVL428:
 3449              	.L47:
 559:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PW
 3450              		.loc 1 559 3 is_stmt 1 view .LVU1187
 559:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PW
 3451              		.loc 1 559 5 is_stmt 0 view .LVU1188
 3452 0b4a 44B9     		cbnz	r4, .L159
 560:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3453              		.loc 1 560 4 is_stmt 1 view .LVU1189
 3454              	.LBB336:
 3455              	.LBI336:
  62:boards/TMC2130_eval.c **** {
 3456              		.loc 1 62 31 view .LVU1190
 3457              	.LVL429:
  62:boards/TMC2130_eval.c **** {
 3458              		.loc 1 62 31 is_stmt 0 view .LVU1191
 3459              	.LBE336:
  64:boards/TMC2130_eval.c **** 
 3460              		.loc 1 64 2 is_stmt 1 view .LVU1192
  66:boards/TMC2130_eval.c **** }
 3461              		.loc 1 66 2 view .LVU1193
 560:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3462              		.loc 1 560 13 is_stmt 0 view .LVU1194
 3463 0b4c 2948     		ldr	r0, .L186
 3464              	.LVL430:
 560:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3465              		.loc 1 560 13 view .LVU1195
 3466 0b4e 7021     		movs	r1, #112
 3467              	.LVL431:
 560:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3468              		.loc 1 560 13 view .LVU1196
 3469 0b50 FFF7FEFF 		bl	tmc2130_readInt
 3470              	.LVL432:
 3471 0b54 C0F30140 		ubfx	r0, r0, #16, #2
 560:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3472              		.loc 1 560 11 view .LVU1197
 3473 0b58 2860     		str	r0, [r5]
 3474 0b5a FFF7C5BB 		b	.L39
 3475              	.LVL433:
 3476              	.L159:
 561:boards/TMC2130_eval.c **** 			if(*value >= 0 && *value < 4)
 3477              		.loc 1 561 10 is_stmt 1 view .LVU1198
 562:boards/TMC2130_eval.c **** 			{
 3478              		.loc 1 562 4 view .LVU1199
 562:boards/TMC2130_eval.c **** 			{
 3479              		.loc 1 562 6 is_stmt 0 view .LVU1200
 3480 0b5e 2B68     		ldr	r3, [r5]
 3481 0b60 032B     		cmp	r3, #3
 3482 0b62 6DD8     		bhi	.L176
 564:boards/TMC2130_eval.c **** 			}
 3483              		.loc 1 564 5 is_stmt 1 view .LVU1201
 3484              	.LBB337:
 3485              	.LBI337:
  62:boards/TMC2130_eval.c **** {
 3486              		.loc 1 62 31 view .LVU1202
 3487              	.LVL434:
  62:boards/TMC2130_eval.c **** {
 3488              		.loc 1 62 31 is_stmt 0 view .LVU1203
 3489              	.LBE337:
  64:boards/TMC2130_eval.c **** 
 3490              		.loc 1 64 2 is_stmt 1 view .LVU1204
  66:boards/TMC2130_eval.c **** }
 3491              		.loc 1 66 2 view .LVU1205
 3492              	.LBB338:
 3493              	.LBI338:
  62:boards/TMC2130_eval.c **** {
 3494              		.loc 1 62 31 view .LVU1206
  62:boards/TMC2130_eval.c **** {
 3495              		.loc 1 62 31 is_stmt 0 view .LVU1207
 3496              	.LBE338:
  64:boards/TMC2130_eval.c **** 
 3497              		.loc 1 64 2 is_stmt 1 view .LVU1208
  66:boards/TMC2130_eval.c **** }
 3498              		.loc 1 66 2 view .LVU1209
 564:boards/TMC2130_eval.c **** 			}
 3499              		.loc 1 564 5 is_stmt 0 view .LVU1210
 3500 0b64 7021     		movs	r1, #112
 3501              	.LVL435:
 564:boards/TMC2130_eval.c **** 			}
 3502              		.loc 1 564 5 view .LVU1211
 3503 0b66 2348     		ldr	r0, .L186
 3504              	.LVL436:
 564:boards/TMC2130_eval.c **** 			}
 3505              		.loc 1 564 5 view .LVU1212
 3506 0b68 FFF7FEFF 		bl	tmc2130_readInt
 3507              	.LVL437:
 3508 0b6c 2B68     		ldr	r3, [r5]
 3509 0b6e 1B04     		lsls	r3, r3, #16
 3510 0b70 03F44033 		and	r3, r3, #196608
 3511 0b74 20F44032 		bic	r2, r0, #196608
 3512 0b78 1A43     		orrs	r2, r2, r3
 3513 0b7a 1E48     		ldr	r0, .L186
 3514 0b7c 7021     		movs	r1, #112
 3515 0b7e FFF7FEFF 		bl	tmc2130_writeInt
 3516              	.LVL438:
 142:boards/TMC2130_eval.c **** 
 3517              		.loc 1 142 11 view .LVU1213
 3518 0b82 0024     		movs	r4, #0
 3519 0b84 FFF7B0BB 		b	.L39
 3520              	.LVL439:
 3521              	.L46:
 574:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC21
 3522              		.loc 1 574 3 is_stmt 1 view .LVU1214
 575:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3523              		.loc 1 575 13 is_stmt 0 view .LVU1215
 3524 0b88 1A48     		ldr	r0, .L186
 3525              	.LVL440:
 575:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3526              		.loc 1 575 13 view .LVU1216
 3527 0b8a 7021     		movs	r1, #112
 3528              	.LVL441:
 574:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC21
 3529              		.loc 1 574 5 view .LVU1217
 3530 0b8c 34B9     		cbnz	r4, .L160
 575:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3531              		.loc 1 575 4 is_stmt 1 view .LVU1218
 3532              	.LBB339:
 3533              	.LBI339:
  62:boards/TMC2130_eval.c **** {
 3534              		.loc 1 62 31 view .LVU1219
 3535              	.LVL442:
  62:boards/TMC2130_eval.c **** {
 3536              		.loc 1 62 31 is_stmt 0 view .LVU1220
 3537              	.LBE339:
  64:boards/TMC2130_eval.c **** 
 3538              		.loc 1 64 2 is_stmt 1 view .LVU1221
  66:boards/TMC2130_eval.c **** }
 3539              		.loc 1 66 2 view .LVU1222
 575:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3540              		.loc 1 575 13 is_stmt 0 view .LVU1223
 3541 0b8e FFF7FEFF 		bl	tmc2130_readInt
 3542              	.LVL443:
 3543 0b92 C0F38040 		ubfx	r0, r0, #18, #1
 575:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3544              		.loc 1 575 11 view .LVU1224
 3545 0b96 2860     		str	r0, [r5]
 3546 0b98 FFF7A6BB 		b	.L39
 3547              	.LVL444:
 3548              	.L160:
 576:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC2130_PWM_
 3549              		.loc 1 576 10 is_stmt 1 view .LVU1225
 577:boards/TMC2130_eval.c **** 		}
 3550              		.loc 1 577 4 view .LVU1226
 3551              	.LBB340:
 3552              	.LBI340:
  62:boards/TMC2130_eval.c **** {
 3553              		.loc 1 62 31 view .LVU1227
  62:boards/TMC2130_eval.c **** {
 3554              		.loc 1 62 31 is_stmt 0 view .LVU1228
 3555              	.LBE340:
  64:boards/TMC2130_eval.c **** 
 3556              		.loc 1 64 2 is_stmt 1 view .LVU1229
  66:boards/TMC2130_eval.c **** }
 3557              		.loc 1 66 2 view .LVU1230
 3558              	.LBB341:
 3559              	.LBI341:
  62:boards/TMC2130_eval.c **** {
 3560              		.loc 1 62 31 view .LVU1231
  62:boards/TMC2130_eval.c **** {
 3561              		.loc 1 62 31 is_stmt 0 view .LVU1232
 3562              	.LBE341:
  64:boards/TMC2130_eval.c **** 
 3563              		.loc 1 64 2 is_stmt 1 view .LVU1233
  66:boards/TMC2130_eval.c **** }
 3564              		.loc 1 66 2 view .LVU1234
 577:boards/TMC2130_eval.c **** 		}
 3565              		.loc 1 577 4 is_stmt 0 view .LVU1235
 3566 0b9c FFF7FEFF 		bl	tmc2130_readInt
 3567              	.LVL445:
 3568 0ba0 2B68     		ldr	r3, [r5]
 3569 0ba2 002B     		cmp	r3, #0
 3570 0ba4 20F48022 		bic	r2, r0, #262144
 3571 0ba8 18BF     		it	ne
 3572 0baa 4FF48023 		movne	r3, #262144
 3573 0bae 1148     		ldr	r0, .L186
 3574 0bb0 1A43     		orrs	r2, r2, r3
 3575 0bb2 7021     		movs	r1, #112
 3576 0bb4 FFF7FEFF 		bl	tmc2130_writeInt
 3577              	.LVL446:
 142:boards/TMC2130_eval.c **** 
 3578              		.loc 1 142 11 view .LVU1236
 3579 0bb8 0024     		movs	r4, #0
 3580 0bba FFF795BB 		b	.L39
 3581              	.LVL447:
 3582              	.L45:
 582:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_F
 3583              		.loc 1 582 3 is_stmt 1 view .LVU1237
 583:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3584              		.loc 1 583 13 is_stmt 0 view .LVU1238
 3585 0bbe 0D48     		ldr	r0, .L186
 3586              	.LVL448:
 583:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3587              		.loc 1 583 13 view .LVU1239
 3588 0bc0 7021     		movs	r1, #112
 3589              	.LVL449:
 582:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_F
 3590              		.loc 1 582 5 view .LVU1240
 3591 0bc2 34B9     		cbnz	r4, .L162
 583:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3592              		.loc 1 583 4 is_stmt 1 view .LVU1241
 3593              	.LBB342:
 3594              	.LBI342:
  62:boards/TMC2130_eval.c **** {
 3595              		.loc 1 62 31 view .LVU1242
 3596              	.LVL450:
  62:boards/TMC2130_eval.c **** {
 3597              		.loc 1 62 31 is_stmt 0 view .LVU1243
 3598              	.LBE342:
  64:boards/TMC2130_eval.c **** 
 3599              		.loc 1 64 2 is_stmt 1 view .LVU1244
  66:boards/TMC2130_eval.c **** }
 3600              		.loc 1 66 2 view .LVU1245
 583:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3601              		.loc 1 583 13 is_stmt 0 view .LVU1246
 3602 0bc4 FFF7FEFF 		bl	tmc2130_readInt
 3603              	.LVL451:
 3604 0bc8 C0F30150 		ubfx	r0, r0, #20, #2
 583:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3605              		.loc 1 583 11 view .LVU1247
 3606 0bcc 2860     		str	r0, [r5]
 3607 0bce FFF78BBB 		b	.L39
 3608              	.LVL452:
 3609              	.L162:
 584:boards/TMC2130_eval.c **** 			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_FREEWHEE
 3610              		.loc 1 584 10 is_stmt 1 view .LVU1248
 585:boards/TMC2130_eval.c **** 		}
 3611              		.loc 1 585 4 view .LVU1249
 3612              	.LBB343:
 3613              	.LBI343:
  62:boards/TMC2130_eval.c **** {
 3614              		.loc 1 62 31 view .LVU1250
  62:boards/TMC2130_eval.c **** {
 3615              		.loc 1 62 31 is_stmt 0 view .LVU1251
 3616              	.LBE343:
  64:boards/TMC2130_eval.c **** 
 3617              		.loc 1 64 2 is_stmt 1 view .LVU1252
  66:boards/TMC2130_eval.c **** }
 3618              		.loc 1 66 2 view .LVU1253
 3619              	.LBB344:
 3620              	.LBI344:
  62:boards/TMC2130_eval.c **** {
 3621              		.loc 1 62 31 view .LVU1254
  62:boards/TMC2130_eval.c **** {
 3622              		.loc 1 62 31 is_stmt 0 view .LVU1255
 3623              	.LBE344:
  64:boards/TMC2130_eval.c **** 
 3624              		.loc 1 64 2 is_stmt 1 view .LVU1256
  66:boards/TMC2130_eval.c **** }
 3625              		.loc 1 66 2 view .LVU1257
 585:boards/TMC2130_eval.c **** 		}
 3626              		.loc 1 585 4 is_stmt 0 view .LVU1258
 3627 0bd2 FFF7FEFF 		bl	tmc2130_readInt
 3628              	.LVL453:
 3629 0bd6 2B68     		ldr	r3, [r5]
 3630 0bd8 1B05     		lsls	r3, r3, #20
 3631 0bda 03F44013 		and	r3, r3, #3145728
 3632 0bde 20F44012 		bic	r2, r0, #3145728
 3633 0be2 1A43     		orrs	r2, r2, r3
 3634 0be4 0348     		ldr	r0, .L186
 3635 0be6 7021     		movs	r1, #112
 3636 0be8 FFF7FEFF 		bl	tmc2130_writeInt
 3637              	.LVL454:
 142:boards/TMC2130_eval.c **** 
 3638              		.loc 1 142 11 view .LVU1259
 3639 0bec 0024     		movs	r4, #0
 3640 0bee FFF77BBB 		b	.L39
 3641              	.L187:
 3642 0bf2 00BF     		.align	2
 3643              	.L186:
 3644 0bf4 00000000 		.word	TMC2130
 3645 0bf8 FFFF0F00 		.word	1048575
 3646              	.LVL455:
 3647              	.L43:
 590:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_SG_RESULT_MASK, TMC213
 3648              		.loc 1 590 3 is_stmt 1 view .LVU1260
 590:boards/TMC2130_eval.c **** 			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_SG_RESULT_MASK, TMC213
 3649              		.loc 1 590 5 is_stmt 0 view .LVU1261
 3650 0bfc 1CBB     		cbnz	r4, .L178
 591:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3651              		.loc 1 591 4 is_stmt 1 view .LVU1262
 3652              	.LBB345:
 3653              	.LBI345:
  62:boards/TMC2130_eval.c **** {
 3654              		.loc 1 62 31 view .LVU1263
 3655              	.LVL456:
  62:boards/TMC2130_eval.c **** {
 3656              		.loc 1 62 31 is_stmt 0 view .LVU1264
 3657              	.LBE345:
  64:boards/TMC2130_eval.c **** 
 3658              		.loc 1 64 2 is_stmt 1 view .LVU1265
  66:boards/TMC2130_eval.c **** }
 3659              		.loc 1 66 2 view .LVU1266
 591:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3660              		.loc 1 591 13 is_stmt 0 view .LVU1267
 3661 0bfe 1348     		ldr	r0, .L188
 3662              	.LVL457:
 591:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3663              		.loc 1 591 13 view .LVU1268
 3664 0c00 6F21     		movs	r1, #111
 3665              	.LVL458:
 591:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3666              		.loc 1 591 13 view .LVU1269
 3667 0c02 FFF7FEFF 		bl	tmc2130_readInt
 3668              	.LVL459:
 3669 0c06 C0F30900 		ubfx	r0, r0, #0, #10
 591:boards/TMC2130_eval.c **** 		} else if(readWrite == WRITE) {
 3670              		.loc 1 591 11 view .LVU1270
 3671 0c0a 2860     		str	r0, [r5]
 3672 0c0c FFF76CBB 		b	.L39
 3673              	.LVL460:
 3674              	.L163:
 145:boards/TMC2130_eval.c **** 
 3675              		.loc 1 145 10 view .LVU1271
 3676 0c10 0824     		movs	r4, #8
 3677 0c12 FFF769BB 		b	.L39
 3678              	.LVL461:
 3679              	.L164:
 149:boards/TMC2130_eval.c **** 	{
 3680              		.loc 1 149 2 view .LVU1272
 3681 0c16 0424     		movs	r4, #4
 3682 0c18 FFF766BB 		b	.L39
 3683              	.LVL462:
 3684              	.L165:
 149:boards/TMC2130_eval.c **** 	{
 3685              		.loc 1 149 2 view .LVU1273
 3686 0c1c 0424     		movs	r4, #4
 3687 0c1e FFF763BB 		b	.L39
 3688              	.L166:
 189:boards/TMC2130_eval.c **** 		}
 3689              		.loc 1 189 11 view .LVU1274
 3690 0c22 0424     		movs	r4, #4
 3691 0c24 FFF760BB 		b	.L39
 3692              	.L167:
 3693 0c28 0424     		movs	r4, #4
 3694 0c2a FFF75DBB 		b	.L39
 3695              	.L168:
 3696 0c2e 0424     		movs	r4, #4
 3697 0c30 FFF75ABB 		b	.L39
 3698              	.L170:
 3699 0c34 0424     		movs	r4, #4
 3700 0c36 FFF757BB 		b	.L39
 3701              	.LVL463:
 3702              	.L172:
 189:boards/TMC2130_eval.c **** 		}
 3703              		.loc 1 189 11 view .LVU1275
 3704 0c3a 0424     		movs	r4, #4
 3705 0c3c FFF754BB 		b	.L39
 3706              	.L176:
 568:boards/TMC2130_eval.c **** 			}
 3707              		.loc 1 568 12 view .LVU1276
 3708 0c40 1024     		movs	r4, #16
 3709 0c42 FFF751BB 		b	.L39
 3710              	.L178:
 189:boards/TMC2130_eval.c **** 		}
 3711              		.loc 1 189 11 view .LVU1277
 3712 0c46 0424     		movs	r4, #4
 3713              	.LVL464:
 189:boards/TMC2130_eval.c **** 		}
 3714              		.loc 1 189 11 view .LVU1278
 3715 0c48 FFF74EBB 		b	.L39
 3716              	.L189:
 3717              		.align	2
 3718              	.L188:
 3719 0c4c 00000000 		.word	TMC2130
 3720              		.cfi_endproc
 3721              	.LFE10:
 3723              		.align	1
 3724              		.syntax unified
 3725              		.thumb
 3726              		.thumb_func
 3727              		.fpu softvfp
 3729              	SAP:
 3730              	.LVL465:
 3731              	.LFB11:
 604:boards/TMC2130_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3732              		.loc 1 604 1 is_stmt 1 view -0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 8
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
 605:boards/TMC2130_eval.c **** }
 3736              		.loc 1 605 2 view .LVU1280
 604:boards/TMC2130_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3737              		.loc 1 604 1 is_stmt 0 view .LVU1281
 3738 0c50 07B5     		push	{r0, r1, r2, lr}
 3739              	.LCFI9:
 3740              		.cfi_def_cfa_offset 16
 3741              		.cfi_offset 14, -4
 604:boards/TMC2130_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3742              		.loc 1 604 1 view .LVU1282
 3743 0c52 0192     		str	r2, [sp, #4]
 605:boards/TMC2130_eval.c **** }
 3744              		.loc 1 605 9 view .LVU1283
 3745 0c54 01AB     		add	r3, sp, #4
 3746 0c56 0246     		mov	r2, r0
 3747              	.LVL466:
 605:boards/TMC2130_eval.c **** }
 3748              		.loc 1 605 9 view .LVU1284
 3749 0c58 0120     		movs	r0, #1
 3750              	.LVL467:
 605:boards/TMC2130_eval.c **** }
 3751              		.loc 1 605 9 view .LVU1285
 3752 0c5a FFF7B4FA 		bl	handleParameter
 3753              	.LVL468:
 606:boards/TMC2130_eval.c **** 
 3754              		.loc 1 606 1 view .LVU1286
 3755 0c5e 03B0     		add	sp, sp, #12
 3756              	.LCFI10:
 3757              		.cfi_def_cfa_offset 4
 3758              		@ sp needed
 3759 0c60 5DF804FB 		ldr	pc, [sp], #4
 3760              		.cfi_endproc
 3761              	.LFE11:
 3763              		.align	1
 3764              		.syntax unified
 3765              		.thumb
 3766              		.thumb_func
 3767              		.fpu softvfp
 3769              	GAP:
 3770              	.LVL469:
 3771              	.LFB12:
 609:boards/TMC2130_eval.c **** 	return handleParameter(READ, motor, type, value);
 3772              		.loc 1 609 1 is_stmt 1 view -0
 3773              		.cfi_startproc
 3774              		@ args = 0, pretend = 0, frame = 0
 3775              		@ frame_needed = 0, uses_anonymous_args = 0
 3776              		@ link register save eliminated.
 610:boards/TMC2130_eval.c **** }
 3777              		.loc 1 610 2 view .LVU1288
 609:boards/TMC2130_eval.c **** 	return handleParameter(READ, motor, type, value);
 3778              		.loc 1 609 1 is_stmt 0 view .LVU1289
 3779 0c64 1346     		mov	r3, r2
 610:boards/TMC2130_eval.c **** }
 3780              		.loc 1 610 9 view .LVU1290
 3781 0c66 0246     		mov	r2, r0
 3782              	.LVL470:
 610:boards/TMC2130_eval.c **** }
 3783              		.loc 1 610 9 view .LVU1291
 3784 0c68 0020     		movs	r0, #0
 3785              	.LVL471:
 610:boards/TMC2130_eval.c **** }
 3786              		.loc 1 610 9 view .LVU1292
 3787 0c6a FFF7ACBA 		b	handleParameter
 3788              	.LVL472:
 610:boards/TMC2130_eval.c **** }
 3789              		.loc 1 610 9 view .LVU1293
 3790              		.cfi_endproc
 3791              	.LFE12:
 3793              		.align	1
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.fpu softvfp
 3799              	restore:
 3800              	.LFB23:
 799:boards/TMC2130_eval.c **** 
 800:boards/TMC2130_eval.c **** static uint8_t reset()
 801:boards/TMC2130_eval.c **** {
 802:boards/TMC2130_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 803:boards/TMC2130_eval.c **** 		return 0;
 804:boards/TMC2130_eval.c **** 
 805:boards/TMC2130_eval.c **** 	tmc2130_reset(&TMC2130);
 806:boards/TMC2130_eval.c **** 
 807:boards/TMC2130_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 808:boards/TMC2130_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 809:boards/TMC2130_eval.c **** 
 810:boards/TMC2130_eval.c **** 	return 1;
 811:boards/TMC2130_eval.c **** }
 812:boards/TMC2130_eval.c **** 
 813:boards/TMC2130_eval.c **** static uint8_t restore()
 814:boards/TMC2130_eval.c **** {
 3801              		.loc 1 814 1 is_stmt 1 view -0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 0
 3804              		@ frame_needed = 0, uses_anonymous_args = 0
 3805              		@ link register save eliminated.
 815:boards/TMC2130_eval.c **** 	return tmc2130_restore(&TMC2130);
 3806              		.loc 1 815 2 view .LVU1295
 3807              		.loc 1 815 9 is_stmt 0 view .LVU1296
 3808 0c6e 0148     		ldr	r0, .L193
 3809 0c70 FFF7FEBF 		b	tmc2130_restore
 3810              	.LVL473:
 3811              	.L194:
 3812              		.align	2
 3813              	.L193:
 3814 0c74 00000000 		.word	TMC2130
 3815              		.cfi_endproc
 3816              	.LFE23:
 3818              		.align	1
 3819              		.syntax unified
 3820              		.thumb
 3821              		.thumb_func
 3822              		.fpu softvfp
 3824              	reset:
 3825              	.LFB22:
 801:boards/TMC2130_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 3826              		.loc 1 801 1 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 802:boards/TMC2130_eval.c **** 		return 0;
 3830              		.loc 1 802 2 view .LVU1298
 801:boards/TMC2130_eval.c **** 	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
 3831              		.loc 1 801 1 is_stmt 0 view .LVU1299
 3832 0c78 08B5     		push	{r3, lr}
 3833              	.LCFI11:
 3834              		.cfi_def_cfa_offset 8
 3835              		.cfi_offset 3, -8
 3836              		.cfi_offset 14, -4
 802:boards/TMC2130_eval.c **** 		return 0;
 3837              		.loc 1 802 5 view .LVU1300
 3838 0c7a 0020     		movs	r0, #0
 3839 0c7c FFF7FEFF 		bl	StepDir_getActualVelocity
 3840              	.LVL474:
 802:boards/TMC2130_eval.c **** 		return 0;
 3841              		.loc 1 802 4 view .LVU1301
 3842 0c80 10B1     		cbz	r0, .L196
 802:boards/TMC2130_eval.c **** 		return 0;
 3843              		.loc 1 802 55 discriminator 1 view .LVU1302
 3844 0c82 094B     		ldr	r3, .L204
 3845 0c84 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 802:boards/TMC2130_eval.c **** 		return 0;
 3846              		.loc 1 802 34 discriminator 1 view .LVU1303
 3847 0c86 70B1     		cbz	r0, .L197
 3848              	.L196:
 805:boards/TMC2130_eval.c **** 
 3849              		.loc 1 805 2 is_stmt 1 view .LVU1304
 3850 0c88 0848     		ldr	r0, .L204+4
 3851 0c8a FFF7FEFF 		bl	tmc2130_reset
 3852              	.LVL475:
 807:boards/TMC2130_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 3853              		.loc 1 807 2 view .LVU1305
 3854 0c8e 4FF40030 		mov	r0, #131072
 3855 0c92 FFF7FEFF 		bl	StepDir_init
 3856              	.LVL476:
 808:boards/TMC2130_eval.c **** 
 3857              		.loc 1 808 2 view .LVU1306
 3858 0c96 0649     		ldr	r1, .L204+8
 3859 0c98 0023     		movs	r3, #0
 3860 0c9a 1846     		mov	r0, r3
 3861 0c9c D1E90012 		ldrd	r1, r2, [r1]
 3862 0ca0 FFF7FEFF 		bl	StepDir_setPins
 3863              	.LVL477:
 810:boards/TMC2130_eval.c **** }
 3864              		.loc 1 810 2 view .LVU1307
 810:boards/TMC2130_eval.c **** }
 3865              		.loc 1 810 9 is_stmt 0 view .LVU1308
 3866 0ca4 0120     		movs	r0, #1
 3867              	.L197:
 811:boards/TMC2130_eval.c **** 
 3868              		.loc 1 811 1 view .LVU1309
 3869 0ca6 08BD     		pop	{r3, pc}
 3870              	.L205:
 3871              		.align	2
 3872              	.L204:
 3873 0ca8 00000000 		.word	VitalSignsMonitor
 3874 0cac 00000000 		.word	TMC2130
 3875 0cb0 00000000 		.word	.LANCHOR0
 3876              		.cfi_endproc
 3877              	.LFE22:
 3879              		.align	1
 3880              		.syntax unified
 3881              		.thumb
 3882              		.thumb_func
 3883              		.fpu softvfp
 3885              	enableDriver:
 3886              	.LVL478:
 3887              	.LFB25:
 816:boards/TMC2130_eval.c **** }
 817:boards/TMC2130_eval.c **** 
 818:boards/TMC2130_eval.c **** static void configCallback(TMC2130TypeDef *tmc2130, ConfigState completedState)
 819:boards/TMC2130_eval.c **** {
 820:boards/TMC2130_eval.c **** 	if(completedState == CONFIG_RESET)
 821:boards/TMC2130_eval.c **** 	{
 822:boards/TMC2130_eval.c **** 		// Configuration reset completed
 823:boards/TMC2130_eval.c **** 		// Change hardware preset registers here
 824:boards/TMC2130_eval.c **** 		tmc2130_writeInt(tmc2130, TMC2130_PWMCONF, 0x000504C8);
 825:boards/TMC2130_eval.c **** 
 826:boards/TMC2130_eval.c **** 		// Fill missing shadow registers (hardware preset registers)
 827:boards/TMC2130_eval.c **** 		tmc2130_fillShadowRegisters(tmc2130);
 828:boards/TMC2130_eval.c **** 	}
 829:boards/TMC2130_eval.c **** }
 830:boards/TMC2130_eval.c **** 
 831:boards/TMC2130_eval.c **** static void enableDriver(DriverState state)
 832:boards/TMC2130_eval.c **** {
 3888              		.loc 1 832 1 is_stmt 1 view -0
 3889              		.cfi_startproc
 3890              		@ args = 0, pretend = 0, frame = 0
 3891              		@ frame_needed = 0, uses_anonymous_args = 0
 3892              		@ link register save eliminated.
 833:boards/TMC2130_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 3893              		.loc 1 833 2 view .LVU1311
 3894              		.loc 1 833 4 is_stmt 0 view .LVU1312
 3895 0cb4 0228     		cmp	r0, #2
 834:boards/TMC2130_eval.c **** 		state = Evalboards.driverEnable;
 3896              		.loc 1 834 3 is_stmt 1 view .LVU1313
 3897              		.loc 1 834 9 is_stmt 0 view .LVU1314
 3898 0cb6 04BF     		itt	eq
 3899 0cb8 0B4B     		ldreq	r3, .L211
 3900 0cba 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 3901              	.LVL479:
 835:boards/TMC2130_eval.c **** 
 836:boards/TMC2130_eval.c **** 	if(state == DRIVER_DISABLE)
 3902              		.loc 1 836 2 is_stmt 1 view .LVU1315
 3903              		.loc 1 836 4 is_stmt 0 view .LVU1316
 3904 0cbe 30B9     		cbnz	r0, .L208
 837:boards/TMC2130_eval.c **** 		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
 3905              		.loc 1 837 3 is_stmt 1 view .LVU1317
 3906              		.loc 1 837 6 is_stmt 0 view .LVU1318
 3907 0cc0 0A4B     		ldr	r3, .L211+4
 3908              		.loc 1 837 10 view .LVU1319
 3909 0cc2 DB68     		ldr	r3, [r3, #12]
 3910              		.loc 1 837 18 view .LVU1320
 3911 0cc4 1B68     		ldr	r3, [r3]
 3912              		.loc 1 837 3 view .LVU1321
 3913 0cc6 5B69     		ldr	r3, [r3, #20]
 3914              	.L210:
 3915              	.LBB348:
 3916              	.LBB349:
 838:boards/TMC2130_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 839:boards/TMC2130_eval.c **** 		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
 3917              		.loc 1 839 3 view .LVU1322
 3918 0cc8 094A     		ldr	r2, .L211+8
 3919 0cca 9068     		ldr	r0, [r2, #8]
 3920 0ccc 1847     		bx	r3	@ indirect register sibling call
 3921              	.LVL480:
 3922              	.L208:
 3923              		.loc 1 839 3 view .LVU1323
 3924              	.LBE349:
 3925              	.LBE348:
 838:boards/TMC2130_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3926              		.loc 1 838 7 is_stmt 1 view .LVU1324
 838:boards/TMC2130_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3927              		.loc 1 838 9 is_stmt 0 view .LVU1325
 3928 0cce 0128     		cmp	r0, #1
 3929 0cd0 09D1     		bne	.L206
 838:boards/TMC2130_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3930              		.loc 1 838 49 discriminator 1 view .LVU1326
 3931 0cd2 054B     		ldr	r3, .L211
 838:boards/TMC2130_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 3932              		.loc 1 838 35 discriminator 1 view .LVU1327
 3933 0cd4 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 3934 0cd8 012B     		cmp	r3, #1
 3935 0cda 04D1     		bne	.L206
 3936              	.LBB351:
 3937              	.LBI348:
 831:boards/TMC2130_eval.c **** {
 3938              		.loc 1 831 13 is_stmt 1 view .LVU1328
 3939              	.LVL481:
 3940              	.LBB350:
 3941              		.loc 1 839 3 view .LVU1329
 3942              		.loc 1 839 6 is_stmt 0 view .LVU1330
 3943 0cdc 034B     		ldr	r3, .L211+4
 3944              		.loc 1 839 10 view .LVU1331
 3945 0cde DB68     		ldr	r3, [r3, #12]
 3946              		.loc 1 839 18 view .LVU1332
 3947 0ce0 1B68     		ldr	r3, [r3]
 3948              		.loc 1 839 3 view .LVU1333
 3949 0ce2 9B69     		ldr	r3, [r3, #24]
 3950 0ce4 F0E7     		b	.L210
 3951              	.LVL482:
 3952              	.L206:
 3953              		.loc 1 839 3 view .LVU1334
 3954              	.LBE350:
 3955              	.LBE351:
 840:boards/TMC2130_eval.c **** }
 3956              		.loc 1 840 1 view .LVU1335
 3957 0ce6 7047     		bx	lr
 3958              	.L212:
 3959              		.align	2
 3960              	.L211:
 3961 0ce8 00000000 		.word	Evalboards
 3962 0cec 00000000 		.word	HAL
 3963 0cf0 00000000 		.word	.LANCHOR0
 3964              		.cfi_endproc
 3965              	.LFE25:
 3967              		.align	1
 3968              		.syntax unified
 3969              		.thumb
 3970              		.thumb_func
 3971              		.fpu softvfp
 3973              	getMax:
 3974              	.LVL483:
 3975              	.LFB15:
 648:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3976              		.loc 1 648 1 is_stmt 1 view -0
 3977              		.cfi_startproc
 3978              		@ args = 0, pretend = 0, frame = 0
 3979              		@ frame_needed = 0, uses_anonymous_args = 0
 649:boards/TMC2130_eval.c **** }
 3980              		.loc 1 649 2 view .LVU1337
 648:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3981              		.loc 1 648 1 is_stmt 0 view .LVU1338
 3982 0cf4 0346     		mov	r3, r0
 3983              	.LBB356:
 3984              	.LBB357:
 617:boards/TMC2130_eval.c **** 	case 2:
 3985              		.loc 1 617 2 view .LVU1339
 3986 0cf6 052B     		cmp	r3, #5
 3987              	.LBE357:
 3988              	.LBE356:
 648:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3989              		.loc 1 648 1 view .LVU1340
 3990 0cf8 10B5     		push	{r4, lr}
 3991              	.LCFI12:
 3992              		.cfi_def_cfa_offset 8
 3993              		.cfi_offset 4, -8
 3994              		.cfi_offset 14, -4
 648:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3995              		.loc 1 648 1 view .LVU1341
 3996 0cfa 0846     		mov	r0, r1
 3997              	.LVL484:
 648:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MAX, type, motor, value);
 3998              		.loc 1 648 1 view .LVU1342
 3999 0cfc 1446     		mov	r4, r2
 4000              	.LVL485:
 4001              	.LBB363:
 4002              	.LBI356:
 613:boards/TMC2130_eval.c **** {
 4003              		.loc 1 613 17 is_stmt 1 view .LVU1343
 4004              	.LBB360:
 615:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 4005              		.loc 1 615 2 view .LVU1344
 616:boards/TMC2130_eval.c **** 	switch(type) {
 4006              		.loc 1 616 2 view .LVU1345
 617:boards/TMC2130_eval.c **** 	case 2:
 4007              		.loc 1 617 2 view .LVU1346
 4008 0cfe 0CD0     		beq	.L214
 4009 0d00 07D8     		bhi	.L215
 4010 0d02 023B     		subs	r3, r3, #2
 4011              	.LVL486:
 617:boards/TMC2130_eval.c **** 	case 2:
 4012              		.loc 1 617 2 is_stmt 0 view .LVU1347
 4013 0d04 022B     		cmp	r3, #2
 4014 0d06 06D8     		bhi	.L219
 4015              	.LVL487:
 4016              	.L217:
 622:boards/TMC2130_eval.c **** 			*value = 0; // TODO: Determine limits here
 4017              		.loc 1 622 3 is_stmt 1 view .LVU1348
 4018              	.LBB358:
 4019              	.LBI358:
 613:boards/TMC2130_eval.c **** {
 4020              		.loc 1 613 17 view .LVU1349
 4021              	.LBB359:
 624:boards/TMC2130_eval.c **** 			*value = StepDir_getFrequency(motor);
 4022              		.loc 1 624 10 view .LVU1350
 625:boards/TMC2130_eval.c **** 		}
 4023              		.loc 1 625 4 view .LVU1351
 625:boards/TMC2130_eval.c **** 		}
 4024              		.loc 1 625 13 is_stmt 0 view .LVU1352
 4025 0d08 FFF7FEFF 		bl	StepDir_getFrequency
 4026              	.LVL488:
 4027              	.L220:
 625:boards/TMC2130_eval.c **** 		}
 4028              		.loc 1 625 13 view .LVU1353
 4029              	.LBE359:
 4030              	.LBE358:
 632:boards/TMC2130_eval.c **** 		}
 4031              		.loc 1 632 11 view .LVU1354
 4032 0d0c 2060     		str	r0, [r4]
 616:boards/TMC2130_eval.c **** 	switch(type) {
 4033              		.loc 1 616 11 view .LVU1355
 4034 0d0e 0020     		movs	r0, #0
 4035              	.LVL489:
 4036              	.L213:
 616:boards/TMC2130_eval.c **** 	switch(type) {
 4037              		.loc 1 616 11 view .LVU1356
 4038              	.LBE360:
 4039              	.LBE363:
 650:boards/TMC2130_eval.c **** 
 4040              		.loc 1 650 1 view .LVU1357
 4041 0d10 10BD     		pop	{r4, pc}
 4042              	.LVL490:
 4043              	.L215:
 4044              	.LBB364:
 4045              	.LBB361:
 617:boards/TMC2130_eval.c **** 	case 2:
 4046              		.loc 1 617 2 view .LVU1358
 4047 0d12 182B     		cmp	r3, #24
 4048 0d14 F8D0     		beq	.L217
 4049              	.LVL491:
 4050              	.L219:
 617:boards/TMC2130_eval.c **** 	case 2:
 4051              		.loc 1 617 2 view .LVU1359
 4052 0d16 0420     		movs	r0, #4
 4053              	.LVL492:
 639:boards/TMC2130_eval.c **** }
 4054              		.loc 1 639 2 is_stmt 1 view .LVU1360
 639:boards/TMC2130_eval.c **** }
 4055              		.loc 1 639 2 is_stmt 0 view .LVU1361
 4056              	.LBE361:
 4057              	.LBE364:
 649:boards/TMC2130_eval.c **** }
 4058              		.loc 1 649 9 view .LVU1362
 4059 0d18 FAE7     		b	.L213
 4060              	.LVL493:
 4061              	.L214:
 4062              	.LBB365:
 4063              	.LBB362:
 629:boards/TMC2130_eval.c **** 			*value = 0; // TODO: Determine limits here
 4064              		.loc 1 629 3 is_stmt 1 view .LVU1363
 631:boards/TMC2130_eval.c **** 			*value = StepDir_getMaxAcceleration(motor);
 4065              		.loc 1 631 10 view .LVU1364
 632:boards/TMC2130_eval.c **** 		}
 4066              		.loc 1 632 4 view .LVU1365
 632:boards/TMC2130_eval.c **** 		}
 4067              		.loc 1 632 13 is_stmt 0 view .LVU1366
 4068 0d1a FFF7FEFF 		bl	StepDir_getMaxAcceleration
 4069              	.LVL494:
 632:boards/TMC2130_eval.c **** 		}
 4070              		.loc 1 632 13 view .LVU1367
 4071 0d1e F5E7     		b	.L220
 4072              	.LBE362:
 4073              	.LBE365:
 4074              		.cfi_endproc
 4075              	.LFE15:
 4077              		.align	1
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu softvfp
 4083              	getMeasuredSpeed:
 4084              	.LVL495:
 4085              	.LFB20:
 764:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4086              		.loc 1 764 1 is_stmt 1 view -0
 4087              		.cfi_startproc
 4088              		@ args = 0, pretend = 0, frame = 0
 4089              		@ frame_needed = 0, uses_anonymous_args = 0
 765:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 4090              		.loc 1 765 2 view .LVU1369
 764:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4091              		.loc 1 764 1 is_stmt 0 view .LVU1370
 4092 0d20 38B5     		push	{r3, r4, r5, lr}
 4093              	.LCFI13:
 4094              		.cfi_def_cfa_offset 16
 4095              		.cfi_offset 3, -16
 4096              		.cfi_offset 4, -12
 4097              		.cfi_offset 5, -8
 4098              		.cfi_offset 14, -4
 764:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4099              		.loc 1 764 1 view .LVU1371
 4100 0d22 0D46     		mov	r5, r1
 765:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 4101              		.loc 1 765 4 view .LVU1372
 4102 0d24 0446     		mov	r4, r0
 4103 0d26 20B9     		cbnz	r0, .L223
 4104              	.LVL496:
 4105              	.LBB368:
 4106              	.LBI368:
 763:boards/TMC2130_eval.c **** {
 4107              		.loc 1 763 17 is_stmt 1 view .LVU1373
 4108              	.LBB369:
 768:boards/TMC2130_eval.c **** 	{
 4109              		.loc 1 768 2 view .LVU1374
 772:boards/TMC2130_eval.c **** 		break;
 4110              		.loc 1 772 3 view .LVU1375
 772:boards/TMC2130_eval.c **** 		break;
 4111              		.loc 1 772 12 is_stmt 0 view .LVU1376
 4112 0d28 FFF7FEFF 		bl	StepDir_getActualVelocity
 4113              	.LVL497:
 772:boards/TMC2130_eval.c **** 		break;
 4114              		.loc 1 772 10 view .LVU1377
 4115 0d2c 2860     		str	r0, [r5]
 773:boards/TMC2130_eval.c **** 	default:
 4116              		.loc 1 773 3 is_stmt 1 view .LVU1378
 776:boards/TMC2130_eval.c **** 	}
 4117              		.loc 1 776 3 view .LVU1379
 778:boards/TMC2130_eval.c **** }
 4118              		.loc 1 778 2 view .LVU1380
 4119              	.LVL498:
 772:boards/TMC2130_eval.c **** 		break;
 4120              		.loc 1 772 10 is_stmt 0 view .LVU1381
 4121 0d2e 2046     		mov	r0, r4
 4122              	.L221:
 4123              	.LBE369:
 4124              	.LBE368:
 779:boards/TMC2130_eval.c **** 
 4125              		.loc 1 779 1 view .LVU1382
 4126 0d30 38BD     		pop	{r3, r4, r5, pc}
 4127              	.LVL499:
 4128              	.L223:
 766:boards/TMC2130_eval.c **** 
 4129              		.loc 1 766 10 view .LVU1383
 4130 0d32 0820     		movs	r0, #8
 4131              	.LVL500:
 766:boards/TMC2130_eval.c **** 
 4132              		.loc 1 766 10 view .LVU1384
 4133 0d34 FCE7     		b	.L221
 4134              		.cfi_endproc
 4135              	.LFE20:
 4137              		.align	1
 4138              		.syntax unified
 4139              		.thumb
 4140              		.thumb_func
 4141              		.fpu softvfp
 4143              	configCallback:
 4144              	.LVL501:
 4145              	.LFB24:
 819:boards/TMC2130_eval.c **** 	if(completedState == CONFIG_RESET)
 4146              		.loc 1 819 1 is_stmt 1 view -0
 4147              		.cfi_startproc
 4148              		@ args = 0, pretend = 0, frame = 0
 4149              		@ frame_needed = 0, uses_anonymous_args = 0
 820:boards/TMC2130_eval.c **** 	{
 4150              		.loc 1 820 2 view .LVU1386
 820:boards/TMC2130_eval.c **** 	{
 4151              		.loc 1 820 4 is_stmt 0 view .LVU1387
 4152 0d36 0129     		cmp	r1, #1
 819:boards/TMC2130_eval.c **** 	if(completedState == CONFIG_RESET)
 4153              		.loc 1 819 1 view .LVU1388
 4154 0d38 10B5     		push	{r4, lr}
 4155              	.LCFI14:
 4156              		.cfi_def_cfa_offset 8
 4157              		.cfi_offset 4, -8
 4158              		.cfi_offset 14, -4
 819:boards/TMC2130_eval.c **** 	if(completedState == CONFIG_RESET)
 4159              		.loc 1 819 1 view .LVU1389
 4160 0d3a 0446     		mov	r4, r0
 820:boards/TMC2130_eval.c **** 	{
 4161              		.loc 1 820 4 view .LVU1390
 4162 0d3c 08D1     		bne	.L224
 4163              	.LVL502:
 4164              	.LBB372:
 4165              	.LBI372:
 818:boards/TMC2130_eval.c **** {
 4166              		.loc 1 818 13 is_stmt 1 view .LVU1391
 4167              	.LBB373:
 824:boards/TMC2130_eval.c **** 
 4168              		.loc 1 824 3 view .LVU1392
 4169 0d3e 054A     		ldr	r2, .L226
 4170 0d40 7021     		movs	r1, #112
 4171              	.LVL503:
 824:boards/TMC2130_eval.c **** 
 4172              		.loc 1 824 3 is_stmt 0 view .LVU1393
 4173 0d42 FFF7FEFF 		bl	tmc2130_writeInt
 4174              	.LVL504:
 827:boards/TMC2130_eval.c **** 	}
 4175              		.loc 1 827 3 is_stmt 1 view .LVU1394
 4176 0d46 2046     		mov	r0, r4
 4177              	.LBE373:
 4178              	.LBE372:
 829:boards/TMC2130_eval.c **** 
 4179              		.loc 1 829 1 is_stmt 0 view .LVU1395
 4180 0d48 BDE81040 		pop	{r4, lr}
 4181              	.LCFI15:
 4182              		.cfi_remember_state
 4183              		.cfi_restore 14
 4184              		.cfi_restore 4
 4185              		.cfi_def_cfa_offset 0
 4186              	.LVL505:
 4187              	.LBB375:
 4188              	.LBB374:
 827:boards/TMC2130_eval.c **** 	}
 4189              		.loc 1 827 3 view .LVU1396
 4190 0d4c FFF7FEBF 		b	tmc2130_fillShadowRegisters
 4191              	.LVL506:
 4192              	.L224:
 4193              	.LCFI16:
 4194              		.cfi_restore_state
 827:boards/TMC2130_eval.c **** 	}
 4195              		.loc 1 827 3 view .LVU1397
 4196              	.LBE374:
 4197              	.LBE375:
 829:boards/TMC2130_eval.c **** 
 4198              		.loc 1 829 1 view .LVU1398
 4199 0d50 10BD     		pop	{r4, pc}
 4200              	.L227:
 4201 0d52 00BF     		.align	2
 4202              	.L226:
 4203 0d54 C8040500 		.word	328904
 4204              		.cfi_endproc
 4205              	.LFE24:
 4207              		.align	1
 4208              		.syntax unified
 4209              		.thumb
 4210              		.thumb_func
 4211              		.fpu softvfp
 4213              	moveBy:
 4214              	.LVL507:
 4215              	.LFB9:
 130:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4216              		.loc 1 130 1 is_stmt 1 view -0
 4217              		.cfi_startproc
 4218              		@ args = 0, pretend = 0, frame = 0
 4219              		@ frame_needed = 0, uses_anonymous_args = 0
 131:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 4220              		.loc 1 131 2 view .LVU1400
 130:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4221              		.loc 1 130 1 is_stmt 0 view .LVU1401
 4222 0d58 38B5     		push	{r3, r4, r5, lr}
 4223              	.LCFI17:
 4224              		.cfi_def_cfa_offset 16
 4225              		.cfi_offset 3, -16
 4226              		.cfi_offset 4, -12
 4227              		.cfi_offset 5, -8
 4228              		.cfi_offset 14, -4
 130:boards/TMC2130_eval.c **** 	if(motor >= TMC2130_MOTORS)
 4229              		.loc 1 130 1 view .LVU1402
 4230 0d5a 0D46     		mov	r5, r1
 131:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 4231              		.loc 1 131 4 view .LVU1403
 4232 0d5c 0446     		mov	r4, r0
 4233 0d5e 48B9     		cbnz	r0, .L230
 4234              	.LVL508:
 4235              	.LBB380:
 4236              	.LBI380:
 129:boards/TMC2130_eval.c **** {
 4237              		.loc 1 129 17 is_stmt 1 view .LVU1404
 4238              	.LBB381:
 135:boards/TMC2130_eval.c **** 
 4239              		.loc 1 135 2 view .LVU1405
 135:boards/TMC2130_eval.c **** 
 4240              		.loc 1 135 12 is_stmt 0 view .LVU1406
 4241 0d60 FFF7FEFF 		bl	StepDir_getActualPosition
 4242              	.LVL509:
 135:boards/TMC2130_eval.c **** 
 4243              		.loc 1 135 9 view .LVU1407
 4244 0d64 2968     		ldr	r1, [r5]
 4245 0d66 0144     		add	r1, r1, r0
 4246 0d68 2960     		str	r1, [r5]
 137:boards/TMC2130_eval.c **** }
 4247              		.loc 1 137 2 is_stmt 1 view .LVU1408
 4248              	.LVL510:
 4249              	.LBB382:
 4250              	.LBI382:
 119:boards/TMC2130_eval.c **** {
 4251              		.loc 1 119 17 view .LVU1409
 4252              	.LBB383:
 121:boards/TMC2130_eval.c **** 		return TMC_ERROR_MOTOR;
 4253              		.loc 1 121 2 view .LVU1410
 124:boards/TMC2130_eval.c **** 
 4254              		.loc 1 124 2 view .LVU1411
 4255 0d6a 2046     		mov	r0, r4
 4256 0d6c FFF7FEFF 		bl	StepDir_moveTo
 4257              	.LVL511:
 126:boards/TMC2130_eval.c **** }
 4258              		.loc 1 126 2 view .LVU1412
 124:boards/TMC2130_eval.c **** 
 4259              		.loc 1 124 2 is_stmt 0 view .LVU1413
 4260 0d70 2046     		mov	r0, r4
 4261              	.L228:
 4262              	.LBE383:
 4263              	.LBE382:
 4264              	.LBE381:
 4265              	.LBE380:
 138:boards/TMC2130_eval.c **** 
 4266              		.loc 1 138 1 view .LVU1414
 4267 0d72 38BD     		pop	{r3, r4, r5, pc}
 4268              	.LVL512:
 4269              	.L230:
 132:boards/TMC2130_eval.c **** 
 4270              		.loc 1 132 10 view .LVU1415
 4271 0d74 0820     		movs	r0, #8
 4272              	.LVL513:
 132:boards/TMC2130_eval.c **** 
 4273              		.loc 1 132 10 view .LVU1416
 4274 0d76 FCE7     		b	.L228
 4275              		.cfi_endproc
 4276              	.LFE9:
 4278              		.align	1
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
 4282              		.fpu softvfp
 4284              	getMin:
 4285              	.LVL514:
 4286              	.LFB14:
 643:boards/TMC2130_eval.c **** 	return getLimit(LIMIT_MIN, type, motor, value);
 4287              		.loc 1 643 1 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 0
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 4291              		@ link register save eliminated.
 644:boards/TMC2130_eval.c **** }
 4292              		.loc 1 644 2 view .LVU1418
 4293              	.LBB386:
 4294              	.LBI386:
 613:boards/TMC2130_eval.c **** {
 4295              		.loc 1 613 17 view .LVU1419
 4296              	.LBB387:
 615:boards/TMC2130_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 4297              		.loc 1 615 2 view .LVU1420
 616:boards/TMC2130_eval.c **** 	switch(type) {
 4298              		.loc 1 616 2 view .LVU1421
 617:boards/TMC2130_eval.c **** 	case 2:
 4299              		.loc 1 617 2 view .LVU1422
 4300 0d78 0528     		cmp	r0, #5
 4301 0d7a 03D8     		bhi	.L232
 4302 0d7c 0128     		cmp	r0, #1
 4303 0d7e 03D8     		bhi	.L233
 4304              	.L235:
 4305 0d80 0420     		movs	r0, #4
 4306              	.LVL515:
 639:boards/TMC2130_eval.c **** }
 4307              		.loc 1 639 2 view .LVU1423
 639:boards/TMC2130_eval.c **** }
 4308              		.loc 1 639 2 is_stmt 0 view .LVU1424
 4309              	.LBE387:
 4310              	.LBE386:
 645:boards/TMC2130_eval.c **** 
 4311              		.loc 1 645 1 view .LVU1425
 4312 0d82 7047     		bx	lr
 4313              	.LVL516:
 4314              	.L232:
 4315              	.LBB389:
 4316              	.LBB388:
 617:boards/TMC2130_eval.c **** 	case 2:
 4317              		.loc 1 617 2 view .LVU1426
 4318 0d84 1828     		cmp	r0, #24
 4319 0d86 FBD1     		bne	.L235
 4320              	.L233:
 622:boards/TMC2130_eval.c **** 			*value = 0; // TODO: Determine limits here
 4321              		.loc 1 622 3 is_stmt 1 view .LVU1427
 623:boards/TMC2130_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4322              		.loc 1 623 4 view .LVU1428
 623:boards/TMC2130_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4323              		.loc 1 623 11 is_stmt 0 view .LVU1429
 4324 0d88 0020     		movs	r0, #0
 4325              	.LVL517:
 623:boards/TMC2130_eval.c **** 		} else if(limit == LIMIT_MAX) {
 4326              		.loc 1 623 11 view .LVU1430
 4327 0d8a 1060     		str	r0, [r2]
 4328 0d8c 7047     		bx	lr
 4329              	.LBE388:
 4330              	.LBE389:
 4331              		.cfi_endproc
 4332              	.LFE14:
 4334              		.align	1
 4335              		.global	tmc2130_readWriteArray
 4336              		.syntax unified
 4337              		.thumb
 4338              		.thumb_func
 4339              		.fpu softvfp
 4341              	tmc2130_readWriteArray:
 4342              	.LVL518:
 4343              	.LFB3:
  80:boards/TMC2130_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4344              		.loc 1 80 1 is_stmt 1 view -0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 0
 4347              		@ frame_needed = 0, uses_anonymous_args = 0
 4348              		@ link register save eliminated.
  81:boards/TMC2130_eval.c **** 	{
 4349              		.loc 1 81 2 view .LVU1432
  81:boards/TMC2130_eval.c **** 	{
 4350              		.loc 1 81 19 is_stmt 0 view .LVU1433
 4351 0d8e 054B     		ldr	r3, .L239
 4352 0d90 DB6E     		ldr	r3, [r3, #108]
  80:boards/TMC2130_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4353              		.loc 1 80 1 view .LVU1434
 4354 0d92 0846     		mov	r0, r1
 4355              	.LVL519:
  80:boards/TMC2130_eval.c **** 	if(Evalboards.ch1.fullCover != NULL)
 4356              		.loc 1 80 1 view .LVU1435
 4357 0d94 1146     		mov	r1, r2
 4358              	.LVL520:
  81:boards/TMC2130_eval.c **** 	{
 4359              		.loc 1 81 4 view .LVU1436
 4360 0d96 03B1     		cbz	r3, .L237
 4361              	.L238:
  89:boards/TMC2130_eval.c **** 	}
 4362              		.loc 1 89 3 view .LVU1437
 4363 0d98 1847     		bx	r3	@ indirect register sibling call
 4364              	.LVL521:
 4365              	.L237:
  89:boards/TMC2130_eval.c **** 	}
 4366              		.loc 1 89 3 is_stmt 1 view .LVU1438
 4367              	.LBB390:
 4368              	.LBI390:
  71:boards/TMC2130_eval.c **** {
 4369              		.loc 1 71 34 view .LVU1439
 4370              	.LBB391:
  73:boards/TMC2130_eval.c **** 
 4371              		.loc 1 73 2 view .LVU1440
  75:boards/TMC2130_eval.c **** }
 4372              		.loc 1 75 2 view .LVU1441
 4373              	.LBE391:
 4374              	.LBE390:
  89:boards/TMC2130_eval.c **** 	}
 4375              		.loc 1 89 24 is_stmt 0 view .LVU1442
 4376 0d9a 034B     		ldr	r3, .L239+4
 4377 0d9c 1B68     		ldr	r3, [r3]
  89:boards/TMC2130_eval.c **** 	}
 4378              		.loc 1 89 3 view .LVU1443
 4379 0d9e DB68     		ldr	r3, [r3, #12]
 4380 0da0 FAE7     		b	.L238
 4381              	.L240:
 4382 0da2 00BF     		.align	2
 4383              	.L239:
 4384 0da4 00000000 		.word	Evalboards
 4385 0da8 00000000 		.word	TMC2130_SPIChannel
 4386              		.cfi_endproc
 4387              	.LFE3:
 4389              		.align	1
 4390              		.global	TMC2130_init
 4391              		.syntax unified
 4392              		.thumb
 4393              		.thumb_func
 4394              		.fpu softvfp
 4396              	TMC2130_init:
 4397              	.LFB26:
 841:boards/TMC2130_eval.c **** 
 842:boards/TMC2130_eval.c **** void TMC2130_init(void)
 843:boards/TMC2130_eval.c **** {
 4398              		.loc 1 843 1 is_stmt 1 view -0
 4399              		.cfi_startproc
 4400              		@ args = 0, pretend = 0, frame = 0
 4401              		@ frame_needed = 0, uses_anonymous_args = 0
 844:boards/TMC2130_eval.c **** 	tmc2130_init(&TMC2130, 1, Evalboards.ch2.config, &tmc2130_defaultRegisterResetState[0]);
 4402              		.loc 1 844 2 view .LVU1445
 843:boards/TMC2130_eval.c **** 	tmc2130_init(&TMC2130, 1, Evalboards.ch2.config, &tmc2130_defaultRegisterResetState[0]);
 4403              		.loc 1 843 1 is_stmt 0 view .LVU1446
 4404 0dac 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4405              	.LCFI18:
 4406              		.cfi_def_cfa_offset 24
 4407              		.cfi_offset 4, -24
 4408              		.cfi_offset 5, -20
 4409              		.cfi_offset 6, -16
 4410              		.cfi_offset 7, -12
 4411              		.cfi_offset 8, -8
 4412              		.cfi_offset 14, -4
 4413              		.loc 1 844 2 view .LVU1447
 4414 0db0 6B4D     		ldr	r5, .L242
 4415 0db2 6C4F     		ldr	r7, .L242+4
 4416 0db4 D5F89020 		ldr	r2, [r5, #144]
 4417 0db8 6B4B     		ldr	r3, .L242+8
 845:boards/TMC2130_eval.c **** 	tmc2130_setCallback(&TMC2130, configCallback);
 846:boards/TMC2130_eval.c **** 
 847:boards/TMC2130_eval.c **** 	// Initialize the hardware pins
 848:boards/TMC2130_eval.c **** 	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
 4418              		.loc 1 848 29 view .LVU1448
 4419 0dba DFF80C82 		ldr	r8, .L242+104
 4420              		.loc 1 848 23 view .LVU1449
 4421 0dbe 6B4C     		ldr	r4, .L242+12
 844:boards/TMC2130_eval.c **** 	tmc2130_setCallback(&TMC2130, configCallback);
 4422              		.loc 1 844 2 view .LVU1450
 4423 0dc0 3846     		mov	r0, r7
 4424 0dc2 0121     		movs	r1, #1
 4425 0dc4 FFF7FEFF 		bl	tmc2130_init
 4426              	.LVL522:
 845:boards/TMC2130_eval.c **** 	tmc2130_setCallback(&TMC2130, configCallback);
 4427              		.loc 1 845 2 is_stmt 1 view .LVU1451
 4428 0dc8 6949     		ldr	r1, .L242+16
 4429 0dca 3846     		mov	r0, r7
 4430 0dcc FFF7FEFF 		bl	tmc2130_setCallback
 4431              	.LVL523:
 4432              		.loc 1 848 2 view .LVU1452
 4433              		.loc 1 848 29 is_stmt 0 view .LVU1453
 4434 0dd0 D8F80C60 		ldr	r6, [r8, #12]
 4435              		.loc 1 848 33 view .LVU1454
 4436 0dd4 7368     		ldr	r3, [r6, #4]
 4437              		.loc 1 848 25 view .LVU1455
 4438 0dd6 03F16802 		add	r2, r3, #104
 4439              		.loc 1 848 23 view .LVU1456
 4440 0dda A260     		str	r2, [r4, #8]
 849:boards/TMC2130_eval.c **** 	Pins.REFL_STEP       = &HAL.IOs->pins->DIO6;
 4441              		.loc 1 849 2 is_stmt 1 view .LVU1457
 4442              		.loc 1 849 25 is_stmt 0 view .LVU1458
 4443 0ddc 03F59472 		add	r2, r3, #296
 4444              		.loc 1 849 23 view .LVU1459
 4445 0de0 2260     		str	r2, [r4]
 850:boards/TMC2130_eval.c **** 	Pins.REFR_DIR        = &HAL.IOs->pins->DIO7;
 4446              		.loc 1 850 2 is_stmt 1 view .LVU1460
 4447              		.loc 1 850 25 is_stmt 0 view .LVU1461
 4448 0de2 03F5A472 		add	r2, r3, #328
 4449              		.loc 1 850 23 view .LVU1462
 4450 0de6 6260     		str	r2, [r4, #4]
 851:boards/TMC2130_eval.c **** 	Pins.AIN_REF_SW      = &HAL.IOs->pins->DIO10;
 4451              		.loc 1 851 2 is_stmt 1 view .LVU1463
 4452              		.loc 1 851 25 is_stmt 0 view .LVU1464
 4453 0de8 03F5D472 		add	r2, r3, #424
 4454              		.loc 1 851 23 view .LVU1465
 4455 0dec 2262     		str	r2, [r4, #32]
 852:boards/TMC2130_eval.c **** 	Pins.AIN_REF_PWM     = &HAL.IOs->pins->DIO11;
 4456              		.loc 1 852 2 is_stmt 1 view .LVU1466
 4457              		.loc 1 852 25 is_stmt 0 view .LVU1467
 4458 0dee 03F5E472 		add	r2, r3, #456
 4459              		.loc 1 852 23 view .LVU1468
 4460 0df2 6262     		str	r2, [r4, #36]
 853:boards/TMC2130_eval.c **** 	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO12;
 4461              		.loc 1 853 2 is_stmt 1 view .LVU1469
 4462              		.loc 1 853 25 is_stmt 0 view .LVU1470
 4463 0df4 03F55272 		add	r2, r3, #840
 4464              		.loc 1 853 23 view .LVU1471
 4465 0df8 E260     		str	r2, [r4, #12]
 854:boards/TMC2130_eval.c **** 	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO13;
 4466              		.loc 1 854 2 is_stmt 1 view .LVU1472
 4467              		.loc 1 854 25 is_stmt 0 view .LVU1473
 4468 0dfa 03F55A72 		add	r2, r3, #872
 855:boards/TMC2130_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
 856:boards/TMC2130_eval.c **** 	Pins.DIAG0           = &HAL.IOs->pins->DIO15;
 4469              		.loc 1 856 25 view .LVU1474
 4470 0dfe 03F56A70 		add	r0, r3, #936
 854:boards/TMC2130_eval.c **** 	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO13;
 4471              		.loc 1 854 23 view .LVU1475
 4472 0e02 2261     		str	r2, [r4, #16]
 855:boards/TMC2130_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
 4473              		.loc 1 855 2 is_stmt 1 view .LVU1476
 855:boards/TMC2130_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
 4474              		.loc 1 855 25 is_stmt 0 view .LVU1477
 4475 0e04 03F56272 		add	r2, r3, #904
 857:boards/TMC2130_eval.c **** 	Pins.DIAG1           = &HAL.IOs->pins->DIO16;
 4476              		.loc 1 857 25 view .LVU1478
 4477 0e08 03F57273 		add	r3, r3, #968
 4478              		.loc 1 857 23 view .LVU1479
 4479 0e0c E361     		str	r3, [r4, #28]
 858:boards/TMC2130_eval.c **** 
 859:boards/TMC2130_eval.c **** 	HAL.IOs->config->toInput(Pins.DIAG0);
 4480              		.loc 1 859 17 view .LVU1480
 4481 0e0e 3368     		ldr	r3, [r6]
 855:boards/TMC2130_eval.c **** 	Pins.DIAG0           = &HAL.IOs->pins->DIO15;
 4482              		.loc 1 855 23 view .LVU1481
 4483 0e10 6261     		str	r2, [r4, #20]
 856:boards/TMC2130_eval.c **** 	Pins.DIAG1           = &HAL.IOs->pins->DIO16;
 4484              		.loc 1 856 2 is_stmt 1 view .LVU1482
 4485              		.loc 1 859 2 is_stmt 0 view .LVU1483
 4486 0e12 1B69     		ldr	r3, [r3, #16]
 856:boards/TMC2130_eval.c **** 	Pins.DIAG1           = &HAL.IOs->pins->DIO16;
 4487              		.loc 1 856 23 view .LVU1484
 4488 0e14 A061     		str	r0, [r4, #24]
 857:boards/TMC2130_eval.c **** 
 4489              		.loc 1 857 2 is_stmt 1 view .LVU1485
 4490              		.loc 1 859 2 view .LVU1486
 4491 0e16 9847     		blx	r3
 4492              	.LVL524:
 860:boards/TMC2130_eval.c **** 	HAL.IOs->config->toInput(Pins.DIAG1);
 4493              		.loc 1 860 2 view .LVU1487
 4494              		.loc 1 860 17 is_stmt 0 view .LVU1488
 4495 0e18 3368     		ldr	r3, [r6]
 4496              		.loc 1 860 2 view .LVU1489
 4497 0e1a E069     		ldr	r0, [r4, #28]
 4498 0e1c 1B69     		ldr	r3, [r3, #16]
 4499 0e1e 9847     		blx	r3
 4500              	.LVL525:
 861:boards/TMC2130_eval.c **** 	HAL.IOs->config->toInput(Pins.ENCN_DCO);
 4501              		.loc 1 861 2 is_stmt 1 view .LVU1490
 4502              		.loc 1 861 17 is_stmt 0 view .LVU1491
 4503 0e20 3368     		ldr	r3, [r6]
 4504              		.loc 1 861 2 view .LVU1492
 4505 0e22 6069     		ldr	r0, [r4, #20]
 4506 0e24 1B69     		ldr	r3, [r3, #16]
 4507 0e26 9847     		blx	r3
 4508              	.LVL526:
 862:boards/TMC2130_eval.c **** 
 863:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFL_STEP);
 4509              		.loc 1 863 2 is_stmt 1 view .LVU1493
 4510              		.loc 1 863 17 is_stmt 0 view .LVU1494
 4511 0e28 3368     		ldr	r3, [r6]
 4512              		.loc 1 863 2 view .LVU1495
 4513 0e2a 2068     		ldr	r0, [r4]
 4514 0e2c DB68     		ldr	r3, [r3, #12]
 4515 0e2e 9847     		blx	r3
 4516              	.LVL527:
 864:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.REFR_DIR);
 4517              		.loc 1 864 2 is_stmt 1 view .LVU1496
 4518              		.loc 1 864 17 is_stmt 0 view .LVU1497
 4519 0e30 3368     		ldr	r3, [r6]
 4520              		.loc 1 864 2 view .LVU1498
 4521 0e32 6068     		ldr	r0, [r4, #4]
 4522 0e34 DB68     		ldr	r3, [r3, #12]
 4523 0e36 9847     		blx	r3
 4524              	.LVL528:
 865:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
 4525              		.loc 1 865 2 is_stmt 1 view .LVU1499
 4526              		.loc 1 865 17 is_stmt 0 view .LVU1500
 4527 0e38 3368     		ldr	r3, [r6]
 4528              		.loc 1 865 2 view .LVU1501
 4529 0e3a A068     		ldr	r0, [r4, #8]
 4530 0e3c DB68     		ldr	r3, [r3, #12]
 4531 0e3e 9847     		blx	r3
 4532              	.LVL529:
 866:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 4533              		.loc 1 866 2 is_stmt 1 view .LVU1502
 4534              		.loc 1 866 17 is_stmt 0 view .LVU1503
 4535 0e40 3368     		ldr	r3, [r6]
 4536              		.loc 1 866 2 view .LVU1504
 4537 0e42 2069     		ldr	r0, [r4, #16]
 4538 0e44 DB68     		ldr	r3, [r3, #12]
 4539 0e46 9847     		blx	r3
 4540              	.LVL530:
 867:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.ENCA_DCIN_CFG5);
 4541              		.loc 1 867 2 is_stmt 1 view .LVU1505
 4542              		.loc 1 867 17 is_stmt 0 view .LVU1506
 4543 0e48 3368     		ldr	r3, [r6]
 4544              		.loc 1 867 2 view .LVU1507
 4545 0e4a E068     		ldr	r0, [r4, #12]
 4546 0e4c DB68     		ldr	r3, [r3, #12]
 4547 0e4e 9847     		blx	r3
 4548              	.LVL531:
 868:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
 4549              		.loc 1 868 2 is_stmt 1 view .LVU1508
 4550              		.loc 1 868 17 is_stmt 0 view .LVU1509
 4551 0e50 3368     		ldr	r3, [r6]
 4552              		.loc 1 868 2 view .LVU1510
 4553 0e52 606A     		ldr	r0, [r4, #36]
 4554 0e54 DB68     		ldr	r3, [r3, #12]
 4555 0e56 9847     		blx	r3
 4556              	.LVL532:
 869:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.AIN_REF_SW);
 4557              		.loc 1 869 2 is_stmt 1 view .LVU1511
 4558              		.loc 1 869 17 is_stmt 0 view .LVU1512
 4559 0e58 3368     		ldr	r3, [r6]
 4560              		.loc 1 869 2 view .LVU1513
 4561 0e5a 206A     		ldr	r0, [r4, #32]
 4562 0e5c DB68     		ldr	r3, [r3, #12]
 4563 0e5e 9847     		blx	r3
 4564              	.LVL533:
 870:boards/TMC2130_eval.c **** 
 871:boards/TMC2130_eval.c **** 	HAL.IOs->config->setLow(Pins.AIN_REF_PWM);
 4565              		.loc 1 871 2 is_stmt 1 view .LVU1514
 4566              		.loc 1 871 17 is_stmt 0 view .LVU1515
 4567 0e60 3368     		ldr	r3, [r6]
 4568              		.loc 1 871 2 view .LVU1516
 4569 0e62 606A     		ldr	r0, [r4, #36]
 4570 0e64 9B69     		ldr	r3, [r3, #24]
 4571 0e66 9847     		blx	r3
 4572              	.LVL534:
 872:boards/TMC2130_eval.c **** 	HAL.IOs->config->setLow(Pins.AIN_REF_SW);
 4573              		.loc 1 872 2 is_stmt 1 view .LVU1517
 4574              		.loc 1 872 17 is_stmt 0 view .LVU1518
 4575 0e68 3368     		ldr	r3, [r6]
 4576              		.loc 1 872 2 view .LVU1519
 4577 0e6a 206A     		ldr	r0, [r4, #32]
 4578 0e6c 9B69     		ldr	r3, [r3, #24]
 4579 0e6e 9847     		blx	r3
 4580              	.LVL535:
 873:boards/TMC2130_eval.c **** 	HAL.IOs->config->setLow(Pins.ENCN_DCO);
 4581              		.loc 1 873 2 is_stmt 1 view .LVU1520
 4582              		.loc 1 873 17 is_stmt 0 view .LVU1521
 4583 0e70 3368     		ldr	r3, [r6]
 4584              		.loc 1 873 2 view .LVU1522
 4585 0e72 6069     		ldr	r0, [r4, #20]
 4586 0e74 9B69     		ldr	r3, [r3, #24]
 4587 0e76 9847     		blx	r3
 4588              	.LVL536:
 874:boards/TMC2130_eval.c **** 	HAL.IOs->config->setLow(Pins.ENCA_DCIN_CFG5);
 4589              		.loc 1 874 2 is_stmt 1 view .LVU1523
 4590              		.loc 1 874 17 is_stmt 0 view .LVU1524
 4591 0e78 3368     		ldr	r3, [r6]
 4592              		.loc 1 874 2 view .LVU1525
 4593 0e7a E068     		ldr	r0, [r4, #12]
 4594 0e7c 9B69     		ldr	r3, [r3, #24]
 4595 0e7e 9847     		blx	r3
 4596              	.LVL537:
 875:boards/TMC2130_eval.c **** 
 876:boards/TMC2130_eval.c **** 	// Initialize the SPI channel
 877:boards/TMC2130_eval.c **** 	TMC2130_SPIChannel       = &HAL.SPI->ch2;
 4597              		.loc 1 877 2 is_stmt 1 view .LVU1526
 4598              		.loc 1 877 33 is_stmt 0 view .LVU1527
 4599 0e80 D8F81020 		ldr	r2, [r8, #16]
 4600              		.loc 1 877 27 view .LVU1528
 4601 0e84 3B4B     		ldr	r3, .L242+20
 4602              		.loc 1 877 29 view .LVU1529
 4603 0e86 02F11401 		add	r1, r2, #20
 4604              		.loc 1 877 27 view .LVU1530
 4605 0e8a 1960     		str	r1, [r3]
 878:boards/TMC2130_eval.c **** 	TMC2130_SPIChannel->CSN  = &HAL.IOs->pins->SPI2_CSN0;
 4606              		.loc 1 878 2 is_stmt 1 view .LVU1531
 4607              		.loc 1 878 29 is_stmt 0 view .LVU1532
 4608 0e8c 7368     		ldr	r3, [r6, #4]
 4609 0e8e 03F50273 		add	r3, r3, #520
 4610              		.loc 1 878 27 view .LVU1533
 4611 0e92 9361     		str	r3, [r2, #24]
 879:boards/TMC2130_eval.c **** 
 880:boards/TMC2130_eval.c **** 	// Initialize the software StepDir generator
 881:boards/TMC2130_eval.c **** 	StepDir_init(STEPDIR_PRECISION);
 4612              		.loc 1 881 2 is_stmt 1 view .LVU1534
 4613 0e94 4FF40030 		mov	r0, #131072
 4614 0e98 FFF7FEFF 		bl	StepDir_init
 4615              	.LVL538:
 882:boards/TMC2130_eval.c **** 	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
 4616              		.loc 1 882 2 view .LVU1535
 4617 0e9c 0023     		movs	r3, #0
 4618 0e9e D4E90012 		ldrd	r1, r2, [r4]
 4619 0ea2 1846     		mov	r0, r3
 4620 0ea4 FFF7FEFF 		bl	StepDir_setPins
 4621              	.LVL539:
 883:boards/TMC2130_eval.c **** 
 884:boards/TMC2130_eval.c **** 	Evalboards.ch2.type = (void *)&TMC2130;
 4622              		.loc 1 884 2 view .LVU1536
 885:boards/TMC2130_eval.c **** 
 886:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->reset        = reset;
 4623              		.loc 1 886 16 is_stmt 0 view .LVU1537
 4624 0ea8 D5F89030 		ldr	r3, [r5, #144]
 4625              		.loc 1 886 38 view .LVU1538
 4626 0eac 324A     		ldr	r2, .L242+24
 4627 0eae C3F80422 		str	r2, [r3, #516]
 887:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 4628              		.loc 1 887 38 view .LVU1539
 4629 0eb2 324A     		ldr	r2, .L242+28
 4630 0eb4 C3F80822 		str	r2, [r3, #520]
 888:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 4631              		.loc 1 888 38 view .LVU1540
 4632 0eb8 0122     		movs	r2, #1
 884:boards/TMC2130_eval.c **** 
 4633              		.loc 1 884 22 view .LVU1541
 4634 0eba AF67     		str	r7, [r5, #120]
 886:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->restore      = restore;
 4635              		.loc 1 886 2 is_stmt 1 view .LVU1542
 887:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->state        = CONFIG_RESET;
 4636              		.loc 1 887 2 view .LVU1543
 4637              		.loc 1 888 2 view .LVU1544
 889:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->configIndex  = 0;
 4638              		.loc 1 889 2 view .LVU1545
 888:boards/TMC2130_eval.c **** 	Evalboards.ch2.config->configIndex  = 0;
 4639              		.loc 1 888 38 is_stmt 0 view .LVU1546
 4640 0ebc 1A80     		strh	r2, [r3]	@ movhi
 890:boards/TMC2130_eval.c **** 
 891:boards/TMC2130_eval.c **** 	Evalboards.ch2.rotate               = rotate;
 4641              		.loc 1 891 2 is_stmt 1 view .LVU1547
 4642              		.loc 1 891 38 is_stmt 0 view .LVU1548
 4643 0ebe 304B     		ldr	r3, .L242+32
 4644 0ec0 C5F89C30 		str	r3, [r5, #156]
 892:boards/TMC2130_eval.c **** 	Evalboards.ch2.right                = right;
 4645              		.loc 1 892 2 is_stmt 1 view .LVU1549
 4646              		.loc 1 892 38 is_stmt 0 view .LVU1550
 4647 0ec4 2F4B     		ldr	r3, .L242+36
 4648 0ec6 C5F89830 		str	r3, [r5, #152]
 893:boards/TMC2130_eval.c **** 	Evalboards.ch2.left                 = left;
 4649              		.loc 1 893 2 is_stmt 1 view .LVU1551
 4650              		.loc 1 893 38 is_stmt 0 view .LVU1552
 4651 0eca 2F4B     		ldr	r3, .L242+40
 4652 0ecc C5F89430 		str	r3, [r5, #148]
 894:boards/TMC2130_eval.c **** 	Evalboards.ch2.stop                 = stop;
 4653              		.loc 1 894 2 is_stmt 1 view .LVU1553
 4654              		.loc 1 894 38 is_stmt 0 view .LVU1554
 4655 0ed0 2E4B     		ldr	r3, .L242+44
 4656 0ed2 C5F8A030 		str	r3, [r5, #160]
 895:boards/TMC2130_eval.c **** 	Evalboards.ch2.GAP                  = GAP;
 4657              		.loc 1 895 2 is_stmt 1 view .LVU1555
 4658              		.loc 1 895 38 is_stmt 0 view .LVU1556
 4659 0ed6 2E4B     		ldr	r3, .L242+48
 4660 0ed8 C5F8B430 		str	r3, [r5, #180]
 896:boards/TMC2130_eval.c **** 	Evalboards.ch2.SAP                  = SAP;
 4661              		.loc 1 896 2 is_stmt 1 view .LVU1557
 4662              		.loc 1 896 38 is_stmt 0 view .LVU1558
 4663 0edc 2D4B     		ldr	r3, .L242+52
 4664 0ede C5F8B030 		str	r3, [r5, #176]
 897:boards/TMC2130_eval.c **** 	Evalboards.ch2.moveTo               = moveTo;
 4665              		.loc 1 897 2 is_stmt 1 view .LVU1559
 4666              		.loc 1 897 38 is_stmt 0 view .LVU1560
 4667 0ee2 2D4B     		ldr	r3, .L242+56
 4668 0ee4 C5F8A430 		str	r3, [r5, #164]
 898:boards/TMC2130_eval.c **** 	Evalboards.ch2.moveBy               = moveBy;
 4669              		.loc 1 898 2 is_stmt 1 view .LVU1561
 4670              		.loc 1 898 38 is_stmt 0 view .LVU1562
 4671 0ee8 2C4B     		ldr	r3, .L242+60
 4672 0eea C5F8A830 		str	r3, [r5, #168]
 899:boards/TMC2130_eval.c **** 	Evalboards.ch2.writeRegister        = writeRegister;
 4673              		.loc 1 899 2 is_stmt 1 view .LVU1563
 4674              		.loc 1 899 38 is_stmt 0 view .LVU1564
 4675 0eee 2C4B     		ldr	r3, .L242+64
 4676 0ef0 C5F8C430 		str	r3, [r5, #196]
 900:boards/TMC2130_eval.c **** 	Evalboards.ch2.readRegister         = readRegister;
 4677              		.loc 1 900 2 is_stmt 1 view .LVU1565
 4678              		.loc 1 900 38 is_stmt 0 view .LVU1566
 4679 0ef4 2B4B     		ldr	r3, .L242+68
 4680 0ef6 C5F8C030 		str	r3, [r5, #192]
 901:boards/TMC2130_eval.c **** 	Evalboards.ch2.periodicJob          = periodicJob;
 4681              		.loc 1 901 2 is_stmt 1 view .LVU1567
 4682              		.loc 1 901 38 is_stmt 0 view .LVU1568
 4683 0efa 2B4B     		ldr	r3, .L242+72
 4684 0efc C5F8D030 		str	r3, [r5, #208]
 902:boards/TMC2130_eval.c **** 	Evalboards.ch2.userFunction         = userFunction;
 4685              		.loc 1 902 2 is_stmt 1 view .LVU1569
 4686              		.loc 1 902 38 is_stmt 0 view .LVU1570
 4687 0f00 2A4B     		ldr	r3, .L242+76
 4688 0f02 C5F8CC30 		str	r3, [r5, #204]
 903:boards/TMC2130_eval.c **** 	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
 4689              		.loc 1 903 2 is_stmt 1 view .LVU1571
 4690              		.loc 1 903 38 is_stmt 0 view .LVU1572
 4691 0f06 2A4B     		ldr	r3, .L242+80
 4692 0f08 C5F8C830 		str	r3, [r5, #200]
 904:boards/TMC2130_eval.c **** 	Evalboards.ch2.enableDriver         = enableDriver;
 4693              		.loc 1 904 2 is_stmt 1 view .LVU1573
 4694              		.loc 1 904 38 is_stmt 0 view .LVU1574
 4695 0f0c 294B     		ldr	r3, .L242+84
 4696 0f0e C5F8DC30 		str	r3, [r5, #220]
 905:boards/TMC2130_eval.c **** 	Evalboards.ch2.numberOfMotors       = TMC2130_MOTORS;
 4697              		.loc 1 905 2 is_stmt 1 view .LVU1575
 4698              		.loc 1 905 38 is_stmt 0 view .LVU1576
 4699 0f12 85F88C20 		strb	r2, [r5, #140]
 906:boards/TMC2130_eval.c **** 	Evalboards.ch2.VMMin                = TMC2130_EVAL_VM_MIN;
 4700              		.loc 1 906 2 is_stmt 1 view .LVU1577
 907:boards/TMC2130_eval.c **** 	Evalboards.ch2.VMMax                = TMC2130_EVAL_VM_MAX;
 4701              		.loc 1 907 38 is_stmt 0 view .LVU1578
 4702 0f16 4FF4F073 		mov	r3, #480
 4703 0f1a 3222     		movs	r2, #50
 4704 0f1c C5E92132 		strd	r3, r2, [r5, #132]
 908:boards/TMC2130_eval.c **** 	Evalboards.ch2.deInit               = deInit;
 4705              		.loc 1 908 2 is_stmt 1 view .LVU1579
 4706              		.loc 1 908 38 is_stmt 0 view .LVU1580
 4707 0f20 254B     		ldr	r3, .L242+88
 4708 0f22 C5F8D430 		str	r3, [r5, #212]
 909:boards/TMC2130_eval.c **** 	Evalboards.ch2.getMin               = getMin;
 4709              		.loc 1 909 2 is_stmt 1 view .LVU1581
 4710              		.loc 1 909 38 is_stmt 0 view .LVU1582
 4711 0f26 254B     		ldr	r3, .L242+92
 4712 0f28 C5F8E830 		str	r3, [r5, #232]
 910:boards/TMC2130_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 4713              		.loc 1 910 2 is_stmt 1 view .LVU1583
 911:boards/TMC2130_eval.c **** 
 912:boards/TMC2130_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 4714              		.loc 1 912 2 is_stmt 0 view .LVU1584
 4715 0f2c 0220     		movs	r0, #2
 910:boards/TMC2130_eval.c **** 	Evalboards.ch2.getMax               = getMax;
 4716              		.loc 1 910 38 view .LVU1585
 4717 0f2e 244B     		ldr	r3, .L242+96
 4718 0f30 C5F8EC30 		str	r3, [r5, #236]
 4719              		.loc 1 912 2 is_stmt 1 view .LVU1586
 4720 0f34 FFF7BEFE 		bl	enableDriver
 4721              	.LVL540:
 913:boards/TMC2130_eval.c **** 
 914:boards/TMC2130_eval.c **** #if defined(Startrampe)
 915:boards/TMC2130_eval.c **** 	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF;
 916:boards/TMC2130_eval.c **** 	GPIO_PinAFConfig(Pins.AIN_REF_PWM->port, Pins.AIN_REF_PWM->bit, GPIO_AF_TIM1);
 917:boards/TMC2130_eval.c **** #elif defined(Landungsbruecke)
 918:boards/TMC2130_eval.c **** 	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
 4722              		.loc 1 918 2 view .LVU1587
 4723              		.loc 1 918 17 is_stmt 0 view .LVU1588
 4724 0f38 3368     		ldr	r3, [r6]
 4725              		.loc 1 918 2 view .LVU1589
 4726 0f3a 606A     		ldr	r0, [r4, #36]
 4727 0f3c DB68     		ldr	r3, [r3, #12]
 4728 0f3e 9847     		blx	r3
 4729              	.LVL541:
 919:boards/TMC2130_eval.c **** 	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
 4730              		.loc 1 919 2 is_stmt 1 view .LVU1590
 4731              		.loc 1 919 6 is_stmt 0 view .LVU1591
 4732 0f40 606A     		ldr	r0, [r4, #36]
 920:boards/TMC2130_eval.c **** #endif
 921:boards/TMC2130_eval.c **** 	HAL.IOs->config->set(Pins.AIN_REF_PWM);
 922:boards/TMC2130_eval.c **** 
 923:boards/TMC2130_eval.c **** 	Timer.init();
 4733              		.loc 1 923 7 view .LVU1592
 4734 0f42 204C     		ldr	r4, .L242+100
 919:boards/TMC2130_eval.c **** 	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
 4735              		.loc 1 919 44 view .LVU1593
 4736 0f44 0423     		movs	r3, #4
 4737 0f46 4375     		strb	r3, [r0, #21]
 921:boards/TMC2130_eval.c **** 
 4738              		.loc 1 921 2 is_stmt 1 view .LVU1594
 921:boards/TMC2130_eval.c **** 
 4739              		.loc 1 921 17 is_stmt 0 view .LVU1595
 4740 0f48 3368     		ldr	r3, [r6]
 921:boards/TMC2130_eval.c **** 
 4741              		.loc 1 921 2 view .LVU1596
 4742 0f4a 1B68     		ldr	r3, [r3]
 4743 0f4c 9847     		blx	r3
 4744              	.LVL542:
 4745              		.loc 1 923 2 is_stmt 1 view .LVU1597
 4746 0f4e 2368     		ldr	r3, [r4]
 4747 0f50 9847     		blx	r3
 4748              	.LVL543:
 924:boards/TMC2130_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 4749              		.loc 1 924 2 view .LVU1598
 4750 0f52 0021     		movs	r1, #0
 4751 0f54 A368     		ldr	r3, [r4, #8]
 4752 0f56 0846     		mov	r0, r1
 925:boards/TMC2130_eval.c **** }
 4753              		.loc 1 925 1 is_stmt 0 view .LVU1599
 4754 0f58 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 4755              	.LCFI19:
 4756              		.cfi_restore 14
 4757              		.cfi_restore 8
 4758              		.cfi_restore 7
 4759              		.cfi_restore 6
 4760              		.cfi_restore 5
 4761              		.cfi_restore 4
 4762              		.cfi_def_cfa_offset 0
 924:boards/TMC2130_eval.c **** 	Timer.setDuty(TIMER_CHANNEL_1, 0);
 4763              		.loc 1 924 2 view .LVU1600
 4764 0f5c 1847     		bx	r3	@ indirect register sibling call
 4765              	.LVL544:
 4766              	.L243:
 4767 0f5e 00BF     		.align	2
 4768              	.L242:
 4769 0f60 00000000 		.word	Evalboards
 4770 0f64 00000000 		.word	TMC2130
 4771 0f68 00000000 		.word	.LANCHOR1
 4772 0f6c 00000000 		.word	.LANCHOR0
 4773 0f70 00000000 		.word	configCallback
 4774 0f74 00000000 		.word	TMC2130_SPIChannel
 4775 0f78 00000000 		.word	reset
 4776 0f7c 00000000 		.word	restore
 4777 0f80 00000000 		.word	rotate
 4778 0f84 00000000 		.word	right
 4779 0f88 00000000 		.word	left
 4780 0f8c 00000000 		.word	stop
 4781 0f90 00000000 		.word	GAP
 4782 0f94 00000000 		.word	SAP
 4783 0f98 00000000 		.word	moveTo
 4784 0f9c 00000000 		.word	moveBy
 4785 0fa0 00000000 		.word	writeRegister
 4786 0fa4 00000000 		.word	readRegister
 4787 0fa8 00000000 		.word	periodicJob
 4788 0fac 00000000 		.word	userFunction
 4789 0fb0 00000000 		.word	getMeasuredSpeed
 4790 0fb4 00000000 		.word	enableDriver
 4791 0fb8 00000000 		.word	deInit
 4792 0fbc 00000000 		.word	getMin
 4793 0fc0 00000000 		.word	getMax
 4794 0fc4 00000000 		.word	Timer
 4795 0fc8 00000000 		.word	HAL
 4796              		.cfi_endproc
 4797              	.LFE26:
 4799              		.comm	TMC2130,644,4
 4800              		.comm	TMC2130_SPIChannel,4,4
 4801              		.comm	TMCMotionController,532,4
 4802              		.comm	TMCDriver,532,4
 4803              		.comm	Evalboards,244,4
 4804              		.comm	VitalSignsMonitor,20,4
 4805              		.comm	hwid,1,1
 4806              		.comm	HAL,48,4
 4807              		.comm	UART,40,4
 4808              		.comm	Timer,16,4
 4809              		.comm	WLAN,36,4
 4810              		.comm	RS232,36,4
 4811              		.comm	LEDs,28,4
 4812              		.comm	USB,36,4
 4813              		.comm	uart0_interrupt,1,1
 4814              		.comm	ADCs,32,4
 4815              		.comm	SPI,44,4
 4816              		.comm	IOMap,2088,4
 4817              		.comm	IOs,52,4
 4818              		.comm	Cpu,8,4
 4819              		.section	.rodata
 4820              		.align	2
 4821              		.set	.LANCHOR1,. + 0
 4824              	tmc2130_defaultRegisterResetState:
 4825 0000 00000000 		.word	0
 4826 0004 00000000 		.word	0
 4827 0008 00000000 		.word	0
 4828 000c 00000000 		.word	0
 4829 0010 00000000 		.word	0
 4830 0014 00000000 		.word	0
 4831 0018 00000000 		.word	0
 4832 001c 00000000 		.word	0
 4833 0020 00000000 		.word	0
 4834 0024 00000000 		.word	0
 4835 0028 00000000 		.word	0
 4836 002c 00000000 		.word	0
 4837 0030 00000000 		.word	0
 4838 0034 00000000 		.word	0
 4839 0038 00000000 		.word	0
 4840 003c 00000000 		.word	0
 4841 0040 03170700 		.word	464643
 4842 0044 00000000 		.word	0
 4843 0048 00000000 		.word	0
 4844 004c 00000000 		.word	0
 4845 0050 00000000 		.word	0
 4846 0054 00000000 		.word	0
 4847 0058 00000000 		.word	0
 4848 005c 00000000 		.word	0
 4849 0060 00000000 		.word	0
 4850 0064 00000000 		.word	0
 4851 0068 00000000 		.word	0
 4852 006c 00000000 		.word	0
 4853 0070 00000000 		.word	0
 4854 0074 00000000 		.word	0
 4855 0078 00000000 		.word	0
 4856 007c 00000000 		.word	0
 4857 0080 00000000 		.word	0
 4858 0084 00000000 		.word	0
 4859 0088 00000000 		.word	0
 4860 008c 00000000 		.word	0
 4861 0090 00000000 		.word	0
 4862 0094 00000000 		.word	0
 4863 0098 00000000 		.word	0
 4864 009c 00000000 		.word	0
 4865 00a0 00000000 		.word	0
 4866 00a4 00000000 		.word	0
 4867 00a8 00000000 		.word	0
 4868 00ac 00000000 		.word	0
 4869 00b0 00000000 		.word	0
 4870 00b4 00000000 		.word	0
 4871 00b8 00000000 		.word	0
 4872 00bc 00000000 		.word	0
 4873 00c0 00000000 		.word	0
 4874 00c4 00000000 		.word	0
 4875 00c8 00000000 		.word	0
 4876 00cc 00000000 		.word	0
 4877 00d0 00000000 		.word	0
 4878 00d4 00000000 		.word	0
 4879 00d8 00000000 		.word	0
 4880 00dc 00000000 		.word	0
 4881 00e0 00000000 		.word	0
 4882 00e4 00000000 		.word	0
 4883 00e8 00000000 		.word	0
 4884 00ec 00000000 		.word	0
 4885 00f0 00000000 		.word	0
 4886 00f4 00000000 		.word	0
 4887 00f8 00000000 		.word	0
 4888 00fc 00000000 		.word	0
 4889 0100 00000000 		.word	0
 4890 0104 00000000 		.word	0
 4891 0108 00000000 		.word	0
 4892 010c 00000000 		.word	0
 4893 0110 00000000 		.word	0
 4894 0114 00000000 		.word	0
 4895 0118 00000000 		.word	0
 4896 011c 00000000 		.word	0
 4897 0120 00000000 		.word	0
 4898 0124 00000000 		.word	0
 4899 0128 00000000 		.word	0
 4900 012c 00000000 		.word	0
 4901 0130 00000000 		.word	0
 4902 0134 00000000 		.word	0
 4903 0138 00000000 		.word	0
 4904 013c 00000000 		.word	0
 4905 0140 00000000 		.word	0
 4906 0144 00000000 		.word	0
 4907 0148 00000000 		.word	0
 4908 014c 00000000 		.word	0
 4909 0150 00000000 		.word	0
 4910 0154 00000000 		.word	0
 4911 0158 00000000 		.word	0
 4912 015c 00000000 		.word	0
 4913 0160 00000000 		.word	0
 4914 0164 00000000 		.word	0
 4915 0168 00000000 		.word	0
 4916 016c 00000000 		.word	0
 4917 0170 00000000 		.word	0
 4918 0174 00000000 		.word	0
 4919 0178 00000000 		.word	0
 4920 017c 00000000 		.word	0
 4921 0180 00000000 		.word	0
 4922 0184 00000000 		.word	0
 4923 0188 00000000 		.word	0
 4924 018c 00000000 		.word	0
 4925 0190 00000000 		.word	0
 4926 0194 00000000 		.word	0
 4927 0198 00000000 		.word	0
 4928 019c 00000000 		.word	0
 4929 01a0 00000000 		.word	0
 4930 01a4 00000000 		.word	0
 4931 01a8 00000000 		.word	0
 4932 01ac 00000000 		.word	0
 4933 01b0 D5010100 		.word	66005
 4934 01b4 00000000 		.word	0
 4935 01b8 00000000 		.word	0
 4936 01bc 00000000 		.word	0
 4937 01c0 00000000 		.word	0
 4938 01c4 00000000 		.word	0
 4939 01c8 00000000 		.word	0
 4940 01cc 00000000 		.word	0
 4941 01d0 00000000 		.word	0
 4942 01d4 00000000 		.word	0
 4943 01d8 00000000 		.word	0
 4944 01dc 00000000 		.word	0
 4945 01e0 00000000 		.word	0
 4946 01e4 00000000 		.word	0
 4947 01e8 00000000 		.word	0
 4948 01ec 00000000 		.word	0
 4949 01f0 00000000 		.word	0
 4950 01f4 00000000 		.word	0
 4951 01f8 00000000 		.word	0
 4952 01fc 00000000 		.word	0
 4953              		.bss
 4954              		.align	2
 4955              		.set	.LANCHOR0,. + 0
 4958              	Pins:
 4959 0000 00000000 		.space	40
 4959      00000000 
 4959      00000000 
 4959      00000000 
 4959      00000000 
 4962              	ADCValue:
 4963 0028 00000000 		.space	12
 4963      00000000 
 4963      00000000 
 4964              		.text
 4965              	.Letext0:
 4966              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 4967              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4968              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4969              		.file 5 "TMC-API/tmc/helpers/Types.h"
 4970              		.file 6 "TMC-API/tmc/helpers/Config.h"
 4971              		.file 7 "TMC-API/tmc/helpers/RegisterAccess.h"
 4972              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4973              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4974              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4975              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4976              		.file 12 "TMC-API/tmc/helpers/API_Header.h"
 4977              		.file 13 "hal/Landungsbruecke/freescale/MK20D10.h"
 4978              		.file 14 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 4979              		.file 15 "./hal/Landungsbruecke/freescale/Cpu.h"
 4980              		.file 16 "./hal/IOs.h"
 4981              		.file 17 "./hal/IOMap.h"
 4982              		.file 18 "./hal/SPI.h"
 4983              		.file 19 "./hal/ADCs.h"
 4984              		.file 20 "./hal/RXTX.h"
 4985              		.file 21 "./hal/USB.h"
 4986              		.file 22 "./hal/LEDs.h"
 4987              		.file 23 "./hal/RS232.h"
 4988              		.file 24 "./hal/WLAN.h"
 4989              		.file 25 "./hal/Timer.h"
 4990              		.file 26 "./hal/UART.h"
 4991              		.file 27 "./hal/HAL.h"
 4992              		.file 28 "./tmc/StepDir.h"
 4993              		.file 29 "./tmc/VitalSignsMonitor.h"
 4994              		.file 30 "boards/Board.h"
 4995              		.file 31 "boards/TMCDriver.h"
 4996              		.file 32 "boards/TMCMotionController.h"
 4997              		.file 33 "TMC-API/tmc/ic/TMC2130/TMC2130.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC2130_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:22     .text:00000000 deInit
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:152    .text:00000070 $d
                            *COM*:00000030 HAL
                            *COM*:00000010 Timer
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:158    .text:0000007c $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:164    .text:0000007c userFunction
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:186    .text:00000088 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:384    .text:00000140 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:390    .text:0000014c $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:396    .text:0000014c readRegister
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:434    .text:0000015c $d
                            *COM*:00000284 TMC2130
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:438    .text:00000160 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:444    .text:00000160 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:499    .text:00000188 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:503    .text:0000018c $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:509    .text:0000018c writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:535    .text:00000194 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:539    .text:00000198 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:545    .text:00000198 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:587    .text:000001aa rotate
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:629    .text:000001bc stop
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:652    .text:000001c0 left
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:677    .text:000001c4 right
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:701    .text:000001c6 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:733    .text:000001e2 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:785    .text:0000024a $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:795    .text:00000256 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:863    .text:000002dc $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:1717   .text:000005ac $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:1725   .text:000005b4 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:1812   .text:00000604 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:1817   .text:0000060c $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:2774   .text:0000090c $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:2779   .text:00000910 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3644   .text:00000bf4 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3650   .text:00000bfc $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3719   .text:00000c4c $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3723   .text:00000c50 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3729   .text:00000c50 SAP
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3769   .text:00000c64 GAP
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3799   .text:00000c6e restore
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3814   .text:00000c74 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3818   .text:00000c78 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3824   .text:00000c78 reset
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3873   .text:00000ca8 $d
                            *COM*:00000014 VitalSignsMonitor
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3879   .text:00000cb4 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3885   .text:00000cb4 enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3961   .text:00000ce8 $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3967   .text:00000cf4 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:3973   .text:00000cf4 getMax
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4083   .text:00000d20 getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4143   .text:00000d36 configCallback
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4203   .text:00000d54 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4207   .text:00000d58 $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4213   .text:00000d58 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4284   .text:00000d78 getMin
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4341   .text:00000d8e tmc2130_readWriteArray
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4384   .text:00000da4 $d
                            *COM*:00000004 TMC2130_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4389   .text:00000dac $t
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4396   .text:00000dac TMC2130_init
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4769   .text:00000f60 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4820   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4824   .rodata:00000000 tmc2130_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4954   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4958   .bss:00000000 Pins
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:4962   .bss:00000028 ADCValue
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:193    .text:0000008f $d
C:\Users\Shubham\AppData\Local\Temp\ccpdcDJD.s:193    .text:00000090 $t

UNDEFINED SYMBOLS
StepDir_deInit
StepDir_getStatus
tmc2130_readInt
tmc2130_periodicJob
StepDir_periodicJob
StepDir_stallGuard
tmc2130_writeInt
StepDir_moveTo
StepDir_rotate
__aeabi_uldivmod
__aeabi_ldivmod
StepDir_getTargetPosition
StepDir_getActualPosition
StepDir_setActualPosition
StepDir_getTargetVelocity
StepDir_getMode
StepDir_getActualVelocity
StepDir_getFrequency
StepDir_getVelocityMax
StepDir_setVelocityMax
StepDir_getAcceleration
StepDir_setAcceleration
StepDir_setMode
StepDir_setFrequency
StepDir_getStallGuardThreshold
StepDir_setStallGuardThreshold
tmc2130_restore
tmc2130_reset
StepDir_init
StepDir_setPins
StepDir_getMaxAcceleration
tmc2130_fillShadowRegisters
tmc2130_init
tmc2130_setCallback
