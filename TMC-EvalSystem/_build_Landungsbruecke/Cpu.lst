   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"Cpu.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	LowLevelInit
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	LowLevelInit:
  24              	.LFB4:
  25              		.file 1 "hal/Landungsbruecke/freescale/Cpu.c"
   1:hal/Landungsbruecke/freescale/Cpu.c **** /* ###################################################################
   2:hal/Landungsbruecke/freescale/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:hal/Landungsbruecke/freescale/Cpu.c **** **     Filename    : Cpu.c
   4:hal/Landungsbruecke/freescale/Cpu.c **** **     Project     : FS_TC_Test
   5:hal/Landungsbruecke/freescale/Cpu.c **** **     Processor   : MK20DN512VLL10
   6:hal/Landungsbruecke/freescale/Cpu.c **** **     Component   : MK20DN512LL10
   7:hal/Landungsbruecke/freescale/Cpu.c **** **     Version     : Component 01.000, Driver 01.04, CPU db: 3.00.000
   8:hal/Landungsbruecke/freescale/Cpu.c **** **     Datasheet   : K20P144M100SF2V2RM Rev. 2, Jun 2012
   9:hal/Landungsbruecke/freescale/Cpu.c **** **     Compiler    : GNU C Compiler
  10:hal/Landungsbruecke/freescale/Cpu.c **** **     Date/Time   : 2014-12-22, 13:39, # CodeGen: 7
  11:hal/Landungsbruecke/freescale/Cpu.c **** **     Abstract    :
  12:hal/Landungsbruecke/freescale/Cpu.c **** **
  13:hal/Landungsbruecke/freescale/Cpu.c **** **     Settings    :
  14:hal/Landungsbruecke/freescale/Cpu.c **** **
  15:hal/Landungsbruecke/freescale/Cpu.c **** **     Contents    :
  16:hal/Landungsbruecke/freescale/Cpu.c **** **         No public methods
  17:hal/Landungsbruecke/freescale/Cpu.c **** **
  18:hal/Landungsbruecke/freescale/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc.
  19:hal/Landungsbruecke/freescale/Cpu.c **** **     All Rights Reserved.
  20:hal/Landungsbruecke/freescale/Cpu.c **** **
  21:hal/Landungsbruecke/freescale/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:hal/Landungsbruecke/freescale/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:hal/Landungsbruecke/freescale/Cpu.c **** **
  24:hal/Landungsbruecke/freescale/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:hal/Landungsbruecke/freescale/Cpu.c **** **       of conditions and the following disclaimer.
  26:hal/Landungsbruecke/freescale/Cpu.c **** **
  27:hal/Landungsbruecke/freescale/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:hal/Landungsbruecke/freescale/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:hal/Landungsbruecke/freescale/Cpu.c **** **       other materials provided with the distribution.
  30:hal/Landungsbruecke/freescale/Cpu.c **** **
  31:hal/Landungsbruecke/freescale/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:hal/Landungsbruecke/freescale/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:hal/Landungsbruecke/freescale/Cpu.c **** **       software without specific prior written permission.
  34:hal/Landungsbruecke/freescale/Cpu.c **** **
  35:hal/Landungsbruecke/freescale/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:hal/Landungsbruecke/freescale/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:hal/Landungsbruecke/freescale/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:hal/Landungsbruecke/freescale/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:hal/Landungsbruecke/freescale/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:hal/Landungsbruecke/freescale/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:hal/Landungsbruecke/freescale/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:hal/Landungsbruecke/freescale/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:hal/Landungsbruecke/freescale/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:hal/Landungsbruecke/freescale/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:hal/Landungsbruecke/freescale/Cpu.c **** **
  46:hal/Landungsbruecke/freescale/Cpu.c **** **     http: www.freescale.com
  47:hal/Landungsbruecke/freescale/Cpu.c **** **     mail: support@freescale.com
  48:hal/Landungsbruecke/freescale/Cpu.c **** ** ###################################################################*/
  49:hal/Landungsbruecke/freescale/Cpu.c **** /*!
  50:hal/Landungsbruecke/freescale/Cpu.c **** ** @file Cpu.c
  51:hal/Landungsbruecke/freescale/Cpu.c **** ** @version 01.04
  52:hal/Landungsbruecke/freescale/Cpu.c **** ** @brief
  53:hal/Landungsbruecke/freescale/Cpu.c **** **
  54:hal/Landungsbruecke/freescale/Cpu.c **** */
  55:hal/Landungsbruecke/freescale/Cpu.c **** /*!
  56:hal/Landungsbruecke/freescale/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:hal/Landungsbruecke/freescale/Cpu.c **** **  @{
  58:hal/Landungsbruecke/freescale/Cpu.c **** */
  59:hal/Landungsbruecke/freescale/Cpu.c **** 
  60:hal/Landungsbruecke/freescale/Cpu.c **** /* MODULE Cpu. */
  61:hal/Landungsbruecke/freescale/Cpu.c **** 
  62:hal/Landungsbruecke/freescale/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:hal/Landungsbruecke/freescale/Cpu.c **** 
  64:hal/Landungsbruecke/freescale/Cpu.c **** #include "hal/derivative.h"
  65:hal/Landungsbruecke/freescale/Cpu.c **** #include "Cpu.h"
  66:hal/Landungsbruecke/freescale/Cpu.c **** 
  67:hal/Landungsbruecke/freescale/Cpu.c **** #ifdef __cplusplus
  68:hal/Landungsbruecke/freescale/Cpu.c **** extern "C" {
  69:hal/Landungsbruecke/freescale/Cpu.c **** #endif
  70:hal/Landungsbruecke/freescale/Cpu.c **** 
  71:hal/Landungsbruecke/freescale/Cpu.c **** /* Global variables */
  72:hal/Landungsbruecke/freescale/Cpu.c **** volatile uint8 SR_reg;               /* Current value of the FAULTMASK register */
  73:hal/Landungsbruecke/freescale/Cpu.c **** volatile uint8 SR_lock = 0x00U;      /* Lock */
  74:hal/Landungsbruecke/freescale/Cpu.c **** 
  75:hal/Landungsbruecke/freescale/Cpu.c **** void LowLevelInit(void);
  76:hal/Landungsbruecke/freescale/Cpu.c **** void InitClocks(void);
  77:hal/Landungsbruecke/freescale/Cpu.c **** 
  78:hal/Landungsbruecke/freescale/Cpu.c **** 
  79:hal/Landungsbruecke/freescale/Cpu.c **** CpuTypeDef Cpu =
  80:hal/Landungsbruecke/freescale/Cpu.c **** {
  81:hal/Landungsbruecke/freescale/Cpu.c **** 	.initClocks	= InitClocks,
  82:hal/Landungsbruecke/freescale/Cpu.c **** 	.initLowLevel 	= LowLevelInit,
  83:hal/Landungsbruecke/freescale/Cpu.c **** };
  84:hal/Landungsbruecke/freescale/Cpu.c **** 
  85:hal/Landungsbruecke/freescale/Cpu.c **** /*
  86:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
  87:hal/Landungsbruecke/freescale/Cpu.c **** **     Method      :  Cpu_SetBASEPRI (component MK20DN512LL10)
  88:hal/Landungsbruecke/freescale/Cpu.c **** **
  89:hal/Landungsbruecke/freescale/Cpu.c **** **     Description :
  90:hal/Landungsbruecke/freescale/Cpu.c **** **         This method sets the BASEPRI core register.
  91:hal/Landungsbruecke/freescale/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  92:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
  93:hal/Landungsbruecke/freescale/Cpu.c **** */
  94:hal/Landungsbruecke/freescale/Cpu.c **** void Cpu_SetBASEPRI(uint32 Level);
  95:hal/Landungsbruecke/freescale/Cpu.c **** 
  96:hal/Landungsbruecke/freescale/Cpu.c **** /*
  97:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
  98:hal/Landungsbruecke/freescale/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MK20DN512LL10)
  99:hal/Landungsbruecke/freescale/Cpu.c **** **
 100:hal/Landungsbruecke/freescale/Cpu.c **** **     Description :
 101:hal/Landungsbruecke/freescale/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
 102:hal/Landungsbruecke/freescale/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 103:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
 104:hal/Landungsbruecke/freescale/Cpu.c **** */
 105:hal/Landungsbruecke/freescale/Cpu.c **** 
 106:hal/Landungsbruecke/freescale/Cpu.c **** void __attribute__ ((interrupt)) Cpu_INT_NMIInterrupt(void)
 107:hal/Landungsbruecke/freescale/Cpu.c **** {
 108:hal/Landungsbruecke/freescale/Cpu.c **** 
 109:hal/Landungsbruecke/freescale/Cpu.c **** }
 110:hal/Landungsbruecke/freescale/Cpu.c **** 
 111:hal/Landungsbruecke/freescale/Cpu.c **** /*
 112:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
 113:hal/Landungsbruecke/freescale/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MK20DN512LL10)
 114:hal/Landungsbruecke/freescale/Cpu.c **** **
 115:hal/Landungsbruecke/freescale/Cpu.c **** **     Description :
 116:hal/Landungsbruecke/freescale/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 117:hal/Landungsbruecke/freescale/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 118:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
 119:hal/Landungsbruecke/freescale/Cpu.c **** */
 120:hal/Landungsbruecke/freescale/Cpu.c **** void __attribute__ ((interrupt)) Cpu_Interrupt(void)
 121:hal/Landungsbruecke/freescale/Cpu.c **** {
 122:hal/Landungsbruecke/freescale/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 123:hal/Landungsbruecke/freescale/Cpu.c ****   PE_DEBUGHALT();
 124:hal/Landungsbruecke/freescale/Cpu.c **** }
 125:hal/Landungsbruecke/freescale/Cpu.c **** 
 126:hal/Landungsbruecke/freescale/Cpu.c **** 
 127:hal/Landungsbruecke/freescale/Cpu.c **** /***************************************************************//**
 128:hal/Landungsbruecke/freescale/Cpu.c ****    \fn InitClocks(void)
 129:hal/Landungsbruecke/freescale/Cpu.c ****    \brief Initialize the clock PLL
 130:hal/Landungsbruecke/freescale/Cpu.c **** 
 131:hal/Landungsbruecke/freescale/Cpu.c ****    This function inializes the PLL to 96MHz (with 16MHz crystal
 132:hal/Landungsbruecke/freescale/Cpu.c ****    freqeuncy) and then switches to PLL clock.
 133:hal/Landungsbruecke/freescale/Cpu.c ****    So the following frequencies are used:
 134:hal/Landungsbruecke/freescale/Cpu.c ****      Core:    96MHz
 135:hal/Landungsbruecke/freescale/Cpu.c ****      Bus:     48MHz
 136:hal/Landungsbruecke/freescale/Cpu.c ****      FlexBus: 48MHz
 137:hal/Landungsbruecke/freescale/Cpu.c ****      Flash:   24MHz
 138:hal/Landungsbruecke/freescale/Cpu.c **** 
 139:hal/Landungsbruecke/freescale/Cpu.c ****    This routine has been generated by ProcessorExpert and cleaned
 140:hal/Landungsbruecke/freescale/Cpu.c ****    up manually.
 141:hal/Landungsbruecke/freescale/Cpu.c **** ********************************************************************/
 142:hal/Landungsbruecke/freescale/Cpu.c **** void InitClocks(void)
 143:hal/Landungsbruecke/freescale/Cpu.c **** {
 144:hal/Landungsbruecke/freescale/Cpu.c ****   //Turn on clocking for all ports to enable pin routing
 145:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
 146:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTB_MASK
 147:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTC_MASK
 148:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTD_MASK
 149:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTE_MASK );
 150:hal/Landungsbruecke/freescale/Cpu.c **** 
 151:hal/Landungsbruecke/freescale/Cpu.c ****   //PLL already selected by bootloader? => exit
 152:hal/Landungsbruecke/freescale/Cpu.c ****   if((MCG_S & 0x0C)==0x0C) return;
 153:hal/Landungsbruecke/freescale/Cpu.c **** 
 154:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
 155:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 156:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV3(0x03) |
 157:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV4(0x03); /* Set the system prescalers to safe value */
 158:hal/Landungsbruecke/freescale/Cpu.c **** 
 159:hal/Landungsbruecke/freescale/Cpu.c ****   if((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U)
 160:hal/Landungsbruecke/freescale/Cpu.c ****   {
 161:hal/Landungsbruecke/freescale/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 162:hal/Landungsbruecke/freescale/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 163:hal/Landungsbruecke/freescale/Cpu.c ****   }
 164:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,OUTDIV2=1,OUTDIV3=1,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,?
 165:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
 166:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 167:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV3(0x01) |
 168:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV4(0x03); /* Update system prescalers */
 169:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 170:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK|SIM_SOPT2_CLKOUTSEL(6); /* Select PLL as a clock source for
 171:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 172:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various pe
 173:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to FBE Mode */
 174:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 175:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);
 176:hal/Landungsbruecke/freescale/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 177:hal/Landungsbruecke/freescale/Cpu.c ****   OSC_CR = OSC_CR_ERCLKEN_MASK;
 178:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=4,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 179:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x04) | MCG_C1_IRCLKEN_MASK);
 180:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 181:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C4 &= (uint8)~(uint8)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 182:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 183:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);
 184:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 185:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U); /* Check that the oscillator is running */
 187:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 188:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected
 189:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 190:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 191:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);              /* Wait until external reference clock is selected 
 193:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 194:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 195:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=4,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 196:hal/Landungsbruecke/freescale/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x04) | MCG_C1_IRCLKEN_MASK);
 197:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU);    /* Wait until output of the PLL is selected */
 198:hal/Landungsbruecke/freescale/Cpu.c **** }
 199:hal/Landungsbruecke/freescale/Cpu.c **** 
 200:hal/Landungsbruecke/freescale/Cpu.c **** /*
 201:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
 202:hal/Landungsbruecke/freescale/Cpu.c **** **     Method      :  Cpu_SetBASEPRI (component MK20DN512LL10)
 203:hal/Landungsbruecke/freescale/Cpu.c **** **
 204:hal/Landungsbruecke/freescale/Cpu.c **** **     Description :
 205:hal/Landungsbruecke/freescale/Cpu.c **** **         This method sets the BASEPRI core register.
 206:hal/Landungsbruecke/freescale/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 207:hal/Landungsbruecke/freescale/Cpu.c **** ** ===================================================================
 208:hal/Landungsbruecke/freescale/Cpu.c **** */
 209:hal/Landungsbruecke/freescale/Cpu.c **** /*lint -save  -e586 -e950 Disable MISRA rule (2.1,1.1) checking. */
 210:hal/Landungsbruecke/freescale/Cpu.c **** #ifdef _lint
 211:hal/Landungsbruecke/freescale/Cpu.c ****   #define Cpu_SetBASEPRI(Level)  /* empty */
 212:hal/Landungsbruecke/freescale/Cpu.c **** #else
 213:hal/Landungsbruecke/freescale/Cpu.c **** void Cpu_SetBASEPRI(uint32 Level) {
 214:hal/Landungsbruecke/freescale/Cpu.c ****   __asm ("msr basepri, %[input]"::[input] "r" (Level):);
 215:hal/Landungsbruecke/freescale/Cpu.c **** }
 216:hal/Landungsbruecke/freescale/Cpu.c **** #endif
 217:hal/Landungsbruecke/freescale/Cpu.c **** /*lint -restore Enable MISRA rule (2.1,1.1) checking. */
 218:hal/Landungsbruecke/freescale/Cpu.c **** 
 219:hal/Landungsbruecke/freescale/Cpu.c **** 
 220:hal/Landungsbruecke/freescale/Cpu.c **** 
 221:hal/Landungsbruecke/freescale/Cpu.c **** /***************************************************************//**
 222:hal/Landungsbruecke/freescale/Cpu.c ****    \fn LowLevelInit(void)
 223:hal/Landungsbruecke/freescale/Cpu.c ****    \brief Low level initialization of the MCU
 224:hal/Landungsbruecke/freescale/Cpu.c **** 
 225:hal/Landungsbruecke/freescale/Cpu.c ****    This function does some low level initialization of the MCU.
 226:hal/Landungsbruecke/freescale/Cpu.c ****    Generated by ProcessorExpert and then cleaned up manually.
 227:hal/Landungsbruecke/freescale/Cpu.c **** ********************************************************************/
 228:hal/Landungsbruecke/freescale/Cpu.c **** void LowLevelInit(void)
 229:hal/Landungsbruecke/freescale/Cpu.c **** {
  26              		.loc 1 229 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 230:hal/Landungsbruecke/freescale/Cpu.c ****   /* Initialization of the RCM module */    //***TEST_OK: Kann je nach Beschaltung des Reset-Pins z
 231:hal/Landungsbruecke/freescale/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 232:hal/Landungsbruecke/freescale/Cpu.c ****   RCM_RPFW &= (uint8)~(uint8)(RCM_RPFW_RSTFLTSEL(0x1F));
  31              		.loc 1 232 3 view .LVU1
  32              		.loc 1 232 12 is_stmt 0 view .LVU2
  33 0000 174B     		ldr	r3, .L2
  34 0002 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
  35 0004 02F0E002 		and	r2, r2, #224
  36 0008 5A71     		strb	r2, [r3, #5]
 233:hal/Landungsbruecke/freescale/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 234:hal/Landungsbruecke/freescale/Cpu.c ****   RCM_RPFC &= (uint8)~(uint8)(
  37              		.loc 1 234 3 is_stmt 1 view .LVU3
  38              		.loc 1 234 12 is_stmt 0 view .LVU4
  39 000a 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  40 000c 02F0F802 		and	r2, r2, #248
  41 0010 1A71     		strb	r2, [r3, #4]
 235:hal/Landungsbruecke/freescale/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 236:hal/Landungsbruecke/freescale/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 237:hal/Landungsbruecke/freescale/Cpu.c ****               );
 238:hal/Landungsbruecke/freescale/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 239:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_SCGC7: MPU=1 */
 240:hal/Landungsbruecke/freescale/Cpu.c ****   SIM_SCGC7 |= SIM_SCGC7_MPU_MASK;
  42              		.loc 1 240 3 is_stmt 1 view .LVU5
  43              		.loc 1 240 13 is_stmt 0 view .LVU6
  44 0012 144A     		ldr	r2, .L2+4
  45 0014 1368     		ldr	r3, [r2]
  46 0016 43F00403 		orr	r3, r3, #4
  47 001a 1360     		str	r3, [r2]
 241:hal/Landungsbruecke/freescale/Cpu.c ****         /* Initialization of the MPU module */
 242:hal/Landungsbruecke/freescale/Cpu.c **** 
 243:hal/Landungsbruecke/freescale/Cpu.c ****   //Turn off MPU (important e.g. for the USB stack to work properly)
 244:hal/Landungsbruecke/freescale/Cpu.c ****   /* MPU_CESR: SPERR=0,VLD=0 */
 245:hal/Landungsbruecke/freescale/Cpu.c ****   MPU_CESR &= (uint32)~(uint32)((MPU_CESR_SPERR(0x1F) | MPU_CESR_VLD_MASK));
  48              		.loc 1 245 3 is_stmt 1 view .LVU7
  49              		.loc 1 245 12 is_stmt 0 view .LVU8
  50 001c 124A     		ldr	r2, .L2+8
  51 001e 1368     		ldr	r3, [r2]
  52 0020 23F07843 		bic	r3, r3, #-134217728
  53 0024 23F00103 		bic	r3, r3, #1
  54 0028 1360     		str	r3, [r2]
 246:hal/Landungsbruecke/freescale/Cpu.c **** 
 247:hal/Landungsbruecke/freescale/Cpu.c ****       /* Initialization of the PMC module */
 248:hal/Landungsbruecke/freescale/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 249:hal/Landungsbruecke/freescale/Cpu.c ****   PMC_LVDSC1 = (uint8)((PMC_LVDSC1 & (uint8)~(uint8)(
  55              		.loc 1 249 3 is_stmt 1 view .LVU9
  56              		.loc 1 249 25 is_stmt 0 view .LVU10
  57 002a 104B     		ldr	r3, .L2+12
  58 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 250:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 251:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 252:hal/Landungsbruecke/freescale/Cpu.c ****                )) | (uint8)(
  59              		.loc 1 252 19 view .LVU11
  60 002e 02F08C02 		and	r2, r2, #140
 249:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
  61              		.loc 1 249 16 view .LVU12
  62 0032 42F05002 		orr	r2, r2, #80
 249:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
  63              		.loc 1 249 14 view .LVU13
  64 0036 1A70     		strb	r2, [r3]
 253:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 254:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 255:hal/Landungsbruecke/freescale/Cpu.c ****                ));
 256:hal/Landungsbruecke/freescale/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 257:hal/Landungsbruecke/freescale/Cpu.c ****   PMC_LVDSC2 = (uint8)((PMC_LVDSC2 & (uint8)~(uint8)(
  65              		.loc 1 257 3 is_stmt 1 view .LVU14
  66              		.loc 1 257 25 is_stmt 0 view .LVU15
  67 0038 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 258:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 259:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 260:hal/Landungsbruecke/freescale/Cpu.c ****                )) | (uint8)(
  68              		.loc 1 260 19 view .LVU16
  69 003a 02F09C02 		and	r2, r2, #156
 257:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
  70              		.loc 1 257 16 view .LVU17
  71 003e 42F04002 		orr	r2, r2, #64
 257:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
  72              		.loc 1 257 14 view .LVU18
  73 0042 5A70     		strb	r2, [r3, #1]
 261:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 262:hal/Landungsbruecke/freescale/Cpu.c ****                ));
 263:hal/Landungsbruecke/freescale/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 264:hal/Landungsbruecke/freescale/Cpu.c ****   PMC_REGSC &= (uint8)~(uint8)(
  74              		.loc 1 264 3 is_stmt 1 view .LVU19
  75              		.loc 1 264 13 is_stmt 0 view .LVU20
  76 0044 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
  77 0046 02F0E602 		and	r2, r2, #230
  78 004a 9A70     		strb	r2, [r3, #2]
 265:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 266:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 267:hal/Landungsbruecke/freescale/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 268:hal/Landungsbruecke/freescale/Cpu.c ****                );
 269:hal/Landungsbruecke/freescale/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 270:hal/Landungsbruecke/freescale/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
  79              		.loc 1 270 3 is_stmt 1 view .LVU21
  80              		.loc 1 270 14 is_stmt 0 view .LVU22
  81 004c 084A     		ldr	r2, .L2+16
  82 004e 0023     		movs	r3, #0
  83 0050 1370     		strb	r3, [r2]
 271:hal/Landungsbruecke/freescale/Cpu.c **** 
 272:hal/Landungsbruecke/freescale/Cpu.c ****   /* Common initialization of the CPU registers */
 273:hal/Landungsbruecke/freescale/Cpu.c ****   /* NVICIP73: PRI73=0 (USB Interrupt)*/
 274:hal/Landungsbruecke/freescale/Cpu.c ****   NVICIP73 = NVIC_IP_PRI73(0x00);
  84              		.loc 1 274 3 is_stmt 1 view .LVU23
  85              		.loc 1 274 12 is_stmt 0 view .LVU24
  86 0052 084A     		ldr	r2, .L2+20
  87 0054 82F84933 		strb	r3, [r2, #841]
 275:hal/Landungsbruecke/freescale/Cpu.c **** 
 276:hal/Landungsbruecke/freescale/Cpu.c ****   //Interrupt priority base setting
 277:hal/Landungsbruecke/freescale/Cpu.c ****   Cpu_SetBASEPRI(0);
  88              		.loc 1 277 3 is_stmt 1 view .LVU25
  89              	.LVL0:
  90              	.LBB4:
  91              	.LBI4:
 213:hal/Landungsbruecke/freescale/Cpu.c ****   __asm ("msr basepri, %[input]"::[input] "r" (Level):);
  92              		.loc 1 213 6 view .LVU26
  93              	.LBB5:
 214:hal/Landungsbruecke/freescale/Cpu.c **** }
  94              		.loc 1 214 3 view .LVU27
  95              		.syntax unified
  96              	@ 214 "hal/Landungsbruecke/freescale/Cpu.c" 1
  97 0058 83F31188 		msr basepri, r3
  98              	@ 0 "" 2
  99              	.LVL1:
 214:hal/Landungsbruecke/freescale/Cpu.c **** }
 100              		.loc 1 214 3 is_stmt 0 view .LVU28
 101              		.thumb
 102              		.syntax unified
 103              	.LBE5:
 104              	.LBE4:
 278:hal/Landungsbruecke/freescale/Cpu.c **** }
 105              		.loc 1 278 1 view .LVU29
 106 005c 7047     		bx	lr
 107              	.L3:
 108 005e 00BF     		.align	2
 109              	.L2:
 110 0060 00F00740 		.word	1074262016
 111 0064 40800440 		.word	1074036800
 112 0068 00D00040 		.word	1073795072
 113 006c 00D00740 		.word	1074253824
 114 0070 00E00740 		.word	1074257920
 115 0074 00E100E0 		.word	-536813312
 116              		.cfi_endproc
 117              	.LFE4:
 119              		.align	1
 120              		.global	InitClocks
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu softvfp
 126              	InitClocks:
 127              	.LFB2:
 143:hal/Landungsbruecke/freescale/Cpu.c ****   //Turn on clocking for all ports to enable pin routing
 128              		.loc 1 143 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 145:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTB_MASK
 133              		.loc 1 145 3 view .LVU31
 145:hal/Landungsbruecke/freescale/Cpu.c ****               | SIM_SCGC5_PORTB_MASK
 134              		.loc 1 145 13 is_stmt 0 view .LVU32
 135 0078 2E4B     		ldr	r3, .L27
 136 007a 41F23801 		movw	r1, #4152
 137 007e 5A58     		ldr	r2, [r3, r1]
 138 0080 42F47852 		orr	r2, r2, #15872
 139 0084 5A50     		str	r2, [r3, r1]
 152:hal/Landungsbruecke/freescale/Cpu.c **** 
 140              		.loc 1 152 3 is_stmt 1 view .LVU33
 152:hal/Landungsbruecke/freescale/Cpu.c **** 
 141              		.loc 1 152 7 is_stmt 0 view .LVU34
 142 0086 2C4A     		ldr	r2, .L27+4
 143 0088 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 152:hal/Landungsbruecke/freescale/Cpu.c **** 
 144              		.loc 1 152 5 view .LVU35
 145 008a 02F00C02 		and	r2, r2, #12
 146 008e 0C2A     		cmp	r2, #12
 147 0090 4FD0     		beq	.L4
 154:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 148              		.loc 1 154 3 is_stmt 1 view .LVU36
 154:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 149              		.loc 1 154 15 is_stmt 0 view .LVU37
 150 0092 41F24402 		movw	r2, #4164
 151 0096 2949     		ldr	r1, .L27+8
 152 0098 9950     		str	r1, [r3, r2]
 159:hal/Landungsbruecke/freescale/Cpu.c ****   {
 153              		.loc 1 159 3 is_stmt 1 view .LVU38
 159:hal/Landungsbruecke/freescale/Cpu.c ****   {
 154              		.loc 1 159 7 is_stmt 0 view .LVU39
 155 009a 03F55833 		add	r3, r3, #221184
 156 009e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 159:hal/Landungsbruecke/freescale/Cpu.c ****   {
 157              		.loc 1 159 5 view .LVU40
 158 00a0 1107     		lsls	r1, r2, #28
 162:hal/Landungsbruecke/freescale/Cpu.c ****   }
 159              		.loc 1 162 5 is_stmt 1 view .LVU41
 162:hal/Landungsbruecke/freescale/Cpu.c ****   }
 160              		.loc 1 162 15 is_stmt 0 view .LVU42
 161 00a2 48BF     		it	mi
 162 00a4 9A78     		ldrbmi	r2, [r3, #2]	@ zero_extendqisi2
 165:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 163              		.loc 1 165 15 view .LVU43
 164 00a6 2649     		ldr	r1, .L27+12
 162:hal/Landungsbruecke/freescale/Cpu.c ****   }
 165              		.loc 1 162 15 view .LVU44
 166 00a8 44BF     		itt	mi
 167 00aa 42F00802 		orrmi	r2, r2, #8
 168 00ae 9A70     		strbmi	r2, [r3, #2]
 165:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 169              		.loc 1 165 3 is_stmt 1 view .LVU45
 165:hal/Landungsbruecke/freescale/Cpu.c ****                 SIM_CLKDIV1_OUTDIV2(0x01) |
 170              		.loc 1 165 15 is_stmt 0 view .LVU46
 171 00b0 204B     		ldr	r3, .L27
 172 00b2 41F24402 		movw	r2, #4164
 173 00b6 9950     		str	r1, [r3, r2]
 170:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 174              		.loc 1 170 3 is_stmt 1 view .LVU47
 170:hal/Landungsbruecke/freescale/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 175              		.loc 1 170 13 is_stmt 0 view .LVU48
 176 00b8 41F20401 		movw	r1, #4100
 177 00bc 5A58     		ldr	r2, [r3, r1]
 178 00be 42F48032 		orr	r2, r2, #65536
 179 00c2 42F0C002 		orr	r2, r2, #192
 180 00c6 5A50     		str	r2, [r3, r1]
 172:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to FBE Mode */
 181              		.loc 1 172 3 is_stmt 1 view .LVU49
 172:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to FBE Mode */
 182              		.loc 1 172 13 is_stmt 0 view .LVU50
 183 00c8 1A68     		ldr	r2, [r3]
 184 00ca 42F44022 		orr	r2, r2, #786432
 185 00ce 1A60     		str	r2, [r3]
 175:hal/Landungsbruecke/freescale/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 186              		.loc 1 175 3 is_stmt 1 view .LVU51
 175:hal/Landungsbruecke/freescale/Cpu.c ****   /* OSC_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 187              		.loc 1 175 10 is_stmt 0 view .LVU52
 188 00d0 03F5E833 		add	r3, r3, #118784
 189 00d4 2422     		movs	r2, #36
 190 00d6 5A70     		strb	r2, [r3, #1]
 177:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=4,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 191              		.loc 1 177 3 is_stmt 1 view .LVU53
 177:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=4,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 192              		.loc 1 177 10 is_stmt 0 view .LVU54
 193 00d8 1A4A     		ldr	r2, .L27+16
 194 00da 8021     		movs	r1, #128
 195 00dc 1170     		strb	r1, [r2]
 179:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 196              		.loc 1 179 3 is_stmt 1 view .LVU55
 179:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 197              		.loc 1 179 10 is_stmt 0 view .LVU56
 198 00de A222     		movs	r2, #162
 199 00e0 1A70     		strb	r2, [r3]
 181:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 200              		.loc 1 181 3 is_stmt 1 view .LVU57
 181:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 201              		.loc 1 181 10 is_stmt 0 view .LVU58
 202 00e2 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 203 00e4 02F01F02 		and	r2, r2, #31
 204 00e8 DA70     		strb	r2, [r3, #3]
 183:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 205              		.loc 1 183 3 is_stmt 1 view .LVU59
 183:hal/Landungsbruecke/freescale/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 206              		.loc 1 183 10 is_stmt 0 view .LVU60
 207 00ea 0322     		movs	r2, #3
 208 00ec 1A71     		strb	r2, [r3, #4]
 185:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U); /* Check that the oscillator is running */
 209              		.loc 1 185 3 is_stmt 1 view .LVU61
 185:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U); /* Check that the oscillator is running */
 210              		.loc 1 185 10 is_stmt 0 view .LVU62
 211 00ee 0022     		movs	r2, #0
 212 00f0 5A71     		strb	r2, [r3, #5]
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 213              		.loc 1 186 3 is_stmt 1 view .LVU63
 214              	.LBB8:
 215              	.LBI8:
 142:hal/Landungsbruecke/freescale/Cpu.c **** {
 216              		.loc 1 142 6 view .LVU64
 217              	.L7:
 218              	.LBB9:
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 219              		.loc 1 186 48 view .LVU65
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 220              		.loc 1 186 8 view .LVU66
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 221              		.loc 1 186 10 is_stmt 0 view .LVU67
 222 00f2 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 186:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference cloc
 223              		.loc 1 186 8 view .LVU68
 224 00f4 9207     		lsls	r2, r2, #30
 225 00f6 FCD5     		bpl	.L7
 226              	.L8:
 187:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected
 227              		.loc 1 187 46 is_stmt 1 view .LVU69
 187:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected
 228              		.loc 1 187 8 view .LVU70
 187:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected
 229              		.loc 1 187 10 is_stmt 0 view .LVU71
 230 00f8 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 187:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected
 231              		.loc 1 187 8 view .LVU72
 232 00fa D006     		lsls	r0, r2, #27
 233 00fc FCD4     		bmi	.L8
 188:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 234              		.loc 1 188 10 view .LVU73
 235 00fe 0E4B     		ldr	r3, .L27+4
 236 0100 1946     		mov	r1, r3
 237              	.L9:
 188:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 238              		.loc 1 188 34 is_stmt 1 view .LVU74
 188:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 239              		.loc 1 188 8 view .LVU75
 188:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 240              		.loc 1 188 10 is_stmt 0 view .LVU76
 241 0102 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
 188:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PBE Mode */
 242              		.loc 1 188 8 view .LVU77
 243 0104 02F00C02 		and	r2, r2, #12
 244 0108 082A     		cmp	r2, #8
 245 010a FAD1     		bne	.L9
 191:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);              /* Wait until external reference clock is selected 
 246              		.loc 1 191 3 is_stmt 1 view .LVU78
 191:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U);              /* Wait until external reference clock is selected 
 247              		.loc 1 191 10 is_stmt 0 view .LVU79
 248 010c 4022     		movs	r2, #64
 249 010e 5A71     		strb	r2, [r3, #5]
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 250              		.loc 1 192 3 is_stmt 1 view .LVU80
 251              	.L10:
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 252              		.loc 1 192 34 view .LVU81
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 253              		.loc 1 192 8 view .LVU82
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 254              		.loc 1 192 10 is_stmt 0 view .LVU83
 255 0110 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 192:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
 256              		.loc 1 192 8 view .LVU84
 257 0112 03F00C03 		and	r3, r3, #12
 258 0116 082B     		cmp	r3, #8
 259 0118 FAD1     		bne	.L10
 193:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 260              		.loc 1 193 10 view .LVU85
 261 011a 074B     		ldr	r3, .L27+4
 262 011c 1A46     		mov	r2, r3
 263              	.L11:
 193:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 264              		.loc 1 193 45 is_stmt 1 view .LVU86
 193:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 265              		.loc 1 193 8 view .LVU87
 193:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 266              		.loc 1 193 10 is_stmt 0 view .LVU88
 267 011e 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 193:hal/Landungsbruecke/freescale/Cpu.c ****   /* Switch to PEE Mode */
 268              		.loc 1 193 8 view .LVU89
 269 0120 4906     		lsls	r1, r1, #25
 270 0122 FCD5     		bpl	.L11
 196:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU);    /* Wait until output of the PLL is selected */
 271              		.loc 1 196 3 is_stmt 1 view .LVU90
 196:hal/Landungsbruecke/freescale/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU);    /* Wait until output of the PLL is selected */
 272              		.loc 1 196 10 is_stmt 0 view .LVU91
 273 0124 2221     		movs	r1, #34
 274 0126 1970     		strb	r1, [r3]
 197:hal/Landungsbruecke/freescale/Cpu.c **** }
 275              		.loc 1 197 3 is_stmt 1 view .LVU92
 276              	.L12:
 197:hal/Landungsbruecke/freescale/Cpu.c **** }
 277              		.loc 1 197 34 view .LVU93
 197:hal/Landungsbruecke/freescale/Cpu.c **** }
 278              		.loc 1 197 8 view .LVU94
 197:hal/Landungsbruecke/freescale/Cpu.c **** }
 279              		.loc 1 197 10 is_stmt 0 view .LVU95
 280 0128 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 197:hal/Landungsbruecke/freescale/Cpu.c **** }
 281              		.loc 1 197 8 view .LVU96
 282 012a 03F00C03 		and	r3, r3, #12
 283 012e 0C2B     		cmp	r3, #12
 284 0130 FAD1     		bne	.L12
 285              	.L4:
 286              	.LBE9:
 287              	.LBE8:
 198:hal/Landungsbruecke/freescale/Cpu.c **** 
 288              		.loc 1 198 1 view .LVU97
 289 0132 7047     		bx	lr
 290              	.L28:
 291              		.align	2
 292              	.L27:
 293 0134 00700440 		.word	1074032640
 294 0138 00400640 		.word	1074151424
 295 013c 00003301 		.word	20119552
 296 0140 00001301 		.word	18022400
 297 0144 00500640 		.word	1074155520
 298              		.cfi_endproc
 299              	.LFE2:
 301              		.align	1
 302              		.global	Cpu_INT_NMIInterrupt
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu softvfp
 308              	Cpu_INT_NMIInterrupt:
 309              	.LFB0:
 107:hal/Landungsbruecke/freescale/Cpu.c **** 
 310              		.loc 1 107 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ Stack Align: May be called with mis-aligned SP.
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 109:hal/Landungsbruecke/freescale/Cpu.c **** 
 315              		.loc 1 109 1 view .LVU99
 107:hal/Landungsbruecke/freescale/Cpu.c **** 
 316              		.loc 1 107 1 is_stmt 0 view .LVU100
 317 0148 6846     		mov	r0, sp
 318              		.cfi_register 13, 0
 319 014a 20F00701 		bic	r1, r0, #7
 320 014e 8D46     		mov	sp, r1
 321 0150 01B5     		push	{r0, lr}
 322              	.LCFI0:
 323              		.cfi_def_cfa_offset 8
 324              		.cfi_offset 13, -8
 325              		.cfi_offset 14, -4
 109:hal/Landungsbruecke/freescale/Cpu.c **** 
 326              		.loc 1 109 1 view .LVU101
 327 0152 BDE80140 		pop	{r0, lr}
 328              	.LCFI1:
 329              		.cfi_restore 14
 330              		.cfi_restore 0
 331              		.cfi_def_cfa_offset 0
 332 0156 8546     		mov	sp, r0
 333 0158 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE0:
 337              		.align	1
 338              		.global	Cpu_Interrupt
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 344              	Cpu_Interrupt:
 345              	.LFB1:
 121:hal/Landungsbruecke/freescale/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 346              		.loc 1 121 1 is_stmt 1 view -0
 347              		.cfi_startproc
 348              		@ Stack Align: May be called with mis-aligned SP.
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 123:hal/Landungsbruecke/freescale/Cpu.c **** }
 351              		.loc 1 123 3 view .LVU103
 121:hal/Landungsbruecke/freescale/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 352              		.loc 1 121 1 is_stmt 0 view .LVU104
 353 015a 6846     		mov	r0, sp
 354              		.cfi_register 13, 0
 355 015c 20F00701 		bic	r1, r0, #7
 356 0160 8D46     		mov	sp, r1
 357 0162 01B5     		push	{r0, lr}
 358              	.LCFI2:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 13, -8
 361              		.cfi_offset 14, -4
 123:hal/Landungsbruecke/freescale/Cpu.c **** }
 362              		.loc 1 123 3 view .LVU105
 363              		.syntax unified
 364              	@ 123 "hal/Landungsbruecke/freescale/Cpu.c" 1
 365 0164 FFBE     		BKPT 255
 366              	@ 0 "" 2
 124:hal/Landungsbruecke/freescale/Cpu.c **** 
 367              		.loc 1 124 1 view .LVU106
 368              		.thumb
 369              		.syntax unified
 370 0166 BDE80140 		pop	{r0, lr}
 371              	.LCFI3:
 372              		.cfi_restore 14
 373              		.cfi_restore 0
 374              		.cfi_def_cfa_offset 0
 375 016a 8546     		mov	sp, r0
 376 016c 7047     		bx	lr
 377              		.cfi_endproc
 378              	.LFE1:
 380              		.align	1
 381              		.global	Cpu_SetBASEPRI
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	Cpu_SetBASEPRI:
 388              	.LVL2:
 389              	.LFB3:
 213:hal/Landungsbruecke/freescale/Cpu.c ****   __asm ("msr basepri, %[input]"::[input] "r" (Level):);
 390              		.loc 1 213 35 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 214:hal/Landungsbruecke/freescale/Cpu.c **** }
 395              		.loc 1 214 3 view .LVU108
 396              		.syntax unified
 397              	@ 214 "hal/Landungsbruecke/freescale/Cpu.c" 1
 398 016e 80F31188 		msr basepri, r0
 399              	@ 0 "" 2
 215:hal/Landungsbruecke/freescale/Cpu.c **** #endif
 400              		.loc 1 215 1 is_stmt 0 view .LVU109
 401              		.thumb
 402              		.syntax unified
 403 0172 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE3:
 407              		.global	SR_lock
 408              		.comm	SR_reg,1,1
 409              		.global	Cpu
 410              		.data
 411              		.align	2
 414              	Cpu:
 415 0000 00000000 		.word	InitClocks
 416 0004 00000000 		.word	LowLevelInit
 417              		.bss
 420              	SR_lock:
 421 0000 00       		.space	1
 422              		.text
 423              	.Letext0:
 424              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 425              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 426              		.file 4 "TMC-API/tmc/helpers/Types.h"
 427              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 428              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 429              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 430              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 431              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 432              		.file 10 "hal/Landungsbruecke/freescale/MK20D10.h"
 433              		.file 11 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 434              		.file 12 "./hal/Landungsbruecke/freescale/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:23     .text:00000000 LowLevelInit
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:110    .text:00000060 $d
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:119    .text:00000078 $t
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:126    .text:00000078 InitClocks
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:293    .text:00000134 $d
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:301    .text:00000148 $t
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:308    .text:00000148 Cpu_INT_NMIInterrupt
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:344    .text:0000015a Cpu_Interrupt
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:387    .text:0000016e Cpu_SetBASEPRI
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:420    .bss:00000000 SR_lock
                            *COM*:00000001 SR_reg
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:414    .data:00000000 Cpu
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:411    .data:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\cc0zm5UV.s:421    .bss:00000000 $d

NO UNDEFINED SYMBOLS
