
_build_Landungsbruecke/Landungsbruecke_v3.07.15_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interrupts   000001bc  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00008400  00008400  00008400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00022e48  00008420  00008420  00008420  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM          00000008  0002b268  0002b268  0002b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0002b270  0002b270  0002b270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0002b278  0002b278  0002b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bldata       00000008  1fff0000  1fff0000  00040000  2**2
                  ALLOC
  7 .mtb          00000000  1fff0008  1fff0008  00036c3c  2**0
                  CONTENTS
  8 .data         0000106c  1fff0008  0002b27c  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a24  1fff1200  0002c600  00041200  2**9
                  ALLOC
 10 .romp         00000018  1fff6c24  0002c2e8  00036c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 ._user_heap_stack 00000800  1fff6c3c  0002c300  00036c3c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00036c3c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003c1c5  00000000  00000000  00036c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000e9ea7  00000000  00000000  00072e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00018d22  00000000  00000000  0015ccd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ca8  00000000  00000000  001759f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009936  00000000  00000000  001766a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00050114  00000000  00000000  0017ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  001d00ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087a8  00000000  00000000  001d0138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00001850  00000000  00000000  001d88e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00008420 <__do_global_dtors_aux>:
    8420:	b510      	push	{r4, lr}
    8422:	4c05      	ldr	r4, [pc, #20]	; (8438 <__do_global_dtors_aux+0x18>)
    8424:	7823      	ldrb	r3, [r4, #0]
    8426:	b933      	cbnz	r3, 8436 <__do_global_dtors_aux+0x16>
    8428:	4b04      	ldr	r3, [pc, #16]	; (843c <__do_global_dtors_aux+0x1c>)
    842a:	b113      	cbz	r3, 8432 <__do_global_dtors_aux+0x12>
    842c:	4804      	ldr	r0, [pc, #16]	; (8440 <__do_global_dtors_aux+0x20>)
    842e:	f3af 8000 	nop.w
    8432:	2301      	movs	r3, #1
    8434:	7023      	strb	r3, [r4, #0]
    8436:	bd10      	pop	{r4, pc}
    8438:	1fff1200 	.word	0x1fff1200
    843c:	00000000 	.word	0x00000000
    8440:	0002b250 	.word	0x0002b250

00008444 <frame_dummy>:
    8444:	b508      	push	{r3, lr}
    8446:	4b03      	ldr	r3, [pc, #12]	; (8454 <frame_dummy+0x10>)
    8448:	b11b      	cbz	r3, 8452 <frame_dummy+0xe>
    844a:	4903      	ldr	r1, [pc, #12]	; (8458 <frame_dummy+0x14>)
    844c:	4803      	ldr	r0, [pc, #12]	; (845c <frame_dummy+0x18>)
    844e:	f3af 8000 	nop.w
    8452:	bd08      	pop	{r3, pc}
    8454:	00000000 	.word	0x00000000
    8458:	1fff1204 	.word	0x1fff1204
    845c:	0002b250 	.word	0x0002b250

00008460 <deInit>:
	Evalboards.ch1.deInit        = deInit;
	Evalboards.ch1.periodicJob   = periodicJob;
}

static void deInit()
{
    8460:	b510      	push	{r4, lr}
	IDDetection_init();
    8462:	f016 fbe5 	bl	1ec30 <IDDetection_init>
	VitalSignsMonitor.debugMode = 0;
    8466:	4b06      	ldr	r3, [pc, #24]	; (8480 <deInit+0x20>)
    8468:	2200      	movs	r2, #0
    846a:	701a      	strb	r2, [r3, #0]
	IOMap.init();
    846c:	4b05      	ldr	r3, [pc, #20]	; (8484 <deInit+0x24>)
    846e:	681b      	ldr	r3, [r3, #0]
    8470:	4798      	blx	r3
	HAL.LEDs->error.off();
    8472:	4b05      	ldr	r3, [pc, #20]	; (8488 <deInit+0x28>)
    8474:	699b      	ldr	r3, [r3, #24]
}
    8476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL.LEDs->error.off();
    847a:	695b      	ldr	r3, [r3, #20]
    847c:	4718      	bx	r3
    847e:	bf00      	nop
    8480:	1fff0b34 	.word	0x1fff0b34
    8484:	1fff01b0 	.word	0x1fff01b0
    8488:	00029d1c 	.word	0x00029d1c

0000848c <selfTest>:

static uint32_t selfTest(uint8_t type, uint8_t motor, int32_t *value)  // Aufrufen des Selftest durch Command 143 , Type 3 und Value 0xFF00FF in dezimal => 16711935
{                                                              // LEDs blinken gleichmäßig
    848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8490:	4615      	mov	r5, r2
    8492:	1e42      	subs	r2, r0, #1
    8494:	460c      	mov	r4, r1
    8496:	2a07      	cmp	r2, #7
    8498:	f200 8254 	bhi.w	8944 <selfTest+0x4b8>
    849c:	e8df f012 	tbh	[pc, r2, lsl #1]
    84a0:	000e0008 	.word	0x000e0008
    84a4:	0052000e 	.word	0x0052000e
    84a8:	00be006e 	.word	0x00be006e
    84ac:	01b800fd 	.word	0x01b800fd
	// 1 40 1 0 0 10 C9 45 60 1 40 2 0 0 0 0 0 43 1 40 3 0 0 0 0 0 44

	switch(type)
	{
	case SELF_TEST_LEAVE:
		deInit();
    84b0:	f7ff ffd6 	bl	8460 <deInit>
		*value = 32168;
    84b4:	f647 53a8 	movw	r3, #32168	; 0x7da8
			break;
		case 2:
			*value = (unsigned int) (((*HAL.ADCs->AIN2)*50)>>16);  // fullscale @ 5V, 16Bit [V/10]
			break;
		case 3:
			*value = VitalSignsMonitor.VM;
    84b8:	602b      	str	r3, [r5, #0]
			break;
    84ba:	e03f      	b.n	853c <selfTest+0xb0>
		inGroup   = (type == SELF_TEST_A_OUT_B_IN) ? groupB : groupA;
    84bc:	4ca5      	ldr	r4, [pc, #660]	; (8754 <selfTest+0x2c8>)
    84be:	4aa6      	ldr	r2, [pc, #664]	; (8758 <selfTest+0x2cc>)
			HAL.IOs->config->toInput(inGroup[i]);
    84c0:	4ba6      	ldr	r3, [pc, #664]	; (875c <selfTest+0x2d0>)
		inGroup   = (type == SELF_TEST_A_OUT_B_IN) ? groupB : groupA;
    84c2:	2802      	cmp	r0, #2
    84c4:	bf0a      	itet	eq
    84c6:	46a1      	moveq	r9, r4
    84c8:	4691      	movne	r9, r2
    84ca:	4614      	moveq	r4, r2
			HAL.IOs->config->toInput(inGroup[i]);
    84cc:	68df      	ldr	r7, [r3, #12]
    84ce:	f1a9 0904 	sub.w	r9, r9, #4
    84d2:	3c04      	subs	r4, #4
	uint32_t result = 0xFFFFFFFF;
    84d4:	f04f 36ff 	mov.w	r6, #4294967295
		for(i = 0; i < SELF_TEST_PINS_PER_GROUP; i++)
    84d8:	f04f 0800 	mov.w	r8, #0
				result &= (unsigned int) (~(1<<i));
    84dc:	f04f 0a01 	mov.w	sl, #1
			HAL.IOs->config->toInput(inGroup[i]);
    84e0:	683b      	ldr	r3, [r7, #0]
    84e2:	f859 0f04 	ldr.w	r0, [r9, #4]!
    84e6:	691b      	ldr	r3, [r3, #16]
    84e8:	4798      	blx	r3
			HAL.IOs->config->toOutput(outGroup[i]);
    84ea:	683b      	ldr	r3, [r7, #0]
    84ec:	f854 0f04 	ldr.w	r0, [r4, #4]!
    84f0:	68db      	ldr	r3, [r3, #12]
    84f2:	4798      	blx	r3
			HAL.IOs->config->setHigh(outGroup[i]);
    84f4:	683b      	ldr	r3, [r7, #0]
    84f6:	6820      	ldr	r0, [r4, #0]
    84f8:	695b      	ldr	r3, [r3, #20]
    84fa:	4798      	blx	r3
			if(!HAL.IOs->config->isHigh(inGroup[i]))
    84fc:	683b      	ldr	r3, [r7, #0]
    84fe:	f8d9 0000 	ldr.w	r0, [r9]
    8502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8504:	4798      	blx	r3
    8506:	b918      	cbnz	r0, 8510 <selfTest+0x84>
				result &= (unsigned int) (~(1<<i));
    8508:	fa0a f308 	lsl.w	r3, sl, r8
    850c:	ea26 0603 	bic.w	r6, r6, r3
			HAL.IOs->config->setLow(outGroup[i]);
    8510:	683b      	ldr	r3, [r7, #0]
    8512:	6820      	ldr	r0, [r4, #0]
    8514:	699b      	ldr	r3, [r3, #24]
    8516:	4798      	blx	r3
			if(HAL.IOs->config->isHigh(inGroup[i]))
    8518:	683b      	ldr	r3, [r7, #0]
    851a:	f8d9 0000 	ldr.w	r0, [r9]
    851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8520:	4798      	blx	r3
    8522:	b118      	cbz	r0, 852c <selfTest+0xa0>
				result &= (unsigned int) (~(1<<i));
    8524:	fa0a f308 	lsl.w	r3, sl, r8
    8528:	ea26 0603 	bic.w	r6, r6, r3
		for(i = 0; i < SELF_TEST_PINS_PER_GROUP; i++)
    852c:	f108 0801 	add.w	r8, r8, #1
    8530:	f1b8 0f11 	cmp.w	r8, #17
    8534:	d1d4      	bne.n	84e0 <selfTest+0x54>
		result &= ((1<<SELF_TEST_PINS_PER_GROUP) - 1);
    8536:	f3c6 0610 	ubfx	r6, r6, #0, #17
		*value	= result;
    853a:	602e      	str	r6, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
    853c:	2400      	movs	r4, #0
		errors |= TMC_ERROR_TYPE;
		break;
	}

	return errors;
}
    853e:	4620      	mov	r0, r4
    8540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*value = motor;
    8544:	602c      	str	r4, [r5, #0]
		switch(motor)
    8546:	2c03      	cmp	r4, #3
    8548:	f200 80ab 	bhi.w	86a2 <selfTest+0x216>
    854c:	e8df f004 	tbb	[pc, r4]
    8550:	130f0b02 	.word	0x130f0b02
			*value = (unsigned int) (((*HAL.ADCs->AIN0)*50)>>16);  // fullscale @ 5V, 16Bit [V/10]
    8554:	4b81      	ldr	r3, [pc, #516]	; (875c <selfTest+0x2d0>)
    8556:	69db      	ldr	r3, [r3, #28]
    8558:	681b      	ldr	r3, [r3, #0]
			*value = (unsigned int) (((*HAL.ADCs->AIN1)*50)>>16);  // fullscale @ 5V, 16Bit [V/10]
    855a:	881b      	ldrh	r3, [r3, #0]
    855c:	b29a      	uxth	r2, r3
    855e:	2332      	movs	r3, #50	; 0x32
    8560:	4353      	muls	r3, r2
    8562:	141b      	asrs	r3, r3, #16
    8564:	e7a8      	b.n	84b8 <selfTest+0x2c>
    8566:	4b7d      	ldr	r3, [pc, #500]	; (875c <selfTest+0x2d0>)
    8568:	69db      	ldr	r3, [r3, #28]
    856a:	685b      	ldr	r3, [r3, #4]
    856c:	e7f5      	b.n	855a <selfTest+0xce>
			*value = (unsigned int) (((*HAL.ADCs->AIN2)*50)>>16);  // fullscale @ 5V, 16Bit [V/10]
    856e:	4b7b      	ldr	r3, [pc, #492]	; (875c <selfTest+0x2d0>)
    8570:	69db      	ldr	r3, [r3, #28]
    8572:	689b      	ldr	r3, [r3, #8]
    8574:	e7f1      	b.n	855a <selfTest+0xce>
			*value = VitalSignsMonitor.VM;
    8576:	4b7a      	ldr	r3, [pc, #488]	; (8760 <selfTest+0x2d4>)
    8578:	691b      	ldr	r3, [r3, #16]
    857a:	e79d      	b.n	84b8 <selfTest+0x2c>
		*value = motor;
    857c:	2c01      	cmp	r4, #1
    857e:	602c      	str	r4, [r5, #0]
		switch(motor)
    8580:	d01b      	beq.n	85ba <selfTest+0x12e>
    8582:	2c02      	cmp	r4, #2
    8584:	d030      	beq.n	85e8 <selfTest+0x15c>
    8586:	2c00      	cmp	r4, #0
    8588:	f040 808b 	bne.w	86a2 <selfTest+0x216>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO0);
    858c:	4b73      	ldr	r3, [pc, #460]	; (875c <selfTest+0x2d0>)
    858e:	68dd      	ldr	r5, [r3, #12]
    8590:	e9d5 3000 	ldrd	r3, r0, [r5]
    8594:	68db      	ldr	r3, [r3, #12]
    8596:	3068      	adds	r0, #104	; 0x68
    8598:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO1);
    859a:	e9d5 3000 	ldrd	r3, r0, [r5]
    859e:	68db      	ldr	r3, [r3, #12]
    85a0:	3088      	adds	r0, #136	; 0x88
    85a2:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO0);
    85a4:	e9d5 3000 	ldrd	r3, r0, [r5]
    85a8:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->toInput(&HAL.IOs->pins->DIO0);
    85aa:	3068      	adds	r0, #104	; 0x68
    85ac:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO1);
    85ae:	e9d5 3000 	ldrd	r3, r0, [r5]
    85b2:	695b      	ldr	r3, [r3, #20]
    85b4:	3088      	adds	r0, #136	; 0x88
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_7);
    85b6:	4798      	blx	r3
			break;
    85b8:	e7c1      	b.n	853e <selfTest+0xb2>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO3);
    85ba:	4b68      	ldr	r3, [pc, #416]	; (875c <selfTest+0x2d0>)
    85bc:	68dc      	ldr	r4, [r3, #12]
    85be:	e9d4 3000 	ldrd	r3, r0, [r4]
    85c2:	68db      	ldr	r3, [r3, #12]
    85c4:	30c8      	adds	r0, #200	; 0xc8
    85c6:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO2);
    85c8:	e9d4 3000 	ldrd	r3, r0, [r4]
    85cc:	68db      	ldr	r3, [r3, #12]
    85ce:	30a8      	adds	r0, #168	; 0xa8
    85d0:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO3);
    85d2:	e9d4 3000 	ldrd	r3, r0, [r4]
    85d6:	695b      	ldr	r3, [r3, #20]
    85d8:	30c8      	adds	r0, #200	; 0xc8
    85da:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO2);
    85dc:	e9d4 3000 	ldrd	r3, r0, [r4]
    85e0:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->setLow(&HAL.IOs->pins->DIO2);
    85e2:	30a8      	adds	r0, #168	; 0xa8
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_7);
    85e4:	4798      	blx	r3
			break;
    85e6:	e7a9      	b.n	853c <selfTest+0xb0>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO7);
    85e8:	4b5c      	ldr	r3, [pc, #368]	; (875c <selfTest+0x2d0>)
    85ea:	68dc      	ldr	r4, [r3, #12]
    85ec:	e9d4 3000 	ldrd	r3, r0, [r4]
    85f0:	68db      	ldr	r3, [r3, #12]
    85f2:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    85f6:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO8);
    85f8:	e9d4 3000 	ldrd	r3, r0, [r4]
    85fc:	68db      	ldr	r3, [r3, #12]
    85fe:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    8602:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO7);
    8604:	e9d4 3000 	ldrd	r3, r0, [r4]
    8608:	695b      	ldr	r3, [r3, #20]
    860a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    860e:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO8);
    8610:	e9d4 3000 	ldrd	r3, r0, [r4]
    8614:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->setLow(&HAL.IOs->pins->DIO8);
    8616:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    861a:	e7e3      	b.n	85e4 <selfTest+0x158>
		*value = motor;
    861c:	2c01      	cmp	r4, #1
    861e:	602c      	str	r4, [r5, #0]
		switch(motor)
    8620:	d00e      	beq.n	8640 <selfTest+0x1b4>
    8622:	2c02      	cmp	r4, #2
    8624:	d021      	beq.n	866a <selfTest+0x1de>
    8626:	2c00      	cmp	r4, #0
    8628:	d13b      	bne.n	86a2 <selfTest+0x216>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO1);
    862a:	4b4c      	ldr	r3, [pc, #304]	; (875c <selfTest+0x2d0>)
    862c:	68dd      	ldr	r5, [r3, #12]
    862e:	e9d5 3000 	ldrd	r3, r0, [r5]
    8632:	68db      	ldr	r3, [r3, #12]
    8634:	3088      	adds	r0, #136	; 0x88
    8636:	4798      	blx	r3
			HAL.IOs->config->toInput(&HAL.IOs->pins->DIO0);
    8638:	e9d5 3000 	ldrd	r3, r0, [r5]
    863c:	691b      	ldr	r3, [r3, #16]
    863e:	e7b4      	b.n	85aa <selfTest+0x11e>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO3);
    8640:	4b46      	ldr	r3, [pc, #280]	; (875c <selfTest+0x2d0>)
    8642:	68dc      	ldr	r4, [r3, #12]
    8644:	e9d4 3000 	ldrd	r3, r0, [r4]
    8648:	68db      	ldr	r3, [r3, #12]
    864a:	30c8      	adds	r0, #200	; 0xc8
    864c:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO2);
    864e:	e9d4 3000 	ldrd	r3, r0, [r4]
    8652:	68db      	ldr	r3, [r3, #12]
    8654:	30a8      	adds	r0, #168	; 0xa8
    8656:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO3);
    8658:	e9d4 3000 	ldrd	r3, r0, [r4]
    865c:	695b      	ldr	r3, [r3, #20]
    865e:	30c8      	adds	r0, #200	; 0xc8
    8660:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->DIO2);
    8662:	e9d4 3000 	ldrd	r3, r0, [r4]
    8666:	699b      	ldr	r3, [r3, #24]
    8668:	e7bb      	b.n	85e2 <selfTest+0x156>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO7);
    866a:	4b3c      	ldr	r3, [pc, #240]	; (875c <selfTest+0x2d0>)
    866c:	68dc      	ldr	r4, [r3, #12]
    866e:	e9d4 3000 	ldrd	r3, r0, [r4]
    8672:	68db      	ldr	r3, [r3, #12]
    8674:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    8678:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO8);
    867a:	e9d4 3000 	ldrd	r3, r0, [r4]
    867e:	68db      	ldr	r3, [r3, #12]
    8680:	f500 70b4 	add.w	r0, r0, #360	; 0x168
    8684:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO7);
    8686:	e9d4 3000 	ldrd	r3, r0, [r4]
    868a:	695b      	ldr	r3, [r3, #20]
    868c:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    8690:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->DIO8);
    8692:	e9d4 3000 	ldrd	r3, r0, [r4]
    8696:	699b      	ldr	r3, [r3, #24]
    8698:	e7bd      	b.n	8616 <selfTest+0x18a>
		*value = motor;
    869a:	602c      	str	r4, [r5, #0]
		switch(motor)
    869c:	b11c      	cbz	r4, 86a6 <selfTest+0x21a>
    869e:	2c01      	cmp	r4, #1
    86a0:	d060      	beq.n	8764 <selfTest+0x2d8>
			errors |= TMC_ERROR_FUNCTION;
    86a2:	2402      	movs	r4, #2
    86a4:	e74b      	b.n	853e <selfTest+0xb2>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED0);
    86a6:	4b2d      	ldr	r3, [pc, #180]	; (875c <selfTest+0x2d0>)
    86a8:	68dd      	ldr	r5, [r3, #12]
    86aa:	e9d5 3000 	ldrd	r3, r0, [r5]
    86ae:	68db      	ldr	r3, [r3, #12]
    86b0:	f500 60d9 	add.w	r0, r0, #1736	; 0x6c8
    86b4:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED0);
    86b6:	e9d5 3000 	ldrd	r3, r0, [r5]
    86ba:	695b      	ldr	r3, [r3, #20]
    86bc:	f500 60d9 	add.w	r0, r0, #1736	; 0x6c8
    86c0:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED1);
    86c2:	e9d5 3000 	ldrd	r3, r0, [r5]
    86c6:	68db      	ldr	r3, [r3, #12]
    86c8:	f500 60dd 	add.w	r0, r0, #1768	; 0x6e8
    86cc:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED1);
    86ce:	e9d5 3000 	ldrd	r3, r0, [r5]
    86d2:	695b      	ldr	r3, [r3, #20]
    86d4:	f500 60dd 	add.w	r0, r0, #1768	; 0x6e8
    86d8:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED2);
    86da:	e9d5 3000 	ldrd	r3, r0, [r5]
    86de:	68db      	ldr	r3, [r3, #12]
    86e0:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
    86e4:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED2);
    86e6:	e9d5 3000 	ldrd	r3, r0, [r5]
    86ea:	695b      	ldr	r3, [r3, #20]
    86ec:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
    86f0:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED3);
    86f2:	e9d5 3000 	ldrd	r3, r0, [r5]
    86f6:	68db      	ldr	r3, [r3, #12]
    86f8:	f500 60e5 	add.w	r0, r0, #1832	; 0x728
    86fc:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED3);
    86fe:	e9d5 3000 	ldrd	r3, r0, [r5]
    8702:	695b      	ldr	r3, [r3, #20]
    8704:	f500 60e5 	add.w	r0, r0, #1832	; 0x728
    8708:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED4);
    870a:	e9d5 3000 	ldrd	r3, r0, [r5]
    870e:	68db      	ldr	r3, [r3, #12]
    8710:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    8714:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED4);
    8716:	e9d5 3000 	ldrd	r3, r0, [r5]
    871a:	695b      	ldr	r3, [r3, #20]
    871c:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    8720:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED5);
    8722:	e9d5 3000 	ldrd	r3, r0, [r5]
    8726:	68db      	ldr	r3, [r3, #12]
    8728:	f500 60ed 	add.w	r0, r0, #1896	; 0x768
    872c:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED5);
    872e:	e9d5 3000 	ldrd	r3, r0, [r5]
    8732:	695b      	ldr	r3, [r3, #20]
    8734:	f500 60ed 	add.w	r0, r0, #1896	; 0x768
    8738:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED6);
    873a:	e9d5 3000 	ldrd	r3, r0, [r5]
    873e:	68db      	ldr	r3, [r3, #12]
    8740:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
    8744:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->MIXED6);
    8746:	e9d5 3000 	ldrd	r3, r0, [r5]
    874a:	695b      	ldr	r3, [r3, #20]
    874c:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
    8750:	e731      	b.n	85b6 <selfTest+0x12a>
    8752:	bf00      	nop
    8754:	1fff5f80 	.word	0x1fff5f80
    8758:	1fff5e44 	.word	0x1fff5e44
    875c:	00029d1c 	.word	0x00029d1c
    8760:	1fff0b34 	.word	0x1fff0b34
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED0);
    8764:	4b78      	ldr	r3, [pc, #480]	; (8948 <selfTest+0x4bc>)
    8766:	68dc      	ldr	r4, [r3, #12]
    8768:	e9d4 3000 	ldrd	r3, r0, [r4]
    876c:	68db      	ldr	r3, [r3, #12]
    876e:	f500 60d9 	add.w	r0, r0, #1736	; 0x6c8
    8772:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED0);
    8774:	e9d4 3000 	ldrd	r3, r0, [r4]
    8778:	699b      	ldr	r3, [r3, #24]
    877a:	f500 60d9 	add.w	r0, r0, #1736	; 0x6c8
    877e:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED1);
    8780:	e9d4 3000 	ldrd	r3, r0, [r4]
    8784:	68db      	ldr	r3, [r3, #12]
    8786:	f500 60dd 	add.w	r0, r0, #1768	; 0x6e8
    878a:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED1);
    878c:	e9d4 3000 	ldrd	r3, r0, [r4]
    8790:	699b      	ldr	r3, [r3, #24]
    8792:	f500 60dd 	add.w	r0, r0, #1768	; 0x6e8
    8796:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED2);
    8798:	e9d4 3000 	ldrd	r3, r0, [r4]
    879c:	68db      	ldr	r3, [r3, #12]
    879e:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
    87a2:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED2);
    87a4:	e9d4 3000 	ldrd	r3, r0, [r4]
    87a8:	699b      	ldr	r3, [r3, #24]
    87aa:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
    87ae:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED3);
    87b0:	e9d4 3000 	ldrd	r3, r0, [r4]
    87b4:	68db      	ldr	r3, [r3, #12]
    87b6:	f500 60e5 	add.w	r0, r0, #1832	; 0x728
    87ba:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED3);
    87bc:	e9d4 3000 	ldrd	r3, r0, [r4]
    87c0:	699b      	ldr	r3, [r3, #24]
    87c2:	f500 60e5 	add.w	r0, r0, #1832	; 0x728
    87c6:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED4);
    87c8:	e9d4 3000 	ldrd	r3, r0, [r4]
    87cc:	68db      	ldr	r3, [r3, #12]
    87ce:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    87d2:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED4);
    87d4:	e9d4 3000 	ldrd	r3, r0, [r4]
    87d8:	699b      	ldr	r3, [r3, #24]
    87da:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    87de:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED5);
    87e0:	e9d4 3000 	ldrd	r3, r0, [r4]
    87e4:	68db      	ldr	r3, [r3, #12]
    87e6:	f500 60ed 	add.w	r0, r0, #1896	; 0x768
    87ea:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED5);
    87ec:	e9d4 3000 	ldrd	r3, r0, [r4]
    87f0:	699b      	ldr	r3, [r3, #24]
    87f2:	f500 60ed 	add.w	r0, r0, #1896	; 0x768
    87f6:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED6);
    87f8:	e9d4 3000 	ldrd	r3, r0, [r4]
    87fc:	68db      	ldr	r3, [r3, #12]
    87fe:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
    8802:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED6);
    8804:	e9d4 3000 	ldrd	r3, r0, [r4]
    8808:	699b      	ldr	r3, [r3, #24]
    880a:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
    880e:	e6e9      	b.n	85e4 <selfTest+0x158>
		*value = motor;
    8810:	602c      	str	r4, [r5, #0]
		switch(motor)
    8812:	2c00      	cmp	r4, #0
    8814:	d04c      	beq.n	88b0 <selfTest+0x424>
    8816:	2c01      	cmp	r4, #1
    8818:	f47f af43 	bne.w	86a2 <selfTest+0x216>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_2);
    881c:	4b4a      	ldr	r3, [pc, #296]	; (8948 <selfTest+0x4bc>)
    881e:	68dc      	ldr	r4, [r3, #12]
    8820:	e9d4 3000 	ldrd	r3, r0, [r4]
    8824:	68db      	ldr	r3, [r3, #12]
    8826:	f500 60b1 	add.w	r0, r0, #1416	; 0x588
    882a:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_2);
    882c:	e9d4 3000 	ldrd	r3, r0, [r4]
    8830:	699b      	ldr	r3, [r3, #24]
    8832:	f500 60b1 	add.w	r0, r0, #1416	; 0x588
    8836:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_3);
    8838:	e9d4 3000 	ldrd	r3, r0, [r4]
    883c:	68db      	ldr	r3, [r3, #12]
    883e:	f500 60b5 	add.w	r0, r0, #1448	; 0x5a8
    8842:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_3);
    8844:	e9d4 3000 	ldrd	r3, r0, [r4]
    8848:	699b      	ldr	r3, [r3, #24]
    884a:	f500 60b5 	add.w	r0, r0, #1448	; 0x5a8
    884e:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_4);
    8850:	e9d4 3000 	ldrd	r3, r0, [r4]
    8854:	68db      	ldr	r3, [r3, #12]
    8856:	f500 60b9 	add.w	r0, r0, #1480	; 0x5c8
    885a:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_4);
    885c:	e9d4 3000 	ldrd	r3, r0, [r4]
    8860:	699b      	ldr	r3, [r3, #24]
    8862:	f500 60b9 	add.w	r0, r0, #1480	; 0x5c8
    8866:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_5);
    8868:	e9d4 3000 	ldrd	r3, r0, [r4]
    886c:	68db      	ldr	r3, [r3, #12]
    886e:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
    8872:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_5);
    8874:	e9d4 3000 	ldrd	r3, r0, [r4]
    8878:	699b      	ldr	r3, [r3, #24]
    887a:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
    887e:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_6);
    8880:	e9d4 3000 	ldrd	r3, r0, [r4]
    8884:	68db      	ldr	r3, [r3, #12]
    8886:	f500 60c1 	add.w	r0, r0, #1544	; 0x608
    888a:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_6);
    888c:	e9d4 3000 	ldrd	r3, r0, [r4]
    8890:	699b      	ldr	r3, [r3, #24]
    8892:	f500 60c1 	add.w	r0, r0, #1544	; 0x608
    8896:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_7);
    8898:	e9d4 3000 	ldrd	r3, r0, [r4]
    889c:	68db      	ldr	r3, [r3, #12]
    889e:	f500 60c5 	add.w	r0, r0, #1576	; 0x628
    88a2:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->EXTIO_7);
    88a4:	e9d4 3000 	ldrd	r3, r0, [r4]
    88a8:	699b      	ldr	r3, [r3, #24]
    88aa:	f500 60c5 	add.w	r0, r0, #1576	; 0x628
    88ae:	e699      	b.n	85e4 <selfTest+0x158>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_2);
    88b0:	4b25      	ldr	r3, [pc, #148]	; (8948 <selfTest+0x4bc>)
    88b2:	68dd      	ldr	r5, [r3, #12]
    88b4:	e9d5 3000 	ldrd	r3, r0, [r5]
    88b8:	68db      	ldr	r3, [r3, #12]
    88ba:	f500 60b1 	add.w	r0, r0, #1416	; 0x588
    88be:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_2);
    88c0:	e9d5 3000 	ldrd	r3, r0, [r5]
    88c4:	695b      	ldr	r3, [r3, #20]
    88c6:	f500 60b1 	add.w	r0, r0, #1416	; 0x588
    88ca:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_3);
    88cc:	e9d5 3000 	ldrd	r3, r0, [r5]
    88d0:	68db      	ldr	r3, [r3, #12]
    88d2:	f500 60b5 	add.w	r0, r0, #1448	; 0x5a8
    88d6:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_3);
    88d8:	e9d5 3000 	ldrd	r3, r0, [r5]
    88dc:	695b      	ldr	r3, [r3, #20]
    88de:	f500 60b5 	add.w	r0, r0, #1448	; 0x5a8
    88e2:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_4);
    88e4:	e9d5 3000 	ldrd	r3, r0, [r5]
    88e8:	68db      	ldr	r3, [r3, #12]
    88ea:	f500 60b9 	add.w	r0, r0, #1480	; 0x5c8
    88ee:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_4);
    88f0:	e9d5 3000 	ldrd	r3, r0, [r5]
    88f4:	695b      	ldr	r3, [r3, #20]
    88f6:	f500 60b9 	add.w	r0, r0, #1480	; 0x5c8
    88fa:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_5);
    88fc:	e9d5 3000 	ldrd	r3, r0, [r5]
    8900:	68db      	ldr	r3, [r3, #12]
    8902:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
    8906:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_5);
    8908:	e9d5 3000 	ldrd	r3, r0, [r5]
    890c:	695b      	ldr	r3, [r3, #20]
    890e:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
    8912:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_6);
    8914:	e9d5 3000 	ldrd	r3, r0, [r5]
    8918:	68db      	ldr	r3, [r3, #12]
    891a:	f500 60c1 	add.w	r0, r0, #1544	; 0x608
    891e:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_6);
    8920:	e9d5 3000 	ldrd	r3, r0, [r5]
    8924:	695b      	ldr	r3, [r3, #20]
    8926:	f500 60c1 	add.w	r0, r0, #1544	; 0x608
    892a:	4798      	blx	r3
			HAL.IOs->config->toOutput(&HAL.IOs->pins->EXTIO_7);
    892c:	e9d5 3000 	ldrd	r3, r0, [r5]
    8930:	68db      	ldr	r3, [r3, #12]
    8932:	f500 60c5 	add.w	r0, r0, #1576	; 0x628
    8936:	4798      	blx	r3
			HAL.IOs->config->setHigh(&HAL.IOs->pins->EXTIO_7);
    8938:	e9d5 3000 	ldrd	r3, r0, [r5]
    893c:	695b      	ldr	r3, [r3, #20]
    893e:	f500 60c5 	add.w	r0, r0, #1576	; 0x628
    8942:	e638      	b.n	85b6 <selfTest+0x12a>
	uint32_t errors = TMC_ERROR_NONE;
    8944:	2404      	movs	r4, #4
	return errors;
    8946:	e5fa      	b.n	853e <selfTest+0xb2>
    8948:	00029d1c 	.word	0x00029d1c

0000894c <periodicJob>:

static void periodicJob(uint32_t tick)
{
    894c:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastTick = 0;

	if((tick - lastTick) >= 500)
    894e:	4d06      	ldr	r5, [pc, #24]	; (8968 <periodicJob+0x1c>)
    8950:	682b      	ldr	r3, [r5, #0]
    8952:	1ac3      	subs	r3, r0, r3
    8954:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
{
    8958:	4604      	mov	r4, r0
	if((tick - lastTick) >= 500)
    895a:	d304      	bcc.n	8966 <periodicJob+0x1a>
	{
		HAL.LEDs->error.toggle();
    895c:	4b03      	ldr	r3, [pc, #12]	; (896c <periodicJob+0x20>)
    895e:	699b      	ldr	r3, [r3, #24]
    8960:	699b      	ldr	r3, [r3, #24]
    8962:	4798      	blx	r3
		lastTick = tick;
    8964:	602c      	str	r4, [r5, #0]
	}
}
    8966:	bd38      	pop	{r3, r4, r5, pc}
    8968:	1fff121c 	.word	0x1fff121c
    896c:	00029d1c 	.word	0x00029d1c

00008970 <SelfTest_init>:
	groupA[0]   = &HAL.IOs->pins->DIO6;
    8970:	4b3a      	ldr	r3, [pc, #232]	; (8a5c <SelfTest_init+0xec>)
    8972:	4a3b      	ldr	r2, [pc, #236]	; (8a60 <SelfTest_init+0xf0>)
    8974:	68db      	ldr	r3, [r3, #12]
    8976:	685b      	ldr	r3, [r3, #4]
    8978:	f503 7194 	add.w	r1, r3, #296	; 0x128
    897c:	6011      	str	r1, [r2, #0]
	groupA[1]   = &HAL.IOs->pins->ID_CH1;
    897e:	f103 0148 	add.w	r1, r3, #72	; 0x48
    8982:	6051      	str	r1, [r2, #4]
	groupA[2]   = &HAL.IOs->pins->DIO1;
    8984:	f103 0188 	add.w	r1, r3, #136	; 0x88
    8988:	6091      	str	r1, [r2, #8]
	groupA[3]   = &HAL.IOs->pins->DIO3;
    898a:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
    898e:	60d1      	str	r1, [r2, #12]
	groupA[4]   = &HAL.IOs->pins->DIO5;
    8990:	f503 7184 	add.w	r1, r3, #264	; 0x108
    8994:	6111      	str	r1, [r2, #16]
	groupA[5]   = &HAL.IOs->pins->DIO8;
    8996:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    899a:	6151      	str	r1, [r2, #20]
	groupA[6]   = &HAL.IOs->pins->DIO10;
    899c:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
    89a0:	6191      	str	r1, [r2, #24]
	groupA[7]   = &HAL.IOs->pins->CLK16;
    89a2:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
    89a6:	61d1      	str	r1, [r2, #28]
	groupA[8]   = &HAL.IOs->pins->SPI2_CSN1;
    89a8:	f503 710a 	add.w	r1, r3, #552	; 0x228
    89ac:	6211      	str	r1, [r2, #32]
	groupA[9]   = &HAL.IOs->pins->SPI2_SCK;
    89ae:	f503 711a 	add.w	r1, r3, #616	; 0x268
    89b2:	6251      	str	r1, [r2, #36]	; 0x24
	groupA[10]  = &HAL.IOs->pins->SPI2_SDI;
    89b4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
    89b8:	6291      	str	r1, [r2, #40]	; 0x28
	groupA[11]  = &HAL.IOs->pins->SPI1_SCK;
    89ba:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
    89be:	62d1      	str	r1, [r2, #44]	; 0x2c
	groupA[12]  = &HAL.IOs->pins->SPI1_SDO;
    89c0:	f503 714a 	add.w	r1, r3, #808	; 0x328
    89c4:	6311      	str	r1, [r2, #48]	; 0x30
	groupA[13]  = &HAL.IOs->pins->DIO13;
    89c6:	f503 715a 	add.w	r1, r3, #872	; 0x368
    89ca:	6351      	str	r1, [r2, #52]	; 0x34
	groupA[14]  = &HAL.IOs->pins->DIO15;
    89cc:	f503 716a 	add.w	r1, r3, #936	; 0x3a8
    89d0:	6391      	str	r1, [r2, #56]	; 0x38
	groupA[15]  = &HAL.IOs->pins->DIO17;
    89d2:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
    89d6:	63d1      	str	r1, [r2, #60]	; 0x3c
	groupA[16]  = &HAL.IOs->pins->DIO19;
    89d8:	f503 6185 	add.w	r1, r3, #1064	; 0x428
    89dc:	6411      	str	r1, [r2, #64]	; 0x40
	groupB[0]   = &HAL.IOs->pins->ID_CLK;
    89de:	4a21      	ldr	r2, [pc, #132]	; (8a64 <SelfTest_init+0xf4>)
    89e0:	f103 0108 	add.w	r1, r3, #8
    89e4:	6011      	str	r1, [r2, #0]
	groupB[1]   = &HAL.IOs->pins->ID_CH0;
    89e6:	f103 0128 	add.w	r1, r3, #40	; 0x28
    89ea:	6051      	str	r1, [r2, #4]
	groupB[2]   = &HAL.IOs->pins->DIO0;
    89ec:	f103 0168 	add.w	r1, r3, #104	; 0x68
    89f0:	6091      	str	r1, [r2, #8]
	groupB[3]   = &HAL.IOs->pins->DIO2;
    89f2:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
    89f6:	60d1      	str	r1, [r2, #12]
	groupB[4]   = &HAL.IOs->pins->DIO4;
    89f8:	f103 01e8 	add.w	r1, r3, #232	; 0xe8
    89fc:	6111      	str	r1, [r2, #16]
	groupB[5]   = &HAL.IOs->pins->DIO7;
    89fe:	f503 71a4 	add.w	r1, r3, #328	; 0x148
    8a02:	6151      	str	r1, [r2, #20]
	groupB[6]   = &HAL.IOs->pins->DIO9;
    8a04:	f503 71c4 	add.w	r1, r3, #392	; 0x188
    8a08:	6191      	str	r1, [r2, #24]
	groupB[7]   = &HAL.IOs->pins->DIO11;
    8a0a:	f503 71e4 	add.w	r1, r3, #456	; 0x1c8
    8a0e:	61d1      	str	r1, [r2, #28]
	groupB[8]   = &HAL.IOs->pins->SPI2_CSN0;
    8a10:	f503 7102 	add.w	r1, r3, #520	; 0x208
    8a14:	6211      	str	r1, [r2, #32]
	groupB[9]   = &HAL.IOs->pins->SPI2_CSN2;
    8a16:	f503 7112 	add.w	r1, r3, #584	; 0x248
    8a1a:	6251      	str	r1, [r2, #36]	; 0x24
	groupB[10]  = &HAL.IOs->pins->SPI2_SDO;
    8a1c:	f503 7122 	add.w	r1, r3, #648	; 0x288
    8a20:	6291      	str	r1, [r2, #40]	; 0x28
	groupB[11]  = &HAL.IOs->pins->SPI1_CSN;
    8a22:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
    8a26:	62d1      	str	r1, [r2, #44]	; 0x2c
	groupB[12]  = &HAL.IOs->pins->SPI1_SDI;
    8a28:	f503 7142 	add.w	r1, r3, #776	; 0x308
    8a2c:	6311      	str	r1, [r2, #48]	; 0x30
	groupB[13]  = &HAL.IOs->pins->DIO12;
    8a2e:	f503 7152 	add.w	r1, r3, #840	; 0x348
    8a32:	6351      	str	r1, [r2, #52]	; 0x34
	groupB[14]  = &HAL.IOs->pins->DIO14;
    8a34:	f503 7162 	add.w	r1, r3, #904	; 0x388
    8a38:	6391      	str	r1, [r2, #56]	; 0x38
	groupB[15]  = &HAL.IOs->pins->DIO16;
    8a3a:	f503 7172 	add.w	r1, r3, #968	; 0x3c8
	groupB[16]  = &HAL.IOs->pins->DIO18;
    8a3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    8a42:	6413      	str	r3, [r2, #64]	; 0x40
	VitalSignsMonitor.debugMode = 1;
    8a44:	4b08      	ldr	r3, [pc, #32]	; (8a68 <SelfTest_init+0xf8>)
	groupB[15]  = &HAL.IOs->pins->DIO16;
    8a46:	63d1      	str	r1, [r2, #60]	; 0x3c
	VitalSignsMonitor.debugMode = 1;
    8a48:	2201      	movs	r2, #1
    8a4a:	701a      	strb	r2, [r3, #0]
	Evalboards.ch1.userFunction  = selfTest;
    8a4c:	4b07      	ldr	r3, [pc, #28]	; (8a6c <SelfTest_init+0xfc>)
    8a4e:	4a08      	ldr	r2, [pc, #32]	; (8a70 <SelfTest_init+0x100>)
    8a50:	655a      	str	r2, [r3, #84]	; 0x54
	Evalboards.ch1.deInit        = deInit;
    8a52:	4a08      	ldr	r2, [pc, #32]	; (8a74 <SelfTest_init+0x104>)
    8a54:	65da      	str	r2, [r3, #92]	; 0x5c
	Evalboards.ch1.periodicJob   = periodicJob;
    8a56:	4a08      	ldr	r2, [pc, #32]	; (8a78 <SelfTest_init+0x108>)
    8a58:	659a      	str	r2, [r3, #88]	; 0x58
}
    8a5a:	4770      	bx	lr
    8a5c:	00029d1c 	.word	0x00029d1c
    8a60:	1fff5e44 	.word	0x1fff5e44
    8a64:	1fff5f80 	.word	0x1fff5f80
    8a68:	1fff0b34 	.word	0x1fff0b34
    8a6c:	1fff5e88 	.word	0x1fff5e88
    8a70:	0000848d 	.word	0x0000848d
    8a74:	00008461 	.word	0x00008461
    8a78:	0000894d 	.word	0x0000894d

00008a7c <deInit>:
#include "Board.h"

static void deInit(void) {}
    8a7c:	4770      	bx	lr

00008a7e <dummy_Motor>:
// Evalboard channel function dummies
static uint32_t dummy_Motor(uint8_t motor)
{
	UNUSED(motor);
	return TMC_ERROR_FUNCTION;
}
    8a7e:	2002      	movs	r0, #2
    8a80:	4770      	bx	lr

00008a82 <dummy_MotorValue>:
static uint32_t dummy_MotorValue(uint8_t motor, int32_t value)
{
	UNUSED(motor);
	UNUSED(value);
	return TMC_ERROR_FUNCTION;
}
    8a82:	2002      	movs	r0, #2
    8a84:	4770      	bx	lr

00008a86 <dummy_AddressRef>:
static void dummy_AddressRef(uint8_t motor, uint8_t address, int32_t *value)
{
	UNUSED(motor);
	UNUSED(address);
	UNUSED(value);
}
    8a86:	4770      	bx	lr

00008a88 <dummy_AddressValue>:
static void dummy_AddressValue(uint8_t motor, uint8_t address, int32_t value)
{
	UNUSED(motor);
	UNUSED(address);
	UNUSED(value);
}
    8a88:	4770      	bx	lr

00008a8a <dummy_MotorRef>:
static uint32_t dummy_MotorRef(uint8_t motor, int32_t *value)
{
	UNUSED(motor);
	UNUSED(value);
	return TMC_ERROR_FUNCTION;
}
    8a8a:	2002      	movs	r0, #2
    8a8c:	4770      	bx	lr

00008a8e <dummy_TypeMotorValue>:
{
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);
	return TMC_ERROR_FUNCTION;
}
    8a8e:	2002      	movs	r0, #2
    8a90:	4770      	bx	lr

00008a92 <dummy_TypeMotorRef>:
{
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);
	return TMC_ERROR_FUNCTION;
}
    8a92:	2002      	movs	r0, #2
    8a94:	4770      	bx	lr

00008a96 <delegationReturn>:
}

static uint8_t delegationReturn(void)
{
	return 1;
}
    8a96:	2001      	movs	r0, #1
    8a98:	4770      	bx	lr

00008a9a <enableDriver>:

static void enableDriver(DriverState state)
{
	UNUSED(state);
}
    8a9a:	4770      	bx	lr

00008a9c <dummy_getLimit>:
    8a9c:	2002      	movs	r0, #2
    8a9e:	4770      	bx	lr

00008aa0 <periodicJob>:
    8aa0:	4770      	bx	lr

00008aa2 <board_setDummyFunctions>:
	UNUSED(tick);
}

void board_setDummyFunctions(EvalboardFunctionsTypeDef *channel)
{
	channel->config->reset     = delegationReturn;
    8aa2:	6983      	ldr	r3, [r0, #24]
    8aa4:	4a12      	ldr	r2, [pc, #72]	; (8af0 <board_setDummyFunctions+0x4e>)
	channel->config->restore   = delegationReturn;

	channel->deInit            = deInit;
	channel->periodicJob       = periodicJob;
	channel->left              = dummy_MotorValue;
	channel->stop              = dummy_Motor;
    8aa6:	4913      	ldr	r1, [pc, #76]	; (8af4 <board_setDummyFunctions+0x52>)
{
    8aa8:	b510      	push	{r4, lr}
	channel->config->restore   = delegationReturn;
    8aaa:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
	channel->deInit            = deInit;
    8aae:	4b12      	ldr	r3, [pc, #72]	; (8af8 <board_setDummyFunctions+0x56>)
    8ab0:	65c3      	str	r3, [r0, #92]	; 0x5c
	channel->left              = dummy_MotorValue;
    8ab2:	4b12      	ldr	r3, [pc, #72]	; (8afc <board_setDummyFunctions+0x5a>)
    8ab4:	61c3      	str	r3, [r0, #28]
	channel->moveTo            = dummy_MotorValue;
    8ab6:	e9c0 130a 	strd	r1, r3, [r0, #40]	; 0x28
	channel->moveBy            = dummy_MotorRef;
    8aba:	4911      	ldr	r1, [pc, #68]	; (8b00 <board_setDummyFunctions+0x5e>)
	channel->moveProfile       = dummy_MotorValue;
	channel->right             = dummy_MotorValue;
    8abc:	6203      	str	r3, [r0, #32]
	channel->moveProfile       = dummy_MotorValue;
    8abe:	e9c0 130c 	strd	r1, r3, [r0, #48]	; 0x30
	channel->GAP               = dummy_TypeMotorRef;
	channel->readRegister      = dummy_AddressRef;
    8ac2:	4b10      	ldr	r3, [pc, #64]	; (8b04 <board_setDummyFunctions+0x62>)
    8ac4:	6483      	str	r3, [r0, #72]	; 0x48
	channel->writeRegister     = dummy_AddressValue;
    8ac6:	4b10      	ldr	r3, [pc, #64]	; (8b08 <board_setDummyFunctions+0x66>)
    8ac8:	64c3      	str	r3, [r0, #76]	; 0x4c
	channel->SAP               = dummy_TypeMotorValue;
    8aca:	4b10      	ldr	r3, [pc, #64]	; (8b0c <board_setDummyFunctions+0x6a>)
    8acc:	6383      	str	r3, [r0, #56]	; 0x38
	channel->STAP              = dummy_TypeMotorValue;
	channel->RSAP              = dummy_TypeMotorValue;
    8ace:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
	channel->userFunction      = dummy_TypeMotorRef;
	channel->getMeasuredSpeed  = dummy_MotorRef;
	channel->checkErrors       = periodicJob;
	channel->enableDriver      = enableDriver;
    8ad2:	4b0f      	ldr	r3, [pc, #60]	; (8b10 <board_setDummyFunctions+0x6e>)
    8ad4:	6643      	str	r3, [r0, #100]	; 0x64

	channel->fullCover         = NULL;
    8ad6:	2300      	movs	r3, #0
	channel->GAP               = dummy_TypeMotorRef;
    8ad8:	4c0e      	ldr	r4, [pc, #56]	; (8b14 <board_setDummyFunctions+0x72>)
	channel->fullCover         = NULL;
    8ada:	66c3      	str	r3, [r0, #108]	; 0x6c
	channel->getMin            = dummy_getLimit;
    8adc:	4b0e      	ldr	r3, [pc, #56]	; (8b18 <board_setDummyFunctions+0x76>)
	channel->periodicJob       = periodicJob;
    8ade:	4a0f      	ldr	r2, [pc, #60]	; (8b1c <board_setDummyFunctions+0x7a>)
    8ae0:	6582      	str	r2, [r0, #88]	; 0x58
	channel->getMeasuredSpeed  = dummy_MotorRef;
    8ae2:	e9c0 1414 	strd	r1, r4, [r0, #80]	; 0x50
	channel->getMax            = dummy_getLimit;
    8ae6:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
	channel->GAP               = dummy_TypeMotorRef;
    8aea:	63c4      	str	r4, [r0, #60]	; 0x3c
	channel->checkErrors       = periodicJob;
    8aec:	6602      	str	r2, [r0, #96]	; 0x60
}
    8aee:	bd10      	pop	{r4, pc}
    8af0:	00008a97 	.word	0x00008a97
    8af4:	00008a7f 	.word	0x00008a7f
    8af8:	00008a7d 	.word	0x00008a7d
    8afc:	00008a83 	.word	0x00008a83
    8b00:	00008a8b 	.word	0x00008a8b
    8b04:	00008a87 	.word	0x00008a87
    8b08:	00008a89 	.word	0x00008a89
    8b0c:	00008a8f 	.word	0x00008a8f
    8b10:	00008a9b 	.word	0x00008a9b
    8b14:	00008a93 	.word	0x00008a93
    8b18:	00008a9d 	.word	0x00008a9d
    8b1c:	00008aa1 	.word	0x00008aa1

00008b20 <periodicJobDummy>:

void periodicJobDummy(uint32_t tick)
{
	UNUSED(tick);
}
    8b20:	4770      	bx	lr
    8b22:	bf00      	nop

00008b24 <tmcdriver_init>:
	}
};

void tmcdriver_init()
{
	Evalboards.ch2.config               = &TMCDriver.config;
    8b24:	480a      	ldr	r0, [pc, #40]	; (8b50 <tmcdriver_init+0x2c>)
    8b26:	4b0b      	ldr	r3, [pc, #44]	; (8b54 <tmcdriver_init+0x30>)
	Evalboards.ch2.config->state        = CONFIG_READY;
    8b28:	2200      	movs	r2, #0

	// Set the minimum required voltage to 0.1V here.
	// A value of 0 indicates the Evalboard not connecting the VM line,
	// resulting in skipped global minimum voltage checks.
	Evalboards.ch2.VMMin                = 1;
	Evalboards.ch2.VMMax                = -1;
    8b2a:	2101      	movs	r1, #1
{
    8b2c:	b410      	push	{r4}
	Evalboards.ch2.VMMax                = -1;
    8b2e:	f04f 34ff 	mov.w	r4, #4294967295

	Evalboards.ch2.numberOfMotors       = 0;
    8b32:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
	Evalboards.ch2.config->state        = CONFIG_READY;
    8b36:	801a      	strh	r2, [r3, #0]
	Evalboards.ch2.errors               = 0;

	Evalboards.ch2.config->channel      = CHANNEL_2;
    8b38:	f883 1210 	strb.w	r1, [r3, #528]	; 0x210
	Evalboards.ch2.VMMax                = -1;
    8b3c:	e9c0 4121 	strd	r4, r1, [r0, #132]	; 0x84
	Evalboards.ch2.config               = &TMCDriver.config;
    8b40:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
	Evalboards.ch2.errors               = 0;
    8b44:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

	board_setDummyFunctions(&Evalboards.ch2);
}
    8b48:	bc10      	pop	{r4}
	board_setDummyFunctions(&Evalboards.ch2);
    8b4a:	3078      	adds	r0, #120	; 0x78
    8b4c:	f7ff bfa9 	b.w	8aa2 <board_setDummyFunctions>
    8b50:	1fff5e88 	.word	0x1fff5e88
    8b54:	1fff122c 	.word	0x1fff122c

00008b58 <tmcmotioncontroller_init>:
	}
};

void tmcmotioncontroller_init()
{
	Evalboards.ch1.config               = &TMCMotionController.config;
    8b58:	4a08      	ldr	r2, [pc, #32]	; (8b7c <tmcmotioncontroller_init+0x24>)
    8b5a:	4809      	ldr	r0, [pc, #36]	; (8b80 <tmcmotioncontroller_init+0x28>)
	Evalboards.ch1.config->state        = CONFIG_READY;
    8b5c:	2300      	movs	r3, #0

	// Set the minimum required voltage to 0.1V here.
	// A value of 0 indicates the Evalboard not connecting the VM line,
	// resulting in skipped global minimum voltage checks.
	Evalboards.ch1.VMMin                = 1;
	Evalboards.ch1.VMMax                = -1;
    8b5e:	f04f 31ff 	mov.w	r1, #4294967295
    8b62:	f04f 0c01 	mov.w	ip, #1
	Evalboards.ch1.config->state        = CONFIG_READY;
    8b66:	8013      	strh	r3, [r2, #0]

	Evalboards.ch1.numberOfMotors       = 0;
	Evalboards.ch1.errors               = 0;

	Evalboards.ch1.config->channel      = CHANNEL_1;
    8b68:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
	Evalboards.ch1.VMMax                = -1;
    8b6c:	e9c0 1c03 	strd	r1, ip, [r0, #12]
	Evalboards.ch1.config               = &TMCMotionController.config;
    8b70:	6182      	str	r2, [r0, #24]
	Evalboards.ch1.numberOfMotors       = 0;
    8b72:	7503      	strb	r3, [r0, #20]
	Evalboards.ch1.errors               = 0;
    8b74:	6083      	str	r3, [r0, #8]

	board_setDummyFunctions(&Evalboards.ch1);
    8b76:	f7ff bf94 	b.w	8aa2 <board_setDummyFunctions>
    8b7a:	bf00      	nop
    8b7c:	1fff144c 	.word	0x1fff144c
    8b80:	1fff5e88 	.word	0x1fff5e88

00008b84 <getInt>:
	}
	set();
}

static uint32_t getInt()
{
    8b84:	2300      	movs	r3, #0
    8b86:	4906      	ldr	r1, [pc, #24]	; (8ba0 <getInt+0x1c>)
	uint32_t state = 0;
    8b88:	4618      	mov	r0, r3

	for(uint8_t i = 0; i < 7; i++)
	{
		state |= (settings[i] & 0x03) << (i<<1);
    8b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
    8b8e:	f002 0203 	and.w	r2, r2, #3
    8b92:	409a      	lsls	r2, r3
    8b94:	3302      	adds	r3, #2
	for(uint8_t i = 0; i < 7; i++)
    8b96:	2b0e      	cmp	r3, #14
		state |= (settings[i] & 0x03) << (i<<1);
    8b98:	ea40 0002 	orr.w	r0, r0, r2
	for(uint8_t i = 0; i < 7; i++)
    8b9c:	d1f5      	bne.n	8b8a <getInt+0x6>
	}

	return state;
}
    8b9e:	4770      	bx	lr
    8ba0:	1fff166c 	.word	0x1fff166c

00008ba4 <getPins>:
	set();
}

static void getPins(IO_States *CFG)
{
	for(uint8_t i = 0; i < 7; i++)
    8ba4:	4905      	ldr	r1, [pc, #20]	; (8bbc <getPins+0x18>)
    8ba6:	1e43      	subs	r3, r0, #1
    8ba8:	3006      	adds	r0, #6
		CFG[i] = settings[i] & 0x03;
    8baa:	f811 2b01 	ldrb.w	r2, [r1], #1
    8bae:	f002 0203 	and.w	r2, r2, #3
    8bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(uint8_t i = 0; i < 7; i++)
    8bb6:	4283      	cmp	r3, r0
    8bb8:	d1f7      	bne.n	8baa <getPins+0x6>
}
    8bba:	4770      	bx	lr
    8bbc:	1fff166c 	.word	0x1fff166c

00008bc0 <getConfig>:
	set();
}

static void getConfig(TMCRhinoTypeStandAloneConfigDef *config)
{
	config->chopperOffTime             = settings[0];
    8bc0:	4b07      	ldr	r3, [pc, #28]	; (8be0 <getConfig+0x20>)
    8bc2:	781a      	ldrb	r2, [r3, #0]
    8bc4:	7002      	strb	r2, [r0, #0]
	config->microstepResolution1       = settings[1];
    8bc6:	785a      	ldrb	r2, [r3, #1]
    8bc8:	7042      	strb	r2, [r0, #1]
	config->microstepResolution2       = settings[2];
    8bca:	789a      	ldrb	r2, [r3, #2]
    8bcc:	7082      	strb	r2, [r0, #2]
	config->currentSetting             = settings[3];
    8bce:	78da      	ldrb	r2, [r3, #3]
    8bd0:	70c2      	strb	r2, [r0, #3]
	config->chopperHysteresis          = settings[4];
    8bd2:	791a      	ldrb	r2, [r3, #4]
    8bd4:	7102      	strb	r2, [r0, #4]
	config->chopperBlankTime           = settings[5];
    8bd6:	795a      	ldrb	r2, [r3, #5]
    8bd8:	7142      	strb	r2, [r0, #5]
	config->enableStandStillPowerDown  = settings[6];
    8bda:	799b      	ldrb	r3, [r3, #6]
    8bdc:	7183      	strb	r3, [r0, #6]
}
    8bde:	4770      	bx	lr
    8be0:	1fff166c 	.word	0x1fff166c

00008be4 <set>:

static void set()
{
    8be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(uint8_t i = 0; i < 7; i++)
		HAL.IOs->config->setToState(TMCRhinoSA.CFGPins[i], settings[i] & 0x03);
    8be6:	4b09      	ldr	r3, [pc, #36]	; (8c0c <set+0x28>)
    8be8:	4d09      	ldr	r5, [pc, #36]	; (8c10 <set+0x2c>)
    8bea:	4f0a      	ldr	r7, [pc, #40]	; (8c14 <set+0x30>)
    8bec:	68de      	ldr	r6, [r3, #12]
{
    8bee:	2400      	movs	r4, #0
		HAL.IOs->config->setToState(TMCRhinoSA.CFGPins[i], settings[i] & 0x03);
    8bf0:	f815 1b01 	ldrb.w	r1, [r5], #1
    8bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8bf6:	6833      	ldr	r3, [r6, #0]
    8bf8:	5910      	ldr	r0, [r2, r4]
    8bfa:	69db      	ldr	r3, [r3, #28]
    8bfc:	f001 0103 	and.w	r1, r1, #3
    8c00:	3404      	adds	r4, #4
    8c02:	4798      	blx	r3
	for(uint8_t i = 0; i < 7; i++)
    8c04:	2c1c      	cmp	r4, #28
    8c06:	d1f3      	bne.n	8bf0 <set+0xc>
}
    8c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c0a:	bf00      	nop
    8c0c:	00029d1c 	.word	0x00029d1c
    8c10:	1fff166c 	.word	0x1fff166c
    8c14:	1fff0008 	.word	0x1fff0008

00008c18 <setInt>:
	for(uint8_t i = 0; i < 7; i++)
    8c18:	4a06      	ldr	r2, [pc, #24]	; (8c34 <setInt+0x1c>)
{
    8c1a:	2307      	movs	r3, #7
		settings[i] = state & 0x03;
    8c1c:	3b01      	subs	r3, #1
    8c1e:	f000 0103 	and.w	r1, r0, #3
	for(uint8_t i = 0; i < 7; i++)
    8c22:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		settings[i] = state & 0x03;
    8c26:	f802 1b01 	strb.w	r1, [r2], #1
		state >>= 2;
    8c2a:	ea4f 0090 	mov.w	r0, r0, lsr #2
	for(uint8_t i = 0; i < 7; i++)
    8c2e:	d1f5      	bne.n	8c1c <setInt+0x4>
	set();
    8c30:	e7d8      	b.n	8be4 <set>
    8c32:	bf00      	nop
    8c34:	1fff166c 	.word	0x1fff166c

00008c38 <reset>:
	setInt(TMCRhinoSA.resetSettings);
    8c38:	4b01      	ldr	r3, [pc, #4]	; (8c40 <reset+0x8>)
    8c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    8c3c:	e7ec      	b.n	8c18 <setInt>
    8c3e:	bf00      	nop
    8c40:	1fff0008 	.word	0x1fff0008

00008c44 <setPins>:
	for(uint8_t i = 0; i < 7; i++)
    8c44:	4905      	ldr	r1, [pc, #20]	; (8c5c <setPins+0x18>)
    8c46:	1e43      	subs	r3, r0, #1
    8c48:	3006      	adds	r0, #6
		settings[i] = CFG[i] & 0x03;
    8c4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8c4e:	f002 0203 	and.w	r2, r2, #3
	for(uint8_t i = 0; i < 7; i++)
    8c52:	4283      	cmp	r3, r0
		settings[i] = CFG[i] & 0x03;
    8c54:	f801 2b01 	strb.w	r2, [r1], #1
	for(uint8_t i = 0; i < 7; i++)
    8c58:	d1f7      	bne.n	8c4a <setPins+0x6>
	set();
    8c5a:	e7c3      	b.n	8be4 <set>
    8c5c:	1fff166c 	.word	0x1fff166c

00008c60 <setConfig>:
	settings[0] = config->chopperOffTime;
    8c60:	4b07      	ldr	r3, [pc, #28]	; (8c80 <setConfig+0x20>)
    8c62:	7802      	ldrb	r2, [r0, #0]
    8c64:	701a      	strb	r2, [r3, #0]
	settings[1] = config->microstepResolution1;
    8c66:	7842      	ldrb	r2, [r0, #1]
    8c68:	705a      	strb	r2, [r3, #1]
	settings[2] = config->microstepResolution2;
    8c6a:	7882      	ldrb	r2, [r0, #2]
    8c6c:	709a      	strb	r2, [r3, #2]
	settings[3] = config->currentSetting;
    8c6e:	78c2      	ldrb	r2, [r0, #3]
    8c70:	70da      	strb	r2, [r3, #3]
	settings[4] = config->chopperHysteresis;
    8c72:	7902      	ldrb	r2, [r0, #4]
    8c74:	711a      	strb	r2, [r3, #4]
	settings[5] = config->chopperBlankTime;
    8c76:	7942      	ldrb	r2, [r0, #5]
    8c78:	715a      	strb	r2, [r3, #5]
	settings[6] = config->enableStandStillPowerDown;
    8c7a:	7982      	ldrb	r2, [r0, #6]
    8c7c:	719a      	strb	r2, [r3, #6]
	set();
    8c7e:	e7b1      	b.n	8be4 <set>
    8c80:	1fff166c 	.word	0x1fff166c

00008c84 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
    8c84:	4b02      	ldr	r3, [pc, #8]	; (8c90 <checkErrors+0xc>)
    8c86:	2200      	movs	r2, #0
    8c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    8c8c:	4770      	bx	lr
    8c8e:	bf00      	nop
    8c90:	1fff5e88 	.word	0x1fff5e88

00008c94 <readRegister>:
{
    8c94:	b510      	push	{r4, lr}
	*value = tmc2041_readInt(motorToIC(motor), address);
    8c96:	4803      	ldr	r0, [pc, #12]	; (8ca4 <readRegister+0x10>)
{
    8c98:	4614      	mov	r4, r2
	*value = tmc2041_readInt(motorToIC(motor), address);
    8c9a:	f017 fc04 	bl	204a6 <tmc2041_readInt>
    8c9e:	6020      	str	r0, [r4, #0]
}
    8ca0:	bd10      	pop	{r4, pc}
    8ca2:	bf00      	nop
    8ca4:	1fff16a0 	.word	0x1fff16a0

00008ca8 <periodicJob>:
{
    8ca8:	b510      	push	{r4, lr}
	tmc2041_periodicJob(&TMC2041, tick);
    8caa:	4c0f      	ldr	r4, [pc, #60]	; (8ce8 <periodicJob+0x40>)
{
    8cac:	4601      	mov	r1, r0
	tmc2041_periodicJob(&TMC2041, tick);
    8cae:	4620      	mov	r0, r4
    8cb0:	f017 fc65 	bl	2057e <tmc2041_periodicJob>
		StepDir_periodicJob(motor);
    8cb4:	2000      	movs	r0, #0
    8cb6:	f016 fd75 	bl	1f7a4 <StepDir_periodicJob>
		StepDir_stallGuard(motor, TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_STALLGUARD_MASK, TMC2041_STALLGUARD_SHIFT) == 1);
    8cba:	216f      	movs	r1, #111	; 0x6f
    8cbc:	4620      	mov	r0, r4
    8cbe:	f017 fbf2 	bl	204a6 <tmc2041_readInt>
    8cc2:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8cc6:	2000      	movs	r0, #0
    8cc8:	f016 fe10 	bl	1f8ec <StepDir_stallGuard>
		StepDir_periodicJob(motor);
    8ccc:	2001      	movs	r0, #1
    8cce:	f016 fd69 	bl	1f7a4 <StepDir_periodicJob>
		StepDir_stallGuard(motor, TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_STALLGUARD_MASK, TMC2041_STALLGUARD_SHIFT) == 1);
    8cd2:	217f      	movs	r1, #127	; 0x7f
    8cd4:	4620      	mov	r0, r4
    8cd6:	f017 fbe6 	bl	204a6 <tmc2041_readInt>
}
    8cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		StepDir_stallGuard(motor, TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_STALLGUARD_MASK, TMC2041_STALLGUARD_SHIFT) == 1);
    8cde:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8ce2:	2001      	movs	r0, #1
    8ce4:	f016 be02 	b.w	1f8ec <StepDir_stallGuard>
    8ce8:	1fff16a0 	.word	0x1fff16a0

00008cec <writeRegister>:
	tmc2041_writeInt(motorToIC(motor), address, value);
    8cec:	4801      	ldr	r0, [pc, #4]	; (8cf4 <writeRegister+0x8>)
    8cee:	f017 bbcc 	b.w	2048a <tmc2041_writeInt>
    8cf2:	bf00      	nop
    8cf4:	1fff16a0 	.word	0x1fff16a0

00008cf8 <moveTo>:
	if(motor >= TMC2041_MOTORS)
    8cf8:	2801      	cmp	r0, #1
{
    8cfa:	b508      	push	{r3, lr}
	if(motor >= TMC2041_MOTORS)
    8cfc:	d803      	bhi.n	8d06 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    8cfe:	f016 fd39 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    8d02:	2000      	movs	r0, #0
}
    8d04:	bd08      	pop	{r3, pc}
		return TMC_ERROR_MOTOR;
    8d06:	2008      	movs	r0, #8
    8d08:	e7fc      	b.n	8d04 <moveTo+0xc>

00008d0a <rotate>:
	if(motor >= TMC2041_MOTORS)
    8d0a:	2801      	cmp	r0, #1
{
    8d0c:	b508      	push	{r3, lr}
	if(motor >= TMC2041_MOTORS)
    8d0e:	d803      	bhi.n	8d18 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    8d10:	f016 fd0a 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    8d14:	2000      	movs	r0, #0
}
    8d16:	bd08      	pop	{r3, pc}
		return TMC_ERROR_MOTOR;
    8d18:	2008      	movs	r0, #8
    8d1a:	e7fc      	b.n	8d16 <rotate+0xc>

00008d1c <stop>:
	return rotate(motor, 0);
    8d1c:	2100      	movs	r1, #0
    8d1e:	e7f4      	b.n	8d0a <rotate>

00008d20 <left>:
	return rotate(motor, -velocity);
    8d20:	4249      	negs	r1, r1
    8d22:	e7f2      	b.n	8d0a <rotate>

00008d24 <right>:
	return rotate(motor, velocity);
    8d24:	e7f1      	b.n	8d0a <rotate>

00008d26 <handleParameter>:
	if(motor >= TMC2041_MOTORS)
    8d26:	2901      	cmp	r1, #1
{
    8d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d2c:	4605      	mov	r5, r0
    8d2e:	461e      	mov	r6, r3
    8d30:	4608      	mov	r0, r1
	if(motor >= TMC2041_MOTORS)
    8d32:	f200 831f 	bhi.w	9374 <handleParameter+0x64e>
	switch(type)
    8d36:	2ace      	cmp	r2, #206	; 0xce
    8d38:	d80c      	bhi.n	8d54 <handleParameter+0x2e>
    8d3a:	2aa1      	cmp	r2, #161	; 0xa1
    8d3c:	d80c      	bhi.n	8d58 <handleParameter+0x32>
    8d3e:	2a1d      	cmp	r2, #29
    8d40:	d96a      	bls.n	8e18 <handleParameter+0xf2>
    8d42:	2a33      	cmp	r2, #51	; 0x33
    8d44:	f000 813a 	beq.w	8fbc <handleParameter+0x296>
    8d48:	2a8c      	cmp	r2, #140	; 0x8c
    8d4a:	f000 813f 	beq.w	8fcc <handleParameter+0x2a6>
    8d4e:	2a32      	cmp	r2, #50	; 0x32
    8d50:	f000 812c 	beq.w	8fac <handleParameter+0x286>
			errors |= TMC_ERROR_TYPE;
    8d54:	2504      	movs	r5, #4
    8d56:	e0a5      	b.n	8ea4 <handleParameter+0x17e>
    8d58:	3aa2      	subs	r2, #162	; 0xa2
    8d5a:	2a2c      	cmp	r2, #44	; 0x2c
    8d5c:	d8fa      	bhi.n	8d54 <handleParameter+0x2e>
    8d5e:	a301      	add	r3, pc, #4	; (adr r3, 8d64 <handleParameter+0x3e>)
    8d60:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8d64:	00009061 	.word	0x00009061
    8d68:	0000908b 	.word	0x0000908b
    8d6c:	000090b5 	.word	0x000090b5
    8d70:	000090df 	.word	0x000090df
    8d74:	00009161 	.word	0x00009161
    8d78:	0000919f 	.word	0x0000919f
    8d7c:	000091b9 	.word	0x000091b9
    8d80:	000091e5 	.word	0x000091e5
    8d84:	0000920f 	.word	0x0000920f
    8d88:	00009239 	.word	0x00009239
    8d8c:	00009263 	.word	0x00009263
    8d90:	0000927b 	.word	0x0000927b
    8d94:	000092a5 	.word	0x000092a5
    8d98:	00008d55 	.word	0x00008d55
    8d9c:	00008d55 	.word	0x00008d55
    8da0:	00008d55 	.word	0x00008d55
    8da4:	00008d55 	.word	0x00008d55
    8da8:	000092dd 	.word	0x000092dd
    8dac:	00009307 	.word	0x00009307
    8db0:	00009321 	.word	0x00009321
    8db4:	00008d55 	.word	0x00008d55
    8db8:	00008d55 	.word	0x00008d55
    8dbc:	00009331 	.word	0x00009331
    8dc0:	00008d55 	.word	0x00008d55
    8dc4:	00008d55 	.word	0x00008d55
    8dc8:	00008d55 	.word	0x00008d55
    8dcc:	00008d55 	.word	0x00008d55
    8dd0:	00008d55 	.word	0x00008d55
    8dd4:	00008d55 	.word	0x00008d55
    8dd8:	00008d55 	.word	0x00008d55
    8ddc:	00008d55 	.word	0x00008d55
    8de0:	00008d55 	.word	0x00008d55
    8de4:	00008d55 	.word	0x00008d55
    8de8:	00008d55 	.word	0x00008d55
    8dec:	00008d55 	.word	0x00008d55
    8df0:	00008d55 	.word	0x00008d55
    8df4:	00008d55 	.word	0x00008d55
    8df8:	00008d55 	.word	0x00008d55
    8dfc:	00008d55 	.word	0x00008d55
    8e00:	00008d55 	.word	0x00008d55
    8e04:	00008d55 	.word	0x00008d55
    8e08:	00008d55 	.word	0x00008d55
    8e0c:	00008d55 	.word	0x00008d55
    8e10:	00008d55 	.word	0x00008d55
    8e14:	0000935b 	.word	0x0000935b
    8e18:	2a1d      	cmp	r2, #29
    8e1a:	d89b      	bhi.n	8d54 <handleParameter+0x2e>
    8e1c:	a301      	add	r3, pc, #4	; (adr r3, 8e24 <handleParameter+0xfe>)
    8e1e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8e22:	bf00      	nop
    8e24:	00008e9d 	.word	0x00008e9d
    8e28:	00008eb5 	.word	0x00008eb5
    8e2c:	00008ec5 	.word	0x00008ec5
    8e30:	00008ed5 	.word	0x00008ed5
    8e34:	00008ee1 	.word	0x00008ee1
    8e38:	00008ef7 	.word	0x00008ef7
    8e3c:	00008f07 	.word	0x00008f07
    8e40:	00008f35 	.word	0x00008f35
    8e44:	00008f69 	.word	0x00008f69
    8e48:	00008d55 	.word	0x00008d55
    8e4c:	00008d55 	.word	0x00008d55
    8e50:	00008d55 	.word	0x00008d55
    8e54:	00008d55 	.word	0x00008d55
    8e58:	00008d55 	.word	0x00008d55
    8e5c:	00008d55 	.word	0x00008d55
    8e60:	00008d55 	.word	0x00008d55
    8e64:	00008d55 	.word	0x00008d55
    8e68:	00008d55 	.word	0x00008d55
    8e6c:	00008d55 	.word	0x00008d55
    8e70:	00008d55 	.word	0x00008d55
    8e74:	00008d55 	.word	0x00008d55
    8e78:	00008d55 	.word	0x00008d55
    8e7c:	00008d55 	.word	0x00008d55
    8e80:	00008d55 	.word	0x00008d55
    8e84:	00008d55 	.word	0x00008d55
    8e88:	00008d55 	.word	0x00008d55
    8e8c:	00008d55 	.word	0x00008d55
    8e90:	00008d55 	.word	0x00008d55
    8e94:	00008f79 	.word	0x00008f79
    8e98:	00008fa3 	.word	0x00008fa3
		if(readWrite == READ) {
    8e9c:	b92d      	cbnz	r5, 8eaa <handleParameter+0x184>
			*value = StepDir_getTargetPosition(motor);
    8e9e:	f016 fdfb 	bl	1fa98 <StepDir_getTargetPosition>
			*value = StepDir_getActualPosition(motor);
    8ea2:	6030      	str	r0, [r6, #0]
}
    8ea4:	4628      	mov	r0, r5
    8ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			StepDir_moveTo(motor, *value);
    8eaa:	6831      	ldr	r1, [r6, #0]
    8eac:	f016 fc62 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    8eb0:	2500      	movs	r5, #0
    8eb2:	e7f7      	b.n	8ea4 <handleParameter+0x17e>
		if(readWrite == READ) {
    8eb4:	b915      	cbnz	r5, 8ebc <handleParameter+0x196>
			*value = StepDir_getActualPosition(motor);
    8eb6:	f016 fddf 	bl	1fa78 <StepDir_getActualPosition>
    8eba:	e7f2      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setActualPosition(motor, *value);
    8ebc:	6831      	ldr	r1, [r6, #0]
    8ebe:	f016 fd7b 	bl	1f9b8 <StepDir_setActualPosition>
    8ec2:	e7f5      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8ec4:	b915      	cbnz	r5, 8ecc <handleParameter+0x1a6>
			*value = StepDir_getTargetVelocity(motor);
    8ec6:	f016 fe07 	bl	1fad8 <StepDir_getTargetVelocity>
    8eca:	e7ea      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_rotate(motor, *value);
    8ecc:	6831      	ldr	r1, [r6, #0]
    8ece:	f016 fc2b 	bl	1f728 <StepDir_rotate>
    8ed2:	e7ed      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8ed4:	2d00      	cmp	r5, #0
    8ed6:	f47f af3d 	bne.w	8d54 <handleParameter+0x2e>
			*value = StepDir_getActualVelocity(0);
    8eda:	f016 fded 	bl	1fab8 <StepDir_getActualVelocity>
    8ede:	e7e0      	b.n	8ea2 <handleParameter+0x17c>
		if(readWrite == READ) {
    8ee0:	b915      	cbnz	r5, 8ee8 <handleParameter+0x1c2>
			*value = StepDir_getVelocityMax(motor);
    8ee2:	f016 fe19 	bl	1fb18 <StepDir_getVelocityMax>
    8ee6:	e7dc      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setVelocityMax(motor, abs(*value));
    8ee8:	6831      	ldr	r1, [r6, #0]
    8eea:	2900      	cmp	r1, #0
    8eec:	bfb8      	it	lt
    8eee:	4249      	neglt	r1, r1
    8ef0:	f016 fd7e 	bl	1f9f0 <StepDir_setVelocityMax>
    8ef4:	e7dc      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8ef6:	b915      	cbnz	r5, 8efe <handleParameter+0x1d8>
			*value = StepDir_getAcceleration(motor);
    8ef8:	f016 fdfe 	bl	1faf8 <StepDir_getAcceleration>
    8efc:	e7d1      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setAcceleration(motor, *value);
    8efe:	6831      	ldr	r1, [r6, #0]
    8f00:	f016 ff28 	bl	1fd54 <StepDir_setAcceleration>
    8f04:	e7d4      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8f06:	2120      	movs	r1, #32
    8f08:	4081      	lsls	r1, r0
    8f0a:	f041 0410 	orr.w	r4, r1, #16
    8f0e:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2041_IRUN_SHIFT);
    8f10:	48af      	ldr	r0, [pc, #700]	; (91d0 <handleParameter+0x4aa>)
    8f12:	4621      	mov	r1, r4
		if(readWrite == READ) {
    8f14:	b925      	cbnz	r5, 8f20 <handleParameter+0x1fa>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2041_IRUN_SHIFT);
    8f16:	f017 fac6 	bl	204a6 <tmc2041_readInt>
    8f1a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    8f1e:	e7c0      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IRUN_MASK, TMC2041_IRUN_SHIFT, *value); // todo CHECK 3: check functionality (ED) #1
    8f20:	f017 fac1 	bl	204a6 <tmc2041_readInt>
    8f24:	6833      	ldr	r3, [r6, #0]
    8f26:	021b      	lsls	r3, r3, #8
    8f28:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8f2c:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_SHIFT, *value);
    8f30:	431a      	orrs	r2, r3
    8f32:	e014      	b.n	8f5e <handleParameter+0x238>
		if(readWrite == READ) {
    8f34:	2120      	movs	r1, #32
    8f36:	4081      	lsls	r1, r0
    8f38:	f041 0410 	orr.w	r4, r1, #16
    8f3c:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC2041_IHOLD_SHIFT);
    8f3e:	48a4      	ldr	r0, [pc, #656]	; (91d0 <handleParameter+0x4aa>)
    8f40:	4621      	mov	r1, r4
		if(readWrite == READ) {
    8f42:	b925      	cbnz	r5, 8f4e <handleParameter+0x228>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC2041_IHOLD_SHIFT);
    8f44:	f017 faaf 	bl	204a6 <tmc2041_readInt>
    8f48:	f000 001f 	and.w	r0, r0, #31
    8f4c:	e7a9      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_IHOLD_IRUN(motor), TMC2041_IHOLD_MASK, TMC2041_IHOLD_SHIFT, *value);
    8f4e:	f017 faaa 	bl	204a6 <tmc2041_readInt>
    8f52:	6832      	ldr	r2, [r6, #0]
    8f54:	f020 001f 	bic.w	r0, r0, #31
    8f58:	f002 021f 	and.w	r2, r2, #31
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN_SHIFT, *value);
    8f5c:	4302      	orrs	r2, r0
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_SHIFT, *value);
    8f5e:	489c      	ldr	r0, [pc, #624]	; (91d0 <handleParameter+0x4aa>)
    8f60:	4621      	mov	r1, r4
    8f62:	f017 fa92 	bl	2048a <tmc2041_writeInt>
    8f66:	e7a3      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8f68:	2d00      	cmp	r5, #0
    8f6a:	f47f aef3 	bne.w	8d54 <handleParameter+0x2e>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    8f6e:	f016 fc5f 	bl	1f830 <StepDir_getStatus>
    8f72:	f3c0 1000 	ubfx	r0, r0, #4, #1
    8f76:	e794      	b.n	8ea2 <handleParameter+0x17c>
		if(readWrite == READ) {
    8f78:	010c      	lsls	r4, r1, #4
    8f7a:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    8f7e:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC2041_VHIGHFS_SHIFT);
    8f80:	4893      	ldr	r0, [pc, #588]	; (91d0 <handleParameter+0x4aa>)
    8f82:	4621      	mov	r1, r4
		if(readWrite == READ) {
    8f84:	b925      	cbnz	r5, 8f90 <handleParameter+0x26a>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC2041_VHIGHFS_SHIFT);
    8f86:	f017 fa8e 	bl	204a6 <tmc2041_readInt>
    8f8a:	f3c0 4080 	ubfx	r0, r0, #18, #1
    8f8e:	e788      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VHIGHFS_MASK, TMC2041_VHIGHFS_SHIFT, *value);
    8f90:	f017 fa89 	bl	204a6 <tmc2041_readInt>
    8f94:	6833      	ldr	r3, [r6, #0]
    8f96:	049b      	lsls	r3, r3, #18
    8f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    8f9c:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    8fa0:	e7c6      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    8fa2:	2d00      	cmp	r5, #0
    8fa4:	f47f aed6 	bne.w	8d54 <handleParameter+0x2e>
			*value = StepDir_getActualVelocity(0);
    8fa8:	4628      	mov	r0, r5
    8faa:	e796      	b.n	8eda <handleParameter+0x1b4>
		if(readWrite == READ) {
    8fac:	b915      	cbnz	r5, 8fb4 <handleParameter+0x28e>
			*value = StepDir_getMode(motor);
    8fae:	f016 fdd1 	bl	1fb54 <StepDir_getMode>
    8fb2:	e776      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setMode(motor, *value);
    8fb4:	7819      	ldrb	r1, [r3, #0]
    8fb6:	f016 fd37 	bl	1fa28 <StepDir_setMode>
    8fba:	e779      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8fbc:	b915      	cbnz	r5, 8fc4 <handleParameter+0x29e>
			*value = StepDir_getFrequency(motor);
    8fbe:	f016 fdd7 	bl	1fb70 <StepDir_getFrequency>
    8fc2:	e76e      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setFrequency(motor, *value);
    8fc4:	6819      	ldr	r1, [r3, #0]
    8fc6:	f016 fd3f 	bl	1fa48 <StepDir_setFrequency>
    8fca:	e771      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    8fcc:	b955      	cbnz	r5, 8fe4 <handleParameter+0x2be>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_SHIFT);
    8fce:	0109      	lsls	r1, r1, #4
    8fd0:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
    8fd4:	487e      	ldr	r0, [pc, #504]	; (91d0 <handleParameter+0x4aa>)
    8fd6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    8fda:	f017 fa64 	bl	204a6 <tmc2041_readInt>
    8fde:	f3c0 6003 	ubfx	r0, r0, #24, #4
    8fe2:	e75e      	b.n	8ea2 <handleParameter+0x17c>
			switch(*value)
    8fe4:	681b      	ldr	r3, [r3, #0]
    8fe6:	2b10      	cmp	r3, #16
    8fe8:	d032      	beq.n	9050 <handleParameter+0x32a>
    8fea:	dc0a      	bgt.n	9002 <handleParameter+0x2dc>
    8fec:	3b01      	subs	r3, #1
    8fee:	2b07      	cmp	r3, #7
    8ff0:	d80e      	bhi.n	9010 <handleParameter+0x2ea>
    8ff2:	2b07      	cmp	r3, #7
    8ff4:	d80c      	bhi.n	9010 <handleParameter+0x2ea>
    8ff6:	e8df f003 	tbb	[pc, r3]
    8ffa:	2514      	.short	0x2514
    8ffc:	0b0b270b 	.word	0x0b0b270b
    9000:	290b      	.short	0x290b
    9002:	2b80      	cmp	r3, #128	; 0x80
    9004:	d02a      	beq.n	905c <handleParameter+0x336>
    9006:	dc07      	bgt.n	9018 <handleParameter+0x2f2>
    9008:	2b20      	cmp	r3, #32
    900a:	d023      	beq.n	9054 <handleParameter+0x32e>
    900c:	2b40      	cmp	r3, #64	; 0x40
    900e:	d023      	beq.n	9058 <handleParameter+0x332>
			default:   *value = -1;  break;
    9010:	f04f 33ff 	mov.w	r3, #4294967295
    9014:	6033      	str	r3, [r6, #0]
			if(*value != -1)
    9016:	e74b      	b.n	8eb0 <handleParameter+0x18a>
    9018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    901c:	d1f8      	bne.n	9010 <handleParameter+0x2ea>
			case 256:  *value = 0;   break;
    901e:	2300      	movs	r3, #0
    9020:	e000      	b.n	9024 <handleParameter+0x2fe>
			case 1:    *value = 8;   break;
    9022:	2308      	movs	r3, #8
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_SHIFT, *value);
    9024:	0104      	lsls	r4, r0, #4
    9026:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    902a:	b2e4      	uxtb	r4, r4
			case 256:  *value = 0;   break;
    902c:	6033      	str	r3, [r6, #0]
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_MRES_MASK, TMC2041_MRES_SHIFT, *value);
    902e:	4868      	ldr	r0, [pc, #416]	; (91d0 <handleParameter+0x4aa>)
    9030:	4621      	mov	r1, r4
    9032:	f017 fa38 	bl	204a6 <tmc2041_readInt>
    9036:	6833      	ldr	r3, [r6, #0]
    9038:	061b      	lsls	r3, r3, #24
    903a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    903e:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
    9042:	e775      	b.n	8f30 <handleParameter+0x20a>
			case 2:    *value = 7;   break;
    9044:	2307      	movs	r3, #7
    9046:	e7ed      	b.n	9024 <handleParameter+0x2fe>
			case 4:    *value = 6;   break;
    9048:	2306      	movs	r3, #6
    904a:	e7eb      	b.n	9024 <handleParameter+0x2fe>
			case 8:    *value = 5;   break;
    904c:	2305      	movs	r3, #5
    904e:	e7e9      	b.n	9024 <handleParameter+0x2fe>
			case 16:   *value = 4;   break;
    9050:	2304      	movs	r3, #4
    9052:	e7e7      	b.n	9024 <handleParameter+0x2fe>
			case 32:   *value = 3;   break;
    9054:	2303      	movs	r3, #3
    9056:	e7e5      	b.n	9024 <handleParameter+0x2fe>
			case 64:   *value = 2;   break;
    9058:	2302      	movs	r3, #2
    905a:	e7e3      	b.n	9024 <handleParameter+0x2fe>
			case 128:  *value = 1;   break;
    905c:	2301      	movs	r3, #1
    905e:	e7e1      	b.n	9024 <handleParameter+0x2fe>
		if(readWrite == READ) {
    9060:	010c      	lsls	r4, r1, #4
    9062:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    9066:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041_TBL_SHIFT);
    9068:	4859      	ldr	r0, [pc, #356]	; (91d0 <handleParameter+0x4aa>)
    906a:	4621      	mov	r1, r4
		if(readWrite == READ) {
    906c:	b925      	cbnz	r5, 9078 <handleParameter+0x352>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041_TBL_SHIFT);
    906e:	f017 fa1a 	bl	204a6 <tmc2041_readInt>
    9072:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    9076:	e714      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TBL_MASK, TMC2041_TBL_SHIFT, *value);
    9078:	f017 fa15 	bl	204a6 <tmc2041_readInt>
    907c:	6833      	ldr	r3, [r6, #0]
    907e:	03db      	lsls	r3, r3, #15
    9080:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    9084:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
    9088:	e752      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    908a:	010c      	lsls	r4, r1, #4
    908c:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    9090:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041_CHM_SHIFT);
    9092:	484f      	ldr	r0, [pc, #316]	; (91d0 <handleParameter+0x4aa>)
    9094:	4621      	mov	r1, r4
		if(readWrite == READ) {
    9096:	b925      	cbnz	r5, 90a2 <handleParameter+0x37c>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041_CHM_SHIFT);
    9098:	f017 fa05 	bl	204a6 <tmc2041_readInt>
    909c:	f3c0 3080 	ubfx	r0, r0, #14, #1
    90a0:	e6ff      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_CHM_MASK, TMC2041_CHM_SHIFT, *value);
    90a2:	f017 fa00 	bl	204a6 <tmc2041_readInt>
    90a6:	6833      	ldr	r3, [r6, #0]
    90a8:	039b      	lsls	r3, r3, #14
    90aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    90ae:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
    90b2:	e73d      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    90b4:	010c      	lsls	r4, r1, #4
    90b6:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    90ba:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC2041_DISFDCC_SHIFT);
    90bc:	4844      	ldr	r0, [pc, #272]	; (91d0 <handleParameter+0x4aa>)
    90be:	4621      	mov	r1, r4
		if(readWrite == READ) {
    90c0:	b925      	cbnz	r5, 90cc <handleParameter+0x3a6>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC2041_DISFDCC_SHIFT);
    90c2:	f017 f9f0 	bl	204a6 <tmc2041_readInt>
    90c6:	f3c0 3000 	ubfx	r0, r0, #12, #1
    90ca:	e6ea      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_DISFDCC_MASK, TMC2041_DISFDCC_SHIFT, *value);
    90cc:	f017 f9eb 	bl	204a6 <tmc2041_readInt>
    90d0:	6833      	ldr	r3, [r6, #0]
    90d2:	031b      	lsls	r3, r3, #12
    90d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    90d8:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
    90dc:	e728      	b.n	8f30 <handleParameter+0x20a>
		tempValue = tmc2041_readInt(motorToIC(motor), TMC2041_CHOPCONF(motor));
    90de:	010c      	lsls	r4, r1, #4
    90e0:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    90e4:	b2e4      	uxtb	r4, r4
    90e6:	4621      	mov	r1, r4
    90e8:	4839      	ldr	r0, [pc, #228]	; (91d0 <handleParameter+0x4aa>)
    90ea:	f017 f9dc 	bl	204a6 <tmc2041_readInt>
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HEND_MASK, TMC2041_HEND_SHIFT);
    90ee:	4621      	mov	r1, r4
		tempValue = tmc2041_readInt(motorToIC(motor), TMC2041_CHOPCONF(motor));
    90f0:	4680      	mov	r8, r0
		if(readWrite == READ) {
    90f2:	f400 4780 	and.w	r7, r0, #16384	; 0x4000
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HEND_MASK, TMC2041_HEND_SHIFT);
    90f6:	4836      	ldr	r0, [pc, #216]	; (91d0 <handleParameter+0x4aa>)
		if(readWrite == READ) {
    90f8:	b985      	cbnz	r5, 911c <handleParameter+0x3f6>
			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
    90fa:	b127      	cbz	r7, 9106 <handleParameter+0x3e0>
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_OFFSET_MASK, TMC2041_OFFSET_SHIFT);
    90fc:	f017 f9d3 	bl	204a6 <tmc2041_readInt>
    9100:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    9104:	e6cd      	b.n	8ea2 <handleParameter+0x17c>
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_ALL_MASK, TMC2041_TFD_ALL_SHIFT);
    9106:	f017 f9ce 	bl	204a6 <tmc2041_readInt>
				if(tempValue & TMC2041_TFD_3_MASK) // add MSB of fast decay time to *value
    910a:	f418 6f00 	tst.w	r8, #2048	; 0x800
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_ALL_MASK, TMC2041_TFD_ALL_SHIFT);
    910e:	f3c0 1302 	ubfx	r3, r0, #4, #3
					*value |= 1<<3;
    9112:	bf18      	it	ne
    9114:	f043 0308 	orrne.w	r3, r3, #8
    9118:	6033      	str	r3, [r6, #0]
    911a:	e6c3      	b.n	8ea4 <handleParameter+0x17e>
			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis end
    911c:	b147      	cbz	r7, 9130 <handleParameter+0x40a>
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_OFFSET_MASK, TMC2041_OFFSET_SHIFT, *value);
    911e:	f017 f9c2 	bl	204a6 <tmc2041_readInt>
    9122:	6833      	ldr	r3, [r6, #0]
    9124:	01db      	lsls	r3, r3, #7
    9126:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    912a:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    912e:	e6ff      	b.n	8f30 <handleParameter+0x20a>
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_ALL_MASK, TMC2041_TFD_ALL_SHIFT, *value);
    9130:	f017 f9b9 	bl	204a6 <tmc2041_readInt>
    9134:	6833      	ldr	r3, [r6, #0]
    9136:	011b      	lsls	r3, r3, #4
    9138:	f003 0370 	and.w	r3, r3, #112	; 0x70
    913c:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    9140:	431a      	orrs	r2, r3
    9142:	4823      	ldr	r0, [pc, #140]	; (91d0 <handleParameter+0x4aa>)
    9144:	4621      	mov	r1, r4
    9146:	f017 f9a0 	bl	2048a <tmc2041_writeInt>
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_TFD_3_MASK, TMC2041_TFD_3_SHIFT, (*value & (1<<3))? 1:0);
    914a:	4821      	ldr	r0, [pc, #132]	; (91d0 <handleParameter+0x4aa>)
    914c:	4621      	mov	r1, r4
    914e:	f017 f9aa 	bl	204a6 <tmc2041_readInt>
    9152:	6833      	ldr	r3, [r6, #0]
    9154:	021b      	lsls	r3, r3, #8
    9156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    915a:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
    915e:	e6e7      	b.n	8f30 <handleParameter+0x20a>
		tempValue = tmc2041_readInt(motorToIC(motor), TMC2041_CHOPCONF(motor));
    9160:	010c      	lsls	r4, r1, #4
    9162:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    9166:	b2e4      	uxtb	r4, r4
    9168:	4621      	mov	r1, r4
    916a:	4819      	ldr	r0, [pc, #100]	; (91d0 <handleParameter+0x4aa>)
    916c:	f017 f99b 	bl	204a6 <tmc2041_readInt>
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HSTRT_MASK, TMC2041_HSTRT_SHIFT);
    9170:	4621      	mov	r1, r4
    9172:	f400 4780 	and.w	r7, r0, #16384	; 0x4000
    9176:	4816      	ldr	r0, [pc, #88]	; (91d0 <handleParameter+0x4aa>)
		if(readWrite == READ) {
    9178:	b935      	cbnz	r5, 9188 <handleParameter+0x462>
			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
    917a:	2f00      	cmp	r7, #0
    917c:	d0be      	beq.n	90fc <handleParameter+0x3d6>
				*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HSTRT_MASK, TMC2041_HSTRT_SHIFT);
    917e:	f017 f992 	bl	204a6 <tmc2041_readInt>
    9182:	f3c0 1002 	ubfx	r0, r0, #4, #3
    9186:	e68c      	b.n	8ea2 <handleParameter+0x17c>
			if(tempValue & TMC2041_CHM_MASK) // Chopper hysteresis start
    9188:	2f00      	cmp	r7, #0
    918a:	d0c8      	beq.n	911e <handleParameter+0x3f8>
				TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_HSTRT_MASK, TMC2041_HSTRT_SHIFT, *value);
    918c:	f017 f98b 	bl	204a6 <tmc2041_readInt>
    9190:	6833      	ldr	r3, [r6, #0]
    9192:	011b      	lsls	r3, r3, #4
    9194:	f003 0370 	and.w	r3, r3, #112	; 0x70
    9198:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    919c:	e6c8      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    919e:	010c      	lsls	r4, r1, #4
    91a0:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    91a4:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN_SHIFT);
    91a6:	480a      	ldr	r0, [pc, #40]	; (91d0 <handleParameter+0x4aa>)
    91a8:	4621      	mov	r1, r4
		if(readWrite == READ) {
    91aa:	2d00      	cmp	r5, #0
    91ac:	d15d      	bne.n	926a <handleParameter+0x544>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN_SHIFT);
    91ae:	f017 f97a 	bl	204a6 <tmc2041_readInt>
    91b2:	f000 000f 	and.w	r0, r0, #15
    91b6:	e674      	b.n	8ea2 <handleParameter+0x17c>
		if(readWrite == READ) {
    91b8:	010c      	lsls	r4, r1, #4
    91ba:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    91be:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2041_SEIMIN_SHIFT);
    91c0:	4803      	ldr	r0, [pc, #12]	; (91d0 <handleParameter+0x4aa>)
    91c2:	4621      	mov	r1, r4
		if(readWrite == READ) {
    91c4:	b935      	cbnz	r5, 91d4 <handleParameter+0x4ae>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2041_SEIMIN_SHIFT);
    91c6:	f017 f96e 	bl	204a6 <tmc2041_readInt>
    91ca:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    91ce:	e668      	b.n	8ea2 <handleParameter+0x17c>
    91d0:	1fff16a0 	.word	0x1fff16a0
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEIMIN_MASK, TMC2041_SEIMIN_SHIFT, *value);
    91d4:	f017 f967 	bl	204a6 <tmc2041_readInt>
    91d8:	6833      	ldr	r3, [r6, #0]
    91da:	03db      	lsls	r3, r3, #15
    91dc:	b29b      	uxth	r3, r3
    91de:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    91e2:	e6a5      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    91e4:	010c      	lsls	r4, r1, #4
    91e6:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    91ea:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC2041_SEDN_SHIFT);
    91ec:	4862      	ldr	r0, [pc, #392]	; (9378 <handleParameter+0x652>)
    91ee:	4621      	mov	r1, r4
		if(readWrite == READ) {
    91f0:	b925      	cbnz	r5, 91fc <handleParameter+0x4d6>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC2041_SEDN_SHIFT);
    91f2:	f017 f958 	bl	204a6 <tmc2041_readInt>
    91f6:	f3c0 3041 	ubfx	r0, r0, #13, #2
    91fa:	e652      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEDN_MASK, TMC2041_SEDN_SHIFT, *value);
    91fc:	f017 f953 	bl	204a6 <tmc2041_readInt>
    9200:	6833      	ldr	r3, [r6, #0]
    9202:	035b      	lsls	r3, r3, #13
    9204:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    9208:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
    920c:	e690      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    920e:	010c      	lsls	r4, r1, #4
    9210:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    9214:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC2041_SEMAX_SHIFT);
    9216:	4858      	ldr	r0, [pc, #352]	; (9378 <handleParameter+0x652>)
    9218:	4621      	mov	r1, r4
		if(readWrite == READ) {
    921a:	b925      	cbnz	r5, 9226 <handleParameter+0x500>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC2041_SEMAX_SHIFT);
    921c:	f017 f943 	bl	204a6 <tmc2041_readInt>
    9220:	f3c0 2003 	ubfx	r0, r0, #8, #4
    9224:	e63d      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMAX_MASK, TMC2041_SEMAX_SHIFT, *value);
    9226:	f017 f93e 	bl	204a6 <tmc2041_readInt>
    922a:	6833      	ldr	r3, [r6, #0]
    922c:	021b      	lsls	r3, r3, #8
    922e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    9232:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
    9236:	e67b      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    9238:	010c      	lsls	r4, r1, #4
    923a:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    923e:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC2041_SEUP_SHIFT);
    9240:	484d      	ldr	r0, [pc, #308]	; (9378 <handleParameter+0x652>)
    9242:	4621      	mov	r1, r4
		if(readWrite == READ) {
    9244:	b925      	cbnz	r5, 9250 <handleParameter+0x52a>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC2041_SEUP_SHIFT);
    9246:	f017 f92e 	bl	204a6 <tmc2041_readInt>
    924a:	f3c0 1041 	ubfx	r0, r0, #5, #2
    924e:	e628      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEUP_MASK, TMC2041_SEUP_SHIFT, *value);
    9250:	f017 f929 	bl	204a6 <tmc2041_readInt>
    9254:	6833      	ldr	r3, [r6, #0]
    9256:	015b      	lsls	r3, r3, #5
    9258:	f003 0360 	and.w	r3, r3, #96	; 0x60
    925c:	f020 0260 	bic.w	r2, r0, #96	; 0x60
    9260:	e666      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    9262:	010c      	lsls	r4, r1, #4
    9264:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    9268:	e79c      	b.n	91a4 <handleParameter+0x47e>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SEMIN_MASK, TMC2041_SEMIN_SHIFT, *value);
    926a:	f017 f91c 	bl	204a6 <tmc2041_readInt>
    926e:	6832      	ldr	r2, [r6, #0]
    9270:	f020 000f 	bic.w	r0, r0, #15
    9274:	f002 020f 	and.w	r2, r2, #15
    9278:	e670      	b.n	8f5c <handleParameter+0x236>
		if(readWrite == READ) {
    927a:	010c      	lsls	r4, r1, #4
    927c:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    9280:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC2041_SFILT_SHIFT);
    9282:	483d      	ldr	r0, [pc, #244]	; (9378 <handleParameter+0x652>)
    9284:	4621      	mov	r1, r4
		if(readWrite == READ) {
    9286:	b925      	cbnz	r5, 9292 <handleParameter+0x56c>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC2041_SFILT_SHIFT);
    9288:	f017 f90d 	bl	204a6 <tmc2041_readInt>
    928c:	f3c0 6000 	ubfx	r0, r0, #24, #1
    9290:	e607      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SFILT_MASK, TMC2041_SFILT_SHIFT, *value);
    9292:	f017 f908 	bl	204a6 <tmc2041_readInt>
    9296:	6833      	ldr	r3, [r6, #0]
    9298:	061b      	lsls	r3, r3, #24
    929a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    929e:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
    92a2:	e645      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    92a4:	010c      	lsls	r4, r1, #4
    92a6:	f044 046d 	orr.w	r4, r4, #109	; 0x6d
    92aa:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHIFT);
    92ac:	4832      	ldr	r0, [pc, #200]	; (9378 <handleParameter+0x652>)
    92ae:	4621      	mov	r1, r4
		if(readWrite == READ) {
    92b0:	b95d      	cbnz	r5, 92ca <handleParameter+0x5a4>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHIFT);
    92b2:	f017 f8f8 	bl	204a6 <tmc2041_readInt>
    92b6:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
    92b8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHIFT);
    92bc:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
    92c0:	bf18      	it	ne
    92c2:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    92c6:	4318      	orrs	r0, r3
    92c8:	e5eb      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_COOLCONF(motor), TMC2041_SGT_MASK, TMC2041_SGT_SHIFT, *value);
    92ca:	f017 f8ec 	bl	204a6 <tmc2041_readInt>
    92ce:	6833      	ldr	r3, [r6, #0]
    92d0:	041b      	lsls	r3, r3, #16
    92d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
    92d6:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
    92da:	e629      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    92dc:	010c      	lsls	r4, r1, #4
    92de:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    92e2:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2041_VSENSE_SHIFT);
    92e4:	4824      	ldr	r0, [pc, #144]	; (9378 <handleParameter+0x652>)
    92e6:	4621      	mov	r1, r4
		if(readWrite == READ) {
    92e8:	b925      	cbnz	r5, 92f4 <handleParameter+0x5ce>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2041_VSENSE_SHIFT);
    92ea:	f017 f8dc 	bl	204a6 <tmc2041_readInt>
    92ee:	f3c0 4040 	ubfx	r0, r0, #17, #1
    92f2:	e5d6      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_VSENSE_MASK, TMC2041_VSENSE_SHIFT, *value);
    92f4:	f017 f8d7 	bl	204a6 <tmc2041_readInt>
    92f8:	6833      	ldr	r3, [r6, #0]
    92fa:	045b      	lsls	r3, r3, #17
    92fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9300:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
    9304:	e614      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    9306:	2d00      	cmp	r5, #0
    9308:	f47f ad24 	bne.w	8d54 <handleParameter+0x2e>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_CS_ACTUAL_MASK, TMC2041_CS_ACTUAL_SHIFT);
    930c:	0109      	lsls	r1, r1, #4
    930e:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
    9312:	4819      	ldr	r0, [pc, #100]	; (9378 <handleParameter+0x652>)
    9314:	b2c9      	uxtb	r1, r1
    9316:	f017 f8c6 	bl	204a6 <tmc2041_readInt>
    931a:	f3c0 4004 	ubfx	r0, r0, #16, #5
    931e:	e5c0      	b.n	8ea2 <handleParameter+0x17c>
		if(readWrite == READ) {
    9320:	b915      	cbnz	r5, 9328 <handleParameter+0x602>
			*value = StepDir_getStallGuardThreshold(motor);
    9322:	f016 fc09 	bl	1fb38 <StepDir_getStallGuardThreshold>
    9326:	e5bc      	b.n	8ea2 <handleParameter+0x17c>
			StepDir_setStallGuardThreshold(motor, *value);
    9328:	6831      	ldr	r1, [r6, #0]
    932a:	f016 fb6f 	bl	1fa0c <StepDir_setStallGuardThreshold>
    932e:	e5bf      	b.n	8eb0 <handleParameter+0x18a>
		if(readWrite == READ) {
    9330:	010c      	lsls	r4, r1, #4
    9332:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
    9336:	b2e4      	uxtb	r4, r4
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC2041_RNDTF_SHIFT);
    9338:	480f      	ldr	r0, [pc, #60]	; (9378 <handleParameter+0x652>)
    933a:	4621      	mov	r1, r4
		if(readWrite == READ) {
    933c:	b925      	cbnz	r5, 9348 <handleParameter+0x622>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC2041_RNDTF_SHIFT);
    933e:	f017 f8b2 	bl	204a6 <tmc2041_readInt>
    9342:	f3c0 3040 	ubfx	r0, r0, #13, #1
    9346:	e5ac      	b.n	8ea2 <handleParameter+0x17c>
			TMC2041_FIELD_WRITE(motorToIC(motor), TMC2041_CHOPCONF(motor), TMC2041_RNDTF_MASK, TMC2041_RNDTF_SHIFT, *value);
    9348:	f017 f8ad 	bl	204a6 <tmc2041_readInt>
    934c:	6833      	ldr	r3, [r6, #0]
    934e:	035b      	lsls	r3, r3, #13
    9350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    9354:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    9358:	e5ea      	b.n	8f30 <handleParameter+0x20a>
		if(readWrite == READ) {
    935a:	2d00      	cmp	r5, #0
    935c:	f47f acfa 	bne.w	8d54 <handleParameter+0x2e>
			*value = TMC2041_FIELD_READ(motorToIC(motor), TMC2041_DRVSTATUS(motor), TMC2041_SG_RESULT_MASK, TMC2041_SG_RESULT_SHIFT);
    9360:	0109      	lsls	r1, r1, #4
    9362:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
    9366:	4804      	ldr	r0, [pc, #16]	; (9378 <handleParameter+0x652>)
    9368:	b2c9      	uxtb	r1, r1
    936a:	f017 f89c 	bl	204a6 <tmc2041_readInt>
    936e:	f3c0 0009 	ubfx	r0, r0, #0, #10
    9372:	e596      	b.n	8ea2 <handleParameter+0x17c>
		return TMC_ERROR_MOTOR;
    9374:	2508      	movs	r5, #8
    9376:	e595      	b.n	8ea4 <handleParameter+0x17e>
    9378:	1fff16a0 	.word	0x1fff16a0

0000937c <SAP>:
{
    937c:	b507      	push	{r0, r1, r2, lr}
    937e:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    9380:	ab01      	add	r3, sp, #4
    9382:	4602      	mov	r2, r0
    9384:	2001      	movs	r0, #1
    9386:	f7ff fcce 	bl	8d26 <handleParameter>
}
    938a:	b003      	add	sp, #12
    938c:	f85d fb04 	ldr.w	pc, [sp], #4

00009390 <GAP>:
{
    9390:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    9392:	4602      	mov	r2, r0
    9394:	2000      	movs	r0, #0
    9396:	e4c6      	b.n	8d26 <handleParameter>

00009398 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc2041_restore(&TMC2041);
    9398:	4801      	ldr	r0, [pc, #4]	; (93a0 <restore+0x8>)
    939a:	f017 b8d8 	b.w	2054e <tmc2041_restore>
    939e:	bf00      	nop
    93a0:	1fff16a0 	.word	0x1fff16a0

000093a4 <reset>:
{
    93a4:	b538      	push	{r3, r4, r5, lr}
		if(StepDir_getActualVelocity(motor) != 0)
    93a6:	2000      	movs	r0, #0
    93a8:	f016 fb86 	bl	1fab8 <StepDir_getActualVelocity>
    93ac:	b108      	cbz	r0, 93b2 <reset+0xe>
			return 0;
    93ae:	2000      	movs	r0, #0
}
    93b0:	bd38      	pop	{r3, r4, r5, pc}
		if(StepDir_getActualVelocity(motor) != 0)
    93b2:	2001      	movs	r0, #1
    93b4:	f016 fb80 	bl	1fab8 <StepDir_getActualVelocity>
    93b8:	4604      	mov	r4, r0
    93ba:	2800      	cmp	r0, #0
    93bc:	d1f7      	bne.n	93ae <reset+0xa>
	tmc2041_reset(&TMC2041);
    93be:	4d0c      	ldr	r5, [pc, #48]	; (93f0 <reset+0x4c>)
    93c0:	4628      	mov	r0, r5
    93c2:	f017 f8b1 	bl	20528 <tmc2041_reset>
	StepDir_init(STEPDIR_PRECISION);
    93c6:	480b      	ldr	r0, [pc, #44]	; (93f4 <reset+0x50>)
    93c8:	f016 fc04 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL1_STEP1, Pins.REFR1_DIR1, NULL);
    93cc:	f8d5 228c 	ldr.w	r2, [r5, #652]	; 0x28c
    93d0:	f8d5 1284 	ldr.w	r1, [r5, #644]	; 0x284
    93d4:	4623      	mov	r3, r4
    93d6:	4620      	mov	r0, r4
    93d8:	f016 fa52 	bl	1f880 <StepDir_setPins>
	StepDir_setPins(1, Pins.REFL2_STEP2, Pins.REFR2_DIR2, NULL);
    93dc:	2001      	movs	r0, #1
    93de:	f8d5 2290 	ldr.w	r2, [r5, #656]	; 0x290
    93e2:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
    93e6:	4623      	mov	r3, r4
    93e8:	f016 fa4a 	bl	1f880 <StepDir_setPins>
	return 1;
    93ec:	2001      	movs	r0, #1
    93ee:	e7df      	b.n	93b0 <reset+0xc>
    93f0:	1fff16a0 	.word	0x1fff16a0
    93f4:	000186a0 	.word	0x000186a0

000093f8 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    93f8:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    93fa:	bf04      	itt	eq
    93fc:	4b0c      	ldreq	r3, [pc, #48]	; (9430 <enableDriver+0x38>)
    93fe:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
    9402:	b938      	cbnz	r0, 9414 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
    9404:	4b0b      	ldr	r3, [pc, #44]	; (9434 <enableDriver+0x3c>)
    9406:	68db      	ldr	r3, [r3, #12]
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    940c:	4a0a      	ldr	r2, [pc, #40]	; (9438 <enableDriver+0x40>)
    940e:	f8d2 0294 	ldr.w	r0, [r2, #660]	; 0x294
    9412:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    9414:	2801      	cmp	r0, #1
    9416:	d109      	bne.n	942c <enableDriver+0x34>
    9418:	4b05      	ldr	r3, [pc, #20]	; (9430 <enableDriver+0x38>)
    941a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    941e:	2b01      	cmp	r3, #1
    9420:	d104      	bne.n	942c <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    9422:	4b04      	ldr	r3, [pc, #16]	; (9434 <enableDriver+0x3c>)
    9424:	68db      	ldr	r3, [r3, #12]
    9426:	681b      	ldr	r3, [r3, #0]
    9428:	699b      	ldr	r3, [r3, #24]
    942a:	e7ef      	b.n	940c <enableDriver+0x14>
}
    942c:	4770      	bx	lr
    942e:	bf00      	nop
    9430:	1fff5e88 	.word	0x1fff5e88
    9434:	00029d1c 	.word	0x00029d1c
    9438:	1fff16a0 	.word	0x1fff16a0

0000943c <deInit>:
{
    943c:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
    943e:	2000      	movs	r0, #0
    9440:	f7ff ffda 	bl	93f8 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
    9444:	4b0c      	ldr	r3, [pc, #48]	; (9478 <deInit+0x3c>)
    9446:	4c0d      	ldr	r4, [pc, #52]	; (947c <deInit+0x40>)
    9448:	68dd      	ldr	r5, [r3, #12]
    944a:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    944e:	682b      	ldr	r3, [r5, #0]
    9450:	689b      	ldr	r3, [r3, #8]
    9452:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INT);
    9454:	682b      	ldr	r3, [r5, #0]
    9456:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    945a:	689b      	ldr	r3, [r3, #8]
    945c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.PP);
    945e:	682b      	ldr	r3, [r5, #0]
    9460:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    9464:	689b      	ldr	r3, [r3, #8]
    9466:	4798      	blx	r3
	StepDir_deInit();
    9468:	f016 fc2c 	bl	1fcc4 <StepDir_deInit>
	Timer.deInit();
    946c:	4b04      	ldr	r3, [pc, #16]	; (9480 <deInit+0x44>)
}
    946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.deInit();
    9472:	685b      	ldr	r3, [r3, #4]
    9474:	4718      	bx	r3
    9476:	bf00      	nop
    9478:	00029d1c 	.word	0x00029d1c
    947c:	1fff16a0 	.word	0x1fff16a0
    9480:	1fff0ae0 	.word	0x1fff0ae0

00009484 <getMax>:
{
    9484:	4603      	mov	r3, r0
	switch(type) {
    9486:	2b05      	cmp	r3, #5
{
    9488:	b510      	push	{r4, lr}
    948a:	4608      	mov	r0, r1
    948c:	4614      	mov	r4, r2
	switch(type) {
    948e:	d00c      	beq.n	94aa <getMax+0x26>
    9490:	d807      	bhi.n	94a2 <getMax+0x1e>
    9492:	3b02      	subs	r3, #2
    9494:	2b02      	cmp	r3, #2
    9496:	d806      	bhi.n	94a6 <getMax+0x22>
			*value = StepDir_getFrequency(motor);
    9498:	f016 fb6a 	bl	1fb70 <StepDir_getFrequency>
			*value = StepDir_getMaxAcceleration(motor);
    949c:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    949e:	2000      	movs	r0, #0
}
    94a0:	bd10      	pop	{r4, pc}
	switch(type) {
    94a2:	2b18      	cmp	r3, #24
    94a4:	d0f8      	beq.n	9498 <getMax+0x14>
    94a6:	2004      	movs	r0, #4
	return getLimit(LIMIT_MAX, type, motor, value);
    94a8:	e7fa      	b.n	94a0 <getMax+0x1c>
			*value = StepDir_getMaxAcceleration(motor);
    94aa:	f016 fb7d 	bl	1fba8 <StepDir_getMaxAcceleration>
    94ae:	e7f5      	b.n	949c <getMax+0x18>

000094b0 <getMeasuredSpeed>:
{
    94b0:	b538      	push	{r3, r4, r5, lr}
    94b2:	460d      	mov	r5, r1
	switch(motor)
    94b4:	4604      	mov	r4, r0
    94b6:	b920      	cbnz	r0, 94c2 <getMeasuredSpeed+0x12>
		*value = StepDir_getActualVelocity(0);
    94b8:	f016 fafe 	bl	1fab8 <StepDir_getActualVelocity>
    94bc:	6028      	str	r0, [r5, #0]
    94be:	4620      	mov	r0, r4
}
    94c0:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    94c2:	2008      	movs	r0, #8
    94c4:	e7fc      	b.n	94c0 <getMeasuredSpeed+0x10>

000094c6 <userFunction>:
{
    94c6:	4603      	mov	r3, r0
	switch(type)
    94c8:	2b02      	cmp	r3, #2
{
    94ca:	b510      	push	{r4, lr}
    94cc:	4608      	mov	r0, r1
    94ce:	4614      	mov	r4, r2
	switch(type)
    94d0:	d011      	beq.n	94f6 <userFunction+0x30>
    94d2:	2b03      	cmp	r3, #3
    94d4:	d017      	beq.n	9506 <userFunction+0x40>
    94d6:	2b01      	cmp	r3, #1
    94d8:	d118      	bne.n	950c <userFunction+0x46>
		*value = (HAL.IOs->config->isHigh(Pins.INT)) ? 1 : 0;
    94da:	4b0d      	ldr	r3, [pc, #52]	; (9510 <userFunction+0x4a>)
    94dc:	4a0d      	ldr	r2, [pc, #52]	; (9514 <userFunction+0x4e>)
    94de:	68db      	ldr	r3, [r3, #12]
    94e0:	f8d2 02a4 	ldr.w	r0, [r2, #676]	; 0x2a4
    94e4:	681b      	ldr	r3, [r3, #0]
    94e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.PP)) ? 1 : 0;
    94e8:	4798      	blx	r3
    94ea:	3800      	subs	r0, #0
    94ec:	bf18      	it	ne
    94ee:	2001      	movne	r0, #1
		*value = StepDir_getStatus(motor);
    94f0:	6020      	str	r0, [r4, #0]
	uint32_t errors = 0;
    94f2:	2000      	movs	r0, #0
}
    94f4:	bd10      	pop	{r4, pc}
		*value = (HAL.IOs->config->isHigh(Pins.PP)) ? 1 : 0;
    94f6:	4b06      	ldr	r3, [pc, #24]	; (9510 <userFunction+0x4a>)
    94f8:	4a06      	ldr	r2, [pc, #24]	; (9514 <userFunction+0x4e>)
    94fa:	68db      	ldr	r3, [r3, #12]
    94fc:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
    9500:	681b      	ldr	r3, [r3, #0]
    9502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9504:	e7f0      	b.n	94e8 <userFunction+0x22>
		*value = StepDir_getStatus(motor);
    9506:	f016 f993 	bl	1f830 <StepDir_getStatus>
    950a:	e7f1      	b.n	94f0 <userFunction+0x2a>
	switch(type)
    950c:	2004      	movs	r0, #4
	return errors;
    950e:	e7f1      	b.n	94f4 <userFunction+0x2e>
    9510:	00029d1c 	.word	0x00029d1c
    9514:	1fff16a0 	.word	0x1fff16a0

00009518 <moveBy>:
	if(motor >= TMC2041_MOTORS)
    9518:	2801      	cmp	r0, #1
{
    951a:	b538      	push	{r3, r4, r5, lr}
    951c:	4604      	mov	r4, r0
    951e:	460d      	mov	r5, r1
	if(motor >= TMC2041_MOTORS)
    9520:	d809      	bhi.n	9536 <moveBy+0x1e>
	*ticks += StepDir_getActualPosition(motor);
    9522:	f016 faa9 	bl	1fa78 <StepDir_getActualPosition>
    9526:	6829      	ldr	r1, [r5, #0]
    9528:	4401      	add	r1, r0
    952a:	6029      	str	r1, [r5, #0]
	return moveTo(motor, *ticks);
    952c:	4620      	mov	r0, r4
}
    952e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return moveTo(motor, *ticks);
    9532:	f7ff bbe1 	b.w	8cf8 <moveTo>
}
    9536:	2008      	movs	r0, #8
    9538:	bd38      	pop	{r3, r4, r5, pc}

0000953a <getMin>:
	switch(type) {
    953a:	2805      	cmp	r0, #5
    953c:	d803      	bhi.n	9546 <getMin+0xc>
    953e:	2801      	cmp	r0, #1
    9540:	d803      	bhi.n	954a <getMin+0x10>
    9542:	2004      	movs	r0, #4
}
    9544:	4770      	bx	lr
	switch(type) {
    9546:	2818      	cmp	r0, #24
    9548:	d1fb      	bne.n	9542 <getMin+0x8>
			*value = 0; // TODO: Determine limits here
    954a:	2000      	movs	r0, #0
    954c:	6010      	str	r0, [r2, #0]
    954e:	4770      	bx	lr

00009550 <tmc2041_readWriteArray>:
	return TMC2041_SPIChannel;
    9550:	4b03      	ldr	r3, [pc, #12]	; (9560 <tmc2041_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(&data[0], length);
    9552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
{
    9556:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(&data[0], length);
    9558:	68db      	ldr	r3, [r3, #12]
    955a:	4611      	mov	r1, r2
    955c:	4718      	bx	r3
    955e:	bf00      	nop
    9560:	1fff16a0 	.word	0x1fff16a0

00009564 <TMC2041_init>:

void TMC2041_init(void)
{
    9564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmc2041_init(&TMC2041, 1, Evalboards.ch2.config, &tmc2041_defaultRegisterResetState[0]);
    9568:	4c5a      	ldr	r4, [pc, #360]	; (96d4 <TMC2041_init+0x170>)
    956a:	4d5b      	ldr	r5, [pc, #364]	; (96d8 <TMC2041_init+0x174>)

	Pins.DRV_ENN      = &HAL.IOs->pins->DIO0;
    956c:	4f5b      	ldr	r7, [pc, #364]	; (96dc <TMC2041_init+0x178>)
	tmc2041_init(&TMC2041, 1, Evalboards.ch2.config, &tmc2041_defaultRegisterResetState[0]);
    956e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
    9572:	4b5b      	ldr	r3, [pc, #364]	; (96e0 <TMC2041_init+0x17c>)
    9574:	2101      	movs	r1, #1
    9576:	4628      	mov	r0, r5
    9578:	f016 ffb9 	bl	204ee <tmc2041_init>
	Pins.DRV_ENN      = &HAL.IOs->pins->DIO0;
    957c:	68fe      	ldr	r6, [r7, #12]
    957e:	6873      	ldr	r3, [r6, #4]
    9580:	f103 0268 	add.w	r2, r3, #104	; 0x68
    9584:	f8c5 2294 	str.w	r2, [r5, #660]	; 0x294
	Pins.PP           = &HAL.IOs->pins->DIO4;
    9588:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
    958c:	f8c5 22a8 	str.w	r2, [r5, #680]	; 0x2a8
	Pins.INT          = &HAL.IOs->pins->DIO5;
    9590:	f503 7284 	add.w	r2, r3, #264	; 0x108
    9594:	f8c5 22a4 	str.w	r2, [r5, #676]	; 0x2a4
	Pins.REFL1_STEP1  = &HAL.IOs->pins->DIO6;
	Pins.REFR1_DIR1   = &HAL.IOs->pins->DIO7;
    9598:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    959c:	f8c5 228c 	str.w	r2, [r5, #652]	; 0x28c
	Pins.REFL2_STEP2  = &HAL.IOs->pins->DIO8;
    95a0:	f503 72b4 	add.w	r2, r3, #360	; 0x168
	Pins.REFL1_STEP1  = &HAL.IOs->pins->DIO6;
    95a4:	f503 7094 	add.w	r0, r3, #296	; 0x128
	Pins.REFL2_STEP2  = &HAL.IOs->pins->DIO8;
    95a8:	f8c5 2288 	str.w	r2, [r5, #648]	; 0x288
	Pins.REFR2_DIR2   = &HAL.IOs->pins->DIO9;
    95ac:	f503 72c4 	add.w	r2, r3, #392	; 0x188
	Pins.CSN          = &HAL.IOs->pins->SPI2_CSN0;
    95b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
    95b4:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac

	HAL.IOs->config->toOutput(Pins.REFL1_STEP1);
    95b8:	6833      	ldr	r3, [r6, #0]
	Pins.REFR2_DIR2   = &HAL.IOs->pins->DIO9;
    95ba:	f8c5 2290 	str.w	r2, [r5, #656]	; 0x290
	HAL.IOs->config->toOutput(Pins.REFL1_STEP1);
    95be:	68db      	ldr	r3, [r3, #12]
	Pins.REFL1_STEP1  = &HAL.IOs->pins->DIO6;
    95c0:	f8c5 0284 	str.w	r0, [r5, #644]	; 0x284
	HAL.IOs->config->toOutput(Pins.REFL1_STEP1);
    95c4:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFR1_DIR1);
    95c6:	6833      	ldr	r3, [r6, #0]
    95c8:	f8d5 028c 	ldr.w	r0, [r5, #652]	; 0x28c
    95cc:	68db      	ldr	r3, [r3, #12]
    95ce:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFL2_STEP2);
    95d0:	6833      	ldr	r3, [r6, #0]
    95d2:	f8d5 0288 	ldr.w	r0, [r5, #648]	; 0x288
    95d6:	68db      	ldr	r3, [r3, #12]
    95d8:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFR2_DIR2);
    95da:	6833      	ldr	r3, [r6, #0]
    95dc:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
    95e0:	68db      	ldr	r3, [r3, #12]
    95e2:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    95e4:	6833      	ldr	r3, [r6, #0]
    95e6:	f8d5 0294 	ldr.w	r0, [r5, #660]	; 0x294
    95ea:	68db      	ldr	r3, [r3, #12]
    95ec:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.CSN);
    95ee:	6833      	ldr	r3, [r6, #0]
    95f0:	f8d5 02ac 	ldr.w	r0, [r5, #684]	; 0x2ac
    95f4:	68db      	ldr	r3, [r3, #12]
    95f6:	4798      	blx	r3

	TMC2041_SPIChannel = &HAL.SPI->ch2;
    95f8:	693b      	ldr	r3, [r7, #16]
	TMC2041_SPIChannel->CSN = Pins.CSN;

	TMC2041_config = &TMCDriver.config;

	StepDir_init(STEPDIR_PRECISION);
    95fa:	483a      	ldr	r0, [pc, #232]	; (96e4 <TMC2041_init+0x180>)
	TMC2041_SPIChannel = &HAL.SPI->ch2;
    95fc:	f103 0214 	add.w	r2, r3, #20
    9600:	f8c5 22b0 	str.w	r2, [r5, #688]	; 0x2b0
	TMC2041_SPIChannel->CSN = Pins.CSN;
    9604:	f8d5 22ac 	ldr.w	r2, [r5, #684]	; 0x2ac
    9608:	619a      	str	r2, [r3, #24]
	StepDir_init(STEPDIR_PRECISION);
    960a:	f016 fae3 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL1_STEP1, Pins.REFR1_DIR1, NULL);
    960e:	2300      	movs	r3, #0
    9610:	f8d5 228c 	ldr.w	r2, [r5, #652]	; 0x28c
    9614:	f8d5 1284 	ldr.w	r1, [r5, #644]	; 0x284
    9618:	4618      	mov	r0, r3
    961a:	f016 f931 	bl	1f880 <StepDir_setPins>
	StepDir_setPins(1, Pins.REFL2_STEP2, Pins.REFR2_DIR2, NULL);
    961e:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
    9622:	f8d5 2290 	ldr.w	r2, [r5, #656]	; 0x290
    9626:	2300      	movs	r3, #0
    9628:	2001      	movs	r0, #1
    962a:	f016 f929 	bl	1f880 <StepDir_setPins>

	Evalboards.ch2.config->reset        = reset;
    962e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    9632:	4a2d      	ldr	r2, [pc, #180]	; (96e8 <TMC2041_init+0x184>)
    9634:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    9638:	4a2c      	ldr	r2, [pc, #176]	; (96ec <TMC2041_init+0x188>)
    963a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
    963e:	2201      	movs	r2, #1
    9640:	801a      	strh	r2, [r3, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    9642:	4b2b      	ldr	r3, [pc, #172]	; (96f0 <TMC2041_init+0x18c>)
    9644:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    9648:	4b2a      	ldr	r3, [pc, #168]	; (96f4 <TMC2041_init+0x190>)
    964a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    964e:	4b2a      	ldr	r3, [pc, #168]	; (96f8 <TMC2041_init+0x194>)
    9650:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    9654:	4b29      	ldr	r3, [pc, #164]	; (96fc <TMC2041_init+0x198>)
    9656:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    965a:	4b29      	ldr	r3, [pc, #164]	; (9700 <TMC2041_init+0x19c>)
    965c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    9660:	4b28      	ldr	r3, [pc, #160]	; (9704 <TMC2041_init+0x1a0>)
    9662:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    9666:	4b28      	ldr	r3, [pc, #160]	; (9708 <TMC2041_init+0x1a4>)
    9668:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    966c:	4b27      	ldr	r3, [pc, #156]	; (970c <TMC2041_init+0x1a8>)
    966e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
    9672:	4b27      	ldr	r3, [pc, #156]	; (9710 <TMC2041_init+0x1ac>)
    9674:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
    9678:	4b26      	ldr	r3, [pc, #152]	; (9714 <TMC2041_init+0x1b0>)
    967a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
    967e:	4b26      	ldr	r3, [pc, #152]	; (9718 <TMC2041_init+0x1b4>)
    9680:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
    9684:	4b25      	ldr	r3, [pc, #148]	; (971c <TMC2041_init+0x1b8>)
    9686:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
    968a:	4b25      	ldr	r3, [pc, #148]	; (9720 <TMC2041_init+0x1bc>)
    968c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
    9690:	4b24      	ldr	r3, [pc, #144]	; (9724 <TMC2041_init+0x1c0>)
    9692:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
    9696:	4b24      	ldr	r3, [pc, #144]	; (9728 <TMC2041_init+0x1c4>)
    9698:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = TMC2041_MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    969c:	2232      	movs	r2, #50	; 0x32
    969e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    96a2:	e9c4 3221 	strd	r3, r2, [r4, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    96a6:	4b21      	ldr	r3, [pc, #132]	; (972c <TMC2041_init+0x1c8>)
    96a8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	Evalboards.ch2.getMin               = getMin;
    96ac:	4b20      	ldr	r3, [pc, #128]	; (9730 <TMC2041_init+0x1cc>)
    96ae:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	Evalboards.ch2.numberOfMotors       = TMC2041_MOTORS;
    96b2:	2002      	movs	r0, #2
	Evalboards.ch2.getMax               = getMax;
    96b4:	4b1f      	ldr	r3, [pc, #124]	; (9734 <TMC2041_init+0x1d0>)
	Evalboards.ch2.numberOfMotors       = TMC2041_MOTORS;
    96b6:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
	Evalboards.ch2.getMax               = getMax;
    96ba:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);

	Timer.init();
    96be:	4c1e      	ldr	r4, [pc, #120]	; (9738 <TMC2041_init+0x1d4>)
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    96c0:	f7ff fe9a 	bl	93f8 <enableDriver>
	Timer.init();
    96c4:	6823      	ldr	r3, [r4, #0]
    96c6:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    96c8:	2100      	movs	r1, #0
    96ca:	68a3      	ldr	r3, [r4, #8]
    96cc:	4608      	mov	r0, r1
}
    96ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    96d2:	4718      	bx	r3
    96d4:	1fff5e88 	.word	0x1fff5e88
    96d8:	1fff16a0 	.word	0x1fff16a0
    96dc:	00029d1c 	.word	0x00029d1c
    96e0:	00027ed8 	.word	0x00027ed8
    96e4:	000186a0 	.word	0x000186a0
    96e8:	000093a5 	.word	0x000093a5
    96ec:	00009399 	.word	0x00009399
    96f0:	00008d0b 	.word	0x00008d0b
    96f4:	00008d25 	.word	0x00008d25
    96f8:	00008d21 	.word	0x00008d21
    96fc:	00008d1d 	.word	0x00008d1d
    9700:	00009391 	.word	0x00009391
    9704:	0000937d 	.word	0x0000937d
    9708:	00008cf9 	.word	0x00008cf9
    970c:	00009519 	.word	0x00009519
    9710:	00008ced 	.word	0x00008ced
    9714:	00008c95 	.word	0x00008c95
    9718:	00008ca9 	.word	0x00008ca9
    971c:	000094c7 	.word	0x000094c7
    9720:	000094b1 	.word	0x000094b1
    9724:	000093f9 	.word	0x000093f9
    9728:	00008c85 	.word	0x00008c85
    972c:	0000943d 	.word	0x0000943d
    9730:	0000953b 	.word	0x0000953b
    9734:	00009485 	.word	0x00009485
    9738:	1fff0ae0 	.word	0x1fff0ae0

0000973c <writeRegister>:
static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
{
	UNUSED(address);
	UNUSED(motor);

	TMCRhinoSA.setInt(value);
    973c:	4b01      	ldr	r3, [pc, #4]	; (9744 <writeRegister+0x8>)
    973e:	4610      	mov	r0, r2
    9740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9742:	4718      	bx	r3
    9744:	1fff0008 	.word	0x1fff0008

00009748 <readRegister>:
static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
{
	UNUSED(address);
	UNUSED(motor);

	*value = TMCRhinoSA.getInt();
    9748:	4b03      	ldr	r3, [pc, #12]	; (9758 <readRegister+0x10>)
{
    974a:	b510      	push	{r4, lr}
	*value = TMCRhinoSA.getInt();
    974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
    974e:	4614      	mov	r4, r2
	*value = TMCRhinoSA.getInt();
    9750:	4798      	blx	r3
    9752:	6020      	str	r0, [r4, #0]
}
    9754:	bd10      	pop	{r4, pc}
    9756:	bf00      	nop
    9758:	1fff0008 	.word	0x1fff0008

0000975c <getStandAloneSettings>:
{
	TMCRhinoTypeStandAloneConfigDef config;

	uint32_t errors = TMC_ERROR_NONE;

	if(i > 6)
    975c:	2806      	cmp	r0, #6
{
    975e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9760:	4604      	mov	r4, r0
    9762:	460e      	mov	r6, r1
	if(i > 6)
    9764:	d87b      	bhi.n	985e <getStandAloneSettings+0x102>
	{
		errors |= TMC_ERROR_TYPE;
		return errors;
	}

	TMCRhinoSA.getConfig(&config);
    9766:	4d40      	ldr	r5, [pc, #256]	; (9868 <getStandAloneSettings+0x10c>)
    9768:	4668      	mov	r0, sp
    976a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    976c:	3c01      	subs	r4, #1
    976e:	4798      	blx	r3

	switch(i)
    9770:	462b      	mov	r3, r5
    9772:	2c04      	cmp	r4, #4
    9774:	d804      	bhi.n	9780 <getStandAloneSettings+0x24>
    9776:	e8df f004 	tbb	[pc, r4]
    977a:	6608      	.short	0x6608
    977c:	6c69      	.short	0x6c69
    977e:	6f          	.byte	0x6f
    977f:	00          	.byte	0x00
	{
	case 0:
		*value = config.chopperOffTime;
    9780:	f89d 3000 	ldrb.w	r3, [sp]
		if(     (config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY1_INTERPOL0) &&
			    (config.microstepResolution2 == TMCRhinoSA.MicrostepResolutionSettings2.BY1_INTERPOL0))
			*value = 0;
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY2_INTERPOL0) &&
				(config.microstepResolution2 == TMCRhinoSA.MicrostepResolutionSettings2.BY2_INTERPOL0))
			*value = 1;
    9784:	6033      	str	r3, [r6, #0]
	uint32_t errors = TMC_ERROR_NONE;
    9786:	2000      	movs	r0, #0
			*value = 1;
    9788:	e00b      	b.n	97a2 <getStandAloneSettings+0x46>
		if(     (config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY1_INTERPOL0) &&
    978a:	f89d 2001 	ldrb.w	r2, [sp, #1]
    978e:	78e9      	ldrb	r1, [r5, #3]
    9790:	4291      	cmp	r1, r2
    9792:	d108      	bne.n	97a6 <getStandAloneSettings+0x4a>
    9794:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9798:	7b29      	ldrb	r1, [r5, #12]
    979a:	4288      	cmp	r0, r1
    979c:	d103      	bne.n	97a6 <getStandAloneSettings+0x4a>
			*value = 0;
    979e:	2000      	movs	r0, #0
    97a0:	6030      	str	r0, [r6, #0]
	case 6:
		*value = config.chopperOffTime;
		break;
	}
	return errors;
}
    97a2:	b002      	add	sp, #8
    97a4:	bd70      	pop	{r4, r5, r6, pc}
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY2_INTERPOL0) &&
    97a6:	7919      	ldrb	r1, [r3, #4]
    97a8:	4291      	cmp	r1, r2
    97aa:	d106      	bne.n	97ba <getStandAloneSettings+0x5e>
    97ac:	f89d 0002 	ldrb.w	r0, [sp, #2]
    97b0:	7b59      	ldrb	r1, [r3, #13]
    97b2:	4288      	cmp	r0, r1
    97b4:	d101      	bne.n	97ba <getStandAloneSettings+0x5e>
			*value = 1;
    97b6:	2301      	movs	r3, #1
    97b8:	e7e4      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY2_INTERPOL256) &&
    97ba:	7959      	ldrb	r1, [r3, #5]
    97bc:	4291      	cmp	r1, r2
    97be:	d106      	bne.n	97ce <getStandAloneSettings+0x72>
    97c0:	f89d 0002 	ldrb.w	r0, [sp, #2]
    97c4:	7b99      	ldrb	r1, [r3, #14]
    97c6:	4288      	cmp	r0, r1
    97c8:	d101      	bne.n	97ce <getStandAloneSettings+0x72>
			*value = 2;
    97ca:	2302      	movs	r3, #2
    97cc:	e7da      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY4_INTERPOL0) &&
    97ce:	7999      	ldrb	r1, [r3, #6]
    97d0:	4291      	cmp	r1, r2
    97d2:	d106      	bne.n	97e2 <getStandAloneSettings+0x86>
    97d4:	f89d 0002 	ldrb.w	r0, [sp, #2]
    97d8:	7bd9      	ldrb	r1, [r3, #15]
    97da:	4288      	cmp	r0, r1
    97dc:	d101      	bne.n	97e2 <getStandAloneSettings+0x86>
			*value = 3;
    97de:	2303      	movs	r3, #3
    97e0:	e7d0      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY4_INTERPOL256) &&
    97e2:	79d9      	ldrb	r1, [r3, #7]
    97e4:	4291      	cmp	r1, r2
    97e6:	d106      	bne.n	97f6 <getStandAloneSettings+0x9a>
    97e8:	f89d 0002 	ldrb.w	r0, [sp, #2]
    97ec:	7c19      	ldrb	r1, [r3, #16]
    97ee:	4288      	cmp	r0, r1
    97f0:	d101      	bne.n	97f6 <getStandAloneSettings+0x9a>
			*value = 4;
    97f2:	2304      	movs	r3, #4
    97f4:	e7c6      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY16_INTERPOL0) &&
    97f6:	7a59      	ldrb	r1, [r3, #9]
    97f8:	4291      	cmp	r1, r2
    97fa:	d106      	bne.n	980a <getStandAloneSettings+0xae>
    97fc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9800:	7c99      	ldrb	r1, [r3, #18]
    9802:	4288      	cmp	r0, r1
    9804:	d101      	bne.n	980a <getStandAloneSettings+0xae>
			*value = 5;
    9806:	2305      	movs	r3, #5
    9808:	e7bc      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.BY16_INTERPOL256) &&
    980a:	7a99      	ldrb	r1, [r3, #10]
    980c:	4291      	cmp	r1, r2
    980e:	d106      	bne.n	981e <getStandAloneSettings+0xc2>
    9810:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9814:	7cd9      	ldrb	r1, [r3, #19]
    9816:	4288      	cmp	r0, r1
    9818:	d101      	bne.n	981e <getStandAloneSettings+0xc2>
			*value = 6;
    981a:	2306      	movs	r3, #6
    981c:	e7b2      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.PWM_CHOP_BY4_INTERPOL256) &&
    981e:	7a19      	ldrb	r1, [r3, #8]
    9820:	4291      	cmp	r1, r2
    9822:	d106      	bne.n	9832 <getStandAloneSettings+0xd6>
    9824:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9828:	7c59      	ldrb	r1, [r3, #17]
    982a:	4288      	cmp	r0, r1
    982c:	d101      	bne.n	9832 <getStandAloneSettings+0xd6>
			*value = 7;
    982e:	2307      	movs	r3, #7
    9830:	e7a8      	b.n	9784 <getStandAloneSettings+0x28>
		else if((config.microstepResolution1 == TMCRhinoSA.MicrostepResolutionSettings1.PWM_CHOP_BY16_INTERPOL256) &&
    9832:	7ad9      	ldrb	r1, [r3, #11]
    9834:	4291      	cmp	r1, r2
    9836:	d114      	bne.n	9862 <getStandAloneSettings+0x106>
    9838:	f89d 2002 	ldrb.w	r2, [sp, #2]
    983c:	7d1b      	ldrb	r3, [r3, #20]
    983e:	429a      	cmp	r2, r3
    9840:	d10f      	bne.n	9862 <getStandAloneSettings+0x106>
			*value = 8;
    9842:	2308      	movs	r3, #8
    9844:	e79e      	b.n	9784 <getStandAloneSettings+0x28>
		*value = config.currentSetting;
    9846:	f89d 3003 	ldrb.w	r3, [sp, #3]
    984a:	e79b      	b.n	9784 <getStandAloneSettings+0x28>
		*value = config.chopperHysteresis;
    984c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9850:	e798      	b.n	9784 <getStandAloneSettings+0x28>
		*value = config.chopperBlankTime;
    9852:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9856:	e795      	b.n	9784 <getStandAloneSettings+0x28>
		*value = config.enableStandStillPowerDown;
    9858:	f89d 3006 	ldrb.w	r3, [sp, #6]
    985c:	e792      	b.n	9784 <getStandAloneSettings+0x28>
		return errors;
    985e:	2004      	movs	r0, #4
    9860:	e79f      	b.n	97a2 <getStandAloneSettings+0x46>
			errors |= TMC_ERROR_VALUE;
    9862:	2010      	movs	r0, #16
    9864:	e79d      	b.n	97a2 <getStandAloneSettings+0x46>
    9866:	bf00      	nop
    9868:	1fff0008 	.word	0x1fff0008

0000986c <enableDriver>:

	return 1;
}

static void enableDriver(DriverState state)
{
    986c:	b507      	push	{r0, r1, r2, lr}
	TMCRhinoTypeStandAloneConfigDef config;
	TMCRhinoSA.getConfig(&config);
    986e:	4b03      	ldr	r3, [pc, #12]	; (987c <enableDriver+0x10>)
    9870:	4668      	mov	r0, sp
    9872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9874:	4798      	blx	r3
	}
	else
	{
		config.enableStandStillPowerDown = lastEnable;
	}
}
    9876:	b003      	add	sp, #12
    9878:	f85d fb04 	ldr.w	pc, [sp], #4
    987c:	1fff0008 	.word	0x1fff0008

00009880 <deInit>:
{
    9880:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
    9882:	2000      	movs	r0, #0
    9884:	f7ff fff2 	bl	986c <enableDriver>
	HAL.IOs->config->reset(Pins.AIN_REF_PWM);
    9888:	4b1e      	ldr	r3, [pc, #120]	; (9904 <deInit+0x84>)
    988a:	4c1f      	ldr	r4, [pc, #124]	; (9908 <deInit+0x88>)
    988c:	68dd      	ldr	r5, [r3, #12]
    988e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9890:	682b      	ldr	r3, [r5, #0]
    9892:	689b      	ldr	r3, [r3, #8]
    9894:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.AIN_REF_SW);
    9896:	682b      	ldr	r3, [r5, #0]
    9898:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    989a:	689b      	ldr	r3, [r3, #8]
    989c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG0);
    989e:	682b      	ldr	r3, [r5, #0]
    98a0:	68e0      	ldr	r0, [r4, #12]
    98a2:	689b      	ldr	r3, [r3, #8]
    98a4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG1);
    98a6:	682b      	ldr	r3, [r5, #0]
    98a8:	68a0      	ldr	r0, [r4, #8]
    98aa:	689b      	ldr	r3, [r3, #8]
    98ac:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG2);
    98ae:	682b      	ldr	r3, [r5, #0]
    98b0:	6860      	ldr	r0, [r4, #4]
    98b2:	689b      	ldr	r3, [r3, #8]
    98b4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG3);
    98b6:	682b      	ldr	r3, [r5, #0]
    98b8:	6820      	ldr	r0, [r4, #0]
    98ba:	689b      	ldr	r3, [r3, #8]
    98bc:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG4);
    98be:	682b      	ldr	r3, [r5, #0]
    98c0:	69a0      	ldr	r0, [r4, #24]
    98c2:	689b      	ldr	r3, [r3, #8]
    98c4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG5);
    98c6:	682b      	ldr	r3, [r5, #0]
    98c8:	69e0      	ldr	r0, [r4, #28]
    98ca:	689b      	ldr	r3, [r3, #8]
    98cc:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CFG6_ENN);
    98ce:	682b      	ldr	r3, [r5, #0]
    98d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    98d2:	689b      	ldr	r3, [r3, #8]
    98d4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    98d6:	682b      	ldr	r3, [r5, #0]
    98d8:	6960      	ldr	r0, [r4, #20]
    98da:	689b      	ldr	r3, [r3, #8]
    98dc:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ERROR);
    98de:	682b      	ldr	r3, [r5, #0]
    98e0:	6a20      	ldr	r0, [r4, #32]
    98e2:	689b      	ldr	r3, [r3, #8]
    98e4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INDEX);
    98e6:	682b      	ldr	r3, [r5, #0]
    98e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    98ea:	689b      	ldr	r3, [r3, #8]
    98ec:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    98ee:	682b      	ldr	r3, [r5, #0]
    98f0:	6920      	ldr	r0, [r4, #16]
    98f2:	689b      	ldr	r3, [r3, #8]
    98f4:	4798      	blx	r3
	StepDir_deInit();
    98f6:	f016 f9e5 	bl	1fcc4 <StepDir_deInit>
	Timer.deInit();
    98fa:	4b04      	ldr	r3, [pc, #16]	; (990c <deInit+0x8c>)
}
    98fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.deInit();
    9900:	685b      	ldr	r3, [r3, #4]
    9902:	4718      	bx	r3
    9904:	00029d1c 	.word	0x00029d1c
    9908:	1fff1960 	.word	0x1fff1960
    990c:	1fff0ae0 	.word	0x1fff0ae0

00009910 <periodicJob>:
		StepDir_periodicJob(motor);
    9910:	2000      	movs	r0, #0
    9912:	f015 bf47 	b.w	1f7a4 <StepDir_periodicJob>

00009916 <moveTo>:
{
    9916:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    9918:	4604      	mov	r4, r0
    991a:	b918      	cbnz	r0, 9924 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    991c:	f015 ff2a 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    9920:	4620      	mov	r0, r4
}
    9922:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    9924:	2008      	movs	r0, #8
    9926:	e7fc      	b.n	9922 <moveTo+0xc>

00009928 <rotate>:
{
    9928:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    992a:	4604      	mov	r4, r0
    992c:	b918      	cbnz	r0, 9936 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    992e:	f015 fefb 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    9932:	4620      	mov	r0, r4
}
    9934:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    9936:	2008      	movs	r0, #8
    9938:	e7fc      	b.n	9934 <rotate+0xc>

0000993a <stop>:
	return rotate(motor, 0);
    993a:	2100      	movs	r1, #0
    993c:	e7f4      	b.n	9928 <rotate>

0000993e <left>:
	return rotate(motor, -velocity);
    993e:	4249      	negs	r1, r1
    9940:	e7f2      	b.n	9928 <rotate>

00009942 <right>:
	return rotate(motor, velocity);
    9942:	e7f1      	b.n	9928 <rotate>

00009944 <setStandAloneSettings>:
	if(i > 6)
    9944:	2806      	cmp	r0, #6
{
    9946:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9948:	4605      	mov	r5, r0
    994a:	460c      	mov	r4, r1
	if(i > 6)
    994c:	d85d      	bhi.n	9a0a <setStandAloneSettings+0xc6>
	if((value < 0) || (value > 2))
    994e:	2902      	cmp	r1, #2
    9950:	d903      	bls.n	995a <setStandAloneSettings+0x16>
		if((i != 1) || (value > 0x0F))
    9952:	2801      	cmp	r0, #1
    9954:	d15b      	bne.n	9a0e <setStandAloneSettings+0xca>
    9956:	290f      	cmp	r1, #15
    9958:	dc59      	bgt.n	9a0e <setStandAloneSettings+0xca>
	TMCRhinoSA.getConfig(&config);
    995a:	4e2e      	ldr	r6, [pc, #184]	; (9a14 <setStandAloneSettings+0xd0>)
    995c:	4668      	mov	r0, sp
    995e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    9960:	4798      	blx	r3
	switch(i)
    9962:	4633      	mov	r3, r6
    9964:	2d05      	cmp	r5, #5
    9966:	d806      	bhi.n	9976 <setStandAloneSettings+0x32>
    9968:	e8df f005 	tbb	[pc, r5]
    996c:	46430b03 	.word	0x46430b03
    9970:	4c49      	.short	0x4c49
		config.chopperOffTime = value;
    9972:	f88d 4000 	strb.w	r4, [sp]
	TMCRhinoSA.setConfig(&config);
    9976:	4668      	mov	r0, sp
    9978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    997a:	4798      	blx	r3
	return errors;
    997c:	2000      	movs	r0, #0
}
    997e:	b002      	add	sp, #8
    9980:	bd70      	pop	{r4, r5, r6, pc}
		switch(value)
    9982:	2c08      	cmp	r4, #8
    9984:	d8f7      	bhi.n	9976 <setStandAloneSettings+0x32>
    9986:	e8df f004 	tbb	[pc, r4]
    998a:	0c05      	.short	0x0c05
    998c:	201b1611 	.word	0x201b1611
    9990:	2a25      	.short	0x2a25
    9992:	2f          	.byte	0x2f
    9993:	00          	.byte	0x00
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY1_INTERPOL0;
    9994:	78f2      	ldrb	r2, [r6, #3]
    9996:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY1_INTERPOL0;
    999a:	7b32      	ldrb	r2, [r6, #12]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY2_INTERPOL0;
    999c:	f88d 2002 	strb.w	r2, [sp, #2]
			break;
    99a0:	e7e9      	b.n	9976 <setStandAloneSettings+0x32>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY2_INTERPOL0;
    99a2:	7932      	ldrb	r2, [r6, #4]
    99a4:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY2_INTERPOL0;
    99a8:	7b72      	ldrb	r2, [r6, #13]
    99aa:	e7f7      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY2_INTERPOL256;
    99ac:	7972      	ldrb	r2, [r6, #5]
    99ae:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY2_INTERPOL256;
    99b2:	7bb2      	ldrb	r2, [r6, #14]
    99b4:	e7f2      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY4_INTERPOL0;
    99b6:	79b2      	ldrb	r2, [r6, #6]
    99b8:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY4_INTERPOL0;
    99bc:	7bf2      	ldrb	r2, [r6, #15]
    99be:	e7ed      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY4_INTERPOL256;
    99c0:	79f2      	ldrb	r2, [r6, #7]
    99c2:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY4_INTERPOL256;
    99c6:	7c32      	ldrb	r2, [r6, #16]
    99c8:	e7e8      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY16_INTERPOL0;
    99ca:	7a72      	ldrb	r2, [r6, #9]
    99cc:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY16_INTERPOL0;
    99d0:	7cb2      	ldrb	r2, [r6, #18]
    99d2:	e7e3      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.BY16_INTERPOL256;
    99d4:	7ab2      	ldrb	r2, [r6, #10]
    99d6:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.BY16_INTERPOL256;
    99da:	7cf2      	ldrb	r2, [r6, #19]
    99dc:	e7de      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.PWM_CHOP_BY4_INTERPOL256;
    99de:	7a32      	ldrb	r2, [r6, #8]
    99e0:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.PWM_CHOP_BY4_INTERPOL256;
    99e4:	7c72      	ldrb	r2, [r6, #17]
    99e6:	e7d9      	b.n	999c <setStandAloneSettings+0x58>
			config.microstepResolution1 = TMCRhinoSA.MicrostepResolutionSettings1.PWM_CHOP_BY16_INTERPOL256;
    99e8:	7af2      	ldrb	r2, [r6, #11]
    99ea:	f88d 2001 	strb.w	r2, [sp, #1]
			config.microstepResolution2 = TMCRhinoSA.MicrostepResolutionSettings2.PWM_CHOP_BY16_INTERPOL256;
    99ee:	7d32      	ldrb	r2, [r6, #20]
    99f0:	e7d4      	b.n	999c <setStandAloneSettings+0x58>
		config.currentSetting = value;
    99f2:	f88d 4003 	strb.w	r4, [sp, #3]
		break;
    99f6:	e7be      	b.n	9976 <setStandAloneSettings+0x32>
		config.chopperHysteresis = value;
    99f8:	f88d 4004 	strb.w	r4, [sp, #4]
		break;
    99fc:	e7bb      	b.n	9976 <setStandAloneSettings+0x32>
		config.chopperBlankTime = value;
    99fe:	f88d 4005 	strb.w	r4, [sp, #5]
		break;
    9a02:	e7b8      	b.n	9976 <setStandAloneSettings+0x32>
		config.enableStandStillPowerDown = lastEnable = value;
    9a04:	f88d 4006 	strb.w	r4, [sp, #6]
		break;
    9a08:	e7b5      	b.n	9976 <setStandAloneSettings+0x32>
		return errors;
    9a0a:	2004      	movs	r0, #4
    9a0c:	e7b7      	b.n	997e <setStandAloneSettings+0x3a>
			return errors;
    9a0e:	2010      	movs	r0, #16
    9a10:	e7b5      	b.n	997e <setStandAloneSettings+0x3a>
    9a12:	bf00      	nop
    9a14:	1fff0008 	.word	0x1fff0008

00009a18 <userFunction>:
{
    9a18:	b538      	push	{r3, r4, r5, lr}
    9a1a:	4604      	mov	r4, r0
    9a1c:	4615      	mov	r5, r2
    9a1e:	4608      	mov	r0, r1
	switch(type)
    9a20:	b11c      	cbz	r4, 9a2a <userFunction+0x12>
    9a22:	2c01      	cmp	r4, #1
    9a24:	d006      	beq.n	9a34 <userFunction+0x1c>
    9a26:	2004      	movs	r0, #4
}
    9a28:	bd38      	pop	{r3, r4, r5, pc}
		*value = StepDir_getStatus(motor);
    9a2a:	f015 ff01 	bl	1f830 <StepDir_getStatus>
    9a2e:	6028      	str	r0, [r5, #0]
		HAL.IOs->config->setLow(TMCRhinoSA.CFGPins[5]);
    9a30:	2000      	movs	r0, #0
	return errors;
    9a32:	e7f9      	b.n	9a28 <userFunction+0x10>
		Pins.CFG5 = &HAL.IOs->pins->DIO6;
    9a34:	4b09      	ldr	r3, [pc, #36]	; (9a5c <userFunction+0x44>)
		TMCRhinoSA.CFGPins[5] = Pins.CFG5;
    9a36:	4d0a      	ldr	r5, [pc, #40]	; (9a60 <userFunction+0x48>)
		Pins.CFG5 = &HAL.IOs->pins->DIO6;
    9a38:	68dc      	ldr	r4, [r3, #12]
    9a3a:	4b0a      	ldr	r3, [pc, #40]	; (9a64 <userFunction+0x4c>)
    9a3c:	6860      	ldr	r0, [r4, #4]
    9a3e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9a42:	61d8      	str	r0, [r3, #28]
		TMCRhinoSA.CFGPins[5] = Pins.CFG5;
    9a44:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    9a46:	6158      	str	r0, [r3, #20]
		HAL.IOs->config->toOutput(TMCRhinoSA.CFGPins[5]);
    9a48:	6823      	ldr	r3, [r4, #0]
    9a4a:	68db      	ldr	r3, [r3, #12]
    9a4c:	4798      	blx	r3
		HAL.IOs->config->setLow(TMCRhinoSA.CFGPins[5]);
    9a4e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    9a50:	6823      	ldr	r3, [r4, #0]
    9a52:	6950      	ldr	r0, [r2, #20]
    9a54:	699b      	ldr	r3, [r3, #24]
    9a56:	4798      	blx	r3
    9a58:	e7ea      	b.n	9a30 <userFunction+0x18>
    9a5a:	bf00      	nop
    9a5c:	00029d1c 	.word	0x00029d1c
    9a60:	1fff0008 	.word	0x1fff0008
    9a64:	1fff1960 	.word	0x1fff1960

00009a68 <moveBy>:
{
    9a68:	b538      	push	{r3, r4, r5, lr}
    9a6a:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    9a6c:	4604      	mov	r4, r0
    9a6e:	b948      	cbnz	r0, 9a84 <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    9a70:	f016 f802 	bl	1fa78 <StepDir_getActualPosition>
    9a74:	6829      	ldr	r1, [r5, #0]
    9a76:	4401      	add	r1, r0
    9a78:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    9a7a:	4620      	mov	r0, r4
    9a7c:	f015 fe7a 	bl	1f774 <StepDir_moveTo>
    9a80:	4620      	mov	r0, r4
}
    9a82:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    9a84:	2008      	movs	r0, #8
    9a86:	e7fc      	b.n	9a82 <moveBy+0x1a>

00009a88 <GAP>:
{
    9a88:	b538      	push	{r3, r4, r5, lr}
    9a8a:	4615      	mov	r5, r2
	if(motor >= MOTORS)
    9a8c:	2900      	cmp	r1, #0
    9a8e:	d158      	bne.n	9b42 <GAP+0xba>
	switch(type)
    9a90:	2813      	cmp	r0, #19
    9a92:	d80e      	bhi.n	9ab2 <GAP+0x2a>
    9a94:	1e42      	subs	r2, r0, #1
    9a96:	2a12      	cmp	r2, #18
    9a98:	d811      	bhi.n	9abe <GAP+0x36>
    9a9a:	e8df f002 	tbb	[pc, r2]
    9a9e:	1a16      	.short	0x1a16
    9aa0:	2a26221e 	.word	0x2a26221e
    9aa4:	2a2a2a2a 	.word	0x2a2a2a2a
    9aa8:	443d322a 	.word	0x443d322a
    9aac:	44444444 	.word	0x44444444
    9ab0:	44          	.byte	0x44
    9ab1:	00          	.byte	0x00
    9ab2:	2832      	cmp	r0, #50	; 0x32
    9ab4:	d03d      	beq.n	9b32 <GAP+0xaa>
    9ab6:	2833      	cmp	r0, #51	; 0x33
    9ab8:	d03f      	beq.n	9b3a <GAP+0xb2>
				errors |= TMC_ERROR_TYPE;
    9aba:	2004      	movs	r0, #4
	return handleParameter(READ, motor, type, value);
    9abc:	e004      	b.n	9ac8 <GAP+0x40>
			*value = StepDir_getTargetPosition(motor);
    9abe:	2000      	movs	r0, #0
    9ac0:	f015 ffea 	bl	1fa98 <StepDir_getTargetPosition>
    9ac4:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
    9ac6:	2000      	movs	r0, #0
}
    9ac8:	bd38      	pop	{r3, r4, r5, pc}
			*value = StepDir_getActualPosition(motor);
    9aca:	2000      	movs	r0, #0
    9acc:	f015 ffd4 	bl	1fa78 <StepDir_getActualPosition>
    9ad0:	e7f8      	b.n	9ac4 <GAP+0x3c>
			*value = StepDir_getTargetVelocity(motor);
    9ad2:	2000      	movs	r0, #0
    9ad4:	f016 f800 	bl	1fad8 <StepDir_getTargetVelocity>
    9ad8:	e7f4      	b.n	9ac4 <GAP+0x3c>
			*value = StepDir_getActualVelocity(motor);
    9ada:	2000      	movs	r0, #0
    9adc:	f015 ffec 	bl	1fab8 <StepDir_getActualVelocity>
    9ae0:	e7f0      	b.n	9ac4 <GAP+0x3c>
			*value = StepDir_getVelocityMax(motor);
    9ae2:	2000      	movs	r0, #0
    9ae4:	f016 f818 	bl	1fb18 <StepDir_getVelocityMax>
    9ae8:	e7ec      	b.n	9ac4 <GAP+0x3c>
			*value = StepDir_getAcceleration(motor);
    9aea:	2000      	movs	r0, #0
    9aec:	f016 f804 	bl	1faf8 <StepDir_getAcceleration>
    9af0:	e7e8      	b.n	9ac4 <GAP+0x3c>
			if(type == 8)
    9af2:	2808      	cmp	r0, #8
    9af4:	d1e1      	bne.n	9aba <GAP+0x32>
				*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    9af6:	2000      	movs	r0, #0
    9af8:	f015 fe9a 	bl	1f830 <StepDir_getStatus>
    9afc:	f3c0 1000 	ubfx	r0, r0, #4, #1
    9b00:	e7e0      	b.n	9ac4 <GAP+0x3c>
			*value = (HAL.IOs->config->isHigh(Pins.AIN_REF_SW))? 1 : 0;
    9b02:	4b11      	ldr	r3, [pc, #68]	; (9b48 <GAP+0xc0>)
    9b04:	4a11      	ldr	r2, [pc, #68]	; (9b4c <GAP+0xc4>)
    9b06:	68db      	ldr	r3, [r3, #12]
    9b08:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    9b0a:	681b      	ldr	r3, [r3, #0]
    9b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			*value = (HAL.IOs->config->isHigh(Pins.AIN_REF_PWM)) ? 1 : 0;
    9b0e:	4798      	blx	r3
    9b10:	3800      	subs	r0, #0
    9b12:	bf18      	it	ne
    9b14:	2001      	movne	r0, #1
    9b16:	e7d5      	b.n	9ac4 <GAP+0x3c>
    9b18:	4b0b      	ldr	r3, [pc, #44]	; (9b48 <GAP+0xc0>)
    9b1a:	4a0c      	ldr	r2, [pc, #48]	; (9b4c <GAP+0xc4>)
    9b1c:	68db      	ldr	r3, [r3, #12]
    9b1e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    9b20:	681b      	ldr	r3, [r3, #0]
    9b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9b24:	e7f3      	b.n	9b0e <GAP+0x86>
			getStandAloneSettings(type - 14, value);
    9b26:	380e      	subs	r0, #14
    9b28:	4629      	mov	r1, r5
    9b2a:	b2c0      	uxtb	r0, r0
    9b2c:	f7ff fe16 	bl	975c <getStandAloneSettings>
    9b30:	e7c9      	b.n	9ac6 <GAP+0x3e>
			*value = StepDir_getMode(motor);
    9b32:	4608      	mov	r0, r1
    9b34:	f016 f80e 	bl	1fb54 <StepDir_getMode>
    9b38:	e7c4      	b.n	9ac4 <GAP+0x3c>
			*value = StepDir_getFrequency(motor);
    9b3a:	4608      	mov	r0, r1
    9b3c:	f016 f818 	bl	1fb70 <StepDir_getFrequency>
    9b40:	e7c0      	b.n	9ac4 <GAP+0x3c>
		return TMC_ERROR_MOTOR;
    9b42:	2008      	movs	r0, #8
    9b44:	e7c0      	b.n	9ac8 <GAP+0x40>
    9b46:	bf00      	nop
    9b48:	00029d1c 	.word	0x00029d1c
    9b4c:	1fff1960 	.word	0x1fff1960

00009b50 <SAP>:
{
    9b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(motor >= MOTORS)
    9b52:	460c      	mov	r4, r1
{
    9b54:	9201      	str	r2, [sp, #4]
	if(motor >= MOTORS)
    9b56:	2900      	cmp	r1, #0
    9b58:	d16a      	bne.n	9c30 <SAP+0xe0>
	switch(type)
    9b5a:	2813      	cmp	r0, #19
    9b5c:	d80d      	bhi.n	9b7a <SAP+0x2a>
    9b5e:	2813      	cmp	r0, #19
    9b60:	d811      	bhi.n	9b86 <SAP+0x36>
    9b62:	e8df f000 	tbb	[pc, r0]
    9b66:	1a12      	.short	0x1a12
    9b68:	2c24101f 	.word	0x2c24101f
    9b6c:	31313131 	.word	0x31313131
    9b70:	45383131 	.word	0x45383131
    9b74:	50505050 	.word	0x50505050
    9b78:	5050      	.short	0x5050
    9b7a:	2833      	cmp	r0, #51	; 0x33
    9b7c:	d04a      	beq.n	9c14 <SAP+0xc4>
    9b7e:	288c      	cmp	r0, #140	; 0x8c
    9b80:	d04d      	beq.n	9c1e <SAP+0xce>
    9b82:	2832      	cmp	r0, #50	; 0x32
    9b84:	d041      	beq.n	9c0a <SAP+0xba>
				errors |= TMC_ERROR_TYPE;
    9b86:	2404      	movs	r4, #4
	return handleParameter(WRITE, motor, type, &value);
    9b88:	e004      	b.n	9b94 <SAP+0x44>
			StepDir_moveTo(motor, *value);
    9b8a:	9901      	ldr	r1, [sp, #4]
    9b8c:	2000      	movs	r0, #0
    9b8e:	f015 fdf1 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    9b92:	2400      	movs	r4, #0
}
    9b94:	4620      	mov	r0, r4
    9b96:	b004      	add	sp, #16
    9b98:	bd10      	pop	{r4, pc}
			StepDir_setActualPosition(motor, *value);
    9b9a:	9901      	ldr	r1, [sp, #4]
    9b9c:	2000      	movs	r0, #0
    9b9e:	f015 ff0b 	bl	1f9b8 <StepDir_setActualPosition>
    9ba2:	e7f6      	b.n	9b92 <SAP+0x42>
			StepDir_rotate(motor, *value);
    9ba4:	9901      	ldr	r1, [sp, #4]
    9ba6:	2000      	movs	r0, #0
    9ba8:	f015 fdbe 	bl	1f728 <StepDir_rotate>
    9bac:	e7f1      	b.n	9b92 <SAP+0x42>
			StepDir_setVelocityMax(motor, abs(*value));
    9bae:	9901      	ldr	r1, [sp, #4]
    9bb0:	2900      	cmp	r1, #0
    9bb2:	bfb8      	it	lt
    9bb4:	4249      	neglt	r1, r1
    9bb6:	2000      	movs	r0, #0
    9bb8:	f015 ff1a 	bl	1f9f0 <StepDir_setVelocityMax>
    9bbc:	e7e9      	b.n	9b92 <SAP+0x42>
			StepDir_setAcceleration(motor, *value);
    9bbe:	9901      	ldr	r1, [sp, #4]
    9bc0:	2000      	movs	r0, #0
    9bc2:	f016 f8c7 	bl	1fd54 <StepDir_setAcceleration>
    9bc6:	e7e4      	b.n	9b92 <SAP+0x42>
			errors |= setStandAloneSettings(type-6, *value);
    9bc8:	3806      	subs	r0, #6
			errors |= setStandAloneSettings(type - 14, *value);
    9bca:	9901      	ldr	r1, [sp, #4]
    9bcc:	b2c0      	uxtb	r0, r0
    9bce:	f7ff feb9 	bl	9944 <setStandAloneSettings>
    9bd2:	4604      	mov	r4, r0
    9bd4:	e7de      	b.n	9b94 <SAP+0x44>
			if(*value)
    9bd6:	4b17      	ldr	r3, [pc, #92]	; (9c34 <SAP+0xe4>)
    9bd8:	4a17      	ldr	r2, [pc, #92]	; (9c38 <SAP+0xe8>)
    9bda:	68db      	ldr	r3, [r3, #12]
    9bdc:	9c01      	ldr	r4, [sp, #4]
    9bde:	681b      	ldr	r3, [r3, #0]
    9be0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    9be2:	b114      	cbz	r4, 9bea <SAP+0x9a>
				HAL.IOs->config->setHigh(Pins.AIN_REF_SW);
    9be4:	695b      	ldr	r3, [r3, #20]
    9be6:	4798      	blx	r3
    9be8:	e7d3      	b.n	9b92 <SAP+0x42>
				HAL.IOs->config->setLow(Pins.AIN_REF_SW);
    9bea:	699b      	ldr	r3, [r3, #24]
			TMCRhinoSA.getPins(CFG);
    9bec:	4798      	blx	r3
			if((CFG[2] == IOS_LOW)        && (CFG[1] == IOS_LOW))   *value = 1;
    9bee:	e7d1      	b.n	9b94 <SAP+0x44>
			if(((uint32_t) *value) > 10000)
    9bf0:	9901      	ldr	r1, [sp, #4]
    9bf2:	f242 7310 	movw	r3, #10000	; 0x2710
    9bf6:	4299      	cmp	r1, r3
    9bf8:	d8c5      	bhi.n	9b86 <SAP+0x36>
				Timer.setDuty(TIMER_CHANNEL_1, *value);
    9bfa:	4b10      	ldr	r3, [pc, #64]	; (9c3c <SAP+0xec>)
    9bfc:	b289      	uxth	r1, r1
    9bfe:	689b      	ldr	r3, [r3, #8]
    9c00:	2000      	movs	r0, #0
    9c02:	4798      	blx	r3
    9c04:	e7c5      	b.n	9b92 <SAP+0x42>
			errors |= setStandAloneSettings(type - 14, *value);
    9c06:	380e      	subs	r0, #14
    9c08:	e7df      	b.n	9bca <SAP+0x7a>
			StepDir_setMode(motor, *value);
    9c0a:	b2d1      	uxtb	r1, r2
    9c0c:	4620      	mov	r0, r4
    9c0e:	f015 ff0b 	bl	1fa28 <StepDir_setMode>
    9c12:	e7bf      	b.n	9b94 <SAP+0x44>
			StepDir_setFrequency(motor, *value);
    9c14:	4611      	mov	r1, r2
    9c16:	4620      	mov	r0, r4
    9c18:	f015 ff16 	bl	1fa48 <StepDir_setFrequency>
    9c1c:	e7ba      	b.n	9b94 <SAP+0x44>
			errors |= getStandAloneSettings(1, value);
    9c1e:	a901      	add	r1, sp, #4
    9c20:	2001      	movs	r0, #1
    9c22:	f7ff fd9b 	bl	975c <getStandAloneSettings>
			TMCRhinoSA.getPins(CFG);
    9c26:	4b06      	ldr	r3, [pc, #24]	; (9c40 <SAP+0xf0>)
			errors |= getStandAloneSettings(1, value);
    9c28:	4604      	mov	r4, r0
			TMCRhinoSA.getPins(CFG);
    9c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9c2c:	a802      	add	r0, sp, #8
    9c2e:	e7dd      	b.n	9bec <SAP+0x9c>
		return TMC_ERROR_MOTOR;
    9c30:	2408      	movs	r4, #8
    9c32:	e7af      	b.n	9b94 <SAP+0x44>
    9c34:	00029d1c 	.word	0x00029d1c
    9c38:	1fff1960 	.word	0x1fff1960
    9c3c:	1fff0ae0 	.word	0x1fff0ae0
    9c40:	1fff0008 	.word	0x1fff0008

00009c44 <TMC2100_init>:
	Pins.AIN_REF_PWM  = &HAL.IOs->pins->DIO11;
    9c44:	4b6e      	ldr	r3, [pc, #440]	; (9e00 <TMC2100_init+0x1bc>)
{
    9c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pins.AIN_REF_PWM  = &HAL.IOs->pins->DIO11;
    9c4a:	68de      	ldr	r6, [r3, #12]
    9c4c:	4c6d      	ldr	r4, [pc, #436]	; (9e04 <TMC2100_init+0x1c0>)
    9c4e:	6870      	ldr	r0, [r6, #4]
	TMCRhinoSA.CFGPins[0] = Pins.CFG0;
    9c50:	4f6d      	ldr	r7, [pc, #436]	; (9e08 <TMC2100_init+0x1c4>)
	Pins.AIN_REF_PWM  = &HAL.IOs->pins->DIO11;
    9c52:	f500 73e4 	add.w	r3, r0, #456	; 0x1c8
    9c56:	6323      	str	r3, [r4, #48]	; 0x30
	Pins.AIN_REF_SW   = &HAL.IOs->pins->DIO10;
    9c58:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
    9c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	Pins.CFG0         = &HAL.IOs->pins->SPI2_SDO;
    9c5e:	f500 7322 	add.w	r3, r0, #648	; 0x288
    9c62:	60e3      	str	r3, [r4, #12]
	Pins.CFG1         = &HAL.IOs->pins->SPI2_SDI;
    9c64:	f500 732a 	add.w	r3, r0, #680	; 0x2a8
    9c68:	60a3      	str	r3, [r4, #8]
	Pins.CFG2         = &HAL.IOs->pins->SPI2_SCK;
    9c6a:	f500 731a 	add.w	r3, r0, #616	; 0x268
    9c6e:	6063      	str	r3, [r4, #4]
	Pins.CFG3         = &HAL.IOs->pins->SPI2_CSN0;
    9c70:	f500 7302 	add.w	r3, r0, #520	; 0x208
    9c74:	6023      	str	r3, [r4, #0]
	Pins.CFG4         = &HAL.IOs->pins->DIO13;
    9c76:	f500 735a 	add.w	r3, r0, #872	; 0x368
    9c7a:	61a3      	str	r3, [r4, #24]
	Pins.CFG5         = &HAL.IOs->pins->DIO12;
    9c7c:	f500 7352 	add.w	r3, r0, #840	; 0x348
    9c80:	61e3      	str	r3, [r4, #28]
	Pins.CFG6_ENN     = &HAL.IOs->pins->DIO0;
    9c82:	f100 0368 	add.w	r3, r0, #104	; 0x68
    9c86:	62a3      	str	r3, [r4, #40]	; 0x28
	Pins.DIR          = &HAL.IOs->pins->DIO7;
    9c88:	f500 73a4 	add.w	r3, r0, #328	; 0x148
    9c8c:	6163      	str	r3, [r4, #20]
	Pins.ERROR        = &HAL.IOs->pins->DIO15;
    9c8e:	f500 736a 	add.w	r3, r0, #936	; 0x3a8
    9c92:	6223      	str	r3, [r4, #32]
	Pins.INDEX        = &HAL.IOs->pins->DIO16;
    9c94:	f500 7372 	add.w	r3, r0, #968	; 0x3c8
    9c98:	6263      	str	r3, [r4, #36]	; 0x24
	HAL.IOs->config->toOutput(Pins.STEP);
    9c9a:	6833      	ldr	r3, [r6, #0]
	Pins.STEP         = &HAL.IOs->pins->DIO6;
    9c9c:	f500 7094 	add.w	r0, r0, #296	; 0x128
	HAL.IOs->config->toOutput(Pins.STEP);
    9ca0:	68db      	ldr	r3, [r3, #12]
	Pins.STEP         = &HAL.IOs->pins->DIO6;
    9ca2:	6120      	str	r0, [r4, #16]
	HAL.IOs->config->toOutput(Pins.STEP);
    9ca4:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    9ca6:	6833      	ldr	r3, [r6, #0]
    9ca8:	6960      	ldr	r0, [r4, #20]
    9caa:	68db      	ldr	r3, [r3, #12]
    9cac:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
    9cae:	6833      	ldr	r3, [r6, #0]
    9cb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9cb2:	68db      	ldr	r3, [r3, #12]
    9cb4:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_SW);
    9cb6:	6833      	ldr	r3, [r6, #0]
    9cb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9cba:	68db      	ldr	r3, [r3, #12]
    9cbc:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ERROR);
    9cbe:	6833      	ldr	r3, [r6, #0]
    9cc0:	6a20      	ldr	r0, [r4, #32]
    9cc2:	691b      	ldr	r3, [r3, #16]
    9cc4:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INDEX);
    9cc6:	6833      	ldr	r3, [r6, #0]
    9cc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9cca:	691b      	ldr	r3, [r3, #16]
    9ccc:	4798      	blx	r3
	TMCRhinoSA.CFGPins[0] = Pins.CFG0;
    9cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9cd0:	68e2      	ldr	r2, [r4, #12]
    9cd2:	601a      	str	r2, [r3, #0]
	TMCRhinoSA.CFGPins[1] = Pins.CFG1;
    9cd4:	68a2      	ldr	r2, [r4, #8]
    9cd6:	605a      	str	r2, [r3, #4]
	TMCRhinoSA.CFGPins[2] = Pins.CFG2;
    9cd8:	6862      	ldr	r2, [r4, #4]
    9cda:	609a      	str	r2, [r3, #8]
	TMCRhinoSA.CFGPins[3] = Pins.CFG3;
    9cdc:	6822      	ldr	r2, [r4, #0]
    9cde:	60da      	str	r2, [r3, #12]
	TMCRhinoSA.CFGPins[4] = Pins.CFG4;
    9ce0:	69a2      	ldr	r2, [r4, #24]
    9ce2:	611a      	str	r2, [r3, #16]
	TMCRhinoSA.CFGPins[5] = Pins.CFG5;
    9ce4:	69e2      	ldr	r2, [r4, #28]
    9ce6:	615a      	str	r2, [r3, #20]
	TMCRhinoSA.CFGPins[6] = Pins.CFG6_ENN;
    9ce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9cea:	619a      	str	r2, [r3, #24]
    9cec:	2500      	movs	r5, #0
		HAL.IOs->config->toOutput(TMCRhinoSA.CFGPins[i]);
    9cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9cf0:	6833      	ldr	r3, [r6, #0]
    9cf2:	5950      	ldr	r0, [r2, r5]
    9cf4:	68db      	ldr	r3, [r3, #12]
    9cf6:	4798      	blx	r3
		HAL.IOs->config->setLow(TMCRhinoSA.CFGPins[i]);
    9cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9cfa:	6833      	ldr	r3, [r6, #0]
    9cfc:	5950      	ldr	r0, [r2, r5]
    9cfe:	699b      	ldr	r3, [r3, #24]
    9d00:	3504      	adds	r5, #4
    9d02:	4798      	blx	r3
	for(uint8_t i = 0; i < 7; i++)
    9d04:	2d1c      	cmp	r5, #28
    9d06:	d1f2      	bne.n	9cee <TMC2100_init+0xaa>
	Evalboards.ch2.config->state = CONFIG_READY;
    9d08:	4d40      	ldr	r5, [pc, #256]	; (9e0c <TMC2100_init+0x1c8>)
    9d0a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    9d0e:	f04f 0800 	mov.w	r8, #0
    9d12:	f883 8000 	strb.w	r8, [r3]
	StepDir_init(STEPDIR_PRECISION);
    9d16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    9d1a:	f015 ff5b 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    9d1e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    9d22:	4643      	mov	r3, r8
    9d24:	4640      	mov	r0, r8
    9d26:	f015 fdab 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 20000);
    9d2a:	f644 6120 	movw	r1, #20000	; 0x4e20
    9d2e:	4640      	mov	r0, r8
    9d30:	f015 fe5e 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 25000);
    9d34:	f246 11a8 	movw	r1, #25000	; 0x61a8
    9d38:	4640      	mov	r0, r8
    9d3a:	f016 f80b 	bl	1fd54 <StepDir_setAcceleration>
	Evalboards.ch2.rotate          = rotate;
    9d3e:	4b34      	ldr	r3, [pc, #208]	; (9e10 <TMC2100_init+0x1cc>)
    9d40:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
	Evalboards.ch2.right           = right;
    9d44:	4b33      	ldr	r3, [pc, #204]	; (9e14 <TMC2100_init+0x1d0>)
    9d46:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	Evalboards.ch2.left            = left;
    9d4a:	4b33      	ldr	r3, [pc, #204]	; (9e18 <TMC2100_init+0x1d4>)
    9d4c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	Evalboards.ch2.stop            = stop;
    9d50:	4b32      	ldr	r3, [pc, #200]	; (9e1c <TMC2100_init+0x1d8>)
    9d52:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Evalboards.ch2.GAP             = GAP;
    9d56:	4b32      	ldr	r3, [pc, #200]	; (9e20 <TMC2100_init+0x1dc>)
    9d58:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
	Evalboards.ch2.SAP             = SAP;
    9d5c:	4b31      	ldr	r3, [pc, #196]	; (9e24 <TMC2100_init+0x1e0>)
    9d5e:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	Evalboards.ch2.moveTo          = moveTo;
    9d62:	4b31      	ldr	r3, [pc, #196]	; (9e28 <TMC2100_init+0x1e4>)
    9d64:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
	Evalboards.ch2.moveBy          = moveBy;
    9d68:	4b30      	ldr	r3, [pc, #192]	; (9e2c <TMC2100_init+0x1e8>)
    9d6a:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
	Evalboards.ch2.writeRegister   = writeRegister;
    9d6e:	4b30      	ldr	r3, [pc, #192]	; (9e30 <TMC2100_init+0x1ec>)
    9d70:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	Evalboards.ch2.readRegister    = readRegister;
    9d74:	4b2f      	ldr	r3, [pc, #188]	; (9e34 <TMC2100_init+0x1f0>)
    9d76:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	Evalboards.ch2.userFunction    = userFunction;
    9d7a:	4b2f      	ldr	r3, [pc, #188]	; (9e38 <TMC2100_init+0x1f4>)
    9d7c:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	Evalboards.ch2.periodicJob     = periodicJob;
    9d80:	4b2e      	ldr	r3, [pc, #184]	; (9e3c <TMC2100_init+0x1f8>)
    9d82:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	Evalboards.ch2.enableDriver    = enableDriver;
    9d86:	4b2e      	ldr	r3, [pc, #184]	; (9e40 <TMC2100_init+0x1fc>)
    9d88:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
	Evalboards.ch2.numberOfMotors  = MOTORS;
    9d8c:	2301      	movs	r3, #1
    9d8e:	f885 308c 	strb.w	r3, [r5, #140]	; 0x8c
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    9d92:	2002      	movs	r0, #2
	Evalboards.ch2.deInit          = deInit;
    9d94:	4b2b      	ldr	r3, [pc, #172]	; (9e44 <TMC2100_init+0x200>)
    9d96:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    9d9a:	f7ff fd67 	bl	986c <enableDriver>
	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
    9d9e:	4640      	mov	r0, r8
    9da0:	f015 fe8a 	bl	1fab8 <StepDir_getActualVelocity>
    9da4:	b110      	cbz	r0, 9dac <TMC2100_init+0x168>
    9da6:	4b28      	ldr	r3, [pc, #160]	; (9e48 <TMC2100_init+0x204>)
    9da8:	789b      	ldrb	r3, [r3, #2]
    9daa:	b1ab      	cbz	r3, 9dd8 <TMC2100_init+0x194>
	TMCRhinoSA.reset();
    9dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9dae:	4798      	blx	r3
	StepDir_init(STEPDIR_PRECISION);
    9db0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    9db4:	f015 ff0e 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    9db8:	2300      	movs	r3, #0
    9dba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    9dbe:	4618      	mov	r0, r3
    9dc0:	f015 fd5e 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 20000);
    9dc4:	f644 6120 	movw	r1, #20000	; 0x4e20
    9dc8:	2000      	movs	r0, #0
    9dca:	f015 fe11 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 25000);
    9dce:	f246 11a8 	movw	r1, #25000	; 0x61a8
    9dd2:	2000      	movs	r0, #0
    9dd4:	f015 ffbe 	bl	1fd54 <StepDir_setAcceleration>
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
    9dd8:	6833      	ldr	r3, [r6, #0]
    9dda:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9ddc:	68db      	ldr	r3, [r3, #12]
    9dde:	4798      	blx	r3
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    9de0:	6b20      	ldr	r0, [r4, #48]	; 0x30
	Timer.init();
    9de2:	4c1a      	ldr	r4, [pc, #104]	; (9e4c <TMC2100_init+0x208>)
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    9de4:	2304      	movs	r3, #4
    9de6:	7543      	strb	r3, [r0, #21]
	HAL.IOs->config->set(Pins.AIN_REF_PWM);
    9de8:	6833      	ldr	r3, [r6, #0]
    9dea:	681b      	ldr	r3, [r3, #0]
    9dec:	4798      	blx	r3
	Timer.init();
    9dee:	6823      	ldr	r3, [r4, #0]
    9df0:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    9df2:	2100      	movs	r1, #0
    9df4:	68a3      	ldr	r3, [r4, #8]
    9df6:	4608      	mov	r0, r1
}
    9df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    9dfc:	4718      	bx	r3
    9dfe:	bf00      	nop
    9e00:	00029d1c 	.word	0x00029d1c
    9e04:	1fff1960 	.word	0x1fff1960
    9e08:	1fff0008 	.word	0x1fff0008
    9e0c:	1fff5e88 	.word	0x1fff5e88
    9e10:	00009929 	.word	0x00009929
    9e14:	00009943 	.word	0x00009943
    9e18:	0000993f 	.word	0x0000993f
    9e1c:	0000993b 	.word	0x0000993b
    9e20:	00009a89 	.word	0x00009a89
    9e24:	00009b51 	.word	0x00009b51
    9e28:	00009917 	.word	0x00009917
    9e2c:	00009a69 	.word	0x00009a69
    9e30:	0000973d 	.word	0x0000973d
    9e34:	00009749 	.word	0x00009749
    9e38:	00009a19 	.word	0x00009a19
    9e3c:	00009911 	.word	0x00009911
    9e40:	0000986d 	.word	0x0000986d
    9e44:	00009881 	.word	0x00009881
    9e48:	1fff0b34 	.word	0x1fff0b34
    9e4c:	1fff0ae0 	.word	0x1fff0ae0

00009e50 <deInit>:
	return TMC_ERROR_NONE;
}

static void deInit(void)
{
	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);	// DISABLE DRIVER
    9e50:	4b1b      	ldr	r3, [pc, #108]	; (9ec0 <deInit+0x70>)
{
    9e52:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);	// DISABLE DRIVER
    9e54:	68dd      	ldr	r5, [r3, #12]
    9e56:	4c1b      	ldr	r4, [pc, #108]	; (9ec4 <deInit+0x74>)
    9e58:	682b      	ldr	r3, [r5, #0]
    9e5a:	68a0      	ldr	r0, [r4, #8]
    9e5c:	695b      	ldr	r3, [r3, #20]
    9e5e:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.REFL_STEP);
    9e60:	682b      	ldr	r3, [r5, #0]
    9e62:	6820      	ldr	r0, [r4, #0]
    9e64:	689b      	ldr	r3, [r3, #8]
    9e66:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFR_DIR);
    9e68:	682b      	ldr	r3, [r5, #0]
    9e6a:	6860      	ldr	r0, [r4, #4]
    9e6c:	689b      	ldr	r3, [r3, #8]
    9e6e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.AIN_REF_SW);
    9e70:	682b      	ldr	r3, [r5, #0]
    9e72:	6a20      	ldr	r0, [r4, #32]
    9e74:	689b      	ldr	r3, [r3, #8]
    9e76:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.AIN_REF_PWM);
    9e78:	682b      	ldr	r3, [r5, #0]
    9e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9e7c:	689b      	ldr	r3, [r3, #8]
    9e7e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
    9e80:	682b      	ldr	r3, [r5, #0]
    9e82:	68e0      	ldr	r0, [r4, #12]
    9e84:	689b      	ldr	r3, [r3, #8]
    9e86:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
    9e88:	682b      	ldr	r3, [r5, #0]
    9e8a:	6920      	ldr	r0, [r4, #16]
    9e8c:	689b      	ldr	r3, [r3, #8]
    9e8e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCN_DCO);
    9e90:	682b      	ldr	r3, [r5, #0]
    9e92:	6960      	ldr	r0, [r4, #20]
    9e94:	689b      	ldr	r3, [r3, #8]
    9e96:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG0);
    9e98:	682b      	ldr	r3, [r5, #0]
    9e9a:	69a0      	ldr	r0, [r4, #24]
    9e9c:	689b      	ldr	r3, [r3, #8]
    9e9e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG1);
    9ea0:	682b      	ldr	r3, [r5, #0]
    9ea2:	69e0      	ldr	r0, [r4, #28]
    9ea4:	689b      	ldr	r3, [r3, #8]
    9ea6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
    9ea8:	682b      	ldr	r3, [r5, #0]
    9eaa:	68a0      	ldr	r0, [r4, #8]
    9eac:	689b      	ldr	r3, [r3, #8]
    9eae:	4798      	blx	r3

	StepDir_deInit();
    9eb0:	f015 ff08 	bl	1fcc4 <StepDir_deInit>
	Timer.deInit();
    9eb4:	4b04      	ldr	r3, [pc, #16]	; (9ec8 <deInit+0x78>)
}
    9eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.deInit();
    9eba:	685b      	ldr	r3, [r3, #4]
    9ebc:	4718      	bx	r3
    9ebe:	bf00      	nop
    9ec0:	00029d1c 	.word	0x00029d1c
    9ec4:	1fff19a0 	.word	0x1fff19a0
    9ec8:	1fff0ae0 	.word	0x1fff0ae0

00009ecc <userFunction>:
{
    9ecc:	b510      	push	{r4, lr}
    9ece:	4614      	mov	r4, r2
    9ed0:	2806      	cmp	r0, #6
    9ed2:	d805      	bhi.n	9ee0 <userFunction+0x14>
    9ed4:	e8df f000 	tbb	[pc, r0]
    9ed8:	34232506 	.word	0x34232506
    9edc:	443f      	.short	0x443f
    9ede:	4e          	.byte	0x4e
    9edf:	00          	.byte	0x00
	uint32_t errors = 0;
    9ee0:	2004      	movs	r0, #4
}
    9ee2:	bd10      	pop	{r4, pc}
		uvalue = (uint32_t) *value;
    9ee4:	6814      	ldr	r4, [r2, #0]
		if(uvalue <= 20000)
    9ee6:	f644 6320 	movw	r3, #20000	; 0x4e20
    9eea:	429c      	cmp	r4, r3
    9eec:	d84e      	bhi.n	9f8c <userFunction+0xc0>
			HAL.IOs->config->setToState(Pins.AIN_REF_SW, (uvalue > 10000) ? IOS_HIGH : IOS_LOW);
    9eee:	4b28      	ldr	r3, [pc, #160]	; (9f90 <userFunction+0xc4>)
    9ef0:	4a28      	ldr	r2, [pc, #160]	; (9f94 <userFunction+0xc8>)
    9ef2:	68db      	ldr	r3, [r3, #12]
    9ef4:	6a10      	ldr	r0, [r2, #32]
    9ef6:	681b      	ldr	r3, [r3, #0]
    9ef8:	f242 7110 	movw	r1, #10000	; 0x2710
    9efc:	428c      	cmp	r4, r1
    9efe:	69db      	ldr	r3, [r3, #28]
    9f00:	bf94      	ite	ls
    9f02:	2100      	movls	r1, #0
    9f04:	2101      	movhi	r1, #1
    9f06:	4798      	blx	r3
			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
    9f08:	f242 7311 	movw	r3, #10001	; 0x2711
    9f0c:	fbb4 f1f3 	udiv	r1, r4, r3
    9f10:	fb03 4111 	mls	r1, r3, r1, r4
    9f14:	4b20      	ldr	r3, [pc, #128]	; (9f98 <userFunction+0xcc>)
    9f16:	b289      	uxth	r1, r1
    9f18:	689b      	ldr	r3, [r3, #8]
    9f1a:	2000      	movs	r0, #0
    9f1c:	4798      	blx	r3
	uint32_t errors = 0;
    9f1e:	2000      	movs	r0, #0
    9f20:	e7df      	b.n	9ee2 <userFunction+0x16>
		if(*value)
    9f22:	4b1b      	ldr	r3, [pc, #108]	; (9f90 <userFunction+0xc4>)
    9f24:	6824      	ldr	r4, [r4, #0]
    9f26:	68da      	ldr	r2, [r3, #12]
    9f28:	e9d2 3000 	ldrd	r3, r0, [r2]
    9f2c:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
    9f30:	b11c      	cbz	r4, 9f3a <userFunction+0x6e>
			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
    9f32:	69db      	ldr	r3, [r3, #28]
    9f34:	2100      	movs	r1, #0
		HAL.IOs->config->setToState(Pins.ENCB_DCEN_CFG4, (*value) ? IOS_HIGH : IOS_LOW);
    9f36:	4798      	blx	r3
		break;
    9f38:	e7f1      	b.n	9f1e <userFunction+0x52>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
    9f3a:	689b      	ldr	r3, [r3, #8]
		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
    9f3c:	4798      	blx	r3
		break;
    9f3e:	e7ee      	b.n	9f1e <userFunction+0x52>
		HAL.IOs->config->setToState(Pins.ENCB_DCEN_CFG4, (*value) ? IOS_HIGH : IOS_LOW);
    9f40:	4b13      	ldr	r3, [pc, #76]	; (9f90 <userFunction+0xc4>)
    9f42:	6811      	ldr	r1, [r2, #0]
    9f44:	68db      	ldr	r3, [r3, #12]
    9f46:	4a13      	ldr	r2, [pc, #76]	; (9f94 <userFunction+0xc8>)
    9f48:	681b      	ldr	r3, [r3, #0]
    9f4a:	6910      	ldr	r0, [r2, #16]
    9f4c:	69db      	ldr	r3, [r3, #28]
    9f4e:	3900      	subs	r1, #0
    9f50:	bf18      	it	ne
    9f52:	2101      	movne	r1, #1
    9f54:	e7ef      	b.n	9f36 <userFunction+0x6a>
		*value = StepDir_getStatus(motor);
    9f56:	4608      	mov	r0, r1
    9f58:	f015 fc6a 	bl	1f830 <StepDir_getStatus>
    9f5c:	6020      	str	r0, [r4, #0]
		break;
    9f5e:	e7de      	b.n	9f1e <userFunction+0x52>
		Pins.ENCB_DCEN_CFG4 = &HAL.IOs->pins->DIO6;
    9f60:	4b0b      	ldr	r3, [pc, #44]	; (9f90 <userFunction+0xc4>)
    9f62:	4a0c      	ldr	r2, [pc, #48]	; (9f94 <userFunction+0xc8>)
    9f64:	68db      	ldr	r3, [r3, #12]
    9f66:	6858      	ldr	r0, [r3, #4]
		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
    9f68:	681b      	ldr	r3, [r3, #0]
		Pins.ENCB_DCEN_CFG4 = &HAL.IOs->pins->DIO6;
    9f6a:	f500 7094 	add.w	r0, r0, #296	; 0x128
		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
    9f6e:	68db      	ldr	r3, [r3, #12]
		Pins.ENCB_DCEN_CFG4 = &HAL.IOs->pins->DIO6;
    9f70:	6110      	str	r0, [r2, #16]
		HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
    9f72:	e7e3      	b.n	9f3c <userFunction+0x70>
		Pins.ENCA_DCIN_CFG5 = &HAL.IOs->pins->DUMMY;
    9f74:	4b06      	ldr	r3, [pc, #24]	; (9f90 <userFunction+0xc4>)
    9f76:	4a07      	ldr	r2, [pc, #28]	; (9f94 <userFunction+0xc8>)
    9f78:	68db      	ldr	r3, [r3, #12]
    9f7a:	6858      	ldr	r0, [r3, #4]
		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
    9f7c:	681b      	ldr	r3, [r3, #0]
		Pins.ENCA_DCIN_CFG5 = &HAL.IOs->pins->DUMMY;
    9f7e:	f600 0108 	addw	r1, r0, #2056	; 0x808
		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
    9f82:	695b      	ldr	r3, [r3, #20]
		Pins.ENCA_DCIN_CFG5 = &HAL.IOs->pins->DUMMY;
    9f84:	60d1      	str	r1, [r2, #12]
		HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO12);
    9f86:	f500 7052 	add.w	r0, r0, #840	; 0x348
    9f8a:	e7d7      	b.n	9f3c <userFunction+0x70>
			errors |= TMC_ERROR_VALUE;
    9f8c:	2010      	movs	r0, #16
	return errors;
    9f8e:	e7a8      	b.n	9ee2 <userFunction+0x16>
    9f90:	00029d1c 	.word	0x00029d1c
    9f94:	1fff19a0 	.word	0x1fff19a0
    9f98:	1fff0ae0 	.word	0x1fff0ae0

00009f9c <readRegister>:
{
    9f9c:	b510      	push	{r4, lr}
	*value = tmc2130_readInt(motorToIC(motor), address);
    9f9e:	4803      	ldr	r0, [pc, #12]	; (9fac <readRegister+0x10>)
{
    9fa0:	4614      	mov	r4, r2
	*value = tmc2130_readInt(motorToIC(motor), address);
    9fa2:	f016 fb70 	bl	20686 <tmc2130_readInt>
    9fa6:	6020      	str	r0, [r4, #0]
}
    9fa8:	bd10      	pop	{r4, pc}
    9faa:	bf00      	nop
    9fac:	1fff5fc4 	.word	0x1fff5fc4

00009fb0 <periodicJob>:
{
    9fb0:	b510      	push	{r4, lr}
	tmc2130_periodicJob(&TMC2130, tick);
    9fb2:	4c09      	ldr	r4, [pc, #36]	; (9fd8 <periodicJob+0x28>)
{
    9fb4:	4601      	mov	r1, r0
	tmc2130_periodicJob(&TMC2130, tick);
    9fb6:	4620      	mov	r0, r4
    9fb8:	f016 fc07 	bl	207ca <tmc2130_periodicJob>
	StepDir_periodicJob(TMC2130_DEFAULT_MOTOR);
    9fbc:	2000      	movs	r0, #0
    9fbe:	f015 fbf1 	bl	1f7a4 <StepDir_periodicJob>
	StepDir_stallGuard(TMC2130_DEFAULT_MOTOR, TMC2130_FIELD_READ(motorToIC(TMC2130_DEFAULT_MOTOR), TMC2130_DRV_STATUS, TMC2130_STALLGUARD_MASK, TMC2130_STALLGUARD_SHIFT) == 1);
    9fc2:	216f      	movs	r1, #111	; 0x6f
    9fc4:	4620      	mov	r0, r4
    9fc6:	f016 fb5e 	bl	20686 <tmc2130_readInt>
}
    9fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	StepDir_stallGuard(TMC2130_DEFAULT_MOTOR, TMC2130_FIELD_READ(motorToIC(TMC2130_DEFAULT_MOTOR), TMC2130_DRV_STATUS, TMC2130_STALLGUARD_MASK, TMC2130_STALLGUARD_SHIFT) == 1);
    9fce:	f3c0 6100 	ubfx	r1, r0, #24, #1
    9fd2:	2000      	movs	r0, #0
    9fd4:	f015 bc8a 	b.w	1f8ec <StepDir_stallGuard>
    9fd8:	1fff5fc4 	.word	0x1fff5fc4

00009fdc <writeRegister>:
	tmc2130_writeInt(motorToIC(motor), address, value);
    9fdc:	4801      	ldr	r0, [pc, #4]	; (9fe4 <writeRegister+0x8>)
    9fde:	f016 bb44 	b.w	2066a <tmc2130_writeInt>
    9fe2:	bf00      	nop
    9fe4:	1fff5fc4 	.word	0x1fff5fc4

00009fe8 <moveTo>:
{
    9fe8:	b510      	push	{r4, lr}
	if(motor >= TMC2130_MOTORS)
    9fea:	4604      	mov	r4, r0
    9fec:	b918      	cbnz	r0, 9ff6 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    9fee:	f015 fbc1 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    9ff2:	4620      	mov	r0, r4
}
    9ff4:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    9ff6:	2008      	movs	r0, #8
    9ff8:	e7fc      	b.n	9ff4 <moveTo+0xc>

00009ffa <rotate>:
{
    9ffa:	b510      	push	{r4, lr}
	if(motor >= TMC2130_MOTORS)
    9ffc:	4604      	mov	r4, r0
    9ffe:	b918      	cbnz	r0, a008 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    a000:	f015 fb92 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    a004:	4620      	mov	r0, r4
}
    a006:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    a008:	2008      	movs	r0, #8
    a00a:	e7fc      	b.n	a006 <rotate+0xc>

0000a00c <stop>:
	return rotate(motor, 0);
    a00c:	2100      	movs	r1, #0
    a00e:	e7f4      	b.n	9ffa <rotate>

0000a010 <left>:
	return rotate(motor, -velocity);
    a010:	4249      	negs	r1, r1
    a012:	e7f2      	b.n	9ffa <rotate>

0000a014 <right>:
	return rotate(motor, velocity);
    a014:	e7f1      	b.n	9ffa <rotate>

0000a016 <handleParameter>:
{
    a016:	b570      	push	{r4, r5, r6, lr}
    a018:	4604      	mov	r4, r0
    a01a:	461d      	mov	r5, r3
	if(motor >= TMC2130_MOTORS)
    a01c:	2900      	cmp	r1, #0
    a01e:	f040 851f 	bne.w	aa60 <handleParameter+0xa4a>
	switch(type)
    a022:	2a33      	cmp	r2, #51	; 0x33
    a024:	f200 8082 	bhi.w	a12c <handleParameter+0x116>
    a028:	2a33      	cmp	r2, #51	; 0x33
    a02a:	f200 851f 	bhi.w	aa6c <handleParameter+0xa56>
    a02e:	e8df f012 	tbh	[pc, r2, lsl #1]
    a032:	0085      	.short	0x0085
    a034:	009b0090 	.word	0x009b0090
    a038:	00c700a6 	.word	0x00c700a6
    a03c:	00e000d5 	.word	0x00e000d5
    a040:	010f00f8 	.word	0x010f00f8
    a044:	051d051d 	.word	0x051d051d
    a048:	051d051d 	.word	0x051d051d
    a04c:	051d051d 	.word	0x051d051d
    a050:	051d051d 	.word	0x051d051d
    a054:	051d051d 	.word	0x051d051d
    a058:	051d051d 	.word	0x051d051d
    a05c:	051d0118 	.word	0x051d0118
    a060:	01470122 	.word	0x01470122
    a064:	0155051d 	.word	0x0155051d
    a068:	0185016d 	.word	0x0185016d
    a06c:	051d019f 	.word	0x051d019f
    a070:	051d051d 	.word	0x051d051d
    a074:	051d051d 	.word	0x051d051d
    a078:	051d051d 	.word	0x051d051d
    a07c:	051d051d 	.word	0x051d051d
    a080:	051d051d 	.word	0x051d051d
    a084:	051d051d 	.word	0x051d051d
    a088:	051d051d 	.word	0x051d051d
    a08c:	051d051d 	.word	0x051d051d
    a090:	051d051d 	.word	0x051d051d
    a094:	01b8051d 	.word	0x01b8051d
    a098:	01c3      	.short	0x01c3
    a09a:	3a8c      	subs	r2, #140	; 0x8c
    a09c:	2a42      	cmp	r2, #66	; 0x42
    a09e:	f200 84e2 	bhi.w	aa66 <handleParameter+0xa50>
    a0a2:	e8df f012 	tbh	[pc, r2, lsl #1]
    a0a6:	0194      	.short	0x0194
    a0a8:	04e004e0 	.word	0x04e004e0
    a0ac:	04e004e0 	.word	0x04e004e0
    a0b0:	04e004e0 	.word	0x04e004e0
    a0b4:	04e004e0 	.word	0x04e004e0
    a0b8:	04e004e0 	.word	0x04e004e0
    a0bc:	04e004e0 	.word	0x04e004e0
    a0c0:	04e004e0 	.word	0x04e004e0
    a0c4:	04e004e0 	.word	0x04e004e0
    a0c8:	04e004e0 	.word	0x04e004e0
    a0cc:	04e004e0 	.word	0x04e004e0
    a0d0:	01e504e0 	.word	0x01e504e0
    a0d4:	021501fd 	.word	0x021501fd
    a0d8:	0288022d 	.word	0x0288022d
    a0dc:	02e402cd 	.word	0x02e402cd
    a0e0:	031302fb 	.word	0x031302fb
    a0e4:	0343032b 	.word	0x0343032b
    a0e8:	0375035d 	.word	0x0375035d
    a0ec:	04e004e0 	.word	0x04e004e0
    a0f0:	04e004e0 	.word	0x04e004e0
    a0f4:	03ac0394 	.word	0x03ac0394
    a0f8:	03c303b7 	.word	0x03c303b7
    a0fc:	03e804e0 	.word	0x03e804e0
    a100:	04180400 	.word	0x04180400
    a104:	0464043d 	.word	0x0464043d
    a108:	04e004e0 	.word	0x04e004e0
    a10c:	0499047a 	.word	0x0499047a
    a110:	04e004e0 	.word	0x04e004e0
    a114:	04e004e0 	.word	0x04e004e0
    a118:	04e004e0 	.word	0x04e004e0
    a11c:	04e004e0 	.word	0x04e004e0
    a120:	04e004e0 	.word	0x04e004e0
    a124:	04b404e0 	.word	0x04b404e0
    a128:	04d304e0 	.word	0x04d304e0
    a12c:	f102 0374 	add.w	r3, r2, #116	; 0x74
    a130:	b2db      	uxtb	r3, r3
    a132:	2b42      	cmp	r3, #66	; 0x42
    a134:	d9b1      	bls.n	a09a <handleParameter+0x84>
    a136:	2404      	movs	r4, #4
}
    a138:	4620      	mov	r0, r4
    a13a:	bd70      	pop	{r4, r5, r6, pc}
		if(readWrite == READ) {
    a13c:	b918      	cbnz	r0, a146 <handleParameter+0x130>
			*value = StepDir_getTargetPosition(motor);
    a13e:	f015 fcab 	bl	1fa98 <StepDir_getTargetPosition>
    a142:	6028      	str	r0, [r5, #0]
    a144:	e7f8      	b.n	a138 <handleParameter+0x122>
			StepDir_moveTo(motor, *value);
    a146:	6829      	ldr	r1, [r5, #0]
    a148:	2000      	movs	r0, #0
    a14a:	f015 fb13 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    a14e:	2400      	movs	r4, #0
    a150:	e7f2      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a152:	b918      	cbnz	r0, a15c <handleParameter+0x146>
			*value = StepDir_getActualPosition(motor);
    a154:	f015 fc90 	bl	1fa78 <StepDir_getActualPosition>
    a158:	6028      	str	r0, [r5, #0]
    a15a:	e7ed      	b.n	a138 <handleParameter+0x122>
			StepDir_setActualPosition(motor, *value);
    a15c:	6829      	ldr	r1, [r5, #0]
    a15e:	2000      	movs	r0, #0
    a160:	f015 fc2a 	bl	1f9b8 <StepDir_setActualPosition>
	uint32_t errors = TMC_ERROR_NONE;
    a164:	2400      	movs	r4, #0
    a166:	e7e7      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a168:	b918      	cbnz	r0, a172 <handleParameter+0x15c>
			*value = StepDir_getTargetVelocity(motor);
    a16a:	f015 fcb5 	bl	1fad8 <StepDir_getTargetVelocity>
    a16e:	6028      	str	r0, [r5, #0]
    a170:	e7e2      	b.n	a138 <handleParameter+0x122>
			StepDir_rotate(motor, *value);
    a172:	6829      	ldr	r1, [r5, #0]
    a174:	2000      	movs	r0, #0
    a176:	f015 fad7 	bl	1f728 <StepDir_rotate>
	uint32_t errors = TMC_ERROR_NONE;
    a17a:	2400      	movs	r4, #0
    a17c:	e7dc      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a17e:	2800      	cmp	r0, #0
    a180:	f040 8477 	bne.w	aa72 <handleParameter+0xa5c>
			switch(StepDir_getMode(motor)) {
    a184:	f015 fce6 	bl	1fb54 <StepDir_getMode>
    a188:	b918      	cbnz	r0, a192 <handleParameter+0x17c>
				*value = StepDir_getActualVelocity(motor);
    a18a:	f015 fc95 	bl	1fab8 <StepDir_getActualVelocity>
    a18e:	6028      	str	r0, [r5, #0]
				break;
    a190:	e7d2      	b.n	a138 <handleParameter+0x122>
				tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_FIELD_READ(motorToIC(motor), TMC2130_TSTEP, TMC2130_TSTEP_MASK, TMC2130_TSTEP_SHIFT));
    a192:	4620      	mov	r0, r4
    a194:	f015 fcec 	bl	1fb70 <StepDir_getFrequency>
    a198:	2112      	movs	r1, #18
    a19a:	4606      	mov	r6, r0
    a19c:	48ad      	ldr	r0, [pc, #692]	; (a454 <handleParameter+0x43e>)
    a19e:	f016 fa72 	bl	20686 <tmc2130_readInt>
    a1a2:	f3c0 0213 	ubfx	r2, r0, #0, #20
    a1a6:	207a      	movs	r0, #122	; 0x7a
    a1a8:	17d3      	asrs	r3, r2, #31
    a1aa:	fba6 0100 	umull	r0, r1, r6, r0
    a1ae:	f01d fb99 	bl	278e4 <__aeabi_ldivmod>
				*value = (abs(tempValue) < 20) ? 0 : tempValue;
    a1b2:	f100 0313 	add.w	r3, r0, #19
    a1b6:	2b26      	cmp	r3, #38	; 0x26
    a1b8:	bf98      	it	ls
    a1ba:	2000      	movls	r0, #0
    a1bc:	6028      	str	r0, [r5, #0]
				break;
    a1be:	e7bb      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a1c0:	b918      	cbnz	r0, a1ca <handleParameter+0x1b4>
			*value = StepDir_getVelocityMax(motor);
    a1c2:	f015 fca9 	bl	1fb18 <StepDir_getVelocityMax>
    a1c6:	6028      	str	r0, [r5, #0]
    a1c8:	e7b6      	b.n	a138 <handleParameter+0x122>
			StepDir_setVelocityMax(motor, abs(*value));
    a1ca:	6829      	ldr	r1, [r5, #0]
    a1cc:	2900      	cmp	r1, #0
    a1ce:	bfb8      	it	lt
    a1d0:	4249      	neglt	r1, r1
    a1d2:	2000      	movs	r0, #0
    a1d4:	f015 fc0c 	bl	1f9f0 <StepDir_setVelocityMax>
	uint32_t errors = TMC_ERROR_NONE;
    a1d8:	2400      	movs	r4, #0
    a1da:	e7ad      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a1dc:	b918      	cbnz	r0, a1e6 <handleParameter+0x1d0>
			*value = StepDir_getAcceleration(motor);
    a1de:	f015 fc8b 	bl	1faf8 <StepDir_getAcceleration>
    a1e2:	6028      	str	r0, [r5, #0]
    a1e4:	e7a8      	b.n	a138 <handleParameter+0x122>
			StepDir_setAcceleration(motor, *value);
    a1e6:	6829      	ldr	r1, [r5, #0]
    a1e8:	2000      	movs	r0, #0
    a1ea:	f015 fdb3 	bl	1fd54 <StepDir_setAcceleration>
	uint32_t errors = TMC_ERROR_NONE;
    a1ee:	2400      	movs	r4, #0
    a1f0:	e7a2      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRUN_SHIFT);
    a1f2:	4898      	ldr	r0, [pc, #608]	; (a454 <handleParameter+0x43e>)
    a1f4:	2110      	movs	r1, #16
		if(readWrite == READ) {
    a1f6:	b92c      	cbnz	r4, a204 <handleParameter+0x1ee>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRUN_SHIFT);
    a1f8:	f016 fa45 	bl	20686 <tmc2130_readInt>
    a1fc:	f3c0 2004 	ubfx	r0, r0, #8, #5
    a200:	6028      	str	r0, [r5, #0]
    a202:	e799      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IRUN_MASK, TMC2130_IRUN_SHIFT, *value);
    a204:	f016 fa3f 	bl	20686 <tmc2130_readInt>
    a208:	682b      	ldr	r3, [r5, #0]
    a20a:	021b      	lsls	r3, r3, #8
    a20c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    a210:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
    a214:	431a      	orrs	r2, r3
    a216:	488f      	ldr	r0, [pc, #572]	; (a454 <handleParameter+0x43e>)
    a218:	2110      	movs	r1, #16
    a21a:	f016 fa26 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a21e:	2400      	movs	r4, #0
    a220:	e78a      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT);
    a222:	488c      	ldr	r0, [pc, #560]	; (a454 <handleParameter+0x43e>)
    a224:	2110      	movs	r1, #16
		if(readWrite == READ) {
    a226:	b92c      	cbnz	r4, a234 <handleParameter+0x21e>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT);
    a228:	f016 fa2d 	bl	20686 <tmc2130_readInt>
    a22c:	f000 001f 	and.w	r0, r0, #31
    a230:	6028      	str	r0, [r5, #0]
    a232:	e781      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT, *value);
    a234:	f016 fa27 	bl	20686 <tmc2130_readInt>
    a238:	682a      	ldr	r2, [r5, #0]
    a23a:	f020 001f 	bic.w	r0, r0, #31
    a23e:	f002 021f 	and.w	r2, r2, #31
    a242:	4302      	orrs	r2, r0
    a244:	2110      	movs	r1, #16
    a246:	4883      	ldr	r0, [pc, #524]	; (a454 <handleParameter+0x43e>)
    a248:	f016 fa0f 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a24c:	2400      	movs	r4, #0
    a24e:	e773      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a250:	2800      	cmp	r0, #0
    a252:	f040 8411 	bne.w	aa78 <handleParameter+0xa62>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    a256:	f015 faeb 	bl	1f830 <StepDir_getStatus>
    a25a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    a25e:	6028      	str	r0, [r5, #0]
    a260:	e76a      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a262:	2800      	cmp	r0, #0
    a264:	f000 840b 	beq.w	aa7e <handleParameter+0xa68>
			tmc2130_writeInt(motorToIC(motor), TMC2130_TPOWERDOWN, *value);
    a268:	682a      	ldr	r2, [r5, #0]
    a26a:	487a      	ldr	r0, [pc, #488]	; (a454 <handleParameter+0x43e>)
    a26c:	2111      	movs	r1, #17
    a26e:	f016 f9fc 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a272:	2400      	movs	r4, #0
    a274:	e760      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a276:	b980      	cbnz	r0, a29a <handleParameter+0x284>
			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_THIGH);
    a278:	4876      	ldr	r0, [pc, #472]	; (a454 <handleParameter+0x43e>)
    a27a:	2115      	movs	r1, #21
    a27c:	f016 fa03 	bl	20686 <tmc2130_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    a280:	2800      	cmp	r0, #0
    a282:	bf08      	it	eq
    a284:	2001      	moveq	r0, #1
    a286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a28a:	fb93 f0f0 	sdiv	r0, r3, r0
    a28e:	4b72      	ldr	r3, [pc, #456]	; (a458 <handleParameter+0x442>)
    a290:	4298      	cmp	r0, r3
    a292:	bfd4      	ite	le
    a294:	6028      	strle	r0, [r5, #0]
    a296:	602b      	strgt	r3, [r5, #0]
    a298:	e74e      	b.n	a138 <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a29a:	682b      	ldr	r3, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
    a29c:	486d      	ldr	r0, [pc, #436]	; (a454 <handleParameter+0x43e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a29e:	2b00      	cmp	r3, #0
    a2a0:	bf08      	it	eq
    a2a2:	2301      	moveq	r3, #1
    a2a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a2a8:	fb92 f2f3 	sdiv	r2, r2, r3
    a2ac:	4b6a      	ldr	r3, [pc, #424]	; (a458 <handleParameter+0x442>)
    a2ae:	429a      	cmp	r2, r3
    a2b0:	bfa8      	it	ge
    a2b2:	461a      	movge	r2, r3
    a2b4:	602a      	str	r2, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_THIGH, *value);
    a2b6:	2115      	movs	r1, #21
    a2b8:	f016 f9d7 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a2bc:	2400      	movs	r4, #0
    a2be:	e73b      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a2c0:	b928      	cbnz	r0, a2ce <handleParameter+0x2b8>
			*value = tmc2130_readInt(motorToIC(motor), TMC2130_VDCMIN);
    a2c2:	4864      	ldr	r0, [pc, #400]	; (a454 <handleParameter+0x43e>)
    a2c4:	2133      	movs	r1, #51	; 0x33
    a2c6:	f016 f9de 	bl	20686 <tmc2130_readInt>
    a2ca:	6028      	str	r0, [r5, #0]
    a2cc:	e734      	b.n	a138 <handleParameter+0x122>
			tmc2130_writeInt(motorToIC(motor), TMC2130_VDCMIN, *value);
    a2ce:	682a      	ldr	r2, [r5, #0]
    a2d0:	4860      	ldr	r0, [pc, #384]	; (a454 <handleParameter+0x43e>)
    a2d2:	2133      	movs	r1, #51	; 0x33
    a2d4:	f016 f9c9 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a2d8:	2400      	movs	r4, #0
    a2da:	e72d      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VHIGHFS_SHIFT);
    a2dc:	485d      	ldr	r0, [pc, #372]	; (a454 <handleParameter+0x43e>)
    a2de:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a2e0:	b92c      	cbnz	r4, a2ee <handleParameter+0x2d8>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VHIGHFS_SHIFT);
    a2e2:	f016 f9d0 	bl	20686 <tmc2130_readInt>
    a2e6:	f3c0 4080 	ubfx	r0, r0, #18, #1
    a2ea:	6028      	str	r0, [r5, #0]
    a2ec:	e724      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHFS_MASK, TMC2130_VHIGHFS_SHIFT, *value);
    a2ee:	f016 f9ca 	bl	20686 <tmc2130_readInt>
    a2f2:	682b      	ldr	r3, [r5, #0]
    a2f4:	049b      	lsls	r3, r3, #18
    a2f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    a2fa:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    a2fe:	431a      	orrs	r2, r3
    a300:	4854      	ldr	r0, [pc, #336]	; (a454 <handleParameter+0x43e>)
    a302:	216c      	movs	r1, #108	; 0x6c
    a304:	f016 f9b1 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a308:	2400      	movs	r4, #0
    a30a:	e715      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_VHIGHCHM_SHIFT);
    a30c:	4851      	ldr	r0, [pc, #324]	; (a454 <handleParameter+0x43e>)
    a30e:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a310:	b92c      	cbnz	r4, a31e <handleParameter+0x308>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_VHIGHCHM_SHIFT);
    a312:	f016 f9b8 	bl	20686 <tmc2130_readInt>
    a316:	f3c0 40c0 	ubfx	r0, r0, #19, #1
    a31a:	6028      	str	r0, [r5, #0]
    a31c:	e70c      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VHIGHCHM_MASK, TMC2130_VHIGHCHM_SHIFT, *value);
    a31e:	f016 f9b2 	bl	20686 <tmc2130_readInt>
    a322:	682b      	ldr	r3, [r5, #0]
    a324:	04db      	lsls	r3, r3, #19
    a326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    a32a:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    a32e:	431a      	orrs	r2, r3
    a330:	4848      	ldr	r0, [pc, #288]	; (a454 <handleParameter+0x43e>)
    a332:	216c      	movs	r1, #108	; 0x6c
    a334:	f016 f999 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a338:	2400      	movs	r4, #0
    a33a:	e6fd      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a33c:	b938      	cbnz	r0, a34e <handleParameter+0x338>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC2130_INTERNAL_RSENSE_SHIFT);
    a33e:	4601      	mov	r1, r0
    a340:	4844      	ldr	r0, [pc, #272]	; (a454 <handleParameter+0x43e>)
    a342:	f016 f9a0 	bl	20686 <tmc2130_readInt>
    a346:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a34a:	6028      	str	r0, [r5, #0]
    a34c:	e6f4      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_GCONF, TMC2130_INTERNAL_RSENSE_MASK, TMC2130_INTERNAL_RSENSE_SHIFT, *value);
    a34e:	2100      	movs	r1, #0
    a350:	4840      	ldr	r0, [pc, #256]	; (a454 <handleParameter+0x43e>)
    a352:	f016 f998 	bl	20686 <tmc2130_readInt>
    a356:	682b      	ldr	r3, [r5, #0]
    a358:	005b      	lsls	r3, r3, #1
    a35a:	f003 0302 	and.w	r3, r3, #2
    a35e:	f020 0202 	bic.w	r2, r0, #2
    a362:	431a      	orrs	r2, r3
    a364:	483b      	ldr	r0, [pc, #236]	; (a454 <handleParameter+0x43e>)
    a366:	2100      	movs	r1, #0
    a368:	f016 f97f 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a36c:	2400      	movs	r4, #0
    a36e:	e6e3      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a370:	2800      	cmp	r0, #0
    a372:	f040 8387 	bne.w	aa84 <handleParameter+0xa6e>
			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2130_FIELD_READ(motorToIC(motor), TMC2130_TSTEP, TMC2130_TSTEP_MASK, TMC2130_TSTEP_SHIFT));
    a376:	f015 fbfb 	bl	1fb70 <StepDir_getFrequency>
    a37a:	2112      	movs	r1, #18
    a37c:	4606      	mov	r6, r0
    a37e:	4835      	ldr	r0, [pc, #212]	; (a454 <handleParameter+0x43e>)
    a380:	f016 f981 	bl	20686 <tmc2130_readInt>
    a384:	f3c0 0213 	ubfx	r2, r0, #0, #20
    a388:	207a      	movs	r0, #122	; 0x7a
    a38a:	17d3      	asrs	r3, r2, #31
    a38c:	fba6 0100 	umull	r0, r1, r6, r0
    a390:	f01d faa8 	bl	278e4 <__aeabi_ldivmod>
			*value = (abs(tempValue) < 20) ? 0 : tempValue;
    a394:	f100 0313 	add.w	r3, r0, #19
    a398:	2b26      	cmp	r3, #38	; 0x26
    a39a:	bf98      	it	ls
    a39c:	2000      	movls	r0, #0
    a39e:	6028      	str	r0, [r5, #0]
    a3a0:	e6ca      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a3a2:	b918      	cbnz	r0, a3ac <handleParameter+0x396>
			*value = StepDir_getMode(motor);
    a3a4:	f015 fbd6 	bl	1fb54 <StepDir_getMode>
    a3a8:	6028      	str	r0, [r5, #0]
    a3aa:	e6c5      	b.n	a138 <handleParameter+0x122>
			StepDir_setMode(motor, *value);
    a3ac:	7829      	ldrb	r1, [r5, #0]
    a3ae:	2000      	movs	r0, #0
    a3b0:	f015 fb3a 	bl	1fa28 <StepDir_setMode>
	uint32_t errors = TMC_ERROR_NONE;
    a3b4:	2400      	movs	r4, #0
    a3b6:	e6bf      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a3b8:	b918      	cbnz	r0, a3c2 <handleParameter+0x3ac>
			*value = StepDir_getFrequency(motor);
    a3ba:	f015 fbd9 	bl	1fb70 <StepDir_getFrequency>
    a3be:	6028      	str	r0, [r5, #0]
    a3c0:	e6ba      	b.n	a138 <handleParameter+0x122>
			StepDir_setFrequency(motor, *value);
    a3c2:	6829      	ldr	r1, [r5, #0]
    a3c4:	2000      	movs	r0, #0
    a3c6:	f015 fb3f 	bl	1fa48 <StepDir_setFrequency>
	uint32_t errors = TMC_ERROR_NONE;
    a3ca:	2400      	movs	r4, #0
    a3cc:	e6b4      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a3ce:	b954      	cbnz	r4, a3e6 <handleParameter+0x3d0>
			*value = 256 >> TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC2130_MRES_SHIFT);
    a3d0:	4820      	ldr	r0, [pc, #128]	; (a454 <handleParameter+0x43e>)
    a3d2:	216c      	movs	r1, #108	; 0x6c
    a3d4:	f016 f957 	bl	20686 <tmc2130_readInt>
    a3d8:	f3c0 6303 	ubfx	r3, r0, #24, #4
    a3dc:	f44f 7080 	mov.w	r0, #256	; 0x100
    a3e0:	4118      	asrs	r0, r3
    a3e2:	6028      	str	r0, [r5, #0]
    a3e4:	e6a8      	b.n	a138 <handleParameter+0x122>
			switch(*value)
    a3e6:	682b      	ldr	r3, [r5, #0]
    a3e8:	2b10      	cmp	r3, #16
    a3ea:	d039      	beq.n	a460 <handleParameter+0x44a>
    a3ec:	dc0a      	bgt.n	a404 <handleParameter+0x3ee>
    a3ee:	3b01      	subs	r3, #1
    a3f0:	2b07      	cmp	r3, #7
    a3f2:	d80e      	bhi.n	a412 <handleParameter+0x3fc>
    a3f4:	2b07      	cmp	r3, #7
    a3f6:	d80c      	bhi.n	a412 <handleParameter+0x3fc>
    a3f8:	e8df f003 	tbb	[pc, r3]
    a3fc:	2a0b2815 	.word	0x2a0b2815
    a400:	300b0b0b 	.word	0x300b0b0b
    a404:	2b80      	cmp	r3, #128	; 0x80
    a406:	d031      	beq.n	a46c <handleParameter+0x456>
    a408:	dc08      	bgt.n	a41c <handleParameter+0x406>
    a40a:	2b20      	cmp	r3, #32
    a40c:	d02a      	beq.n	a464 <handleParameter+0x44e>
    a40e:	2b40      	cmp	r3, #64	; 0x40
    a410:	d02a      	beq.n	a468 <handleParameter+0x452>
			default:   *value = -1;  break;
    a412:	f04f 33ff 	mov.w	r3, #4294967295
    a416:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    a418:	2410      	movs	r4, #16
    a41a:	e68d      	b.n	a138 <handleParameter+0x122>
    a41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a420:	d1f7      	bne.n	a412 <handleParameter+0x3fc>
			case 256:  *value = 0;   break;
    a422:	2300      	movs	r3, #0
    a424:	e000      	b.n	a428 <handleParameter+0x412>
			case 1:    *value = 8;   break;
    a426:	2308      	movs	r3, #8
			case 256:  *value = 0;   break;
    a428:	602b      	str	r3, [r5, #0]
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_MRES_MASK, TMC2130_MRES_SHIFT, *value);
    a42a:	216c      	movs	r1, #108	; 0x6c
    a42c:	4809      	ldr	r0, [pc, #36]	; (a454 <handleParameter+0x43e>)
    a42e:	f016 f92a 	bl	20686 <tmc2130_readInt>
    a432:	682b      	ldr	r3, [r5, #0]
    a434:	061b      	lsls	r3, r3, #24
    a436:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a43a:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
    a43e:	431a      	orrs	r2, r3
    a440:	4804      	ldr	r0, [pc, #16]	; (a454 <handleParameter+0x43e>)
    a442:	216c      	movs	r1, #108	; 0x6c
    a444:	f016 f911 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a448:	2400      	movs	r4, #0
    a44a:	e675      	b.n	a138 <handleParameter+0x122>
			case 2:    *value = 7;   break;
    a44c:	2307      	movs	r3, #7
    a44e:	e7eb      	b.n	a428 <handleParameter+0x412>
			case 4:    *value = 6;   break;
    a450:	2306      	movs	r3, #6
    a452:	e7e9      	b.n	a428 <handleParameter+0x412>
    a454:	1fff5fc4 	.word	0x1fff5fc4
    a458:	000fffff 	.word	0x000fffff
			case 8:    *value = 5;   break;
    a45c:	2305      	movs	r3, #5
    a45e:	e7e3      	b.n	a428 <handleParameter+0x412>
			case 16:   *value = 4;   break;
    a460:	2304      	movs	r3, #4
    a462:	e7e1      	b.n	a428 <handleParameter+0x412>
			case 32:   *value = 3;   break;
    a464:	2303      	movs	r3, #3
    a466:	e7df      	b.n	a428 <handleParameter+0x412>
			case 64:   *value = 2;   break;
    a468:	2302      	movs	r3, #2
    a46a:	e7dd      	b.n	a428 <handleParameter+0x412>
			case 128:  *value = 1;   break;
    a46c:	2301      	movs	r3, #1
    a46e:	e7db      	b.n	a428 <handleParameter+0x412>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SHIFT);
    a470:	48ba      	ldr	r0, [pc, #744]	; (a75c <handleParameter+0x746>)
    a472:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a474:	b92c      	cbnz	r4, a482 <handleParameter+0x46c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SHIFT);
    a476:	f016 f906 	bl	20686 <tmc2130_readInt>
    a47a:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    a47e:	6028      	str	r0, [r5, #0]
    a480:	e65a      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TBL_MASK, TMC2130_TBL_SHIFT, *value);
    a482:	f016 f900 	bl	20686 <tmc2130_readInt>
    a486:	682b      	ldr	r3, [r5, #0]
    a488:	03db      	lsls	r3, r3, #15
    a48a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    a48e:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
    a492:	431a      	orrs	r2, r3
    a494:	48b1      	ldr	r0, [pc, #708]	; (a75c <handleParameter+0x746>)
    a496:	216c      	movs	r1, #108	; 0x6c
    a498:	f016 f8e7 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a49c:	2400      	movs	r4, #0
    a49e:	e64b      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SHIFT);
    a4a0:	48ae      	ldr	r0, [pc, #696]	; (a75c <handleParameter+0x746>)
    a4a2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a4a4:	b92c      	cbnz	r4, a4b2 <handleParameter+0x49c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SHIFT);
    a4a6:	f016 f8ee 	bl	20686 <tmc2130_readInt>
    a4aa:	f3c0 3080 	ubfx	r0, r0, #14, #1
    a4ae:	6028      	str	r0, [r5, #0]
    a4b0:	e642      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_CHM_MASK, TMC2130_CHM_SHIFT, *value);
    a4b2:	f016 f8e8 	bl	20686 <tmc2130_readInt>
    a4b6:	682b      	ldr	r3, [r5, #0]
    a4b8:	039b      	lsls	r3, r3, #14
    a4ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a4be:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
    a4c2:	431a      	orrs	r2, r3
    a4c4:	48a5      	ldr	r0, [pc, #660]	; (a75c <handleParameter+0x746>)
    a4c6:	216c      	movs	r1, #108	; 0x6c
    a4c8:	f016 f8cf 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a4cc:	2400      	movs	r4, #0
    a4ce:	e633      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DISFDCC_SHIFT);
    a4d0:	48a2      	ldr	r0, [pc, #648]	; (a75c <handleParameter+0x746>)
    a4d2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a4d4:	b92c      	cbnz	r4, a4e2 <handleParameter+0x4cc>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DISFDCC_SHIFT);
    a4d6:	f016 f8d6 	bl	20686 <tmc2130_readInt>
    a4da:	f3c0 3000 	ubfx	r0, r0, #12, #1
    a4de:	6028      	str	r0, [r5, #0]
    a4e0:	e62a      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_DISFDCC_MASK, TMC2130_DISFDCC_SHIFT, *value);
    a4e2:	f016 f8d0 	bl	20686 <tmc2130_readInt>
    a4e6:	682b      	ldr	r3, [r5, #0]
    a4e8:	031b      	lsls	r3, r3, #12
    a4ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    a4ee:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
    a4f2:	431a      	orrs	r2, r3
    a4f4:	4899      	ldr	r0, [pc, #612]	; (a75c <handleParameter+0x746>)
    a4f6:	216c      	movs	r1, #108	; 0x6c
    a4f8:	f016 f8b7 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a4fc:	2400      	movs	r4, #0
    a4fe:	e61b      	b.n	a138 <handleParameter+0x122>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a500:	4896      	ldr	r0, [pc, #600]	; (a75c <handleParameter+0x746>)
    a502:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a504:	b9fc      	cbnz	r4, a546 <handleParameter+0x530>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a506:	f016 f8be 	bl	20686 <tmc2130_readInt>
    a50a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND_SHIFT);
    a50e:	f04f 016c 	mov.w	r1, #108	; 0x6c
    a512:	4892      	ldr	r0, [pc, #584]	; (a75c <handleParameter+0x746>)
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a514:	d005      	beq.n	a522 <handleParameter+0x50c>
				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND_SHIFT);
    a516:	f016 f8b6 	bl	20686 <tmc2130_readInt>
    a51a:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    a51e:	6028      	str	r0, [r5, #0]
    a520:	e60a      	b.n	a138 <handleParameter+0x122>
				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
    a522:	f016 f8b0 	bl	20686 <tmc2130_readInt>
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
    a526:	216c      	movs	r1, #108	; 0x6c
				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
    a528:	4606      	mov	r6, r0
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
    a52a:	488c      	ldr	r0, [pc, #560]	; (a75c <handleParameter+0x746>)
    a52c:	f016 f8ab 	bl	20686 <tmc2130_readInt>
				if(tempValue & (1<<11))
    a530:	0531      	lsls	r1, r6, #20
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
    a532:	f3c0 1302 	ubfx	r3, r0, #4, #3
				if(tempValue & (1<<11))
    a536:	d402      	bmi.n	a53e <handleParameter+0x528>
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 4) & 0x07;
    a538:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
    a53a:	2400      	movs	r4, #0
    a53c:	e5fc      	b.n	a138 <handleParameter+0x122>
					*value |= 1<<3;
    a53e:	f043 0308 	orr.w	r3, r3, #8
    a542:	602b      	str	r3, [r5, #0]
    a544:	e5f8      	b.n	a138 <handleParameter+0x122>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a546:	f016 f89e 	bl	20686 <tmc2130_readInt>
    a54a:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND_SHIFT, *value);
    a54e:	f04f 016c 	mov.w	r1, #108	; 0x6c
    a552:	4882      	ldr	r0, [pc, #520]	; (a75c <handleParameter+0x746>)
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a554:	d00e      	beq.n	a574 <handleParameter+0x55e>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HEND_MASK, TMC2130_HEND_SHIFT, *value);
    a556:	f016 f896 	bl	20686 <tmc2130_readInt>
    a55a:	682b      	ldr	r3, [r5, #0]
    a55c:	01db      	lsls	r3, r3, #7
    a55e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    a562:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    a566:	431a      	orrs	r2, r3
    a568:	487c      	ldr	r0, [pc, #496]	; (a75c <handleParameter+0x746>)
    a56a:	216c      	movs	r1, #108	; 0x6c
    a56c:	f016 f87d 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a570:	2400      	movs	r4, #0
    a572:	e5e1      	b.n	a138 <handleParameter+0x122>
				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
    a574:	f016 f887 	bl	20686 <tmc2130_readInt>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_3_MASK, TMC2130_TFD_3_SHIFT, (*value & (1<<3))? 1:0);
    a578:	216c      	movs	r1, #108	; 0x6c
    a57a:	4878      	ldr	r0, [pc, #480]	; (a75c <handleParameter+0x746>)
    a57c:	f016 f883 	bl	20686 <tmc2130_readInt>
    a580:	682b      	ldr	r3, [r5, #0]
    a582:	021b      	lsls	r3, r3, #8
    a584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a588:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
    a58c:	431a      	orrs	r2, r3
    a58e:	4873      	ldr	r0, [pc, #460]	; (a75c <handleParameter+0x746>)
    a590:	216c      	movs	r1, #108	; 0x6c
    a592:	f016 f86a 	bl	2066a <tmc2130_writeInt>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TFD_ALL_MASK, TMC2130_TFD_ALL_SHIFT, *value);
    a596:	216c      	movs	r1, #108	; 0x6c
    a598:	4870      	ldr	r0, [pc, #448]	; (a75c <handleParameter+0x746>)
    a59a:	f016 f874 	bl	20686 <tmc2130_readInt>
    a59e:	682b      	ldr	r3, [r5, #0]
    a5a0:	011b      	lsls	r3, r3, #4
    a5a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a5a6:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    a5aa:	431a      	orrs	r2, r3
    a5ac:	486b      	ldr	r0, [pc, #428]	; (a75c <handleParameter+0x746>)
    a5ae:	216c      	movs	r1, #108	; 0x6c
    a5b0:	f016 f85b 	bl	2066a <tmc2130_writeInt>
    a5b4:	e5c0      	b.n	a138 <handleParameter+0x122>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a5b6:	4869      	ldr	r0, [pc, #420]	; (a75c <handleParameter+0x746>)
    a5b8:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a5ba:	b9e4      	cbnz	r4, a5f6 <handleParameter+0x5e0>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a5bc:	f016 f863 	bl	20686 <tmc2130_readInt>
    a5c0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HSTRT_SHIFT);
    a5c4:	f04f 016c 	mov.w	r1, #108	; 0x6c
    a5c8:	4864      	ldr	r0, [pc, #400]	; (a75c <handleParameter+0x746>)
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a5ca:	d005      	beq.n	a5d8 <handleParameter+0x5c2>
				*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HSTRT_SHIFT);
    a5cc:	f016 f85b 	bl	20686 <tmc2130_readInt>
    a5d0:	f3c0 1002 	ubfx	r0, r0, #4, #3
    a5d4:	6028      	str	r0, [r5, #0]
    a5d6:	e5af      	b.n	a138 <handleParameter+0x122>
				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
    a5d8:	f016 f855 	bl	20686 <tmc2130_readInt>
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
    a5dc:	216c      	movs	r1, #108	; 0x6c
				tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF);
    a5de:	4606      	mov	r6, r0
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
    a5e0:	485e      	ldr	r0, [pc, #376]	; (a75c <handleParameter+0x746>)
    a5e2:	f016 f850 	bl	20686 <tmc2130_readInt>
				if(tempValue & (1<<11))
    a5e6:	0532      	lsls	r2, r6, #20
				*value = (tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) >> 7) & 0x0F;
    a5e8:	f3c0 13c3 	ubfx	r3, r0, #7, #4
				if(tempValue & (1<<11))
    a5ec:	d5a4      	bpl.n	a538 <handleParameter+0x522>
					*value |= 1<<3;
    a5ee:	f043 0308 	orr.w	r3, r3, #8
    a5f2:	602b      	str	r3, [r5, #0]
    a5f4:	e5a0      	b.n	a138 <handleParameter+0x122>
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a5f6:	f016 f846 	bl	20686 <tmc2130_readInt>
    a5fa:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HSTRT_SHIFT, *value);
    a5fe:	f04f 016c 	mov.w	r1, #108	; 0x6c
    a602:	4856      	ldr	r0, [pc, #344]	; (a75c <handleParameter+0x746>)
			if(tmc2130_readInt(motorToIC(motor), TMC2130_CHOPCONF) & (1<<14))
    a604:	d00e      	beq.n	a624 <handleParameter+0x60e>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_HSTRT_MASK, TMC2130_HSTRT_SHIFT, *value);
    a606:	f016 f83e 	bl	20686 <tmc2130_readInt>
    a60a:	682b      	ldr	r3, [r5, #0]
    a60c:	011b      	lsls	r3, r3, #4
    a60e:	f003 0370 	and.w	r3, r3, #112	; 0x70
    a612:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    a616:	431a      	orrs	r2, r3
    a618:	4850      	ldr	r0, [pc, #320]	; (a75c <handleParameter+0x746>)
    a61a:	216c      	movs	r1, #108	; 0x6c
    a61c:	f016 f825 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a620:	2400      	movs	r4, #0
    a622:	e589      	b.n	a138 <handleParameter+0x122>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_OFFSET_MASK, TMC2130_OFFSET_SHIFT, *value);
    a624:	f016 f82f 	bl	20686 <tmc2130_readInt>
    a628:	682b      	ldr	r3, [r5, #0]
    a62a:	01db      	lsls	r3, r3, #7
    a62c:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    a630:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    a634:	431a      	orrs	r2, r3
    a636:	4849      	ldr	r0, [pc, #292]	; (a75c <handleParameter+0x746>)
    a638:	216c      	movs	r1, #108	; 0x6c
    a63a:	f016 f816 	bl	2066a <tmc2130_writeInt>
    a63e:	e57b      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_SHIFT);
    a640:	4846      	ldr	r0, [pc, #280]	; (a75c <handleParameter+0x746>)
    a642:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a644:	b92c      	cbnz	r4, a652 <handleParameter+0x63c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_SHIFT);
    a646:	f016 f81e 	bl	20686 <tmc2130_readInt>
    a64a:	f000 000f 	and.w	r0, r0, #15
    a64e:	6028      	str	r0, [r5, #0]
    a650:	e572      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_TOFF_MASK, TMC2130_TOFF_SHIFT, *value);
    a652:	f016 f818 	bl	20686 <tmc2130_readInt>
    a656:	682a      	ldr	r2, [r5, #0]
    a658:	f020 000f 	bic.w	r0, r0, #15
    a65c:	f002 020f 	and.w	r2, r2, #15
    a660:	4302      	orrs	r2, r0
    a662:	216c      	movs	r1, #108	; 0x6c
    a664:	483d      	ldr	r0, [pc, #244]	; (a75c <handleParameter+0x746>)
    a666:	f016 f800 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a66a:	2400      	movs	r4, #0
    a66c:	e564      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEIMIN_SHIFT);
    a66e:	483b      	ldr	r0, [pc, #236]	; (a75c <handleParameter+0x746>)
    a670:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a672:	b92c      	cbnz	r4, a680 <handleParameter+0x66a>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEIMIN_SHIFT);
    a674:	f016 f807 	bl	20686 <tmc2130_readInt>
    a678:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    a67c:	6028      	str	r0, [r5, #0]
    a67e:	e55b      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEIMIN_MASK, TMC2130_SEIMIN_SHIFT, *value);
    a680:	f016 f801 	bl	20686 <tmc2130_readInt>
    a684:	682b      	ldr	r3, [r5, #0]
    a686:	03db      	lsls	r3, r3, #15
    a688:	b29b      	uxth	r3, r3
    a68a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    a68e:	431a      	orrs	r2, r3
    a690:	4832      	ldr	r0, [pc, #200]	; (a75c <handleParameter+0x746>)
    a692:	216d      	movs	r1, #109	; 0x6d
    a694:	f015 ffe9 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a698:	2400      	movs	r4, #0
    a69a:	e54d      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_SHIFT);
    a69c:	482f      	ldr	r0, [pc, #188]	; (a75c <handleParameter+0x746>)
    a69e:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a6a0:	b92c      	cbnz	r4, a6ae <handleParameter+0x698>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_SHIFT);
    a6a2:	f015 fff0 	bl	20686 <tmc2130_readInt>
    a6a6:	f3c0 3041 	ubfx	r0, r0, #13, #2
    a6aa:	6028      	str	r0, [r5, #0]
    a6ac:	e544      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEDN_MASK, TMC2130_SEDN_SHIFT, *value);
    a6ae:	f015 ffea 	bl	20686 <tmc2130_readInt>
    a6b2:	682b      	ldr	r3, [r5, #0]
    a6b4:	035b      	lsls	r3, r3, #13
    a6b6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    a6ba:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
    a6be:	431a      	orrs	r2, r3
    a6c0:	4826      	ldr	r0, [pc, #152]	; (a75c <handleParameter+0x746>)
    a6c2:	216d      	movs	r1, #109	; 0x6d
    a6c4:	f015 ffd1 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a6c8:	2400      	movs	r4, #0
    a6ca:	e535      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMAX_SHIFT);
    a6cc:	4823      	ldr	r0, [pc, #140]	; (a75c <handleParameter+0x746>)
    a6ce:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a6d0:	b92c      	cbnz	r4, a6de <handleParameter+0x6c8>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMAX_SHIFT);
    a6d2:	f015 ffd8 	bl	20686 <tmc2130_readInt>
    a6d6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    a6da:	6028      	str	r0, [r5, #0]
    a6dc:	e52c      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMAX_MASK, TMC2130_SEMAX_SHIFT, *value);
    a6de:	f015 ffd2 	bl	20686 <tmc2130_readInt>
    a6e2:	682b      	ldr	r3, [r5, #0]
    a6e4:	021b      	lsls	r3, r3, #8
    a6e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    a6ea:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
    a6ee:	431a      	orrs	r2, r3
    a6f0:	481a      	ldr	r0, [pc, #104]	; (a75c <handleParameter+0x746>)
    a6f2:	216d      	movs	r1, #109	; 0x6d
    a6f4:	f015 ffb9 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a6f8:	2400      	movs	r4, #0
    a6fa:	e51d      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_SHIFT);
    a6fc:	4817      	ldr	r0, [pc, #92]	; (a75c <handleParameter+0x746>)
    a6fe:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a700:	b92c      	cbnz	r4, a70e <handleParameter+0x6f8>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_SHIFT);
    a702:	f015 ffc0 	bl	20686 <tmc2130_readInt>
    a706:	f3c0 1041 	ubfx	r0, r0, #5, #2
    a70a:	6028      	str	r0, [r5, #0]
    a70c:	e514      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEUP_MASK, TMC2130_SEUP_SHIFT, *value);
    a70e:	f015 ffba 	bl	20686 <tmc2130_readInt>
    a712:	682b      	ldr	r3, [r5, #0]
    a714:	015b      	lsls	r3, r3, #5
    a716:	f003 0360 	and.w	r3, r3, #96	; 0x60
    a71a:	f020 0260 	bic.w	r2, r0, #96	; 0x60
    a71e:	431a      	orrs	r2, r3
    a720:	480e      	ldr	r0, [pc, #56]	; (a75c <handleParameter+0x746>)
    a722:	216d      	movs	r1, #109	; 0x6d
    a724:	f015 ffa1 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a728:	2400      	movs	r4, #0
    a72a:	e505      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMIN_SHIFT);
    a72c:	480b      	ldr	r0, [pc, #44]	; (a75c <handleParameter+0x746>)
    a72e:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a730:	b92c      	cbnz	r4, a73e <handleParameter+0x728>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMIN_SHIFT);
    a732:	f015 ffa8 	bl	20686 <tmc2130_readInt>
    a736:	f000 000f 	and.w	r0, r0, #15
    a73a:	6028      	str	r0, [r5, #0]
    a73c:	e4fc      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SEMIN_MASK, TMC2130_SEMIN_SHIFT, *value);
    a73e:	f015 ffa2 	bl	20686 <tmc2130_readInt>
    a742:	682a      	ldr	r2, [r5, #0]
    a744:	f020 000f 	bic.w	r0, r0, #15
    a748:	f002 020f 	and.w	r2, r2, #15
    a74c:	4302      	orrs	r2, r0
    a74e:	216d      	movs	r1, #109	; 0x6d
    a750:	4802      	ldr	r0, [pc, #8]	; (a75c <handleParameter+0x746>)
    a752:	f015 ff8a 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a756:	2400      	movs	r4, #0
    a758:	e4ee      	b.n	a138 <handleParameter+0x122>
    a75a:	bf00      	nop
    a75c:	1fff5fc4 	.word	0x1fff5fc4
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFILT_SHIFT);
    a760:	48b8      	ldr	r0, [pc, #736]	; (aa44 <handleParameter+0xa2e>)
    a762:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a764:	b92c      	cbnz	r4, a772 <handleParameter+0x75c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFILT_SHIFT);
    a766:	f015 ff8e 	bl	20686 <tmc2130_readInt>
    a76a:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a76e:	6028      	str	r0, [r5, #0]
    a770:	e4e2      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SFILT_MASK, TMC2130_SFILT_SHIFT, *value);
    a772:	f015 ff88 	bl	20686 <tmc2130_readInt>
    a776:	682b      	ldr	r3, [r5, #0]
    a778:	061b      	lsls	r3, r3, #24
    a77a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a77e:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
    a782:	431a      	orrs	r2, r3
    a784:	48af      	ldr	r0, [pc, #700]	; (aa44 <handleParameter+0xa2e>)
    a786:	216d      	movs	r1, #109	; 0x6d
    a788:	f015 ff6f 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a78c:	2400      	movs	r4, #0
    a78e:	e4d3      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT);
    a790:	48ac      	ldr	r0, [pc, #688]	; (aa44 <handleParameter+0xa2e>)
    a792:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    a794:	b964      	cbnz	r4, a7b0 <handleParameter+0x79a>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT);
    a796:	f015 ff76 	bl	20686 <tmc2130_readInt>
    a79a:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
    a79c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT);
    a7a0:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
    a7a4:	bf18      	it	ne
    a7a6:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    a7aa:	4318      	orrs	r0, r3
    a7ac:	6028      	str	r0, [r5, #0]
    a7ae:	e4c3      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_COOLCONF, TMC2130_SGT_MASK, TMC2130_SGT_SHIFT, *value);
    a7b0:	f015 ff69 	bl	20686 <tmc2130_readInt>
    a7b4:	682b      	ldr	r3, [r5, #0]
    a7b6:	041b      	lsls	r3, r3, #16
    a7b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
    a7bc:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
    a7c0:	431a      	orrs	r2, r3
    a7c2:	48a0      	ldr	r0, [pc, #640]	; (aa44 <handleParameter+0xa2e>)
    a7c4:	216d      	movs	r1, #109	; 0x6d
    a7c6:	f015 ff50 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a7ca:	2400      	movs	r4, #0
    a7cc:	e4b4      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSENSE_SHIFT);
    a7ce:	489d      	ldr	r0, [pc, #628]	; (aa44 <handleParameter+0xa2e>)
    a7d0:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a7d2:	b92c      	cbnz	r4, a7e0 <handleParameter+0x7ca>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSENSE_SHIFT);
    a7d4:	f015 ff57 	bl	20686 <tmc2130_readInt>
    a7d8:	f3c0 4040 	ubfx	r0, r0, #17, #1
    a7dc:	6028      	str	r0, [r5, #0]
    a7de:	e4ab      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_VSENSE_MASK, TMC2130_VSENSE_SHIFT, *value);
    a7e0:	f015 ff51 	bl	20686 <tmc2130_readInt>
    a7e4:	682b      	ldr	r3, [r5, #0]
    a7e6:	045b      	lsls	r3, r3, #17
    a7e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a7ec:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
    a7f0:	431a      	orrs	r2, r3
    a7f2:	4894      	ldr	r0, [pc, #592]	; (aa44 <handleParameter+0xa2e>)
    a7f4:	216c      	movs	r1, #108	; 0x6c
    a7f6:	f015 ff38 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a7fa:	2400      	movs	r4, #0
    a7fc:	e49c      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a7fe:	2c00      	cmp	r4, #0
    a800:	f040 8143 	bne.w	aa8a <handleParameter+0xa74>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_CS_ACTUAL_MASK, TMC2130_CS_ACTUAL_SHIFT);
    a804:	488f      	ldr	r0, [pc, #572]	; (aa44 <handleParameter+0xa2e>)
    a806:	216f      	movs	r1, #111	; 0x6f
    a808:	f015 ff3d 	bl	20686 <tmc2130_readInt>
    a80c:	f3c0 4004 	ubfx	r0, r0, #16, #5
    a810:	6028      	str	r0, [r5, #0]
    a812:	e491      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a814:	b924      	cbnz	r4, a820 <handleParameter+0x80a>
			*value = StepDir_getStallGuardThreshold(motor);
    a816:	4620      	mov	r0, r4
    a818:	f015 f98e 	bl	1fb38 <StepDir_getStallGuardThreshold>
    a81c:	6028      	str	r0, [r5, #0]
    a81e:	e48b      	b.n	a138 <handleParameter+0x122>
			StepDir_setStallGuardThreshold(motor, *value);
    a820:	6829      	ldr	r1, [r5, #0]
    a822:	2000      	movs	r0, #0
    a824:	f015 f8f2 	bl	1fa0c <StepDir_setStallGuardThreshold>
	uint32_t errors = TMC_ERROR_NONE;
    a828:	2400      	movs	r4, #0
    a82a:	e485      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a82c:	b984      	cbnz	r4, a850 <handleParameter+0x83a>
			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TCOOLTHRS);
    a82e:	4885      	ldr	r0, [pc, #532]	; (aa44 <handleParameter+0xa2e>)
    a830:	2114      	movs	r1, #20
    a832:	f015 ff28 	bl	20686 <tmc2130_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    a836:	2800      	cmp	r0, #0
    a838:	bf08      	it	eq
    a83a:	2001      	moveq	r0, #1
    a83c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a840:	fb93 f0f0 	sdiv	r0, r3, r0
    a844:	4b80      	ldr	r3, [pc, #512]	; (aa48 <handleParameter+0xa32>)
    a846:	4298      	cmp	r0, r3
    a848:	bfd4      	ite	le
    a84a:	6028      	strle	r0, [r5, #0]
    a84c:	602b      	strgt	r3, [r5, #0]
    a84e:	e473      	b.n	a138 <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a850:	682b      	ldr	r3, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
    a852:	487c      	ldr	r0, [pc, #496]	; (aa44 <handleParameter+0xa2e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a854:	2b00      	cmp	r3, #0
    a856:	bf08      	it	eq
    a858:	2301      	moveq	r3, #1
    a85a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a85e:	fb92 f2f3 	sdiv	r2, r2, r3
    a862:	4b79      	ldr	r3, [pc, #484]	; (aa48 <handleParameter+0xa32>)
    a864:	429a      	cmp	r2, r3
    a866:	bfa8      	it	ge
    a868:	461a      	movge	r2, r3
    a86a:	602a      	str	r2, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_TCOOLTHRS, *value);
    a86c:	2114      	movs	r1, #20
    a86e:	f015 fefc 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a872:	2400      	movs	r4, #0
    a874:	e460      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDTF_SHIFT);
    a876:	4873      	ldr	r0, [pc, #460]	; (aa44 <handleParameter+0xa2e>)
    a878:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a87a:	b92c      	cbnz	r4, a888 <handleParameter+0x872>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDTF_SHIFT);
    a87c:	f015 ff03 	bl	20686 <tmc2130_readInt>
    a880:	f3c0 3040 	ubfx	r0, r0, #13, #1
    a884:	6028      	str	r0, [r5, #0]
    a886:	e457      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_RNDTF_MASK, TMC2130_RNDTF_SHIFT, *value);
    a888:	f015 fefd 	bl	20686 <tmc2130_readInt>
    a88c:	682b      	ldr	r3, [r5, #0]
    a88e:	035b      	lsls	r3, r3, #13
    a890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    a894:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    a898:	431a      	orrs	r2, r3
    a89a:	486a      	ldr	r0, [pc, #424]	; (aa44 <handleParameter+0xa2e>)
    a89c:	216c      	movs	r1, #108	; 0x6c
    a89e:	f015 fee4 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a8a2:	2400      	movs	r4, #0
    a8a4:	e448      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_SHIFT);
    a8a6:	4867      	ldr	r0, [pc, #412]	; (aa44 <handleParameter+0xa2e>)
    a8a8:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    a8aa:	b92c      	cbnz	r4, a8b8 <handleParameter+0x8a2>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_SHIFT);
    a8ac:	f015 feeb 	bl	20686 <tmc2130_readInt>
    a8b0:	f3c0 5003 	ubfx	r0, r0, #20, #4
    a8b4:	6028      	str	r0, [r5, #0]
    a8b6:	e43f      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_CHOPCONF, TMC2130_SYNC_MASK, TMC2130_SYNC_SHIFT, *value);
    a8b8:	f015 fee5 	bl	20686 <tmc2130_readInt>
    a8bc:	682b      	ldr	r3, [r5, #0]
    a8be:	051b      	lsls	r3, r3, #20
    a8c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
    a8c4:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
    a8c8:	431a      	orrs	r2, r3
    a8ca:	485e      	ldr	r0, [pc, #376]	; (aa44 <handleParameter+0xa2e>)
    a8cc:	216c      	movs	r1, #108	; 0x6c
    a8ce:	f015 fecc 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a8d2:	2400      	movs	r4, #0
    a8d4:	e430      	b.n	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a8d6:	b984      	cbnz	r4, a8fa <handleParameter+0x8e4>
			tempValue = tmc2130_readInt(motorToIC(motor), TMC2130_TPWMTHRS);
    a8d8:	485a      	ldr	r0, [pc, #360]	; (aa44 <handleParameter+0xa2e>)
    a8da:	2113      	movs	r1, #19
    a8dc:	f015 fed3 	bl	20686 <tmc2130_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    a8e0:	2800      	cmp	r0, #0
    a8e2:	bf08      	it	eq
    a8e4:	2001      	moveq	r0, #1
    a8e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a8ea:	fb93 f0f0 	sdiv	r0, r3, r0
    a8ee:	4b56      	ldr	r3, [pc, #344]	; (aa48 <handleParameter+0xa32>)
    a8f0:	4298      	cmp	r0, r3
    a8f2:	bfd4      	ite	le
    a8f4:	6028      	strle	r0, [r5, #0]
    a8f6:	602b      	strgt	r3, [r5, #0]
    a8f8:	e41e      	b.n	a138 <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a8fa:	682b      	ldr	r3, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
    a8fc:	4851      	ldr	r0, [pc, #324]	; (aa44 <handleParameter+0xa2e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    a8fe:	2b00      	cmp	r3, #0
    a900:	bf08      	it	eq
    a902:	2301      	moveq	r3, #1
    a904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a908:	fb92 f2f3 	sdiv	r2, r2, r3
    a90c:	4b4e      	ldr	r3, [pc, #312]	; (aa48 <handleParameter+0xa32>)
    a90e:	429a      	cmp	r2, r3
    a910:	bfa8      	it	ge
    a912:	461a      	movge	r2, r3
    a914:	602a      	str	r2, [r5, #0]
			tmc2130_writeInt(motorToIC(motor), TMC2130_TPWMTHRS, *value);
    a916:	2113      	movs	r1, #19
    a918:	f015 fea7 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a91c:	2400      	movs	r4, #0
    a91e:	e40b      	b.n	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PWM_GRAD_SHIFT);
    a920:	4848      	ldr	r0, [pc, #288]	; (aa44 <handleParameter+0xa2e>)
    a922:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    a924:	b92c      	cbnz	r4, a932 <handleParameter+0x91c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PWM_GRAD_SHIFT);
    a926:	f015 feae 	bl	20686 <tmc2130_readInt>
    a92a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a92e:	6028      	str	r0, [r5, #0]
    a930:	e402      	b.n	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_GRAD_MASK, TMC2130_PWM_GRAD_SHIFT, *value);
    a932:	f015 fea8 	bl	20686 <tmc2130_readInt>
    a936:	682b      	ldr	r3, [r5, #0]
    a938:	021b      	lsls	r3, r3, #8
    a93a:	b29b      	uxth	r3, r3
    a93c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
    a940:	431a      	orrs	r2, r3
    a942:	4840      	ldr	r0, [pc, #256]	; (aa44 <handleParameter+0xa2e>)
    a944:	2170      	movs	r1, #112	; 0x70
    a946:	f015 fe90 	bl	2066a <tmc2130_writeInt>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_GCONF, TMC2130_EN_PWM_MODE_MASK, TMC2130_EN_PWM_MODE_SHIFT, (*value) ? 1 : 0);
    a94a:	2100      	movs	r1, #0
    a94c:	483d      	ldr	r0, [pc, #244]	; (aa44 <handleParameter+0xa2e>)
    a94e:	f015 fe9a 	bl	20686 <tmc2130_readInt>
    a952:	682b      	ldr	r3, [r5, #0]
    a954:	2b00      	cmp	r3, #0
    a956:	f020 0204 	bic.w	r2, r0, #4
    a95a:	bf18      	it	ne
    a95c:	2304      	movne	r3, #4
    a95e:	4839      	ldr	r0, [pc, #228]	; (aa44 <handleParameter+0xa2e>)
    a960:	431a      	orrs	r2, r3
    a962:	2100      	movs	r1, #0
    a964:	f015 fe81 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a968:	2400      	movs	r4, #0
    a96a:	f7ff bbe5 	b.w	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PWM_AMPL_SHIFT);
    a96e:	4835      	ldr	r0, [pc, #212]	; (aa44 <handleParameter+0xa2e>)
    a970:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    a972:	b92c      	cbnz	r4, a980 <handleParameter+0x96a>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PWM_AMPL_SHIFT);
    a974:	f015 fe87 	bl	20686 <tmc2130_readInt>
    a978:	b2c0      	uxtb	r0, r0
    a97a:	6028      	str	r0, [r5, #0]
    a97c:	f7ff bbdc 	b.w	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AMPL_MASK, TMC2130_PWM_AMPL_SHIFT, *value);
    a980:	f015 fe81 	bl	20686 <tmc2130_readInt>
    a984:	782a      	ldrb	r2, [r5, #0]
    a986:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    a98a:	4302      	orrs	r2, r0
    a98c:	2170      	movs	r1, #112	; 0x70
    a98e:	482d      	ldr	r0, [pc, #180]	; (aa44 <handleParameter+0xa2e>)
    a990:	f015 fe6b 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a994:	2400      	movs	r4, #0
    a996:	f7ff bbcf 	b.w	a138 <handleParameter+0x122>
		if(readWrite == READ) {
    a99a:	b944      	cbnz	r4, a9ae <handleParameter+0x998>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PWM_FREQ_SHIFT);
    a99c:	4829      	ldr	r0, [pc, #164]	; (aa44 <handleParameter+0xa2e>)
    a99e:	2170      	movs	r1, #112	; 0x70
    a9a0:	f015 fe71 	bl	20686 <tmc2130_readInt>
    a9a4:	f3c0 4001 	ubfx	r0, r0, #16, #2
    a9a8:	6028      	str	r0, [r5, #0]
    a9aa:	f7ff bbc5 	b.w	a138 <handleParameter+0x122>
			if(*value >= 0 && *value < 4)
    a9ae:	682b      	ldr	r3, [r5, #0]
    a9b0:	2b03      	cmp	r3, #3
    a9b2:	d86d      	bhi.n	aa90 <handleParameter+0xa7a>
				TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_FREQ_MASK, TMC2130_PWM_FREQ_SHIFT, *value);
    a9b4:	2170      	movs	r1, #112	; 0x70
    a9b6:	4823      	ldr	r0, [pc, #140]	; (aa44 <handleParameter+0xa2e>)
    a9b8:	f015 fe65 	bl	20686 <tmc2130_readInt>
    a9bc:	682b      	ldr	r3, [r5, #0]
    a9be:	041b      	lsls	r3, r3, #16
    a9c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    a9c4:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
    a9c8:	431a      	orrs	r2, r3
    a9ca:	481e      	ldr	r0, [pc, #120]	; (aa44 <handleParameter+0xa2e>)
    a9cc:	2170      	movs	r1, #112	; 0x70
    a9ce:	f015 fe4c 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    a9d2:	2400      	movs	r4, #0
    a9d4:	f7ff bbb0 	b.w	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC2130_PWM_AUTOSCALE_SHIFT);
    a9d8:	481a      	ldr	r0, [pc, #104]	; (aa44 <handleParameter+0xa2e>)
    a9da:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    a9dc:	b934      	cbnz	r4, a9ec <handleParameter+0x9d6>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC2130_PWM_AUTOSCALE_SHIFT);
    a9de:	f015 fe52 	bl	20686 <tmc2130_readInt>
    a9e2:	f3c0 4080 	ubfx	r0, r0, #18, #1
    a9e6:	6028      	str	r0, [r5, #0]
    a9e8:	f7ff bba6 	b.w	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_PWM_AUTOSCALE_MASK, TMC2130_PWM_AUTOSCALE_SHIFT, (*value)? 1:0);
    a9ec:	f015 fe4b 	bl	20686 <tmc2130_readInt>
    a9f0:	682b      	ldr	r3, [r5, #0]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    a9f8:	bf18      	it	ne
    a9fa:	f44f 2380 	movne.w	r3, #262144	; 0x40000
    a9fe:	4811      	ldr	r0, [pc, #68]	; (aa44 <handleParameter+0xa2e>)
    aa00:	431a      	orrs	r2, r3
    aa02:	2170      	movs	r1, #112	; 0x70
    aa04:	f015 fe31 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    aa08:	2400      	movs	r4, #0
    aa0a:	f7ff bb95 	b.w	a138 <handleParameter+0x122>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_FREEWHEEL_SHIFT);
    aa0e:	480d      	ldr	r0, [pc, #52]	; (aa44 <handleParameter+0xa2e>)
    aa10:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    aa12:	b934      	cbnz	r4, aa22 <handleParameter+0xa0c>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_FREEWHEEL_SHIFT);
    aa14:	f015 fe37 	bl	20686 <tmc2130_readInt>
    aa18:	f3c0 5001 	ubfx	r0, r0, #20, #2
    aa1c:	6028      	str	r0, [r5, #0]
    aa1e:	f7ff bb8b 	b.w	a138 <handleParameter+0x122>
			TMC2130_FIELD_UPDATE(motorToIC(motor), TMC2130_PWMCONF, TMC2130_FREEWHEEL_MASK, TMC2130_FREEWHEEL_SHIFT, *value);
    aa22:	f015 fe30 	bl	20686 <tmc2130_readInt>
    aa26:	682b      	ldr	r3, [r5, #0]
    aa28:	051b      	lsls	r3, r3, #20
    aa2a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    aa2e:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
    aa32:	431a      	orrs	r2, r3
    aa34:	4803      	ldr	r0, [pc, #12]	; (aa44 <handleParameter+0xa2e>)
    aa36:	2170      	movs	r1, #112	; 0x70
    aa38:	f015 fe17 	bl	2066a <tmc2130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    aa3c:	2400      	movs	r4, #0
    aa3e:	f7ff bb7b 	b.w	a138 <handleParameter+0x122>
    aa42:	bf00      	nop
    aa44:	1fff5fc4 	.word	0x1fff5fc4
    aa48:	000fffff 	.word	0x000fffff
		if(readWrite == READ) {
    aa4c:	bb1c      	cbnz	r4, aa96 <handleParameter+0xa80>
			*value = TMC2130_FIELD_READ(motorToIC(motor), TMC2130_DRV_STATUS, TMC2130_SG_RESULT_MASK, TMC2130_SG_RESULT_SHIFT);
    aa4e:	4813      	ldr	r0, [pc, #76]	; (aa9c <handleParameter+0xa86>)
    aa50:	216f      	movs	r1, #111	; 0x6f
    aa52:	f015 fe18 	bl	20686 <tmc2130_readInt>
    aa56:	f3c0 0009 	ubfx	r0, r0, #0, #10
    aa5a:	6028      	str	r0, [r5, #0]
    aa5c:	f7ff bb6c 	b.w	a138 <handleParameter+0x122>
		return TMC_ERROR_MOTOR;
    aa60:	2408      	movs	r4, #8
    aa62:	f7ff bb69 	b.w	a138 <handleParameter+0x122>
	switch(type)
    aa66:	2404      	movs	r4, #4
    aa68:	f7ff bb66 	b.w	a138 <handleParameter+0x122>
    aa6c:	2404      	movs	r4, #4
    aa6e:	f7ff bb63 	b.w	a138 <handleParameter+0x122>
			errors |= TMC_ERROR_TYPE;
    aa72:	2404      	movs	r4, #4
    aa74:	f7ff bb60 	b.w	a138 <handleParameter+0x122>
    aa78:	2404      	movs	r4, #4
    aa7a:	f7ff bb5d 	b.w	a138 <handleParameter+0x122>
    aa7e:	2404      	movs	r4, #4
    aa80:	f7ff bb5a 	b.w	a138 <handleParameter+0x122>
    aa84:	2404      	movs	r4, #4
    aa86:	f7ff bb57 	b.w	a138 <handleParameter+0x122>
    aa8a:	2404      	movs	r4, #4
    aa8c:	f7ff bb54 	b.w	a138 <handleParameter+0x122>
				errors |= TMC_ERROR_VALUE;
    aa90:	2410      	movs	r4, #16
    aa92:	f7ff bb51 	b.w	a138 <handleParameter+0x122>
			errors |= TMC_ERROR_TYPE;
    aa96:	2404      	movs	r4, #4
    aa98:	f7ff bb4e 	b.w	a138 <handleParameter+0x122>
    aa9c:	1fff5fc4 	.word	0x1fff5fc4

0000aaa0 <SAP>:
{
    aaa0:	b507      	push	{r0, r1, r2, lr}
    aaa2:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    aaa4:	ab01      	add	r3, sp, #4
    aaa6:	4602      	mov	r2, r0
    aaa8:	2001      	movs	r0, #1
    aaaa:	f7ff fab4 	bl	a016 <handleParameter>
}
    aaae:	b003      	add	sp, #12
    aab0:	f85d fb04 	ldr.w	pc, [sp], #4

0000aab4 <GAP>:
{
    aab4:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    aab6:	4602      	mov	r2, r0
    aab8:	2000      	movs	r0, #0
    aaba:	f7ff baac 	b.w	a016 <handleParameter>

0000aabe <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc2130_restore(&TMC2130);
    aabe:	4801      	ldr	r0, [pc, #4]	; (aac4 <restore+0x6>)
    aac0:	f015 be6b 	b.w	2079a <tmc2130_restore>
    aac4:	1fff5fc4 	.word	0x1fff5fc4

0000aac8 <reset>:
{
    aac8:	b508      	push	{r3, lr}
	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
    aaca:	2000      	movs	r0, #0
    aacc:	f014 fff4 	bl	1fab8 <StepDir_getActualVelocity>
    aad0:	b110      	cbz	r0, aad8 <reset+0x10>
    aad2:	4b09      	ldr	r3, [pc, #36]	; (aaf8 <reset+0x30>)
    aad4:	7898      	ldrb	r0, [r3, #2]
    aad6:	b170      	cbz	r0, aaf6 <reset+0x2e>
	tmc2130_reset(&TMC2130);
    aad8:	4808      	ldr	r0, [pc, #32]	; (aafc <reset+0x34>)
    aada:	f015 fe47 	bl	2076c <tmc2130_reset>
	StepDir_init(STEPDIR_PRECISION);
    aade:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    aae2:	f015 f877 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
    aae6:	4906      	ldr	r1, [pc, #24]	; (ab00 <reset+0x38>)
    aae8:	2300      	movs	r3, #0
    aaea:	4618      	mov	r0, r3
    aaec:	e9d1 1200 	ldrd	r1, r2, [r1]
    aaf0:	f014 fec6 	bl	1f880 <StepDir_setPins>
	return 1;
    aaf4:	2001      	movs	r0, #1
}
    aaf6:	bd08      	pop	{r3, pc}
    aaf8:	1fff0b34 	.word	0x1fff0b34
    aafc:	1fff5fc4 	.word	0x1fff5fc4
    ab00:	1fff19a0 	.word	0x1fff19a0

0000ab04 <enableDriver>:
	}
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    ab04:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    ab06:	bf04      	itt	eq
    ab08:	4b0b      	ldreq	r3, [pc, #44]	; (ab38 <enableDriver+0x34>)
    ab0a:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state == DRIVER_DISABLE)
    ab0e:	b930      	cbnz	r0, ab1e <enableDriver+0x1a>
		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
    ab10:	4b0a      	ldr	r3, [pc, #40]	; (ab3c <enableDriver+0x38>)
    ab12:	68db      	ldr	r3, [r3, #12]
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
    ab18:	4a09      	ldr	r2, [pc, #36]	; (ab40 <enableDriver+0x3c>)
    ab1a:	6890      	ldr	r0, [r2, #8]
    ab1c:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    ab1e:	2801      	cmp	r0, #1
    ab20:	d109      	bne.n	ab36 <enableDriver+0x32>
    ab22:	4b05      	ldr	r3, [pc, #20]	; (ab38 <enableDriver+0x34>)
    ab24:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    ab28:	2b01      	cmp	r3, #1
    ab2a:	d104      	bne.n	ab36 <enableDriver+0x32>
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
    ab2c:	4b03      	ldr	r3, [pc, #12]	; (ab3c <enableDriver+0x38>)
    ab2e:	68db      	ldr	r3, [r3, #12]
    ab30:	681b      	ldr	r3, [r3, #0]
    ab32:	699b      	ldr	r3, [r3, #24]
    ab34:	e7f0      	b.n	ab18 <enableDriver+0x14>
}
    ab36:	4770      	bx	lr
    ab38:	1fff5e88 	.word	0x1fff5e88
    ab3c:	00029d1c 	.word	0x00029d1c
    ab40:	1fff19a0 	.word	0x1fff19a0

0000ab44 <getMax>:
{
    ab44:	4603      	mov	r3, r0
	switch(type) {
    ab46:	2b05      	cmp	r3, #5
{
    ab48:	b510      	push	{r4, lr}
    ab4a:	4608      	mov	r0, r1
    ab4c:	4614      	mov	r4, r2
	switch(type) {
    ab4e:	d00c      	beq.n	ab6a <getMax+0x26>
    ab50:	d807      	bhi.n	ab62 <getMax+0x1e>
    ab52:	3b02      	subs	r3, #2
    ab54:	2b02      	cmp	r3, #2
    ab56:	d806      	bhi.n	ab66 <getMax+0x22>
			*value = StepDir_getFrequency(motor);
    ab58:	f015 f80a 	bl	1fb70 <StepDir_getFrequency>
			*value = StepDir_getMaxAcceleration(motor);
    ab5c:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    ab5e:	2000      	movs	r0, #0
}
    ab60:	bd10      	pop	{r4, pc}
	switch(type) {
    ab62:	2b18      	cmp	r3, #24
    ab64:	d0f8      	beq.n	ab58 <getMax+0x14>
    ab66:	2004      	movs	r0, #4
	return getLimit(LIMIT_MAX, type, motor, value);
    ab68:	e7fa      	b.n	ab60 <getMax+0x1c>
			*value = StepDir_getMaxAcceleration(motor);
    ab6a:	f015 f81d 	bl	1fba8 <StepDir_getMaxAcceleration>
    ab6e:	e7f5      	b.n	ab5c <getMax+0x18>

0000ab70 <getMeasuredSpeed>:
{
    ab70:	b538      	push	{r3, r4, r5, lr}
    ab72:	460d      	mov	r5, r1
	if(motor >= TMC2130_MOTORS)
    ab74:	4604      	mov	r4, r0
    ab76:	b920      	cbnz	r0, ab82 <getMeasuredSpeed+0x12>
		*value = StepDir_getActualVelocity(0);
    ab78:	f014 ff9e 	bl	1fab8 <StepDir_getActualVelocity>
    ab7c:	6028      	str	r0, [r5, #0]
    ab7e:	4620      	mov	r0, r4
}
    ab80:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    ab82:	2008      	movs	r0, #8
    ab84:	e7fc      	b.n	ab80 <getMeasuredSpeed+0x10>

0000ab86 <configCallback>:
	if(completedState == CONFIG_RESET)
    ab86:	2901      	cmp	r1, #1
{
    ab88:	b510      	push	{r4, lr}
    ab8a:	4604      	mov	r4, r0
	if(completedState == CONFIG_RESET)
    ab8c:	d108      	bne.n	aba0 <configCallback+0x1a>
		tmc2130_writeInt(tmc2130, TMC2130_PWMCONF, 0x000504C8);
    ab8e:	4a05      	ldr	r2, [pc, #20]	; (aba4 <configCallback+0x1e>)
    ab90:	2170      	movs	r1, #112	; 0x70
    ab92:	f015 fd6a 	bl	2066a <tmc2130_writeInt>
		tmc2130_fillShadowRegisters(tmc2130);
    ab96:	4620      	mov	r0, r4
}
    ab98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tmc2130_fillShadowRegisters(tmc2130);
    ab9c:	f015 bdbc 	b.w	20718 <tmc2130_fillShadowRegisters>
}
    aba0:	bd10      	pop	{r4, pc}
    aba2:	bf00      	nop
    aba4:	000504c8 	.word	0x000504c8

0000aba8 <moveBy>:
{
    aba8:	b538      	push	{r3, r4, r5, lr}
    abaa:	460d      	mov	r5, r1
	if(motor >= TMC2130_MOTORS)
    abac:	4604      	mov	r4, r0
    abae:	b948      	cbnz	r0, abc4 <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    abb0:	f014 ff62 	bl	1fa78 <StepDir_getActualPosition>
    abb4:	6829      	ldr	r1, [r5, #0]
    abb6:	4401      	add	r1, r0
    abb8:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    abba:	4620      	mov	r0, r4
    abbc:	f014 fdda 	bl	1f774 <StepDir_moveTo>
    abc0:	4620      	mov	r0, r4
}
    abc2:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    abc4:	2008      	movs	r0, #8
    abc6:	e7fc      	b.n	abc2 <moveBy+0x1a>

0000abc8 <getMin>:
	switch(type) {
    abc8:	2805      	cmp	r0, #5
    abca:	d803      	bhi.n	abd4 <getMin+0xc>
    abcc:	2801      	cmp	r0, #1
    abce:	d803      	bhi.n	abd8 <getMin+0x10>
    abd0:	2004      	movs	r0, #4
}
    abd2:	4770      	bx	lr
	switch(type) {
    abd4:	2818      	cmp	r0, #24
    abd6:	d1fb      	bne.n	abd0 <getMin+0x8>
			*value = 0; // TODO: Determine limits here
    abd8:	2000      	movs	r0, #0
    abda:	6010      	str	r0, [r2, #0]
    abdc:	4770      	bx	lr

0000abde <tmc2130_readWriteArray>:
	if(Evalboards.ch1.fullCover != NULL)
    abde:	4b05      	ldr	r3, [pc, #20]	; (abf4 <tmc2130_readWriteArray+0x16>)
    abe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
{
    abe2:	4608      	mov	r0, r1
    abe4:	4611      	mov	r1, r2
	if(Evalboards.ch1.fullCover != NULL)
    abe6:	b103      	cbz	r3, abea <tmc2130_readWriteArray+0xc>
		channelToSPI(channel)->readWriteArray(&data[0], length);
    abe8:	4718      	bx	r3
    abea:	4b03      	ldr	r3, [pc, #12]	; (abf8 <tmc2130_readWriteArray+0x1a>)
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	68db      	ldr	r3, [r3, #12]
    abf0:	e7fa      	b.n	abe8 <tmc2130_readWriteArray+0xa>
    abf2:	bf00      	nop
    abf4:	1fff5e88 	.word	0x1fff5e88
    abf8:	1fff6248 	.word	0x1fff6248

0000abfc <TMC2130_init>:

void TMC2130_init(void)
{
    abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmc2130_init(&TMC2130, 1, Evalboards.ch2.config, &tmc2130_defaultRegisterResetState[0]);
    ac00:	4d6b      	ldr	r5, [pc, #428]	; (adb0 <TMC2130_init+0x1b4>)
    ac02:	4f6c      	ldr	r7, [pc, #432]	; (adb4 <TMC2130_init+0x1b8>)
    ac04:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
    ac08:	4b6b      	ldr	r3, [pc, #428]	; (adb8 <TMC2130_init+0x1bc>)
	tmc2130_setCallback(&TMC2130, configCallback);

	// Initialize the hardware pins
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
    ac0a:	f8df 820c 	ldr.w	r8, [pc, #524]	; ae18 <TMC2130_init+0x21c>
    ac0e:	4c6b      	ldr	r4, [pc, #428]	; (adbc <TMC2130_init+0x1c0>)
	tmc2130_init(&TMC2130, 1, Evalboards.ch2.config, &tmc2130_defaultRegisterResetState[0]);
    ac10:	4638      	mov	r0, r7
    ac12:	2101      	movs	r1, #1
    ac14:	f015 fd64 	bl	206e0 <tmc2130_init>
	tmc2130_setCallback(&TMC2130, configCallback);
    ac18:	4969      	ldr	r1, [pc, #420]	; (adc0 <TMC2130_init+0x1c4>)
    ac1a:	4638      	mov	r0, r7
    ac1c:	f015 fdd1 	bl	207c2 <tmc2130_setCallback>
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
    ac20:	f8d8 600c 	ldr.w	r6, [r8, #12]
    ac24:	6873      	ldr	r3, [r6, #4]
    ac26:	f103 0268 	add.w	r2, r3, #104	; 0x68
    ac2a:	60a2      	str	r2, [r4, #8]
	Pins.REFL_STEP       = &HAL.IOs->pins->DIO6;
    ac2c:	f503 7294 	add.w	r2, r3, #296	; 0x128
    ac30:	6022      	str	r2, [r4, #0]
	Pins.REFR_DIR        = &HAL.IOs->pins->DIO7;
    ac32:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    ac36:	6062      	str	r2, [r4, #4]
	Pins.AIN_REF_SW      = &HAL.IOs->pins->DIO10;
    ac38:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
    ac3c:	6222      	str	r2, [r4, #32]
	Pins.AIN_REF_PWM     = &HAL.IOs->pins->DIO11;
    ac3e:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
    ac42:	6262      	str	r2, [r4, #36]	; 0x24
	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO12;
    ac44:	f503 7252 	add.w	r2, r3, #840	; 0x348
    ac48:	60e2      	str	r2, [r4, #12]
	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO13;
    ac4a:	f503 725a 	add.w	r2, r3, #872	; 0x368
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
	Pins.DIAG0           = &HAL.IOs->pins->DIO15;
    ac4e:	f503 706a 	add.w	r0, r3, #936	; 0x3a8
	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO13;
    ac52:	6122      	str	r2, [r4, #16]
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
    ac54:	f503 7262 	add.w	r2, r3, #904	; 0x388
	Pins.DIAG1           = &HAL.IOs->pins->DIO16;
    ac58:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
    ac5c:	61e3      	str	r3, [r4, #28]

	HAL.IOs->config->toInput(Pins.DIAG0);
    ac5e:	6833      	ldr	r3, [r6, #0]
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO14;
    ac60:	6162      	str	r2, [r4, #20]
	HAL.IOs->config->toInput(Pins.DIAG0);
    ac62:	691b      	ldr	r3, [r3, #16]
	Pins.DIAG0           = &HAL.IOs->pins->DIO15;
    ac64:	61a0      	str	r0, [r4, #24]
	HAL.IOs->config->toInput(Pins.DIAG0);
    ac66:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.DIAG1);
    ac68:	6833      	ldr	r3, [r6, #0]
    ac6a:	69e0      	ldr	r0, [r4, #28]
    ac6c:	691b      	ldr	r3, [r3, #16]
    ac6e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCN_DCO);
    ac70:	6833      	ldr	r3, [r6, #0]
    ac72:	6960      	ldr	r0, [r4, #20]
    ac74:	691b      	ldr	r3, [r3, #16]
    ac76:	4798      	blx	r3

	HAL.IOs->config->toOutput(Pins.REFL_STEP);
    ac78:	6833      	ldr	r3, [r6, #0]
    ac7a:	6820      	ldr	r0, [r4, #0]
    ac7c:	68db      	ldr	r3, [r3, #12]
    ac7e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFR_DIR);
    ac80:	6833      	ldr	r3, [r6, #0]
    ac82:	6860      	ldr	r0, [r4, #4]
    ac84:	68db      	ldr	r3, [r3, #12]
    ac86:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
    ac88:	6833      	ldr	r3, [r6, #0]
    ac8a:	68a0      	ldr	r0, [r4, #8]
    ac8c:	68db      	ldr	r3, [r3, #12]
    ac8e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
    ac90:	6833      	ldr	r3, [r6, #0]
    ac92:	6920      	ldr	r0, [r4, #16]
    ac94:	68db      	ldr	r3, [r3, #12]
    ac96:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.ENCA_DCIN_CFG5);
    ac98:	6833      	ldr	r3, [r6, #0]
    ac9a:	68e0      	ldr	r0, [r4, #12]
    ac9c:	68db      	ldr	r3, [r3, #12]
    ac9e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
    aca0:	6833      	ldr	r3, [r6, #0]
    aca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aca4:	68db      	ldr	r3, [r3, #12]
    aca6:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_SW);
    aca8:	6833      	ldr	r3, [r6, #0]
    acaa:	6a20      	ldr	r0, [r4, #32]
    acac:	68db      	ldr	r3, [r3, #12]
    acae:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.AIN_REF_PWM);
    acb0:	6833      	ldr	r3, [r6, #0]
    acb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    acb4:	699b      	ldr	r3, [r3, #24]
    acb6:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.AIN_REF_SW);
    acb8:	6833      	ldr	r3, [r6, #0]
    acba:	6a20      	ldr	r0, [r4, #32]
    acbc:	699b      	ldr	r3, [r3, #24]
    acbe:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.ENCN_DCO);
    acc0:	6833      	ldr	r3, [r6, #0]
    acc2:	6960      	ldr	r0, [r4, #20]
    acc4:	699b      	ldr	r3, [r3, #24]
    acc6:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.ENCA_DCIN_CFG5);
    acc8:	6833      	ldr	r3, [r6, #0]
    acca:	68e0      	ldr	r0, [r4, #12]
    accc:	699b      	ldr	r3, [r3, #24]
    acce:	4798      	blx	r3

	// Initialize the SPI channel
	TMC2130_SPIChannel       = &HAL.SPI->ch2;
    acd0:	f8d8 2010 	ldr.w	r2, [r8, #16]
    acd4:	4b3b      	ldr	r3, [pc, #236]	; (adc4 <TMC2130_init+0x1c8>)
    acd6:	f102 0114 	add.w	r1, r2, #20
    acda:	6019      	str	r1, [r3, #0]
	TMC2130_SPIChannel->CSN  = &HAL.IOs->pins->SPI2_CSN0;
    acdc:	6873      	ldr	r3, [r6, #4]
    acde:	f503 7302 	add.w	r3, r3, #520	; 0x208
    ace2:	6193      	str	r3, [r2, #24]

	// Initialize the software StepDir generator
	StepDir_init(STEPDIR_PRECISION);
    ace4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    ace8:	f014 ff74 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
    acec:	2300      	movs	r3, #0
    acee:	e9d4 1200 	ldrd	r1, r2, [r4]
    acf2:	4618      	mov	r0, r3
    acf4:	f014 fdc4 	bl	1f880 <StepDir_setPins>

	Evalboards.ch2.type = (void *)&TMC2130;

	Evalboards.ch2.config->reset        = reset;
    acf8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    acfc:	4a32      	ldr	r2, [pc, #200]	; (adc8 <TMC2130_init+0x1cc>)
    acfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    ad02:	4a32      	ldr	r2, [pc, #200]	; (adcc <TMC2130_init+0x1d0>)
    ad04:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
    ad08:	2201      	movs	r2, #1
	Evalboards.ch2.type = (void *)&TMC2130;
    ad0a:	67af      	str	r7, [r5, #120]	; 0x78
	Evalboards.ch2.config->state        = CONFIG_RESET;
    ad0c:	801a      	strh	r2, [r3, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    ad0e:	4b30      	ldr	r3, [pc, #192]	; (add0 <TMC2130_init+0x1d4>)
    ad10:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    ad14:	4b2f      	ldr	r3, [pc, #188]	; (add4 <TMC2130_init+0x1d8>)
    ad16:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    ad1a:	4b2f      	ldr	r3, [pc, #188]	; (add8 <TMC2130_init+0x1dc>)
    ad1c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    ad20:	4b2e      	ldr	r3, [pc, #184]	; (addc <TMC2130_init+0x1e0>)
    ad22:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    ad26:	4b2e      	ldr	r3, [pc, #184]	; (ade0 <TMC2130_init+0x1e4>)
    ad28:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    ad2c:	4b2d      	ldr	r3, [pc, #180]	; (ade4 <TMC2130_init+0x1e8>)
    ad2e:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    ad32:	4b2d      	ldr	r3, [pc, #180]	; (ade8 <TMC2130_init+0x1ec>)
    ad34:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    ad38:	4b2c      	ldr	r3, [pc, #176]	; (adec <TMC2130_init+0x1f0>)
    ad3a:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
    ad3e:	4b2c      	ldr	r3, [pc, #176]	; (adf0 <TMC2130_init+0x1f4>)
    ad40:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
    ad44:	4b2b      	ldr	r3, [pc, #172]	; (adf4 <TMC2130_init+0x1f8>)
    ad46:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
    ad4a:	4b2b      	ldr	r3, [pc, #172]	; (adf8 <TMC2130_init+0x1fc>)
    ad4c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
    ad50:	4b2a      	ldr	r3, [pc, #168]	; (adfc <TMC2130_init+0x200>)
    ad52:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
    ad56:	4b2a      	ldr	r3, [pc, #168]	; (ae00 <TMC2130_init+0x204>)
    ad58:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
    ad5c:	4b29      	ldr	r3, [pc, #164]	; (ae04 <TMC2130_init+0x208>)
    ad5e:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
	Evalboards.ch2.numberOfMotors       = TMC2130_MOTORS;
    ad62:	f885 208c 	strb.w	r2, [r5, #140]	; 0x8c
	Evalboards.ch2.VMMin                = TMC2130_EVAL_VM_MIN;
	Evalboards.ch2.VMMax                = TMC2130_EVAL_VM_MAX;
    ad66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    ad6a:	2232      	movs	r2, #50	; 0x32
    ad6c:	e9c5 3221 	strd	r3, r2, [r5, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    ad70:	4b25      	ldr	r3, [pc, #148]	; (ae08 <TMC2130_init+0x20c>)
    ad72:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
	Evalboards.ch2.getMin               = getMin;
    ad76:	4b25      	ldr	r3, [pc, #148]	; (ae0c <TMC2130_init+0x210>)
    ad78:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	Evalboards.ch2.getMax               = getMax;

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    ad7c:	2002      	movs	r0, #2
	Evalboards.ch2.getMax               = getMax;
    ad7e:	4b24      	ldr	r3, [pc, #144]	; (ae10 <TMC2130_init+0x214>)
    ad80:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    ad84:	f7ff febe 	bl	ab04 <enableDriver>

#if defined(Startrampe)
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF;
	GPIO_PinAFConfig(Pins.AIN_REF_PWM->port, Pins.AIN_REF_PWM->bit, GPIO_AF_TIM1);
#elif defined(Landungsbruecke)
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
    ad88:	6833      	ldr	r3, [r6, #0]
    ad8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ad8c:	68db      	ldr	r3, [r3, #12]
    ad8e:	4798      	blx	r3
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    ad90:	6a60      	ldr	r0, [r4, #36]	; 0x24
#endif
	HAL.IOs->config->set(Pins.AIN_REF_PWM);

	Timer.init();
    ad92:	4c20      	ldr	r4, [pc, #128]	; (ae14 <TMC2130_init+0x218>)
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    ad94:	2304      	movs	r3, #4
    ad96:	7543      	strb	r3, [r0, #21]
	HAL.IOs->config->set(Pins.AIN_REF_PWM);
    ad98:	6833      	ldr	r3, [r6, #0]
    ad9a:	681b      	ldr	r3, [r3, #0]
    ad9c:	4798      	blx	r3
	Timer.init();
    ad9e:	6823      	ldr	r3, [r4, #0]
    ada0:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    ada2:	2100      	movs	r1, #0
    ada4:	68a3      	ldr	r3, [r4, #8]
    ada6:	4608      	mov	r0, r1
}
    ada8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    adac:	4718      	bx	r3
    adae:	bf00      	nop
    adb0:	1fff5e88 	.word	0x1fff5e88
    adb4:	1fff5fc4 	.word	0x1fff5fc4
    adb8:	000280d8 	.word	0x000280d8
    adbc:	1fff19a0 	.word	0x1fff19a0
    adc0:	0000ab87 	.word	0x0000ab87
    adc4:	1fff6248 	.word	0x1fff6248
    adc8:	0000aac9 	.word	0x0000aac9
    adcc:	0000aabf 	.word	0x0000aabf
    add0:	00009ffb 	.word	0x00009ffb
    add4:	0000a015 	.word	0x0000a015
    add8:	0000a011 	.word	0x0000a011
    addc:	0000a00d 	.word	0x0000a00d
    ade0:	0000aab5 	.word	0x0000aab5
    ade4:	0000aaa1 	.word	0x0000aaa1
    ade8:	00009fe9 	.word	0x00009fe9
    adec:	0000aba9 	.word	0x0000aba9
    adf0:	00009fdd 	.word	0x00009fdd
    adf4:	00009f9d 	.word	0x00009f9d
    adf8:	00009fb1 	.word	0x00009fb1
    adfc:	00009ecd 	.word	0x00009ecd
    ae00:	0000ab71 	.word	0x0000ab71
    ae04:	0000ab05 	.word	0x0000ab05
    ae08:	00009e51 	.word	0x00009e51
    ae0c:	0000abc9 	.word	0x0000abc9
    ae10:	0000ab45 	.word	0x0000ab45
    ae14:	1fff0ae0 	.word	0x1fff0ae0
    ae18:	00029d1c 	.word	0x00029d1c

0000ae1c <deInit>:
	}
	return TMC_ERROR_NONE;
}

static void deInit(void)
{
    ae1c:	b538      	push	{r3, r4, r5, lr}
	HAL.IOs->config->setHigh(Pins.DRV_ENN);	// DISABLE DRIVER
    ae1e:	4b18      	ldr	r3, [pc, #96]	; (ae80 <deInit+0x64>)
    ae20:	4c18      	ldr	r4, [pc, #96]	; (ae84 <deInit+0x68>)
    ae22:	68dd      	ldr	r5, [r3, #12]
    ae24:	6820      	ldr	r0, [r4, #0]
    ae26:	682b      	ldr	r3, [r5, #0]
    ae28:	695b      	ldr	r3, [r3, #20]
    ae2a:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.REFL_STEP);
    ae2c:	682b      	ldr	r3, [r5, #0]
    ae2e:	6860      	ldr	r0, [r4, #4]
    ae30:	689b      	ldr	r3, [r3, #8]
    ae32:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFR_DIR);
    ae34:	682b      	ldr	r3, [r5, #0]
    ae36:	68a0      	ldr	r0, [r4, #8]
    ae38:	689b      	ldr	r3, [r3, #8]
    ae3a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SPI_MODE);
    ae3c:	682b      	ldr	r3, [r5, #0]
    ae3e:	68e0      	ldr	r0, [r4, #12]
    ae40:	689b      	ldr	r3, [r3, #8]
    ae42:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DCIN);
    ae44:	682b      	ldr	r3, [r5, #0]
    ae46:	6920      	ldr	r0, [r4, #16]
    ae48:	689b      	ldr	r3, [r3, #8]
    ae4a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DCEN);
    ae4c:	682b      	ldr	r3, [r5, #0]
    ae4e:	6960      	ldr	r0, [r4, #20]
    ae50:	689b      	ldr	r3, [r3, #8]
    ae52:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DCO);
    ae54:	682b      	ldr	r3, [r5, #0]
    ae56:	69a0      	ldr	r0, [r4, #24]
    ae58:	689b      	ldr	r3, [r3, #8]
    ae5a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG0);
    ae5c:	682b      	ldr	r3, [r5, #0]
    ae5e:	69e0      	ldr	r0, [r4, #28]
    ae60:	689b      	ldr	r3, [r3, #8]
    ae62:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG1);
    ae64:	682b      	ldr	r3, [r5, #0]
    ae66:	6a20      	ldr	r0, [r4, #32]
    ae68:	689b      	ldr	r3, [r3, #8]
    ae6a:	4798      	blx	r3
	//HAL.IOs->config->reset(Pins.DRV_ENN);

	StepDir_deInit();
    ae6c:	f014 ff2a 	bl	1fcc4 <StepDir_deInit>
	Timer.deInit();
    ae70:	4b05      	ldr	r3, [pc, #20]	; (ae88 <deInit+0x6c>)
    ae72:	685b      	ldr	r3, [r3, #4]
    ae74:	4798      	blx	r3
	init_state = 0;
    ae76:	2300      	movs	r3, #0
    ae78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
    ae7c:	bd38      	pop	{r3, r4, r5, pc}
    ae7e:	bf00      	nop
    ae80:	00029d1c 	.word	0x00029d1c
    ae84:	1fff19d4 	.word	0x1fff19d4
    ae88:	1fff0ae0 	.word	0x1fff0ae0

0000ae8c <readRegister>:
{
    ae8c:	b510      	push	{r4, lr}
	*value = tmc2160_readInt(motorToIC(motor), address);
    ae8e:	4803      	ldr	r0, [pc, #12]	; (ae9c <readRegister+0x10>)
{
    ae90:	4614      	mov	r4, r2
	*value = tmc2160_readInt(motorToIC(motor), address);
    ae92:	f015 fd1e 	bl	208d2 <tmc2160_readInt>
    ae96:	6020      	str	r0, [r4, #0]
}
    ae98:	bd10      	pop	{r4, pc}
    ae9a:	bf00      	nop
    ae9c:	1fff6250 	.word	0x1fff6250

0000aea0 <writeRegister>:
	tmc2160_writeInt(motorToIC(motor), address, value);
    aea0:	4801      	ldr	r0, [pc, #4]	; (aea8 <writeRegister+0x8>)
    aea2:	f015 bd08 	b.w	208b6 <tmc2160_writeInt>
    aea6:	bf00      	nop
    aea8:	1fff6250 	.word	0x1fff6250

0000aeac <moveTo>:
{
    aeac:	b510      	push	{r4, lr}
	if(motor >= TMC2160_MOTORS)
    aeae:	4604      	mov	r4, r0
    aeb0:	b918      	cbnz	r0, aeba <moveTo+0xe>
	StepDir_moveTo(motor, position);
    aeb2:	f014 fc5f 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    aeb6:	4620      	mov	r0, r4
}
    aeb8:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    aeba:	2008      	movs	r0, #8
    aebc:	e7fc      	b.n	aeb8 <moveTo+0xc>

0000aebe <rotate>:
{
    aebe:	b510      	push	{r4, lr}
	if(motor >= TMC2160_MOTORS)
    aec0:	4604      	mov	r4, r0
    aec2:	b918      	cbnz	r0, aecc <rotate+0xe>
	StepDir_rotate(motor, velocity);
    aec4:	f014 fc30 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    aec8:	4620      	mov	r0, r4
}
    aeca:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    aecc:	2008      	movs	r0, #8
    aece:	e7fc      	b.n	aeca <rotate+0xc>

0000aed0 <stop>:
	return rotate(motor, 0);
    aed0:	2100      	movs	r1, #0
    aed2:	e7f4      	b.n	aebe <rotate>

0000aed4 <left>:
	return rotate(motor, -velocity);
    aed4:	4249      	negs	r1, r1
    aed6:	e7f2      	b.n	aebe <rotate>

0000aed8 <right>:
	return rotate(motor, velocity);
    aed8:	e7f1      	b.n	aebe <rotate>

0000aeda <handleParameter>:
{
    aeda:	b570      	push	{r4, r5, r6, lr}
    aedc:	4604      	mov	r4, r0
    aede:	461d      	mov	r5, r3
	if(motor >= TMC2160_MOTORS)
    aee0:	2900      	cmp	r1, #0
    aee2:	f040 851f 	bne.w	b924 <handleParameter+0xa4a>
	switch(type)
    aee6:	2a33      	cmp	r2, #51	; 0x33
    aee8:	f200 8082 	bhi.w	aff0 <handleParameter+0x116>
    aeec:	2a33      	cmp	r2, #51	; 0x33
    aeee:	f200 851f 	bhi.w	b930 <handleParameter+0xa56>
    aef2:	e8df f012 	tbh	[pc, r2, lsl #1]
    aef6:	0085      	.short	0x0085
    aef8:	009b0090 	.word	0x009b0090
    aefc:	00c700a6 	.word	0x00c700a6
    af00:	00e000d5 	.word	0x00e000d5
    af04:	010f00f8 	.word	0x010f00f8
    af08:	051d051d 	.word	0x051d051d
    af0c:	051d051d 	.word	0x051d051d
    af10:	051d051d 	.word	0x051d051d
    af14:	051d051d 	.word	0x051d051d
    af18:	051d051d 	.word	0x051d051d
    af1c:	051d051d 	.word	0x051d051d
    af20:	051d0118 	.word	0x051d0118
    af24:	01470122 	.word	0x01470122
    af28:	0155051d 	.word	0x0155051d
    af2c:	0185016d 	.word	0x0185016d
    af30:	051d019f 	.word	0x051d019f
    af34:	051d051d 	.word	0x051d051d
    af38:	051d051d 	.word	0x051d051d
    af3c:	051d051d 	.word	0x051d051d
    af40:	051d051d 	.word	0x051d051d
    af44:	051d051d 	.word	0x051d051d
    af48:	051d051d 	.word	0x051d051d
    af4c:	051d051d 	.word	0x051d051d
    af50:	051d051d 	.word	0x051d051d
    af54:	051d051d 	.word	0x051d051d
    af58:	01b8051d 	.word	0x01b8051d
    af5c:	01c3      	.short	0x01c3
    af5e:	3a8c      	subs	r2, #140	; 0x8c
    af60:	2a42      	cmp	r2, #66	; 0x42
    af62:	f200 84e2 	bhi.w	b92a <handleParameter+0xa50>
    af66:	e8df f012 	tbh	[pc, r2, lsl #1]
    af6a:	0194      	.short	0x0194
    af6c:	04e004e0 	.word	0x04e004e0
    af70:	04e004e0 	.word	0x04e004e0
    af74:	04e004e0 	.word	0x04e004e0
    af78:	04e004e0 	.word	0x04e004e0
    af7c:	04e004e0 	.word	0x04e004e0
    af80:	04e004e0 	.word	0x04e004e0
    af84:	04e004e0 	.word	0x04e004e0
    af88:	04e004e0 	.word	0x04e004e0
    af8c:	04e004e0 	.word	0x04e004e0
    af90:	04e004e0 	.word	0x04e004e0
    af94:	01e504e0 	.word	0x01e504e0
    af98:	021501fd 	.word	0x021501fd
    af9c:	0288022d 	.word	0x0288022d
    afa0:	02e402cd 	.word	0x02e402cd
    afa4:	031302fb 	.word	0x031302fb
    afa8:	0343032b 	.word	0x0343032b
    afac:	0375035d 	.word	0x0375035d
    afb0:	04e004e0 	.word	0x04e004e0
    afb4:	04e004e0 	.word	0x04e004e0
    afb8:	03ac0394 	.word	0x03ac0394
    afbc:	03c303b7 	.word	0x03c303b7
    afc0:	03e804e0 	.word	0x03e804e0
    afc4:	04180400 	.word	0x04180400
    afc8:	0464043d 	.word	0x0464043d
    afcc:	04e004e0 	.word	0x04e004e0
    afd0:	0499047a 	.word	0x0499047a
    afd4:	04e004e0 	.word	0x04e004e0
    afd8:	04e004e0 	.word	0x04e004e0
    afdc:	04e004e0 	.word	0x04e004e0
    afe0:	04e004e0 	.word	0x04e004e0
    afe4:	04e004e0 	.word	0x04e004e0
    afe8:	04b404e0 	.word	0x04b404e0
    afec:	04d304e0 	.word	0x04d304e0
    aff0:	f102 0374 	add.w	r3, r2, #116	; 0x74
    aff4:	b2db      	uxtb	r3, r3
    aff6:	2b42      	cmp	r3, #66	; 0x42
    aff8:	d9b1      	bls.n	af5e <handleParameter+0x84>
    affa:	2404      	movs	r4, #4
}
    affc:	4620      	mov	r0, r4
    affe:	bd70      	pop	{r4, r5, r6, pc}
		if(readWrite == READ) {
    b000:	b918      	cbnz	r0, b00a <handleParameter+0x130>
			*value = StepDir_getTargetPosition(motor);
    b002:	f014 fd49 	bl	1fa98 <StepDir_getTargetPosition>
    b006:	6028      	str	r0, [r5, #0]
    b008:	e7f8      	b.n	affc <handleParameter+0x122>
			StepDir_moveTo(motor, *value);
    b00a:	6829      	ldr	r1, [r5, #0]
    b00c:	2000      	movs	r0, #0
    b00e:	f014 fbb1 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    b012:	2400      	movs	r4, #0
    b014:	e7f2      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b016:	b918      	cbnz	r0, b020 <handleParameter+0x146>
			*value = StepDir_getActualPosition(motor);
    b018:	f014 fd2e 	bl	1fa78 <StepDir_getActualPosition>
    b01c:	6028      	str	r0, [r5, #0]
    b01e:	e7ed      	b.n	affc <handleParameter+0x122>
			StepDir_setActualPosition(motor, *value);
    b020:	6829      	ldr	r1, [r5, #0]
    b022:	2000      	movs	r0, #0
    b024:	f014 fcc8 	bl	1f9b8 <StepDir_setActualPosition>
	uint32_t errors = TMC_ERROR_NONE;
    b028:	2400      	movs	r4, #0
    b02a:	e7e7      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b02c:	b918      	cbnz	r0, b036 <handleParameter+0x15c>
			*value = StepDir_getTargetVelocity(motor);
    b02e:	f014 fd53 	bl	1fad8 <StepDir_getTargetVelocity>
    b032:	6028      	str	r0, [r5, #0]
    b034:	e7e2      	b.n	affc <handleParameter+0x122>
			StepDir_rotate(motor, *value);
    b036:	6829      	ldr	r1, [r5, #0]
    b038:	2000      	movs	r0, #0
    b03a:	f014 fb75 	bl	1f728 <StepDir_rotate>
	uint32_t errors = TMC_ERROR_NONE;
    b03e:	2400      	movs	r4, #0
    b040:	e7dc      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b042:	2800      	cmp	r0, #0
    b044:	f040 8477 	bne.w	b936 <handleParameter+0xa5c>
			switch(StepDir_getMode(motor)) {
    b048:	f014 fd84 	bl	1fb54 <StepDir_getMode>
    b04c:	b918      	cbnz	r0, b056 <handleParameter+0x17c>
				*value = StepDir_getActualVelocity(motor);
    b04e:	f014 fd33 	bl	1fab8 <StepDir_getActualVelocity>
    b052:	6028      	str	r0, [r5, #0]
				break;
    b054:	e7d2      	b.n	affc <handleParameter+0x122>
				tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_FIELD_READ(motorToIC(motor), TMC2160_TSTEP, TMC2160_TSTEP_MASK, TMC2160_TSTEP_SHIFT));
    b056:	4620      	mov	r0, r4
    b058:	f014 fd8a 	bl	1fb70 <StepDir_getFrequency>
    b05c:	2112      	movs	r1, #18
    b05e:	4606      	mov	r6, r0
    b060:	48ad      	ldr	r0, [pc, #692]	; (b318 <handleParameter+0x43e>)
    b062:	f015 fc36 	bl	208d2 <tmc2160_readInt>
    b066:	f3c0 0213 	ubfx	r2, r0, #0, #20
    b06a:	207a      	movs	r0, #122	; 0x7a
    b06c:	17d3      	asrs	r3, r2, #31
    b06e:	fba6 0100 	umull	r0, r1, r6, r0
    b072:	f01c fc37 	bl	278e4 <__aeabi_ldivmod>
				*value = (abs(tempValue) < 20) ? 0 : tempValue;
    b076:	f100 0313 	add.w	r3, r0, #19
    b07a:	2b26      	cmp	r3, #38	; 0x26
    b07c:	bf98      	it	ls
    b07e:	2000      	movls	r0, #0
    b080:	6028      	str	r0, [r5, #0]
				break;
    b082:	e7bb      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b084:	b918      	cbnz	r0, b08e <handleParameter+0x1b4>
			*value = StepDir_getVelocityMax(motor);
    b086:	f014 fd47 	bl	1fb18 <StepDir_getVelocityMax>
    b08a:	6028      	str	r0, [r5, #0]
    b08c:	e7b6      	b.n	affc <handleParameter+0x122>
			StepDir_setVelocityMax(motor, abs(*value));
    b08e:	6829      	ldr	r1, [r5, #0]
    b090:	2900      	cmp	r1, #0
    b092:	bfb8      	it	lt
    b094:	4249      	neglt	r1, r1
    b096:	2000      	movs	r0, #0
    b098:	f014 fcaa 	bl	1f9f0 <StepDir_setVelocityMax>
	uint32_t errors = TMC_ERROR_NONE;
    b09c:	2400      	movs	r4, #0
    b09e:	e7ad      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b0a0:	b918      	cbnz	r0, b0aa <handleParameter+0x1d0>
			*value = StepDir_getAcceleration(motor);
    b0a2:	f014 fd29 	bl	1faf8 <StepDir_getAcceleration>
    b0a6:	6028      	str	r0, [r5, #0]
    b0a8:	e7a8      	b.n	affc <handleParameter+0x122>
			StepDir_setAcceleration(motor, *value);
    b0aa:	6829      	ldr	r1, [r5, #0]
    b0ac:	2000      	movs	r0, #0
    b0ae:	f014 fe51 	bl	1fd54 <StepDir_setAcceleration>
	uint32_t errors = TMC_ERROR_NONE;
    b0b2:	2400      	movs	r4, #0
    b0b4:	e7a2      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRUN_SHIFT);
    b0b6:	4898      	ldr	r0, [pc, #608]	; (b318 <handleParameter+0x43e>)
    b0b8:	2110      	movs	r1, #16
		if(readWrite == READ) {
    b0ba:	b92c      	cbnz	r4, b0c8 <handleParameter+0x1ee>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRUN_SHIFT);
    b0bc:	f015 fc09 	bl	208d2 <tmc2160_readInt>
    b0c0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    b0c4:	6028      	str	r0, [r5, #0]
    b0c6:	e799      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IRUN_MASK, TMC2160_IRUN_SHIFT, *value);
    b0c8:	f015 fc03 	bl	208d2 <tmc2160_readInt>
    b0cc:	682b      	ldr	r3, [r5, #0]
    b0ce:	021b      	lsls	r3, r3, #8
    b0d0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    b0d4:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
    b0d8:	431a      	orrs	r2, r3
    b0da:	488f      	ldr	r0, [pc, #572]	; (b318 <handleParameter+0x43e>)
    b0dc:	2110      	movs	r1, #16
    b0de:	f015 fbea 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b0e2:	2400      	movs	r4, #0
    b0e4:	e78a      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT);
    b0e6:	488c      	ldr	r0, [pc, #560]	; (b318 <handleParameter+0x43e>)
    b0e8:	2110      	movs	r1, #16
		if(readWrite == READ) {
    b0ea:	b92c      	cbnz	r4, b0f8 <handleParameter+0x21e>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT);
    b0ec:	f015 fbf1 	bl	208d2 <tmc2160_readInt>
    b0f0:	f000 001f 	and.w	r0, r0, #31
    b0f4:	6028      	str	r0, [r5, #0]
    b0f6:	e781      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT, *value);
    b0f8:	f015 fbeb 	bl	208d2 <tmc2160_readInt>
    b0fc:	682a      	ldr	r2, [r5, #0]
    b0fe:	f020 001f 	bic.w	r0, r0, #31
    b102:	f002 021f 	and.w	r2, r2, #31
    b106:	4302      	orrs	r2, r0
    b108:	2110      	movs	r1, #16
    b10a:	4883      	ldr	r0, [pc, #524]	; (b318 <handleParameter+0x43e>)
    b10c:	f015 fbd3 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b110:	2400      	movs	r4, #0
    b112:	e773      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b114:	2800      	cmp	r0, #0
    b116:	f040 8411 	bne.w	b93c <handleParameter+0xa62>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    b11a:	f014 fb89 	bl	1f830 <StepDir_getStatus>
    b11e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    b122:	6028      	str	r0, [r5, #0]
    b124:	e76a      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b126:	2800      	cmp	r0, #0
    b128:	f000 840b 	beq.w	b942 <handleParameter+0xa68>
			tmc2160_writeInt(motorToIC(motor), TMC2160_TPOWERDOWN, *value);
    b12c:	682a      	ldr	r2, [r5, #0]
    b12e:	487a      	ldr	r0, [pc, #488]	; (b318 <handleParameter+0x43e>)
    b130:	2111      	movs	r1, #17
    b132:	f015 fbc0 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b136:	2400      	movs	r4, #0
    b138:	e760      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b13a:	b980      	cbnz	r0, b15e <handleParameter+0x284>
			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_THIGH);
    b13c:	4876      	ldr	r0, [pc, #472]	; (b318 <handleParameter+0x43e>)
    b13e:	2115      	movs	r1, #21
    b140:	f015 fbc7 	bl	208d2 <tmc2160_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    b144:	2800      	cmp	r0, #0
    b146:	bf08      	it	eq
    b148:	2001      	moveq	r0, #1
    b14a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b14e:	fb93 f0f0 	sdiv	r0, r3, r0
    b152:	4b72      	ldr	r3, [pc, #456]	; (b31c <handleParameter+0x442>)
    b154:	4298      	cmp	r0, r3
    b156:	bfd4      	ite	le
    b158:	6028      	strle	r0, [r5, #0]
    b15a:	602b      	strgt	r3, [r5, #0]
    b15c:	e74e      	b.n	affc <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b15e:	682b      	ldr	r3, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
    b160:	486d      	ldr	r0, [pc, #436]	; (b318 <handleParameter+0x43e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b162:	2b00      	cmp	r3, #0
    b164:	bf08      	it	eq
    b166:	2301      	moveq	r3, #1
    b168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b16c:	fb92 f2f3 	sdiv	r2, r2, r3
    b170:	4b6a      	ldr	r3, [pc, #424]	; (b31c <handleParameter+0x442>)
    b172:	429a      	cmp	r2, r3
    b174:	bfa8      	it	ge
    b176:	461a      	movge	r2, r3
    b178:	602a      	str	r2, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_THIGH, *value);
    b17a:	2115      	movs	r1, #21
    b17c:	f015 fb9b 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b180:	2400      	movs	r4, #0
    b182:	e73b      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b184:	b928      	cbnz	r0, b192 <handleParameter+0x2b8>
			*value = tmc2160_readInt(motorToIC(motor), TMC2160_VDCMIN);
    b186:	4864      	ldr	r0, [pc, #400]	; (b318 <handleParameter+0x43e>)
    b188:	2133      	movs	r1, #51	; 0x33
    b18a:	f015 fba2 	bl	208d2 <tmc2160_readInt>
    b18e:	6028      	str	r0, [r5, #0]
    b190:	e734      	b.n	affc <handleParameter+0x122>
			tmc2160_writeInt(motorToIC(motor), TMC2160_VDCMIN, *value);
    b192:	682a      	ldr	r2, [r5, #0]
    b194:	4860      	ldr	r0, [pc, #384]	; (b318 <handleParameter+0x43e>)
    b196:	2133      	movs	r1, #51	; 0x33
    b198:	f015 fb8d 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b19c:	2400      	movs	r4, #0
    b19e:	e72d      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VHIGHFS_SHIFT);
    b1a0:	485d      	ldr	r0, [pc, #372]	; (b318 <handleParameter+0x43e>)
    b1a2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b1a4:	b92c      	cbnz	r4, b1b2 <handleParameter+0x2d8>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VHIGHFS_SHIFT);
    b1a6:	f015 fb94 	bl	208d2 <tmc2160_readInt>
    b1aa:	f3c0 4080 	ubfx	r0, r0, #18, #1
    b1ae:	6028      	str	r0, [r5, #0]
    b1b0:	e724      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHFS_MASK, TMC2160_VHIGHFS_SHIFT, *value);
    b1b2:	f015 fb8e 	bl	208d2 <tmc2160_readInt>
    b1b6:	682b      	ldr	r3, [r5, #0]
    b1b8:	049b      	lsls	r3, r3, #18
    b1ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    b1be:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    b1c2:	431a      	orrs	r2, r3
    b1c4:	4854      	ldr	r0, [pc, #336]	; (b318 <handleParameter+0x43e>)
    b1c6:	216c      	movs	r1, #108	; 0x6c
    b1c8:	f015 fb75 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b1cc:	2400      	movs	r4, #0
    b1ce:	e715      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_VHIGHCHM_SHIFT);
    b1d0:	4851      	ldr	r0, [pc, #324]	; (b318 <handleParameter+0x43e>)
    b1d2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b1d4:	b92c      	cbnz	r4, b1e2 <handleParameter+0x308>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_VHIGHCHM_SHIFT);
    b1d6:	f015 fb7c 	bl	208d2 <tmc2160_readInt>
    b1da:	f3c0 40c0 	ubfx	r0, r0, #19, #1
    b1de:	6028      	str	r0, [r5, #0]
    b1e0:	e70c      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VHIGHCHM_MASK, TMC2160_VHIGHCHM_SHIFT, *value);
    b1e2:	f015 fb76 	bl	208d2 <tmc2160_readInt>
    b1e6:	682b      	ldr	r3, [r5, #0]
    b1e8:	04db      	lsls	r3, r3, #19
    b1ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    b1ee:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
    b1f2:	431a      	orrs	r2, r3
    b1f4:	4848      	ldr	r0, [pc, #288]	; (b318 <handleParameter+0x43e>)
    b1f6:	216c      	movs	r1, #108	; 0x6c
    b1f8:	f015 fb5d 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b1fc:	2400      	movs	r4, #0
    b1fe:	e6fd      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b200:	b938      	cbnz	r0, b212 <handleParameter+0x338>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC2160_INTERNAL_RSENSE_SHIFT);
    b202:	4601      	mov	r1, r0
    b204:	4844      	ldr	r0, [pc, #272]	; (b318 <handleParameter+0x43e>)
    b206:	f015 fb64 	bl	208d2 <tmc2160_readInt>
    b20a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b20e:	6028      	str	r0, [r5, #0]
    b210:	e6f4      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_GCONF, TMC2160_INTERNAL_RSENSE_MASK, TMC2160_INTERNAL_RSENSE_SHIFT, *value);
    b212:	2100      	movs	r1, #0
    b214:	4840      	ldr	r0, [pc, #256]	; (b318 <handleParameter+0x43e>)
    b216:	f015 fb5c 	bl	208d2 <tmc2160_readInt>
    b21a:	682b      	ldr	r3, [r5, #0]
    b21c:	005b      	lsls	r3, r3, #1
    b21e:	f003 0302 	and.w	r3, r3, #2
    b222:	f020 0202 	bic.w	r2, r0, #2
    b226:	431a      	orrs	r2, r3
    b228:	483b      	ldr	r0, [pc, #236]	; (b318 <handleParameter+0x43e>)
    b22a:	2100      	movs	r1, #0
    b22c:	f015 fb43 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b230:	2400      	movs	r4, #0
    b232:	e6e3      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b234:	2800      	cmp	r0, #0
    b236:	f040 8387 	bne.w	b948 <handleParameter+0xa6e>
			tempValue = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2160_FIELD_READ(motorToIC(motor), TMC2160_TSTEP, TMC2160_TSTEP_MASK, TMC2160_TSTEP_SHIFT));
    b23a:	f014 fc99 	bl	1fb70 <StepDir_getFrequency>
    b23e:	2112      	movs	r1, #18
    b240:	4606      	mov	r6, r0
    b242:	4835      	ldr	r0, [pc, #212]	; (b318 <handleParameter+0x43e>)
    b244:	f015 fb45 	bl	208d2 <tmc2160_readInt>
    b248:	f3c0 0213 	ubfx	r2, r0, #0, #20
    b24c:	207a      	movs	r0, #122	; 0x7a
    b24e:	17d3      	asrs	r3, r2, #31
    b250:	fba6 0100 	umull	r0, r1, r6, r0
    b254:	f01c fb46 	bl	278e4 <__aeabi_ldivmod>
			*value = (abs(tempValue) < 20) ? 0 : tempValue;
    b258:	f100 0313 	add.w	r3, r0, #19
    b25c:	2b26      	cmp	r3, #38	; 0x26
    b25e:	bf98      	it	ls
    b260:	2000      	movls	r0, #0
    b262:	6028      	str	r0, [r5, #0]
    b264:	e6ca      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b266:	b918      	cbnz	r0, b270 <handleParameter+0x396>
			*value = StepDir_getMode(motor);
    b268:	f014 fc74 	bl	1fb54 <StepDir_getMode>
    b26c:	6028      	str	r0, [r5, #0]
    b26e:	e6c5      	b.n	affc <handleParameter+0x122>
			StepDir_setMode(motor, *value);
    b270:	7829      	ldrb	r1, [r5, #0]
    b272:	2000      	movs	r0, #0
    b274:	f014 fbd8 	bl	1fa28 <StepDir_setMode>
	uint32_t errors = TMC_ERROR_NONE;
    b278:	2400      	movs	r4, #0
    b27a:	e6bf      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b27c:	b918      	cbnz	r0, b286 <handleParameter+0x3ac>
			*value = StepDir_getFrequency(motor);
    b27e:	f014 fc77 	bl	1fb70 <StepDir_getFrequency>
    b282:	6028      	str	r0, [r5, #0]
    b284:	e6ba      	b.n	affc <handleParameter+0x122>
			StepDir_setFrequency(motor, *value);
    b286:	6829      	ldr	r1, [r5, #0]
    b288:	2000      	movs	r0, #0
    b28a:	f014 fbdd 	bl	1fa48 <StepDir_setFrequency>
	uint32_t errors = TMC_ERROR_NONE;
    b28e:	2400      	movs	r4, #0
    b290:	e6b4      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b292:	b954      	cbnz	r4, b2aa <handleParameter+0x3d0>
			*value = 256 >> TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC2160_MRES_SHIFT);
    b294:	4820      	ldr	r0, [pc, #128]	; (b318 <handleParameter+0x43e>)
    b296:	216c      	movs	r1, #108	; 0x6c
    b298:	f015 fb1b 	bl	208d2 <tmc2160_readInt>
    b29c:	f3c0 6303 	ubfx	r3, r0, #24, #4
    b2a0:	f44f 7080 	mov.w	r0, #256	; 0x100
    b2a4:	4118      	asrs	r0, r3
    b2a6:	6028      	str	r0, [r5, #0]
    b2a8:	e6a8      	b.n	affc <handleParameter+0x122>
			switch(*value)
    b2aa:	682b      	ldr	r3, [r5, #0]
    b2ac:	2b10      	cmp	r3, #16
    b2ae:	d039      	beq.n	b324 <handleParameter+0x44a>
    b2b0:	dc0a      	bgt.n	b2c8 <handleParameter+0x3ee>
    b2b2:	3b01      	subs	r3, #1
    b2b4:	2b07      	cmp	r3, #7
    b2b6:	d80e      	bhi.n	b2d6 <handleParameter+0x3fc>
    b2b8:	2b07      	cmp	r3, #7
    b2ba:	d80c      	bhi.n	b2d6 <handleParameter+0x3fc>
    b2bc:	e8df f003 	tbb	[pc, r3]
    b2c0:	2a0b2815 	.word	0x2a0b2815
    b2c4:	300b0b0b 	.word	0x300b0b0b
    b2c8:	2b80      	cmp	r3, #128	; 0x80
    b2ca:	d031      	beq.n	b330 <handleParameter+0x456>
    b2cc:	dc08      	bgt.n	b2e0 <handleParameter+0x406>
    b2ce:	2b20      	cmp	r3, #32
    b2d0:	d02a      	beq.n	b328 <handleParameter+0x44e>
    b2d2:	2b40      	cmp	r3, #64	; 0x40
    b2d4:	d02a      	beq.n	b32c <handleParameter+0x452>
			default:   *value = -1;  break;
    b2d6:	f04f 33ff 	mov.w	r3, #4294967295
    b2da:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    b2dc:	2410      	movs	r4, #16
    b2de:	e68d      	b.n	affc <handleParameter+0x122>
    b2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    b2e4:	d1f7      	bne.n	b2d6 <handleParameter+0x3fc>
			case 256:  *value = 0;   break;
    b2e6:	2300      	movs	r3, #0
    b2e8:	e000      	b.n	b2ec <handleParameter+0x412>
			case 1:    *value = 8;   break;
    b2ea:	2308      	movs	r3, #8
			case 256:  *value = 0;   break;
    b2ec:	602b      	str	r3, [r5, #0]
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_MRES_MASK, TMC2160_MRES_SHIFT, *value);
    b2ee:	216c      	movs	r1, #108	; 0x6c
    b2f0:	4809      	ldr	r0, [pc, #36]	; (b318 <handleParameter+0x43e>)
    b2f2:	f015 faee 	bl	208d2 <tmc2160_readInt>
    b2f6:	682b      	ldr	r3, [r5, #0]
    b2f8:	061b      	lsls	r3, r3, #24
    b2fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    b2fe:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
    b302:	431a      	orrs	r2, r3
    b304:	4804      	ldr	r0, [pc, #16]	; (b318 <handleParameter+0x43e>)
    b306:	216c      	movs	r1, #108	; 0x6c
    b308:	f015 fad5 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b30c:	2400      	movs	r4, #0
    b30e:	e675      	b.n	affc <handleParameter+0x122>
			case 2:    *value = 7;   break;
    b310:	2307      	movs	r3, #7
    b312:	e7eb      	b.n	b2ec <handleParameter+0x412>
			case 4:    *value = 6;   break;
    b314:	2306      	movs	r3, #6
    b316:	e7e9      	b.n	b2ec <handleParameter+0x412>
    b318:	1fff6250 	.word	0x1fff6250
    b31c:	000fffff 	.word	0x000fffff
			case 8:    *value = 5;   break;
    b320:	2305      	movs	r3, #5
    b322:	e7e3      	b.n	b2ec <handleParameter+0x412>
			case 16:   *value = 4;   break;
    b324:	2304      	movs	r3, #4
    b326:	e7e1      	b.n	b2ec <handleParameter+0x412>
			case 32:   *value = 3;   break;
    b328:	2303      	movs	r3, #3
    b32a:	e7df      	b.n	b2ec <handleParameter+0x412>
			case 64:   *value = 2;   break;
    b32c:	2302      	movs	r3, #2
    b32e:	e7dd      	b.n	b2ec <handleParameter+0x412>
			case 128:  *value = 1;   break;
    b330:	2301      	movs	r3, #1
    b332:	e7db      	b.n	b2ec <handleParameter+0x412>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SHIFT);
    b334:	48ba      	ldr	r0, [pc, #744]	; (b620 <handleParameter+0x746>)
    b336:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b338:	b92c      	cbnz	r4, b346 <handleParameter+0x46c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SHIFT);
    b33a:	f015 faca 	bl	208d2 <tmc2160_readInt>
    b33e:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    b342:	6028      	str	r0, [r5, #0]
    b344:	e65a      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TBL_MASK, TMC2160_TBL_SHIFT, *value);
    b346:	f015 fac4 	bl	208d2 <tmc2160_readInt>
    b34a:	682b      	ldr	r3, [r5, #0]
    b34c:	03db      	lsls	r3, r3, #15
    b34e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    b352:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
    b356:	431a      	orrs	r2, r3
    b358:	48b1      	ldr	r0, [pc, #708]	; (b620 <handleParameter+0x746>)
    b35a:	216c      	movs	r1, #108	; 0x6c
    b35c:	f015 faab 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b360:	2400      	movs	r4, #0
    b362:	e64b      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SHIFT);
    b364:	48ae      	ldr	r0, [pc, #696]	; (b620 <handleParameter+0x746>)
    b366:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b368:	b92c      	cbnz	r4, b376 <handleParameter+0x49c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SHIFT);
    b36a:	f015 fab2 	bl	208d2 <tmc2160_readInt>
    b36e:	f3c0 3080 	ubfx	r0, r0, #14, #1
    b372:	6028      	str	r0, [r5, #0]
    b374:	e642      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_CHM_MASK, TMC2160_CHM_SHIFT, *value);
    b376:	f015 faac 	bl	208d2 <tmc2160_readInt>
    b37a:	682b      	ldr	r3, [r5, #0]
    b37c:	039b      	lsls	r3, r3, #14
    b37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b382:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
    b386:	431a      	orrs	r2, r3
    b388:	48a5      	ldr	r0, [pc, #660]	; (b620 <handleParameter+0x746>)
    b38a:	216c      	movs	r1, #108	; 0x6c
    b38c:	f015 fa93 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b390:	2400      	movs	r4, #0
    b392:	e633      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DISFDCC_SHIFT);
    b394:	48a2      	ldr	r0, [pc, #648]	; (b620 <handleParameter+0x746>)
    b396:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b398:	b92c      	cbnz	r4, b3a6 <handleParameter+0x4cc>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DISFDCC_SHIFT);
    b39a:	f015 fa9a 	bl	208d2 <tmc2160_readInt>
    b39e:	f3c0 3000 	ubfx	r0, r0, #12, #1
    b3a2:	6028      	str	r0, [r5, #0]
    b3a4:	e62a      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_DISFDCC_MASK, TMC2160_DISFDCC_SHIFT, *value);
    b3a6:	f015 fa94 	bl	208d2 <tmc2160_readInt>
    b3aa:	682b      	ldr	r3, [r5, #0]
    b3ac:	031b      	lsls	r3, r3, #12
    b3ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    b3b2:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
    b3b6:	431a      	orrs	r2, r3
    b3b8:	4899      	ldr	r0, [pc, #612]	; (b620 <handleParameter+0x746>)
    b3ba:	216c      	movs	r1, #108	; 0x6c
    b3bc:	f015 fa7b 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b3c0:	2400      	movs	r4, #0
    b3c2:	e61b      	b.n	affc <handleParameter+0x122>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b3c4:	4896      	ldr	r0, [pc, #600]	; (b620 <handleParameter+0x746>)
    b3c6:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b3c8:	b9fc      	cbnz	r4, b40a <handleParameter+0x530>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b3ca:	f015 fa82 	bl	208d2 <tmc2160_readInt>
    b3ce:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND_SHIFT);
    b3d2:	f04f 016c 	mov.w	r1, #108	; 0x6c
    b3d6:	4892      	ldr	r0, [pc, #584]	; (b620 <handleParameter+0x746>)
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b3d8:	d005      	beq.n	b3e6 <handleParameter+0x50c>
				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND_SHIFT);
    b3da:	f015 fa7a 	bl	208d2 <tmc2160_readInt>
    b3de:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    b3e2:	6028      	str	r0, [r5, #0]
    b3e4:	e60a      	b.n	affc <handleParameter+0x122>
				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
    b3e6:	f015 fa74 	bl	208d2 <tmc2160_readInt>
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
    b3ea:	216c      	movs	r1, #108	; 0x6c
				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
    b3ec:	4606      	mov	r6, r0
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
    b3ee:	488c      	ldr	r0, [pc, #560]	; (b620 <handleParameter+0x746>)
    b3f0:	f015 fa6f 	bl	208d2 <tmc2160_readInt>
				if(tempValue & (1<<11))
    b3f4:	0531      	lsls	r1, r6, #20
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
    b3f6:	f3c0 1302 	ubfx	r3, r0, #4, #3
				if(tempValue & (1<<11))
    b3fa:	d402      	bmi.n	b402 <handleParameter+0x528>
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 4) & 0x07;
    b3fc:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
    b3fe:	2400      	movs	r4, #0
    b400:	e5fc      	b.n	affc <handleParameter+0x122>
					*value |= 1<<3;
    b402:	f043 0308 	orr.w	r3, r3, #8
    b406:	602b      	str	r3, [r5, #0]
    b408:	e5f8      	b.n	affc <handleParameter+0x122>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b40a:	f015 fa62 	bl	208d2 <tmc2160_readInt>
    b40e:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND_SHIFT, *value);
    b412:	f04f 016c 	mov.w	r1, #108	; 0x6c
    b416:	4882      	ldr	r0, [pc, #520]	; (b620 <handleParameter+0x746>)
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b418:	d00e      	beq.n	b438 <handleParameter+0x55e>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HEND_MASK, TMC2160_HEND_SHIFT, *value);
    b41a:	f015 fa5a 	bl	208d2 <tmc2160_readInt>
    b41e:	682b      	ldr	r3, [r5, #0]
    b420:	01db      	lsls	r3, r3, #7
    b422:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    b426:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    b42a:	431a      	orrs	r2, r3
    b42c:	487c      	ldr	r0, [pc, #496]	; (b620 <handleParameter+0x746>)
    b42e:	216c      	movs	r1, #108	; 0x6c
    b430:	f015 fa41 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b434:	2400      	movs	r4, #0
    b436:	e5e1      	b.n	affc <handleParameter+0x122>
				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
    b438:	f015 fa4b 	bl	208d2 <tmc2160_readInt>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_3_MASK, TMC2160_TFD_3_SHIFT, (*value & (1<<3))? 1:0);
    b43c:	216c      	movs	r1, #108	; 0x6c
    b43e:	4878      	ldr	r0, [pc, #480]	; (b620 <handleParameter+0x746>)
    b440:	f015 fa47 	bl	208d2 <tmc2160_readInt>
    b444:	682b      	ldr	r3, [r5, #0]
    b446:	021b      	lsls	r3, r3, #8
    b448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b44c:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
    b450:	431a      	orrs	r2, r3
    b452:	4873      	ldr	r0, [pc, #460]	; (b620 <handleParameter+0x746>)
    b454:	216c      	movs	r1, #108	; 0x6c
    b456:	f015 fa2e 	bl	208b6 <tmc2160_writeInt>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TFD_ALL_MASK, TMC2160_TFD_ALL_SHIFT, *value);
    b45a:	216c      	movs	r1, #108	; 0x6c
    b45c:	4870      	ldr	r0, [pc, #448]	; (b620 <handleParameter+0x746>)
    b45e:	f015 fa38 	bl	208d2 <tmc2160_readInt>
    b462:	682b      	ldr	r3, [r5, #0]
    b464:	011b      	lsls	r3, r3, #4
    b466:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b46a:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    b46e:	431a      	orrs	r2, r3
    b470:	486b      	ldr	r0, [pc, #428]	; (b620 <handleParameter+0x746>)
    b472:	216c      	movs	r1, #108	; 0x6c
    b474:	f015 fa1f 	bl	208b6 <tmc2160_writeInt>
    b478:	e5c0      	b.n	affc <handleParameter+0x122>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b47a:	4869      	ldr	r0, [pc, #420]	; (b620 <handleParameter+0x746>)
    b47c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b47e:	b9e4      	cbnz	r4, b4ba <handleParameter+0x5e0>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b480:	f015 fa27 	bl	208d2 <tmc2160_readInt>
    b484:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HSTRT_SHIFT);
    b488:	f04f 016c 	mov.w	r1, #108	; 0x6c
    b48c:	4864      	ldr	r0, [pc, #400]	; (b620 <handleParameter+0x746>)
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b48e:	d005      	beq.n	b49c <handleParameter+0x5c2>
				*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HSTRT_SHIFT);
    b490:	f015 fa1f 	bl	208d2 <tmc2160_readInt>
    b494:	f3c0 1002 	ubfx	r0, r0, #4, #3
    b498:	6028      	str	r0, [r5, #0]
    b49a:	e5af      	b.n	affc <handleParameter+0x122>
				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
    b49c:	f015 fa19 	bl	208d2 <tmc2160_readInt>
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
    b4a0:	216c      	movs	r1, #108	; 0x6c
				tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF);
    b4a2:	4606      	mov	r6, r0
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
    b4a4:	485e      	ldr	r0, [pc, #376]	; (b620 <handleParameter+0x746>)
    b4a6:	f015 fa14 	bl	208d2 <tmc2160_readInt>
				if(tempValue & (1<<11))
    b4aa:	0532      	lsls	r2, r6, #20
				*value = (tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) >> 7) & 0x0F;
    b4ac:	f3c0 13c3 	ubfx	r3, r0, #7, #4
				if(tempValue & (1<<11))
    b4b0:	d5a4      	bpl.n	b3fc <handleParameter+0x522>
					*value |= 1<<3;
    b4b2:	f043 0308 	orr.w	r3, r3, #8
    b4b6:	602b      	str	r3, [r5, #0]
    b4b8:	e5a0      	b.n	affc <handleParameter+0x122>
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b4ba:	f015 fa0a 	bl	208d2 <tmc2160_readInt>
    b4be:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HSTRT_SHIFT, *value);
    b4c2:	f04f 016c 	mov.w	r1, #108	; 0x6c
    b4c6:	4856      	ldr	r0, [pc, #344]	; (b620 <handleParameter+0x746>)
			if(tmc2160_readInt(motorToIC(motor), TMC2160_CHOPCONF) & (1<<14))
    b4c8:	d00e      	beq.n	b4e8 <handleParameter+0x60e>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_HSTRT_MASK, TMC2160_HSTRT_SHIFT, *value);
    b4ca:	f015 fa02 	bl	208d2 <tmc2160_readInt>
    b4ce:	682b      	ldr	r3, [r5, #0]
    b4d0:	011b      	lsls	r3, r3, #4
    b4d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
    b4d6:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    b4da:	431a      	orrs	r2, r3
    b4dc:	4850      	ldr	r0, [pc, #320]	; (b620 <handleParameter+0x746>)
    b4de:	216c      	movs	r1, #108	; 0x6c
    b4e0:	f015 f9e9 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b4e4:	2400      	movs	r4, #0
    b4e6:	e589      	b.n	affc <handleParameter+0x122>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_OFFSET_MASK, TMC2160_OFFSET_SHIFT, *value);
    b4e8:	f015 f9f3 	bl	208d2 <tmc2160_readInt>
    b4ec:	682b      	ldr	r3, [r5, #0]
    b4ee:	01db      	lsls	r3, r3, #7
    b4f0:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    b4f4:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    b4f8:	431a      	orrs	r2, r3
    b4fa:	4849      	ldr	r0, [pc, #292]	; (b620 <handleParameter+0x746>)
    b4fc:	216c      	movs	r1, #108	; 0x6c
    b4fe:	f015 f9da 	bl	208b6 <tmc2160_writeInt>
    b502:	e57b      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_SHIFT);
    b504:	4846      	ldr	r0, [pc, #280]	; (b620 <handleParameter+0x746>)
    b506:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b508:	b92c      	cbnz	r4, b516 <handleParameter+0x63c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_SHIFT);
    b50a:	f015 f9e2 	bl	208d2 <tmc2160_readInt>
    b50e:	f000 000f 	and.w	r0, r0, #15
    b512:	6028      	str	r0, [r5, #0]
    b514:	e572      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_TOFF_MASK, TMC2160_TOFF_SHIFT, *value);
    b516:	f015 f9dc 	bl	208d2 <tmc2160_readInt>
    b51a:	682a      	ldr	r2, [r5, #0]
    b51c:	f020 000f 	bic.w	r0, r0, #15
    b520:	f002 020f 	and.w	r2, r2, #15
    b524:	4302      	orrs	r2, r0
    b526:	216c      	movs	r1, #108	; 0x6c
    b528:	483d      	ldr	r0, [pc, #244]	; (b620 <handleParameter+0x746>)
    b52a:	f015 f9c4 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b52e:	2400      	movs	r4, #0
    b530:	e564      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEIMIN_SHIFT);
    b532:	483b      	ldr	r0, [pc, #236]	; (b620 <handleParameter+0x746>)
    b534:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b536:	b92c      	cbnz	r4, b544 <handleParameter+0x66a>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEIMIN_SHIFT);
    b538:	f015 f9cb 	bl	208d2 <tmc2160_readInt>
    b53c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    b540:	6028      	str	r0, [r5, #0]
    b542:	e55b      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEIMIN_MASK, TMC2160_SEIMIN_SHIFT, *value);
    b544:	f015 f9c5 	bl	208d2 <tmc2160_readInt>
    b548:	682b      	ldr	r3, [r5, #0]
    b54a:	03db      	lsls	r3, r3, #15
    b54c:	b29b      	uxth	r3, r3
    b54e:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    b552:	431a      	orrs	r2, r3
    b554:	4832      	ldr	r0, [pc, #200]	; (b620 <handleParameter+0x746>)
    b556:	216d      	movs	r1, #109	; 0x6d
    b558:	f015 f9ad 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b55c:	2400      	movs	r4, #0
    b55e:	e54d      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_SHIFT);
    b560:	482f      	ldr	r0, [pc, #188]	; (b620 <handleParameter+0x746>)
    b562:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b564:	b92c      	cbnz	r4, b572 <handleParameter+0x698>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_SHIFT);
    b566:	f015 f9b4 	bl	208d2 <tmc2160_readInt>
    b56a:	f3c0 3041 	ubfx	r0, r0, #13, #2
    b56e:	6028      	str	r0, [r5, #0]
    b570:	e544      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEDN_MASK, TMC2160_SEDN_SHIFT, *value);
    b572:	f015 f9ae 	bl	208d2 <tmc2160_readInt>
    b576:	682b      	ldr	r3, [r5, #0]
    b578:	035b      	lsls	r3, r3, #13
    b57a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    b57e:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
    b582:	431a      	orrs	r2, r3
    b584:	4826      	ldr	r0, [pc, #152]	; (b620 <handleParameter+0x746>)
    b586:	216d      	movs	r1, #109	; 0x6d
    b588:	f015 f995 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b58c:	2400      	movs	r4, #0
    b58e:	e535      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMAX_SHIFT);
    b590:	4823      	ldr	r0, [pc, #140]	; (b620 <handleParameter+0x746>)
    b592:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b594:	b92c      	cbnz	r4, b5a2 <handleParameter+0x6c8>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMAX_SHIFT);
    b596:	f015 f99c 	bl	208d2 <tmc2160_readInt>
    b59a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b59e:	6028      	str	r0, [r5, #0]
    b5a0:	e52c      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMAX_MASK, TMC2160_SEMAX_SHIFT, *value);
    b5a2:	f015 f996 	bl	208d2 <tmc2160_readInt>
    b5a6:	682b      	ldr	r3, [r5, #0]
    b5a8:	021b      	lsls	r3, r3, #8
    b5aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b5ae:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
    b5b2:	431a      	orrs	r2, r3
    b5b4:	481a      	ldr	r0, [pc, #104]	; (b620 <handleParameter+0x746>)
    b5b6:	216d      	movs	r1, #109	; 0x6d
    b5b8:	f015 f97d 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b5bc:	2400      	movs	r4, #0
    b5be:	e51d      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_SHIFT);
    b5c0:	4817      	ldr	r0, [pc, #92]	; (b620 <handleParameter+0x746>)
    b5c2:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b5c4:	b92c      	cbnz	r4, b5d2 <handleParameter+0x6f8>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_SHIFT);
    b5c6:	f015 f984 	bl	208d2 <tmc2160_readInt>
    b5ca:	f3c0 1041 	ubfx	r0, r0, #5, #2
    b5ce:	6028      	str	r0, [r5, #0]
    b5d0:	e514      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEUP_MASK, TMC2160_SEUP_SHIFT, *value);
    b5d2:	f015 f97e 	bl	208d2 <tmc2160_readInt>
    b5d6:	682b      	ldr	r3, [r5, #0]
    b5d8:	015b      	lsls	r3, r3, #5
    b5da:	f003 0360 	and.w	r3, r3, #96	; 0x60
    b5de:	f020 0260 	bic.w	r2, r0, #96	; 0x60
    b5e2:	431a      	orrs	r2, r3
    b5e4:	480e      	ldr	r0, [pc, #56]	; (b620 <handleParameter+0x746>)
    b5e6:	216d      	movs	r1, #109	; 0x6d
    b5e8:	f015 f965 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b5ec:	2400      	movs	r4, #0
    b5ee:	e505      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMIN_SHIFT);
    b5f0:	480b      	ldr	r0, [pc, #44]	; (b620 <handleParameter+0x746>)
    b5f2:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b5f4:	b92c      	cbnz	r4, b602 <handleParameter+0x728>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMIN_SHIFT);
    b5f6:	f015 f96c 	bl	208d2 <tmc2160_readInt>
    b5fa:	f000 000f 	and.w	r0, r0, #15
    b5fe:	6028      	str	r0, [r5, #0]
    b600:	e4fc      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SEMIN_MASK, TMC2160_SEMIN_SHIFT, *value);
    b602:	f015 f966 	bl	208d2 <tmc2160_readInt>
    b606:	682a      	ldr	r2, [r5, #0]
    b608:	f020 000f 	bic.w	r0, r0, #15
    b60c:	f002 020f 	and.w	r2, r2, #15
    b610:	4302      	orrs	r2, r0
    b612:	216d      	movs	r1, #109	; 0x6d
    b614:	4802      	ldr	r0, [pc, #8]	; (b620 <handleParameter+0x746>)
    b616:	f015 f94e 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b61a:	2400      	movs	r4, #0
    b61c:	e4ee      	b.n	affc <handleParameter+0x122>
    b61e:	bf00      	nop
    b620:	1fff6250 	.word	0x1fff6250
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFILT_SHIFT);
    b624:	48b8      	ldr	r0, [pc, #736]	; (b908 <handleParameter+0xa2e>)
    b626:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b628:	b92c      	cbnz	r4, b636 <handleParameter+0x75c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFILT_SHIFT);
    b62a:	f015 f952 	bl	208d2 <tmc2160_readInt>
    b62e:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b632:	6028      	str	r0, [r5, #0]
    b634:	e4e2      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SFILT_MASK, TMC2160_SFILT_SHIFT, *value);
    b636:	f015 f94c 	bl	208d2 <tmc2160_readInt>
    b63a:	682b      	ldr	r3, [r5, #0]
    b63c:	061b      	lsls	r3, r3, #24
    b63e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b642:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
    b646:	431a      	orrs	r2, r3
    b648:	48af      	ldr	r0, [pc, #700]	; (b908 <handleParameter+0xa2e>)
    b64a:	216d      	movs	r1, #109	; 0x6d
    b64c:	f015 f933 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b650:	2400      	movs	r4, #0
    b652:	e4d3      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT);
    b654:	48ac      	ldr	r0, [pc, #688]	; (b908 <handleParameter+0xa2e>)
    b656:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
    b658:	b964      	cbnz	r4, b674 <handleParameter+0x79a>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT);
    b65a:	f015 f93a 	bl	208d2 <tmc2160_readInt>
    b65e:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
    b660:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT);
    b664:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
    b668:	bf18      	it	ne
    b66a:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    b66e:	4318      	orrs	r0, r3
    b670:	6028      	str	r0, [r5, #0]
    b672:	e4c3      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_COOLCONF, TMC2160_SGT_MASK, TMC2160_SGT_SHIFT, *value);
    b674:	f015 f92d 	bl	208d2 <tmc2160_readInt>
    b678:	682b      	ldr	r3, [r5, #0]
    b67a:	041b      	lsls	r3, r3, #16
    b67c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
    b680:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
    b684:	431a      	orrs	r2, r3
    b686:	48a0      	ldr	r0, [pc, #640]	; (b908 <handleParameter+0xa2e>)
    b688:	216d      	movs	r1, #109	; 0x6d
    b68a:	f015 f914 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b68e:	2400      	movs	r4, #0
    b690:	e4b4      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSENSE_SHIFT);
    b692:	489d      	ldr	r0, [pc, #628]	; (b908 <handleParameter+0xa2e>)
    b694:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b696:	b92c      	cbnz	r4, b6a4 <handleParameter+0x7ca>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSENSE_SHIFT);
    b698:	f015 f91b 	bl	208d2 <tmc2160_readInt>
    b69c:	f3c0 4040 	ubfx	r0, r0, #17, #1
    b6a0:	6028      	str	r0, [r5, #0]
    b6a2:	e4ab      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_VSENSE_MASK, TMC2160_VSENSE_SHIFT, *value);
    b6a4:	f015 f915 	bl	208d2 <tmc2160_readInt>
    b6a8:	682b      	ldr	r3, [r5, #0]
    b6aa:	045b      	lsls	r3, r3, #17
    b6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    b6b0:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
    b6b4:	431a      	orrs	r2, r3
    b6b6:	4894      	ldr	r0, [pc, #592]	; (b908 <handleParameter+0xa2e>)
    b6b8:	216c      	movs	r1, #108	; 0x6c
    b6ba:	f015 f8fc 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b6be:	2400      	movs	r4, #0
    b6c0:	e49c      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b6c2:	2c00      	cmp	r4, #0
    b6c4:	f040 8143 	bne.w	b94e <handleParameter+0xa74>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_CS_ACTUAL_MASK, TMC2160_CS_ACTUAL_SHIFT);
    b6c8:	488f      	ldr	r0, [pc, #572]	; (b908 <handleParameter+0xa2e>)
    b6ca:	216f      	movs	r1, #111	; 0x6f
    b6cc:	f015 f901 	bl	208d2 <tmc2160_readInt>
    b6d0:	f3c0 4004 	ubfx	r0, r0, #16, #5
    b6d4:	6028      	str	r0, [r5, #0]
    b6d6:	e491      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b6d8:	b924      	cbnz	r4, b6e4 <handleParameter+0x80a>
			*value = StepDir_getStallGuardThreshold(motor);
    b6da:	4620      	mov	r0, r4
    b6dc:	f014 fa2c 	bl	1fb38 <StepDir_getStallGuardThreshold>
    b6e0:	6028      	str	r0, [r5, #0]
    b6e2:	e48b      	b.n	affc <handleParameter+0x122>
			StepDir_setStallGuardThreshold(motor, *value);
    b6e4:	6829      	ldr	r1, [r5, #0]
    b6e6:	2000      	movs	r0, #0
    b6e8:	f014 f990 	bl	1fa0c <StepDir_setStallGuardThreshold>
	uint32_t errors = TMC_ERROR_NONE;
    b6ec:	2400      	movs	r4, #0
    b6ee:	e485      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b6f0:	b984      	cbnz	r4, b714 <handleParameter+0x83a>
			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TCOOLTHRS);
    b6f2:	4885      	ldr	r0, [pc, #532]	; (b908 <handleParameter+0xa2e>)
    b6f4:	2114      	movs	r1, #20
    b6f6:	f015 f8ec 	bl	208d2 <tmc2160_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    b6fa:	2800      	cmp	r0, #0
    b6fc:	bf08      	it	eq
    b6fe:	2001      	moveq	r0, #1
    b700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b704:	fb93 f0f0 	sdiv	r0, r3, r0
    b708:	4b80      	ldr	r3, [pc, #512]	; (b90c <handleParameter+0xa32>)
    b70a:	4298      	cmp	r0, r3
    b70c:	bfd4      	ite	le
    b70e:	6028      	strle	r0, [r5, #0]
    b710:	602b      	strgt	r3, [r5, #0]
    b712:	e473      	b.n	affc <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b714:	682b      	ldr	r3, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
    b716:	487c      	ldr	r0, [pc, #496]	; (b908 <handleParameter+0xa2e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b718:	2b00      	cmp	r3, #0
    b71a:	bf08      	it	eq
    b71c:	2301      	moveq	r3, #1
    b71e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b722:	fb92 f2f3 	sdiv	r2, r2, r3
    b726:	4b79      	ldr	r3, [pc, #484]	; (b90c <handleParameter+0xa32>)
    b728:	429a      	cmp	r2, r3
    b72a:	bfa8      	it	ge
    b72c:	461a      	movge	r2, r3
    b72e:	602a      	str	r2, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_TCOOLTHRS, *value);
    b730:	2114      	movs	r1, #20
    b732:	f015 f8c0 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b736:	2400      	movs	r4, #0
    b738:	e460      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDTF_SHIFT);
    b73a:	4873      	ldr	r0, [pc, #460]	; (b908 <handleParameter+0xa2e>)
    b73c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b73e:	b92c      	cbnz	r4, b74c <handleParameter+0x872>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDTF_SHIFT);
    b740:	f015 f8c7 	bl	208d2 <tmc2160_readInt>
    b744:	f3c0 3040 	ubfx	r0, r0, #13, #1
    b748:	6028      	str	r0, [r5, #0]
    b74a:	e457      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_RNDTF_MASK, TMC2160_RNDTF_SHIFT, *value);
    b74c:	f015 f8c1 	bl	208d2 <tmc2160_readInt>
    b750:	682b      	ldr	r3, [r5, #0]
    b752:	035b      	lsls	r3, r3, #13
    b754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    b758:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    b75c:	431a      	orrs	r2, r3
    b75e:	486a      	ldr	r0, [pc, #424]	; (b908 <handleParameter+0xa2e>)
    b760:	216c      	movs	r1, #108	; 0x6c
    b762:	f015 f8a8 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b766:	2400      	movs	r4, #0
    b768:	e448      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_SHIFT);
    b76a:	4867      	ldr	r0, [pc, #412]	; (b908 <handleParameter+0xa2e>)
    b76c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    b76e:	b92c      	cbnz	r4, b77c <handleParameter+0x8a2>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_SHIFT);
    b770:	f015 f8af 	bl	208d2 <tmc2160_readInt>
    b774:	f3c0 5003 	ubfx	r0, r0, #20, #4
    b778:	6028      	str	r0, [r5, #0]
    b77a:	e43f      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_CHOPCONF, TMC2160_SYNC_MASK, TMC2160_SYNC_SHIFT, *value);
    b77c:	f015 f8a9 	bl	208d2 <tmc2160_readInt>
    b780:	682b      	ldr	r3, [r5, #0]
    b782:	051b      	lsls	r3, r3, #20
    b784:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
    b788:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
    b78c:	431a      	orrs	r2, r3
    b78e:	485e      	ldr	r0, [pc, #376]	; (b908 <handleParameter+0xa2e>)
    b790:	216c      	movs	r1, #108	; 0x6c
    b792:	f015 f890 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b796:	2400      	movs	r4, #0
    b798:	e430      	b.n	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b79a:	b984      	cbnz	r4, b7be <handleParameter+0x8e4>
			tempValue = tmc2160_readInt(motorToIC(motor), TMC2160_TPWMTHRS);
    b79c:	485a      	ldr	r0, [pc, #360]	; (b908 <handleParameter+0xa2e>)
    b79e:	2113      	movs	r1, #19
    b7a0:	f015 f897 	bl	208d2 <tmc2160_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((tempValue)? tempValue:1));
    b7a4:	2800      	cmp	r0, #0
    b7a6:	bf08      	it	eq
    b7a8:	2001      	moveq	r0, #1
    b7aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b7ae:	fb93 f0f0 	sdiv	r0, r3, r0
    b7b2:	4b56      	ldr	r3, [pc, #344]	; (b90c <handleParameter+0xa32>)
    b7b4:	4298      	cmp	r0, r3
    b7b6:	bfd4      	ite	le
    b7b8:	6028      	strle	r0, [r5, #0]
    b7ba:	602b      	strgt	r3, [r5, #0]
    b7bc:	e41e      	b.n	affc <handleParameter+0x122>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b7be:	682b      	ldr	r3, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
    b7c0:	4851      	ldr	r0, [pc, #324]	; (b908 <handleParameter+0xa2e>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	bf08      	it	eq
    b7c6:	2301      	moveq	r3, #1
    b7c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b7cc:	fb92 f2f3 	sdiv	r2, r2, r3
    b7d0:	4b4e      	ldr	r3, [pc, #312]	; (b90c <handleParameter+0xa32>)
    b7d2:	429a      	cmp	r2, r3
    b7d4:	bfa8      	it	ge
    b7d6:	461a      	movge	r2, r3
    b7d8:	602a      	str	r2, [r5, #0]
			tmc2160_writeInt(motorToIC(motor), TMC2160_TPWMTHRS, *value);
    b7da:	2113      	movs	r1, #19
    b7dc:	f015 f86b 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b7e0:	2400      	movs	r4, #0
    b7e2:	e40b      	b.n	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PWM_GRAD_SHIFT);
    b7e4:	4848      	ldr	r0, [pc, #288]	; (b908 <handleParameter+0xa2e>)
    b7e6:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    b7e8:	b92c      	cbnz	r4, b7f6 <handleParameter+0x91c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PWM_GRAD_SHIFT);
    b7ea:	f015 f872 	bl	208d2 <tmc2160_readInt>
    b7ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b7f2:	6028      	str	r0, [r5, #0]
    b7f4:	e402      	b.n	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_GRAD_MASK, TMC2160_PWM_GRAD_SHIFT, *value);
    b7f6:	f015 f86c 	bl	208d2 <tmc2160_readInt>
    b7fa:	682b      	ldr	r3, [r5, #0]
    b7fc:	021b      	lsls	r3, r3, #8
    b7fe:	b29b      	uxth	r3, r3
    b800:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
    b804:	431a      	orrs	r2, r3
    b806:	4840      	ldr	r0, [pc, #256]	; (b908 <handleParameter+0xa2e>)
    b808:	2170      	movs	r1, #112	; 0x70
    b80a:	f015 f854 	bl	208b6 <tmc2160_writeInt>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_GCONF, TMC2160_EN_PWM_MODE_MASK, TMC2160_EN_PWM_MODE_SHIFT, (*value) ? 1 : 0);
    b80e:	2100      	movs	r1, #0
    b810:	483d      	ldr	r0, [pc, #244]	; (b908 <handleParameter+0xa2e>)
    b812:	f015 f85e 	bl	208d2 <tmc2160_readInt>
    b816:	682b      	ldr	r3, [r5, #0]
    b818:	2b00      	cmp	r3, #0
    b81a:	f020 0204 	bic.w	r2, r0, #4
    b81e:	bf18      	it	ne
    b820:	2304      	movne	r3, #4
    b822:	4839      	ldr	r0, [pc, #228]	; (b908 <handleParameter+0xa2e>)
    b824:	431a      	orrs	r2, r3
    b826:	2100      	movs	r1, #0
    b828:	f015 f845 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b82c:	2400      	movs	r4, #0
    b82e:	f7ff bbe5 	b.w	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PWM_AMPL_SHIFT);
    b832:	4835      	ldr	r0, [pc, #212]	; (b908 <handleParameter+0xa2e>)
    b834:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    b836:	b92c      	cbnz	r4, b844 <handleParameter+0x96a>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PWM_AMPL_SHIFT);
    b838:	f015 f84b 	bl	208d2 <tmc2160_readInt>
    b83c:	b2c0      	uxtb	r0, r0
    b83e:	6028      	str	r0, [r5, #0]
    b840:	f7ff bbdc 	b.w	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AMPL_MASK, TMC2160_PWM_AMPL_SHIFT, *value);
    b844:	f015 f845 	bl	208d2 <tmc2160_readInt>
    b848:	782a      	ldrb	r2, [r5, #0]
    b84a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
    b84e:	4302      	orrs	r2, r0
    b850:	2170      	movs	r1, #112	; 0x70
    b852:	482d      	ldr	r0, [pc, #180]	; (b908 <handleParameter+0xa2e>)
    b854:	f015 f82f 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b858:	2400      	movs	r4, #0
    b85a:	f7ff bbcf 	b.w	affc <handleParameter+0x122>
		if(readWrite == READ) {
    b85e:	b944      	cbnz	r4, b872 <handleParameter+0x998>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PWM_FREQ_SHIFT);
    b860:	4829      	ldr	r0, [pc, #164]	; (b908 <handleParameter+0xa2e>)
    b862:	2170      	movs	r1, #112	; 0x70
    b864:	f015 f835 	bl	208d2 <tmc2160_readInt>
    b868:	f3c0 4001 	ubfx	r0, r0, #16, #2
    b86c:	6028      	str	r0, [r5, #0]
    b86e:	f7ff bbc5 	b.w	affc <handleParameter+0x122>
			if(*value >= 0 && *value < 4)
    b872:	682b      	ldr	r3, [r5, #0]
    b874:	2b03      	cmp	r3, #3
    b876:	d86d      	bhi.n	b954 <handleParameter+0xa7a>
				TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_FREQ_MASK, TMC2160_PWM_FREQ_SHIFT, *value);
    b878:	2170      	movs	r1, #112	; 0x70
    b87a:	4823      	ldr	r0, [pc, #140]	; (b908 <handleParameter+0xa2e>)
    b87c:	f015 f829 	bl	208d2 <tmc2160_readInt>
    b880:	682b      	ldr	r3, [r5, #0]
    b882:	041b      	lsls	r3, r3, #16
    b884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    b888:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
    b88c:	431a      	orrs	r2, r3
    b88e:	481e      	ldr	r0, [pc, #120]	; (b908 <handleParameter+0xa2e>)
    b890:	2170      	movs	r1, #112	; 0x70
    b892:	f015 f810 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b896:	2400      	movs	r4, #0
    b898:	f7ff bbb0 	b.w	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC2160_PWM_AUTOSCALE_SHIFT);
    b89c:	481a      	ldr	r0, [pc, #104]	; (b908 <handleParameter+0xa2e>)
    b89e:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    b8a0:	b934      	cbnz	r4, b8b0 <handleParameter+0x9d6>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC2160_PWM_AUTOSCALE_SHIFT);
    b8a2:	f015 f816 	bl	208d2 <tmc2160_readInt>
    b8a6:	f3c0 4080 	ubfx	r0, r0, #18, #1
    b8aa:	6028      	str	r0, [r5, #0]
    b8ac:	f7ff bba6 	b.w	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_PWM_AUTOSCALE_MASK, TMC2160_PWM_AUTOSCALE_SHIFT, (*value)? 1:0);
    b8b0:	f015 f80f 	bl	208d2 <tmc2160_readInt>
    b8b4:	682b      	ldr	r3, [r5, #0]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    b8bc:	bf18      	it	ne
    b8be:	f44f 2380 	movne.w	r3, #262144	; 0x40000
    b8c2:	4811      	ldr	r0, [pc, #68]	; (b908 <handleParameter+0xa2e>)
    b8c4:	431a      	orrs	r2, r3
    b8c6:	2170      	movs	r1, #112	; 0x70
    b8c8:	f014 fff5 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b8cc:	2400      	movs	r4, #0
    b8ce:	f7ff bb95 	b.w	affc <handleParameter+0x122>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_FREEWHEEL_SHIFT);
    b8d2:	480d      	ldr	r0, [pc, #52]	; (b908 <handleParameter+0xa2e>)
    b8d4:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    b8d6:	b934      	cbnz	r4, b8e6 <handleParameter+0xa0c>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_FREEWHEEL_SHIFT);
    b8d8:	f014 fffb 	bl	208d2 <tmc2160_readInt>
    b8dc:	f3c0 5001 	ubfx	r0, r0, #20, #2
    b8e0:	6028      	str	r0, [r5, #0]
    b8e2:	f7ff bb8b 	b.w	affc <handleParameter+0x122>
			TMC2160_FIELD_UPDATE(motorToIC(motor), TMC2160_PWMCONF, TMC2160_FREEWHEEL_MASK, TMC2160_FREEWHEEL_SHIFT, *value);
    b8e6:	f014 fff4 	bl	208d2 <tmc2160_readInt>
    b8ea:	682b      	ldr	r3, [r5, #0]
    b8ec:	051b      	lsls	r3, r3, #20
    b8ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    b8f2:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
    b8f6:	431a      	orrs	r2, r3
    b8f8:	4803      	ldr	r0, [pc, #12]	; (b908 <handleParameter+0xa2e>)
    b8fa:	2170      	movs	r1, #112	; 0x70
    b8fc:	f014 ffdb 	bl	208b6 <tmc2160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    b900:	2400      	movs	r4, #0
    b902:	f7ff bb7b 	b.w	affc <handleParameter+0x122>
    b906:	bf00      	nop
    b908:	1fff6250 	.word	0x1fff6250
    b90c:	000fffff 	.word	0x000fffff
		if(readWrite == READ) {
    b910:	bb1c      	cbnz	r4, b95a <handleParameter+0xa80>
			*value = TMC2160_FIELD_READ(motorToIC(motor), TMC2160_DRV_STATUS, TMC2160_SG_RESULT_MASK, TMC2160_SG_RESULT_SHIFT);
    b912:	4813      	ldr	r0, [pc, #76]	; (b960 <handleParameter+0xa86>)
    b914:	216f      	movs	r1, #111	; 0x6f
    b916:	f014 ffdc 	bl	208d2 <tmc2160_readInt>
    b91a:	f3c0 0009 	ubfx	r0, r0, #0, #10
    b91e:	6028      	str	r0, [r5, #0]
    b920:	f7ff bb6c 	b.w	affc <handleParameter+0x122>
		return TMC_ERROR_MOTOR;
    b924:	2408      	movs	r4, #8
    b926:	f7ff bb69 	b.w	affc <handleParameter+0x122>
	switch(type)
    b92a:	2404      	movs	r4, #4
    b92c:	f7ff bb66 	b.w	affc <handleParameter+0x122>
    b930:	2404      	movs	r4, #4
    b932:	f7ff bb63 	b.w	affc <handleParameter+0x122>
			errors |= TMC_ERROR_TYPE;
    b936:	2404      	movs	r4, #4
    b938:	f7ff bb60 	b.w	affc <handleParameter+0x122>
    b93c:	2404      	movs	r4, #4
    b93e:	f7ff bb5d 	b.w	affc <handleParameter+0x122>
    b942:	2404      	movs	r4, #4
    b944:	f7ff bb5a 	b.w	affc <handleParameter+0x122>
    b948:	2404      	movs	r4, #4
    b94a:	f7ff bb57 	b.w	affc <handleParameter+0x122>
    b94e:	2404      	movs	r4, #4
    b950:	f7ff bb54 	b.w	affc <handleParameter+0x122>
				errors |= TMC_ERROR_VALUE;
    b954:	2410      	movs	r4, #16
    b956:	f7ff bb51 	b.w	affc <handleParameter+0x122>
			errors |= TMC_ERROR_TYPE;
    b95a:	2404      	movs	r4, #4
    b95c:	f7ff bb4e 	b.w	affc <handleParameter+0x122>
    b960:	1fff6250 	.word	0x1fff6250

0000b964 <SAP>:
{
    b964:	b507      	push	{r0, r1, r2, lr}
    b966:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    b968:	ab01      	add	r3, sp, #4
    b96a:	4602      	mov	r2, r0
    b96c:	2001      	movs	r0, #1
    b96e:	f7ff fab4 	bl	aeda <handleParameter>
}
    b972:	b003      	add	sp, #12
    b974:	f85d fb04 	ldr.w	pc, [sp], #4

0000b978 <GAP>:
{
    b978:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    b97a:	4602      	mov	r2, r0
    b97c:	2000      	movs	r0, #0
    b97e:	f7ff baac 	b.w	aeda <handleParameter>

0000b982 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc2160_restore(&TMC2160);
    b982:	4801      	ldr	r0, [pc, #4]	; (b988 <restore+0x6>)
    b984:	f015 b81d 	b.w	209c2 <tmc2160_restore>
    b988:	1fff6250 	.word	0x1fff6250

0000b98c <reset>:
{
    b98c:	b508      	push	{r3, lr}
	if(StepDir_getActualVelocity(0) && !VitalSignsMonitor.brownOut)
    b98e:	2000      	movs	r0, #0
    b990:	f014 f892 	bl	1fab8 <StepDir_getActualVelocity>
    b994:	b110      	cbz	r0, b99c <reset+0x10>
    b996:	4b09      	ldr	r3, [pc, #36]	; (b9bc <reset+0x30>)
    b998:	7898      	ldrb	r0, [r3, #2]
    b99a:	b170      	cbz	r0, b9ba <reset+0x2e>
	tmc2160_reset(&TMC2160);
    b99c:	4808      	ldr	r0, [pc, #32]	; (b9c0 <reset+0x34>)
    b99e:	f014 fffd 	bl	2099c <tmc2160_reset>
	StepDir_init(STEPDIR_PRECISION);
    b9a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b9a6:	f014 f915 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
    b9aa:	4906      	ldr	r1, [pc, #24]	; (b9c4 <reset+0x38>)
    b9ac:	2300      	movs	r3, #0
    b9ae:	4618      	mov	r0, r3
    b9b0:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
    b9b4:	f013 ff64 	bl	1f880 <StepDir_setPins>
	return 1;
    b9b8:	2001      	movs	r0, #1
}
    b9ba:	bd08      	pop	{r3, pc}
    b9bc:	1fff0b34 	.word	0x1fff0b34
    b9c0:	1fff6250 	.word	0x1fff6250
    b9c4:	1fff19d4 	.word	0x1fff19d4

0000b9c8 <enableDriver>:
	}
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    b9c8:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    b9ca:	bf04      	itt	eq
    b9cc:	4b0b      	ldreq	r3, [pc, #44]	; (b9fc <enableDriver+0x34>)
    b9ce:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state == DRIVER_DISABLE)
    b9d2:	b930      	cbnz	r0, b9e2 <enableDriver+0x1a>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
    b9d4:	4b0a      	ldr	r3, [pc, #40]	; (ba00 <enableDriver+0x38>)
    b9d6:	68db      	ldr	r3, [r3, #12]
    b9d8:	681b      	ldr	r3, [r3, #0]
    b9da:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    b9dc:	4a09      	ldr	r2, [pc, #36]	; (ba04 <enableDriver+0x3c>)
    b9de:	6810      	ldr	r0, [r2, #0]
    b9e0:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    b9e2:	2801      	cmp	r0, #1
    b9e4:	d109      	bne.n	b9fa <enableDriver+0x32>
    b9e6:	4b05      	ldr	r3, [pc, #20]	; (b9fc <enableDriver+0x34>)
    b9e8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    b9ec:	2b01      	cmp	r3, #1
    b9ee:	d104      	bne.n	b9fa <enableDriver+0x32>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    b9f0:	4b03      	ldr	r3, [pc, #12]	; (ba00 <enableDriver+0x38>)
    b9f2:	68db      	ldr	r3, [r3, #12]
    b9f4:	681b      	ldr	r3, [r3, #0]
    b9f6:	699b      	ldr	r3, [r3, #24]
    b9f8:	e7f0      	b.n	b9dc <enableDriver+0x14>
}
    b9fa:	4770      	bx	lr
    b9fc:	1fff5e88 	.word	0x1fff5e88
    ba00:	00029d1c 	.word	0x00029d1c
    ba04:	1fff19d4 	.word	0x1fff19d4

0000ba08 <userFunction>:
{
    ba08:	b510      	push	{r4, lr}
    ba0a:	4614      	mov	r4, r2
    ba0c:	2806      	cmp	r0, #6
    ba0e:	d805      	bhi.n	ba1c <userFunction+0x14>
    ba10:	e8df f000 	tbb	[pc, r0]
    ba14:	27161806 	.word	0x27161806
    ba18:	3732      	.short	0x3732
    ba1a:	41          	.byte	0x41
    ba1b:	00          	.byte	0x00
	uint32_t errors = 0;
    ba1c:	2004      	movs	r0, #4
}
    ba1e:	bd10      	pop	{r4, pc}
		uvalue = (uint32_t) *value;
    ba20:	6813      	ldr	r3, [r2, #0]
		if(uvalue <= 20000)
    ba22:	f644 6220 	movw	r2, #20000	; 0x4e20
    ba26:	4293      	cmp	r3, r2
    ba28:	d839      	bhi.n	ba9e <userFunction+0x96>
			Timer.setDuty(TIMER_CHANNEL_1, uvalue%10001);
    ba2a:	f242 7211 	movw	r2, #10001	; 0x2711
    ba2e:	fbb3 f1f2 	udiv	r1, r3, r2
    ba32:	fb02 3111 	mls	r1, r2, r1, r3
    ba36:	4b1b      	ldr	r3, [pc, #108]	; (baa4 <userFunction+0x9c>)
    ba38:	b289      	uxth	r1, r1
    ba3a:	689b      	ldr	r3, [r3, #8]
    ba3c:	2000      	movs	r0, #0
    ba3e:	4798      	blx	r3
	uint32_t errors = 0;
    ba40:	2000      	movs	r0, #0
    ba42:	e7ec      	b.n	ba1e <userFunction+0x16>
		if(*value)
    ba44:	4b18      	ldr	r3, [pc, #96]	; (baa8 <userFunction+0xa0>)
    ba46:	6824      	ldr	r4, [r4, #0]
    ba48:	68da      	ldr	r2, [r3, #12]
    ba4a:	e9d2 3000 	ldrd	r3, r0, [r2]
    ba4e:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
    ba52:	b11c      	cbz	r4, ba5c <userFunction+0x54>
			HAL.IOs->config->setToState(&HAL.IOs->pins->CLK16, IOS_LOW);
    ba54:	69db      	ldr	r3, [r3, #28]
    ba56:	2100      	movs	r1, #0
		HAL.IOs->config->setToState(Pins.DCEN, (*value) ? IOS_HIGH : IOS_LOW);
    ba58:	4798      	blx	r3
		break;
    ba5a:	e7f1      	b.n	ba40 <userFunction+0x38>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
    ba5c:	689b      	ldr	r3, [r3, #8]
		HAL.IOs->config->toOutput(Pins.DCEN);
    ba5e:	4798      	blx	r3
		break;
    ba60:	e7ee      	b.n	ba40 <userFunction+0x38>
		HAL.IOs->config->setToState(Pins.DCEN, (*value) ? IOS_HIGH : IOS_LOW);
    ba62:	4b11      	ldr	r3, [pc, #68]	; (baa8 <userFunction+0xa0>)
    ba64:	6811      	ldr	r1, [r2, #0]
    ba66:	68db      	ldr	r3, [r3, #12]
    ba68:	4a10      	ldr	r2, [pc, #64]	; (baac <userFunction+0xa4>)
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	6950      	ldr	r0, [r2, #20]
    ba6e:	69db      	ldr	r3, [r3, #28]
    ba70:	3900      	subs	r1, #0
    ba72:	bf18      	it	ne
    ba74:	2101      	movne	r1, #1
    ba76:	e7ef      	b.n	ba58 <userFunction+0x50>
		*value = StepDir_getStatus(motor);
    ba78:	4608      	mov	r0, r1
    ba7a:	f013 fed9 	bl	1f830 <StepDir_getStatus>
    ba7e:	6020      	str	r0, [r4, #0]
		break;
    ba80:	e7de      	b.n	ba40 <userFunction+0x38>
		Pins.DCEN = &HAL.IOs->pins->DIO6;
    ba82:	4b09      	ldr	r3, [pc, #36]	; (baa8 <userFunction+0xa0>)
    ba84:	4a09      	ldr	r2, [pc, #36]	; (baac <userFunction+0xa4>)
    ba86:	68db      	ldr	r3, [r3, #12]
    ba88:	6858      	ldr	r0, [r3, #4]
		HAL.IOs->config->toOutput(Pins.DCEN);
    ba8a:	681b      	ldr	r3, [r3, #0]
		Pins.DCEN = &HAL.IOs->pins->DIO6;
    ba8c:	f500 7094 	add.w	r0, r0, #296	; 0x128
		HAL.IOs->config->toOutput(Pins.DCEN);
    ba90:	68db      	ldr	r3, [r3, #12]
		Pins.DCEN = &HAL.IOs->pins->DIO6;
    ba92:	6150      	str	r0, [r2, #20]
		HAL.IOs->config->toOutput(Pins.DCEN);
    ba94:	e7e3      	b.n	ba5e <userFunction+0x56>
		enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    ba96:	2002      	movs	r0, #2
    ba98:	f7ff ff96 	bl	b9c8 <enableDriver>
		break;
    ba9c:	e7d0      	b.n	ba40 <userFunction+0x38>
			errors |= TMC_ERROR_VALUE;
    ba9e:	2010      	movs	r0, #16
	return errors;
    baa0:	e7bd      	b.n	ba1e <userFunction+0x16>
    baa2:	bf00      	nop
    baa4:	1fff0ae0 	.word	0x1fff0ae0
    baa8:	00029d1c 	.word	0x00029d1c
    baac:	1fff19d4 	.word	0x1fff19d4

0000bab0 <getMax>:
{
    bab0:	4603      	mov	r3, r0
	switch(type) {
    bab2:	2b05      	cmp	r3, #5
{
    bab4:	b510      	push	{r4, lr}
    bab6:	4608      	mov	r0, r1
    bab8:	4614      	mov	r4, r2
	switch(type) {
    baba:	d00c      	beq.n	bad6 <getMax+0x26>
    babc:	d807      	bhi.n	bace <getMax+0x1e>
    babe:	3b02      	subs	r3, #2
    bac0:	2b02      	cmp	r3, #2
    bac2:	d806      	bhi.n	bad2 <getMax+0x22>
			*value = StepDir_getFrequency(motor);
    bac4:	f014 f854 	bl	1fb70 <StepDir_getFrequency>
			*value = StepDir_getMaxAcceleration(motor);
    bac8:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    baca:	2000      	movs	r0, #0
}
    bacc:	bd10      	pop	{r4, pc}
	switch(type) {
    bace:	2b18      	cmp	r3, #24
    bad0:	d0f8      	beq.n	bac4 <getMax+0x14>
    bad2:	2004      	movs	r0, #4
	return getLimit(LIMIT_MAX, type, motor, value);
    bad4:	e7fa      	b.n	bacc <getMax+0x1c>
			*value = StepDir_getMaxAcceleration(motor);
    bad6:	f014 f867 	bl	1fba8 <StepDir_getMaxAcceleration>
    bada:	e7f5      	b.n	bac8 <getMax+0x18>

0000badc <getMeasuredSpeed>:
{
    badc:	b538      	push	{r3, r4, r5, lr}
    bade:	460d      	mov	r5, r1
	if(motor >= TMC2160_MOTORS)
    bae0:	4604      	mov	r4, r0
    bae2:	b920      	cbnz	r0, baee <getMeasuredSpeed+0x12>
		*value = StepDir_getActualVelocity(0);
    bae4:	f013 ffe8 	bl	1fab8 <StepDir_getActualVelocity>
    bae8:	6028      	str	r0, [r5, #0]
    baea:	4620      	mov	r0, r4
}
    baec:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    baee:	2008      	movs	r0, #8
    baf0:	e7fc      	b.n	baec <getMeasuredSpeed+0x10>

0000baf2 <periodicJob>:
{
    baf2:	b538      	push	{r3, r4, r5, lr}
	switch(init_state) {
    baf4:	4d18      	ldr	r5, [pc, #96]	; (bb58 <periodicJob+0x66>)
{
    baf6:	4604      	mov	r4, r0
	switch(init_state) {
    baf8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    bafc:	2801      	cmp	r0, #1
    bafe:	d01c      	beq.n	bb3a <periodicJob+0x48>
    bb00:	2802      	cmp	r0, #2
    bb02:	d01f      	beq.n	bb44 <periodicJob+0x52>
	tmc2160_periodicJob(&TMC2160, tick);
    bb04:	4621      	mov	r1, r4
    bb06:	4815      	ldr	r0, [pc, #84]	; (bb5c <periodicJob+0x6a>)
    bb08:	f014 ff73 	bl	209f2 <tmc2160_periodicJob>
	StepDir_periodicJob(0);
    bb0c:	2000      	movs	r0, #0
    bb0e:	f013 fe49 	bl	1f7a4 <StepDir_periodicJob>
	uint8_t status = StepDir_getStatus(0);
    bb12:	2000      	movs	r0, #0
    bb14:	f013 fe8c 	bl	1f830 <StepDir_getStatus>
	if(status & STATUS_STALLED)
    bb18:	f010 0408 	ands.w	r4, r0, #8
    bb1c:	d11b      	bne.n	bb56 <periodicJob+0x64>
	if(!(status & STATUS_STALLGUARD_ACTIVE))
    bb1e:	0682      	lsls	r2, r0, #26
    bb20:	d519      	bpl.n	bb56 <periodicJob+0x64>
	if(tmc2160_readInt(&TMC2160, TMC2160_DRV_STATUS) & TMC2160_STALLGUARD_MASK)
    bb22:	480e      	ldr	r0, [pc, #56]	; (bb5c <periodicJob+0x6a>)
    bb24:	216f      	movs	r1, #111	; 0x6f
    bb26:	f014 fed4 	bl	208d2 <tmc2160_readInt>
    bb2a:	01c3      	lsls	r3, r0, #7
    bb2c:	d513      	bpl.n	bb56 <periodicJob+0x64>
		StepDir_stop(0, STOP_STALL);
    bb2e:	4620      	mov	r0, r4
    bb30:	2102      	movs	r1, #2
}
    bb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		StepDir_stop(0, STOP_STALL);
    bb36:	f013 be55 	b.w	1f7e4 <StepDir_stop>
		old_tick = tick;
    bb3a:	62ac      	str	r4, [r5, #40]	; 0x28
		init_state = 2;
    bb3c:	2302      	movs	r3, #2
			init_state = 3;
    bb3e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    bb42:	e7df      	b.n	bb04 <periodicJob+0x12>
		if((tick - old_tick) > TMC2160_DRVENN_DELAY) {
    bb44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bb46:	1ae3      	subs	r3, r4, r3
    bb48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    bb4c:	d9da      	bls.n	bb04 <periodicJob+0x12>
			enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    bb4e:	f7ff ff3b 	bl	b9c8 <enableDriver>
			init_state = 3;
    bb52:	2303      	movs	r3, #3
    bb54:	e7f3      	b.n	bb3e <periodicJob+0x4c>
}
    bb56:	bd38      	pop	{r3, r4, r5, pc}
    bb58:	1fff19d4 	.word	0x1fff19d4
    bb5c:	1fff6250 	.word	0x1fff6250

0000bb60 <configCallback>:
	if(state == CONFIG_RESET)
    bb60:	2901      	cmp	r1, #1
{
    bb62:	b510      	push	{r4, lr}
    bb64:	4604      	mov	r4, r0
	if(state == CONFIG_RESET)
    bb66:	d10d      	bne.n	bb84 <configCallback+0x24>
		tmc2160_writeInt(tmc2160, TMC2160_PWMCONF, 0xC40C001E);
    bb68:	4a07      	ldr	r2, [pc, #28]	; (bb88 <configCallback+0x28>)
    bb6a:	2170      	movs	r1, #112	; 0x70
    bb6c:	f014 fea3 	bl	208b6 <tmc2160_writeInt>
		tmc2160_writeInt(tmc2160, TMC2160_DRV_CONF, 0x00080400);
    bb70:	4620      	mov	r0, r4
    bb72:	4a06      	ldr	r2, [pc, #24]	; (bb8c <configCallback+0x2c>)
    bb74:	210a      	movs	r1, #10
    bb76:	f014 fe9e 	bl	208b6 <tmc2160_writeInt>
		tmc2160_fillShadowRegisters(tmc2160);
    bb7a:	4620      	mov	r0, r4
}
    bb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tmc2160_fillShadowRegisters(tmc2160);
    bb80:	f014 bee8 	b.w	20954 <tmc2160_fillShadowRegisters>
}
    bb84:	bd10      	pop	{r4, pc}
    bb86:	bf00      	nop
    bb88:	c40c001e 	.word	0xc40c001e
    bb8c:	00080400 	.word	0x00080400

0000bb90 <moveBy>:
{
    bb90:	b538      	push	{r3, r4, r5, lr}
    bb92:	460d      	mov	r5, r1
	if(motor >= TMC2160_MOTORS)
    bb94:	4604      	mov	r4, r0
    bb96:	b948      	cbnz	r0, bbac <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    bb98:	f013 ff6e 	bl	1fa78 <StepDir_getActualPosition>
    bb9c:	6829      	ldr	r1, [r5, #0]
    bb9e:	4401      	add	r1, r0
    bba0:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    bba2:	4620      	mov	r0, r4
    bba4:	f013 fde6 	bl	1f774 <StepDir_moveTo>
    bba8:	4620      	mov	r0, r4
}
    bbaa:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    bbac:	2008      	movs	r0, #8
    bbae:	e7fc      	b.n	bbaa <moveBy+0x1a>

0000bbb0 <getMin>:
	switch(type) {
    bbb0:	2805      	cmp	r0, #5
    bbb2:	d803      	bhi.n	bbbc <getMin+0xc>
    bbb4:	2801      	cmp	r0, #1
    bbb6:	d803      	bhi.n	bbc0 <getMin+0x10>
    bbb8:	2004      	movs	r0, #4
}
    bbba:	4770      	bx	lr
	switch(type) {
    bbbc:	2818      	cmp	r0, #24
    bbbe:	d1fb      	bne.n	bbb8 <getMin+0x8>
			*value = 0; // TODO: Determine limits here
    bbc0:	2000      	movs	r0, #0
    bbc2:	6010      	str	r0, [r2, #0]
    bbc4:	4770      	bx	lr

0000bbc6 <tmc2160_readWriteArray>:
	if(Evalboards.ch1.fullCover != NULL)
    bbc6:	4b05      	ldr	r3, [pc, #20]	; (bbdc <tmc2160_readWriteArray+0x16>)
    bbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
{
    bbca:	4608      	mov	r0, r1
    bbcc:	4611      	mov	r1, r2
	if(Evalboards.ch1.fullCover != NULL)
    bbce:	b103      	cbz	r3, bbd2 <tmc2160_readWriteArray+0xc>
		channelToSPI(channel)->readWriteArray(&data[0], length);
    bbd0:	4718      	bx	r3
    bbd2:	4b03      	ldr	r3, [pc, #12]	; (bbe0 <tmc2160_readWriteArray+0x1a>)
    bbd4:	681b      	ldr	r3, [r3, #0]
    bbd6:	68db      	ldr	r3, [r3, #12]
    bbd8:	e7fa      	b.n	bbd0 <tmc2160_readWriteArray+0xa>
    bbda:	bf00      	nop
    bbdc:	1fff5e88 	.word	0x1fff5e88
    bbe0:	1fff624c 	.word	0x1fff624c

0000bbe4 <TMC2160_init>:

void TMC2160_init(void)
{
    bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmc2160_init(&TMC2160, 1, Evalboards.ch2.config, &tmc2160_defaultRegisterResetState[0]);
    bbe8:	4c5c      	ldr	r4, [pc, #368]	; (bd5c <TMC2160_init+0x178>)
    bbea:	4f5d      	ldr	r7, [pc, #372]	; (bd60 <TMC2160_init+0x17c>)
    bbec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
    bbf0:	4b5c      	ldr	r3, [pc, #368]	; (bd64 <TMC2160_init+0x180>)
	tmc2160_setCallback(&TMC2160, configCallback);

	Pins.DRV_ENN = &HAL.IOs->pins->DIO0;
    bbf2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; bdc4 <TMC2160_init+0x1e0>
    bbf6:	4d5c      	ldr	r5, [pc, #368]	; (bd68 <TMC2160_init+0x184>)
	tmc2160_init(&TMC2160, 1, Evalboards.ch2.config, &tmc2160_defaultRegisterResetState[0]);
    bbf8:	4638      	mov	r0, r7
    bbfa:	2101      	movs	r1, #1
    bbfc:	f014 fe8d 	bl	2091a <tmc2160_init>
	tmc2160_setCallback(&TMC2160, configCallback);
    bc00:	495a      	ldr	r1, [pc, #360]	; (bd6c <TMC2160_init+0x188>)
    bc02:	4638      	mov	r0, r7
    bc04:	f014 fef1 	bl	209ea <tmc2160_setCallback>
	Pins.DRV_ENN = &HAL.IOs->pins->DIO0;
    bc08:	f8d8 600c 	ldr.w	r6, [r8, #12]
    bc0c:	6873      	ldr	r3, [r6, #4]
    bc0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
    bc12:	602a      	str	r2, [r5, #0]
	Pins.REFL_STEP = &HAL.IOs->pins->DIO6;
    bc14:	f503 7294 	add.w	r2, r3, #296	; 0x128
    bc18:	606a      	str	r2, [r5, #4]
	Pins.REFR_DIR = &HAL.IOs->pins->DIO7;
    bc1a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    bc1e:	60aa      	str	r2, [r5, #8]
	Pins.SPI_MODE = &HAL.IOs->pins->DIO11;
    bc20:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
    bc24:	60ea      	str	r2, [r5, #12]
	Pins.DCIN = &HAL.IOs->pins->DIO12;
    bc26:	f503 7252 	add.w	r2, r3, #840	; 0x348
    bc2a:	612a      	str	r2, [r5, #16]
	Pins.DCEN = &HAL.IOs->pins->DIO13;
    bc2c:	f503 725a 	add.w	r2, r3, #872	; 0x368
	Pins.DCO = &HAL.IOs->pins->DIO14;
    bc30:	f503 7062 	add.w	r0, r3, #904	; 0x388
	Pins.DCEN = &HAL.IOs->pins->DIO13;
    bc34:	616a      	str	r2, [r5, #20]
	Pins.DIAG0 = &HAL.IOs->pins->DIO15;
    bc36:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.DIAG1 = &HAL.IOs->pins->DIO16;
    bc3a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
    bc3e:	622b      	str	r3, [r5, #32]

	//HAL.IOs->config->toInput(Pins.DIAG0);
	//HAL.IOs->config->toInput(Pins.DIAG1);
	HAL.IOs->config->toInput(Pins.DCO);
    bc40:	6833      	ldr	r3, [r6, #0]
	Pins.DIAG0 = &HAL.IOs->pins->DIO15;
    bc42:	61ea      	str	r2, [r5, #28]
	HAL.IOs->config->toInput(Pins.DCO);
    bc44:	691b      	ldr	r3, [r3, #16]
	Pins.DCO = &HAL.IOs->pins->DIO14;
    bc46:	61a8      	str	r0, [r5, #24]
	HAL.IOs->config->toInput(Pins.DCO);
    bc48:	4798      	blx	r3

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    bc4a:	6833      	ldr	r3, [r6, #0]
    bc4c:	6828      	ldr	r0, [r5, #0]
    bc4e:	68db      	ldr	r3, [r3, #12]
    bc50:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFL_STEP);
    bc52:	6833      	ldr	r3, [r6, #0]
    bc54:	6868      	ldr	r0, [r5, #4]
    bc56:	68db      	ldr	r3, [r3, #12]
    bc58:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.REFR_DIR);
    bc5a:	6833      	ldr	r3, [r6, #0]
    bc5c:	68a8      	ldr	r0, [r5, #8]
    bc5e:	68db      	ldr	r3, [r3, #12]
    bc60:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SPI_MODE);
    bc62:	6833      	ldr	r3, [r6, #0]
    bc64:	68e8      	ldr	r0, [r5, #12]
    bc66:	68db      	ldr	r3, [r3, #12]
    bc68:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DCEN);
    bc6a:	6833      	ldr	r3, [r6, #0]
    bc6c:	6968      	ldr	r0, [r5, #20]
    bc6e:	68db      	ldr	r3, [r3, #12]
    bc70:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DCIN);
    bc72:	6833      	ldr	r3, [r6, #0]
    bc74:	6928      	ldr	r0, [r5, #16]
    bc76:	68db      	ldr	r3, [r3, #12]
    bc78:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.SPI_MODE);
    bc7a:	6833      	ldr	r3, [r6, #0]
    bc7c:	68e8      	ldr	r0, [r5, #12]
    bc7e:	695b      	ldr	r3, [r3, #20]
    bc80:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.DCO);
    bc82:	6833      	ldr	r3, [r6, #0]
    bc84:	69a8      	ldr	r0, [r5, #24]
    bc86:	699b      	ldr	r3, [r3, #24]
    bc88:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.DCIN);
    bc8a:	6833      	ldr	r3, [r6, #0]
    bc8c:	6928      	ldr	r0, [r5, #16]
    bc8e:	699b      	ldr	r3, [r3, #24]
    bc90:	4798      	blx	r3

//	HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
//	HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);

	TMC2160_SPIChannel       = &HAL.SPI->ch2;
    bc92:	f8d8 2010 	ldr.w	r2, [r8, #16]
    bc96:	4b36      	ldr	r3, [pc, #216]	; (bd70 <TMC2160_init+0x18c>)
    bc98:	f102 0114 	add.w	r1, r2, #20
    bc9c:	6019      	str	r1, [r3, #0]
	TMC2160_SPIChannel->CSN  = &HAL.IOs->pins->SPI2_CSN0;
    bc9e:	6873      	ldr	r3, [r6, #4]
    bca0:	f503 7302 	add.w	r3, r3, #520	; 0x208
    bca4:	6193      	str	r3, [r2, #24]

	StepDir_init(STEPDIR_PRECISION);
    bca6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    bcaa:	f013 ff93 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.REFL_STEP, Pins.REFR_DIR, NULL);
    bcae:	2300      	movs	r3, #0
    bcb0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    bcb4:	4618      	mov	r0, r3
    bcb6:	f013 fde3 	bl	1f880 <StepDir_setPins>

	Evalboards.ch2.type = (void *)&TMC2160;

	Evalboards.ch2.config->reset        = reset;
    bcba:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
    bcbe:	4b2d      	ldr	r3, [pc, #180]	; (bd74 <TMC2160_init+0x190>)
    bcc0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    bcc4:	4b2c      	ldr	r3, [pc, #176]	; (bd78 <TMC2160_init+0x194>)
    bcc6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
    bcca:	2301      	movs	r3, #1
	Evalboards.ch2.type = (void *)&TMC2160;
    bccc:	67a7      	str	r7, [r4, #120]	; 0x78
	Evalboards.ch2.config->state        = CONFIG_RESET;
    bcce:	8013      	strh	r3, [r2, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    bcd0:	4a2a      	ldr	r2, [pc, #168]	; (bd7c <TMC2160_init+0x198>)
    bcd2:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    bcd6:	4a2a      	ldr	r2, [pc, #168]	; (bd80 <TMC2160_init+0x19c>)
    bcd8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    bcdc:	4a29      	ldr	r2, [pc, #164]	; (bd84 <TMC2160_init+0x1a0>)
    bcde:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    bce2:	4a29      	ldr	r2, [pc, #164]	; (bd88 <TMC2160_init+0x1a4>)
    bce4:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    bce8:	4a28      	ldr	r2, [pc, #160]	; (bd8c <TMC2160_init+0x1a8>)
    bcea:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    bcee:	4a28      	ldr	r2, [pc, #160]	; (bd90 <TMC2160_init+0x1ac>)
    bcf0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    bcf4:	4a27      	ldr	r2, [pc, #156]	; (bd94 <TMC2160_init+0x1b0>)
    bcf6:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    bcfa:	4a27      	ldr	r2, [pc, #156]	; (bd98 <TMC2160_init+0x1b4>)
    bcfc:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
    bd00:	4a26      	ldr	r2, [pc, #152]	; (bd9c <TMC2160_init+0x1b8>)
    bd02:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
    bd06:	4a26      	ldr	r2, [pc, #152]	; (bda0 <TMC2160_init+0x1bc>)
    bd08:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
    bd0c:	4a25      	ldr	r2, [pc, #148]	; (bda4 <TMC2160_init+0x1c0>)
    bd0e:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
    bd12:	4a25      	ldr	r2, [pc, #148]	; (bda8 <TMC2160_init+0x1c4>)
    bd14:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
    bd18:	4a24      	ldr	r2, [pc, #144]	; (bdac <TMC2160_init+0x1c8>)
    bd1a:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
    bd1e:	4a24      	ldr	r2, [pc, #144]	; (bdb0 <TMC2160_init+0x1cc>)
    bd20:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
	Evalboards.ch2.numberOfMotors       = TMC2160_MOTORS;
	Evalboards.ch2.VMMin                = TMC2160_EVAL_VM_MIN;
	Evalboards.ch2.VMMax                = TMC2160_EVAL_VM_MAX;
    bd24:	2132      	movs	r1, #50	; 0x32
    bd26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    bd2a:	e9c4 2121 	strd	r2, r1, [r4, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    bd2e:	4a21      	ldr	r2, [pc, #132]	; (bdb4 <TMC2160_init+0x1d0>)
    bd30:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
	Evalboards.ch2.getMin               = getMin;
    bd34:	4a20      	ldr	r2, [pc, #128]	; (bdb8 <TMC2160_init+0x1d4>)
    bd36:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
	Evalboards.ch2.getMax               = getMax;
    bd3a:	4a20      	ldr	r2, [pc, #128]	; (bdbc <TMC2160_init+0x1d8>)
	Evalboards.ch2.numberOfMotors       = TMC2160_MOTORS;
    bd3c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
	Evalboards.ch2.getMax               = getMax;
    bd40:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec

	init_state = 1;

	Timer.init();
    bd44:	4c1e      	ldr	r4, [pc, #120]	; (bdc0 <TMC2160_init+0x1dc>)
	init_state = 1;
    bd46:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	Timer.init();
    bd4a:	6823      	ldr	r3, [r4, #0]
    bd4c:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    bd4e:	2100      	movs	r1, #0
    bd50:	68a3      	ldr	r3, [r4, #8]
    bd52:	4608      	mov	r0, r1
}
    bd54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Timer.setDuty(TIMER_CHANNEL_1, 0);
    bd58:	4718      	bx	r3
    bd5a:	bf00      	nop
    bd5c:	1fff5e88 	.word	0x1fff5e88
    bd60:	1fff6250 	.word	0x1fff6250
    bd64:	000282d8 	.word	0x000282d8
    bd68:	1fff19d4 	.word	0x1fff19d4
    bd6c:	0000bb61 	.word	0x0000bb61
    bd70:	1fff624c 	.word	0x1fff624c
    bd74:	0000b98d 	.word	0x0000b98d
    bd78:	0000b983 	.word	0x0000b983
    bd7c:	0000aebf 	.word	0x0000aebf
    bd80:	0000aed9 	.word	0x0000aed9
    bd84:	0000aed5 	.word	0x0000aed5
    bd88:	0000aed1 	.word	0x0000aed1
    bd8c:	0000b979 	.word	0x0000b979
    bd90:	0000b965 	.word	0x0000b965
    bd94:	0000aead 	.word	0x0000aead
    bd98:	0000bb91 	.word	0x0000bb91
    bd9c:	0000aea1 	.word	0x0000aea1
    bda0:	0000ae8d 	.word	0x0000ae8d
    bda4:	0000baf3 	.word	0x0000baf3
    bda8:	0000ba09 	.word	0x0000ba09
    bdac:	0000badd 	.word	0x0000badd
    bdb0:	0000b9c9 	.word	0x0000b9c9
    bdb4:	0000ae1d 	.word	0x0000ae1d
    bdb8:	0000bbb1 	.word	0x0000bbb1
    bdbc:	0000bab1 	.word	0x0000bab1
    bdc0:	1fff0ae0 	.word	0x1fff0ae0
    bdc4:	00029d1c 	.word	0x00029d1c

0000bdc8 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
    bdc8:	4b02      	ldr	r3, [pc, #8]	; (bdd4 <checkErrors+0xc>)
    bdca:	2200      	movs	r2, #0
    bdcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    bdd0:	4770      	bx	lr
    bdd2:	bf00      	nop
    bdd4:	1fff5e88 	.word	0x1fff5e88

0000bdd8 <tmc2208_writeRegister>:
	tmc2208_writeInt(motorToIC(motor), address, value);
    bdd8:	4801      	ldr	r0, [pc, #4]	; (bde0 <tmc2208_writeRegister+0x8>)
    bdda:	f014 be4d 	b.w	20a78 <tmc2208_writeInt>
    bdde:	bf00      	nop
    bde0:	1fff1a0c 	.word	0x1fff1a0c

0000bde4 <tmc2208_readRegister>:
{
    bde4:	b510      	push	{r4, lr}
	*value = tmc2208_readInt(motorToIC(motor), address);
    bde6:	4803      	ldr	r0, [pc, #12]	; (bdf4 <tmc2208_readRegister+0x10>)
{
    bde8:	4614      	mov	r4, r2
	*value = tmc2208_readInt(motorToIC(motor), address);
    bdea:	f014 fe78 	bl	20ade <tmc2208_readInt>
    bdee:	6020      	str	r0, [r4, #0]
}
    bdf0:	bd10      	pop	{r4, pc}
    bdf2:	bf00      	nop
    bdf4:	1fff1a0c 	.word	0x1fff1a0c

0000bdf8 <periodicJob>:
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
}

static void periodicJob(uint32_t tick)
{
    bdf8:	b508      	push	{r3, lr}
    bdfa:	4601      	mov	r1, r0
	for(int motor = 0; motor < MOTORS; motor++)
	{
		tmc2208_periodicJob(&TMC2208, tick);
    bdfc:	4803      	ldr	r0, [pc, #12]	; (be0c <periodicJob+0x14>)
    bdfe:	f014 fec9 	bl	20b94 <tmc2208_periodicJob>
		StepDir_periodicJob(motor);
	}
}
    be02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StepDir_periodicJob(motor);
    be06:	2000      	movs	r0, #0
    be08:	f013 bccc 	b.w	1f7a4 <StepDir_periodicJob>
    be0c:	1fff1a0c 	.word	0x1fff1a0c

0000be10 <userFunction>:
{
    be10:	b538      	push	{r3, r4, r5, lr}
    be12:	4604      	mov	r4, r0
    be14:	4615      	mov	r5, r2
    be16:	4608      	mov	r0, r1
	switch(type)
    be18:	b924      	cbnz	r4, be24 <userFunction+0x14>
		*value = StepDir_getStatus(motor);
    be1a:	f013 fd09 	bl	1f830 <StepDir_getStatus>
    be1e:	6028      	str	r0, [r5, #0]
	uint32_t errors = 0;
    be20:	4620      	mov	r0, r4
}
    be22:	bd38      	pop	{r3, r4, r5, pc}
		errors |= TMC_ERROR_TYPE;
    be24:	2004      	movs	r0, #4
	return errors;
    be26:	e7fc      	b.n	be22 <userFunction+0x12>

0000be28 <moveTo>:
{
    be28:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    be2a:	4604      	mov	r4, r0
    be2c:	b918      	cbnz	r0, be36 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    be2e:	f013 fca1 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    be32:	4620      	mov	r0, r4
}
    be34:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    be36:	2008      	movs	r0, #8
    be38:	e7fc      	b.n	be34 <moveTo+0xc>

0000be3a <rotate>:
{
    be3a:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    be3c:	4604      	mov	r4, r0
    be3e:	b918      	cbnz	r0, be48 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    be40:	f013 fc72 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    be44:	4620      	mov	r0, r4
}
    be46:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    be48:	2008      	movs	r0, #8
    be4a:	e7fc      	b.n	be46 <rotate+0xc>

0000be4c <stop>:
	return rotate(motor, 0);
    be4c:	2100      	movs	r1, #0
    be4e:	e7f4      	b.n	be3a <rotate>

0000be50 <left>:
	return rotate(motor, -velocity);
    be50:	4249      	negs	r1, r1
    be52:	e7f2      	b.n	be3a <rotate>

0000be54 <right>:
	return rotate(motor, velocity);
    be54:	e7f1      	b.n	be3a <rotate>

0000be56 <restore>:
	return tmc2208_restore(&TMC2208);
    be56:	4801      	ldr	r0, [pc, #4]	; (be5c <restore+0x6>)
    be58:	f014 bf04 	b.w	20c64 <tmc2208_restore>
    be5c:	1fff1a0c 	.word	0x1fff1a0c

0000be60 <reset>:
{
    be60:	b510      	push	{r4, lr}
	StepDir_init(STEPDIR_PRECISION);
    be62:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    be66:	4c07      	ldr	r4, [pc, #28]	; (be84 <reset+0x24>)
	StepDir_init(STEPDIR_PRECISION);
    be68:	f013 feb4 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    be6c:	2300      	movs	r3, #0
    be6e:	e9d4 12a2 	ldrd	r1, r2, [r4, #648]	; 0x288
    be72:	4618      	mov	r0, r3
    be74:	f013 fd04 	bl	1f880 <StepDir_setPins>
	return tmc2208_reset(&TMC2208);
    be78:	4620      	mov	r0, r4
}
    be7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tmc2208_reset(&TMC2208);
    be7e:	f014 beda 	b.w	20c36 <tmc2208_reset>
    be82:	bf00      	nop
    be84:	1fff1a0c 	.word	0x1fff1a0c

0000be88 <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    be88:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    be8a:	bf04      	itt	eq
    be8c:	4b0c      	ldreq	r3, [pc, #48]	; (bec0 <enableDriver+0x38>)
    be8e:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
    be92:	b938      	cbnz	r0, bea4 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
    be94:	4b0b      	ldr	r3, [pc, #44]	; (bec4 <enableDriver+0x3c>)
    be96:	68db      	ldr	r3, [r3, #12]
    be98:	681b      	ldr	r3, [r3, #0]
    be9a:	695b      	ldr	r3, [r3, #20]
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    be9c:	4a0a      	ldr	r2, [pc, #40]	; (bec8 <enableDriver+0x40>)
    be9e:	f8d2 0284 	ldr.w	r0, [r2, #644]	; 0x284
    bea2:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    bea4:	2801      	cmp	r0, #1
    bea6:	d109      	bne.n	bebc <enableDriver+0x34>
    bea8:	4b05      	ldr	r3, [pc, #20]	; (bec0 <enableDriver+0x38>)
    beaa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    beae:	2b01      	cmp	r3, #1
    beb0:	d104      	bne.n	bebc <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    beb2:	4b04      	ldr	r3, [pc, #16]	; (bec4 <enableDriver+0x3c>)
    beb4:	68db      	ldr	r3, [r3, #12]
    beb6:	681b      	ldr	r3, [r3, #0]
    beb8:	699b      	ldr	r3, [r3, #24]
    beba:	e7ef      	b.n	be9c <enableDriver+0x14>
}
    bebc:	4770      	bx	lr
    bebe:	bf00      	nop
    bec0:	1fff5e88 	.word	0x1fff5e88
    bec4:	00029d1c 	.word	0x00029d1c
    bec8:	1fff1a0c 	.word	0x1fff1a0c

0000becc <deInit>:
{
    becc:	b538      	push	{r3, r4, r5, lr}
	enableDriver(DRIVER_DISABLE);
    bece:	2000      	movs	r0, #0
    bed0:	f7ff ffda 	bl	be88 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
    bed4:	4b14      	ldr	r3, [pc, #80]	; (bf28 <deInit+0x5c>)
    bed6:	4c15      	ldr	r4, [pc, #84]	; (bf2c <deInit+0x60>)
    bed8:	68dd      	ldr	r5, [r3, #12]
    beda:	f8d4 0284 	ldr.w	r0, [r4, #644]	; 0x284
    bede:	682b      	ldr	r3, [r5, #0]
    bee0:	689b      	ldr	r3, [r3, #8]
    bee2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    bee4:	682b      	ldr	r3, [r5, #0]
    bee6:	f8d4 0288 	ldr.w	r0, [r4, #648]	; 0x288
    beea:	689b      	ldr	r3, [r3, #8]
    beec:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    beee:	682b      	ldr	r3, [r5, #0]
    bef0:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    bef4:	689b      	ldr	r3, [r3, #8]
    bef6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS1);
    bef8:	682b      	ldr	r3, [r5, #0]
    befa:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    befe:	689b      	ldr	r3, [r3, #8]
    bf00:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS2);
    bf02:	682b      	ldr	r3, [r5, #0]
    bf04:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    bf08:	689b      	ldr	r3, [r3, #8]
    bf0a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG);
    bf0c:	682b      	ldr	r3, [r5, #0]
    bf0e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    bf12:	689b      	ldr	r3, [r3, #8]
    bf14:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INDEX);
    bf16:	682b      	ldr	r3, [r5, #0]
    bf18:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    bf1c:	689b      	ldr	r3, [r3, #8]
    bf1e:	4798      	blx	r3
}
    bf20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	StepDir_deInit();
    bf24:	f013 bece 	b.w	1fcc4 <StepDir_deInit>
    bf28:	00029d1c 	.word	0x00029d1c
    bf2c:	1fff1a0c 	.word	0x1fff1a0c

0000bf30 <moveBy>:
{
    bf30:	b538      	push	{r3, r4, r5, lr}
    bf32:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    bf34:	4604      	mov	r4, r0
    bf36:	b948      	cbnz	r0, bf4c <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    bf38:	f013 fd9e 	bl	1fa78 <StepDir_getActualPosition>
    bf3c:	6829      	ldr	r1, [r5, #0]
    bf3e:	4401      	add	r1, r0
    bf40:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    bf42:	4620      	mov	r0, r4
    bf44:	f013 fc16 	bl	1f774 <StepDir_moveTo>
    bf48:	4620      	mov	r0, r4
}
    bf4a:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    bf4c:	2008      	movs	r0, #8
    bf4e:	e7fc      	b.n	bf4a <moveBy+0x1a>

0000bf50 <SAP>:
{
    bf50:	b508      	push	{r3, lr}
    bf52:	460b      	mov	r3, r1
    bf54:	4611      	mov	r1, r2
	if(motor >= MOTORS)
    bf56:	b9f3      	cbnz	r3, bf96 <SAP+0x46>
	switch(type)
    bf58:	2805      	cmp	r0, #5
    bf5a:	d81e      	bhi.n	bf9a <SAP+0x4a>
    bf5c:	e8df f000 	tbb	[pc, r0]
    bf60:	1d0c0803 	.word	0x1d0c0803
    bf64:	1710      	.short	0x1710
			StepDir_moveTo(motor, *value);
    bf66:	2000      	movs	r0, #0
    bf68:	f013 fc04 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    bf6c:	2000      	movs	r0, #0
}
    bf6e:	bd08      	pop	{r3, pc}
			StepDir_setActualPosition(motor, *value);
    bf70:	2000      	movs	r0, #0
    bf72:	f013 fd21 	bl	1f9b8 <StepDir_setActualPosition>
    bf76:	e7f9      	b.n	bf6c <SAP+0x1c>
			StepDir_rotate(motor, *value);
    bf78:	2000      	movs	r0, #0
    bf7a:	f013 fbd5 	bl	1f728 <StepDir_rotate>
    bf7e:	e7f5      	b.n	bf6c <SAP+0x1c>
			StepDir_setVelocityMax(motor, abs(*value));
    bf80:	2a00      	cmp	r2, #0
    bf82:	bfb8      	it	lt
    bf84:	4251      	neglt	r1, r2
    bf86:	2000      	movs	r0, #0
    bf88:	f013 fd32 	bl	1f9f0 <StepDir_setVelocityMax>
    bf8c:	e7ee      	b.n	bf6c <SAP+0x1c>
			StepDir_setAcceleration(motor, *value);
    bf8e:	2000      	movs	r0, #0
    bf90:	f013 fee0 	bl	1fd54 <StepDir_setAcceleration>
    bf94:	e7ea      	b.n	bf6c <SAP+0x1c>
		return TMC_ERROR_MOTOR;
    bf96:	2008      	movs	r0, #8
    bf98:	e7e9      	b.n	bf6e <SAP+0x1e>
	if(motor >= MOTORS)
    bf9a:	2004      	movs	r0, #4
	return handleParameter(WRITE, motor, type, &value);
    bf9c:	e7e7      	b.n	bf6e <SAP+0x1e>

0000bf9e <GAP>:
{
    bf9e:	b510      	push	{r4, lr}
    bfa0:	4614      	mov	r4, r2
	if(motor >= MOTORS)
    bfa2:	bb29      	cbnz	r1, bff0 <GAP+0x52>
	switch(type)
    bfa4:	2806      	cmp	r0, #6
    bfa6:	d825      	bhi.n	bff4 <GAP+0x56>
    bfa8:	e8df f000 	tbb	[pc, r0]
    bfac:	120e0a04 	.word	0x120e0a04
    bfb0:	1a16      	.short	0x1a16
    bfb2:	1e          	.byte	0x1e
    bfb3:	00          	.byte	0x00
			*value = StepDir_getTargetPosition(motor);
    bfb4:	2000      	movs	r0, #0
    bfb6:	f013 fd6f 	bl	1fa98 <StepDir_getTargetPosition>
			*value = tmc2208_get_slave(&TMC2208);
    bfba:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    bfbc:	2000      	movs	r0, #0
}
    bfbe:	bd10      	pop	{r4, pc}
			*value = StepDir_getActualPosition(motor);
    bfc0:	2000      	movs	r0, #0
    bfc2:	f013 fd59 	bl	1fa78 <StepDir_getActualPosition>
    bfc6:	e7f8      	b.n	bfba <GAP+0x1c>
			*value = StepDir_getTargetVelocity(motor);
    bfc8:	2000      	movs	r0, #0
    bfca:	f013 fd85 	bl	1fad8 <StepDir_getTargetVelocity>
    bfce:	e7f4      	b.n	bfba <GAP+0x1c>
			*value = StepDir_getActualVelocity(motor);
    bfd0:	2000      	movs	r0, #0
    bfd2:	f013 fd71 	bl	1fab8 <StepDir_getActualVelocity>
    bfd6:	e7f0      	b.n	bfba <GAP+0x1c>
			*value = StepDir_getVelocityMax(motor);
    bfd8:	2000      	movs	r0, #0
    bfda:	f013 fd9d 	bl	1fb18 <StepDir_getVelocityMax>
    bfde:	e7ec      	b.n	bfba <GAP+0x1c>
			*value = StepDir_getAcceleration(motor);
    bfe0:	2000      	movs	r0, #0
    bfe2:	f013 fd89 	bl	1faf8 <StepDir_getAcceleration>
    bfe6:	e7e8      	b.n	bfba <GAP+0x1c>
			*value = tmc2208_get_slave(&TMC2208);
    bfe8:	4803      	ldr	r0, [pc, #12]	; (bff8 <GAP+0x5a>)
    bfea:	f014 fe44 	bl	20c76 <tmc2208_get_slave>
    bfee:	e7e4      	b.n	bfba <GAP+0x1c>
		return TMC_ERROR_MOTOR;
    bff0:	2008      	movs	r0, #8
    bff2:	e7e4      	b.n	bfbe <GAP+0x20>
	if(motor >= MOTORS)
    bff4:	2004      	movs	r0, #4
	return handleParameter(READ, motor, type, value);
    bff6:	e7e2      	b.n	bfbe <GAP+0x20>
    bff8:	1fff1a0c 	.word	0x1fff1a0c

0000bffc <tmc2208_readWriteArray>:
	UART_readWrite(channelToUART(channel), data, writeLength, readLength);
    bffc:	4802      	ldr	r0, [pc, #8]	; (c008 <tmc2208_readWriteArray+0xc>)
    bffe:	b2db      	uxtb	r3, r3
    c000:	f8d0 02a0 	ldr.w	r0, [r0, #672]	; 0x2a0
    c004:	f011 be5c 	b.w	1dcc0 <UART_readWrite>
    c008:	1fff1a0c 	.word	0x1fff1a0c

0000c00c <tmc2208_CRC8>:
	return TMC2208_CRC(data, length);
    c00c:	2201      	movs	r2, #1
    c00e:	f014 b805 	b.w	2001c <tmc_CRC8>

0000c012 <TMC2208_init>:

void TMC2208_init(void)
{
    c012:	b570      	push	{r4, r5, r6, lr}
	tmc_fillCRC8Table(0x07, true, 1);
    c014:	2201      	movs	r2, #1

	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    c016:	4e53      	ldr	r6, [pc, #332]	; (c164 <TMC2208_init+0x152>)
    c018:	4c53      	ldr	r4, [pc, #332]	; (c168 <TMC2208_init+0x156>)
	tmc_fillCRC8Table(0x07, true, 1);
    c01a:	4611      	mov	r1, r2
    c01c:	2007      	movs	r0, #7
    c01e:	f013 ffa3 	bl	1ff68 <tmc_fillCRC8Table>
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    c022:	68f5      	ldr	r5, [r6, #12]
    c024:	686b      	ldr	r3, [r5, #4]
	Pins.STEP     = &HAL.IOs->pins->DIO6;
    c026:	f503 7294 	add.w	r2, r3, #296	; 0x128
    c02a:	f8c4 2288 	str.w	r2, [r4, #648]	; 0x288
	Pins.DIR      = &HAL.IOs->pins->DIO7;
    c02e:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    c032:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
	Pins.MS1      = &HAL.IOs->pins->DIO3;
    c036:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    c03a:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.MS2      = &HAL.IOs->pins->DIO4;
    c03e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    c042:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.MS2      = &HAL.IOs->pins->DIO4;
    c046:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    c04a:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    c04e:	33a8      	adds	r3, #168	; 0xa8
    c050:	f8c4 329c 	str.w	r3, [r4, #668]	; 0x29c

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    c054:	682b      	ldr	r3, [r5, #0]
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    c056:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    c05a:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    c05c:	f8c4 0284 	str.w	r0, [r4, #644]	; 0x284
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    c060:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STEP);
    c062:	682b      	ldr	r3, [r5, #0]
    c064:	f8d4 0288 	ldr.w	r0, [r4, #648]	; 0x288
    c068:	68db      	ldr	r3, [r3, #12]
    c06a:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    c06c:	682b      	ldr	r3, [r5, #0]
    c06e:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    c072:	68db      	ldr	r3, [r3, #12]
    c074:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS1);
    c076:	682b      	ldr	r3, [r5, #0]
    c078:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    c07c:	68db      	ldr	r3, [r3, #12]
    c07e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS2);
    c080:	682b      	ldr	r3, [r5, #0]
    c082:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    c086:	68db      	ldr	r3, [r3, #12]
    c088:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.DIAG);
    c08a:	682b      	ldr	r3, [r5, #0]
    c08c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    c090:	691b      	ldr	r3, [r3, #16]
    c092:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INDEX);
    c094:	682b      	ldr	r3, [r5, #0]
    c096:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    c09a:	691b      	ldr	r3, [r3, #16]
    c09c:	4798      	blx	r3

	TMC2208_UARTChannel = HAL.UART;
    c09e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c0a0:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
	TMC2208_UARTChannel->pinout = UART_PINS_1;
    c0a4:	2500      	movs	r5, #0
    c0a6:	701d      	strb	r5, [r3, #0]
	TMC2208_UARTChannel->rxtx.init();
    c0a8:	685b      	ldr	r3, [r3, #4]
    c0aa:	4798      	blx	r3

	TMC2208_config = Evalboards.ch2.config;
    c0ac:	4b2f      	ldr	r3, [pc, #188]	; (c16c <TMC2208_init+0x15a>)

	Evalboards.ch2.config->reset        = reset;
    c0ae:	4930      	ldr	r1, [pc, #192]	; (c170 <TMC2208_init+0x15e>)
	TMC2208_config = Evalboards.ch2.config;
    c0b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	Evalboards.ch2.config->reset        = reset;
    c0b4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    c0b8:	492e      	ldr	r1, [pc, #184]	; (c174 <TMC2208_init+0x162>)
    c0ba:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
    c0be:	2601      	movs	r6, #1
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    c0c0:	492d      	ldr	r1, [pc, #180]	; (c178 <TMC2208_init+0x166>)
	Evalboards.ch2.config->state        = CONFIG_RESET;
    c0c2:	8016      	strh	r6, [r2, #0]
	Evalboards.ch2.rotate               = rotate;
    c0c4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    c0c8:	492c      	ldr	r1, [pc, #176]	; (c17c <TMC2208_init+0x16a>)
    c0ca:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    c0ce:	492c      	ldr	r1, [pc, #176]	; (c180 <TMC2208_init+0x16e>)
    c0d0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    c0d4:	492b      	ldr	r1, [pc, #172]	; (c184 <TMC2208_init+0x172>)
    c0d6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    c0da:	492b      	ldr	r1, [pc, #172]	; (c188 <TMC2208_init+0x176>)
    c0dc:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    c0e0:	492a      	ldr	r1, [pc, #168]	; (c18c <TMC2208_init+0x17a>)
    c0e2:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    c0e6:	492a      	ldr	r1, [pc, #168]	; (c190 <TMC2208_init+0x17e>)
    c0e8:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    c0ec:	4929      	ldr	r1, [pc, #164]	; (c194 <TMC2208_init+0x182>)
    c0ee:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = tmc2208_writeRegister;
    c0f2:	4929      	ldr	r1, [pc, #164]	; (c198 <TMC2208_init+0x186>)
    c0f4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = tmc2208_readRegister;
    c0f8:	4928      	ldr	r1, [pc, #160]	; (c19c <TMC2208_init+0x18a>)
    c0fa:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	Evalboards.ch2.userFunction         = userFunction;
    c0fe:	4928      	ldr	r1, [pc, #160]	; (c1a0 <TMC2208_init+0x18e>)
    c100:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
    c104:	4927      	ldr	r1, [pc, #156]	; (c1a4 <TMC2208_init+0x192>)
    c106:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
    c10a:	4927      	ldr	r1, [pc, #156]	; (c1a8 <TMC2208_init+0x196>)
    c10c:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    c110:	2032      	movs	r0, #50	; 0x32
    c112:	f44f 71c3 	mov.w	r1, #390	; 0x186
    c116:	e9c3 1021 	strd	r1, r0, [r3, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    c11a:	4924      	ldr	r1, [pc, #144]	; (c1ac <TMC2208_init+0x19a>)
    c11c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	Evalboards.ch2.periodicJob          = periodicJob;
    c120:	4923      	ldr	r1, [pc, #140]	; (c1b0 <TMC2208_init+0x19e>)
	Evalboards.ch2.numberOfMotors       = MOTORS;
    c122:	f883 608c 	strb.w	r6, [r3, #140]	; 0x8c
	Evalboards.ch2.periodicJob          = periodicJob;
    c126:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0

	tmc2208_init(&TMC2208, 0, TMC2208_config, &tmc2208_defaultRegisterResetState[0]);
    c12a:	4620      	mov	r0, r4
    c12c:	4629      	mov	r1, r5
    c12e:	4b21      	ldr	r3, [pc, #132]	; (c1b4 <TMC2208_init+0x1a2>)
    c130:	f014 fd14 	bl	20b5c <tmc2208_init>

	StepDir_init(STEPDIR_PRECISION);
    c134:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c138:	f013 fd4c 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    c13c:	e9d4 12a2 	ldrd	r1, r2, [r4, #648]	; 0x288
    c140:	462b      	mov	r3, r5
    c142:	4628      	mov	r0, r5
    c144:	f013 fb9c 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 51200);
    c148:	4628      	mov	r0, r5
    c14a:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    c14e:	f013 fc4f 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 51200);
    c152:	4628      	mov	r0, r5
    c154:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    c158:	f013 fdfc 	bl	1fd54 <StepDir_setAcceleration>

	enableDriver(DRIVER_ENABLE);
    c15c:	4630      	mov	r0, r6
};
    c15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	enableDriver(DRIVER_ENABLE);
    c162:	e691      	b.n	be88 <enableDriver>
    c164:	00029d1c 	.word	0x00029d1c
    c168:	1fff1a0c 	.word	0x1fff1a0c
    c16c:	1fff5e88 	.word	0x1fff5e88
    c170:	0000be61 	.word	0x0000be61
    c174:	0000be57 	.word	0x0000be57
    c178:	0000be3b 	.word	0x0000be3b
    c17c:	0000be55 	.word	0x0000be55
    c180:	0000be51 	.word	0x0000be51
    c184:	0000be4d 	.word	0x0000be4d
    c188:	0000bf9f 	.word	0x0000bf9f
    c18c:	0000bf51 	.word	0x0000bf51
    c190:	0000be29 	.word	0x0000be29
    c194:	0000bf31 	.word	0x0000bf31
    c198:	0000bdd9 	.word	0x0000bdd9
    c19c:	0000bde5 	.word	0x0000bde5
    c1a0:	0000be11 	.word	0x0000be11
    c1a4:	0000be89 	.word	0x0000be89
    c1a8:	0000bdc9 	.word	0x0000bdc9
    c1ac:	0000becd 	.word	0x0000becd
    c1b0:	0000bdf9 	.word	0x0000bdf9
    c1b4:	000284d8 	.word	0x000284d8

0000c1b8 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
    c1b8:	4b02      	ldr	r3, [pc, #8]	; (c1c4 <checkErrors+0xc>)
    c1ba:	2200      	movs	r2, #0
    c1bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    c1c0:	4770      	bx	lr
    c1c2:	bf00      	nop
    c1c4:	1fff5e88 	.word	0x1fff5e88

0000c1c8 <tmc2209_writeRegister>:
	tmc2209_writeInt(motorToIC(motor), address, value);
    c1c8:	4801      	ldr	r0, [pc, #4]	; (c1d0 <tmc2209_writeRegister+0x8>)
    c1ca:	f014 bd57 	b.w	20c7c <tmc2209_writeInt>
    c1ce:	bf00      	nop
    c1d0:	1fff1cbc 	.word	0x1fff1cbc

0000c1d4 <tmc2209_readRegister>:
{
    c1d4:	b510      	push	{r4, lr}
	*value = tmc2209_readInt(motorToIC(motor), address);
    c1d6:	4803      	ldr	r0, [pc, #12]	; (c1e4 <tmc2209_readRegister+0x10>)
{
    c1d8:	4614      	mov	r4, r2
	*value = tmc2209_readInt(motorToIC(motor), address);
    c1da:	f014 fd86 	bl	20cea <tmc2209_readInt>
    c1de:	6020      	str	r0, [r4, #0]
}
    c1e0:	bd10      	pop	{r4, pc}
    c1e2:	bf00      	nop
    c1e4:	1fff1cbc 	.word	0x1fff1cbc

0000c1e8 <periodicJob>:
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.ENN);
}

static void periodicJob(uint32_t tick)
{
    c1e8:	b508      	push	{r3, lr}
    c1ea:	4601      	mov	r1, r0
	tmc2209_periodicJob(&TMC2209, tick);
    c1ec:	4803      	ldr	r0, [pc, #12]	; (c1fc <periodicJob+0x14>)
    c1ee:	f014 fddf 	bl	20db0 <tmc2209_periodicJob>
	StepDir_periodicJob(0);
}
    c1f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	StepDir_periodicJob(0);
    c1f6:	2000      	movs	r0, #0
    c1f8:	f013 bad4 	b.w	1f7a4 <StepDir_periodicJob>
    c1fc:	1fff1cbc 	.word	0x1fff1cbc

0000c200 <userFunction>:
{
    c200:	b510      	push	{r4, lr}
    c202:	460b      	mov	r3, r1
    c204:	4614      	mov	r4, r2
    c206:	2806      	cmp	r0, #6
    c208:	d86a      	bhi.n	c2e0 <userFunction+0xe0>
    c20a:	e8df f000 	tbb	[pc, r0]
    c20e:	0904      	.short	0x0904
    c210:	281b130f 	.word	0x281b130f
    c214:	4a          	.byte	0x4a
    c215:	00          	.byte	0x00
		*value = StepDir_getStatus(motor);
    c216:	4608      	mov	r0, r1
    c218:	f013 fb0a 	bl	1f830 <StepDir_getStatus>
		*value = (uint32_t) HAL.IOs->config->getState(pin);
    c21c:	6020      	str	r0, [r4, #0]
    c21e:	e003      	b.n	c228 <userFunction+0x28>
		tmc2209_set_slave(motorToIC(motor), (*value) & 0xFF);
    c220:	7821      	ldrb	r1, [r4, #0]
    c222:	4830      	ldr	r0, [pc, #192]	; (c2e4 <userFunction+0xe4>)
    c224:	f014 fe38 	bl	20e98 <tmc2209_set_slave>
	uint32_t errors = 0;
    c228:	2000      	movs	r0, #0
}
    c22a:	bd10      	pop	{r4, pc}
		*value = tmc2209_get_slave(motorToIC(motor));
    c22c:	482d      	ldr	r0, [pc, #180]	; (c2e4 <userFunction+0xe4>)
    c22e:	f014 fe30 	bl	20e92 <tmc2209_get_slave>
    c232:	e7f3      	b.n	c21c <userFunction+0x1c>
		*value = Timer.getDuty(TIMER_CHANNEL_3) * 100 / TIMER_MAX;
    c234:	4b2c      	ldr	r3, [pc, #176]	; (c2e8 <userFunction+0xe8>)
    c236:	2002      	movs	r0, #2
    c238:	68db      	ldr	r3, [r3, #12]
    c23a:	4798      	blx	r3
    c23c:	2350      	movs	r3, #80	; 0x50
    c23e:	fbb0 f0f3 	udiv	r0, r0, r3
    c242:	e7eb      	b.n	c21c <userFunction+0x1c>
		Timer.setDuty(TIMER_CHANNEL_3, (uint32_t) ((uint32_t)(*value) * (uint32_t)TIMER_MAX) / (uint32_t)100);
    c244:	6823      	ldr	r3, [r4, #0]
    c246:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    c24a:	4359      	muls	r1, r3
    c24c:	2364      	movs	r3, #100	; 0x64
    c24e:	fbb1 f1f3 	udiv	r1, r1, r3
    c252:	4b25      	ldr	r3, [pc, #148]	; (c2e8 <userFunction+0xe8>)
    c254:	b289      	uxth	r1, r1
    c256:	689b      	ldr	r3, [r3, #8]
    c258:	2002      	movs	r0, #2
    c25a:	4798      	blx	r3
		break;
    c25c:	e7e4      	b.n	c228 <userFunction+0x28>
		state = (*value) & 0x03;
    c25e:	6821      	ldr	r1, [r4, #0]
		pin = Pins.ENN;
    c260:	4a20      	ldr	r2, [pc, #128]	; (c2e4 <userFunction+0xe4>)
    c262:	3b01      	subs	r3, #1
    c264:	f8d2 0288 	ldr.w	r0, [r2, #648]	; 0x288
		state = (*value) & 0x03;
    c268:	f001 0103 	and.w	r1, r1, #3
		switch(motor) {
    c26c:	2b04      	cmp	r3, #4
    c26e:	d806      	bhi.n	c27e <userFunction+0x7e>
    c270:	e8df f003 	tbb	[pc, r3]
    c274:	110e0b03 	.word	0x110e0b03
    c278:	14          	.byte	0x14
    c279:	00          	.byte	0x00
			pin = Pins.SPREAD;
    c27a:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
		HAL.IOs->config->setToState(pin, state);
    c27e:	4b1b      	ldr	r3, [pc, #108]	; (c2ec <userFunction+0xec>)
    c280:	68db      	ldr	r3, [r3, #12]
    c282:	681b      	ldr	r3, [r3, #0]
    c284:	69db      	ldr	r3, [r3, #28]
    c286:	4798      	blx	r3
		break;
    c288:	e7ce      	b.n	c228 <userFunction+0x28>
			pin = Pins.MS1_AD0;
    c28a:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
			break;
    c28e:	e7f6      	b.n	c27e <userFunction+0x7e>
			pin = Pins.MS2_AD1;
    c290:	f8d2 029c 	ldr.w	r0, [r2, #668]	; 0x29c
			break;
    c294:	e7f3      	b.n	c27e <userFunction+0x7e>
			pin = Pins.UC_PWM;
    c296:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
			break;
    c29a:	e7f0      	b.n	c27e <userFunction+0x7e>
			pin = Pins.STDBY;
    c29c:	f8d2 02ac 	ldr.w	r0, [r2, #684]	; 0x2ac
			break;
    c2a0:	e7ed      	b.n	c27e <userFunction+0x7e>
		pin = Pins.ENN;
    c2a2:	4a10      	ldr	r2, [pc, #64]	; (c2e4 <userFunction+0xe4>)
    c2a4:	1e4b      	subs	r3, r1, #1
    c2a6:	f8d2 0288 	ldr.w	r0, [r2, #648]	; 0x288
		switch(motor) {
    c2aa:	2b04      	cmp	r3, #4
    c2ac:	d806      	bhi.n	c2bc <userFunction+0xbc>
    c2ae:	e8df f003 	tbb	[pc, r3]
    c2b2:	0b03      	.short	0x0b03
    c2b4:	110e      	.short	0x110e
    c2b6:	14          	.byte	0x14
    c2b7:	00          	.byte	0x00
			pin = Pins.SPREAD;
    c2b8:	f8d2 028c 	ldr.w	r0, [r2, #652]	; 0x28c
		*value = (uint32_t) HAL.IOs->config->getState(pin);
    c2bc:	4b0b      	ldr	r3, [pc, #44]	; (c2ec <userFunction+0xec>)
    c2be:	68db      	ldr	r3, [r3, #12]
    c2c0:	681b      	ldr	r3, [r3, #0]
    c2c2:	6a1b      	ldr	r3, [r3, #32]
    c2c4:	4798      	blx	r3
    c2c6:	e7a9      	b.n	c21c <userFunction+0x1c>
			pin = Pins.MS1_AD0;
    c2c8:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
			break;
    c2cc:	e7f6      	b.n	c2bc <userFunction+0xbc>
			pin = Pins.MS2_AD1;
    c2ce:	f8d2 029c 	ldr.w	r0, [r2, #668]	; 0x29c
			break;
    c2d2:	e7f3      	b.n	c2bc <userFunction+0xbc>
			pin = Pins.UC_PWM;
    c2d4:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
			break;
    c2d8:	e7f0      	b.n	c2bc <userFunction+0xbc>
			pin = Pins.STDBY;
    c2da:	f8d2 02ac 	ldr.w	r0, [r2, #684]	; 0x2ac
			break;
    c2de:	e7ed      	b.n	c2bc <userFunction+0xbc>
	uint32_t errors = 0;
    c2e0:	2004      	movs	r0, #4
	return errors;
    c2e2:	e7a2      	b.n	c22a <userFunction+0x2a>
    c2e4:	1fff1cbc 	.word	0x1fff1cbc
    c2e8:	1fff0ae0 	.word	0x1fff0ae0
    c2ec:	00029d1c 	.word	0x00029d1c

0000c2f0 <moveTo>:
{
    c2f0:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    c2f2:	4604      	mov	r4, r0
    c2f4:	b918      	cbnz	r0, c2fe <moveTo+0xe>
	StepDir_moveTo(motor, position);
    c2f6:	f013 fa3d 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    c2fa:	4620      	mov	r0, r4
}
    c2fc:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    c2fe:	2008      	movs	r0, #8
    c300:	e7fc      	b.n	c2fc <moveTo+0xc>

0000c302 <rotate>:
{
    c302:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    c304:	4604      	mov	r4, r0
    c306:	b918      	cbnz	r0, c310 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    c308:	f013 fa0e 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    c30c:	4620      	mov	r0, r4
}
    c30e:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    c310:	2008      	movs	r0, #8
    c312:	e7fc      	b.n	c30e <rotate+0xc>

0000c314 <stop>:
	return rotate(motor, 0);
    c314:	2100      	movs	r1, #0
    c316:	e7f4      	b.n	c302 <rotate>

0000c318 <left>:
	return rotate(motor, -velocity);
    c318:	4249      	negs	r1, r1
    c31a:	e7f2      	b.n	c302 <rotate>

0000c31c <right>:
	return rotate(motor, velocity);
    c31c:	e7f1      	b.n	c302 <rotate>

0000c31e <handleParameter>:
{
    c31e:	b570      	push	{r4, r5, r6, lr}
    c320:	4604      	mov	r4, r0
    c322:	461d      	mov	r5, r3
	if(motor >= MOTORS)
    c324:	460e      	mov	r6, r1
    c326:	2900      	cmp	r1, #0
    c328:	f040 8364 	bne.w	c9f4 <handleParameter+0x6d6>
	switch(type)
    c32c:	2ace      	cmp	r2, #206	; 0xce
    c32e:	d80c      	bhi.n	c34a <handleParameter+0x2c>
    c330:	2aa1      	cmp	r2, #161	; 0xa1
    c332:	d80c      	bhi.n	c34e <handleParameter+0x30>
    c334:	2a1d      	cmp	r2, #29
    c336:	d96b      	bls.n	c410 <handleParameter+0xf2>
    c338:	2a33      	cmp	r2, #51	; 0x33
    c33a:	f000 8169 	beq.w	c610 <handleParameter+0x2f2>
    c33e:	2a8c      	cmp	r2, #140	; 0x8c
    c340:	f000 816f 	beq.w	c622 <handleParameter+0x304>
    c344:	2a32      	cmp	r2, #50	; 0x32
    c346:	f000 815a 	beq.w	c5fe <handleParameter+0x2e0>
			errors |= TMC_ERROR_TYPE;
    c34a:	2404      	movs	r4, #4
    c34c:	e0a6      	b.n	c49c <handleParameter+0x17e>
    c34e:	3aa2      	subs	r2, #162	; 0xa2
    c350:	2a2c      	cmp	r2, #44	; 0x2c
    c352:	d8fa      	bhi.n	c34a <handleParameter+0x2c>
    c354:	a301      	add	r3, pc, #4	; (adr r3, c35c <handleParameter+0x3e>)
    c356:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c35a:	bf00      	nop
    c35c:	0000c6b1 	.word	0x0000c6b1
    c360:	0000c34b 	.word	0x0000c34b
    c364:	0000c34b 	.word	0x0000c34b
    c368:	0000c6d3 	.word	0x0000c6d3
    c36c:	0000c711 	.word	0x0000c711
    c370:	0000c78b 	.word	0x0000c78b
    c374:	0000c7af 	.word	0x0000c7af
    c378:	0000c7dd 	.word	0x0000c7dd
    c37c:	0000c7ff 	.word	0x0000c7ff
    c380:	0000c821 	.word	0x0000c821
    c384:	0000c843 	.word	0x0000c843
    c388:	0000c34b 	.word	0x0000c34b
    c38c:	0000c85d 	.word	0x0000c85d
    c390:	0000c34b 	.word	0x0000c34b
    c394:	0000c34b 	.word	0x0000c34b
    c398:	0000c34b 	.word	0x0000c34b
    c39c:	0000c34b 	.word	0x0000c34b
    c3a0:	0000c86f 	.word	0x0000c86f
    c3a4:	0000c891 	.word	0x0000c891
    c3a8:	0000c8a5 	.word	0x0000c8a5
    c3ac:	0000c8d7 	.word	0x0000c8d7
    c3b0:	0000c34b 	.word	0x0000c34b
    c3b4:	0000c34b 	.word	0x0000c34b
    c3b8:	0000c34b 	.word	0x0000c34b
    c3bc:	0000c90d 	.word	0x0000c90d
    c3c0:	0000c931 	.word	0x0000c931
    c3c4:	0000c34b 	.word	0x0000c34b
    c3c8:	0000c34b 	.word	0x0000c34b
    c3cc:	0000c34b 	.word	0x0000c34b
    c3d0:	0000c973 	.word	0x0000c973
    c3d4:	0000c9a5 	.word	0x0000c9a5
    c3d8:	0000c34b 	.word	0x0000c34b
    c3dc:	0000c34b 	.word	0x0000c34b
    c3e0:	0000c34b 	.word	0x0000c34b
    c3e4:	0000c34b 	.word	0x0000c34b
    c3e8:	0000c34b 	.word	0x0000c34b
    c3ec:	0000c34b 	.word	0x0000c34b
    c3f0:	0000c34b 	.word	0x0000c34b
    c3f4:	0000c34b 	.word	0x0000c34b
    c3f8:	0000c34b 	.word	0x0000c34b
    c3fc:	0000c34b 	.word	0x0000c34b
    c400:	0000c34b 	.word	0x0000c34b
    c404:	0000c9c9 	.word	0x0000c9c9
    c408:	0000c34b 	.word	0x0000c34b
    c40c:	0000c9eb 	.word	0x0000c9eb
    c410:	2a1d      	cmp	r2, #29
    c412:	d89a      	bhi.n	c34a <handleParameter+0x2c>
    c414:	a301      	add	r3, pc, #4	; (adr r3, c41c <handleParameter+0xfe>)
    c416:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c41a:	bf00      	nop
    c41c:	0000c495 	.word	0x0000c495
    c420:	0000c4ad 	.word	0x0000c4ad
    c424:	0000c4bf 	.word	0x0000c4bf
    c428:	0000c4d1 	.word	0x0000c4d1
    c42c:	0000c4dd 	.word	0x0000c4dd
    c430:	0000c4f5 	.word	0x0000c4f5
    c434:	0000c507 	.word	0x0000c507
    c438:	0000c533 	.word	0x0000c533
    c43c:	0000c555 	.word	0x0000c555
    c440:	0000c34b 	.word	0x0000c34b
    c444:	0000c34b 	.word	0x0000c34b
    c448:	0000c34b 	.word	0x0000c34b
    c44c:	0000c34b 	.word	0x0000c34b
    c450:	0000c34b 	.word	0x0000c34b
    c454:	0000c34b 	.word	0x0000c34b
    c458:	0000c34b 	.word	0x0000c34b
    c45c:	0000c34b 	.word	0x0000c34b
    c460:	0000c34b 	.word	0x0000c34b
    c464:	0000c34b 	.word	0x0000c34b
    c468:	0000c34b 	.word	0x0000c34b
    c46c:	0000c34b 	.word	0x0000c34b
    c470:	0000c34b 	.word	0x0000c34b
    c474:	0000c34b 	.word	0x0000c34b
    c478:	0000c565 	.word	0x0000c565
    c47c:	0000c34b 	.word	0x0000c34b
    c480:	0000c34b 	.word	0x0000c34b
    c484:	0000c34b 	.word	0x0000c34b
    c488:	0000c34b 	.word	0x0000c34b
    c48c:	0000c5a5 	.word	0x0000c5a5
    c490:	0000c5cf 	.word	0x0000c5cf
		if(readWrite == READ) {
    c494:	b920      	cbnz	r0, c4a0 <handleParameter+0x182>
			*value = StepDir_getTargetPosition(motor);
    c496:	f013 faff 	bl	1fa98 <StepDir_getTargetPosition>
			*value = StepDir_getActualPosition(motor);
    c49a:	6028      	str	r0, [r5, #0]
}
    c49c:	4620      	mov	r0, r4
    c49e:	bd70      	pop	{r4, r5, r6, pc}
			StepDir_moveTo(motor, *value);
    c4a0:	6829      	ldr	r1, [r5, #0]
    c4a2:	2000      	movs	r0, #0
    c4a4:	f013 f966 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    c4a8:	2400      	movs	r4, #0
    c4aa:	e7f7      	b.n	c49c <handleParameter+0x17e>
		if(readWrite == READ) {
    c4ac:	b910      	cbnz	r0, c4b4 <handleParameter+0x196>
			*value = StepDir_getActualPosition(motor);
    c4ae:	f013 fae3 	bl	1fa78 <StepDir_getActualPosition>
    c4b2:	e7f2      	b.n	c49a <handleParameter+0x17c>
			StepDir_setActualPosition(motor, *value);
    c4b4:	6829      	ldr	r1, [r5, #0]
    c4b6:	2000      	movs	r0, #0
    c4b8:	f013 fa7e 	bl	1f9b8 <StepDir_setActualPosition>
    c4bc:	e7f4      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c4be:	b910      	cbnz	r0, c4c6 <handleParameter+0x1a8>
			*value = StepDir_getTargetVelocity(motor);
    c4c0:	f013 fb0a 	bl	1fad8 <StepDir_getTargetVelocity>
    c4c4:	e7e9      	b.n	c49a <handleParameter+0x17c>
			StepDir_rotate(motor, *value);
    c4c6:	6829      	ldr	r1, [r5, #0]
    c4c8:	2000      	movs	r0, #0
    c4ca:	f013 f92d 	bl	1f728 <StepDir_rotate>
    c4ce:	e7eb      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c4d0:	2800      	cmp	r0, #0
    c4d2:	f47f af3a 	bne.w	c34a <handleParameter+0x2c>
			*value = StepDir_getActualVelocity(motor);
    c4d6:	f013 faef 	bl	1fab8 <StepDir_getActualVelocity>
    c4da:	e7de      	b.n	c49a <handleParameter+0x17c>
		if(readWrite == READ) {
    c4dc:	b910      	cbnz	r0, c4e4 <handleParameter+0x1c6>
			*value = StepDir_getVelocityMax(motor);
    c4de:	f013 fb1b 	bl	1fb18 <StepDir_getVelocityMax>
    c4e2:	e7da      	b.n	c49a <handleParameter+0x17c>
			StepDir_setVelocityMax(motor, abs(*value));
    c4e4:	6829      	ldr	r1, [r5, #0]
    c4e6:	2900      	cmp	r1, #0
    c4e8:	bfb8      	it	lt
    c4ea:	4249      	neglt	r1, r1
    c4ec:	2000      	movs	r0, #0
    c4ee:	f013 fa7f 	bl	1f9f0 <StepDir_setVelocityMax>
    c4f2:	e7d9      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c4f4:	b910      	cbnz	r0, c4fc <handleParameter+0x1de>
			*value = StepDir_getAcceleration(motor);
    c4f6:	f013 faff 	bl	1faf8 <StepDir_getAcceleration>
    c4fa:	e7ce      	b.n	c49a <handleParameter+0x17c>
			StepDir_setAcceleration(motor, *value);
    c4fc:	6829      	ldr	r1, [r5, #0]
    c4fe:	2000      	movs	r0, #0
    c500:	f013 fc28 	bl	1fd54 <StepDir_setAcceleration>
    c504:	e7d0      	b.n	c4a8 <handleParameter+0x18a>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
    c506:	48b3      	ldr	r0, [pc, #716]	; (c7d4 <handleParameter+0x4b6>)
    c508:	2110      	movs	r1, #16
		if(readWrite == READ) {
    c50a:	b924      	cbnz	r4, c516 <handleParameter+0x1f8>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT);
    c50c:	f014 fbed 	bl	20cea <tmc2209_readInt>
    c510:	f3c0 2004 	ubfx	r0, r0, #8, #5
    c514:	e7c1      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IRUN_MASK, TMC2209_IRUN_SHIFT, *value);
    c516:	f014 fbe8 	bl	20cea <tmc2209_readInt>
    c51a:	682b      	ldr	r3, [r5, #0]
    c51c:	021b      	lsls	r3, r3, #8
    c51e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    c522:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
    c526:	431a      	orrs	r2, r3
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, *value);
    c528:	2110      	movs	r1, #16
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, *value);
    c52a:	48aa      	ldr	r0, [pc, #680]	; (c7d4 <handleParameter+0x4b6>)
    c52c:	f014 fba6 	bl	20c7c <tmc2209_writeInt>
    c530:	e7ba      	b.n	c4a8 <handleParameter+0x18a>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
    c532:	48a8      	ldr	r0, [pc, #672]	; (c7d4 <handleParameter+0x4b6>)
    c534:	2110      	movs	r1, #16
		if(readWrite == READ) {
    c536:	b924      	cbnz	r4, c542 <handleParameter+0x224>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT);
    c538:	f014 fbd7 	bl	20cea <tmc2209_readInt>
    c53c:	f000 001f 	and.w	r0, r0, #31
    c540:	e7ab      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_IHOLD_IRUN, TMC2209_IHOLD_MASK, TMC2209_IHOLD_SHIFT, *value);
    c542:	f014 fbd2 	bl	20cea <tmc2209_readInt>
    c546:	682a      	ldr	r2, [r5, #0]
    c548:	f020 001f 	bic.w	r0, r0, #31
    c54c:	f002 021f 	and.w	r2, r2, #31
    c550:	4302      	orrs	r2, r0
    c552:	e7e9      	b.n	c528 <handleParameter+0x20a>
		if(readWrite == READ) {
    c554:	2800      	cmp	r0, #0
    c556:	f47f aef8 	bne.w	c34a <handleParameter+0x2c>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    c55a:	f013 f969 	bl	1f830 <StepDir_getStatus>
    c55e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    c562:	e79a      	b.n	c49a <handleParameter+0x17c>
		if(readWrite == READ) {
    c564:	499b      	ldr	r1, [pc, #620]	; (c7d4 <handleParameter+0x4b6>)
    c566:	489c      	ldr	r0, [pc, #624]	; (c7d8 <handleParameter+0x4ba>)
    c568:	b96c      	cbnz	r4, c586 <handleParameter+0x268>
			buffer = thigh;
    c56a:	f8d1 32b0 	ldr.w	r3, [r1, #688]	; 0x2b0
			*value = MIN(0xFFFFF, (1<<24) / ((buffer) ? buffer : 1));
    c56e:	2b00      	cmp	r3, #0
    c570:	bf08      	it	eq
    c572:	2301      	moveq	r3, #1
    c574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c578:	fb92 f3f3 	sdiv	r3, r2, r3
			*value = MIN(0xFFFFF, (1<<24) / ((buffer) ? buffer : 1));
    c57c:	4298      	cmp	r0, r3
    c57e:	bfd4      	ite	le
    c580:	6028      	strle	r0, [r5, #0]
    c582:	602b      	strgt	r3, [r5, #0]
    c584:	e78a      	b.n	c49c <handleParameter+0x17e>
			*value = MIN(0xFFFFF, (1<<24) / ((*value) ? *value : 1));
    c586:	682a      	ldr	r2, [r5, #0]
    c588:	2a00      	cmp	r2, #0
    c58a:	bf08      	it	eq
    c58c:	2201      	moveq	r2, #1
    c58e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c592:	fb93 f3f2 	sdiv	r3, r3, r2
    c596:	4283      	cmp	r3, r0
    c598:	bfa8      	it	ge
    c59a:	4603      	movge	r3, r0
    c59c:	602b      	str	r3, [r5, #0]
			thigh = *value;
    c59e:	f8c1 32b0 	str.w	r3, [r1, #688]	; 0x2b0
    c5a2:	e781      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c5a4:	b930      	cbnz	r0, c5b4 <handleParameter+0x296>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT);
    c5a6:	4601      	mov	r1, r0
    c5a8:	488a      	ldr	r0, [pc, #552]	; (c7d4 <handleParameter+0x4b6>)
    c5aa:	f014 fb9e 	bl	20cea <tmc2209_readInt>
    c5ae:	f3c0 0040 	ubfx	r0, r0, #1, #1
    c5b2:	e772      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_GCONF, TMC2209_INTERNAL_RSENSE_MASK, TMC2209_INTERNAL_RSENSE_SHIFT, *value);
    c5b4:	4887      	ldr	r0, [pc, #540]	; (c7d4 <handleParameter+0x4b6>)
    c5b6:	2100      	movs	r1, #0
    c5b8:	f014 fb97 	bl	20cea <tmc2209_readInt>
    c5bc:	682b      	ldr	r3, [r5, #0]
    c5be:	005b      	lsls	r3, r3, #1
    c5c0:	f003 0302 	and.w	r3, r3, #2
    c5c4:	f020 0202 	bic.w	r2, r0, #2
    c5c8:	431a      	orrs	r2, r3
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT, (*value > 0) ? 0 : 1);
    c5ca:	2100      	movs	r1, #0
    c5cc:	e7ad      	b.n	c52a <handleParameter+0x20c>
		if(readWrite == READ) {
    c5ce:	2800      	cmp	r0, #0
    c5d0:	f47f aebb 	bne.w	c34a <handleParameter+0x2c>
			buffer = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2209_FIELD_READ(motorToIC(motor), TMC2209_TSTEP, TMC2209_TSTEP_MASK, TMC2209_TSTEP_SHIFT));
    c5d4:	f013 facc 	bl	1fb70 <StepDir_getFrequency>
    c5d8:	2112      	movs	r1, #18
    c5da:	4606      	mov	r6, r0
    c5dc:	487d      	ldr	r0, [pc, #500]	; (c7d4 <handleParameter+0x4b6>)
    c5de:	f014 fb84 	bl	20cea <tmc2209_readInt>
    c5e2:	f3c0 0213 	ubfx	r2, r0, #0, #20
    c5e6:	207a      	movs	r0, #122	; 0x7a
    c5e8:	17d3      	asrs	r3, r2, #31
    c5ea:	fba6 0100 	umull	r0, r1, r6, r0
    c5ee:	f01b f979 	bl	278e4 <__aeabi_ldivmod>
			*value = (abs(buffer) < 20) ? 0 : buffer;
    c5f2:	f100 0313 	add.w	r3, r0, #19
    c5f6:	2b26      	cmp	r3, #38	; 0x26
    c5f8:	bf98      	it	ls
    c5fa:	2000      	movls	r0, #0
    c5fc:	e74d      	b.n	c49a <handleParameter+0x17c>
		if(readWrite == READ) {
    c5fe:	b910      	cbnz	r0, c606 <handleParameter+0x2e8>
			*value = StepDir_getMode(motor);
    c600:	f013 faa8 	bl	1fb54 <StepDir_getMode>
    c604:	e749      	b.n	c49a <handleParameter+0x17c>
			StepDir_setMode(motor, *value);
    c606:	7819      	ldrb	r1, [r3, #0]
    c608:	4630      	mov	r0, r6
    c60a:	f013 fa0d 	bl	1fa28 <StepDir_setMode>
    c60e:	e74b      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c610:	b910      	cbnz	r0, c618 <handleParameter+0x2fa>
			*value = StepDir_getFrequency(motor);
    c612:	f013 faad 	bl	1fb70 <StepDir_getFrequency>
    c616:	e740      	b.n	c49a <handleParameter+0x17c>
			StepDir_setFrequency(motor, *value);
    c618:	6819      	ldr	r1, [r3, #0]
    c61a:	4630      	mov	r0, r6
    c61c:	f013 fa14 	bl	1fa48 <StepDir_setFrequency>
    c620:	e742      	b.n	c4a8 <handleParameter+0x18a>
		if(readWrite == READ) {
    c622:	b948      	cbnz	r0, c638 <handleParameter+0x31a>
			*value = 256 >> TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT);
    c624:	486b      	ldr	r0, [pc, #428]	; (c7d4 <handleParameter+0x4b6>)
    c626:	216c      	movs	r1, #108	; 0x6c
    c628:	f014 fb5f 	bl	20cea <tmc2209_readInt>
    c62c:	f3c0 6303 	ubfx	r3, r0, #24, #4
    c630:	f44f 7080 	mov.w	r0, #256	; 0x100
    c634:	4118      	asrs	r0, r3
    c636:	e730      	b.n	c49a <handleParameter+0x17c>
			switch(*value)
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	2b10      	cmp	r3, #16
    c63c:	d030      	beq.n	c6a0 <handleParameter+0x382>
    c63e:	dc0a      	bgt.n	c656 <handleParameter+0x338>
    c640:	3b01      	subs	r3, #1
    c642:	2b07      	cmp	r3, #7
    c644:	d80e      	bhi.n	c664 <handleParameter+0x346>
    c646:	2b07      	cmp	r3, #7
    c648:	d80c      	bhi.n	c664 <handleParameter+0x346>
    c64a:	e8df f003 	tbb	[pc, r3]
    c64e:	2315      	.short	0x2315
    c650:	0b0b250b 	.word	0x0b0b250b
    c654:	270b      	.short	0x270b
    c656:	2b80      	cmp	r3, #128	; 0x80
    c658:	d028      	beq.n	c6ac <handleParameter+0x38e>
    c65a:	dc08      	bgt.n	c66e <handleParameter+0x350>
    c65c:	2b20      	cmp	r3, #32
    c65e:	d021      	beq.n	c6a4 <handleParameter+0x386>
    c660:	2b40      	cmp	r3, #64	; 0x40
    c662:	d021      	beq.n	c6a8 <handleParameter+0x38a>
			default:   *value = -1;  break;
    c664:	f04f 33ff 	mov.w	r3, #4294967295
    c668:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    c66a:	2410      	movs	r4, #16
    c66c:	e716      	b.n	c49c <handleParameter+0x17e>
    c66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    c672:	d1f7      	bne.n	c664 <handleParameter+0x346>
			case 256:  *value = 0;   break;
    c674:	2300      	movs	r3, #0
    c676:	e000      	b.n	c67a <handleParameter+0x35c>
			case 1:    *value = 8;   break;
    c678:	2308      	movs	r3, #8
			case 256:  *value = 0;   break;
    c67a:	602b      	str	r3, [r5, #0]
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, *value);
    c67c:	4855      	ldr	r0, [pc, #340]	; (c7d4 <handleParameter+0x4b6>)
    c67e:	216c      	movs	r1, #108	; 0x6c
    c680:	f014 fb33 	bl	20cea <tmc2209_readInt>
    c684:	682b      	ldr	r3, [r5, #0]
    c686:	061b      	lsls	r3, r3, #24
    c688:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c68c:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
    c690:	431a      	orrs	r2, r3
    c692:	e08a      	b.n	c7aa <handleParameter+0x48c>
			case 2:    *value = 7;   break;
    c694:	2307      	movs	r3, #7
    c696:	e7f0      	b.n	c67a <handleParameter+0x35c>
			case 4:    *value = 6;   break;
    c698:	2306      	movs	r3, #6
    c69a:	e7ee      	b.n	c67a <handleParameter+0x35c>
			case 8:    *value = 5;   break;
    c69c:	2305      	movs	r3, #5
    c69e:	e7ec      	b.n	c67a <handleParameter+0x35c>
			case 16:   *value = 4;   break;
    c6a0:	2304      	movs	r3, #4
    c6a2:	e7ea      	b.n	c67a <handleParameter+0x35c>
			case 32:   *value = 3;   break;
    c6a4:	2303      	movs	r3, #3
    c6a6:	e7e8      	b.n	c67a <handleParameter+0x35c>
			case 64:   *value = 2;   break;
    c6a8:	2302      	movs	r3, #2
    c6aa:	e7e6      	b.n	c67a <handleParameter+0x35c>
			case 128:  *value = 1;   break;
    c6ac:	2301      	movs	r3, #1
    c6ae:	e7e4      	b.n	c67a <handleParameter+0x35c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
    c6b0:	4848      	ldr	r0, [pc, #288]	; (c7d4 <handleParameter+0x4b6>)
    c6b2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    c6b4:	b924      	cbnz	r4, c6c0 <handleParameter+0x3a2>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT);
    c6b6:	f014 fb18 	bl	20cea <tmc2209_readInt>
    c6ba:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    c6be:	e6ec      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_TBL_MASK, TMC2209_TBL_SHIFT, *value);
    c6c0:	f014 fb13 	bl	20cea <tmc2209_readInt>
    c6c4:	682b      	ldr	r3, [r5, #0]
    c6c6:	03db      	lsls	r3, r3, #15
    c6c8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    c6cc:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
    c6d0:	e7de      	b.n	c690 <handleParameter+0x372>
		if(readWrite == READ) {
    c6d2:	2800      	cmp	r0, #0
    c6d4:	f47f ae39 	bne.w	c34a <handleParameter+0x2c>
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c6d8:	216c      	movs	r1, #108	; 0x6c
    c6da:	483e      	ldr	r0, [pc, #248]	; (c7d4 <handleParameter+0x4b6>)
    c6dc:	f014 fb05 	bl	20cea <tmc2209_readInt>
    c6e0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HEND_MASK, TMC2209_HEND_SHIFT);
    c6e4:	f04f 016c 	mov.w	r1, #108	; 0x6c
    c6e8:	483a      	ldr	r0, [pc, #232]	; (c7d4 <handleParameter+0x4b6>)
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c6ea:	d004      	beq.n	c6f6 <handleParameter+0x3d8>
				*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HEND_MASK, TMC2209_HEND_SHIFT);
    c6ec:	f014 fafd 	bl	20cea <tmc2209_readInt>
    c6f0:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    c6f4:	e6d1      	b.n	c49a <handleParameter+0x17c>
				buffer = tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF);
    c6f6:	f014 faf8 	bl	20cea <tmc2209_readInt>
				*value = (tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) >> 4) & 0x07;
    c6fa:	216c      	movs	r1, #108	; 0x6c
				buffer = tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF);
    c6fc:	4606      	mov	r6, r0
				*value = (tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) >> 4) & 0x07;
    c6fe:	4835      	ldr	r0, [pc, #212]	; (c7d4 <handleParameter+0x4b6>)
    c700:	f014 faf3 	bl	20cea <tmc2209_readInt>
    c704:	f3c0 1302 	ubfx	r3, r0, #4, #3
				if(buffer & (1<<11))
    c708:	0532      	lsls	r2, r6, #20
    c70a:	d41b      	bmi.n	c744 <handleParameter+0x426>
				*value = (tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) >> 4) & 0x07;
    c70c:	602b      	str	r3, [r5, #0]
    c70e:	e6cb      	b.n	c4a8 <handleParameter+0x18a>
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c710:	4830      	ldr	r0, [pc, #192]	; (c7d4 <handleParameter+0x4b6>)
    c712:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    c714:	b9d4      	cbnz	r4, c74c <handleParameter+0x42e>
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c716:	f014 fae8 	bl	20cea <tmc2209_readInt>
    c71a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HSTRT_MASK, TMC2209_HSTRT_SHIFT);
    c71e:	f04f 016c 	mov.w	r1, #108	; 0x6c
    c722:	482c      	ldr	r0, [pc, #176]	; (c7d4 <handleParameter+0x4b6>)
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c724:	d004      	beq.n	c730 <handleParameter+0x412>
				*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HSTRT_MASK, TMC2209_HSTRT_SHIFT);
    c726:	f014 fae0 	bl	20cea <tmc2209_readInt>
    c72a:	f3c0 1002 	ubfx	r0, r0, #4, #3
    c72e:	e6b4      	b.n	c49a <handleParameter+0x17c>
				buffer = tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF);
    c730:	f014 fadb 	bl	20cea <tmc2209_readInt>
				*value = (tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) >> 7) & 0x0F;
    c734:	216c      	movs	r1, #108	; 0x6c
				buffer = tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF);
    c736:	4606      	mov	r6, r0
				*value = (tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) >> 7) & 0x0F;
    c738:	4826      	ldr	r0, [pc, #152]	; (c7d4 <handleParameter+0x4b6>)
    c73a:	f014 fad6 	bl	20cea <tmc2209_readInt>
    c73e:	f3c0 13c3 	ubfx	r3, r0, #7, #4
				if(buffer & (1<<11))
    c742:	e7e1      	b.n	c708 <handleParameter+0x3ea>
					*value |= 1<<3;
    c744:	f043 0308 	orr.w	r3, r3, #8
    c748:	602b      	str	r3, [r5, #0]
    c74a:	e6a7      	b.n	c49c <handleParameter+0x17e>
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c74c:	f014 facd 	bl	20cea <tmc2209_readInt>
    c750:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HSTRT_MASK, TMC2209_HSTRT_SHIFT, *value);
    c754:	f04f 016c 	mov.w	r1, #108	; 0x6c
    c758:	481e      	ldr	r0, [pc, #120]	; (c7d4 <handleParameter+0x4b6>)
			if(tmc2209_readInt(motorToIC(motor), TMC2209_CHOPCONF) & (1<<14))
    c75a:	d008      	beq.n	c76e <handleParameter+0x450>
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HSTRT_MASK, TMC2209_HSTRT_SHIFT, *value);
    c75c:	f014 fac5 	bl	20cea <tmc2209_readInt>
    c760:	682b      	ldr	r3, [r5, #0]
    c762:	011b      	lsls	r3, r3, #4
    c764:	f003 0370 	and.w	r3, r3, #112	; 0x70
    c768:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    c76c:	e790      	b.n	c690 <handleParameter+0x372>
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_HEND_MASK, TMC2209_HEND_SHIFT, *value);
    c76e:	f014 fabc 	bl	20cea <tmc2209_readInt>
    c772:	682b      	ldr	r3, [r5, #0]
    c774:	01db      	lsls	r3, r3, #7
    c776:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    c77a:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    c77e:	431a      	orrs	r2, r3
    c780:	4814      	ldr	r0, [pc, #80]	; (c7d4 <handleParameter+0x4b6>)
    c782:	216c      	movs	r1, #108	; 0x6c
    c784:	f014 fa7a 	bl	20c7c <tmc2209_writeInt>
    c788:	e688      	b.n	c49c <handleParameter+0x17e>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT);
    c78a:	4812      	ldr	r0, [pc, #72]	; (c7d4 <handleParameter+0x4b6>)
    c78c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    c78e:	b924      	cbnz	r4, c79a <handleParameter+0x47c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT);
    c790:	f014 faab 	bl	20cea <tmc2209_readInt>
    c794:	f000 000f 	and.w	r0, r0, #15
    c798:	e67f      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_TOFF_MASK, TMC2209_TOFF_SHIFT, *value);
    c79a:	f014 faa6 	bl	20cea <tmc2209_readInt>
    c79e:	682a      	ldr	r2, [r5, #0]
    c7a0:	f020 000f 	bic.w	r0, r0, #15
    c7a4:	f002 020f 	and.w	r2, r2, #15
    c7a8:	4302      	orrs	r2, r0
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_MRES_MASK, TMC2209_MRES_SHIFT, *value);
    c7aa:	216c      	movs	r1, #108	; 0x6c
    c7ac:	e6bd      	b.n	c52a <handleParameter+0x20c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
    c7ae:	4809      	ldr	r0, [pc, #36]	; (c7d4 <handleParameter+0x4b6>)
    c7b0:	2142      	movs	r1, #66	; 0x42
		if(readWrite == READ) {
    c7b2:	b924      	cbnz	r4, c7be <handleParameter+0x4a0>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT);
    c7b4:	f014 fa99 	bl	20cea <tmc2209_readInt>
    c7b8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    c7bc:	e66d      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEIMIN_MASK, TMC2209_SEIMIN_SHIFT, *value);
    c7be:	f014 fa94 	bl	20cea <tmc2209_readInt>
    c7c2:	682b      	ldr	r3, [r5, #0]
    c7c4:	03db      	lsls	r3, r3, #15
    c7c6:	b29b      	uxth	r3, r3
    c7c8:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEDN_MASK, TMC2209_SEDN_SHIFT, *value);
    c7cc:	431a      	orrs	r2, r3
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, *value);
    c7ce:	2142      	movs	r1, #66	; 0x42
    c7d0:	e6ab      	b.n	c52a <handleParameter+0x20c>
    c7d2:	bf00      	nop
    c7d4:	1fff1cbc 	.word	0x1fff1cbc
    c7d8:	000fffff 	.word	0x000fffff
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEDN_MASK, TMC2209_SEDN_SHIFT);
    c7dc:	4886      	ldr	r0, [pc, #536]	; (c9f8 <handleParameter+0x6da>)
    c7de:	2142      	movs	r1, #66	; 0x42
		if(readWrite == READ) {
    c7e0:	b924      	cbnz	r4, c7ec <handleParameter+0x4ce>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEDN_MASK, TMC2209_SEDN_SHIFT);
    c7e2:	f014 fa82 	bl	20cea <tmc2209_readInt>
    c7e6:	f3c0 3041 	ubfx	r0, r0, #13, #2
    c7ea:	e656      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEDN_MASK, TMC2209_SEDN_SHIFT, *value);
    c7ec:	f014 fa7d 	bl	20cea <tmc2209_readInt>
    c7f0:	682b      	ldr	r3, [r5, #0]
    c7f2:	035b      	lsls	r3, r3, #13
    c7f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    c7f8:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
    c7fc:	e7e6      	b.n	c7cc <handleParameter+0x4ae>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT);
    c7fe:	487e      	ldr	r0, [pc, #504]	; (c9f8 <handleParameter+0x6da>)
    c800:	2142      	movs	r1, #66	; 0x42
		if(readWrite == READ) {
    c802:	b924      	cbnz	r4, c80e <handleParameter+0x4f0>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT);
    c804:	f014 fa71 	bl	20cea <tmc2209_readInt>
    c808:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c80c:	e645      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMAX_MASK, TMC2209_SEMAX_SHIFT, *value);
    c80e:	f014 fa6c 	bl	20cea <tmc2209_readInt>
    c812:	682b      	ldr	r3, [r5, #0]
    c814:	021b      	lsls	r3, r3, #8
    c816:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    c81a:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
    c81e:	e7d5      	b.n	c7cc <handleParameter+0x4ae>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEUP_MASK, TMC2209_SEUP_SHIFT);
    c820:	4875      	ldr	r0, [pc, #468]	; (c9f8 <handleParameter+0x6da>)
    c822:	2142      	movs	r1, #66	; 0x42
		if(readWrite == READ) {
    c824:	b924      	cbnz	r4, c830 <handleParameter+0x512>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEUP_MASK, TMC2209_SEUP_SHIFT);
    c826:	f014 fa60 	bl	20cea <tmc2209_readInt>
    c82a:	f3c0 1041 	ubfx	r0, r0, #5, #2
    c82e:	e634      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEUP_MASK, TMC2209_SEUP_SHIFT, *value);
    c830:	f014 fa5b 	bl	20cea <tmc2209_readInt>
    c834:	682b      	ldr	r3, [r5, #0]
    c836:	015b      	lsls	r3, r3, #5
    c838:	f003 0360 	and.w	r3, r3, #96	; 0x60
    c83c:	f020 0260 	bic.w	r2, r0, #96	; 0x60
    c840:	e7c4      	b.n	c7cc <handleParameter+0x4ae>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT);
    c842:	486d      	ldr	r0, [pc, #436]	; (c9f8 <handleParameter+0x6da>)
    c844:	2142      	movs	r1, #66	; 0x42
		if(readWrite == READ) {
    c846:	2c00      	cmp	r4, #0
    c848:	d0a2      	beq.n	c790 <handleParameter+0x472>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_COOLCONF, TMC2209_SEMIN_MASK, TMC2209_SEMIN_SHIFT, *value);
    c84a:	f014 fa4e 	bl	20cea <tmc2209_readInt>
    c84e:	682a      	ldr	r2, [r5, #0]
    c850:	f020 000f 	bic.w	r0, r0, #15
    c854:	f002 020f 	and.w	r2, r2, #15
    c858:	4302      	orrs	r2, r0
    c85a:	e7b8      	b.n	c7ce <handleParameter+0x4b0>
		if(readWrite == READ) {
    c85c:	b920      	cbnz	r0, c868 <handleParameter+0x54a>
			*value = tmc2209_readInt(motorToIC(motor), TMC2209_SGTHRS);
    c85e:	2140      	movs	r1, #64	; 0x40
			*value = tmc2209_readInt(motorToIC(motor), TMC2209_SG_RESULT);
    c860:	4865      	ldr	r0, [pc, #404]	; (c9f8 <handleParameter+0x6da>)
    c862:	f014 fa42 	bl	20cea <tmc2209_readInt>
    c866:	e618      	b.n	c49a <handleParameter+0x17c>
			tmc2209_writeInt(motorToIC(motor), TMC2209_SGTHRS, *value);
    c868:	682a      	ldr	r2, [r5, #0]
    c86a:	2140      	movs	r1, #64	; 0x40
    c86c:	e65d      	b.n	c52a <handleParameter+0x20c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_VSENSE_MASK, TMC2209_VSENSE_SHIFT);
    c86e:	4862      	ldr	r0, [pc, #392]	; (c9f8 <handleParameter+0x6da>)
    c870:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    c872:	b924      	cbnz	r4, c87e <handleParameter+0x560>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_VSENSE_MASK, TMC2209_VSENSE_SHIFT);
    c874:	f014 fa39 	bl	20cea <tmc2209_readInt>
    c878:	f3c0 4040 	ubfx	r0, r0, #17, #1
    c87c:	e60d      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_CHOPCONF, TMC2209_VSENSE_MASK, TMC2209_VSENSE_SHIFT, *value);
    c87e:	f014 fa34 	bl	20cea <tmc2209_readInt>
    c882:	682b      	ldr	r3, [r5, #0]
    c884:	045b      	lsls	r3, r3, #17
    c886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    c88a:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
    c88e:	e6ff      	b.n	c690 <handleParameter+0x372>
		if(readWrite == READ) {
    c890:	2800      	cmp	r0, #0
    c892:	f47f ad5a 	bne.w	c34a <handleParameter+0x2c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_DRVSTATUS, TMC2209_CS_ACTUAL_MASK, TMC2209_CS_ACTUAL_SHIFT);
    c896:	4858      	ldr	r0, [pc, #352]	; (c9f8 <handleParameter+0x6da>)
    c898:	216f      	movs	r1, #111	; 0x6f
    c89a:	f014 fa26 	bl	20cea <tmc2209_readInt>
    c89e:	f3c0 4004 	ubfx	r0, r0, #16, #5
    c8a2:	e5fa      	b.n	c49a <handleParameter+0x17c>
		if(readWrite == READ) {
    c8a4:	b910      	cbnz	r0, c8ac <handleParameter+0x58e>
			*value = StepDir_getStallGuardThreshold(motor);
    c8a6:	f013 f947 	bl	1fb38 <StepDir_getStallGuardThreshold>
    c8aa:	e5f6      	b.n	c49a <handleParameter+0x17c>
			StepDir_setStallGuardThreshold(motor, *value);
    c8ac:	6829      	ldr	r1, [r5, #0]
    c8ae:	2000      	movs	r0, #0
    c8b0:	f013 f8ac 	bl	1fa0c <StepDir_setStallGuardThreshold>
			*value -= (*value) >> 3;
    c8b4:	682b      	ldr	r3, [r5, #0]
    c8b6:	4951      	ldr	r1, [pc, #324]	; (c9fc <handleParameter+0x6de>)
			if (*value)
    c8b8:	ebb3 03e3 	subs.w	r3, r3, r3, asr #3
    c8bc:	d009      	beq.n	c8d2 <handleParameter+0x5b4>
				*value = MIN(0x000FFFFF, (1<<24) / (*value));
    c8be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c8c2:	fb92 f2f3 	sdiv	r2, r2, r3
    c8c6:	428a      	cmp	r2, r1
    c8c8:	bfa8      	it	ge
    c8ca:	460a      	movge	r2, r1
			*value = MIN(0xFFFFF, (1<<24) / ((*value) ? *value : 1));
    c8cc:	602a      	str	r2, [r5, #0]
			tmc2209_writeInt(motorToIC(motor), TMC2209_TCOOLTHRS, *value);
    c8ce:	2114      	movs	r1, #20
    c8d0:	e62b      	b.n	c52a <handleParameter+0x20c>
				*value = 0x000FFFFF;
    c8d2:	460a      	mov	r2, r1
    c8d4:	e7fa      	b.n	c8cc <handleParameter+0x5ae>
		if(readWrite == READ) {
    c8d6:	b960      	cbnz	r0, c8f2 <handleParameter+0x5d4>
			buffer = tmc2209_readInt(motorToIC(motor), TMC2209_TCOOLTHRS);
    c8d8:	2114      	movs	r1, #20
			buffer = tmc2209_readInt(motorToIC(motor), TMC2209_TPWMTHRS);
    c8da:	4847      	ldr	r0, [pc, #284]	; (c9f8 <handleParameter+0x6da>)
    c8dc:	f014 fa05 	bl	20cea <tmc2209_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer) ? buffer : 1));
    c8e0:	2800      	cmp	r0, #0
    c8e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c8e6:	bf08      	it	eq
    c8e8:	2001      	moveq	r0, #1
    c8ea:	fb93 f0f0 	sdiv	r0, r3, r0
    c8ee:	4b43      	ldr	r3, [pc, #268]	; (c9fc <handleParameter+0x6de>)
    c8f0:	e644      	b.n	c57c <handleParameter+0x25e>
			*value = MIN(0xFFFFF, (1<<24) / ((*value) ? *value : 1));
    c8f2:	682b      	ldr	r3, [r5, #0]
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	bf08      	it	eq
    c8f8:	2301      	moveq	r3, #1
    c8fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c8fe:	fb92 f2f3 	sdiv	r2, r2, r3
    c902:	4b3e      	ldr	r3, [pc, #248]	; (c9fc <handleParameter+0x6de>)
    c904:	429a      	cmp	r2, r3
    c906:	bfa8      	it	ge
    c908:	461a      	movge	r2, r3
    c90a:	e7df      	b.n	c8cc <handleParameter+0x5ae>
		if(readWrite == READ) {
    c90c:	b908      	cbnz	r0, c912 <handleParameter+0x5f4>
			buffer = tmc2209_readInt(motorToIC(motor), TMC2209_TPWMTHRS);
    c90e:	2113      	movs	r1, #19
    c910:	e7e3      	b.n	c8da <handleParameter+0x5bc>
			*value = MIN(0xFFFFF, (1<<24) / ((*value) ? *value : 1));
    c912:	682b      	ldr	r3, [r5, #0]
    c914:	2b00      	cmp	r3, #0
    c916:	bf08      	it	eq
    c918:	2301      	moveq	r3, #1
    c91a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c91e:	fb92 f2f3 	sdiv	r2, r2, r3
    c922:	4b36      	ldr	r3, [pc, #216]	; (c9fc <handleParameter+0x6de>)
    c924:	429a      	cmp	r2, r3
    c926:	bfa8      	it	ge
    c928:	461a      	movge	r2, r3
    c92a:	602a      	str	r2, [r5, #0]
			tmc2209_writeInt(motorToIC(motor), TMC2209_TPWMTHRS, *value);
    c92c:	2113      	movs	r1, #19
    c92e:	e5fc      	b.n	c52a <handleParameter+0x20c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
    c930:	4831      	ldr	r0, [pc, #196]	; (c9f8 <handleParameter+0x6da>)
    c932:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    c934:	b924      	cbnz	r4, c940 <handleParameter+0x622>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT);
    c936:	f014 f9d8 	bl	20cea <tmc2209_readInt>
    c93a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c93e:	e5ac      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_GRAD_MASK, TMC2209_PWM_GRAD_SHIFT, *value);
    c940:	f014 f9d3 	bl	20cea <tmc2209_readInt>
    c944:	682b      	ldr	r3, [r5, #0]
    c946:	021b      	lsls	r3, r3, #8
    c948:	b29b      	uxth	r3, r3
    c94a:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
    c94e:	431a      	orrs	r2, r3
    c950:	4829      	ldr	r0, [pc, #164]	; (c9f8 <handleParameter+0x6da>)
    c952:	2170      	movs	r1, #112	; 0x70
    c954:	f014 f992 	bl	20c7c <tmc2209_writeInt>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_GCONF, TMC2209_EN_SPREADCYCLE_MASK, TMC2209_EN_SPREADCYCLE_SHIFT, (*value > 0) ? 0 : 1);
    c958:	4827      	ldr	r0, [pc, #156]	; (c9f8 <handleParameter+0x6da>)
    c95a:	2100      	movs	r1, #0
    c95c:	f014 f9c5 	bl	20cea <tmc2209_readInt>
    c960:	682b      	ldr	r3, [r5, #0]
    c962:	2b00      	cmp	r3, #0
    c964:	f020 0004 	bic.w	r0, r0, #4
    c968:	bfd4      	ite	le
    c96a:	2204      	movle	r2, #4
    c96c:	2200      	movgt	r2, #0
    c96e:	4302      	orrs	r2, r0
    c970:	e62b      	b.n	c5ca <handleParameter+0x2ac>
		if(readWrite == READ) {
    c972:	b930      	cbnz	r0, c982 <handleParameter+0x664>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT);
    c974:	4820      	ldr	r0, [pc, #128]	; (c9f8 <handleParameter+0x6da>)
    c976:	2170      	movs	r1, #112	; 0x70
    c978:	f014 f9b7 	bl	20cea <tmc2209_readInt>
    c97c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    c980:	e58b      	b.n	c49a <handleParameter+0x17c>
			if(*value >= 0 && *value < 4)
    c982:	682b      	ldr	r3, [r5, #0]
    c984:	2b03      	cmp	r3, #3
    c986:	f63f ae70 	bhi.w	c66a <handleParameter+0x34c>
				TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_FREQ_MASK, TMC2209_PWM_FREQ_SHIFT, *value);
    c98a:	481b      	ldr	r0, [pc, #108]	; (c9f8 <handleParameter+0x6da>)
    c98c:	2170      	movs	r1, #112	; 0x70
    c98e:	f014 f9ac 	bl	20cea <tmc2209_readInt>
    c992:	682b      	ldr	r3, [r5, #0]
    c994:	041b      	lsls	r3, r3, #16
    c996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    c99a:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, TMC2209_FREEWHEEL_SHIFT, *value);
    c99e:	431a      	orrs	r2, r3
    c9a0:	2170      	movs	r1, #112	; 0x70
    c9a2:	e5c2      	b.n	c52a <handleParameter+0x20c>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
    c9a4:	4814      	ldr	r0, [pc, #80]	; (c9f8 <handleParameter+0x6da>)
    c9a6:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    c9a8:	b924      	cbnz	r4, c9b4 <handleParameter+0x696>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT);
    c9aa:	f014 f99e 	bl	20cea <tmc2209_readInt>
    c9ae:	f3c0 4080 	ubfx	r0, r0, #18, #1
    c9b2:	e572      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_PWMCONF, TMC2209_PWM_AUTOSCALE_MASK, TMC2209_PWM_AUTOSCALE_SHIFT, (*value)? 1:0);
    c9b4:	f014 f999 	bl	20cea <tmc2209_readInt>
    c9b8:	682b      	ldr	r3, [r5, #0]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    c9c0:	bf18      	it	ne
    c9c2:	f44f 2380 	movne.w	r3, #262144	; 0x40000
    c9c6:	e7ea      	b.n	c99e <handleParameter+0x680>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, TMC2209_FREEWHEEL_SHIFT);
    c9c8:	480b      	ldr	r0, [pc, #44]	; (c9f8 <handleParameter+0x6da>)
    c9ca:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    c9cc:	b924      	cbnz	r4, c9d8 <handleParameter+0x6ba>
			*value = TMC2209_FIELD_READ(motorToIC(motor), TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, TMC2209_FREEWHEEL_SHIFT);
    c9ce:	f014 f98c 	bl	20cea <tmc2209_readInt>
    c9d2:	f3c0 5001 	ubfx	r0, r0, #20, #2
    c9d6:	e560      	b.n	c49a <handleParameter+0x17c>
			TMC2209_FIELD_UPDATE(motorToIC(motor), TMC2209_PWMCONF, TMC2209_FREEWHEEL_MASK, TMC2209_FREEWHEEL_SHIFT, *value);
    c9d8:	f014 f987 	bl	20cea <tmc2209_readInt>
    c9dc:	682b      	ldr	r3, [r5, #0]
    c9de:	051b      	lsls	r3, r3, #20
    c9e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    c9e4:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
    c9e8:	e7d9      	b.n	c99e <handleParameter+0x680>
		if(readWrite == READ) {
    c9ea:	2800      	cmp	r0, #0
    c9ec:	f47f acad 	bne.w	c34a <handleParameter+0x2c>
			*value = tmc2209_readInt(motorToIC(motor), TMC2209_SG_RESULT);
    c9f0:	2141      	movs	r1, #65	; 0x41
    c9f2:	e735      	b.n	c860 <handleParameter+0x542>
		return TMC_ERROR_MOTOR;
    c9f4:	2408      	movs	r4, #8
    c9f6:	e551      	b.n	c49c <handleParameter+0x17e>
    c9f8:	1fff1cbc 	.word	0x1fff1cbc
    c9fc:	000fffff 	.word	0x000fffff

0000ca00 <SAP>:
{
    ca00:	b507      	push	{r0, r1, r2, lr}
    ca02:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    ca04:	ab01      	add	r3, sp, #4
    ca06:	4602      	mov	r2, r0
    ca08:	2001      	movs	r0, #1
    ca0a:	f7ff fc88 	bl	c31e <handleParameter>
}
    ca0e:	b003      	add	sp, #12
    ca10:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca14 <GAP>:
{
    ca14:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    ca16:	4602      	mov	r2, r0
    ca18:	2000      	movs	r0, #0
    ca1a:	e480      	b.n	c31e <handleParameter>

0000ca1c <restore>:
	return tmc2209_restore(&TMC2209);
    ca1c:	4801      	ldr	r0, [pc, #4]	; (ca24 <restore+0x8>)
    ca1e:	f014 ba2f 	b.w	20e80 <tmc2209_restore>
    ca22:	bf00      	nop
    ca24:	1fff1cbc 	.word	0x1fff1cbc

0000ca28 <reset>:
{
    ca28:	b510      	push	{r4, lr}
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);
    ca2a:	4c08      	ldr	r4, [pc, #32]	; (ca4c <reset+0x24>)
	StepDir_init(STEPDIR_PRECISION);
    ca2c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    ca30:	f013 f8d0 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);
    ca34:	e9d4 12a4 	ldrd	r1, r2, [r4, #656]	; 0x290
    ca38:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
    ca3c:	2000      	movs	r0, #0
    ca3e:	f012 ff1f 	bl	1f880 <StepDir_setPins>
	return tmc2209_reset(&TMC2209);
    ca42:	4620      	mov	r0, r4
}
    ca44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tmc2209_reset(&TMC2209);
    ca48:	f014 ba03 	b.w	20e52 <tmc2209_reset>
    ca4c:	1fff1cbc 	.word	0x1fff1cbc

0000ca50 <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    ca50:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    ca52:	bf04      	itt	eq
    ca54:	4b0c      	ldreq	r3, [pc, #48]	; (ca88 <enableDriver+0x38>)
    ca56:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
    ca5a:	b938      	cbnz	r0, ca6c <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.ENN);
    ca5c:	4b0b      	ldr	r3, [pc, #44]	; (ca8c <enableDriver+0x3c>)
    ca5e:	68db      	ldr	r3, [r3, #12]
    ca60:	681b      	ldr	r3, [r3, #0]
    ca62:	695b      	ldr	r3, [r3, #20]
		HAL.IOs->config->setLow(Pins.ENN);
    ca64:	4a0a      	ldr	r2, [pc, #40]	; (ca90 <enableDriver+0x40>)
    ca66:	f8d2 0288 	ldr.w	r0, [r2, #648]	; 0x288
    ca6a:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    ca6c:	2801      	cmp	r0, #1
    ca6e:	d109      	bne.n	ca84 <enableDriver+0x34>
    ca70:	4b05      	ldr	r3, [pc, #20]	; (ca88 <enableDriver+0x38>)
    ca72:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    ca76:	2b01      	cmp	r3, #1
    ca78:	d104      	bne.n	ca84 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.ENN);
    ca7a:	4b04      	ldr	r3, [pc, #16]	; (ca8c <enableDriver+0x3c>)
    ca7c:	68db      	ldr	r3, [r3, #12]
    ca7e:	681b      	ldr	r3, [r3, #0]
    ca80:	699b      	ldr	r3, [r3, #24]
    ca82:	e7ef      	b.n	ca64 <enableDriver+0x14>
}
    ca84:	4770      	bx	lr
    ca86:	bf00      	nop
    ca88:	1fff5e88 	.word	0x1fff5e88
    ca8c:	00029d1c 	.word	0x00029d1c
    ca90:	1fff1cbc 	.word	0x1fff1cbc

0000ca94 <deInit>:
{
    ca94:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
    ca96:	2000      	movs	r0, #0
    ca98:	f7ff ffda 	bl	ca50 <enableDriver>
	HAL.IOs->config->reset(Pins.ENN);
    ca9c:	4b1d      	ldr	r3, [pc, #116]	; (cb14 <deInit+0x80>)
    ca9e:	4c1e      	ldr	r4, [pc, #120]	; (cb18 <deInit+0x84>)
    caa0:	68dd      	ldr	r5, [r3, #12]
    caa2:	f8d4 0288 	ldr.w	r0, [r4, #648]	; 0x288
    caa6:	682b      	ldr	r3, [r5, #0]
    caa8:	689b      	ldr	r3, [r3, #8]
    caaa:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SPREAD);
    caac:	682b      	ldr	r3, [r5, #0]
    caae:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    cab2:	689b      	ldr	r3, [r3, #8]
    cab4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    cab6:	682b      	ldr	r3, [r5, #0]
    cab8:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    cabc:	689b      	ldr	r3, [r3, #8]
    cabe:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    cac0:	682b      	ldr	r3, [r5, #0]
    cac2:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    cac6:	689b      	ldr	r3, [r3, #8]
    cac8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS1_AD0);
    caca:	682b      	ldr	r3, [r5, #0]
    cacc:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    cad0:	689b      	ldr	r3, [r3, #8]
    cad2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS2_AD1);
    cad4:	682b      	ldr	r3, [r5, #0]
    cad6:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    cada:	689b      	ldr	r3, [r3, #8]
    cadc:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG);
    cade:	682b      	ldr	r3, [r5, #0]
    cae0:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    cae4:	689b      	ldr	r3, [r3, #8]
    cae6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INDEX);
    cae8:	682b      	ldr	r3, [r5, #0]
    caea:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    caee:	689b      	ldr	r3, [r3, #8]
    caf0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STDBY);
    caf2:	682b      	ldr	r3, [r5, #0]
    caf4:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    caf8:	689b      	ldr	r3, [r3, #8]
    cafa:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.UC_PWM);
    cafc:	682b      	ldr	r3, [r5, #0]
    cafe:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    cb02:	689b      	ldr	r3, [r3, #8]
    cb04:	4798      	blx	r3
	StepDir_deInit();
    cb06:	f013 f8dd 	bl	1fcc4 <StepDir_deInit>
	Timer.deInit();
    cb0a:	4b04      	ldr	r3, [pc, #16]	; (cb1c <deInit+0x88>)
}
    cb0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.deInit();
    cb10:	685b      	ldr	r3, [r3, #4]
    cb12:	4718      	bx	r3
    cb14:	00029d1c 	.word	0x00029d1c
    cb18:	1fff1cbc 	.word	0x1fff1cbc
    cb1c:	1fff0ae0 	.word	0x1fff0ae0

0000cb20 <moveBy>:
{
    cb20:	b538      	push	{r3, r4, r5, lr}
    cb22:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    cb24:	4604      	mov	r4, r0
    cb26:	b948      	cbnz	r0, cb3c <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    cb28:	f012 ffa6 	bl	1fa78 <StepDir_getActualPosition>
    cb2c:	6829      	ldr	r1, [r5, #0]
    cb2e:	4401      	add	r1, r0
    cb30:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    cb32:	4620      	mov	r0, r4
    cb34:	f012 fe1e 	bl	1f774 <StepDir_moveTo>
    cb38:	4620      	mov	r0, r4
}
    cb3a:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    cb3c:	2008      	movs	r0, #8
    cb3e:	e7fc      	b.n	cb3a <moveBy+0x1a>

0000cb40 <tmc2209_readWriteArray>:
	UART_readWrite(channelToUART(channel), data, writeLength, readLength);
    cb40:	4802      	ldr	r0, [pc, #8]	; (cb4c <tmc2209_readWriteArray+0xc>)
    cb42:	b2db      	uxtb	r3, r3
    cb44:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
    cb48:	f011 b8ba 	b.w	1dcc0 <UART_readWrite>
    cb4c:	1fff1cbc 	.word	0x1fff1cbc

0000cb50 <tmc2209_CRC8>:
	return TMC2209_CRC(data, length);
    cb50:	2201      	movs	r2, #1
    cb52:	f013 ba63 	b.w	2001c <tmc_CRC8>

0000cb56 <TMC2209_init>:

void TMC2209_init(void)
{
    cb56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	tmc_fillCRC8Table(0x07, true, 1);
	thigh = 0;

	Pins.ENN      = &HAL.IOs->pins->DIO0;
    cb58:	4f6b      	ldr	r7, [pc, #428]	; (cd08 <TMC2209_init+0x1b2>)
	thigh = 0;
    cb5a:	4c6c      	ldr	r4, [pc, #432]	; (cd0c <TMC2209_init+0x1b6>)
	tmc_fillCRC8Table(0x07, true, 1);
    cb5c:	2201      	movs	r2, #1
    cb5e:	4611      	mov	r1, r2
    cb60:	2007      	movs	r0, #7
    cb62:	f013 fa01 	bl	1ff68 <tmc_fillCRC8Table>
	Pins.ENN      = &HAL.IOs->pins->DIO0;
    cb66:	68fd      	ldr	r5, [r7, #12]
    cb68:	686b      	ldr	r3, [r5, #4]
	Pins.SPREAD   = &HAL.IOs->pins->DIO8;
    cb6a:	f503 72b4 	add.w	r2, r3, #360	; 0x168
    cb6e:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
	Pins.STEP     = &HAL.IOs->pins->DIO6;
    cb72:	f503 7294 	add.w	r2, r3, #296	; 0x128
    cb76:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.DIR      = &HAL.IOs->pins->DIO7;
    cb7a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    cb7e:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.MS1_AD0  = &HAL.IOs->pins->DIO3;
    cb82:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    cb86:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
	Pins.MS2_AD1  = &HAL.IOs->pins->DIO4;
    cb8a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
    cb8e:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    cb92:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.ENN      = &HAL.IOs->pins->DIO0;
    cb96:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    cb9a:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    cb9e:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
	Pins.UC_PWM   = &HAL.IOs->pins->DIO9;
    cba2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
	Pins.STDBY    = &HAL.IOs->pins->DIO0;
    cba6:	e9c4 30aa 	strd	r3, r0, [r4, #680]	; 0x2a8

	HAL.IOs->config->toOutput(Pins.ENN);
    cbaa:	682b      	ldr	r3, [r5, #0]
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    cbac:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
	thigh = 0;
    cbb0:	2600      	movs	r6, #0
	HAL.IOs->config->toOutput(Pins.ENN);
    cbb2:	68db      	ldr	r3, [r3, #12]
	thigh = 0;
    cbb4:	f8c4 62b0 	str.w	r6, [r4, #688]	; 0x2b0
	Pins.ENN      = &HAL.IOs->pins->DIO0;
    cbb8:	f8c4 0288 	str.w	r0, [r4, #648]	; 0x288
	HAL.IOs->config->toOutput(Pins.ENN);
    cbbc:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SPREAD);
    cbbe:	682b      	ldr	r3, [r5, #0]
    cbc0:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    cbc4:	68db      	ldr	r3, [r3, #12]
    cbc6:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STEP);
    cbc8:	682b      	ldr	r3, [r5, #0]
    cbca:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    cbce:	68db      	ldr	r3, [r3, #12]
    cbd0:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    cbd2:	682b      	ldr	r3, [r5, #0]
    cbd4:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    cbd8:	68db      	ldr	r3, [r3, #12]
    cbda:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS1_AD0);
    cbdc:	682b      	ldr	r3, [r5, #0]
    cbde:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    cbe2:	68db      	ldr	r3, [r3, #12]
    cbe4:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS2_AD1);
    cbe6:	682b      	ldr	r3, [r5, #0]
    cbe8:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    cbec:	68db      	ldr	r3, [r3, #12]
    cbee:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.DIAG);
    cbf0:	682b      	ldr	r3, [r5, #0]
    cbf2:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    cbf6:	691b      	ldr	r3, [r3, #16]
    cbf8:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INDEX);
    cbfa:	682b      	ldr	r3, [r5, #0]
    cbfc:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    cc00:	691b      	ldr	r3, [r3, #16]
    cc02:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.MS1_AD0);
    cc04:	682b      	ldr	r3, [r5, #0]
    cc06:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    cc0a:	699b      	ldr	r3, [r3, #24]
    cc0c:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.MS2_AD1);
    cc0e:	682b      	ldr	r3, [r5, #0]
    cc10:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    cc14:	699b      	ldr	r3, [r3, #24]
    cc16:	4798      	blx	r3

	TMC2209_UARTChannel = HAL.UART;
    cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc1a:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
	TMC2209_UARTChannel->pinout = UART_PINS_2;
    cc1e:	2701      	movs	r7, #1
    cc20:	701f      	strb	r7, [r3, #0]
	TMC2209_UARTChannel->rxtx.init();
    cc22:	685b      	ldr	r3, [r3, #4]
    cc24:	4798      	blx	r3

	TMC2209_config = Evalboards.ch2.config;
    cc26:	4a3a      	ldr	r2, [pc, #232]	; (cd10 <TMC2209_init+0x1ba>)

	Evalboards.ch2.config->reset        = reset;
    cc28:	493a      	ldr	r1, [pc, #232]	; (cd14 <TMC2209_init+0x1be>)
	TMC2209_config = Evalboards.ch2.config;
    cc2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	Evalboards.ch2.writeRegister        = tmc2209_writeRegister;
	Evalboards.ch2.readRegister         = tmc2209_readRegister;
	Evalboards.ch2.userFunction         = userFunction;
	Evalboards.ch2.enableDriver         = enableDriver;
	Evalboards.ch2.checkErrors          = checkErrors;
	Evalboards.ch2.numberOfMotors       = MOTORS;
    cc2e:	f882 708c 	strb.w	r7, [r2, #140]	; 0x8c
	Evalboards.ch2.config->reset        = reset;
    cc32:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    cc36:	4938      	ldr	r1, [pc, #224]	; (cd18 <TMC2209_init+0x1c2>)
    cc38:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
	Evalboards.ch2.rotate               = rotate;
    cc3c:	4937      	ldr	r1, [pc, #220]	; (cd1c <TMC2209_init+0x1c6>)
    cc3e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    cc42:	4937      	ldr	r1, [pc, #220]	; (cd20 <TMC2209_init+0x1ca>)
    cc44:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    cc48:	4936      	ldr	r1, [pc, #216]	; (cd24 <TMC2209_init+0x1ce>)
    cc4a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    cc4e:	4936      	ldr	r1, [pc, #216]	; (cd28 <TMC2209_init+0x1d2>)
    cc50:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    cc54:	4935      	ldr	r1, [pc, #212]	; (cd2c <TMC2209_init+0x1d6>)
    cc56:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    cc5a:	4935      	ldr	r1, [pc, #212]	; (cd30 <TMC2209_init+0x1da>)
    cc5c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    cc60:	4934      	ldr	r1, [pc, #208]	; (cd34 <TMC2209_init+0x1de>)
    cc62:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    cc66:	4934      	ldr	r1, [pc, #208]	; (cd38 <TMC2209_init+0x1e2>)
    cc68:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = tmc2209_writeRegister;
    cc6c:	4933      	ldr	r1, [pc, #204]	; (cd3c <TMC2209_init+0x1e6>)
    cc6e:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
	Evalboards.ch2.readRegister         = tmc2209_readRegister;
    cc72:	4933      	ldr	r1, [pc, #204]	; (cd40 <TMC2209_init+0x1ea>)
    cc74:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	Evalboards.ch2.userFunction         = userFunction;
    cc78:	4932      	ldr	r1, [pc, #200]	; (cd44 <TMC2209_init+0x1ee>)
    cc7a:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
    cc7e:	4932      	ldr	r1, [pc, #200]	; (cd48 <TMC2209_init+0x1f2>)
    cc80:	f8c2 10dc 	str.w	r1, [r2, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
    cc84:	4931      	ldr	r1, [pc, #196]	; (cd4c <TMC2209_init+0x1f6>)
    cc86:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    cc8a:	2032      	movs	r0, #50	; 0x32
    cc8c:	f44f 71c3 	mov.w	r1, #390	; 0x186
    cc90:	e9c2 1021 	strd	r1, r0, [r2, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    cc94:	492e      	ldr	r1, [pc, #184]	; (cd50 <TMC2209_init+0x1fa>)
    cc96:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
	Evalboards.ch2.periodicJob          = periodicJob;
    cc9a:	492e      	ldr	r1, [pc, #184]	; (cd54 <TMC2209_init+0x1fe>)
    cc9c:	f8c2 10d0 	str.w	r1, [r2, #208]	; 0xd0

	tmc2209_init(&TMC2209, 0, 0, TMC2209_config, &tmc2209_defaultRegisterResetState[0]);
    cca0:	4a2d      	ldr	r2, [pc, #180]	; (cd58 <TMC2209_init+0x202>)
    cca2:	9200      	str	r2, [sp, #0]
    cca4:	4631      	mov	r1, r6
    cca6:	4632      	mov	r2, r6
    cca8:	4620      	mov	r0, r4
    ccaa:	f014 f861 	bl	20d70 <tmc2209_init>

	StepDir_init(STEPDIR_PRECISION);
    ccae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    ccb2:	f012 ff8f 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.DIAG);
    ccb6:	e9d4 12a4 	ldrd	r1, r2, [r4, #656]	; 0x290
    ccba:	f8d4 32a0 	ldr.w	r3, [r4, #672]	; 0x2a0
    ccbe:	4630      	mov	r0, r6
    ccc0:	f012 fdde 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 51200);
    ccc4:	4630      	mov	r0, r6
    ccc6:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    ccca:	f012 fe91 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 51200);
    ccce:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    ccd2:	4630      	mov	r0, r6
    ccd4:	f013 f83e 	bl	1fd54 <StepDir_setAcceleration>

#if defined(Startrampe)
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF;
	GPIO_PinAFConfig(Pins.UC_PWM->port, Pins.UC_PWM->bit, GPIO_AF_TIM1);
#elif defined(Landungsbruecke)
	HAL.IOs->config->toOutput(Pins.UC_PWM);
    ccd8:	682b      	ldr	r3, [r5, #0]
    ccda:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    ccde:	68db      	ldr	r3, [r3, #12]
    cce0:	4798      	blx	r3
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    cce2:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
#endif

	HAL.IOs->config->set(Pins.UC_PWM);
	Timer.init();
    cce6:	4c1d      	ldr	r4, [pc, #116]	; (cd5c <TMC2209_init+0x206>)
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    cce8:	2304      	movs	r3, #4
    ccea:	7543      	strb	r3, [r0, #21]
	HAL.IOs->config->set(Pins.UC_PWM);
    ccec:	682b      	ldr	r3, [r5, #0]
    ccee:	681b      	ldr	r3, [r3, #0]
    ccf0:	4798      	blx	r3
	Timer.init();
    ccf2:	6823      	ldr	r3, [r4, #0]
    ccf4:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_3, 0);
    ccf6:	68a3      	ldr	r3, [r4, #8]
    ccf8:	4631      	mov	r1, r6
    ccfa:	2002      	movs	r0, #2
    ccfc:	4798      	blx	r3

	enableDriver(DRIVER_ENABLE);
    ccfe:	4638      	mov	r0, r7
};
    cd00:	b003      	add	sp, #12
    cd02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	enableDriver(DRIVER_ENABLE);
    cd06:	e6a3      	b.n	ca50 <enableDriver>
    cd08:	00029d1c 	.word	0x00029d1c
    cd0c:	1fff1cbc 	.word	0x1fff1cbc
    cd10:	1fff5e88 	.word	0x1fff5e88
    cd14:	0000ca29 	.word	0x0000ca29
    cd18:	0000ca1d 	.word	0x0000ca1d
    cd1c:	0000c303 	.word	0x0000c303
    cd20:	0000c31d 	.word	0x0000c31d
    cd24:	0000c319 	.word	0x0000c319
    cd28:	0000c315 	.word	0x0000c315
    cd2c:	0000ca15 	.word	0x0000ca15
    cd30:	0000ca01 	.word	0x0000ca01
    cd34:	0000c2f1 	.word	0x0000c2f1
    cd38:	0000cb21 	.word	0x0000cb21
    cd3c:	0000c1c9 	.word	0x0000c1c9
    cd40:	0000c1d5 	.word	0x0000c1d5
    cd44:	0000c201 	.word	0x0000c201
    cd48:	0000ca51 	.word	0x0000ca51
    cd4c:	0000c1b9 	.word	0x0000c1b9
    cd50:	0000ca95 	.word	0x0000ca95
    cd54:	0000c1e9 	.word	0x0000c1e9
    cd58:	000286d8 	.word	0x000286d8
    cd5c:	1fff0ae0 	.word	0x1fff0ae0

0000cd60 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
    cd60:	4b02      	ldr	r3, [pc, #8]	; (cd6c <checkErrors+0xc>)
    cd62:	2200      	movs	r2, #0
    cd64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    cd68:	4770      	bx	lr
    cd6a:	bf00      	nop
    cd6c:	1fff5e88 	.word	0x1fff5e88

0000cd70 <tmc2224_writeRegister>:
	UART_writeInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd70:	4807      	ldr	r0, [pc, #28]	; (cd90 <tmc2224_writeRegister+0x20>)
{
    cd72:	b570      	push	{r4, r5, r6, lr}
	UART_writeInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd74:	f850 6b04 	ldr.w	r6, [r0], #4
{
    cd78:	460c      	mov	r4, r1
    cd7a:	4615      	mov	r5, r2
	UART_writeInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd7c:	f014 f8ee 	bl	20f5c <tmc2224_get_slave>
    cd80:	462b      	mov	r3, r5
    cd82:	4601      	mov	r1, r0
    cd84:	4622      	mov	r2, r4
    cd86:	4630      	mov	r0, r6
}
    cd88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UART_writeInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd8c:	f011 b803 	b.w	1dd96 <UART_writeInt>
    cd90:	1fff1f80 	.word	0x1fff1f80

0000cd94 <tmc2224_readRegister>:
	UART_readInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd94:	4807      	ldr	r0, [pc, #28]	; (cdb4 <tmc2224_readRegister+0x20>)
{
    cd96:	b570      	push	{r4, r5, r6, lr}
	UART_readInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cd98:	f850 6b04 	ldr.w	r6, [r0], #4
{
    cd9c:	460c      	mov	r4, r1
    cd9e:	4615      	mov	r5, r2
	UART_readInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cda0:	f014 f8dc 	bl	20f5c <tmc2224_get_slave>
    cda4:	462b      	mov	r3, r5
    cda6:	4601      	mov	r1, r0
    cda8:	4622      	mov	r2, r4
    cdaa:	4630      	mov	r0, r6
}
    cdac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UART_readInt(TMC2224_UARTChannel, tmc2224_get_slave(&TMC2224), address, value);
    cdb0:	f010 bfaa 	b.w	1dd08 <UART_readInt>
    cdb4:	1fff1f80 	.word	0x1fff1f80

0000cdb8 <periodicJob>:
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
}

static void periodicJob(uint32_t tick)
{
    cdb8:	b508      	push	{r3, lr}
	for(int motor = 0; motor < MOTORS; motor++)
	{
		tmc2224_periodicJob(motor, tick, &TMC2224, TMC2224_config);
    cdba:	4a06      	ldr	r2, [pc, #24]	; (cdd4 <periodicJob+0x1c>)
{
    cdbc:	4601      	mov	r1, r0
		tmc2224_periodicJob(motor, tick, &TMC2224, TMC2224_config);
    cdbe:	f8d2 3294 	ldr.w	r3, [r2, #660]	; 0x294
    cdc2:	2000      	movs	r0, #0
    cdc4:	3204      	adds	r2, #4
    cdc6:	f014 f8aa 	bl	20f1e <tmc2224_periodicJob>
		StepDir_periodicJob(motor);
	}
}
    cdca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StepDir_periodicJob(motor);
    cdce:	2000      	movs	r0, #0
    cdd0:	f012 bce8 	b.w	1f7a4 <StepDir_periodicJob>
    cdd4:	1fff1f80 	.word	0x1fff1f80

0000cdd8 <userFunction>:
{
    cdd8:	b538      	push	{r3, r4, r5, lr}
    cdda:	4604      	mov	r4, r0
    cddc:	4615      	mov	r5, r2
    cdde:	4608      	mov	r0, r1
	switch(type)
    cde0:	b924      	cbnz	r4, cdec <userFunction+0x14>
		*value = StepDir_getStatus(motor);
    cde2:	f012 fd25 	bl	1f830 <StepDir_getStatus>
    cde6:	6028      	str	r0, [r5, #0]
	uint32_t errors = 0;
    cde8:	4620      	mov	r0, r4
}
    cdea:	bd38      	pop	{r3, r4, r5, pc}
		errors |= TMC_ERROR_TYPE;
    cdec:	2004      	movs	r0, #4
	return errors;
    cdee:	e7fc      	b.n	cdea <userFunction+0x12>

0000cdf0 <moveTo>:
{
    cdf0:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    cdf2:	4604      	mov	r4, r0
    cdf4:	b918      	cbnz	r0, cdfe <moveTo+0xe>
	StepDir_moveTo(motor, position);
    cdf6:	f012 fcbd 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    cdfa:	4620      	mov	r0, r4
}
    cdfc:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    cdfe:	2008      	movs	r0, #8
    ce00:	e7fc      	b.n	cdfc <moveTo+0xc>

0000ce02 <rotate>:
{
    ce02:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    ce04:	4604      	mov	r4, r0
    ce06:	b918      	cbnz	r0, ce10 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    ce08:	f012 fc8e 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    ce0c:	4620      	mov	r0, r4
}
    ce0e:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    ce10:	2008      	movs	r0, #8
    ce12:	e7fc      	b.n	ce0e <rotate+0xc>

0000ce14 <stop>:
	return rotate(motor, 0);
    ce14:	2100      	movs	r1, #0
    ce16:	e7f4      	b.n	ce02 <rotate>

0000ce18 <left>:
	return rotate(motor, -velocity);
    ce18:	4249      	negs	r1, r1
    ce1a:	e7f2      	b.n	ce02 <rotate>

0000ce1c <right>:
	return rotate(motor, velocity);
    ce1c:	e7f1      	b.n	ce02 <rotate>

0000ce1e <restore>:
	return tmc2224_restore(TMC2224_config);
    ce1e:	4b02      	ldr	r3, [pc, #8]	; (ce28 <restore+0xa>)
    ce20:	f8d3 0294 	ldr.w	r0, [r3, #660]	; 0x294
    ce24:	f014 b892 	b.w	20f4c <tmc2224_restore>
    ce28:	1fff1f80 	.word	0x1fff1f80

0000ce2c <reset>:
{
    ce2c:	b510      	push	{r4, lr}
	StepDir_init(STEPDIR_PRECISION);
    ce2e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    ce32:	4c07      	ldr	r4, [pc, #28]	; (ce50 <reset+0x24>)
	StepDir_init(STEPDIR_PRECISION);
    ce34:	f012 fece 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    ce38:	2300      	movs	r3, #0
    ce3a:	e9d4 12a7 	ldrd	r1, r2, [r4, #668]	; 0x29c
    ce3e:	4618      	mov	r0, r3
    ce40:	f012 fd1e 	bl	1f880 <StepDir_setPins>
	return tmc2224_reset(TMC2224_config);
    ce44:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
}
    ce48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tmc2224_reset(TMC2224_config);
    ce4c:	f014 b876 	b.w	20f3c <tmc2224_reset>
    ce50:	1fff1f80 	.word	0x1fff1f80

0000ce54 <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    ce54:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    ce56:	bf04      	itt	eq
    ce58:	4b0c      	ldreq	r3, [pc, #48]	; (ce8c <enableDriver+0x38>)
    ce5a:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
    ce5e:	b938      	cbnz	r0, ce70 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
    ce60:	4b0b      	ldr	r3, [pc, #44]	; (ce90 <enableDriver+0x3c>)
    ce62:	68db      	ldr	r3, [r3, #12]
    ce64:	681b      	ldr	r3, [r3, #0]
    ce66:	695b      	ldr	r3, [r3, #20]
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    ce68:	4a0a      	ldr	r2, [pc, #40]	; (ce94 <enableDriver+0x40>)
    ce6a:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
    ce6e:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    ce70:	2801      	cmp	r0, #1
    ce72:	d109      	bne.n	ce88 <enableDriver+0x34>
    ce74:	4b05      	ldr	r3, [pc, #20]	; (ce8c <enableDriver+0x38>)
    ce76:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    ce7a:	2b01      	cmp	r3, #1
    ce7c:	d104      	bne.n	ce88 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    ce7e:	4b04      	ldr	r3, [pc, #16]	; (ce90 <enableDriver+0x3c>)
    ce80:	68db      	ldr	r3, [r3, #12]
    ce82:	681b      	ldr	r3, [r3, #0]
    ce84:	699b      	ldr	r3, [r3, #24]
    ce86:	e7ef      	b.n	ce68 <enableDriver+0x14>
}
    ce88:	4770      	bx	lr
    ce8a:	bf00      	nop
    ce8c:	1fff5e88 	.word	0x1fff5e88
    ce90:	00029d1c 	.word	0x00029d1c
    ce94:	1fff1f80 	.word	0x1fff1f80

0000ce98 <deInit>:
{
    ce98:	b538      	push	{r3, r4, r5, lr}
	enableDriver(DRIVER_DISABLE);
    ce9a:	2000      	movs	r0, #0
    ce9c:	f7ff ffda 	bl	ce54 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
    cea0:	4b16      	ldr	r3, [pc, #88]	; (cefc <deInit+0x64>)
    cea2:	4c17      	ldr	r4, [pc, #92]	; (cf00 <deInit+0x68>)
    cea4:	68dd      	ldr	r5, [r3, #12]
    cea6:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    ceaa:	682b      	ldr	r3, [r5, #0]
    ceac:	689b      	ldr	r3, [r3, #8]
    ceae:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    ceb0:	682b      	ldr	r3, [r5, #0]
    ceb2:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    ceb6:	689b      	ldr	r3, [r3, #8]
    ceb8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    ceba:	682b      	ldr	r3, [r5, #0]
    cebc:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    cec0:	689b      	ldr	r3, [r3, #8]
    cec2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS1);
    cec4:	682b      	ldr	r3, [r5, #0]
    cec6:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    ceca:	689b      	ldr	r3, [r3, #8]
    cecc:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS2);
    cece:	682b      	ldr	r3, [r5, #0]
    ced0:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    ced4:	689b      	ldr	r3, [r3, #8]
    ced6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG);
    ced8:	682b      	ldr	r3, [r5, #0]
    ceda:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    cede:	689b      	ldr	r3, [r3, #8]
    cee0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INDEX);
    cee2:	682b      	ldr	r3, [r5, #0]
    cee4:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
    cee8:	689b      	ldr	r3, [r3, #8]
    ceea:	4798      	blx	r3
	TMC2224_UARTChannel->rxtx.deInit();
    ceec:	6823      	ldr	r3, [r4, #0]
    ceee:	689b      	ldr	r3, [r3, #8]
    cef0:	4798      	blx	r3
};
    cef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	StepDir_deInit();
    cef6:	f012 bee5 	b.w	1fcc4 <StepDir_deInit>
    cefa:	bf00      	nop
    cefc:	00029d1c 	.word	0x00029d1c
    cf00:	1fff1f80 	.word	0x1fff1f80

0000cf04 <moveBy>:
{
    cf04:	b538      	push	{r3, r4, r5, lr}
    cf06:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    cf08:	4604      	mov	r4, r0
    cf0a:	b948      	cbnz	r0, cf20 <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    cf0c:	f012 fdb4 	bl	1fa78 <StepDir_getActualPosition>
    cf10:	6829      	ldr	r1, [r5, #0]
    cf12:	4401      	add	r1, r0
    cf14:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    cf16:	4620      	mov	r0, r4
    cf18:	f012 fc2c 	bl	1f774 <StepDir_moveTo>
    cf1c:	4620      	mov	r0, r4
}
    cf1e:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    cf20:	2008      	movs	r0, #8
    cf22:	e7fc      	b.n	cf1e <moveBy+0x1a>

0000cf24 <SAP>:
{
    cf24:	b508      	push	{r3, lr}
    cf26:	460b      	mov	r3, r1
    cf28:	4611      	mov	r1, r2
	if(motor >= MOTORS)
    cf2a:	bb23      	cbnz	r3, cf76 <SAP+0x52>
	switch(type)
    cf2c:	2806      	cmp	r0, #6
    cf2e:	d824      	bhi.n	cf7a <SAP+0x56>
    cf30:	e8df f000 	tbb	[pc, r0]
    cf34:	230d0904 	.word	0x230d0904
    cf38:	1811      	.short	0x1811
    cf3a:	1c          	.byte	0x1c
    cf3b:	00          	.byte	0x00
			StepDir_moveTo(motor, *value);
    cf3c:	2000      	movs	r0, #0
    cf3e:	f012 fc19 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    cf42:	2000      	movs	r0, #0
}
    cf44:	bd08      	pop	{r3, pc}
			StepDir_setActualPosition(motor, *value);
    cf46:	2000      	movs	r0, #0
    cf48:	f012 fd36 	bl	1f9b8 <StepDir_setActualPosition>
    cf4c:	e7f9      	b.n	cf42 <SAP+0x1e>
			StepDir_rotate(motor, *value);
    cf4e:	2000      	movs	r0, #0
    cf50:	f012 fbea 	bl	1f728 <StepDir_rotate>
    cf54:	e7f5      	b.n	cf42 <SAP+0x1e>
			StepDir_setVelocityMax(motor, abs(*value));
    cf56:	2a00      	cmp	r2, #0
    cf58:	bfb8      	it	lt
    cf5a:	4251      	neglt	r1, r2
    cf5c:	2000      	movs	r0, #0
    cf5e:	f012 fd47 	bl	1f9f0 <StepDir_setVelocityMax>
    cf62:	e7ee      	b.n	cf42 <SAP+0x1e>
			StepDir_setAcceleration(motor, *value);
    cf64:	2000      	movs	r0, #0
    cf66:	f012 fef5 	bl	1fd54 <StepDir_setAcceleration>
    cf6a:	e7ea      	b.n	cf42 <SAP+0x1e>
			tmc2224_set_slave(&TMC2224, *value);
    cf6c:	4804      	ldr	r0, [pc, #16]	; (cf80 <SAP+0x5c>)
    cf6e:	b2d1      	uxtb	r1, r2
    cf70:	f013 fff7 	bl	20f62 <tmc2224_set_slave>
    cf74:	e7e5      	b.n	cf42 <SAP+0x1e>
		return TMC_ERROR_MOTOR;
    cf76:	2008      	movs	r0, #8
    cf78:	e7e4      	b.n	cf44 <SAP+0x20>
	if(motor >= MOTORS)
    cf7a:	2004      	movs	r0, #4
	return handleParameter(WRITE, motor, type, &value);
    cf7c:	e7e2      	b.n	cf44 <SAP+0x20>
    cf7e:	bf00      	nop
    cf80:	1fff1f84 	.word	0x1fff1f84

0000cf84 <GAP>:
{
    cf84:	b510      	push	{r4, lr}
    cf86:	4614      	mov	r4, r2
	if(motor >= MOTORS)
    cf88:	bb29      	cbnz	r1, cfd6 <GAP+0x52>
	switch(type)
    cf8a:	2806      	cmp	r0, #6
    cf8c:	d825      	bhi.n	cfda <GAP+0x56>
    cf8e:	e8df f000 	tbb	[pc, r0]
    cf92:	0a04      	.short	0x0a04
    cf94:	1a16120e 	.word	0x1a16120e
    cf98:	1e          	.byte	0x1e
    cf99:	00          	.byte	0x00
			*value = StepDir_getTargetPosition(motor);
    cf9a:	2000      	movs	r0, #0
    cf9c:	f012 fd7c 	bl	1fa98 <StepDir_getTargetPosition>
			*value = tmc2224_get_slave(&TMC2224);
    cfa0:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    cfa2:	2000      	movs	r0, #0
}
    cfa4:	bd10      	pop	{r4, pc}
			*value = StepDir_getActualPosition(motor);
    cfa6:	2000      	movs	r0, #0
    cfa8:	f012 fd66 	bl	1fa78 <StepDir_getActualPosition>
    cfac:	e7f8      	b.n	cfa0 <GAP+0x1c>
			*value = StepDir_getTargetVelocity(motor);
    cfae:	2000      	movs	r0, #0
    cfb0:	f012 fd92 	bl	1fad8 <StepDir_getTargetVelocity>
    cfb4:	e7f4      	b.n	cfa0 <GAP+0x1c>
			*value = StepDir_getActualVelocity(motor);
    cfb6:	2000      	movs	r0, #0
    cfb8:	f012 fd7e 	bl	1fab8 <StepDir_getActualVelocity>
    cfbc:	e7f0      	b.n	cfa0 <GAP+0x1c>
			*value = StepDir_getVelocityMax(motor);
    cfbe:	2000      	movs	r0, #0
    cfc0:	f012 fdaa 	bl	1fb18 <StepDir_getVelocityMax>
    cfc4:	e7ec      	b.n	cfa0 <GAP+0x1c>
			*value = StepDir_getAcceleration(motor);
    cfc6:	2000      	movs	r0, #0
    cfc8:	f012 fd96 	bl	1faf8 <StepDir_getAcceleration>
    cfcc:	e7e8      	b.n	cfa0 <GAP+0x1c>
			*value = tmc2224_get_slave(&TMC2224);
    cfce:	4804      	ldr	r0, [pc, #16]	; (cfe0 <GAP+0x5c>)
    cfd0:	f013 ffc4 	bl	20f5c <tmc2224_get_slave>
    cfd4:	e7e4      	b.n	cfa0 <GAP+0x1c>
		return TMC_ERROR_MOTOR;
    cfd6:	2008      	movs	r0, #8
    cfd8:	e7e4      	b.n	cfa4 <GAP+0x20>
	if(motor >= MOTORS)
    cfda:	2004      	movs	r0, #4
	return handleParameter(READ, motor, type, value);
    cfdc:	e7e2      	b.n	cfa4 <GAP+0x20>
    cfde:	bf00      	nop
    cfe0:	1fff1f84 	.word	0x1fff1f84

0000cfe4 <TMC2224_init>:

void TMC2224_init(void)
{
    cfe4:	b570      	push	{r4, r5, r6, lr}
	tmc_fillCRC8Table(0x07, true, 1);
    cfe6:	2201      	movs	r2, #1

	tmc2224_initConfig(&TMC2224);
    cfe8:	4c51      	ldr	r4, [pc, #324]	; (d130 <TMC2224_init+0x14c>)

	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    cfea:	4e52      	ldr	r6, [pc, #328]	; (d134 <TMC2224_init+0x150>)
	tmc_fillCRC8Table(0x07, true, 1);
    cfec:	4611      	mov	r1, r2
    cfee:	2007      	movs	r0, #7
    cff0:	f012 ffba 	bl	1ff68 <tmc_fillCRC8Table>
	tmc2224_initConfig(&TMC2224);
    cff4:	1d20      	adds	r0, r4, #4
    cff6:	f013 ff53 	bl	20ea0 <tmc2224_initConfig>
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    cffa:	68f5      	ldr	r5, [r6, #12]
    cffc:	686b      	ldr	r3, [r5, #4]
	Pins.STEP     = &HAL.IOs->pins->DIO6;
    cffe:	f503 7294 	add.w	r2, r3, #296	; 0x128
    d002:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.DIR      = &HAL.IOs->pins->DIO7;
    d006:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    d00a:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.MS1      = &HAL.IOs->pins->DIO3;
    d00e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    d012:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
	Pins.MS2      = &HAL.IOs->pins->DIO4;
    d016:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d01a:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.MS2      = &HAL.IOs->pins->DIO4;
    d01e:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    d022:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    d026:	33a8      	adds	r3, #168	; 0xa8
    d028:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d02c:	682b      	ldr	r3, [r5, #0]
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    d02e:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d032:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d034:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d038:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STEP);
    d03a:	682b      	ldr	r3, [r5, #0]
    d03c:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    d040:	68db      	ldr	r3, [r3, #12]
    d042:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    d044:	682b      	ldr	r3, [r5, #0]
    d046:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    d04a:	68db      	ldr	r3, [r3, #12]
    d04c:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS1);
    d04e:	682b      	ldr	r3, [r5, #0]
    d050:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    d054:	68db      	ldr	r3, [r3, #12]
    d056:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS2);
    d058:	682b      	ldr	r3, [r5, #0]
    d05a:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    d05e:	68db      	ldr	r3, [r3, #12]
    d060:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.DIAG);
    d062:	682b      	ldr	r3, [r5, #0]
    d064:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    d068:	691b      	ldr	r3, [r3, #16]
    d06a:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INDEX);
    d06c:	682b      	ldr	r3, [r5, #0]
    d06e:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
    d072:	691b      	ldr	r3, [r3, #16]
    d074:	4798      	blx	r3

	TMC2224_UARTChannel = HAL.UART;
    d076:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d078:	6023      	str	r3, [r4, #0]
	TMC2224_UARTChannel->rxtx.init();
    d07a:	685b      	ldr	r3, [r3, #4]
    d07c:	4798      	blx	r3

	TMC2224_config = Evalboards.ch2.config;
    d07e:	4b2e      	ldr	r3, [pc, #184]	; (d138 <TMC2224_init+0x154>)

	Evalboards.ch2.config->reset        = reset;
    d080:	492e      	ldr	r1, [pc, #184]	; (d13c <TMC2224_init+0x158>)
	TMC2224_config = Evalboards.ch2.config;
    d082:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    d086:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Evalboards.ch2.config->restore      = restore;
	Evalboards.ch2.config->state        = CONFIG_RESET;
    d08a:	2501      	movs	r5, #1
	Evalboards.ch2.config->reset        = reset;
    d08c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    d090:	492b      	ldr	r1, [pc, #172]	; (d140 <TMC2224_init+0x15c>)
	Evalboards.ch2.config->state        = CONFIG_RESET;
    d092:	8015      	strh	r5, [r2, #0]
	Evalboards.ch2.config->restore      = restore;
    d094:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    d098:	4a2a      	ldr	r2, [pc, #168]	; (d144 <TMC2224_init+0x160>)
    d09a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    d09e:	4a2a      	ldr	r2, [pc, #168]	; (d148 <TMC2224_init+0x164>)
    d0a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    d0a4:	4a29      	ldr	r2, [pc, #164]	; (d14c <TMC2224_init+0x168>)
    d0a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    d0aa:	4a29      	ldr	r2, [pc, #164]	; (d150 <TMC2224_init+0x16c>)
    d0ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    d0b0:	4a28      	ldr	r2, [pc, #160]	; (d154 <TMC2224_init+0x170>)
    d0b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    d0b6:	4a28      	ldr	r2, [pc, #160]	; (d158 <TMC2224_init+0x174>)
    d0b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    d0bc:	4a27      	ldr	r2, [pc, #156]	; (d15c <TMC2224_init+0x178>)
    d0be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    d0c2:	4a27      	ldr	r2, [pc, #156]	; (d160 <TMC2224_init+0x17c>)
    d0c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = tmc2224_writeRegister;
    d0c8:	4a26      	ldr	r2, [pc, #152]	; (d164 <TMC2224_init+0x180>)
    d0ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = tmc2224_readRegister;
    d0ce:	4a26      	ldr	r2, [pc, #152]	; (d168 <TMC2224_init+0x184>)
    d0d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Evalboards.ch2.userFunction         = userFunction;
    d0d4:	4a25      	ldr	r2, [pc, #148]	; (d16c <TMC2224_init+0x188>)
    d0d6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
    d0da:	4a25      	ldr	r2, [pc, #148]	; (d170 <TMC2224_init+0x18c>)
    d0dc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
    d0e0:	4a24      	ldr	r2, [pc, #144]	; (d174 <TMC2224_init+0x190>)
    d0e2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    d0e6:	2132      	movs	r1, #50	; 0x32
    d0e8:	f44f 72c3 	mov.w	r2, #390	; 0x186
    d0ec:	e9c3 2121 	strd	r2, r1, [r3, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    d0f0:	4a21      	ldr	r2, [pc, #132]	; (d178 <TMC2224_init+0x194>)
    d0f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Evalboards.ch2.periodicJob          = periodicJob;

	StepDir_init(STEPDIR_PRECISION);
    d0f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	Evalboards.ch2.periodicJob          = periodicJob;
    d0fa:	4a20      	ldr	r2, [pc, #128]	; (d17c <TMC2224_init+0x198>)
	Evalboards.ch2.numberOfMotors       = MOTORS;
    d0fc:	f883 508c 	strb.w	r5, [r3, #140]	; 0x8c
	Evalboards.ch2.periodicJob          = periodicJob;
    d100:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	StepDir_init(STEPDIR_PRECISION);
    d104:	f012 fd66 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    d108:	2300      	movs	r3, #0
    d10a:	e9d4 12a7 	ldrd	r1, r2, [r4, #668]	; 0x29c
    d10e:	4618      	mov	r0, r3
    d110:	f012 fbb6 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 51200);
    d114:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    d118:	2000      	movs	r0, #0
    d11a:	f012 fc69 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 51200);
    d11e:	2000      	movs	r0, #0
    d120:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    d124:	f012 fe16 	bl	1fd54 <StepDir_setAcceleration>

	enableDriver(DRIVER_ENABLE);
    d128:	4628      	mov	r0, r5
};
    d12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	enableDriver(DRIVER_ENABLE);
    d12e:	e691      	b.n	ce54 <enableDriver>
    d130:	1fff1f80 	.word	0x1fff1f80
    d134:	00029d1c 	.word	0x00029d1c
    d138:	1fff5e88 	.word	0x1fff5e88
    d13c:	0000ce2d 	.word	0x0000ce2d
    d140:	0000ce1f 	.word	0x0000ce1f
    d144:	0000ce03 	.word	0x0000ce03
    d148:	0000ce1d 	.word	0x0000ce1d
    d14c:	0000ce19 	.word	0x0000ce19
    d150:	0000ce15 	.word	0x0000ce15
    d154:	0000cf85 	.word	0x0000cf85
    d158:	0000cf25 	.word	0x0000cf25
    d15c:	0000cdf1 	.word	0x0000cdf1
    d160:	0000cf05 	.word	0x0000cf05
    d164:	0000cd71 	.word	0x0000cd71
    d168:	0000cd95 	.word	0x0000cd95
    d16c:	0000cdd9 	.word	0x0000cdd9
    d170:	0000ce55 	.word	0x0000ce55
    d174:	0000cd61 	.word	0x0000cd61
    d178:	0000ce99 	.word	0x0000ce99
    d17c:	0000cdb9 	.word	0x0000cdb9

0000d180 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
    d180:	4b02      	ldr	r3, [pc, #8]	; (d18c <checkErrors+0xc>)
    d182:	2200      	movs	r2, #0
    d184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
    d188:	4770      	bx	lr
    d18a:	bf00      	nop
    d18c:	1fff5e88 	.word	0x1fff5e88

0000d190 <tmc2225_writeRegister>:
	tmc2225_writeInt(motorToIC(motor), address, value);
    d190:	4801      	ldr	r0, [pc, #4]	; (d198 <tmc2225_writeRegister+0x8>)
    d192:	f013 bee9 	b.w	20f68 <tmc2225_writeInt>
    d196:	bf00      	nop
    d198:	1fff2240 	.word	0x1fff2240

0000d19c <tmc2225_readRegister>:
{
    d19c:	b510      	push	{r4, lr}
	*value = tmc2225_readInt(motorToIC(motor), address);
    d19e:	4803      	ldr	r0, [pc, #12]	; (d1ac <tmc2225_readRegister+0x10>)
{
    d1a0:	4614      	mov	r4, r2
	*value = tmc2225_readInt(motorToIC(motor), address);
    d1a2:	f013 ff14 	bl	20fce <tmc2225_readInt>
    d1a6:	6020      	str	r0, [r4, #0]
}
    d1a8:	bd10      	pop	{r4, pc}
    d1aa:	bf00      	nop
    d1ac:	1fff2240 	.word	0x1fff2240

0000d1b0 <periodicJob>:
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
}

static void periodicJob(uint32_t tick)
{
    d1b0:	b508      	push	{r3, lr}
    d1b2:	4601      	mov	r1, r0
	for(int motor = 0; motor < MOTORS; motor++)
	{
		tmc2225_periodicJob(&TMC2225, tick);
    d1b4:	4803      	ldr	r0, [pc, #12]	; (d1c4 <periodicJob+0x14>)
    d1b6:	f013 ff65 	bl	21084 <tmc2225_periodicJob>
		StepDir_periodicJob(motor);
	}
}
    d1ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StepDir_periodicJob(motor);
    d1be:	2000      	movs	r0, #0
    d1c0:	f012 baf0 	b.w	1f7a4 <StepDir_periodicJob>
    d1c4:	1fff2240 	.word	0x1fff2240

0000d1c8 <moveTo>:
{
    d1c8:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    d1ca:	4604      	mov	r4, r0
    d1cc:	b918      	cbnz	r0, d1d6 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    d1ce:	f012 fad1 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    d1d2:	4620      	mov	r0, r4
}
    d1d4:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    d1d6:	2008      	movs	r0, #8
    d1d8:	e7fc      	b.n	d1d4 <moveTo+0xc>

0000d1da <rotate>:
{
    d1da:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    d1dc:	4604      	mov	r4, r0
    d1de:	b918      	cbnz	r0, d1e8 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    d1e0:	f012 faa2 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    d1e4:	4620      	mov	r0, r4
}
    d1e6:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    d1e8:	2008      	movs	r0, #8
    d1ea:	e7fc      	b.n	d1e6 <rotate+0xc>

0000d1ec <stop>:
	return rotate(motor, 0);
    d1ec:	2100      	movs	r1, #0
    d1ee:	e7f4      	b.n	d1da <rotate>

0000d1f0 <left>:
	return rotate(motor, -velocity);
    d1f0:	4249      	negs	r1, r1
    d1f2:	e7f2      	b.n	d1da <rotate>

0000d1f4 <right>:
	return rotate(motor, velocity);
    d1f4:	e7f1      	b.n	d1da <rotate>

0000d1f6 <handleParameter>:
{
    d1f6:	b570      	push	{r4, r5, r6, lr}
    d1f8:	4606      	mov	r6, r0
    d1fa:	461d      	mov	r5, r3
	if(motor >= MOTORS)
    d1fc:	460c      	mov	r4, r1
    d1fe:	2900      	cmp	r1, #0
    d200:	f040 82af 	bne.w	d762 <handleParameter+0x56c>
	switch(type)
    d204:	2a8c      	cmp	r2, #140	; 0x8c
    d206:	f000 8148 	beq.w	d49a <handleParameter+0x2a4>
    d20a:	d84b      	bhi.n	d2a4 <handleParameter+0xae>
    d20c:	2a1d      	cmp	r2, #29
    d20e:	d907      	bls.n	d220 <handleParameter+0x2a>
    d210:	2a32      	cmp	r2, #50	; 0x32
    d212:	f000 8130 	beq.w	d476 <handleParameter+0x280>
    d216:	2a33      	cmp	r2, #51	; 0x33
    d218:	f000 8136 	beq.w	d488 <handleParameter+0x292>
			errors |= TMC_ERROR_TYPE;
    d21c:	2604      	movs	r6, #4
    d21e:	e1d0      	b.n	d5c2 <handleParameter+0x3cc>
    d220:	2a1d      	cmp	r2, #29
    d222:	d8fb      	bhi.n	d21c <handleParameter+0x26>
    d224:	a301      	add	r3, pc, #4	; (adr r3, d22c <handleParameter+0x36>)
    d226:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d22a:	bf00      	nop
    d22c:	0000d34f 	.word	0x0000d34f
    d230:	0000d365 	.word	0x0000d365
    d234:	0000d377 	.word	0x0000d377
    d238:	0000d389 	.word	0x0000d389
    d23c:	0000d395 	.word	0x0000d395
    d240:	0000d3ad 	.word	0x0000d3ad
    d244:	0000d3bf 	.word	0x0000d3bf
    d248:	0000d3eb 	.word	0x0000d3eb
    d24c:	0000d40d 	.word	0x0000d40d
    d250:	0000d21d 	.word	0x0000d21d
    d254:	0000d21d 	.word	0x0000d21d
    d258:	0000d21d 	.word	0x0000d21d
    d25c:	0000d21d 	.word	0x0000d21d
    d260:	0000d21d 	.word	0x0000d21d
    d264:	0000d21d 	.word	0x0000d21d
    d268:	0000d21d 	.word	0x0000d21d
    d26c:	0000d21d 	.word	0x0000d21d
    d270:	0000d21d 	.word	0x0000d21d
    d274:	0000d21d 	.word	0x0000d21d
    d278:	0000d21d 	.word	0x0000d21d
    d27c:	0000d21d 	.word	0x0000d21d
    d280:	0000d21d 	.word	0x0000d21d
    d284:	0000d21d 	.word	0x0000d21d
    d288:	0000d21d 	.word	0x0000d21d
    d28c:	0000d21d 	.word	0x0000d21d
    d290:	0000d21d 	.word	0x0000d21d
    d294:	0000d21d 	.word	0x0000d21d
    d298:	0000d21d 	.word	0x0000d21d
    d29c:	0000d41d 	.word	0x0000d41d
    d2a0:	0000d447 	.word	0x0000d447
	switch(type)
    d2a4:	2ac0      	cmp	r2, #192	; 0xc0
    d2a6:	d845      	bhi.n	d334 <handleParameter+0x13e>
    d2a8:	2aa1      	cmp	r2, #161	; 0xa1
    d2aa:	d9b7      	bls.n	d21c <handleParameter+0x26>
    d2ac:	3aa2      	subs	r2, #162	; 0xa2
    d2ae:	2a1e      	cmp	r2, #30
    d2b0:	d8b4      	bhi.n	d21c <handleParameter+0x26>
    d2b2:	a301      	add	r3, pc, #4	; (adr r3, d2b8 <handleParameter+0xc2>)
    d2b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d2b8:	0000d527 	.word	0x0000d527
    d2bc:	0000d21d 	.word	0x0000d21d
    d2c0:	0000d21d 	.word	0x0000d21d
    d2c4:	0000d54b 	.word	0x0000d54b
    d2c8:	0000d589 	.word	0x0000d589
    d2cc:	0000d609 	.word	0x0000d609
    d2d0:	0000d21d 	.word	0x0000d21d
    d2d4:	0000d21d 	.word	0x0000d21d
    d2d8:	0000d21d 	.word	0x0000d21d
    d2dc:	0000d21d 	.word	0x0000d21d
    d2e0:	0000d21d 	.word	0x0000d21d
    d2e4:	0000d21d 	.word	0x0000d21d
    d2e8:	0000d21d 	.word	0x0000d21d
    d2ec:	0000d21d 	.word	0x0000d21d
    d2f0:	0000d21d 	.word	0x0000d21d
    d2f4:	0000d21d 	.word	0x0000d21d
    d2f8:	0000d21d 	.word	0x0000d21d
    d2fc:	0000d62d 	.word	0x0000d62d
    d300:	0000d64f 	.word	0x0000d64f
    d304:	0000d663 	.word	0x0000d663
    d308:	0000d21d 	.word	0x0000d21d
    d30c:	0000d21d 	.word	0x0000d21d
    d310:	0000d21d 	.word	0x0000d21d
    d314:	0000d21d 	.word	0x0000d21d
    d318:	0000d677 	.word	0x0000d677
    d31c:	0000d6b9 	.word	0x0000d6b9
    d320:	0000d21d 	.word	0x0000d21d
    d324:	0000d21d 	.word	0x0000d21d
    d328:	0000d21d 	.word	0x0000d21d
    d32c:	0000d6fb 	.word	0x0000d6fb
    d330:	0000d72d 	.word	0x0000d72d
    d334:	2acc      	cmp	r2, #204	; 0xcc
    d336:	f47f af71 	bne.w	d21c <handleParameter+0x26>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_FREEWHEEL_MASK, TMC2225_FREEWHEEL_SHIFT);
    d33a:	48ab      	ldr	r0, [pc, #684]	; (d5e8 <handleParameter+0x3f2>)
    d33c:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    d33e:	2e00      	cmp	r6, #0
    d340:	f040 8206 	bne.w	d750 <handleParameter+0x55a>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_FREEWHEEL_MASK, TMC2225_FREEWHEEL_SHIFT);
    d344:	f013 fe43 	bl	20fce <tmc2225_readInt>
    d348:	f3c0 5001 	ubfx	r0, r0, #20, #2
    d34c:	e002      	b.n	d354 <handleParameter+0x15e>
		if(readWrite == READ) {
    d34e:	b918      	cbnz	r0, d358 <handleParameter+0x162>
			*value = StepDir_getTargetPosition(motor);
    d350:	f012 fba2 	bl	1fa98 <StepDir_getTargetPosition>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_FREEWHEEL_MASK, TMC2225_FREEWHEEL_SHIFT);
    d354:	6028      	str	r0, [r5, #0]
    d356:	e134      	b.n	d5c2 <handleParameter+0x3cc>
			StepDir_moveTo(motor, *value);
    d358:	6829      	ldr	r1, [r5, #0]
    d35a:	2000      	movs	r0, #0
    d35c:	f012 fa0a 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    d360:	2600      	movs	r6, #0
    d362:	e12e      	b.n	d5c2 <handleParameter+0x3cc>
		if(readWrite == READ) {
    d364:	b910      	cbnz	r0, d36c <handleParameter+0x176>
			*value = StepDir_getActualPosition(motor);
    d366:	f012 fb87 	bl	1fa78 <StepDir_getActualPosition>
    d36a:	e7f3      	b.n	d354 <handleParameter+0x15e>
			StepDir_setActualPosition(motor, *value);
    d36c:	6829      	ldr	r1, [r5, #0]
    d36e:	2000      	movs	r0, #0
    d370:	f012 fb22 	bl	1f9b8 <StepDir_setActualPosition>
    d374:	e7f4      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d376:	b910      	cbnz	r0, d37e <handleParameter+0x188>
			*value = StepDir_getTargetVelocity(motor);
    d378:	f012 fbae 	bl	1fad8 <StepDir_getTargetVelocity>
    d37c:	e7ea      	b.n	d354 <handleParameter+0x15e>
			StepDir_rotate(motor, *value);
    d37e:	6829      	ldr	r1, [r5, #0]
    d380:	2000      	movs	r0, #0
    d382:	f012 f9d1 	bl	1f728 <StepDir_rotate>
    d386:	e7eb      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d388:	2800      	cmp	r0, #0
    d38a:	f47f af47 	bne.w	d21c <handleParameter+0x26>
			*value = StepDir_getActualVelocity(motor);
    d38e:	f012 fb93 	bl	1fab8 <StepDir_getActualVelocity>
    d392:	e7df      	b.n	d354 <handleParameter+0x15e>
		if(readWrite == READ) {
    d394:	b910      	cbnz	r0, d39c <handleParameter+0x1a6>
			*value = StepDir_getVelocityMax(motor);
    d396:	f012 fbbf 	bl	1fb18 <StepDir_getVelocityMax>
    d39a:	e7db      	b.n	d354 <handleParameter+0x15e>
			StepDir_setVelocityMax(motor, abs(*value));
    d39c:	6829      	ldr	r1, [r5, #0]
    d39e:	2900      	cmp	r1, #0
    d3a0:	bfb8      	it	lt
    d3a2:	4249      	neglt	r1, r1
    d3a4:	2000      	movs	r0, #0
    d3a6:	f012 fb23 	bl	1f9f0 <StepDir_setVelocityMax>
    d3aa:	e7d9      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d3ac:	b910      	cbnz	r0, d3b4 <handleParameter+0x1be>
			*value = StepDir_getAcceleration(motor);
    d3ae:	f012 fba3 	bl	1faf8 <StepDir_getAcceleration>
    d3b2:	e7cf      	b.n	d354 <handleParameter+0x15e>
			StepDir_setAcceleration(motor, *value);
    d3b4:	6829      	ldr	r1, [r5, #0]
    d3b6:	2000      	movs	r0, #0
    d3b8:	f012 fccc 	bl	1fd54 <StepDir_setAcceleration>
    d3bc:	e7d0      	b.n	d360 <handleParameter+0x16a>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IRUN_MASK, TMC2225_IRUN_SHIFT);
    d3be:	488a      	ldr	r0, [pc, #552]	; (d5e8 <handleParameter+0x3f2>)
    d3c0:	2110      	movs	r1, #16
		if(readWrite == READ) {
    d3c2:	b926      	cbnz	r6, d3ce <handleParameter+0x1d8>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IRUN_MASK, TMC2225_IRUN_SHIFT);
    d3c4:	f013 fe03 	bl	20fce <tmc2225_readInt>
    d3c8:	f3c0 2004 	ubfx	r0, r0, #8, #5
    d3cc:	e7c2      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IRUN_MASK, TMC2225_IRUN_SHIFT, *value);
    d3ce:	f013 fdfe 	bl	20fce <tmc2225_readInt>
    d3d2:	682b      	ldr	r3, [r5, #0]
    d3d4:	021b      	lsls	r3, r3, #8
    d3d6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    d3da:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
    d3de:	431a      	orrs	r2, r3
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IHOLD_MASK, TMC2225_IHOLD_SHIFT, *value);
    d3e0:	2110      	movs	r1, #16
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_MRES_MASK, TMC2225_MRES_SHIFT, *value);
    d3e2:	4881      	ldr	r0, [pc, #516]	; (d5e8 <handleParameter+0x3f2>)
    d3e4:	f013 fdc0 	bl	20f68 <tmc2225_writeInt>
    d3e8:	e7ba      	b.n	d360 <handleParameter+0x16a>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IHOLD_MASK, TMC2225_IHOLD_SHIFT);
    d3ea:	487f      	ldr	r0, [pc, #508]	; (d5e8 <handleParameter+0x3f2>)
    d3ec:	2110      	movs	r1, #16
		if(readWrite == READ) {
    d3ee:	b926      	cbnz	r6, d3fa <handleParameter+0x204>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IHOLD_MASK, TMC2225_IHOLD_SHIFT);
    d3f0:	f013 fded 	bl	20fce <tmc2225_readInt>
    d3f4:	f000 001f 	and.w	r0, r0, #31
    d3f8:	e7ac      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_IHOLD_IRUN, TMC2225_IHOLD_MASK, TMC2225_IHOLD_SHIFT, *value);
    d3fa:	f013 fde8 	bl	20fce <tmc2225_readInt>
    d3fe:	682a      	ldr	r2, [r5, #0]
    d400:	f020 001f 	bic.w	r0, r0, #31
    d404:	f002 021f 	and.w	r2, r2, #31
    d408:	4302      	orrs	r2, r0
    d40a:	e7e9      	b.n	d3e0 <handleParameter+0x1ea>
		if(readWrite == READ) {
    d40c:	2800      	cmp	r0, #0
    d40e:	f47f af05 	bne.w	d21c <handleParameter+0x26>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    d412:	f012 fa0d 	bl	1f830 <StepDir_getStatus>
    d416:	f3c0 1000 	ubfx	r0, r0, #4, #1
    d41a:	e79b      	b.n	d354 <handleParameter+0x15e>
		if(readWrite == READ) {
    d41c:	b930      	cbnz	r0, d42c <handleParameter+0x236>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_GCONF, TMC2225_INTERNAL_RSENSE_MASK, TMC2225_INTERNAL_RSENSE_SHIFT);
    d41e:	4601      	mov	r1, r0
    d420:	4871      	ldr	r0, [pc, #452]	; (d5e8 <handleParameter+0x3f2>)
    d422:	f013 fdd4 	bl	20fce <tmc2225_readInt>
    d426:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d42a:	e793      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_GCONF, TMC2225_INTERNAL_RSENSE_MASK, TMC2225_INTERNAL_RSENSE_SHIFT, *value);
    d42c:	486e      	ldr	r0, [pc, #440]	; (d5e8 <handleParameter+0x3f2>)
    d42e:	2100      	movs	r1, #0
    d430:	f013 fdcd 	bl	20fce <tmc2225_readInt>
    d434:	682b      	ldr	r3, [r5, #0]
    d436:	005b      	lsls	r3, r3, #1
    d438:	f003 0302 	and.w	r3, r3, #2
    d43c:	f020 0202 	bic.w	r2, r0, #2
    d440:	431a      	orrs	r2, r3
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_GCONF, TMC2225_EN_SPREADCYCLE_MASK, TMC2225_EN_SPREADCYCLE_SHIFT, (*value > 0) ? 0 : 1);
    d442:	2100      	movs	r1, #0
    d444:	e7cd      	b.n	d3e2 <handleParameter+0x1ec>
		if(readWrite == READ) {
    d446:	2800      	cmp	r0, #0
    d448:	f47f aee8 	bne.w	d21c <handleParameter+0x26>
			buffer = (int32_t)(((int64_t)StepDir_getFrequency(motor) * (int64_t)122) / (int64_t)TMC2225_FIELD_READ(motorToIC(motor), TMC2225_TSTEP, TMC2225_TSTEP_MASK, TMC2225_TSTEP_SHIFT));
    d44c:	f012 fb90 	bl	1fb70 <StepDir_getFrequency>
    d450:	2112      	movs	r1, #18
    d452:	4604      	mov	r4, r0
    d454:	4864      	ldr	r0, [pc, #400]	; (d5e8 <handleParameter+0x3f2>)
    d456:	f013 fdba 	bl	20fce <tmc2225_readInt>
    d45a:	f3c0 0213 	ubfx	r2, r0, #0, #20
    d45e:	207a      	movs	r0, #122	; 0x7a
    d460:	17d3      	asrs	r3, r2, #31
    d462:	fba4 0100 	umull	r0, r1, r4, r0
    d466:	f01a fa3d 	bl	278e4 <__aeabi_ldivmod>
			*value = (abs(buffer) < 20) ? 0 : buffer;
    d46a:	f100 0313 	add.w	r3, r0, #19
    d46e:	2b26      	cmp	r3, #38	; 0x26
    d470:	bf98      	it	ls
    d472:	2000      	movls	r0, #0
    d474:	e76e      	b.n	d354 <handleParameter+0x15e>
		if(readWrite == READ) {
    d476:	b910      	cbnz	r0, d47e <handleParameter+0x288>
			*value = StepDir_getMode(motor);
    d478:	f012 fb6c 	bl	1fb54 <StepDir_getMode>
    d47c:	e76a      	b.n	d354 <handleParameter+0x15e>
			StepDir_setMode(motor, *value);
    d47e:	7819      	ldrb	r1, [r3, #0]
    d480:	4620      	mov	r0, r4
    d482:	f012 fad1 	bl	1fa28 <StepDir_setMode>
    d486:	e76b      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d488:	b910      	cbnz	r0, d490 <handleParameter+0x29a>
			*value = StepDir_getFrequency(motor);
    d48a:	f012 fb71 	bl	1fb70 <StepDir_getFrequency>
    d48e:	e761      	b.n	d354 <handleParameter+0x15e>
			StepDir_setFrequency(motor, *value);
    d490:	6819      	ldr	r1, [r3, #0]
    d492:	4620      	mov	r0, r4
    d494:	f012 fad8 	bl	1fa48 <StepDir_setFrequency>
    d498:	e762      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d49a:	b948      	cbnz	r0, d4b0 <handleParameter+0x2ba>
			*value = 256 >> TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_MRES_MASK, TMC2225_MRES_SHIFT);
    d49c:	4852      	ldr	r0, [pc, #328]	; (d5e8 <handleParameter+0x3f2>)
    d49e:	216c      	movs	r1, #108	; 0x6c
    d4a0:	f013 fd95 	bl	20fce <tmc2225_readInt>
    d4a4:	f3c0 6303 	ubfx	r3, r0, #24, #4
    d4a8:	f44f 7080 	mov.w	r0, #256	; 0x100
    d4ac:	4118      	asrs	r0, r3
    d4ae:	e751      	b.n	d354 <handleParameter+0x15e>
			switch(*value)
    d4b0:	681b      	ldr	r3, [r3, #0]
    d4b2:	2b10      	cmp	r3, #16
    d4b4:	d02f      	beq.n	d516 <handleParameter+0x320>
    d4b6:	dc0a      	bgt.n	d4ce <handleParameter+0x2d8>
    d4b8:	3b01      	subs	r3, #1
    d4ba:	2b07      	cmp	r3, #7
    d4bc:	d80e      	bhi.n	d4dc <handleParameter+0x2e6>
    d4be:	2b07      	cmp	r3, #7
    d4c0:	d80c      	bhi.n	d4dc <handleParameter+0x2e6>
    d4c2:	e8df f003 	tbb	[pc, r3]
    d4c6:	2215      	.short	0x2215
    d4c8:	0b0b240b 	.word	0x0b0b240b
    d4cc:	260b      	.short	0x260b
    d4ce:	2b80      	cmp	r3, #128	; 0x80
    d4d0:	d027      	beq.n	d522 <handleParameter+0x32c>
    d4d2:	dc08      	bgt.n	d4e6 <handleParameter+0x2f0>
    d4d4:	2b20      	cmp	r3, #32
    d4d6:	d020      	beq.n	d51a <handleParameter+0x324>
    d4d8:	2b40      	cmp	r3, #64	; 0x40
    d4da:	d020      	beq.n	d51e <handleParameter+0x328>
			default:   *value = -1;  break;
    d4dc:	f04f 33ff 	mov.w	r3, #4294967295
    d4e0:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    d4e2:	2610      	movs	r6, #16
    d4e4:	e06d      	b.n	d5c2 <handleParameter+0x3cc>
    d4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    d4ea:	d1f7      	bne.n	d4dc <handleParameter+0x2e6>
			case 256:  *value = 0;   break;
    d4ec:	6029      	str	r1, [r5, #0]
    d4ee:	e001      	b.n	d4f4 <handleParameter+0x2fe>
			case 1:    *value = 8;   break;
    d4f0:	2308      	movs	r3, #8
			case 128:  *value = 1;   break;
    d4f2:	602b      	str	r3, [r5, #0]
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_MRES_MASK, TMC2225_MRES_SHIFT, *value);
    d4f4:	483c      	ldr	r0, [pc, #240]	; (d5e8 <handleParameter+0x3f2>)
    d4f6:	216c      	movs	r1, #108	; 0x6c
    d4f8:	f013 fd69 	bl	20fce <tmc2225_readInt>
    d4fc:	682b      	ldr	r3, [r5, #0]
    d4fe:	061b      	lsls	r3, r3, #24
    d500:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    d504:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
    d508:	e01d      	b.n	d546 <handleParameter+0x350>
			case 2:    *value = 7;   break;
    d50a:	2307      	movs	r3, #7
    d50c:	e7f1      	b.n	d4f2 <handleParameter+0x2fc>
			case 4:    *value = 6;   break;
    d50e:	2306      	movs	r3, #6
    d510:	e7ef      	b.n	d4f2 <handleParameter+0x2fc>
			case 8:    *value = 5;   break;
    d512:	2305      	movs	r3, #5
    d514:	e7ed      	b.n	d4f2 <handleParameter+0x2fc>
			case 16:   *value = 4;   break;
    d516:	2304      	movs	r3, #4
    d518:	e7eb      	b.n	d4f2 <handleParameter+0x2fc>
			case 32:   *value = 3;   break;
    d51a:	2303      	movs	r3, #3
    d51c:	e7e9      	b.n	d4f2 <handleParameter+0x2fc>
			case 64:   *value = 2;   break;
    d51e:	2302      	movs	r3, #2
    d520:	e7e7      	b.n	d4f2 <handleParameter+0x2fc>
			case 128:  *value = 1;   break;
    d522:	2301      	movs	r3, #1
    d524:	e7e5      	b.n	d4f2 <handleParameter+0x2fc>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TBL_MASK, TMC2225_TBL_SHIFT);
    d526:	4830      	ldr	r0, [pc, #192]	; (d5e8 <handleParameter+0x3f2>)
    d528:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    d52a:	b926      	cbnz	r6, d536 <handleParameter+0x340>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TBL_MASK, TMC2225_TBL_SHIFT);
    d52c:	f013 fd4f 	bl	20fce <tmc2225_readInt>
    d530:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    d534:	e70e      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TBL_MASK, TMC2225_TBL_SHIFT, *value);
    d536:	f013 fd4a 	bl	20fce <tmc2225_readInt>
    d53a:	682b      	ldr	r3, [r5, #0]
    d53c:	03db      	lsls	r3, r3, #15
    d53e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    d542:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_MRES_MASK, TMC2225_MRES_SHIFT, *value);
    d546:	431a      	orrs	r2, r3
    d548:	e06e      	b.n	d628 <handleParameter+0x432>
		if(readWrite == READ) {
    d54a:	2e00      	cmp	r6, #0
    d54c:	f47f ae66 	bne.w	d21c <handleParameter+0x26>
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d550:	216c      	movs	r1, #108	; 0x6c
    d552:	4825      	ldr	r0, [pc, #148]	; (d5e8 <handleParameter+0x3f2>)
    d554:	f013 fd3b 	bl	20fce <tmc2225_readInt>
    d558:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HEND_MASK, TMC2225_HEND_SHIFT);
    d55c:	f04f 016c 	mov.w	r1, #108	; 0x6c
    d560:	4821      	ldr	r0, [pc, #132]	; (d5e8 <handleParameter+0x3f2>)
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d562:	d004      	beq.n	d56e <handleParameter+0x378>
				*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HEND_MASK, TMC2225_HEND_SHIFT);
    d564:	f013 fd33 	bl	20fce <tmc2225_readInt>
    d568:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    d56c:	e6f2      	b.n	d354 <handleParameter+0x15e>
				buffer = tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF);
    d56e:	f013 fd2e 	bl	20fce <tmc2225_readInt>
				*value = (tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) >> 4) & 0x07;
    d572:	216c      	movs	r1, #108	; 0x6c
				buffer = tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF);
    d574:	4604      	mov	r4, r0
				*value = (tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) >> 4) & 0x07;
    d576:	481c      	ldr	r0, [pc, #112]	; (d5e8 <handleParameter+0x3f2>)
    d578:	f013 fd29 	bl	20fce <tmc2225_readInt>
    d57c:	f3c0 1302 	ubfx	r3, r0, #4, #3
				if(buffer & (1<<11))
    d580:	0522      	lsls	r2, r4, #20
    d582:	d41b      	bmi.n	d5bc <handleParameter+0x3c6>
				*value = (tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) >> 4) & 0x07;
    d584:	602b      	str	r3, [r5, #0]
    d586:	e6eb      	b.n	d360 <handleParameter+0x16a>
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d588:	4817      	ldr	r0, [pc, #92]	; (d5e8 <handleParameter+0x3f2>)
    d58a:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    d58c:	b9de      	cbnz	r6, d5c6 <handleParameter+0x3d0>
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d58e:	f013 fd1e 	bl	20fce <tmc2225_readInt>
    d592:	f410 4f80 	tst.w	r0, #16384	; 0x4000
				*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HSTRT_MASK, TMC2225_HSTRT_SHIFT);
    d596:	f04f 016c 	mov.w	r1, #108	; 0x6c
    d59a:	4813      	ldr	r0, [pc, #76]	; (d5e8 <handleParameter+0x3f2>)
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d59c:	d004      	beq.n	d5a8 <handleParameter+0x3b2>
				*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HSTRT_MASK, TMC2225_HSTRT_SHIFT);
    d59e:	f013 fd16 	bl	20fce <tmc2225_readInt>
    d5a2:	f3c0 1002 	ubfx	r0, r0, #4, #3
    d5a6:	e6d5      	b.n	d354 <handleParameter+0x15e>
				buffer = tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF);
    d5a8:	f013 fd11 	bl	20fce <tmc2225_readInt>
				*value = (tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) >> 7) & 0x0F;
    d5ac:	216c      	movs	r1, #108	; 0x6c
				buffer = tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF);
    d5ae:	4604      	mov	r4, r0
				*value = (tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) >> 7) & 0x0F;
    d5b0:	480d      	ldr	r0, [pc, #52]	; (d5e8 <handleParameter+0x3f2>)
    d5b2:	f013 fd0c 	bl	20fce <tmc2225_readInt>
    d5b6:	f3c0 13c3 	ubfx	r3, r0, #7, #4
				if(buffer & (1<<11))
    d5ba:	e7e1      	b.n	d580 <handleParameter+0x38a>
					*value |= 1<<3;
    d5bc:	f043 0308 	orr.w	r3, r3, #8
    d5c0:	602b      	str	r3, [r5, #0]
}
    d5c2:	4630      	mov	r0, r6
    d5c4:	bd70      	pop	{r4, r5, r6, pc}
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d5c6:	f013 fd02 	bl	20fce <tmc2225_readInt>
    d5ca:	f410 4680 	ands.w	r6, r0, #16384	; 0x4000
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HSTRT_MASK, TMC2225_HSTRT_SHIFT, *value);
    d5ce:	f04f 016c 	mov.w	r1, #108	; 0x6c
    d5d2:	4805      	ldr	r0, [pc, #20]	; (d5e8 <handleParameter+0x3f2>)
			if(tmc2225_readInt(motorToIC(motor), TMC2225_CHOPCONF) & (1<<14))
    d5d4:	d00a      	beq.n	d5ec <handleParameter+0x3f6>
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HSTRT_MASK, TMC2225_HSTRT_SHIFT, *value);
    d5d6:	f013 fcfa 	bl	20fce <tmc2225_readInt>
    d5da:	682b      	ldr	r3, [r5, #0]
    d5dc:	011b      	lsls	r3, r3, #4
    d5de:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d5e2:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    d5e6:	e7ae      	b.n	d546 <handleParameter+0x350>
    d5e8:	1fff2240 	.word	0x1fff2240
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_HEND_MASK, TMC2225_HEND_SHIFT, *value);
    d5ec:	f013 fcef 	bl	20fce <tmc2225_readInt>
    d5f0:	682b      	ldr	r3, [r5, #0]
    d5f2:	01db      	lsls	r3, r3, #7
    d5f4:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    d5f8:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    d5fc:	431a      	orrs	r2, r3
    d5fe:	485a      	ldr	r0, [pc, #360]	; (d768 <handleParameter+0x572>)
    d600:	216c      	movs	r1, #108	; 0x6c
    d602:	f013 fcb1 	bl	20f68 <tmc2225_writeInt>
    d606:	e7dc      	b.n	d5c2 <handleParameter+0x3cc>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TOFF_MASK, TMC2225_TOFF_SHIFT);
    d608:	4857      	ldr	r0, [pc, #348]	; (d768 <handleParameter+0x572>)
    d60a:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    d60c:	b926      	cbnz	r6, d618 <handleParameter+0x422>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TOFF_MASK, TMC2225_TOFF_SHIFT);
    d60e:	f013 fcde 	bl	20fce <tmc2225_readInt>
    d612:	f000 000f 	and.w	r0, r0, #15
    d616:	e69d      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_TOFF_MASK, TMC2225_TOFF_SHIFT, *value);
    d618:	f013 fcd9 	bl	20fce <tmc2225_readInt>
    d61c:	682a      	ldr	r2, [r5, #0]
    d61e:	f020 000f 	bic.w	r0, r0, #15
    d622:	f002 020f 	and.w	r2, r2, #15
    d626:	4302      	orrs	r2, r0
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_MRES_MASK, TMC2225_MRES_SHIFT, *value);
    d628:	216c      	movs	r1, #108	; 0x6c
    d62a:	e6da      	b.n	d3e2 <handleParameter+0x1ec>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_VSENSE_MASK, TMC2225_VSENSE_SHIFT);
    d62c:	484e      	ldr	r0, [pc, #312]	; (d768 <handleParameter+0x572>)
    d62e:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
    d630:	b926      	cbnz	r6, d63c <handleParameter+0x446>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_VSENSE_MASK, TMC2225_VSENSE_SHIFT);
    d632:	f013 fccc 	bl	20fce <tmc2225_readInt>
    d636:	f3c0 4040 	ubfx	r0, r0, #17, #1
    d63a:	e68b      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_CHOPCONF, TMC2225_VSENSE_MASK, TMC2225_VSENSE_SHIFT, *value);
    d63c:	f013 fcc7 	bl	20fce <tmc2225_readInt>
    d640:	682b      	ldr	r3, [r5, #0]
    d642:	045b      	lsls	r3, r3, #17
    d644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d648:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
    d64c:	e77b      	b.n	d546 <handleParameter+0x350>
		if(readWrite == READ) {
    d64e:	2e00      	cmp	r6, #0
    d650:	f47f ade4 	bne.w	d21c <handleParameter+0x26>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_DRVSTATUS, TMC2225_CS_ACTUAL_MASK, TMC2225_CS_ACTUAL_SHIFT);
    d654:	4844      	ldr	r0, [pc, #272]	; (d768 <handleParameter+0x572>)
    d656:	216f      	movs	r1, #111	; 0x6f
    d658:	f013 fcb9 	bl	20fce <tmc2225_readInt>
    d65c:	f3c0 4004 	ubfx	r0, r0, #16, #5
    d660:	e678      	b.n	d354 <handleParameter+0x15e>
		if(readWrite == READ) {
    d662:	b91e      	cbnz	r6, d66c <handleParameter+0x476>
			*value = StepDir_getStallGuardThreshold(motor);
    d664:	4630      	mov	r0, r6
    d666:	f012 fa67 	bl	1fb38 <StepDir_getStallGuardThreshold>
    d66a:	e673      	b.n	d354 <handleParameter+0x15e>
			StepDir_setStallGuardThreshold(motor, *value);
    d66c:	6829      	ldr	r1, [r5, #0]
    d66e:	2000      	movs	r0, #0
    d670:	f012 f9cc 	bl	1fa0c <StepDir_setStallGuardThreshold>
    d674:	e674      	b.n	d360 <handleParameter+0x16a>
		if(readWrite == READ) {
    d676:	b986      	cbnz	r6, d69a <handleParameter+0x4a4>
			buffer = tmc2225_readInt(motorToIC(motor), TMC2225_TPWMTHRS);
    d678:	483b      	ldr	r0, [pc, #236]	; (d768 <handleParameter+0x572>)
    d67a:	2113      	movs	r1, #19
    d67c:	f013 fca7 	bl	20fce <tmc2225_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer) ? buffer : 1));
    d680:	2800      	cmp	r0, #0
    d682:	bf08      	it	eq
    d684:	2001      	moveq	r0, #1
    d686:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d68a:	fb93 f0f0 	sdiv	r0, r3, r0
    d68e:	4b37      	ldr	r3, [pc, #220]	; (d76c <handleParameter+0x576>)
    d690:	4298      	cmp	r0, r3
    d692:	bfd4      	ite	le
    d694:	6028      	strle	r0, [r5, #0]
    d696:	602b      	strgt	r3, [r5, #0]
    d698:	e793      	b.n	d5c2 <handleParameter+0x3cc>
			*value = MIN(0xFFFFF, (1<<24) / ((*value) ? *value : 1));
    d69a:	682b      	ldr	r3, [r5, #0]
    d69c:	2b00      	cmp	r3, #0
    d69e:	bf08      	it	eq
    d6a0:	2301      	moveq	r3, #1
    d6a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d6a6:	fb92 f2f3 	sdiv	r2, r2, r3
    d6aa:	4b30      	ldr	r3, [pc, #192]	; (d76c <handleParameter+0x576>)
    d6ac:	429a      	cmp	r2, r3
    d6ae:	bfa8      	it	ge
    d6b0:	461a      	movge	r2, r3
    d6b2:	602a      	str	r2, [r5, #0]
			tmc2225_writeInt(motorToIC(motor), TMC2225_TPWMTHRS, *value);
    d6b4:	2113      	movs	r1, #19
    d6b6:	e694      	b.n	d3e2 <handleParameter+0x1ec>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_GRAD_MASK, TMC2225_PWM_GRAD_SHIFT);
    d6b8:	482b      	ldr	r0, [pc, #172]	; (d768 <handleParameter+0x572>)
    d6ba:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    d6bc:	b926      	cbnz	r6, d6c8 <handleParameter+0x4d2>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_GRAD_MASK, TMC2225_PWM_GRAD_SHIFT);
    d6be:	f013 fc86 	bl	20fce <tmc2225_readInt>
    d6c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    d6c6:	e645      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_GRAD_MASK, TMC2225_PWM_GRAD_SHIFT, *value);
    d6c8:	f013 fc81 	bl	20fce <tmc2225_readInt>
    d6cc:	682b      	ldr	r3, [r5, #0]
    d6ce:	021b      	lsls	r3, r3, #8
    d6d0:	b29b      	uxth	r3, r3
    d6d2:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
    d6d6:	431a      	orrs	r2, r3
    d6d8:	4823      	ldr	r0, [pc, #140]	; (d768 <handleParameter+0x572>)
    d6da:	2170      	movs	r1, #112	; 0x70
    d6dc:	f013 fc44 	bl	20f68 <tmc2225_writeInt>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_GCONF, TMC2225_EN_SPREADCYCLE_MASK, TMC2225_EN_SPREADCYCLE_SHIFT, (*value > 0) ? 0 : 1);
    d6e0:	4821      	ldr	r0, [pc, #132]	; (d768 <handleParameter+0x572>)
    d6e2:	2100      	movs	r1, #0
    d6e4:	f013 fc73 	bl	20fce <tmc2225_readInt>
    d6e8:	682b      	ldr	r3, [r5, #0]
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	f020 0004 	bic.w	r0, r0, #4
    d6f0:	bfd4      	ite	le
    d6f2:	2204      	movle	r2, #4
    d6f4:	2200      	movgt	r2, #0
    d6f6:	4302      	orrs	r2, r0
    d6f8:	e6a3      	b.n	d442 <handleParameter+0x24c>
		if(readWrite == READ) {
    d6fa:	b936      	cbnz	r6, d70a <handleParameter+0x514>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_FREQ_MASK, TMC2225_PWM_FREQ_SHIFT);
    d6fc:	481a      	ldr	r0, [pc, #104]	; (d768 <handleParameter+0x572>)
    d6fe:	2170      	movs	r1, #112	; 0x70
    d700:	f013 fc65 	bl	20fce <tmc2225_readInt>
    d704:	f3c0 4001 	ubfx	r0, r0, #16, #2
    d708:	e624      	b.n	d354 <handleParameter+0x15e>
			if(*value >= 0 && *value < 4)
    d70a:	682b      	ldr	r3, [r5, #0]
    d70c:	2b03      	cmp	r3, #3
    d70e:	f63f aee8 	bhi.w	d4e2 <handleParameter+0x2ec>
				TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_FREQ_MASK, TMC2225_PWM_FREQ_SHIFT, *value);
    d712:	4815      	ldr	r0, [pc, #84]	; (d768 <handleParameter+0x572>)
    d714:	2170      	movs	r1, #112	; 0x70
    d716:	f013 fc5a 	bl	20fce <tmc2225_readInt>
    d71a:	682b      	ldr	r3, [r5, #0]
    d71c:	041b      	lsls	r3, r3, #16
    d71e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    d722:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_PWMCONF, TMC2225_FREEWHEEL_MASK, TMC2225_FREEWHEEL_SHIFT, *value);
    d726:	431a      	orrs	r2, r3
    d728:	2170      	movs	r1, #112	; 0x70
    d72a:	e65a      	b.n	d3e2 <handleParameter+0x1ec>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_AUTOSCALE_MASK, TMC2225_PWM_AUTOSCALE_SHIFT);
    d72c:	480e      	ldr	r0, [pc, #56]	; (d768 <handleParameter+0x572>)
    d72e:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
    d730:	b926      	cbnz	r6, d73c <handleParameter+0x546>
			*value = TMC2225_FIELD_READ(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_AUTOSCALE_MASK, TMC2225_PWM_AUTOSCALE_SHIFT);
    d732:	f013 fc4c 	bl	20fce <tmc2225_readInt>
    d736:	f3c0 4080 	ubfx	r0, r0, #18, #1
    d73a:	e60b      	b.n	d354 <handleParameter+0x15e>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_PWMCONF, TMC2225_PWM_AUTOSCALE_MASK, TMC2225_PWM_AUTOSCALE_SHIFT, (*value)? 1:0);
    d73c:	f013 fc47 	bl	20fce <tmc2225_readInt>
    d740:	682b      	ldr	r3, [r5, #0]
    d742:	2b00      	cmp	r3, #0
    d744:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
    d748:	bf18      	it	ne
    d74a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
    d74e:	e7ea      	b.n	d726 <handleParameter+0x530>
			TMC2225_FIELD_UPDATE(motorToIC(motor), TMC2225_PWMCONF, TMC2225_FREEWHEEL_MASK, TMC2225_FREEWHEEL_SHIFT, *value);
    d750:	f013 fc3d 	bl	20fce <tmc2225_readInt>
    d754:	682b      	ldr	r3, [r5, #0]
    d756:	051b      	lsls	r3, r3, #20
    d758:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    d75c:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
    d760:	e7e1      	b.n	d726 <handleParameter+0x530>
		return TMC_ERROR_MOTOR;
    d762:	2608      	movs	r6, #8
    d764:	e72d      	b.n	d5c2 <handleParameter+0x3cc>
    d766:	bf00      	nop
    d768:	1fff2240 	.word	0x1fff2240
    d76c:	000fffff 	.word	0x000fffff

0000d770 <SAP>:
{
    d770:	b507      	push	{r0, r1, r2, lr}
    d772:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    d774:	ab01      	add	r3, sp, #4
    d776:	4602      	mov	r2, r0
    d778:	2001      	movs	r0, #1
    d77a:	f7ff fd3c 	bl	d1f6 <handleParameter>
}
    d77e:	b003      	add	sp, #12
    d780:	f85d fb04 	ldr.w	pc, [sp], #4

0000d784 <GAP>:
{
    d784:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    d786:	4602      	mov	r2, r0
    d788:	2000      	movs	r0, #0
    d78a:	e534      	b.n	d1f6 <handleParameter>

0000d78c <restore>:
	return tmc2225_restore(&TMC2225);
    d78c:	4801      	ldr	r0, [pc, #4]	; (d794 <restore+0x8>)
    d78e:	f013 bce1 	b.w	21154 <tmc2225_restore>
    d792:	bf00      	nop
    d794:	1fff2240 	.word	0x1fff2240

0000d798 <reset>:
{
    d798:	b510      	push	{r4, lr}
	StepDir_init(STEPDIR_PRECISION);
    d79a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    d79e:	4c07      	ldr	r4, [pc, #28]	; (d7bc <reset+0x24>)
	StepDir_init(STEPDIR_PRECISION);
    d7a0:	f012 fa18 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    d7a4:	2300      	movs	r3, #0
    d7a6:	e9d4 12a3 	ldrd	r1, r2, [r4, #652]	; 0x28c
    d7aa:	4618      	mov	r0, r3
    d7ac:	f012 f868 	bl	1f880 <StepDir_setPins>
	return tmc2225_reset(&TMC2225);
    d7b0:	4620      	mov	r0, r4
}
    d7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tmc2225_reset(&TMC2225);
    d7b6:	f013 bcb6 	b.w	21126 <tmc2225_reset>
    d7ba:	bf00      	nop
    d7bc:	1fff2240 	.word	0x1fff2240

0000d7c0 <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    d7c0:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    d7c2:	bf04      	itt	eq
    d7c4:	4b0c      	ldreq	r3, [pc, #48]	; (d7f8 <enableDriver+0x38>)
    d7c6:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
    d7ca:	b938      	cbnz	r0, d7dc <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
    d7cc:	4b0b      	ldr	r3, [pc, #44]	; (d7fc <enableDriver+0x3c>)
    d7ce:	68db      	ldr	r3, [r3, #12]
    d7d0:	681b      	ldr	r3, [r3, #0]
    d7d2:	695b      	ldr	r3, [r3, #20]
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    d7d4:	4a0a      	ldr	r2, [pc, #40]	; (d800 <enableDriver+0x40>)
    d7d6:	f8d2 0288 	ldr.w	r0, [r2, #648]	; 0x288
    d7da:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    d7dc:	2801      	cmp	r0, #1
    d7de:	d109      	bne.n	d7f4 <enableDriver+0x34>
    d7e0:	4b05      	ldr	r3, [pc, #20]	; (d7f8 <enableDriver+0x38>)
    d7e2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    d7e6:	2b01      	cmp	r3, #1
    d7e8:	d104      	bne.n	d7f4 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
    d7ea:	4b04      	ldr	r3, [pc, #16]	; (d7fc <enableDriver+0x3c>)
    d7ec:	68db      	ldr	r3, [r3, #12]
    d7ee:	681b      	ldr	r3, [r3, #0]
    d7f0:	699b      	ldr	r3, [r3, #24]
    d7f2:	e7ef      	b.n	d7d4 <enableDriver+0x14>
}
    d7f4:	4770      	bx	lr
    d7f6:	bf00      	nop
    d7f8:	1fff5e88 	.word	0x1fff5e88
    d7fc:	00029d1c 	.word	0x00029d1c
    d800:	1fff2240 	.word	0x1fff2240

0000d804 <deInit>:
{
    d804:	b538      	push	{r3, r4, r5, lr}
	enableDriver(DRIVER_DISABLE);
    d806:	2000      	movs	r0, #0
    d808:	f7ff ffda 	bl	d7c0 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
    d80c:	4b14      	ldr	r3, [pc, #80]	; (d860 <deInit+0x5c>)
    d80e:	4c15      	ldr	r4, [pc, #84]	; (d864 <deInit+0x60>)
    d810:	68dd      	ldr	r5, [r3, #12]
    d812:	f8d4 0288 	ldr.w	r0, [r4, #648]	; 0x288
    d816:	682b      	ldr	r3, [r5, #0]
    d818:	689b      	ldr	r3, [r3, #8]
    d81a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    d81c:	682b      	ldr	r3, [r5, #0]
    d81e:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    d822:	689b      	ldr	r3, [r3, #8]
    d824:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    d826:	682b      	ldr	r3, [r5, #0]
    d828:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    d82c:	689b      	ldr	r3, [r3, #8]
    d82e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS1);
    d830:	682b      	ldr	r3, [r5, #0]
    d832:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    d836:	689b      	ldr	r3, [r3, #8]
    d838:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.MS2);
    d83a:	682b      	ldr	r3, [r5, #0]
    d83c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    d840:	689b      	ldr	r3, [r3, #8]
    d842:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIAG);
    d844:	682b      	ldr	r3, [r5, #0]
    d846:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    d84a:	689b      	ldr	r3, [r3, #8]
    d84c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INDEX);
    d84e:	682b      	ldr	r3, [r5, #0]
    d850:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    d854:	689b      	ldr	r3, [r3, #8]
    d856:	4798      	blx	r3
}
    d858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	StepDir_deInit();
    d85c:	f012 ba32 	b.w	1fcc4 <StepDir_deInit>
    d860:	00029d1c 	.word	0x00029d1c
    d864:	1fff2240 	.word	0x1fff2240

0000d868 <userFunction>:
{
    d868:	b510      	push	{r4, lr}
    d86a:	4614      	mov	r4, r2
    d86c:	2804      	cmp	r0, #4
    d86e:	d828      	bhi.n	d8c2 <userFunction+0x5a>
    d870:	e8df f000 	tbb	[pc, r0]
    d874:	120e0803 	.word	0x120e0803
    d878:	1a          	.byte	0x1a
    d879:	00          	.byte	0x00
		*value = StepDir_getStatus(motor);
    d87a:	4608      	mov	r0, r1
    d87c:	f011 ffd8 	bl	1f830 <StepDir_getStatus>
		*value = Timer.getDuty(TIMER_CHANNEL_3) * 100 / TIMER_MAX;
    d880:	6020      	str	r0, [r4, #0]
		break;
    d882:	e003      	b.n	d88c <userFunction+0x24>
		tmc2225_set_slave(motorToIC(motor), (*value) & 0xFF);
    d884:	7811      	ldrb	r1, [r2, #0]
    d886:	4810      	ldr	r0, [pc, #64]	; (d8c8 <userFunction+0x60>)
    d888:	f013 fc6d 	bl	21166 <tmc2225_set_slave>
		Timer.setDuty(TIMER_CHANNEL_3, (uint32_t) ((uint32_t)(*value) * (uint32_t)TIMER_MAX) / (uint32_t)100);
    d88c:	2000      	movs	r0, #0
}
    d88e:	bd10      	pop	{r4, pc}
		*value = tmc2225_get_slave(motorToIC(motor));
    d890:	480d      	ldr	r0, [pc, #52]	; (d8c8 <userFunction+0x60>)
    d892:	f013 fc6b 	bl	2116c <tmc2225_get_slave>
    d896:	e7f3      	b.n	d880 <userFunction+0x18>
		*value = Timer.getDuty(TIMER_CHANNEL_3) * 100 / TIMER_MAX;
    d898:	4b0c      	ldr	r3, [pc, #48]	; (d8cc <userFunction+0x64>)
    d89a:	2002      	movs	r0, #2
    d89c:	68db      	ldr	r3, [r3, #12]
    d89e:	4798      	blx	r3
    d8a0:	2350      	movs	r3, #80	; 0x50
    d8a2:	fbb0 f0f3 	udiv	r0, r0, r3
    d8a6:	e7eb      	b.n	d880 <userFunction+0x18>
		Timer.setDuty(TIMER_CHANNEL_3, (uint32_t) ((uint32_t)(*value) * (uint32_t)TIMER_MAX) / (uint32_t)100);
    d8a8:	6813      	ldr	r3, [r2, #0]
    d8aa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    d8ae:	4359      	muls	r1, r3
    d8b0:	2364      	movs	r3, #100	; 0x64
    d8b2:	fbb1 f1f3 	udiv	r1, r1, r3
    d8b6:	4b05      	ldr	r3, [pc, #20]	; (d8cc <userFunction+0x64>)
    d8b8:	b289      	uxth	r1, r1
    d8ba:	689b      	ldr	r3, [r3, #8]
    d8bc:	2002      	movs	r0, #2
    d8be:	4798      	blx	r3
    d8c0:	e7e4      	b.n	d88c <userFunction+0x24>
    d8c2:	2004      	movs	r0, #4
	return errors;
    d8c4:	e7e3      	b.n	d88e <userFunction+0x26>
    d8c6:	bf00      	nop
    d8c8:	1fff2240 	.word	0x1fff2240
    d8cc:	1fff0ae0 	.word	0x1fff0ae0

0000d8d0 <moveBy>:
{
    d8d0:	b538      	push	{r3, r4, r5, lr}
    d8d2:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    d8d4:	4604      	mov	r4, r0
    d8d6:	b948      	cbnz	r0, d8ec <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    d8d8:	f012 f8ce 	bl	1fa78 <StepDir_getActualPosition>
    d8dc:	6829      	ldr	r1, [r5, #0]
    d8de:	4401      	add	r1, r0
    d8e0:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    d8e2:	4620      	mov	r0, r4
    d8e4:	f011 ff46 	bl	1f774 <StepDir_moveTo>
    d8e8:	4620      	mov	r0, r4
}
    d8ea:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    d8ec:	2008      	movs	r0, #8
    d8ee:	e7fc      	b.n	d8ea <moveBy+0x1a>

0000d8f0 <tmc2225_readWriteArray>:
	UART_readWrite(channelToUART(channel), data, writeLength, readLength);
    d8f0:	4802      	ldr	r0, [pc, #8]	; (d8fc <tmc2225_readWriteArray+0xc>)
    d8f2:	b2db      	uxtb	r3, r3
    d8f4:	f8d0 02a8 	ldr.w	r0, [r0, #680]	; 0x2a8
    d8f8:	f010 b9e2 	b.w	1dcc0 <UART_readWrite>
    d8fc:	1fff2240 	.word	0x1fff2240

0000d900 <tmc2225_CRC8>:
	return TMC2225_CRC(data, length);
    d900:	2201      	movs	r2, #1
    d902:	f012 bb8b 	b.w	2001c <tmc_CRC8>

0000d906 <TMC2225_init>:

void TMC2225_init(void)
{
    d906:	b570      	push	{r4, r5, r6, lr}
	tmc_fillCRC8Table(0x07, true, 1);
    d908:	2201      	movs	r2, #1

	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d90a:	4e5f      	ldr	r6, [pc, #380]	; (da88 <TMC2225_init+0x182>)
    d90c:	4c5f      	ldr	r4, [pc, #380]	; (da8c <TMC2225_init+0x186>)
	tmc_fillCRC8Table(0x07, true, 1);
    d90e:	4611      	mov	r1, r2
    d910:	2007      	movs	r0, #7
    d912:	f012 fb29 	bl	1ff68 <tmc_fillCRC8Table>
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d916:	68f5      	ldr	r5, [r6, #12]
    d918:	686b      	ldr	r3, [r5, #4]
	Pins.STEP     = &HAL.IOs->pins->DIO6;
    d91a:	f503 7294 	add.w	r2, r3, #296	; 0x128
    d91e:	f8c4 228c 	str.w	r2, [r4, #652]	; 0x28c
	Pins.DIR      = &HAL.IOs->pins->DIO7;
    d922:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    d926:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.MS1      = &HAL.IOs->pins->DIO3;
    d92a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
    d92e:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.MS2      = &HAL.IOs->pins->DIO4;
    d932:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
    d936:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    d93a:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d93e:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.DIAG     = &HAL.IOs->pins->DIO1;
    d942:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    d946:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
	Pins.UC_PWM   = &HAL.IOs->pins->DIO9;
    d94a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
    d94e:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d952:	682b      	ldr	r3, [r5, #0]
	Pins.INDEX    = &HAL.IOs->pins->DIO2;
    d954:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d958:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN  = &HAL.IOs->pins->DIO0;
    d95a:	f8c4 0288 	str.w	r0, [r4, #648]	; 0x288
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
    d95e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STEP);
    d960:	682b      	ldr	r3, [r5, #0]
    d962:	f8d4 028c 	ldr.w	r0, [r4, #652]	; 0x28c
    d966:	68db      	ldr	r3, [r3, #12]
    d968:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    d96a:	682b      	ldr	r3, [r5, #0]
    d96c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    d970:	68db      	ldr	r3, [r3, #12]
    d972:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS1);
    d974:	682b      	ldr	r3, [r5, #0]
    d976:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
    d97a:	68db      	ldr	r3, [r3, #12]
    d97c:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.MS2);
    d97e:	682b      	ldr	r3, [r5, #0]
    d980:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
    d984:	68db      	ldr	r3, [r3, #12]
    d986:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.DIAG);
    d988:	682b      	ldr	r3, [r5, #0]
    d98a:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
    d98e:	691b      	ldr	r3, [r3, #16]
    d990:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INDEX);
    d992:	682b      	ldr	r3, [r5, #0]
    d994:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
    d998:	691b      	ldr	r3, [r3, #16]
    d99a:	4798      	blx	r3

	TMC2225_UARTChannel = HAL.UART;
    d99c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d99e:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
	TMC2225_UARTChannel->pinout = UART_PINS_2;
    d9a2:	2601      	movs	r6, #1
    d9a4:	701e      	strb	r6, [r3, #0]
	TMC2225_UARTChannel->rxtx.init();
    d9a6:	685b      	ldr	r3, [r3, #4]
    d9a8:	4798      	blx	r3

	TMC2225_config = Evalboards.ch2.config;
    d9aa:	4b39      	ldr	r3, [pc, #228]	; (da90 <TMC2225_init+0x18a>)

	Evalboards.ch2.config->reset        = reset;
    d9ac:	4939      	ldr	r1, [pc, #228]	; (da94 <TMC2225_init+0x18e>)
	TMC2225_config = Evalboards.ch2.config;
    d9ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	Evalboards.ch2.config->reset        = reset;
    d9b2:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
    d9b6:	4938      	ldr	r1, [pc, #224]	; (da98 <TMC2225_init+0x192>)
    d9b8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    d9bc:	4937      	ldr	r1, [pc, #220]	; (da9c <TMC2225_init+0x196>)
	Evalboards.ch2.config->state        = CONFIG_RESET;
    d9be:	8016      	strh	r6, [r2, #0]
	Evalboards.ch2.rotate               = rotate;
    d9c0:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    d9c4:	4936      	ldr	r1, [pc, #216]	; (daa0 <TMC2225_init+0x19a>)
    d9c6:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    d9ca:	4936      	ldr	r1, [pc, #216]	; (daa4 <TMC2225_init+0x19e>)
    d9cc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    d9d0:	4935      	ldr	r1, [pc, #212]	; (daa8 <TMC2225_init+0x1a2>)
    d9d2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    d9d6:	4935      	ldr	r1, [pc, #212]	; (daac <TMC2225_init+0x1a6>)
    d9d8:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    d9dc:	4934      	ldr	r1, [pc, #208]	; (dab0 <TMC2225_init+0x1aa>)
    d9de:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    d9e2:	4934      	ldr	r1, [pc, #208]	; (dab4 <TMC2225_init+0x1ae>)
    d9e4:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    d9e8:	4933      	ldr	r1, [pc, #204]	; (dab8 <TMC2225_init+0x1b2>)
    d9ea:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = tmc2225_writeRegister;
    d9ee:	4933      	ldr	r1, [pc, #204]	; (dabc <TMC2225_init+0x1b6>)
    d9f0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = tmc2225_readRegister;
    d9f4:	4932      	ldr	r1, [pc, #200]	; (dac0 <TMC2225_init+0x1ba>)
    d9f6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	Evalboards.ch2.userFunction         = userFunction;
    d9fa:	4932      	ldr	r1, [pc, #200]	; (dac4 <TMC2225_init+0x1be>)
    d9fc:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
    da00:	4931      	ldr	r1, [pc, #196]	; (dac8 <TMC2225_init+0x1c2>)
    da02:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
    da06:	4931      	ldr	r1, [pc, #196]	; (dacc <TMC2225_init+0x1c6>)
    da08:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    da0c:	2032      	movs	r0, #50	; 0x32
    da0e:	f44f 71c3 	mov.w	r1, #390	; 0x186
    da12:	e9c3 1021 	strd	r1, r0, [r3, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    da16:	492e      	ldr	r1, [pc, #184]	; (dad0 <TMC2225_init+0x1ca>)
    da18:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
	Evalboards.ch2.periodicJob          = periodicJob;
    da1c:	492d      	ldr	r1, [pc, #180]	; (dad4 <TMC2225_init+0x1ce>)
	Evalboards.ch2.numberOfMotors       = MOTORS;
    da1e:	f883 608c 	strb.w	r6, [r3, #140]	; 0x8c
	Evalboards.ch2.periodicJob          = periodicJob;
    da22:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0

	tmc2225_init(&TMC2225, 0, TMC2225_config, &tmc2225_defaultRegisterResetState[0]);
    da26:	4620      	mov	r0, r4
    da28:	4b2b      	ldr	r3, [pc, #172]	; (dad8 <TMC2225_init+0x1d2>)
    da2a:	2100      	movs	r1, #0
    da2c:	f013 fb0e 	bl	2104c <tmc2225_init>

	StepDir_init(STEPDIR_PRECISION);
    da30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    da34:	f012 f8ce 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, NULL);
    da38:	2300      	movs	r3, #0
    da3a:	e9d4 12a3 	ldrd	r1, r2, [r4, #652]	; 0x28c
    da3e:	4618      	mov	r0, r3
    da40:	f011 ff1e 	bl	1f880 <StepDir_setPins>
	StepDir_setVelocityMax(0, 51200);
    da44:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    da48:	2000      	movs	r0, #0
    da4a:	f011 ffd1 	bl	1f9f0 <StepDir_setVelocityMax>
	StepDir_setAcceleration(0, 51200);
    da4e:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    da52:	2000      	movs	r0, #0
    da54:	f012 f97e 	bl	1fd54 <StepDir_setAcceleration>

#if defined(Startrampe)
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF;
	GPIO_PinAFConfig(Pins.UC_PWM->port, Pins.UC_PWM->bit, GPIO_AF_TIM1);
#elif defined(Landungsbruecke)
	HAL.IOs->config->toOutput(Pins.UC_PWM);
    da58:	682b      	ldr	r3, [r5, #0]
    da5a:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
    da5e:	68db      	ldr	r3, [r3, #12]
    da60:	4798      	blx	r3
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    da62:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
#endif

	// Initial PWM for VREF scaling: 75% duty cycle
	HAL.IOs->config->set(Pins.UC_PWM);
	Timer.init();
    da66:	4c1d      	ldr	r4, [pc, #116]	; (dadc <TMC2225_init+0x1d6>)
	Pins.UC_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
    da68:	2304      	movs	r3, #4
    da6a:	7543      	strb	r3, [r0, #21]
	HAL.IOs->config->set(Pins.UC_PWM);
    da6c:	682b      	ldr	r3, [r5, #0]
    da6e:	681b      	ldr	r3, [r3, #0]
    da70:	4798      	blx	r3
	Timer.init();
    da72:	6823      	ldr	r3, [r4, #0]
    da74:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_3, 75*TIMER_MAX / 100);
    da76:	68a3      	ldr	r3, [r4, #8]
    da78:	2002      	movs	r0, #2
    da7a:	f241 7170 	movw	r1, #6000	; 0x1770
    da7e:	4798      	blx	r3

	enableDriver(DRIVER_ENABLE);
    da80:	4630      	mov	r0, r6
};
    da82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	enableDriver(DRIVER_ENABLE);
    da86:	e69b      	b.n	d7c0 <enableDriver>
    da88:	00029d1c 	.word	0x00029d1c
    da8c:	1fff2240 	.word	0x1fff2240
    da90:	1fff5e88 	.word	0x1fff5e88
    da94:	0000d799 	.word	0x0000d799
    da98:	0000d78d 	.word	0x0000d78d
    da9c:	0000d1db 	.word	0x0000d1db
    daa0:	0000d1f5 	.word	0x0000d1f5
    daa4:	0000d1f1 	.word	0x0000d1f1
    daa8:	0000d1ed 	.word	0x0000d1ed
    daac:	0000d785 	.word	0x0000d785
    dab0:	0000d771 	.word	0x0000d771
    dab4:	0000d1c9 	.word	0x0000d1c9
    dab8:	0000d8d1 	.word	0x0000d8d1
    dabc:	0000d191 	.word	0x0000d191
    dac0:	0000d19d 	.word	0x0000d19d
    dac4:	0000d869 	.word	0x0000d869
    dac8:	0000d7c1 	.word	0x0000d7c1
    dacc:	0000d181 	.word	0x0000d181
    dad0:	0000d805 	.word	0x0000d805
    dad4:	0000d1b1 	.word	0x0000d1b1
    dad8:	000288d8 	.word	0x000288d8
    dadc:	1fff0ae0 	.word	0x1fff0ae0

0000dae0 <userFunction>:
} PinsTypeDef;

static PinsTypeDef Pins;

static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
{
    dae0:	4603      	mov	r3, r0
	uint32_t errors = 0;

	UNUSED(motor);

	switch(type)
    dae2:	2b01      	cmp	r3, #1
{
    dae4:	b510      	push	{r4, lr}
    dae6:	4608      	mov	r0, r1
    dae8:	4614      	mov	r4, r2
	switch(type)
    daea:	d00a      	beq.n	db02 <userFunction+0x22>
    daec:	2b02      	cmp	r3, #2
    daee:	d00f      	beq.n	db10 <userFunction+0x30>
    daf0:	b993      	cbnz	r3, db18 <userFunction+0x38>
	{
	case 0:	// disable continuos read/write mode - used in BoardAssignment.c for the combination TMC43XX + TMC2590
		// In continuos read/write mode settings will be continously written to TMC2590 and all replies are requested rotatory.
		// It's the default mode to prevent TMC2590 from loosing setting on brownout and being alway up to date with all chip states.
		TMC2590.continuousModeEnable = *value ? 0 : 1;
    daf2:	6812      	ldr	r2, [r2, #0]
    daf4:	4909      	ldr	r1, [pc, #36]	; (db1c <userFunction+0x3c>)
    daf6:	fab2 f282 	clz	r2, r2
    dafa:	0952      	lsrs	r2, r2, #5
    dafc:	710a      	strb	r2, [r1, #4]
	uint32_t errors = 0;
    dafe:	2000      	movs	r0, #0
		errors |= TMC_ERROR_TYPE;
		break;
	}

	return errors;
}
    db00:	bd10      	pop	{r4, pc}
		compatibilityMode = *value ? 0 : 1;
    db02:	6813      	ldr	r3, [r2, #0]
    db04:	4a06      	ldr	r2, [pc, #24]	; (db20 <userFunction+0x40>)
    db06:	fab3 f383 	clz	r3, r3
    db0a:	095b      	lsrs	r3, r3, #5
    db0c:	6013      	str	r3, [r2, #0]
		break;
    db0e:	e7f6      	b.n	dafe <userFunction+0x1e>
		*value = StepDir_getStatus(motor);
    db10:	f011 fe8e 	bl	1f830 <StepDir_getStatus>
    db14:	6020      	str	r0, [r4, #0]
    db16:	e7f2      	b.n	dafe <userFunction+0x1e>
	switch(type)
    db18:	2004      	movs	r0, #4
	return errors;
    db1a:	e7f1      	b.n	db00 <userFunction+0x20>
    db1c:	1fff24f8 	.word	0x1fff24f8
    db20:	1fff006c 	.word	0x1fff006c

0000db24 <readRegister>:
{
	tmc2590_writeInt(motorToIC(motor), address, value);
}

static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
{
    db24:	b510      	push	{r4, lr}
	*value = tmc2590_readInt(motorToIC(motor), address);
    db26:	4803      	ldr	r0, [pc, #12]	; (db34 <readRegister+0x10>)
{
    db28:	4614      	mov	r4, r2
	*value = tmc2590_readInt(motorToIC(motor), address);
    db2a:	f013 fb6b 	bl	21204 <tmc2590_readInt>
    db2e:	6020      	str	r0, [r4, #0]
}
    db30:	bd10      	pop	{r4, pc}
    db32:	bf00      	nop
    db34:	1fff24f8 	.word	0x1fff24f8

0000db38 <periodicJob>:

	StepDir_deInit();
}

static void periodicJob(uint32_t tick)
{
    db38:	b570      	push	{r4, r5, r6, lr}
	static uint8_t lastCoolStepState = 0;

	tmc2590_periodicJob(&TMC2590, tick);
    db3a:	4c16      	ldr	r4, [pc, #88]	; (db94 <periodicJob+0x5c>)
{
    db3c:	4601      	mov	r1, r0
	tmc2590_periodicJob(&TMC2590, tick);
    db3e:	4620      	mov	r0, r4
    db40:	f013 fbaa 	bl	21298 <tmc2590_periodicJob>
	StepDir_periodicJob(DEFAULT_MOTOR);
    db44:	2000      	movs	r0, #0
    db46:	f011 fe2d 	bl	1f7a4 <StepDir_periodicJob>

	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2590.coolStepThreshold);
    db4a:	2000      	movs	r0, #0
    db4c:	f011 ffb4 	bl	1fab8 <StepDir_getActualVelocity>
    db50:	68a3      	ldr	r3, [r4, #8]
	if(currCoolStepState != lastCoolStepState)
    db52:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2590.coolStepThreshold);
    db56:	2800      	cmp	r0, #0
    db58:	bfb8      	it	lt
    db5a:	4240      	neglt	r0, r0
    db5c:	4298      	cmp	r0, r3
    db5e:	bf34      	ite	cc
    db60:	2600      	movcc	r6, #0
    db62:	2601      	movcs	r6, #1
	if(currCoolStepState != lastCoolStepState)
    db64:	42b2      	cmp	r2, r6
    db66:	d013      	beq.n	db90 <periodicJob+0x58>
	{
		uint8_t value = (currCoolStepState)? TMC2590.coolStepActiveValue : TMC2590.coolStepInactiveValue;
    db68:	4298      	cmp	r0, r3
		TMC2590_FIELD_UPDATE(&TMC2590, TMC2590_SMARTEN, TMC2590_SEMIN_MASK, TMC2590_SEMIN_SHIFT, value);
    db6a:	f04f 0105 	mov.w	r1, #5
    db6e:	4809      	ldr	r0, [pc, #36]	; (db94 <periodicJob+0x5c>)
		uint8_t value = (currCoolStepState)? TMC2590.coolStepActiveValue : TMC2590.coolStepInactiveValue;
    db70:	bf2c      	ite	cs
    db72:	79a5      	ldrbcs	r5, [r4, #6]
    db74:	7965      	ldrbcc	r5, [r4, #5]
		TMC2590_FIELD_UPDATE(&TMC2590, TMC2590_SMARTEN, TMC2590_SEMIN_MASK, TMC2590_SEMIN_SHIFT, value);
    db76:	f013 fb45 	bl	21204 <tmc2590_readInt>
    db7a:	f005 050f 	and.w	r5, r5, #15
    db7e:	f020 020f 	bic.w	r2, r0, #15
    db82:	432a      	orrs	r2, r5
    db84:	4803      	ldr	r0, [pc, #12]	; (db94 <periodicJob+0x5c>)
    db86:	2105      	movs	r1, #5
    db88:	f013 fb2a 	bl	211e0 <tmc2590_writeInt>

		lastCoolStepState = currCoolStepState;
    db8c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	}
}
    db90:	bd70      	pop	{r4, r5, r6, pc}
    db92:	bf00      	nop
    db94:	1fff24f8 	.word	0x1fff24f8

0000db98 <writeRegister>:
	tmc2590_writeInt(motorToIC(motor), address, value);
    db98:	4801      	ldr	r0, [pc, #4]	; (dba0 <writeRegister+0x8>)
    db9a:	f013 bb21 	b.w	211e0 <tmc2590_writeInt>
    db9e:	bf00      	nop
    dba0:	1fff24f8 	.word	0x1fff24f8

0000dba4 <moveTo>:
{
    dba4:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    dba6:	4604      	mov	r4, r0
    dba8:	b918      	cbnz	r0, dbb2 <moveTo+0xe>
	StepDir_moveTo(motor, position);
    dbaa:	f011 fde3 	bl	1f774 <StepDir_moveTo>
	return TMC_ERROR_NONE;
    dbae:	4620      	mov	r0, r4
}
    dbb0:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    dbb2:	2008      	movs	r0, #8
    dbb4:	e7fc      	b.n	dbb0 <moveTo+0xc>

0000dbb6 <rotate>:
{
    dbb6:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    dbb8:	4604      	mov	r4, r0
    dbba:	b918      	cbnz	r0, dbc4 <rotate+0xe>
	StepDir_rotate(motor, velocity);
    dbbc:	f011 fdb4 	bl	1f728 <StepDir_rotate>
	return TMC_ERROR_NONE;
    dbc0:	4620      	mov	r0, r4
}
    dbc2:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    dbc4:	2008      	movs	r0, #8
    dbc6:	e7fc      	b.n	dbc2 <rotate+0xc>

0000dbc8 <stop>:
	return rotate(motor, 0);
    dbc8:	2100      	movs	r1, #0
    dbca:	e7f4      	b.n	dbb6 <rotate>

0000dbcc <left>:
	return rotate(motor, -velocity);
    dbcc:	4249      	negs	r1, r1
    dbce:	e7f2      	b.n	dbb6 <rotate>

0000dbd0 <right>:
	return rotate(motor, velocity);
    dbd0:	e7f1      	b.n	dbb6 <rotate>

0000dbd2 <handleParameter>:
{
    dbd2:	b570      	push	{r4, r5, r6, lr}
    dbd4:	4604      	mov	r4, r0
    dbd6:	461d      	mov	r5, r3
	if(motor >= MOTORS)
    dbd8:	460e      	mov	r6, r1
    dbda:	2900      	cmp	r1, #0
    dbdc:	f040 8393 	bne.w	e306 <handleParameter+0x734>
	switch(type)
    dbe0:	2ad6      	cmp	r2, #214	; 0xd6
    dbe2:	d80a      	bhi.n	dbfa <handleParameter+0x28>
    dbe4:	2a8b      	cmp	r2, #139	; 0x8b
    dbe6:	d80a      	bhi.n	dbfe <handleParameter+0x2c>
    dbe8:	2a1d      	cmp	r2, #29
    dbea:	f240 80a5 	bls.w	dd38 <handleParameter+0x166>
    dbee:	2a32      	cmp	r2, #50	; 0x32
    dbf0:	f000 8156 	beq.w	dea0 <handleParameter+0x2ce>
    dbf4:	2a33      	cmp	r2, #51	; 0x33
    dbf6:	f000 815c 	beq.w	deb2 <handleParameter+0x2e0>
			errors |= TMC_ERROR_TYPE;
    dbfa:	2404      	movs	r4, #4
    dbfc:	e0e2      	b.n	ddc4 <handleParameter+0x1f2>
    dbfe:	3a8c      	subs	r2, #140	; 0x8c
    dc00:	2a4a      	cmp	r2, #74	; 0x4a
    dc02:	d8fa      	bhi.n	dbfa <handleParameter+0x28>
    dc04:	a301      	add	r3, pc, #4	; (adr r3, dc0c <handleParameter+0x3a>)
    dc06:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    dc0a:	bf00      	nop
    dc0c:	0000dec5 	.word	0x0000dec5
    dc10:	0000dbfb 	.word	0x0000dbfb
    dc14:	0000dbfb 	.word	0x0000dbfb
    dc18:	0000dbfb 	.word	0x0000dbfb
    dc1c:	0000dbfb 	.word	0x0000dbfb
    dc20:	0000dbfb 	.word	0x0000dbfb
    dc24:	0000dbfb 	.word	0x0000dbfb
    dc28:	0000dbfb 	.word	0x0000dbfb
    dc2c:	0000dbfb 	.word	0x0000dbfb
    dc30:	0000dbfb 	.word	0x0000dbfb
    dc34:	0000dbfb 	.word	0x0000dbfb
    dc38:	0000dbfb 	.word	0x0000dbfb
    dc3c:	0000dbfb 	.word	0x0000dbfb
    dc40:	0000dbfb 	.word	0x0000dbfb
    dc44:	0000dbfb 	.word	0x0000dbfb
    dc48:	0000dbfb 	.word	0x0000dbfb
    dc4c:	0000dbfb 	.word	0x0000dbfb
    dc50:	0000dbfb 	.word	0x0000dbfb
    dc54:	0000dbfb 	.word	0x0000dbfb
    dc58:	0000dbfb 	.word	0x0000dbfb
    dc5c:	0000df51 	.word	0x0000df51
    dc60:	0000df79 	.word	0x0000df79
    dc64:	0000df9f 	.word	0x0000df9f
    dc68:	0000dfc7 	.word	0x0000dfc7
    dc6c:	0000dfed 	.word	0x0000dfed
    dc70:	0000e013 	.word	0x0000e013
    dc74:	0000e039 	.word	0x0000e039
    dc78:	0000e05f 	.word	0x0000e05f
    dc7c:	0000e087 	.word	0x0000e087
    dc80:	0000e0ad 	.word	0x0000e0ad
    dc84:	0000e0d5 	.word	0x0000e0d5
    dc88:	0000e0f7 	.word	0x0000e0f7
    dc8c:	0000e119 	.word	0x0000e119
    dc90:	0000e127 	.word	0x0000e127
    dc94:	0000e14d 	.word	0x0000e14d
    dc98:	0000e17d 	.word	0x0000e17d
    dc9c:	0000e1a1 	.word	0x0000e1a1
    dca0:	0000e1c3 	.word	0x0000e1c3
    dca4:	0000e1e5 	.word	0x0000e1e5
    dca8:	0000e207 	.word	0x0000e207
    dcac:	0000e229 	.word	0x0000e229
    dcb0:	0000e23d 	.word	0x0000e23d
    dcb4:	0000e24f 	.word	0x0000e24f
    dcb8:	0000e25d 	.word	0x0000e25d
    dcbc:	0000e27d 	.word	0x0000e27d
    dcc0:	0000e29f 	.word	0x0000e29f
    dcc4:	0000dbfb 	.word	0x0000dbfb
    dcc8:	0000dbfb 	.word	0x0000dbfb
    dccc:	0000dbfb 	.word	0x0000dbfb
    dcd0:	0000dbfb 	.word	0x0000dbfb
    dcd4:	0000dbfb 	.word	0x0000dbfb
    dcd8:	0000dbfb 	.word	0x0000dbfb
    dcdc:	0000dbfb 	.word	0x0000dbfb
    dce0:	0000dbfb 	.word	0x0000dbfb
    dce4:	0000dbfb 	.word	0x0000dbfb
    dce8:	0000dbfb 	.word	0x0000dbfb
    dcec:	0000dbfb 	.word	0x0000dbfb
    dcf0:	0000dbfb 	.word	0x0000dbfb
    dcf4:	0000dbfb 	.word	0x0000dbfb
    dcf8:	0000dbfb 	.word	0x0000dbfb
    dcfc:	0000dbfb 	.word	0x0000dbfb
    dd00:	0000dbfb 	.word	0x0000dbfb
    dd04:	0000dbfb 	.word	0x0000dbfb
    dd08:	0000dbfb 	.word	0x0000dbfb
    dd0c:	0000dbfb 	.word	0x0000dbfb
    dd10:	0000dbfb 	.word	0x0000dbfb
    dd14:	0000e2bb 	.word	0x0000e2bb
    dd18:	0000dbfb 	.word	0x0000dbfb
    dd1c:	0000e2e7 	.word	0x0000e2e7
    dd20:	0000dbfb 	.word	0x0000dbfb
    dd24:	0000dbfb 	.word	0x0000dbfb
    dd28:	0000dbfb 	.word	0x0000dbfb
    dd2c:	0000dbfb 	.word	0x0000dbfb
    dd30:	0000dbfb 	.word	0x0000dbfb
    dd34:	0000e2f9 	.word	0x0000e2f9
    dd38:	2a1d      	cmp	r2, #29
    dd3a:	f63f af5e 	bhi.w	dbfa <handleParameter+0x28>
    dd3e:	a301      	add	r3, pc, #4	; (adr r3, dd44 <handleParameter+0x172>)
    dd40:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    dd44:	0000ddbd 	.word	0x0000ddbd
    dd48:	0000ddd5 	.word	0x0000ddd5
    dd4c:	0000dde7 	.word	0x0000dde7
    dd50:	0000ddf9 	.word	0x0000ddf9
    dd54:	0000de05 	.word	0x0000de05
    dd58:	0000de1d 	.word	0x0000de1d
    dd5c:	0000de2f 	.word	0x0000de2f
    dd60:	0000de61 	.word	0x0000de61
    dd64:	0000de91 	.word	0x0000de91
    dd68:	0000dbfb 	.word	0x0000dbfb
    dd6c:	0000dbfb 	.word	0x0000dbfb
    dd70:	0000dbfb 	.word	0x0000dbfb
    dd74:	0000dbfb 	.word	0x0000dbfb
    dd78:	0000dbfb 	.word	0x0000dbfb
    dd7c:	0000dbfb 	.word	0x0000dbfb
    dd80:	0000dbfb 	.word	0x0000dbfb
    dd84:	0000dbfb 	.word	0x0000dbfb
    dd88:	0000dbfb 	.word	0x0000dbfb
    dd8c:	0000dbfb 	.word	0x0000dbfb
    dd90:	0000dbfb 	.word	0x0000dbfb
    dd94:	0000dbfb 	.word	0x0000dbfb
    dd98:	0000dbfb 	.word	0x0000dbfb
    dd9c:	0000dbfb 	.word	0x0000dbfb
    dda0:	0000dbfb 	.word	0x0000dbfb
    dda4:	0000dbfb 	.word	0x0000dbfb
    dda8:	0000dbfb 	.word	0x0000dbfb
    ddac:	0000dbfb 	.word	0x0000dbfb
    ddb0:	0000dbfb 	.word	0x0000dbfb
    ddb4:	0000dbfb 	.word	0x0000dbfb
    ddb8:	0000ddf9 	.word	0x0000ddf9
		if(readWrite == READ) {
    ddbc:	b920      	cbnz	r0, ddc8 <handleParameter+0x1f6>
			*value = StepDir_getTargetPosition(motor);
    ddbe:	f011 fe6b 	bl	1fa98 <StepDir_getTargetPosition>
			*value = StepDir_getActualPosition(motor);
    ddc2:	6028      	str	r0, [r5, #0]
}
    ddc4:	4620      	mov	r0, r4
    ddc6:	bd70      	pop	{r4, r5, r6, pc}
			StepDir_moveTo(motor, *value);
    ddc8:	6829      	ldr	r1, [r5, #0]
    ddca:	2000      	movs	r0, #0
    ddcc:	f011 fcd2 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    ddd0:	2400      	movs	r4, #0
    ddd2:	e7f7      	b.n	ddc4 <handleParameter+0x1f2>
		if(readWrite == READ) {
    ddd4:	b910      	cbnz	r0, dddc <handleParameter+0x20a>
			*value = StepDir_getActualPosition(motor);
    ddd6:	f011 fe4f 	bl	1fa78 <StepDir_getActualPosition>
    ddda:	e7f2      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setActualPosition(motor, *value);
    dddc:	6829      	ldr	r1, [r5, #0]
    ddde:	2000      	movs	r0, #0
    dde0:	f011 fdea 	bl	1f9b8 <StepDir_setActualPosition>
    dde4:	e7f4      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    dde6:	b910      	cbnz	r0, ddee <handleParameter+0x21c>
			*value = StepDir_getTargetVelocity(motor);
    dde8:	f011 fe76 	bl	1fad8 <StepDir_getTargetVelocity>
    ddec:	e7e9      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_rotate(motor, *value);
    ddee:	6829      	ldr	r1, [r5, #0]
    ddf0:	2000      	movs	r0, #0
    ddf2:	f011 fc99 	bl	1f728 <StepDir_rotate>
    ddf6:	e7eb      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    ddf8:	2800      	cmp	r0, #0
    ddfa:	f47f aefe 	bne.w	dbfa <handleParameter+0x28>
			*value = StepDir_getActualVelocity(motor);
    ddfe:	f011 fe5b 	bl	1fab8 <StepDir_getActualVelocity>
    de02:	e7de      	b.n	ddc2 <handleParameter+0x1f0>
		if(readWrite == READ) {
    de04:	b910      	cbnz	r0, de0c <handleParameter+0x23a>
			*value = StepDir_getVelocityMax(motor);
    de06:	f011 fe87 	bl	1fb18 <StepDir_getVelocityMax>
    de0a:	e7da      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setVelocityMax(motor, abs(*value));
    de0c:	6829      	ldr	r1, [r5, #0]
    de0e:	2900      	cmp	r1, #0
    de10:	bfb8      	it	lt
    de12:	4249      	neglt	r1, r1
    de14:	2000      	movs	r0, #0
    de16:	f011 fdeb 	bl	1f9f0 <StepDir_setVelocityMax>
    de1a:	e7d9      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    de1c:	b910      	cbnz	r0, de24 <handleParameter+0x252>
			*value = StepDir_getAcceleration(motor);
    de1e:	f011 fe6b 	bl	1faf8 <StepDir_getAcceleration>
    de22:	e7ce      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setAcceleration(motor, *value);
    de24:	6829      	ldr	r1, [r5, #0]
    de26:	2000      	movs	r0, #0
    de28:	f011 ff94 	bl	1fd54 <StepDir_setAcceleration>
    de2c:	e7d0      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    de2e:	4ea8      	ldr	r6, [pc, #672]	; (e0d0 <handleParameter+0x4fe>)
    de30:	b910      	cbnz	r0, de38 <handleParameter+0x266>
			*value = TMC2590.runCurrentScale;
    de32:	7b73      	ldrb	r3, [r6, #13]
			*value = TMC2590.standStillTimeout;
    de34:	602b      	str	r3, [r5, #0]
    de36:	e7c5      	b.n	ddc4 <handleParameter+0x1f2>
			if(TMC2590.isStandStillCurrent == false)
    de38:	7b34      	ldrb	r4, [r6, #12]
			TMC2590.runCurrentScale = *value;
    de3a:	682b      	ldr	r3, [r5, #0]
    de3c:	7373      	strb	r3, [r6, #13]
			if(TMC2590.isStandStillCurrent == false)
    de3e:	2c00      	cmp	r4, #0
    de40:	d1c6      	bne.n	ddd0 <handleParameter+0x1fe>
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, TMC2590.runCurrentScale);
    de42:	2106      	movs	r1, #6
    de44:	4630      	mov	r0, r6
    de46:	f013 f9dd 	bl	21204 <tmc2590_readInt>
    de4a:	7b72      	ldrb	r2, [r6, #13]
    de4c:	f020 001f 	bic.w	r0, r0, #31
    de50:	f002 021f 	and.w	r2, r2, #31
    de54:	4302      	orrs	r2, r0
    de56:	2106      	movs	r1, #6
    de58:	4630      	mov	r0, r6
    de5a:	f013 f9c1 	bl	211e0 <tmc2590_writeInt>
    de5e:	e7b1      	b.n	ddc4 <handleParameter+0x1f2>
		if(readWrite == READ) {
    de60:	4e9b      	ldr	r6, [pc, #620]	; (e0d0 <handleParameter+0x4fe>)
    de62:	b908      	cbnz	r0, de68 <handleParameter+0x296>
			*value = TMC2590.standStillCurrentScale;
    de64:	7bb3      	ldrb	r3, [r6, #14]
    de66:	e7e5      	b.n	de34 <handleParameter+0x262>
			TMC2590.standStillCurrentScale = *value;
    de68:	682b      	ldr	r3, [r5, #0]
    de6a:	73b3      	strb	r3, [r6, #14]
			if(TMC2590.isStandStillCurrent == true)
    de6c:	7b33      	ldrb	r3, [r6, #12]
    de6e:	2b01      	cmp	r3, #1
    de70:	d1ae      	bne.n	ddd0 <handleParameter+0x1fe>
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, TMC2590.standStillCurrentScale);
    de72:	2106      	movs	r1, #6
    de74:	4630      	mov	r0, r6
    de76:	f013 f9c5 	bl	21204 <tmc2590_readInt>
    de7a:	7bb2      	ldrb	r2, [r6, #14]
    de7c:	f020 001f 	bic.w	r0, r0, #31
    de80:	f002 021f 	and.w	r2, r2, #31
    de84:	4302      	orrs	r2, r0
    de86:	2106      	movs	r1, #6
    de88:	4630      	mov	r0, r6
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT, *value);
    de8a:	f013 f9a9 	bl	211e0 <tmc2590_writeInt>
    de8e:	e79f      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    de90:	2800      	cmp	r0, #0
    de92:	f47f aeb2 	bne.w	dbfa <handleParameter+0x28>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    de96:	f011 fccb 	bl	1f830 <StepDir_getStatus>
    de9a:	f3c0 1000 	ubfx	r0, r0, #4, #1
    de9e:	e790      	b.n	ddc2 <handleParameter+0x1f0>
		if(readWrite == READ) {
    dea0:	b910      	cbnz	r0, dea8 <handleParameter+0x2d6>
			*value = StepDir_getMode(motor);
    dea2:	f011 fe57 	bl	1fb54 <StepDir_getMode>
    dea6:	e78c      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setMode(motor, *value);
    dea8:	7819      	ldrb	r1, [r3, #0]
    deaa:	4630      	mov	r0, r6
    deac:	f011 fdbc 	bl	1fa28 <StepDir_setMode>
    deb0:	e78e      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    deb2:	b910      	cbnz	r0, deba <handleParameter+0x2e8>
			*value = StepDir_getFrequency(motor);
    deb4:	f011 fe5c 	bl	1fb70 <StepDir_getFrequency>
    deb8:	e783      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setFrequency(motor, *value);
    deba:	6819      	ldr	r1, [r3, #0]
    debc:	4630      	mov	r0, r6
    debe:	f011 fdc3 	bl	1fa48 <StepDir_setFrequency>
    dec2:	e785      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    dec4:	b940      	cbnz	r0, ded8 <handleParameter+0x306>
			*value = 8 - TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT);
    dec6:	4882      	ldr	r0, [pc, #520]	; (e0d0 <handleParameter+0x4fe>)
    dec8:	2108      	movs	r1, #8
    deca:	f013 f99b 	bl	21204 <tmc2590_readInt>
    dece:	f000 000f 	and.w	r0, r0, #15
    ded2:	f1c0 0008 	rsb	r0, r0, #8
    ded6:	e774      	b.n	ddc2 <handleParameter+0x1f0>
			switch(*value)
    ded8:	682b      	ldr	r3, [r5, #0]
    deda:	2b10      	cmp	r3, #16
    dedc:	d030      	beq.n	df40 <handleParameter+0x36e>
    dede:	dc0a      	bgt.n	def6 <handleParameter+0x324>
    dee0:	3b01      	subs	r3, #1
    dee2:	2b07      	cmp	r3, #7
    dee4:	d80e      	bhi.n	df04 <handleParameter+0x332>
    dee6:	2b07      	cmp	r3, #7
    dee8:	d80c      	bhi.n	df04 <handleParameter+0x332>
    deea:	e8df f003 	tbb	[pc, r3]
    deee:	2315      	.short	0x2315
    def0:	0b0b250b 	.word	0x0b0b250b
    def4:	270b      	.short	0x270b
    def6:	2b80      	cmp	r3, #128	; 0x80
    def8:	d028      	beq.n	df4c <handleParameter+0x37a>
    defa:	dc08      	bgt.n	df0e <handleParameter+0x33c>
    defc:	2b20      	cmp	r3, #32
    defe:	d021      	beq.n	df44 <handleParameter+0x372>
    df00:	2b40      	cmp	r3, #64	; 0x40
    df02:	d021      	beq.n	df48 <handleParameter+0x376>
			default:   *value = -1;  break;
    df04:	f04f 33ff 	mov.w	r3, #4294967295
    df08:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    df0a:	2410      	movs	r4, #16
    df0c:	e75a      	b.n	ddc4 <handleParameter+0x1f2>
    df0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    df12:	d1f7      	bne.n	df04 <handleParameter+0x332>
			case 256:  *value = 0;   break;
    df14:	2300      	movs	r3, #0
    df16:	e000      	b.n	df1a <handleParameter+0x348>
			case 1:    *value = 8;   break;
    df18:	2308      	movs	r3, #8
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT, *value);
    df1a:	486d      	ldr	r0, [pc, #436]	; (e0d0 <handleParameter+0x4fe>)
			case 256:  *value = 0;   break;
    df1c:	602b      	str	r3, [r5, #0]
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT, *value);
    df1e:	2100      	movs	r1, #0
    df20:	f013 f970 	bl	21204 <tmc2590_readInt>
    df24:	682a      	ldr	r2, [r5, #0]
    df26:	f020 000f 	bic.w	r0, r0, #15
    df2a:	f002 020f 	and.w	r2, r2, #15
    df2e:	4302      	orrs	r2, r0
    df30:	2100      	movs	r1, #0
    df32:	e0b9      	b.n	e0a8 <handleParameter+0x4d6>
			case 2:    *value = 7;   break;
    df34:	2307      	movs	r3, #7
    df36:	e7f0      	b.n	df1a <handleParameter+0x348>
			case 4:    *value = 6;   break;
    df38:	2306      	movs	r3, #6
    df3a:	e7ee      	b.n	df1a <handleParameter+0x348>
			case 8:    *value = 5;   break;
    df3c:	2305      	movs	r3, #5
    df3e:	e7ec      	b.n	df1a <handleParameter+0x348>
			case 16:   *value = 4;   break;
    df40:	2304      	movs	r3, #4
    df42:	e7ea      	b.n	df1a <handleParameter+0x348>
			case 32:   *value = 3;   break;
    df44:	2303      	movs	r3, #3
    df46:	e7e8      	b.n	df1a <handleParameter+0x348>
			case 64:   *value = 2;   break;
    df48:	2302      	movs	r3, #2
    df4a:	e7e6      	b.n	df1a <handleParameter+0x348>
			case 128:  *value = 1;   break;
    df4c:	2301      	movs	r3, #1
    df4e:	e7e4      	b.n	df1a <handleParameter+0x348>
		if(readWrite == READ) {
    df50:	b930      	cbnz	r0, df60 <handleParameter+0x38e>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_INTPOL_MASK, TMC2590_INTPOL_SHIFT);
    df52:	485f      	ldr	r0, [pc, #380]	; (e0d0 <handleParameter+0x4fe>)
    df54:	2108      	movs	r1, #8
    df56:	f013 f955 	bl	21204 <tmc2590_readInt>
    df5a:	f3c0 2040 	ubfx	r0, r0, #9, #1
    df5e:	e730      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_INTPOL_MASK, TMC2590_INTPOL_SHIFT, *value);
    df60:	485b      	ldr	r0, [pc, #364]	; (e0d0 <handleParameter+0x4fe>)
    df62:	2100      	movs	r1, #0
    df64:	f013 f94e 	bl	21204 <tmc2590_readInt>
    df68:	682b      	ldr	r3, [r5, #0]
    df6a:	025b      	lsls	r3, r3, #9
    df6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    df70:	f420 7200 	bic.w	r2, r0, #512	; 0x200
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_DEDGE_MASK, TMC2590_DEDGE_SHIFT, *value);
    df74:	431a      	orrs	r2, r3
    df76:	e7db      	b.n	df30 <handleParameter+0x35e>
		if(readWrite == READ) {
    df78:	b930      	cbnz	r0, df88 <handleParameter+0x3b6>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCTRL | TMC2590_WRITE_BIT, TMC2590_DEDGE_MASK, TMC2590_DEDGE_SHIFT);
    df7a:	4855      	ldr	r0, [pc, #340]	; (e0d0 <handleParameter+0x4fe>)
    df7c:	2108      	movs	r1, #8
    df7e:	f013 f941 	bl	21204 <tmc2590_readInt>
    df82:	f3c0 2000 	ubfx	r0, r0, #8, #1
    df86:	e71c      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_DEDGE_MASK, TMC2590_DEDGE_SHIFT, *value);
    df88:	4851      	ldr	r0, [pc, #324]	; (e0d0 <handleParameter+0x4fe>)
    df8a:	2100      	movs	r1, #0
    df8c:	f013 f93a 	bl	21204 <tmc2590_readInt>
    df90:	682b      	ldr	r3, [r5, #0]
    df92:	021b      	lsls	r3, r3, #8
    df94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    df98:	f420 7280 	bic.w	r2, r0, #256	; 0x100
    df9c:	e7ea      	b.n	df74 <handleParameter+0x3a2>
		if(readWrite == READ) {
    df9e:	b930      	cbnz	r0, dfae <handleParameter+0x3dc>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TBL_MASK, TMC2590_TBL_SHIFT);
    dfa0:	484b      	ldr	r0, [pc, #300]	; (e0d0 <handleParameter+0x4fe>)
    dfa2:	210c      	movs	r1, #12
    dfa4:	f013 f92e 	bl	21204 <tmc2590_readInt>
    dfa8:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    dfac:	e709      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TBL_MASK, TMC2590_TBL_SHIFT, *value);
    dfae:	4848      	ldr	r0, [pc, #288]	; (e0d0 <handleParameter+0x4fe>)
    dfb0:	2104      	movs	r1, #4
    dfb2:	f013 f927 	bl	21204 <tmc2590_readInt>
    dfb6:	682b      	ldr	r3, [r5, #0]
    dfb8:	03db      	lsls	r3, r3, #15
    dfba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    dfbe:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT, *value);
    dfc2:	431a      	orrs	r2, r3
    dfc4:	e05d      	b.n	e082 <handleParameter+0x4b0>
		if(readWrite == READ) {
    dfc6:	b930      	cbnz	r0, dfd6 <handleParameter+0x404>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_CHM_MASK, TMC2590_CHM_SHIFT);
    dfc8:	4841      	ldr	r0, [pc, #260]	; (e0d0 <handleParameter+0x4fe>)
    dfca:	210c      	movs	r1, #12
    dfcc:	f013 f91a 	bl	21204 <tmc2590_readInt>
    dfd0:	f3c0 3080 	ubfx	r0, r0, #14, #1
    dfd4:	e6f5      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_CHM_MASK, TMC2590_CHM_SHIFT, *value);
    dfd6:	483e      	ldr	r0, [pc, #248]	; (e0d0 <handleParameter+0x4fe>)
    dfd8:	2104      	movs	r1, #4
    dfda:	f013 f913 	bl	21204 <tmc2590_readInt>
    dfde:	682b      	ldr	r3, [r5, #0]
    dfe0:	039b      	lsls	r3, r3, #14
    dfe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    dfe6:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
    dfea:	e7ea      	b.n	dfc2 <handleParameter+0x3f0>
		if(readWrite == READ) {
    dfec:	b930      	cbnz	r0, dffc <handleParameter+0x42a>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HDEC_MASK, TMC2590_HDEC_SHIFT);
    dfee:	4838      	ldr	r0, [pc, #224]	; (e0d0 <handleParameter+0x4fe>)
    dff0:	210c      	movs	r1, #12
    dff2:	f013 f907 	bl	21204 <tmc2590_readInt>
    dff6:	f3c0 20c1 	ubfx	r0, r0, #11, #2
    dffa:	e6e2      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HDEC_MASK, TMC2590_HDEC_SHIFT, *value);
    dffc:	4834      	ldr	r0, [pc, #208]	; (e0d0 <handleParameter+0x4fe>)
    dffe:	2104      	movs	r1, #4
    e000:	f013 f900 	bl	21204 <tmc2590_readInt>
    e004:	682b      	ldr	r3, [r5, #0]
    e006:	02db      	lsls	r3, r3, #11
    e008:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    e00c:	f420 52c0 	bic.w	r2, r0, #6144	; 0x1800
    e010:	e7d7      	b.n	dfc2 <handleParameter+0x3f0>
		if(readWrite == READ) {
    e012:	b930      	cbnz	r0, e022 <handleParameter+0x450>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HEND_MASK, TMC2590_HEND_SHIFT);
    e014:	482e      	ldr	r0, [pc, #184]	; (e0d0 <handleParameter+0x4fe>)
    e016:	210c      	movs	r1, #12
    e018:	f013 f8f4 	bl	21204 <tmc2590_readInt>
    e01c:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    e020:	e6cf      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HEND_MASK, TMC2590_HEND_SHIFT, *value);
    e022:	482b      	ldr	r0, [pc, #172]	; (e0d0 <handleParameter+0x4fe>)
    e024:	2104      	movs	r1, #4
    e026:	f013 f8ed 	bl	21204 <tmc2590_readInt>
    e02a:	682b      	ldr	r3, [r5, #0]
    e02c:	01db      	lsls	r3, r3, #7
    e02e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    e032:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
    e036:	e7c4      	b.n	dfc2 <handleParameter+0x3f0>
		if(readWrite == READ) {
    e038:	b930      	cbnz	r0, e048 <handleParameter+0x476>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_HSTRT_MASK, TMC2590_HSTRT_SHIFT);
    e03a:	4825      	ldr	r0, [pc, #148]	; (e0d0 <handleParameter+0x4fe>)
    e03c:	210c      	movs	r1, #12
    e03e:	f013 f8e1 	bl	21204 <tmc2590_readInt>
    e042:	f3c0 1002 	ubfx	r0, r0, #4, #3
    e046:	e6bc      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_HSTRT_MASK, TMC2590_HSTRT_SHIFT, *value);
    e048:	4821      	ldr	r0, [pc, #132]	; (e0d0 <handleParameter+0x4fe>)
    e04a:	2104      	movs	r1, #4
    e04c:	f013 f8da 	bl	21204 <tmc2590_readInt>
    e050:	682b      	ldr	r3, [r5, #0]
    e052:	011b      	lsls	r3, r3, #4
    e054:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e058:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    e05c:	e7b1      	b.n	dfc2 <handleParameter+0x3f0>
		if(readWrite == READ) {
    e05e:	b930      	cbnz	r0, e06e <handleParameter+0x49c>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF | TMC2590_WRITE_BIT, TMC2590_TOFF_MASK, TMC2590_TOFF_SHIFT);
    e060:	481b      	ldr	r0, [pc, #108]	; (e0d0 <handleParameter+0x4fe>)
    e062:	210c      	movs	r1, #12
    e064:	f013 f8ce 	bl	21204 <tmc2590_readInt>
    e068:	f000 000f 	and.w	r0, r0, #15
    e06c:	e6a9      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_TOFF_MASK, TMC2590_TOFF_SHIFT, *value);
    e06e:	4818      	ldr	r0, [pc, #96]	; (e0d0 <handleParameter+0x4fe>)
    e070:	2104      	movs	r1, #4
    e072:	f013 f8c7 	bl	21204 <tmc2590_readInt>
    e076:	682a      	ldr	r2, [r5, #0]
    e078:	f020 000f 	bic.w	r0, r0, #15
    e07c:	f002 020f 	and.w	r2, r2, #15
    e080:	4302      	orrs	r2, r0
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT, *value);
    e082:	2104      	movs	r1, #4
    e084:	e010      	b.n	e0a8 <handleParameter+0x4d6>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIMIN_SHIFT);
    e086:	4812      	ldr	r0, [pc, #72]	; (e0d0 <handleParameter+0x4fe>)
    e088:	2105      	movs	r1, #5
		if(readWrite == READ) {
    e08a:	b924      	cbnz	r4, e096 <handleParameter+0x4c4>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIMIN_SHIFT);
    e08c:	f013 f8ba 	bl	21204 <tmc2590_readInt>
    e090:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    e094:	e695      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEIMIN_MASK, TMC2590_SEIMIN_SHIFT, *value);
    e096:	f013 f8b5 	bl	21204 <tmc2590_readInt>
    e09a:	682b      	ldr	r3, [r5, #0]
    e09c:	03db      	lsls	r3, r3, #15
    e09e:	b29b      	uxth	r3, r3
    e0a0:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT, *value);
    e0a4:	431a      	orrs	r2, r3
    e0a6:	2105      	movs	r1, #5
				TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCTRL, TMC2590_MRES_MASK, TMC2590_MRES_SHIFT, *value);
    e0a8:	4809      	ldr	r0, [pc, #36]	; (e0d0 <handleParameter+0x4fe>)
    e0aa:	e6ee      	b.n	de8a <handleParameter+0x2b8>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_SHIFT);
    e0ac:	4808      	ldr	r0, [pc, #32]	; (e0d0 <handleParameter+0x4fe>)
    e0ae:	2105      	movs	r1, #5
		if(readWrite == READ) {
    e0b0:	b924      	cbnz	r4, e0bc <handleParameter+0x4ea>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_SHIFT);
    e0b2:	f013 f8a7 	bl	21204 <tmc2590_readInt>
    e0b6:	f3c0 3041 	ubfx	r0, r0, #13, #2
    e0ba:	e682      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEDN_MASK, TMC2590_SEDN_SHIFT, *value);
    e0bc:	f013 f8a2 	bl	21204 <tmc2590_readInt>
    e0c0:	682b      	ldr	r3, [r5, #0]
    e0c2:	035b      	lsls	r3, r3, #13
    e0c4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    e0c8:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
    e0cc:	e7ea      	b.n	e0a4 <handleParameter+0x4d2>
    e0ce:	bf00      	nop
    e0d0:	1fff24f8 	.word	0x1fff24f8
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX_SHIFT);
    e0d4:	488d      	ldr	r0, [pc, #564]	; (e30c <handleParameter+0x73a>)
    e0d6:	2105      	movs	r1, #5
		if(readWrite == READ) {
    e0d8:	b924      	cbnz	r4, e0e4 <handleParameter+0x512>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX_SHIFT);
    e0da:	f013 f893 	bl	21204 <tmc2590_readInt>
    e0de:	f3c0 2003 	ubfx	r0, r0, #8, #4
    e0e2:	e66e      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEMAX_MASK, TMC2590_SEMAX_SHIFT, *value);
    e0e4:	f013 f88e 	bl	21204 <tmc2590_readInt>
    e0e8:	682b      	ldr	r3, [r5, #0]
    e0ea:	021b      	lsls	r3, r3, #8
    e0ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    e0f0:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
    e0f4:	e7d6      	b.n	e0a4 <handleParameter+0x4d2>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT);
    e0f6:	4885      	ldr	r0, [pc, #532]	; (e30c <handleParameter+0x73a>)
    e0f8:	2105      	movs	r1, #5
		if(readWrite == READ) {
    e0fa:	b924      	cbnz	r4, e106 <handleParameter+0x534>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT);
    e0fc:	f013 f882 	bl	21204 <tmc2590_readInt>
    e100:	f3c0 1041 	ubfx	r0, r0, #5, #2
    e104:	e65d      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SMARTEN, TMC2590_SEUP_MASK, TMC2590_SEUP_SHIFT, *value);
    e106:	f013 f87d 	bl	21204 <tmc2590_readInt>
    e10a:	682b      	ldr	r3, [r5, #0]
    e10c:	015b      	lsls	r3, r3, #5
    e10e:	f003 0360 	and.w	r3, r3, #96	; 0x60
    e112:	f020 0260 	bic.w	r2, r0, #96	; 0x60
    e116:	e7c5      	b.n	e0a4 <handleParameter+0x4d2>
		if(readWrite == READ) {
    e118:	4b7c      	ldr	r3, [pc, #496]	; (e30c <handleParameter+0x73a>)
    e11a:	b908      	cbnz	r0, e120 <handleParameter+0x54e>
			*value = TMC2590.coolStepActiveValue;
    e11c:	799b      	ldrb	r3, [r3, #6]
    e11e:	e689      	b.n	de34 <handleParameter+0x262>
			TMC2590.coolStepActiveValue = *value;
    e120:	682a      	ldr	r2, [r5, #0]
    e122:	719a      	strb	r2, [r3, #6]
    e124:	e654      	b.n	ddd0 <handleParameter+0x1fe>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFILT_SHIFT);
    e126:	4879      	ldr	r0, [pc, #484]	; (e30c <handleParameter+0x73a>)
    e128:	2106      	movs	r1, #6
		if(readWrite == READ) {
    e12a:	b924      	cbnz	r4, e136 <handleParameter+0x564>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT);
    e12c:	f013 f86a 	bl	21204 <tmc2590_readInt>
    e130:	f3c0 4000 	ubfx	r0, r0, #16, #1
    e134:	e645      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SFILT_MASK, TMC2590_SFILT_SHIFT, *value);
    e136:	f013 f865 	bl	21204 <tmc2590_readInt>
    e13a:	682b      	ldr	r3, [r5, #0]
    e13c:	041b      	lsls	r3, r3, #16
    e13e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    e142:	f420 3280 	bic.w	r2, r0, #65536	; 0x10000
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT, *value);
    e146:	431a      	orrs	r2, r3
    e148:	2106      	movs	r1, #6
    e14a:	e7ad      	b.n	e0a8 <handleParameter+0x4d6>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT);
    e14c:	486f      	ldr	r0, [pc, #444]	; (e30c <handleParameter+0x73a>)
    e14e:	2106      	movs	r1, #6
		if(readWrite == READ) {
    e150:	b95c      	cbnz	r4, e16a <handleParameter+0x598>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT);
    e152:	f013 f857 	bl	21204 <tmc2590_readInt>
    e156:	0a03      	lsrs	r3, r0, #8
			*value = CAST_Sn_TO_S32(*value, 7);
    e158:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT);
    e15c:	f3c0 2006 	ubfx	r0, r0, #8, #7
			*value = CAST_Sn_TO_S32(*value, 7);
    e160:	bf18      	it	ne
    e162:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    e166:	4318      	orrs	r0, r3
    e168:	e62b      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_SGCSCONF, TMC2590_SGT_MASK, TMC2590_SGT_SHIFT, *value);
    e16a:	f013 f84b 	bl	21204 <tmc2590_readInt>
    e16e:	682b      	ldr	r3, [r5, #0]
    e170:	021b      	lsls	r3, r3, #8
    e172:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
    e176:	f420 42fe 	bic.w	r2, r0, #32512	; 0x7f00
    e17a:	e7e4      	b.n	e146 <handleParameter+0x574>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_SHIFT);
    e17c:	4863      	ldr	r0, [pc, #396]	; (e30c <handleParameter+0x73a>)
    e17e:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e180:	b924      	cbnz	r4, e18c <handleParameter+0x5ba>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_SHIFT);
    e182:	f013 f83f 	bl	21204 <tmc2590_readInt>
    e186:	f3c0 3081 	ubfx	r0, r0, #14, #2
    e18a:	e61a      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPH_MASK, TMC2590_SLPH_SHIFT, *value);
    e18c:	f013 f83a 	bl	21204 <tmc2590_readInt>
    e190:	682b      	ldr	r3, [r5, #0]
    e192:	039b      	lsls	r3, r3, #14
    e194:	b29b      	uxth	r3, r3
    e196:	f420 4240 	bic.w	r2, r0, #49152	; 0xc000
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT, *value);
    e19a:	431a      	orrs	r2, r3
    e19c:	2107      	movs	r1, #7
    e19e:	e783      	b.n	e0a8 <handleParameter+0x4d6>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_SHIFT);
    e1a0:	485a      	ldr	r0, [pc, #360]	; (e30c <handleParameter+0x73a>)
    e1a2:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e1a4:	b924      	cbnz	r4, e1b0 <handleParameter+0x5de>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_SHIFT);
    e1a6:	f013 f82d 	bl	21204 <tmc2590_readInt>
    e1aa:	f3c0 3001 	ubfx	r0, r0, #12, #2
    e1ae:	e608      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SLPL_MASK, TMC2590_SLPL_SHIFT, *value);
    e1b0:	f013 f828 	bl	21204 <tmc2590_readInt>
    e1b4:	682b      	ldr	r3, [r5, #0]
    e1b6:	031b      	lsls	r3, r3, #12
    e1b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e1bc:	f420 5240 	bic.w	r2, r0, #12288	; 0x3000
    e1c0:	e7eb      	b.n	e19a <handleParameter+0x5c8>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS2G_SHIFT);
    e1c2:	4852      	ldr	r0, [pc, #328]	; (e30c <handleParameter+0x73a>)
    e1c4:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e1c6:	b924      	cbnz	r4, e1d2 <handleParameter+0x600>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS2G_SHIFT);
    e1c8:	f013 f81c 	bl	21204 <tmc2590_readInt>
    e1cc:	f3c0 2080 	ubfx	r0, r0, #10, #1
    e1d0:	e5f7      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_DISS2G_MASK, TMC2590_DISS2G_SHIFT, *value);
    e1d2:	f013 f817 	bl	21204 <tmc2590_readInt>
    e1d6:	682b      	ldr	r3, [r5, #0]
    e1d8:	029b      	lsls	r3, r3, #10
    e1da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    e1de:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
    e1e2:	e7da      	b.n	e19a <handleParameter+0x5c8>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_SHIFT);
    e1e4:	4849      	ldr	r0, [pc, #292]	; (e30c <handleParameter+0x73a>)
    e1e6:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e1e8:	b924      	cbnz	r4, e1f4 <handleParameter+0x622>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_SHIFT);
    e1ea:	f013 f80b 	bl	21204 <tmc2590_readInt>
    e1ee:	f3c0 2001 	ubfx	r0, r0, #8, #2
    e1f2:	e5e6      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TS2G_MASK, TMC2590_TS2G_SHIFT, *value);
    e1f4:	f013 f806 	bl	21204 <tmc2590_readInt>
    e1f8:	682b      	ldr	r3, [r5, #0]
    e1fa:	021b      	lsls	r3, r3, #8
    e1fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
    e200:	f420 7240 	bic.w	r2, r0, #768	; 0x300
    e204:	e7c9      	b.n	e19a <handleParameter+0x5c8>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSENSE_SHIFT);
    e206:	4841      	ldr	r0, [pc, #260]	; (e30c <handleParameter+0x73a>)
    e208:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e20a:	b924      	cbnz	r4, e216 <handleParameter+0x644>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSENSE_SHIFT);
    e20c:	f012 fffa 	bl	21204 <tmc2590_readInt>
    e210:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e214:	e5d5      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_VSENSE_MASK, TMC2590_VSENSE_SHIFT, *value);
    e216:	f012 fff5 	bl	21204 <tmc2590_readInt>
    e21a:	682b      	ldr	r3, [r5, #0]
    e21c:	019b      	lsls	r3, r3, #6
    e21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e222:	f020 0240 	bic.w	r2, r0, #64	; 0x40
    e226:	e7b8      	b.n	e19a <handleParameter+0x5c8>
		if(readWrite == READ) {
    e228:	2800      	cmp	r0, #0
    e22a:	f47f ace6 	bne.w	dbfa <handleParameter+0x28>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SE_MASK, TMC2590_SE_SHIFT);
    e22e:	4837      	ldr	r0, [pc, #220]	; (e30c <handleParameter+0x73a>)
    e230:	2102      	movs	r1, #2
    e232:	f012 ffe7 	bl	21204 <tmc2590_readInt>
    e236:	f3c0 2084 	ubfx	r0, r0, #10, #5
    e23a:	e5c2      	b.n	ddc2 <handleParameter+0x1f0>
		if(readWrite == READ) {
    e23c:	b910      	cbnz	r0, e244 <handleParameter+0x672>
			*value = StepDir_getStallGuardThreshold(motor);
    e23e:	f011 fc7b 	bl	1fb38 <StepDir_getStallGuardThreshold>
    e242:	e5be      	b.n	ddc2 <handleParameter+0x1f0>
			StepDir_setStallGuardThreshold(motor, *value);
    e244:	6829      	ldr	r1, [r5, #0]
    e246:	2000      	movs	r0, #0
    e248:	f011 fbe0 	bl	1fa0c <StepDir_setStallGuardThreshold>
    e24c:	e5c0      	b.n	ddd0 <handleParameter+0x1fe>
		if(readWrite == READ) {
    e24e:	4b2f      	ldr	r3, [pc, #188]	; (e30c <handleParameter+0x73a>)
    e250:	b908      	cbnz	r0, e256 <handleParameter+0x684>
			*value = TMC2590.coolStepThreshold;
    e252:	689b      	ldr	r3, [r3, #8]
    e254:	e5ee      	b.n	de34 <handleParameter+0x262>
			TMC2590.coolStepThreshold = *value;
    e256:	682a      	ldr	r2, [r5, #0]
    e258:	609a      	str	r2, [r3, #8]
    e25a:	e5b9      	b.n	ddd0 <handleParameter+0x1fe>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF_SHIFT);
    e25c:	482b      	ldr	r0, [pc, #172]	; (e30c <handleParameter+0x73a>)
    e25e:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e260:	b924      	cbnz	r4, e26c <handleParameter+0x69a>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF_SHIFT);
    e262:	f012 ffcf 	bl	21204 <tmc2590_readInt>
    e266:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    e26a:	e5aa      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_SDOFF_MASK, TMC2590_SDOFF_SHIFT, *value);
    e26c:	f012 ffca 	bl	21204 <tmc2590_readInt>
    e270:	682b      	ldr	r3, [r5, #0]
    e272:	01db      	lsls	r3, r3, #7
    e274:	b2db      	uxtb	r3, r3
    e276:	f020 0280 	bic.w	r2, r0, #128	; 0x80
    e27a:	e78e      	b.n	e19a <handleParameter+0x5c8>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT);
    e27c:	4823      	ldr	r0, [pc, #140]	; (e30c <handleParameter+0x73a>)
    e27e:	2104      	movs	r1, #4
		if(readWrite == READ) {
    e280:	b924      	cbnz	r4, e28c <handleParameter+0x6ba>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT);
    e282:	f012 ffbf 	bl	21204 <tmc2590_readInt>
    e286:	f3c0 3040 	ubfx	r0, r0, #13, #1
    e28a:	e59a      	b.n	ddc2 <handleParameter+0x1f0>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_CHOPCONF, TMC2590_RNDTF_MASK, TMC2590_RNDTF_SHIFT, *value);
    e28c:	f012 ffba 	bl	21204 <tmc2590_readInt>
    e290:	682b      	ldr	r3, [r5, #0]
    e292:	035b      	lsls	r3, r3, #13
    e294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    e298:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
    e29c:	e691      	b.n	dfc2 <handleParameter+0x3f0>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT);
    e29e:	481b      	ldr	r0, [pc, #108]	; (e30c <handleParameter+0x73a>)
    e2a0:	2107      	movs	r1, #7
		if(readWrite == READ) {
    e2a2:	2c00      	cmp	r4, #0
    e2a4:	f43f af42 	beq.w	e12c <handleParameter+0x55a>
			TMC2590_FIELD_UPDATE(motorToIC(motor), TMC2590_DRVCONF, TMC2590_TST_MASK, TMC2590_TST_SHIFT, *value);
    e2a8:	f012 ffac 	bl	21204 <tmc2590_readInt>
    e2ac:	682b      	ldr	r3, [r5, #0]
    e2ae:	041b      	lsls	r3, r3, #16
    e2b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    e2b4:	f420 3280 	bic.w	r2, r0, #65536	; 0x10000
    e2b8:	e76f      	b.n	e19a <handleParameter+0x5c8>
		if(readWrite == READ) {
    e2ba:	2800      	cmp	r0, #0
    e2bc:	f47f ac9d 	bne.w	dbfa <handleParameter+0x28>
			*value = (compatibilityMode) ?
    e2c0:	4b13      	ldr	r3, [pc, #76]	; (e310 <handleParameter+0x73e>)
					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<5 :
    e2c2:	681b      	ldr	r3, [r3, #0]
    e2c4:	b143      	cbz	r3, e2d8 <handleParameter+0x706>
    e2c6:	4811      	ldr	r0, [pc, #68]	; (e30c <handleParameter+0x73a>)
    e2c8:	2102      	movs	r1, #2
    e2ca:	f012 ff9b 	bl	21204 <tmc2590_readInt>
    e2ce:	0a80      	lsrs	r0, r0, #10
    e2d0:	f400 7078 	and.w	r0, r0, #992	; 0x3e0
			*value = (compatibilityMode) ?
    e2d4:	6028      	str	r0, [r5, #0]
    e2d6:	e57b      	b.n	ddd0 <handleParameter+0x1fe>
					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE1, TMC2590_SG2_MASK, TMC2590_SG2_SHIFT);
    e2d8:	480c      	ldr	r0, [pc, #48]	; (e30c <handleParameter+0x73a>)
    e2da:	2101      	movs	r1, #1
    e2dc:	f012 ff92 	bl	21204 <tmc2590_readInt>
					TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE2, TMC2590_SGU_MASK, TMC2590_SGU_SHIFT)<<5 :
    e2e0:	f3c0 2089 	ubfx	r0, r0, #10, #10
    e2e4:	e7f6      	b.n	e2d4 <handleParameter+0x702>
		if(readWrite == READ) {
    e2e6:	2800      	cmp	r0, #0
    e2e8:	f47f ac87 	bne.w	dbfa <handleParameter+0x28>
			*value = TMC2590_FIELD_READ(motorToIC(motor), TMC2590_RESPONSE_LATEST, TMC2590_STATUS_MASK, TMC2590_STATUS_SHIFT);
    e2ec:	4807      	ldr	r0, [pc, #28]	; (e30c <handleParameter+0x73a>)
    e2ee:	2103      	movs	r1, #3
    e2f0:	f012 ff88 	bl	21204 <tmc2590_readInt>
    e2f4:	b2c0      	uxtb	r0, r0
    e2f6:	e564      	b.n	ddc2 <handleParameter+0x1f0>
		if(readWrite == READ) {
    e2f8:	4b04      	ldr	r3, [pc, #16]	; (e30c <handleParameter+0x73a>)
    e2fa:	b908      	cbnz	r0, e300 <handleParameter+0x72e>
			*value = TMC2590.standStillTimeout;
    e2fc:	691b      	ldr	r3, [r3, #16]
    e2fe:	e599      	b.n	de34 <handleParameter+0x262>
			TMC2590.standStillTimeout = *value;
    e300:	682a      	ldr	r2, [r5, #0]
    e302:	611a      	str	r2, [r3, #16]
    e304:	e564      	b.n	ddd0 <handleParameter+0x1fe>
		return TMC_ERROR_MOTOR;
    e306:	2408      	movs	r4, #8
    e308:	e55c      	b.n	ddc4 <handleParameter+0x1f2>
    e30a:	bf00      	nop
    e30c:	1fff24f8 	.word	0x1fff24f8
    e310:	1fff006c 	.word	0x1fff006c

0000e314 <SAP>:
{
    e314:	b507      	push	{r0, r1, r2, lr}
    e316:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    e318:	ab01      	add	r3, sp, #4
    e31a:	4602      	mov	r2, r0
    e31c:	2001      	movs	r0, #1
    e31e:	f7ff fc58 	bl	dbd2 <handleParameter>
}
    e322:	b003      	add	sp, #12
    e324:	f85d fb04 	ldr.w	pc, [sp], #4

0000e328 <GAP>:
{
    e328:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    e32a:	4602      	mov	r2, r0
    e32c:	2000      	movs	r0, #0
    e32e:	e450      	b.n	dbd2 <handleParameter>

0000e330 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc2590_restore(&TMC2590);
    e330:	4801      	ldr	r0, [pc, #4]	; (e338 <restore+0x8>)
    e332:	f013 b823 	b.w	2137c <tmc2590_restore>
    e336:	bf00      	nop
    e338:	1fff24f8 	.word	0x1fff24f8

0000e33c <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    e33c:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    e33e:	bf04      	itt	eq
    e340:	4b0b      	ldreq	r3, [pc, #44]	; (e370 <enableDriver+0x34>)
    e342:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state == DRIVER_DISABLE)
    e346:	b930      	cbnz	r0, e356 <enableDriver+0x1a>
		HAL.IOs->config->setHigh(Pins.ENN);
    e348:	4b0a      	ldr	r3, [pc, #40]	; (e374 <enableDriver+0x38>)
    e34a:	68db      	ldr	r3, [r3, #12]
    e34c:	681b      	ldr	r3, [r3, #0]
    e34e:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.ENN);
    e350:	4a09      	ldr	r2, [pc, #36]	; (e378 <enableDriver+0x3c>)
    e352:	6d10      	ldr	r0, [r2, #80]	; 0x50
    e354:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    e356:	2801      	cmp	r0, #1
    e358:	d109      	bne.n	e36e <enableDriver+0x32>
    e35a:	4b05      	ldr	r3, [pc, #20]	; (e370 <enableDriver+0x34>)
    e35c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    e360:	2b01      	cmp	r3, #1
    e362:	d104      	bne.n	e36e <enableDriver+0x32>
		HAL.IOs->config->setLow(Pins.ENN);
    e364:	4b03      	ldr	r3, [pc, #12]	; (e374 <enableDriver+0x38>)
    e366:	68db      	ldr	r3, [r3, #12]
    e368:	681b      	ldr	r3, [r3, #0]
    e36a:	699b      	ldr	r3, [r3, #24]
    e36c:	e7f0      	b.n	e350 <enableDriver+0x14>
}
    e36e:	4770      	bx	lr
    e370:	1fff5e88 	.word	0x1fff5e88
    e374:	00029d1c 	.word	0x00029d1c
    e378:	1fff24f8 	.word	0x1fff24f8

0000e37c <deInit>:
{
    e37c:	b538      	push	{r3, r4, r5, lr}
	enableDriver(DRIVER_DISABLE);
    e37e:	2000      	movs	r0, #0
    e380:	f7ff ffdc 	bl	e33c <enableDriver>
	HAL.IOs->config->setHigh(Pins.ENN);
    e384:	4b0f      	ldr	r3, [pc, #60]	; (e3c4 <deInit+0x48>)
    e386:	4c10      	ldr	r4, [pc, #64]	; (e3c8 <deInit+0x4c>)
    e388:	68dd      	ldr	r5, [r3, #12]
    e38a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e38c:	682b      	ldr	r3, [r5, #0]
    e38e:	695b      	ldr	r3, [r3, #20]
    e390:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CSN);
    e392:	682b      	ldr	r3, [r5, #0]
    e394:	6c60      	ldr	r0, [r4, #68]	; 0x44
    e396:	689b      	ldr	r3, [r3, #8]
    e398:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    e39a:	682b      	ldr	r3, [r5, #0]
    e39c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e39e:	689b      	ldr	r3, [r3, #8]
    e3a0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENN);
    e3a2:	682b      	ldr	r3, [r5, #0]
    e3a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e3a6:	689b      	ldr	r3, [r3, #8]
    e3a8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SG_TST);
    e3aa:	682b      	ldr	r3, [r5, #0]
    e3ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e3ae:	689b      	ldr	r3, [r3, #8]
    e3b0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    e3b2:	682b      	ldr	r3, [r5, #0]
    e3b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    e3b6:	689b      	ldr	r3, [r3, #8]
    e3b8:	4798      	blx	r3
}
    e3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	StepDir_deInit();
    e3be:	f011 bc81 	b.w	1fcc4 <StepDir_deInit>
    e3c2:	bf00      	nop
    e3c4:	00029d1c 	.word	0x00029d1c
    e3c8:	1fff24f8 	.word	0x1fff24f8

0000e3cc <getMax>:
{
    e3cc:	4603      	mov	r3, r0
	switch(type) {
    e3ce:	2b05      	cmp	r3, #5
{
    e3d0:	b510      	push	{r4, lr}
    e3d2:	4608      	mov	r0, r1
    e3d4:	4614      	mov	r4, r2
	switch(type) {
    e3d6:	d00c      	beq.n	e3f2 <getMax+0x26>
    e3d8:	d807      	bhi.n	e3ea <getMax+0x1e>
    e3da:	3b02      	subs	r3, #2
    e3dc:	2b02      	cmp	r3, #2
    e3de:	d806      	bhi.n	e3ee <getMax+0x22>
			*value = StepDir_getFrequency(motor);
    e3e0:	f011 fbc6 	bl	1fb70 <StepDir_getFrequency>
			*value = StepDir_getMaxAcceleration(motor);
    e3e4:	6020      	str	r0, [r4, #0]
	uint32_t errors = TMC_ERROR_NONE;
    e3e6:	2000      	movs	r0, #0
}
    e3e8:	bd10      	pop	{r4, pc}
	switch(type) {
    e3ea:	2b18      	cmp	r3, #24
    e3ec:	d0f8      	beq.n	e3e0 <getMax+0x14>
    e3ee:	2004      	movs	r0, #4
	return getLimit(LIMIT_MAX, type, motor, value);
    e3f0:	e7fa      	b.n	e3e8 <getMax+0x1c>
			*value = StepDir_getMaxAcceleration(motor);
    e3f2:	f011 fbd9 	bl	1fba8 <StepDir_getMaxAcceleration>
    e3f6:	e7f5      	b.n	e3e4 <getMax+0x18>

0000e3f8 <getMeasuredSpeed>:
{
    e3f8:	b538      	push	{r3, r4, r5, lr}
    e3fa:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    e3fc:	4604      	mov	r4, r0
    e3fe:	b920      	cbnz	r0, e40a <getMeasuredSpeed+0x12>
		*value = StepDir_getActualVelocity(motor);
    e400:	f011 fb5a 	bl	1fab8 <StepDir_getActualVelocity>
    e404:	6028      	str	r0, [r5, #0]
    e406:	4620      	mov	r0, r4
}
    e408:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    e40a:	2008      	movs	r0, #8
    e40c:	e7fc      	b.n	e408 <getMeasuredSpeed+0x10>

0000e40e <reset>:
{
    e40e:	b570      	push	{r4, r5, r6, lr}
	if(StepDir_getActualVelocity(0) != 0)
    e410:	2000      	movs	r0, #0
    e412:	f011 fb51 	bl	1fab8 <StepDir_getActualVelocity>
    e416:	4605      	mov	r5, r0
    e418:	b9a8      	cbnz	r0, e446 <reset+0x38>
	tmc2590_reset(&TMC2590);
    e41a:	4e0c      	ldr	r6, [pc, #48]	; (e44c <reset+0x3e>)
    e41c:	4630      	mov	r0, r6
    e41e:	f012 ff91 	bl	21344 <tmc2590_reset>
	compatibilityMode = 1;
    e422:	4b0b      	ldr	r3, [pc, #44]	; (e450 <reset+0x42>)
    e424:	2401      	movs	r4, #1
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e426:	2002      	movs	r0, #2
	compatibilityMode = 1;
    e428:	601c      	str	r4, [r3, #0]
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e42a:	f7ff ff87 	bl	e33c <enableDriver>
	StepDir_init(STEPDIR_PRECISION);
    e42e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    e432:	f011 fbcf 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
    e436:	4628      	mov	r0, r5
    e438:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	; 0x48
    e43c:	6d73      	ldr	r3, [r6, #84]	; 0x54
    e43e:	f011 fa1f 	bl	1f880 <StepDir_setPins>
    e442:	4620      	mov	r0, r4
}
    e444:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    e446:	2000      	movs	r0, #0
    e448:	e7fc      	b.n	e444 <reset+0x36>
    e44a:	bf00      	nop
    e44c:	1fff24f8 	.word	0x1fff24f8
    e450:	1fff006c 	.word	0x1fff006c

0000e454 <moveBy>:
{
    e454:	b538      	push	{r3, r4, r5, lr}
    e456:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    e458:	4604      	mov	r4, r0
    e45a:	b948      	cbnz	r0, e470 <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    e45c:	f011 fb0c 	bl	1fa78 <StepDir_getActualPosition>
    e460:	6829      	ldr	r1, [r5, #0]
    e462:	4401      	add	r1, r0
    e464:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    e466:	4620      	mov	r0, r4
    e468:	f011 f984 	bl	1f774 <StepDir_moveTo>
    e46c:	4620      	mov	r0, r4
}
    e46e:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    e470:	2008      	movs	r0, #8
    e472:	e7fc      	b.n	e46e <moveBy+0x1a>

0000e474 <getMin>:
	switch(type) {
    e474:	2805      	cmp	r0, #5
    e476:	d803      	bhi.n	e480 <getMin+0xc>
    e478:	2801      	cmp	r0, #1
    e47a:	d803      	bhi.n	e484 <getMin+0x10>
    e47c:	2004      	movs	r0, #4
}
    e47e:	4770      	bx	lr
	switch(type) {
    e480:	2818      	cmp	r0, #24
    e482:	d1fb      	bne.n	e47c <getMin+0x8>
			*value = 0; // TODO: Determine limits here
    e484:	2000      	movs	r0, #0
    e486:	6010      	str	r0, [r2, #0]
    e488:	4770      	bx	lr

0000e48a <tmc2590_readWriteArray>:
	if(Evalboards.ch1.fullCover != NULL) {
    e48a:	4b05      	ldr	r3, [pc, #20]	; (e4a0 <tmc2590_readWriteArray+0x16>)
    e48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
{
    e48e:	4608      	mov	r0, r1
    e490:	4611      	mov	r1, r2
	if(Evalboards.ch1.fullCover != NULL) {
    e492:	b103      	cbz	r3, e496 <tmc2590_readWriteArray+0xc>
		channelToSPI(channel)->readWriteArray(data, length);
    e494:	4718      	bx	r3
	return TMC2590_SPIChannel;
    e496:	4b03      	ldr	r3, [pc, #12]	; (e4a4 <tmc2590_readWriteArray+0x1a>)
		channelToSPI(channel)->readWriteArray(data, length);
    e498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e49a:	68db      	ldr	r3, [r3, #12]
    e49c:	e7fa      	b.n	e494 <tmc2590_readWriteArray+0xa>
    e49e:	bf00      	nop
    e4a0:	1fff5e88 	.word	0x1fff5e88
    e4a4:	1fff24f8 	.word	0x1fff24f8

0000e4a8 <TMC2590_init>:

void TMC2590_init(void)
{
    e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	compatibilityMode = 1;
    e4ac:	4b44      	ldr	r3, [pc, #272]	; (e5c0 <TMC2590_init+0x118>)

	tmc2590_init(&TMC2590, 0, Evalboards.ch2.config, &tmc2590_defaultRegisterResetState[0]);
    e4ae:	4c45      	ldr	r4, [pc, #276]	; (e5c4 <TMC2590_init+0x11c>)
    e4b0:	4d45      	ldr	r5, [pc, #276]	; (e5c8 <TMC2590_init+0x120>)

	Pins.ENN     = &HAL.IOs->pins->DIO0;
    e4b2:	f8df 8168 	ldr.w	r8, [pc, #360]	; e61c <TMC2590_init+0x174>
	tmc2590_init(&TMC2590, 0, Evalboards.ch2.config, &tmc2590_defaultRegisterResetState[0]);
    e4b6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
	compatibilityMode = 1;
    e4ba:	2701      	movs	r7, #1
	tmc2590_init(&TMC2590, 0, Evalboards.ch2.config, &tmc2590_defaultRegisterResetState[0]);
    e4bc:	2100      	movs	r1, #0
	compatibilityMode = 1;
    e4be:	601f      	str	r7, [r3, #0]
	tmc2590_init(&TMC2590, 0, Evalboards.ch2.config, &tmc2590_defaultRegisterResetState[0]);
    e4c0:	4628      	mov	r0, r5
    e4c2:	4b42      	ldr	r3, [pc, #264]	; (e5cc <TMC2590_init+0x124>)
    e4c4:	f012 fec3 	bl	2124e <tmc2590_init>
	Pins.ENN     = &HAL.IOs->pins->DIO0;
    e4c8:	f8d8 600c 	ldr.w	r6, [r8, #12]
    e4cc:	6873      	ldr	r3, [r6, #4]
    e4ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
    e4d2:	652a      	str	r2, [r5, #80]	; 0x50
	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
    e4d4:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.STEP    = &HAL.IOs->pins->DIO6;
    e4d8:	f503 7094 	add.w	r0, r3, #296	; 0x128
	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
    e4dc:	656a      	str	r2, [r5, #84]	; 0x54
	Pins.DIR     = &HAL.IOs->pins->DIO7;
    e4de:	f503 72a4 	add.w	r2, r3, #328	; 0x148
	Pins.CSN     = &HAL.IOs->pins->SPI2_CSN0;
    e4e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
    e4e6:	646b      	str	r3, [r5, #68]	; 0x44

	HAL.IOs->config->toOutput(Pins.STEP);
    e4e8:	6833      	ldr	r3, [r6, #0]
	Pins.DIR     = &HAL.IOs->pins->DIO7;
    e4ea:	64ea      	str	r2, [r5, #76]	; 0x4c
	HAL.IOs->config->toOutput(Pins.STEP);
    e4ec:	68db      	ldr	r3, [r3, #12]
	Pins.STEP    = &HAL.IOs->pins->DIO6;
    e4ee:	64a8      	str	r0, [r5, #72]	; 0x48
	HAL.IOs->config->toOutput(Pins.STEP);
    e4f0:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    e4f2:	6833      	ldr	r3, [r6, #0]
    e4f4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    e4f6:	68db      	ldr	r3, [r3, #12]
    e4f8:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.ENN);
    e4fa:	6833      	ldr	r3, [r6, #0]
    e4fc:	6d28      	ldr	r0, [r5, #80]	; 0x50
    e4fe:	68db      	ldr	r3, [r3, #12]
    e500:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SG_TST);
    e502:	6833      	ldr	r3, [r6, #0]
    e504:	6d68      	ldr	r0, [r5, #84]	; 0x54
    e506:	691b      	ldr	r3, [r3, #16]
    e508:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.CSN);
    e50a:	6833      	ldr	r3, [r6, #0]
    e50c:	6c68      	ldr	r0, [r5, #68]	; 0x44
    e50e:	68db      	ldr	r3, [r3, #12]
    e510:	4798      	blx	r3
#if defined(Startrampe)
	Pins.TEMP_BRIDGE	= &HAL.IOs->pins->AIN0;
	HAL.IOs->config->reset(Pins.TEMP_BRIDGE);
#endif

	TMC2590_SPIChannel = &HAL.SPI->ch2;
    e512:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e516:	f103 0214 	add.w	r2, r3, #20
    e51a:	65ea      	str	r2, [r5, #92]	; 0x5c
	TMC2590_SPIChannel->CSN = Pins.CSN;
    e51c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    e51e:	619a      	str	r2, [r3, #24]

	StepDir_init(STEPDIR_PRECISION);
    e520:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    e524:	f011 fb56 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
    e528:	e9d5 1212 	ldrd	r1, r2, [r5, #72]	; 0x48
    e52c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    e52e:	2000      	movs	r0, #0
    e530:	f011 f9a6 	bl	1f880 <StepDir_setPins>

	TMC2590_config = Evalboards.ch2.config;
    e534:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90

	Evalboards.ch2.config->restore      = restore;
    e538:	4a25      	ldr	r2, [pc, #148]	; (e5d0 <TMC2590_init+0x128>)
    e53a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch2.config->reset        = reset;
    e53e:	4a25      	ldr	r2, [pc, #148]	; (e5d4 <TMC2590_init+0x12c>)
    e540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	Evalboards.ch2.rotate               = rotate;
    e544:	4b24      	ldr	r3, [pc, #144]	; (e5d8 <TMC2590_init+0x130>)
    e546:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    e54a:	4b24      	ldr	r3, [pc, #144]	; (e5dc <TMC2590_init+0x134>)
    e54c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    e550:	4b23      	ldr	r3, [pc, #140]	; (e5e0 <TMC2590_init+0x138>)
    e552:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    e556:	4b23      	ldr	r3, [pc, #140]	; (e5e4 <TMC2590_init+0x13c>)
    e558:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    e55c:	4b22      	ldr	r3, [pc, #136]	; (e5e8 <TMC2590_init+0x140>)
    e55e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    e562:	4b22      	ldr	r3, [pc, #136]	; (e5ec <TMC2590_init+0x144>)
    e564:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    e568:	4b21      	ldr	r3, [pc, #132]	; (e5f0 <TMC2590_init+0x148>)
    e56a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    e56e:	4b21      	ldr	r3, [pc, #132]	; (e5f4 <TMC2590_init+0x14c>)
    e570:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
    e574:	4b20      	ldr	r3, [pc, #128]	; (e5f8 <TMC2590_init+0x150>)
    e576:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
    e57a:	4b20      	ldr	r3, [pc, #128]	; (e5fc <TMC2590_init+0x154>)
    e57c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
    e580:	4b1f      	ldr	r3, [pc, #124]	; (e600 <TMC2590_init+0x158>)
    e582:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
    e586:	4b1f      	ldr	r3, [pc, #124]	; (e604 <TMC2590_init+0x15c>)
    e588:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
    e58c:	4b1e      	ldr	r3, [pc, #120]	; (e608 <TMC2590_init+0x160>)
    e58e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
    e592:	4b1e      	ldr	r3, [pc, #120]	; (e60c <TMC2590_init+0x164>)
    e594:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    e598:	2232      	movs	r2, #50	; 0x32
    e59a:	f44f 7316 	mov.w	r3, #600	; 0x258
    e59e:	e9c4 3221 	strd	r3, r2, [r4, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
    e5a2:	4b1b      	ldr	r3, [pc, #108]	; (e610 <TMC2590_init+0x168>)
    e5a4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	Evalboards.ch2.getMin               = getMin;
    e5a8:	4b1a      	ldr	r3, [pc, #104]	; (e614 <TMC2590_init+0x16c>)
    e5aa:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	Evalboards.ch2.getMax               = getMax;
    e5ae:	4b1a      	ldr	r3, [pc, #104]	; (e618 <TMC2590_init+0x170>)
	Evalboards.ch2.numberOfMotors       = MOTORS;
    e5b0:	f884 708c 	strb.w	r7, [r4, #140]	; 0x8c
	Evalboards.ch2.getMax               = getMax;
    e5b4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e5b8:	2002      	movs	r0, #2
}
    e5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e5be:	e6bd      	b.n	e33c <enableDriver>
    e5c0:	1fff006c 	.word	0x1fff006c
    e5c4:	1fff5e88 	.word	0x1fff5e88
    e5c8:	1fff24f8 	.word	0x1fff24f8
    e5cc:	00028ad8 	.word	0x00028ad8
    e5d0:	0000e331 	.word	0x0000e331
    e5d4:	0000e40f 	.word	0x0000e40f
    e5d8:	0000dbb7 	.word	0x0000dbb7
    e5dc:	0000dbd1 	.word	0x0000dbd1
    e5e0:	0000dbcd 	.word	0x0000dbcd
    e5e4:	0000dbc9 	.word	0x0000dbc9
    e5e8:	0000e329 	.word	0x0000e329
    e5ec:	0000e315 	.word	0x0000e315
    e5f0:	0000dba5 	.word	0x0000dba5
    e5f4:	0000e455 	.word	0x0000e455
    e5f8:	0000db99 	.word	0x0000db99
    e5fc:	0000db25 	.word	0x0000db25
    e600:	0000db39 	.word	0x0000db39
    e604:	0000dae1 	.word	0x0000dae1
    e608:	0000e3f9 	.word	0x0000e3f9
    e60c:	0000e33d 	.word	0x0000e33d
    e610:	0000e37d 	.word	0x0000e37d
    e614:	0000e475 	.word	0x0000e475
    e618:	0000e3cd 	.word	0x0000e3cd
    e61c:	00029d1c 	.word	0x00029d1c

0000e620 <userFunction>:
	// write store written value to shadow register
	TMC2660_config->shadowRegister[TMC2660_GET_ADDRESS(value) | TMC2660_WRITE_BIT ] = value;
}

static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
{
    e620:	4603      	mov	r3, r0
	uint32_t errors = 0;

	UNUSED(motor);

	switch(type)
    e622:	2b01      	cmp	r3, #1
{
    e624:	b510      	push	{r4, lr}
    e626:	4608      	mov	r0, r1
    e628:	4614      	mov	r4, r2
	switch(type)
    e62a:	d00a      	beq.n	e642 <userFunction+0x22>
    e62c:	2b02      	cmp	r3, #2
    e62e:	d00f      	beq.n	e650 <userFunction+0x30>
    e630:	b993      	cbnz	r3, e658 <userFunction+0x38>
	{
	case 0:	// disable continuos read/write mode - used in BoardAssignment.c for the combination TMC43XX + TMC2660
		// In continuos read/write mode settings will be continously written to TMC2660 and all replies are requested rotatory.
		// It's the default mode to prevent TMC2660 from loosing setting on brownout and being alway up to date with all chip states.
		TMC2660.continuousModeEnable = *value ? 0 : 1;
    e632:	6812      	ldr	r2, [r2, #0]
    e634:	4909      	ldr	r1, [pc, #36]	; (e65c <userFunction+0x3c>)
    e636:	fab2 f282 	clz	r2, r2
    e63a:	0952      	lsrs	r2, r2, #5
    e63c:	728a      	strb	r2, [r1, #10]
	uint32_t errors = 0;
    e63e:	2000      	movs	r0, #0
		errors |= TMC_ERROR_TYPE;
		break;
	}

	return errors;
}
    e640:	bd10      	pop	{r4, pc}
		compatibilityMode = *value ? 0 : 1;
    e642:	6813      	ldr	r3, [r2, #0]
    e644:	4a06      	ldr	r2, [pc, #24]	; (e660 <userFunction+0x40>)
    e646:	fab3 f383 	clz	r3, r3
    e64a:	095b      	lsrs	r3, r3, #5
    e64c:	6013      	str	r3, [r2, #0]
		break;
    e64e:	e7f6      	b.n	e63e <userFunction+0x1e>
		*value = StepDir_getStatus(motor);
    e650:	f011 f8ee 	bl	1f830 <StepDir_getStatus>
    e654:	6020      	str	r0, [r4, #0]
    e656:	e7f2      	b.n	e63e <userFunction+0x1e>
	switch(type)
    e658:	2004      	movs	r0, #4
	return errors;
    e65a:	e7f1      	b.n	e640 <userFunction+0x20>
    e65c:	1fff2564 	.word	0x1fff2564
    e660:	1fff0070 	.word	0x1fff0070

0000e664 <moveTo>:
{
	return rotate(motor, 0);
}

static uint32_t moveTo(uint8_t motor, int32_t position)
{
    e664:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    e666:	4604      	mov	r4, r0
    e668:	b918      	cbnz	r0, e672 <moveTo+0xe>
		return TMC_ERROR_MOTOR;

	StepDir_moveTo(motor, position);
    e66a:	f011 f883 	bl	1f774 <StepDir_moveTo>

	return TMC_ERROR_NONE;
    e66e:	4620      	mov	r0, r4
}
    e670:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    e672:	2008      	movs	r0, #8
    e674:	e7fc      	b.n	e670 <moveTo+0xc>

0000e676 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc2660_restore(TMC2660_config);
    e676:	4b02      	ldr	r3, [pc, #8]	; (e680 <restore+0xa>)
    e678:	6c98      	ldr	r0, [r3, #72]	; 0x48
    e67a:	f012 bf36 	b.w	214ea <tmc2660_restore>
    e67e:	bf00      	nop
    e680:	1fff2564 	.word	0x1fff2564

0000e684 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
    e684:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
    e686:	bf04      	itt	eq
    e688:	4b0b      	ldreq	r3, [pc, #44]	; (e6b8 <enableDriver+0x34>)
    e68a:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state == DRIVER_DISABLE)
    e68e:	b930      	cbnz	r0, e69e <enableDriver+0x1a>
		HAL.IOs->config->setHigh(Pins.ENN);
    e690:	4b0a      	ldr	r3, [pc, #40]	; (e6bc <enableDriver+0x38>)
    e692:	68db      	ldr	r3, [r3, #12]
    e694:	681b      	ldr	r3, [r3, #0]
    e696:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.ENN);
    e698:	4a09      	ldr	r2, [pc, #36]	; (e6c0 <enableDriver+0x3c>)
    e69a:	6d90      	ldr	r0, [r2, #88]	; 0x58
    e69c:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
    e69e:	2801      	cmp	r0, #1
    e6a0:	d109      	bne.n	e6b6 <enableDriver+0x32>
    e6a2:	4b05      	ldr	r3, [pc, #20]	; (e6b8 <enableDriver+0x34>)
    e6a4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    e6a8:	2b01      	cmp	r3, #1
    e6aa:	d104      	bne.n	e6b6 <enableDriver+0x32>
		HAL.IOs->config->setLow(Pins.ENN);
    e6ac:	4b03      	ldr	r3, [pc, #12]	; (e6bc <enableDriver+0x38>)
    e6ae:	68db      	ldr	r3, [r3, #12]
    e6b0:	681b      	ldr	r3, [r3, #0]
    e6b2:	699b      	ldr	r3, [r3, #24]
    e6b4:	e7f0      	b.n	e698 <enableDriver+0x14>
}
    e6b6:	4770      	bx	lr
    e6b8:	1fff5e88 	.word	0x1fff5e88
    e6bc:	00029d1c 	.word	0x00029d1c
    e6c0:	1fff2564 	.word	0x1fff2564

0000e6c4 <deInit>:
{
    e6c4:	b538      	push	{r3, r4, r5, lr}
	enableDriver(DRIVER_DISABLE);
    e6c6:	2000      	movs	r0, #0
    e6c8:	f7ff ffdc 	bl	e684 <enableDriver>
	HAL.IOs->config->setHigh(Pins.ENN);
    e6cc:	4b0f      	ldr	r3, [pc, #60]	; (e70c <deInit+0x48>)
    e6ce:	4c10      	ldr	r4, [pc, #64]	; (e710 <deInit+0x4c>)
    e6d0:	68dd      	ldr	r5, [r3, #12]
    e6d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e6d4:	682b      	ldr	r3, [r5, #0]
    e6d6:	695b      	ldr	r3, [r3, #20]
    e6d8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.CSN);
    e6da:	682b      	ldr	r3, [r5, #0]
    e6dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e6de:	689b      	ldr	r3, [r3, #8]
    e6e0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DIR);
    e6e2:	682b      	ldr	r3, [r5, #0]
    e6e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e6e6:	689b      	ldr	r3, [r3, #8]
    e6e8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENN);
    e6ea:	682b      	ldr	r3, [r5, #0]
    e6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e6ee:	689b      	ldr	r3, [r3, #8]
    e6f0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SG_TST);
    e6f2:	682b      	ldr	r3, [r5, #0]
    e6f4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    e6f6:	689b      	ldr	r3, [r3, #8]
    e6f8:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STEP);
    e6fa:	682b      	ldr	r3, [r5, #0]
    e6fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e6fe:	689b      	ldr	r3, [r3, #8]
    e700:	4798      	blx	r3
}
    e702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	StepDir_deInit();
    e706:	f011 badd 	b.w	1fcc4 <StepDir_deInit>
    e70a:	bf00      	nop
    e70c:	00029d1c 	.word	0x00029d1c
    e710:	1fff2564 	.word	0x1fff2564

0000e714 <getMeasuredSpeed>:
{
    e714:	b538      	push	{r3, r4, r5, lr}
    e716:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    e718:	4604      	mov	r4, r0
    e71a:	b920      	cbnz	r0, e726 <getMeasuredSpeed+0x12>
		*value = StepDir_getActualVelocity(motor);
    e71c:	f011 f9cc 	bl	1fab8 <StepDir_getActualVelocity>
    e720:	6028      	str	r0, [r5, #0]
    e722:	4620      	mov	r0, r4
}
    e724:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    e726:	2008      	movs	r0, #8
    e728:	e7fc      	b.n	e724 <getMeasuredSpeed+0x10>

0000e72a <rotate>:
{
    e72a:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
    e72c:	4604      	mov	r4, r0
    e72e:	b928      	cbnz	r0, e73c <rotate+0x12>
	TMC2660.isStandStillOverCurrent   = 0;
    e730:	4b03      	ldr	r3, [pc, #12]	; (e740 <rotate+0x16>)
    e732:	8118      	strh	r0, [r3, #8]
	StepDir_rotate(motor, velocity);
    e734:	f010 fff8 	bl	1f728 <StepDir_rotate>
    e738:	4620      	mov	r0, r4
}
    e73a:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
    e73c:	2008      	movs	r0, #8
    e73e:	e7fc      	b.n	e73a <rotate+0x10>
    e740:	1fff2564 	.word	0x1fff2564

0000e744 <stop>:
	return rotate(motor, 0);
    e744:	2100      	movs	r1, #0
    e746:	e7f0      	b.n	e72a <rotate>

0000e748 <left>:
	return rotate(motor, -velocity);
    e748:	4249      	negs	r1, r1
    e74a:	e7ee      	b.n	e72a <rotate>

0000e74c <right>:
	return rotate(motor, velocity);
    e74c:	e7ed      	b.n	e72a <rotate>

0000e74e <reset>:
{
    e74e:	b570      	push	{r4, r5, r6, lr}
	if(StepDir_getActualVelocity(0) != 0)
    e750:	2000      	movs	r0, #0
    e752:	f011 f9b1 	bl	1fab8 <StepDir_getActualVelocity>
    e756:	4606      	mov	r6, r0
    e758:	b9b0      	cbnz	r0, e788 <reset+0x3a>
	tmc2660_reset(&TMC2660, TMC2660_config);
    e75a:	4d0c      	ldr	r5, [pc, #48]	; (e78c <reset+0x3e>)
    e75c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    e75e:	4628      	mov	r0, r5
    e760:	f012 fea6 	bl	214b0 <tmc2660_reset>
	compatibilityMode = 1;
    e764:	4b0a      	ldr	r3, [pc, #40]	; (e790 <reset+0x42>)
    e766:	2401      	movs	r4, #1
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e768:	2002      	movs	r0, #2
	compatibilityMode = 1;
    e76a:	601c      	str	r4, [r3, #0]
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    e76c:	f7ff ff8a 	bl	e684 <enableDriver>
	StepDir_init(STEPDIR_PRECISION);
    e770:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    e774:	f011 fa2e 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
    e778:	4630      	mov	r0, r6
    e77a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    e77e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    e780:	f011 f87e 	bl	1f880 <StepDir_setPins>
    e784:	4620      	mov	r0, r4
}
    e786:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    e788:	2000      	movs	r0, #0
    e78a:	e7fc      	b.n	e786 <reset+0x38>
    e78c:	1fff2564 	.word	0x1fff2564
    e790:	1fff0070 	.word	0x1fff0070

0000e794 <moveBy>:
{
    e794:	b538      	push	{r3, r4, r5, lr}
    e796:	460d      	mov	r5, r1
	if(motor >= MOTORS)
    e798:	4604      	mov	r4, r0
    e79a:	b948      	cbnz	r0, e7b0 <moveBy+0x1c>
	*ticks += StepDir_getActualPosition(motor);
    e79c:	f011 f96c 	bl	1fa78 <StepDir_getActualPosition>
    e7a0:	6829      	ldr	r1, [r5, #0]
    e7a2:	4401      	add	r1, r0
    e7a4:	6029      	str	r1, [r5, #0]
	StepDir_moveTo(motor, position);
    e7a6:	4620      	mov	r0, r4
    e7a8:	f010 ffe4 	bl	1f774 <StepDir_moveTo>
    e7ac:	4620      	mov	r0, r4
}
    e7ae:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
    e7b0:	2008      	movs	r0, #8
    e7b2:	e7fc      	b.n	e7ae <moveBy+0x1a>

0000e7b4 <readWrite>:
{	// sending data (value) via spi to TMC262, coping written and received data to shadow register
    e7b4:	b538      	push	{r3, r4, r5, lr}
	TMC2660_config->shadowRegister[rdsel]  = TMC2660_SPIChannel->readWrite(datagram>>16, 0);
    e7b6:	4c1f      	ldr	r4, [pc, #124]	; (e834 <readWrite+0x80>)
    e7b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
{	// sending data (value) via spi to TMC262, coping written and received data to shadow register
    e7ba:	4605      	mov	r5, r0
	TMC2660_config->shadowRegister[rdsel]  = TMC2660_SPIChannel->readWrite(datagram>>16, 0);
    e7bc:	689b      	ldr	r3, [r3, #8]
    e7be:	2100      	movs	r1, #0
    e7c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    e7c4:	4798      	blx	r3
    e7c6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
	TMC2660_config->shadowRegister[rdsel]  <<= 8;
    e7ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e7cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    e7d0:	0200      	lsls	r0, r0, #8
    e7d2:	6058      	str	r0, [r3, #4]
	TMC2660_config->shadowRegister[rdsel]  |= TMC2660_SPIChannel->readWrite(datagram>>8, 0);
    e7d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7d6:	2100      	movs	r1, #0
    e7d8:	689b      	ldr	r3, [r3, #8]
    e7da:	f3c5 2007 	ubfx	r0, r5, #8, #8
    e7de:	4798      	blx	r3
    e7e0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    e7e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e7e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	TMC2660_config->shadowRegister[rdsel]  |= TMC2660_SPIChannel->readWrite(datagram & 0xFF, 1);
    e7ea:	2101      	movs	r1, #1
	TMC2660_config->shadowRegister[rdsel]  |= TMC2660_SPIChannel->readWrite(datagram>>8, 0);
    e7ec:	685a      	ldr	r2, [r3, #4]
    e7ee:	4310      	orrs	r0, r2
	TMC2660_config->shadowRegister[rdsel]  <<= 8;
    e7f0:	0200      	lsls	r0, r0, #8
    e7f2:	6058      	str	r0, [r3, #4]
	TMC2660_config->shadowRegister[rdsel]  |= TMC2660_SPIChannel->readWrite(datagram & 0xFF, 1);
    e7f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7f6:	b2e8      	uxtb	r0, r5
    e7f8:	689b      	ldr	r3, [r3, #8]
    e7fa:	4798      	blx	r3
    e7fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    e7fe:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    e802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e806:	6859      	ldr	r1, [r3, #4]
    e808:	4308      	orrs	r0, r1
	TMC2660_config->shadowRegister[rdsel]  >>= 4;
    e80a:	1100      	asrs	r0, r0, #4
    e80c:	6058      	str	r0, [r3, #4]
	if(TMC2660_GET_ADDRESS(datagram) == TMC2660_DRVCONF)
    e80e:	0cab      	lsrs	r3, r5, #18
	TMC2660_config->shadowRegister[TMC2660_RESPONSE_LATEST] = TMC2660_config->shadowRegister[rdsel]; // copy value to latest field
    e810:	6110      	str	r0, [r2, #16]
	if(TMC2660_GET_ADDRESS(datagram) == TMC2660_DRVCONF)
    e812:	d00a      	beq.n	e82a <readWrite+0x76>
    e814:	f3c5 4342 	ubfx	r3, r5, #17, #3
    e818:	2b07      	cmp	r3, #7
    e81a:	d103      	bne.n	e824 <readWrite+0x70>
		rdsel = TMC2660_GET_RDSEL(datagram);
    e81c:	f3c5 1101 	ubfx	r1, r5, #4, #2
    e820:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
	TMC2660_config->shadowRegister[TMC2660_GET_ADDRESS(datagram) | TMC2660_WRITE_BIT ] = datagram;
    e824:	f043 0308 	orr.w	r3, r3, #8
    e828:	e000      	b.n	e82c <readWrite+0x78>
    e82a:	2308      	movs	r3, #8
    e82c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e830:	605d      	str	r5, [r3, #4]
}
    e832:	bd38      	pop	{r3, r4, r5, pc}
    e834:	1fff2564 	.word	0x1fff2564

0000e838 <tmc2660_writeInt.constprop.0>:
void tmc2660_writeInt(uint8_t motor, uint8_t address, int value)
    e838:	b410      	push	{r4}
	TMC2660_config->shadowRegister[0x7F & (address | TMC2660_WRITE_BIT)] = value;
    e83a:	4c0a      	ldr	r4, [pc, #40]	; (e864 <tmc2660_writeInt.constprop.0+0x2c>)
    e83c:	f000 0277 	and.w	r2, r0, #119	; 0x77
    e840:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e842:	f042 0208 	orr.w	r2, r2, #8
    e846:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	value &= 0x0FFFFF;
    e84a:	f3c1 0113 	ubfx	r1, r1, #0, #20
	TMC2660_config->shadowRegister[0x7F & (address | TMC2660_WRITE_BIT)] = value;
    e84e:	6059      	str	r1, [r3, #4]
	if(!TMC2660.continuousModeEnable)
    e850:	7aa3      	ldrb	r3, [r4, #10]
    e852:	b923      	cbnz	r3, e85e <tmc2660_writeInt.constprop.0+0x26>
}
    e854:	bc10      	pop	{r4}
		readWrite(TMC2660_DATAGRAM(address, value));
    e856:	ea41 4040 	orr.w	r0, r1, r0, lsl #17
    e85a:	f7ff bfab 	b.w	e7b4 <readWrite>
}
    e85e:	bc10      	pop	{r4}
    e860:	4770      	bx	lr
    e862:	bf00      	nop
    e864:	1fff2564 	.word	0x1fff2564

0000e868 <writeRegister>:
{
    e868:	4608      	mov	r0, r1
	tmc2660_writeInt(0, address, value);
    e86a:	4611      	mov	r1, r2
    e86c:	e7e4      	b.n	e838 <tmc2660_writeInt.constprop.0>

0000e86e <readImmediately>:
{ // sets desired reply in DRVCONF register, resets it to previous settings whilst reading desired reply
    e86e:	b538      	push	{r3, r4, r5, lr}
    e870:	4604      	mov	r4, r0
	value = tmc2660_readInt(0, TMC2660_WRITE_BIT | TMC2660_DRVCONF);  // buffer value amd  drvConf to write back later
    e872:	200f      	movs	r0, #15
    e874:	f000 f813 	bl	e89e <tmc2660_readInt.constprop.0>
	value |= TMC2660_SET_RDSEL(rdsel%3);                          // set rdsel
    e878:	2303      	movs	r3, #3
    e87a:	fbb4 f3f3 	udiv	r3, r4, r3
    e87e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e882:	1ae4      	subs	r4, r4, r3
	value = tmc2660_readInt(0, TMC2660_WRITE_BIT | TMC2660_DRVCONF);  // buffer value amd  drvConf to write back later
    e884:	4605      	mov	r5, r0
	value |= TMC2660_SET_RDSEL(rdsel%3);                          // set rdsel
    e886:	b2e4      	uxtb	r4, r4
	value &= ~TMC2660_SET_RDSEL(-1);                              // clear RDSEL bits
    e888:	f020 0030 	bic.w	r0, r0, #48	; 0x30
	readWrite(value);                                             // write to chip and readout reply
    e88c:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
    e890:	f7ff ff90 	bl	e7b4 <readWrite>
	readWrite(drvConf);                                           // write to chip and return desired reply
    e894:	4628      	mov	r0, r5
}
    e896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	readWrite(drvConf);                                           // write to chip and return desired reply
    e89a:	f7ff bf8b 	b.w	e7b4 <readWrite>

0000e89e <tmc2660_readInt.constprop.0>:
uint32_t tmc2660_readInt(uint8_t motor, uint8_t address)
    e89e:	b538      	push	{r3, r4, r5, lr}
	if(!TMC2660.continuousModeEnable && !(address & TMC2660_WRITE_BIT))
    e8a0:	4d08      	ldr	r5, [pc, #32]	; (e8c4 <tmc2660_readInt.constprop.0+0x26>)
    e8a2:	7aa9      	ldrb	r1, [r5, #10]
    e8a4:	f000 0208 	and.w	r2, r0, #8
    e8a8:	ea51 0302 	orrs.w	r3, r1, r2
uint32_t tmc2660_readInt(uint8_t motor, uint8_t address)
    e8ac:	4604      	mov	r4, r0
	if(!TMC2660.continuousModeEnable && !(address & TMC2660_WRITE_BIT))
    e8ae:	d101      	bne.n	e8b4 <tmc2660_readInt.constprop.0+0x16>
		readImmediately(address);
    e8b0:	f7ff ffdd 	bl	e86e <readImmediately>
	return TMC2660_config->shadowRegister[0x7F & address];
    e8b4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    e8b6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    e8ba:	eb00 0484 	add.w	r4, r0, r4, lsl #2
}
    e8be:	6860      	ldr	r0, [r4, #4]
    e8c0:	bd38      	pop	{r3, r4, r5, pc}
    e8c2:	bf00      	nop
    e8c4:	1fff2564 	.word	0x1fff2564

0000e8c8 <handleParameter>:
{
    e8c8:	b570      	push	{r4, r5, r6, lr}
    e8ca:	4604      	mov	r4, r0
    e8cc:	461d      	mov	r5, r3
	if(motor >= MOTORS)
    e8ce:	460e      	mov	r6, r1
    e8d0:	2900      	cmp	r1, #0
    e8d2:	f040 8389 	bne.w	efe8 <handleParameter+0x720>
	switch(type)
    e8d6:	2ad6      	cmp	r2, #214	; 0xd6
    e8d8:	d80a      	bhi.n	e8f0 <handleParameter+0x28>
    e8da:	2a8b      	cmp	r2, #139	; 0x8b
    e8dc:	d80a      	bhi.n	e8f4 <handleParameter+0x2c>
    e8de:	2a1d      	cmp	r2, #29
    e8e0:	f240 80a4 	bls.w	ea2c <handleParameter+0x164>
    e8e4:	2a32      	cmp	r2, #50	; 0x32
    e8e6:	f000 8163 	beq.w	ebb0 <handleParameter+0x2e8>
    e8ea:	2a33      	cmp	r2, #51	; 0x33
    e8ec:	f000 8169 	beq.w	ebc2 <handleParameter+0x2fa>
			errors |= TMC_ERROR_TYPE;
    e8f0:	2404      	movs	r4, #4
    e8f2:	e0e1      	b.n	eab8 <handleParameter+0x1f0>
    e8f4:	3a8c      	subs	r2, #140	; 0x8c
    e8f6:	2a4a      	cmp	r2, #74	; 0x4a
    e8f8:	d8fa      	bhi.n	e8f0 <handleParameter+0x28>
    e8fa:	a301      	add	r3, pc, #4	; (adr r3, e900 <handleParameter+0x38>)
    e8fc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    e900:	0000ebd5 	.word	0x0000ebd5
    e904:	0000e8f1 	.word	0x0000e8f1
    e908:	0000e8f1 	.word	0x0000e8f1
    e90c:	0000e8f1 	.word	0x0000e8f1
    e910:	0000e8f1 	.word	0x0000e8f1
    e914:	0000e8f1 	.word	0x0000e8f1
    e918:	0000e8f1 	.word	0x0000e8f1
    e91c:	0000e8f1 	.word	0x0000e8f1
    e920:	0000e8f1 	.word	0x0000e8f1
    e924:	0000e8f1 	.word	0x0000e8f1
    e928:	0000e8f1 	.word	0x0000e8f1
    e92c:	0000e8f1 	.word	0x0000e8f1
    e930:	0000e8f1 	.word	0x0000e8f1
    e934:	0000e8f1 	.word	0x0000e8f1
    e938:	0000e8f1 	.word	0x0000e8f1
    e93c:	0000e8f1 	.word	0x0000e8f1
    e940:	0000e8f1 	.word	0x0000e8f1
    e944:	0000e8f1 	.word	0x0000e8f1
    e948:	0000e8f1 	.word	0x0000e8f1
    e94c:	0000e8f1 	.word	0x0000e8f1
    e950:	0000ec5d 	.word	0x0000ec5d
    e954:	0000ec7f 	.word	0x0000ec7f
    e958:	0000ec9f 	.word	0x0000ec9f
    e95c:	0000ecc1 	.word	0x0000ecc1
    e960:	0000ece1 	.word	0x0000ece1
    e964:	0000ed01 	.word	0x0000ed01
    e968:	0000ed21 	.word	0x0000ed21
    e96c:	0000ed41 	.word	0x0000ed41
    e970:	0000ed63 	.word	0x0000ed63
    e974:	0000ed8b 	.word	0x0000ed8b
    e978:	0000edad 	.word	0x0000edad
    e97c:	0000edd9 	.word	0x0000edd9
    e980:	0000edfb 	.word	0x0000edfb
    e984:	0000ee15 	.word	0x0000ee15
    e988:	0000ee39 	.word	0x0000ee39
    e98c:	0000ee69 	.word	0x0000ee69
    e990:	0000ee8d 	.word	0x0000ee8d
    e994:	0000eeaf 	.word	0x0000eeaf
    e998:	0000eed1 	.word	0x0000eed1
    e99c:	0000eef3 	.word	0x0000eef3
    e9a0:	0000ef15 	.word	0x0000ef15
    e9a4:	0000ef27 	.word	0x0000ef27
    e9a8:	0000ef39 	.word	0x0000ef39
    e9ac:	0000ef47 	.word	0x0000ef47
    e9b0:	0000ef67 	.word	0x0000ef67
    e9b4:	0000ef89 	.word	0x0000ef89
    e9b8:	0000e8f1 	.word	0x0000e8f1
    e9bc:	0000e8f1 	.word	0x0000e8f1
    e9c0:	0000e8f1 	.word	0x0000e8f1
    e9c4:	0000e8f1 	.word	0x0000e8f1
    e9c8:	0000e8f1 	.word	0x0000e8f1
    e9cc:	0000e8f1 	.word	0x0000e8f1
    e9d0:	0000e8f1 	.word	0x0000e8f1
    e9d4:	0000e8f1 	.word	0x0000e8f1
    e9d8:	0000e8f1 	.word	0x0000e8f1
    e9dc:	0000e8f1 	.word	0x0000e8f1
    e9e0:	0000e8f1 	.word	0x0000e8f1
    e9e4:	0000e8f1 	.word	0x0000e8f1
    e9e8:	0000e8f1 	.word	0x0000e8f1
    e9ec:	0000e8f1 	.word	0x0000e8f1
    e9f0:	0000e8f1 	.word	0x0000e8f1
    e9f4:	0000e8f1 	.word	0x0000e8f1
    e9f8:	0000e8f1 	.word	0x0000e8f1
    e9fc:	0000e8f1 	.word	0x0000e8f1
    ea00:	0000e8f1 	.word	0x0000e8f1
    ea04:	0000e8f1 	.word	0x0000e8f1
    ea08:	0000efa3 	.word	0x0000efa3
    ea0c:	0000e8f1 	.word	0x0000e8f1
    ea10:	0000efcb 	.word	0x0000efcb
    ea14:	0000e8f1 	.word	0x0000e8f1
    ea18:	0000e8f1 	.word	0x0000e8f1
    ea1c:	0000e8f1 	.word	0x0000e8f1
    ea20:	0000e8f1 	.word	0x0000e8f1
    ea24:	0000e8f1 	.word	0x0000e8f1
    ea28:	0000efdb 	.word	0x0000efdb
    ea2c:	2a1d      	cmp	r2, #29
    ea2e:	f63f af5f 	bhi.w	e8f0 <handleParameter+0x28>
    ea32:	a301      	add	r3, pc, #4	; (adr r3, ea38 <handleParameter+0x170>)
    ea34:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    ea38:	0000eab1 	.word	0x0000eab1
    ea3c:	0000eac9 	.word	0x0000eac9
    ea40:	0000eadb 	.word	0x0000eadb
    ea44:	0000eaed 	.word	0x0000eaed
    ea48:	0000eaf9 	.word	0x0000eaf9
    ea4c:	0000eb11 	.word	0x0000eb11
    ea50:	0000eb23 	.word	0x0000eb23
    ea54:	0000eb75 	.word	0x0000eb75
    ea58:	0000eba1 	.word	0x0000eba1
    ea5c:	0000e8f1 	.word	0x0000e8f1
    ea60:	0000e8f1 	.word	0x0000e8f1
    ea64:	0000e8f1 	.word	0x0000e8f1
    ea68:	0000e8f1 	.word	0x0000e8f1
    ea6c:	0000e8f1 	.word	0x0000e8f1
    ea70:	0000e8f1 	.word	0x0000e8f1
    ea74:	0000e8f1 	.word	0x0000e8f1
    ea78:	0000e8f1 	.word	0x0000e8f1
    ea7c:	0000e8f1 	.word	0x0000e8f1
    ea80:	0000e8f1 	.word	0x0000e8f1
    ea84:	0000e8f1 	.word	0x0000e8f1
    ea88:	0000e8f1 	.word	0x0000e8f1
    ea8c:	0000e8f1 	.word	0x0000e8f1
    ea90:	0000e8f1 	.word	0x0000e8f1
    ea94:	0000e8f1 	.word	0x0000e8f1
    ea98:	0000e8f1 	.word	0x0000e8f1
    ea9c:	0000e8f1 	.word	0x0000e8f1
    eaa0:	0000e8f1 	.word	0x0000e8f1
    eaa4:	0000e8f1 	.word	0x0000e8f1
    eaa8:	0000e8f1 	.word	0x0000e8f1
    eaac:	0000eaed 	.word	0x0000eaed
		if(readWrite == READ) {
    eab0:	b920      	cbnz	r0, eabc <handleParameter+0x1f4>
			*value = StepDir_getTargetPosition(motor);
    eab2:	f010 fff1 	bl	1fa98 <StepDir_getTargetPosition>
			*value = StepDir_getActualPosition(motor);
    eab6:	6028      	str	r0, [r5, #0]
}
    eab8:	4620      	mov	r0, r4
    eaba:	bd70      	pop	{r4, r5, r6, pc}
			StepDir_moveTo(motor, *value);
    eabc:	6829      	ldr	r1, [r5, #0]
    eabe:	2000      	movs	r0, #0
    eac0:	f010 fe58 	bl	1f774 <StepDir_moveTo>
	uint32_t errors = TMC_ERROR_NONE;
    eac4:	2400      	movs	r4, #0
    eac6:	e7f7      	b.n	eab8 <handleParameter+0x1f0>
		if(readWrite == READ) {
    eac8:	b910      	cbnz	r0, ead0 <handleParameter+0x208>
			*value = StepDir_getActualPosition(motor);
    eaca:	f010 ffd5 	bl	1fa78 <StepDir_getActualPosition>
    eace:	e7f2      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setActualPosition(motor, *value);
    ead0:	6829      	ldr	r1, [r5, #0]
    ead2:	2000      	movs	r0, #0
    ead4:	f010 ff70 	bl	1f9b8 <StepDir_setActualPosition>
    ead8:	e7f4      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    eada:	b910      	cbnz	r0, eae2 <handleParameter+0x21a>
			*value = StepDir_getTargetVelocity(motor);
    eadc:	f010 fffc 	bl	1fad8 <StepDir_getTargetVelocity>
    eae0:	e7e9      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_rotate(motor, *value);
    eae2:	6829      	ldr	r1, [r5, #0]
    eae4:	2000      	movs	r0, #0
    eae6:	f010 fe1f 	bl	1f728 <StepDir_rotate>
    eaea:	e7eb      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    eaec:	2800      	cmp	r0, #0
    eaee:	f47f aeff 	bne.w	e8f0 <handleParameter+0x28>
			*value = StepDir_getActualVelocity(motor);
    eaf2:	f010 ffe1 	bl	1fab8 <StepDir_getActualVelocity>
    eaf6:	e7de      	b.n	eab6 <handleParameter+0x1ee>
		if(readWrite == READ) {
    eaf8:	b910      	cbnz	r0, eb00 <handleParameter+0x238>
			*value = StepDir_getVelocityMax(motor);
    eafa:	f011 f80d 	bl	1fb18 <StepDir_getVelocityMax>
    eafe:	e7da      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setVelocityMax(motor, abs(*value));
    eb00:	6829      	ldr	r1, [r5, #0]
    eb02:	2900      	cmp	r1, #0
    eb04:	bfb8      	it	lt
    eb06:	4249      	neglt	r1, r1
    eb08:	2000      	movs	r0, #0
    eb0a:	f010 ff71 	bl	1f9f0 <StepDir_setVelocityMax>
    eb0e:	e7d9      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    eb10:	b910      	cbnz	r0, eb18 <handleParameter+0x250>
			*value = StepDir_getAcceleration(motor);
    eb12:	f010 fff1 	bl	1faf8 <StepDir_getAcceleration>
    eb16:	e7ce      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setAcceleration(motor, *value);
    eb18:	6829      	ldr	r1, [r5, #0]
    eb1a:	2000      	movs	r0, #0
    eb1c:	f011 f91a 	bl	1fd54 <StepDir_setAcceleration>
    eb20:	e7d0      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    eb22:	4eab      	ldr	r6, [pc, #684]	; (edd0 <handleParameter+0x508>)
    eb24:	b910      	cbnz	r0, eb2c <handleParameter+0x264>
			*value = TMC2660.runCurrentScale;
    eb26:	7af3      	ldrb	r3, [r6, #11]
			*value = TMC2660.standStillTimeout;
    eb28:	602b      	str	r3, [r5, #0]
    eb2a:	e7c5      	b.n	eab8 <handleParameter+0x1f0>
			TMC2660.runCurrentScale = *value;
    eb2c:	682b      	ldr	r3, [r5, #0]
    eb2e:	72f3      	strb	r3, [r6, #11]
			if(Evalboards.ch1.fullCover == NULL) {
    eb30:	4ba8      	ldr	r3, [pc, #672]	; (edd4 <handleParameter+0x50c>)
    eb32:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    eb34:	b988      	cbnz	r0, eb5a <handleParameter+0x292>
				if(TMC2660_FIELD_READ(0, TMC2660_DRVCTRL, TMC2660_STST_MASK, TMC2660_STST_SHIFT) == 0)
    eb36:	f7ff feb2 	bl	e89e <tmc2660_readInt.constprop.0>
    eb3a:	f010 0480 	ands.w	r4, r0, #128	; 0x80
    eb3e:	d1c1      	bne.n	eac4 <handleParameter+0x1fc>
					TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.runCurrentScale);
    eb40:	200e      	movs	r0, #14
    eb42:	f7ff feac 	bl	e89e <tmc2660_readInt.constprop.0>
    eb46:	7af1      	ldrb	r1, [r6, #11]
					TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.standStillCurrentScale);
    eb48:	f020 001f 	bic.w	r0, r0, #31
    eb4c:	f001 011f 	and.w	r1, r1, #31
    eb50:	4301      	orrs	r1, r0
    eb52:	200e      	movs	r0, #14
    eb54:	f7ff fe70 	bl	e838 <tmc2660_writeInt.constprop.0>
    eb58:	e7ae      	b.n	eab8 <handleParameter+0x1f0>
				TMC2660.standStillCurrentScale = *value;
    eb5a:	682b      	ldr	r3, [r5, #0]
    eb5c:	7033      	strb	r3, [r6, #0]
				TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.runCurrentScale);
    eb5e:	200e      	movs	r0, #14
    eb60:	f7ff fe9d 	bl	e89e <tmc2660_readInt.constprop.0>
    eb64:	7af1      	ldrb	r1, [r6, #11]
    eb66:	f020 001f 	bic.w	r0, r0, #31
    eb6a:	f001 011f 	and.w	r1, r1, #31
    eb6e:	4301      	orrs	r1, r0
			TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_SGT_MASK, TMC2660_SGT_SHIFT, *value);
    eb70:	200e      	movs	r0, #14
    eb72:	e107      	b.n	ed84 <handleParameter+0x4bc>
		if(readWrite == READ) {
    eb74:	4e96      	ldr	r6, [pc, #600]	; (edd0 <handleParameter+0x508>)
    eb76:	b908      	cbnz	r0, eb7c <handleParameter+0x2b4>
			*value = TMC2660.standStillCurrentScale;
    eb78:	7833      	ldrb	r3, [r6, #0]
    eb7a:	e7d5      	b.n	eb28 <handleParameter+0x260>
			TMC2660.standStillCurrentScale = *value;
    eb7c:	682b      	ldr	r3, [r5, #0]
    eb7e:	7033      	strb	r3, [r6, #0]
			if(Evalboards.ch1.fullCover == NULL) {
    eb80:	4b94      	ldr	r3, [pc, #592]	; (edd4 <handleParameter+0x50c>)
    eb82:	6edc      	ldr	r4, [r3, #108]	; 0x6c
    eb84:	b94c      	cbnz	r4, eb9a <handleParameter+0x2d2>
				if(TMC2660_FIELD_READ(0, TMC2660_DRVCTRL, TMC2660_STST_MASK, TMC2660_STST_SHIFT) == 1)
    eb86:	4620      	mov	r0, r4
    eb88:	f7ff fe89 	bl	e89e <tmc2660_readInt.constprop.0>
    eb8c:	0603      	lsls	r3, r0, #24
    eb8e:	d599      	bpl.n	eac4 <handleParameter+0x1fc>
					TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.standStillCurrentScale);
    eb90:	200e      	movs	r0, #14
    eb92:	f7ff fe84 	bl	e89e <tmc2660_readInt.constprop.0>
    eb96:	7831      	ldrb	r1, [r6, #0]
    eb98:	e7d6      	b.n	eb48 <handleParameter+0x280>
				TMC2660.runCurrentScale = *value;
    eb9a:	682b      	ldr	r3, [r5, #0]
    eb9c:	72f3      	strb	r3, [r6, #11]
    eb9e:	e791      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    eba0:	2800      	cmp	r0, #0
    eba2:	f47f aea5 	bne.w	e8f0 <handleParameter+0x28>
			*value = (StepDir_getStatus(motor) & STATUS_TARGET_REACHED)? 1:0;
    eba6:	f010 fe43 	bl	1f830 <StepDir_getStatus>
    ebaa:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ebae:	e782      	b.n	eab6 <handleParameter+0x1ee>
		if(readWrite == READ) {
    ebb0:	b910      	cbnz	r0, ebb8 <handleParameter+0x2f0>
			*value = StepDir_getMode(motor);
    ebb2:	f010 ffcf 	bl	1fb54 <StepDir_getMode>
    ebb6:	e77e      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setMode(motor, *value);
    ebb8:	7819      	ldrb	r1, [r3, #0]
    ebba:	4630      	mov	r0, r6
    ebbc:	f010 ff34 	bl	1fa28 <StepDir_setMode>
    ebc0:	e780      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    ebc2:	b910      	cbnz	r0, ebca <handleParameter+0x302>
			*value = StepDir_getFrequency(motor);
    ebc4:	f010 ffd4 	bl	1fb70 <StepDir_getFrequency>
    ebc8:	e775      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setFrequency(motor, *value);
    ebca:	6819      	ldr	r1, [r3, #0]
    ebcc:	4630      	mov	r0, r6
    ebce:	f010 ff3b 	bl	1fa48 <StepDir_setFrequency>
    ebd2:	e777      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    ebd4:	b938      	cbnz	r0, ebe6 <handleParameter+0x31e>
			*value = 8 - TMC2660_FIELD_READ(0, TMC2660_DRVCTRL | TMC2660_WRITE_BIT, TMC2660_MRES_MASK, TMC2660_MRES_SHIFT);
    ebd6:	2008      	movs	r0, #8
    ebd8:	f7ff fe61 	bl	e89e <tmc2660_readInt.constprop.0>
    ebdc:	f000 000f 	and.w	r0, r0, #15
    ebe0:	f1c0 0008 	rsb	r0, r0, #8
    ebe4:	e767      	b.n	eab6 <handleParameter+0x1ee>
			switch(*value)
    ebe6:	682b      	ldr	r3, [r5, #0]
    ebe8:	2b10      	cmp	r3, #16
    ebea:	d02f      	beq.n	ec4c <handleParameter+0x384>
    ebec:	dc0a      	bgt.n	ec04 <handleParameter+0x33c>
    ebee:	3b01      	subs	r3, #1
    ebf0:	2b07      	cmp	r3, #7
    ebf2:	d80e      	bhi.n	ec12 <handleParameter+0x34a>
    ebf4:	2b07      	cmp	r3, #7
    ebf6:	d80c      	bhi.n	ec12 <handleParameter+0x34a>
    ebf8:	e8df f003 	tbb	[pc, r3]
    ebfc:	240b2215 	.word	0x240b2215
    ec00:	260b0b0b 	.word	0x260b0b0b
    ec04:	2b80      	cmp	r3, #128	; 0x80
    ec06:	d027      	beq.n	ec58 <handleParameter+0x390>
    ec08:	dc08      	bgt.n	ec1c <handleParameter+0x354>
    ec0a:	2b20      	cmp	r3, #32
    ec0c:	d020      	beq.n	ec50 <handleParameter+0x388>
    ec0e:	2b40      	cmp	r3, #64	; 0x40
    ec10:	d020      	beq.n	ec54 <handleParameter+0x38c>
			default:   *value = -1;  break;
    ec12:	f04f 33ff 	mov.w	r3, #4294967295
    ec16:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
    ec18:	2410      	movs	r4, #16
    ec1a:	e74d      	b.n	eab8 <handleParameter+0x1f0>
    ec1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    ec20:	d1f7      	bne.n	ec12 <handleParameter+0x34a>
			case 256:  *value = 0;   break;
    ec22:	2300      	movs	r3, #0
    ec24:	e000      	b.n	ec28 <handleParameter+0x360>
			case 1:    *value = 8;   break;
    ec26:	2308      	movs	r3, #8
			case 256:  *value = 0;   break;
    ec28:	602b      	str	r3, [r5, #0]
				TMC2660_FIELD_UPDATE(0, TMC2660_DRVCTRL, TMC2660_MRES_MASK, TMC2660_MRES_SHIFT, *value);
    ec2a:	2008      	movs	r0, #8
    ec2c:	f7ff fe37 	bl	e89e <tmc2660_readInt.constprop.0>
    ec30:	6829      	ldr	r1, [r5, #0]
    ec32:	f020 000f 	bic.w	r0, r0, #15
    ec36:	f001 010f 	and.w	r1, r1, #15
    ec3a:	4301      	orrs	r1, r0
    ec3c:	2008      	movs	r0, #8
    ec3e:	e0a1      	b.n	ed84 <handleParameter+0x4bc>
			case 2:    *value = 7;   break;
    ec40:	2307      	movs	r3, #7
    ec42:	e7f1      	b.n	ec28 <handleParameter+0x360>
			case 4:    *value = 6;   break;
    ec44:	2306      	movs	r3, #6
    ec46:	e7ef      	b.n	ec28 <handleParameter+0x360>
			case 8:    *value = 5;   break;
    ec48:	2305      	movs	r3, #5
    ec4a:	e7ed      	b.n	ec28 <handleParameter+0x360>
			case 16:   *value = 4;   break;
    ec4c:	2304      	movs	r3, #4
    ec4e:	e7eb      	b.n	ec28 <handleParameter+0x360>
			case 32:   *value = 3;   break;
    ec50:	2303      	movs	r3, #3
    ec52:	e7e9      	b.n	ec28 <handleParameter+0x360>
			case 64:   *value = 2;   break;
    ec54:	2302      	movs	r3, #2
    ec56:	e7e7      	b.n	ec28 <handleParameter+0x360>
			case 128:  *value = 1;   break;
    ec58:	2301      	movs	r3, #1
    ec5a:	e7e5      	b.n	ec28 <handleParameter+0x360>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCTRL | TMC2660_WRITE_BIT, TMC2660_INTPOL_MASK, TMC2660_INTPOL_SHIFT);
    ec5c:	2008      	movs	r0, #8
		if(readWrite == READ) {
    ec5e:	b924      	cbnz	r4, ec6a <handleParameter+0x3a2>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCTRL | TMC2660_WRITE_BIT, TMC2660_INTPOL_MASK, TMC2660_INTPOL_SHIFT);
    ec60:	f7ff fe1d 	bl	e89e <tmc2660_readInt.constprop.0>
    ec64:	f3c0 2040 	ubfx	r0, r0, #9, #1
    ec68:	e725      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCTRL, TMC2660_INTPOL_MASK, TMC2660_INTPOL_SHIFT, *value);
    ec6a:	f7ff fe18 	bl	e89e <tmc2660_readInt.constprop.0>
    ec6e:	682b      	ldr	r3, [r5, #0]
    ec70:	025b      	lsls	r3, r3, #9
    ec72:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ec76:	f420 7100 	bic.w	r1, r0, #512	; 0x200
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCTRL, TMC2660_DEDGE_MASK, TMC2660_DEDGE_SHIFT, *value);
    ec7a:	4319      	orrs	r1, r3
    ec7c:	e7de      	b.n	ec3c <handleParameter+0x374>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCTRL | TMC2660_WRITE_BIT, TMC2660_DEDGE_MASK, TMC2660_DEDGE_SHIFT);
    ec7e:	2008      	movs	r0, #8
		if(readWrite == READ) {
    ec80:	b924      	cbnz	r4, ec8c <handleParameter+0x3c4>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCTRL | TMC2660_WRITE_BIT, TMC2660_DEDGE_MASK, TMC2660_DEDGE_SHIFT);
    ec82:	f7ff fe0c 	bl	e89e <tmc2660_readInt.constprop.0>
    ec86:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ec8a:	e714      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCTRL, TMC2660_DEDGE_MASK, TMC2660_DEDGE_SHIFT, *value);
    ec8c:	f7ff fe07 	bl	e89e <tmc2660_readInt.constprop.0>
    ec90:	682b      	ldr	r3, [r5, #0]
    ec92:	021b      	lsls	r3, r3, #8
    ec94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ec98:	f420 7180 	bic.w	r1, r0, #256	; 0x100
    ec9c:	e7ed      	b.n	ec7a <handleParameter+0x3b2>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_TBL_MASK, TMC2660_TBL_SHIFT);
    ec9e:	200c      	movs	r0, #12
		if(readWrite == READ) {
    eca0:	b924      	cbnz	r4, ecac <handleParameter+0x3e4>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_TBL_MASK, TMC2660_TBL_SHIFT);
    eca2:	f7ff fdfc 	bl	e89e <tmc2660_readInt.constprop.0>
    eca6:	f3c0 30c1 	ubfx	r0, r0, #15, #2
    ecaa:	e704      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_TBL_MASK, TMC2660_TBL_SHIFT, *value);
    ecac:	f7ff fdf7 	bl	e89e <tmc2660_readInt.constprop.0>
    ecb0:	682b      	ldr	r3, [r5, #0]
    ecb2:	03db      	lsls	r3, r3, #15
    ecb4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
    ecb8:	f420 31c0 	bic.w	r1, r0, #98304	; 0x18000
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_RNDTF_MASK, TMC2660_RNDTF_SHIFT, *value);
    ecbc:	4319      	orrs	r1, r3
    ecbe:	e04e      	b.n	ed5e <handleParameter+0x496>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_CHM_MASK, TMC2660_CHM_SHIFT);
    ecc0:	200c      	movs	r0, #12
		if(readWrite == READ) {
    ecc2:	b924      	cbnz	r4, ecce <handleParameter+0x406>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_CHM_MASK, TMC2660_CHM_SHIFT);
    ecc4:	f7ff fdeb 	bl	e89e <tmc2660_readInt.constprop.0>
    ecc8:	f3c0 3080 	ubfx	r0, r0, #14, #1
    eccc:	e6f3      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_CHM_MASK, TMC2660_CHM_SHIFT, *value);
    ecce:	f7ff fde6 	bl	e89e <tmc2660_readInt.constprop.0>
    ecd2:	682b      	ldr	r3, [r5, #0]
    ecd4:	039b      	lsls	r3, r3, #14
    ecd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    ecda:	f420 4180 	bic.w	r1, r0, #16384	; 0x4000
    ecde:	e7ed      	b.n	ecbc <handleParameter+0x3f4>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HDEC_MASK, TMC2660_HDEC_SHIFT);
    ece0:	200c      	movs	r0, #12
		if(readWrite == READ) {
    ece2:	b924      	cbnz	r4, ecee <handleParameter+0x426>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HDEC_MASK, TMC2660_HDEC_SHIFT);
    ece4:	f7ff fddb 	bl	e89e <tmc2660_readInt.constprop.0>
    ece8:	f3c0 20c1 	ubfx	r0, r0, #11, #2
    ecec:	e6e3      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_HDEC_MASK, TMC2660_HDEC_SHIFT, *value);
    ecee:	f7ff fdd6 	bl	e89e <tmc2660_readInt.constprop.0>
    ecf2:	682b      	ldr	r3, [r5, #0]
    ecf4:	02db      	lsls	r3, r3, #11
    ecf6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    ecfa:	f420 51c0 	bic.w	r1, r0, #6144	; 0x1800
    ecfe:	e7dd      	b.n	ecbc <handleParameter+0x3f4>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HEND_MASK, TMC2660_HEND_SHIFT);
    ed00:	200c      	movs	r0, #12
		if(readWrite == READ) {
    ed02:	b924      	cbnz	r4, ed0e <handleParameter+0x446>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HEND_MASK, TMC2660_HEND_SHIFT);
    ed04:	f7ff fdcb 	bl	e89e <tmc2660_readInt.constprop.0>
    ed08:	f3c0 10c3 	ubfx	r0, r0, #7, #4
    ed0c:	e6d3      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_HEND_MASK, TMC2660_HEND_SHIFT, *value);
    ed0e:	f7ff fdc6 	bl	e89e <tmc2660_readInt.constprop.0>
    ed12:	682b      	ldr	r3, [r5, #0]
    ed14:	01db      	lsls	r3, r3, #7
    ed16:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
    ed1a:	f420 61f0 	bic.w	r1, r0, #1920	; 0x780
    ed1e:	e7cd      	b.n	ecbc <handleParameter+0x3f4>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HSTRT_MASK, TMC2660_HSTRT_SHIFT);
    ed20:	200c      	movs	r0, #12
		if(readWrite == READ) {
    ed22:	b924      	cbnz	r4, ed2e <handleParameter+0x466>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_HSTRT_MASK, TMC2660_HSTRT_SHIFT);
    ed24:	f7ff fdbb 	bl	e89e <tmc2660_readInt.constprop.0>
    ed28:	f3c0 1002 	ubfx	r0, r0, #4, #3
    ed2c:	e6c3      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_HSTRT_MASK, TMC2660_HSTRT_SHIFT, *value);
    ed2e:	f7ff fdb6 	bl	e89e <tmc2660_readInt.constprop.0>
    ed32:	682b      	ldr	r3, [r5, #0]
    ed34:	011b      	lsls	r3, r3, #4
    ed36:	f003 0370 	and.w	r3, r3, #112	; 0x70
    ed3a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
    ed3e:	e7bd      	b.n	ecbc <handleParameter+0x3f4>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF | TMC2660_WRITE_BIT, TMC2660_TOFF_MASK, TMC2660_TOFF_SHIFT);
    ed40:	200c      	movs	r0, #12
		if(readWrite == READ) {
    ed42:	b924      	cbnz	r4, ed4e <handleParameter+0x486>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT);
    ed44:	f7ff fdab 	bl	e89e <tmc2660_readInt.constprop.0>
    ed48:	f000 000f 	and.w	r0, r0, #15
    ed4c:	e6b3      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_TOFF_MASK, TMC2660_TOFF_SHIFT, *value);
    ed4e:	f7ff fda6 	bl	e89e <tmc2660_readInt.constprop.0>
    ed52:	6829      	ldr	r1, [r5, #0]
    ed54:	f020 000f 	bic.w	r0, r0, #15
    ed58:	f001 010f 	and.w	r1, r1, #15
    ed5c:	4301      	orrs	r1, r0
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_RNDTF_MASK, TMC2660_RNDTF_SHIFT, *value);
    ed5e:	200c      	movs	r0, #12
    ed60:	e010      	b.n	ed84 <handleParameter+0x4bc>
		if(readWrite == READ) {
    ed62:	b928      	cbnz	r0, ed70 <handleParameter+0x4a8>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEIMIN_MASK, TMC2660_SEIMIN_SHIFT);
    ed64:	2005      	movs	r0, #5
    ed66:	f7ff fd9a 	bl	e89e <tmc2660_readInt.constprop.0>
    ed6a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    ed6e:	e6a2      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEIMIN_MASK, TMC2660_SEIMIN_SHIFT, *value);
    ed70:	200d      	movs	r0, #13
    ed72:	f7ff fd94 	bl	e89e <tmc2660_readInt.constprop.0>
    ed76:	682b      	ldr	r3, [r5, #0]
    ed78:	03db      	lsls	r3, r3, #15
    ed7a:	b29b      	uxth	r3, r3
    ed7c:	f420 4100 	bic.w	r1, r0, #32768	; 0x8000
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEDN_MASK, TMC2660_SEDN_SHIFT, *value);
    ed80:	4319      	orrs	r1, r3
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT, *value);
    ed82:	200d      	movs	r0, #13
				TMC2660_FIELD_UPDATE(0, TMC2660_DRVCTRL, TMC2660_MRES_MASK, TMC2660_MRES_SHIFT, *value);
    ed84:	f7ff fd58 	bl	e838 <tmc2660_writeInt.constprop.0>
    ed88:	e69c      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    ed8a:	b928      	cbnz	r0, ed98 <handleParameter+0x4d0>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEDN_MASK, TMC2660_SEDN_SHIFT);
    ed8c:	2005      	movs	r0, #5
    ed8e:	f7ff fd86 	bl	e89e <tmc2660_readInt.constprop.0>
    ed92:	f3c0 3041 	ubfx	r0, r0, #13, #2
    ed96:	e68e      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEDN_MASK, TMC2660_SEDN_SHIFT, *value);
    ed98:	200d      	movs	r0, #13
    ed9a:	f7ff fd80 	bl	e89e <tmc2660_readInt.constprop.0>
    ed9e:	682b      	ldr	r3, [r5, #0]
    eda0:	035b      	lsls	r3, r3, #13
    eda2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    eda6:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
    edaa:	e7e9      	b.n	ed80 <handleParameter+0x4b8>
		if(readWrite == READ) {
    edac:	b928      	cbnz	r0, edba <handleParameter+0x4f2>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEMAX_MASK, TMC2660_SEMAX_SHIFT);
    edae:	2005      	movs	r0, #5
    edb0:	f7ff fd75 	bl	e89e <tmc2660_readInt.constprop.0>
    edb4:	f3c0 2003 	ubfx	r0, r0, #8, #4
    edb8:	e67d      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEMAX_MASK, TMC2660_SEMAX_SHIFT, *value);
    edba:	200d      	movs	r0, #13
    edbc:	f7ff fd6f 	bl	e89e <tmc2660_readInt.constprop.0>
    edc0:	682b      	ldr	r3, [r5, #0]
    edc2:	021b      	lsls	r3, r3, #8
    edc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    edc8:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    edcc:	e7d8      	b.n	ed80 <handleParameter+0x4b8>
    edce:	bf00      	nop
    edd0:	1fff2564 	.word	0x1fff2564
    edd4:	1fff5e88 	.word	0x1fff5e88
		if(readWrite == READ) {
    edd8:	b928      	cbnz	r0, ede6 <handleParameter+0x51e>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEUP_MASK, TMC2660_SEUP_SHIFT);
    edda:	2005      	movs	r0, #5
    eddc:	f7ff fd5f 	bl	e89e <tmc2660_readInt.constprop.0>
    ede0:	f3c0 1041 	ubfx	r0, r0, #5, #2
    ede4:	e667      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEUP_MASK, TMC2660_SEUP_SHIFT, *value);
    ede6:	200d      	movs	r0, #13
    ede8:	f7ff fd59 	bl	e89e <tmc2660_readInt.constprop.0>
    edec:	682b      	ldr	r3, [r5, #0]
    edee:	015b      	lsls	r3, r3, #5
    edf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
    edf4:	f020 0160 	bic.w	r1, r0, #96	; 0x60
    edf8:	e7c2      	b.n	ed80 <handleParameter+0x4b8>
		if(readWrite == READ) {
    edfa:	b908      	cbnz	r0, ee00 <handleParameter+0x538>
			*value = TMC2660_FIELD_READ(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT);
    edfc:	2005      	movs	r0, #5
    edfe:	e7a1      	b.n	ed44 <handleParameter+0x47c>
			TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT, *value);
    ee00:	200d      	movs	r0, #13
    ee02:	f7ff fd4c 	bl	e89e <tmc2660_readInt.constprop.0>
    ee06:	6829      	ldr	r1, [r5, #0]
    ee08:	f020 000f 	bic.w	r0, r0, #15
    ee0c:	f001 010f 	and.w	r1, r1, #15
    ee10:	4301      	orrs	r1, r0
    ee12:	e7b6      	b.n	ed82 <handleParameter+0x4ba>
		if(readWrite == READ) {
    ee14:	b928      	cbnz	r0, ee22 <handleParameter+0x55a>
			*value = TMC2660_FIELD_READ(0, TMC2660_SGCSCONF, TMC2660_SFILT_MASK, TMC2660_SFILT_SHIFT);
    ee16:	2006      	movs	r0, #6
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_TST_MASK, TMC2660_TST_SHIFT);
    ee18:	f7ff fd41 	bl	e89e <tmc2660_readInt.constprop.0>
    ee1c:	f3c0 4000 	ubfx	r0, r0, #16, #1
    ee20:	e649      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_SFILT_MASK, TMC2660_SFILT_SHIFT, *value);
    ee22:	200e      	movs	r0, #14
    ee24:	f7ff fd3b 	bl	e89e <tmc2660_readInt.constprop.0>
    ee28:	682b      	ldr	r3, [r5, #0]
    ee2a:	041b      	lsls	r3, r3, #16
    ee2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ee30:	f420 3180 	bic.w	r1, r0, #65536	; 0x10000
			TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_SGT_MASK, TMC2660_SGT_SHIFT, *value);
    ee34:	4319      	orrs	r1, r3
    ee36:	e69b      	b.n	eb70 <handleParameter+0x2a8>
		if(readWrite == READ) {
    ee38:	b960      	cbnz	r0, ee54 <handleParameter+0x58c>
			*value = TMC2660_FIELD_READ(0, TMC2660_SGCSCONF, TMC2660_SGT_MASK, TMC2660_SGT_SHIFT);
    ee3a:	2006      	movs	r0, #6
    ee3c:	f7ff fd2f 	bl	e89e <tmc2660_readInt.constprop.0>
    ee40:	0a03      	lsrs	r3, r0, #8
			*value = CAST_Sn_TO_S32(*value, 7);
    ee42:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC2660_FIELD_READ(0, TMC2660_SGCSCONF, TMC2660_SGT_MASK, TMC2660_SGT_SHIFT);
    ee46:	f3c0 2006 	ubfx	r0, r0, #8, #7
			*value = CAST_Sn_TO_S32(*value, 7);
    ee4a:	bf18      	it	ne
    ee4c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    ee50:	4318      	orrs	r0, r3
    ee52:	e630      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_SGT_MASK, TMC2660_SGT_SHIFT, *value);
    ee54:	200e      	movs	r0, #14
    ee56:	f7ff fd22 	bl	e89e <tmc2660_readInt.constprop.0>
    ee5a:	682b      	ldr	r3, [r5, #0]
    ee5c:	021b      	lsls	r3, r3, #8
    ee5e:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
    ee62:	f420 41fe 	bic.w	r1, r0, #32512	; 0x7f00
    ee66:	e7e5      	b.n	ee34 <handleParameter+0x56c>
		if(readWrite == READ) {
    ee68:	b928      	cbnz	r0, ee76 <handleParameter+0x5ae>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_SLPH_MASK, TMC2660_SLPH_SHIFT);
    ee6a:	2007      	movs	r0, #7
    ee6c:	f7ff fd17 	bl	e89e <tmc2660_readInt.constprop.0>
    ee70:	f3c0 3081 	ubfx	r0, r0, #14, #2
    ee74:	e61f      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_SLPH_MASK, TMC2660_SLPH_SHIFT, *value);
    ee76:	200f      	movs	r0, #15
    ee78:	f7ff fd11 	bl	e89e <tmc2660_readInt.constprop.0>
    ee7c:	682b      	ldr	r3, [r5, #0]
    ee7e:	039b      	lsls	r3, r3, #14
    ee80:	b29b      	uxth	r3, r3
    ee82:	f420 4140 	bic.w	r1, r0, #49152	; 0xc000
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_TST_MASK, TMC2660_TST_SHIFT, *value);
    ee86:	4319      	orrs	r1, r3
    ee88:	200f      	movs	r0, #15
    ee8a:	e77b      	b.n	ed84 <handleParameter+0x4bc>
		if(readWrite == READ) {
    ee8c:	b928      	cbnz	r0, ee9a <handleParameter+0x5d2>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_SLPL_MASK, TMC2660_SLPL_SHIFT);
    ee8e:	2007      	movs	r0, #7
    ee90:	f7ff fd05 	bl	e89e <tmc2660_readInt.constprop.0>
    ee94:	f3c0 3001 	ubfx	r0, r0, #12, #2
    ee98:	e60d      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_SLPL_MASK, TMC2660_SLPL_SHIFT, *value);
    ee9a:	200f      	movs	r0, #15
    ee9c:	f7ff fcff 	bl	e89e <tmc2660_readInt.constprop.0>
    eea0:	682b      	ldr	r3, [r5, #0]
    eea2:	031b      	lsls	r3, r3, #12
    eea4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    eea8:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000
    eeac:	e7eb      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    eeae:	b928      	cbnz	r0, eebc <handleParameter+0x5f4>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_DISS2G_MASK, TMC2660_DISS2G_SHIFT);
    eeb0:	2007      	movs	r0, #7
    eeb2:	f7ff fcf4 	bl	e89e <tmc2660_readInt.constprop.0>
    eeb6:	f3c0 2080 	ubfx	r0, r0, #10, #1
    eeba:	e5fc      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_DISS2G_MASK, TMC2660_DISS2G_SHIFT, *value);
    eebc:	200f      	movs	r0, #15
    eebe:	f7ff fcee 	bl	e89e <tmc2660_readInt.constprop.0>
    eec2:	682b      	ldr	r3, [r5, #0]
    eec4:	029b      	lsls	r3, r3, #10
    eec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    eeca:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
    eece:	e7da      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    eed0:	b928      	cbnz	r0, eede <handleParameter+0x616>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_TS2G_MASK, TMC2660_TS2G_SHIFT);
    eed2:	2007      	movs	r0, #7
    eed4:	f7ff fce3 	bl	e89e <tmc2660_readInt.constprop.0>
    eed8:	f3c0 2001 	ubfx	r0, r0, #8, #2
    eedc:	e5eb      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_TS2G_MASK, TMC2660_TS2G_SHIFT, *value);
    eede:	200f      	movs	r0, #15
    eee0:	f7ff fcdd 	bl	e89e <tmc2660_readInt.constprop.0>
    eee4:	682b      	ldr	r3, [r5, #0]
    eee6:	021b      	lsls	r3, r3, #8
    eee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    eeec:	f420 7140 	bic.w	r1, r0, #768	; 0x300
    eef0:	e7c9      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    eef2:	b928      	cbnz	r0, ef00 <handleParameter+0x638>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_VSENSE_MASK, TMC2660_VSENSE_SHIFT);
    eef4:	2007      	movs	r0, #7
    eef6:	f7ff fcd2 	bl	e89e <tmc2660_readInt.constprop.0>
    eefa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    eefe:	e5da      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_VSENSE_MASK, TMC2660_VSENSE_SHIFT, *value);
    ef00:	200f      	movs	r0, #15
    ef02:	f7ff fccc 	bl	e89e <tmc2660_readInt.constprop.0>
    ef06:	682b      	ldr	r3, [r5, #0]
    ef08:	019b      	lsls	r3, r3, #6
    ef0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ef0e:	f020 0140 	bic.w	r1, r0, #64	; 0x40
    ef12:	e7b8      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    ef14:	2800      	cmp	r0, #0
    ef16:	f47f aceb 	bne.w	e8f0 <handleParameter+0x28>
			*value = TMC2660_FIELD_READ(0, TMC2660_RESPONSE2, TMC2660_SE_MASK, TMC2660_SE_SHIFT);
    ef1a:	2002      	movs	r0, #2
    ef1c:	f7ff fcbf 	bl	e89e <tmc2660_readInt.constprop.0>
    ef20:	f3c0 2084 	ubfx	r0, r0, #10, #5
    ef24:	e5c7      	b.n	eab6 <handleParameter+0x1ee>
		if(readWrite == READ) {
    ef26:	b910      	cbnz	r0, ef2e <handleParameter+0x666>
			*value = StepDir_getStallGuardThreshold(motor);
    ef28:	f010 fe06 	bl	1fb38 <StepDir_getStallGuardThreshold>
    ef2c:	e5c3      	b.n	eab6 <handleParameter+0x1ee>
			StepDir_setStallGuardThreshold(motor, *value);
    ef2e:	6829      	ldr	r1, [r5, #0]
    ef30:	2000      	movs	r0, #0
    ef32:	f010 fd6b 	bl	1fa0c <StepDir_setStallGuardThreshold>
    ef36:	e5c5      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    ef38:	4b2c      	ldr	r3, [pc, #176]	; (efec <handleParameter+0x724>)
    ef3a:	b908      	cbnz	r0, ef40 <handleParameter+0x678>
			*value = TMC2660.coolStepThreshold;
    ef3c:	691b      	ldr	r3, [r3, #16]
    ef3e:	e5f3      	b.n	eb28 <handleParameter+0x260>
			TMC2660.coolStepThreshold = *value;
    ef40:	682a      	ldr	r2, [r5, #0]
    ef42:	611a      	str	r2, [r3, #16]
    ef44:	e5be      	b.n	eac4 <handleParameter+0x1fc>
		if(readWrite == READ) {
    ef46:	b928      	cbnz	r0, ef54 <handleParameter+0x68c>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_SDOFF_MASK, TMC2660_SDOFF_SHIFT);
    ef48:	2007      	movs	r0, #7
    ef4a:	f7ff fca8 	bl	e89e <tmc2660_readInt.constprop.0>
    ef4e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    ef52:	e5b0      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_SDOFF_MASK, TMC2660_SDOFF_SHIFT, *value);
    ef54:	200f      	movs	r0, #15
    ef56:	f7ff fca2 	bl	e89e <tmc2660_readInt.constprop.0>
    ef5a:	682b      	ldr	r3, [r5, #0]
    ef5c:	01db      	lsls	r3, r3, #7
    ef5e:	b2db      	uxtb	r3, r3
    ef60:	f020 0180 	bic.w	r1, r0, #128	; 0x80
    ef64:	e78f      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    ef66:	b928      	cbnz	r0, ef74 <handleParameter+0x6ac>
			*value = TMC2660_FIELD_READ(0, TMC2660_CHOPCONF, TMC2660_RNDTF_MASK, TMC2660_RNDTF_SHIFT);
    ef68:	2004      	movs	r0, #4
    ef6a:	f7ff fc98 	bl	e89e <tmc2660_readInt.constprop.0>
    ef6e:	f3c0 3040 	ubfx	r0, r0, #13, #1
    ef72:	e5a0      	b.n	eab6 <handleParameter+0x1ee>
			TMC2660_FIELD_UPDATE(0, TMC2660_CHOPCONF, TMC2660_RNDTF_MASK, TMC2660_RNDTF_SHIFT, *value);
    ef74:	200c      	movs	r0, #12
    ef76:	f7ff fc92 	bl	e89e <tmc2660_readInt.constprop.0>
    ef7a:	682b      	ldr	r3, [r5, #0]
    ef7c:	035b      	lsls	r3, r3, #13
    ef7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    ef82:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
    ef86:	e699      	b.n	ecbc <handleParameter+0x3f4>
		if(readWrite == READ) {
    ef88:	b908      	cbnz	r0, ef8e <handleParameter+0x6c6>
			*value = TMC2660_FIELD_READ(0, TMC2660_DRVCONF, TMC2660_TST_MASK, TMC2660_TST_SHIFT);
    ef8a:	2007      	movs	r0, #7
    ef8c:	e744      	b.n	ee18 <handleParameter+0x550>
			TMC2660_FIELD_UPDATE(0, TMC2660_DRVCONF, TMC2660_TST_MASK, TMC2660_TST_SHIFT, *value);
    ef8e:	200f      	movs	r0, #15
    ef90:	f7ff fc85 	bl	e89e <tmc2660_readInt.constprop.0>
    ef94:	682b      	ldr	r3, [r5, #0]
    ef96:	041b      	lsls	r3, r3, #16
    ef98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    ef9c:	f420 3180 	bic.w	r1, r0, #65536	; 0x10000
    efa0:	e771      	b.n	ee86 <handleParameter+0x5be>
		if(readWrite == READ) {
    efa2:	2800      	cmp	r0, #0
    efa4:	f47f aca4 	bne.w	e8f0 <handleParameter+0x28>
			*value = (compatibilityMode) ?
    efa8:	4b11      	ldr	r3, [pc, #68]	; (eff0 <handleParameter+0x728>)
					TMC2660_FIELD_READ(0, TMC2660_RESPONSE2, TMC2660_SGU_MASK, TMC2660_SGU_SHIFT)<<5 :
    efaa:	681b      	ldr	r3, [r3, #0]
    efac:	b13b      	cbz	r3, efbe <handleParameter+0x6f6>
    efae:	2002      	movs	r0, #2
    efb0:	f7ff fc75 	bl	e89e <tmc2660_readInt.constprop.0>
    efb4:	0a80      	lsrs	r0, r0, #10
    efb6:	f400 7078 	and.w	r0, r0, #992	; 0x3e0
			*value = (compatibilityMode) ?
    efba:	6028      	str	r0, [r5, #0]
    efbc:	e582      	b.n	eac4 <handleParameter+0x1fc>
					TMC2660_FIELD_READ(0, TMC2660_RESPONSE1, TMC2660_SG2_MASK, TMC2660_SG2_SHIFT);
    efbe:	2001      	movs	r0, #1
    efc0:	f7ff fc6d 	bl	e89e <tmc2660_readInt.constprop.0>
					TMC2660_FIELD_READ(0, TMC2660_RESPONSE2, TMC2660_SGU_MASK, TMC2660_SGU_SHIFT)<<5 :
    efc4:	f3c0 2089 	ubfx	r0, r0, #10, #10
    efc8:	e7f7      	b.n	efba <handleParameter+0x6f2>
		if(readWrite == READ) {
    efca:	2800      	cmp	r0, #0
    efcc:	f47f ac90 	bne.w	e8f0 <handleParameter+0x28>
			*value = TMC2660_FIELD_READ(0, TMC2660_RESPONSE_LATEST, TMC2660_STATUS_MASK, TMC2660_STATUS_SHIFT);
    efd0:	2003      	movs	r0, #3
    efd2:	f7ff fc64 	bl	e89e <tmc2660_readInt.constprop.0>
    efd6:	b2c0      	uxtb	r0, r0
    efd8:	e56d      	b.n	eab6 <handleParameter+0x1ee>
		if(readWrite == READ) {
    efda:	4b04      	ldr	r3, [pc, #16]	; (efec <handleParameter+0x724>)
    efdc:	b908      	cbnz	r0, efe2 <handleParameter+0x71a>
			*value = TMC2660.standStillTimeout;
    efde:	685b      	ldr	r3, [r3, #4]
    efe0:	e5a2      	b.n	eb28 <handleParameter+0x260>
			TMC2660.standStillTimeout = *value;
    efe2:	682a      	ldr	r2, [r5, #0]
    efe4:	605a      	str	r2, [r3, #4]
    efe6:	e56d      	b.n	eac4 <handleParameter+0x1fc>
		return TMC_ERROR_MOTOR;
    efe8:	2408      	movs	r4, #8
    efea:	e565      	b.n	eab8 <handleParameter+0x1f0>
    efec:	1fff2564 	.word	0x1fff2564
    eff0:	1fff0070 	.word	0x1fff0070

0000eff4 <SAP>:
{
    eff4:	b507      	push	{r0, r1, r2, lr}
    eff6:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    eff8:	ab01      	add	r3, sp, #4
    effa:	4602      	mov	r2, r0
    effc:	2001      	movs	r0, #1
    effe:	f7ff fc63 	bl	e8c8 <handleParameter>
}
    f002:	b003      	add	sp, #12
    f004:	f85d fb04 	ldr.w	pc, [sp], #4

0000f008 <GAP>:
{
    f008:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    f00a:	4602      	mov	r2, r0
    f00c:	2000      	movs	r0, #0
    f00e:	e45b      	b.n	e8c8 <handleParameter>

0000f010 <readRegister>:
{
    f010:	b510      	push	{r4, lr}
	*value = tmc2660_readInt(0, address);
    f012:	4608      	mov	r0, r1
{
    f014:	4614      	mov	r4, r2
	*value = tmc2660_readInt(0, address);
    f016:	f7ff fc42 	bl	e89e <tmc2660_readInt.constprop.0>
    f01a:	6020      	str	r0, [r4, #0]
}
    f01c:	bd10      	pop	{r4, pc}

0000f01e <periodicJob>:
{
    f01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(Evalboards.ch1.fullCover == NULL) { // Standstill detection only when not using an additional motion controller
    f020:	4d36      	ldr	r5, [pc, #216]	; (f0fc <periodicJob+0xde>)
    f022:	4c37      	ldr	r4, [pc, #220]	; (f100 <periodicJob+0xe2>)
{
    f024:	4607      	mov	r7, r0
	if(Evalboards.ch1.fullCover == NULL) { // Standstill detection only when not using an additional motion controller
    f026:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f028:	b9e8      	cbnz	r0, f066 <periodicJob+0x48>
		if((stst = TMC2660_FIELD_READ(0, TMC2660_DRVCTRL, TMC2660_STST_MASK, TMC2660_STST_SHIFT)) != lastStandstillState) {
    f02a:	f7ff fc38 	bl	e89e <tmc2660_readInt.constprop.0>
    f02e:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    f032:	f3c0 16c0 	ubfx	r6, r0, #7, #1
    f036:	42b3      	cmp	r3, r6
    f038:	d015      	beq.n	f066 <periodicJob+0x48>
		TMC2660.runCurrentScale = TMC2660_FIELD_READ(0, 0x0E, TMC2660_CS_MASK, TMC2660_CS_SHIFT);
    f03a:	200e      	movs	r0, #14
	if(newStandstill == true) {
    f03c:	2e00      	cmp	r6, #0
    f03e:	d04c      	beq.n	f0da <periodicJob+0xbc>
		TMC2660.runCurrentScale = TMC2660_FIELD_READ(0, 0x0E, TMC2660_CS_MASK, TMC2660_CS_SHIFT);
    f040:	f7ff fc2d 	bl	e89e <tmc2660_readInt.constprop.0>
    f044:	f000 001f 	and.w	r0, r0, #31
    f048:	72e0      	strb	r0, [r4, #11]
		TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.standStillCurrentScale);
    f04a:	200e      	movs	r0, #14
    f04c:	f7ff fc27 	bl	e89e <tmc2660_readInt.constprop.0>
    f050:	7821      	ldrb	r1, [r4, #0]
		TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.runCurrentScale);
    f052:	f020 001f 	bic.w	r0, r0, #31
    f056:	f001 011f 	and.w	r1, r1, #31
    f05a:	4301      	orrs	r1, r0
    f05c:	200e      	movs	r0, #14
    f05e:	f7ff fbeb 	bl	e838 <tmc2660_writeInt.constprop.0>
			lastStandstillState = stst;
    f062:	f884 6069 	strb.w	r6, [r4, #105]	; 0x69
	Evalboards.ch2.errors = (TMC2660.isStandStillOverCurrent) 	? (Evalboards.ch2.errors | ERRORS_I_STS) 			: (Evalboards.ch2.errors & ~ERRORS_I_STS);
    f066:	7a22      	ldrb	r2, [r4, #8]
    f068:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    f06c:	2a00      	cmp	r2, #0
    f06e:	d03e      	beq.n	f0ee <periodicJob+0xd0>
    f070:	f043 0301 	orr.w	r3, r3, #1
	Evalboards.ch2.errors = (TMC2660.isStandStillCurrentLimit) 	? (Evalboards.ch2.errors | ERRORS_I_TIMEOUT_STS) 	: (Evalboards.ch2.errors & ~ERRORS_I_TIMEOUT_STS);
    f074:	7a62      	ldrb	r2, [r4, #9]
    f076:	2a00      	cmp	r2, #0
    f078:	d03c      	beq.n	f0f4 <periodicJob+0xd6>
    f07a:	f043 0302 	orr.w	r3, r3, #2
	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2660.coolStepThreshold);
    f07e:	2000      	movs	r0, #0
	Evalboards.ch2.errors = (TMC2660.isStandStillCurrentLimit) 	? (Evalboards.ch2.errors | ERRORS_I_TIMEOUT_STS) 	: (Evalboards.ch2.errors & ~ERRORS_I_TIMEOUT_STS);
    f080:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2660.coolStepThreshold);
    f084:	f010 fd18 	bl	1fab8 <StepDir_getActualVelocity>
    f088:	6923      	ldr	r3, [r4, #16]
	if(currCoolStepState != lastCoolStepState)
    f08a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	uint8_t currCoolStepState = (abs(StepDir_getActualVelocity(DEFAULT_MOTOR)) >= TMC2660.coolStepThreshold);
    f08e:	2800      	cmp	r0, #0
    f090:	bfb8      	it	lt
    f092:	4240      	neglt	r0, r0
    f094:	4298      	cmp	r0, r3
    f096:	bf34      	ite	cc
    f098:	2600      	movcc	r6, #0
    f09a:	2601      	movcs	r6, #1
	if(currCoolStepState != lastCoolStepState)
    f09c:	42b2      	cmp	r2, r6
    f09e:	d011      	beq.n	f0c4 <periodicJob+0xa6>
		uint8_t value = (currCoolStepState)? TMC2660.coolStepActiveValue : TMC2660.coolStepInactiveValue;
    f0a0:	4298      	cmp	r0, r3
		TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT, value);
    f0a2:	f04f 000d 	mov.w	r0, #13
		uint8_t value = (currCoolStepState)? TMC2660.coolStepActiveValue : TMC2660.coolStepInactiveValue;
    f0a6:	bf2c      	ite	cs
    f0a8:	7b65      	ldrbcs	r5, [r4, #13]
    f0aa:	7b25      	ldrbcc	r5, [r4, #12]
		TMC2660_FIELD_UPDATE(0, TMC2660_SMARTEN, TMC2660_SEMIN_MASK, TMC2660_SEMIN_SHIFT, value);
    f0ac:	f7ff fbf7 	bl	e89e <tmc2660_readInt.constprop.0>
    f0b0:	f005 050f 	and.w	r5, r5, #15
    f0b4:	f020 010f 	bic.w	r1, r0, #15
    f0b8:	4329      	orrs	r1, r5
    f0ba:	200d      	movs	r0, #13
    f0bc:	f7ff fbbc 	bl	e838 <tmc2660_writeInt.constprop.0>
		lastCoolStepState = currCoolStepState;
    f0c0:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
	tmc2660_periodicJob(DEFAULT_MOTOR, tick, &TMC2660, TMC2660_config);
    f0c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f0c6:	4a0e      	ldr	r2, [pc, #56]	; (f100 <periodicJob+0xe2>)
    f0c8:	4639      	mov	r1, r7
    f0ca:	2000      	movs	r0, #0
    f0cc:	f012 f99b 	bl	21406 <tmc2660_periodicJob>
}
    f0d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	StepDir_periodicJob(DEFAULT_MOTOR);
    f0d4:	2000      	movs	r0, #0
    f0d6:	f010 bb65 	b.w	1f7a4 <StepDir_periodicJob>
		TMC2660.standStillCurrentScale = TMC2660_FIELD_READ(0, 0x0E, TMC2660_CS_MASK, TMC2660_CS_SHIFT);
    f0da:	f7ff fbe0 	bl	e89e <tmc2660_readInt.constprop.0>
    f0de:	f000 001f 	and.w	r0, r0, #31
    f0e2:	7020      	strb	r0, [r4, #0]
		TMC2660_FIELD_UPDATE(0, TMC2660_SGCSCONF, TMC2660_CS_MASK, TMC2660_CS_SHIFT, TMC2660.runCurrentScale);
    f0e4:	200e      	movs	r0, #14
    f0e6:	f7ff fbda 	bl	e89e <tmc2660_readInt.constprop.0>
    f0ea:	7ae1      	ldrb	r1, [r4, #11]
    f0ec:	e7b1      	b.n	f052 <periodicJob+0x34>
	Evalboards.ch2.errors = (TMC2660.isStandStillOverCurrent) 	? (Evalboards.ch2.errors | ERRORS_I_STS) 			: (Evalboards.ch2.errors & ~ERRORS_I_STS);
    f0ee:	f023 0301 	bic.w	r3, r3, #1
    f0f2:	e7bf      	b.n	f074 <periodicJob+0x56>
	Evalboards.ch2.errors = (TMC2660.isStandStillCurrentLimit) 	? (Evalboards.ch2.errors | ERRORS_I_TIMEOUT_STS) 	: (Evalboards.ch2.errors & ~ERRORS_I_TIMEOUT_STS);
    f0f4:	f023 0302 	bic.w	r3, r3, #2
    f0f8:	e7c1      	b.n	f07e <periodicJob+0x60>
    f0fa:	bf00      	nop
    f0fc:	1fff5e88 	.word	0x1fff5e88
    f100:	1fff2564 	.word	0x1fff2564

0000f104 <tmc2660_writeInt>:
{
    f104:	b410      	push	{r4}
	TMC2660_config->shadowRegister[0x7F & (address | TMC2660_WRITE_BIT)] = value;
    f106:	4c0a      	ldr	r4, [pc, #40]	; (f130 <tmc2660_writeInt+0x2c>)
    f108:	f001 0077 	and.w	r0, r1, #119	; 0x77
    f10c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f10e:	f040 0008 	orr.w	r0, r0, #8
    f112:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	value &= 0x0FFFFF;
    f116:	f3c2 0213 	ubfx	r2, r2, #0, #20
	TMC2660_config->shadowRegister[0x7F & (address | TMC2660_WRITE_BIT)] = value;
    f11a:	605a      	str	r2, [r3, #4]
	if(!TMC2660.continuousModeEnable)
    f11c:	7aa3      	ldrb	r3, [r4, #10]
    f11e:	b923      	cbnz	r3, f12a <tmc2660_writeInt+0x26>
}
    f120:	bc10      	pop	{r4}
		readWrite(TMC2660_DATAGRAM(address, value));
    f122:	ea42 4041 	orr.w	r0, r2, r1, lsl #17
    f126:	f7ff bb45 	b.w	e7b4 <readWrite>
}
    f12a:	bc10      	pop	{r4}
    f12c:	4770      	bx	lr
    f12e:	bf00      	nop
    f130:	1fff2564 	.word	0x1fff2564

0000f134 <tmc2660_readInt>:
{
    f134:	b538      	push	{r3, r4, r5, lr}
	if(!TMC2660.continuousModeEnable && !(address & TMC2660_WRITE_BIT))
    f136:	4d09      	ldr	r5, [pc, #36]	; (f15c <tmc2660_readInt+0x28>)
    f138:	f001 0208 	and.w	r2, r1, #8
{
    f13c:	460c      	mov	r4, r1
	if(!TMC2660.continuousModeEnable && !(address & TMC2660_WRITE_BIT))
    f13e:	7aa9      	ldrb	r1, [r5, #10]
    f140:	ea51 0302 	orrs.w	r3, r1, r2
    f144:	d102      	bne.n	f14c <tmc2660_readInt+0x18>
		readImmediately(address);
    f146:	4620      	mov	r0, r4
    f148:	f7ff fb91 	bl	e86e <readImmediately>
	return TMC2660_config->shadowRegister[0x7F & address];
    f14c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    f14e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    f152:	eb01 0484 	add.w	r4, r1, r4, lsl #2
}
    f156:	6860      	ldr	r0, [r4, #4]
    f158:	bd38      	pop	{r3, r4, r5, pc}
    f15a:	bf00      	nop
    f15c:	1fff2564 	.word	0x1fff2564

0000f160 <tmc2660_readWrite>:
{
    f160:	b538      	push	{r3, r4, r5, lr}
	TMC2660_config->shadowRegister[rdsel] = TMC2660_SPIChannel->readWrite(value>>16, 0);
    f162:	4c1f      	ldr	r4, [pc, #124]	; (f1e0 <tmc2660_readWrite+0x80>)
    f164:	6e63      	ldr	r3, [r4, #100]	; 0x64
{
    f166:	460d      	mov	r5, r1
	TMC2660_config->shadowRegister[rdsel] = TMC2660_SPIChannel->readWrite(value>>16, 0);
    f168:	689b      	ldr	r3, [r3, #8]
    f16a:	2100      	movs	r1, #0
    f16c:	f3c5 4007 	ubfx	r0, r5, #16, #8
    f170:	4798      	blx	r3
    f172:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	TMC2660_config->shadowRegister[rdsel] <<= 8;
    f176:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f178:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f17c:	0200      	lsls	r0, r0, #8
    f17e:	6058      	str	r0, [r3, #4]
	TMC2660_config->shadowRegister[rdsel] |= TMC2660_SPIChannel->readWrite(value>>8, 0);
    f180:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f182:	2100      	movs	r1, #0
    f184:	689b      	ldr	r3, [r3, #8]
    f186:	f3c5 2007 	ubfx	r0, r5, #8, #8
    f18a:	4798      	blx	r3
    f18c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    f190:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f192:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	TMC2660_config->shadowRegister[rdsel] |= TMC2660_SPIChannel->readWrite(value & 0xFF, 1);
    f196:	2101      	movs	r1, #1
	TMC2660_config->shadowRegister[rdsel] |= TMC2660_SPIChannel->readWrite(value>>8, 0);
    f198:	685a      	ldr	r2, [r3, #4]
    f19a:	4310      	orrs	r0, r2
	TMC2660_config->shadowRegister[rdsel] <<= 8;
    f19c:	0200      	lsls	r0, r0, #8
    f19e:	6058      	str	r0, [r3, #4]
	TMC2660_config->shadowRegister[rdsel] |= TMC2660_SPIChannel->readWrite(value & 0xFF, 1);
    f1a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f1a2:	b2e8      	uxtb	r0, r5
    f1a4:	689b      	ldr	r3, [r3, #8]
    f1a6:	4798      	blx	r3
    f1a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    f1aa:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    f1ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f1b2:	6859      	ldr	r1, [r3, #4]
    f1b4:	4308      	orrs	r0, r1
	TMC2660_config->shadowRegister[rdsel] >>= 4;
    f1b6:	1100      	asrs	r0, r0, #4
    f1b8:	6058      	str	r0, [r3, #4]
	if(TMC2660_GET_ADDRESS(value) == TMC2660_DRVCONF)
    f1ba:	0cab      	lsrs	r3, r5, #18
	TMC2660_config->shadowRegister[TMC2660_RESPONSE_LATEST] = TMC2660_config->shadowRegister[rdsel]; // copy value to latest field
    f1bc:	6110      	str	r0, [r2, #16]
	if(TMC2660_GET_ADDRESS(value) == TMC2660_DRVCONF)
    f1be:	d00a      	beq.n	f1d6 <tmc2660_readWrite+0x76>
    f1c0:	f3c5 4342 	ubfx	r3, r5, #17, #3
    f1c4:	2b07      	cmp	r3, #7
    f1c6:	d103      	bne.n	f1d0 <tmc2660_readWrite+0x70>
		rdsel = TMC2660_GET_RDSEL(value);
    f1c8:	f3c5 1101 	ubfx	r1, r5, #4, #2
    f1cc:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
	TMC2660_config->shadowRegister[TMC2660_GET_ADDRESS(value) | TMC2660_WRITE_BIT ] = value;
    f1d0:	f043 0308 	orr.w	r3, r3, #8
    f1d4:	e000      	b.n	f1d8 <tmc2660_readWrite+0x78>
    f1d6:	2308      	movs	r3, #8
    f1d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f1dc:	605d      	str	r5, [r3, #4]
}
    f1de:	bd38      	pop	{r3, r4, r5, pc}
    f1e0:	1fff2564 	.word	0x1fff2564

0000f1e4 <TMC2660_init>:

void TMC2660_init(void)
{
    f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	compatibilityMode = 1;

	tmc2660_initConfig(&TMC2660);
    f1e6:	4c43      	ldr	r4, [pc, #268]	; (f2f4 <TMC2660_init+0x110>)
	compatibilityMode = 1;
    f1e8:	4b43      	ldr	r3, [pc, #268]	; (f2f8 <TMC2660_init+0x114>)

	Pins.ENN     = &HAL.IOs->pins->DIO0;
    f1ea:	4f44      	ldr	r7, [pc, #272]	; (f2fc <TMC2660_init+0x118>)
	compatibilityMode = 1;
    f1ec:	2601      	movs	r6, #1
	tmc2660_initConfig(&TMC2660);
    f1ee:	4620      	mov	r0, r4
	compatibilityMode = 1;
    f1f0:	601e      	str	r6, [r3, #0]
	tmc2660_initConfig(&TMC2660);
    f1f2:	f012 f8e5 	bl	213c0 <tmc2660_initConfig>
	Pins.ENN     = &HAL.IOs->pins->DIO0;
    f1f6:	68fd      	ldr	r5, [r7, #12]
    f1f8:	686b      	ldr	r3, [r5, #4]
    f1fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
    f1fe:	65a2      	str	r2, [r4, #88]	; 0x58
	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
    f200:	f103 0288 	add.w	r2, r3, #136	; 0x88
	Pins.STEP    = &HAL.IOs->pins->DIO6;
    f204:	f503 7094 	add.w	r0, r3, #296	; 0x128
	Pins.SG_TST  = &HAL.IOs->pins->DIO1;
    f208:	65e2      	str	r2, [r4, #92]	; 0x5c
	Pins.DIR     = &HAL.IOs->pins->DIO7;
    f20a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
	Pins.CSN     = &HAL.IOs->pins->SPI2_CSN0;
    f20e:	f503 7302 	add.w	r3, r3, #520	; 0x208
    f212:	64e3      	str	r3, [r4, #76]	; 0x4c

	HAL.IOs->config->toOutput(Pins.STEP);
    f214:	682b      	ldr	r3, [r5, #0]
	Pins.DIR     = &HAL.IOs->pins->DIO7;
    f216:	6562      	str	r2, [r4, #84]	; 0x54
	HAL.IOs->config->toOutput(Pins.STEP);
    f218:	68db      	ldr	r3, [r3, #12]
	Pins.STEP    = &HAL.IOs->pins->DIO6;
    f21a:	6520      	str	r0, [r4, #80]	; 0x50
	HAL.IOs->config->toOutput(Pins.STEP);
    f21c:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DIR);
    f21e:	682b      	ldr	r3, [r5, #0]
    f220:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f222:	68db      	ldr	r3, [r3, #12]
    f224:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.ENN);
    f226:	682b      	ldr	r3, [r5, #0]
    f228:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f22a:	68db      	ldr	r3, [r3, #12]
    f22c:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SG_TST);
    f22e:	682b      	ldr	r3, [r5, #0]
    f230:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    f232:	691b      	ldr	r3, [r3, #16]
    f234:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.CSN);
    f236:	682b      	ldr	r3, [r5, #0]
    f238:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    f23a:	68db      	ldr	r3, [r3, #12]
    f23c:	4798      	blx	r3
#if defined(Startrampe)
	Pins.TEMP_BRIDGE	= &HAL.IOs->pins->AIN0;
	HAL.IOs->config->reset(Pins.TEMP_BRIDGE);
#endif

	TMC2660_SPIChannel = &HAL.SPI->ch2;
    f23e:	693b      	ldr	r3, [r7, #16]
    f240:	f103 0214 	add.w	r2, r3, #20
    f244:	6662      	str	r2, [r4, #100]	; 0x64
	TMC2660_SPIChannel->CSN = Pins.CSN;
    f246:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    f248:	619a      	str	r2, [r3, #24]

	TMC2660.standStillCurrentScale  = I_STAND_STILL;
    f24a:	2305      	movs	r3, #5
    f24c:	7023      	strb	r3, [r4, #0]
	TMC2660.standStillTimeout       = T_STAND_STILL;

	StepDir_init(STEPDIR_PRECISION);
    f24e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	TMC2660.standStillTimeout       = T_STAND_STILL;
    f252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f256:	6063      	str	r3, [r4, #4]
	StepDir_init(STEPDIR_PRECISION);
    f258:	f010 fcbc 	bl	1fbd4 <StepDir_init>
	StepDir_setPins(0, Pins.STEP, Pins.DIR, Pins.SG_TST);
    f25c:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	; 0x50
    f260:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f262:	2000      	movs	r0, #0
    f264:	f010 fb0c 	bl	1f880 <StepDir_setPins>

	TMC2660_config = Evalboards.ch2.config;
    f268:	4b25      	ldr	r3, [pc, #148]	; (f300 <TMC2660_init+0x11c>)

	Evalboards.ch2.config->restore      = restore;
    f26a:	4926      	ldr	r1, [pc, #152]	; (f304 <TMC2660_init+0x120>)
	TMC2660_config = Evalboards.ch2.config;
    f26c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    f270:	64a2      	str	r2, [r4, #72]	; 0x48
	Evalboards.ch2.config->restore      = restore;
    f272:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->reset        = reset;
    f276:	4924      	ldr	r1, [pc, #144]	; (f308 <TMC2660_init+0x124>)
    f278:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->state        = CONFIG_READY; // Not used, leave this as CONFIG_READY to indicate chip not being busy
    f27c:	2100      	movs	r1, #0
    f27e:	8011      	strh	r1, [r2, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
    f280:	4a22      	ldr	r2, [pc, #136]	; (f30c <TMC2660_init+0x128>)
    f282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
    f286:	4a22      	ldr	r2, [pc, #136]	; (f310 <TMC2660_init+0x12c>)
    f288:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
    f28c:	4a21      	ldr	r2, [pc, #132]	; (f314 <TMC2660_init+0x130>)
    f28e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
    f292:	4a21      	ldr	r2, [pc, #132]	; (f318 <TMC2660_init+0x134>)
    f294:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
    f298:	4a20      	ldr	r2, [pc, #128]	; (f31c <TMC2660_init+0x138>)
    f29a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
    f29e:	4a20      	ldr	r2, [pc, #128]	; (f320 <TMC2660_init+0x13c>)
    f2a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
    f2a4:	4a1f      	ldr	r2, [pc, #124]	; (f324 <TMC2660_init+0x140>)
    f2a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
    f2aa:	4a1f      	ldr	r2, [pc, #124]	; (f328 <TMC2660_init+0x144>)
    f2ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
    f2b0:	4a1e      	ldr	r2, [pc, #120]	; (f32c <TMC2660_init+0x148>)
    f2b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
    f2b6:	4a1e      	ldr	r2, [pc, #120]	; (f330 <TMC2660_init+0x14c>)
    f2b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
    f2bc:	4a1d      	ldr	r2, [pc, #116]	; (f334 <TMC2660_init+0x150>)
    f2be:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
    f2c2:	4a1d      	ldr	r2, [pc, #116]	; (f338 <TMC2660_init+0x154>)
    f2c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
    f2c8:	4a1c      	ldr	r2, [pc, #112]	; (f33c <TMC2660_init+0x158>)
    f2ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
    f2ce:	4a1c      	ldr	r2, [pc, #112]	; (f340 <TMC2660_init+0x15c>)
    f2d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
    f2d4:	2132      	movs	r1, #50	; 0x32
    f2d6:	f44f 7216 	mov.w	r2, #600	; 0x258
    f2da:	e9c3 2121 	strd	r2, r1, [r3, #132]	; 0x84
	Evalboards.ch2.numberOfMotors       = MOTORS;
    f2de:	f883 608c 	strb.w	r6, [r3, #140]	; 0x8c
	Evalboards.ch2.deInit               = deInit;
    f2e2:	4a18      	ldr	r2, [pc, #96]	; (f344 <TMC2660_init+0x160>)
    f2e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    f2e8:	2002      	movs	r0, #2
}
    f2ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
    f2ee:	f7ff b9c9 	b.w	e684 <enableDriver>
    f2f2:	bf00      	nop
    f2f4:	1fff2564 	.word	0x1fff2564
    f2f8:	1fff0070 	.word	0x1fff0070
    f2fc:	00029d1c 	.word	0x00029d1c
    f300:	1fff5e88 	.word	0x1fff5e88
    f304:	0000e677 	.word	0x0000e677
    f308:	0000e74f 	.word	0x0000e74f
    f30c:	0000e72b 	.word	0x0000e72b
    f310:	0000e74d 	.word	0x0000e74d
    f314:	0000e749 	.word	0x0000e749
    f318:	0000e745 	.word	0x0000e745
    f31c:	0000f009 	.word	0x0000f009
    f320:	0000eff5 	.word	0x0000eff5
    f324:	0000e665 	.word	0x0000e665
    f328:	0000e795 	.word	0x0000e795
    f32c:	0000e869 	.word	0x0000e869
    f330:	0000f011 	.word	0x0000f011
    f334:	0000f01f 	.word	0x0000f01f
    f338:	0000e621 	.word	0x0000e621
    f33c:	0000e715 	.word	0x0000e715
    f340:	0000e685 	.word	0x0000e685
    f344:	0000e6c5 	.word	0x0000e6c5

0000f348 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
    f348:	4b01      	ldr	r3, [pc, #4]	; (f350 <checkErrors+0x8>)
    f34a:	2200      	movs	r2, #0
    f34c:	609a      	str	r2, [r3, #8]
}
    f34e:	4770      	bx	lr
    f350:	1fff5e88 	.word	0x1fff5e88

0000f354 <deInit>:
	}
	return errors;
}

static void deInit(void)
{
    f354:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.NRST);
    f356:	4e18      	ldr	r6, [pc, #96]	; (f3b8 <deInit+0x64>)
    f358:	4c18      	ldr	r4, [pc, #96]	; (f3bc <deInit+0x68>)
    f35a:	68f5      	ldr	r5, [r6, #12]
    f35c:	6860      	ldr	r0, [r4, #4]
    f35e:	682b      	ldr	r3, [r5, #0]
    f360:	699b      	ldr	r3, [r3, #24]
    f362:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.STOP_L);
    f364:	682b      	ldr	r3, [r5, #0]
    f366:	69a0      	ldr	r0, [r4, #24]
    f368:	689b      	ldr	r3, [r3, #8]
    f36a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STOP_R);
    f36c:	682b      	ldr	r3, [r5, #0]
    f36e:	6960      	ldr	r0, [r4, #20]
    f370:	689b      	ldr	r3, [r3, #8]
    f372:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.HOME_REF);
    f374:	682b      	ldr	r3, [r5, #0]
    f376:	6920      	ldr	r0, [r4, #16]
    f378:	689b      	ldr	r3, [r3, #8]
    f37a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.START);
    f37c:	682b      	ldr	r3, [r5, #0]
    f37e:	68e0      	ldr	r0, [r4, #12]
    f380:	689b      	ldr	r3, [r3, #8]
    f382:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.FREEZE);
    f384:	682b      	ldr	r3, [r5, #0]
    f386:	68a0      	ldr	r0, [r4, #8]
    f388:	689b      	ldr	r3, [r3, #8]
    f38a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STANDBY_CLK);
    f38c:	682b      	ldr	r3, [r5, #0]
    f38e:	6a20      	ldr	r0, [r4, #32]
    f390:	689b      	ldr	r3, [r3, #8]
    f392:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INTR);
    f394:	682b      	ldr	r3, [r5, #0]
    f396:	69e0      	ldr	r0, [r4, #28]
    f398:	689b      	ldr	r3, [r3, #8]
    f39a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.TARGET_REACHED);
    f39c:	682b      	ldr	r3, [r5, #0]
    f39e:	6820      	ldr	r0, [r4, #0]
    f3a0:	689b      	ldr	r3, [r3, #8]
    f3a2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.NRST);
    f3a4:	682b      	ldr	r3, [r5, #0]
    f3a6:	6860      	ldr	r0, [r4, #4]
    f3a8:	689b      	ldr	r3, [r3, #8]
    f3aa:	4798      	blx	r3

	HAL.SPI->ch2.reset();
    f3ac:	6933      	ldr	r3, [r6, #16]
}
    f3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.SPI->ch2.reset();
    f3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3b4:	4718      	bx	r3
    f3b6:	bf00      	nop
    f3b8:	00029d1c 	.word	0x00029d1c
    f3bc:	1fff25dc 	.word	0x1fff25dc

0000f3c0 <userFunction>:
	switch(type)
    f3c0:	2803      	cmp	r0, #3
{
    f3c2:	b570      	push	{r4, r5, r6, lr}
    f3c4:	4614      	mov	r4, r2
	switch(type)
    f3c6:	d806      	bhi.n	f3d6 <userFunction+0x16>
    f3c8:	3801      	subs	r0, #1
    f3ca:	2802      	cmp	r0, #2
    f3cc:	d808      	bhi.n	f3e0 <userFunction+0x20>
    f3ce:	e8df f000 	tbb	[pc, r0]
    f3d2:	3a2b      	.short	0x3a2b
    f3d4:	48          	.byte	0x48
    f3d5:	00          	.byte	0x00
    f3d6:	28ff      	cmp	r0, #255	; 0xff
    f3d8:	d04c      	beq.n	f474 <userFunction+0xb4>
    f3da:	2404      	movs	r4, #4
}
    f3dc:	4620      	mov	r0, r4
    f3de:	bd70      	pop	{r4, r5, r6, pc}
		if(!(*value & ~3))
    f3e0:	6812      	ldr	r2, [r2, #0]
    f3e2:	f032 0303 	bics.w	r3, r2, #3
    f3e6:	d110      	bne.n	f40a <userFunction+0x4a>
			if(*value & (1<<0))
    f3e8:	4b28      	ldr	r3, [pc, #160]	; (f48c <userFunction+0xcc>)
    f3ea:	4d29      	ldr	r5, [pc, #164]	; (f490 <userFunction+0xd0>)
    f3ec:	68de      	ldr	r6, [r3, #12]
    f3ee:	6968      	ldr	r0, [r5, #20]
    f3f0:	6833      	ldr	r3, [r6, #0]
    f3f2:	07d2      	lsls	r2, r2, #31
    f3f4:	d50b      	bpl.n	f40e <userFunction+0x4e>
				HAL.IOs->config->toInput(Pins.STOP_R); // pull up -> set it to floating causes high
    f3f6:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.STOP_R);
    f3f8:	4798      	blx	r3
			if(*value & (1<<1))
    f3fa:	6824      	ldr	r4, [r4, #0]
    f3fc:	6832      	ldr	r2, [r6, #0]
    f3fe:	69a8      	ldr	r0, [r5, #24]
    f400:	f014 0402 	ands.w	r4, r4, #2
    f404:	d009      	beq.n	f41a <userFunction+0x5a>
				HAL.IOs->config->toInput(Pins.STOP_L); // pull up -> set it to floating causes high
    f406:	6913      	ldr	r3, [r2, #16]
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
    f408:	4798      	blx	r3
	uint32_t errors = 0;
    f40a:	2400      	movs	r4, #0
		break;
    f40c:	e7e6      	b.n	f3dc <userFunction+0x1c>
				HAL.IOs->config->toOutput(Pins.STOP_R);
    f40e:	68db      	ldr	r3, [r3, #12]
    f410:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_R);
    f412:	6833      	ldr	r3, [r6, #0]
    f414:	6968      	ldr	r0, [r5, #20]
    f416:	699b      	ldr	r3, [r3, #24]
    f418:	e7ee      	b.n	f3f8 <userFunction+0x38>
				HAL.IOs->config->toOutput(Pins.STOP_L);
    f41a:	68d3      	ldr	r3, [r2, #12]
    f41c:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_L);
    f41e:	6833      	ldr	r3, [r6, #0]
    f420:	69a8      	ldr	r0, [r5, #24]
    f422:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setLow(Pins.FREEZE);
    f424:	4798      	blx	r3
    f426:	e7d9      	b.n	f3dc <userFunction+0x1c>
		if(*value)
    f428:	4b18      	ldr	r3, [pc, #96]	; (f48c <userFunction+0xcc>)
    f42a:	4d19      	ldr	r5, [pc, #100]	; (f490 <userFunction+0xd0>)
    f42c:	68de      	ldr	r6, [r3, #12]
    f42e:	6814      	ldr	r4, [r2, #0]
    f430:	6928      	ldr	r0, [r5, #16]
    f432:	6833      	ldr	r3, [r6, #0]
    f434:	b10c      	cbz	r4, f43a <userFunction+0x7a>
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
    f436:	691b      	ldr	r3, [r3, #16]
    f438:	e7e6      	b.n	f408 <userFunction+0x48>
			HAL.IOs->config->toOutput(Pins.HOME_REF);
    f43a:	68db      	ldr	r3, [r3, #12]
    f43c:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.HOME_REF);
    f43e:	6833      	ldr	r3, [r6, #0]
    f440:	6928      	ldr	r0, [r5, #16]
    f442:	699b      	ldr	r3, [r3, #24]
    f444:	e7ee      	b.n	f424 <userFunction+0x64>
		if(*value)
    f446:	4b11      	ldr	r3, [pc, #68]	; (f48c <userFunction+0xcc>)
    f448:	4d11      	ldr	r5, [pc, #68]	; (f490 <userFunction+0xd0>)
    f44a:	68de      	ldr	r6, [r3, #12]
    f44c:	6814      	ldr	r4, [r2, #0]
    f44e:	6833      	ldr	r3, [r6, #0]
    f450:	68a8      	ldr	r0, [r5, #8]
    f452:	2c00      	cmp	r4, #0
    f454:	d1ef      	bne.n	f436 <userFunction+0x76>
			HAL.IOs->config->toOutput(Pins.FREEZE);
    f456:	68db      	ldr	r3, [r3, #12]
    f458:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.FREEZE);
    f45a:	6833      	ldr	r3, [r6, #0]
    f45c:	68a8      	ldr	r0, [r5, #8]
    f45e:	699b      	ldr	r3, [r3, #24]
    f460:	e7e0      	b.n	f424 <userFunction+0x64>
		*value = tmc4330_calibrateClosedLoop(motorToIC(motor), 1);
    f462:	480c      	ldr	r0, [pc, #48]	; (f494 <userFunction+0xd4>)
    f464:	2101      	movs	r1, #1
    f466:	f012 f973 	bl	21750 <tmc4330_calibrateClosedLoop>
    f46a:	6020      	str	r0, [r4, #0]
		if(!*value)
    f46c:	2800      	cmp	r0, #0
    f46e:	d1cc      	bne.n	f40a <userFunction+0x4a>
			errors |= TMC_ERROR_NOT_DONE;
    f470:	2420      	movs	r4, #32
	return errors;
    f472:	e7b3      	b.n	f3dc <userFunction+0x1c>
		Evalboards.ch2.config->reset();
    f474:	4c08      	ldr	r4, [pc, #32]	; (f498 <userFunction+0xd8>)
    f476:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    f47a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f47e:	4798      	blx	r3
		Evalboards.ch1.config->reset();
    f480:	69a3      	ldr	r3, [r4, #24]
    f482:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    f486:	4798      	blx	r3
    f488:	e7bf      	b.n	f40a <userFunction+0x4a>
    f48a:	bf00      	nop
    f48c:	00029d1c 	.word	0x00029d1c
    f490:	1fff25dc 	.word	0x1fff25dc
    f494:	1fff2600 	.word	0x1fff2600
    f498:	1fff5e88 	.word	0x1fff5e88

0000f49c <periodicJob>:
{
    f49c:	4601      	mov	r1, r0
	tmc4330_periodicJob(&TMC4330, tick);
    f49e:	4801      	ldr	r0, [pc, #4]	; (f4a4 <periodicJob+0x8>)
    f4a0:	f012 ba14 	b.w	218cc <tmc4330_periodicJob>
    f4a4:	1fff2600 	.word	0x1fff2600

0000f4a8 <readRegister>:
{
    f4a8:	b510      	push	{r4, lr}
	*value	= tmc4330_readInt(motorToIC(motor), address);
    f4aa:	4803      	ldr	r0, [pc, #12]	; (f4b8 <readRegister+0x10>)
{
    f4ac:	4614      	mov	r4, r2
	*value	= tmc4330_readInt(motorToIC(motor), address);
    f4ae:	f012 f87e 	bl	215ae <tmc4330_readInt>
    f4b2:	6020      	str	r0, [r4, #0]
}
    f4b4:	bd10      	pop	{r4, pc}
    f4b6:	bf00      	nop
    f4b8:	1fff2600 	.word	0x1fff2600

0000f4bc <writeRegister>:
	tmc4330_writeInt(motorToIC(motor), address, value);
    f4bc:	4801      	ldr	r0, [pc, #4]	; (f4c4 <writeRegister+0x8>)
    f4be:	f012 b868 	b.w	21592 <tmc4330_writeInt>
    f4c2:	bf00      	nop
    f4c4:	1fff2600 	.word	0x1fff2600

0000f4c8 <moveBy>:
{
    f4c8:	b508      	push	{r3, lr}
	tmc4330_moveBy(motorToIC(motor), ticks, vmax_position);
    f4ca:	4804      	ldr	r0, [pc, #16]	; (f4dc <moveBy+0x14>)
    f4cc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
    f4d0:	3024      	adds	r0, #36	; 0x24
    f4d2:	f012 f92d 	bl	21730 <tmc4330_moveBy>
}
    f4d6:	2000      	movs	r0, #0
    f4d8:	bd08      	pop	{r3, pc}
    f4da:	bf00      	nop
    f4dc:	1fff25dc 	.word	0x1fff25dc

0000f4e0 <moveTo>:
{
    f4e0:	b508      	push	{r3, lr}
	tmc4330_moveTo(motorToIC(motor), position, vmax_position);
    f4e2:	4804      	ldr	r0, [pc, #16]	; (f4f4 <moveTo+0x14>)
    f4e4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
    f4e8:	3024      	adds	r0, #36	; 0x24
    f4ea:	f012 f905 	bl	216f8 <tmc4330_moveTo>
}
    f4ee:	2000      	movs	r0, #0
    f4f0:	bd08      	pop	{r3, pc}
    f4f2:	bf00      	nop
    f4f4:	1fff25dc 	.word	0x1fff25dc

0000f4f8 <handleParameter>:
{
    f4f8:	b570      	push	{r4, r5, r6, lr}
    f4fa:	4605      	mov	r5, r0
    f4fc:	461e      	mov	r6, r3
	if(motor >= TMC4330_MOTORS)
    f4fe:	460c      	mov	r4, r1
    f500:	2900      	cmp	r1, #0
    f502:	f040 836c 	bne.w	fbde <handleParameter+0x6e6>
	switch(type)
    f506:	2a8a      	cmp	r2, #138	; 0x8a
    f508:	d84b      	bhi.n	f5a2 <handleParameter+0xaa>
    f50a:	2a6b      	cmp	r2, #107	; 0x6b
    f50c:	d803      	bhi.n	f516 <handleParameter+0x1e>
    f50e:	2a1b      	cmp	r2, #27
    f510:	d926      	bls.n	f560 <handleParameter+0x68>
    f512:	2504      	movs	r5, #4
    f514:	e050      	b.n	f5b8 <handleParameter+0xc0>
    f516:	3a6c      	subs	r2, #108	; 0x6c
    f518:	2a1e      	cmp	r2, #30
    f51a:	f200 8362 	bhi.w	fbe2 <handleParameter+0x6ea>
    f51e:	e8df f012 	tbh	[pc, r2, lsl #1]
    f522:	01a7      	.short	0x01a7
    f524:	01c301b5 	.word	0x01c301b5
    f528:	01ee01d8 	.word	0x01ee01d8
    f52c:	021001fc 	.word	0x021001fc
    f530:	02350227 	.word	0x02350227
    f534:	025a0243 	.word	0x025a0243
    f538:	03600270 	.word	0x03600270
    f53c:	03600360 	.word	0x03600360
    f540:	027e0360 	.word	0x027e0360
    f544:	029a028c 	.word	0x029a028c
    f548:	03600360 	.word	0x03600360
    f54c:	036002b2 	.word	0x036002b2
    f550:	02ca0360 	.word	0x02ca0360
    f554:	02e502d3 	.word	0x02e502d3
    f558:	02f30360 	.word	0x02f30360
    f55c:	031d0307 	.word	0x031d0307
    f560:	2a1b      	cmp	r2, #27
    f562:	f200 8340 	bhi.w	fbe6 <handleParameter+0x6ee>
    f566:	e8df f012 	tbh	[pc, r2, lsl #1]
    f56a:	002e      	.short	0x002e
    f56c:	004a003c 	.word	0x004a003c
    f570:	0065005c 	.word	0x0065005c
    f574:	033e0081 	.word	0x033e0081
    f578:	0095033e 	.word	0x0095033e
    f57c:	033e033e 	.word	0x033e033e
    f580:	033e033e 	.word	0x033e033e
    f584:	00a0033e 	.word	0x00a0033e
    f588:	00c100b3 	.word	0x00c100b3
    f58c:	00e900d5 	.word	0x00e900d5
    f590:	010b00f7 	.word	0x010b00f7
    f594:	012b0119 	.word	0x012b0119
    f598:	01470139 	.word	0x01470139
    f59c:	01630155 	.word	0x01630155
    f5a0:	0175      	.short	0x0175
    f5a2:	2ad4      	cmp	r2, #212	; 0xd4
    f5a4:	f000 82fe 	beq.w	fba4 <handleParameter+0x6ac>
    f5a8:	d808      	bhi.n	f5bc <handleParameter+0xc4>
    f5aa:	2ac8      	cmp	r2, #200	; 0xc8
    f5ac:	f000 81b5 	beq.w	f91a <handleParameter+0x422>
    f5b0:	2ad1      	cmp	r2, #209	; 0xd1
    f5b2:	f000 82e9 	beq.w	fb88 <handleParameter+0x690>
    f5b6:	2504      	movs	r5, #4
}
    f5b8:	4628      	mov	r0, r5
    f5ba:	bd70      	pop	{r4, r5, r6, pc}
	switch(type)
    f5bc:	2ad6      	cmp	r2, #214	; 0xd6
    f5be:	f000 82fe 	beq.w	fbbe <handleParameter+0x6c6>
    f5c2:	2504      	movs	r5, #4
    f5c4:	e7f8      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f5c6:	b928      	cbnz	r0, f5d4 <handleParameter+0xdc>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_X_TARGET);
    f5c8:	48a0      	ldr	r0, [pc, #640]	; (f84c <handleParameter+0x354>)
    f5ca:	2137      	movs	r1, #55	; 0x37
    f5cc:	f011 ffef 	bl	215ae <tmc4330_readInt>
    f5d0:	6030      	str	r0, [r6, #0]
    f5d2:	e7f1      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_X_TARGET, *value);
    f5d4:	6832      	ldr	r2, [r6, #0]
    f5d6:	489d      	ldr	r0, [pc, #628]	; (f84c <handleParameter+0x354>)
    f5d8:	2137      	movs	r1, #55	; 0x37
    f5da:	f011 ffda 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f5de:	2500      	movs	r5, #0
    f5e0:	e7ea      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f5e2:	b928      	cbnz	r0, f5f0 <handleParameter+0xf8>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_XACTUAL);
    f5e4:	4899      	ldr	r0, [pc, #612]	; (f84c <handleParameter+0x354>)
    f5e6:	2121      	movs	r1, #33	; 0x21
    f5e8:	f011 ffe1 	bl	215ae <tmc4330_readInt>
    f5ec:	6030      	str	r0, [r6, #0]
    f5ee:	e7e3      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_XACTUAL, *value);
    f5f0:	6832      	ldr	r2, [r6, #0]
    f5f2:	4896      	ldr	r0, [pc, #600]	; (f84c <handleParameter+0x354>)
    f5f4:	2121      	movs	r1, #33	; 0x21
    f5f6:	f011 ffcc 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f5fa:	2500      	movs	r5, #0
    f5fc:	e7dc      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f5fe:	b930      	cbnz	r0, f60e <handleParameter+0x116>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VMAX) >> 8;
    f600:	4892      	ldr	r0, [pc, #584]	; (f84c <handleParameter+0x354>)
    f602:	2124      	movs	r1, #36	; 0x24
    f604:	f011 ffd3 	bl	215ae <tmc4330_readInt>
    f608:	1200      	asrs	r0, r0, #8
    f60a:	6030      	str	r0, [r6, #0]
    f60c:	e7d4      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VMAX, tmc4330_discardVelocityDecimals(*value));
    f60e:	6830      	ldr	r0, [r6, #0]
    f610:	f012 f841 	bl	21696 <tmc4330_discardVelocityDecimals>
    f614:	2124      	movs	r1, #36	; 0x24
    f616:	4602      	mov	r2, r0
    f618:	488c      	ldr	r0, [pc, #560]	; (f84c <handleParameter+0x354>)
    f61a:	f011 ffba 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f61e:	2500      	movs	r5, #0
    f620:	e7ca      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f622:	2800      	cmp	r0, #0
    f624:	f040 82e1 	bne.w	fbea <handleParameter+0x6f2>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VACTUAL);
    f628:	4888      	ldr	r0, [pc, #544]	; (f84c <handleParameter+0x354>)
    f62a:	2122      	movs	r1, #34	; 0x22
    f62c:	f011 ffbf 	bl	215ae <tmc4330_readInt>
    f630:	6030      	str	r0, [r6, #0]
    f632:	e7c1      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f634:	4c86      	ldr	r4, [pc, #536]	; (f850 <handleParameter+0x358>)
    f636:	b918      	cbnz	r0, f640 <handleParameter+0x148>
			*value = vmax_position;
    f638:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
    f63c:	6033      	str	r3, [r6, #0]
    f63e:	e7bb      	b.n	f5b8 <handleParameter+0xc0>
			vmax_position = *value;
    f640:	6833      	ldr	r3, [r6, #0]
    f642:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
			if(tmc4330_readInt(motorToIC(motor), TMC4330_RAMPMODE) & TMC4330_RAMP_POSITION)
    f646:	2120      	movs	r1, #32
    f648:	f104 0024 	add.w	r0, r4, #36	; 0x24
    f64c:	f011 ffaf 	bl	215ae <tmc4330_readInt>
    f650:	0742      	lsls	r2, r0, #29
    f652:	f140 8223 	bpl.w	fa9c <handleParameter+0x5a4>
				tmc4330_writeInt(motorToIC(motor), TMC4330_VMAX, tmc4330_discardVelocityDecimals(vmax_position));
    f656:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
    f65a:	f012 f81c 	bl	21696 <tmc4330_discardVelocityDecimals>
    f65e:	2124      	movs	r1, #36	; 0x24
    f660:	4602      	mov	r2, r0
    f662:	1860      	adds	r0, r4, r1
    f664:	f011 ff95 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f668:	2500      	movs	r5, #0
    f66a:	e7a5      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f66c:	b930      	cbnz	r0, f67c <handleParameter+0x184>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_AMAX)>>2;
    f66e:	4877      	ldr	r0, [pc, #476]	; (f84c <handleParameter+0x354>)
    f670:	2128      	movs	r1, #40	; 0x28
    f672:	f011 ff9c 	bl	215ae <tmc4330_readInt>
    f676:	1080      	asrs	r0, r0, #2
    f678:	6030      	str	r0, [r6, #0]
    f67a:	e79d      	b.n	f5b8 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
    f67c:	6832      	ldr	r2, [r6, #0]
    f67e:	0d95      	lsrs	r5, r2, #22
    f680:	05ad      	lsls	r5, r5, #22
    f682:	2d00      	cmp	r5, #0
    f684:	f040 82b3 	bne.w	fbee <handleParameter+0x6f6>
				tmc4330_writeInt(motorToIC(motor), TMC4330_AMAX, *value<<2);
    f688:	4870      	ldr	r0, [pc, #448]	; (f84c <handleParameter+0x354>)
    f68a:	0092      	lsls	r2, r2, #2
    f68c:	2128      	movs	r1, #40	; 0x28
    f68e:	f011 ff80 	bl	21592 <tmc4330_writeInt>
    f692:	e791      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f694:	2800      	cmp	r0, #0
    f696:	f040 82ac 	bne.w	fbf2 <handleParameter+0x6fa>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_STATUS) & (1<<0))? 1:0;
    f69a:	486c      	ldr	r0, [pc, #432]	; (f84c <handleParameter+0x354>)
    f69c:	210f      	movs	r1, #15
    f69e:	f011 ff86 	bl	215ae <tmc4330_readInt>
    f6a2:	f000 0001 	and.w	r0, r0, #1
    f6a6:	6030      	str	r0, [r6, #0]
    f6a8:	e786      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f6aa:	b930      	cbnz	r0, f6ba <handleParameter+0x1c2>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_RAMPMODE)<<1;
    f6ac:	4867      	ldr	r0, [pc, #412]	; (f84c <handleParameter+0x354>)
    f6ae:	2120      	movs	r1, #32
    f6b0:	f011 ff7d 	bl	215ae <tmc4330_readInt>
    f6b4:	0040      	lsls	r0, r0, #1
    f6b6:	6030      	str	r0, [r6, #0]
    f6b8:	e77e      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_RAMPMODE, (*value) ? TMC4330_RAMP_SSHAPE : TMC4330_RAMP_TRAPEZ);
    f6ba:	6833      	ldr	r3, [r6, #0]
    f6bc:	4863      	ldr	r0, [pc, #396]	; (f84c <handleParameter+0x354>)
    f6be:	2b00      	cmp	r3, #0
    f6c0:	bf14      	ite	ne
    f6c2:	2202      	movne	r2, #2
    f6c4:	2201      	moveq	r2, #1
    f6c6:	2120      	movs	r1, #32
    f6c8:	f011 ff63 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f6cc:	2500      	movs	r5, #0
    f6ce:	e773      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f6d0:	b928      	cbnz	r0, f6de <handleParameter+0x1e6>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VSTART);
    f6d2:	485e      	ldr	r0, [pc, #376]	; (f84c <handleParameter+0x354>)
    f6d4:	2125      	movs	r1, #37	; 0x25
    f6d6:	f011 ff6a 	bl	215ae <tmc4330_readInt>
    f6da:	6030      	str	r0, [r6, #0]
    f6dc:	e76c      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VSTART, *value);
    f6de:	6832      	ldr	r2, [r6, #0]
    f6e0:	485a      	ldr	r0, [pc, #360]	; (f84c <handleParameter+0x354>)
    f6e2:	2125      	movs	r1, #37	; 0x25
    f6e4:	f011 ff55 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f6e8:	2500      	movs	r5, #0
    f6ea:	e765      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f6ec:	b930      	cbnz	r0, f6fc <handleParameter+0x204>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_ASTART)>>2;
    f6ee:	4857      	ldr	r0, [pc, #348]	; (f84c <handleParameter+0x354>)
    f6f0:	212a      	movs	r1, #42	; 0x2a
    f6f2:	f011 ff5c 	bl	215ae <tmc4330_readInt>
    f6f6:	1080      	asrs	r0, r0, #2
    f6f8:	6030      	str	r0, [r6, #0]
    f6fa:	e75d      	b.n	f5b8 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
    f6fc:	6832      	ldr	r2, [r6, #0]
    f6fe:	0d95      	lsrs	r5, r2, #22
    f700:	05ad      	lsls	r5, r5, #22
    f702:	2d00      	cmp	r5, #0
    f704:	f040 8277 	bne.w	fbf6 <handleParameter+0x6fe>
				tmc4330_writeInt(motorToIC(motor), TMC4330_ASTART, *value<<2);
    f708:	4850      	ldr	r0, [pc, #320]	; (f84c <handleParameter+0x354>)
    f70a:	0092      	lsls	r2, r2, #2
    f70c:	212a      	movs	r1, #42	; 0x2a
    f70e:	f011 ff40 	bl	21592 <tmc4330_writeInt>
    f712:	e751      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f714:	b930      	cbnz	r0, f724 <handleParameter+0x22c>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_DMAX)>>2;
    f716:	484d      	ldr	r0, [pc, #308]	; (f84c <handleParameter+0x354>)
    f718:	2129      	movs	r1, #41	; 0x29
    f71a:	f011 ff48 	bl	215ae <tmc4330_readInt>
    f71e:	1080      	asrs	r0, r0, #2
    f720:	6030      	str	r0, [r6, #0]
    f722:	e749      	b.n	f5b8 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
    f724:	6832      	ldr	r2, [r6, #0]
    f726:	0d95      	lsrs	r5, r2, #22
    f728:	05ad      	lsls	r5, r5, #22
    f72a:	2d00      	cmp	r5, #0
    f72c:	f040 8265 	bne.w	fbfa <handleParameter+0x702>
				tmc4330_writeInt(motorToIC(motor), TMC4330_DMAX, *value<<2);
    f730:	4846      	ldr	r0, [pc, #280]	; (f84c <handleParameter+0x354>)
    f732:	0092      	lsls	r2, r2, #2
    f734:	2129      	movs	r1, #41	; 0x29
    f736:	f011 ff2c 	bl	21592 <tmc4330_writeInt>
    f73a:	e73d      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f73c:	b928      	cbnz	r0, f74a <handleParameter+0x252>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VBREAK);
    f73e:	4843      	ldr	r0, [pc, #268]	; (f84c <handleParameter+0x354>)
    f740:	2127      	movs	r1, #39	; 0x27
    f742:	f011 ff34 	bl	215ae <tmc4330_readInt>
    f746:	6030      	str	r0, [r6, #0]
    f748:	e736      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VBREAK, *value);
    f74a:	6832      	ldr	r2, [r6, #0]
    f74c:	483f      	ldr	r0, [pc, #252]	; (f84c <handleParameter+0x354>)
    f74e:	2127      	movs	r1, #39	; 0x27
    f750:	f011 ff1f 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f754:	2500      	movs	r5, #0
    f756:	e72f      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f758:	b930      	cbnz	r0, f768 <handleParameter+0x270>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_DFINAL) >> 2;
    f75a:	483c      	ldr	r0, [pc, #240]	; (f84c <handleParameter+0x354>)
    f75c:	212b      	movs	r1, #43	; 0x2b
    f75e:	f011 ff26 	bl	215ae <tmc4330_readInt>
    f762:	1080      	asrs	r0, r0, #2
    f764:	6030      	str	r0, [r6, #0]
    f766:	e727      	b.n	f5b8 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
    f768:	6832      	ldr	r2, [r6, #0]
    f76a:	0d95      	lsrs	r5, r2, #22
    f76c:	05ad      	lsls	r5, r5, #22
    f76e:	2d00      	cmp	r5, #0
    f770:	f040 8245 	bne.w	fbfe <handleParameter+0x706>
				tmc4330_writeInt(motorToIC(motor), TMC4330_DFINAL, *value<<2);
    f774:	4835      	ldr	r0, [pc, #212]	; (f84c <handleParameter+0x354>)
    f776:	0092      	lsls	r2, r2, #2
    f778:	212b      	movs	r1, #43	; 0x2b
    f77a:	f011 ff0a 	bl	21592 <tmc4330_writeInt>
    f77e:	e71b      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f780:	b928      	cbnz	r0, f78e <handleParameter+0x296>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VSTOP);
    f782:	4832      	ldr	r0, [pc, #200]	; (f84c <handleParameter+0x354>)
    f784:	2126      	movs	r1, #38	; 0x26
    f786:	f011 ff12 	bl	215ae <tmc4330_readInt>
    f78a:	6030      	str	r0, [r6, #0]
    f78c:	e714      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VSTOP, *value);
    f78e:	6832      	ldr	r2, [r6, #0]
    f790:	482e      	ldr	r0, [pc, #184]	; (f84c <handleParameter+0x354>)
    f792:	2126      	movs	r1, #38	; 0x26
    f794:	f011 fefd 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f798:	2500      	movs	r5, #0
    f79a:	e70d      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f79c:	b928      	cbnz	r0, f7aa <handleParameter+0x2b2>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_DSTOP);
    f79e:	482b      	ldr	r0, [pc, #172]	; (f84c <handleParameter+0x354>)
    f7a0:	212c      	movs	r1, #44	; 0x2c
    f7a2:	f011 ff04 	bl	215ae <tmc4330_readInt>
    f7a6:	6030      	str	r0, [r6, #0]
    f7a8:	e706      	b.n	f5b8 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
    f7aa:	6832      	ldr	r2, [r6, #0]
    f7ac:	0d95      	lsrs	r5, r2, #22
    f7ae:	05ad      	lsls	r5, r5, #22
    f7b0:	2d00      	cmp	r5, #0
    f7b2:	f040 8226 	bne.w	fc02 <handleParameter+0x70a>
				tmc4330_writeInt(motorToIC(motor), TMC4330_DSTOP, *value);
    f7b6:	4825      	ldr	r0, [pc, #148]	; (f84c <handleParameter+0x354>)
    f7b8:	212c      	movs	r1, #44	; 0x2c
    f7ba:	f011 feea 	bl	21592 <tmc4330_writeInt>
    f7be:	e6fb      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f7c0:	b928      	cbnz	r0, f7ce <handleParameter+0x2d6>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_BOW1);
    f7c2:	4822      	ldr	r0, [pc, #136]	; (f84c <handleParameter+0x354>)
    f7c4:	212d      	movs	r1, #45	; 0x2d
    f7c6:	f011 fef2 	bl	215ae <tmc4330_readInt>
    f7ca:	6030      	str	r0, [r6, #0]
    f7cc:	e6f4      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_BOW1, *value);
    f7ce:	6832      	ldr	r2, [r6, #0]
    f7d0:	481e      	ldr	r0, [pc, #120]	; (f84c <handleParameter+0x354>)
    f7d2:	212d      	movs	r1, #45	; 0x2d
    f7d4:	f011 fedd 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f7d8:	2500      	movs	r5, #0
    f7da:	e6ed      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f7dc:	b928      	cbnz	r0, f7ea <handleParameter+0x2f2>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_BOW2);
    f7de:	481b      	ldr	r0, [pc, #108]	; (f84c <handleParameter+0x354>)
    f7e0:	212e      	movs	r1, #46	; 0x2e
    f7e2:	f011 fee4 	bl	215ae <tmc4330_readInt>
    f7e6:	6030      	str	r0, [r6, #0]
    f7e8:	e6e6      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_BOW2, *value);
    f7ea:	6832      	ldr	r2, [r6, #0]
    f7ec:	4817      	ldr	r0, [pc, #92]	; (f84c <handleParameter+0x354>)
    f7ee:	212e      	movs	r1, #46	; 0x2e
    f7f0:	f011 fecf 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f7f4:	2500      	movs	r5, #0
    f7f6:	e6df      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f7f8:	b928      	cbnz	r0, f806 <handleParameter+0x30e>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_BOW3);
    f7fa:	4814      	ldr	r0, [pc, #80]	; (f84c <handleParameter+0x354>)
    f7fc:	212f      	movs	r1, #47	; 0x2f
    f7fe:	f011 fed6 	bl	215ae <tmc4330_readInt>
    f802:	6030      	str	r0, [r6, #0]
    f804:	e6d8      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_BOW3, *value);
    f806:	6832      	ldr	r2, [r6, #0]
    f808:	4810      	ldr	r0, [pc, #64]	; (f84c <handleParameter+0x354>)
    f80a:	212f      	movs	r1, #47	; 0x2f
    f80c:	f011 fec1 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f810:	2500      	movs	r5, #0
    f812:	e6d1      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f814:	b928      	cbnz	r0, f822 <handleParameter+0x32a>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_BOW4);
    f816:	480d      	ldr	r0, [pc, #52]	; (f84c <handleParameter+0x354>)
    f818:	2130      	movs	r1, #48	; 0x30
    f81a:	f011 fec8 	bl	215ae <tmc4330_readInt>
    f81e:	6030      	str	r0, [r6, #0]
    f820:	e6ca      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_BOW4, *value);
    f822:	6832      	ldr	r2, [r6, #0]
    f824:	4809      	ldr	r0, [pc, #36]	; (f84c <handleParameter+0x354>)
    f826:	2130      	movs	r1, #48	; 0x30
    f828:	f011 feb3 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f82c:	2500      	movs	r5, #0
    f82e:	e6c3      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f830:	b928      	cbnz	r0, f83e <handleParameter+0x346>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VIRT_STOP_LEFT);
    f832:	4806      	ldr	r0, [pc, #24]	; (f84c <handleParameter+0x354>)
    f834:	2133      	movs	r1, #51	; 0x33
    f836:	f011 feba 	bl	215ae <tmc4330_readInt>
    f83a:	6030      	str	r0, [r6, #0]
    f83c:	e6bc      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VIRT_STOP_LEFT, *value);
    f83e:	6832      	ldr	r2, [r6, #0]
    f840:	4802      	ldr	r0, [pc, #8]	; (f84c <handleParameter+0x354>)
    f842:	2133      	movs	r1, #51	; 0x33
    f844:	f011 fea5 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f848:	2500      	movs	r5, #0
    f84a:	e6b5      	b.n	f5b8 <handleParameter+0xc0>
    f84c:	1fff2600 	.word	0x1fff2600
    f850:	1fff25dc 	.word	0x1fff25dc
		if(readWrite == READ) {
    f854:	b928      	cbnz	r0, f862 <handleParameter+0x36a>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_VIRT_STOP_RIGHT);
    f856:	48a3      	ldr	r0, [pc, #652]	; (fae4 <handleParameter+0x5ec>)
    f858:	2134      	movs	r1, #52	; 0x34
    f85a:	f011 fea8 	bl	215ae <tmc4330_readInt>
    f85e:	6030      	str	r0, [r6, #0]
    f860:	e6aa      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_VIRT_STOP_RIGHT, *value);
    f862:	6832      	ldr	r2, [r6, #0]
    f864:	489f      	ldr	r0, [pc, #636]	; (fae4 <handleParameter+0x5ec>)
    f866:	2134      	movs	r1, #52	; 0x34
    f868:	f011 fe93 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f86c:	2500      	movs	r5, #0
    f86e:	e6a3      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f870:	b928      	cbnz	r0, f87e <handleParameter+0x386>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_VMIN_EMF_WR);		// read from shadow register
    f872:	489c      	ldr	r0, [pc, #624]	; (fae4 <handleParameter+0x5ec>)
    f874:	2160      	movs	r1, #96	; 0x60
    f876:	f011 fe9a 	bl	215ae <tmc4330_readInt>
    f87a:	6030      	str	r0, [r6, #0]
    f87c:	e69c      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_VMIN_EMF_WR, *value);
    f87e:	6832      	ldr	r2, [r6, #0]
    f880:	4898      	ldr	r0, [pc, #608]	; (fae4 <handleParameter+0x5ec>)
    f882:	2160      	movs	r1, #96	; 0x60
    f884:	f011 fe85 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f888:	2500      	movs	r5, #0
    f88a:	e695      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f88c:	b928      	cbnz	r0, f89a <handleParameter+0x3a2>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_VADD_EMF); 	// read from shadow register
    f88e:	4895      	ldr	r0, [pc, #596]	; (fae4 <handleParameter+0x5ec>)
    f890:	2161      	movs	r1, #97	; 0x61
    f892:	f011 fe8c 	bl	215ae <tmc4330_readInt>
    f896:	6030      	str	r0, [r6, #0]
    f898:	e68e      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_VADD_EMF, *value);
    f89a:	6832      	ldr	r2, [r6, #0]
    f89c:	4891      	ldr	r0, [pc, #580]	; (fae4 <handleParameter+0x5ec>)
    f89e:	2161      	movs	r1, #97	; 0x61
    f8a0:	f011 fe77 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f8a4:	2500      	movs	r5, #0
    f8a6:	e687      	b.n	f5b8 <handleParameter+0xc0>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_BETA) >> 16;
    f8a8:	488e      	ldr	r0, [pc, #568]	; (fae4 <handleParameter+0x5ec>)
    f8aa:	211c      	movs	r1, #28
		if(readWrite == READ) {
    f8ac:	b925      	cbnz	r5, f8b8 <handleParameter+0x3c0>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_BETA) >> 16;
    f8ae:	f011 fe7e 	bl	215ae <tmc4330_readInt>
    f8b2:	1400      	asrs	r0, r0, #16
    f8b4:	6030      	str	r0, [r6, #0]
    f8b6:	e67f      	b.n	f5b8 <handleParameter+0xc0>
			uvalue = tmc4330_readInt(motorToIC(motor),  TMC4330_CL_BETA) & 0x000001FF;
    f8b8:	f011 fe79 	bl	215ae <tmc4330_readInt>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_BETA, uvalue | (*value<<16));
    f8bc:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4330_readInt(motorToIC(motor),  TMC4330_CL_BETA) & 0x000001FF;
    f8be:	f3c0 0008 	ubfx	r0, r0, #0, #9
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_BETA, uvalue | (*value<<16));
    f8c2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
    f8c6:	211c      	movs	r1, #28
    f8c8:	4886      	ldr	r0, [pc, #536]	; (fae4 <handleParameter+0x5ec>)
    f8ca:	f011 fe62 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f8ce:	2500      	movs	r5, #0
    f8d0:	e672      	b.n	f5b8 <handleParameter+0xc0>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_BETA) & 0xFF;
    f8d2:	4884      	ldr	r0, [pc, #528]	; (fae4 <handleParameter+0x5ec>)
    f8d4:	211c      	movs	r1, #28
		if(readWrite == READ) {
    f8d6:	b925      	cbnz	r5, f8e2 <handleParameter+0x3ea>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_BETA) & 0xFF;
    f8d8:	f011 fe69 	bl	215ae <tmc4330_readInt>
    f8dc:	b2c0      	uxtb	r0, r0
    f8de:	6030      	str	r0, [r6, #0]
    f8e0:	e66a      	b.n	f5b8 <handleParameter+0xc0>
			uvalue = tmc4330_readInt(motorToIC(motor),  TMC4330_CL_BETA) & 0x00FF0000;
    f8e2:	f011 fe64 	bl	215ae <tmc4330_readInt>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_BETA, uvalue | (*value & 0x1FF));
    f8e6:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4330_readInt(motorToIC(motor),  TMC4330_CL_BETA) & 0x00FF0000;
    f8e8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_BETA, uvalue | (*value & 0x1FF));
    f8ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
    f8f0:	4302      	orrs	r2, r0
    f8f2:	211c      	movs	r1, #28
    f8f4:	487b      	ldr	r0, [pc, #492]	; (fae4 <handleParameter+0x5ec>)
    f8f6:	f011 fe4c 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f8fa:	2500      	movs	r5, #0
    f8fc:	e65c      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f8fe:	b928      	cbnz	r0, f90c <handleParameter+0x414>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_OFFSET);
    f900:	4878      	ldr	r0, [pc, #480]	; (fae4 <handleParameter+0x5ec>)
    f902:	2159      	movs	r1, #89	; 0x59
    f904:	f011 fe53 	bl	215ae <tmc4330_readInt>
    f908:	6030      	str	r0, [r6, #0]
    f90a:	e655      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_OFFSET, *value);
    f90c:	6832      	ldr	r2, [r6, #0]
    f90e:	4875      	ldr	r0, [pc, #468]	; (fae4 <handleParameter+0x5ec>)
    f910:	2159      	movs	r1, #89	; 0x59
    f912:	f011 fe3e 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f916:	2500      	movs	r5, #0
    f918:	e64e      	b.n	f5b8 <handleParameter+0xc0>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 0) & 0xFF;
    f91a:	4872      	ldr	r0, [pc, #456]	; (fae4 <handleParameter+0x5ec>)
    f91c:	2105      	movs	r1, #5
		if(readWrite == READ) {
    f91e:	b925      	cbnz	r5, f92a <handleParameter+0x432>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 0) & 0xFF;
    f920:	f011 fe45 	bl	215ae <tmc4330_readInt>
    f924:	b2c0      	uxtb	r0, r0
    f926:	6030      	str	r0, [r6, #0]
    f928:	e646      	b.n	f5b8 <handleParameter+0xc0>
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<0);
    f92a:	f011 fe40 	bl	215ae <tmc4330_readInt>
			uvalue |= (*value & 0xFF) << 0;
    f92e:	7832      	ldrb	r2, [r6, #0]
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<0);
    f930:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
			tmc4330_writeInt(motorToIC(motor), TMC4330_SCALE_VALUES, uvalue);
    f934:	4302      	orrs	r2, r0
    f936:	2105      	movs	r1, #5
    f938:	486a      	ldr	r0, [pc, #424]	; (fae4 <handleParameter+0x5ec>)
    f93a:	f011 fe2a 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f93e:	2500      	movs	r5, #0
    f940:	e63a      	b.n	f5b8 <handleParameter+0xc0>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 8) & 0xFF;
    f942:	4868      	ldr	r0, [pc, #416]	; (fae4 <handleParameter+0x5ec>)
    f944:	2105      	movs	r1, #5
		if(readWrite == READ) {
    f946:	b92d      	cbnz	r5, f954 <handleParameter+0x45c>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 8) & 0xFF;
    f948:	f011 fe31 	bl	215ae <tmc4330_readInt>
    f94c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    f950:	6030      	str	r0, [r6, #0]
    f952:	e631      	b.n	f5b8 <handleParameter+0xc0>
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<8);
    f954:	f011 fe2b 	bl	215ae <tmc4330_readInt>
			uvalue |= (*value & 0xFF) << 8;
    f958:	6833      	ldr	r3, [r6, #0]
    f95a:	021b      	lsls	r3, r3, #8
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<8);
    f95c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
			uvalue |= (*value & 0xFF) << 8;
    f960:	b29b      	uxth	r3, r3
			tmc4330_writeInt(motorToIC(motor), TMC4330_SCALE_VALUES, uvalue);
    f962:	4860      	ldr	r0, [pc, #384]	; (fae4 <handleParameter+0x5ec>)
    f964:	431a      	orrs	r2, r3
    f966:	2105      	movs	r1, #5
    f968:	f011 fe13 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f96c:	2500      	movs	r5, #0
    f96e:	e623      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f970:	b928      	cbnz	r0, f97e <handleParameter+0x486>
			*value = TMC4330.config->shadowRegister[TMC4330_CL_VMAX_CALC_P_WR];
    f972:	4b5d      	ldr	r3, [pc, #372]	; (fae8 <handleParameter+0x5f0>)
    f974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f976:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f97a:	6033      	str	r3, [r6, #0]
    f97c:	e61c      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_VMAX_CALC_P_WR, *value);
    f97e:	6832      	ldr	r2, [r6, #0]
    f980:	4858      	ldr	r0, [pc, #352]	; (fae4 <handleParameter+0x5ec>)
    f982:	215a      	movs	r1, #90	; 0x5a
    f984:	f011 fe05 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f988:	2500      	movs	r5, #0
    f98a:	e615      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f98c:	b928      	cbnz	r0, f99a <handleParameter+0x4a2>
			*value = TMC4330.config->shadowRegister[TMC4330_CL_VMAX_CALC_I_WR];
    f98e:	4b56      	ldr	r3, [pc, #344]	; (fae8 <handleParameter+0x5f0>)
    f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f992:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
    f996:	6033      	str	r3, [r6, #0]
    f998:	e60e      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_VMAX_CALC_I_WR, *value);
    f99a:	6832      	ldr	r2, [r6, #0]
    f99c:	4851      	ldr	r0, [pc, #324]	; (fae4 <handleParameter+0x5ec>)
    f99e:	215b      	movs	r1, #91	; 0x5b
    f9a0:	f011 fdf7 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f9a4:	2500      	movs	r5, #0
    f9a6:	e607      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f9a8:	484f      	ldr	r0, [pc, #316]	; (fae8 <handleParameter+0x5f0>)
    f9aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f9ac:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
    f9b0:	b91d      	cbnz	r5, f9ba <handleParameter+0x4c2>
			*value &= 0x7FFF;
    f9b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f9b6:	6033      	str	r3, [r6, #0]
    f9b8:	e5fe      	b.n	f5b8 <handleParameter+0xc0>
			uvalue |= (*value & 0x7FFF) << 0;
    f9ba:	6832      	ldr	r2, [r6, #0]
			uvalue &= ~(0x7FFF << 0);
    f9bc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
    f9c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
			uvalue |= (*value & 0x7FFF) << 0;
    f9c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
			tmc4330_writeInt(motorToIC(motor), TMC4330_PID_I_WR, uvalue);
    f9c8:	431a      	orrs	r2, r3
    f9ca:	215b      	movs	r1, #91	; 0x5b
    f9cc:	3024      	adds	r0, #36	; 0x24
    f9ce:	f011 fde0 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f9d2:	2500      	movs	r5, #0
    f9d4:	e5f0      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    f9d6:	4844      	ldr	r0, [pc, #272]	; (fae8 <handleParameter+0x5f0>)
    f9d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f9da:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
    f9de:	b91d      	cbnz	r5, f9e8 <handleParameter+0x4f0>
			*value &= 0xFF;
    f9e0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    f9e4:	6032      	str	r2, [r6, #0]
    f9e6:	e5e7      	b.n	f5b8 <handleParameter+0xc0>
			uvalue |= (*value & 0xFF) << 16;
    f9e8:	6833      	ldr	r3, [r6, #0]
    f9ea:	041b      	lsls	r3, r3, #16
    f9ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
    f9f0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4330_writeInt(motorToIC(motor), TMC4330_PID_I_WR, uvalue);
    f9f4:	431a      	orrs	r2, r3
    f9f6:	215b      	movs	r1, #91	; 0x5b
    f9f8:	3024      	adds	r0, #36	; 0x24
    f9fa:	f011 fdca 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    f9fe:	2500      	movs	r5, #0
    fa00:	e5da      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fa02:	b928      	cbnz	r0, fa10 <handleParameter+0x518>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_PID_DV_CLIP_WR);
    fa04:	4837      	ldr	r0, [pc, #220]	; (fae4 <handleParameter+0x5ec>)
    fa06:	215e      	movs	r1, #94	; 0x5e
    fa08:	f011 fdd1 	bl	215ae <tmc4330_readInt>
    fa0c:	6030      	str	r0, [r6, #0]
    fa0e:	e5d3      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_PID_DV_CLIP_WR, *value);
    fa10:	6832      	ldr	r2, [r6, #0]
    fa12:	4834      	ldr	r0, [pc, #208]	; (fae4 <handleParameter+0x5ec>)
    fa14:	215e      	movs	r1, #94	; 0x5e
    fa16:	f011 fdbc 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fa1a:	2500      	movs	r5, #0
    fa1c:	e5cc      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fa1e:	b928      	cbnz	r0, fa2c <handleParameter+0x534>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_DELTA_P_WR);
    fa20:	4830      	ldr	r0, [pc, #192]	; (fae4 <handleParameter+0x5ec>)
    fa22:	215c      	movs	r1, #92	; 0x5c
    fa24:	f011 fdc3 	bl	215ae <tmc4330_readInt>
    fa28:	6030      	str	r0, [r6, #0]
    fa2a:	e5c5      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_DELTA_P_WR, *value);
    fa2c:	6832      	ldr	r2, [r6, #0]
    fa2e:	482d      	ldr	r0, [pc, #180]	; (fae4 <handleParameter+0x5ec>)
    fa30:	215c      	movs	r1, #92	; 0x5c
    fa32:	f011 fdae 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fa36:	2500      	movs	r5, #0
    fa38:	e5be      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fa3a:	b928      	cbnz	r0, fa48 <handleParameter+0x550>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_CL_TOLERANCE_WR);
    fa3c:	4829      	ldr	r0, [pc, #164]	; (fae4 <handleParameter+0x5ec>)
    fa3e:	215f      	movs	r1, #95	; 0x5f
    fa40:	f011 fdb5 	bl	215ae <tmc4330_readInt>
    fa44:	6030      	str	r0, [r6, #0]
    fa46:	e5b7      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_TOLERANCE_WR, *value);
    fa48:	6832      	ldr	r2, [r6, #0]
    fa4a:	4826      	ldr	r0, [pc, #152]	; (fae4 <handleParameter+0x5ec>)
    fa4c:	215f      	movs	r1, #95	; 0x5f
    fa4e:	f011 fda0 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fa52:	2500      	movs	r5, #0
    fa54:	e5b0      	b.n	f5b8 <handleParameter+0xc0>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 16) & 0xFF;
    fa56:	4823      	ldr	r0, [pc, #140]	; (fae4 <handleParameter+0x5ec>)
    fa58:	2105      	movs	r1, #5
		if(readWrite == READ) {
    fa5a:	b92d      	cbnz	r5, fa68 <handleParameter+0x570>
			*value = (tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) >> 16) & 0xFF;
    fa5c:	f011 fda7 	bl	215ae <tmc4330_readInt>
    fa60:	f3c0 4007 	ubfx	r0, r0, #16, #8
    fa64:	6030      	str	r0, [r6, #0]
    fa66:	e5a7      	b.n	f5b8 <handleParameter+0xc0>
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<16);
    fa68:	f011 fda1 	bl	215ae <tmc4330_readInt>
			uvalue |= (*value & 0xFF) << 16;
    fa6c:	6833      	ldr	r3, [r6, #0]
    fa6e:	041b      	lsls	r3, r3, #16
			uvalue = tmc4330_readInt(motorToIC(motor), TMC4330_SCALE_VALUES) & ~(0xFF<<16);
    fa70:	f420 027f 	bic.w	r2, r0, #16711680	; 0xff0000
			uvalue |= (*value & 0xFF) << 16;
    fa74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			tmc4330_writeInt(motorToIC(motor), TMC4330_SCALE_VALUES, uvalue);
    fa78:	481a      	ldr	r0, [pc, #104]	; (fae4 <handleParameter+0x5ec>)
    fa7a:	431a      	orrs	r2, r3
    fa7c:	2105      	movs	r1, #5
    fa7e:	f011 fd88 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fa82:	2500      	movs	r5, #0
    fa84:	e598      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fa86:	b148      	cbz	r0, fa9c <handleParameter+0x5a4>
			if(*value)
    fa88:	6835      	ldr	r5, [r6, #0]
    fa8a:	b14d      	cbz	r5, faa0 <handleParameter+0x5a8>
				*value = tmc4330_calibrateClosedLoop(motorToIC(motor), 1);
    fa8c:	4815      	ldr	r0, [pc, #84]	; (fae4 <handleParameter+0x5ec>)
    fa8e:	2101      	movs	r1, #1
    fa90:	f011 fe5e 	bl	21750 <tmc4330_calibrateClosedLoop>
    fa94:	6030      	str	r0, [r6, #0]
				if(!*value)
    fa96:	2800      	cmp	r0, #0
    fa98:	f000 80b5 	beq.w	fc06 <handleParameter+0x70e>
	uint32_t errors = TMC_ERROR_NONE;
    fa9c:	2500      	movs	r5, #0
    fa9e:	e58b      	b.n	f5b8 <handleParameter+0xc0>
				uvalue 	= tmc4330_readInt(motorToIC(motor), TMC4330_ENC_IN_CONF);
    faa0:	2107      	movs	r1, #7
    faa2:	4810      	ldr	r0, [pc, #64]	; (fae4 <handleParameter+0x5ec>)
    faa4:	f011 fd83 	bl	215ae <tmc4330_readInt>
				tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_IN_CONF, uvalue);
    faa8:	2107      	movs	r1, #7
    faaa:	f420 0280 	bic.w	r2, r0, #4194304	; 0x400000
    faae:	480d      	ldr	r0, [pc, #52]	; (fae4 <handleParameter+0x5ec>)
    fab0:	f011 fd6f 	bl	21592 <tmc4330_writeInt>
    fab4:	e580      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fab6:	2800      	cmp	r0, #0
    fab8:	f040 80a7 	bne.w	fc0a <handleParameter+0x712>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_V_ENC_RD);
    fabc:	4809      	ldr	r0, [pc, #36]	; (fae4 <handleParameter+0x5ec>)
    fabe:	2165      	movs	r1, #101	; 0x65
    fac0:	f011 fd75 	bl	215ae <tmc4330_readInt>
    fac4:	6030      	str	r0, [r6, #0]
    fac6:	e577      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fac8:	2800      	cmp	r0, #0
    faca:	d1e7      	bne.n	fa9c <handleParameter+0x5a4>
			uvalue 	= tmc4330_readInt(motorToIC(motor), TMC4330_ENC_IN_CONF);
    facc:	4805      	ldr	r0, [pc, #20]	; (fae4 <handleParameter+0x5ec>)
    face:	2107      	movs	r1, #7
    fad0:	f011 fd6d 	bl	215ae <tmc4330_readInt>
			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
    fad4:	f3c0 5081 	ubfx	r0, r0, #22, #2
    fad8:	1e43      	subs	r3, r0, #1
    fada:	4258      	negs	r0, r3
    fadc:	4158      	adcs	r0, r3
    fade:	6030      	str	r0, [r6, #0]
    fae0:	e56a      	b.n	f5b8 <handleParameter+0xc0>
    fae2:	bf00      	nop
    fae4:	1fff2600 	.word	0x1fff2600
    fae8:	1fff25dc 	.word	0x1fff25dc
		if(readWrite == READ) {
    faec:	b928      	cbnz	r0, fafa <handleParameter+0x602>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_ENC_POS_DEV_RD);
    faee:	4848      	ldr	r0, [pc, #288]	; (fc10 <handleParameter+0x718>)
    faf0:	2152      	movs	r1, #82	; 0x52
    faf2:	f011 fd5c 	bl	215ae <tmc4330_readInt>
    faf6:	6030      	str	r0, [r6, #0]
    faf8:	e55e      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_CL_TR_TOLERANCE_WR, *value);
    fafa:	6832      	ldr	r2, [r6, #0]
    fafc:	4844      	ldr	r0, [pc, #272]	; (fc10 <handleParameter+0x718>)
    fafe:	2152      	movs	r1, #82	; 0x52
    fb00:	f011 fd47 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fb04:	2500      	movs	r5, #0
    fb06:	e557      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fb08:	4842      	ldr	r0, [pc, #264]	; (fc14 <handleParameter+0x71c>)
    fb0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fb0c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
    fb10:	b915      	cbnz	r5, fb18 <handleParameter+0x620>
			*value = (TMC4330.config->shadowRegister[TMC4330_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
    fb12:	b2d2      	uxtb	r2, r2
    fb14:	6032      	str	r2, [r6, #0]
    fb16:	e54f      	b.n	f5b8 <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 0;
    fb18:	6833      	ldr	r3, [r6, #0]
			uvalue &= ~(0xFF << 0);
    fb1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			uvalue |= (*value & 0x0F) << 0;
    fb1e:	f003 030f 	and.w	r3, r3, #15
			tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_VMEAN_WAIT_WR, uvalue);
    fb22:	431a      	orrs	r2, r3
    fb24:	2163      	movs	r1, #99	; 0x63
    fb26:	3024      	adds	r0, #36	; 0x24
    fb28:	f011 fd33 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fb2c:	2500      	movs	r5, #0
    fb2e:	e543      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fb30:	4838      	ldr	r0, [pc, #224]	; (fc14 <handleParameter+0x71c>)
    fb32:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fb34:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
    fb38:	b91d      	cbnz	r5, fb42 <handleParameter+0x64a>
			*value = (TMC4330.config->shadowRegister[TMC4330_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
    fb3a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    fb3e:	6032      	str	r2, [r6, #0]
    fb40:	e53a      	b.n	f5b8 <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 8;
    fb42:	6833      	ldr	r3, [r6, #0]
    fb44:	021b      	lsls	r3, r3, #8
    fb46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			uvalue &= ~(0xF << 8);
    fb4a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
			tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_VMEAN_WAIT_WR, uvalue);
    fb4e:	431a      	orrs	r2, r3
    fb50:	2163      	movs	r1, #99	; 0x63
    fb52:	3024      	adds	r0, #36	; 0x24
    fb54:	f011 fd1d 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fb58:	2500      	movs	r5, #0
    fb5a:	e52d      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fb5c:	482d      	ldr	r0, [pc, #180]	; (fc14 <handleParameter+0x71c>)
    fb5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fb60:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
    fb64:	b91d      	cbnz	r5, fb6e <handleParameter+0x676>
			*value = (TMC4330.config->shadowRegister[TMC4330_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
    fb66:	f3c2 4207 	ubfx	r2, r2, #16, #8
    fb6a:	6032      	str	r2, [r6, #0]
    fb6c:	e524      	b.n	f5b8 <handleParameter+0xc0>
			uvalue |= (*value & 0x0FF) << 16;
    fb6e:	6833      	ldr	r3, [r6, #0]
    fb70:	041b      	lsls	r3, r3, #16
    fb72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
    fb76:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_VMEAN_WAIT_WR, uvalue);
    fb7a:	431a      	orrs	r2, r3
    fb7c:	2163      	movs	r1, #99	; 0x63
    fb7e:	3024      	adds	r0, #36	; 0x24
    fb80:	f011 fd07 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fb84:	2500      	movs	r5, #0
    fb86:	e517      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fb88:	b928      	cbnz	r0, fb96 <handleParameter+0x69e>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_ENC_POS);
    fb8a:	4821      	ldr	r0, [pc, #132]	; (fc10 <handleParameter+0x718>)
    fb8c:	2150      	movs	r1, #80	; 0x50
    fb8e:	f011 fd0e 	bl	215ae <tmc4330_readInt>
    fb92:	6030      	str	r0, [r6, #0]
    fb94:	e510      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_POS, *value);
    fb96:	681a      	ldr	r2, [r3, #0]
    fb98:	481d      	ldr	r0, [pc, #116]	; (fc10 <handleParameter+0x718>)
    fb9a:	2150      	movs	r1, #80	; 0x50
    fb9c:	f011 fcf9 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fba0:	4625      	mov	r5, r4
    fba2:	e509      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fba4:	b920      	cbnz	r0, fbb0 <handleParameter+0x6b8>
			*value = TMC4330.config->shadowRegister[TMC4330_SCALE_VALUES]; // todo CHECK 3: shouldn't this register be TMC4330_ENC_POS_DEV_TOL_WR like below? (BS) #1
    fba6:	4b1b      	ldr	r3, [pc, #108]	; (fc14 <handleParameter+0x71c>)
    fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fbaa:	699b      	ldr	r3, [r3, #24]
    fbac:	6033      	str	r3, [r6, #0]
    fbae:	e503      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_ENC_POS_DEV_TOL_WR, *value);
    fbb0:	681a      	ldr	r2, [r3, #0]
    fbb2:	4817      	ldr	r0, [pc, #92]	; (fc10 <handleParameter+0x718>)
    fbb4:	2153      	movs	r1, #83	; 0x53
    fbb6:	f011 fcec 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fbba:	4625      	mov	r5, r4
    fbbc:	e4fc      	b.n	f5b8 <handleParameter+0xc0>
		if(readWrite == READ) {
    fbbe:	b928      	cbnz	r0, fbcc <handleParameter+0x6d4>
			*value = tmc4330_readInt(motorToIC(motor), TMC4330_STDBY_DELAY);
    fbc0:	4813      	ldr	r0, [pc, #76]	; (fc10 <handleParameter+0x718>)
    fbc2:	2115      	movs	r1, #21
    fbc4:	f011 fcf3 	bl	215ae <tmc4330_readInt>
    fbc8:	6030      	str	r0, [r6, #0]
    fbca:	e4f5      	b.n	f5b8 <handleParameter+0xc0>
			tmc4330_writeInt(motorToIC(motor), TMC4330_STDBY_DELAY, *value*160000);
    fbcc:	681b      	ldr	r3, [r3, #0]
    fbce:	4a12      	ldr	r2, [pc, #72]	; (fc18 <handleParameter+0x720>)
    fbd0:	480f      	ldr	r0, [pc, #60]	; (fc10 <handleParameter+0x718>)
    fbd2:	435a      	muls	r2, r3
    fbd4:	2115      	movs	r1, #21
    fbd6:	f011 fcdc 	bl	21592 <tmc4330_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
    fbda:	4625      	mov	r5, r4
    fbdc:	e4ec      	b.n	f5b8 <handleParameter+0xc0>
		return TMC_ERROR_MOTOR;
    fbde:	2508      	movs	r5, #8
    fbe0:	e4ea      	b.n	f5b8 <handleParameter+0xc0>
	switch(type)
    fbe2:	2504      	movs	r5, #4
    fbe4:	e4e8      	b.n	f5b8 <handleParameter+0xc0>
    fbe6:	2504      	movs	r5, #4
    fbe8:	e4e6      	b.n	f5b8 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
    fbea:	2504      	movs	r5, #4
    fbec:	e4e4      	b.n	f5b8 <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
    fbee:	2510      	movs	r5, #16
    fbf0:	e4e2      	b.n	f5b8 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
    fbf2:	2504      	movs	r5, #4
    fbf4:	e4e0      	b.n	f5b8 <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
    fbf6:	2510      	movs	r5, #16
    fbf8:	e4de      	b.n	f5b8 <handleParameter+0xc0>
    fbfa:	2510      	movs	r5, #16
    fbfc:	e4dc      	b.n	f5b8 <handleParameter+0xc0>
    fbfe:	2510      	movs	r5, #16
    fc00:	e4da      	b.n	f5b8 <handleParameter+0xc0>
    fc02:	2510      	movs	r5, #16
    fc04:	e4d8      	b.n	f5b8 <handleParameter+0xc0>
					errors |= TMC_ERROR_NOT_DONE;
    fc06:	2520      	movs	r5, #32
    fc08:	e4d6      	b.n	f5b8 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
    fc0a:	2504      	movs	r5, #4
    fc0c:	e4d4      	b.n	f5b8 <handleParameter+0xc0>
    fc0e:	bf00      	nop
    fc10:	1fff2600 	.word	0x1fff2600
    fc14:	1fff25dc 	.word	0x1fff25dc
    fc18:	00027100 	.word	0x00027100

0000fc1c <SAP>:
{
    fc1c:	b507      	push	{r0, r1, r2, lr}
    fc1e:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
    fc20:	ab01      	add	r3, sp, #4
    fc22:	4602      	mov	r2, r0
    fc24:	2001      	movs	r0, #1
    fc26:	f7ff fc67 	bl	f4f8 <handleParameter>
}
    fc2a:	b003      	add	sp, #12
    fc2c:	f85d fb04 	ldr.w	pc, [sp], #4

0000fc30 <GAP>:
{
    fc30:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
    fc32:	4602      	mov	r2, r0
    fc34:	2000      	movs	r0, #0
    fc36:	e45f      	b.n	f4f8 <handleParameter>

0000fc38 <stop>:
{
    fc38:	b508      	push	{r3, lr}
	tmc4330_rotate(motorToIC(motor), velocity);
    fc3a:	4803      	ldr	r0, [pc, #12]	; (fc48 <stop+0x10>)
    fc3c:	2100      	movs	r1, #0
    fc3e:	f011 fd3d 	bl	216bc <tmc4330_rotate>
}
    fc42:	2000      	movs	r0, #0
    fc44:	bd08      	pop	{r3, pc}
    fc46:	bf00      	nop
    fc48:	1fff2600 	.word	0x1fff2600

0000fc4c <left>:
{
    fc4c:	b508      	push	{r3, lr}
	tmc4330_rotate(motorToIC(motor), velocity);
    fc4e:	4803      	ldr	r0, [pc, #12]	; (fc5c <left+0x10>)
    fc50:	4249      	negs	r1, r1
    fc52:	f011 fd33 	bl	216bc <tmc4330_rotate>
}
    fc56:	2000      	movs	r0, #0
    fc58:	bd08      	pop	{r3, pc}
    fc5a:	bf00      	nop
    fc5c:	1fff2600 	.word	0x1fff2600

0000fc60 <right>:
{
    fc60:	b508      	push	{r3, lr}
	tmc4330_rotate(motorToIC(motor), velocity);
    fc62:	4802      	ldr	r0, [pc, #8]	; (fc6c <right+0xc>)
    fc64:	f011 fd2a 	bl	216bc <tmc4330_rotate>
}
    fc68:	2000      	movs	r0, #0
    fc6a:	bd08      	pop	{r3, pc}
    fc6c:	1fff2600 	.word	0x1fff2600

0000fc70 <restore>:

	return 1;
}

static uint8_t restore()
{
    fc70:	b538      	push	{r3, r4, r5, lr}
	// Pulse the low-active hardware reset pin
	HAL.IOs->config->setLow(Pins.NRST);
    fc72:	4b0a      	ldr	r3, [pc, #40]	; (fc9c <restore+0x2c>)
    fc74:	4c0a      	ldr	r4, [pc, #40]	; (fca0 <restore+0x30>)
    fc76:	68dd      	ldr	r5, [r3, #12]
    fc78:	6860      	ldr	r0, [r4, #4]
    fc7a:	682b      	ldr	r3, [r5, #0]
    fc7c:	699b      	ldr	r3, [r3, #24]
    fc7e:	4798      	blx	r3
	wait(1);
    fc80:	2001      	movs	r0, #1
    fc82:	f00c fb5d 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
    fc86:	682b      	ldr	r3, [r5, #0]
    fc88:	6860      	ldr	r0, [r4, #4]
    fc8a:	695b      	ldr	r3, [r3, #20]
    fc8c:	4798      	blx	r3

	tmc4330_restore(&TMC4330);
    fc8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    fc92:	f011 fce8 	bl	21666 <tmc4330_restore>

	return 1;
}
    fc96:	2001      	movs	r0, #1
    fc98:	bd38      	pop	{r3, r4, r5, pc}
    fc9a:	bf00      	nop
    fc9c:	00029d1c 	.word	0x00029d1c
    fca0:	1fff25dc 	.word	0x1fff25dc

0000fca4 <reset>:
{
    fca4:	b538      	push	{r3, r4, r5, lr}
	HAL.IOs->config->setLow(Pins.NRST);
    fca6:	4b0a      	ldr	r3, [pc, #40]	; (fcd0 <reset+0x2c>)
    fca8:	4c0a      	ldr	r4, [pc, #40]	; (fcd4 <reset+0x30>)
    fcaa:	68dd      	ldr	r5, [r3, #12]
    fcac:	6860      	ldr	r0, [r4, #4]
    fcae:	682b      	ldr	r3, [r5, #0]
    fcb0:	699b      	ldr	r3, [r3, #24]
    fcb2:	4798      	blx	r3
	wait(1);
    fcb4:	2001      	movs	r0, #1
    fcb6:	f00c fb43 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
    fcba:	682b      	ldr	r3, [r5, #0]
    fcbc:	6860      	ldr	r0, [r4, #4]
    fcbe:	695b      	ldr	r3, [r3, #20]
    fcc0:	4798      	blx	r3
	tmc4330_reset(&TMC4330);
    fcc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    fcc6:	f011 fcbb 	bl	21640 <tmc4330_reset>
}
    fcca:	2001      	movs	r0, #1
    fccc:	bd38      	pop	{r3, r4, r5, pc}
    fcce:	bf00      	nop
    fcd0:	00029d1c 	.word	0x00029d1c
    fcd4:	1fff25dc 	.word	0x1fff25dc

0000fcd8 <rotate>:
    fcd8:	b508      	push	{r3, lr}
    fcda:	4802      	ldr	r0, [pc, #8]	; (fce4 <rotate+0xc>)
    fcdc:	f011 fcee 	bl	216bc <tmc4330_rotate>
    fce0:	2000      	movs	r0, #0
    fce2:	bd08      	pop	{r3, pc}
    fce4:	1fff2600 	.word	0x1fff2600

0000fce8 <tmc4330_readWriteArray>:
	return TMC4330_SPIChannel;
    fce8:	4b03      	ldr	r3, [pc, #12]	; (fcf8 <tmc4330_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
    fcea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
{
    fcee:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
    fcf0:	68db      	ldr	r3, [r3, #12]
    fcf2:	4611      	mov	r1, r2
    fcf4:	4718      	bx	r3
    fcf6:	bf00      	nop
    fcf8:	1fff25dc 	.word	0x1fff25dc

0000fcfc <TMC4330_init>:

void TMC4330_init(void)
{
    fcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc4330_init(&TMC4330, 0, Evalboards.ch1.config, &tmc4330_defaultRegisterResetState[0]);
    fcfe:	4c48      	ldr	r4, [pc, #288]	; (fe20 <TMC4330_init+0x124>)
    fd00:	4d48      	ldr	r5, [pc, #288]	; (fe24 <TMC4330_init+0x128>)

	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
    fd02:	4f49      	ldr	r7, [pc, #292]	; (fe28 <TMC4330_init+0x12c>)
	tmc4330_init(&TMC4330, 0, Evalboards.ch1.config, &tmc4330_defaultRegisterResetState[0]);
    fd04:	4b49      	ldr	r3, [pc, #292]	; (fe2c <TMC4330_init+0x130>)
    fd06:	69aa      	ldr	r2, [r5, #24]
    fd08:	2100      	movs	r1, #0
    fd0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    fd0e:	f011 fc76 	bl	215fe <tmc4330_init>
	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
    fd12:	68fe      	ldr	r6, [r7, #12]
    fd14:	6873      	ldr	r3, [r6, #4]
    fd16:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
    fd1a:	6222      	str	r2, [r4, #32]
	Pins.INTR            = &HAL.IOs->pins->DIO5;
    fd1c:	f503 7284 	add.w	r2, r3, #264	; 0x108
    fd20:	61e2      	str	r2, [r4, #28]
	Pins.STOP_L          = &HAL.IOs->pins->DIO12;
    fd22:	f503 7252 	add.w	r2, r3, #840	; 0x348
    fd26:	61a2      	str	r2, [r4, #24]
	Pins.STOP_R          = &HAL.IOs->pins->DIO13;
    fd28:	f503 725a 	add.w	r2, r3, #872	; 0x368
    fd2c:	6162      	str	r2, [r4, #20]
	Pins.HOME_REF        = &HAL.IOs->pins->DIO14;
    fd2e:	f503 7262 	add.w	r2, r3, #904	; 0x388
    fd32:	6122      	str	r2, [r4, #16]
	Pins.START           = &HAL.IOs->pins->DIO15;
    fd34:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
	Pins.NRST            = &HAL.IOs->pins->DIO17;
    fd38:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
	Pins.START           = &HAL.IOs->pins->DIO15;
    fd3c:	60e2      	str	r2, [r4, #12]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
    fd3e:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
    fd42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    fd46:	6023      	str	r3, [r4, #0]

	HAL.IOs->config->toOutput(Pins.NRST);
    fd48:	6833      	ldr	r3, [r6, #0]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
    fd4a:	60a2      	str	r2, [r4, #8]
	HAL.IOs->config->toOutput(Pins.NRST);
    fd4c:	68db      	ldr	r3, [r3, #12]
	Pins.NRST            = &HAL.IOs->pins->DIO17;
    fd4e:	6060      	str	r0, [r4, #4]
	HAL.IOs->config->toOutput(Pins.NRST);
    fd50:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_L);
    fd52:	6833      	ldr	r3, [r6, #0]
    fd54:	69a0      	ldr	r0, [r4, #24]
    fd56:	68db      	ldr	r3, [r3, #12]
    fd58:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_R);
    fd5a:	6833      	ldr	r3, [r6, #0]
    fd5c:	6960      	ldr	r0, [r4, #20]
    fd5e:	68db      	ldr	r3, [r3, #12]
    fd60:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.HOME_REF);
    fd62:	6833      	ldr	r3, [r6, #0]
    fd64:	6920      	ldr	r0, [r4, #16]
    fd66:	68db      	ldr	r3, [r3, #12]
    fd68:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.START);
    fd6a:	6833      	ldr	r3, [r6, #0]
    fd6c:	68e0      	ldr	r0, [r4, #12]
    fd6e:	68db      	ldr	r3, [r3, #12]
    fd70:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.FREEZE);
    fd72:	6833      	ldr	r3, [r6, #0]
    fd74:	68a0      	ldr	r0, [r4, #8]
    fd76:	68db      	ldr	r3, [r3, #12]
    fd78:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.NRST);
    fd7a:	6833      	ldr	r3, [r6, #0]
    fd7c:	6860      	ldr	r0, [r4, #4]
    fd7e:	695b      	ldr	r3, [r3, #20]
    fd80:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.STOP_L);
    fd82:	6833      	ldr	r3, [r6, #0]
    fd84:	69a0      	ldr	r0, [r4, #24]
    fd86:	695b      	ldr	r3, [r3, #20]
    fd88:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.STOP_R);
    fd8a:	6833      	ldr	r3, [r6, #0]
    fd8c:	6960      	ldr	r0, [r4, #20]
    fd8e:	695b      	ldr	r3, [r3, #20]
    fd90:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.HOME_REF);
    fd92:	6833      	ldr	r3, [r6, #0]
    fd94:	6920      	ldr	r0, [r4, #16]
    fd96:	695b      	ldr	r3, [r3, #20]
    fd98:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.START);
    fd9a:	6833      	ldr	r3, [r6, #0]
    fd9c:	68e0      	ldr	r0, [r4, #12]
    fd9e:	695b      	ldr	r3, [r3, #20]
    fda0:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.FREEZE);
    fda2:	6833      	ldr	r3, [r6, #0]
    fda4:	68a0      	ldr	r0, [r4, #8]
    fda6:	695b      	ldr	r3, [r3, #20]
    fda8:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.STANDBY_CLK);
    fdaa:	6833      	ldr	r3, [r6, #0]
    fdac:	6a20      	ldr	r0, [r4, #32]
    fdae:	691b      	ldr	r3, [r3, #16]
    fdb0:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INTR);
    fdb2:	6833      	ldr	r3, [r6, #0]
    fdb4:	69e0      	ldr	r0, [r4, #28]
    fdb6:	691b      	ldr	r3, [r3, #16]
    fdb8:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.TARGET_REACHED);
    fdba:	6833      	ldr	r3, [r6, #0]
    fdbc:	6820      	ldr	r0, [r4, #0]
    fdbe:	691b      	ldr	r3, [r3, #16]
    fdc0:	4798      	blx	r3

	TMC4330_SPIChannel = &HAL.SPI->ch1;
	TMC4330_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
    fdc2:	6873      	ldr	r3, [r6, #4]
	TMC4330_SPIChannel = &HAL.SPI->ch1;
    fdc4:	693a      	ldr	r2, [r7, #16]

	Evalboards.ch1.config->state        = CONFIG_RESET;
	Evalboards.ch1.config->configIndex  = 0;
	Evalboards.ch1.config->reset        = reset;
    fdc6:	491a      	ldr	r1, [pc, #104]	; (fe30 <TMC4330_init+0x134>)
	TMC4330_SPIChannel = &HAL.SPI->ch1;
    fdc8:	f8c4 22bc 	str.w	r2, [r4, #700]	; 0x2bc
	TMC4330_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
    fdcc:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
    fdd0:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->state        = CONFIG_RESET;
    fdd2:	69ab      	ldr	r3, [r5, #24]
    fdd4:	2201      	movs	r2, #1
	Evalboards.ch1.config->reset        = reset;
    fdd6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
    fdda:	4916      	ldr	r1, [pc, #88]	; (fe34 <TMC4330_init+0x138>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
    fddc:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->restore      = restore;
    fdde:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208

	Evalboards.ch1.rotate               = rotate;
    fde2:	4b15      	ldr	r3, [pc, #84]	; (fe38 <TMC4330_init+0x13c>)
    fde4:	626b      	str	r3, [r5, #36]	; 0x24
	Evalboards.ch1.right                = right;
    fde6:	4b15      	ldr	r3, [pc, #84]	; (fe3c <TMC4330_init+0x140>)
    fde8:	622b      	str	r3, [r5, #32]
	Evalboards.ch1.left                 = left;
    fdea:	4b15      	ldr	r3, [pc, #84]	; (fe40 <TMC4330_init+0x144>)
    fdec:	61eb      	str	r3, [r5, #28]
	Evalboards.ch1.stop                 = stop;
    fdee:	4b15      	ldr	r3, [pc, #84]	; (fe44 <TMC4330_init+0x148>)
    fdf0:	62ab      	str	r3, [r5, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
    fdf2:	4b15      	ldr	r3, [pc, #84]	; (fe48 <TMC4330_init+0x14c>)
    fdf4:	63eb      	str	r3, [r5, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
    fdf6:	4b15      	ldr	r3, [pc, #84]	; (fe4c <TMC4330_init+0x150>)
    fdf8:	63ab      	str	r3, [r5, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
    fdfa:	4b15      	ldr	r3, [pc, #84]	; (fe50 <TMC4330_init+0x154>)
    fdfc:	62eb      	str	r3, [r5, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
    fdfe:	4b15      	ldr	r3, [pc, #84]	; (fe54 <TMC4330_init+0x158>)
    fe00:	632b      	str	r3, [r5, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
    fe02:	4b15      	ldr	r3, [pc, #84]	; (fe58 <TMC4330_init+0x15c>)
    fe04:	64eb      	str	r3, [r5, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
    fe06:	4b15      	ldr	r3, [pc, #84]	; (fe5c <TMC4330_init+0x160>)
    fe08:	64ab      	str	r3, [r5, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
    fe0a:	4b15      	ldr	r3, [pc, #84]	; (fe60 <TMC4330_init+0x164>)
    fe0c:	65ab      	str	r3, [r5, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
    fe0e:	4b15      	ldr	r3, [pc, #84]	; (fe64 <TMC4330_init+0x168>)
    fe10:	656b      	str	r3, [r5, #84]	; 0x54
	Evalboards.ch1.checkErrors          = checkErrors;
    fe12:	4b15      	ldr	r3, [pc, #84]	; (fe68 <TMC4330_init+0x16c>)
    fe14:	662b      	str	r3, [r5, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC4330_MOTORS;
	Evalboards.ch1.deInit               = deInit;
    fe16:	4b15      	ldr	r3, [pc, #84]	; (fe6c <TMC4330_init+0x170>)
	Evalboards.ch1.numberOfMotors       = TMC4330_MOTORS;
    fe18:	752a      	strb	r2, [r5, #20]
	Evalboards.ch1.deInit               = deInit;
    fe1a:	65eb      	str	r3, [r5, #92]	; 0x5c
};
    fe1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1e:	bf00      	nop
    fe20:	1fff25dc 	.word	0x1fff25dc
    fe24:	1fff5e88 	.word	0x1fff5e88
    fe28:	00029d1c 	.word	0x00029d1c
    fe2c:	00028af8 	.word	0x00028af8
    fe30:	0000fca5 	.word	0x0000fca5
    fe34:	0000fc71 	.word	0x0000fc71
    fe38:	0000fcd9 	.word	0x0000fcd9
    fe3c:	0000fc61 	.word	0x0000fc61
    fe40:	0000fc4d 	.word	0x0000fc4d
    fe44:	0000fc39 	.word	0x0000fc39
    fe48:	0000fc31 	.word	0x0000fc31
    fe4c:	0000fc1d 	.word	0x0000fc1d
    fe50:	0000f4e1 	.word	0x0000f4e1
    fe54:	0000f4c9 	.word	0x0000f4c9
    fe58:	0000f4bd 	.word	0x0000f4bd
    fe5c:	0000f4a9 	.word	0x0000f4a9
    fe60:	0000f49d 	.word	0x0000f49d
    fe64:	0000f3c1 	.word	0x0000f3c1
    fe68:	0000f349 	.word	0x0000f349
    fe6c:	0000f355 	.word	0x0000f355

0000fe70 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
    fe70:	4b01      	ldr	r3, [pc, #4]	; (fe78 <checkErrors+0x8>)
    fe72:	2200      	movs	r2, #0
    fe74:	609a      	str	r2, [r3, #8]
}
    fe76:	4770      	bx	lr
    fe78:	1fff5e88 	.word	0x1fff5e88

0000fe7c <userFunction>:
static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
{
	UNUSED(motor);
	uint32_t errors = 0;

	switch(type)
    fe7c:	2803      	cmp	r0, #3
{
    fe7e:	b570      	push	{r4, r5, r6, lr}
    fe80:	4614      	mov	r4, r2
	switch(type)
    fe82:	d806      	bhi.n	fe92 <userFunction+0x16>
    fe84:	3801      	subs	r0, #1
    fe86:	2802      	cmp	r0, #2
    fe88:	d808      	bhi.n	fe9c <userFunction+0x20>
    fe8a:	e8df f000 	tbb	[pc, r0]
    fe8e:	3a2b      	.short	0x3a2b
    fe90:	53          	.byte	0x53
    fe91:	00          	.byte	0x00
    fe92:	28ff      	cmp	r0, #255	; 0xff
    fe94:	d043      	beq.n	ff1e <userFunction+0xa2>
    fe96:	2404      	movs	r4, #4
	default:
		errors |= TMC_ERROR_TYPE;
		break;
	}
	return errors;
}
    fe98:	4620      	mov	r0, r4
    fe9a:	bd70      	pop	{r4, r5, r6, pc}
		if(!(*value & ~3))
    fe9c:	6812      	ldr	r2, [r2, #0]
    fe9e:	f032 0303 	bics.w	r3, r2, #3
    fea2:	d110      	bne.n	fec6 <userFunction+0x4a>
			if(*value & (1<<0))
    fea4:	4b24      	ldr	r3, [pc, #144]	; (ff38 <userFunction+0xbc>)
    fea6:	4d25      	ldr	r5, [pc, #148]	; (ff3c <userFunction+0xc0>)
    fea8:	68de      	ldr	r6, [r3, #12]
    feaa:	6968      	ldr	r0, [r5, #20]
    feac:	6833      	ldr	r3, [r6, #0]
    feae:	07d2      	lsls	r2, r2, #31
    feb0:	d50b      	bpl.n	feca <userFunction+0x4e>
				HAL.IOs->config->toInput(Pins.STOP_R); // pull up -> set it to floating causes high
    feb2:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.STOP_R);
    feb4:	4798      	blx	r3
			if(*value & (1<<1))
    feb6:	6824      	ldr	r4, [r4, #0]
    feb8:	6832      	ldr	r2, [r6, #0]
    feba:	69a8      	ldr	r0, [r5, #24]
    febc:	f014 0402 	ands.w	r4, r4, #2
    fec0:	d009      	beq.n	fed6 <userFunction+0x5a>
				HAL.IOs->config->toInput(Pins.STOP_L); // pull up -> set it to floating causes high
    fec2:	6913      	ldr	r3, [r2, #16]
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
    fec4:	4798      	blx	r3
	uint32_t errors = 0;
    fec6:	2400      	movs	r4, #0
	return errors;
    fec8:	e7e6      	b.n	fe98 <userFunction+0x1c>
				HAL.IOs->config->toOutput(Pins.STOP_R);
    feca:	68db      	ldr	r3, [r3, #12]
    fecc:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_R);
    fece:	6833      	ldr	r3, [r6, #0]
    fed0:	6968      	ldr	r0, [r5, #20]
    fed2:	699b      	ldr	r3, [r3, #24]
    fed4:	e7ee      	b.n	feb4 <userFunction+0x38>
				HAL.IOs->config->toOutput(Pins.STOP_L);
    fed6:	68d3      	ldr	r3, [r2, #12]
    fed8:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_L);
    feda:	6833      	ldr	r3, [r6, #0]
    fedc:	69a8      	ldr	r0, [r5, #24]
    fede:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setLow(Pins.FREEZE);
    fee0:	4798      	blx	r3
    fee2:	e7d9      	b.n	fe98 <userFunction+0x1c>
		if(*value)
    fee4:	4b14      	ldr	r3, [pc, #80]	; (ff38 <userFunction+0xbc>)
    fee6:	4d15      	ldr	r5, [pc, #84]	; (ff3c <userFunction+0xc0>)
    fee8:	68de      	ldr	r6, [r3, #12]
    feea:	6814      	ldr	r4, [r2, #0]
    feec:	6928      	ldr	r0, [r5, #16]
    feee:	6833      	ldr	r3, [r6, #0]
    fef0:	b10c      	cbz	r4, fef6 <userFunction+0x7a>
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
    fef2:	691b      	ldr	r3, [r3, #16]
    fef4:	e7e6      	b.n	fec4 <userFunction+0x48>
			HAL.IOs->config->toOutput(Pins.HOME_REF);
    fef6:	68db      	ldr	r3, [r3, #12]
    fef8:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.HOME_REF);
    fefa:	6833      	ldr	r3, [r6, #0]
    fefc:	6928      	ldr	r0, [r5, #16]
    fefe:	699b      	ldr	r3, [r3, #24]
    ff00:	e7ee      	b.n	fee0 <userFunction+0x64>
		if(*value)
    ff02:	4b0d      	ldr	r3, [pc, #52]	; (ff38 <userFunction+0xbc>)
    ff04:	4d0d      	ldr	r5, [pc, #52]	; (ff3c <userFunction+0xc0>)
    ff06:	68de      	ldr	r6, [r3, #12]
    ff08:	6814      	ldr	r4, [r2, #0]
    ff0a:	6833      	ldr	r3, [r6, #0]
    ff0c:	68a8      	ldr	r0, [r5, #8]
    ff0e:	2c00      	cmp	r4, #0
    ff10:	d1ef      	bne.n	fef2 <userFunction+0x76>
			HAL.IOs->config->toOutput(Pins.FREEZE);
    ff12:	68db      	ldr	r3, [r3, #12]
    ff14:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.FREEZE);
    ff16:	6833      	ldr	r3, [r6, #0]
    ff18:	68a8      	ldr	r0, [r5, #8]
    ff1a:	699b      	ldr	r3, [r3, #24]
    ff1c:	e7e0      	b.n	fee0 <userFunction+0x64>
		Evalboards.ch2.config->reset();
    ff1e:	4c08      	ldr	r4, [pc, #32]	; (ff40 <userFunction+0xc4>)
    ff20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    ff24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    ff28:	4798      	blx	r3
		Evalboards.ch1.config->reset();
    ff2a:	69a3      	ldr	r3, [r4, #24]
    ff2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    ff30:	4798      	blx	r3
		break;
    ff32:	e7c8      	b.n	fec6 <userFunction+0x4a>
		errors |= TMC_ERROR_NOT_DONE;
    ff34:	2420      	movs	r4, #32
    ff36:	e7af      	b.n	fe98 <userFunction+0x1c>
    ff38:	00029d1c 	.word	0x00029d1c
    ff3c:	1fff28a8 	.word	0x1fff28a8
    ff40:	1fff5e88 	.word	0x1fff5e88

0000ff44 <deInit>:

static void deInit(void)
{
    ff44:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.NRST);
    ff46:	4e18      	ldr	r6, [pc, #96]	; (ffa8 <deInit+0x64>)
    ff48:	4c18      	ldr	r4, [pc, #96]	; (ffac <deInit+0x68>)
    ff4a:	68f5      	ldr	r5, [r6, #12]
    ff4c:	6860      	ldr	r0, [r4, #4]
    ff4e:	682b      	ldr	r3, [r5, #0]
    ff50:	699b      	ldr	r3, [r3, #24]
    ff52:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.STOP_L);
    ff54:	682b      	ldr	r3, [r5, #0]
    ff56:	69a0      	ldr	r0, [r4, #24]
    ff58:	689b      	ldr	r3, [r3, #8]
    ff5a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STOP_R);
    ff5c:	682b      	ldr	r3, [r5, #0]
    ff5e:	6960      	ldr	r0, [r4, #20]
    ff60:	689b      	ldr	r3, [r3, #8]
    ff62:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.HOME_REF);
    ff64:	682b      	ldr	r3, [r5, #0]
    ff66:	6920      	ldr	r0, [r4, #16]
    ff68:	689b      	ldr	r3, [r3, #8]
    ff6a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.START);
    ff6c:	682b      	ldr	r3, [r5, #0]
    ff6e:	68e0      	ldr	r0, [r4, #12]
    ff70:	689b      	ldr	r3, [r3, #8]
    ff72:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.FREEZE);
    ff74:	682b      	ldr	r3, [r5, #0]
    ff76:	68a0      	ldr	r0, [r4, #8]
    ff78:	689b      	ldr	r3, [r3, #8]
    ff7a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STANDBY_CLK);
    ff7c:	682b      	ldr	r3, [r5, #0]
    ff7e:	6a20      	ldr	r0, [r4, #32]
    ff80:	689b      	ldr	r3, [r3, #8]
    ff82:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INTR);
    ff84:	682b      	ldr	r3, [r5, #0]
    ff86:	69e0      	ldr	r0, [r4, #28]
    ff88:	689b      	ldr	r3, [r3, #8]
    ff8a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.TARGET_REACHED);
    ff8c:	682b      	ldr	r3, [r5, #0]
    ff8e:	6820      	ldr	r0, [r4, #0]
    ff90:	689b      	ldr	r3, [r3, #8]
    ff92:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.NRST);
    ff94:	682b      	ldr	r3, [r5, #0]
    ff96:	6860      	ldr	r0, [r4, #4]
    ff98:	689b      	ldr	r3, [r3, #8]
    ff9a:	4798      	blx	r3

	HAL.SPI->ch2.reset();
    ff9c:	6933      	ldr	r3, [r6, #16]
}
    ff9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.SPI->ch2.reset();
    ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffa4:	4718      	bx	r3
    ffa6:	bf00      	nop
    ffa8:	00029d1c 	.word	0x00029d1c
    ffac:	1fff28a8 	.word	0x1fff28a8

0000ffb0 <tmc4331_fullCover>:
{
    ffb0:	460a      	mov	r2, r1
	tmc4331_readWriteCover(&TMC4331, data, length);
    ffb2:	4601      	mov	r1, r0
    ffb4:	4801      	ldr	r0, [pc, #4]	; (ffbc <tmc4331_fullCover+0xc>)
    ffb6:	f011 bd42 	b.w	21a3e <tmc4331_readWriteCover>
    ffba:	bf00      	nop
    ffbc:	1fff28cc 	.word	0x1fff28cc

0000ffc0 <periodicJob>:
{
    ffc0:	4601      	mov	r1, r0
	tmc4331_periodicJob(&TMC4331, tick);
    ffc2:	4801      	ldr	r0, [pc, #4]	; (ffc8 <periodicJob+0x8>)
    ffc4:	f011 bde5 	b.w	21b92 <tmc4331_periodicJob>
    ffc8:	1fff28cc 	.word	0x1fff28cc

0000ffcc <readRegister>:
{
    ffcc:	b510      	push	{r4, lr}
	*value	= tmc4331_readInt(motorToIC(motor), address);
    ffce:	4803      	ldr	r0, [pc, #12]	; (ffdc <readRegister+0x10>)
{
    ffd0:	4614      	mov	r4, r2
	*value	= tmc4331_readInt(motorToIC(motor), address);
    ffd2:	f011 fd0c 	bl	219ee <tmc4331_readInt>
    ffd6:	6020      	str	r0, [r4, #0]
}
    ffd8:	bd10      	pop	{r4, pc}
    ffda:	bf00      	nop
    ffdc:	1fff28cc 	.word	0x1fff28cc

0000ffe0 <writeRegister>:
	switch(address) {
    ffe0:	296c      	cmp	r1, #108	; 0x6c
{
    ffe2:	b570      	push	{r4, r5, r6, lr}
    ffe4:	460d      	mov	r5, r1
    ffe6:	4614      	mov	r4, r2
	switch(address) {
    ffe8:	d023      	beq.n	10032 <writeRegister+0x52>
    ffea:	296d      	cmp	r1, #109	; 0x6d
    ffec:	d017      	beq.n	1001e <writeRegister+0x3e>
    ffee:	2906      	cmp	r1, #6
    fff0:	d118      	bne.n	10024 <writeRegister+0x44>
		switch(Evalboards.ch2.id) {
    fff2:	4b21      	ldr	r3, [pc, #132]	; (10078 <writeRegister+0x98>)
    fff4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    fff8:	2a03      	cmp	r2, #3
    fffa:	d02d      	beq.n	10058 <writeRegister+0x78>
    fffc:	2a0b      	cmp	r2, #11
    fffe:	d111      	bne.n	10024 <writeRegister+0x44>
			TMC2160_FIELD_UPDATE((TMC2160TypeDef *)Evalboards.ch2.type, TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT, FIELD_GET(value, TMC4331_HOLD_SCALE_VAL_MASK, TMC4331_HOLD_SCALE_VAL_SHIFT));
   10000:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   10002:	2110      	movs	r1, #16
   10004:	4630      	mov	r0, r6
   10006:	f010 fc64 	bl	208d2 <tmc2160_readInt>
   1000a:	f3c4 6204 	ubfx	r2, r4, #24, #5
   1000e:	f020 001f 	bic.w	r0, r0, #31
   10012:	4302      	orrs	r2, r0
   10014:	2110      	movs	r1, #16
   10016:	4630      	mov	r0, r6
   10018:	f010 fc4d 	bl	208b6 <tmc2160_writeInt>
			break;
   1001c:	e002      	b.n	10024 <writeRegister+0x44>
		high = value;
   1001e:	4b17      	ldr	r3, [pc, #92]	; (1007c <writeRegister+0x9c>)
   10020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	tmc4331_writeInt(motorToIC(motor), address, value);
   10024:	4622      	mov	r2, r4
   10026:	4629      	mov	r1, r5
   10028:	4815      	ldr	r0, [pc, #84]	; (10080 <writeRegister+0xa0>)
}
   1002a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4331_writeInt(motorToIC(motor), address, value);
   1002e:	f011 bcd0 	b.w	219d2 <tmc4331_writeInt>
		if(Evalboards.ch2.id == ID_TMC2660) // TMC2660 -> 20 bit registers, 8 bit address
   10032:	4911      	ldr	r1, [pc, #68]	; (10078 <writeRegister+0x98>)
   10034:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
   10038:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
   1003c:	2901      	cmp	r1, #1
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   1003e:	bf19      	ittee	ne
   10040:	490e      	ldrne	r1, [pc, #56]	; (1007c <writeRegister+0x9c>)
   10042:	f8d1 12b8 	ldrne.w	r1, [r1, #696]	; 0x2b8
			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
   10046:	f3c2 0213 	ubfxeq	r2, r2, #0, #20
   1004a:	f3c4 5102 	ubfxeq	r1, r4, #20, #3
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   1004e:	bf18      	it	ne
   10050:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
   10054:	4798      	blx	r3
   10056:	e7e5      	b.n	10024 <writeRegister+0x44>
			TMC2130_FIELD_UPDATE((TMC2130TypeDef *)Evalboards.ch2.type, TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT, FIELD_GET(value, TMC4331_HOLD_SCALE_VAL_MASK, TMC4331_HOLD_SCALE_VAL_SHIFT));
   10058:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   1005a:	2110      	movs	r1, #16
   1005c:	4630      	mov	r0, r6
   1005e:	f010 fb12 	bl	20686 <tmc2130_readInt>
   10062:	f3c4 6204 	ubfx	r2, r4, #24, #5
   10066:	f020 001f 	bic.w	r0, r0, #31
   1006a:	4302      	orrs	r2, r0
   1006c:	2110      	movs	r1, #16
   1006e:	4630      	mov	r0, r6
   10070:	f010 fafb 	bl	2066a <tmc2130_writeInt>
			break;
   10074:	e7d6      	b.n	10024 <writeRegister+0x44>
   10076:	bf00      	nop
   10078:	1fff5e88 	.word	0x1fff5e88
   1007c:	1fff28a8 	.word	0x1fff28a8
   10080:	1fff28cc 	.word	0x1fff28cc

00010084 <moveBy>:
{
   10084:	b508      	push	{r3, lr}
	tmc4331_moveBy(motorToIC(motor), ticks, vmax_position);
   10086:	4804      	ldr	r0, [pc, #16]	; (10098 <moveBy+0x14>)
   10088:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   1008c:	3024      	adds	r0, #36	; 0x24
   1008e:	f011 fe15 	bl	21cbc <tmc4331_moveBy>
}
   10092:	2000      	movs	r0, #0
   10094:	bd08      	pop	{r3, pc}
   10096:	bf00      	nop
   10098:	1fff28a8 	.word	0x1fff28a8

0001009c <moveTo>:
{
   1009c:	b508      	push	{r3, lr}
	tmc4331_moveTo(motorToIC(motor), position, vmax_position);
   1009e:	4804      	ldr	r0, [pc, #16]	; (100b0 <moveTo+0x14>)
   100a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   100a4:	3024      	adds	r0, #36	; 0x24
   100a6:	f011 fded 	bl	21c84 <tmc4331_moveTo>
}
   100aa:	2000      	movs	r0, #0
   100ac:	bd08      	pop	{r3, pc}
   100ae:	bf00      	nop
   100b0:	1fff28a8 	.word	0x1fff28a8

000100b4 <handleParameter>:
{
   100b4:	b570      	push	{r4, r5, r6, lr}
   100b6:	4605      	mov	r5, r0
   100b8:	461e      	mov	r6, r3
	if(motor >= TMC4331_MOTORS)
   100ba:	2900      	cmp	r1, #0
   100bc:	f040 80fc 	bne.w	102b8 <handleParameter+0x204>
	switch(type)
   100c0:	2a1b      	cmp	r2, #27
   100c2:	d81f      	bhi.n	10104 <handleParameter+0x50>
   100c4:	2a1b      	cmp	r2, #27
   100c6:	d820      	bhi.n	1010a <handleParameter+0x56>
   100c8:	e8df f012 	tbh	[pc, r2, lsl #1]
   100cc:	00300021 	.word	0x00300021
   100d0:	00430036 	.word	0x00430036
   100d4:	00600047 	.word	0x00600047
   100d8:	001f001f 	.word	0x001f001f
   100dc:	001f0073 	.word	0x001f0073
   100e0:	001f001f 	.word	0x001f001f
   100e4:	001f001f 	.word	0x001f001f
   100e8:	008e007c 	.word	0x008e007c
   100ec:	009f0094 	.word	0x009f0094
   100f0:	00b000aa 	.word	0x00b000aa
   100f4:	00c100bb 	.word	0x00c100bb
   100f8:	00d000ca 	.word	0x00d000ca
   100fc:	00dc00d6 	.word	0x00dc00d6
   10100:	00e800e2 	.word	0x00e800e2
   10104:	2ad6      	cmp	r2, #214	; 0xd6
   10106:	f000 80cf 	beq.w	102a8 <handleParameter+0x1f4>
			errors |= TMC_ERROR_TYPE;
   1010a:	2504      	movs	r5, #4
   1010c:	e00c      	b.n	10128 <handleParameter+0x74>
		if(readWrite == READ) {
   1010e:	b928      	cbnz	r0, 1011c <handleParameter+0x68>
			*value = tmc4331_readInt(&TMC4331, TMC4331_X_TARGET);
   10110:	2137      	movs	r1, #55	; 0x37
			*value = tmc4331_readInt(&TMC4331, TMC4331_XACTUAL);
   10112:	486b      	ldr	r0, [pc, #428]	; (102c0 <handleParameter+0x20c>)
   10114:	f011 fc6b 	bl	219ee <tmc4331_readInt>
   10118:	6030      	str	r0, [r6, #0]
   1011a:	e005      	b.n	10128 <handleParameter+0x74>
			tmc4331_writeInt(&TMC4331, TMC4331_X_TARGET, *value);
   1011c:	6832      	ldr	r2, [r6, #0]
   1011e:	2137      	movs	r1, #55	; 0x37
   10120:	4867      	ldr	r0, [pc, #412]	; (102c0 <handleParameter+0x20c>)
   10122:	f011 fc56 	bl	219d2 <tmc4331_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10126:	2500      	movs	r5, #0
}
   10128:	4628      	mov	r0, r5
   1012a:	bd70      	pop	{r4, r5, r6, pc}
		if(readWrite == READ) {
   1012c:	b908      	cbnz	r0, 10132 <handleParameter+0x7e>
			*value = tmc4331_readInt(&TMC4331, TMC4331_XACTUAL);
   1012e:	2121      	movs	r1, #33	; 0x21
   10130:	e7ef      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_XACTUAL, *value);
   10132:	6832      	ldr	r2, [r6, #0]
   10134:	2121      	movs	r1, #33	; 0x21
   10136:	e7f3      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   10138:	b928      	cbnz	r0, 10146 <handleParameter+0x92>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VMAX) >> 8;
   1013a:	4861      	ldr	r0, [pc, #388]	; (102c0 <handleParameter+0x20c>)
   1013c:	2124      	movs	r1, #36	; 0x24
   1013e:	f011 fc56 	bl	219ee <tmc4331_readInt>
   10142:	1200      	asrs	r0, r0, #8
   10144:	e7e8      	b.n	10118 <handleParameter+0x64>
			tmc4331_writeInt(&TMC4331,  TMC4331_VMAX, abs(*value));
   10146:	6832      	ldr	r2, [r6, #0]
   10148:	2a00      	cmp	r2, #0
   1014a:	bfb8      	it	lt
   1014c:	4252      	neglt	r2, r2
   1014e:	2124      	movs	r1, #36	; 0x24
   10150:	e7e6      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   10152:	2800      	cmp	r0, #0
   10154:	d1d9      	bne.n	1010a <handleParameter+0x56>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VACTUAL);
   10156:	2122      	movs	r1, #34	; 0x22
   10158:	e7db      	b.n	10112 <handleParameter+0x5e>
		if(readWrite == READ) {
   1015a:	4c5a      	ldr	r4, [pc, #360]	; (102c4 <handleParameter+0x210>)
   1015c:	b918      	cbnz	r0, 10166 <handleParameter+0xb2>
			*value = vmax_position;
   1015e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   10162:	6033      	str	r3, [r6, #0]
   10164:	e7e0      	b.n	10128 <handleParameter+0x74>
			vmax_position = *value;
   10166:	6833      	ldr	r3, [r6, #0]
   10168:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
			if(tmc4331_readInt(motorToIC(motor), TMC4331_RAMPMODE) & TMC4331_RAMP_POSITION)
   1016c:	2120      	movs	r1, #32
   1016e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10172:	f011 fc3c 	bl	219ee <tmc4331_readInt>
   10176:	f010 0004 	ands.w	r0, r0, #4
   1017a:	d0d4      	beq.n	10126 <handleParameter+0x72>
				tmc4331_writeInt(motorToIC(motor), TMC4331_VMAX, tmc4331_discardVelocityDecimals(vmax_position));
   1017c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
   10180:	f011 fd4f 	bl	21c22 <tmc4331_discardVelocityDecimals>
   10184:	2124      	movs	r1, #36	; 0x24
   10186:	4602      	mov	r2, r0
   10188:	1860      	adds	r0, r4, r1
   1018a:	e7ca      	b.n	10122 <handleParameter+0x6e>
		if(readWrite == READ) {
   1018c:	b928      	cbnz	r0, 1019a <handleParameter+0xe6>
			*value = tmc4331_readInt(&TMC4331, TMC4331_AMAX)>>2;
   1018e:	2128      	movs	r1, #40	; 0x28
			*value = tmc4331_readInt(&TMC4331, TMC4331_DFINAL)>>2;
   10190:	484b      	ldr	r0, [pc, #300]	; (102c0 <handleParameter+0x20c>)
   10192:	f011 fc2c 	bl	219ee <tmc4331_readInt>
   10196:	1080      	asrs	r0, r0, #2
   10198:	e7be      	b.n	10118 <handleParameter+0x64>
			if(*value & ~0x3FFFFF)
   1019a:	6832      	ldr	r2, [r6, #0]
   1019c:	0d95      	lsrs	r5, r2, #22
   1019e:	05ad      	lsls	r5, r5, #22
   101a0:	2d00      	cmp	r5, #0
   101a2:	f040 808b 	bne.w	102bc <handleParameter+0x208>
				tmc4331_writeInt(&TMC4331,  TMC4331_AMAX, *value<<2);
   101a6:	0092      	lsls	r2, r2, #2
   101a8:	2128      	movs	r1, #40	; 0x28
				tmc4331_writeInt(&TMC4331,  TMC4331_DSTOP, *value);
   101aa:	4845      	ldr	r0, [pc, #276]	; (102c0 <handleParameter+0x20c>)
   101ac:	f011 fc11 	bl	219d2 <tmc4331_writeInt>
   101b0:	e7ba      	b.n	10128 <handleParameter+0x74>
		if(readWrite == READ) {
   101b2:	2800      	cmp	r0, #0
   101b4:	d1a9      	bne.n	1010a <handleParameter+0x56>
			*value = TMC4331_FIELD_READ(&TMC4331, TMC4331_STATUS, TMC4331_TARGET_REACHED_F_MASK, TMC4331_TARGET_REACHED_F_SHIFT);
   101b6:	4842      	ldr	r0, [pc, #264]	; (102c0 <handleParameter+0x20c>)
   101b8:	210f      	movs	r1, #15
   101ba:	f011 fc18 	bl	219ee <tmc4331_readInt>
   101be:	f000 0001 	and.w	r0, r0, #1
   101c2:	e7a9      	b.n	10118 <handleParameter+0x64>
		if(readWrite == READ) { // value = true/non-zero: TMC4331_RAMP_SSHAPE, = false/zero: TMC4331_RAMP_TRAPEZ
   101c4:	b948      	cbnz	r0, 101da <handleParameter+0x126>
			*value = TMC4331_FIELD_READ(&TMC4331, TMC4331_RAMPMODE, TMC4331_RAMP_PROFILE_MASK, TMC4331_RAMP_PROFILE_SHIFT) == TMC4331_RAMP_SSHAPE;
   101c6:	483e      	ldr	r0, [pc, #248]	; (102c0 <handleParameter+0x20c>)
   101c8:	2120      	movs	r1, #32
   101ca:	f011 fc10 	bl	219ee <tmc4331_readInt>
   101ce:	f000 0003 	and.w	r0, r0, #3
   101d2:	1e83      	subs	r3, r0, #2
   101d4:	4258      	negs	r0, r3
   101d6:	4158      	adcs	r0, r3
   101d8:	e79e      	b.n	10118 <handleParameter+0x64>
			tmc4331_writeInt(&TMC4331, TMC4331_RAMPMODE, (*value) ? TMC4331_RAMP_SSHAPE : TMC4331_RAMP_TRAPEZ);
   101da:	6833      	ldr	r3, [r6, #0]
   101dc:	2b00      	cmp	r3, #0
   101de:	bf14      	ite	ne
   101e0:	2202      	movne	r2, #2
   101e2:	2201      	moveq	r2, #1
   101e4:	2120      	movs	r1, #32
   101e6:	e79b      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   101e8:	b908      	cbnz	r0, 101ee <handleParameter+0x13a>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VSTART);
   101ea:	2125      	movs	r1, #37	; 0x25
   101ec:	e791      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_VSTART, *value);
   101ee:	6832      	ldr	r2, [r6, #0]
   101f0:	2125      	movs	r1, #37	; 0x25
   101f2:	e795      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   101f4:	b908      	cbnz	r0, 101fa <handleParameter+0x146>
			*value = tmc4331_readInt(&TMC4331, TMC4331_ASTART)>>2;
   101f6:	212a      	movs	r1, #42	; 0x2a
   101f8:	e7ca      	b.n	10190 <handleParameter+0xdc>
			if(*value & ~0x3FFFFF)
   101fa:	6832      	ldr	r2, [r6, #0]
   101fc:	0d95      	lsrs	r5, r2, #22
   101fe:	05ad      	lsls	r5, r5, #22
   10200:	2d00      	cmp	r5, #0
   10202:	d15b      	bne.n	102bc <handleParameter+0x208>
				tmc4331_writeInt(&TMC4331,  TMC4331_ASTART, *value<<2);
   10204:	0092      	lsls	r2, r2, #2
   10206:	212a      	movs	r1, #42	; 0x2a
   10208:	e7cf      	b.n	101aa <handleParameter+0xf6>
		if(readWrite == READ) {
   1020a:	b908      	cbnz	r0, 10210 <handleParameter+0x15c>
			*value = tmc4331_readInt(&TMC4331, TMC4331_DMAX)>>2;
   1020c:	2129      	movs	r1, #41	; 0x29
   1020e:	e7bf      	b.n	10190 <handleParameter+0xdc>
			if(*value & ~0x3FFFFF)
   10210:	6832      	ldr	r2, [r6, #0]
   10212:	0d95      	lsrs	r5, r2, #22
   10214:	05ad      	lsls	r5, r5, #22
   10216:	2d00      	cmp	r5, #0
   10218:	d150      	bne.n	102bc <handleParameter+0x208>
				tmc4331_writeInt(&TMC4331,  TMC4331_DMAX, *value<<2);
   1021a:	0092      	lsls	r2, r2, #2
   1021c:	2129      	movs	r1, #41	; 0x29
   1021e:	e7c4      	b.n	101aa <handleParameter+0xf6>
		if(readWrite == READ) {
   10220:	b908      	cbnz	r0, 10226 <handleParameter+0x172>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VBREAK);
   10222:	2127      	movs	r1, #39	; 0x27
   10224:	e775      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_VBREAK, *value);
   10226:	6832      	ldr	r2, [r6, #0]
   10228:	2127      	movs	r1, #39	; 0x27
   1022a:	e779      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   1022c:	b908      	cbnz	r0, 10232 <handleParameter+0x17e>
			*value = tmc4331_readInt(&TMC4331, TMC4331_DFINAL)>>2;
   1022e:	212b      	movs	r1, #43	; 0x2b
   10230:	e7ae      	b.n	10190 <handleParameter+0xdc>
			if(*value & ~0x3FFFFF)
   10232:	6832      	ldr	r2, [r6, #0]
   10234:	0d95      	lsrs	r5, r2, #22
   10236:	05ad      	lsls	r5, r5, #22
   10238:	2d00      	cmp	r5, #0
   1023a:	d13f      	bne.n	102bc <handleParameter+0x208>
				tmc4331_writeInt(&TMC4331,  TMC4331_DFINAL, *value<<2);
   1023c:	0092      	lsls	r2, r2, #2
   1023e:	212b      	movs	r1, #43	; 0x2b
   10240:	e7b3      	b.n	101aa <handleParameter+0xf6>
		if(readWrite == READ) {
   10242:	b908      	cbnz	r0, 10248 <handleParameter+0x194>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VSTOP);
   10244:	2126      	movs	r1, #38	; 0x26
   10246:	e764      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_VSTOP, *value);
   10248:	6832      	ldr	r2, [r6, #0]
   1024a:	2126      	movs	r1, #38	; 0x26
   1024c:	e768      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   1024e:	b908      	cbnz	r0, 10254 <handleParameter+0x1a0>
			*value = tmc4331_readInt(&TMC4331, TMC4331_DSTOP);
   10250:	212c      	movs	r1, #44	; 0x2c
   10252:	e75e      	b.n	10112 <handleParameter+0x5e>
			if(*value & ~0x3FFFFF)
   10254:	6832      	ldr	r2, [r6, #0]
   10256:	0d95      	lsrs	r5, r2, #22
   10258:	05ad      	lsls	r5, r5, #22
   1025a:	bb7d      	cbnz	r5, 102bc <handleParameter+0x208>
				tmc4331_writeInt(&TMC4331,  TMC4331_DSTOP, *value);
   1025c:	212c      	movs	r1, #44	; 0x2c
   1025e:	e7a4      	b.n	101aa <handleParameter+0xf6>
		if(readWrite == READ) {
   10260:	b908      	cbnz	r0, 10266 <handleParameter+0x1b2>
			*value = tmc4331_readInt(&TMC4331, TMC4331_BOW1);
   10262:	212d      	movs	r1, #45	; 0x2d
   10264:	e755      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_BOW1, *value);
   10266:	6832      	ldr	r2, [r6, #0]
   10268:	212d      	movs	r1, #45	; 0x2d
   1026a:	e759      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   1026c:	b908      	cbnz	r0, 10272 <handleParameter+0x1be>
			*value = tmc4331_readInt(&TMC4331, TMC4331_BOW2);
   1026e:	212e      	movs	r1, #46	; 0x2e
   10270:	e74f      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_BOW2, *value);
   10272:	6832      	ldr	r2, [r6, #0]
   10274:	212e      	movs	r1, #46	; 0x2e
   10276:	e753      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   10278:	b908      	cbnz	r0, 1027e <handleParameter+0x1ca>
			*value = tmc4331_readInt(&TMC4331, TMC4331_BOW3);
   1027a:	212f      	movs	r1, #47	; 0x2f
   1027c:	e749      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_BOW3, *value);
   1027e:	6832      	ldr	r2, [r6, #0]
   10280:	212f      	movs	r1, #47	; 0x2f
   10282:	e74d      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   10284:	b908      	cbnz	r0, 1028a <handleParameter+0x1d6>
			*value = tmc4331_readInt(&TMC4331, TMC4331_BOW4);
   10286:	2130      	movs	r1, #48	; 0x30
   10288:	e743      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_BOW4, *value);
   1028a:	6832      	ldr	r2, [r6, #0]
   1028c:	2130      	movs	r1, #48	; 0x30
   1028e:	e747      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   10290:	b908      	cbnz	r0, 10296 <handleParameter+0x1e2>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VIRT_STOP_LEFT);
   10292:	2133      	movs	r1, #51	; 0x33
   10294:	e73d      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_VIRT_STOP_LEFT, *value);
   10296:	6832      	ldr	r2, [r6, #0]
   10298:	2133      	movs	r1, #51	; 0x33
   1029a:	e741      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   1029c:	b908      	cbnz	r0, 102a2 <handleParameter+0x1ee>
			*value = tmc4331_readInt(&TMC4331, TMC4331_VIRT_STOP_RIGHT);
   1029e:	2134      	movs	r1, #52	; 0x34
   102a0:	e737      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_VIRT_STOP_RIGHT, *value);
   102a2:	6832      	ldr	r2, [r6, #0]
   102a4:	2134      	movs	r1, #52	; 0x34
   102a6:	e73b      	b.n	10120 <handleParameter+0x6c>
		if(readWrite == READ) {
   102a8:	b908      	cbnz	r0, 102ae <handleParameter+0x1fa>
			*value = tmc4331_readInt(&TMC4331, TMC4331_STDBY_DELAY);
   102aa:	2115      	movs	r1, #21
   102ac:	e731      	b.n	10112 <handleParameter+0x5e>
			tmc4331_writeInt(&TMC4331,  TMC4331_STDBY_DELAY, *value*160000);
   102ae:	681b      	ldr	r3, [r3, #0]
   102b0:	4a05      	ldr	r2, [pc, #20]	; (102c8 <handleParameter+0x214>)
   102b2:	2115      	movs	r1, #21
   102b4:	435a      	muls	r2, r3
   102b6:	e733      	b.n	10120 <handleParameter+0x6c>
		return TMC_ERROR_MOTOR;
   102b8:	2508      	movs	r5, #8
   102ba:	e735      	b.n	10128 <handleParameter+0x74>
				errors |= TMC_ERROR_VALUE;
   102bc:	2510      	movs	r5, #16
   102be:	e733      	b.n	10128 <handleParameter+0x74>
   102c0:	1fff28cc 	.word	0x1fff28cc
   102c4:	1fff28a8 	.word	0x1fff28a8
   102c8:	00027100 	.word	0x00027100

000102cc <SAP>:
{
   102cc:	b507      	push	{r0, r1, r2, lr}
   102ce:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   102d0:	ab01      	add	r3, sp, #4
   102d2:	4602      	mov	r2, r0
   102d4:	2001      	movs	r0, #1
   102d6:	f7ff feed 	bl	100b4 <handleParameter>
}
   102da:	b003      	add	sp, #12
   102dc:	f85d fb04 	ldr.w	pc, [sp], #4

000102e0 <GAP>:
{
   102e0:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   102e2:	4602      	mov	r2, r0
   102e4:	2000      	movs	r0, #0
   102e6:	e6e5      	b.n	100b4 <handleParameter>

000102e8 <stop>:
{
   102e8:	b508      	push	{r3, lr}
	tmc4331_rotate(motorToIC(motor), velocity);
   102ea:	4803      	ldr	r0, [pc, #12]	; (102f8 <stop+0x10>)
   102ec:	2100      	movs	r1, #0
   102ee:	f011 fcab 	bl	21c48 <tmc4331_rotate>
}
   102f2:	2000      	movs	r0, #0
   102f4:	bd08      	pop	{r3, pc}
   102f6:	bf00      	nop
   102f8:	1fff28cc 	.word	0x1fff28cc

000102fc <left>:
{
   102fc:	b508      	push	{r3, lr}
	tmc4331_rotate(motorToIC(motor), velocity);
   102fe:	4803      	ldr	r0, [pc, #12]	; (1030c <left+0x10>)
   10300:	4249      	negs	r1, r1
   10302:	f011 fca1 	bl	21c48 <tmc4331_rotate>
}
   10306:	2000      	movs	r0, #0
   10308:	bd08      	pop	{r3, pc}
   1030a:	bf00      	nop
   1030c:	1fff28cc 	.word	0x1fff28cc

00010310 <right>:
{
   10310:	b508      	push	{r3, lr}
	tmc4331_rotate(motorToIC(motor), velocity);
   10312:	4802      	ldr	r0, [pc, #8]	; (1031c <right+0xc>)
   10314:	f011 fc98 	bl	21c48 <tmc4331_rotate>
}
   10318:	2000      	movs	r0, #0
   1031a:	bd08      	pop	{r3, pc}
   1031c:	1fff28cc 	.word	0x1fff28cc

00010320 <restore>:

	return 1;
}

static uint8_t restore()
{
   10320:	b538      	push	{r3, r4, r5, lr}
	// Pulse the low-active hardware reset pin
	HAL.IOs->config->setLow(Pins.NRST);
   10322:	4b0a      	ldr	r3, [pc, #40]	; (1034c <restore+0x2c>)
   10324:	4c0a      	ldr	r4, [pc, #40]	; (10350 <restore+0x30>)
   10326:	68dd      	ldr	r5, [r3, #12]
   10328:	6860      	ldr	r0, [r4, #4]
   1032a:	682b      	ldr	r3, [r5, #0]
   1032c:	699b      	ldr	r3, [r3, #24]
   1032e:	4798      	blx	r3
	wait(1);
   10330:	2001      	movs	r0, #1
   10332:	f00c f805 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   10336:	682b      	ldr	r3, [r5, #0]
   10338:	6860      	ldr	r0, [r4, #4]
   1033a:	695b      	ldr	r3, [r3, #20]
   1033c:	4798      	blx	r3

	tmc4331_restore(&TMC4331);
   1033e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10342:	f011 fc0e 	bl	21b62 <tmc4331_restore>

	return 1;
}
   10346:	2001      	movs	r0, #1
   10348:	bd38      	pop	{r3, r4, r5, pc}
   1034a:	bf00      	nop
   1034c:	00029d1c 	.word	0x00029d1c
   10350:	1fff28a8 	.word	0x1fff28a8

00010354 <reset>:
{
   10354:	b538      	push	{r3, r4, r5, lr}
	HAL.IOs->config->setLow(Pins.NRST);
   10356:	4b0a      	ldr	r3, [pc, #40]	; (10380 <reset+0x2c>)
   10358:	4c0a      	ldr	r4, [pc, #40]	; (10384 <reset+0x30>)
   1035a:	68dd      	ldr	r5, [r3, #12]
   1035c:	6860      	ldr	r0, [r4, #4]
   1035e:	682b      	ldr	r3, [r5, #0]
   10360:	699b      	ldr	r3, [r3, #24]
   10362:	4798      	blx	r3
	wait(1);
   10364:	2001      	movs	r0, #1
   10366:	f00b ffeb 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   1036a:	682b      	ldr	r3, [r5, #0]
   1036c:	6860      	ldr	r0, [r4, #4]
   1036e:	695b      	ldr	r3, [r3, #20]
   10370:	4798      	blx	r3
	tmc4331_reset(&TMC4331);
   10372:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10376:	f011 fbe1 	bl	21b3c <tmc4331_reset>
}
   1037a:	2001      	movs	r0, #1
   1037c:	bd38      	pop	{r3, r4, r5, pc}
   1037e:	bf00      	nop
   10380:	00029d1c 	.word	0x00029d1c
   10384:	1fff28a8 	.word	0x1fff28a8

00010388 <configCallback>:

static void configCallback(TMC4331TypeDef *tmc4331, ConfigState state)
{
   10388:	b570      	push	{r4, r5, r6, lr}
	uint8_t driver, dataLength;
	uint32_t value;

	// Setup SPI
	switch(Evalboards.ch2.id)
   1038a:	4c11      	ldr	r4, [pc, #68]	; (103d0 <configCallback+0x48>)
   1038c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10390:	2b01      	cmp	r3, #1
{
   10392:	460d      	mov	r5, r1
	switch(Evalboards.ch2.id)
   10394:	d019      	beq.n	103ca <configCallback+0x42>
	{
	case ID_TMC2130:
		driver = 0x0C;
		dataLength = 0;
   10396:	2b03      	cmp	r3, #3
   10398:	bf15      	itete	ne
   1039a:	2328      	movne	r3, #40	; 0x28
   1039c:	2300      	moveq	r3, #0
   1039e:	220f      	movne	r2, #15
   103a0:	220c      	moveq	r2, #12
	default:
		driver = 0x0F;
		dataLength = 40;
		break;
	}
	value = 0x44400040 | (dataLength << 13) | (driver << 0);
   103a2:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
	tmc4331_writeInt(tmc4331, TMC4331_SPIOUT_CONF, value);
   103a6:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
   103aa:	f042 1240 	orr.w	r2, r2, #4194368	; 0x400040
   103ae:	2104      	movs	r1, #4
   103b0:	f011 fb0f 	bl	219d2 <tmc4331_writeInt>

	// Reset/Restore driver
	if(state == CONFIG_RESET)
		Evalboards.ch2.config->reset();
   103b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	if(state == CONFIG_RESET)
   103b8:	2d01      	cmp	r5, #1
		Evalboards.ch2.config->reset();
   103ba:	bf0c      	ite	eq
   103bc:	f8d3 3204 	ldreq.w	r3, [r3, #516]	; 0x204
	else
		Evalboards.ch2.config->restore();
   103c0:	f8d3 3208 	ldrne.w	r3, [r3, #520]	; 0x208
}
   103c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Evalboards.ch2.config->restore();
   103c8:	4718      	bx	r3
	switch(Evalboards.ch2.id)
   103ca:	2300      	movs	r3, #0
   103cc:	220b      	movs	r2, #11
   103ce:	e7e8      	b.n	103a2 <configCallback+0x1a>
   103d0:	1fff5e88 	.word	0x1fff5e88

000103d4 <tmc4331_cover>:
{
   103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   103d6:	4c33      	ldr	r4, [pc, #204]	; (104a4 <tmc4331_cover+0xd0>)
   103d8:	e9d4 32b0 	ldrd	r3, r2, [r4, #704]	; 0x2c0
   103dc:	0212      	lsls	r2, r2, #8
	coverOut |= data;  // add new byte to be written
   103de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   103e2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
	coverOut |= data;  // add new byte to be written
   103e6:	e9c4 02b0 	strd	r0, r2, [r4, #704]	; 0x2c0
	out = coverIn >> 56;  // output last received byte
   103ea:	e9d4 60b4 	ldrd	r6, r0, [r4, #720]	; 0x2d0
	coverLength++;     // count outgoing bytes
   103ee:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
	out = coverIn >> 56;  // output last received byte
   103f2:	0e05      	lsrs	r5, r0, #24
	coverLength++;     // count outgoing bytes
   103f4:	3301      	adds	r3, #1
	coverIn <<= 8;        // shift by one byte to read this next time
   103f6:	0200      	lsls	r0, r0, #8
   103f8:	ea40 6016 	orr.w	r0, r0, r6, lsr #24
	coverLength++;     // count outgoing bytes
   103fc:	b2db      	uxtb	r3, r3
	coverIn <<= 8;        // shift by one byte to read this next time
   103fe:	0236      	lsls	r6, r6, #8
   10400:	e9c4 60b4 	strd	r6, r0, [r4, #720]	; 0x2d0
	coverLength++;     // count outgoing bytes
   10404:	f884 32c8 	strb.w	r3, [r4, #712]	; 0x2c8
	if(lastTransfer)
   10408:	2900      	cmp	r1, #0
   1040a:	d049      	beq.n	104a0 <tmc4331_cover+0xcc>
		if(coverLength > 4)
   1040c:	2b04      	cmp	r3, #4
   1040e:	d904      	bls.n	1041a <tmc4331_cover+0x46>
			tmc4331_writeInt(&TMC4331, TMC4331_COVER_HIGH_WR, coverOut >> 32);
   10410:	216d      	movs	r1, #109	; 0x6d
   10412:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10416:	f011 fadc 	bl	219d2 <tmc4331_writeInt>
		tmc4331_writeInt(&TMC4331, TMC4331_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   1041a:	f8d4 22c0 	ldr.w	r2, [r4, #704]	; 0x2c0
   1041e:	4822      	ldr	r0, [pc, #136]	; (104a8 <tmc4331_cover+0xd4>)
   10420:	216c      	movs	r1, #108	; 0x6c
   10422:	f011 fad6 	bl	219d2 <tmc4331_writeInt>
		wait(1);
   10426:	2001      	movs	r0, #1
   10428:	f00b ff8a 	bl	1c340 <wait>
		tmc4331_writeInt(&TMC4331, TMC4331_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   1042c:	f8d4 22c0 	ldr.w	r2, [r4, #704]	; 0x2c0
   10430:	481d      	ldr	r0, [pc, #116]	; (104a8 <tmc4331_cover+0xd4>)
   10432:	216c      	movs	r1, #108	; 0x6c
   10434:	f011 facd 	bl	219d2 <tmc4331_writeInt>
		coverIn = 0;
   10438:	2300      	movs	r3, #0
   1043a:	2200      	movs	r2, #0
   1043c:	e9c4 23b4 	strd	r2, r3, [r4, #720]	; 0x2d0
		if(coverLength > 4)
   10440:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
   10444:	2b04      	cmp	r3, #4
   10446:	d908      	bls.n	1045a <tmc4331_cover+0x86>
			coverIn |= (uint64_t) tmc4331_readInt(&TMC4331, TMC4331_COVER_DRV_HIGH_RD) << 32;
   10448:	4817      	ldr	r0, [pc, #92]	; (104a8 <tmc4331_cover+0xd4>)
   1044a:	216f      	movs	r1, #111	; 0x6f
   1044c:	f011 facf 	bl	219ee <tmc4331_readInt>
   10450:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   10454:	4303      	orrs	r3, r0
   10456:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
		coverIn |= tmc4331_readInt(&TMC4331, TMC4331_COVER_DRV_LOW_RD);
   1045a:	216e      	movs	r1, #110	; 0x6e
   1045c:	4812      	ldr	r0, [pc, #72]	; (104a8 <tmc4331_cover+0xd4>)
   1045e:	f011 fac6 	bl	219ee <tmc4331_readInt>
   10462:	e9d4 23b4 	ldrd	r2, r3, [r4, #720]	; 0x2d0
   10466:	17c7      	asrs	r7, r0, #31
   10468:	4310      	orrs	r0, r2
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   1046a:	f894 22c8 	ldrb.w	r2, [r4, #712]	; 0x2c8
   1046e:	f1c2 0208 	rsb	r2, r2, #8
   10472:	00d2      	lsls	r2, r2, #3
   10474:	f1a2 0620 	sub.w	r6, r2, #32
		coverIn |= tmc4331_readInt(&TMC4331, TMC4331_COVER_DRV_LOW_RD);
   10478:	433b      	orrs	r3, r7
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   1047a:	f1c2 0120 	rsb	r1, r2, #32
   1047e:	4093      	lsls	r3, r2
   10480:	fa00 f606 	lsl.w	r6, r0, r6
   10484:	fa20 f101 	lsr.w	r1, r0, r1
   10488:	4333      	orrs	r3, r6
   1048a:	430b      	orrs	r3, r1
   1048c:	4090      	lsls	r0, r2
   1048e:	e9c4 03b4 	strd	r0, r3, [r4, #720]	; 0x2d0
		coverOut = 0;
   10492:	2200      	movs	r2, #0
   10494:	2300      	movs	r3, #0
   10496:	e9c4 23b0 	strd	r2, r3, [r4, #704]	; 0x2c0
		coverLength=0;
   1049a:	2300      	movs	r3, #0
   1049c:	f884 32c8 	strb.w	r3, [r4, #712]	; 0x2c8
}
   104a0:	4628      	mov	r0, r5
   104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104a4:	1fff28a8 	.word	0x1fff28a8
   104a8:	1fff28cc 	.word	0x1fff28cc

000104ac <rotate>:
   104ac:	b508      	push	{r3, lr}
   104ae:	4802      	ldr	r0, [pc, #8]	; (104b8 <rotate+0xc>)
   104b0:	f011 fbca 	bl	21c48 <tmc4331_rotate>
   104b4:	2000      	movs	r0, #0
   104b6:	bd08      	pop	{r3, pc}
   104b8:	1fff28cc 	.word	0x1fff28cc

000104bc <tmc4331_readWriteArray>:
	return TMC4331_SPIChannel;
   104bc:	4b03      	ldr	r3, [pc, #12]	; (104cc <tmc4331_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   104be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
{
   104c2:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   104c4:	68db      	ldr	r3, [r3, #12]
   104c6:	4611      	mov	r1, r2
   104c8:	4718      	bx	r3
   104ca:	bf00      	nop
   104cc:	1fff28a8 	.word	0x1fff28a8

000104d0 <TMC4331_init>:

void TMC4331_init(void)
{
   104d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc4331_init(&TMC4331, 0, Evalboards.ch1.config, &tmc4331_defaultRegisterResetState[0]);
   104d2:	4c4c      	ldr	r4, [pc, #304]	; (10604 <TMC4331_init+0x134>)
   104d4:	4d4c      	ldr	r5, [pc, #304]	; (10608 <TMC4331_init+0x138>)
   104d6:	4b4d      	ldr	r3, [pc, #308]	; (1060c <TMC4331_init+0x13c>)
   104d8:	69aa      	ldr	r2, [r5, #24]
	tmc4331_setCallback(&TMC4331, configCallback);

	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   104da:	4f4d      	ldr	r7, [pc, #308]	; (10610 <TMC4331_init+0x140>)
	tmc4331_init(&TMC4331, 0, Evalboards.ch1.config, &tmc4331_defaultRegisterResetState[0]);
   104dc:	f104 0624 	add.w	r6, r4, #36	; 0x24
   104e0:	4630      	mov	r0, r6
   104e2:	2100      	movs	r1, #0
   104e4:	f011 fb0a 	bl	21afc <tmc4331_init>
	tmc4331_setCallback(&TMC4331, configCallback);
   104e8:	494a      	ldr	r1, [pc, #296]	; (10614 <TMC4331_init+0x144>)
   104ea:	4630      	mov	r0, r6
   104ec:	f011 fb4d 	bl	21b8a <tmc4331_setCallback>
	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   104f0:	68fe      	ldr	r6, [r7, #12]
   104f2:	6873      	ldr	r3, [r6, #4]
   104f4:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
   104f8:	6222      	str	r2, [r4, #32]
	Pins.INTR            = &HAL.IOs->pins->DIO5;
   104fa:	f503 7284 	add.w	r2, r3, #264	; 0x108
   104fe:	61e2      	str	r2, [r4, #28]
	Pins.STOP_L          = &HAL.IOs->pins->DIO12;
   10500:	f503 7252 	add.w	r2, r3, #840	; 0x348
   10504:	61a2      	str	r2, [r4, #24]
	Pins.STOP_R          = &HAL.IOs->pins->DIO13;
   10506:	f503 725a 	add.w	r2, r3, #872	; 0x368
   1050a:	6162      	str	r2, [r4, #20]
	Pins.HOME_REF        = &HAL.IOs->pins->DIO14;
   1050c:	f503 7262 	add.w	r2, r3, #904	; 0x388
   10510:	6122      	str	r2, [r4, #16]
	Pins.START           = &HAL.IOs->pins->DIO15;
   10512:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   10516:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
	Pins.START           = &HAL.IOs->pins->DIO15;
   1051a:	60e2      	str	r2, [r4, #12]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   1051c:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
   10520:	f503 6381 	add.w	r3, r3, #1032	; 0x408
   10524:	6023      	str	r3, [r4, #0]

	HAL.IOs->config->toOutput(Pins.NRST);
   10526:	6833      	ldr	r3, [r6, #0]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   10528:	60a2      	str	r2, [r4, #8]
	HAL.IOs->config->toOutput(Pins.NRST);
   1052a:	68db      	ldr	r3, [r3, #12]
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   1052c:	6060      	str	r0, [r4, #4]
	HAL.IOs->config->toOutput(Pins.NRST);
   1052e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_L);
   10530:	6833      	ldr	r3, [r6, #0]
   10532:	69a0      	ldr	r0, [r4, #24]
   10534:	68db      	ldr	r3, [r3, #12]
   10536:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_R);
   10538:	6833      	ldr	r3, [r6, #0]
   1053a:	6960      	ldr	r0, [r4, #20]
   1053c:	68db      	ldr	r3, [r3, #12]
   1053e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.HOME_REF);
   10540:	6833      	ldr	r3, [r6, #0]
   10542:	6920      	ldr	r0, [r4, #16]
   10544:	68db      	ldr	r3, [r3, #12]
   10546:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.START);
   10548:	6833      	ldr	r3, [r6, #0]
   1054a:	68e0      	ldr	r0, [r4, #12]
   1054c:	68db      	ldr	r3, [r3, #12]
   1054e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.FREEZE);
   10550:	6833      	ldr	r3, [r6, #0]
   10552:	68a0      	ldr	r0, [r4, #8]
   10554:	68db      	ldr	r3, [r3, #12]
   10556:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.NRST);
   10558:	6833      	ldr	r3, [r6, #0]
   1055a:	6860      	ldr	r0, [r4, #4]
   1055c:	695b      	ldr	r3, [r3, #20]
   1055e:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.STOP_L);
   10560:	6833      	ldr	r3, [r6, #0]
   10562:	69a0      	ldr	r0, [r4, #24]
   10564:	695b      	ldr	r3, [r3, #20]
   10566:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.STOP_R);
   10568:	6833      	ldr	r3, [r6, #0]
   1056a:	6960      	ldr	r0, [r4, #20]
   1056c:	695b      	ldr	r3, [r3, #20]
   1056e:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.HOME_REF);
   10570:	6833      	ldr	r3, [r6, #0]
   10572:	6920      	ldr	r0, [r4, #16]
   10574:	695b      	ldr	r3, [r3, #20]
   10576:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.START);
   10578:	6833      	ldr	r3, [r6, #0]
   1057a:	68e0      	ldr	r0, [r4, #12]
   1057c:	695b      	ldr	r3, [r3, #20]
   1057e:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.FREEZE);
   10580:	6833      	ldr	r3, [r6, #0]
   10582:	68a0      	ldr	r0, [r4, #8]
   10584:	695b      	ldr	r3, [r3, #20]
   10586:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.STANDBY_CLK);
   10588:	6833      	ldr	r3, [r6, #0]
   1058a:	6a20      	ldr	r0, [r4, #32]
   1058c:	691b      	ldr	r3, [r3, #16]
   1058e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INTR);
   10590:	6833      	ldr	r3, [r6, #0]
   10592:	69e0      	ldr	r0, [r4, #28]
   10594:	691b      	ldr	r3, [r3, #16]
   10596:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.TARGET_REACHED);
   10598:	6833      	ldr	r3, [r6, #0]
   1059a:	6820      	ldr	r0, [r4, #0]
   1059c:	691b      	ldr	r3, [r3, #16]
   1059e:	4798      	blx	r3

	TMC4331_SPIChannel = &HAL.SPI->ch1;
	TMC4331_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   105a0:	6873      	ldr	r3, [r6, #4]
	TMC4331_SPIChannel = &HAL.SPI->ch1;
   105a2:	693a      	ldr	r2, [r7, #16]

	Evalboards.ch1.config->state        = CONFIG_RESET;
	Evalboards.ch1.config->configIndex  = 0;
	Evalboards.ch1.config->reset        = reset;
   105a4:	491c      	ldr	r1, [pc, #112]	; (10618 <TMC4331_init+0x148>)
	TMC4331_SPIChannel = &HAL.SPI->ch1;
   105a6:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
	TMC4331_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   105aa:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   105ae:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->state        = CONFIG_RESET;
   105b0:	69ab      	ldr	r3, [r5, #24]
   105b2:	2201      	movs	r2, #1
	Evalboards.ch1.config->reset        = reset;
   105b4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   105b8:	4918      	ldr	r1, [pc, #96]	; (1061c <TMC4331_init+0x14c>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
   105ba:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->restore      = restore;
   105bc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208

	Evalboards.ch1.cover                = tmc4331_cover;
   105c0:	4b17      	ldr	r3, [pc, #92]	; (10620 <TMC4331_init+0x150>)
   105c2:	66ab      	str	r3, [r5, #104]	; 0x68
	Evalboards.ch1.rotate               = rotate;
   105c4:	4b17      	ldr	r3, [pc, #92]	; (10624 <TMC4331_init+0x154>)
   105c6:	626b      	str	r3, [r5, #36]	; 0x24
	Evalboards.ch1.right                = right;
   105c8:	4b17      	ldr	r3, [pc, #92]	; (10628 <TMC4331_init+0x158>)
   105ca:	622b      	str	r3, [r5, #32]
	Evalboards.ch1.left                 = left;
   105cc:	4b17      	ldr	r3, [pc, #92]	; (1062c <TMC4331_init+0x15c>)
   105ce:	61eb      	str	r3, [r5, #28]
	Evalboards.ch1.stop                 = stop;
   105d0:	4b17      	ldr	r3, [pc, #92]	; (10630 <TMC4331_init+0x160>)
   105d2:	62ab      	str	r3, [r5, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   105d4:	4b17      	ldr	r3, [pc, #92]	; (10634 <TMC4331_init+0x164>)
   105d6:	63eb      	str	r3, [r5, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   105d8:	4b17      	ldr	r3, [pc, #92]	; (10638 <TMC4331_init+0x168>)
   105da:	63ab      	str	r3, [r5, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   105dc:	4b17      	ldr	r3, [pc, #92]	; (1063c <TMC4331_init+0x16c>)
   105de:	62eb      	str	r3, [r5, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   105e0:	4b17      	ldr	r3, [pc, #92]	; (10640 <TMC4331_init+0x170>)
   105e2:	632b      	str	r3, [r5, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   105e4:	4b17      	ldr	r3, [pc, #92]	; (10644 <TMC4331_init+0x174>)
   105e6:	64eb      	str	r3, [r5, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   105e8:	4b17      	ldr	r3, [pc, #92]	; (10648 <TMC4331_init+0x178>)
   105ea:	64ab      	str	r3, [r5, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   105ec:	4b17      	ldr	r3, [pc, #92]	; (1064c <TMC4331_init+0x17c>)
   105ee:	65ab      	str	r3, [r5, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   105f0:	4b17      	ldr	r3, [pc, #92]	; (10650 <TMC4331_init+0x180>)
   105f2:	656b      	str	r3, [r5, #84]	; 0x54
	Evalboards.ch1.checkErrors          = checkErrors;
   105f4:	4b17      	ldr	r3, [pc, #92]	; (10654 <TMC4331_init+0x184>)
   105f6:	662b      	str	r3, [r5, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC4331_MOTORS;
	Evalboards.ch1.deInit               = deInit;
   105f8:	4b17      	ldr	r3, [pc, #92]	; (10658 <TMC4331_init+0x188>)
   105fa:	65eb      	str	r3, [r5, #92]	; 0x5c

	// Provide the cover function to the driver channel
	Evalboards.ch1.fullCover            = tmc4331_fullCover;
   105fc:	4b17      	ldr	r3, [pc, #92]	; (1065c <TMC4331_init+0x18c>)
	Evalboards.ch1.numberOfMotors       = TMC4331_MOTORS;
   105fe:	752a      	strb	r2, [r5, #20]
	Evalboards.ch1.fullCover            = tmc4331_fullCover;
   10600:	66eb      	str	r3, [r5, #108]	; 0x6c
};
   10602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10604:	1fff28a8 	.word	0x1fff28a8
   10608:	1fff5e88 	.word	0x1fff5e88
   1060c:	00028cf8 	.word	0x00028cf8
   10610:	00029d1c 	.word	0x00029d1c
   10614:	00010389 	.word	0x00010389
   10618:	00010355 	.word	0x00010355
   1061c:	00010321 	.word	0x00010321
   10620:	000103d5 	.word	0x000103d5
   10624:	000104ad 	.word	0x000104ad
   10628:	00010311 	.word	0x00010311
   1062c:	000102fd 	.word	0x000102fd
   10630:	000102e9 	.word	0x000102e9
   10634:	000102e1 	.word	0x000102e1
   10638:	000102cd 	.word	0x000102cd
   1063c:	0001009d 	.word	0x0001009d
   10640:	00010085 	.word	0x00010085
   10644:	0000ffe1 	.word	0x0000ffe1
   10648:	0000ffcd 	.word	0x0000ffcd
   1064c:	0000ffc1 	.word	0x0000ffc1
   10650:	0000fe7d 	.word	0x0000fe7d
   10654:	0000fe71 	.word	0x0000fe71
   10658:	0000ff45 	.word	0x0000ff45
   1065c:	0000ffb1 	.word	0x0000ffb1

00010660 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   10660:	4b01      	ldr	r3, [pc, #4]	; (10668 <checkErrors+0x8>)
   10662:	2200      	movs	r2, #0
   10664:	609a      	str	r2, [r3, #8]
}
   10666:	4770      	bx	lr
   10668:	1fff5e88 	.word	0x1fff5e88

0001066c <deInit>:
	}
	return errors;
}

static void deInit(void)
{
   1066c:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.NRST);
   1066e:	4e18      	ldr	r6, [pc, #96]	; (106d0 <deInit+0x64>)
   10670:	4c18      	ldr	r4, [pc, #96]	; (106d4 <deInit+0x68>)
   10672:	68f5      	ldr	r5, [r6, #12]
   10674:	6860      	ldr	r0, [r4, #4]
   10676:	682b      	ldr	r3, [r5, #0]
   10678:	699b      	ldr	r3, [r3, #24]
   1067a:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.STOP_L);
   1067c:	682b      	ldr	r3, [r5, #0]
   1067e:	69a0      	ldr	r0, [r4, #24]
   10680:	689b      	ldr	r3, [r3, #8]
   10682:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STOP_R);
   10684:	682b      	ldr	r3, [r5, #0]
   10686:	6960      	ldr	r0, [r4, #20]
   10688:	689b      	ldr	r3, [r3, #8]
   1068a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.HOME_REF);
   1068c:	682b      	ldr	r3, [r5, #0]
   1068e:	6920      	ldr	r0, [r4, #16]
   10690:	689b      	ldr	r3, [r3, #8]
   10692:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.START);
   10694:	682b      	ldr	r3, [r5, #0]
   10696:	68e0      	ldr	r0, [r4, #12]
   10698:	689b      	ldr	r3, [r3, #8]
   1069a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.FREEZE);
   1069c:	682b      	ldr	r3, [r5, #0]
   1069e:	68a0      	ldr	r0, [r4, #8]
   106a0:	689b      	ldr	r3, [r3, #8]
   106a2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STANDBY_CLK);
   106a4:	682b      	ldr	r3, [r5, #0]
   106a6:	6a20      	ldr	r0, [r4, #32]
   106a8:	689b      	ldr	r3, [r3, #8]
   106aa:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INTR);
   106ac:	682b      	ldr	r3, [r5, #0]
   106ae:	69e0      	ldr	r0, [r4, #28]
   106b0:	689b      	ldr	r3, [r3, #8]
   106b2:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.TARGET_REACHED);
   106b4:	682b      	ldr	r3, [r5, #0]
   106b6:	6820      	ldr	r0, [r4, #0]
   106b8:	689b      	ldr	r3, [r3, #8]
   106ba:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.NRST);
   106bc:	682b      	ldr	r3, [r5, #0]
   106be:	6860      	ldr	r0, [r4, #4]
   106c0:	689b      	ldr	r3, [r3, #8]
   106c2:	4798      	blx	r3

	HAL.SPI->ch2.reset();
   106c4:	6933      	ldr	r3, [r6, #16]
}
   106c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.SPI->ch2.reset();
   106ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   106cc:	4718      	bx	r3
   106ce:	bf00      	nop
   106d0:	00029d1c 	.word	0x00029d1c
   106d4:	1fff2b90 	.word	0x1fff2b90

000106d8 <tmc4361_fullCover>:
{
   106d8:	460a      	mov	r2, r1
	tmc4361_readWriteCover(&TMC4361, data, length);
   106da:	4601      	mov	r1, r0
   106dc:	4801      	ldr	r0, [pc, #4]	; (106e4 <tmc4361_fullCover+0xc>)
   106de:	f011 bb6a 	b.w	21db6 <tmc4361_readWriteCover>
   106e2:	bf00      	nop
   106e4:	1fff2bb4 	.word	0x1fff2bb4

000106e8 <userFunction>:
	switch(type)
   106e8:	2803      	cmp	r0, #3
{
   106ea:	b570      	push	{r4, r5, r6, lr}
   106ec:	4614      	mov	r4, r2
	switch(type)
   106ee:	d806      	bhi.n	106fe <userFunction+0x16>
   106f0:	3801      	subs	r0, #1
   106f2:	2802      	cmp	r0, #2
   106f4:	d808      	bhi.n	10708 <userFunction+0x20>
   106f6:	e8df f000 	tbb	[pc, r0]
   106fa:	3a2b      	.short	0x3a2b
   106fc:	48          	.byte	0x48
   106fd:	00          	.byte	0x00
   106fe:	28ff      	cmp	r0, #255	; 0xff
   10700:	d04c      	beq.n	1079c <userFunction+0xb4>
   10702:	2404      	movs	r4, #4
}
   10704:	4620      	mov	r0, r4
   10706:	bd70      	pop	{r4, r5, r6, pc}
		if(!(*value & ~3))
   10708:	6812      	ldr	r2, [r2, #0]
   1070a:	f032 0303 	bics.w	r3, r2, #3
   1070e:	d110      	bne.n	10732 <userFunction+0x4a>
			if(*value & (1<<0))
   10710:	4b28      	ldr	r3, [pc, #160]	; (107b4 <userFunction+0xcc>)
   10712:	4d29      	ldr	r5, [pc, #164]	; (107b8 <userFunction+0xd0>)
   10714:	68de      	ldr	r6, [r3, #12]
   10716:	6968      	ldr	r0, [r5, #20]
   10718:	6833      	ldr	r3, [r6, #0]
   1071a:	07d2      	lsls	r2, r2, #31
   1071c:	d50b      	bpl.n	10736 <userFunction+0x4e>
				HAL.IOs->config->toInput(Pins.STOP_R); // pull up -> set it to floating causes high
   1071e:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.STOP_R);
   10720:	4798      	blx	r3
			if(*value & (1<<1))
   10722:	6824      	ldr	r4, [r4, #0]
   10724:	6832      	ldr	r2, [r6, #0]
   10726:	69a8      	ldr	r0, [r5, #24]
   10728:	f014 0402 	ands.w	r4, r4, #2
   1072c:	d009      	beq.n	10742 <userFunction+0x5a>
				HAL.IOs->config->toInput(Pins.STOP_L); // pull up -> set it to floating causes high
   1072e:	6913      	ldr	r3, [r2, #16]
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
   10730:	4798      	blx	r3
	uint32_t errors = 0;
   10732:	2400      	movs	r4, #0
		break;
   10734:	e7e6      	b.n	10704 <userFunction+0x1c>
				HAL.IOs->config->toOutput(Pins.STOP_R);
   10736:	68db      	ldr	r3, [r3, #12]
   10738:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_R);
   1073a:	6833      	ldr	r3, [r6, #0]
   1073c:	6968      	ldr	r0, [r5, #20]
   1073e:	699b      	ldr	r3, [r3, #24]
   10740:	e7ee      	b.n	10720 <userFunction+0x38>
				HAL.IOs->config->toOutput(Pins.STOP_L);
   10742:	68d3      	ldr	r3, [r2, #12]
   10744:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_L);
   10746:	6833      	ldr	r3, [r6, #0]
   10748:	69a8      	ldr	r0, [r5, #24]
   1074a:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setLow(Pins.FREEZE);
   1074c:	4798      	blx	r3
   1074e:	e7d9      	b.n	10704 <userFunction+0x1c>
		if(*value)
   10750:	4b18      	ldr	r3, [pc, #96]	; (107b4 <userFunction+0xcc>)
   10752:	4d19      	ldr	r5, [pc, #100]	; (107b8 <userFunction+0xd0>)
   10754:	68de      	ldr	r6, [r3, #12]
   10756:	6814      	ldr	r4, [r2, #0]
   10758:	6928      	ldr	r0, [r5, #16]
   1075a:	6833      	ldr	r3, [r6, #0]
   1075c:	b10c      	cbz	r4, 10762 <userFunction+0x7a>
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
   1075e:	691b      	ldr	r3, [r3, #16]
   10760:	e7e6      	b.n	10730 <userFunction+0x48>
			HAL.IOs->config->toOutput(Pins.HOME_REF);
   10762:	68db      	ldr	r3, [r3, #12]
   10764:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.HOME_REF);
   10766:	6833      	ldr	r3, [r6, #0]
   10768:	6928      	ldr	r0, [r5, #16]
   1076a:	699b      	ldr	r3, [r3, #24]
   1076c:	e7ee      	b.n	1074c <userFunction+0x64>
		if(*value)
   1076e:	4b11      	ldr	r3, [pc, #68]	; (107b4 <userFunction+0xcc>)
   10770:	4d11      	ldr	r5, [pc, #68]	; (107b8 <userFunction+0xd0>)
   10772:	68de      	ldr	r6, [r3, #12]
   10774:	6814      	ldr	r4, [r2, #0]
   10776:	6833      	ldr	r3, [r6, #0]
   10778:	68a8      	ldr	r0, [r5, #8]
   1077a:	2c00      	cmp	r4, #0
   1077c:	d1ef      	bne.n	1075e <userFunction+0x76>
			HAL.IOs->config->toOutput(Pins.FREEZE);
   1077e:	68db      	ldr	r3, [r3, #12]
   10780:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.FREEZE);
   10782:	6833      	ldr	r3, [r6, #0]
   10784:	68a8      	ldr	r0, [r5, #8]
   10786:	699b      	ldr	r3, [r3, #24]
   10788:	e7e0      	b.n	1074c <userFunction+0x64>
		*value = tmc4361_calibrateClosedLoop(motorToIC(motor), 1);
   1078a:	480c      	ldr	r0, [pc, #48]	; (107bc <userFunction+0xd4>)
   1078c:	2101      	movs	r1, #1
   1078e:	f011 fc1b 	bl	21fc8 <tmc4361_calibrateClosedLoop>
   10792:	6020      	str	r0, [r4, #0]
		if(!*value)
   10794:	2800      	cmp	r0, #0
   10796:	d1cc      	bne.n	10732 <userFunction+0x4a>
			errors |= TMC_ERROR_NOT_DONE;
   10798:	2420      	movs	r4, #32
	return errors;
   1079a:	e7b3      	b.n	10704 <userFunction+0x1c>
		Evalboards.ch2.config->reset();
   1079c:	4c08      	ldr	r4, [pc, #32]	; (107c0 <userFunction+0xd8>)
   1079e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   107a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   107a6:	4798      	blx	r3
		Evalboards.ch1.config->reset();
   107a8:	69a3      	ldr	r3, [r4, #24]
   107aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   107ae:	4798      	blx	r3
   107b0:	e7bf      	b.n	10732 <userFunction+0x4a>
   107b2:	bf00      	nop
   107b4:	00029d1c 	.word	0x00029d1c
   107b8:	1fff2b90 	.word	0x1fff2b90
   107bc:	1fff2bb4 	.word	0x1fff2bb4
   107c0:	1fff5e88 	.word	0x1fff5e88

000107c4 <periodicJob>:
{
   107c4:	4601      	mov	r1, r0
	tmc4361_periodicJob(&TMC4361, tick);
   107c6:	4801      	ldr	r0, [pc, #4]	; (107cc <periodicJob+0x8>)
   107c8:	f011 bcbc 	b.w	22144 <tmc4361_periodicJob>
   107cc:	1fff2bb4 	.word	0x1fff2bb4

000107d0 <readRegister>:
{
   107d0:	b510      	push	{r4, lr}
	*value	= tmc4361_readInt(motorToIC(motor), address);
   107d2:	4803      	ldr	r0, [pc, #12]	; (107e0 <readRegister+0x10>)
{
   107d4:	4614      	mov	r4, r2
	*value	= tmc4361_readInt(motorToIC(motor), address);
   107d6:	f011 fac6 	bl	21d66 <tmc4361_readInt>
   107da:	6020      	str	r0, [r4, #0]
}
   107dc:	bd10      	pop	{r4, pc}
   107de:	bf00      	nop
   107e0:	1fff2bb4 	.word	0x1fff2bb4

000107e4 <writeRegister>:
	switch(address) {
   107e4:	296c      	cmp	r1, #108	; 0x6c
{
   107e6:	b570      	push	{r4, r5, r6, lr}
   107e8:	460d      	mov	r5, r1
   107ea:	4614      	mov	r4, r2
	switch(address) {
   107ec:	d023      	beq.n	10836 <writeRegister+0x52>
   107ee:	296d      	cmp	r1, #109	; 0x6d
   107f0:	d017      	beq.n	10822 <writeRegister+0x3e>
   107f2:	2906      	cmp	r1, #6
   107f4:	d118      	bne.n	10828 <writeRegister+0x44>
		switch(Evalboards.ch2.id) {
   107f6:	4b21      	ldr	r3, [pc, #132]	; (1087c <writeRegister+0x98>)
   107f8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   107fc:	2a03      	cmp	r2, #3
   107fe:	d02d      	beq.n	1085c <writeRegister+0x78>
   10800:	2a0b      	cmp	r2, #11
   10802:	d111      	bne.n	10828 <writeRegister+0x44>
			TMC2160_FIELD_UPDATE((TMC2160TypeDef *)Evalboards.ch2.type, TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT, FIELD_GET(value, TMC4361_HOLD_SCALE_VAL_MASK, TMC4361_HOLD_SCALE_VAL_SHIFT));
   10804:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   10806:	2110      	movs	r1, #16
   10808:	4630      	mov	r0, r6
   1080a:	f010 f862 	bl	208d2 <tmc2160_readInt>
   1080e:	f3c4 6204 	ubfx	r2, r4, #24, #5
   10812:	f020 001f 	bic.w	r0, r0, #31
   10816:	4302      	orrs	r2, r0
   10818:	2110      	movs	r1, #16
   1081a:	4630      	mov	r0, r6
   1081c:	f010 f84b 	bl	208b6 <tmc2160_writeInt>
			break;
   10820:	e002      	b.n	10828 <writeRegister+0x44>
		high = value;
   10822:	4b17      	ldr	r3, [pc, #92]	; (10880 <writeRegister+0x9c>)
   10824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	tmc4361_writeInt(motorToIC(motor), address, value);
   10828:	4622      	mov	r2, r4
   1082a:	4629      	mov	r1, r5
   1082c:	4815      	ldr	r0, [pc, #84]	; (10884 <writeRegister+0xa0>)
}
   1082e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361_writeInt(motorToIC(motor), address, value);
   10832:	f011 ba8a 	b.w	21d4a <tmc4361_writeInt>
		if(Evalboards.ch2.id == ID_TMC2660) // TMC2660 -> 20 bit registers, 8 bit address
   10836:	4911      	ldr	r1, [pc, #68]	; (1087c <writeRegister+0x98>)
   10838:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
   1083c:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
   10840:	2901      	cmp	r1, #1
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   10842:	bf19      	ittee	ne
   10844:	490e      	ldrne	r1, [pc, #56]	; (10880 <writeRegister+0x9c>)
   10846:	f8d1 12b8 	ldrne.w	r1, [r1, #696]	; 0x2b8
			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
   1084a:	f3c2 0213 	ubfxeq	r2, r2, #0, #20
   1084e:	f3c4 5102 	ubfxeq	r1, r4, #20, #3
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   10852:	bf18      	it	ne
   10854:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
   10858:	4798      	blx	r3
   1085a:	e7e5      	b.n	10828 <writeRegister+0x44>
			TMC2130_FIELD_UPDATE((TMC2130TypeDef *)Evalboards.ch2.type, TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT, FIELD_GET(value, TMC4361_HOLD_SCALE_VAL_MASK, TMC4361_HOLD_SCALE_VAL_SHIFT));
   1085c:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   1085e:	2110      	movs	r1, #16
   10860:	4630      	mov	r0, r6
   10862:	f00f ff10 	bl	20686 <tmc2130_readInt>
   10866:	f3c4 6204 	ubfx	r2, r4, #24, #5
   1086a:	f020 001f 	bic.w	r0, r0, #31
   1086e:	4302      	orrs	r2, r0
   10870:	2110      	movs	r1, #16
   10872:	4630      	mov	r0, r6
   10874:	f00f fef9 	bl	2066a <tmc2130_writeInt>
			break;
   10878:	e7d6      	b.n	10828 <writeRegister+0x44>
   1087a:	bf00      	nop
   1087c:	1fff5e88 	.word	0x1fff5e88
   10880:	1fff2b90 	.word	0x1fff2b90
   10884:	1fff2bb4 	.word	0x1fff2bb4

00010888 <moveBy>:
{
   10888:	b508      	push	{r3, lr}
	tmc4361_moveBy(motorToIC(motor), ticks, vmax_position);
   1088a:	4804      	ldr	r0, [pc, #16]	; (1089c <moveBy+0x14>)
   1088c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   10890:	3024      	adds	r0, #36	; 0x24
   10892:	f011 fb89 	bl	21fa8 <tmc4361_moveBy>
}
   10896:	2000      	movs	r0, #0
   10898:	bd08      	pop	{r3, pc}
   1089a:	bf00      	nop
   1089c:	1fff2b90 	.word	0x1fff2b90

000108a0 <moveTo>:
{
   108a0:	b508      	push	{r3, lr}
	tmc4361_moveTo(motorToIC(motor), position, vmax_position);
   108a2:	4804      	ldr	r0, [pc, #16]	; (108b4 <moveTo+0x14>)
   108a4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   108a8:	3024      	adds	r0, #36	; 0x24
   108aa:	f011 fb61 	bl	21f70 <tmc4361_moveTo>
}
   108ae:	2000      	movs	r0, #0
   108b0:	bd08      	pop	{r3, pc}
   108b2:	bf00      	nop
   108b4:	1fff2b90 	.word	0x1fff2b90

000108b8 <handleParameter>:
{
   108b8:	b570      	push	{r4, r5, r6, lr}
   108ba:	4605      	mov	r5, r0
   108bc:	461e      	mov	r6, r3
	if(motor >= TMC4361_MOTORS)
   108be:	460c      	mov	r4, r1
   108c0:	2900      	cmp	r1, #0
   108c2:	f040 8387 	bne.w	10fd4 <handleParameter+0x71c>
	switch(type)
   108c6:	2a8a      	cmp	r2, #138	; 0x8a
   108c8:	d84b      	bhi.n	10962 <handleParameter+0xaa>
   108ca:	2a6b      	cmp	r2, #107	; 0x6b
   108cc:	d803      	bhi.n	108d6 <handleParameter+0x1e>
   108ce:	2a1b      	cmp	r2, #27
   108d0:	d926      	bls.n	10920 <handleParameter+0x68>
   108d2:	2504      	movs	r5, #4
   108d4:	e050      	b.n	10978 <handleParameter+0xc0>
   108d6:	3a6c      	subs	r2, #108	; 0x6c
   108d8:	2a1e      	cmp	r2, #30
   108da:	f200 837d 	bhi.w	10fd8 <handleParameter+0x720>
   108de:	e8df f012 	tbh	[pc, r2, lsl #1]
   108e2:	01a7      	.short	0x01a7
   108e4:	01c301b5 	.word	0x01c301b5
   108e8:	01ee01d8 	.word	0x01ee01d8
   108ec:	021001fc 	.word	0x021001fc
   108f0:	02350227 	.word	0x02350227
   108f4:	025a0243 	.word	0x025a0243
   108f8:	027e0270 	.word	0x027e0270
   108fc:	037b028c 	.word	0x037b028c
   10900:	029a037b 	.word	0x029a037b
   10904:	02b602a8 	.word	0x02b602a8
   10908:	037b037b 	.word	0x037b037b
   1090c:	037b02ce 	.word	0x037b02ce
   10910:	02ea037b 	.word	0x02ea037b
   10914:	030002f3 	.word	0x030002f3
   10918:	030e037b 	.word	0x030e037b
   1091c:	03380322 	.word	0x03380322
   10920:	2a1b      	cmp	r2, #27
   10922:	f200 835b 	bhi.w	10fdc <handleParameter+0x724>
   10926:	e8df f012 	tbh	[pc, r2, lsl #1]
   1092a:	002e      	.short	0x002e
   1092c:	004a003c 	.word	0x004a003c
   10930:	0065005c 	.word	0x0065005c
   10934:	03590081 	.word	0x03590081
   10938:	00950359 	.word	0x00950359
   1093c:	03590359 	.word	0x03590359
   10940:	03590359 	.word	0x03590359
   10944:	00a00359 	.word	0x00a00359
   10948:	00c100b3 	.word	0x00c100b3
   1094c:	00e900d5 	.word	0x00e900d5
   10950:	010b00f7 	.word	0x010b00f7
   10954:	012b0119 	.word	0x012b0119
   10958:	01470139 	.word	0x01470139
   1095c:	01630155 	.word	0x01630155
   10960:	0175      	.short	0x0175
   10962:	2ad4      	cmp	r2, #212	; 0xd4
   10964:	f000 8319 	beq.w	10f9a <handleParameter+0x6e2>
   10968:	d808      	bhi.n	1097c <handleParameter+0xc4>
   1096a:	2ac8      	cmp	r2, #200	; 0xc8
   1096c:	f000 81b5 	beq.w	10cda <handleParameter+0x422>
   10970:	2ad1      	cmp	r2, #209	; 0xd1
   10972:	f000 8304 	beq.w	10f7e <handleParameter+0x6c6>
   10976:	2504      	movs	r5, #4
}
   10978:	4628      	mov	r0, r5
   1097a:	bd70      	pop	{r4, r5, r6, pc}
	switch(type)
   1097c:	2ad6      	cmp	r2, #214	; 0xd6
   1097e:	f000 8319 	beq.w	10fb4 <handleParameter+0x6fc>
   10982:	2504      	movs	r5, #4
   10984:	e7f8      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10986:	b928      	cbnz	r0, 10994 <handleParameter+0xdc>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_X_TARGET);
   10988:	48a0      	ldr	r0, [pc, #640]	; (10c0c <handleParameter+0x354>)
   1098a:	2137      	movs	r1, #55	; 0x37
   1098c:	f011 f9eb 	bl	21d66 <tmc4361_readInt>
   10990:	6030      	str	r0, [r6, #0]
   10992:	e7f1      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_X_TARGET, *value);
   10994:	6832      	ldr	r2, [r6, #0]
   10996:	489d      	ldr	r0, [pc, #628]	; (10c0c <handleParameter+0x354>)
   10998:	2137      	movs	r1, #55	; 0x37
   1099a:	f011 f9d6 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1099e:	2500      	movs	r5, #0
   109a0:	e7ea      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   109a2:	b928      	cbnz	r0, 109b0 <handleParameter+0xf8>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_XACTUAL);
   109a4:	4899      	ldr	r0, [pc, #612]	; (10c0c <handleParameter+0x354>)
   109a6:	2121      	movs	r1, #33	; 0x21
   109a8:	f011 f9dd 	bl	21d66 <tmc4361_readInt>
   109ac:	6030      	str	r0, [r6, #0]
   109ae:	e7e3      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_XACTUAL, *value);
   109b0:	6832      	ldr	r2, [r6, #0]
   109b2:	4896      	ldr	r0, [pc, #600]	; (10c0c <handleParameter+0x354>)
   109b4:	2121      	movs	r1, #33	; 0x21
   109b6:	f011 f9c8 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   109ba:	2500      	movs	r5, #0
   109bc:	e7dc      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   109be:	b930      	cbnz	r0, 109ce <handleParameter+0x116>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VMAX) >> 8;
   109c0:	4892      	ldr	r0, [pc, #584]	; (10c0c <handleParameter+0x354>)
   109c2:	2124      	movs	r1, #36	; 0x24
   109c4:	f011 f9cf 	bl	21d66 <tmc4361_readInt>
   109c8:	1200      	asrs	r0, r0, #8
   109ca:	6030      	str	r0, [r6, #0]
   109cc:	e7d4      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VMAX, tmc4361_discardVelocityDecimals(*value));
   109ce:	6830      	ldr	r0, [r6, #0]
   109d0:	f011 fa9d 	bl	21f0e <tmc4361_discardVelocityDecimals>
   109d4:	2124      	movs	r1, #36	; 0x24
   109d6:	4602      	mov	r2, r0
   109d8:	488c      	ldr	r0, [pc, #560]	; (10c0c <handleParameter+0x354>)
   109da:	f011 f9b6 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   109de:	2500      	movs	r5, #0
   109e0:	e7ca      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   109e2:	2800      	cmp	r0, #0
   109e4:	f040 82fc 	bne.w	10fe0 <handleParameter+0x728>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VACTUAL);
   109e8:	4888      	ldr	r0, [pc, #544]	; (10c0c <handleParameter+0x354>)
   109ea:	2122      	movs	r1, #34	; 0x22
   109ec:	f011 f9bb 	bl	21d66 <tmc4361_readInt>
   109f0:	6030      	str	r0, [r6, #0]
   109f2:	e7c1      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   109f4:	4c86      	ldr	r4, [pc, #536]	; (10c10 <handleParameter+0x358>)
   109f6:	b918      	cbnz	r0, 10a00 <handleParameter+0x148>
			*value = vmax_position;
   109f8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   109fc:	6033      	str	r3, [r6, #0]
   109fe:	e7bb      	b.n	10978 <handleParameter+0xc0>
			vmax_position = *value;
   10a00:	6833      	ldr	r3, [r6, #0]
   10a02:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
			if(tmc4361_readInt(motorToIC(motor), TMC4361_RAMPMODE) & TMC4361_RAMP_POSITION)
   10a06:	2120      	movs	r1, #32
   10a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
   10a0c:	f011 f9ab 	bl	21d66 <tmc4361_readInt>
   10a10:	0742      	lsls	r2, r0, #29
   10a12:	f140 823f 	bpl.w	10e94 <handleParameter+0x5dc>
				tmc4361_writeInt(motorToIC(motor), TMC4361_VMAX, tmc4361_discardVelocityDecimals(vmax_position));
   10a16:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
   10a1a:	f011 fa78 	bl	21f0e <tmc4361_discardVelocityDecimals>
   10a1e:	2124      	movs	r1, #36	; 0x24
   10a20:	4602      	mov	r2, r0
   10a22:	1860      	adds	r0, r4, r1
   10a24:	f011 f991 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10a28:	2500      	movs	r5, #0
   10a2a:	e7a5      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10a2c:	b930      	cbnz	r0, 10a3c <handleParameter+0x184>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_AMAX)>>2;
   10a2e:	4877      	ldr	r0, [pc, #476]	; (10c0c <handleParameter+0x354>)
   10a30:	2128      	movs	r1, #40	; 0x28
   10a32:	f011 f998 	bl	21d66 <tmc4361_readInt>
   10a36:	1080      	asrs	r0, r0, #2
   10a38:	6030      	str	r0, [r6, #0]
   10a3a:	e79d      	b.n	10978 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   10a3c:	6832      	ldr	r2, [r6, #0]
   10a3e:	0d95      	lsrs	r5, r2, #22
   10a40:	05ad      	lsls	r5, r5, #22
   10a42:	2d00      	cmp	r5, #0
   10a44:	f040 82ce 	bne.w	10fe4 <handleParameter+0x72c>
				tmc4361_writeInt(motorToIC(motor), TMC4361_AMAX, *value<<2);
   10a48:	4870      	ldr	r0, [pc, #448]	; (10c0c <handleParameter+0x354>)
   10a4a:	0092      	lsls	r2, r2, #2
   10a4c:	2128      	movs	r1, #40	; 0x28
   10a4e:	f011 f97c 	bl	21d4a <tmc4361_writeInt>
   10a52:	e791      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10a54:	2800      	cmp	r0, #0
   10a56:	f040 82c7 	bne.w	10fe8 <handleParameter+0x730>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_STATUS) & (1<<0))? 1:0;
   10a5a:	486c      	ldr	r0, [pc, #432]	; (10c0c <handleParameter+0x354>)
   10a5c:	210f      	movs	r1, #15
   10a5e:	f011 f982 	bl	21d66 <tmc4361_readInt>
   10a62:	f000 0001 	and.w	r0, r0, #1
   10a66:	6030      	str	r0, [r6, #0]
   10a68:	e786      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10a6a:	b930      	cbnz	r0, 10a7a <handleParameter+0x1c2>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_RAMPMODE)<<1;
   10a6c:	4867      	ldr	r0, [pc, #412]	; (10c0c <handleParameter+0x354>)
   10a6e:	2120      	movs	r1, #32
   10a70:	f011 f979 	bl	21d66 <tmc4361_readInt>
   10a74:	0040      	lsls	r0, r0, #1
   10a76:	6030      	str	r0, [r6, #0]
   10a78:	e77e      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_RAMPMODE, (*value) ? TMC4361_RAMP_SSHAPE : TMC4361_RAMP_TRAPEZ);
   10a7a:	6833      	ldr	r3, [r6, #0]
   10a7c:	4863      	ldr	r0, [pc, #396]	; (10c0c <handleParameter+0x354>)
   10a7e:	2b00      	cmp	r3, #0
   10a80:	bf14      	ite	ne
   10a82:	2202      	movne	r2, #2
   10a84:	2201      	moveq	r2, #1
   10a86:	2120      	movs	r1, #32
   10a88:	f011 f95f 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10a8c:	2500      	movs	r5, #0
   10a8e:	e773      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10a90:	b928      	cbnz	r0, 10a9e <handleParameter+0x1e6>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VSTART);
   10a92:	485e      	ldr	r0, [pc, #376]	; (10c0c <handleParameter+0x354>)
   10a94:	2125      	movs	r1, #37	; 0x25
   10a96:	f011 f966 	bl	21d66 <tmc4361_readInt>
   10a9a:	6030      	str	r0, [r6, #0]
   10a9c:	e76c      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VSTART, *value);
   10a9e:	6832      	ldr	r2, [r6, #0]
   10aa0:	485a      	ldr	r0, [pc, #360]	; (10c0c <handleParameter+0x354>)
   10aa2:	2125      	movs	r1, #37	; 0x25
   10aa4:	f011 f951 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10aa8:	2500      	movs	r5, #0
   10aaa:	e765      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10aac:	b930      	cbnz	r0, 10abc <handleParameter+0x204>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_ASTART)>>2;
   10aae:	4857      	ldr	r0, [pc, #348]	; (10c0c <handleParameter+0x354>)
   10ab0:	212a      	movs	r1, #42	; 0x2a
   10ab2:	f011 f958 	bl	21d66 <tmc4361_readInt>
   10ab6:	1080      	asrs	r0, r0, #2
   10ab8:	6030      	str	r0, [r6, #0]
   10aba:	e75d      	b.n	10978 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   10abc:	6832      	ldr	r2, [r6, #0]
   10abe:	0d95      	lsrs	r5, r2, #22
   10ac0:	05ad      	lsls	r5, r5, #22
   10ac2:	2d00      	cmp	r5, #0
   10ac4:	f040 8292 	bne.w	10fec <handleParameter+0x734>
				tmc4361_writeInt(motorToIC(motor), TMC4361_ASTART, *value<<2);
   10ac8:	4850      	ldr	r0, [pc, #320]	; (10c0c <handleParameter+0x354>)
   10aca:	0092      	lsls	r2, r2, #2
   10acc:	212a      	movs	r1, #42	; 0x2a
   10ace:	f011 f93c 	bl	21d4a <tmc4361_writeInt>
   10ad2:	e751      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10ad4:	b930      	cbnz	r0, 10ae4 <handleParameter+0x22c>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_DMAX)>>2;
   10ad6:	484d      	ldr	r0, [pc, #308]	; (10c0c <handleParameter+0x354>)
   10ad8:	2129      	movs	r1, #41	; 0x29
   10ada:	f011 f944 	bl	21d66 <tmc4361_readInt>
   10ade:	1080      	asrs	r0, r0, #2
   10ae0:	6030      	str	r0, [r6, #0]
   10ae2:	e749      	b.n	10978 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   10ae4:	6832      	ldr	r2, [r6, #0]
   10ae6:	0d95      	lsrs	r5, r2, #22
   10ae8:	05ad      	lsls	r5, r5, #22
   10aea:	2d00      	cmp	r5, #0
   10aec:	f040 8280 	bne.w	10ff0 <handleParameter+0x738>
				tmc4361_writeInt(motorToIC(motor), TMC4361_DMAX, *value<<2);
   10af0:	4846      	ldr	r0, [pc, #280]	; (10c0c <handleParameter+0x354>)
   10af2:	0092      	lsls	r2, r2, #2
   10af4:	2129      	movs	r1, #41	; 0x29
   10af6:	f011 f928 	bl	21d4a <tmc4361_writeInt>
   10afa:	e73d      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10afc:	b928      	cbnz	r0, 10b0a <handleParameter+0x252>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VBREAK);
   10afe:	4843      	ldr	r0, [pc, #268]	; (10c0c <handleParameter+0x354>)
   10b00:	2127      	movs	r1, #39	; 0x27
   10b02:	f011 f930 	bl	21d66 <tmc4361_readInt>
   10b06:	6030      	str	r0, [r6, #0]
   10b08:	e736      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VBREAK, *value);
   10b0a:	6832      	ldr	r2, [r6, #0]
   10b0c:	483f      	ldr	r0, [pc, #252]	; (10c0c <handleParameter+0x354>)
   10b0e:	2127      	movs	r1, #39	; 0x27
   10b10:	f011 f91b 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10b14:	2500      	movs	r5, #0
   10b16:	e72f      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10b18:	b930      	cbnz	r0, 10b28 <handleParameter+0x270>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_DFINAL) >> 2;
   10b1a:	483c      	ldr	r0, [pc, #240]	; (10c0c <handleParameter+0x354>)
   10b1c:	212b      	movs	r1, #43	; 0x2b
   10b1e:	f011 f922 	bl	21d66 <tmc4361_readInt>
   10b22:	1080      	asrs	r0, r0, #2
   10b24:	6030      	str	r0, [r6, #0]
   10b26:	e727      	b.n	10978 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   10b28:	6832      	ldr	r2, [r6, #0]
   10b2a:	0d95      	lsrs	r5, r2, #22
   10b2c:	05ad      	lsls	r5, r5, #22
   10b2e:	2d00      	cmp	r5, #0
   10b30:	f040 8260 	bne.w	10ff4 <handleParameter+0x73c>
				tmc4361_writeInt(motorToIC(motor), TMC4361_DFINAL, *value<<2);
   10b34:	4835      	ldr	r0, [pc, #212]	; (10c0c <handleParameter+0x354>)
   10b36:	0092      	lsls	r2, r2, #2
   10b38:	212b      	movs	r1, #43	; 0x2b
   10b3a:	f011 f906 	bl	21d4a <tmc4361_writeInt>
   10b3e:	e71b      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10b40:	b928      	cbnz	r0, 10b4e <handleParameter+0x296>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VSTOP);
   10b42:	4832      	ldr	r0, [pc, #200]	; (10c0c <handleParameter+0x354>)
   10b44:	2126      	movs	r1, #38	; 0x26
   10b46:	f011 f90e 	bl	21d66 <tmc4361_readInt>
   10b4a:	6030      	str	r0, [r6, #0]
   10b4c:	e714      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VSTOP, *value);
   10b4e:	6832      	ldr	r2, [r6, #0]
   10b50:	482e      	ldr	r0, [pc, #184]	; (10c0c <handleParameter+0x354>)
   10b52:	2126      	movs	r1, #38	; 0x26
   10b54:	f011 f8f9 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10b58:	2500      	movs	r5, #0
   10b5a:	e70d      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10b5c:	b928      	cbnz	r0, 10b6a <handleParameter+0x2b2>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_DSTOP);
   10b5e:	482b      	ldr	r0, [pc, #172]	; (10c0c <handleParameter+0x354>)
   10b60:	212c      	movs	r1, #44	; 0x2c
   10b62:	f011 f900 	bl	21d66 <tmc4361_readInt>
   10b66:	6030      	str	r0, [r6, #0]
   10b68:	e706      	b.n	10978 <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   10b6a:	6832      	ldr	r2, [r6, #0]
   10b6c:	0d95      	lsrs	r5, r2, #22
   10b6e:	05ad      	lsls	r5, r5, #22
   10b70:	2d00      	cmp	r5, #0
   10b72:	f040 8241 	bne.w	10ff8 <handleParameter+0x740>
				tmc4361_writeInt(motorToIC(motor), TMC4361_DSTOP, *value);
   10b76:	4825      	ldr	r0, [pc, #148]	; (10c0c <handleParameter+0x354>)
   10b78:	212c      	movs	r1, #44	; 0x2c
   10b7a:	f011 f8e6 	bl	21d4a <tmc4361_writeInt>
   10b7e:	e6fb      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10b80:	b928      	cbnz	r0, 10b8e <handleParameter+0x2d6>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_BOW1);
   10b82:	4822      	ldr	r0, [pc, #136]	; (10c0c <handleParameter+0x354>)
   10b84:	212d      	movs	r1, #45	; 0x2d
   10b86:	f011 f8ee 	bl	21d66 <tmc4361_readInt>
   10b8a:	6030      	str	r0, [r6, #0]
   10b8c:	e6f4      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_BOW1, *value);
   10b8e:	6832      	ldr	r2, [r6, #0]
   10b90:	481e      	ldr	r0, [pc, #120]	; (10c0c <handleParameter+0x354>)
   10b92:	212d      	movs	r1, #45	; 0x2d
   10b94:	f011 f8d9 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10b98:	2500      	movs	r5, #0
   10b9a:	e6ed      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10b9c:	b928      	cbnz	r0, 10baa <handleParameter+0x2f2>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_BOW2);
   10b9e:	481b      	ldr	r0, [pc, #108]	; (10c0c <handleParameter+0x354>)
   10ba0:	212e      	movs	r1, #46	; 0x2e
   10ba2:	f011 f8e0 	bl	21d66 <tmc4361_readInt>
   10ba6:	6030      	str	r0, [r6, #0]
   10ba8:	e6e6      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_BOW2, *value);
   10baa:	6832      	ldr	r2, [r6, #0]
   10bac:	4817      	ldr	r0, [pc, #92]	; (10c0c <handleParameter+0x354>)
   10bae:	212e      	movs	r1, #46	; 0x2e
   10bb0:	f011 f8cb 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10bb4:	2500      	movs	r5, #0
   10bb6:	e6df      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10bb8:	b928      	cbnz	r0, 10bc6 <handleParameter+0x30e>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_BOW3);
   10bba:	4814      	ldr	r0, [pc, #80]	; (10c0c <handleParameter+0x354>)
   10bbc:	212f      	movs	r1, #47	; 0x2f
   10bbe:	f011 f8d2 	bl	21d66 <tmc4361_readInt>
   10bc2:	6030      	str	r0, [r6, #0]
   10bc4:	e6d8      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_BOW3, *value);
   10bc6:	6832      	ldr	r2, [r6, #0]
   10bc8:	4810      	ldr	r0, [pc, #64]	; (10c0c <handleParameter+0x354>)
   10bca:	212f      	movs	r1, #47	; 0x2f
   10bcc:	f011 f8bd 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10bd0:	2500      	movs	r5, #0
   10bd2:	e6d1      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10bd4:	b928      	cbnz	r0, 10be2 <handleParameter+0x32a>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_BOW4);
   10bd6:	480d      	ldr	r0, [pc, #52]	; (10c0c <handleParameter+0x354>)
   10bd8:	2130      	movs	r1, #48	; 0x30
   10bda:	f011 f8c4 	bl	21d66 <tmc4361_readInt>
   10bde:	6030      	str	r0, [r6, #0]
   10be0:	e6ca      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_BOW4, *value);
   10be2:	6832      	ldr	r2, [r6, #0]
   10be4:	4809      	ldr	r0, [pc, #36]	; (10c0c <handleParameter+0x354>)
   10be6:	2130      	movs	r1, #48	; 0x30
   10be8:	f011 f8af 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10bec:	2500      	movs	r5, #0
   10bee:	e6c3      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10bf0:	b928      	cbnz	r0, 10bfe <handleParameter+0x346>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VIRT_STOP_LEFT);
   10bf2:	4806      	ldr	r0, [pc, #24]	; (10c0c <handleParameter+0x354>)
   10bf4:	2133      	movs	r1, #51	; 0x33
   10bf6:	f011 f8b6 	bl	21d66 <tmc4361_readInt>
   10bfa:	6030      	str	r0, [r6, #0]
   10bfc:	e6bc      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VIRT_STOP_LEFT, *value);
   10bfe:	6832      	ldr	r2, [r6, #0]
   10c00:	4802      	ldr	r0, [pc, #8]	; (10c0c <handleParameter+0x354>)
   10c02:	2133      	movs	r1, #51	; 0x33
   10c04:	f011 f8a1 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10c08:	2500      	movs	r5, #0
   10c0a:	e6b5      	b.n	10978 <handleParameter+0xc0>
   10c0c:	1fff2bb4 	.word	0x1fff2bb4
   10c10:	1fff2b90 	.word	0x1fff2b90
		if(readWrite == READ) {
   10c14:	b928      	cbnz	r0, 10c22 <handleParameter+0x36a>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_VIRT_STOP_RIGHT);
   10c16:	48a0      	ldr	r0, [pc, #640]	; (10e98 <handleParameter+0x5e0>)
   10c18:	2134      	movs	r1, #52	; 0x34
   10c1a:	f011 f8a4 	bl	21d66 <tmc4361_readInt>
   10c1e:	6030      	str	r0, [r6, #0]
   10c20:	e6aa      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_VIRT_STOP_RIGHT, *value);
   10c22:	6832      	ldr	r2, [r6, #0]
   10c24:	489c      	ldr	r0, [pc, #624]	; (10e98 <handleParameter+0x5e0>)
   10c26:	2134      	movs	r1, #52	; 0x34
   10c28:	f011 f88f 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10c2c:	2500      	movs	r5, #0
   10c2e:	e6a3      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10c30:	b928      	cbnz	r0, 10c3e <handleParameter+0x386>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_VMIN_EMF_WR);		// read from shadow register
   10c32:	4899      	ldr	r0, [pc, #612]	; (10e98 <handleParameter+0x5e0>)
   10c34:	2160      	movs	r1, #96	; 0x60
   10c36:	f011 f896 	bl	21d66 <tmc4361_readInt>
   10c3a:	6030      	str	r0, [r6, #0]
   10c3c:	e69c      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_VMIN_EMF_WR, *value);
   10c3e:	6832      	ldr	r2, [r6, #0]
   10c40:	4895      	ldr	r0, [pc, #596]	; (10e98 <handleParameter+0x5e0>)
   10c42:	2160      	movs	r1, #96	; 0x60
   10c44:	f011 f881 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10c48:	2500      	movs	r5, #0
   10c4a:	e695      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10c4c:	b928      	cbnz	r0, 10c5a <handleParameter+0x3a2>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_VADD_EMF); 	// read from shadow register
   10c4e:	4892      	ldr	r0, [pc, #584]	; (10e98 <handleParameter+0x5e0>)
   10c50:	2161      	movs	r1, #97	; 0x61
   10c52:	f011 f888 	bl	21d66 <tmc4361_readInt>
   10c56:	6030      	str	r0, [r6, #0]
   10c58:	e68e      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_VADD_EMF, *value);
   10c5a:	6832      	ldr	r2, [r6, #0]
   10c5c:	488e      	ldr	r0, [pc, #568]	; (10e98 <handleParameter+0x5e0>)
   10c5e:	2161      	movs	r1, #97	; 0x61
   10c60:	f011 f873 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10c64:	2500      	movs	r5, #0
   10c66:	e687      	b.n	10978 <handleParameter+0xc0>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_BETA) >> 16;
   10c68:	488b      	ldr	r0, [pc, #556]	; (10e98 <handleParameter+0x5e0>)
   10c6a:	211c      	movs	r1, #28
		if(readWrite == READ) {
   10c6c:	b925      	cbnz	r5, 10c78 <handleParameter+0x3c0>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_BETA) >> 16;
   10c6e:	f011 f87a 	bl	21d66 <tmc4361_readInt>
   10c72:	1400      	asrs	r0, r0, #16
   10c74:	6030      	str	r0, [r6, #0]
   10c76:	e67f      	b.n	10978 <handleParameter+0xc0>
			uvalue = tmc4361_readInt(motorToIC(motor),  TMC4361_CL_BETA) & 0x000001FF;
   10c78:	f011 f875 	bl	21d66 <tmc4361_readInt>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_BETA, uvalue | (*value<<16));
   10c7c:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4361_readInt(motorToIC(motor),  TMC4361_CL_BETA) & 0x000001FF;
   10c7e:	f3c0 0008 	ubfx	r0, r0, #0, #9
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_BETA, uvalue | (*value<<16));
   10c82:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
   10c86:	211c      	movs	r1, #28
   10c88:	4883      	ldr	r0, [pc, #524]	; (10e98 <handleParameter+0x5e0>)
   10c8a:	f011 f85e 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10c8e:	2500      	movs	r5, #0
   10c90:	e672      	b.n	10978 <handleParameter+0xc0>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_BETA) & 0xFF;
   10c92:	4881      	ldr	r0, [pc, #516]	; (10e98 <handleParameter+0x5e0>)
   10c94:	211c      	movs	r1, #28
		if(readWrite == READ) {
   10c96:	b925      	cbnz	r5, 10ca2 <handleParameter+0x3ea>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_BETA) & 0xFF;
   10c98:	f011 f865 	bl	21d66 <tmc4361_readInt>
   10c9c:	b2c0      	uxtb	r0, r0
   10c9e:	6030      	str	r0, [r6, #0]
   10ca0:	e66a      	b.n	10978 <handleParameter+0xc0>
			uvalue = tmc4361_readInt(motorToIC(motor),  TMC4361_CL_BETA) & 0x00FF0000;
   10ca2:	f011 f860 	bl	21d66 <tmc4361_readInt>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_BETA, uvalue | (*value & 0x1FF));
   10ca6:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4361_readInt(motorToIC(motor),  TMC4361_CL_BETA) & 0x00FF0000;
   10ca8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_BETA, uvalue | (*value & 0x1FF));
   10cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10cb0:	4302      	orrs	r2, r0
   10cb2:	211c      	movs	r1, #28
   10cb4:	4878      	ldr	r0, [pc, #480]	; (10e98 <handleParameter+0x5e0>)
   10cb6:	f011 f848 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10cba:	2500      	movs	r5, #0
   10cbc:	e65c      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10cbe:	b928      	cbnz	r0, 10ccc <handleParameter+0x414>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_OFFSET);
   10cc0:	4875      	ldr	r0, [pc, #468]	; (10e98 <handleParameter+0x5e0>)
   10cc2:	2159      	movs	r1, #89	; 0x59
   10cc4:	f011 f84f 	bl	21d66 <tmc4361_readInt>
   10cc8:	6030      	str	r0, [r6, #0]
   10cca:	e655      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_OFFSET, *value);
   10ccc:	6832      	ldr	r2, [r6, #0]
   10cce:	4872      	ldr	r0, [pc, #456]	; (10e98 <handleParameter+0x5e0>)
   10cd0:	2159      	movs	r1, #89	; 0x59
   10cd2:	f011 f83a 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10cd6:	2500      	movs	r5, #0
   10cd8:	e64e      	b.n	10978 <handleParameter+0xc0>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 0) & 0xFF;
   10cda:	486f      	ldr	r0, [pc, #444]	; (10e98 <handleParameter+0x5e0>)
   10cdc:	2106      	movs	r1, #6
		if(readWrite == READ) {
   10cde:	b925      	cbnz	r5, 10cea <handleParameter+0x432>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 0) & 0xFF;
   10ce0:	f011 f841 	bl	21d66 <tmc4361_readInt>
   10ce4:	b2c0      	uxtb	r0, r0
   10ce6:	6030      	str	r0, [r6, #0]
   10ce8:	e646      	b.n	10978 <handleParameter+0xc0>
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<0);
   10cea:	f011 f83c 	bl	21d66 <tmc4361_readInt>
			uvalue |= (*value & 0xFF) << 0;
   10cee:	7832      	ldrb	r2, [r6, #0]
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<0);
   10cf0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
			tmc4361_writeInt(motorToIC(motor), TMC4361_SCALE_VALUES, uvalue);
   10cf4:	4302      	orrs	r2, r0
   10cf6:	2106      	movs	r1, #6
   10cf8:	4867      	ldr	r0, [pc, #412]	; (10e98 <handleParameter+0x5e0>)
   10cfa:	f011 f826 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10cfe:	2500      	movs	r5, #0
   10d00:	e63a      	b.n	10978 <handleParameter+0xc0>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 8) & 0xFF;
   10d02:	4865      	ldr	r0, [pc, #404]	; (10e98 <handleParameter+0x5e0>)
   10d04:	2106      	movs	r1, #6
		if(readWrite == READ) {
   10d06:	b92d      	cbnz	r5, 10d14 <handleParameter+0x45c>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 8) & 0xFF;
   10d08:	f011 f82d 	bl	21d66 <tmc4361_readInt>
   10d0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   10d10:	6030      	str	r0, [r6, #0]
   10d12:	e631      	b.n	10978 <handleParameter+0xc0>
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<8);
   10d14:	f011 f827 	bl	21d66 <tmc4361_readInt>
			uvalue |= (*value & 0xFF) << 8;
   10d18:	6833      	ldr	r3, [r6, #0]
   10d1a:	021b      	lsls	r3, r3, #8
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<8);
   10d1c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
			uvalue |= (*value & 0xFF) << 8;
   10d20:	b29b      	uxth	r3, r3
			tmc4361_writeInt(motorToIC(motor), TMC4361_SCALE_VALUES, uvalue);
   10d22:	485d      	ldr	r0, [pc, #372]	; (10e98 <handleParameter+0x5e0>)
   10d24:	431a      	orrs	r2, r3
   10d26:	2106      	movs	r1, #6
   10d28:	f011 f80f 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10d2c:	2500      	movs	r5, #0
   10d2e:	e623      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10d30:	b928      	cbnz	r0, 10d3e <handleParameter+0x486>
			*value = TMC4361.config->shadowRegister[TMC4361_CL_VMAX_CALC_P_WR];
   10d32:	4b5a      	ldr	r3, [pc, #360]	; (10e9c <handleParameter+0x5e4>)
   10d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10d36:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   10d3a:	6033      	str	r3, [r6, #0]
   10d3c:	e61c      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_VMAX_CALC_P_WR, *value);
   10d3e:	6832      	ldr	r2, [r6, #0]
   10d40:	4855      	ldr	r0, [pc, #340]	; (10e98 <handleParameter+0x5e0>)
   10d42:	215a      	movs	r1, #90	; 0x5a
   10d44:	f011 f801 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10d48:	2500      	movs	r5, #0
   10d4a:	e615      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10d4c:	b928      	cbnz	r0, 10d5a <handleParameter+0x4a2>
			*value = TMC4361.config->shadowRegister[TMC4361_CL_VMAX_CALC_I_WR];
   10d4e:	4b53      	ldr	r3, [pc, #332]	; (10e9c <handleParameter+0x5e4>)
   10d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10d52:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   10d56:	6033      	str	r3, [r6, #0]
   10d58:	e60e      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_VMAX_CALC_I_WR, *value);
   10d5a:	6832      	ldr	r2, [r6, #0]
   10d5c:	484e      	ldr	r0, [pc, #312]	; (10e98 <handleParameter+0x5e0>)
   10d5e:	215b      	movs	r1, #91	; 0x5b
   10d60:	f010 fff3 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10d64:	2500      	movs	r5, #0
   10d66:	e607      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10d68:	484c      	ldr	r0, [pc, #304]	; (10e9c <handleParameter+0x5e4>)
   10d6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10d6c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   10d70:	b91d      	cbnz	r5, 10d7a <handleParameter+0x4c2>
			*value &= 0x7FFF;
   10d72:	f3c3 030e 	ubfx	r3, r3, #0, #15
   10d76:	6033      	str	r3, [r6, #0]
   10d78:	e5fe      	b.n	10978 <handleParameter+0xc0>
			uvalue |= (*value & 0x7FFF) << 0;
   10d7a:	6832      	ldr	r2, [r6, #0]
			uvalue &= ~(0x7FFF << 0);
   10d7c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   10d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
			uvalue |= (*value & 0x7FFF) << 0;
   10d84:	f3c2 020e 	ubfx	r2, r2, #0, #15
			tmc4361_writeInt(motorToIC(motor), TMC4361_PID_I_WR, uvalue);
   10d88:	431a      	orrs	r2, r3
   10d8a:	215b      	movs	r1, #91	; 0x5b
   10d8c:	3024      	adds	r0, #36	; 0x24
   10d8e:	f010 ffdc 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10d92:	2500      	movs	r5, #0
   10d94:	e5f0      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10d96:	4841      	ldr	r0, [pc, #260]	; (10e9c <handleParameter+0x5e4>)
   10d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10d9a:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
   10d9e:	b91d      	cbnz	r5, 10da8 <handleParameter+0x4f0>
			*value &= 0xFF;
   10da0:	f3c2 4207 	ubfx	r2, r2, #16, #8
   10da4:	6032      	str	r2, [r6, #0]
   10da6:	e5e7      	b.n	10978 <handleParameter+0xc0>
			uvalue |= (*value & 0xFF) << 16;
   10da8:	6833      	ldr	r3, [r6, #0]
   10daa:	041b      	lsls	r3, r3, #16
   10dac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
   10db0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4361_writeInt(motorToIC(motor), TMC4361_PID_I_WR, uvalue);
   10db4:	431a      	orrs	r2, r3
   10db6:	215b      	movs	r1, #91	; 0x5b
   10db8:	3024      	adds	r0, #36	; 0x24
   10dba:	f010 ffc6 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10dbe:	2500      	movs	r5, #0
   10dc0:	e5da      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10dc2:	b928      	cbnz	r0, 10dd0 <handleParameter+0x518>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_PID_DV_CLIP_WR);
   10dc4:	4834      	ldr	r0, [pc, #208]	; (10e98 <handleParameter+0x5e0>)
   10dc6:	215e      	movs	r1, #94	; 0x5e
   10dc8:	f010 ffcd 	bl	21d66 <tmc4361_readInt>
   10dcc:	6030      	str	r0, [r6, #0]
   10dce:	e5d3      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_PID_DV_CLIP_WR, *value);
   10dd0:	6832      	ldr	r2, [r6, #0]
   10dd2:	4831      	ldr	r0, [pc, #196]	; (10e98 <handleParameter+0x5e0>)
   10dd4:	215e      	movs	r1, #94	; 0x5e
   10dd6:	f010 ffb8 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10dda:	2500      	movs	r5, #0
   10ddc:	e5cc      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10dde:	b928      	cbnz	r0, 10dec <handleParameter+0x534>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_UPSCALE_DELAY);
   10de0:	482d      	ldr	r0, [pc, #180]	; (10e98 <handleParameter+0x5e0>)
   10de2:	2118      	movs	r1, #24
   10de4:	f010 ffbf 	bl	21d66 <tmc4361_readInt>
   10de8:	6030      	str	r0, [r6, #0]
   10dea:	e5c5      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_UPSCALE_DELAY, *value);
   10dec:	6832      	ldr	r2, [r6, #0]
   10dee:	482a      	ldr	r0, [pc, #168]	; (10e98 <handleParameter+0x5e0>)
   10df0:	2118      	movs	r1, #24
   10df2:	f010 ffaa 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10df6:	2500      	movs	r5, #0
   10df8:	e5be      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10dfa:	b928      	cbnz	r0, 10e08 <handleParameter+0x550>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_DOWNSCALE_DELAY);
   10dfc:	4826      	ldr	r0, [pc, #152]	; (10e98 <handleParameter+0x5e0>)
   10dfe:	2119      	movs	r1, #25
   10e00:	f010 ffb1 	bl	21d66 <tmc4361_readInt>
   10e04:	6030      	str	r0, [r6, #0]
   10e06:	e5b7      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_DOWNSCALE_DELAY, *value);
   10e08:	6832      	ldr	r2, [r6, #0]
   10e0a:	4823      	ldr	r0, [pc, #140]	; (10e98 <handleParameter+0x5e0>)
   10e0c:	2119      	movs	r1, #25
   10e0e:	f010 ff9c 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10e12:	2500      	movs	r5, #0
   10e14:	e5b0      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10e16:	b928      	cbnz	r0, 10e24 <handleParameter+0x56c>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_DELTA_P_WR);
   10e18:	481f      	ldr	r0, [pc, #124]	; (10e98 <handleParameter+0x5e0>)
   10e1a:	215c      	movs	r1, #92	; 0x5c
   10e1c:	f010 ffa3 	bl	21d66 <tmc4361_readInt>
   10e20:	6030      	str	r0, [r6, #0]
   10e22:	e5a9      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_DELTA_P_WR, *value);
   10e24:	6832      	ldr	r2, [r6, #0]
   10e26:	481c      	ldr	r0, [pc, #112]	; (10e98 <handleParameter+0x5e0>)
   10e28:	215c      	movs	r1, #92	; 0x5c
   10e2a:	f010 ff8e 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10e2e:	2500      	movs	r5, #0
   10e30:	e5a2      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10e32:	b928      	cbnz	r0, 10e40 <handleParameter+0x588>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_CL_TOLERANCE_WR);
   10e34:	4818      	ldr	r0, [pc, #96]	; (10e98 <handleParameter+0x5e0>)
   10e36:	215f      	movs	r1, #95	; 0x5f
   10e38:	f010 ff95 	bl	21d66 <tmc4361_readInt>
   10e3c:	6030      	str	r0, [r6, #0]
   10e3e:	e59b      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_TOLERANCE_WR, *value);
   10e40:	6832      	ldr	r2, [r6, #0]
   10e42:	4815      	ldr	r0, [pc, #84]	; (10e98 <handleParameter+0x5e0>)
   10e44:	215f      	movs	r1, #95	; 0x5f
   10e46:	f010 ff80 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10e4a:	2500      	movs	r5, #0
   10e4c:	e594      	b.n	10978 <handleParameter+0xc0>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 16) & 0xFF;
   10e4e:	4812      	ldr	r0, [pc, #72]	; (10e98 <handleParameter+0x5e0>)
   10e50:	2106      	movs	r1, #6
		if(readWrite == READ) {
   10e52:	b92d      	cbnz	r5, 10e60 <handleParameter+0x5a8>
			*value = (tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) >> 16) & 0xFF;
   10e54:	f010 ff87 	bl	21d66 <tmc4361_readInt>
   10e58:	f3c0 4007 	ubfx	r0, r0, #16, #8
   10e5c:	6030      	str	r0, [r6, #0]
   10e5e:	e58b      	b.n	10978 <handleParameter+0xc0>
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<16);
   10e60:	f010 ff81 	bl	21d66 <tmc4361_readInt>
			uvalue |= (*value & 0xFF) << 16;
   10e64:	6833      	ldr	r3, [r6, #0]
   10e66:	041b      	lsls	r3, r3, #16
			uvalue = tmc4361_readInt(motorToIC(motor), TMC4361_SCALE_VALUES) & ~(0xFF<<16);
   10e68:	f420 027f 	bic.w	r2, r0, #16711680	; 0xff0000
			uvalue |= (*value & 0xFF) << 16;
   10e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			tmc4361_writeInt(motorToIC(motor), TMC4361_SCALE_VALUES, uvalue);
   10e70:	4809      	ldr	r0, [pc, #36]	; (10e98 <handleParameter+0x5e0>)
   10e72:	431a      	orrs	r2, r3
   10e74:	2106      	movs	r1, #6
   10e76:	f010 ff68 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10e7a:	2500      	movs	r5, #0
   10e7c:	e57c      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10e7e:	b148      	cbz	r0, 10e94 <handleParameter+0x5dc>
			if(*value)
   10e80:	6835      	ldr	r5, [r6, #0]
   10e82:	b16d      	cbz	r5, 10ea0 <handleParameter+0x5e8>
				*value = tmc4361_calibrateClosedLoop(motorToIC(motor), 1);
   10e84:	4804      	ldr	r0, [pc, #16]	; (10e98 <handleParameter+0x5e0>)
   10e86:	2101      	movs	r1, #1
   10e88:	f011 f89e 	bl	21fc8 <tmc4361_calibrateClosedLoop>
   10e8c:	6030      	str	r0, [r6, #0]
				if(!*value)
   10e8e:	2800      	cmp	r0, #0
   10e90:	f000 80b4 	beq.w	10ffc <handleParameter+0x744>
	uint32_t errors = TMC_ERROR_NONE;
   10e94:	2500      	movs	r5, #0
   10e96:	e56f      	b.n	10978 <handleParameter+0xc0>
   10e98:	1fff2bb4 	.word	0x1fff2bb4
   10e9c:	1fff2b90 	.word	0x1fff2b90
				uvalue 	= tmc4361_readInt(motorToIC(motor), TMC4361_ENC_IN_CONF);
   10ea0:	2107      	movs	r1, #7
   10ea2:	4858      	ldr	r0, [pc, #352]	; (11004 <handleParameter+0x74c>)
   10ea4:	f010 ff5f 	bl	21d66 <tmc4361_readInt>
				tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_IN_CONF, uvalue);
   10ea8:	2107      	movs	r1, #7
   10eaa:	f420 0280 	bic.w	r2, r0, #4194304	; 0x400000
   10eae:	4855      	ldr	r0, [pc, #340]	; (11004 <handleParameter+0x74c>)
   10eb0:	f010 ff4b 	bl	21d4a <tmc4361_writeInt>
   10eb4:	e560      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10eb6:	2800      	cmp	r0, #0
   10eb8:	f040 80a2 	bne.w	11000 <handleParameter+0x748>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_V_ENC_RD);
   10ebc:	4851      	ldr	r0, [pc, #324]	; (11004 <handleParameter+0x74c>)
   10ebe:	2165      	movs	r1, #101	; 0x65
   10ec0:	f010 ff51 	bl	21d66 <tmc4361_readInt>
   10ec4:	6030      	str	r0, [r6, #0]
   10ec6:	e557      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10ec8:	2800      	cmp	r0, #0
   10eca:	d1e3      	bne.n	10e94 <handleParameter+0x5dc>
			uvalue 	= tmc4361_readInt(motorToIC(motor), TMC4361_ENC_IN_CONF);
   10ecc:	484d      	ldr	r0, [pc, #308]	; (11004 <handleParameter+0x74c>)
   10ece:	2107      	movs	r1, #7
   10ed0:	f010 ff49 	bl	21d66 <tmc4361_readInt>
			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
   10ed4:	f3c0 5081 	ubfx	r0, r0, #22, #2
   10ed8:	1e43      	subs	r3, r0, #1
   10eda:	4258      	negs	r0, r3
   10edc:	4158      	adcs	r0, r3
   10ede:	6030      	str	r0, [r6, #0]
   10ee0:	e54a      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10ee2:	b928      	cbnz	r0, 10ef0 <handleParameter+0x638>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_ENC_POS_DEV_RD);
   10ee4:	4847      	ldr	r0, [pc, #284]	; (11004 <handleParameter+0x74c>)
   10ee6:	2152      	movs	r1, #82	; 0x52
   10ee8:	f010 ff3d 	bl	21d66 <tmc4361_readInt>
   10eec:	6030      	str	r0, [r6, #0]
   10eee:	e543      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_CL_TR_TOLERANCE_WR, *value);
   10ef0:	6832      	ldr	r2, [r6, #0]
   10ef2:	4844      	ldr	r0, [pc, #272]	; (11004 <handleParameter+0x74c>)
   10ef4:	2152      	movs	r1, #82	; 0x52
   10ef6:	f010 ff28 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10efa:	2500      	movs	r5, #0
   10efc:	e53c      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10efe:	4842      	ldr	r0, [pc, #264]	; (11008 <handleParameter+0x750>)
   10f00:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10f02:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   10f06:	b915      	cbnz	r5, 10f0e <handleParameter+0x656>
			*value = (TMC4361.config->shadowRegister[TMC4361_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
   10f08:	b2d2      	uxtb	r2, r2
   10f0a:	6032      	str	r2, [r6, #0]
   10f0c:	e534      	b.n	10978 <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 0;
   10f0e:	6833      	ldr	r3, [r6, #0]
			uvalue &= ~(0xFF << 0);
   10f10:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			uvalue |= (*value & 0x0F) << 0;
   10f14:	f003 030f 	and.w	r3, r3, #15
			tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_VMEAN_WAIT_WR, uvalue);
   10f18:	431a      	orrs	r2, r3
   10f1a:	2163      	movs	r1, #99	; 0x63
   10f1c:	3024      	adds	r0, #36	; 0x24
   10f1e:	f010 ff14 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10f22:	2500      	movs	r5, #0
   10f24:	e528      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10f26:	4838      	ldr	r0, [pc, #224]	; (11008 <handleParameter+0x750>)
   10f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10f2a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   10f2e:	b91d      	cbnz	r5, 10f38 <handleParameter+0x680>
			*value = (TMC4361.config->shadowRegister[TMC4361_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
   10f30:	f3c2 2203 	ubfx	r2, r2, #8, #4
   10f34:	6032      	str	r2, [r6, #0]
   10f36:	e51f      	b.n	10978 <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 8;
   10f38:	6833      	ldr	r3, [r6, #0]
   10f3a:	021b      	lsls	r3, r3, #8
   10f3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			uvalue &= ~(0xF << 8);
   10f40:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
			tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_VMEAN_WAIT_WR, uvalue);
   10f44:	431a      	orrs	r2, r3
   10f46:	2163      	movs	r1, #99	; 0x63
   10f48:	3024      	adds	r0, #36	; 0x24
   10f4a:	f010 fefe 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10f4e:	2500      	movs	r5, #0
   10f50:	e512      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10f52:	482d      	ldr	r0, [pc, #180]	; (11008 <handleParameter+0x750>)
   10f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10f56:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   10f5a:	b91d      	cbnz	r5, 10f64 <handleParameter+0x6ac>
			*value = (TMC4361.config->shadowRegister[TMC4361_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
   10f5c:	f3c2 4207 	ubfx	r2, r2, #16, #8
   10f60:	6032      	str	r2, [r6, #0]
   10f62:	e509      	b.n	10978 <handleParameter+0xc0>
			uvalue |= (*value & 0x0FF) << 16;
   10f64:	6833      	ldr	r3, [r6, #0]
   10f66:	041b      	lsls	r3, r3, #16
   10f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
   10f6c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_VMEAN_WAIT_WR, uvalue);
   10f70:	431a      	orrs	r2, r3
   10f72:	2163      	movs	r1, #99	; 0x63
   10f74:	3024      	adds	r0, #36	; 0x24
   10f76:	f010 fee8 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10f7a:	2500      	movs	r5, #0
   10f7c:	e4fc      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10f7e:	b928      	cbnz	r0, 10f8c <handleParameter+0x6d4>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_ENC_POS);
   10f80:	4820      	ldr	r0, [pc, #128]	; (11004 <handleParameter+0x74c>)
   10f82:	2150      	movs	r1, #80	; 0x50
   10f84:	f010 feef 	bl	21d66 <tmc4361_readInt>
   10f88:	6030      	str	r0, [r6, #0]
   10f8a:	e4f5      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_POS, *value);
   10f8c:	681a      	ldr	r2, [r3, #0]
   10f8e:	481d      	ldr	r0, [pc, #116]	; (11004 <handleParameter+0x74c>)
   10f90:	2150      	movs	r1, #80	; 0x50
   10f92:	f010 feda 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10f96:	4625      	mov	r5, r4
   10f98:	e4ee      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10f9a:	b920      	cbnz	r0, 10fa6 <handleParameter+0x6ee>
			*value = TMC4361.config->shadowRegister[TMC4361_SCALE_VALUES]; // todo CHECK 3: shouldn't this register be TMC4361_ENC_POS_DEV_TOL_WR like below? (BS) #1
   10f9c:	4b1a      	ldr	r3, [pc, #104]	; (11008 <handleParameter+0x750>)
   10f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10fa0:	69db      	ldr	r3, [r3, #28]
   10fa2:	6033      	str	r3, [r6, #0]
   10fa4:	e4e8      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_ENC_POS_DEV_TOL_WR, *value);
   10fa6:	681a      	ldr	r2, [r3, #0]
   10fa8:	4816      	ldr	r0, [pc, #88]	; (11004 <handleParameter+0x74c>)
   10faa:	2153      	movs	r1, #83	; 0x53
   10fac:	f010 fecd 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10fb0:	4625      	mov	r5, r4
   10fb2:	e4e1      	b.n	10978 <handleParameter+0xc0>
		if(readWrite == READ) {
   10fb4:	b928      	cbnz	r0, 10fc2 <handleParameter+0x70a>
			*value = tmc4361_readInt(motorToIC(motor), TMC4361_STDBY_DELAY);
   10fb6:	4813      	ldr	r0, [pc, #76]	; (11004 <handleParameter+0x74c>)
   10fb8:	2115      	movs	r1, #21
   10fba:	f010 fed4 	bl	21d66 <tmc4361_readInt>
   10fbe:	6030      	str	r0, [r6, #0]
   10fc0:	e4da      	b.n	10978 <handleParameter+0xc0>
			tmc4361_writeInt(motorToIC(motor), TMC4361_STDBY_DELAY, *value*160000);
   10fc2:	681b      	ldr	r3, [r3, #0]
   10fc4:	4a11      	ldr	r2, [pc, #68]	; (1100c <handleParameter+0x754>)
   10fc6:	480f      	ldr	r0, [pc, #60]	; (11004 <handleParameter+0x74c>)
   10fc8:	435a      	muls	r2, r3
   10fca:	2115      	movs	r1, #21
   10fcc:	f010 febd 	bl	21d4a <tmc4361_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   10fd0:	4625      	mov	r5, r4
   10fd2:	e4d1      	b.n	10978 <handleParameter+0xc0>
		return TMC_ERROR_MOTOR;
   10fd4:	2508      	movs	r5, #8
   10fd6:	e4cf      	b.n	10978 <handleParameter+0xc0>
	switch(type)
   10fd8:	2504      	movs	r5, #4
   10fda:	e4cd      	b.n	10978 <handleParameter+0xc0>
   10fdc:	2504      	movs	r5, #4
   10fde:	e4cb      	b.n	10978 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   10fe0:	2504      	movs	r5, #4
   10fe2:	e4c9      	b.n	10978 <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
   10fe4:	2510      	movs	r5, #16
   10fe6:	e4c7      	b.n	10978 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   10fe8:	2504      	movs	r5, #4
   10fea:	e4c5      	b.n	10978 <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
   10fec:	2510      	movs	r5, #16
   10fee:	e4c3      	b.n	10978 <handleParameter+0xc0>
   10ff0:	2510      	movs	r5, #16
   10ff2:	e4c1      	b.n	10978 <handleParameter+0xc0>
   10ff4:	2510      	movs	r5, #16
   10ff6:	e4bf      	b.n	10978 <handleParameter+0xc0>
   10ff8:	2510      	movs	r5, #16
   10ffa:	e4bd      	b.n	10978 <handleParameter+0xc0>
					errors |= TMC_ERROR_NOT_DONE;
   10ffc:	2520      	movs	r5, #32
   10ffe:	e4bb      	b.n	10978 <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   11000:	2504      	movs	r5, #4
   11002:	e4b9      	b.n	10978 <handleParameter+0xc0>
   11004:	1fff2bb4 	.word	0x1fff2bb4
   11008:	1fff2b90 	.word	0x1fff2b90
   1100c:	00027100 	.word	0x00027100

00011010 <SAP>:
{
   11010:	b507      	push	{r0, r1, r2, lr}
   11012:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   11014:	ab01      	add	r3, sp, #4
   11016:	4602      	mov	r2, r0
   11018:	2001      	movs	r0, #1
   1101a:	f7ff fc4d 	bl	108b8 <handleParameter>
}
   1101e:	b003      	add	sp, #12
   11020:	f85d fb04 	ldr.w	pc, [sp], #4

00011024 <GAP>:
{
   11024:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   11026:	4602      	mov	r2, r0
   11028:	2000      	movs	r0, #0
   1102a:	e445      	b.n	108b8 <handleParameter>

0001102c <stop>:
{
   1102c:	b508      	push	{r3, lr}
	tmc4361_rotate(motorToIC(motor), velocity);
   1102e:	4803      	ldr	r0, [pc, #12]	; (1103c <stop+0x10>)
   11030:	2100      	movs	r1, #0
   11032:	f010 ff7f 	bl	21f34 <tmc4361_rotate>
}
   11036:	2000      	movs	r0, #0
   11038:	bd08      	pop	{r3, pc}
   1103a:	bf00      	nop
   1103c:	1fff2bb4 	.word	0x1fff2bb4

00011040 <left>:
{
   11040:	b508      	push	{r3, lr}
	tmc4361_rotate(motorToIC(motor), velocity);
   11042:	4803      	ldr	r0, [pc, #12]	; (11050 <left+0x10>)
   11044:	4249      	negs	r1, r1
   11046:	f010 ff75 	bl	21f34 <tmc4361_rotate>
}
   1104a:	2000      	movs	r0, #0
   1104c:	bd08      	pop	{r3, pc}
   1104e:	bf00      	nop
   11050:	1fff2bb4 	.word	0x1fff2bb4

00011054 <right>:
{
   11054:	b508      	push	{r3, lr}
	tmc4361_rotate(motorToIC(motor), velocity);
   11056:	4802      	ldr	r0, [pc, #8]	; (11060 <right+0xc>)
   11058:	f010 ff6c 	bl	21f34 <tmc4361_rotate>
}
   1105c:	2000      	movs	r0, #0
   1105e:	bd08      	pop	{r3, pc}
   11060:	1fff2bb4 	.word	0x1fff2bb4

00011064 <restore>:

	return 1;
}

static uint8_t restore()
{
   11064:	b538      	push	{r3, r4, r5, lr}
	// Pulse the low-active hardware reset pin
	HAL.IOs->config->setLow(Pins.NRST);
   11066:	4b0a      	ldr	r3, [pc, #40]	; (11090 <restore+0x2c>)
   11068:	4c0a      	ldr	r4, [pc, #40]	; (11094 <restore+0x30>)
   1106a:	68dd      	ldr	r5, [r3, #12]
   1106c:	6860      	ldr	r0, [r4, #4]
   1106e:	682b      	ldr	r3, [r5, #0]
   11070:	699b      	ldr	r3, [r3, #24]
   11072:	4798      	blx	r3
	wait(1);
   11074:	2001      	movs	r0, #1
   11076:	f00b f963 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   1107a:	682b      	ldr	r3, [r5, #0]
   1107c:	6860      	ldr	r0, [r4, #4]
   1107e:	695b      	ldr	r3, [r3, #20]
   11080:	4798      	blx	r3

	tmc4361_restore(&TMC4361);
   11082:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11086:	f010 ff2a 	bl	21ede <tmc4361_restore>

	return 1;
}
   1108a:	2001      	movs	r0, #1
   1108c:	bd38      	pop	{r3, r4, r5, pc}
   1108e:	bf00      	nop
   11090:	00029d1c 	.word	0x00029d1c
   11094:	1fff2b90 	.word	0x1fff2b90

00011098 <reset>:
{
   11098:	b538      	push	{r3, r4, r5, lr}
	HAL.IOs->config->setLow(Pins.NRST);
   1109a:	4b0a      	ldr	r3, [pc, #40]	; (110c4 <reset+0x2c>)
   1109c:	4c0a      	ldr	r4, [pc, #40]	; (110c8 <reset+0x30>)
   1109e:	68dd      	ldr	r5, [r3, #12]
   110a0:	6860      	ldr	r0, [r4, #4]
   110a2:	682b      	ldr	r3, [r5, #0]
   110a4:	699b      	ldr	r3, [r3, #24]
   110a6:	4798      	blx	r3
	wait(1);
   110a8:	2001      	movs	r0, #1
   110aa:	f00b f949 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   110ae:	682b      	ldr	r3, [r5, #0]
   110b0:	6860      	ldr	r0, [r4, #4]
   110b2:	695b      	ldr	r3, [r3, #20]
   110b4:	4798      	blx	r3
	tmc4361_reset(&TMC4361);
   110b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   110ba:	f010 fefd 	bl	21eb8 <tmc4361_reset>
}
   110be:	2001      	movs	r0, #1
   110c0:	bd38      	pop	{r3, r4, r5, pc}
   110c2:	bf00      	nop
   110c4:	00029d1c 	.word	0x00029d1c
   110c8:	1fff2b90 	.word	0x1fff2b90

000110cc <configCallback>:

static void configCallback(TMC4361TypeDef *tmc4361, ConfigState state)
{
   110cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t driver, dataLength;
	uint32_t value;

	// Setup SPI
	switch(Evalboards.ch2.id)
   110ce:	4c11      	ldr	r4, [pc, #68]	; (11114 <configCallback+0x48>)
   110d0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   110d4:	2b01      	cmp	r3, #1
{
   110d6:	460d      	mov	r5, r1
	switch(Evalboards.ch2.id)
   110d8:	d019      	beq.n	1110e <configCallback+0x42>
	{
	case ID_TMC2130:
		driver = 0x0C;
		dataLength = 0;
   110da:	2b03      	cmp	r3, #3
   110dc:	bf15      	itete	ne
   110de:	2328      	movne	r3, #40	; 0x28
   110e0:	2300      	moveq	r3, #0
   110e2:	220f      	movne	r2, #15
   110e4:	220c      	moveq	r2, #12
	default:
		driver = 0x0F;
		dataLength = 40;
		break;
	}
	value = 0x44400040 | (dataLength << 13) | (driver << 0);
   110e6:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
	tmc4361_writeInt(tmc4361, TMC4361_SPIOUT_CONF, value);
   110ea:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
   110ee:	f042 1240 	orr.w	r2, r2, #4194368	; 0x400040
   110f2:	2104      	movs	r1, #4
   110f4:	f010 fe29 	bl	21d4a <tmc4361_writeInt>

	// Reset/Restore driver
	if(state == CONFIG_RESET)
		Evalboards.ch2.config->reset();
   110f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	if(state == CONFIG_RESET)
   110fc:	2d01      	cmp	r5, #1
		Evalboards.ch2.config->reset();
   110fe:	bf0c      	ite	eq
   11100:	f8d3 3204 	ldreq.w	r3, [r3, #516]	; 0x204
	else
		Evalboards.ch2.config->restore();
   11104:	f8d3 3208 	ldrne.w	r3, [r3, #520]	; 0x208
}
   11108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Evalboards.ch2.config->restore();
   1110c:	4718      	bx	r3
	switch(Evalboards.ch2.id)
   1110e:	2300      	movs	r3, #0
   11110:	220b      	movs	r2, #11
   11112:	e7e8      	b.n	110e6 <configCallback+0x1a>
   11114:	1fff5e88 	.word	0x1fff5e88

00011118 <tmc4361_cover>:
{
   11118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   1111a:	4c33      	ldr	r4, [pc, #204]	; (111e8 <tmc4361_cover+0xd0>)
   1111c:	e9d4 32b0 	ldrd	r3, r2, [r4, #704]	; 0x2c0
   11120:	0212      	lsls	r2, r2, #8
	coverOut |= data;  // add new byte to be written
   11122:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   11126:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
	coverOut |= data;  // add new byte to be written
   1112a:	e9c4 02b0 	strd	r0, r2, [r4, #704]	; 0x2c0
	out = coverIn >> 56;  // output last received byte
   1112e:	e9d4 60b4 	ldrd	r6, r0, [r4, #720]	; 0x2d0
	coverLength++;     // count outgoing bytes
   11132:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
	out = coverIn >> 56;  // output last received byte
   11136:	0e05      	lsrs	r5, r0, #24
	coverLength++;     // count outgoing bytes
   11138:	3301      	adds	r3, #1
	coverIn <<= 8;        // shift by one byte to read this next time
   1113a:	0200      	lsls	r0, r0, #8
   1113c:	ea40 6016 	orr.w	r0, r0, r6, lsr #24
	coverLength++;     // count outgoing bytes
   11140:	b2db      	uxtb	r3, r3
	coverIn <<= 8;        // shift by one byte to read this next time
   11142:	0236      	lsls	r6, r6, #8
   11144:	e9c4 60b4 	strd	r6, r0, [r4, #720]	; 0x2d0
	coverLength++;     // count outgoing bytes
   11148:	f884 32c8 	strb.w	r3, [r4, #712]	; 0x2c8
	if(lastTransfer)
   1114c:	2900      	cmp	r1, #0
   1114e:	d049      	beq.n	111e4 <tmc4361_cover+0xcc>
		if(coverLength > 4)
   11150:	2b04      	cmp	r3, #4
   11152:	d904      	bls.n	1115e <tmc4361_cover+0x46>
			tmc4361_writeInt(&TMC4361, TMC4361_COVER_HIGH_WR, coverOut >> 32);
   11154:	216d      	movs	r1, #109	; 0x6d
   11156:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1115a:	f010 fdf6 	bl	21d4a <tmc4361_writeInt>
		tmc4361_writeInt(&TMC4361, TMC4361_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   1115e:	f8d4 22c0 	ldr.w	r2, [r4, #704]	; 0x2c0
   11162:	4822      	ldr	r0, [pc, #136]	; (111ec <tmc4361_cover+0xd4>)
   11164:	216c      	movs	r1, #108	; 0x6c
   11166:	f010 fdf0 	bl	21d4a <tmc4361_writeInt>
		wait(1);
   1116a:	2001      	movs	r0, #1
   1116c:	f00b f8e8 	bl	1c340 <wait>
		tmc4361_writeInt(&TMC4361, TMC4361_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   11170:	f8d4 22c0 	ldr.w	r2, [r4, #704]	; 0x2c0
   11174:	481d      	ldr	r0, [pc, #116]	; (111ec <tmc4361_cover+0xd4>)
   11176:	216c      	movs	r1, #108	; 0x6c
   11178:	f010 fde7 	bl	21d4a <tmc4361_writeInt>
		coverIn = 0;
   1117c:	2300      	movs	r3, #0
   1117e:	2200      	movs	r2, #0
   11180:	e9c4 23b4 	strd	r2, r3, [r4, #720]	; 0x2d0
		if(coverLength > 4)
   11184:	f894 32c8 	ldrb.w	r3, [r4, #712]	; 0x2c8
   11188:	2b04      	cmp	r3, #4
   1118a:	d908      	bls.n	1119e <tmc4361_cover+0x86>
			coverIn |= (uint64_t) tmc4361_readInt(&TMC4361, TMC4361_COVER_DRV_HIGH_RD) << 32;
   1118c:	4817      	ldr	r0, [pc, #92]	; (111ec <tmc4361_cover+0xd4>)
   1118e:	216f      	movs	r1, #111	; 0x6f
   11190:	f010 fde9 	bl	21d66 <tmc4361_readInt>
   11194:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
   11198:	4303      	orrs	r3, r0
   1119a:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
		coverIn |= tmc4361_readInt(&TMC4361, TMC4361_COVER_DRV_LOW_RD);
   1119e:	216e      	movs	r1, #110	; 0x6e
   111a0:	4812      	ldr	r0, [pc, #72]	; (111ec <tmc4361_cover+0xd4>)
   111a2:	f010 fde0 	bl	21d66 <tmc4361_readInt>
   111a6:	e9d4 23b4 	ldrd	r2, r3, [r4, #720]	; 0x2d0
   111aa:	17c7      	asrs	r7, r0, #31
   111ac:	4310      	orrs	r0, r2
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   111ae:	f894 22c8 	ldrb.w	r2, [r4, #712]	; 0x2c8
   111b2:	f1c2 0208 	rsb	r2, r2, #8
   111b6:	00d2      	lsls	r2, r2, #3
   111b8:	f1a2 0620 	sub.w	r6, r2, #32
		coverIn |= tmc4361_readInt(&TMC4361, TMC4361_COVER_DRV_LOW_RD);
   111bc:	433b      	orrs	r3, r7
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   111be:	f1c2 0120 	rsb	r1, r2, #32
   111c2:	4093      	lsls	r3, r2
   111c4:	fa00 f606 	lsl.w	r6, r0, r6
   111c8:	fa20 f101 	lsr.w	r1, r0, r1
   111cc:	4333      	orrs	r3, r6
   111ce:	430b      	orrs	r3, r1
   111d0:	4090      	lsls	r0, r2
   111d2:	e9c4 03b4 	strd	r0, r3, [r4, #720]	; 0x2d0
		coverOut = 0;
   111d6:	2200      	movs	r2, #0
   111d8:	2300      	movs	r3, #0
   111da:	e9c4 23b0 	strd	r2, r3, [r4, #704]	; 0x2c0
		coverLength=0;
   111de:	2300      	movs	r3, #0
   111e0:	f884 32c8 	strb.w	r3, [r4, #712]	; 0x2c8
}
   111e4:	4628      	mov	r0, r5
   111e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111e8:	1fff2b90 	.word	0x1fff2b90
   111ec:	1fff2bb4 	.word	0x1fff2bb4

000111f0 <rotate>:
   111f0:	b508      	push	{r3, lr}
   111f2:	4802      	ldr	r0, [pc, #8]	; (111fc <rotate+0xc>)
   111f4:	f010 fe9e 	bl	21f34 <tmc4361_rotate>
   111f8:	2000      	movs	r0, #0
   111fa:	bd08      	pop	{r3, pc}
   111fc:	1fff2bb4 	.word	0x1fff2bb4

00011200 <tmc4361_readWriteArray>:
	return TMC4361_SPIChannel;
   11200:	4b03      	ldr	r3, [pc, #12]	; (11210 <tmc4361_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   11202:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
{
   11206:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   11208:	68db      	ldr	r3, [r3, #12]
   1120a:	4611      	mov	r1, r2
   1120c:	4718      	bx	r3
   1120e:	bf00      	nop
   11210:	1fff2b90 	.word	0x1fff2b90

00011214 <TMC4361_init>:

void TMC4361_init(void)
{
   11214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc4361_init(&TMC4361, 0, Evalboards.ch1.config, &tmc4361_defaultRegisterResetState[0]);
   11216:	4c4c      	ldr	r4, [pc, #304]	; (11348 <TMC4361_init+0x134>)
   11218:	4d4c      	ldr	r5, [pc, #304]	; (1134c <TMC4361_init+0x138>)
   1121a:	4b4d      	ldr	r3, [pc, #308]	; (11350 <TMC4361_init+0x13c>)
   1121c:	69aa      	ldr	r2, [r5, #24]
	tmc4361_setCallback(&TMC4361, configCallback);

	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   1121e:	4f4d      	ldr	r7, [pc, #308]	; (11354 <TMC4361_init+0x140>)
	tmc4361_init(&TMC4361, 0, Evalboards.ch1.config, &tmc4361_defaultRegisterResetState[0]);
   11220:	f104 0624 	add.w	r6, r4, #36	; 0x24
   11224:	4630      	mov	r0, r6
   11226:	2100      	movs	r1, #0
   11228:	f010 fe24 	bl	21e74 <tmc4361_init>
	tmc4361_setCallback(&TMC4361, configCallback);
   1122c:	494a      	ldr	r1, [pc, #296]	; (11358 <TMC4361_init+0x144>)
   1122e:	4630      	mov	r0, r6
   11230:	f010 fe69 	bl	21f06 <tmc4361_setCallback>
	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   11234:	68fe      	ldr	r6, [r7, #12]
   11236:	6873      	ldr	r3, [r6, #4]
   11238:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
   1123c:	6222      	str	r2, [r4, #32]
	Pins.INTR            = &HAL.IOs->pins->DIO5;
   1123e:	f503 7284 	add.w	r2, r3, #264	; 0x108
   11242:	61e2      	str	r2, [r4, #28]
	Pins.STOP_L          = &HAL.IOs->pins->DIO12;
   11244:	f503 7252 	add.w	r2, r3, #840	; 0x348
   11248:	61a2      	str	r2, [r4, #24]
	Pins.STOP_R          = &HAL.IOs->pins->DIO13;
   1124a:	f503 725a 	add.w	r2, r3, #872	; 0x368
   1124e:	6162      	str	r2, [r4, #20]
	Pins.HOME_REF        = &HAL.IOs->pins->DIO14;
   11250:	f503 7262 	add.w	r2, r3, #904	; 0x388
   11254:	6122      	str	r2, [r4, #16]
	Pins.START           = &HAL.IOs->pins->DIO15;
   11256:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   1125a:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
	Pins.START           = &HAL.IOs->pins->DIO15;
   1125e:	60e2      	str	r2, [r4, #12]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   11260:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
   11264:	f503 6381 	add.w	r3, r3, #1032	; 0x408
   11268:	6023      	str	r3, [r4, #0]

	HAL.IOs->config->toOutput(Pins.NRST);
   1126a:	6833      	ldr	r3, [r6, #0]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   1126c:	60a2      	str	r2, [r4, #8]
	HAL.IOs->config->toOutput(Pins.NRST);
   1126e:	68db      	ldr	r3, [r3, #12]
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   11270:	6060      	str	r0, [r4, #4]
	HAL.IOs->config->toOutput(Pins.NRST);
   11272:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_L);
   11274:	6833      	ldr	r3, [r6, #0]
   11276:	69a0      	ldr	r0, [r4, #24]
   11278:	68db      	ldr	r3, [r3, #12]
   1127a:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_R);
   1127c:	6833      	ldr	r3, [r6, #0]
   1127e:	6960      	ldr	r0, [r4, #20]
   11280:	68db      	ldr	r3, [r3, #12]
   11282:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.HOME_REF);
   11284:	6833      	ldr	r3, [r6, #0]
   11286:	6920      	ldr	r0, [r4, #16]
   11288:	68db      	ldr	r3, [r3, #12]
   1128a:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.START);
   1128c:	6833      	ldr	r3, [r6, #0]
   1128e:	68e0      	ldr	r0, [r4, #12]
   11290:	68db      	ldr	r3, [r3, #12]
   11292:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.FREEZE);
   11294:	6833      	ldr	r3, [r6, #0]
   11296:	68a0      	ldr	r0, [r4, #8]
   11298:	68db      	ldr	r3, [r3, #12]
   1129a:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.NRST);
   1129c:	6833      	ldr	r3, [r6, #0]
   1129e:	6860      	ldr	r0, [r4, #4]
   112a0:	695b      	ldr	r3, [r3, #20]
   112a2:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.STOP_L);
   112a4:	6833      	ldr	r3, [r6, #0]
   112a6:	69a0      	ldr	r0, [r4, #24]
   112a8:	695b      	ldr	r3, [r3, #20]
   112aa:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.STOP_R);
   112ac:	6833      	ldr	r3, [r6, #0]
   112ae:	6960      	ldr	r0, [r4, #20]
   112b0:	695b      	ldr	r3, [r3, #20]
   112b2:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.HOME_REF);
   112b4:	6833      	ldr	r3, [r6, #0]
   112b6:	6920      	ldr	r0, [r4, #16]
   112b8:	695b      	ldr	r3, [r3, #20]
   112ba:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.START);
   112bc:	6833      	ldr	r3, [r6, #0]
   112be:	68e0      	ldr	r0, [r4, #12]
   112c0:	695b      	ldr	r3, [r3, #20]
   112c2:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.FREEZE);
   112c4:	6833      	ldr	r3, [r6, #0]
   112c6:	68a0      	ldr	r0, [r4, #8]
   112c8:	695b      	ldr	r3, [r3, #20]
   112ca:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.STANDBY_CLK);
   112cc:	6833      	ldr	r3, [r6, #0]
   112ce:	6a20      	ldr	r0, [r4, #32]
   112d0:	691b      	ldr	r3, [r3, #16]
   112d2:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INTR);
   112d4:	6833      	ldr	r3, [r6, #0]
   112d6:	69e0      	ldr	r0, [r4, #28]
   112d8:	691b      	ldr	r3, [r3, #16]
   112da:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.TARGET_REACHED);
   112dc:	6833      	ldr	r3, [r6, #0]
   112de:	6820      	ldr	r0, [r4, #0]
   112e0:	691b      	ldr	r3, [r3, #16]
   112e2:	4798      	blx	r3

	TMC4361_SPIChannel = &HAL.SPI->ch1;
	TMC4361_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   112e4:	6873      	ldr	r3, [r6, #4]
	TMC4361_SPIChannel = &HAL.SPI->ch1;
   112e6:	693a      	ldr	r2, [r7, #16]

	Evalboards.ch1.config->state        = CONFIG_RESET;
	Evalboards.ch1.config->configIndex  = 0;
	Evalboards.ch1.config->reset        = reset;
   112e8:	491c      	ldr	r1, [pc, #112]	; (1135c <TMC4361_init+0x148>)
	TMC4361_SPIChannel = &HAL.SPI->ch1;
   112ea:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
	TMC4361_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   112ee:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   112f2:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->state        = CONFIG_RESET;
   112f4:	69ab      	ldr	r3, [r5, #24]
   112f6:	2201      	movs	r2, #1
	Evalboards.ch1.config->reset        = reset;
   112f8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   112fc:	4918      	ldr	r1, [pc, #96]	; (11360 <TMC4361_init+0x14c>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
   112fe:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->restore      = restore;
   11300:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208

	Evalboards.ch1.cover                = tmc4361_cover;
   11304:	4b17      	ldr	r3, [pc, #92]	; (11364 <TMC4361_init+0x150>)
   11306:	66ab      	str	r3, [r5, #104]	; 0x68
	Evalboards.ch1.rotate               = rotate;
   11308:	4b17      	ldr	r3, [pc, #92]	; (11368 <TMC4361_init+0x154>)
   1130a:	626b      	str	r3, [r5, #36]	; 0x24
	Evalboards.ch1.right                = right;
   1130c:	4b17      	ldr	r3, [pc, #92]	; (1136c <TMC4361_init+0x158>)
   1130e:	622b      	str	r3, [r5, #32]
	Evalboards.ch1.left                 = left;
   11310:	4b17      	ldr	r3, [pc, #92]	; (11370 <TMC4361_init+0x15c>)
   11312:	61eb      	str	r3, [r5, #28]
	Evalboards.ch1.stop                 = stop;
   11314:	4b17      	ldr	r3, [pc, #92]	; (11374 <TMC4361_init+0x160>)
   11316:	62ab      	str	r3, [r5, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   11318:	4b17      	ldr	r3, [pc, #92]	; (11378 <TMC4361_init+0x164>)
   1131a:	63eb      	str	r3, [r5, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   1131c:	4b17      	ldr	r3, [pc, #92]	; (1137c <TMC4361_init+0x168>)
   1131e:	63ab      	str	r3, [r5, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   11320:	4b17      	ldr	r3, [pc, #92]	; (11380 <TMC4361_init+0x16c>)
   11322:	62eb      	str	r3, [r5, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   11324:	4b17      	ldr	r3, [pc, #92]	; (11384 <TMC4361_init+0x170>)
   11326:	632b      	str	r3, [r5, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   11328:	4b17      	ldr	r3, [pc, #92]	; (11388 <TMC4361_init+0x174>)
   1132a:	64eb      	str	r3, [r5, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   1132c:	4b17      	ldr	r3, [pc, #92]	; (1138c <TMC4361_init+0x178>)
   1132e:	64ab      	str	r3, [r5, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   11330:	4b17      	ldr	r3, [pc, #92]	; (11390 <TMC4361_init+0x17c>)
   11332:	65ab      	str	r3, [r5, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   11334:	4b17      	ldr	r3, [pc, #92]	; (11394 <TMC4361_init+0x180>)
   11336:	656b      	str	r3, [r5, #84]	; 0x54
	Evalboards.ch1.checkErrors          = checkErrors;
   11338:	4b17      	ldr	r3, [pc, #92]	; (11398 <TMC4361_init+0x184>)
   1133a:	662b      	str	r3, [r5, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC4361_MOTORS;
	Evalboards.ch1.deInit               = deInit;
   1133c:	4b17      	ldr	r3, [pc, #92]	; (1139c <TMC4361_init+0x188>)
   1133e:	65eb      	str	r3, [r5, #92]	; 0x5c

	// Provide the cover function to the driver channel
	Evalboards.ch1.fullCover            = tmc4361_fullCover;
   11340:	4b17      	ldr	r3, [pc, #92]	; (113a0 <TMC4361_init+0x18c>)
	Evalboards.ch1.numberOfMotors       = TMC4361_MOTORS;
   11342:	752a      	strb	r2, [r5, #20]
	Evalboards.ch1.fullCover            = tmc4361_fullCover;
   11344:	66eb      	str	r3, [r5, #108]	; 0x6c
};
   11346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11348:	1fff2b90 	.word	0x1fff2b90
   1134c:	1fff5e88 	.word	0x1fff5e88
   11350:	00028ef8 	.word	0x00028ef8
   11354:	00029d1c 	.word	0x00029d1c
   11358:	000110cd 	.word	0x000110cd
   1135c:	00011099 	.word	0x00011099
   11360:	00011065 	.word	0x00011065
   11364:	00011119 	.word	0x00011119
   11368:	000111f1 	.word	0x000111f1
   1136c:	00011055 	.word	0x00011055
   11370:	00011041 	.word	0x00011041
   11374:	0001102d 	.word	0x0001102d
   11378:	00011025 	.word	0x00011025
   1137c:	00011011 	.word	0x00011011
   11380:	000108a1 	.word	0x000108a1
   11384:	00010889 	.word	0x00010889
   11388:	000107e5 	.word	0x000107e5
   1138c:	000107d1 	.word	0x000107d1
   11390:	000107c5 	.word	0x000107c5
   11394:	000106e9 	.word	0x000106e9
   11398:	00010661 	.word	0x00010661
   1139c:	0001066d 	.word	0x0001066d
   113a0:	000106d9 	.word	0x000106d9

000113a4 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   113a4:	4b01      	ldr	r3, [pc, #4]	; (113ac <checkErrors+0x8>)
   113a6:	2200      	movs	r2, #0
   113a8:	609a      	str	r2, [r3, #8]
}
   113aa:	4770      	bx	lr
   113ac:	1fff5e88 	.word	0x1fff5e88

000113b0 <deInit>:
	}
	return errors;
}

static void deInit(void)
{
   113b0:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.NRST);
   113b2:	4e18      	ldr	r6, [pc, #96]	; (11414 <deInit+0x64>)
   113b4:	4c18      	ldr	r4, [pc, #96]	; (11418 <deInit+0x68>)
   113b6:	68f5      	ldr	r5, [r6, #12]
   113b8:	6860      	ldr	r0, [r4, #4]
   113ba:	682b      	ldr	r3, [r5, #0]
   113bc:	699b      	ldr	r3, [r3, #24]
   113be:	4798      	blx	r3

	HAL.IOs->config->reset(Pins.STOP_L);
   113c0:	682b      	ldr	r3, [r5, #0]
   113c2:	69a0      	ldr	r0, [r4, #24]
   113c4:	689b      	ldr	r3, [r3, #8]
   113c6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STOP_R);
   113c8:	682b      	ldr	r3, [r5, #0]
   113ca:	6960      	ldr	r0, [r4, #20]
   113cc:	689b      	ldr	r3, [r3, #8]
   113ce:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.HOME_REF);
   113d0:	682b      	ldr	r3, [r5, #0]
   113d2:	6920      	ldr	r0, [r4, #16]
   113d4:	689b      	ldr	r3, [r3, #8]
   113d6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.START);
   113d8:	682b      	ldr	r3, [r5, #0]
   113da:	68e0      	ldr	r0, [r4, #12]
   113dc:	689b      	ldr	r3, [r3, #8]
   113de:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.FREEZE);
   113e0:	682b      	ldr	r3, [r5, #0]
   113e2:	68a0      	ldr	r0, [r4, #8]
   113e4:	689b      	ldr	r3, [r3, #8]
   113e6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.STANDBY_CLK);
   113e8:	682b      	ldr	r3, [r5, #0]
   113ea:	6a20      	ldr	r0, [r4, #32]
   113ec:	689b      	ldr	r3, [r3, #8]
   113ee:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INTR);
   113f0:	682b      	ldr	r3, [r5, #0]
   113f2:	69e0      	ldr	r0, [r4, #28]
   113f4:	689b      	ldr	r3, [r3, #8]
   113f6:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.TARGET_REACHED);
   113f8:	682b      	ldr	r3, [r5, #0]
   113fa:	6820      	ldr	r0, [r4, #0]
   113fc:	689b      	ldr	r3, [r3, #8]
   113fe:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.NRST);
   11400:	682b      	ldr	r3, [r5, #0]
   11402:	6860      	ldr	r0, [r4, #4]
   11404:	689b      	ldr	r3, [r3, #8]
   11406:	4798      	blx	r3

	HAL.SPI->ch2.reset();
   11408:	6933      	ldr	r3, [r6, #16]
}
   1140a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.SPI->ch2.reset();
   1140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11410:	4718      	bx	r3
   11412:	bf00      	nop
   11414:	00029d1c 	.word	0x00029d1c
   11418:	1fff2e78 	.word	0x1fff2e78

0001141c <tmc4361A_fullCover>:
{
   1141c:	460a      	mov	r2, r1
	tmc4361A_readWriteCover(&TMC4361A, data, length);
   1141e:	4601      	mov	r1, r0
   11420:	4801      	ldr	r0, [pc, #4]	; (11428 <tmc4361A_fullCover+0xc>)
   11422:	f010 bf48 	b.w	222b6 <tmc4361A_readWriteCover>
   11426:	bf00      	nop
   11428:	1fff2e9c 	.word	0x1fff2e9c

0001142c <userFunction>:
	switch(type)
   1142c:	2803      	cmp	r0, #3
{
   1142e:	b570      	push	{r4, r5, r6, lr}
   11430:	4614      	mov	r4, r2
	switch(type)
   11432:	d806      	bhi.n	11442 <userFunction+0x16>
   11434:	3801      	subs	r0, #1
   11436:	2802      	cmp	r0, #2
   11438:	d808      	bhi.n	1144c <userFunction+0x20>
   1143a:	e8df f000 	tbb	[pc, r0]
   1143e:	3a2b      	.short	0x3a2b
   11440:	48          	.byte	0x48
   11441:	00          	.byte	0x00
   11442:	28ff      	cmp	r0, #255	; 0xff
   11444:	d04c      	beq.n	114e0 <userFunction+0xb4>
   11446:	2404      	movs	r4, #4
}
   11448:	4620      	mov	r0, r4
   1144a:	bd70      	pop	{r4, r5, r6, pc}
		if(!(*value & ~3))
   1144c:	6812      	ldr	r2, [r2, #0]
   1144e:	f032 0303 	bics.w	r3, r2, #3
   11452:	d110      	bne.n	11476 <userFunction+0x4a>
			if(*value & (1<<0))
   11454:	4b28      	ldr	r3, [pc, #160]	; (114f8 <userFunction+0xcc>)
   11456:	4d29      	ldr	r5, [pc, #164]	; (114fc <userFunction+0xd0>)
   11458:	68de      	ldr	r6, [r3, #12]
   1145a:	6968      	ldr	r0, [r5, #20]
   1145c:	6833      	ldr	r3, [r6, #0]
   1145e:	07d2      	lsls	r2, r2, #31
   11460:	d50b      	bpl.n	1147a <userFunction+0x4e>
				HAL.IOs->config->toInput(Pins.STOP_R); // pull up -> set it to floating causes high
   11462:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.STOP_R);
   11464:	4798      	blx	r3
			if(*value & (1<<1))
   11466:	6824      	ldr	r4, [r4, #0]
   11468:	6832      	ldr	r2, [r6, #0]
   1146a:	69a8      	ldr	r0, [r5, #24]
   1146c:	f014 0402 	ands.w	r4, r4, #2
   11470:	d009      	beq.n	11486 <userFunction+0x5a>
				HAL.IOs->config->toInput(Pins.STOP_L); // pull up -> set it to floating causes high
   11472:	6913      	ldr	r3, [r2, #16]
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
   11474:	4798      	blx	r3
	uint32_t errors = 0;
   11476:	2400      	movs	r4, #0
		break;
   11478:	e7e6      	b.n	11448 <userFunction+0x1c>
				HAL.IOs->config->toOutput(Pins.STOP_R);
   1147a:	68db      	ldr	r3, [r3, #12]
   1147c:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_R);
   1147e:	6833      	ldr	r3, [r6, #0]
   11480:	6968      	ldr	r0, [r5, #20]
   11482:	699b      	ldr	r3, [r3, #24]
   11484:	e7ee      	b.n	11464 <userFunction+0x38>
				HAL.IOs->config->toOutput(Pins.STOP_L);
   11486:	68d3      	ldr	r3, [r2, #12]
   11488:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.STOP_L);
   1148a:	6833      	ldr	r3, [r6, #0]
   1148c:	69a8      	ldr	r0, [r5, #24]
   1148e:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setLow(Pins.FREEZE);
   11490:	4798      	blx	r3
   11492:	e7d9      	b.n	11448 <userFunction+0x1c>
		if(*value)
   11494:	4b18      	ldr	r3, [pc, #96]	; (114f8 <userFunction+0xcc>)
   11496:	4d19      	ldr	r5, [pc, #100]	; (114fc <userFunction+0xd0>)
   11498:	68de      	ldr	r6, [r3, #12]
   1149a:	6814      	ldr	r4, [r2, #0]
   1149c:	6928      	ldr	r0, [r5, #16]
   1149e:	6833      	ldr	r3, [r6, #0]
   114a0:	b10c      	cbz	r4, 114a6 <userFunction+0x7a>
			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
   114a2:	691b      	ldr	r3, [r3, #16]
   114a4:	e7e6      	b.n	11474 <userFunction+0x48>
			HAL.IOs->config->toOutput(Pins.HOME_REF);
   114a6:	68db      	ldr	r3, [r3, #12]
   114a8:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.HOME_REF);
   114aa:	6833      	ldr	r3, [r6, #0]
   114ac:	6928      	ldr	r0, [r5, #16]
   114ae:	699b      	ldr	r3, [r3, #24]
   114b0:	e7ee      	b.n	11490 <userFunction+0x64>
		if(*value)
   114b2:	4b11      	ldr	r3, [pc, #68]	; (114f8 <userFunction+0xcc>)
   114b4:	4d11      	ldr	r5, [pc, #68]	; (114fc <userFunction+0xd0>)
   114b6:	68de      	ldr	r6, [r3, #12]
   114b8:	6814      	ldr	r4, [r2, #0]
   114ba:	6833      	ldr	r3, [r6, #0]
   114bc:	68a8      	ldr	r0, [r5, #8]
   114be:	2c00      	cmp	r4, #0
   114c0:	d1ef      	bne.n	114a2 <userFunction+0x76>
			HAL.IOs->config->toOutput(Pins.FREEZE);
   114c2:	68db      	ldr	r3, [r3, #12]
   114c4:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.FREEZE);
   114c6:	6833      	ldr	r3, [r6, #0]
   114c8:	68a8      	ldr	r0, [r5, #8]
   114ca:	699b      	ldr	r3, [r3, #24]
   114cc:	e7e0      	b.n	11490 <userFunction+0x64>
		*value = tmc4361A_calibrateClosedLoop(motorToIC(motor), 1);
   114ce:	480c      	ldr	r0, [pc, #48]	; (11500 <userFunction+0xd4>)
   114d0:	2101      	movs	r1, #1
   114d2:	f011 f81f 	bl	22514 <tmc4361A_calibrateClosedLoop>
   114d6:	6020      	str	r0, [r4, #0]
		if(!*value)
   114d8:	2800      	cmp	r0, #0
   114da:	d1cc      	bne.n	11476 <userFunction+0x4a>
			errors |= TMC_ERROR_NOT_DONE;
   114dc:	2420      	movs	r4, #32
	return errors;
   114de:	e7b3      	b.n	11448 <userFunction+0x1c>
		Evalboards.ch2.config->reset();
   114e0:	4c08      	ldr	r4, [pc, #32]	; (11504 <userFunction+0xd8>)
   114e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   114e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   114ea:	4798      	blx	r3
		Evalboards.ch1.config->reset();
   114ec:	69a3      	ldr	r3, [r4, #24]
   114ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   114f2:	4798      	blx	r3
   114f4:	e7bf      	b.n	11476 <userFunction+0x4a>
   114f6:	bf00      	nop
   114f8:	00029d1c 	.word	0x00029d1c
   114fc:	1fff2e78 	.word	0x1fff2e78
   11500:	1fff2e9c 	.word	0x1fff2e9c
   11504:	1fff5e88 	.word	0x1fff5e88

00011508 <periodicJob>:
{
   11508:	4601      	mov	r1, r0
	tmc4361A_periodicJob(&TMC4361A, tick);
   1150a:	4801      	ldr	r0, [pc, #4]	; (11510 <periodicJob+0x8>)
   1150c:	f011 b8c0 	b.w	22690 <tmc4361A_periodicJob>
   11510:	1fff2e9c 	.word	0x1fff2e9c

00011514 <readRegister>:
{
   11514:	b510      	push	{r4, lr}
	*value	= tmc4361A_readInt(motorToIC(motor), address);
   11516:	4803      	ldr	r0, [pc, #12]	; (11524 <readRegister+0x10>)
{
   11518:	4614      	mov	r4, r2
	*value	= tmc4361A_readInt(motorToIC(motor), address);
   1151a:	f010 fea4 	bl	22266 <tmc4361A_readInt>
   1151e:	6020      	str	r0, [r4, #0]
}
   11520:	bd10      	pop	{r4, pc}
   11522:	bf00      	nop
   11524:	1fff2e9c 	.word	0x1fff2e9c

00011528 <writeRegister>:
	switch(address) {
   11528:	296c      	cmp	r1, #108	; 0x6c
{
   1152a:	b570      	push	{r4, r5, r6, lr}
   1152c:	460d      	mov	r5, r1
   1152e:	4614      	mov	r4, r2
	switch(address) {
   11530:	d023      	beq.n	1157a <writeRegister+0x52>
   11532:	296d      	cmp	r1, #109	; 0x6d
   11534:	d017      	beq.n	11566 <writeRegister+0x3e>
   11536:	2906      	cmp	r1, #6
   11538:	d118      	bne.n	1156c <writeRegister+0x44>
		switch(Evalboards.ch2.id) {
   1153a:	4b21      	ldr	r3, [pc, #132]	; (115c0 <writeRegister+0x98>)
   1153c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   11540:	2a03      	cmp	r2, #3
   11542:	d02d      	beq.n	115a0 <writeRegister+0x78>
   11544:	2a0b      	cmp	r2, #11
   11546:	d111      	bne.n	1156c <writeRegister+0x44>
			TMC2160_FIELD_UPDATE((TMC2160TypeDef *)Evalboards.ch2.type, TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MASK, TMC2160_IHOLD_SHIFT, FIELD_GET(value, TMC4361A_HOLD_SCALE_VAL_MASK, TMC4361A_HOLD_SCALE_VAL_SHIFT));
   11548:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   1154a:	2110      	movs	r1, #16
   1154c:	4630      	mov	r0, r6
   1154e:	f00f f9c0 	bl	208d2 <tmc2160_readInt>
   11552:	f3c4 6204 	ubfx	r2, r4, #24, #5
   11556:	f020 001f 	bic.w	r0, r0, #31
   1155a:	4302      	orrs	r2, r0
   1155c:	2110      	movs	r1, #16
   1155e:	4630      	mov	r0, r6
   11560:	f00f f9a9 	bl	208b6 <tmc2160_writeInt>
			break;
   11564:	e002      	b.n	1156c <writeRegister+0x44>
		high = value;
   11566:	4b17      	ldr	r3, [pc, #92]	; (115c4 <writeRegister+0x9c>)
   11568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	tmc4361A_writeInt(motorToIC(motor), address, value);
   1156c:	4622      	mov	r2, r4
   1156e:	4629      	mov	r1, r5
   11570:	4815      	ldr	r0, [pc, #84]	; (115c8 <writeRegister+0xa0>)
}
   11572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361A_writeInt(motorToIC(motor), address, value);
   11576:	f010 be68 	b.w	2224a <tmc4361A_writeInt>
		if(Evalboards.ch2.id == ID_TMC2660) // TMC2660 -> 20 bit registers, 8 bit address
   1157a:	4911      	ldr	r1, [pc, #68]	; (115c0 <writeRegister+0x98>)
   1157c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
   11580:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
   11584:	2901      	cmp	r1, #1
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   11586:	bf19      	ittee	ne
   11588:	490e      	ldrne	r1, [pc, #56]	; (115c4 <writeRegister+0x9c>)
   1158a:	f8d1 12bc 	ldrne.w	r1, [r1, #700]	; 0x2bc
			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
   1158e:	f3c2 0213 	ubfxeq	r2, r2, #0, #20
   11592:	f3c4 5102 	ubfxeq	r1, r4, #20, #3
			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
   11596:	bf18      	it	ne
   11598:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
   1159c:	4798      	blx	r3
   1159e:	e7e5      	b.n	1156c <writeRegister+0x44>
			TMC2130_FIELD_UPDATE((TMC2130TypeDef *)Evalboards.ch2.type, TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MASK, TMC2130_IHOLD_SHIFT, FIELD_GET(value, TMC4361A_HOLD_SCALE_VAL_MASK, TMC4361A_HOLD_SCALE_VAL_SHIFT));
   115a0:	6f9e      	ldr	r6, [r3, #120]	; 0x78
   115a2:	2110      	movs	r1, #16
   115a4:	4630      	mov	r0, r6
   115a6:	f00f f86e 	bl	20686 <tmc2130_readInt>
   115aa:	f3c4 6204 	ubfx	r2, r4, #24, #5
   115ae:	f020 001f 	bic.w	r0, r0, #31
   115b2:	4302      	orrs	r2, r0
   115b4:	2110      	movs	r1, #16
   115b6:	4630      	mov	r0, r6
   115b8:	f00f f857 	bl	2066a <tmc2130_writeInt>
			break;
   115bc:	e7d6      	b.n	1156c <writeRegister+0x44>
   115be:	bf00      	nop
   115c0:	1fff5e88 	.word	0x1fff5e88
   115c4:	1fff2e78 	.word	0x1fff2e78
   115c8:	1fff2e9c 	.word	0x1fff2e9c

000115cc <moveBy>:
{
   115cc:	b508      	push	{r3, lr}
	tmc4361A_moveBy(motorToIC(motor), ticks, vmax_position);
   115ce:	4804      	ldr	r0, [pc, #16]	; (115e0 <moveBy+0x14>)
   115d0:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
   115d4:	3024      	adds	r0, #36	; 0x24
   115d6:	f010 ff8d 	bl	224f4 <tmc4361A_moveBy>
}
   115da:	2000      	movs	r0, #0
   115dc:	bd08      	pop	{r3, pc}
   115de:	bf00      	nop
   115e0:	1fff2e78 	.word	0x1fff2e78

000115e4 <moveTo>:
{
   115e4:	b508      	push	{r3, lr}
	tmc4361A_moveTo(motorToIC(motor), position, vmax_position);
   115e6:	4804      	ldr	r0, [pc, #16]	; (115f8 <moveTo+0x14>)
   115e8:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
   115ec:	3024      	adds	r0, #36	; 0x24
   115ee:	f010 ff65 	bl	224bc <tmc4361A_moveTo>
}
   115f2:	2000      	movs	r0, #0
   115f4:	bd08      	pop	{r3, pc}
   115f6:	bf00      	nop
   115f8:	1fff2e78 	.word	0x1fff2e78

000115fc <handleParameter>:
{
   115fc:	b570      	push	{r4, r5, r6, lr}
   115fe:	4605      	mov	r5, r0
   11600:	461e      	mov	r6, r3
	if(motor >= TMC4361A_MOTORS)
   11602:	460c      	mov	r4, r1
   11604:	2900      	cmp	r1, #0
   11606:	f040 8387 	bne.w	11d18 <handleParameter+0x71c>
	switch(type)
   1160a:	2a8a      	cmp	r2, #138	; 0x8a
   1160c:	d84b      	bhi.n	116a6 <handleParameter+0xaa>
   1160e:	2a6b      	cmp	r2, #107	; 0x6b
   11610:	d803      	bhi.n	1161a <handleParameter+0x1e>
   11612:	2a1b      	cmp	r2, #27
   11614:	d926      	bls.n	11664 <handleParameter+0x68>
   11616:	2504      	movs	r5, #4
   11618:	e050      	b.n	116bc <handleParameter+0xc0>
   1161a:	3a6c      	subs	r2, #108	; 0x6c
   1161c:	2a1e      	cmp	r2, #30
   1161e:	f200 837d 	bhi.w	11d1c <handleParameter+0x720>
   11622:	e8df f012 	tbh	[pc, r2, lsl #1]
   11626:	01a7      	.short	0x01a7
   11628:	01c301b5 	.word	0x01c301b5
   1162c:	01ee01d8 	.word	0x01ee01d8
   11630:	021001fc 	.word	0x021001fc
   11634:	02350227 	.word	0x02350227
   11638:	025a0243 	.word	0x025a0243
   1163c:	027e0270 	.word	0x027e0270
   11640:	037b028c 	.word	0x037b028c
   11644:	029a037b 	.word	0x029a037b
   11648:	02b602a8 	.word	0x02b602a8
   1164c:	037b037b 	.word	0x037b037b
   11650:	037b02ce 	.word	0x037b02ce
   11654:	02ea037b 	.word	0x02ea037b
   11658:	030002f3 	.word	0x030002f3
   1165c:	030e037b 	.word	0x030e037b
   11660:	03380322 	.word	0x03380322
   11664:	2a1b      	cmp	r2, #27
   11666:	f200 835b 	bhi.w	11d20 <handleParameter+0x724>
   1166a:	e8df f012 	tbh	[pc, r2, lsl #1]
   1166e:	002e      	.short	0x002e
   11670:	004a003c 	.word	0x004a003c
   11674:	0065005c 	.word	0x0065005c
   11678:	03590081 	.word	0x03590081
   1167c:	00950359 	.word	0x00950359
   11680:	03590359 	.word	0x03590359
   11684:	03590359 	.word	0x03590359
   11688:	00a00359 	.word	0x00a00359
   1168c:	00c100b3 	.word	0x00c100b3
   11690:	00e900d5 	.word	0x00e900d5
   11694:	010b00f7 	.word	0x010b00f7
   11698:	012b0119 	.word	0x012b0119
   1169c:	01470139 	.word	0x01470139
   116a0:	01630155 	.word	0x01630155
   116a4:	0175      	.short	0x0175
   116a6:	2ad4      	cmp	r2, #212	; 0xd4
   116a8:	f000 8319 	beq.w	11cde <handleParameter+0x6e2>
   116ac:	d808      	bhi.n	116c0 <handleParameter+0xc4>
   116ae:	2ac8      	cmp	r2, #200	; 0xc8
   116b0:	f000 81b5 	beq.w	11a1e <handleParameter+0x422>
   116b4:	2ad1      	cmp	r2, #209	; 0xd1
   116b6:	f000 8304 	beq.w	11cc2 <handleParameter+0x6c6>
   116ba:	2504      	movs	r5, #4
}
   116bc:	4628      	mov	r0, r5
   116be:	bd70      	pop	{r4, r5, r6, pc}
	switch(type)
   116c0:	2ad6      	cmp	r2, #214	; 0xd6
   116c2:	f000 8319 	beq.w	11cf8 <handleParameter+0x6fc>
   116c6:	2504      	movs	r5, #4
   116c8:	e7f8      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   116ca:	b928      	cbnz	r0, 116d8 <handleParameter+0xdc>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_X_TARGET);
   116cc:	48a0      	ldr	r0, [pc, #640]	; (11950 <handleParameter+0x354>)
   116ce:	2137      	movs	r1, #55	; 0x37
   116d0:	f010 fdc9 	bl	22266 <tmc4361A_readInt>
   116d4:	6030      	str	r0, [r6, #0]
   116d6:	e7f1      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_X_TARGET, *value);
   116d8:	6832      	ldr	r2, [r6, #0]
   116da:	489d      	ldr	r0, [pc, #628]	; (11950 <handleParameter+0x354>)
   116dc:	2137      	movs	r1, #55	; 0x37
   116de:	f010 fdb4 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   116e2:	2500      	movs	r5, #0
   116e4:	e7ea      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   116e6:	b928      	cbnz	r0, 116f4 <handleParameter+0xf8>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_XACTUAL);
   116e8:	4899      	ldr	r0, [pc, #612]	; (11950 <handleParameter+0x354>)
   116ea:	2121      	movs	r1, #33	; 0x21
   116ec:	f010 fdbb 	bl	22266 <tmc4361A_readInt>
   116f0:	6030      	str	r0, [r6, #0]
   116f2:	e7e3      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_XACTUAL, *value);
   116f4:	6832      	ldr	r2, [r6, #0]
   116f6:	4896      	ldr	r0, [pc, #600]	; (11950 <handleParameter+0x354>)
   116f8:	2121      	movs	r1, #33	; 0x21
   116fa:	f010 fda6 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   116fe:	2500      	movs	r5, #0
   11700:	e7dc      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11702:	b930      	cbnz	r0, 11712 <handleParameter+0x116>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
   11704:	4892      	ldr	r0, [pc, #584]	; (11950 <handleParameter+0x354>)
   11706:	2124      	movs	r1, #36	; 0x24
   11708:	f010 fdad 	bl	22266 <tmc4361A_readInt>
   1170c:	1200      	asrs	r0, r0, #8
   1170e:	6030      	str	r0, [r6, #0]
   11710:	e7d4      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(*value));
   11712:	6830      	ldr	r0, [r6, #0]
   11714:	f010 fea1 	bl	2245a <tmc4361A_discardVelocityDecimals>
   11718:	2124      	movs	r1, #36	; 0x24
   1171a:	4602      	mov	r2, r0
   1171c:	488c      	ldr	r0, [pc, #560]	; (11950 <handleParameter+0x354>)
   1171e:	f010 fd94 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11722:	2500      	movs	r5, #0
   11724:	e7ca      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11726:	2800      	cmp	r0, #0
   11728:	f040 82fc 	bne.w	11d24 <handleParameter+0x728>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VACTUAL);
   1172c:	4888      	ldr	r0, [pc, #544]	; (11950 <handleParameter+0x354>)
   1172e:	2122      	movs	r1, #34	; 0x22
   11730:	f010 fd99 	bl	22266 <tmc4361A_readInt>
   11734:	6030      	str	r0, [r6, #0]
   11736:	e7c1      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11738:	4c86      	ldr	r4, [pc, #536]	; (11954 <handleParameter+0x358>)
   1173a:	b918      	cbnz	r0, 11744 <handleParameter+0x148>
			*value = vmax_position;
   1173c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
   11740:	6033      	str	r3, [r6, #0]
   11742:	e7bb      	b.n	116bc <handleParameter+0xc0>
			vmax_position = *value;
   11744:	6833      	ldr	r3, [r6, #0]
   11746:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
			if(tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE) & TMC4361A_RAMP_POSITION)
   1174a:	2120      	movs	r1, #32
   1174c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11750:	f010 fd89 	bl	22266 <tmc4361A_readInt>
   11754:	0742      	lsls	r2, r0, #29
   11756:	f140 823f 	bpl.w	11bd8 <handleParameter+0x5dc>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_position));
   1175a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
   1175e:	f010 fe7c 	bl	2245a <tmc4361A_discardVelocityDecimals>
   11762:	2124      	movs	r1, #36	; 0x24
   11764:	4602      	mov	r2, r0
   11766:	1860      	adds	r0, r4, r1
   11768:	f010 fd6f 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1176c:	2500      	movs	r5, #0
   1176e:	e7a5      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11770:	b930      	cbnz	r0, 11780 <handleParameter+0x184>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_AMAX)>>2;
   11772:	4877      	ldr	r0, [pc, #476]	; (11950 <handleParameter+0x354>)
   11774:	2128      	movs	r1, #40	; 0x28
   11776:	f010 fd76 	bl	22266 <tmc4361A_readInt>
   1177a:	1080      	asrs	r0, r0, #2
   1177c:	6030      	str	r0, [r6, #0]
   1177e:	e79d      	b.n	116bc <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   11780:	6832      	ldr	r2, [r6, #0]
   11782:	0d95      	lsrs	r5, r2, #22
   11784:	05ad      	lsls	r5, r5, #22
   11786:	2d00      	cmp	r5, #0
   11788:	f040 82ce 	bne.w	11d28 <handleParameter+0x72c>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_AMAX, *value<<2);
   1178c:	4870      	ldr	r0, [pc, #448]	; (11950 <handleParameter+0x354>)
   1178e:	0092      	lsls	r2, r2, #2
   11790:	2128      	movs	r1, #40	; 0x28
   11792:	f010 fd5a 	bl	2224a <tmc4361A_writeInt>
   11796:	e791      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11798:	2800      	cmp	r0, #0
   1179a:	f040 82c7 	bne.w	11d2c <handleParameter+0x730>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_STATUS) & (1<<0))? 1:0;
   1179e:	486c      	ldr	r0, [pc, #432]	; (11950 <handleParameter+0x354>)
   117a0:	210f      	movs	r1, #15
   117a2:	f010 fd60 	bl	22266 <tmc4361A_readInt>
   117a6:	f000 0001 	and.w	r0, r0, #1
   117aa:	6030      	str	r0, [r6, #0]
   117ac:	e786      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   117ae:	b930      	cbnz	r0, 117be <handleParameter+0x1c2>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE)<<1;
   117b0:	4867      	ldr	r0, [pc, #412]	; (11950 <handleParameter+0x354>)
   117b2:	2120      	movs	r1, #32
   117b4:	f010 fd57 	bl	22266 <tmc4361A_readInt>
   117b8:	0040      	lsls	r0, r0, #1
   117ba:	6030      	str	r0, [r6, #0]
   117bc:	e77e      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_RAMPMODE, (*value) ? TMC4361A_RAMP_SSHAPE : TMC4361A_RAMP_TRAPEZ);
   117be:	6833      	ldr	r3, [r6, #0]
   117c0:	4863      	ldr	r0, [pc, #396]	; (11950 <handleParameter+0x354>)
   117c2:	2b00      	cmp	r3, #0
   117c4:	bf14      	ite	ne
   117c6:	2202      	movne	r2, #2
   117c8:	2201      	moveq	r2, #1
   117ca:	2120      	movs	r1, #32
   117cc:	f010 fd3d 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   117d0:	2500      	movs	r5, #0
   117d2:	e773      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   117d4:	b928      	cbnz	r0, 117e2 <handleParameter+0x1e6>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTART);
   117d6:	485e      	ldr	r0, [pc, #376]	; (11950 <handleParameter+0x354>)
   117d8:	2125      	movs	r1, #37	; 0x25
   117da:	f010 fd44 	bl	22266 <tmc4361A_readInt>
   117de:	6030      	str	r0, [r6, #0]
   117e0:	e76c      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTART, *value);
   117e2:	6832      	ldr	r2, [r6, #0]
   117e4:	485a      	ldr	r0, [pc, #360]	; (11950 <handleParameter+0x354>)
   117e6:	2125      	movs	r1, #37	; 0x25
   117e8:	f010 fd2f 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   117ec:	2500      	movs	r5, #0
   117ee:	e765      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   117f0:	b930      	cbnz	r0, 11800 <handleParameter+0x204>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ASTART)>>2;
   117f2:	4857      	ldr	r0, [pc, #348]	; (11950 <handleParameter+0x354>)
   117f4:	212a      	movs	r1, #42	; 0x2a
   117f6:	f010 fd36 	bl	22266 <tmc4361A_readInt>
   117fa:	1080      	asrs	r0, r0, #2
   117fc:	6030      	str	r0, [r6, #0]
   117fe:	e75d      	b.n	116bc <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   11800:	6832      	ldr	r2, [r6, #0]
   11802:	0d95      	lsrs	r5, r2, #22
   11804:	05ad      	lsls	r5, r5, #22
   11806:	2d00      	cmp	r5, #0
   11808:	f040 8292 	bne.w	11d30 <handleParameter+0x734>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_ASTART, *value<<2);
   1180c:	4850      	ldr	r0, [pc, #320]	; (11950 <handleParameter+0x354>)
   1180e:	0092      	lsls	r2, r2, #2
   11810:	212a      	movs	r1, #42	; 0x2a
   11812:	f010 fd1a 	bl	2224a <tmc4361A_writeInt>
   11816:	e751      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11818:	b930      	cbnz	r0, 11828 <handleParameter+0x22c>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DMAX)>>2;
   1181a:	484d      	ldr	r0, [pc, #308]	; (11950 <handleParameter+0x354>)
   1181c:	2129      	movs	r1, #41	; 0x29
   1181e:	f010 fd22 	bl	22266 <tmc4361A_readInt>
   11822:	1080      	asrs	r0, r0, #2
   11824:	6030      	str	r0, [r6, #0]
   11826:	e749      	b.n	116bc <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   11828:	6832      	ldr	r2, [r6, #0]
   1182a:	0d95      	lsrs	r5, r2, #22
   1182c:	05ad      	lsls	r5, r5, #22
   1182e:	2d00      	cmp	r5, #0
   11830:	f040 8280 	bne.w	11d34 <handleParameter+0x738>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DMAX, *value<<2);
   11834:	4846      	ldr	r0, [pc, #280]	; (11950 <handleParameter+0x354>)
   11836:	0092      	lsls	r2, r2, #2
   11838:	2129      	movs	r1, #41	; 0x29
   1183a:	f010 fd06 	bl	2224a <tmc4361A_writeInt>
   1183e:	e73d      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11840:	b928      	cbnz	r0, 1184e <handleParameter+0x252>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VBREAK);
   11842:	4843      	ldr	r0, [pc, #268]	; (11950 <handleParameter+0x354>)
   11844:	2127      	movs	r1, #39	; 0x27
   11846:	f010 fd0e 	bl	22266 <tmc4361A_readInt>
   1184a:	6030      	str	r0, [r6, #0]
   1184c:	e736      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VBREAK, *value);
   1184e:	6832      	ldr	r2, [r6, #0]
   11850:	483f      	ldr	r0, [pc, #252]	; (11950 <handleParameter+0x354>)
   11852:	2127      	movs	r1, #39	; 0x27
   11854:	f010 fcf9 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11858:	2500      	movs	r5, #0
   1185a:	e72f      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   1185c:	b930      	cbnz	r0, 1186c <handleParameter+0x270>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DFINAL) >> 2;
   1185e:	483c      	ldr	r0, [pc, #240]	; (11950 <handleParameter+0x354>)
   11860:	212b      	movs	r1, #43	; 0x2b
   11862:	f010 fd00 	bl	22266 <tmc4361A_readInt>
   11866:	1080      	asrs	r0, r0, #2
   11868:	6030      	str	r0, [r6, #0]
   1186a:	e727      	b.n	116bc <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   1186c:	6832      	ldr	r2, [r6, #0]
   1186e:	0d95      	lsrs	r5, r2, #22
   11870:	05ad      	lsls	r5, r5, #22
   11872:	2d00      	cmp	r5, #0
   11874:	f040 8260 	bne.w	11d38 <handleParameter+0x73c>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DFINAL, *value<<2);
   11878:	4835      	ldr	r0, [pc, #212]	; (11950 <handleParameter+0x354>)
   1187a:	0092      	lsls	r2, r2, #2
   1187c:	212b      	movs	r1, #43	; 0x2b
   1187e:	f010 fce4 	bl	2224a <tmc4361A_writeInt>
   11882:	e71b      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11884:	b928      	cbnz	r0, 11892 <handleParameter+0x296>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTOP);
   11886:	4832      	ldr	r0, [pc, #200]	; (11950 <handleParameter+0x354>)
   11888:	2126      	movs	r1, #38	; 0x26
   1188a:	f010 fcec 	bl	22266 <tmc4361A_readInt>
   1188e:	6030      	str	r0, [r6, #0]
   11890:	e714      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTOP, *value);
   11892:	6832      	ldr	r2, [r6, #0]
   11894:	482e      	ldr	r0, [pc, #184]	; (11950 <handleParameter+0x354>)
   11896:	2126      	movs	r1, #38	; 0x26
   11898:	f010 fcd7 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1189c:	2500      	movs	r5, #0
   1189e:	e70d      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   118a0:	b928      	cbnz	r0, 118ae <handleParameter+0x2b2>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DSTOP);
   118a2:	482b      	ldr	r0, [pc, #172]	; (11950 <handleParameter+0x354>)
   118a4:	212c      	movs	r1, #44	; 0x2c
   118a6:	f010 fcde 	bl	22266 <tmc4361A_readInt>
   118aa:	6030      	str	r0, [r6, #0]
   118ac:	e706      	b.n	116bc <handleParameter+0xc0>
			if(*value & ~0x3FFFFF)
   118ae:	6832      	ldr	r2, [r6, #0]
   118b0:	0d95      	lsrs	r5, r2, #22
   118b2:	05ad      	lsls	r5, r5, #22
   118b4:	2d00      	cmp	r5, #0
   118b6:	f040 8241 	bne.w	11d3c <handleParameter+0x740>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DSTOP, *value);
   118ba:	4825      	ldr	r0, [pc, #148]	; (11950 <handleParameter+0x354>)
   118bc:	212c      	movs	r1, #44	; 0x2c
   118be:	f010 fcc4 	bl	2224a <tmc4361A_writeInt>
   118c2:	e6fb      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   118c4:	b928      	cbnz	r0, 118d2 <handleParameter+0x2d6>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW1);
   118c6:	4822      	ldr	r0, [pc, #136]	; (11950 <handleParameter+0x354>)
   118c8:	212d      	movs	r1, #45	; 0x2d
   118ca:	f010 fccc 	bl	22266 <tmc4361A_readInt>
   118ce:	6030      	str	r0, [r6, #0]
   118d0:	e6f4      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW1, *value);
   118d2:	6832      	ldr	r2, [r6, #0]
   118d4:	481e      	ldr	r0, [pc, #120]	; (11950 <handleParameter+0x354>)
   118d6:	212d      	movs	r1, #45	; 0x2d
   118d8:	f010 fcb7 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   118dc:	2500      	movs	r5, #0
   118de:	e6ed      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   118e0:	b928      	cbnz	r0, 118ee <handleParameter+0x2f2>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW2);
   118e2:	481b      	ldr	r0, [pc, #108]	; (11950 <handleParameter+0x354>)
   118e4:	212e      	movs	r1, #46	; 0x2e
   118e6:	f010 fcbe 	bl	22266 <tmc4361A_readInt>
   118ea:	6030      	str	r0, [r6, #0]
   118ec:	e6e6      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW2, *value);
   118ee:	6832      	ldr	r2, [r6, #0]
   118f0:	4817      	ldr	r0, [pc, #92]	; (11950 <handleParameter+0x354>)
   118f2:	212e      	movs	r1, #46	; 0x2e
   118f4:	f010 fca9 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   118f8:	2500      	movs	r5, #0
   118fa:	e6df      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   118fc:	b928      	cbnz	r0, 1190a <handleParameter+0x30e>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW3);
   118fe:	4814      	ldr	r0, [pc, #80]	; (11950 <handleParameter+0x354>)
   11900:	212f      	movs	r1, #47	; 0x2f
   11902:	f010 fcb0 	bl	22266 <tmc4361A_readInt>
   11906:	6030      	str	r0, [r6, #0]
   11908:	e6d8      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW3, *value);
   1190a:	6832      	ldr	r2, [r6, #0]
   1190c:	4810      	ldr	r0, [pc, #64]	; (11950 <handleParameter+0x354>)
   1190e:	212f      	movs	r1, #47	; 0x2f
   11910:	f010 fc9b 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11914:	2500      	movs	r5, #0
   11916:	e6d1      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11918:	b928      	cbnz	r0, 11926 <handleParameter+0x32a>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW4);
   1191a:	480d      	ldr	r0, [pc, #52]	; (11950 <handleParameter+0x354>)
   1191c:	2130      	movs	r1, #48	; 0x30
   1191e:	f010 fca2 	bl	22266 <tmc4361A_readInt>
   11922:	6030      	str	r0, [r6, #0]
   11924:	e6ca      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW4, *value);
   11926:	6832      	ldr	r2, [r6, #0]
   11928:	4809      	ldr	r0, [pc, #36]	; (11950 <handleParameter+0x354>)
   1192a:	2130      	movs	r1, #48	; 0x30
   1192c:	f010 fc8d 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11930:	2500      	movs	r5, #0
   11932:	e6c3      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11934:	b928      	cbnz	r0, 11942 <handleParameter+0x346>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT);
   11936:	4806      	ldr	r0, [pc, #24]	; (11950 <handleParameter+0x354>)
   11938:	2133      	movs	r1, #51	; 0x33
   1193a:	f010 fc94 	bl	22266 <tmc4361A_readInt>
   1193e:	6030      	str	r0, [r6, #0]
   11940:	e6bc      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT, *value);
   11942:	6832      	ldr	r2, [r6, #0]
   11944:	4802      	ldr	r0, [pc, #8]	; (11950 <handleParameter+0x354>)
   11946:	2133      	movs	r1, #51	; 0x33
   11948:	f010 fc7f 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1194c:	2500      	movs	r5, #0
   1194e:	e6b5      	b.n	116bc <handleParameter+0xc0>
   11950:	1fff2e9c 	.word	0x1fff2e9c
   11954:	1fff2e78 	.word	0x1fff2e78
		if(readWrite == READ) {
   11958:	b928      	cbnz	r0, 11966 <handleParameter+0x36a>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT);
   1195a:	48a0      	ldr	r0, [pc, #640]	; (11bdc <handleParameter+0x5e0>)
   1195c:	2134      	movs	r1, #52	; 0x34
   1195e:	f010 fc82 	bl	22266 <tmc4361A_readInt>
   11962:	6030      	str	r0, [r6, #0]
   11964:	e6aa      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT, *value);
   11966:	6832      	ldr	r2, [r6, #0]
   11968:	489c      	ldr	r0, [pc, #624]	; (11bdc <handleParameter+0x5e0>)
   1196a:	2134      	movs	r1, #52	; 0x34
   1196c:	f010 fc6d 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11970:	2500      	movs	r5, #0
   11972:	e6a3      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11974:	b928      	cbnz	r0, 11982 <handleParameter+0x386>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR);		// read from shadow register
   11976:	4899      	ldr	r0, [pc, #612]	; (11bdc <handleParameter+0x5e0>)
   11978:	2160      	movs	r1, #96	; 0x60
   1197a:	f010 fc74 	bl	22266 <tmc4361A_readInt>
   1197e:	6030      	str	r0, [r6, #0]
   11980:	e69c      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR, *value);
   11982:	6832      	ldr	r2, [r6, #0]
   11984:	4895      	ldr	r0, [pc, #596]	; (11bdc <handleParameter+0x5e0>)
   11986:	2160      	movs	r1, #96	; 0x60
   11988:	f010 fc5f 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1198c:	2500      	movs	r5, #0
   1198e:	e695      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11990:	b928      	cbnz	r0, 1199e <handleParameter+0x3a2>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VADD_EMF); 	// read from shadow register
   11992:	4892      	ldr	r0, [pc, #584]	; (11bdc <handleParameter+0x5e0>)
   11994:	2161      	movs	r1, #97	; 0x61
   11996:	f010 fc66 	bl	22266 <tmc4361A_readInt>
   1199a:	6030      	str	r0, [r6, #0]
   1199c:	e68e      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VADD_EMF, *value);
   1199e:	6832      	ldr	r2, [r6, #0]
   119a0:	488e      	ldr	r0, [pc, #568]	; (11bdc <handleParameter+0x5e0>)
   119a2:	2161      	movs	r1, #97	; 0x61
   119a4:	f010 fc51 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   119a8:	2500      	movs	r5, #0
   119aa:	e687      	b.n	116bc <handleParameter+0xc0>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) >> 16;
   119ac:	488b      	ldr	r0, [pc, #556]	; (11bdc <handleParameter+0x5e0>)
   119ae:	211c      	movs	r1, #28
		if(readWrite == READ) {
   119b0:	b925      	cbnz	r5, 119bc <handleParameter+0x3c0>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) >> 16;
   119b2:	f010 fc58 	bl	22266 <tmc4361A_readInt>
   119b6:	1400      	asrs	r0, r0, #16
   119b8:	6030      	str	r0, [r6, #0]
   119ba:	e67f      	b.n	116bc <handleParameter+0xc0>
			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x000001FF;
   119bc:	f010 fc53 	bl	22266 <tmc4361A_readInt>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
   119c0:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x000001FF;
   119c2:	f3c0 0008 	ubfx	r0, r0, #0, #9
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
   119c6:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
   119ca:	211c      	movs	r1, #28
   119cc:	4883      	ldr	r0, [pc, #524]	; (11bdc <handleParameter+0x5e0>)
   119ce:	f010 fc3c 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   119d2:	2500      	movs	r5, #0
   119d4:	e672      	b.n	116bc <handleParameter+0xc0>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) & 0xFF;
   119d6:	4881      	ldr	r0, [pc, #516]	; (11bdc <handleParameter+0x5e0>)
   119d8:	211c      	movs	r1, #28
		if(readWrite == READ) {
   119da:	b925      	cbnz	r5, 119e6 <handleParameter+0x3ea>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) & 0xFF;
   119dc:	f010 fc43 	bl	22266 <tmc4361A_readInt>
   119e0:	b2c0      	uxtb	r0, r0
   119e2:	6030      	str	r0, [r6, #0]
   119e4:	e66a      	b.n	116bc <handleParameter+0xc0>
			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x00FF0000;
   119e6:	f010 fc3e 	bl	22266 <tmc4361A_readInt>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
   119ea:	6832      	ldr	r2, [r6, #0]
			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x00FF0000;
   119ec:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
   119f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
   119f4:	4302      	orrs	r2, r0
   119f6:	211c      	movs	r1, #28
   119f8:	4878      	ldr	r0, [pc, #480]	; (11bdc <handleParameter+0x5e0>)
   119fa:	f010 fc26 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   119fe:	2500      	movs	r5, #0
   11a00:	e65c      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11a02:	b928      	cbnz	r0, 11a10 <handleParameter+0x414>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_OFFSET);
   11a04:	4875      	ldr	r0, [pc, #468]	; (11bdc <handleParameter+0x5e0>)
   11a06:	2159      	movs	r1, #89	; 0x59
   11a08:	f010 fc2d 	bl	22266 <tmc4361A_readInt>
   11a0c:	6030      	str	r0, [r6, #0]
   11a0e:	e655      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_OFFSET, *value);
   11a10:	6832      	ldr	r2, [r6, #0]
   11a12:	4872      	ldr	r0, [pc, #456]	; (11bdc <handleParameter+0x5e0>)
   11a14:	2159      	movs	r1, #89	; 0x59
   11a16:	f010 fc18 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11a1a:	2500      	movs	r5, #0
   11a1c:	e64e      	b.n	116bc <handleParameter+0xc0>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
   11a1e:	486f      	ldr	r0, [pc, #444]	; (11bdc <handleParameter+0x5e0>)
   11a20:	2106      	movs	r1, #6
		if(readWrite == READ) {
   11a22:	b925      	cbnz	r5, 11a2e <handleParameter+0x432>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
   11a24:	f010 fc1f 	bl	22266 <tmc4361A_readInt>
   11a28:	b2c0      	uxtb	r0, r0
   11a2a:	6030      	str	r0, [r6, #0]
   11a2c:	e646      	b.n	116bc <handleParameter+0xc0>
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<0);
   11a2e:	f010 fc1a 	bl	22266 <tmc4361A_readInt>
			uvalue |= (*value & 0xFF) << 0;
   11a32:	7832      	ldrb	r2, [r6, #0]
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<0);
   11a34:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
   11a38:	4302      	orrs	r2, r0
   11a3a:	2106      	movs	r1, #6
   11a3c:	4867      	ldr	r0, [pc, #412]	; (11bdc <handleParameter+0x5e0>)
   11a3e:	f010 fc04 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11a42:	2500      	movs	r5, #0
   11a44:	e63a      	b.n	116bc <handleParameter+0xc0>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 8) & 0xFF;
   11a46:	4865      	ldr	r0, [pc, #404]	; (11bdc <handleParameter+0x5e0>)
   11a48:	2106      	movs	r1, #6
		if(readWrite == READ) {
   11a4a:	b92d      	cbnz	r5, 11a58 <handleParameter+0x45c>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 8) & 0xFF;
   11a4c:	f010 fc0b 	bl	22266 <tmc4361A_readInt>
   11a50:	f3c0 2007 	ubfx	r0, r0, #8, #8
   11a54:	6030      	str	r0, [r6, #0]
   11a56:	e631      	b.n	116bc <handleParameter+0xc0>
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<8);
   11a58:	f010 fc05 	bl	22266 <tmc4361A_readInt>
			uvalue |= (*value & 0xFF) << 8;
   11a5c:	6833      	ldr	r3, [r6, #0]
   11a5e:	021b      	lsls	r3, r3, #8
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<8);
   11a60:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
			uvalue |= (*value & 0xFF) << 8;
   11a64:	b29b      	uxth	r3, r3
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
   11a66:	485d      	ldr	r0, [pc, #372]	; (11bdc <handleParameter+0x5e0>)
   11a68:	431a      	orrs	r2, r3
   11a6a:	2106      	movs	r1, #6
   11a6c:	f010 fbed 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11a70:	2500      	movs	r5, #0
   11a72:	e623      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11a74:	b928      	cbnz	r0, 11a82 <handleParameter+0x486>
			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_P_WR];
   11a76:	4b5a      	ldr	r3, [pc, #360]	; (11be0 <handleParameter+0x5e4>)
   11a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11a7a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11a7e:	6033      	str	r3, [r6, #0]
   11a80:	e61c      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_P_WR, *value);
   11a82:	6832      	ldr	r2, [r6, #0]
   11a84:	4855      	ldr	r0, [pc, #340]	; (11bdc <handleParameter+0x5e0>)
   11a86:	215a      	movs	r1, #90	; 0x5a
   11a88:	f010 fbdf 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11a8c:	2500      	movs	r5, #0
   11a8e:	e615      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11a90:	b928      	cbnz	r0, 11a9e <handleParameter+0x4a2>
			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_I_WR];
   11a92:	4b53      	ldr	r3, [pc, #332]	; (11be0 <handleParameter+0x5e4>)
   11a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11a96:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   11a9a:	6033      	str	r3, [r6, #0]
   11a9c:	e60e      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_I_WR, *value);
   11a9e:	6832      	ldr	r2, [r6, #0]
   11aa0:	484e      	ldr	r0, [pc, #312]	; (11bdc <handleParameter+0x5e0>)
   11aa2:	215b      	movs	r1, #91	; 0x5b
   11aa4:	f010 fbd1 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11aa8:	2500      	movs	r5, #0
   11aaa:	e607      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11aac:	484c      	ldr	r0, [pc, #304]	; (11be0 <handleParameter+0x5e4>)
   11aae:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11ab0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
   11ab4:	b91d      	cbnz	r5, 11abe <handleParameter+0x4c2>
			*value &= 0x7FFF;
   11ab6:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11aba:	6033      	str	r3, [r6, #0]
   11abc:	e5fe      	b.n	116bc <handleParameter+0xc0>
			uvalue |= (*value & 0x7FFF) << 0;
   11abe:	6832      	ldr	r2, [r6, #0]
			uvalue &= ~(0x7FFF << 0);
   11ac0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   11ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
			uvalue |= (*value & 0x7FFF) << 0;
   11ac8:	f3c2 020e 	ubfx	r2, r2, #0, #15
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
   11acc:	431a      	orrs	r2, r3
   11ace:	215b      	movs	r1, #91	; 0x5b
   11ad0:	3024      	adds	r0, #36	; 0x24
   11ad2:	f010 fbba 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11ad6:	2500      	movs	r5, #0
   11ad8:	e5f0      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11ada:	4841      	ldr	r0, [pc, #260]	; (11be0 <handleParameter+0x5e4>)
   11adc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11ade:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
   11ae2:	b91d      	cbnz	r5, 11aec <handleParameter+0x4f0>
			*value &= 0xFF;
   11ae4:	f3c2 4207 	ubfx	r2, r2, #16, #8
   11ae8:	6032      	str	r2, [r6, #0]
   11aea:	e5e7      	b.n	116bc <handleParameter+0xc0>
			uvalue |= (*value & 0xFF) << 16;
   11aec:	6833      	ldr	r3, [r6, #0]
   11aee:	041b      	lsls	r3, r3, #16
   11af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
   11af4:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
   11af8:	431a      	orrs	r2, r3
   11afa:	215b      	movs	r1, #91	; 0x5b
   11afc:	3024      	adds	r0, #36	; 0x24
   11afe:	f010 fba4 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b02:	2500      	movs	r5, #0
   11b04:	e5da      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11b06:	b928      	cbnz	r0, 11b14 <handleParameter+0x518>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR);
   11b08:	4834      	ldr	r0, [pc, #208]	; (11bdc <handleParameter+0x5e0>)
   11b0a:	215e      	movs	r1, #94	; 0x5e
   11b0c:	f010 fbab 	bl	22266 <tmc4361A_readInt>
   11b10:	6030      	str	r0, [r6, #0]
   11b12:	e5d3      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR, *value);
   11b14:	6832      	ldr	r2, [r6, #0]
   11b16:	4831      	ldr	r0, [pc, #196]	; (11bdc <handleParameter+0x5e0>)
   11b18:	215e      	movs	r1, #94	; 0x5e
   11b1a:	f010 fb96 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b1e:	2500      	movs	r5, #0
   11b20:	e5cc      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11b22:	b928      	cbnz	r0, 11b30 <handleParameter+0x534>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY);
   11b24:	482d      	ldr	r0, [pc, #180]	; (11bdc <handleParameter+0x5e0>)
   11b26:	2118      	movs	r1, #24
   11b28:	f010 fb9d 	bl	22266 <tmc4361A_readInt>
   11b2c:	6030      	str	r0, [r6, #0]
   11b2e:	e5c5      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY, *value);
   11b30:	6832      	ldr	r2, [r6, #0]
   11b32:	482a      	ldr	r0, [pc, #168]	; (11bdc <handleParameter+0x5e0>)
   11b34:	2118      	movs	r1, #24
   11b36:	f010 fb88 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b3a:	2500      	movs	r5, #0
   11b3c:	e5be      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11b3e:	b928      	cbnz	r0, 11b4c <handleParameter+0x550>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY);
   11b40:	4826      	ldr	r0, [pc, #152]	; (11bdc <handleParameter+0x5e0>)
   11b42:	2119      	movs	r1, #25
   11b44:	f010 fb8f 	bl	22266 <tmc4361A_readInt>
   11b48:	6030      	str	r0, [r6, #0]
   11b4a:	e5b7      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY, *value);
   11b4c:	6832      	ldr	r2, [r6, #0]
   11b4e:	4823      	ldr	r0, [pc, #140]	; (11bdc <handleParameter+0x5e0>)
   11b50:	2119      	movs	r1, #25
   11b52:	f010 fb7a 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b56:	2500      	movs	r5, #0
   11b58:	e5b0      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11b5a:	b928      	cbnz	r0, 11b68 <handleParameter+0x56c>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR);
   11b5c:	481f      	ldr	r0, [pc, #124]	; (11bdc <handleParameter+0x5e0>)
   11b5e:	215c      	movs	r1, #92	; 0x5c
   11b60:	f010 fb81 	bl	22266 <tmc4361A_readInt>
   11b64:	6030      	str	r0, [r6, #0]
   11b66:	e5a9      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR, *value);
   11b68:	6832      	ldr	r2, [r6, #0]
   11b6a:	481c      	ldr	r0, [pc, #112]	; (11bdc <handleParameter+0x5e0>)
   11b6c:	215c      	movs	r1, #92	; 0x5c
   11b6e:	f010 fb6c 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b72:	2500      	movs	r5, #0
   11b74:	e5a2      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11b76:	b928      	cbnz	r0, 11b84 <handleParameter+0x588>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR);
   11b78:	4818      	ldr	r0, [pc, #96]	; (11bdc <handleParameter+0x5e0>)
   11b7a:	215f      	movs	r1, #95	; 0x5f
   11b7c:	f010 fb73 	bl	22266 <tmc4361A_readInt>
   11b80:	6030      	str	r0, [r6, #0]
   11b82:	e59b      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR, *value);
   11b84:	6832      	ldr	r2, [r6, #0]
   11b86:	4815      	ldr	r0, [pc, #84]	; (11bdc <handleParameter+0x5e0>)
   11b88:	215f      	movs	r1, #95	; 0x5f
   11b8a:	f010 fb5e 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11b8e:	2500      	movs	r5, #0
   11b90:	e594      	b.n	116bc <handleParameter+0xc0>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 16) & 0xFF;
   11b92:	4812      	ldr	r0, [pc, #72]	; (11bdc <handleParameter+0x5e0>)
   11b94:	2106      	movs	r1, #6
		if(readWrite == READ) {
   11b96:	b92d      	cbnz	r5, 11ba4 <handleParameter+0x5a8>
			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 16) & 0xFF;
   11b98:	f010 fb65 	bl	22266 <tmc4361A_readInt>
   11b9c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   11ba0:	6030      	str	r0, [r6, #0]
   11ba2:	e58b      	b.n	116bc <handleParameter+0xc0>
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<16);
   11ba4:	f010 fb5f 	bl	22266 <tmc4361A_readInt>
			uvalue |= (*value & 0xFF) << 16;
   11ba8:	6833      	ldr	r3, [r6, #0]
   11baa:	041b      	lsls	r3, r3, #16
			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<16);
   11bac:	f420 027f 	bic.w	r2, r0, #16711680	; 0xff0000
			uvalue |= (*value & 0xFF) << 16;
   11bb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
   11bb4:	4809      	ldr	r0, [pc, #36]	; (11bdc <handleParameter+0x5e0>)
   11bb6:	431a      	orrs	r2, r3
   11bb8:	2106      	movs	r1, #6
   11bba:	f010 fb46 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11bbe:	2500      	movs	r5, #0
   11bc0:	e57c      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11bc2:	b148      	cbz	r0, 11bd8 <handleParameter+0x5dc>
			if(*value)
   11bc4:	6835      	ldr	r5, [r6, #0]
   11bc6:	b16d      	cbz	r5, 11be4 <handleParameter+0x5e8>
				*value = tmc4361A_calibrateClosedLoop(motorToIC(motor), 1);
   11bc8:	4804      	ldr	r0, [pc, #16]	; (11bdc <handleParameter+0x5e0>)
   11bca:	2101      	movs	r1, #1
   11bcc:	f010 fca2 	bl	22514 <tmc4361A_calibrateClosedLoop>
   11bd0:	6030      	str	r0, [r6, #0]
				if(!*value)
   11bd2:	2800      	cmp	r0, #0
   11bd4:	f000 80b4 	beq.w	11d40 <handleParameter+0x744>
	uint32_t errors = TMC_ERROR_NONE;
   11bd8:	2500      	movs	r5, #0
   11bda:	e56f      	b.n	116bc <handleParameter+0xc0>
   11bdc:	1fff2e9c 	.word	0x1fff2e9c
   11be0:	1fff2e78 	.word	0x1fff2e78
				uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
   11be4:	2107      	movs	r1, #7
   11be6:	4858      	ldr	r0, [pc, #352]	; (11d48 <handleParameter+0x74c>)
   11be8:	f010 fb3d 	bl	22266 <tmc4361A_readInt>
				tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_IN_CONF, uvalue);
   11bec:	2107      	movs	r1, #7
   11bee:	f420 0280 	bic.w	r2, r0, #4194304	; 0x400000
   11bf2:	4855      	ldr	r0, [pc, #340]	; (11d48 <handleParameter+0x74c>)
   11bf4:	f010 fb29 	bl	2224a <tmc4361A_writeInt>
   11bf8:	e560      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11bfa:	2800      	cmp	r0, #0
   11bfc:	f040 80a2 	bne.w	11d44 <handleParameter+0x748>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_V_ENC_RD);
   11c00:	4851      	ldr	r0, [pc, #324]	; (11d48 <handleParameter+0x74c>)
   11c02:	2165      	movs	r1, #101	; 0x65
   11c04:	f010 fb2f 	bl	22266 <tmc4361A_readInt>
   11c08:	6030      	str	r0, [r6, #0]
   11c0a:	e557      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11c0c:	2800      	cmp	r0, #0
   11c0e:	d1e3      	bne.n	11bd8 <handleParameter+0x5dc>
			uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
   11c10:	484d      	ldr	r0, [pc, #308]	; (11d48 <handleParameter+0x74c>)
   11c12:	2107      	movs	r1, #7
   11c14:	f010 fb27 	bl	22266 <tmc4361A_readInt>
			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
   11c18:	f3c0 5081 	ubfx	r0, r0, #22, #2
   11c1c:	1e43      	subs	r3, r0, #1
   11c1e:	4258      	negs	r0, r3
   11c20:	4158      	adcs	r0, r3
   11c22:	6030      	str	r0, [r6, #0]
   11c24:	e54a      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11c26:	b928      	cbnz	r0, 11c34 <handleParameter+0x638>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_RD);
   11c28:	4847      	ldr	r0, [pc, #284]	; (11d48 <handleParameter+0x74c>)
   11c2a:	2152      	movs	r1, #82	; 0x52
   11c2c:	f010 fb1b 	bl	22266 <tmc4361A_readInt>
   11c30:	6030      	str	r0, [r6, #0]
   11c32:	e543      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TR_TOLERANCE_WR, *value);
   11c34:	6832      	ldr	r2, [r6, #0]
   11c36:	4844      	ldr	r0, [pc, #272]	; (11d48 <handleParameter+0x74c>)
   11c38:	2152      	movs	r1, #82	; 0x52
   11c3a:	f010 fb06 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11c3e:	2500      	movs	r5, #0
   11c40:	e53c      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11c42:	4842      	ldr	r0, [pc, #264]	; (11d4c <handleParameter+0x750>)
   11c44:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11c46:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   11c4a:	b915      	cbnz	r5, 11c52 <handleParameter+0x656>
			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
   11c4c:	b2d2      	uxtb	r2, r2
   11c4e:	6032      	str	r2, [r6, #0]
   11c50:	e534      	b.n	116bc <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 0;
   11c52:	6833      	ldr	r3, [r6, #0]
			uvalue &= ~(0xFF << 0);
   11c54:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			uvalue |= (*value & 0x0F) << 0;
   11c58:	f003 030f 	and.w	r3, r3, #15
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
   11c5c:	431a      	orrs	r2, r3
   11c5e:	2163      	movs	r1, #99	; 0x63
   11c60:	3024      	adds	r0, #36	; 0x24
   11c62:	f010 faf2 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11c66:	2500      	movs	r5, #0
   11c68:	e528      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11c6a:	4838      	ldr	r0, [pc, #224]	; (11d4c <handleParameter+0x750>)
   11c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11c6e:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   11c72:	b91d      	cbnz	r5, 11c7c <handleParameter+0x680>
			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
   11c74:	f3c2 2203 	ubfx	r2, r2, #8, #4
   11c78:	6032      	str	r2, [r6, #0]
   11c7a:	e51f      	b.n	116bc <handleParameter+0xc0>
			uvalue |= (*value & 0x0F) << 8;
   11c7c:	6833      	ldr	r3, [r6, #0]
   11c7e:	021b      	lsls	r3, r3, #8
   11c80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
			uvalue &= ~(0xF << 8);
   11c84:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
   11c88:	431a      	orrs	r2, r3
   11c8a:	2163      	movs	r1, #99	; 0x63
   11c8c:	3024      	adds	r0, #36	; 0x24
   11c8e:	f010 fadc 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11c92:	2500      	movs	r5, #0
   11c94:	e512      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11c96:	482d      	ldr	r0, [pc, #180]	; (11d4c <handleParameter+0x750>)
   11c98:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11c9a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
   11c9e:	b91d      	cbnz	r5, 11ca8 <handleParameter+0x6ac>
			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
   11ca0:	f3c2 4207 	ubfx	r2, r2, #16, #8
   11ca4:	6032      	str	r2, [r6, #0]
   11ca6:	e509      	b.n	116bc <handleParameter+0xc0>
			uvalue |= (*value & 0x0FF) << 16;
   11ca8:	6833      	ldr	r3, [r6, #0]
   11caa:	041b      	lsls	r3, r3, #16
   11cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			uvalue &= ~(0xFF << 16);
   11cb0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
   11cb4:	431a      	orrs	r2, r3
   11cb6:	2163      	movs	r1, #99	; 0x63
   11cb8:	3024      	adds	r0, #36	; 0x24
   11cba:	f010 fac6 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11cbe:	2500      	movs	r5, #0
   11cc0:	e4fc      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11cc2:	b928      	cbnz	r0, 11cd0 <handleParameter+0x6d4>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS);
   11cc4:	4820      	ldr	r0, [pc, #128]	; (11d48 <handleParameter+0x74c>)
   11cc6:	2150      	movs	r1, #80	; 0x50
   11cc8:	f010 facd 	bl	22266 <tmc4361A_readInt>
   11ccc:	6030      	str	r0, [r6, #0]
   11cce:	e4f5      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS, *value);
   11cd0:	681a      	ldr	r2, [r3, #0]
   11cd2:	481d      	ldr	r0, [pc, #116]	; (11d48 <handleParameter+0x74c>)
   11cd4:	2150      	movs	r1, #80	; 0x50
   11cd6:	f010 fab8 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11cda:	4625      	mov	r5, r4
   11cdc:	e4ee      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11cde:	b920      	cbnz	r0, 11cea <handleParameter+0x6ee>
			*value = TMC4361A.config->shadowRegister[TMC4361A_SCALE_VALUES]; // todo CHECK 3: shouldn't this register be TMC4361A_ENC_POS_DEV_TOL_WR like below? (BS) #1
   11ce0:	4b1a      	ldr	r3, [pc, #104]	; (11d4c <handleParameter+0x750>)
   11ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ce4:	69db      	ldr	r3, [r3, #28]
   11ce6:	6033      	str	r3, [r6, #0]
   11ce8:	e4e8      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_TOL_WR, *value);
   11cea:	681a      	ldr	r2, [r3, #0]
   11cec:	4816      	ldr	r0, [pc, #88]	; (11d48 <handleParameter+0x74c>)
   11cee:	2153      	movs	r1, #83	; 0x53
   11cf0:	f010 faab 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11cf4:	4625      	mov	r5, r4
   11cf6:	e4e1      	b.n	116bc <handleParameter+0xc0>
		if(readWrite == READ) {
   11cf8:	b928      	cbnz	r0, 11d06 <handleParameter+0x70a>
			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_STDBY_DELAY);
   11cfa:	4813      	ldr	r0, [pc, #76]	; (11d48 <handleParameter+0x74c>)
   11cfc:	2115      	movs	r1, #21
   11cfe:	f010 fab2 	bl	22266 <tmc4361A_readInt>
   11d02:	6030      	str	r0, [r6, #0]
   11d04:	e4da      	b.n	116bc <handleParameter+0xc0>
			tmc4361A_writeInt(motorToIC(motor), TMC4361A_STDBY_DELAY, *value*160000);
   11d06:	681b      	ldr	r3, [r3, #0]
   11d08:	4a11      	ldr	r2, [pc, #68]	; (11d50 <handleParameter+0x754>)
   11d0a:	480f      	ldr	r0, [pc, #60]	; (11d48 <handleParameter+0x74c>)
   11d0c:	435a      	muls	r2, r3
   11d0e:	2115      	movs	r1, #21
   11d10:	f010 fa9b 	bl	2224a <tmc4361A_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   11d14:	4625      	mov	r5, r4
   11d16:	e4d1      	b.n	116bc <handleParameter+0xc0>
		return TMC_ERROR_MOTOR;
   11d18:	2508      	movs	r5, #8
   11d1a:	e4cf      	b.n	116bc <handleParameter+0xc0>
	switch(type)
   11d1c:	2504      	movs	r5, #4
   11d1e:	e4cd      	b.n	116bc <handleParameter+0xc0>
   11d20:	2504      	movs	r5, #4
   11d22:	e4cb      	b.n	116bc <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   11d24:	2504      	movs	r5, #4
   11d26:	e4c9      	b.n	116bc <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
   11d28:	2510      	movs	r5, #16
   11d2a:	e4c7      	b.n	116bc <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   11d2c:	2504      	movs	r5, #4
   11d2e:	e4c5      	b.n	116bc <handleParameter+0xc0>
				errors |= TMC_ERROR_VALUE;
   11d30:	2510      	movs	r5, #16
   11d32:	e4c3      	b.n	116bc <handleParameter+0xc0>
   11d34:	2510      	movs	r5, #16
   11d36:	e4c1      	b.n	116bc <handleParameter+0xc0>
   11d38:	2510      	movs	r5, #16
   11d3a:	e4bf      	b.n	116bc <handleParameter+0xc0>
   11d3c:	2510      	movs	r5, #16
   11d3e:	e4bd      	b.n	116bc <handleParameter+0xc0>
					errors |= TMC_ERROR_NOT_DONE;
   11d40:	2520      	movs	r5, #32
   11d42:	e4bb      	b.n	116bc <handleParameter+0xc0>
			errors |= TMC_ERROR_TYPE;
   11d44:	2504      	movs	r5, #4
   11d46:	e4b9      	b.n	116bc <handleParameter+0xc0>
   11d48:	1fff2e9c 	.word	0x1fff2e9c
   11d4c:	1fff2e78 	.word	0x1fff2e78
   11d50:	00027100 	.word	0x00027100

00011d54 <SAP>:
{
   11d54:	b507      	push	{r0, r1, r2, lr}
   11d56:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   11d58:	ab01      	add	r3, sp, #4
   11d5a:	4602      	mov	r2, r0
   11d5c:	2001      	movs	r0, #1
   11d5e:	f7ff fc4d 	bl	115fc <handleParameter>
}
   11d62:	b003      	add	sp, #12
   11d64:	f85d fb04 	ldr.w	pc, [sp], #4

00011d68 <GAP>:
{
   11d68:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   11d6a:	4602      	mov	r2, r0
   11d6c:	2000      	movs	r0, #0
   11d6e:	e445      	b.n	115fc <handleParameter>

00011d70 <stop>:
{
   11d70:	b508      	push	{r3, lr}
	tmc4361A_rotate(motorToIC(motor), velocity);
   11d72:	4803      	ldr	r0, [pc, #12]	; (11d80 <stop+0x10>)
   11d74:	2100      	movs	r1, #0
   11d76:	f010 fb83 	bl	22480 <tmc4361A_rotate>
}
   11d7a:	2000      	movs	r0, #0
   11d7c:	bd08      	pop	{r3, pc}
   11d7e:	bf00      	nop
   11d80:	1fff2e9c 	.word	0x1fff2e9c

00011d84 <left>:
{
   11d84:	b508      	push	{r3, lr}
	tmc4361A_rotate(motorToIC(motor), velocity);
   11d86:	4803      	ldr	r0, [pc, #12]	; (11d94 <left+0x10>)
   11d88:	4249      	negs	r1, r1
   11d8a:	f010 fb79 	bl	22480 <tmc4361A_rotate>
}
   11d8e:	2000      	movs	r0, #0
   11d90:	bd08      	pop	{r3, pc}
   11d92:	bf00      	nop
   11d94:	1fff2e9c 	.word	0x1fff2e9c

00011d98 <right>:
{
   11d98:	b508      	push	{r3, lr}
	tmc4361A_rotate(motorToIC(motor), velocity);
   11d9a:	4802      	ldr	r0, [pc, #8]	; (11da4 <right+0xc>)
   11d9c:	f010 fb70 	bl	22480 <tmc4361A_rotate>
}
   11da0:	2000      	movs	r0, #0
   11da2:	bd08      	pop	{r3, pc}
   11da4:	1fff2e9c 	.word	0x1fff2e9c

00011da8 <restore>:

	return 1;
}

static uint8_t restore()
{
   11da8:	b538      	push	{r3, r4, r5, lr}
	// Pulse the low-active hardware reset pin
	HAL.IOs->config->setLow(Pins.NRST);
   11daa:	4b0a      	ldr	r3, [pc, #40]	; (11dd4 <restore+0x2c>)
   11dac:	4c0a      	ldr	r4, [pc, #40]	; (11dd8 <restore+0x30>)
   11dae:	68dd      	ldr	r5, [r3, #12]
   11db0:	6860      	ldr	r0, [r4, #4]
   11db2:	682b      	ldr	r3, [r5, #0]
   11db4:	699b      	ldr	r3, [r3, #24]
   11db6:	4798      	blx	r3
	wait(1);
   11db8:	2001      	movs	r0, #1
   11dba:	f00a fac1 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   11dbe:	682b      	ldr	r3, [r5, #0]
   11dc0:	6860      	ldr	r0, [r4, #4]
   11dc2:	695b      	ldr	r3, [r3, #20]
   11dc4:	4798      	blx	r3

	tmc4361A_restore(&TMC4361A);
   11dc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11dca:	f010 fb2e 	bl	2242a <tmc4361A_restore>

	return 1;
}
   11dce:	2001      	movs	r0, #1
   11dd0:	bd38      	pop	{r3, r4, r5, pc}
   11dd2:	bf00      	nop
   11dd4:	00029d1c 	.word	0x00029d1c
   11dd8:	1fff2e78 	.word	0x1fff2e78

00011ddc <reset>:
{
   11ddc:	b538      	push	{r3, r4, r5, lr}
	HAL.IOs->config->setLow(Pins.NRST);
   11dde:	4b0a      	ldr	r3, [pc, #40]	; (11e08 <reset+0x2c>)
   11de0:	4c0a      	ldr	r4, [pc, #40]	; (11e0c <reset+0x30>)
   11de2:	68dd      	ldr	r5, [r3, #12]
   11de4:	6860      	ldr	r0, [r4, #4]
   11de6:	682b      	ldr	r3, [r5, #0]
   11de8:	699b      	ldr	r3, [r3, #24]
   11dea:	4798      	blx	r3
	wait(1);
   11dec:	2001      	movs	r0, #1
   11dee:	f00a faa7 	bl	1c340 <wait>
	HAL.IOs->config->setHigh(Pins.NRST);
   11df2:	682b      	ldr	r3, [r5, #0]
   11df4:	6860      	ldr	r0, [r4, #4]
   11df6:	695b      	ldr	r3, [r3, #20]
   11df8:	4798      	blx	r3
	tmc4361A_reset(&TMC4361A);
   11dfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11dfe:	f010 fb01 	bl	22404 <tmc4361A_reset>
}
   11e02:	2001      	movs	r0, #1
   11e04:	bd38      	pop	{r3, r4, r5, pc}
   11e06:	bf00      	nop
   11e08:	00029d1c 	.word	0x00029d1c
   11e0c:	1fff2e78 	.word	0x1fff2e78

00011e10 <tmc4361A_cover>:
{
   11e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   11e12:	4c33      	ldr	r4, [pc, #204]	; (11ee0 <tmc4361A_cover+0xd0>)
   11e14:	e9d4 32b2 	ldrd	r3, r2, [r4, #712]	; 0x2c8
   11e18:	0212      	lsls	r2, r2, #8
	coverOut |= data;  // add new byte to be written
   11e1a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	coverOut <<= 8;    // shift left by one byte to make room for the next byte
   11e1e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
	coverOut |= data;  // add new byte to be written
   11e22:	e9c4 02b2 	strd	r0, r2, [r4, #712]	; 0x2c8
	out = coverIn >> 56;  // output last received byte
   11e26:	e9d4 60b6 	ldrd	r6, r0, [r4, #728]	; 0x2d8
	coverLength++;     // count outgoing bytes
   11e2a:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
	out = coverIn >> 56;  // output last received byte
   11e2e:	0e05      	lsrs	r5, r0, #24
	coverLength++;     // count outgoing bytes
   11e30:	3301      	adds	r3, #1
	coverIn <<= 8;        // shift by one byte to read this next time
   11e32:	0200      	lsls	r0, r0, #8
   11e34:	ea40 6016 	orr.w	r0, r0, r6, lsr #24
	coverLength++;     // count outgoing bytes
   11e38:	b2db      	uxtb	r3, r3
	coverIn <<= 8;        // shift by one byte to read this next time
   11e3a:	0236      	lsls	r6, r6, #8
   11e3c:	e9c4 60b6 	strd	r6, r0, [r4, #728]	; 0x2d8
	coverLength++;     // count outgoing bytes
   11e40:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
	if(lastTransfer)
   11e44:	2900      	cmp	r1, #0
   11e46:	d049      	beq.n	11edc <tmc4361A_cover+0xcc>
		if(coverLength > 4)
   11e48:	2b04      	cmp	r3, #4
   11e4a:	d904      	bls.n	11e56 <tmc4361A_cover+0x46>
			tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_HIGH_WR, coverOut >> 32);
   11e4c:	216d      	movs	r1, #109	; 0x6d
   11e4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   11e52:	f010 f9fa 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   11e56:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
   11e5a:	4822      	ldr	r0, [pc, #136]	; (11ee4 <tmc4361A_cover+0xd4>)
   11e5c:	216c      	movs	r1, #108	; 0x6c
   11e5e:	f010 f9f4 	bl	2224a <tmc4361A_writeInt>
		wait(1);
   11e62:	2001      	movs	r0, #1
   11e64:	f00a fa6c 	bl	1c340 <wait>
		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
   11e68:	f8d4 22c8 	ldr.w	r2, [r4, #712]	; 0x2c8
   11e6c:	481d      	ldr	r0, [pc, #116]	; (11ee4 <tmc4361A_cover+0xd4>)
   11e6e:	216c      	movs	r1, #108	; 0x6c
   11e70:	f010 f9eb 	bl	2224a <tmc4361A_writeInt>
		coverIn = 0;
   11e74:	2300      	movs	r3, #0
   11e76:	2200      	movs	r2, #0
   11e78:	e9c4 23b6 	strd	r2, r3, [r4, #728]	; 0x2d8
		if(coverLength > 4)
   11e7c:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
   11e80:	2b04      	cmp	r3, #4
   11e82:	d908      	bls.n	11e96 <tmc4361A_cover+0x86>
			coverIn |= (uint64_t) tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_HIGH_RD) << 32;
   11e84:	4817      	ldr	r0, [pc, #92]	; (11ee4 <tmc4361A_cover+0xd4>)
   11e86:	216f      	movs	r1, #111	; 0x6f
   11e88:	f010 f9ed 	bl	22266 <tmc4361A_readInt>
   11e8c:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
   11e90:	4303      	orrs	r3, r0
   11e92:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
   11e96:	216e      	movs	r1, #110	; 0x6e
   11e98:	4812      	ldr	r0, [pc, #72]	; (11ee4 <tmc4361A_cover+0xd4>)
   11e9a:	f010 f9e4 	bl	22266 <tmc4361A_readInt>
   11e9e:	e9d4 23b6 	ldrd	r2, r3, [r4, #728]	; 0x2d8
   11ea2:	17c7      	asrs	r7, r0, #31
   11ea4:	4310      	orrs	r0, r2
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   11ea6:	f894 22d0 	ldrb.w	r2, [r4, #720]	; 0x2d0
   11eaa:	f1c2 0208 	rsb	r2, r2, #8
   11eae:	00d2      	lsls	r2, r2, #3
   11eb0:	f1a2 0620 	sub.w	r6, r2, #32
		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
   11eb4:	433b      	orrs	r3, r7
		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of the buffer uint64_t
   11eb6:	f1c2 0120 	rsb	r1, r2, #32
   11eba:	4093      	lsls	r3, r2
   11ebc:	fa00 f606 	lsl.w	r6, r0, r6
   11ec0:	fa20 f101 	lsr.w	r1, r0, r1
   11ec4:	4333      	orrs	r3, r6
   11ec6:	430b      	orrs	r3, r1
   11ec8:	4090      	lsls	r0, r2
   11eca:	e9c4 03b6 	strd	r0, r3, [r4, #728]	; 0x2d8
		coverOut = 0;
   11ece:	2200      	movs	r2, #0
   11ed0:	2300      	movs	r3, #0
   11ed2:	e9c4 23b2 	strd	r2, r3, [r4, #712]	; 0x2c8
		coverLength=0;
   11ed6:	2300      	movs	r3, #0
   11ed8:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
}
   11edc:	4628      	mov	r0, r5
   11ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ee0:	1fff2e78 	.word	0x1fff2e78
   11ee4:	1fff2e9c 	.word	0x1fff2e9c

00011ee8 <configCallback>:

static void configCallback(TMC4361ATypeDef *tmc4361A, ConfigState state)
{
   11ee8:	b570      	push	{r4, r5, r6, lr}
	uint8_t driver, dataLength;
	uint32_t value;

	// Setup SPI
	switch(Evalboards.ch2.id)
   11eea:	4d1a      	ldr	r5, [pc, #104]	; (11f54 <configCallback+0x6c>)
   11eec:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   11ef0:	2b01      	cmp	r3, #1
{
   11ef2:	4604      	mov	r4, r0
   11ef4:	460e      	mov	r6, r1
	switch(Evalboards.ch2.id)
   11ef6:	d025      	beq.n	11f44 <configCallback+0x5c>
	{
	case ID_TMC2130:
		driver = 0x0C;
		dataLength = 0;
   11ef8:	2b03      	cmp	r3, #3
   11efa:	bf15      	itete	ne
   11efc:	2328      	movne	r3, #40	; 0x28
   11efe:	2300      	moveq	r3, #0
   11f00:	220f      	movne	r2, #15
   11f02:	220c      	moveq	r2, #12
	default:
		driver = 0x0F;
		dataLength = 40;
		break;
	}
	value = 0x44400040 | (dataLength << 13) | (driver << 0);
   11f04:	ea42 3243 	orr.w	r2, r2, r3, lsl #13
	tmc4361A_writeInt(tmc4361A, TMC4361A_SPIOUT_CONF, value);
   11f08:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
   11f0c:	f042 1240 	orr.w	r2, r2, #4194368	; 0x400040
   11f10:	2104      	movs	r1, #4
   11f12:	4620      	mov	r0, r4
   11f14:	f010 f999 	bl	2224a <tmc4361A_writeInt>

	// Reset/Restore driver
	if(state == CONFIG_RESET)
   11f18:	2e01      	cmp	r6, #1
   11f1a:	d116      	bne.n	11f4a <configCallback+0x62>
	{
		tmc4361A_writeInt(tmc4361A, TMC4361A_CURRENT_CONF, 0x00000003);
   11f1c:	2203      	movs	r2, #3
   11f1e:	2105      	movs	r1, #5
   11f20:	4620      	mov	r0, r4
   11f22:	f010 f992 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_SCALE_VALUES, 0x00000000);
   11f26:	2200      	movs	r2, #0
   11f28:	2106      	movs	r1, #6
   11f2a:	4620      	mov	r0, r4
   11f2c:	f010 f98d 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_fillShadowRegisters(tmc4361A);
   11f30:	4620      	mov	r0, r4
   11f32:	f010 fa3f 	bl	223b4 <tmc4361A_fillShadowRegisters>
		Evalboards.ch2.config->reset();
   11f36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   11f3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	}
	else
		Evalboards.ch2.config->restore();
}
   11f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Evalboards.ch2.config->restore();
   11f42:	4718      	bx	r3
	switch(Evalboards.ch2.id)
   11f44:	2300      	movs	r3, #0
   11f46:	220b      	movs	r2, #11
   11f48:	e7dc      	b.n	11f04 <configCallback+0x1c>
		Evalboards.ch2.config->restore();
   11f4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   11f4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   11f52:	e7f4      	b.n	11f3e <configCallback+0x56>
   11f54:	1fff5e88 	.word	0x1fff5e88

00011f58 <rotate>:
   11f58:	b508      	push	{r3, lr}
   11f5a:	4802      	ldr	r0, [pc, #8]	; (11f64 <rotate+0xc>)
   11f5c:	f010 fa90 	bl	22480 <tmc4361A_rotate>
   11f60:	2000      	movs	r0, #0
   11f62:	bd08      	pop	{r3, pc}
   11f64:	1fff2e9c 	.word	0x1fff2e9c

00011f68 <tmc4361A_readWriteArray>:
	return TMC4361A_SPIChannel;
   11f68:	4b03      	ldr	r3, [pc, #12]	; (11f78 <tmc4361A_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   11f6a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
{
   11f6e:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   11f70:	68db      	ldr	r3, [r3, #12]
   11f72:	4611      	mov	r1, r2
   11f74:	4718      	bx	r3
   11f76:	bf00      	nop
   11f78:	1fff2e78 	.word	0x1fff2e78

00011f7c <TMC4361A_init>:

void TMC4361A_init(void)
{
   11f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc4361A_init(&TMC4361A, 0, Evalboards.ch1.config, &tmc4361A_defaultRegisterResetState[0]);
   11f7e:	4c4c      	ldr	r4, [pc, #304]	; (120b0 <TMC4361A_init+0x134>)
   11f80:	4d4c      	ldr	r5, [pc, #304]	; (120b4 <TMC4361A_init+0x138>)
   11f82:	4b4d      	ldr	r3, [pc, #308]	; (120b8 <TMC4361A_init+0x13c>)
   11f84:	69aa      	ldr	r2, [r5, #24]
	tmc4361A_setCallback(&TMC4361A, configCallback);

	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   11f86:	4f4d      	ldr	r7, [pc, #308]	; (120bc <TMC4361A_init+0x140>)
	tmc4361A_init(&TMC4361A, 0, Evalboards.ch1.config, &tmc4361A_defaultRegisterResetState[0]);
   11f88:	f104 0624 	add.w	r6, r4, #36	; 0x24
   11f8c:	4630      	mov	r0, r6
   11f8e:	2100      	movs	r1, #0
   11f90:	f010 f9f0 	bl	22374 <tmc4361A_init>
	tmc4361A_setCallback(&TMC4361A, configCallback);
   11f94:	494a      	ldr	r1, [pc, #296]	; (120c0 <TMC4361A_init+0x144>)
   11f96:	4630      	mov	r0, r6
   11f98:	f010 fa5b 	bl	22452 <tmc4361A_setCallback>
	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
   11f9c:	68fe      	ldr	r6, [r7, #12]
   11f9e:	6873      	ldr	r3, [r6, #4]
   11fa0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
   11fa4:	6222      	str	r2, [r4, #32]
	Pins.INTR            = &HAL.IOs->pins->DIO5;
   11fa6:	f503 7284 	add.w	r2, r3, #264	; 0x108
   11faa:	61e2      	str	r2, [r4, #28]
	Pins.STOP_L          = &HAL.IOs->pins->DIO12;
   11fac:	f503 7252 	add.w	r2, r3, #840	; 0x348
   11fb0:	61a2      	str	r2, [r4, #24]
	Pins.STOP_R          = &HAL.IOs->pins->DIO13;
   11fb2:	f503 725a 	add.w	r2, r3, #872	; 0x368
   11fb6:	6162      	str	r2, [r4, #20]
	Pins.HOME_REF        = &HAL.IOs->pins->DIO14;
   11fb8:	f503 7262 	add.w	r2, r3, #904	; 0x388
   11fbc:	6122      	str	r2, [r4, #16]
	Pins.START           = &HAL.IOs->pins->DIO15;
   11fbe:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   11fc2:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
	Pins.START           = &HAL.IOs->pins->DIO15;
   11fc6:	60e2      	str	r2, [r4, #12]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   11fc8:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
   11fcc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
   11fd0:	6023      	str	r3, [r4, #0]

	HAL.IOs->config->toOutput(Pins.NRST);
   11fd2:	6833      	ldr	r3, [r6, #0]
	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
   11fd4:	60a2      	str	r2, [r4, #8]
	HAL.IOs->config->toOutput(Pins.NRST);
   11fd6:	68db      	ldr	r3, [r3, #12]
	Pins.NRST            = &HAL.IOs->pins->DIO17;
   11fd8:	6060      	str	r0, [r4, #4]
	HAL.IOs->config->toOutput(Pins.NRST);
   11fda:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_L);
   11fdc:	6833      	ldr	r3, [r6, #0]
   11fde:	69a0      	ldr	r0, [r4, #24]
   11fe0:	68db      	ldr	r3, [r3, #12]
   11fe2:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.STOP_R);
   11fe4:	6833      	ldr	r3, [r6, #0]
   11fe6:	6960      	ldr	r0, [r4, #20]
   11fe8:	68db      	ldr	r3, [r3, #12]
   11fea:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.HOME_REF);
   11fec:	6833      	ldr	r3, [r6, #0]
   11fee:	6920      	ldr	r0, [r4, #16]
   11ff0:	68db      	ldr	r3, [r3, #12]
   11ff2:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.START);
   11ff4:	6833      	ldr	r3, [r6, #0]
   11ff6:	68e0      	ldr	r0, [r4, #12]
   11ff8:	68db      	ldr	r3, [r3, #12]
   11ffa:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.FREEZE);
   11ffc:	6833      	ldr	r3, [r6, #0]
   11ffe:	68a0      	ldr	r0, [r4, #8]
   12000:	68db      	ldr	r3, [r3, #12]
   12002:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.NRST);
   12004:	6833      	ldr	r3, [r6, #0]
   12006:	6860      	ldr	r0, [r4, #4]
   12008:	695b      	ldr	r3, [r3, #20]
   1200a:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.STOP_L);
   1200c:	6833      	ldr	r3, [r6, #0]
   1200e:	69a0      	ldr	r0, [r4, #24]
   12010:	695b      	ldr	r3, [r3, #20]
   12012:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.STOP_R);
   12014:	6833      	ldr	r3, [r6, #0]
   12016:	6960      	ldr	r0, [r4, #20]
   12018:	695b      	ldr	r3, [r3, #20]
   1201a:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.HOME_REF);
   1201c:	6833      	ldr	r3, [r6, #0]
   1201e:	6920      	ldr	r0, [r4, #16]
   12020:	695b      	ldr	r3, [r3, #20]
   12022:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.START);
   12024:	6833      	ldr	r3, [r6, #0]
   12026:	68e0      	ldr	r0, [r4, #12]
   12028:	695b      	ldr	r3, [r3, #20]
   1202a:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.FREEZE);
   1202c:	6833      	ldr	r3, [r6, #0]
   1202e:	68a0      	ldr	r0, [r4, #8]
   12030:	695b      	ldr	r3, [r3, #20]
   12032:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.STANDBY_CLK);
   12034:	6833      	ldr	r3, [r6, #0]
   12036:	6a20      	ldr	r0, [r4, #32]
   12038:	691b      	ldr	r3, [r3, #16]
   1203a:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INTR);
   1203c:	6833      	ldr	r3, [r6, #0]
   1203e:	69e0      	ldr	r0, [r4, #28]
   12040:	691b      	ldr	r3, [r3, #16]
   12042:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.TARGET_REACHED);
   12044:	6833      	ldr	r3, [r6, #0]
   12046:	6820      	ldr	r0, [r4, #0]
   12048:	691b      	ldr	r3, [r3, #16]
   1204a:	4798      	blx	r3

	TMC4361A_SPIChannel = &HAL.SPI->ch1;
	TMC4361A_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   1204c:	6873      	ldr	r3, [r6, #4]
	TMC4361A_SPIChannel = &HAL.SPI->ch1;
   1204e:	693a      	ldr	r2, [r7, #16]

	Evalboards.ch1.config->state        = CONFIG_RESET;
	Evalboards.ch1.config->configIndex  = 0;
	Evalboards.ch1.config->reset        = reset;
   12050:	491c      	ldr	r1, [pc, #112]	; (120c4 <TMC4361A_init+0x148>)
	TMC4361A_SPIChannel = &HAL.SPI->ch1;
   12052:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
	TMC4361A_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   12056:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   1205a:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->state        = CONFIG_RESET;
   1205c:	69ab      	ldr	r3, [r5, #24]
   1205e:	2201      	movs	r2, #1
	Evalboards.ch1.config->reset        = reset;
   12060:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   12064:	4918      	ldr	r1, [pc, #96]	; (120c8 <TMC4361A_init+0x14c>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
   12066:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->restore      = restore;
   12068:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208

	Evalboards.ch1.cover                = tmc4361A_cover;
   1206c:	4b17      	ldr	r3, [pc, #92]	; (120cc <TMC4361A_init+0x150>)
   1206e:	66ab      	str	r3, [r5, #104]	; 0x68
	Evalboards.ch1.rotate               = rotate;
   12070:	4b17      	ldr	r3, [pc, #92]	; (120d0 <TMC4361A_init+0x154>)
   12072:	626b      	str	r3, [r5, #36]	; 0x24
	Evalboards.ch1.right                = right;
   12074:	4b17      	ldr	r3, [pc, #92]	; (120d4 <TMC4361A_init+0x158>)
   12076:	622b      	str	r3, [r5, #32]
	Evalboards.ch1.left                 = left;
   12078:	4b17      	ldr	r3, [pc, #92]	; (120d8 <TMC4361A_init+0x15c>)
   1207a:	61eb      	str	r3, [r5, #28]
	Evalboards.ch1.stop                 = stop;
   1207c:	4b17      	ldr	r3, [pc, #92]	; (120dc <TMC4361A_init+0x160>)
   1207e:	62ab      	str	r3, [r5, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   12080:	4b17      	ldr	r3, [pc, #92]	; (120e0 <TMC4361A_init+0x164>)
   12082:	63eb      	str	r3, [r5, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   12084:	4b17      	ldr	r3, [pc, #92]	; (120e4 <TMC4361A_init+0x168>)
   12086:	63ab      	str	r3, [r5, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   12088:	4b17      	ldr	r3, [pc, #92]	; (120e8 <TMC4361A_init+0x16c>)
   1208a:	62eb      	str	r3, [r5, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   1208c:	4b17      	ldr	r3, [pc, #92]	; (120ec <TMC4361A_init+0x170>)
   1208e:	632b      	str	r3, [r5, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   12090:	4b17      	ldr	r3, [pc, #92]	; (120f0 <TMC4361A_init+0x174>)
   12092:	64eb      	str	r3, [r5, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   12094:	4b17      	ldr	r3, [pc, #92]	; (120f4 <TMC4361A_init+0x178>)
   12096:	64ab      	str	r3, [r5, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   12098:	4b17      	ldr	r3, [pc, #92]	; (120f8 <TMC4361A_init+0x17c>)
   1209a:	65ab      	str	r3, [r5, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   1209c:	4b17      	ldr	r3, [pc, #92]	; (120fc <TMC4361A_init+0x180>)
   1209e:	656b      	str	r3, [r5, #84]	; 0x54
	Evalboards.ch1.checkErrors          = checkErrors;
   120a0:	4b17      	ldr	r3, [pc, #92]	; (12100 <TMC4361A_init+0x184>)
   120a2:	662b      	str	r3, [r5, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC4361A_MOTORS;
	Evalboards.ch1.deInit               = deInit;
   120a4:	4b17      	ldr	r3, [pc, #92]	; (12104 <TMC4361A_init+0x188>)
   120a6:	65eb      	str	r3, [r5, #92]	; 0x5c

	// Provide the cover function to the driver channel
	Evalboards.ch1.fullCover            = tmc4361A_fullCover;
   120a8:	4b17      	ldr	r3, [pc, #92]	; (12108 <TMC4361A_init+0x18c>)
	Evalboards.ch1.numberOfMotors       = TMC4361A_MOTORS;
   120aa:	752a      	strb	r2, [r5, #20]
	Evalboards.ch1.fullCover            = tmc4361A_fullCover;
   120ac:	66eb      	str	r3, [r5, #108]	; 0x6c
};
   120ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120b0:	1fff2e78 	.word	0x1fff2e78
   120b4:	1fff5e88 	.word	0x1fff5e88
   120b8:	000290f8 	.word	0x000290f8
   120bc:	00029d1c 	.word	0x00029d1c
   120c0:	00011ee9 	.word	0x00011ee9
   120c4:	00011ddd 	.word	0x00011ddd
   120c8:	00011da9 	.word	0x00011da9
   120cc:	00011e11 	.word	0x00011e11
   120d0:	00011f59 	.word	0x00011f59
   120d4:	00011d99 	.word	0x00011d99
   120d8:	00011d85 	.word	0x00011d85
   120dc:	00011d71 	.word	0x00011d71
   120e0:	00011d69 	.word	0x00011d69
   120e4:	00011d55 	.word	0x00011d55
   120e8:	000115e5 	.word	0x000115e5
   120ec:	000115cd 	.word	0x000115cd
   120f0:	00011529 	.word	0x00011529
   120f4:	00011515 	.word	0x00011515
   120f8:	00011509 	.word	0x00011509
   120fc:	0001142d 	.word	0x0001142d
   12100:	000113a5 	.word	0x000113a5
   12104:	000113b1 	.word	0x000113b1
   12108:	0001141d 	.word	0x0001141d

0001210c <userFunction>:
{
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);
	return 0;
}
   1210c:	2000      	movs	r0, #0
   1210e:	4770      	bx	lr

00012110 <reset>:
};

static uint8_t reset()
{
	return 1;
}
   12110:	2001      	movs	r0, #1
   12112:	4770      	bx	lr

00012114 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   12114:	4b01      	ldr	r3, [pc, #4]	; (1211c <checkErrors+0x8>)
   12116:	2200      	movs	r2, #0
   12118:	609a      	str	r2, [r3, #8]
}
   1211a:	4770      	bx	lr
   1211c:	1fff5e88 	.word	0x1fff5e88

00012120 <periodicJob>:
{
   12120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		tmc4670_periodicJob(motor, actualSystick, motorConfig[motor].initMode,
   12122:	4b08      	ldr	r3, [pc, #32]	; (12144 <periodicJob+0x24>)
   12124:	f833 2c08 	ldrh.w	r2, [r3, #-8]
   12128:	9202      	str	r2, [sp, #8]
   1212a:	1e9a      	subs	r2, r3, #2
   1212c:	9201      	str	r2, [sp, #4]
   1212e:	f833 2c04 	ldrh.w	r2, [r3, #-4]
   12132:	9200      	str	r2, [sp, #0]
{
   12134:	4601      	mov	r1, r0
		tmc4670_periodicJob(motor, actualSystick, motorConfig[motor].initMode,
   12136:	785a      	ldrb	r2, [r3, #1]
   12138:	2000      	movs	r0, #0
   1213a:	f010 fd23 	bl	22b84 <tmc4670_periodicJob>
}
   1213e:	b005      	add	sp, #20
   12140:	f85d fb04 	ldr.w	pc, [sp], #4
   12144:	1fff6508 	.word	0x1fff6508

00012148 <readRegister>:
{
   12148:	b510      	push	{r4, lr}
	*value = tmc4670_readInt(DEFAULT_MOTOR, address);
   1214a:	2000      	movs	r0, #0
{
   1214c:	4614      	mov	r4, r2
	*value = tmc4670_readInt(DEFAULT_MOTOR, address);
   1214e:	f010 faeb 	bl	22728 <tmc4670_readInt>
   12152:	6020      	str	r0, [r4, #0]
}
   12154:	bd10      	pop	{r4, pc}

00012156 <writeRegister>:
	tmc4670_writeInt(DEFAULT_MOTOR, address, value);
   12156:	2000      	movs	r0, #0
   12158:	f010 bb08 	b.w	2276c <tmc4670_writeInt>

0001215c <moveTo>:
{
   1215c:	b510      	push	{r4, lr}
	if(motor >= TMC4670_MOTORS)
   1215e:	4604      	mov	r4, r0
   12160:	b918      	cbnz	r0, 1216a <moveTo+0xe>
	tmc4670_setAbsolutTargetPosition(motor, position);
   12162:	f010 fbff 	bl	22964 <tmc4670_setAbsolutTargetPosition>
	return TMC_ERROR_NONE;
   12166:	4620      	mov	r0, r4
}
   12168:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1216a:	2008      	movs	r0, #8
   1216c:	e7fc      	b.n	12168 <moveTo+0xc>

0001216e <rotate>:
{
   1216e:	b510      	push	{r4, lr}
	if(motor >= TMC4670_MOTORS)
   12170:	4604      	mov	r4, r0
   12172:	b918      	cbnz	r0, 1217c <rotate+0xe>
	tmc4670_setTargetVelocity(motor, velocity);
   12174:	f010 fbd8 	bl	22928 <tmc4670_setTargetVelocity>
	return TMC_ERROR_NONE;
   12178:	4620      	mov	r0, r4
}
   1217a:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1217c:	2008      	movs	r0, #8
   1217e:	e7fc      	b.n	1217a <rotate+0xc>

00012180 <stop>:
	return rotate(motor, 0);
   12180:	2100      	movs	r1, #0
   12182:	e7f4      	b.n	1216e <rotate>

00012184 <left>:
	return rotate(motor, -velocity);
   12184:	4249      	negs	r1, r1
   12186:	e7f2      	b.n	1216e <rotate>

00012188 <right>:
	return rotate(motor, velocity);
   12188:	e7f1      	b.n	1216e <rotate>

0001218a <handleParameter>:
{
   1218a:	b538      	push	{r3, r4, r5, lr}
   1218c:	4604      	mov	r4, r0
   1218e:	461d      	mov	r5, r3
	if(motor >= TMC4670_MOTORS)
   12190:	2900      	cmp	r1, #0
   12192:	f040 873c 	bne.w	1300e <handleParameter+0xe84>
	switch(type)
   12196:	3a04      	subs	r2, #4
   12198:	2afa      	cmp	r2, #250	; 0xfa
   1219a:	f200 873b 	bhi.w	13014 <handleParameter+0xe8a>
   1219e:	e8df f012 	tbh	[pc, r2, lsl #1]
   121a2:	00fb      	.short	0x00fb
   121a4:	07390739 	.word	0x07390739
   121a8:	07390739 	.word	0x07390739
   121ac:	07390739 	.word	0x07390739
   121b0:	07390739 	.word	0x07390739
   121b4:	07390739 	.word	0x07390739
   121b8:	07390739 	.word	0x07390739
   121bc:	07390739 	.word	0x07390739
   121c0:	07390739 	.word	0x07390739
   121c4:	07390739 	.word	0x07390739
   121c8:	07390739 	.word	0x07390739
   121cc:	07390739 	.word	0x07390739
   121d0:	07390739 	.word	0x07390739
   121d4:	07390739 	.word	0x07390739
   121d8:	07390739 	.word	0x07390739
   121dc:	07390739 	.word	0x07390739
   121e0:	07390739 	.word	0x07390739
   121e4:	07390739 	.word	0x07390739
   121e8:	07390739 	.word	0x07390739
   121ec:	07390739 	.word	0x07390739
   121f0:	07390739 	.word	0x07390739
   121f4:	07390739 	.word	0x07390739
   121f8:	07390739 	.word	0x07390739
   121fc:	01090739 	.word	0x01090739
   12200:	07390119 	.word	0x07390119
   12204:	01390129 	.word	0x01390129
   12208:	07390739 	.word	0x07390739
   1220c:	07390739 	.word	0x07390739
   12210:	07390739 	.word	0x07390739
   12214:	07390739 	.word	0x07390739
   12218:	07390739 	.word	0x07390739
   1221c:	07390739 	.word	0x07390739
   12220:	07390739 	.word	0x07390739
   12224:	07390739 	.word	0x07390739
   12228:	07390739 	.word	0x07390739
   1222c:	07390739 	.word	0x07390739
   12230:	07390739 	.word	0x07390739
   12234:	07390739 	.word	0x07390739
   12238:	07390739 	.word	0x07390739
   1223c:	07390739 	.word	0x07390739
   12240:	07390739 	.word	0x07390739
   12244:	07390739 	.word	0x07390739
   12248:	07390739 	.word	0x07390739
   1224c:	07390739 	.word	0x07390739
   12250:	07390739 	.word	0x07390739
   12254:	07390739 	.word	0x07390739
   12258:	07390739 	.word	0x07390739
   1225c:	07390739 	.word	0x07390739
   12260:	01490739 	.word	0x01490739
   12264:	01650157 	.word	0x01650157
   12268:	01810173 	.word	0x01810173
   1226c:	019d018f 	.word	0x019d018f
   12270:	01b901ab 	.word	0x01b901ab
   12274:	01d501c7 	.word	0x01d501c7
   12278:	01f101e3 	.word	0x01f101e3
   1227c:	020d01ff 	.word	0x020d01ff
   12280:	0229021b 	.word	0x0229021b
   12284:	023d0233 	.word	0x023d0233
   12288:	02470739 	.word	0x02470739
   1228c:	025b0251 	.word	0x025b0251
   12290:	026f0265 	.word	0x026f0265
   12294:	028d027e 	.word	0x028d027e
   12298:	02a5029c 	.word	0x02a5029c
   1229c:	07390739 	.word	0x07390739
   122a0:	02ae0739 	.word	0x02ae0739
   122a4:	02be02b6 	.word	0x02be02b6
   122a8:	02d202c8 	.word	0x02d202c8
   122ac:	07390739 	.word	0x07390739
   122b0:	02da0739 	.word	0x02da0739
   122b4:	02ea02e2 	.word	0x02ea02e2
   122b8:	07390739 	.word	0x07390739
   122bc:	07390739 	.word	0x07390739
   122c0:	07390739 	.word	0x07390739
   122c4:	02f40739 	.word	0x02f40739
   122c8:	030802fe 	.word	0x030802fe
   122cc:	07390312 	.word	0x07390312
   122d0:	07390739 	.word	0x07390739
   122d4:	07390739 	.word	0x07390739
   122d8:	031c0739 	.word	0x031c0739
   122dc:	03300326 	.word	0x03300326
   122e0:	0344033a 	.word	0x0344033a
   122e4:	07390739 	.word	0x07390739
   122e8:	07390739 	.word	0x07390739
   122ec:	034e0739 	.word	0x034e0739
   122f0:	03680358 	.word	0x03680358
   122f4:	03800378 	.word	0x03800378
   122f8:	0396038c 	.word	0x0396038c
   122fc:	03a9039f 	.word	0x03a9039f
   12300:	03bb03b0 	.word	0x03bb03b0
   12304:	03d503c8 	.word	0x03d503c8
   12308:	03ef03e2 	.word	0x03ef03e2
   1230c:	040903fc 	.word	0x040903fc
   12310:	07390416 	.word	0x07390416
   12314:	042e0423 	.word	0x042e0423
   12318:	0448043b 	.word	0x0448043b
   1231c:	04600453 	.word	0x04600453
   12320:	047a046d 	.word	0x047a046d
   12324:	04940487 	.word	0x04940487
   12328:	04b204a3 	.word	0x04b204a3
   1232c:	04d004c1 	.word	0x04d004c1
   12330:	04ee04df 	.word	0x04ee04df
   12334:	050d04fd 	.word	0x050d04fd
   12338:	052f051f 	.word	0x052f051f
   1233c:	054f053f 	.word	0x054f053f
   12340:	056f055f 	.word	0x056f055f
   12344:	058f057f 	.word	0x058f057f
   12348:	05af059f 	.word	0x05af059f
   1234c:	05ce05bf 	.word	0x05ce05bf
   12350:	07390739 	.word	0x07390739
   12354:	07390739 	.word	0x07390739
   12358:	07390739 	.word	0x07390739
   1235c:	07390739 	.word	0x07390739
   12360:	07390739 	.word	0x07390739
   12364:	05dd0739 	.word	0x05dd0739
   12368:	05fd05ed 	.word	0x05fd05ed
   1236c:	061d060d 	.word	0x061d060d
   12370:	063d062d 	.word	0x063d062d
   12374:	065d064d 	.word	0x065d064d
   12378:	067b066c 	.word	0x067b066c
   1237c:	0699068a 	.word	0x0699068a
   12380:	06b706a8 	.word	0x06b706a8
   12384:	06d506c6 	.word	0x06d506c6
   12388:	06f106e3 	.word	0x06f106e3
   1238c:	073906ff 	.word	0x073906ff
   12390:	0718070d 	.word	0x0718070d
   12394:	072e0726 	.word	0x072e0726
		if(readWrite == READ)
   12398:	b928      	cbnz	r0, 123a6 <handleParameter+0x21c>
			*value = (uint32_t)tmc4670_readInt(motor, TMC4670_PID_VELOCITY_LIMIT);
   1239a:	2160      	movs	r1, #96	; 0x60
   1239c:	f010 f9c4 	bl	22728 <tmc4670_readInt>
   123a0:	6028      	str	r0, [r5, #0]
}
   123a2:	4620      	mov	r0, r4
   123a4:	bd38      	pop	{r3, r4, r5, pc}
			tmc4670_writeInt(motor, TMC4670_PID_VELOCITY_LIMIT, *value);
   123a6:	682a      	ldr	r2, [r5, #0]
   123a8:	2160      	movs	r1, #96	; 0x60
   123aa:	2000      	movs	r0, #0
   123ac:	f010 f9de 	bl	2276c <tmc4670_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   123b0:	2400      	movs	r4, #0
   123b2:	e7f6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   123b4:	b930      	cbnz	r0, 123c4 <handleParameter+0x23a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I1_SCALE_OFFSET, BIT_0_TO_15);
   123b6:	4602      	mov	r2, r0
   123b8:	2108      	movs	r1, #8
   123ba:	f010 f9f7 	bl	227ac <tmc4670_readRegister16BitValue>
   123be:	b200      	sxth	r0, r0
   123c0:	6028      	str	r0, [r5, #0]
   123c2:	e7ee      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_ADC_I1_SCALE_OFFSET, BIT_0_TO_15, *value);
   123c4:	2200      	movs	r2, #0
   123c6:	882b      	ldrh	r3, [r5, #0]
   123c8:	2108      	movs	r1, #8
   123ca:	4610      	mov	r0, r2
   123cc:	f010 f9fb 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   123d0:	2400      	movs	r4, #0
   123d2:	e7e6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   123d4:	b930      	cbnz	r0, 123e4 <handleParameter+0x25a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I0_SCALE_OFFSET, BIT_0_TO_15);
   123d6:	4602      	mov	r2, r0
   123d8:	2109      	movs	r1, #9
   123da:	f010 f9e7 	bl	227ac <tmc4670_readRegister16BitValue>
   123de:	b200      	sxth	r0, r0
   123e0:	6028      	str	r0, [r5, #0]
   123e2:	e7de      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_ADC_I0_SCALE_OFFSET, BIT_0_TO_15, *value);
   123e4:	2200      	movs	r2, #0
   123e6:	882b      	ldrh	r3, [r5, #0]
   123e8:	2109      	movs	r1, #9
   123ea:	4610      	mov	r0, r2
   123ec:	f010 f9eb 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   123f0:	2400      	movs	r4, #0
   123f2:	e7d6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   123f4:	b930      	cbnz	r0, 12404 <handleParameter+0x27a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I1_SCALE_OFFSET, BIT_16_TO_31);
   123f6:	2201      	movs	r2, #1
   123f8:	2108      	movs	r1, #8
   123fa:	f010 f9d7 	bl	227ac <tmc4670_readRegister16BitValue>
   123fe:	b200      	sxth	r0, r0
   12400:	6028      	str	r0, [r5, #0]
   12402:	e7ce      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_ADC_I1_SCALE_OFFSET, BIT_16_TO_31, *value);
   12404:	882b      	ldrh	r3, [r5, #0]
   12406:	2201      	movs	r2, #1
   12408:	2108      	movs	r1, #8
   1240a:	2000      	movs	r0, #0
   1240c:	f010 f9db 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   12410:	2400      	movs	r4, #0
   12412:	e7c6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   12414:	b930      	cbnz	r0, 12424 <handleParameter+0x29a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I0_SCALE_OFFSET, BIT_16_TO_31);
   12416:	2201      	movs	r2, #1
   12418:	2109      	movs	r1, #9
   1241a:	f010 f9c7 	bl	227ac <tmc4670_readRegister16BitValue>
   1241e:	b200      	sxth	r0, r0
   12420:	6028      	str	r0, [r5, #0]
   12422:	e7be      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_ADC_I0_SCALE_OFFSET, BIT_16_TO_31, *value);
   12424:	882b      	ldrh	r3, [r5, #0]
   12426:	2201      	movs	r2, #1
   12428:	2109      	movs	r1, #9
   1242a:	2000      	movs	r0, #0
   1242c:	f010 f9cb 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   12430:	2400      	movs	r4, #0
   12432:	e7b6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12434:	2800      	cmp	r0, #0
   12436:	f040 85f0 	bne.w	1301a <handleParameter+0xe90>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 1);
   1243a:	2201      	movs	r2, #1
   1243c:	2103      	movs	r1, #3
   1243e:	f010 f995 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   12442:	4622      	mov	r2, r4
   12444:	2102      	movs	r1, #2
   12446:	4620      	mov	r0, r4
   12448:	f010 f9b0 	bl	227ac <tmc4670_readRegister16BitValue>
   1244c:	6028      	str	r0, [r5, #0]
   1244e:	e7a8      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12450:	2800      	cmp	r0, #0
   12452:	f040 85e5 	bne.w	13020 <handleParameter+0xe96>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 1);
   12456:	2201      	movs	r2, #1
   12458:	2103      	movs	r1, #3
   1245a:	f010 f987 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   1245e:	2201      	movs	r2, #1
   12460:	2102      	movs	r1, #2
   12462:	4620      	mov	r0, r4
   12464:	f010 f9a2 	bl	227ac <tmc4670_readRegister16BitValue>
   12468:	6028      	str	r0, [r5, #0]
   1246a:	e79a      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1246c:	2800      	cmp	r0, #0
   1246e:	f040 85da 	bne.w	13026 <handleParameter+0xe9c>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 2);
   12472:	2202      	movs	r2, #2
   12474:	2103      	movs	r1, #3
   12476:	f010 f979 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   1247a:	4622      	mov	r2, r4
   1247c:	2102      	movs	r1, #2
   1247e:	4620      	mov	r0, r4
   12480:	f010 f994 	bl	227ac <tmc4670_readRegister16BitValue>
   12484:	6028      	str	r0, [r5, #0]
   12486:	e78c      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12488:	2800      	cmp	r0, #0
   1248a:	f040 85cf 	bne.w	1302c <handleParameter+0xea2>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 0);
   1248e:	4602      	mov	r2, r0
   12490:	2103      	movs	r1, #3
   12492:	f010 f96b 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   12496:	4622      	mov	r2, r4
   12498:	2102      	movs	r1, #2
   1249a:	4620      	mov	r0, r4
   1249c:	f010 f986 	bl	227ac <tmc4670_readRegister16BitValue>
   124a0:	6028      	str	r0, [r5, #0]
   124a2:	e77e      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   124a4:	2800      	cmp	r0, #0
   124a6:	f040 85c4 	bne.w	13032 <handleParameter+0xea8>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 0);
   124aa:	4602      	mov	r2, r0
   124ac:	2103      	movs	r1, #3
   124ae:	f010 f95d 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   124b2:	2201      	movs	r2, #1
   124b4:	2102      	movs	r1, #2
   124b6:	4620      	mov	r0, r4
   124b8:	f010 f978 	bl	227ac <tmc4670_readRegister16BitValue>
   124bc:	6028      	str	r0, [r5, #0]
   124be:	e770      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   124c0:	2800      	cmp	r0, #0
   124c2:	f040 85b9 	bne.w	13038 <handleParameter+0xeae>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 3);
   124c6:	2203      	movs	r2, #3
   124c8:	4611      	mov	r1, r2
   124ca:	f010 f94f 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   124ce:	4622      	mov	r2, r4
   124d0:	2102      	movs	r1, #2
   124d2:	4620      	mov	r0, r4
   124d4:	f010 f96a 	bl	227ac <tmc4670_readRegister16BitValue>
   124d8:	6028      	str	r0, [r5, #0]
   124da:	e762      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   124dc:	2800      	cmp	r0, #0
   124de:	f040 85ae 	bne.w	1303e <handleParameter+0xeb4>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 4);
   124e2:	2204      	movs	r2, #4
   124e4:	2103      	movs	r1, #3
   124e6:	f010 f941 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   124ea:	4622      	mov	r2, r4
   124ec:	2102      	movs	r1, #2
   124ee:	4620      	mov	r0, r4
   124f0:	f010 f95c 	bl	227ac <tmc4670_readRegister16BitValue>
   124f4:	6028      	str	r0, [r5, #0]
   124f6:	e754      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   124f8:	2800      	cmp	r0, #0
   124fa:	f040 85a3 	bne.w	13044 <handleParameter+0xeba>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 4);
   124fe:	2204      	movs	r2, #4
   12500:	2103      	movs	r1, #3
   12502:	f010 f933 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   12506:	2201      	movs	r2, #1
   12508:	2102      	movs	r1, #2
   1250a:	4620      	mov	r0, r4
   1250c:	f010 f94e 	bl	227ac <tmc4670_readRegister16BitValue>
   12510:	6028      	str	r0, [r5, #0]
   12512:	e746      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12514:	2800      	cmp	r0, #0
   12516:	f040 8598 	bne.w	1304a <handleParameter+0xec0>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 5);
   1251a:	2205      	movs	r2, #5
   1251c:	2103      	movs	r1, #3
   1251e:	f010 f925 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   12522:	4622      	mov	r2, r4
   12524:	2102      	movs	r1, #2
   12526:	4620      	mov	r0, r4
   12528:	f010 f940 	bl	227ac <tmc4670_readRegister16BitValue>
   1252c:	6028      	str	r0, [r5, #0]
   1252e:	e738      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12530:	2800      	cmp	r0, #0
   12532:	f040 858d 	bne.w	13050 <handleParameter+0xec6>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 5);
   12536:	2205      	movs	r2, #5
   12538:	2103      	movs	r1, #3
   1253a:	f010 f917 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   1253e:	2201      	movs	r2, #1
   12540:	2102      	movs	r1, #2
   12542:	4620      	mov	r0, r4
   12544:	f010 f932 	bl	227ac <tmc4670_readRegister16BitValue>
   12548:	6028      	str	r0, [r5, #0]
   1254a:	e72a      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1254c:	2800      	cmp	r0, #0
   1254e:	f040 8582 	bne.w	13056 <handleParameter+0xecc>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 6);
   12552:	2206      	movs	r2, #6
   12554:	2103      	movs	r1, #3
   12556:	f010 f909 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   1255a:	4622      	mov	r2, r4
   1255c:	2102      	movs	r1, #2
   1255e:	4620      	mov	r0, r4
   12560:	f010 f924 	bl	227ac <tmc4670_readRegister16BitValue>
   12564:	6028      	str	r0, [r5, #0]
   12566:	e71c      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12568:	2800      	cmp	r0, #0
   1256a:	f040 8577 	bne.w	1305c <handleParameter+0xed2>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 7);
   1256e:	2207      	movs	r2, #7
   12570:	2103      	movs	r1, #3
   12572:	f010 f8fb 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   12576:	4622      	mov	r2, r4
   12578:	2102      	movs	r1, #2
   1257a:	4620      	mov	r0, r4
   1257c:	f010 f916 	bl	227ac <tmc4670_readRegister16BitValue>
   12580:	6028      	str	r0, [r5, #0]
   12582:	e70e      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12584:	2800      	cmp	r0, #0
   12586:	f040 856c 	bne.w	13062 <handleParameter+0xed8>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 7);
   1258a:	2207      	movs	r2, #7
   1258c:	2103      	movs	r1, #3
   1258e:	f010 f8ed 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   12592:	2201      	movs	r2, #1
   12594:	2102      	movs	r1, #2
   12596:	4620      	mov	r0, r4
   12598:	f010 f908 	bl	227ac <tmc4670_readRegister16BitValue>
   1259c:	6028      	str	r0, [r5, #0]
   1259e:	e700      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   125a0:	2800      	cmp	r0, #0
   125a2:	f040 8561 	bne.w	13068 <handleParameter+0xede>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 8);
   125a6:	2208      	movs	r2, #8
   125a8:	2103      	movs	r1, #3
   125aa:	f010 f8df 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   125ae:	4622      	mov	r2, r4
   125b0:	2102      	movs	r1, #2
   125b2:	4620      	mov	r0, r4
   125b4:	f010 f8fa 	bl	227ac <tmc4670_readRegister16BitValue>
   125b8:	6028      	str	r0, [r5, #0]
   125ba:	e6f2      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   125bc:	2800      	cmp	r0, #0
   125be:	f040 8556 	bne.w	1306e <handleParameter+0xee4>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 8);
   125c2:	2208      	movs	r2, #8
   125c4:	2103      	movs	r1, #3
   125c6:	f010 f8d1 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   125ca:	2201      	movs	r2, #1
   125cc:	2102      	movs	r1, #2
   125ce:	4620      	mov	r0, r4
   125d0:	f010 f8ec 	bl	227ac <tmc4670_readRegister16BitValue>
   125d4:	6028      	str	r0, [r5, #0]
   125d6:	e6e4      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   125d8:	2800      	cmp	r0, #0
   125da:	f040 854b 	bne.w	13074 <handleParameter+0xeea>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 9);
   125de:	2209      	movs	r2, #9
   125e0:	2103      	movs	r1, #3
   125e2:	f010 f8c3 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   125e6:	4622      	mov	r2, r4
   125e8:	2102      	movs	r1, #2
   125ea:	4620      	mov	r0, r4
   125ec:	f010 f8de 	bl	227ac <tmc4670_readRegister16BitValue>
   125f0:	6028      	str	r0, [r5, #0]
   125f2:	e6d6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   125f4:	2800      	cmp	r0, #0
   125f6:	f040 8540 	bne.w	1307a <handleParameter+0xef0>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_IWY_IUX, BIT_0_TO_15);
   125fa:	4602      	mov	r2, r0
   125fc:	2112      	movs	r1, #18
   125fe:	f010 f8d5 	bl	227ac <tmc4670_readRegister16BitValue>
   12602:	b200      	sxth	r0, r0
   12604:	6028      	str	r0, [r5, #0]
   12606:	e6cc      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12608:	2800      	cmp	r0, #0
   1260a:	f040 8539 	bne.w	13080 <handleParameter+0xef6>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_IWY_IUX, BIT_16_TO_31);
   1260e:	2201      	movs	r2, #1
   12610:	2112      	movs	r1, #18
   12612:	f010 f8cb 	bl	227ac <tmc4670_readRegister16BitValue>
   12616:	b200      	sxth	r0, r0
   12618:	6028      	str	r0, [r5, #0]
   1261a:	e6c2      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1261c:	2800      	cmp	r0, #0
   1261e:	f040 8532 	bne.w	13086 <handleParameter+0xefc>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_IV, BIT_0_TO_15);
   12622:	4602      	mov	r2, r0
   12624:	2113      	movs	r1, #19
   12626:	f010 f8c1 	bl	227ac <tmc4670_readRegister16BitValue>
   1262a:	b200      	sxth	r0, r0
   1262c:	6028      	str	r0, [r5, #0]
   1262e:	e6b8      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12630:	2800      	cmp	r0, #0
   12632:	f040 852b 	bne.w	1308c <handleParameter+0xf02>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_WY_UX, BIT_0_TO_15);
   12636:	4602      	mov	r2, r0
   12638:	2115      	movs	r1, #21
   1263a:	f010 f8b7 	bl	227ac <tmc4670_readRegister16BitValue>
   1263e:	b200      	sxth	r0, r0
   12640:	6028      	str	r0, [r5, #0]
   12642:	e6ae      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12644:	2800      	cmp	r0, #0
   12646:	f040 8524 	bne.w	13092 <handleParameter+0xf08>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_WY_UX, BIT_16_TO_31);
   1264a:	2201      	movs	r2, #1
   1264c:	2115      	movs	r1, #21
   1264e:	f010 f8ad 	bl	227ac <tmc4670_readRegister16BitValue>
   12652:	b200      	sxth	r0, r0
   12654:	6028      	str	r0, [r5, #0]
   12656:	e6a4      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12658:	2800      	cmp	r0, #0
   1265a:	f040 851d 	bne.w	13098 <handleParameter+0xf0e>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_N_VN, BIT_0_TO_15);
   1265e:	4602      	mov	r2, r0
   12660:	2116      	movs	r1, #22
   12662:	f010 f8a3 	bl	227ac <tmc4670_readRegister16BitValue>
   12666:	b200      	sxth	r0, r0
   12668:	6028      	str	r0, [r5, #0]
   1266a:	e69a      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1266c:	2800      	cmp	r0, #0
   1266e:	f040 8516 	bne.w	1309e <handleParameter+0xf14>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_N_VN, BIT_16_TO_31);
   12672:	2201      	movs	r2, #1
   12674:	2116      	movs	r1, #22
   12676:	f010 f899 	bl	227ac <tmc4670_readRegister16BitValue>
   1267a:	b200      	sxth	r0, r0
   1267c:	6028      	str	r0, [r5, #0]
   1267e:	e690      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12680:	2800      	cmp	r0, #0
   12682:	f040 850f 	bne.w	130a4 <handleParameter+0xf1a>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 10);
   12686:	220a      	movs	r2, #10
   12688:	2103      	movs	r1, #3
   1268a:	f010 f86f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   1268e:	4622      	mov	r2, r4
   12690:	2102      	movs	r1, #2
   12692:	4620      	mov	r0, r4
   12694:	f010 f88a 	bl	227ac <tmc4670_readRegister16BitValue>
   12698:	b200      	sxth	r0, r0
   1269a:	6028      	str	r0, [r5, #0]
   1269c:	e681      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1269e:	2800      	cmp	r0, #0
   126a0:	f040 8503 	bne.w	130aa <handleParameter+0xf20>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 10);
   126a4:	220a      	movs	r2, #10
   126a6:	2103      	movs	r1, #3
   126a8:	f010 f860 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_16_TO_31);
   126ac:	2201      	movs	r2, #1
   126ae:	2102      	movs	r1, #2
   126b0:	4620      	mov	r0, r4
   126b2:	f010 f87b 	bl	227ac <tmc4670_readRegister16BitValue>
   126b6:	b200      	sxth	r0, r0
   126b8:	6028      	str	r0, [r5, #0]
   126ba:	e672      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   126bc:	2800      	cmp	r0, #0
   126be:	f040 84f7 	bne.w	130b0 <handleParameter+0xf26>
			tmc4670_writeInt(motor, TMC4670_ADC_RAW_ADDR, 11);
   126c2:	220b      	movs	r2, #11
   126c4:	2103      	movs	r1, #3
   126c6:	f010 f851 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_RAW_DATA, BIT_0_TO_15);
   126ca:	4622      	mov	r2, r4
   126cc:	2102      	movs	r1, #2
   126ce:	4620      	mov	r0, r4
   126d0:	f010 f86c 	bl	227ac <tmc4670_readRegister16BitValue>
   126d4:	b200      	sxth	r0, r0
   126d6:	6028      	str	r0, [r5, #0]
   126d8:	e663      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   126da:	2800      	cmp	r0, #0
   126dc:	f040 84eb 	bne.w	130b6 <handleParameter+0xf2c>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I1_I0_EXT, BIT_0_TO_15);
   126e0:	4602      	mov	r2, r0
   126e2:	2106      	movs	r1, #6
   126e4:	f010 f862 	bl	227ac <tmc4670_readRegister16BitValue>
   126e8:	6028      	str	r0, [r5, #0]
   126ea:	e65a      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   126ec:	2800      	cmp	r0, #0
   126ee:	f040 84e5 	bne.w	130bc <handleParameter+0xf32>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ADC_I1_I0_EXT, BIT_16_TO_31);
   126f2:	2201      	movs	r2, #1
   126f4:	2106      	movs	r1, #6
   126f6:	f010 f859 	bl	227ac <tmc4670_readRegister16BitValue>
   126fa:	6028      	str	r0, [r5, #0]
   126fc:	e651      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   126fe:	2800      	cmp	r0, #0
   12700:	f040 84df 	bne.w	130c2 <handleParameter+0xf38>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_AENC_DECODER_COUNT);
   12704:	2141      	movs	r1, #65	; 0x41
   12706:	f010 f80f 	bl	22728 <tmc4670_readInt>
   1270a:	6028      	str	r0, [r5, #0]
   1270c:	e649      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1270e:	2800      	cmp	r0, #0
   12710:	f040 84da 	bne.w	130c8 <handleParameter+0xf3e>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_AENC_DECODER_COUNT_N);
   12714:	2142      	movs	r1, #66	; 0x42
   12716:	f010 f807 	bl	22728 <tmc4670_readInt>
   1271a:	6028      	str	r0, [r5, #0]
   1271c:	e641      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1271e:	2800      	cmp	r0, #0
   12720:	f040 84d5 	bne.w	130ce <handleParameter+0xf44>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_DECODER_PHI_E_PHI_M, BIT_16_TO_31);
   12724:	2201      	movs	r2, #1
   12726:	2146      	movs	r1, #70	; 0x46
   12728:	f010 f840 	bl	227ac <tmc4670_readRegister16BitValue>
   1272c:	b200      	sxth	r0, r0
   1272e:	6028      	str	r0, [r5, #0]
   12730:	e637      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12732:	2800      	cmp	r0, #0
   12734:	f040 84ce 	bne.w	130d4 <handleParameter+0xf4a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_DECODER_PHI_E_PHI_M, BIT_0_TO_15);
   12738:	4602      	mov	r2, r0
   1273a:	2146      	movs	r1, #70	; 0x46
   1273c:	f010 f836 	bl	227ac <tmc4670_readRegister16BitValue>
   12740:	b200      	sxth	r0, r0
   12742:	6028      	str	r0, [r5, #0]
   12744:	e62d      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12746:	2800      	cmp	r0, #0
   12748:	f040 84c7 	bne.w	130da <handleParameter+0xf50>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_AENC_DECODER_POSITION);
   1274c:	2147      	movs	r1, #71	; 0x47
   1274e:	f00f ffeb 	bl	22728 <tmc4670_readInt>
   12752:	6028      	str	r0, [r5, #0]
   12754:	e625      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12756:	2800      	cmp	r0, #0
   12758:	f040 84c2 	bne.w	130e0 <handleParameter+0xf56>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_OPENLOOP_VELOCITY_TARGET);
   1275c:	2121      	movs	r1, #33	; 0x21
   1275e:	f00f ffe3 	bl	22728 <tmc4670_readInt>
   12762:	6028      	str	r0, [r5, #0]
   12764:	e61d      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12766:	2800      	cmp	r0, #0
   12768:	f040 84bd 	bne.w	130e6 <handleParameter+0xf5c>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_OPENLOOP_VELOCITY_ACTUAL);
   1276c:	2122      	movs	r1, #34	; 0x22
   1276e:	f00f ffdb 	bl	22728 <tmc4670_readInt>
   12772:	6028      	str	r0, [r5, #0]
   12774:	e615      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12776:	2800      	cmp	r0, #0
   12778:	f040 84b8 	bne.w	130ec <handleParameter+0xf62>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_OPENLOOP_PHI, BIT_0_TO_15);
   1277c:	4602      	mov	r2, r0
   1277e:	2123      	movs	r1, #35	; 0x23
   12780:	f010 f814 	bl	227ac <tmc4670_readRegister16BitValue>
   12784:	b200      	sxth	r0, r0
   12786:	6028      	str	r0, [r5, #0]
   12788:	e60b      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1278a:	2800      	cmp	r0, #0
   1278c:	f040 84b1 	bne.w	130f2 <handleParameter+0xf68>
			*value = tmc4670_readInt(motor, TMC4670_ABN_DECODER_COUNT) & 0x00FFFFFF;
   12790:	2127      	movs	r1, #39	; 0x27
   12792:	f00f ffc9 	bl	22728 <tmc4670_readInt>
   12796:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1279a:	6028      	str	r0, [r5, #0]
   1279c:	e601      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1279e:	2800      	cmp	r0, #0
   127a0:	f040 84aa 	bne.w	130f8 <handleParameter+0xf6e>
			*value = tmc4670_readInt(motor, TMC4670_ABN_DECODER_COUNT_N) & 0x00FFFFFF;
   127a4:	2128      	movs	r1, #40	; 0x28
   127a6:	f00f ffbf 	bl	22728 <tmc4670_readInt>
   127aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   127ae:	6028      	str	r0, [r5, #0]
   127b0:	e5f7      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   127b2:	2800      	cmp	r0, #0
   127b4:	f040 84a3 	bne.w	130fe <handleParameter+0xf74>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M, BIT_16_TO_31);
   127b8:	2201      	movs	r2, #1
   127ba:	212a      	movs	r1, #42	; 0x2a
   127bc:	f00f fff6 	bl	227ac <tmc4670_readRegister16BitValue>
   127c0:	b200      	sxth	r0, r0
   127c2:	6028      	str	r0, [r5, #0]
   127c4:	e5ed      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   127c6:	2800      	cmp	r0, #0
   127c8:	f040 849c 	bne.w	13104 <handleParameter+0xf7a>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M, BIT_0_TO_15);
   127cc:	4602      	mov	r2, r0
   127ce:	212a      	movs	r1, #42	; 0x2a
   127d0:	f00f ffec 	bl	227ac <tmc4670_readRegister16BitValue>
   127d4:	b200      	sxth	r0, r0
   127d6:	6028      	str	r0, [r5, #0]
   127d8:	e5e3      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   127da:	2800      	cmp	r0, #0
   127dc:	f040 8495 	bne.w	1310a <handleParameter+0xf80>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_0_TO_15);
   127e0:	4602      	mov	r2, r0
   127e2:	2139      	movs	r1, #57	; 0x39
   127e4:	f00f ffe2 	bl	227ac <tmc4670_readRegister16BitValue>
   127e8:	b200      	sxth	r0, r0
   127ea:	6028      	str	r0, [r5, #0]
   127ec:	e5d9      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   127ee:	2800      	cmp	r0, #0
   127f0:	f040 848e 	bne.w	13110 <handleParameter+0xf86>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_16_TO_31);
   127f4:	2201      	movs	r2, #1
   127f6:	2139      	movs	r1, #57	; 0x39
   127f8:	f00f ffd8 	bl	227ac <tmc4670_readRegister16BitValue>
   127fc:	b200      	sxth	r0, r0
   127fe:	6028      	str	r0, [r5, #0]
   12800:	e5cf      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12802:	2800      	cmp	r0, #0
   12804:	f040 8487 	bne.w	13116 <handleParameter+0xf8c>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_DECODER_PHI_A_RAW, BIT_0_TO_15);
   12808:	4602      	mov	r2, r0
   1280a:	213d      	movs	r1, #61	; 0x3d
   1280c:	f00f ffce 	bl	227ac <tmc4670_readRegister16BitValue>
   12810:	b200      	sxth	r0, r0
   12812:	6028      	str	r0, [r5, #0]
   12814:	e5c5      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12816:	2800      	cmp	r0, #0
   12818:	f040 8480 	bne.w	1311c <handleParameter+0xf92>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_AENC_DECODER_PHI_A, BIT_0_TO_15);
   1281c:	4602      	mov	r2, r0
   1281e:	213f      	movs	r1, #63	; 0x3f
   12820:	f00f ffc4 	bl	227ac <tmc4670_readRegister16BitValue>
   12824:	b200      	sxth	r0, r0
   12826:	6028      	str	r0, [r5, #0]
   12828:	e5bb      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1282a:	2800      	cmp	r0, #0
   1282c:	f040 8479 	bne.w	13122 <handleParameter+0xf98>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_HALL_PHI_M, BIT_0_TO_15);
   12830:	4602      	mov	r2, r0
   12832:	213a      	movs	r1, #58	; 0x3a
   12834:	f00f ffba 	bl	227ac <tmc4670_readRegister16BitValue>
   12838:	b200      	sxth	r0, r0
   1283a:	6028      	str	r0, [r5, #0]
   1283c:	e5b1      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1283e:	2800      	cmp	r0, #0
   12840:	f040 8472 	bne.w	13128 <handleParameter+0xf9e>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PHI_E, BIT_0_TO_15);
   12844:	4602      	mov	r2, r0
   12846:	2153      	movs	r1, #83	; 0x53
   12848:	f00f ffb0 	bl	227ac <tmc4670_readRegister16BitValue>
   1284c:	b200      	sxth	r0, r0
   1284e:	6028      	str	r0, [r5, #0]
   12850:	e5a7      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   12852:	b930      	cbnz	r0, 12862 <handleParameter+0x6d8>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31);
   12854:	2201      	movs	r2, #1
   12856:	2164      	movs	r1, #100	; 0x64
   12858:	f00f ffa8 	bl	227ac <tmc4670_readRegister16BitValue>
   1285c:	b200      	sxth	r0, r0
   1285e:	6028      	str	r0, [r5, #0]
   12860:	e59f      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, *value);
   12862:	882b      	ldrh	r3, [r5, #0]
   12864:	2201      	movs	r2, #1
   12866:	2164      	movs	r1, #100	; 0x64
   12868:	2000      	movs	r0, #0
   1286a:	f00f ffac 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   1286e:	2400      	movs	r4, #0
   12870:	e597      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   12872:	b930      	cbnz	r0, 12882 <handleParameter+0x6f8>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15);
   12874:	4602      	mov	r2, r0
   12876:	2164      	movs	r1, #100	; 0x64
   12878:	f00f ff98 	bl	227ac <tmc4670_readRegister16BitValue>
   1287c:	b200      	sxth	r0, r0
   1287e:	6028      	str	r0, [r5, #0]
   12880:	e58f      	b.n	123a2 <handleParameter+0x218>
			tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, *value);
   12882:	2200      	movs	r2, #0
   12884:	882b      	ldrh	r3, [r5, #0]
   12886:	2164      	movs	r1, #100	; 0x64
   12888:	4610      	mov	r0, r2
   1288a:	f00f ff9c 	bl	227c6 <tmc4670_writeRegister16BitValue>
	uint32_t errors = TMC_ERROR_NONE;
   1288e:	2400      	movs	r4, #0
   12890:	e587      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12892:	2800      	cmp	r0, #0
   12894:	f040 844b 	bne.w	1312e <handleParameter+0xfa4>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_PID_VELOCITY_TARGET);
   12898:	2166      	movs	r1, #102	; 0x66
   1289a:	f00f ff45 	bl	22728 <tmc4670_readInt>
   1289e:	6028      	str	r0, [r5, #0]
   128a0:	e57f      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   128a2:	b920      	cbnz	r0, 128ae <handleParameter+0x724>
			*value = (int32_t) tmc4670_readInt(motor, TMC4670_PID_POSITION_TARGET);
   128a4:	2168      	movs	r1, #104	; 0x68
   128a6:	f00f ff3f 	bl	22728 <tmc4670_readInt>
   128aa:	6028      	str	r0, [r5, #0]
   128ac:	e579      	b.n	123a2 <handleParameter+0x218>
			tmc4670_setAbsolutTargetPosition(motor, *value);
   128ae:	6829      	ldr	r1, [r5, #0]
   128b0:	2000      	movs	r0, #0
   128b2:	f010 f857 	bl	22964 <tmc4670_setAbsolutTargetPosition>
	uint32_t errors = TMC_ERROR_NONE;
   128b6:	2400      	movs	r4, #0
   128b8:	e573      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   128ba:	2800      	cmp	r0, #0
   128bc:	f040 843a 	bne.w	13134 <handleParameter+0xfaa>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
   128c0:	2201      	movs	r2, #1
   128c2:	2169      	movs	r1, #105	; 0x69
   128c4:	f00f ff72 	bl	227ac <tmc4670_readRegister16BitValue>
   128c8:	b200      	sxth	r0, r0
   128ca:	6028      	str	r0, [r5, #0]
   128cc:	e569      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   128ce:	2800      	cmp	r0, #0
   128d0:	f040 8433 	bne.w	1313a <handleParameter+0xfb0>
			*value = tmc4670_getActualTorque_mA(motor, motorConfig[motor].torqueMeasurementFactor);
   128d4:	4bc1      	ldr	r3, [pc, #772]	; (12bdc <handleParameter+0xa52>)
   128d6:	8959      	ldrh	r1, [r3, #10]
   128d8:	f00f ffd9 	bl	2288e <tmc4670_getActualTorque_mA>
   128dc:	6028      	str	r0, [r5, #0]
   128de:	e560      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   128e0:	2800      	cmp	r0, #0
   128e2:	f040 842d 	bne.w	13140 <handleParameter+0xfb6>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_ACTUAL, BIT_0_TO_15);
   128e6:	4602      	mov	r2, r0
   128e8:	2169      	movs	r1, #105	; 0x69
   128ea:	f00f ff5f 	bl	227ac <tmc4670_readRegister16BitValue>
   128ee:	b200      	sxth	r0, r0
   128f0:	6028      	str	r0, [r5, #0]
   128f2:	e556      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   128f4:	2800      	cmp	r0, #0
   128f6:	f040 8426 	bne.w	13146 <handleParameter+0xfbc>
			*value = tmc4670_getActualVelocity(motor);
   128fa:	f010 f82e 	bl	2295a <tmc4670_getActualVelocity>
   128fe:	6028      	str	r0, [r5, #0]
   12900:	e54f      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ)
   12902:	b918      	cbnz	r0, 1290c <handleParameter+0x782>
			*value = tmc4670_getActualPosition(motor);
   12904:	f010 f853 	bl	229ae <tmc4670_getActualPosition>
   12908:	6028      	str	r0, [r5, #0]
   1290a:	e54a      	b.n	123a2 <handleParameter+0x218>
			tmc4670_setActualPosition(motor, *value);
   1290c:	6829      	ldr	r1, [r5, #0]
   1290e:	2000      	movs	r0, #0
   12910:	f010 f849 	bl	229a6 <tmc4670_setActualPosition>
	uint32_t errors = TMC_ERROR_NONE;
   12914:	2400      	movs	r4, #0
   12916:	e544      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12918:	2800      	cmp	r0, #0
   1291a:	f040 8417 	bne.w	1314c <handleParameter+0xfc2>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 0);
   1291e:	4602      	mov	r2, r0
   12920:	216d      	movs	r1, #109	; 0x6d
   12922:	f00f ff23 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   12926:	216c      	movs	r1, #108	; 0x6c
   12928:	4620      	mov	r0, r4
   1292a:	f00f fefd 	bl	22728 <tmc4670_readInt>
   1292e:	6028      	str	r0, [r5, #0]
   12930:	e537      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12932:	2800      	cmp	r0, #0
   12934:	f040 840d 	bne.w	13152 <handleParameter+0xfc8>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 1);
   12938:	2201      	movs	r2, #1
   1293a:	216d      	movs	r1, #109	; 0x6d
   1293c:	f00f ff16 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   12940:	216c      	movs	r1, #108	; 0x6c
   12942:	4620      	mov	r0, r4
   12944:	f00f fef0 	bl	22728 <tmc4670_readInt>
   12948:	6028      	str	r0, [r5, #0]
   1294a:	e52a      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1294c:	2800      	cmp	r0, #0
   1294e:	f040 8403 	bne.w	13158 <handleParameter+0xfce>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 2);
   12952:	2202      	movs	r2, #2
   12954:	216d      	movs	r1, #109	; 0x6d
   12956:	f00f ff09 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   1295a:	216c      	movs	r1, #108	; 0x6c
   1295c:	4620      	mov	r0, r4
   1295e:	f00f fee3 	bl	22728 <tmc4670_readInt>
   12962:	6028      	str	r0, [r5, #0]
   12964:	e51d      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12966:	2800      	cmp	r0, #0
   12968:	f040 83f9 	bne.w	1315e <handleParameter+0xfd4>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 3);
   1296c:	2203      	movs	r2, #3
   1296e:	216d      	movs	r1, #109	; 0x6d
   12970:	f00f fefc 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   12974:	216c      	movs	r1, #108	; 0x6c
   12976:	4620      	mov	r0, r4
   12978:	f00f fed6 	bl	22728 <tmc4670_readInt>
   1297c:	6028      	str	r0, [r5, #0]
   1297e:	e510      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12980:	2800      	cmp	r0, #0
   12982:	f040 83ef 	bne.w	13164 <handleParameter+0xfda>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 4);
   12986:	2204      	movs	r2, #4
   12988:	216d      	movs	r1, #109	; 0x6d
   1298a:	f00f feef 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   1298e:	216c      	movs	r1, #108	; 0x6c
   12990:	4620      	mov	r0, r4
   12992:	f00f fec9 	bl	22728 <tmc4670_readInt>
   12996:	6028      	str	r0, [r5, #0]
   12998:	e503      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   1299a:	2800      	cmp	r0, #0
   1299c:	f040 83e5 	bne.w	1316a <handleParameter+0xfe0>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 5);
   129a0:	2205      	movs	r2, #5
   129a2:	216d      	movs	r1, #109	; 0x6d
   129a4:	f00f fee2 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   129a8:	216c      	movs	r1, #108	; 0x6c
   129aa:	4620      	mov	r0, r4
   129ac:	f00f febc 	bl	22728 <tmc4670_readInt>
   129b0:	6028      	str	r0, [r5, #0]
   129b2:	e4f6      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   129b4:	2800      	cmp	r0, #0
   129b6:	f040 83db 	bne.w	13170 <handleParameter+0xfe6>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 6);
   129ba:	2206      	movs	r2, #6
   129bc:	216d      	movs	r1, #109	; 0x6d
   129be:	f00f fed5 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   129c2:	216c      	movs	r1, #108	; 0x6c
   129c4:	4620      	mov	r0, r4
   129c6:	f00f feaf 	bl	22728 <tmc4670_readInt>
   129ca:	6028      	str	r0, [r5, #0]
   129cc:	e4e9      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   129ce:	2800      	cmp	r0, #0
   129d0:	f040 83d1 	bne.w	13176 <handleParameter+0xfec>
			tmc4670_writeInt(motor, TMC4670_PID_ERROR_ADDR, 7);
   129d4:	2207      	movs	r2, #7
   129d6:	216d      	movs	r1, #109	; 0x6d
   129d8:	f00f fec8 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_PID_ERROR_DATA);
   129dc:	216c      	movs	r1, #108	; 0x6c
   129de:	4620      	mov	r0, r4
   129e0:	f00f fea2 	bl	22728 <tmc4670_readInt>
   129e4:	6028      	str	r0, [r5, #0]
   129e6:	e4dc      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   129e8:	b918      	cbnz	r0, 129f2 <handleParameter+0x868>
			*value = tmc4670_getTargetTorque_raw(motor);
   129ea:	f00f ff21 	bl	22830 <tmc4670_getTargetTorque_raw>
   129ee:	6028      	str	r0, [r5, #0]
   129f0:	e4d7      	b.n	123a2 <handleParameter+0x218>
			tmc4670_setTargetTorque_raw(motor, *value);
   129f2:	6829      	ldr	r1, [r5, #0]
   129f4:	2000      	movs	r0, #0
   129f6:	f00f ff0d 	bl	22814 <tmc4670_setTargetTorque_raw>
	uint32_t errors = TMC_ERROR_NONE;
   129fa:	2400      	movs	r4, #0
   129fc:	e4d1      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   129fe:	4b77      	ldr	r3, [pc, #476]	; (12bdc <handleParameter+0xa52>)
   12a00:	8959      	ldrh	r1, [r3, #10]
   12a02:	b918      	cbnz	r0, 12a0c <handleParameter+0x882>
			*value = tmc4670_getTargetTorque_mA(motor, motorConfig[motor].torqueMeasurementFactor);
   12a04:	f00f ff3a 	bl	2287c <tmc4670_getTargetTorque_mA>
   12a08:	6028      	str	r0, [r5, #0]
   12a0a:	e4ca      	b.n	123a2 <handleParameter+0x218>
			tmc4670_setTargetTorque_mA(motor, motorConfig[motor].torqueMeasurementFactor, *value);
   12a0c:	682a      	ldr	r2, [r5, #0]
   12a0e:	2000      	movs	r0, #0
   12a10:	f00f ff22 	bl	22858 <tmc4670_setTargetTorque_mA>
	uint32_t errors = TMC_ERROR_NONE;
   12a14:	2400      	movs	r4, #0
   12a16:	e4c4      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a18:	2800      	cmp	r0, #0
   12a1a:	f040 83af 	bne.w	1317c <handleParameter+0xff2>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 1);
   12a1e:	2201      	movs	r2, #1
   12a20:	216f      	movs	r1, #111	; 0x6f
   12a22:	f00f fea3 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12a26:	216e      	movs	r1, #110	; 0x6e
   12a28:	4620      	mov	r0, r4
   12a2a:	f00f fe7d 	bl	22728 <tmc4670_readInt>
   12a2e:	6028      	str	r0, [r5, #0]
   12a30:	e4b7      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a32:	b918      	cbnz	r0, 12a3c <handleParameter+0x8b2>
			*value = tmc4670_getTargetVelocity(motor);
   12a34:	f00f ff85 	bl	22942 <tmc4670_getTargetVelocity>
   12a38:	6028      	str	r0, [r5, #0]
   12a3a:	e4b2      	b.n	123a2 <handleParameter+0x218>
			tmc4670_setTargetVelocity(motor, *value);
   12a3c:	6829      	ldr	r1, [r5, #0]
   12a3e:	2000      	movs	r0, #0
   12a40:	f00f ff72 	bl	22928 <tmc4670_setTargetVelocity>
	uint32_t errors = TMC_ERROR_NONE;
   12a44:	2400      	movs	r4, #0
   12a46:	e4ac      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a48:	2800      	cmp	r0, #0
   12a4a:	f040 839a 	bne.w	13182 <handleParameter+0xff8>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 3);
   12a4e:	2203      	movs	r2, #3
   12a50:	216f      	movs	r1, #111	; 0x6f
   12a52:	f00f fe8b 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12a56:	216e      	movs	r1, #110	; 0x6e
   12a58:	4620      	mov	r0, r4
   12a5a:	f00f fe65 	bl	22728 <tmc4670_readInt>
   12a5e:	6028      	str	r0, [r5, #0]
   12a60:	e49f      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a62:	2800      	cmp	r0, #0
   12a64:	f040 8390 	bne.w	13188 <handleParameter+0xffe>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 4);
   12a68:	2204      	movs	r2, #4
   12a6a:	216f      	movs	r1, #111	; 0x6f
   12a6c:	f00f fe7e 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12a70:	216e      	movs	r1, #110	; 0x6e
   12a72:	4620      	mov	r0, r4
   12a74:	f00f fe58 	bl	22728 <tmc4670_readInt>
   12a78:	6028      	str	r0, [r5, #0]
   12a7a:	e492      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a7c:	2800      	cmp	r0, #0
   12a7e:	f040 8386 	bne.w	1318e <handleParameter+0x1004>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 5);
   12a82:	2205      	movs	r2, #5
   12a84:	216f      	movs	r1, #111	; 0x6f
   12a86:	f00f fe71 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12a8a:	216e      	movs	r1, #110	; 0x6e
   12a8c:	4620      	mov	r0, r4
   12a8e:	f00f fe4b 	bl	22728 <tmc4670_readInt>
   12a92:	6028      	str	r0, [r5, #0]
   12a94:	e485      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12a96:	2800      	cmp	r0, #0
   12a98:	f040 837c 	bne.w	13194 <handleParameter+0x100a>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 6);
   12a9c:	2206      	movs	r2, #6
   12a9e:	216f      	movs	r1, #111	; 0x6f
   12aa0:	f00f fe64 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12aa4:	216e      	movs	r1, #110	; 0x6e
   12aa6:	4620      	mov	r0, r4
   12aa8:	f00f fe3e 	bl	22728 <tmc4670_readInt>
   12aac:	6028      	str	r0, [r5, #0]
   12aae:	e478      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ab0:	2800      	cmp	r0, #0
   12ab2:	f040 8372 	bne.w	1319a <handleParameter+0x1010>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 7);
   12ab6:	2207      	movs	r2, #7
   12ab8:	216f      	movs	r1, #111	; 0x6f
   12aba:	f00f fe57 	bl	2276c <tmc4670_writeInt>
			*value = tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12abe:	216e      	movs	r1, #110	; 0x6e
   12ac0:	4620      	mov	r0, r4
   12ac2:	f00f fe31 	bl	22728 <tmc4670_readInt>
   12ac6:	6028      	str	r0, [r5, #0]
   12ac8:	e46b      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12aca:	2800      	cmp	r0, #0
   12acc:	f040 8368 	bne.w	131a0 <handleParameter+0x1016>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 8);
   12ad0:	2208      	movs	r2, #8
   12ad2:	216f      	movs	r1, #111	; 0x6f
   12ad4:	f00f fe4a 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12ad8:	4622      	mov	r2, r4
   12ada:	216e      	movs	r1, #110	; 0x6e
   12adc:	4620      	mov	r0, r4
   12ade:	f00f fe65 	bl	227ac <tmc4670_readRegister16BitValue>
   12ae2:	b200      	sxth	r0, r0
   12ae4:	6028      	str	r0, [r5, #0]
   12ae6:	e45c      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ae8:	2800      	cmp	r0, #0
   12aea:	f040 835c 	bne.w	131a6 <handleParameter+0x101c>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 8);
   12aee:	2208      	movs	r2, #8
   12af0:	216f      	movs	r1, #111	; 0x6f
   12af2:	f00f fe3b 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12af6:	2201      	movs	r2, #1
   12af8:	216e      	movs	r1, #110	; 0x6e
   12afa:	4620      	mov	r0, r4
   12afc:	f00f fe56 	bl	227ac <tmc4670_readRegister16BitValue>
   12b00:	b200      	sxth	r0, r0
   12b02:	6028      	str	r0, [r5, #0]
   12b04:	e44d      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b06:	2800      	cmp	r0, #0
   12b08:	f040 8350 	bne.w	131ac <handleParameter+0x1022>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 9);
   12b0c:	2209      	movs	r2, #9
   12b0e:	216f      	movs	r1, #111	; 0x6f
   12b10:	f00f fe2c 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12b14:	4622      	mov	r2, r4
   12b16:	216e      	movs	r1, #110	; 0x6e
   12b18:	4620      	mov	r0, r4
   12b1a:	f00f fe47 	bl	227ac <tmc4670_readRegister16BitValue>
   12b1e:	b200      	sxth	r0, r0
   12b20:	6028      	str	r0, [r5, #0]
   12b22:	e43e      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b24:	2800      	cmp	r0, #0
   12b26:	f040 8344 	bne.w	131b2 <handleParameter+0x1028>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 10);
   12b2a:	220a      	movs	r2, #10
   12b2c:	216f      	movs	r1, #111	; 0x6f
   12b2e:	f00f fe1d 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12b32:	4622      	mov	r2, r4
   12b34:	216e      	movs	r1, #110	; 0x6e
   12b36:	4620      	mov	r0, r4
   12b38:	f00f fe38 	bl	227ac <tmc4670_readRegister16BitValue>
   12b3c:	b200      	sxth	r0, r0
   12b3e:	6028      	str	r0, [r5, #0]
   12b40:	e42f      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b42:	2800      	cmp	r0, #0
   12b44:	f040 8338 	bne.w	131b8 <handleParameter+0x102e>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 10);
   12b48:	220a      	movs	r2, #10
   12b4a:	216f      	movs	r1, #111	; 0x6f
   12b4c:	f00f fe0e 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12b50:	2201      	movs	r2, #1
   12b52:	216e      	movs	r1, #110	; 0x6e
   12b54:	4620      	mov	r0, r4
   12b56:	f00f fe29 	bl	227ac <tmc4670_readRegister16BitValue>
   12b5a:	b200      	sxth	r0, r0
   12b5c:	6028      	str	r0, [r5, #0]
   12b5e:	e420      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b60:	2800      	cmp	r0, #0
   12b62:	f040 832c 	bne.w	131be <handleParameter+0x1034>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 11);
   12b66:	220b      	movs	r2, #11
   12b68:	216f      	movs	r1, #111	; 0x6f
   12b6a:	f00f fdff 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12b6e:	4622      	mov	r2, r4
   12b70:	216e      	movs	r1, #110	; 0x6e
   12b72:	4620      	mov	r0, r4
   12b74:	f00f fe1a 	bl	227ac <tmc4670_readRegister16BitValue>
   12b78:	b200      	sxth	r0, r0
   12b7a:	6028      	str	r0, [r5, #0]
   12b7c:	e411      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b7e:	2800      	cmp	r0, #0
   12b80:	f040 8320 	bne.w	131c4 <handleParameter+0x103a>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 11);
   12b84:	220b      	movs	r2, #11
   12b86:	216f      	movs	r1, #111	; 0x6f
   12b88:	f00f fdf0 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12b8c:	2201      	movs	r2, #1
   12b8e:	216e      	movs	r1, #110	; 0x6e
   12b90:	4620      	mov	r0, r4
   12b92:	f00f fe0b 	bl	227ac <tmc4670_readRegister16BitValue>
   12b96:	b200      	sxth	r0, r0
   12b98:	6028      	str	r0, [r5, #0]
   12b9a:	e402      	b.n	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12b9c:	2800      	cmp	r0, #0
   12b9e:	f040 8314 	bne.w	131ca <handleParameter+0x1040>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 12);
   12ba2:	220c      	movs	r2, #12
   12ba4:	216f      	movs	r1, #111	; 0x6f
   12ba6:	f00f fde1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12baa:	4622      	mov	r2, r4
   12bac:	216e      	movs	r1, #110	; 0x6e
   12bae:	4620      	mov	r0, r4
   12bb0:	f00f fdfc 	bl	227ac <tmc4670_readRegister16BitValue>
   12bb4:	b200      	sxth	r0, r0
   12bb6:	6028      	str	r0, [r5, #0]
   12bb8:	f7ff bbf3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12bbc:	2800      	cmp	r0, #0
   12bbe:	f040 8307 	bne.w	131d0 <handleParameter+0x1046>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 12);
   12bc2:	220c      	movs	r2, #12
   12bc4:	216f      	movs	r1, #111	; 0x6f
   12bc6:	f00f fdd1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12bca:	2201      	movs	r2, #1
   12bcc:	216e      	movs	r1, #110	; 0x6e
   12bce:	4620      	mov	r0, r4
   12bd0:	f00f fdec 	bl	227ac <tmc4670_readRegister16BitValue>
   12bd4:	b200      	sxth	r0, r0
   12bd6:	6028      	str	r0, [r5, #0]
   12bd8:	f7ff bbe3 	b.w	123a2 <handleParameter+0x218>
   12bdc:	1fff6500 	.word	0x1fff6500
		if(readWrite == READ) {
   12be0:	2800      	cmp	r0, #0
   12be2:	f040 82f8 	bne.w	131d6 <handleParameter+0x104c>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 13);
   12be6:	220d      	movs	r2, #13
   12be8:	216f      	movs	r1, #111	; 0x6f
   12bea:	f00f fdbf 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12bee:	4622      	mov	r2, r4
   12bf0:	216e      	movs	r1, #110	; 0x6e
   12bf2:	4620      	mov	r0, r4
   12bf4:	f00f fdda 	bl	227ac <tmc4670_readRegister16BitValue>
   12bf8:	b200      	sxth	r0, r0
   12bfa:	6028      	str	r0, [r5, #0]
   12bfc:	f7ff bbd1 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12c00:	2800      	cmp	r0, #0
   12c02:	f040 82eb 	bne.w	131dc <handleParameter+0x1052>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 13);
   12c06:	220d      	movs	r2, #13
   12c08:	216f      	movs	r1, #111	; 0x6f
   12c0a:	f00f fdaf 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12c0e:	2201      	movs	r2, #1
   12c10:	216e      	movs	r1, #110	; 0x6e
   12c12:	4620      	mov	r0, r4
   12c14:	f00f fdca 	bl	227ac <tmc4670_readRegister16BitValue>
   12c18:	b200      	sxth	r0, r0
   12c1a:	6028      	str	r0, [r5, #0]
   12c1c:	f7ff bbc1 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12c20:	2800      	cmp	r0, #0
   12c22:	f040 82de 	bne.w	131e2 <handleParameter+0x1058>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 14);
   12c26:	220e      	movs	r2, #14
   12c28:	216f      	movs	r1, #111	; 0x6f
   12c2a:	f00f fd9f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12c2e:	4622      	mov	r2, r4
   12c30:	216e      	movs	r1, #110	; 0x6e
   12c32:	4620      	mov	r0, r4
   12c34:	f00f fdba 	bl	227ac <tmc4670_readRegister16BitValue>
   12c38:	b200      	sxth	r0, r0
   12c3a:	6028      	str	r0, [r5, #0]
   12c3c:	f7ff bbb1 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12c40:	2800      	cmp	r0, #0
   12c42:	f040 82d1 	bne.w	131e8 <handleParameter+0x105e>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 14);
   12c46:	220e      	movs	r2, #14
   12c48:	216f      	movs	r1, #111	; 0x6f
   12c4a:	f00f fd8f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12c4e:	2201      	movs	r2, #1
   12c50:	216e      	movs	r1, #110	; 0x6e
   12c52:	4620      	mov	r0, r4
   12c54:	f00f fdaa 	bl	227ac <tmc4670_readRegister16BitValue>
   12c58:	b200      	sxth	r0, r0
   12c5a:	6028      	str	r0, [r5, #0]
   12c5c:	f7ff bba1 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12c60:	2800      	cmp	r0, #0
   12c62:	f040 82c4 	bne.w	131ee <handleParameter+0x1064>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 15);
   12c66:	220f      	movs	r2, #15
   12c68:	216f      	movs	r1, #111	; 0x6f
   12c6a:	f00f fd7f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12c6e:	4622      	mov	r2, r4
   12c70:	216e      	movs	r1, #110	; 0x6e
   12c72:	4620      	mov	r0, r4
   12c74:	f00f fd9a 	bl	227ac <tmc4670_readRegister16BitValue>
   12c78:	b200      	sxth	r0, r0
   12c7a:	6028      	str	r0, [r5, #0]
   12c7c:	f7ff bb91 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12c80:	2800      	cmp	r0, #0
   12c82:	f040 82b7 	bne.w	131f4 <handleParameter+0x106a>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 15);
   12c86:	220f      	movs	r2, #15
   12c88:	216f      	movs	r1, #111	; 0x6f
   12c8a:	f00f fd6f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12c8e:	2201      	movs	r2, #1
   12c90:	216e      	movs	r1, #110	; 0x6e
   12c92:	4620      	mov	r0, r4
   12c94:	f00f fd8a 	bl	227ac <tmc4670_readRegister16BitValue>
   12c98:	b200      	sxth	r0, r0
   12c9a:	6028      	str	r0, [r5, #0]
   12c9c:	f7ff bb81 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ca0:	2800      	cmp	r0, #0
   12ca2:	f040 82aa 	bne.w	131fa <handleParameter+0x1070>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 16);
   12ca6:	2210      	movs	r2, #16
   12ca8:	216f      	movs	r1, #111	; 0x6f
   12caa:	f00f fd5f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12cae:	4622      	mov	r2, r4
   12cb0:	216e      	movs	r1, #110	; 0x6e
   12cb2:	4620      	mov	r0, r4
   12cb4:	f00f fd7a 	bl	227ac <tmc4670_readRegister16BitValue>
   12cb8:	b200      	sxth	r0, r0
   12cba:	6028      	str	r0, [r5, #0]
   12cbc:	f7ff bb71 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12cc0:	2800      	cmp	r0, #0
   12cc2:	f040 829d 	bne.w	13200 <handleParameter+0x1076>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 17);
   12cc6:	2211      	movs	r2, #17
   12cc8:	216f      	movs	r1, #111	; 0x6f
   12cca:	f00f fd4f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12cce:	4622      	mov	r2, r4
   12cd0:	216e      	movs	r1, #110	; 0x6e
   12cd2:	4620      	mov	r0, r4
   12cd4:	f00f fd6a 	bl	227ac <tmc4670_readRegister16BitValue>
   12cd8:	b200      	sxth	r0, r0
   12cda:	6028      	str	r0, [r5, #0]
   12cdc:	f7ff bb61 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ce0:	2800      	cmp	r0, #0
   12ce2:	f040 8290 	bne.w	13206 <handleParameter+0x107c>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 17);
   12ce6:	2211      	movs	r2, #17
   12ce8:	216f      	movs	r1, #111	; 0x6f
   12cea:	f00f fd3f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12cee:	2201      	movs	r2, #1
   12cf0:	216e      	movs	r1, #110	; 0x6e
   12cf2:	4620      	mov	r0, r4
   12cf4:	f00f fd5a 	bl	227ac <tmc4670_readRegister16BitValue>
   12cf8:	b200      	sxth	r0, r0
   12cfa:	6028      	str	r0, [r5, #0]
   12cfc:	f7ff bb51 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d00:	2800      	cmp	r0, #0
   12d02:	f040 8283 	bne.w	1320c <handleParameter+0x1082>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 18);
   12d06:	2212      	movs	r2, #18
   12d08:	216f      	movs	r1, #111	; 0x6f
   12d0a:	f00f fd2f 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12d0e:	4622      	mov	r2, r4
   12d10:	216e      	movs	r1, #110	; 0x6e
   12d12:	4620      	mov	r0, r4
   12d14:	f00f fd4a 	bl	227ac <tmc4670_readRegister16BitValue>
   12d18:	b200      	sxth	r0, r0
   12d1a:	6028      	str	r0, [r5, #0]
   12d1c:	f7ff bb41 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d20:	2800      	cmp	r0, #0
   12d22:	f040 8276 	bne.w	13212 <handleParameter+0x1088>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 19);
   12d26:	2213      	movs	r2, #19
   12d28:	216f      	movs	r1, #111	; 0x6f
   12d2a:	f00f fd1f 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12d2e:	4622      	mov	r2, r4
   12d30:	216e      	movs	r1, #110	; 0x6e
   12d32:	4620      	mov	r0, r4
   12d34:	f00f fd3a 	bl	227ac <tmc4670_readRegister16BitValue>
   12d38:	6028      	str	r0, [r5, #0]
   12d3a:	f7ff bb32 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d3e:	2800      	cmp	r0, #0
   12d40:	f040 826a 	bne.w	13218 <handleParameter+0x108e>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 19);
   12d44:	2213      	movs	r2, #19
   12d46:	216f      	movs	r1, #111	; 0x6f
   12d48:	f00f fd10 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12d4c:	2201      	movs	r2, #1
   12d4e:	216e      	movs	r1, #110	; 0x6e
   12d50:	4620      	mov	r0, r4
   12d52:	f00f fd2b 	bl	227ac <tmc4670_readRegister16BitValue>
   12d56:	6028      	str	r0, [r5, #0]
   12d58:	f7ff bb23 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d5c:	2800      	cmp	r0, #0
   12d5e:	f040 825e 	bne.w	1321e <handleParameter+0x1094>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 192);
   12d62:	22c0      	movs	r2, #192	; 0xc0
   12d64:	216f      	movs	r1, #111	; 0x6f
   12d66:	f00f fd01 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12d6a:	4622      	mov	r2, r4
   12d6c:	216e      	movs	r1, #110	; 0x6e
   12d6e:	4620      	mov	r0, r4
   12d70:	f00f fd1c 	bl	227ac <tmc4670_readRegister16BitValue>
   12d74:	b200      	sxth	r0, r0
   12d76:	6028      	str	r0, [r5, #0]
   12d78:	f7ff bb13 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d7c:	2800      	cmp	r0, #0
   12d7e:	f040 8251 	bne.w	13224 <handleParameter+0x109a>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 192);
   12d82:	22c0      	movs	r2, #192	; 0xc0
   12d84:	216f      	movs	r1, #111	; 0x6f
   12d86:	f00f fcf1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12d8a:	2201      	movs	r2, #1
   12d8c:	216e      	movs	r1, #110	; 0x6e
   12d8e:	4620      	mov	r0, r4
   12d90:	f00f fd0c 	bl	227ac <tmc4670_readRegister16BitValue>
   12d94:	b200      	sxth	r0, r0
   12d96:	6028      	str	r0, [r5, #0]
   12d98:	f7ff bb03 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12d9c:	2800      	cmp	r0, #0
   12d9e:	f040 8244 	bne.w	1322a <handleParameter+0x10a0>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 193);
   12da2:	22c1      	movs	r2, #193	; 0xc1
   12da4:	216f      	movs	r1, #111	; 0x6f
   12da6:	f00f fce1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12daa:	4622      	mov	r2, r4
   12dac:	216e      	movs	r1, #110	; 0x6e
   12dae:	4620      	mov	r0, r4
   12db0:	f00f fcfc 	bl	227ac <tmc4670_readRegister16BitValue>
   12db4:	b200      	sxth	r0, r0
   12db6:	6028      	str	r0, [r5, #0]
   12db8:	f7ff baf3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12dbc:	2800      	cmp	r0, #0
   12dbe:	f040 8237 	bne.w	13230 <handleParameter+0x10a6>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 193);
   12dc2:	22c1      	movs	r2, #193	; 0xc1
   12dc4:	216f      	movs	r1, #111	; 0x6f
   12dc6:	f00f fcd1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12dca:	2201      	movs	r2, #1
   12dcc:	216e      	movs	r1, #110	; 0x6e
   12dce:	4620      	mov	r0, r4
   12dd0:	f00f fcec 	bl	227ac <tmc4670_readRegister16BitValue>
   12dd4:	b200      	sxth	r0, r0
   12dd6:	6028      	str	r0, [r5, #0]
   12dd8:	f7ff bae3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ddc:	2800      	cmp	r0, #0
   12dde:	f040 822a 	bne.w	13236 <handleParameter+0x10ac>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 194);
   12de2:	22c2      	movs	r2, #194	; 0xc2
   12de4:	216f      	movs	r1, #111	; 0x6f
   12de6:	f00f fcc1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12dea:	4622      	mov	r2, r4
   12dec:	216e      	movs	r1, #110	; 0x6e
   12dee:	4620      	mov	r0, r4
   12df0:	f00f fcdc 	bl	227ac <tmc4670_readRegister16BitValue>
   12df4:	b200      	sxth	r0, r0
   12df6:	6028      	str	r0, [r5, #0]
   12df8:	f7ff bad3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12dfc:	2800      	cmp	r0, #0
   12dfe:	f040 821d 	bne.w	1323c <handleParameter+0x10b2>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 194);
   12e02:	22c2      	movs	r2, #194	; 0xc2
   12e04:	216f      	movs	r1, #111	; 0x6f
   12e06:	f00f fcb1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12e0a:	2201      	movs	r2, #1
   12e0c:	216e      	movs	r1, #110	; 0x6e
   12e0e:	4620      	mov	r0, r4
   12e10:	f00f fccc 	bl	227ac <tmc4670_readRegister16BitValue>
   12e14:	b200      	sxth	r0, r0
   12e16:	6028      	str	r0, [r5, #0]
   12e18:	f7ff bac3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12e1c:	2800      	cmp	r0, #0
   12e1e:	f040 8210 	bne.w	13242 <handleParameter+0x10b8>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 195);
   12e22:	22c3      	movs	r2, #195	; 0xc3
   12e24:	216f      	movs	r1, #111	; 0x6f
   12e26:	f00f fca1 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12e2a:	4622      	mov	r2, r4
   12e2c:	216e      	movs	r1, #110	; 0x6e
   12e2e:	4620      	mov	r0, r4
   12e30:	f00f fcbc 	bl	227ac <tmc4670_readRegister16BitValue>
   12e34:	b200      	sxth	r0, r0
   12e36:	6028      	str	r0, [r5, #0]
   12e38:	f7ff bab3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12e3c:	2800      	cmp	r0, #0
   12e3e:	f040 8203 	bne.w	13248 <handleParameter+0x10be>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 195);
   12e42:	22c3      	movs	r2, #195	; 0xc3
   12e44:	216f      	movs	r1, #111	; 0x6f
   12e46:	f00f fc91 	bl	2276c <tmc4670_writeInt>
			*value = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12e4a:	2201      	movs	r2, #1
   12e4c:	216e      	movs	r1, #110	; 0x6e
   12e4e:	4620      	mov	r0, r4
   12e50:	f00f fcac 	bl	227ac <tmc4670_readRegister16BitValue>
   12e54:	b200      	sxth	r0, r0
   12e56:	6028      	str	r0, [r5, #0]
   12e58:	f7ff baa3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12e5c:	2800      	cmp	r0, #0
   12e5e:	f040 81f6 	bne.w	1324e <handleParameter+0x10c4>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 196);
   12e62:	22c4      	movs	r2, #196	; 0xc4
   12e64:	216f      	movs	r1, #111	; 0x6f
   12e66:	f00f fc81 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12e6a:	4622      	mov	r2, r4
   12e6c:	216e      	movs	r1, #110	; 0x6e
   12e6e:	4620      	mov	r0, r4
   12e70:	f00f fc9c 	bl	227ac <tmc4670_readRegister16BitValue>
   12e74:	6028      	str	r0, [r5, #0]
   12e76:	f7ff ba94 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12e7a:	2800      	cmp	r0, #0
   12e7c:	f040 81ea 	bne.w	13254 <handleParameter+0x10ca>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 196);
   12e80:	22c4      	movs	r2, #196	; 0xc4
   12e82:	216f      	movs	r1, #111	; 0x6f
   12e84:	f00f fc72 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12e88:	2201      	movs	r2, #1
   12e8a:	216e      	movs	r1, #110	; 0x6e
   12e8c:	4620      	mov	r0, r4
   12e8e:	f00f fc8d 	bl	227ac <tmc4670_readRegister16BitValue>
   12e92:	6028      	str	r0, [r5, #0]
   12e94:	f7ff ba85 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12e98:	2800      	cmp	r0, #0
   12e9a:	f040 81de 	bne.w	1325a <handleParameter+0x10d0>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 197);
   12e9e:	22c5      	movs	r2, #197	; 0xc5
   12ea0:	216f      	movs	r1, #111	; 0x6f
   12ea2:	f00f fc63 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12ea6:	4622      	mov	r2, r4
   12ea8:	216e      	movs	r1, #110	; 0x6e
   12eaa:	4620      	mov	r0, r4
   12eac:	f00f fc7e 	bl	227ac <tmc4670_readRegister16BitValue>
   12eb0:	6028      	str	r0, [r5, #0]
   12eb2:	f7ff ba76 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12eb6:	2800      	cmp	r0, #0
   12eb8:	f040 81d2 	bne.w	13260 <handleParameter+0x10d6>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 197);
   12ebc:	22c5      	movs	r2, #197	; 0xc5
   12ebe:	216f      	movs	r1, #111	; 0x6f
   12ec0:	f00f fc54 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12ec4:	2201      	movs	r2, #1
   12ec6:	216e      	movs	r1, #110	; 0x6e
   12ec8:	4620      	mov	r0, r4
   12eca:	f00f fc6f 	bl	227ac <tmc4670_readRegister16BitValue>
   12ece:	6028      	str	r0, [r5, #0]
   12ed0:	f7ff ba67 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ed4:	2800      	cmp	r0, #0
   12ed6:	f040 81c6 	bne.w	13266 <handleParameter+0x10dc>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 198);
   12eda:	22c6      	movs	r2, #198	; 0xc6
   12edc:	216f      	movs	r1, #111	; 0x6f
   12ede:	f00f fc45 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12ee2:	4622      	mov	r2, r4
   12ee4:	216e      	movs	r1, #110	; 0x6e
   12ee6:	4620      	mov	r0, r4
   12ee8:	f00f fc60 	bl	227ac <tmc4670_readRegister16BitValue>
   12eec:	6028      	str	r0, [r5, #0]
   12eee:	f7ff ba58 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ef2:	2800      	cmp	r0, #0
   12ef4:	f040 81ba 	bne.w	1326c <handleParameter+0x10e2>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 198);
   12ef8:	22c6      	movs	r2, #198	; 0xc6
   12efa:	216f      	movs	r1, #111	; 0x6f
   12efc:	f00f fc36 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12f00:	2201      	movs	r2, #1
   12f02:	216e      	movs	r1, #110	; 0x6e
   12f04:	4620      	mov	r0, r4
   12f06:	f00f fc51 	bl	227ac <tmc4670_readRegister16BitValue>
   12f0a:	6028      	str	r0, [r5, #0]
   12f0c:	f7ff ba49 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12f10:	2800      	cmp	r0, #0
   12f12:	f040 81ae 	bne.w	13272 <handleParameter+0x10e8>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 199);
   12f16:	22c7      	movs	r2, #199	; 0xc7
   12f18:	216f      	movs	r1, #111	; 0x6f
   12f1a:	f00f fc27 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_0_TO_15);
   12f1e:	4622      	mov	r2, r4
   12f20:	216e      	movs	r1, #110	; 0x6e
   12f22:	4620      	mov	r0, r4
   12f24:	f00f fc42 	bl	227ac <tmc4670_readRegister16BitValue>
   12f28:	6028      	str	r0, [r5, #0]
   12f2a:	f7ff ba3a 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12f2e:	2800      	cmp	r0, #0
   12f30:	f040 81a2 	bne.w	13278 <handleParameter+0x10ee>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 199);
   12f34:	22c7      	movs	r2, #199	; 0xc7
   12f36:	216f      	movs	r1, #111	; 0x6f
   12f38:	f00f fc18 	bl	2276c <tmc4670_writeInt>
			*value = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_INTERIM_DATA, BIT_16_TO_31);
   12f3c:	2201      	movs	r2, #1
   12f3e:	216e      	movs	r1, #110	; 0x6e
   12f40:	4620      	mov	r0, r4
   12f42:	f00f fc33 	bl	227ac <tmc4670_readRegister16BitValue>
   12f46:	6028      	str	r0, [r5, #0]
   12f48:	f7ff ba2b 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12f4c:	2800      	cmp	r0, #0
   12f4e:	f040 8196 	bne.w	1327e <handleParameter+0x10f4>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 200);
   12f52:	22c8      	movs	r2, #200	; 0xc8
   12f54:	216f      	movs	r1, #111	; 0x6f
   12f56:	f00f fc09 	bl	2276c <tmc4670_writeInt>
			*value =  (int32_t)tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12f5a:	216e      	movs	r1, #110	; 0x6e
   12f5c:	4620      	mov	r0, r4
   12f5e:	f00f fbe3 	bl	22728 <tmc4670_readInt>
   12f62:	6028      	str	r0, [r5, #0]
   12f64:	f7ff ba1d 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12f68:	2800      	cmp	r0, #0
   12f6a:	f040 818b 	bne.w	13284 <handleParameter+0x10fa>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 201);
   12f6e:	22c9      	movs	r2, #201	; 0xc9
   12f70:	216f      	movs	r1, #111	; 0x6f
   12f72:	f00f fbfb 	bl	2276c <tmc4670_writeInt>
			*value =  (int32_t)tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12f76:	216e      	movs	r1, #110	; 0x6e
   12f78:	4620      	mov	r0, r4
   12f7a:	f00f fbd5 	bl	22728 <tmc4670_readInt>
   12f7e:	6028      	str	r0, [r5, #0]
   12f80:	f7ff ba0f 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12f84:	2800      	cmp	r0, #0
   12f86:	f040 8180 	bne.w	1328a <handleParameter+0x1100>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 202);
   12f8a:	22ca      	movs	r2, #202	; 0xca
   12f8c:	216f      	movs	r1, #111	; 0x6f
   12f8e:	f00f fbed 	bl	2276c <tmc4670_writeInt>
			*value =  (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12f92:	216e      	movs	r1, #110	; 0x6e
   12f94:	4620      	mov	r0, r4
   12f96:	f00f fbc7 	bl	22728 <tmc4670_readInt>
   12f9a:	6028      	str	r0, [r5, #0]
   12f9c:	f7ff ba01 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12fa0:	2800      	cmp	r0, #0
   12fa2:	f040 8175 	bne.w	13290 <handleParameter+0x1106>
			tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 203);
   12fa6:	22cb      	movs	r2, #203	; 0xcb
   12fa8:	216f      	movs	r1, #111	; 0x6f
   12faa:	f00f fbdf 	bl	2276c <tmc4670_writeInt>
			*value =  (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   12fae:	216e      	movs	r1, #110	; 0x6e
   12fb0:	4620      	mov	r0, r4
   12fb2:	f00f fbb9 	bl	22728 <tmc4670_readInt>
   12fb6:	6028      	str	r0, [r5, #0]
   12fb8:	f7ff b9f3 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12fbc:	4bb9      	ldr	r3, [pc, #740]	; (132a4 <handleParameter+0x111a>)
   12fbe:	b918      	cbnz	r0, 12fc8 <handleParameter+0xe3e>
			*value = motorConfig[motor].torqueMeasurementFactor;
   12fc0:	895b      	ldrh	r3, [r3, #10]
   12fc2:	602b      	str	r3, [r5, #0]
   12fc4:	f7ff b9ed 	b.w	123a2 <handleParameter+0x218>
			motorConfig[motor].torqueMeasurementFactor = *value;
   12fc8:	682a      	ldr	r2, [r5, #0]
   12fca:	815a      	strh	r2, [r3, #10]
	uint32_t errors = TMC_ERROR_NONE;
   12fcc:	2400      	movs	r4, #0
   12fce:	f7ff b9e8 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12fd2:	b920      	cbnz	r0, 12fde <handleParameter+0xe54>
			*value = motorConfig[motor].initMode;
   12fd4:	4bb3      	ldr	r3, [pc, #716]	; (132a4 <handleParameter+0x111a>)
   12fd6:	7a5b      	ldrb	r3, [r3, #9]
   12fd8:	602b      	str	r3, [r5, #0]
   12fda:	f7ff b9e2 	b.w	123a2 <handleParameter+0x218>
			tmc4670_startEncoderInitialization(*value, &motorConfig[motor].initMode, &motorConfig[motor].initState);
   12fde:	4ab2      	ldr	r2, [pc, #712]	; (132a8 <handleParameter+0x111e>)
   12fe0:	7828      	ldrb	r0, [r5, #0]
   12fe2:	1c51      	adds	r1, r2, #1
   12fe4:	f00f fdd8 	bl	22b98 <tmc4670_startEncoderInitialization>
	uint32_t errors = TMC_ERROR_NONE;
   12fe8:	2400      	movs	r4, #0
   12fea:	f7ff b9da 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12fee:	2800      	cmp	r0, #0
   12ff0:	f040 8151 	bne.w	13296 <handleParameter+0x110c>
			*value = motorConfig[motor].initState;
   12ff4:	4bab      	ldr	r3, [pc, #684]	; (132a4 <handleParameter+0x111a>)
   12ff6:	7a1b      	ldrb	r3, [r3, #8]
   12ff8:	602b      	str	r3, [r5, #0]
   12ffa:	f7ff b9d2 	b.w	123a2 <handleParameter+0x218>
		if(readWrite == READ) {
   12ffe:	2800      	cmp	r0, #0
   13000:	f040 814c 	bne.w	1329c <handleParameter+0x1112>
			*value = motorConfig[motor].actualInitWaitTime;
   13004:	4ba7      	ldr	r3, [pc, #668]	; (132a4 <handleParameter+0x111a>)
   13006:	88db      	ldrh	r3, [r3, #6]
   13008:	602b      	str	r3, [r5, #0]
   1300a:	f7ff b9ca 	b.w	123a2 <handleParameter+0x218>
		return TMC_ERROR_MOTOR;
   1300e:	2408      	movs	r4, #8
   13010:	f7ff b9c7 	b.w	123a2 <handleParameter+0x218>
	if(motor >= TMC4670_MOTORS)
   13014:	2404      	movs	r4, #4
   13016:	f7ff b9c4 	b.w	123a2 <handleParameter+0x218>
			errors |= TMC_ERROR_TYPE;
   1301a:	2404      	movs	r4, #4
   1301c:	f7ff b9c1 	b.w	123a2 <handleParameter+0x218>
   13020:	2404      	movs	r4, #4
   13022:	f7ff b9be 	b.w	123a2 <handleParameter+0x218>
   13026:	2404      	movs	r4, #4
   13028:	f7ff b9bb 	b.w	123a2 <handleParameter+0x218>
   1302c:	2404      	movs	r4, #4
   1302e:	f7ff b9b8 	b.w	123a2 <handleParameter+0x218>
   13032:	2404      	movs	r4, #4
   13034:	f7ff b9b5 	b.w	123a2 <handleParameter+0x218>
   13038:	2404      	movs	r4, #4
   1303a:	f7ff b9b2 	b.w	123a2 <handleParameter+0x218>
   1303e:	2404      	movs	r4, #4
   13040:	f7ff b9af 	b.w	123a2 <handleParameter+0x218>
   13044:	2404      	movs	r4, #4
   13046:	f7ff b9ac 	b.w	123a2 <handleParameter+0x218>
   1304a:	2404      	movs	r4, #4
   1304c:	f7ff b9a9 	b.w	123a2 <handleParameter+0x218>
   13050:	2404      	movs	r4, #4
   13052:	f7ff b9a6 	b.w	123a2 <handleParameter+0x218>
   13056:	2404      	movs	r4, #4
   13058:	f7ff b9a3 	b.w	123a2 <handleParameter+0x218>
   1305c:	2404      	movs	r4, #4
   1305e:	f7ff b9a0 	b.w	123a2 <handleParameter+0x218>
   13062:	2404      	movs	r4, #4
   13064:	f7ff b99d 	b.w	123a2 <handleParameter+0x218>
   13068:	2404      	movs	r4, #4
   1306a:	f7ff b99a 	b.w	123a2 <handleParameter+0x218>
   1306e:	2404      	movs	r4, #4
   13070:	f7ff b997 	b.w	123a2 <handleParameter+0x218>
   13074:	2404      	movs	r4, #4
   13076:	f7ff b994 	b.w	123a2 <handleParameter+0x218>
   1307a:	2404      	movs	r4, #4
   1307c:	f7ff b991 	b.w	123a2 <handleParameter+0x218>
   13080:	2404      	movs	r4, #4
   13082:	f7ff b98e 	b.w	123a2 <handleParameter+0x218>
   13086:	2404      	movs	r4, #4
   13088:	f7ff b98b 	b.w	123a2 <handleParameter+0x218>
   1308c:	2404      	movs	r4, #4
   1308e:	f7ff b988 	b.w	123a2 <handleParameter+0x218>
   13092:	2404      	movs	r4, #4
   13094:	f7ff b985 	b.w	123a2 <handleParameter+0x218>
   13098:	2404      	movs	r4, #4
   1309a:	f7ff b982 	b.w	123a2 <handleParameter+0x218>
   1309e:	2404      	movs	r4, #4
   130a0:	f7ff b97f 	b.w	123a2 <handleParameter+0x218>
   130a4:	2404      	movs	r4, #4
   130a6:	f7ff b97c 	b.w	123a2 <handleParameter+0x218>
   130aa:	2404      	movs	r4, #4
   130ac:	f7ff b979 	b.w	123a2 <handleParameter+0x218>
   130b0:	2404      	movs	r4, #4
   130b2:	f7ff b976 	b.w	123a2 <handleParameter+0x218>
   130b6:	2404      	movs	r4, #4
   130b8:	f7ff b973 	b.w	123a2 <handleParameter+0x218>
   130bc:	2404      	movs	r4, #4
   130be:	f7ff b970 	b.w	123a2 <handleParameter+0x218>
   130c2:	2404      	movs	r4, #4
   130c4:	f7ff b96d 	b.w	123a2 <handleParameter+0x218>
   130c8:	2404      	movs	r4, #4
   130ca:	f7ff b96a 	b.w	123a2 <handleParameter+0x218>
   130ce:	2404      	movs	r4, #4
   130d0:	f7ff b967 	b.w	123a2 <handleParameter+0x218>
   130d4:	2404      	movs	r4, #4
   130d6:	f7ff b964 	b.w	123a2 <handleParameter+0x218>
   130da:	2404      	movs	r4, #4
   130dc:	f7ff b961 	b.w	123a2 <handleParameter+0x218>
   130e0:	2404      	movs	r4, #4
   130e2:	f7ff b95e 	b.w	123a2 <handleParameter+0x218>
   130e6:	2404      	movs	r4, #4
   130e8:	f7ff b95b 	b.w	123a2 <handleParameter+0x218>
   130ec:	2404      	movs	r4, #4
   130ee:	f7ff b958 	b.w	123a2 <handleParameter+0x218>
   130f2:	2404      	movs	r4, #4
   130f4:	f7ff b955 	b.w	123a2 <handleParameter+0x218>
   130f8:	2404      	movs	r4, #4
   130fa:	f7ff b952 	b.w	123a2 <handleParameter+0x218>
   130fe:	2404      	movs	r4, #4
   13100:	f7ff b94f 	b.w	123a2 <handleParameter+0x218>
   13104:	2404      	movs	r4, #4
   13106:	f7ff b94c 	b.w	123a2 <handleParameter+0x218>
   1310a:	2404      	movs	r4, #4
   1310c:	f7ff b949 	b.w	123a2 <handleParameter+0x218>
   13110:	2404      	movs	r4, #4
   13112:	f7ff b946 	b.w	123a2 <handleParameter+0x218>
   13116:	2404      	movs	r4, #4
   13118:	f7ff b943 	b.w	123a2 <handleParameter+0x218>
   1311c:	2404      	movs	r4, #4
   1311e:	f7ff b940 	b.w	123a2 <handleParameter+0x218>
   13122:	2404      	movs	r4, #4
   13124:	f7ff b93d 	b.w	123a2 <handleParameter+0x218>
   13128:	2404      	movs	r4, #4
   1312a:	f7ff b93a 	b.w	123a2 <handleParameter+0x218>
   1312e:	2404      	movs	r4, #4
   13130:	f7ff b937 	b.w	123a2 <handleParameter+0x218>
   13134:	2404      	movs	r4, #4
   13136:	f7ff b934 	b.w	123a2 <handleParameter+0x218>
   1313a:	2404      	movs	r4, #4
   1313c:	f7ff b931 	b.w	123a2 <handleParameter+0x218>
   13140:	2404      	movs	r4, #4
   13142:	f7ff b92e 	b.w	123a2 <handleParameter+0x218>
   13146:	2404      	movs	r4, #4
   13148:	f7ff b92b 	b.w	123a2 <handleParameter+0x218>
   1314c:	2404      	movs	r4, #4
   1314e:	f7ff b928 	b.w	123a2 <handleParameter+0x218>
   13152:	2404      	movs	r4, #4
   13154:	f7ff b925 	b.w	123a2 <handleParameter+0x218>
   13158:	2404      	movs	r4, #4
   1315a:	f7ff b922 	b.w	123a2 <handleParameter+0x218>
   1315e:	2404      	movs	r4, #4
   13160:	f7ff b91f 	b.w	123a2 <handleParameter+0x218>
   13164:	2404      	movs	r4, #4
   13166:	f7ff b91c 	b.w	123a2 <handleParameter+0x218>
   1316a:	2404      	movs	r4, #4
   1316c:	f7ff b919 	b.w	123a2 <handleParameter+0x218>
   13170:	2404      	movs	r4, #4
   13172:	f7ff b916 	b.w	123a2 <handleParameter+0x218>
   13176:	2404      	movs	r4, #4
   13178:	f7ff b913 	b.w	123a2 <handleParameter+0x218>
   1317c:	2404      	movs	r4, #4
   1317e:	f7ff b910 	b.w	123a2 <handleParameter+0x218>
   13182:	2404      	movs	r4, #4
   13184:	f7ff b90d 	b.w	123a2 <handleParameter+0x218>
   13188:	2404      	movs	r4, #4
   1318a:	f7ff b90a 	b.w	123a2 <handleParameter+0x218>
   1318e:	2404      	movs	r4, #4
   13190:	f7ff b907 	b.w	123a2 <handleParameter+0x218>
   13194:	2404      	movs	r4, #4
   13196:	f7ff b904 	b.w	123a2 <handleParameter+0x218>
   1319a:	2404      	movs	r4, #4
   1319c:	f7ff b901 	b.w	123a2 <handleParameter+0x218>
   131a0:	2404      	movs	r4, #4
   131a2:	f7ff b8fe 	b.w	123a2 <handleParameter+0x218>
   131a6:	2404      	movs	r4, #4
   131a8:	f7ff b8fb 	b.w	123a2 <handleParameter+0x218>
   131ac:	2404      	movs	r4, #4
   131ae:	f7ff b8f8 	b.w	123a2 <handleParameter+0x218>
   131b2:	2404      	movs	r4, #4
   131b4:	f7ff b8f5 	b.w	123a2 <handleParameter+0x218>
   131b8:	2404      	movs	r4, #4
   131ba:	f7ff b8f2 	b.w	123a2 <handleParameter+0x218>
   131be:	2404      	movs	r4, #4
   131c0:	f7ff b8ef 	b.w	123a2 <handleParameter+0x218>
   131c4:	2404      	movs	r4, #4
   131c6:	f7ff b8ec 	b.w	123a2 <handleParameter+0x218>
   131ca:	2404      	movs	r4, #4
   131cc:	f7ff b8e9 	b.w	123a2 <handleParameter+0x218>
   131d0:	2404      	movs	r4, #4
   131d2:	f7ff b8e6 	b.w	123a2 <handleParameter+0x218>
   131d6:	2404      	movs	r4, #4
   131d8:	f7ff b8e3 	b.w	123a2 <handleParameter+0x218>
   131dc:	2404      	movs	r4, #4
   131de:	f7ff b8e0 	b.w	123a2 <handleParameter+0x218>
   131e2:	2404      	movs	r4, #4
   131e4:	f7ff b8dd 	b.w	123a2 <handleParameter+0x218>
   131e8:	2404      	movs	r4, #4
   131ea:	f7ff b8da 	b.w	123a2 <handleParameter+0x218>
   131ee:	2404      	movs	r4, #4
   131f0:	f7ff b8d7 	b.w	123a2 <handleParameter+0x218>
   131f4:	2404      	movs	r4, #4
   131f6:	f7ff b8d4 	b.w	123a2 <handleParameter+0x218>
   131fa:	2404      	movs	r4, #4
   131fc:	f7ff b8d1 	b.w	123a2 <handleParameter+0x218>
   13200:	2404      	movs	r4, #4
   13202:	f7ff b8ce 	b.w	123a2 <handleParameter+0x218>
   13206:	2404      	movs	r4, #4
   13208:	f7ff b8cb 	b.w	123a2 <handleParameter+0x218>
   1320c:	2404      	movs	r4, #4
   1320e:	f7ff b8c8 	b.w	123a2 <handleParameter+0x218>
   13212:	2404      	movs	r4, #4
   13214:	f7ff b8c5 	b.w	123a2 <handleParameter+0x218>
   13218:	2404      	movs	r4, #4
   1321a:	f7ff b8c2 	b.w	123a2 <handleParameter+0x218>
   1321e:	2404      	movs	r4, #4
   13220:	f7ff b8bf 	b.w	123a2 <handleParameter+0x218>
   13224:	2404      	movs	r4, #4
   13226:	f7ff b8bc 	b.w	123a2 <handleParameter+0x218>
   1322a:	2404      	movs	r4, #4
   1322c:	f7ff b8b9 	b.w	123a2 <handleParameter+0x218>
   13230:	2404      	movs	r4, #4
   13232:	f7ff b8b6 	b.w	123a2 <handleParameter+0x218>
   13236:	2404      	movs	r4, #4
   13238:	f7ff b8b3 	b.w	123a2 <handleParameter+0x218>
   1323c:	2404      	movs	r4, #4
   1323e:	f7ff b8b0 	b.w	123a2 <handleParameter+0x218>
   13242:	2404      	movs	r4, #4
   13244:	f7ff b8ad 	b.w	123a2 <handleParameter+0x218>
   13248:	2404      	movs	r4, #4
   1324a:	f7ff b8aa 	b.w	123a2 <handleParameter+0x218>
   1324e:	2404      	movs	r4, #4
   13250:	f7ff b8a7 	b.w	123a2 <handleParameter+0x218>
   13254:	2404      	movs	r4, #4
   13256:	f7ff b8a4 	b.w	123a2 <handleParameter+0x218>
   1325a:	2404      	movs	r4, #4
   1325c:	f7ff b8a1 	b.w	123a2 <handleParameter+0x218>
   13260:	2404      	movs	r4, #4
   13262:	f7ff b89e 	b.w	123a2 <handleParameter+0x218>
   13266:	2404      	movs	r4, #4
   13268:	f7ff b89b 	b.w	123a2 <handleParameter+0x218>
   1326c:	2404      	movs	r4, #4
   1326e:	f7ff b898 	b.w	123a2 <handleParameter+0x218>
   13272:	2404      	movs	r4, #4
   13274:	f7ff b895 	b.w	123a2 <handleParameter+0x218>
   13278:	2404      	movs	r4, #4
   1327a:	f7ff b892 	b.w	123a2 <handleParameter+0x218>
   1327e:	2404      	movs	r4, #4
   13280:	f7ff b88f 	b.w	123a2 <handleParameter+0x218>
   13284:	2404      	movs	r4, #4
   13286:	f7ff b88c 	b.w	123a2 <handleParameter+0x218>
   1328a:	2404      	movs	r4, #4
   1328c:	f7ff b889 	b.w	123a2 <handleParameter+0x218>
   13290:	2404      	movs	r4, #4
   13292:	f7ff b886 	b.w	123a2 <handleParameter+0x218>
   13296:	2404      	movs	r4, #4
   13298:	f7ff b883 	b.w	123a2 <handleParameter+0x218>
   1329c:	2404      	movs	r4, #4
   1329e:	f7ff b880 	b.w	123a2 <handleParameter+0x218>
   132a2:	bf00      	nop
   132a4:	1fff6500 	.word	0x1fff6500
   132a8:	1fff6508 	.word	0x1fff6508

000132ac <SAP>:
{
   132ac:	b507      	push	{r0, r1, r2, lr}
   132ae:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   132b0:	ab01      	add	r3, sp, #4
   132b2:	4602      	mov	r2, r0
   132b4:	2001      	movs	r0, #1
   132b6:	f7fe ff68 	bl	1218a <handleParameter>
}
   132ba:	b003      	add	sp, #12
   132bc:	f85d fb04 	ldr.w	pc, [sp], #4

000132c0 <GAP>:
{
   132c0:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   132c2:	4602      	mov	r2, r0
   132c4:	2000      	movs	r0, #0
   132c6:	f7fe bf60 	b.w	1218a <handleParameter>

000132ca <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   132ca:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   132cc:	bf04      	itt	eq
   132ce:	4b0c      	ldreq	r3, [pc, #48]	; (13300 <enableDriver+0x36>)
   132d0:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
   132d4:	b930      	cbnz	r0, 132e4 <enableDriver+0x1a>
		HAL.IOs->config->setLow(PIN_DRV_ENN);
   132d6:	4b0b      	ldr	r3, [pc, #44]	; (13304 <enableDriver+0x3a>)
   132d8:	68db      	ldr	r3, [r3, #12]
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	699b      	ldr	r3, [r3, #24]
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   132de:	4a0a      	ldr	r2, [pc, #40]	; (13308 <enableDriver+0x3e>)
   132e0:	6810      	ldr	r0, [r2, #0]
   132e2:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   132e4:	2801      	cmp	r0, #1
   132e6:	d109      	bne.n	132fc <enableDriver+0x32>
   132e8:	4b05      	ldr	r3, [pc, #20]	; (13300 <enableDriver+0x36>)
   132ea:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   132ee:	2b01      	cmp	r3, #1
   132f0:	d104      	bne.n	132fc <enableDriver+0x32>
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   132f2:	4b04      	ldr	r3, [pc, #16]	; (13304 <enableDriver+0x3a>)
   132f4:	68db      	ldr	r3, [r3, #12]
   132f6:	681b      	ldr	r3, [r3, #0]
   132f8:	695b      	ldr	r3, [r3, #20]
   132fa:	e7f0      	b.n	132de <enableDriver+0x14>
}
   132fc:	4770      	bx	lr
   132fe:	bf00      	nop
   13300:	1fff5e88 	.word	0x1fff5e88
   13304:	00029d1c 	.word	0x00029d1c
   13308:	1fff3168 	.word	0x1fff3168

0001330c <deInit>:
{
   1330c:	b510      	push	{r4, lr}
	enableDriver(DRIVER_DISABLE);
   1330e:	2000      	movs	r0, #0
   13310:	f7ff ffdb 	bl	132ca <enableDriver>
	HAL.IOs->config->setLow(PIN_DRV_ENN);
   13314:	4b04      	ldr	r3, [pc, #16]	; (13328 <deInit+0x1c>)
   13316:	4a05      	ldr	r2, [pc, #20]	; (1332c <deInit+0x20>)
   13318:	68db      	ldr	r3, [r3, #12]
   1331a:	6810      	ldr	r0, [r2, #0]
   1331c:	681b      	ldr	r3, [r3, #0]
};
   1331e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL.IOs->config->setLow(PIN_DRV_ENN);
   13322:	699b      	ldr	r3, [r3, #24]
   13324:	4718      	bx	r3
   13326:	bf00      	nop
   13328:	00029d1c 	.word	0x00029d1c
   1332c:	1fff3168 	.word	0x1fff3168

00013330 <moveBy>:
{
   13330:	b510      	push	{r4, lr}
	if(motor >= TMC4670_MOTORS)
   13332:	4604      	mov	r4, r0
   13334:	b920      	cbnz	r0, 13340 <moveBy+0x10>
	tmc4670_setRelativeTargetPosition(motor, *ticks);
   13336:	6809      	ldr	r1, [r1, #0]
   13338:	f00f fb21 	bl	2297e <tmc4670_setRelativeTargetPosition>
   1333c:	4620      	mov	r0, r4
}
   1333e:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   13340:	2008      	movs	r0, #8
   13342:	e7fc      	b.n	1333e <moveBy+0xe>

00013344 <getMeasuredSpeed>:
{
   13344:	b538      	push	{r3, r4, r5, lr}
   13346:	460d      	mov	r5, r1
	if(motor >= TMC4670_MOTORS)
   13348:	4604      	mov	r4, r0
   1334a:	b920      	cbnz	r0, 13356 <getMeasuredSpeed+0x12>
	*value = tmc4670_getActualVelocity(motor);
   1334c:	f00f fb05 	bl	2295a <tmc4670_getActualVelocity>
   13350:	6028      	str	r0, [r5, #0]
   13352:	4620      	mov	r0, r4
}
   13354:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
   13356:	2008      	movs	r0, #8
   13358:	e7fc      	b.n	13354 <getMeasuredSpeed+0x10>

0001335a <restore>:
   1335a:	2001      	movs	r0, #1
   1335c:	4770      	bx	lr

0001335e <tmc4670_readwriteByte>:
{
   1335e:	4603      	mov	r3, r0
   13360:	4608      	mov	r0, r1
   13362:	4611      	mov	r1, r2
	if (motor == DEFAULT_MOTOR)
   13364:	b91b      	cbnz	r3, 1336e <tmc4670_readwriteByte+0x10>
		return TMC4670_SPIChannel->readWrite(data, lastTransfer);
   13366:	4b03      	ldr	r3, [pc, #12]	; (13374 <tmc4670_readwriteByte+0x16>)
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	689b      	ldr	r3, [r3, #8]
   1336c:	4718      	bx	r3
}
   1336e:	2000      	movs	r0, #0
   13370:	4770      	bx	lr
   13372:	bf00      	nop
   13374:	1fff3168 	.word	0x1fff3168

00013378 <TMC4670_init>:

void TMC4670_init(void)
{
   13378:	b570      	push	{r4, r5, r6, lr}
	// configure ENABLE-PIN for TMC4670
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   1337a:	4e27      	ldr	r6, [pc, #156]	; (13418 <TMC4670_init+0xa0>)
   1337c:	4d27      	ldr	r5, [pc, #156]	; (1341c <TMC4670_init+0xa4>)
   1337e:	68f4      	ldr	r4, [r6, #12]
   13380:	6860      	ldr	r0, [r4, #4]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   13382:	6823      	ldr	r3, [r4, #0]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   13384:	3068      	adds	r0, #104	; 0x68
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   13386:	68db      	ldr	r3, [r3, #12]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   13388:	6028      	str	r0, [r5, #0]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1338a:	4798      	blx	r3
	enableDriver(DRIVER_ENABLE);
   1338c:	2001      	movs	r0, #1
   1338e:	f7ff ff9c 	bl	132ca <enableDriver>

	TMC4670_SPIChannel = &HAL.SPI->ch1;
	TMC4670_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   13392:	6863      	ldr	r3, [r4, #4]
	TMC4670_SPIChannel = &HAL.SPI->ch1;
   13394:	6932      	ldr	r2, [r6, #16]
   13396:	606a      	str	r2, [r5, #4]
	TMC4670_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   13398:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   1339c:	6053      	str	r3, [r2, #4]

	TMC4670_config = Evalboards.ch1.config;
   1339e:	4b20      	ldr	r3, [pc, #128]	; (13420 <TMC4670_init+0xa8>)

	// connect evalboard functions
	Evalboards.ch1.config->reset        = reset;
   133a0:	4920      	ldr	r1, [pc, #128]	; (13424 <TMC4670_init+0xac>)
	TMC4670_config = Evalboards.ch1.config;
   133a2:	699a      	ldr	r2, [r3, #24]
	Evalboards.ch1.config->reset        = reset;
   133a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   133a8:	491f      	ldr	r1, [pc, #124]	; (13428 <TMC4670_init+0xb0>)
   133aa:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_READY;
   133ae:	2100      	movs	r1, #0
   133b0:	8011      	strh	r1, [r2, #0]
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   133b2:	4a1e      	ldr	r2, [pc, #120]	; (1342c <TMC4670_init+0xb4>)
   133b4:	625a      	str	r2, [r3, #36]	; 0x24
	Evalboards.ch1.right                = right;
   133b6:	4a1e      	ldr	r2, [pc, #120]	; (13430 <TMC4670_init+0xb8>)
   133b8:	621a      	str	r2, [r3, #32]
	Evalboards.ch1.left                 = left;
   133ba:	4a1e      	ldr	r2, [pc, #120]	; (13434 <TMC4670_init+0xbc>)
   133bc:	61da      	str	r2, [r3, #28]
	Evalboards.ch1.stop                 = stop;
   133be:	4a1e      	ldr	r2, [pc, #120]	; (13438 <TMC4670_init+0xc0>)
   133c0:	629a      	str	r2, [r3, #40]	; 0x28
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   133c2:	4a1e      	ldr	r2, [pc, #120]	; (1343c <TMC4670_init+0xc4>)
   133c4:	651a      	str	r2, [r3, #80]	; 0x50
	Evalboards.ch1.GAP                  = GAP;
   133c6:	4a1e      	ldr	r2, [pc, #120]	; (13440 <TMC4670_init+0xc8>)
   133c8:	63da      	str	r2, [r3, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   133ca:	4a1e      	ldr	r2, [pc, #120]	; (13444 <TMC4670_init+0xcc>)
   133cc:	639a      	str	r2, [r3, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   133ce:	4a1e      	ldr	r2, [pc, #120]	; (13448 <TMC4670_init+0xd0>)
   133d0:	62da      	str	r2, [r3, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   133d2:	4a1e      	ldr	r2, [pc, #120]	; (1344c <TMC4670_init+0xd4>)
   133d4:	631a      	str	r2, [r3, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   133d6:	4a1e      	ldr	r2, [pc, #120]	; (13450 <TMC4670_init+0xd8>)
   133d8:	64da      	str	r2, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   133da:	4a1e      	ldr	r2, [pc, #120]	; (13454 <TMC4670_init+0xdc>)
   133dc:	649a      	str	r2, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   133de:	4a1e      	ldr	r2, [pc, #120]	; (13458 <TMC4670_init+0xe0>)
   133e0:	659a      	str	r2, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   133e2:	4a1e      	ldr	r2, [pc, #120]	; (1345c <TMC4670_init+0xe4>)
   133e4:	655a      	str	r2, [r3, #84]	; 0x54
	Evalboards.ch1.enableDriver         = enableDriver;
   133e6:	4a1e      	ldr	r2, [pc, #120]	; (13460 <TMC4670_init+0xe8>)
   133e8:	665a      	str	r2, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   133ea:	4a1e      	ldr	r2, [pc, #120]	; (13464 <TMC4670_init+0xec>)
   133ec:	661a      	str	r2, [r3, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC4670_MOTORS;
   133ee:	2201      	movs	r2, #1
   133f0:	751a      	strb	r2, [r3, #20]
	Evalboards.ch1.deInit               = deInit;
   133f2:	4a1d      	ldr	r2, [pc, #116]	; (13468 <TMC4670_init+0xf0>)
   133f4:	65da      	str	r2, [r3, #92]	; 0x5c
	Evalboards.ch1.VMMin                = 50;
	Evalboards.ch1.VMMax                = 650;
   133f6:	2032      	movs	r0, #50	; 0x32
   133f8:	f240 228a 	movw	r2, #650	; 0x28a
   133fc:	e9c3 2003 	strd	r2, r0, [r3, #12]

	// init motor config
	for(int i = 0; i < TMC4670_MOTORS; i++)
	{
		motorConfig[i].initWaitTime             = 1000;
   13400:	4b1a      	ldr	r3, [pc, #104]	; (1346c <TMC4670_init+0xf4>)
   13402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13406:	809a      	strh	r2, [r3, #4]
		motorConfig[i].startVoltage             = 6000;
   13408:	f241 7270 	movw	r2, #6000	; 0x1770
   1340c:	601a      	str	r2, [r3, #0]
		motorConfig[i].initMode                 = 0;
   1340e:	7259      	strb	r1, [r3, #9]
		motorConfig[i].torqueMeasurementFactor  = 256;
   13410:	f44f 7280 	mov.w	r2, #256	; 0x100
   13414:	815a      	strh	r2, [r3, #10]
	}
};
   13416:	bd70      	pop	{r4, r5, r6, pc}
   13418:	00029d1c 	.word	0x00029d1c
   1341c:	1fff3168 	.word	0x1fff3168
   13420:	1fff5e88 	.word	0x1fff5e88
   13424:	00012111 	.word	0x00012111
   13428:	0001335b 	.word	0x0001335b
   1342c:	0001216f 	.word	0x0001216f
   13430:	00012189 	.word	0x00012189
   13434:	00012185 	.word	0x00012185
   13438:	00012181 	.word	0x00012181
   1343c:	00013345 	.word	0x00013345
   13440:	000132c1 	.word	0x000132c1
   13444:	000132ad 	.word	0x000132ad
   13448:	0001215d 	.word	0x0001215d
   1344c:	00013331 	.word	0x00013331
   13450:	00012157 	.word	0x00012157
   13454:	00012149 	.word	0x00012149
   13458:	00012121 	.word	0x00012121
   1345c:	0001210d 	.word	0x0001210d
   13460:	000132cb 	.word	0x000132cb
   13464:	00012115 	.word	0x00012115
   13468:	0001330d 	.word	0x0001330d
   1346c:	1fff6500 	.word	0x1fff6500

00013470 <userFunction>:
{
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);
	return 0;
}
   13470:	2000      	movs	r0, #0
   13472:	4770      	bx	lr

00013474 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   13474:	4b01      	ldr	r3, [pc, #4]	; (1347c <checkErrors+0x8>)
   13476:	2200      	movs	r2, #0
   13478:	609a      	str	r2, [r3, #8]
}
   1347a:	4770      	bx	lr
   1347c:	1fff5e88 	.word	0x1fff5e88

00013480 <writeRegister>:
	tmc4671_writeInt(DEFAULT_MOTOR, address, value);
   13480:	2000      	movs	r0, #0
   13482:	f00f bbb9 	b.w	22bf8 <tmc4671_writeInt>

00013486 <reset>:
{
   13486:	b508      	push	{r3, lr}
		tmc4671_writeInt(motor, TMC4671_PWM_POLARITIES, 0);
   13488:	2200      	movs	r2, #0
   1348a:	4610      	mov	r0, r2
   1348c:	2117      	movs	r1, #23
   1348e:	f00f fbb3 	bl	22bf8 <tmc4671_writeInt>
		tmc4671_writeInt(motor, TMC4671_PWM_SV_CHOP, 0x0);
   13492:	2200      	movs	r2, #0
   13494:	4610      	mov	r0, r2
   13496:	211a      	movs	r1, #26
   13498:	f00f fbae 	bl	22bf8 <tmc4671_writeInt>
		tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PWM_BBM_H_BBM_L, 0x00001919);
   1349c:	f641 1219 	movw	r2, #6425	; 0x1919
   134a0:	2119      	movs	r1, #25
   134a2:	2000      	movs	r0, #0
   134a4:	f00f fba8 	bl	22bf8 <tmc4671_writeInt>
}
   134a8:	2001      	movs	r0, #1
   134aa:	bd08      	pop	{r3, pc}

000134ac <restore>:
   134ac:	e7eb      	b.n	13486 <reset>

000134ae <readRegister>:
{
   134ae:	b510      	push	{r4, lr}
	*value = tmc4671_readInt(DEFAULT_MOTOR, address);
   134b0:	2000      	movs	r0, #0
{
   134b2:	4614      	mov	r4, r2
	*value = tmc4671_readInt(DEFAULT_MOTOR, address);
   134b4:	f00f fb7e 	bl	22bb4 <tmc4671_readInt>
   134b8:	6020      	str	r0, [r4, #0]
}
   134ba:	bd10      	pop	{r4, pc}

000134bc <enableDriver>:
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   134bc:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   134be:	bf04      	itt	eq
   134c0:	4b0b      	ldreq	r3, [pc, #44]	; (134f0 <enableDriver+0x34>)
   134c2:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state == DRIVER_DISABLE)
   134c6:	b930      	cbnz	r0, 134d6 <enableDriver+0x1a>
		HAL.IOs->config->setLow(PIN_DRV_ENN);
   134c8:	4b0a      	ldr	r3, [pc, #40]	; (134f4 <enableDriver+0x38>)
   134ca:	68db      	ldr	r3, [r3, #12]
   134cc:	681b      	ldr	r3, [r3, #0]
   134ce:	699b      	ldr	r3, [r3, #24]
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   134d0:	4a09      	ldr	r2, [pc, #36]	; (134f8 <enableDriver+0x3c>)
   134d2:	6810      	ldr	r0, [r2, #0]
   134d4:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   134d6:	2801      	cmp	r0, #1
   134d8:	d109      	bne.n	134ee <enableDriver+0x32>
   134da:	4b05      	ldr	r3, [pc, #20]	; (134f0 <enableDriver+0x34>)
   134dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   134e0:	2b01      	cmp	r3, #1
   134e2:	d104      	bne.n	134ee <enableDriver+0x32>
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   134e4:	4b03      	ldr	r3, [pc, #12]	; (134f4 <enableDriver+0x38>)
   134e6:	68db      	ldr	r3, [r3, #12]
   134e8:	681b      	ldr	r3, [r3, #0]
   134ea:	695b      	ldr	r3, [r3, #20]
   134ec:	e7f0      	b.n	134d0 <enableDriver+0x14>
}
   134ee:	4770      	bx	lr
   134f0:	1fff5e88 	.word	0x1fff5e88
   134f4:	00029d1c 	.word	0x00029d1c
   134f8:	1fff317c 	.word	0x1fff317c

000134fc <deInit>:
{
   134fc:	b510      	push	{r4, lr}
	enableDriver(DRIVER_DISABLE);
   134fe:	2000      	movs	r0, #0
   13500:	f7ff ffdc 	bl	134bc <enableDriver>
	HAL.IOs->config->setLow(PIN_DRV_ENN);
   13504:	4b04      	ldr	r3, [pc, #16]	; (13518 <deInit+0x1c>)
   13506:	4a05      	ldr	r2, [pc, #20]	; (1351c <deInit+0x20>)
   13508:	68db      	ldr	r3, [r3, #12]
   1350a:	6810      	ldr	r0, [r2, #0]
   1350c:	681b      	ldr	r3, [r3, #0]
};
   1350e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL.IOs->config->setLow(PIN_DRV_ENN);
   13512:	699b      	ldr	r3, [r3, #24]
   13514:	4718      	bx	r3
   13516:	bf00      	nop
   13518:	00029d1c 	.word	0x00029d1c
   1351c:	1fff317c 	.word	0x1fff317c

00013520 <getMeasuredSpeed>:
{
   13520:	b538      	push	{r3, r4, r5, lr}
   13522:	460d      	mov	r5, r1
	if(motor >= TMC4671_MOTORS)
   13524:	4604      	mov	r4, r0
   13526:	b920      	cbnz	r0, 13532 <getMeasuredSpeed+0x12>
	*value = tmc4671_getActualVelocity(motor);
   13528:	f00f fc9f 	bl	22e6a <tmc4671_getActualVelocity>
   1352c:	6028      	str	r0, [r5, #0]
   1352e:	4620      	mov	r0, r4
}
   13530:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
   13532:	2008      	movs	r0, #8
   13534:	e7fc      	b.n	13530 <getMeasuredSpeed+0x10>

00013536 <periodicJob>:
{
   13536:	b5f0      	push	{r4, r5, r6, r7, lr}
		tmc4671_periodicJob(motor, actualSystick, motorConfig[motor].initMode,
   13538:	4b3d      	ldr	r3, [pc, #244]	; (13630 <periodicJob+0xfa>)
	if (lastSystick != actualSystick)
   1353a:	4e3e      	ldr	r6, [pc, #248]	; (13634 <periodicJob+0xfe>)
		tmc4671_periodicJob(motor, actualSystick, motorConfig[motor].initMode,
   1353c:	f833 2c06 	ldrh.w	r2, [r3, #-6]
{
   13540:	b085      	sub	sp, #20
   13542:	4605      	mov	r5, r0
		tmc4671_periodicJob(motor, actualSystick, motorConfig[motor].initMode,
   13544:	9202      	str	r2, [sp, #8]
   13546:	1e9a      	subs	r2, r3, #2
   13548:	9201      	str	r2, [sp, #4]
   1354a:	f833 2c04 	ldrh.w	r2, [r3, #-4]
   1354e:	9200      	str	r2, [sp, #0]
   13550:	785a      	ldrb	r2, [r3, #1]
   13552:	4601      	mov	r1, r0
   13554:	2000      	movs	r0, #0
   13556:	1f9c      	subs	r4, r3, #6
   13558:	f00f fd9c 	bl	23094 <tmc4671_periodicJob>
	if (lastSystick != actualSystick)
   1355c:	6873      	ldr	r3, [r6, #4]
   1355e:	42ab      	cmp	r3, r5
   13560:	d124      	bne.n	135ac <periodicJob+0x76>
}
   13562:	b005      	add	sp, #20
   13564:	bdf0      	pop	{r4, r5, r6, r7, pc}
				else if (actualMotionMode[motor] == TMC4671_MOTION_MODE_VELOCITY)
   13566:	2b02      	cmp	r3, #2
   13568:	d115      	bne.n	13596 <periodicJob+0x60>
					if (rampGenerator[motor].rampVelocity != lastRampTargetVelocity[motor])
   1356a:	4f33      	ldr	r7, [pc, #204]	; (13638 <periodicJob+0x102>)
					tmc_linearRamp_computeRampVelocity(&rampGenerator[motor]);
   1356c:	4620      	mov	r0, r4
   1356e:	f00c fdaf 	bl	200d0 <tmc_linearRamp_computeRampVelocity>
					if (rampGenerator[motor].rampVelocity != lastRampTargetVelocity[motor])
   13572:	6922      	ldr	r2, [r4, #16]
   13574:	683b      	ldr	r3, [r7, #0]
   13576:	429a      	cmp	r2, r3
   13578:	d058      	beq.n	1362c <periodicJob+0xf6>
						tmc4671_writeInt(motor, TMC4671_PID_VELOCITY_TARGET, rampGenerator[motor].rampVelocity);
   1357a:	2166      	movs	r1, #102	; 0x66
   1357c:	2000      	movs	r0, #0
   1357e:	f00f fb3b 	bl	22bf8 <tmc4671_writeInt>
						lastRampTargetVelocity[motor] = rampGenerator[motor].rampVelocity;
   13582:	6923      	ldr	r3, [r4, #16]
   13584:	603b      	str	r3, [r7, #0]
					rampGenerator[motor].rampPosition = tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
   13586:	216b      	movs	r1, #107	; 0x6b
   13588:	2000      	movs	r0, #0
   1358a:	f00f fb13 	bl	22bb4 <tmc4671_readInt>
					rampGenerator[motor].lastdXRest = 0;
   1358e:	2300      	movs	r3, #0
					rampGenerator[motor].rampPosition = tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
   13590:	60a0      	str	r0, [r4, #8]
					rampGenerator[motor].lastdXRest = 0;
   13592:	6223      	str	r3, [r4, #32]
		for (motor = 0; motor < TMC4671_MOTORS; motor++)
   13594:	e04a      	b.n	1362c <periodicJob+0xf6>
				else if (actualMotionMode[motor] == TMC4671_MOTION_MODE_TORQUE)
   13596:	2b01      	cmp	r3, #1
   13598:	d148      	bne.n	1362c <periodicJob+0xf6>
   1359a:	e7f4      	b.n	13586 <periodicJob+0x50>
				rampGenerator[motor].rampPosition = tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
   1359c:	216b      	movs	r1, #107	; 0x6b
   1359e:	4638      	mov	r0, r7
   135a0:	f00f fb08 	bl	22bb4 <tmc4671_readInt>
				rampGenerator[motor].rampVelocity = 0;
   135a4:	6127      	str	r7, [r4, #16]
				rampGenerator[motor].rampPosition = tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
   135a6:	60a0      	str	r0, [r4, #8]
				rampGenerator[motor].lastdXRest = 0;
   135a8:	6227      	str	r7, [r4, #32]
		for (motor = 0; motor < TMC4671_MOTORS; motor++)
   135aa:	e03f      	b.n	1362c <periodicJob+0xf6>
			motorConfig[motor].actualVelocityPT1 = tmc_filterPT1(&motorConfig[motor].akkuActualVelocity, tmc4671_getActualVelocity(motor), motorConfig[motor].actualVelocityPT1, 3, 8);
   135ac:	2000      	movs	r0, #0
   135ae:	f00f fc5c 	bl	22e6a <tmc4671_getActualVelocity>
   135b2:	2308      	movs	r3, #8
   135b4:	9300      	str	r3, [sp, #0]
   135b6:	4601      	mov	r1, r0
   135b8:	2303      	movs	r3, #3
   135ba:	68e2      	ldr	r2, [r4, #12]
   135bc:	f104 0010 	add.w	r0, r4, #16
   135c0:	f00c fca0 	bl	1ff04 <tmc_filterPT1>
			int16_t actualCurrentRaw = 	tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
   135c4:	2201      	movs	r2, #1
			motorConfig[motor].actualVelocityPT1 = tmc_filterPT1(&motorConfig[motor].akkuActualVelocity, tmc4671_getActualVelocity(motor), motorConfig[motor].actualVelocityPT1, 3, 8);
   135c6:	60e0      	str	r0, [r4, #12]
			int16_t actualCurrentRaw = 	tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
   135c8:	2169      	movs	r1, #105	; 0x69
   135ca:	2000      	movs	r0, #0
   135cc:	f00f fb34 	bl	22c38 <tmc4671_readRegister16BitValue>
			if ((actualCurrentRaw > -32000) && (actualCurrentRaw < 32000))
   135d0:	f500 43f9 	add.w	r3, r0, #31872	; 0x7c80
   135d4:	337f      	adds	r3, #127	; 0x7f
   135d6:	b29b      	uxth	r3, r3
   135d8:	f64f 12fe 	movw	r2, #63998	; 0xf9fe
   135dc:	4293      	cmp	r3, r2
			int16_t actualCurrentRaw = 	tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
   135de:	b201      	sxth	r1, r0
			if ((actualCurrentRaw > -32000) && (actualCurrentRaw < 32000))
   135e0:	d80d      	bhi.n	135fe <periodicJob+0xc8>
				int32_t actualCurrent = ((int32_t)actualCurrentRaw * (int32_t)motorConfig[motor].torqueMeasurementFactor) / 256;
   135e2:	8923      	ldrh	r3, [r4, #8]
				motorConfig[motor].actualTorquePT1 = tmc_filterPT1(&motorConfig[motor].akkuActualTorque , actualCurrent, motorConfig[motor].actualTorquePT1, 4, 8);
   135e4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   135e8:	4814      	ldr	r0, [pc, #80]	; (1363c <periodicJob+0x106>)
				int32_t actualCurrent = ((int32_t)actualCurrentRaw * (int32_t)motorConfig[motor].torqueMeasurementFactor) / 256;
   135ea:	4359      	muls	r1, r3
   135ec:	bf48      	it	mi
   135ee:	31ff      	addmi	r1, #255	; 0xff
				motorConfig[motor].actualTorquePT1 = tmc_filterPT1(&motorConfig[motor].akkuActualTorque , actualCurrent, motorConfig[motor].actualTorquePT1, 4, 8);
   135f0:	2308      	movs	r3, #8
   135f2:	9300      	str	r3, [sp, #0]
   135f4:	1209      	asrs	r1, r1, #8
   135f6:	2304      	movs	r3, #4
   135f8:	f00c fc84 	bl	1ff04 <tmc_filterPT1>
   135fc:	8320      	strh	r0, [r4, #24]
			if (rampGenerator[motor].rampEnabled)
   135fe:	4c10      	ldr	r4, [pc, #64]	; (13640 <periodicJob+0x10a>)
   13600:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
   13604:	2f00      	cmp	r7, #0
   13606:	d0c9      	beq.n	1359c <periodicJob+0x66>
				if (actualMotionMode[motor] == TMC4671_MOTION_MODE_POSITION)
   13608:	4b0e      	ldr	r3, [pc, #56]	; (13644 <periodicJob+0x10e>)
   1360a:	781b      	ldrb	r3, [r3, #0]
   1360c:	2b03      	cmp	r3, #3
   1360e:	d1aa      	bne.n	13566 <periodicJob+0x30>
					if (rampGenerator[motor].rampPosition != lastRampTargetPosition[motor])
   13610:	4f0d      	ldr	r7, [pc, #52]	; (13648 <periodicJob+0x112>)
					tmc_linearRamp_computeRampPosition(&rampGenerator[motor]);
   13612:	4620      	mov	r0, r4
   13614:	f00c fd8e 	bl	20134 <tmc_linearRamp_computeRampPosition>
					if (rampGenerator[motor].rampPosition != lastRampTargetPosition[motor])
   13618:	68a2      	ldr	r2, [r4, #8]
   1361a:	683b      	ldr	r3, [r7, #0]
   1361c:	429a      	cmp	r2, r3
   1361e:	d005      	beq.n	1362c <periodicJob+0xf6>
						tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, rampGenerator[motor].rampPosition);
   13620:	2168      	movs	r1, #104	; 0x68
   13622:	2000      	movs	r0, #0
   13624:	f00f fae8 	bl	22bf8 <tmc4671_writeInt>
						lastRampTargetPosition[motor] = rampGenerator[motor].rampPosition;
   13628:	68a3      	ldr	r3, [r4, #8]
   1362a:	603b      	str	r3, [r7, #0]
		lastSystick = actualSystick;
   1362c:	6075      	str	r5, [r6, #4]
}
   1362e:	e798      	b.n	13562 <periodicJob+0x2c>
   13630:	1fff6506 	.word	0x1fff6506
   13634:	1fff317c 	.word	0x1fff317c
   13638:	1fff652c 	.word	0x1fff652c
   1363c:	1fff6520 	.word	0x1fff6520
   13640:	1fff64d8 	.word	0x1fff64d8
   13644:	1fff6528 	.word	0x1fff6528
   13648:	1fff6530 	.word	0x1fff6530

0001364c <moveBy>:
{
   1364c:	b570      	push	{r4, r5, r6, lr}
   1364e:	460e      	mov	r6, r1
	if(motor >= TMC4671_MOTORS)
   13650:	b9e0      	cbnz	r0, 1368c <moveBy+0x40>
	if (rampGenerator[motor].rampEnabled)
   13652:	4d0f      	ldr	r5, [pc, #60]	; (13690 <moveBy+0x44>)
   13654:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   13658:	b1a4      	cbz	r4, 13684 <moveBy+0x38>
		if (actualMotionMode[motor] == TMC4671_MOTION_MODE_TORQUE)
   1365a:	4c0e      	ldr	r4, [pc, #56]	; (13694 <moveBy+0x48>)
   1365c:	7822      	ldrb	r2, [r4, #0]
   1365e:	2a01      	cmp	r2, #1
   13660:	d102      	bne.n	13668 <moveBy+0x1c>
			rampGenerator[motor].rampVelocity = tmc4671_getActualVelocity(motor);
   13662:	f00f fc02 	bl	22e6a <tmc4671_getActualVelocity>
   13666:	6128      	str	r0, [r5, #16]
		actualMotionMode[motor] = TMC4671_MOTION_MODE_POSITION;
   13668:	2103      	movs	r1, #3
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   1366a:	2000      	movs	r0, #0
		actualMotionMode[motor] = TMC4671_MOTION_MODE_POSITION;
   1366c:	7021      	strb	r1, [r4, #0]
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   1366e:	f00f fb07 	bl	22c80 <tmc4671_switchToMotionMode>
		rampGenerator[motor].targetPosition = (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL) + *ticks;
   13672:	216b      	movs	r1, #107	; 0x6b
   13674:	2000      	movs	r0, #0
   13676:	f00f fa9d 	bl	22bb4 <tmc4671_readInt>
   1367a:	6833      	ldr	r3, [r6, #0]
   1367c:	4403      	add	r3, r0
   1367e:	606b      	str	r3, [r5, #4]
	return TMC_ERROR_NONE;
   13680:	2000      	movs	r0, #0
}
   13682:	bd70      	pop	{r4, r5, r6, pc}
		tmc4671_setRelativeTargetPosition(motor, *ticks);
   13684:	6809      	ldr	r1, [r1, #0]
   13686:	f00f fc02 	bl	22e8e <tmc4671_setRelativeTargetPosition>
   1368a:	e7f9      	b.n	13680 <moveBy+0x34>
		return TMC_ERROR_MOTOR;
   1368c:	2008      	movs	r0, #8
   1368e:	e7f8      	b.n	13682 <moveBy+0x36>
   13690:	1fff64d8 	.word	0x1fff64d8
   13694:	1fff6528 	.word	0x1fff6528

00013698 <moveTo>:
{
   13698:	b570      	push	{r4, r5, r6, lr}
   1369a:	460e      	mov	r6, r1
	if(motor >= TMC4671_MOTORS)
   1369c:	b9a8      	cbnz	r0, 136ca <moveTo+0x32>
	if (rampGenerator[motor].rampEnabled)
   1369e:	4d0c      	ldr	r5, [pc, #48]	; (136d0 <moveTo+0x38>)
   136a0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   136a4:	b174      	cbz	r4, 136c4 <moveTo+0x2c>
		if (actualMotionMode[motor] == TMC4671_MOTION_MODE_TORQUE)
   136a6:	4c0b      	ldr	r4, [pc, #44]	; (136d4 <moveTo+0x3c>)
   136a8:	7822      	ldrb	r2, [r4, #0]
   136aa:	2a01      	cmp	r2, #1
   136ac:	d102      	bne.n	136b4 <moveTo+0x1c>
			rampGenerator[motor].rampVelocity = tmc4671_getActualVelocity(motor);
   136ae:	f00f fbdc 	bl	22e6a <tmc4671_getActualVelocity>
   136b2:	6128      	str	r0, [r5, #16]
		actualMotionMode[motor] = TMC4671_MOTION_MODE_POSITION;
   136b4:	2103      	movs	r1, #3
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   136b6:	2000      	movs	r0, #0
		actualMotionMode[motor] = TMC4671_MOTION_MODE_POSITION;
   136b8:	7021      	strb	r1, [r4, #0]
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   136ba:	f00f fae1 	bl	22c80 <tmc4671_switchToMotionMode>
		rampGenerator[motor].targetPosition = position;
   136be:	606e      	str	r6, [r5, #4]
   136c0:	2000      	movs	r0, #0
}
   136c2:	bd70      	pop	{r4, r5, r6, pc}
		tmc4671_setAbsolutTargetPosition(motor, position);
   136c4:	f00f fbd6 	bl	22e74 <tmc4671_setAbsolutTargetPosition>
   136c8:	e7fa      	b.n	136c0 <moveTo+0x28>
		return TMC_ERROR_MOTOR;
   136ca:	2008      	movs	r0, #8
   136cc:	e7f9      	b.n	136c2 <moveTo+0x2a>
   136ce:	bf00      	nop
   136d0:	1fff64d8 	.word	0x1fff64d8
   136d4:	1fff6528 	.word	0x1fff6528

000136d8 <rotate>:
{
   136d8:	b570      	push	{r4, r5, r6, lr}
   136da:	460e      	mov	r6, r1
	if(motor >= TMC4671_MOTORS)
   136dc:	b9a8      	cbnz	r0, 1370a <rotate+0x32>
	if (rampGenerator[motor].rampEnabled)
   136de:	4d0c      	ldr	r5, [pc, #48]	; (13710 <rotate+0x38>)
   136e0:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   136e4:	b174      	cbz	r4, 13704 <rotate+0x2c>
		if (actualMotionMode[motor] == TMC4671_MOTION_MODE_TORQUE)
   136e6:	4c0b      	ldr	r4, [pc, #44]	; (13714 <rotate+0x3c>)
   136e8:	7822      	ldrb	r2, [r4, #0]
   136ea:	2a01      	cmp	r2, #1
   136ec:	d102      	bne.n	136f4 <rotate+0x1c>
			rampGenerator[motor].rampVelocity = tmc4671_getActualVelocity(motor);
   136ee:	f00f fbbc 	bl	22e6a <tmc4671_getActualVelocity>
   136f2:	6128      	str	r0, [r5, #16]
		actualMotionMode[motor] = TMC4671_MOTION_MODE_VELOCITY;
   136f4:	2102      	movs	r1, #2
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_VELOCITY);
   136f6:	2000      	movs	r0, #0
		actualMotionMode[motor] = TMC4671_MOTION_MODE_VELOCITY;
   136f8:	7021      	strb	r1, [r4, #0]
		tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_VELOCITY);
   136fa:	f00f fac1 	bl	22c80 <tmc4671_switchToMotionMode>
		rampGenerator[motor].targetVelocity = velocity;
   136fe:	60ee      	str	r6, [r5, #12]
   13700:	2000      	movs	r0, #0
}
   13702:	bd70      	pop	{r4, r5, r6, pc}
		tmc4671_setTargetVelocity(motor, velocity);
   13704:	f00f fba1 	bl	22e4a <tmc4671_setTargetVelocity>
   13708:	e7fa      	b.n	13700 <rotate+0x28>
		return TMC_ERROR_MOTOR;
   1370a:	2008      	movs	r0, #8
   1370c:	e7f9      	b.n	13702 <rotate+0x2a>
   1370e:	bf00      	nop
   13710:	1fff64d8 	.word	0x1fff64d8
   13714:	1fff6528 	.word	0x1fff6528

00013718 <stop>:
	return rotate(motor, 0);
   13718:	2100      	movs	r1, #0
   1371a:	e7dd      	b.n	136d8 <rotate>

0001371c <left>:
	return rotate(motor, -velocity);
   1371c:	4249      	negs	r1, r1
   1371e:	e7db      	b.n	136d8 <rotate>

00013720 <right>:
	return rotate(motor, velocity);
   13720:	e7da      	b.n	136d8 <rotate>

00013722 <SAP>:
{
   13722:	b570      	push	{r4, r5, r6, lr}
   13724:	4615      	mov	r5, r2
	if(motor >= TMC4671_MOTORS)
   13726:	460c      	mov	r4, r1
   13728:	2900      	cmp	r1, #0
   1372a:	d165      	bne.n	137f8 <SAP+0xd6>
	switch(type)
   1372c:	28ac      	cmp	r0, #172	; 0xac
   1372e:	d043      	beq.n	137b8 <SAP+0x96>
   13730:	d811      	bhi.n	13756 <SAP+0x34>
   13732:	280d      	cmp	r0, #13
   13734:	d80b      	bhi.n	1374e <SAP+0x2c>
   13736:	2803      	cmp	r0, #3
   13738:	d90b      	bls.n	13752 <SAP+0x30>
   1373a:	1f06      	subs	r6, r0, #4
   1373c:	2e09      	cmp	r6, #9
   1373e:	d808      	bhi.n	13752 <SAP+0x30>
   13740:	e8df f006 	tbb	[pc, r6]
   13744:	0707071f 	.word	0x0707071f
   13748:	28070707 	.word	0x28070707
   1374c:	252f      	.short	0x252f
   1374e:	28ab      	cmp	r0, #171	; 0xab
   13750:	d02b      	beq.n	137aa <SAP+0x88>
		errors |= TMC_ERROR_TYPE;
   13752:	2404      	movs	r4, #4
   13754:	e01c      	b.n	13790 <SAP+0x6e>
	switch(type)
   13756:	28be      	cmp	r0, #190	; 0xbe
   13758:	d042      	beq.n	137e0 <SAP+0xbe>
   1375a:	d808      	bhi.n	1376e <SAP+0x4c>
   1375c:	28b3      	cmp	r0, #179	; 0xb3
   1375e:	d02e      	beq.n	137be <SAP+0x9c>
   13760:	28bd      	cmp	r0, #189	; 0xbd
   13762:	d1f6      	bne.n	13752 <SAP+0x30>
			tmc4671_setTargetTorque_raw(motor, *value);
   13764:	4611      	mov	r1, r2
   13766:	4620      	mov	r0, r4
   13768:	f00f fa9a 	bl	22ca0 <tmc4671_setTargetTorque_raw>
   1376c:	e010      	b.n	13790 <SAP+0x6e>
	switch(type)
   1376e:	28fb      	cmp	r0, #251	; 0xfb
   13770:	d03f      	beq.n	137f2 <SAP+0xd0>
   13772:	28fc      	cmp	r0, #252	; 0xfc
   13774:	d1ed      	bne.n	13752 <SAP+0x30>
			tmc4671_startEncoderInitialization(*value, &motorConfig[motor].initMode, &motorConfig[motor].initState);
   13776:	4a21      	ldr	r2, [pc, #132]	; (137fc <SAP+0xda>)
   13778:	b2e8      	uxtb	r0, r5
   1377a:	1c51      	adds	r1, r2, #1
   1377c:	f00f fc94 	bl	230a8 <tmc4671_startEncoderInitialization>
   13780:	e006      	b.n	13790 <SAP+0x6e>
			tmc4671_writeInt(motor, TMC4671_PID_VELOCITY_LIMIT, *value);
   13782:	2160      	movs	r1, #96	; 0x60
   13784:	2000      	movs	r0, #0
   13786:	f00f fa37 	bl	22bf8 <tmc4671_writeInt>
			rampGenerator[motor].maxVelocity = *value;
   1378a:	4b1d      	ldr	r3, [pc, #116]	; (13800 <SAP+0xde>)
   1378c:	601d      	str	r5, [r3, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1378e:	2400      	movs	r4, #0
}
   13790:	4620      	mov	r0, r4
   13792:	bd70      	pop	{r4, r5, r6, pc}
			tmc4671_writeInt(motor, TMC4671_PID_ACCELERATION_LIMIT, *value);
   13794:	215f      	movs	r1, #95	; 0x5f
   13796:	2000      	movs	r0, #0
   13798:	f00f fa2e 	bl	22bf8 <tmc4671_writeInt>
			rampGenerator[motor].acceleration = *value;
   1379c:	4b18      	ldr	r3, [pc, #96]	; (13800 <SAP+0xde>)
   1379e:	615d      	str	r5, [r3, #20]
   137a0:	e7f5      	b.n	1378e <SAP+0x6c>
			rampGenerator[motor].rampEnabled = *value;
   137a2:	4b17      	ldr	r3, [pc, #92]	; (13800 <SAP+0xde>)
   137a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   137a8:	e7f1      	b.n	1378e <SAP+0x6c>
			tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, *value);
   137aa:	b293      	uxth	r3, r2
   137ac:	2201      	movs	r2, #1
			tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, *value);
   137ae:	2164      	movs	r1, #100	; 0x64
   137b0:	4620      	mov	r0, r4
   137b2:	f00f fa4e 	bl	22c52 <tmc4671_writeRegister16BitValue>
   137b6:	e7eb      	b.n	13790 <SAP+0x6e>
   137b8:	b293      	uxth	r3, r2
   137ba:	460a      	mov	r2, r1
   137bc:	e7f7      	b.n	137ae <SAP+0x8c>
			tmc4671_writeInt(motor, TMC4671_PID_POSITION_ACTUAL, *value);
   137be:	216b      	movs	r1, #107	; 0x6b
   137c0:	4620      	mov	r0, r4
   137c2:	f00f fa19 	bl	22bf8 <tmc4671_writeInt>
			if (actualMotionMode[motor] == TMC4671_MOTION_MODE_POSITION)
   137c6:	4b0f      	ldr	r3, [pc, #60]	; (13804 <SAP+0xe2>)
   137c8:	781b      	ldrb	r3, [r3, #0]
   137ca:	2b03      	cmp	r3, #3
   137cc:	d1e0      	bne.n	13790 <SAP+0x6e>
				rampGenerator[motor].targetPosition = *value;
   137ce:	4b0c      	ldr	r3, [pc, #48]	; (13800 <SAP+0xde>)
				tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, *value);
   137d0:	462a      	mov	r2, r5
				rampGenerator[motor].rampPosition = *value;
   137d2:	e9c3 5501 	strd	r5, r5, [r3, #4]
				tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, *value);
   137d6:	2168      	movs	r1, #104	; 0x68
   137d8:	4620      	mov	r0, r4
   137da:	f00f fa0d 	bl	22bf8 <tmc4671_writeInt>
   137de:	e7d7      	b.n	13790 <SAP+0x6e>
			tmc4671_setTargetTorque_mA(motor, motorConfig[motor].torqueMeasurementFactor, *value);
   137e0:	4b09      	ldr	r3, [pc, #36]	; (13808 <SAP+0xe6>)
   137e2:	4620      	mov	r0, r4
   137e4:	8919      	ldrh	r1, [r3, #8]
   137e6:	f00f fa88 	bl	22cfa <tmc4671_setTargetTorque_mA>
			actualMotionMode[motor] = TMC4671_MOTION_MODE_TORQUE;
   137ea:	4b06      	ldr	r3, [pc, #24]	; (13804 <SAP+0xe2>)
   137ec:	2201      	movs	r2, #1
   137ee:	701a      	strb	r2, [r3, #0]
   137f0:	e7ce      	b.n	13790 <SAP+0x6e>
			motorConfig[motor].torqueMeasurementFactor = *value;
   137f2:	4b05      	ldr	r3, [pc, #20]	; (13808 <SAP+0xe6>)
   137f4:	811a      	strh	r2, [r3, #8]
   137f6:	e7cb      	b.n	13790 <SAP+0x6e>
		return TMC_ERROR_MOTOR;
   137f8:	2408      	movs	r4, #8
   137fa:	e7c9      	b.n	13790 <SAP+0x6e>
   137fc:	1fff6506 	.word	0x1fff6506
   13800:	1fff64d8 	.word	0x1fff64d8
   13804:	1fff6528 	.word	0x1fff6528
   13808:	1fff6500 	.word	0x1fff6500

0001380c <GAP>:
{
   1380c:	b538      	push	{r3, r4, r5, lr}
   1380e:	4615      	mov	r5, r2
	if(motor >= TMC4671_MOTORS)
   13810:	2900      	cmp	r1, #0
   13812:	f040 80b9 	bne.w	13988 <GAP+0x17c>
	switch(type)
   13816:	28c0      	cmp	r0, #192	; 0xc0
   13818:	d854      	bhi.n	138c4 <GAP+0xb8>
   1381a:	28aa      	cmp	r0, #170	; 0xaa
   1381c:	d805      	bhi.n	1382a <GAP+0x1e>
   1381e:	3804      	subs	r0, #4
   13820:	b2c3      	uxtb	r3, r0
   13822:	2b09      	cmp	r3, #9
   13824:	d934      	bls.n	13890 <GAP+0x84>
   13826:	2004      	movs	r0, #4
	return handleParameter(READ, motor, type, value);
   13828:	e05f      	b.n	138ea <GAP+0xde>
   1382a:	38ab      	subs	r0, #171	; 0xab
   1382c:	2815      	cmp	r0, #21
   1382e:	d8fa      	bhi.n	13826 <GAP+0x1a>
   13830:	a301      	add	r3, pc, #4	; (adr r3, 13838 <GAP+0x2c>)
   13832:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   13836:	bf00      	nop
   13838:	00013913 	.word	0x00013913
   1383c:	00013923 	.word	0x00013923
   13840:	00013927 	.word	0x00013927
   13844:	00013931 	.word	0x00013931
   13848:	00013827 	.word	0x00013827
   1384c:	00013935 	.word	0x00013935
   13850:	00013827 	.word	0x00013827
   13854:	0001393d 	.word	0x0001393d
   13858:	00013943 	.word	0x00013943
   1385c:	00013827 	.word	0x00013827
   13860:	00013827 	.word	0x00013827
   13864:	00013827 	.word	0x00013827
   13868:	00013827 	.word	0x00013827
   1386c:	00013827 	.word	0x00013827
   13870:	00013827 	.word	0x00013827
   13874:	00013827 	.word	0x00013827
   13878:	00013827 	.word	0x00013827
   1387c:	00013827 	.word	0x00013827
   13880:	0001394b 	.word	0x0001394b
   13884:	00013953 	.word	0x00013953
   13888:	0001395f 	.word	0x0001395f
   1388c:	0001396d 	.word	0x0001396d
   13890:	2809      	cmp	r0, #9
   13892:	d8c8      	bhi.n	13826 <GAP+0x1a>
   13894:	a301      	add	r3, pc, #4	; (adr r3, 1389c <GAP+0x90>)
   13896:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1389a:	bf00      	nop
   1389c:	000138db 	.word	0x000138db
   138a0:	00013827 	.word	0x00013827
   138a4:	00013827 	.word	0x00013827
   138a8:	00013827 	.word	0x00013827
   138ac:	00013827 	.word	0x00013827
   138b0:	00013827 	.word	0x00013827
   138b4:	00013827 	.word	0x00013827
   138b8:	000138ed 	.word	0x000138ed
   138bc:	000138fd 	.word	0x000138fd
   138c0:	00013907 	.word	0x00013907
	switch(type)
   138c4:	1d43      	adds	r3, r0, #5
   138c6:	b2db      	uxtb	r3, r3
   138c8:	2b03      	cmp	r3, #3
   138ca:	d8ac      	bhi.n	13826 <GAP+0x1a>
   138cc:	38fb      	subs	r0, #251	; 0xfb
   138ce:	2803      	cmp	r0, #3
   138d0:	d8a9      	bhi.n	13826 <GAP+0x1a>
   138d2:	e8df f000 	tbb	[pc, r0]
   138d6:	504d      	.short	0x504d
   138d8:	5653      	.short	0x5653
			*value = (uint32_t) tmc4671_readInt(motor, TMC4671_PID_VELOCITY_LIMIT);
   138da:	2160      	movs	r1, #96	; 0x60
   138dc:	2000      	movs	r0, #0
   138de:	f00f f969 	bl	22bb4 <tmc4671_readInt>
			rampGenerator[motor].maxVelocity = *value;
   138e2:	4b2a      	ldr	r3, [pc, #168]	; (1398c <GAP+0x180>)
			*value = (uint32_t) tmc4671_readInt(motor, TMC4671_PID_VELOCITY_LIMIT);
   138e4:	6028      	str	r0, [r5, #0]
			rampGenerator[motor].maxVelocity = *value;
   138e6:	6018      	str	r0, [r3, #0]
	uint32_t errors = TMC_ERROR_NONE;
   138e8:	2000      	movs	r0, #0
}
   138ea:	bd38      	pop	{r3, r4, r5, pc}
			*value = (uint32_t) tmc4671_readInt(motor, TMC4671_PID_ACCELERATION_LIMIT);
   138ec:	215f      	movs	r1, #95	; 0x5f
   138ee:	2000      	movs	r0, #0
   138f0:	f00f f960 	bl	22bb4 <tmc4671_readInt>
			rampGenerator[motor].acceleration = *value;
   138f4:	4b25      	ldr	r3, [pc, #148]	; (1398c <GAP+0x180>)
			*value = (uint32_t) tmc4671_readInt(motor, TMC4671_PID_ACCELERATION_LIMIT);
   138f6:	6028      	str	r0, [r5, #0]
			rampGenerator[motor].acceleration = *value;
   138f8:	6158      	str	r0, [r3, #20]
   138fa:	e7f5      	b.n	138e8 <GAP+0xdc>
			*value = rampGenerator[motor].rampEnabled;
   138fc:	4b23      	ldr	r3, [pc, #140]	; (1398c <GAP+0x180>)
   138fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
			*value = motorConfig[motor].actualInitWaitTime;
   13902:	602b      	str	r3, [r5, #0]
   13904:	e7f0      	b.n	138e8 <GAP+0xdc>
			if (rampGenerator[motor].rampEnabled)
   13906:	4b21      	ldr	r3, [pc, #132]	; (1398c <GAP+0x180>)
   13908:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
   1390c:	b15c      	cbz	r4, 13926 <GAP+0x11a>
				*value = rampGenerator[motor].rampVelocity;
   1390e:	691b      	ldr	r3, [r3, #16]
   13910:	e7f7      	b.n	13902 <GAP+0xf6>
			*value = (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31);
   13912:	2201      	movs	r2, #1
   13914:	2164      	movs	r1, #100	; 0x64
   13916:	2000      	movs	r0, #0
   13918:	f00f f98e 	bl	22c38 <tmc4671_readRegister16BitValue>
   1391c:	b200      	sxth	r0, r0
			*value = tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   1391e:	6028      	str	r0, [r5, #0]
   13920:	e7e2      	b.n	138e8 <GAP+0xdc>
			*value = (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15);
   13922:	2200      	movs	r2, #0
   13924:	e7f6      	b.n	13914 <GAP+0x108>
			*value = (int32_t) tmc4671_readInt(motor, TMC4671_PID_VELOCITY_TARGET);
   13926:	2166      	movs	r1, #102	; 0x66
			*value = tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   13928:	2000      	movs	r0, #0
   1392a:	f00f f943 	bl	22bb4 <tmc4671_readInt>
   1392e:	e7f6      	b.n	1391e <GAP+0x112>
			*value = (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_TARGET);
   13930:	2168      	movs	r1, #104	; 0x68
   13932:	e7f9      	b.n	13928 <GAP+0x11c>
			*value = motorConfig[motor].actualTorquePT1;
   13934:	4b16      	ldr	r3, [pc, #88]	; (13990 <GAP+0x184>)
   13936:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
   1393a:	e7e2      	b.n	13902 <GAP+0xf6>
			*value = motorConfig[motor].actualVelocityPT1;
   1393c:	4b14      	ldr	r3, [pc, #80]	; (13990 <GAP+0x184>)
   1393e:	68db      	ldr	r3, [r3, #12]
   13940:	e7df      	b.n	13902 <GAP+0xf6>
			*value = tmc4671_getActualPosition(motor);
   13942:	2000      	movs	r0, #0
   13944:	f00f fabb 	bl	22ebe <tmc4671_getActualPosition>
   13948:	e7e9      	b.n	1391e <GAP+0x112>
			*value = tmc4671_getTargetTorque_raw(motor);
   1394a:	2000      	movs	r0, #0
   1394c:	f00f f9b6 	bl	22cbc <tmc4671_getTargetTorque_raw>
   13950:	e7e5      	b.n	1391e <GAP+0x112>
			*value = tmc4671_getTargetTorque_mA(motor, motorConfig[motor].torqueMeasurementFactor);
   13952:	4b0f      	ldr	r3, [pc, #60]	; (13990 <GAP+0x184>)
   13954:	2000      	movs	r0, #0
   13956:	8919      	ldrh	r1, [r3, #8]
   13958:	f00f f9e1 	bl	22d1e <tmc4671_getTargetTorque_mA>
   1395c:	e7df      	b.n	1391e <GAP+0x112>
			tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 1);
   1395e:	2201      	movs	r2, #1
			tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 2);
   13960:	216f      	movs	r1, #111	; 0x6f
   13962:	2000      	movs	r0, #0
   13964:	f00f f948 	bl	22bf8 <tmc4671_writeInt>
			*value = tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   13968:	216e      	movs	r1, #110	; 0x6e
   1396a:	e7dd      	b.n	13928 <GAP+0x11c>
			tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 2);
   1396c:	2202      	movs	r2, #2
   1396e:	e7f7      	b.n	13960 <GAP+0x154>
			*value = motorConfig[motor].torqueMeasurementFactor;
   13970:	4b07      	ldr	r3, [pc, #28]	; (13990 <GAP+0x184>)
   13972:	891b      	ldrh	r3, [r3, #8]
   13974:	e7c5      	b.n	13902 <GAP+0xf6>
			*value = motorConfig[motor].initMode;
   13976:	4b06      	ldr	r3, [pc, #24]	; (13990 <GAP+0x184>)
   13978:	79db      	ldrb	r3, [r3, #7]
   1397a:	e7c2      	b.n	13902 <GAP+0xf6>
			*value = motorConfig[motor].initState;
   1397c:	4b04      	ldr	r3, [pc, #16]	; (13990 <GAP+0x184>)
   1397e:	799b      	ldrb	r3, [r3, #6]
   13980:	e7bf      	b.n	13902 <GAP+0xf6>
			*value = motorConfig[motor].actualInitWaitTime;
   13982:	4b03      	ldr	r3, [pc, #12]	; (13990 <GAP+0x184>)
   13984:	889b      	ldrh	r3, [r3, #4]
   13986:	e7bc      	b.n	13902 <GAP+0xf6>
		return TMC_ERROR_MOTOR;
   13988:	2008      	movs	r0, #8
   1398a:	e7ae      	b.n	138ea <GAP+0xde>
   1398c:	1fff64d8 	.word	0x1fff64d8
   13990:	1fff6500 	.word	0x1fff6500

00013994 <tmc4671_readwriteByte>:
{
   13994:	4603      	mov	r3, r0
   13996:	4608      	mov	r0, r1
   13998:	4611      	mov	r1, r2
	if (motor == DEFAULT_MOTOR)
   1399a:	b91b      	cbnz	r3, 139a4 <tmc4671_readwriteByte+0x10>
		return TMC4671_SPIChannel->readWrite(data, lastTransfer);
   1399c:	4b02      	ldr	r3, [pc, #8]	; (139a8 <tmc4671_readwriteByte+0x14>)
   1399e:	689b      	ldr	r3, [r3, #8]
   139a0:	689b      	ldr	r3, [r3, #8]
   139a2:	4718      	bx	r3
}
   139a4:	2000      	movs	r0, #0
   139a6:	4770      	bx	lr
   139a8:	1fff317c 	.word	0x1fff317c

000139ac <TMC4671_init>:

void TMC4671_init(void)
{
   139ac:	b570      	push	{r4, r5, r6, lr}
	// configure ENABLE-PIN for TMC4671
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   139ae:	4e44      	ldr	r6, [pc, #272]	; (13ac0 <TMC4671_init+0x114>)
   139b0:	4d44      	ldr	r5, [pc, #272]	; (13ac4 <TMC4671_init+0x118>)
   139b2:	68f4      	ldr	r4, [r6, #12]
   139b4:	6860      	ldr	r0, [r4, #4]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   139b6:	6823      	ldr	r3, [r4, #0]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   139b8:	3068      	adds	r0, #104	; 0x68
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   139ba:	68db      	ldr	r3, [r3, #12]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   139bc:	6028      	str	r0, [r5, #0]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   139be:	4798      	blx	r3
	enableDriver(DRIVER_ENABLE);
   139c0:	2001      	movs	r0, #1
   139c2:	f7ff fd7b 	bl	134bc <enableDriver>

	TMC4671_SPIChannel = &HAL.SPI->ch1;
	TMC4671_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   139c6:	6863      	ldr	r3, [r4, #4]
	TMC4671_SPIChannel = &HAL.SPI->ch1;
   139c8:	6932      	ldr	r2, [r6, #16]
   139ca:	60aa      	str	r2, [r5, #8]
	TMC4671_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   139cc:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   139d0:	6053      	str	r3, [r2, #4]

	TMC4671_config = Evalboards.ch1.config;
   139d2:	4b3d      	ldr	r3, [pc, #244]	; (13ac8 <TMC4671_init+0x11c>)

	// connect evalboard functions
	Evalboards.ch1.config->reset        = reset;
   139d4:	493d      	ldr	r1, [pc, #244]	; (13acc <TMC4671_init+0x120>)
	TMC4671_config = Evalboards.ch1.config;
   139d6:	699a      	ldr	r2, [r3, #24]

#ifdef USE_LINEAR_RAMP
	// init ramp generator
	for (motor = 0; motor < TMC4671_MOTORS; motor++)
	{
		tmc_linearRamp_init(&rampGenerator[motor]);
   139d8:	4d3d      	ldr	r5, [pc, #244]	; (13ad0 <TMC4671_init+0x124>)
	Evalboards.ch1.config->reset        = reset;
   139da:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   139de:	493d      	ldr	r1, [pc, #244]	; (13ad4 <TMC4671_init+0x128>)
   139e0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   139e4:	2101      	movs	r1, #1
   139e6:	8011      	strh	r1, [r2, #0]
	Evalboards.ch1.rotate               = rotate;
   139e8:	4a3b      	ldr	r2, [pc, #236]	; (13ad8 <TMC4671_init+0x12c>)
   139ea:	625a      	str	r2, [r3, #36]	; 0x24
	Evalboards.ch1.right                = right;
   139ec:	4a3b      	ldr	r2, [pc, #236]	; (13adc <TMC4671_init+0x130>)
   139ee:	621a      	str	r2, [r3, #32]
	Evalboards.ch1.left                 = left;
   139f0:	4a3b      	ldr	r2, [pc, #236]	; (13ae0 <TMC4671_init+0x134>)
   139f2:	61da      	str	r2, [r3, #28]
	Evalboards.ch1.stop                 = stop;
   139f4:	4a3b      	ldr	r2, [pc, #236]	; (13ae4 <TMC4671_init+0x138>)
   139f6:	629a      	str	r2, [r3, #40]	; 0x28
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   139f8:	4a3b      	ldr	r2, [pc, #236]	; (13ae8 <TMC4671_init+0x13c>)
   139fa:	651a      	str	r2, [r3, #80]	; 0x50
	Evalboards.ch1.GAP                  = GAP;
   139fc:	4a3b      	ldr	r2, [pc, #236]	; (13aec <TMC4671_init+0x140>)
   139fe:	63da      	str	r2, [r3, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   13a00:	4a3b      	ldr	r2, [pc, #236]	; (13af0 <TMC4671_init+0x144>)
   13a02:	639a      	str	r2, [r3, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   13a04:	4a3b      	ldr	r2, [pc, #236]	; (13af4 <TMC4671_init+0x148>)
   13a06:	62da      	str	r2, [r3, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   13a08:	4a3b      	ldr	r2, [pc, #236]	; (13af8 <TMC4671_init+0x14c>)
   13a0a:	631a      	str	r2, [r3, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   13a0c:	4a3b      	ldr	r2, [pc, #236]	; (13afc <TMC4671_init+0x150>)
   13a0e:	64da      	str	r2, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   13a10:	4a3b      	ldr	r2, [pc, #236]	; (13b00 <TMC4671_init+0x154>)
   13a12:	649a      	str	r2, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   13a14:	4a3b      	ldr	r2, [pc, #236]	; (13b04 <TMC4671_init+0x158>)
   13a16:	659a      	str	r2, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   13a18:	4a3b      	ldr	r2, [pc, #236]	; (13b08 <TMC4671_init+0x15c>)
   13a1a:	655a      	str	r2, [r3, #84]	; 0x54
	Evalboards.ch1.enableDriver         = enableDriver;
   13a1c:	4a3b      	ldr	r2, [pc, #236]	; (13b0c <TMC4671_init+0x160>)
   13a1e:	665a      	str	r2, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   13a20:	4a3b      	ldr	r2, [pc, #236]	; (13b10 <TMC4671_init+0x164>)
   13a22:	661a      	str	r2, [r3, #96]	; 0x60
	Evalboards.ch1.deInit               = deInit;
   13a24:	4a3b      	ldr	r2, [pc, #236]	; (13b14 <TMC4671_init+0x168>)
	Evalboards.ch1.numberOfMotors       = TMC4671_MOTORS;
   13a26:	7519      	strb	r1, [r3, #20]
	Evalboards.ch1.deInit               = deInit;
   13a28:	65da      	str	r2, [r3, #92]	; 0x5c
	Evalboards.ch1.VMMax                = 650;
   13a2a:	2146      	movs	r1, #70	; 0x46
   13a2c:	f240 228a 	movw	r2, #650	; 0x28a
   13a30:	e9c3 2103 	strd	r2, r1, [r3, #12]
		motorConfig[motor].startVoltage             = 6000;
   13a34:	4b38      	ldr	r3, [pc, #224]	; (13b18 <TMC4671_init+0x16c>)
   13a36:	4a39      	ldr	r2, [pc, #228]	; (13b1c <TMC4671_init+0x170>)
   13a38:	601a      	str	r2, [r3, #0]
		motorConfig[motor].initMode                 = 0;
   13a3a:	2400      	movs	r4, #0
		motorConfig[motor].akkuActualVelocity       = 0;
   13a3c:	2000      	movs	r0, #0
   13a3e:	2100      	movs	r1, #0
		motorConfig[motor].torqueMeasurementFactor  = 256;
   13a40:	f44f 7280 	mov.w	r2, #256	; 0x100
		motorConfig[motor].akkuActualVelocity       = 0;
   13a44:	e9c3 0104 	strd	r0, r1, [r3, #16]
		motorConfig[motor].torqueMeasurementFactor  = 256;
   13a48:	811a      	strh	r2, [r3, #8]
		motorConfig[motor].initMode                 = 0;
   13a4a:	71dc      	strb	r4, [r3, #7]
		motorConfig[motor].actualVelocityPT1		= 0;
   13a4c:	60dc      	str	r4, [r3, #12]
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PWM_POLARITIES, 0x0);
   13a4e:	4622      	mov	r2, r4
		motorConfig[motor].actualTorquePT1			= 0;
   13a50:	831c      	strh	r4, [r3, #24]
		motorConfig[motor].akkuActualTorque         = 0;
   13a52:	e9c3 0108 	strd	r0, r1, [r3, #32]
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PWM_POLARITIES, 0x0);
   13a56:	2117      	movs	r1, #23
   13a58:	4620      	mov	r0, r4
   13a5a:	f00f f8cd 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PWM_SV_CHOP, 0x0);
   13a5e:	4622      	mov	r2, r4
   13a60:	211a      	movs	r1, #26
   13a62:	4620      	mov	r0, r4
   13a64:	f00f f8c8 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PWM_BBM_H_BBM_L, 0x00001919);
   13a68:	f641 1219 	movw	r2, #6425	; 0x1919
   13a6c:	2119      	movs	r1, #25
   13a6e:	4620      	mov	r0, r4
   13a70:	f00f f8c2 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_dsADC_MCLK_B, 0x0);
   13a74:	4622      	mov	r2, r4
   13a76:	2106      	movs	r1, #6
   13a78:	4620      	mov	r0, r4
   13a7a:	f00f f8bd 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PID_ACCELERATION_LIMIT, 2000);
   13a7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   13a82:	215f      	movs	r1, #95	; 0x5f
   13a84:	4620      	mov	r0, r4
   13a86:	f00f f8b7 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(DEFAULT_MOTOR, TMC4671_PID_VELOCITY_LIMIT, 4000);
   13a8a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   13a8e:	2160      	movs	r1, #96	; 0x60
   13a90:	4620      	mov	r0, r4
   13a92:	f00f f8b1 	bl	22bf8 <tmc4671_writeInt>
		tmc_linearRamp_init(&rampGenerator[motor]);
   13a96:	4628      	mov	r0, r5
   13a98:	f00c fb0c 	bl	200b4 <tmc_linearRamp_init>
		actualMotionMode[motor] = TMC4671_MOTION_MODE_STOPPED;
   13a9c:	4b20      	ldr	r3, [pc, #128]	; (13b20 <TMC4671_init+0x174>)
   13a9e:	701c      	strb	r4, [r3, #0]
		lastRampTargetPosition[motor] = 0;
   13aa0:	4b20      	ldr	r3, [pc, #128]	; (13b24 <TMC4671_init+0x178>)
   13aa2:	601c      	str	r4, [r3, #0]
		lastRampTargetVelocity[motor] = 0;
   13aa4:	4b20      	ldr	r3, [pc, #128]	; (13b28 <TMC4671_init+0x17c>)

		// update ramp generator default values
		rampGenerator[motor].maxVelocity = (uint32_t)tmc4671_readInt(motor, TMC4671_PID_VELOCITY_LIMIT);
   13aa6:	2160      	movs	r1, #96	; 0x60
   13aa8:	4620      	mov	r0, r4
		lastRampTargetVelocity[motor] = 0;
   13aaa:	601c      	str	r4, [r3, #0]
		rampGenerator[motor].maxVelocity = (uint32_t)tmc4671_readInt(motor, TMC4671_PID_VELOCITY_LIMIT);
   13aac:	f00f f882 	bl	22bb4 <tmc4671_readInt>
		rampGenerator[motor].acceleration = (uint32_t)tmc4671_readInt(motor, TMC4671_PID_ACCELERATION_LIMIT);
   13ab0:	215f      	movs	r1, #95	; 0x5f
		rampGenerator[motor].maxVelocity = (uint32_t)tmc4671_readInt(motor, TMC4671_PID_VELOCITY_LIMIT);
   13ab2:	6028      	str	r0, [r5, #0]
		rampGenerator[motor].acceleration = (uint32_t)tmc4671_readInt(motor, TMC4671_PID_ACCELERATION_LIMIT);
   13ab4:	4620      	mov	r0, r4
   13ab6:	f00f f87d 	bl	22bb4 <tmc4671_readInt>
   13aba:	6168      	str	r0, [r5, #20]
	}
#endif
}
   13abc:	bd70      	pop	{r4, r5, r6, pc}
   13abe:	bf00      	nop
   13ac0:	00029d1c 	.word	0x00029d1c
   13ac4:	1fff317c 	.word	0x1fff317c
   13ac8:	1fff5e88 	.word	0x1fff5e88
   13acc:	00013487 	.word	0x00013487
   13ad0:	1fff64d8 	.word	0x1fff64d8
   13ad4:	000134ad 	.word	0x000134ad
   13ad8:	000136d9 	.word	0x000136d9
   13adc:	00013721 	.word	0x00013721
   13ae0:	0001371d 	.word	0x0001371d
   13ae4:	00013719 	.word	0x00013719
   13ae8:	00013521 	.word	0x00013521
   13aec:	0001380d 	.word	0x0001380d
   13af0:	00013723 	.word	0x00013723
   13af4:	00013699 	.word	0x00013699
   13af8:	0001364d 	.word	0x0001364d
   13afc:	00013481 	.word	0x00013481
   13b00:	000134af 	.word	0x000134af
   13b04:	00013537 	.word	0x00013537
   13b08:	00013471 	.word	0x00013471
   13b0c:	000134bd 	.word	0x000134bd
   13b10:	00013475 	.word	0x00013475
   13b14:	000134fd 	.word	0x000134fd
   13b18:	1fff6500 	.word	0x1fff6500
   13b1c:	03e81770 	.word	0x03e81770
   13b20:	1fff6528 	.word	0x1fff6528
   13b24:	1fff6530 	.word	0x1fff6530
   13b28:	1fff652c 	.word	0x1fff652c

00013b2c <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= MOTORS)
   13b2c:	2801      	cmp	r0, #1
   13b2e:	d80c      	bhi.n	13b4a <getMeasuredSpeed+0x1e>
		return TMC_ERROR_MOTOR;

	*value = TMC5031_config->shadowRegister[TMC5031_VACTUAL(motor)];
   13b30:	4b07      	ldr	r3, [pc, #28]	; (13b50 <getMeasuredSpeed+0x24>)
   13b32:	681a      	ldr	r2, [r3, #0]
   13b34:	2320      	movs	r3, #32
   13b36:	fa03 f000 	lsl.w	r0, r3, r0
   13b3a:	f040 0002 	orr.w	r0, r0, #2
   13b3e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   13b42:	6843      	ldr	r3, [r0, #4]
   13b44:	600b      	str	r3, [r1, #0]

	return TMC_ERROR_NONE;
   13b46:	2000      	movs	r0, #0
   13b48:	4770      	bx	lr
		return TMC_ERROR_MOTOR;
   13b4a:	2008      	movs	r0, #8
}
   13b4c:	4770      	bx	lr
   13b4e:	bf00      	nop
   13b50:	1fff3194 	.word	0x1fff3194

00013b54 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   13b54:	4b01      	ldr	r3, [pc, #4]	; (13b5c <checkErrors+0x8>)
   13b56:	2200      	movs	r2, #0
   13b58:	609a      	str	r2, [r3, #8]
}
   13b5a:	4770      	bx	lr
   13b5c:	1fff5e88 	.word	0x1fff5e88

00013b60 <periodicJob>:
{
   13b60:	b570      	push	{r4, r5, r6, lr}
		tmc5031_periodicJob(motor, tick, &TMC5031, TMC5031_config);
   13b62:	4e09      	ldr	r6, [pc, #36]	; (13b88 <periodicJob+0x28>)
   13b64:	4635      	mov	r5, r6
{
   13b66:	4604      	mov	r4, r0
		tmc5031_periodicJob(motor, tick, &TMC5031, TMC5031_config);
   13b68:	f855 3b04 	ldr.w	r3, [r5], #4
   13b6c:	4601      	mov	r1, r0
   13b6e:	462a      	mov	r2, r5
   13b70:	2000      	movs	r0, #0
   13b72:	f00f fb8c 	bl	2328e <tmc5031_periodicJob>
   13b76:	6833      	ldr	r3, [r6, #0]
   13b78:	462a      	mov	r2, r5
   13b7a:	4621      	mov	r1, r4
   13b7c:	2001      	movs	r0, #1
}
   13b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		tmc5031_periodicJob(motor, tick, &TMC5031, TMC5031_config);
   13b82:	f00f bb84 	b.w	2328e <tmc5031_periodicJob>
   13b86:	bf00      	nop
   13b88:	1fff3194 	.word	0x1fff3194

00013b8c <restore>:
	return tmc5031_reset(TMC5031_config);
}

static uint8_t restore()
{
	return tmc5031_restore(TMC5031_config);
   13b8c:	4b01      	ldr	r3, [pc, #4]	; (13b94 <restore+0x8>)
   13b8e:	6818      	ldr	r0, [r3, #0]
   13b90:	f00f bbdd 	b.w	2334e <tmc5031_restore>
   13b94:	1fff3194 	.word	0x1fff3194

00013b98 <userFunction>:
	switch(type)
   13b98:	2801      	cmp	r0, #1
{
   13b9a:	b538      	push	{r3, r4, r5, lr}
   13b9c:	4614      	mov	r4, r2
	switch(type)
   13b9e:	d010      	beq.n	13bc2 <userFunction+0x2a>
   13ba0:	2802      	cmp	r0, #2
   13ba2:	d01b      	beq.n	13bdc <userFunction+0x44>
   13ba4:	bb10      	cbnz	r0, 13bec <userFunction+0x54>
		if(*value)
   13ba6:	4b12      	ldr	r3, [pc, #72]	; (13bf0 <userFunction+0x58>)
   13ba8:	4a12      	ldr	r2, [pc, #72]	; (13bf4 <userFunction+0x5c>)
   13baa:	68db      	ldr	r3, [r3, #12]
   13bac:	6824      	ldr	r4, [r4, #0]
   13bae:	681b      	ldr	r3, [r3, #0]
   13bb0:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
   13bb4:	b11c      	cbz	r4, 13bbe <userFunction+0x26>
			HAL.IOs->config->setHigh(Pins.SWSEL);
   13bb6:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->setLow(Pins.SWSEL);
   13bb8:	4798      	blx	r3
	uint32_t errors = 0;
   13bba:	2000      	movs	r0, #0
}
   13bbc:	bd38      	pop	{r3, r4, r5, pc}
			HAL.IOs->config->setLow(Pins.SWSEL);
   13bbe:	699b      	ldr	r3, [r3, #24]
   13bc0:	e7fa      	b.n	13bb8 <userFunction+0x20>
		*value = (HAL.IOs->config->isHigh(Pins.INT_ENCA))? 1 : 0;
   13bc2:	4b0b      	ldr	r3, [pc, #44]	; (13bf0 <userFunction+0x58>)
   13bc4:	4a0b      	ldr	r2, [pc, #44]	; (13bf4 <userFunction+0x5c>)
   13bc6:	68db      	ldr	r3, [r3, #12]
   13bc8:	f8d2 02a0 	ldr.w	r0, [r2, #672]	; 0x2a0
   13bcc:	681b      	ldr	r3, [r3, #0]
   13bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
   13bd0:	4798      	blx	r3
   13bd2:	3800      	subs	r0, #0
   13bd4:	bf18      	it	ne
   13bd6:	2001      	movne	r0, #1
   13bd8:	6020      	str	r0, [r4, #0]
   13bda:	e7ee      	b.n	13bba <userFunction+0x22>
   13bdc:	4b04      	ldr	r3, [pc, #16]	; (13bf0 <userFunction+0x58>)
   13bde:	4a05      	ldr	r2, [pc, #20]	; (13bf4 <userFunction+0x5c>)
   13be0:	68db      	ldr	r3, [r3, #12]
   13be2:	f8d2 02a4 	ldr.w	r0, [r2, #676]	; 0x2a4
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13bea:	e7f1      	b.n	13bd0 <userFunction+0x38>
	switch(type)
   13bec:	2004      	movs	r0, #4
	return errors;
   13bee:	e7e5      	b.n	13bbc <userFunction+0x24>
   13bf0:	00029d1c 	.word	0x00029d1c
   13bf4:	1fff3194 	.word	0x1fff3194

00013bf8 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   13bf8:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   13bfa:	bf04      	itt	eq
   13bfc:	4b0c      	ldreq	r3, [pc, #48]	; (13c30 <enableDriver+0x38>)
   13bfe:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   13c02:	b938      	cbnz	r0, 13c14 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
   13c04:	4b0b      	ldr	r3, [pc, #44]	; (13c34 <enableDriver+0x3c>)
   13c06:	68db      	ldr	r3, [r3, #12]
   13c08:	681b      	ldr	r3, [r3, #0]
   13c0a:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   13c0c:	4a0a      	ldr	r2, [pc, #40]	; (13c38 <enableDriver+0x40>)
   13c0e:	f8d2 029c 	ldr.w	r0, [r2, #668]	; 0x29c
   13c12:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   13c14:	2801      	cmp	r0, #1
   13c16:	d109      	bne.n	13c2c <enableDriver+0x34>
   13c18:	4b05      	ldr	r3, [pc, #20]	; (13c30 <enableDriver+0x38>)
   13c1a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   13c1e:	2b01      	cmp	r3, #1
   13c20:	d104      	bne.n	13c2c <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   13c22:	4b04      	ldr	r3, [pc, #16]	; (13c34 <enableDriver+0x3c>)
   13c24:	68db      	ldr	r3, [r3, #12]
   13c26:	681b      	ldr	r3, [r3, #0]
   13c28:	699b      	ldr	r3, [r3, #24]
   13c2a:	e7ef      	b.n	13c0c <enableDriver+0x14>
}
   13c2c:	4770      	bx	lr
   13c2e:	bf00      	nop
   13c30:	1fff5e88 	.word	0x1fff5e88
   13c34:	00029d1c 	.word	0x00029d1c
   13c38:	1fff3194 	.word	0x1fff3194

00013c3c <deInit>:
{
   13c3c:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
   13c3e:	2000      	movs	r0, #0
   13c40:	f7ff ffda 	bl	13bf8 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
   13c44:	4b13      	ldr	r3, [pc, #76]	; (13c94 <deInit+0x58>)
   13c46:	4c14      	ldr	r4, [pc, #80]	; (13c98 <deInit+0x5c>)
   13c48:	68dd      	ldr	r5, [r3, #12]
   13c4a:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   13c4e:	682b      	ldr	r3, [r5, #0]
   13c50:	689b      	ldr	r3, [r3, #8]
   13c52:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INT_ENCA);
   13c54:	682b      	ldr	r3, [r5, #0]
   13c56:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   13c5a:	689b      	ldr	r3, [r3, #8]
   13c5c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.PP_ENCB);
   13c5e:	682b      	ldr	r3, [r5, #0]
   13c60:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   13c64:	689b      	ldr	r3, [r3, #8]
   13c66:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWION);
   13c68:	682b      	ldr	r3, [r5, #0]
   13c6a:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   13c6e:	689b      	ldr	r3, [r3, #8]
   13c70:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP1);
   13c72:	682b      	ldr	r3, [r5, #0]
   13c74:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   13c78:	689b      	ldr	r3, [r3, #8]
   13c7a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP2);
   13c7c:	682b      	ldr	r3, [r5, #0]
   13c7e:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   13c82:	689b      	ldr	r3, [r3, #8]
   13c84:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWSEL);
   13c86:	682b      	ldr	r3, [r5, #0]
   13c88:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   13c8c:	689b      	ldr	r3, [r3, #8]
};
   13c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.SWSEL);
   13c92:	4718      	bx	r3
   13c94:	00029d1c 	.word	0x00029d1c
   13c98:	1fff3194 	.word	0x1fff3194

00013c9c <tmc5031_writeDatagram>:
{
   13c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TMC5031_SPIChannel->readWrite(address | TMC5031_WRITE_BIT, false);
   13ca0:	4d1a      	ldr	r5, [pc, #104]	; (13d0c <tmc5031_writeDatagram+0x70>)
{
   13ca2:	f89d 8020 	ldrb.w	r8, [sp, #32]
   13ca6:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   13caa:	461e      	mov	r6, r3
	TMC5031_SPIChannel->readWrite(address | TMC5031_WRITE_BIT, false);
   13cac:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
{
   13cb0:	460c      	mov	r4, r1
	TMC5031_SPIChannel->readWrite(address | TMC5031_WRITE_BIT, false);
   13cb2:	689b      	ldr	r3, [r3, #8]
   13cb4:	2100      	movs	r1, #0
   13cb6:	f044 0080 	orr.w	r0, r4, #128	; 0x80
{
   13cba:	4691      	mov	r9, r2
	TMC5031_SPIChannel->readWrite(address | TMC5031_WRITE_BIT, false);
   13cbc:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(x1, false);
   13cbe:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
   13cc2:	2100      	movs	r1, #0
   13cc4:	689b      	ldr	r3, [r3, #8]
   13cc6:	4648      	mov	r0, r9
   13cc8:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(x2, false);
   13cca:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
   13cce:	2100      	movs	r1, #0
   13cd0:	689b      	ldr	r3, [r3, #8]
   13cd2:	4630      	mov	r0, r6
   13cd4:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(x3, false);
   13cd6:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
   13cda:	2100      	movs	r1, #0
   13cdc:	689b      	ldr	r3, [r3, #8]
   13cde:	4640      	mov	r0, r8
   13ce0:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(x4, true);
   13ce2:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
   13ce6:	2101      	movs	r1, #1
   13ce8:	689b      	ldr	r3, [r3, #8]
   13cea:	4638      	mov	r0, r7
   13cec:	4798      	blx	r3
	TMC5031_config->shadowRegister[address & 0x7F] = value;
   13cee:	6829      	ldr	r1, [r5, #0]
	value |= x2;
   13cf0:	ea46 2009 	orr.w	r0, r6, r9, lsl #8
	TMC5031_config->shadowRegister[address & 0x7F] = value;
   13cf4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	value |= x3;
   13cf8:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
	TMC5031_config->shadowRegister[address & 0x7F] = value;
   13cfc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
	value |= x4;
   13d00:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
	TMC5031_config->shadowRegister[address & 0x7F] = value;
   13d04:	6060      	str	r0, [r4, #4]
}
   13d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d0a:	bf00      	nop
   13d0c:	1fff3194 	.word	0x1fff3194

00013d10 <tmc5031_writeInt>:
{
   13d10:	b507      	push	{r0, r1, r2, lr}
	tmc5031_writeDatagram(motor, Address, 0xFF & (Value>>24), 0xFF & (Value>>16), 0xFF & (Value>>8), 0xFF & (Value>>0));
   13d12:	b2d3      	uxtb	r3, r2
   13d14:	9301      	str	r3, [sp, #4]
   13d16:	f3c2 2307 	ubfx	r3, r2, #8, #8
   13d1a:	9300      	str	r3, [sp, #0]
   13d1c:	f3c2 4307 	ubfx	r3, r2, #16, #8
   13d20:	0e12      	lsrs	r2, r2, #24
   13d22:	f7ff ffbb 	bl	13c9c <tmc5031_writeDatagram>
}
   13d26:	b003      	add	sp, #12
   13d28:	f85d fb04 	ldr.w	pc, [sp], #4

00013d2c <writeRegister>:
	tmc5031_writeInt(0, address, value);
   13d2c:	2000      	movs	r0, #0
   13d2e:	f7ff bfef 	b.w	13d10 <tmc5031_writeInt>

00013d32 <moveTo>:
	if(motor >= MOTORS)
   13d32:	2801      	cmp	r0, #1
{
   13d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13d38:	4604      	mov	r4, r0
   13d3a:	460f      	mov	r7, r1
	if(motor >= MOTORS)
   13d3c:	d828      	bhi.n	13d90 <moveTo+0x5e>
	if(vMaxModified[motor])
   13d3e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13d98 <moveTo+0x66>
   13d42:	2620      	movs	r6, #32
   13d44:	f818 3000 	ldrb.w	r3, [r8, r0]
   13d48:	4086      	lsls	r6, r0
   13d4a:	b275      	sxtb	r5, r6
   13d4c:	b163      	cbz	r3, 13d68 <moveTo+0x36>
		tmc5031_writeInt(motor, TMC5031_VMAX(motor), vMax[motor]);
   13d4e:	4b11      	ldr	r3, [pc, #68]	; (13d94 <moveTo+0x62>)
   13d50:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13d54:	f045 0107 	orr.w	r1, r5, #7
   13d58:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
   13d5c:	b2c9      	uxtb	r1, r1
   13d5e:	f7ff ffd7 	bl	13d10 <tmc5031_writeInt>
		vMaxModified[motor] = false;
   13d62:	2300      	movs	r3, #0
   13d64:	f808 3004 	strb.w	r3, [r8, r4]
	tmc5031_writeInt(motor, TMC5031_XTARGET(motor), position);
   13d68:	f045 050d 	orr.w	r5, r5, #13
   13d6c:	b2e9      	uxtb	r1, r5
   13d6e:	463a      	mov	r2, r7
	tmc5031_writeDatagram(motor, TMC5031_RAMPMODE(motor), 0, 0, 0, TMC5031_MODE_POSITION);
   13d70:	2500      	movs	r5, #0
	tmc5031_writeInt(motor, TMC5031_XTARGET(motor), position);
   13d72:	4620      	mov	r0, r4
   13d74:	f7ff ffcc 	bl	13d10 <tmc5031_writeInt>
	tmc5031_writeDatagram(motor, TMC5031_RAMPMODE(motor), 0, 0, 0, TMC5031_MODE_POSITION);
   13d78:	4620      	mov	r0, r4
   13d7a:	e9cd 5500 	strd	r5, r5, [sp]
   13d7e:	462b      	mov	r3, r5
   13d80:	462a      	mov	r2, r5
   13d82:	b2f1      	uxtb	r1, r6
   13d84:	f7ff ff8a 	bl	13c9c <tmc5031_writeDatagram>
	return TMC_ERROR_NONE;
   13d88:	4628      	mov	r0, r5
}
   13d8a:	b002      	add	sp, #8
   13d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TMC_ERROR_MOTOR;
   13d90:	2008      	movs	r0, #8
   13d92:	e7fa      	b.n	13d8a <moveTo+0x58>
   13d94:	1fff3194 	.word	0x1fff3194
   13d98:	1fff0074 	.word	0x1fff0074

00013d9c <rotate>:
	if(motor >= MOTORS)
   13d9c:	2801      	cmp	r0, #1
{
   13d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13da0:	4605      	mov	r5, r0
   13da2:	460e      	mov	r6, r1
	if(motor >= MOTORS)
   13da4:	d81c      	bhi.n	13de0 <rotate+0x44>
	tmc5031_writeInt(motor, TMC5031_VMAX(motor), abs(velocity));
   13da6:	2420      	movs	r4, #32
   13da8:	4084      	lsls	r4, r0
   13daa:	f044 0107 	orr.w	r1, r4, #7
   13dae:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
   13db2:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   13db6:	b2c9      	uxtb	r1, r1
   13db8:	f7ff ffaa 	bl	13d10 <tmc5031_writeInt>
	vMaxModified[motor] = true;
   13dbc:	4a09      	ldr	r2, [pc, #36]	; (13de4 <rotate+0x48>)
   13dbe:	2301      	movs	r3, #1
	if(velocity >= 0)
   13dc0:	2e00      	cmp	r6, #0
	vMaxModified[motor] = true;
   13dc2:	5553      	strb	r3, [r2, r5]
	if(velocity >= 0)
   13dc4:	b2e1      	uxtb	r1, r4
		tmc5031_writeDatagram(motor, TMC5031_RAMPMODE(motor), 0, 0, 0, TMC5031_MODE_VELNEG);
   13dc6:	bfb8      	it	lt
   13dc8:	2302      	movlt	r3, #2
   13dca:	2400      	movs	r4, #0
   13dcc:	e9cd 4300 	strd	r4, r3, [sp]
   13dd0:	4628      	mov	r0, r5
   13dd2:	4623      	mov	r3, r4
   13dd4:	4622      	mov	r2, r4
   13dd6:	f7ff ff61 	bl	13c9c <tmc5031_writeDatagram>
   13dda:	4620      	mov	r0, r4
}
   13ddc:	b002      	add	sp, #8
   13dde:	bd70      	pop	{r4, r5, r6, pc}
		return TMC_ERROR_MOTOR;
   13de0:	2008      	movs	r0, #8
   13de2:	e7fb      	b.n	13ddc <rotate+0x40>
   13de4:	1fff0074 	.word	0x1fff0074

00013de8 <stop>:
	return rotate(motor, 0);
   13de8:	2100      	movs	r1, #0
   13dea:	e7d7      	b.n	13d9c <rotate>

00013dec <left>:
	return rotate(motor, -velocity);
   13dec:	4249      	negs	r1, r1
   13dee:	e7d5      	b.n	13d9c <rotate>

00013df0 <right>:
	return rotate(motor, velocity);
   13df0:	e7d4      	b.n	13d9c <rotate>

00013df2 <tmc5031_readInt>:
{
   13df2:	b538      	push	{r3, r4, r5, lr}
	if(!TMC_IS_READABLE(TMC5031.registerAccess[address]))
   13df4:	4c27      	ldr	r4, [pc, #156]	; (13e94 <tmc5031_readInt+0xa2>)
	address &= 0x7F;
   13df6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
	if(!TMC_IS_READABLE(TMC5031.registerAccess[address]))
   13dfa:	1963      	adds	r3, r4, r5
   13dfc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
   13e00:	07db      	lsls	r3, r3, #31
   13e02:	d404      	bmi.n	13e0e <tmc5031_readInt+0x1c>
		return TMC5031_config->shadowRegister[address];
   13e04:	6821      	ldr	r1, [r4, #0]
   13e06:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   13e0a:	6868      	ldr	r0, [r5, #4]
}
   13e0c:	bd38      	pop	{r3, r4, r5, pc}
	TMC5031_SPIChannel->readWrite(address, false);
   13e0e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e12:	2100      	movs	r1, #0
   13e14:	689b      	ldr	r3, [r3, #8]
   13e16:	4628      	mov	r0, r5
   13e18:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(0, false);
   13e1a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e1e:	2100      	movs	r1, #0
   13e20:	689b      	ldr	r3, [r3, #8]
   13e22:	4608      	mov	r0, r1
   13e24:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(0, false);
   13e26:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e2a:	2100      	movs	r1, #0
   13e2c:	689b      	ldr	r3, [r3, #8]
   13e2e:	4608      	mov	r0, r1
   13e30:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(0, false);
   13e32:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e36:	2100      	movs	r1, #0
   13e38:	689b      	ldr	r3, [r3, #8]
   13e3a:	4608      	mov	r0, r1
   13e3c:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(0, true);
   13e3e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e42:	2101      	movs	r1, #1
   13e44:	689b      	ldr	r3, [r3, #8]
   13e46:	2000      	movs	r0, #0
   13e48:	4798      	blx	r3
	TMC5031_SPIChannel->readWrite(address, false);
   13e4a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e4e:	2100      	movs	r1, #0
   13e50:	689b      	ldr	r3, [r3, #8]
   13e52:	4628      	mov	r0, r5
   13e54:	4798      	blx	r3
	value = TMC5031_SPIChannel->readWrite(0, false);
   13e56:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e5a:	2100      	movs	r1, #0
   13e5c:	689b      	ldr	r3, [r3, #8]
   13e5e:	4608      	mov	r0, r1
   13e60:	4798      	blx	r3
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e62:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e66:	2100      	movs	r1, #0
   13e68:	689b      	ldr	r3, [r3, #8]
	value <<= 8;
   13e6a:	0205      	lsls	r5, r0, #8
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e6c:	4608      	mov	r0, r1
   13e6e:	4798      	blx	r3
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e70:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
   13e74:	2100      	movs	r1, #0
   13e76:	689b      	ldr	r3, [r3, #8]
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e78:	4305      	orrs	r5, r0
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e7a:	4608      	mov	r0, r1
   13e7c:	4798      	blx	r3
	value |= TMC5031_SPIChannel->readWrite(0, true);
   13e7e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
	value <<= 8;
   13e82:	022d      	lsls	r5, r5, #8
	value |= TMC5031_SPIChannel->readWrite(0, false);
   13e84:	4305      	orrs	r5, r0
	value |= TMC5031_SPIChannel->readWrite(0, true);
   13e86:	689b      	ldr	r3, [r3, #8]
   13e88:	2101      	movs	r1, #1
   13e8a:	2000      	movs	r0, #0
   13e8c:	4798      	blx	r3
	value <<= 8;
   13e8e:	022d      	lsls	r5, r5, #8
	value |= TMC5031_SPIChannel->readWrite(0, true);
   13e90:	4328      	orrs	r0, r5
	return value;
   13e92:	e7bb      	b.n	13e0c <tmc5031_readInt+0x1a>
   13e94:	1fff3194 	.word	0x1fff3194

00013e98 <readRegister>:
{
   13e98:	b510      	push	{r4, lr}
	*value = tmc5031_readInt(0, address);
   13e9a:	2000      	movs	r0, #0
{
   13e9c:	4614      	mov	r4, r2
	*value = tmc5031_readInt(0, address);
   13e9e:	f7ff ffa8 	bl	13df2 <tmc5031_readInt>
   13ea2:	6020      	str	r0, [r4, #0]
}
   13ea4:	bd10      	pop	{r4, pc}

00013ea6 <moveBy>:
{
   13ea6:	b538      	push	{r3, r4, r5, lr}
	*ticks = tmc5031_readInt(motor, TMC5031_XACTUAL(motor)) + *ticks;
   13ea8:	2320      	movs	r3, #32
   13eaa:	4083      	lsls	r3, r0
   13eac:	f043 0301 	orr.w	r3, r3, #1
{
   13eb0:	460d      	mov	r5, r1
	*ticks = tmc5031_readInt(motor, TMC5031_XACTUAL(motor)) + *ticks;
   13eb2:	b2d9      	uxtb	r1, r3
{
   13eb4:	4604      	mov	r4, r0
	*ticks = tmc5031_readInt(motor, TMC5031_XACTUAL(motor)) + *ticks;
   13eb6:	f7ff ff9c 	bl	13df2 <tmc5031_readInt>
   13eba:	6829      	ldr	r1, [r5, #0]
   13ebc:	4401      	add	r1, r0
   13ebe:	6029      	str	r1, [r5, #0]
	return moveTo(motor, *ticks);
   13ec0:	4620      	mov	r0, r4
}
   13ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return moveTo(motor, *ticks);
   13ec6:	e734      	b.n	13d32 <moveTo>

00013ec8 <handleParameter>:
	if(motor >= MOTORS)
   13ec8:	2901      	cmp	r1, #1
{
   13eca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ece:	4604      	mov	r4, r0
   13ed0:	460d      	mov	r5, r1
   13ed2:	461e      	mov	r6, r3
	if(motor >= MOTORS)
   13ed4:	f200 85e9 	bhi.w	14aaa <handleParameter+0xbe2>
	switch(type)
   13ed8:	2a1d      	cmp	r2, #29
   13eda:	d956      	bls.n	13f8a <handleParameter+0xc2>
   13edc:	f102 0374 	add.w	r3, r2, #116	; 0x74
   13ee0:	b2db      	uxtb	r3, r3
   13ee2:	2b47      	cmp	r3, #71	; 0x47
   13ee4:	d903      	bls.n	13eee <handleParameter+0x26>
   13ee6:	2404      	movs	r4, #4
}
   13ee8:	4620      	mov	r0, r4
   13eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13eee:	3a8c      	subs	r2, #140	; 0x8c
   13ef0:	2a47      	cmp	r2, #71	; 0x47
   13ef2:	f200 85dd 	bhi.w	14ab0 <handleParameter+0xbe8>
   13ef6:	e8df f012 	tbh	[pc, r2, lsl #1]
   13efa:	027c      	.short	0x027c
   13efc:	05db05db 	.word	0x05db05db
   13f00:	05db05db 	.word	0x05db05db
   13f04:	05db05db 	.word	0x05db05db
   13f08:	05db05db 	.word	0x05db05db
   13f0c:	05db05db 	.word	0x05db05db
   13f10:	05db05db 	.word	0x05db05db
   13f14:	05db05db 	.word	0x05db05db
   13f18:	05db05db 	.word	0x05db05db
   13f1c:	05db05db 	.word	0x05db05db
   13f20:	05db05db 	.word	0x05db05db
   13f24:	02e005db 	.word	0x02e005db
   13f28:	031802fc 	.word	0x031802fc
   13f2c:	03790334 	.word	0x03790334
   13f30:	03d103b6 	.word	0x03d103b6
   13f34:	040d03ef 	.word	0x040d03ef
   13f38:	0449042b 	.word	0x0449042b
   13f3c:	04840466 	.word	0x04840466
   13f40:	05db05db 	.word	0x05db05db
   13f44:	05db05db 	.word	0x05db05db
   13f48:	04c704a9 	.word	0x04c704a9
   13f4c:	050a04d6 	.word	0x050a04d6
   13f50:	051d05db 	.word	0x051d05db
   13f54:	05db053b 	.word	0x05db053b
   13f58:	05db05db 	.word	0x05db05db
   13f5c:	05db05db 	.word	0x05db05db
   13f60:	05db05db 	.word	0x05db05db
   13f64:	05db05db 	.word	0x05db05db
   13f68:	05db05db 	.word	0x05db05db
   13f6c:	05db05db 	.word	0x05db05db
   13f70:	05db05db 	.word	0x05db05db
   13f74:	05db05db 	.word	0x05db05db
   13f78:	05db05db 	.word	0x05db05db
   13f7c:	055905db 	.word	0x055905db
   13f80:	05db05db 	.word	0x05db05db
   13f84:	057b0568 	.word	0x057b0568
   13f88:	058e      	.short	0x058e
   13f8a:	2a1d      	cmp	r2, #29
   13f8c:	f200 8593 	bhi.w	14ab6 <handleParameter+0xbee>
   13f90:	e8df f012 	tbh	[pc, r2, lsl #1]
   13f94:	002f001e 	.word	0x002f001e
   13f98:	00570040 	.word	0x00570040
   13f9c:	008e006a 	.word	0x008e006a
   13fa0:	00bc009f 	.word	0x00bc009f
   13fa4:	059100d8 	.word	0x059100d8
   13fa8:	00f900e7 	.word	0x00f900e7
   13fac:	01270109 	.word	0x01270109
   13fb0:	01560145 	.word	0x01560145
   13fb4:	01780167 	.word	0x01780167
   13fb8:	019a0189 	.word	0x019a0189
   13fbc:	01c001ab 	.word	0x01c001ab
   13fc0:	01e201d1 	.word	0x01e201d1
   13fc4:	059101f3 	.word	0x059101f3
   13fc8:	05910591 	.word	0x05910591
   13fcc:	02200204 	.word	0x02200204
		if(readWrite == READ) {
   13fd0:	2120      	movs	r1, #32
   13fd2:	40a9      	lsls	r1, r5
   13fd4:	f041 010d 	orr.w	r1, r1, #13
   13fd8:	b2c9      	uxtb	r1, r1
   13fda:	b920      	cbnz	r0, 13fe6 <handleParameter+0x11e>
			*value=tmc5031_readInt(motor, TMC5031_XTARGET(motor));
   13fdc:	4628      	mov	r0, r5
   13fde:	f7ff ff08 	bl	13df2 <tmc5031_readInt>
   13fe2:	6030      	str	r0, [r6, #0]
   13fe4:	e780      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_XTARGET(motor), *value);
   13fe6:	6832      	ldr	r2, [r6, #0]
   13fe8:	4628      	mov	r0, r5
   13fea:	f7ff fe91 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   13fee:	2400      	movs	r4, #0
   13ff0:	e77a      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   13ff2:	2120      	movs	r1, #32
   13ff4:	40a9      	lsls	r1, r5
   13ff6:	f041 0101 	orr.w	r1, r1, #1
   13ffa:	b2c9      	uxtb	r1, r1
   13ffc:	b920      	cbnz	r0, 14008 <handleParameter+0x140>
			*value=tmc5031_readInt(motor, TMC5031_XACTUAL(motor));
   13ffe:	4628      	mov	r0, r5
   14000:	f7ff fef7 	bl	13df2 <tmc5031_readInt>
   14004:	6030      	str	r0, [r6, #0]
   14006:	e76f      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_XACTUAL(motor), *value);
   14008:	6832      	ldr	r2, [r6, #0]
   1400a:	4628      	mov	r0, r5
   1400c:	f7ff fe80 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14010:	2400      	movs	r4, #0
   14012:	e769      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14014:	2120      	movs	r1, #32
   14016:	40a9      	lsls	r1, r5
   14018:	f041 0107 	orr.w	r1, r1, #7
   1401c:	b2c9      	uxtb	r1, r1
   1401e:	b920      	cbnz	r0, 1402a <handleParameter+0x162>
			*value=tmc5031_readInt(motor, TMC5031_VMAX(motor));
   14020:	4628      	mov	r0, r5
   14022:	f7ff fee6 	bl	13df2 <tmc5031_readInt>
   14026:	6030      	str	r0, [r6, #0]
   14028:	e75e      	b.n	13ee8 <handleParameter+0x20>
			vMaxModified[motor] = true;
   1402a:	4bb5      	ldr	r3, [pc, #724]	; (14300 <handleParameter+0x438>)
   1402c:	2201      	movs	r2, #1
   1402e:	555a      	strb	r2, [r3, r5]
			tmc5031_writeInt(motor, TMC5031_VMAX(motor), abs(*value));
   14030:	6832      	ldr	r2, [r6, #0]
   14032:	2a00      	cmp	r2, #0
   14034:	bfb8      	it	lt
   14036:	4252      	neglt	r2, r2
   14038:	4628      	mov	r0, r5
   1403a:	f7ff fe69 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1403e:	2400      	movs	r4, #0
   14040:	e752      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14042:	2800      	cmp	r0, #0
   14044:	f040 853a 	bne.w	14abc <handleParameter+0xbf4>
			*value = tmc5031_readInt(motor, TMC5031_VACTUAL(motor));
   14048:	2120      	movs	r1, #32
   1404a:	40a9      	lsls	r1, r5
   1404c:	f041 0102 	orr.w	r1, r1, #2
   14050:	b2c9      	uxtb	r1, r1
   14052:	4628      	mov	r0, r5
   14054:	f7ff fecd 	bl	13df2 <tmc5031_readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   14058:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   1405c:	bf18      	it	ne
   1405e:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   14062:	4318      	orrs	r0, r3
   14064:	6030      	str	r0, [r6, #0]
   14066:	e73f      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14068:	4ba6      	ldr	r3, [pc, #664]	; (14304 <handleParameter+0x43c>)
   1406a:	008a      	lsls	r2, r1, #2
			*value=vMax[motor];
   1406c:	4413      	add	r3, r2
		if(readWrite == READ) {
   1406e:	b918      	cbnz	r0, 14078 <handleParameter+0x1b0>
			*value=vMax[motor];
   14070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
   14074:	6033      	str	r3, [r6, #0]
   14076:	e737      	b.n	13ee8 <handleParameter+0x20>
			vMax[motor] = abs(*value);
   14078:	6832      	ldr	r2, [r6, #0]
			if(tmc5031_readInt(motor, TMC5031_RAMPMODE(motor)) == TMC5031_MODE_POSITION)
   1407a:	2720      	movs	r7, #32
			vMax[motor] = abs(*value);
   1407c:	2a00      	cmp	r2, #0
			if(tmc5031_readInt(motor, TMC5031_RAMPMODE(motor)) == TMC5031_MODE_POSITION)
   1407e:	fa07 f701 	lsl.w	r7, r7, r1
			vMax[motor] = abs(*value);
   14082:	bfb8      	it	lt
   14084:	4252      	neglt	r2, r2
			if(tmc5031_readInt(motor, TMC5031_RAMPMODE(motor)) == TMC5031_MODE_POSITION)
   14086:	b2f9      	uxtb	r1, r7
   14088:	4628      	mov	r0, r5
			vMax[motor] = abs(*value);
   1408a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
			if(tmc5031_readInt(motor, TMC5031_RAMPMODE(motor)) == TMC5031_MODE_POSITION)
   1408e:	f7ff feb0 	bl	13df2 <tmc5031_readInt>
   14092:	4604      	mov	r4, r0
   14094:	b108      	cbz	r0, 1409a <handleParameter+0x1d2>
	uint32_t errors = TMC_ERROR_NONE;
   14096:	2400      	movs	r4, #0
   14098:	e726      	b.n	13ee8 <handleParameter+0x20>
				tmc5031_writeInt(motor, TMC5031_VMAX(motor), abs(*value));
   1409a:	6832      	ldr	r2, [r6, #0]
   1409c:	f047 0107 	orr.w	r1, r7, #7
   140a0:	2a00      	cmp	r2, #0
   140a2:	bfb8      	it	lt
   140a4:	4252      	neglt	r2, r2
   140a6:	b2c9      	uxtb	r1, r1
   140a8:	4628      	mov	r0, r5
   140aa:	f7ff fe31 	bl	13d10 <tmc5031_writeInt>
   140ae:	e71b      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   140b0:	2120      	movs	r1, #32
   140b2:	40a9      	lsls	r1, r5
   140b4:	f041 0106 	orr.w	r1, r1, #6
   140b8:	b2c9      	uxtb	r1, r1
   140ba:	b920      	cbnz	r0, 140c6 <handleParameter+0x1fe>
			*value=tmc5031_readInt(motor, TMC5031_AMAX(motor));
   140bc:	4628      	mov	r0, r5
   140be:	f7ff fe98 	bl	13df2 <tmc5031_readInt>
   140c2:	6030      	str	r0, [r6, #0]
   140c4:	e710      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_AMAX(motor), *value);
   140c6:	6832      	ldr	r2, [r6, #0]
   140c8:	4628      	mov	r0, r5
   140ca:	f7ff fe21 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   140ce:	2400      	movs	r4, #0
   140d0:	e70a      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   140d2:	2720      	movs	r7, #32
   140d4:	408f      	lsls	r7, r1
   140d6:	f047 0710 	orr.w	r7, r7, #16
   140da:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IRUN_MASK, TMC5031_IRUN_SHIFT);
   140dc:	4639      	mov	r1, r7
   140de:	4628      	mov	r0, r5
		if(readWrite == READ) {
   140e0:	b92c      	cbnz	r4, 140ee <handleParameter+0x226>
			*value = TMC5031_FIELD_READ(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IRUN_MASK, TMC5031_IRUN_SHIFT);
   140e2:	f7ff fe86 	bl	13df2 <tmc5031_readInt>
   140e6:	f3c0 2004 	ubfx	r0, r0, #8, #5
   140ea:	6030      	str	r0, [r6, #0]
   140ec:	e6fc      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IRUN_MASK, TMC5031_IRUN_SHIFT, *value);
   140ee:	f7ff fe80 	bl	13df2 <tmc5031_readInt>
   140f2:	6833      	ldr	r3, [r6, #0]
   140f4:	021b      	lsls	r3, r3, #8
   140f6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   140fa:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   140fe:	431a      	orrs	r2, r3
   14100:	4639      	mov	r1, r7
   14102:	4628      	mov	r0, r5
   14104:	f7ff fe04 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14108:	2400      	movs	r4, #0
   1410a:	e6ed      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1410c:	2720      	movs	r7, #32
   1410e:	408f      	lsls	r7, r1
   14110:	f047 0710 	orr.w	r7, r7, #16
   14114:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IHOLD_MASK, TMC5031_IHOLD_SHIFT);
   14116:	4639      	mov	r1, r7
   14118:	4628      	mov	r0, r5
		if(readWrite == READ) {
   1411a:	b92c      	cbnz	r4, 14128 <handleParameter+0x260>
			*value = TMC5031_FIELD_READ(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IHOLD_MASK, TMC5031_IHOLD_SHIFT);
   1411c:	f7ff fe69 	bl	13df2 <tmc5031_readInt>
   14120:	f000 001f 	and.w	r0, r0, #31
   14124:	6030      	str	r0, [r6, #0]
   14126:	e6df      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_IHOLD_IRUN(motor), TMC5031_IHOLD_MASK, TMC5031_IHOLD_SHIFT, *value);
   14128:	f7ff fe63 	bl	13df2 <tmc5031_readInt>
   1412c:	6832      	ldr	r2, [r6, #0]
   1412e:	f020 001f 	bic.w	r0, r0, #31
   14132:	f002 021f 	and.w	r2, r2, #31
   14136:	4302      	orrs	r2, r0
   14138:	4639      	mov	r1, r7
   1413a:	4628      	mov	r0, r5
   1413c:	f7ff fde8 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14140:	2400      	movs	r4, #0
   14142:	e6d1      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14144:	2800      	cmp	r0, #0
   14146:	f040 84bc 	bne.w	14ac2 <handleParameter+0xbfa>
			*value = TMC5031_FIELD_READ(motor, TMC5031_RAMPSTAT(motor), TMC5031_POSITION_REACHED_MASK, TMC5031_POSITION_REACHED_SHIFT);
   1414a:	2120      	movs	r1, #32
   1414c:	40a9      	lsls	r1, r5
   1414e:	f041 0115 	orr.w	r1, r1, #21
   14152:	b2c9      	uxtb	r1, r1
   14154:	4628      	mov	r0, r5
   14156:	f7ff fe4c 	bl	13df2 <tmc5031_readInt>
   1415a:	f3c0 2040 	ubfx	r0, r0, #9, #1
   1415e:	6030      	str	r0, [r6, #0]
   14160:	e6c2      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14162:	2800      	cmp	r0, #0
   14164:	f040 84b0 	bne.w	14ac8 <handleParameter+0xc00>
			*value = !TMC5031_FIELD_READ(motor, TMC5031_RAMPSTAT(motor), TMC5031_STATUS_STOP_R_MASK, TMC5031_STATUS_STOP_R_SHIFT);
   14168:	2120      	movs	r1, #32
   1416a:	40a9      	lsls	r1, r5
   1416c:	f041 0115 	orr.w	r1, r1, #21
   14170:	b2c9      	uxtb	r1, r1
   14172:	4628      	mov	r0, r5
   14174:	f7ff fe3d 	bl	13df2 <tmc5031_readInt>
   14178:	f010 0f02 	tst.w	r0, #2
   1417c:	bf0c      	ite	eq
   1417e:	2301      	moveq	r3, #1
   14180:	2300      	movne	r3, #0
   14182:	6033      	str	r3, [r6, #0]
   14184:	e6b0      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14186:	2800      	cmp	r0, #0
   14188:	f040 84a1 	bne.w	14ace <handleParameter+0xc06>
			*value = !TMC5031_FIELD_READ(motor, TMC5031_RAMPSTAT(motor), TMC5031_STATUS_STOP_L_MASK, TMC5031_STATUS_STOP_L_SHIFT);
   1418c:	2120      	movs	r1, #32
   1418e:	40a9      	lsls	r1, r5
   14190:	f041 0115 	orr.w	r1, r1, #21
   14194:	b2c9      	uxtb	r1, r1
   14196:	4628      	mov	r0, r5
   14198:	f7ff fe2b 	bl	13df2 <tmc5031_readInt>
   1419c:	43c0      	mvns	r0, r0
   1419e:	f000 0001 	and.w	r0, r0, #1
   141a2:	6030      	str	r0, [r6, #0]
   141a4:	e6a0      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   141a6:	2720      	movs	r7, #32
   141a8:	408f      	lsls	r7, r1
   141aa:	f047 0714 	orr.w	r7, r7, #20
   141ae:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_SWMODE(motor), TMC5031_STOP_R_ENABLE_MASK, TMC5031_STOP_R_ENABLE_SHIFT);
   141b0:	4639      	mov	r1, r7
   141b2:	4628      	mov	r0, r5
		if(readWrite == READ) {
   141b4:	b92c      	cbnz	r4, 141c2 <handleParameter+0x2fa>
			*value = TMC5031_FIELD_READ(motor, TMC5031_SWMODE(motor), TMC5031_STOP_R_ENABLE_MASK, TMC5031_STOP_R_ENABLE_SHIFT);
   141b6:	f7ff fe1c 	bl	13df2 <tmc5031_readInt>
   141ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
   141be:	6030      	str	r0, [r6, #0]
   141c0:	e692      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_SWMODE(motor), TMC5031_STOP_R_ENABLE_MASK, TMC5031_STOP_R_ENABLE_SHIFT, !*value);
   141c2:	f7ff fe16 	bl	13df2 <tmc5031_readInt>
   141c6:	6833      	ldr	r3, [r6, #0]
   141c8:	2b00      	cmp	r3, #0
   141ca:	f020 0002 	bic.w	r0, r0, #2
   141ce:	bf0c      	ite	eq
   141d0:	2202      	moveq	r2, #2
   141d2:	2200      	movne	r2, #0
   141d4:	4302      	orrs	r2, r0
   141d6:	4639      	mov	r1, r7
   141d8:	4628      	mov	r0, r5
   141da:	f7ff fd99 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   141de:	2400      	movs	r4, #0
   141e0:	e682      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   141e2:	2720      	movs	r7, #32
   141e4:	408f      	lsls	r7, r1
   141e6:	f047 0714 	orr.w	r7, r7, #20
   141ea:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_SWMODE(motor), TMC5031_STOP_L_ENABLE_MASK, TMC5031_STOP_L_ENABLE_SHIFT);
   141ec:	4639      	mov	r1, r7
   141ee:	4628      	mov	r0, r5
		if(readWrite == READ) {
   141f0:	b92c      	cbnz	r4, 141fe <handleParameter+0x336>
			*value = TMC5031_FIELD_READ(motor, TMC5031_SWMODE(motor), TMC5031_STOP_L_ENABLE_MASK, TMC5031_STOP_L_ENABLE_SHIFT);
   141f2:	f7ff fdfe 	bl	13df2 <tmc5031_readInt>
   141f6:	f000 0001 	and.w	r0, r0, #1
   141fa:	6030      	str	r0, [r6, #0]
   141fc:	e674      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_SWMODE(motor), TMC5031_STOP_L_ENABLE_MASK, TMC5031_STOP_L_ENABLE_SHIFT, (*value)? 0:1);	// todo CHECK 3: Ist 0:1 sorum richtig? Der alte code hatte das so (LH)
   141fe:	f7ff fdf8 	bl	13df2 <tmc5031_readInt>
   14202:	6832      	ldr	r2, [r6, #0]
   14204:	f020 0001 	bic.w	r0, r0, #1
   14208:	2a00      	cmp	r2, #0
   1420a:	bf14      	ite	ne
   1420c:	4602      	movne	r2, r0
   1420e:	f040 0201 	orreq.w	r2, r0, #1
   14212:	4639      	mov	r1, r7
   14214:	4628      	mov	r0, r5
   14216:	f7ff fd7b 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1421a:	2400      	movs	r4, #0
   1421c:	e664      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1421e:	2120      	movs	r1, #32
   14220:	40a9      	lsls	r1, r5
   14222:	f041 0114 	orr.w	r1, r1, #20
   14226:	b2c9      	uxtb	r1, r1
   14228:	b920      	cbnz	r0, 14234 <handleParameter+0x36c>
			*value = tmc5031_readInt(motor, TMC5031_SWMODE(motor));
   1422a:	4628      	mov	r0, r5
   1422c:	f7ff fde1 	bl	13df2 <tmc5031_readInt>
   14230:	6030      	str	r0, [r6, #0]
   14232:	e659      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_SWMODE(motor), *value);
   14234:	6832      	ldr	r2, [r6, #0]
   14236:	4628      	mov	r0, r5
   14238:	f7ff fd6a 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1423c:	2400      	movs	r4, #0
   1423e:	e653      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14240:	2120      	movs	r1, #32
   14242:	40a9      	lsls	r1, r5
   14244:	f041 0104 	orr.w	r1, r1, #4
   14248:	b2c9      	uxtb	r1, r1
   1424a:	b920      	cbnz	r0, 14256 <handleParameter+0x38e>
			*value = tmc5031_readInt(motor, TMC5031_A1(motor));
   1424c:	4628      	mov	r0, r5
   1424e:	f7ff fdd0 	bl	13df2 <tmc5031_readInt>
   14252:	6030      	str	r0, [r6, #0]
   14254:	e648      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_A1(motor), *value);
   14256:	6832      	ldr	r2, [r6, #0]
   14258:	4628      	mov	r0, r5
   1425a:	f7ff fd59 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1425e:	2400      	movs	r4, #0
   14260:	e642      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14262:	2120      	movs	r1, #32
   14264:	40a9      	lsls	r1, r5
   14266:	f041 0105 	orr.w	r1, r1, #5
   1426a:	b2c9      	uxtb	r1, r1
   1426c:	b920      	cbnz	r0, 14278 <handleParameter+0x3b0>
			*value = tmc5031_readInt(motor, TMC5031_V1(motor));
   1426e:	4628      	mov	r0, r5
   14270:	f7ff fdbf 	bl	13df2 <tmc5031_readInt>
   14274:	6030      	str	r0, [r6, #0]
   14276:	e637      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_V1(motor), *value);
   14278:	6832      	ldr	r2, [r6, #0]
   1427a:	4628      	mov	r0, r5
   1427c:	f7ff fd48 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14280:	2400      	movs	r4, #0
   14282:	e631      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14284:	2120      	movs	r1, #32
   14286:	40a9      	lsls	r1, r5
   14288:	f041 0108 	orr.w	r1, r1, #8
   1428c:	b2c9      	uxtb	r1, r1
   1428e:	b920      	cbnz	r0, 1429a <handleParameter+0x3d2>
			*value = tmc5031_readInt(motor, TMC5031_DMAX(motor));
   14290:	4628      	mov	r0, r5
   14292:	f7ff fdae 	bl	13df2 <tmc5031_readInt>
   14296:	6030      	str	r0, [r6, #0]
   14298:	e626      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_DMAX(motor), *value);
   1429a:	6832      	ldr	r2, [r6, #0]
   1429c:	4628      	mov	r0, r5
   1429e:	f7ff fd37 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   142a2:	2400      	movs	r4, #0
   142a4:	e620      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   142a6:	2120      	movs	r1, #32
   142a8:	40a9      	lsls	r1, r5
   142aa:	f041 010a 	orr.w	r1, r1, #10
   142ae:	b2c9      	uxtb	r1, r1
   142b0:	b920      	cbnz	r0, 142bc <handleParameter+0x3f4>
			*value = tmc5031_readInt(motor, TMC5031_D1(motor));
   142b2:	4628      	mov	r0, r5
   142b4:	f7ff fd9d 	bl	13df2 <tmc5031_readInt>
   142b8:	6030      	str	r0, [r6, #0]
   142ba:	e615      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_D1(motor), *value);
   142bc:	6832      	ldr	r2, [r6, #0]
   142be:	4628      	mov	r0, r5
   142c0:	f7ff fd26 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   142c4:	2400      	movs	r4, #0
   142c6:	e60f      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   142c8:	2120      	movs	r1, #32
   142ca:	40a9      	lsls	r1, r5
   142cc:	f041 0103 	orr.w	r1, r1, #3
   142d0:	b2c9      	uxtb	r1, r1
   142d2:	b920      	cbnz	r0, 142de <handleParameter+0x416>
			*value = tmc5031_readInt(motor, TMC5031_VSTART(motor));
   142d4:	4628      	mov	r0, r5
   142d6:	f7ff fd8c 	bl	13df2 <tmc5031_readInt>
   142da:	6030      	str	r0, [r6, #0]
   142dc:	e604      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VSTART(motor), *value);
   142de:	6832      	ldr	r2, [r6, #0]
   142e0:	4628      	mov	r0, r5
   142e2:	f7ff fd15 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   142e6:	2400      	movs	r4, #0
   142e8:	e5fe      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   142ea:	2120      	movs	r1, #32
   142ec:	40a9      	lsls	r1, r5
   142ee:	f041 010b 	orr.w	r1, r1, #11
   142f2:	b2c9      	uxtb	r1, r1
   142f4:	b940      	cbnz	r0, 14308 <handleParameter+0x440>
			*value = tmc5031_readInt(motor, TMC5031_VSTOP(motor));
   142f6:	4628      	mov	r0, r5
   142f8:	f7ff fd7b 	bl	13df2 <tmc5031_readInt>
   142fc:	6030      	str	r0, [r6, #0]
   142fe:	e5f3      	b.n	13ee8 <handleParameter+0x20>
   14300:	1fff0074 	.word	0x1fff0074
   14304:	1fff3194 	.word	0x1fff3194
			tmc5031_writeInt(motor, TMC5031_VSTOP(motor), *value);
   14308:	6832      	ldr	r2, [r6, #0]
   1430a:	4628      	mov	r0, r5
   1430c:	f7ff fd00 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14310:	2400      	movs	r4, #0
   14312:	e5e9      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14314:	2120      	movs	r1, #32
   14316:	40a9      	lsls	r1, r5
   14318:	f041 010c 	orr.w	r1, r1, #12
   1431c:	b2c9      	uxtb	r1, r1
   1431e:	b920      	cbnz	r0, 1432a <handleParameter+0x462>
			*value = tmc5031_readInt(motor, TMC5031_TZEROWAIT(motor));
   14320:	4628      	mov	r0, r5
   14322:	f7ff fd66 	bl	13df2 <tmc5031_readInt>
   14326:	6030      	str	r0, [r6, #0]
   14328:	e5de      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_TZEROWAIT(motor), *value);
   1432a:	6832      	ldr	r2, [r6, #0]
   1432c:	4628      	mov	r0, r5
   1432e:	f7ff fcef 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14332:	2400      	movs	r4, #0
   14334:	e5d8      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14336:	2120      	movs	r1, #32
   14338:	40a9      	lsls	r1, r5
   1433a:	f041 0111 	orr.w	r1, r1, #17
   1433e:	b2c9      	uxtb	r1, r1
   14340:	b920      	cbnz	r0, 1434c <handleParameter+0x484>
			*value = tmc5031_readInt(motor, TMC5031_VCOOLTHRS(motor));
   14342:	4628      	mov	r0, r5
   14344:	f7ff fd55 	bl	13df2 <tmc5031_readInt>
   14348:	6030      	str	r0, [r6, #0]
   1434a:	e5cd      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VCOOLTHRS(motor), *value);
   1434c:	6832      	ldr	r2, [r6, #0]
   1434e:	4628      	mov	r0, r5
   14350:	f7ff fcde 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14354:	2400      	movs	r4, #0
   14356:	e5c7      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14358:	2120      	movs	r1, #32
   1435a:	40a9      	lsls	r1, r5
   1435c:	f041 0112 	orr.w	r1, r1, #18
   14360:	b2c9      	uxtb	r1, r1
   14362:	b920      	cbnz	r0, 1436e <handleParameter+0x4a6>
			*value = tmc5031_readInt(motor, TMC5031_VHIGH(motor));
   14364:	4628      	mov	r0, r5
   14366:	f7ff fd44 	bl	13df2 <tmc5031_readInt>
   1436a:	6030      	str	r0, [r6, #0]
   1436c:	e5bc      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VHIGH(motor), *value);
   1436e:	6832      	ldr	r2, [r6, #0]
   14370:	4628      	mov	r0, r5
   14372:	f7ff fccd 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14376:	2400      	movs	r4, #0
   14378:	e5b6      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1437a:	2120      	movs	r1, #32
   1437c:	40a9      	lsls	r1, r5
   1437e:	f041 0113 	orr.w	r1, r1, #19
   14382:	b2c9      	uxtb	r1, r1
   14384:	b920      	cbnz	r0, 14390 <handleParameter+0x4c8>
			*value = tmc5031_readInt(motor, TMC5031_VDCMIN(motor));
   14386:	4628      	mov	r0, r5
   14388:	f7ff fd33 	bl	13df2 <tmc5031_readInt>
   1438c:	6030      	str	r0, [r6, #0]
   1438e:	e5ab      	b.n	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VDCMIN(motor), *value);
   14390:	6832      	ldr	r2, [r6, #0]
   14392:	4628      	mov	r0, r5
   14394:	f7ff fcbc 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14398:	2400      	movs	r4, #0
   1439a:	e5a5      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1439c:	010f      	lsls	r7, r1, #4
   1439e:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   143a2:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_VHIGHFS_MASK, TMC5031_VHIGHFS_SHIFT);
   143a4:	4639      	mov	r1, r7
   143a6:	4628      	mov	r0, r5
		if(readWrite == READ) {
   143a8:	b92c      	cbnz	r4, 143b6 <handleParameter+0x4ee>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_VHIGHFS_MASK, TMC5031_VHIGHFS_SHIFT);
   143aa:	f7ff fd22 	bl	13df2 <tmc5031_readInt>
   143ae:	f3c0 4080 	ubfx	r0, r0, #18, #1
   143b2:	6030      	str	r0, [r6, #0]
   143b4:	e598      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_VHIGHFS_MASK, TMC5031_VHIGHFS_SHIFT, *value);
   143b6:	f7ff fd1c 	bl	13df2 <tmc5031_readInt>
   143ba:	6833      	ldr	r3, [r6, #0]
   143bc:	049b      	lsls	r3, r3, #18
   143be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   143c2:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   143c6:	431a      	orrs	r2, r3
   143c8:	4639      	mov	r1, r7
   143ca:	4628      	mov	r0, r5
   143cc:	f7ff fca0 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   143d0:	2400      	movs	r4, #0
   143d2:	e589      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   143d4:	2800      	cmp	r0, #0
   143d6:	f040 837d 	bne.w	14ad4 <handleParameter+0xc0c>
			*value = TMC5031_config->shadowRegister[TMC5031_VACTUAL(motor)];
   143da:	4bbe      	ldr	r3, [pc, #760]	; (146d4 <handleParameter+0x80c>)
   143dc:	2120      	movs	r1, #32
   143de:	681b      	ldr	r3, [r3, #0]
   143e0:	fa01 f505 	lsl.w	r5, r1, r5
   143e4:	f045 0502 	orr.w	r5, r5, #2
   143e8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   143ec:	686b      	ldr	r3, [r5, #4]
   143ee:	6033      	str	r3, [r6, #0]
   143f0:	e57a      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   143f2:	b974      	cbnz	r4, 14412 <handleParameter+0x54a>
			*value = 256 >> TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_MRES_MASK, TMC5031_MRES_SHIFT);
   143f4:	0129      	lsls	r1, r5, #4
   143f6:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   143fa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   143fe:	4628      	mov	r0, r5
   14400:	f7ff fcf7 	bl	13df2 <tmc5031_readInt>
   14404:	f3c0 6303 	ubfx	r3, r0, #24, #4
   14408:	f44f 7080 	mov.w	r0, #256	; 0x100
   1440c:	4118      	asrs	r0, r3
   1440e:	6030      	str	r0, [r6, #0]
   14410:	e56a      	b.n	13ee8 <handleParameter+0x20>
			switch(*value)
   14412:	6833      	ldr	r3, [r6, #0]
   14414:	2b10      	cmp	r3, #16
   14416:	d048      	beq.n	144aa <handleParameter+0x5e2>
   14418:	dc0a      	bgt.n	14430 <handleParameter+0x568>
   1441a:	3b01      	subs	r3, #1
   1441c:	2b07      	cmp	r3, #7
   1441e:	d80e      	bhi.n	1443e <handleParameter+0x576>
   14420:	2b07      	cmp	r3, #7
   14422:	d80c      	bhi.n	1443e <handleParameter+0x576>
   14424:	e8df f003 	tbb	[pc, r3]
   14428:	3d0b3b15 	.word	0x3d0b3b15
   1442c:	3f0b0b0b 	.word	0x3f0b0b0b
   14430:	2b80      	cmp	r3, #128	; 0x80
   14432:	d040      	beq.n	144b6 <handleParameter+0x5ee>
   14434:	dc08      	bgt.n	14448 <handleParameter+0x580>
   14436:	2b20      	cmp	r3, #32
   14438:	d039      	beq.n	144ae <handleParameter+0x5e6>
   1443a:	2b40      	cmp	r3, #64	; 0x40
   1443c:	d039      	beq.n	144b2 <handleParameter+0x5ea>
			default:   *value = -1;  break;
   1443e:	f04f 33ff 	mov.w	r3, #4294967295
   14442:	6033      	str	r3, [r6, #0]
	uint32_t errors = TMC_ERROR_NONE;
   14444:	2400      	movs	r4, #0
   14446:	e54f      	b.n	13ee8 <handleParameter+0x20>
   14448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1444c:	d1f7      	bne.n	1443e <handleParameter+0x576>
			case 256:  *value = 0;   break;
   1444e:	2300      	movs	r3, #0
   14450:	e000      	b.n	14454 <handleParameter+0x58c>
			case 1:    *value = 8;   break;
   14452:	2308      	movs	r3, #8
				tempValue = tmc5031_readInt(motor, TMC5031_CHOPCONF(motor));
   14454:	012c      	lsls	r4, r5, #4
   14456:	f044 046c 	orr.w	r4, r4, #108	; 0x6c
   1445a:	b2e4      	uxtb	r4, r4
   1445c:	4621      	mov	r1, r4
			case 256:  *value = 0;   break;
   1445e:	6033      	str	r3, [r6, #0]
				tempValue = tmc5031_readInt(motor, TMC5031_CHOPCONF(motor));
   14460:	4628      	mov	r0, r5
   14462:	f7ff fcc6 	bl	13df2 <tmc5031_readInt>
				tempValue |= (*value & 0xF) << 24;
   14466:	6833      	ldr	r3, [r6, #0]
   14468:	061b      	lsls	r3, r3, #24
   1446a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
				tempValue &= ~(0x0F<<24);
   1446e:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
				tmc5031_writeInt(motor, TMC5031_CHOPCONF(motor),tempValue);
   14472:	431a      	orrs	r2, r3
   14474:	4621      	mov	r1, r4
   14476:	4628      	mov	r0, r5
   14478:	f7ff fc4a 	bl	13d10 <tmc5031_writeInt>
				TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_MRES_MASK, TMC5031_MRES_SHIFT, *value);
   1447c:	4621      	mov	r1, r4
   1447e:	4628      	mov	r0, r5
   14480:	f7ff fcb7 	bl	13df2 <tmc5031_readInt>
   14484:	6833      	ldr	r3, [r6, #0]
   14486:	061b      	lsls	r3, r3, #24
   14488:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1448c:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   14490:	4621      	mov	r1, r4
   14492:	431a      	orrs	r2, r3
   14494:	4628      	mov	r0, r5
   14496:	f7ff fc3b 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1449a:	2400      	movs	r4, #0
   1449c:	e524      	b.n	13ee8 <handleParameter+0x20>
			case 2:    *value = 7;   break;
   1449e:	2307      	movs	r3, #7
   144a0:	e7d8      	b.n	14454 <handleParameter+0x58c>
			case 4:    *value = 6;   break;
   144a2:	2306      	movs	r3, #6
   144a4:	e7d6      	b.n	14454 <handleParameter+0x58c>
			case 8:    *value = 5;   break;
   144a6:	2305      	movs	r3, #5
   144a8:	e7d4      	b.n	14454 <handleParameter+0x58c>
			case 16:   *value = 4;   break;
   144aa:	2304      	movs	r3, #4
   144ac:	e7d2      	b.n	14454 <handleParameter+0x58c>
			case 32:   *value = 3;   break;
   144ae:	2303      	movs	r3, #3
   144b0:	e7d0      	b.n	14454 <handleParameter+0x58c>
			case 64:   *value = 2;   break;
   144b2:	2302      	movs	r3, #2
   144b4:	e7ce      	b.n	14454 <handleParameter+0x58c>
			case 128:  *value = 1;   break;
   144b6:	2301      	movs	r3, #1
   144b8:	e7cc      	b.n	14454 <handleParameter+0x58c>
		if(readWrite == READ) {
   144ba:	012f      	lsls	r7, r5, #4
   144bc:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   144c0:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TBL_MASK, TMC5031_TBL_SHIFT);
   144c2:	4639      	mov	r1, r7
   144c4:	4628      	mov	r0, r5
		if(readWrite == READ) {
   144c6:	b92c      	cbnz	r4, 144d4 <handleParameter+0x60c>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TBL_MASK, TMC5031_TBL_SHIFT);
   144c8:	f7ff fc93 	bl	13df2 <tmc5031_readInt>
   144cc:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   144d0:	6030      	str	r0, [r6, #0]
   144d2:	e509      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_TBL_MASK, TMC5031_TBL_SHIFT, *value);
   144d4:	f7ff fc8d 	bl	13df2 <tmc5031_readInt>
   144d8:	6833      	ldr	r3, [r6, #0]
   144da:	03db      	lsls	r3, r3, #15
   144dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   144e0:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   144e4:	431a      	orrs	r2, r3
   144e6:	4639      	mov	r1, r7
   144e8:	4628      	mov	r0, r5
   144ea:	f7ff fc11 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   144ee:	2400      	movs	r4, #0
   144f0:	e4fa      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   144f2:	012f      	lsls	r7, r5, #4
   144f4:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   144f8:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_CHM_MASK, TMC5031_CHM_SHIFT);
   144fa:	4639      	mov	r1, r7
   144fc:	4628      	mov	r0, r5
		if(readWrite == READ) {
   144fe:	b92c      	cbnz	r4, 1450c <handleParameter+0x644>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_CHM_MASK, TMC5031_CHM_SHIFT);
   14500:	f7ff fc77 	bl	13df2 <tmc5031_readInt>
   14504:	f3c0 3080 	ubfx	r0, r0, #14, #1
   14508:	6030      	str	r0, [r6, #0]
   1450a:	e4ed      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_CHM_MASK, TMC5031_CHM_SHIFT, *value);
   1450c:	f7ff fc71 	bl	13df2 <tmc5031_readInt>
   14510:	6833      	ldr	r3, [r6, #0]
   14512:	039b      	lsls	r3, r3, #14
   14514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   14518:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
   1451c:	431a      	orrs	r2, r3
   1451e:	4639      	mov	r1, r7
   14520:	4628      	mov	r0, r5
   14522:	f7ff fbf5 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14526:	2400      	movs	r4, #0
   14528:	e4de      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1452a:	012f      	lsls	r7, r5, #4
   1452c:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   14530:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_DISFDCC_MASK, TMC5031_DISFDCC_SHIFT);
   14532:	4639      	mov	r1, r7
   14534:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14536:	b92c      	cbnz	r4, 14544 <handleParameter+0x67c>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_DISFDCC_MASK, TMC5031_DISFDCC_SHIFT);
   14538:	f7ff fc5b 	bl	13df2 <tmc5031_readInt>
   1453c:	f3c0 3000 	ubfx	r0, r0, #12, #1
   14540:	6030      	str	r0, [r6, #0]
   14542:	e4d1      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_DISFDCC_MASK, TMC5031_DISFDCC_SHIFT, *value);
   14544:	f7ff fc55 	bl	13df2 <tmc5031_readInt>
   14548:	6833      	ldr	r3, [r6, #0]
   1454a:	031b      	lsls	r3, r3, #12
   1454c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   14550:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   14554:	431a      	orrs	r2, r3
   14556:	4639      	mov	r1, r7
   14558:	4628      	mov	r0, r5
   1455a:	f7ff fbd9 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1455e:	2400      	movs	r4, #0
   14560:	e4c2      	b.n	13ee8 <handleParameter+0x20>
		tempValue = tmc5031_readInt(motor, TMC5031_CHOPCONF(motor));
   14562:	012f      	lsls	r7, r5, #4
   14564:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   14568:	b2ff      	uxtb	r7, r7
   1456a:	4639      	mov	r1, r7
   1456c:	4628      	mov	r0, r5
   1456e:	f7ff fc40 	bl	13df2 <tmc5031_readInt>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_HEND_MASK, TMC5031_HEND_SHIFT);
   14572:	4639      	mov	r1, r7
		tempValue = tmc5031_readInt(motor, TMC5031_CHOPCONF(motor));
   14574:	4680      	mov	r8, r0
		if(readWrite == READ) {
   14576:	f400 4980 	and.w	r9, r0, #16384	; 0x4000
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_HEND_MASK, TMC5031_HEND_SHIFT);
   1457a:	4628      	mov	r0, r5
		if(readWrite == READ) {
   1457c:	b9ac      	cbnz	r4, 145aa <handleParameter+0x6e2>
			if(tempValue & TMC5031_CHM_MASK) // Chopper Hysteresis
   1457e:	f1b9 0f00 	cmp.w	r9, #0
   14582:	d005      	beq.n	14590 <handleParameter+0x6c8>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_HEND_MASK, TMC5031_HEND_SHIFT);
   14584:	f7ff fc35 	bl	13df2 <tmc5031_readInt>
   14588:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   1458c:	6030      	str	r0, [r6, #0]
   1458e:	e4ab      	b.n	13ee8 <handleParameter+0x20>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TFD_ALL_MASK, TMC5031_TFD_ALL_SHIFT);
   14590:	f7ff fc2f 	bl	13df2 <tmc5031_readInt>
				if(tempValue & TMC5031_TFD_3_MASK) // Add MSB of fast decay time to total value
   14594:	f418 6f00 	tst.w	r8, #2048	; 0x800
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TFD_ALL_MASK, TMC5031_TFD_ALL_SHIFT);
   14598:	f3c0 1302 	ubfx	r3, r0, #4, #3
				if(tempValue & TMC5031_TFD_3_MASK) // Add MSB of fast decay time to total value
   1459c:	d101      	bne.n	145a2 <handleParameter+0x6da>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TFD_ALL_MASK, TMC5031_TFD_ALL_SHIFT);
   1459e:	6033      	str	r3, [r6, #0]
   145a0:	e579      	b.n	14096 <handleParameter+0x1ce>
					*value |= 1<<3;
   145a2:	f043 0308 	orr.w	r3, r3, #8
   145a6:	6033      	str	r3, [r6, #0]
   145a8:	e49e      	b.n	13ee8 <handleParameter+0x20>
			if(tempValue & TMC5031_CHM_MASK) // Chopper Hysteresis
   145aa:	f1b9 0f00 	cmp.w	r9, #0
   145ae:	d00e      	beq.n	145ce <handleParameter+0x706>
				TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_HEND_MASK, TMC5031_HEND_SHIFT, *value);
   145b0:	f7ff fc1f 	bl	13df2 <tmc5031_readInt>
   145b4:	6833      	ldr	r3, [r6, #0]
   145b6:	01db      	lsls	r3, r3, #7
   145b8:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   145bc:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   145c0:	431a      	orrs	r2, r3
   145c2:	4639      	mov	r1, r7
   145c4:	4628      	mov	r0, r5
   145c6:	f7ff fba3 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   145ca:	2400      	movs	r4, #0
   145cc:	e48c      	b.n	13ee8 <handleParameter+0x20>
				TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_TFD_ALL_MASK, TMC5031_TFD_ALL_SHIFT, *value);
   145ce:	f7ff fc10 	bl	13df2 <tmc5031_readInt>
   145d2:	6833      	ldr	r3, [r6, #0]
   145d4:	011b      	lsls	r3, r3, #4
   145d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   145da:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   145de:	431a      	orrs	r2, r3
   145e0:	4639      	mov	r1, r7
   145e2:	4628      	mov	r0, r5
   145e4:	f7ff fb94 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   145e8:	464c      	mov	r4, r9
   145ea:	e47d      	b.n	13ee8 <handleParameter+0x20>
		tempValue = tmc5031_readInt(motor, TMC5031_CHOPCONF(motor));
   145ec:	012f      	lsls	r7, r5, #4
   145ee:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   145f2:	b2ff      	uxtb	r7, r7
   145f4:	4639      	mov	r1, r7
   145f6:	4628      	mov	r0, r5
   145f8:	f7ff fbfb 	bl	13df2 <tmc5031_readInt>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_HSTRT_MASK, TMC5031_HSTRT_SHIFT);
   145fc:	4639      	mov	r1, r7
   145fe:	f400 4880 	and.w	r8, r0, #16384	; 0x4000
   14602:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14604:	b974      	cbnz	r4, 14624 <handleParameter+0x75c>
			if(tempValue & TMC5031_CHM_MASK) // Chopper hysteresis start
   14606:	f1b8 0f00 	cmp.w	r8, #0
   1460a:	d005      	beq.n	14618 <handleParameter+0x750>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_HSTRT_MASK, TMC5031_HSTRT_SHIFT);
   1460c:	f7ff fbf1 	bl	13df2 <tmc5031_readInt>
   14610:	f3c0 1002 	ubfx	r0, r0, #4, #3
   14614:	6030      	str	r0, [r6, #0]
   14616:	e467      	b.n	13ee8 <handleParameter+0x20>
				*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_OFFSET_MASK, TMC5031_OFFSET_SHIFT);
   14618:	f7ff fbeb 	bl	13df2 <tmc5031_readInt>
   1461c:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   14620:	6030      	str	r0, [r6, #0]
   14622:	e461      	b.n	13ee8 <handleParameter+0x20>
			if(tempValue & TMC5031_CHM_MASK) // Chopper hysteresis start
   14624:	f1b8 0f00 	cmp.w	r8, #0
   14628:	d00e      	beq.n	14648 <handleParameter+0x780>
				TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_HSTRT_MASK, TMC5031_HSTRT_SHIFT, *value);
   1462a:	f7ff fbe2 	bl	13df2 <tmc5031_readInt>
   1462e:	6833      	ldr	r3, [r6, #0]
   14630:	011b      	lsls	r3, r3, #4
   14632:	f003 0370 	and.w	r3, r3, #112	; 0x70
   14636:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   1463a:	431a      	orrs	r2, r3
   1463c:	4639      	mov	r1, r7
   1463e:	4628      	mov	r0, r5
   14640:	f7ff fb66 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14644:	2400      	movs	r4, #0
   14646:	e44f      	b.n	13ee8 <handleParameter+0x20>
				TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_OFFSET_MASK, TMC5031_OFFSET_SHIFT, *value);
   14648:	f7ff fbd3 	bl	13df2 <tmc5031_readInt>
   1464c:	6833      	ldr	r3, [r6, #0]
   1464e:	01db      	lsls	r3, r3, #7
   14650:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   14654:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   14658:	431a      	orrs	r2, r3
   1465a:	4639      	mov	r1, r7
   1465c:	4628      	mov	r0, r5
   1465e:	f7ff fb57 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14662:	4644      	mov	r4, r8
   14664:	e440      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14666:	012f      	lsls	r7, r5, #4
   14668:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   1466c:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TOFF_MASK, TMC5031_TOFF_SHIFT);
   1466e:	4639      	mov	r1, r7
   14670:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14672:	b92c      	cbnz	r4, 14680 <handleParameter+0x7b8>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_TOFF_MASK, TMC5031_TOFF_SHIFT);
   14674:	f7ff fbbd 	bl	13df2 <tmc5031_readInt>
   14678:	f000 000f 	and.w	r0, r0, #15
   1467c:	6030      	str	r0, [r6, #0]
   1467e:	e433      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_TOFF_MASK, TMC5031_TOFF_SHIFT, *value);
   14680:	f7ff fbb7 	bl	13df2 <tmc5031_readInt>
   14684:	6832      	ldr	r2, [r6, #0]
   14686:	f020 000f 	bic.w	r0, r0, #15
   1468a:	f002 020f 	and.w	r2, r2, #15
   1468e:	4302      	orrs	r2, r0
   14690:	4639      	mov	r1, r7
   14692:	4628      	mov	r0, r5
   14694:	f7ff fb3c 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14698:	2400      	movs	r4, #0
   1469a:	e425      	b.n	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1469c:	012f      	lsls	r7, r5, #4
   1469e:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   146a2:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEIMIN_MASK, TMC5031_SEIMIN_SHIFT);
   146a4:	4639      	mov	r1, r7
   146a6:	4628      	mov	r0, r5
		if(readWrite == READ) {
   146a8:	b92c      	cbnz	r4, 146b6 <handleParameter+0x7ee>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEIMIN_MASK, TMC5031_SEIMIN_SHIFT);
   146aa:	f7ff fba2 	bl	13df2 <tmc5031_readInt>
   146ae:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   146b2:	6030      	str	r0, [r6, #0]
   146b4:	e418      	b.n	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SEIMIN_MASK, TMC5031_SEIMIN_SHIFT, *value);
   146b6:	f7ff fb9c 	bl	13df2 <tmc5031_readInt>
   146ba:	6833      	ldr	r3, [r6, #0]
   146bc:	03db      	lsls	r3, r3, #15
   146be:	b29b      	uxth	r3, r3
   146c0:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   146c4:	431a      	orrs	r2, r3
   146c6:	4639      	mov	r1, r7
   146c8:	4628      	mov	r0, r5
   146ca:	f7ff fb21 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   146ce:	2400      	movs	r4, #0
   146d0:	e40a      	b.n	13ee8 <handleParameter+0x20>
   146d2:	bf00      	nop
   146d4:	1fff3194 	.word	0x1fff3194
		if(readWrite == READ) {
   146d8:	012f      	lsls	r7, r5, #4
   146da:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   146de:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEDN_MASK, TMC5031_SEDN_SHIFT);
   146e0:	4639      	mov	r1, r7
   146e2:	4628      	mov	r0, r5
		if(readWrite == READ) {
   146e4:	b934      	cbnz	r4, 146f4 <handleParameter+0x82c>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEDN_MASK, TMC5031_SEDN_SHIFT);
   146e6:	f7ff fb84 	bl	13df2 <tmc5031_readInt>
   146ea:	f3c0 3041 	ubfx	r0, r0, #13, #2
   146ee:	6030      	str	r0, [r6, #0]
   146f0:	f7ff bbfa 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SEDN_MASK, TMC5031_SEDN_SHIFT, *value);
   146f4:	f7ff fb7d 	bl	13df2 <tmc5031_readInt>
   146f8:	6833      	ldr	r3, [r6, #0]
   146fa:	035b      	lsls	r3, r3, #13
   146fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   14700:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   14704:	431a      	orrs	r2, r3
   14706:	4639      	mov	r1, r7
   14708:	4628      	mov	r0, r5
   1470a:	f7ff fb01 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1470e:	2400      	movs	r4, #0
   14710:	f7ff bbea 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14714:	012f      	lsls	r7, r5, #4
   14716:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   1471a:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEMAX_MASK, TMC5031_SEMAX_SHIFT);
   1471c:	4639      	mov	r1, r7
   1471e:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14720:	b934      	cbnz	r4, 14730 <handleParameter+0x868>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEMAX_MASK, TMC5031_SEMAX_SHIFT);
   14722:	f7ff fb66 	bl	13df2 <tmc5031_readInt>
   14726:	f3c0 2003 	ubfx	r0, r0, #8, #4
   1472a:	6030      	str	r0, [r6, #0]
   1472c:	f7ff bbdc 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SEMAX_MASK, TMC5031_SEMAX_SHIFT, *value);
   14730:	f7ff fb5f 	bl	13df2 <tmc5031_readInt>
   14734:	6833      	ldr	r3, [r6, #0]
   14736:	021b      	lsls	r3, r3, #8
   14738:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1473c:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   14740:	431a      	orrs	r2, r3
   14742:	4639      	mov	r1, r7
   14744:	4628      	mov	r0, r5
   14746:	f7ff fae3 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1474a:	2400      	movs	r4, #0
   1474c:	f7ff bbcc 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14750:	012f      	lsls	r7, r5, #4
   14752:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   14756:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEUP_MASK, TMC5031_SEUP_SHIFT);
   14758:	4639      	mov	r1, r7
   1475a:	4628      	mov	r0, r5
		if(readWrite == READ) {
   1475c:	b934      	cbnz	r4, 1476c <handleParameter+0x8a4>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEUP_MASK, TMC5031_SEUP_SHIFT);
   1475e:	f7ff fb48 	bl	13df2 <tmc5031_readInt>
   14762:	f3c0 1041 	ubfx	r0, r0, #5, #2
   14766:	6030      	str	r0, [r6, #0]
   14768:	f7ff bbbe 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SEUP_MASK, TMC5031_SEUP_SHIFT, *value);
   1476c:	f7ff fb41 	bl	13df2 <tmc5031_readInt>
   14770:	6833      	ldr	r3, [r6, #0]
   14772:	015b      	lsls	r3, r3, #5
   14774:	f003 0360 	and.w	r3, r3, #96	; 0x60
   14778:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   1477c:	431a      	orrs	r2, r3
   1477e:	4639      	mov	r1, r7
   14780:	4628      	mov	r0, r5
   14782:	f7ff fac5 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14786:	2400      	movs	r4, #0
   14788:	f7ff bbae 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1478c:	012f      	lsls	r7, r5, #4
   1478e:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   14792:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEMIN_MASK, TMC5031_SEMIN_SHIFT);
   14794:	4639      	mov	r1, r7
   14796:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14798:	b934      	cbnz	r4, 147a8 <handleParameter+0x8e0>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SEMIN_MASK, TMC5031_SEMIN_SHIFT);
   1479a:	f7ff fb2a 	bl	13df2 <tmc5031_readInt>
   1479e:	f000 000f 	and.w	r0, r0, #15
   147a2:	6030      	str	r0, [r6, #0]
   147a4:	f7ff bba0 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SEMIN_MASK, TMC5031_SEMIN_SHIFT, *value);
   147a8:	f7ff fb23 	bl	13df2 <tmc5031_readInt>
   147ac:	6832      	ldr	r2, [r6, #0]
   147ae:	f020 000f 	bic.w	r0, r0, #15
   147b2:	f002 020f 	and.w	r2, r2, #15
   147b6:	4302      	orrs	r2, r0
   147b8:	4639      	mov	r1, r7
   147ba:	4628      	mov	r0, r5
   147bc:	f7ff faa8 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   147c0:	2400      	movs	r4, #0
   147c2:	f7ff bb91 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   147c6:	012f      	lsls	r7, r5, #4
   147c8:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   147cc:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SFILT_MASK, TMC5031_SFILT_SHIFT);
   147ce:	4639      	mov	r1, r7
   147d0:	4628      	mov	r0, r5
		if(readWrite == READ) {
   147d2:	b934      	cbnz	r4, 147e2 <handleParameter+0x91a>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SFILT_MASK, TMC5031_SFILT_SHIFT);
   147d4:	f7ff fb0d 	bl	13df2 <tmc5031_readInt>
   147d8:	f3c0 6000 	ubfx	r0, r0, #24, #1
   147dc:	6030      	str	r0, [r6, #0]
   147de:	f7ff bb83 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SFILT_MASK, TMC5031_SFILT_SHIFT, *value);
   147e2:	f7ff fb06 	bl	13df2 <tmc5031_readInt>
   147e6:	6833      	ldr	r3, [r6, #0]
   147e8:	061b      	lsls	r3, r3, #24
   147ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   147ee:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   147f2:	431a      	orrs	r2, r3
   147f4:	4639      	mov	r1, r7
   147f6:	4628      	mov	r0, r5
   147f8:	f7ff fa8a 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   147fc:	2400      	movs	r4, #0
   147fe:	f7ff bb73 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14802:	012f      	lsls	r7, r5, #4
   14804:	f047 076d 	orr.w	r7, r7, #109	; 0x6d
   14808:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SGT_MASK, TMC5031_SGT_SHIFT);
   1480a:	4639      	mov	r1, r7
   1480c:	4628      	mov	r0, r5
		if(readWrite == READ) {
   1480e:	b96c      	cbnz	r4, 1482c <handleParameter+0x964>
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SGT_MASK, TMC5031_SGT_SHIFT);
   14810:	f7ff faef 	bl	13df2 <tmc5031_readInt>
   14814:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   14816:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5031_FIELD_READ(motor, TMC5031_COOLCONF(motor), TMC5031_SGT_MASK, TMC5031_SGT_SHIFT);
   1481a:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   1481e:	bf18      	it	ne
   14820:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   14824:	4318      	orrs	r0, r3
   14826:	6030      	str	r0, [r6, #0]
   14828:	f7ff bb5e 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_COOLCONF(motor), TMC5031_SGT_MASK, TMC5031_SGT_SHIFT, *value);
   1482c:	f7ff fae1 	bl	13df2 <tmc5031_readInt>
   14830:	6833      	ldr	r3, [r6, #0]
   14832:	041b      	lsls	r3, r3, #16
   14834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   14838:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   1483c:	431a      	orrs	r2, r3
   1483e:	4639      	mov	r1, r7
   14840:	4628      	mov	r0, r5
   14842:	f7ff fa65 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14846:	2400      	movs	r4, #0
   14848:	f7ff bb4e 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1484c:	012f      	lsls	r7, r5, #4
   1484e:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   14852:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_VSENSE_MASK, TMC5031_VSENSE_SHIFT);
   14854:	4639      	mov	r1, r7
   14856:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14858:	b934      	cbnz	r4, 14868 <handleParameter+0x9a0>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_VSENSE_MASK, TMC5031_VSENSE_SHIFT);
   1485a:	f7ff faca 	bl	13df2 <tmc5031_readInt>
   1485e:	f3c0 4040 	ubfx	r0, r0, #17, #1
   14862:	6030      	str	r0, [r6, #0]
   14864:	f7ff bb40 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_VSENSE_MASK, TMC5031_VSENSE_SHIFT, *value);
   14868:	f7ff fac3 	bl	13df2 <tmc5031_readInt>
   1486c:	6833      	ldr	r3, [r6, #0]
   1486e:	045b      	lsls	r3, r3, #17
   14870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   14874:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
   14878:	431a      	orrs	r2, r3
   1487a:	4639      	mov	r1, r7
   1487c:	4628      	mov	r0, r5
   1487e:	f7ff fa47 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14882:	2400      	movs	r4, #0
   14884:	f7ff bb30 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14888:	2c00      	cmp	r4, #0
   1488a:	f040 8126 	bne.w	14ada <handleParameter+0xc12>
			*value = TMC5031_FIELD_READ(motor, TMC5031_DRVSTATUS(motor), TMC5031_CS_ACTUAL_MASK, TMC5031_CS_ACTUAL_SHIFT);
   1488e:	0129      	lsls	r1, r5, #4
   14890:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   14894:	b2c9      	uxtb	r1, r1
   14896:	4628      	mov	r0, r5
   14898:	f7ff faab 	bl	13df2 <tmc5031_readInt>
   1489c:	f3c0 4004 	ubfx	r0, r0, #16, #5
   148a0:	6030      	str	r0, [r6, #0]
   148a2:	f7ff bb21 	b.w	13ee8 <handleParameter+0x20>
		tempValue = tmc5031_readInt(motor, TMC5031_SWMODE(motor));
   148a6:	2720      	movs	r7, #32
   148a8:	40af      	lsls	r7, r5
   148aa:	b27f      	sxtb	r7, r7
   148ac:	f047 0814 	orr.w	r8, r7, #20
   148b0:	fa5f f888 	uxtb.w	r8, r8
   148b4:	4641      	mov	r1, r8
   148b6:	4628      	mov	r0, r5
   148b8:	f7ff fa9b 	bl	13df2 <tmc5031_readInt>
		if(readWrite == READ)
   148bc:	b96c      	cbnz	r4, 148da <handleParameter+0xa12>
			if(tempValue & TMC5031_SG_STOP_MASK)
   148be:	0541      	lsls	r1, r0, #21
   148c0:	d508      	bpl.n	148d4 <handleParameter+0xa0c>
				*value = tmc5031_readInt(motor, TMC5031_VCOOLTHRS(motor));
   148c2:	f047 0111 	orr.w	r1, r7, #17
   148c6:	b2c9      	uxtb	r1, r1
   148c8:	4628      	mov	r0, r5
   148ca:	f7ff fa92 	bl	13df2 <tmc5031_readInt>
   148ce:	6030      	str	r0, [r6, #0]
   148d0:	f7ff bb0a 	b.w	13ee8 <handleParameter+0x20>
				*value = 0;
   148d4:	6034      	str	r4, [r6, #0]
   148d6:	f7ff bb07 	b.w	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VCOOLTHRS(motor), *value);
   148da:	f047 0111 	orr.w	r1, r7, #17
   148de:	6832      	ldr	r2, [r6, #0]
   148e0:	b2c9      	uxtb	r1, r1
   148e2:	4628      	mov	r0, r5
   148e4:	f7ff fa14 	bl	13d10 <tmc5031_writeInt>
			TMC5031_FIELD_UPDATE(motor, TMC5031_SWMODE(motor), TMC5031_SG_STOP_MASK, TMC5031_SG_STOP_SHIFT, (*value) ? 1:0);
   148e8:	4641      	mov	r1, r8
   148ea:	4628      	mov	r0, r5
   148ec:	f7ff fa81 	bl	13df2 <tmc5031_readInt>
   148f0:	6833      	ldr	r3, [r6, #0]
   148f2:	2b00      	cmp	r3, #0
   148f4:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   148f8:	bf18      	it	ne
   148fa:	f44f 6380 	movne.w	r3, #1024	; 0x400
   148fe:	431a      	orrs	r2, r3
   14900:	4641      	mov	r1, r8
   14902:	4628      	mov	r0, r5
   14904:	f7ff fa04 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14908:	2400      	movs	r4, #0
   1490a:	f7ff baed 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   1490e:	2120      	movs	r1, #32
   14910:	40a9      	lsls	r1, r5
   14912:	f041 0111 	orr.w	r1, r1, #17
   14916:	b2c9      	uxtb	r1, r1
   14918:	b92c      	cbnz	r4, 14926 <handleParameter+0xa5e>
			*value = tmc5031_readInt(motor, TMC5031_VCOOLTHRS(motor));
   1491a:	4628      	mov	r0, r5
   1491c:	f7ff fa69 	bl	13df2 <tmc5031_readInt>
   14920:	6030      	str	r0, [r6, #0]
   14922:	f7ff bae1 	b.w	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_VCOOLTHRS(motor),*value);
   14926:	6832      	ldr	r2, [r6, #0]
   14928:	4628      	mov	r0, r5
   1492a:	f7ff f9f1 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1492e:	2400      	movs	r4, #0
   14930:	f7ff bada 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14934:	012f      	lsls	r7, r5, #4
   14936:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   1493a:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_RNDTF_MASK, TMC5031_RNDTF_SHIFT);
   1493c:	4639      	mov	r1, r7
   1493e:	4628      	mov	r0, r5
		if(readWrite == READ) {
   14940:	b934      	cbnz	r4, 14950 <handleParameter+0xa88>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_RNDTF_MASK, TMC5031_RNDTF_SHIFT);
   14942:	f7ff fa56 	bl	13df2 <tmc5031_readInt>
   14946:	f3c0 3040 	ubfx	r0, r0, #13, #1
   1494a:	6030      	str	r0, [r6, #0]
   1494c:	f7ff bacc 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_RNDTF_MASK, TMC5031_RNDTF_SHIFT, *value);
   14950:	f7ff fa4f 	bl	13df2 <tmc5031_readInt>
   14954:	6833      	ldr	r3, [r6, #0]
   14956:	035b      	lsls	r3, r3, #13
   14958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   1495c:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   14960:	431a      	orrs	r2, r3
   14962:	4639      	mov	r1, r7
   14964:	4628      	mov	r0, r5
   14966:	f7ff f9d3 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1496a:	2400      	movs	r4, #0
   1496c:	f7ff babc 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14970:	012f      	lsls	r7, r5, #4
   14972:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   14976:	b2ff      	uxtb	r7, r7
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_SYNC_MASK, TMC5031_SYNC_SHIFT);
   14978:	4639      	mov	r1, r7
   1497a:	4628      	mov	r0, r5
		if(readWrite == READ) {
   1497c:	b934      	cbnz	r4, 1498c <handleParameter+0xac4>
			*value = TMC5031_FIELD_READ(motor, TMC5031_CHOPCONF(motor), TMC5031_SYNC_MASK, TMC5031_SYNC_SHIFT);
   1497e:	f7ff fa38 	bl	13df2 <tmc5031_readInt>
   14982:	f3c0 5003 	ubfx	r0, r0, #20, #4
   14986:	6030      	str	r0, [r6, #0]
   14988:	f7ff baae 	b.w	13ee8 <handleParameter+0x20>
			TMC5031_FIELD_UPDATE(motor, TMC5031_CHOPCONF(motor), TMC5031_SYNC_MASK, TMC5031_SYNC_SHIFT, *value);
   1498c:	f7ff fa31 	bl	13df2 <tmc5031_readInt>
   14990:	6833      	ldr	r3, [r6, #0]
   14992:	051b      	lsls	r3, r3, #20
   14994:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
   14998:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
   1499c:	431a      	orrs	r2, r3
   1499e:	4639      	mov	r1, r7
   149a0:	4628      	mov	r0, r5
   149a2:	f7ff f9b5 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   149a6:	2400      	movs	r4, #0
   149a8:	f7ff ba9e 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   149ac:	2c00      	cmp	r4, #0
   149ae:	f040 8097 	bne.w	14ae0 <handleParameter+0xc18>
			*value = TMC5031_FIELD_READ(motor, TMC5031_DRVSTATUS(motor), TMC5031_SG_RESULT_MASK, TMC5031_SG_RESULT_SHIFT);
   149b2:	0129      	lsls	r1, r5, #4
   149b4:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   149b8:	b2c9      	uxtb	r1, r1
   149ba:	4628      	mov	r0, r5
   149bc:	f7ff fa19 	bl	13df2 <tmc5031_readInt>
   149c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
   149c4:	6030      	str	r0, [r6, #0]
   149c6:	f7ff ba8f 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   149ca:	2120      	movs	r1, #32
   149cc:	40a9      	lsls	r1, r5
   149ce:	f041 0119 	orr.w	r1, r1, #25
   149d2:	b2c9      	uxtb	r1, r1
   149d4:	b92c      	cbnz	r4, 149e2 <handleParameter+0xb1a>
			*value = tmc5031_readInt(motor, TMC5031_XENC(motor));
   149d6:	4628      	mov	r0, r5
   149d8:	f7ff fa0b 	bl	13df2 <tmc5031_readInt>
   149dc:	6030      	str	r0, [r6, #0]
   149de:	f7ff ba83 	b.w	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_XENC(motor),*value);
   149e2:	6832      	ldr	r2, [r6, #0]
   149e4:	4628      	mov	r0, r5
   149e6:	f7ff f993 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   149ea:	2400      	movs	r4, #0
   149ec:	f7ff ba7c 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   149f0:	2120      	movs	r1, #32
   149f2:	40a9      	lsls	r1, r5
   149f4:	f041 011a 	orr.w	r1, r1, #26
   149f8:	b2c9      	uxtb	r1, r1
   149fa:	b92c      	cbnz	r4, 14a08 <handleParameter+0xb40>
			*value = tmc5031_readInt(motor, TMC5031_ENC_CONST(motor));
   149fc:	4628      	mov	r0, r5
   149fe:	f7ff f9f8 	bl	13df2 <tmc5031_readInt>
   14a02:	6030      	str	r0, [r6, #0]
   14a04:	f7ff ba70 	b.w	13ee8 <handleParameter+0x20>
			tmc5031_writeInt(motor, TMC5031_ENC_CONST(motor),*value);
   14a08:	6832      	ldr	r2, [r6, #0]
   14a0a:	4628      	mov	r0, r5
   14a0c:	f7ff f980 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14a10:	2400      	movs	r4, #0
   14a12:	f7ff ba69 	b.w	13ee8 <handleParameter+0x20>
		if(readWrite == READ) {
   14a16:	b9d4      	cbnz	r4, 14a4e <handleParameter+0xb86>
			switch(motor)
   14a18:	2d01      	cmp	r5, #1
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a1a:	4621      	mov	r1, r4
   14a1c:	d00b      	beq.n	14a36 <handleParameter+0xb6e>
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a1e:	4620      	mov	r0, r4
   14a20:	f7ff f9e7 	bl	13df2 <tmc5031_readInt>
				tempValue &= (1<<3) | (1<<4);
   14a24:	f000 0018 	and.w	r0, r0, #24
				*value = (tempValue == (1<<4))? 1 : 0;
   14a28:	f1a0 0210 	sub.w	r2, r0, #16
   14a2c:	4250      	negs	r0, r2
   14a2e:	4150      	adcs	r0, r2
   14a30:	6030      	str	r0, [r6, #0]
				break;
   14a32:	f7ff ba59 	b.w	13ee8 <handleParameter+0x20>
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a36:	4628      	mov	r0, r5
   14a38:	f7ff f9db 	bl	13df2 <tmc5031_readInt>
				tempValue &= (1<<5) | (1<<6);
   14a3c:	f000 0060 	and.w	r0, r0, #96	; 0x60
				*value = (tempValue == ((1<<5) | (0<<6)))? 1 : 0;
   14a40:	f1a0 0320 	sub.w	r3, r0, #32
   14a44:	4258      	negs	r0, r3
   14a46:	4158      	adcs	r0, r3
   14a48:	6030      	str	r0, [r6, #0]
				break;
   14a4a:	f7ff ba4d 	b.w	13ee8 <handleParameter+0x20>
			switch(motor)
   14a4e:	2d01      	cmp	r5, #1
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a50:	f04f 0100 	mov.w	r1, #0
   14a54:	d014      	beq.n	14a80 <handleParameter+0xbb8>
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a56:	4608      	mov	r0, r1
   14a58:	f7ff f9cb 	bl	13df2 <tmc5031_readInt>
				tempValue = (*value)? tempValue & ~(1<<3) : tempValue | (1<<3);  // poscmp_enable -> ENCODER1 A,B
   14a5c:	6833      	ldr	r3, [r6, #0]
   14a5e:	b153      	cbz	r3, 14a76 <handleParameter+0xbae>
   14a60:	f020 0208 	bic.w	r2, r0, #8
				tempValue = (*value)? tempValue | (1<<4) : tempValue &~ (1<<4);  // enc1_refsel -> ENCODER1 N to REFL1
   14a64:	f042 0210 	orr.w	r2, r2, #16
				tmc5031_writeInt(motor, TMC5031_GCONF, tempValue);
   14a68:	2100      	movs	r1, #0
   14a6a:	4608      	mov	r0, r1
   14a6c:	f7ff f950 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14a70:	2400      	movs	r4, #0
				break;
   14a72:	f7ff ba39 	b.w	13ee8 <handleParameter+0x20>
				tempValue = (*value)? tempValue | (1<<4) : tempValue &~ (1<<4);  // enc1_refsel -> ENCODER1 N to REFL1
   14a76:	f020 0210 	bic.w	r2, r0, #16
   14a7a:	f042 0208 	orr.w	r2, r2, #8
   14a7e:	e7f3      	b.n	14a68 <handleParameter+0xba0>
				tempValue = tmc5031_readInt(motor, TMC5031_GCONF);
   14a80:	4628      	mov	r0, r5
   14a82:	f7ff f9b6 	bl	13df2 <tmc5031_readInt>
				tempValue = (*value) ? tempValue | (1<<5) : tempValue &~ (1<<5);  // enc2_enable -> ENCODER2 A,B to REFR1,2
   14a86:	6833      	ldr	r3, [r6, #0]
   14a88:	b153      	cbz	r3, 14aa0 <handleParameter+0xbd8>
				tempValue = (*value) ? tempValue &~ (1<<6) : tempValue | (1<<6);  // enc2_refse2 -> ENCODER1 N to REFL2
   14a8a:	f020 0240 	bic.w	r2, r0, #64	; 0x40
   14a8e:	f042 0220 	orr.w	r2, r2, #32
				tmc5031_writeInt(motor, TMC5031_GCONF, tempValue);
   14a92:	2100      	movs	r1, #0
   14a94:	2001      	movs	r0, #1
   14a96:	f7ff f93b 	bl	13d10 <tmc5031_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14a9a:	2400      	movs	r4, #0
				break;
   14a9c:	f7ff ba24 	b.w	13ee8 <handleParameter+0x20>
				tempValue = (*value) ? tempValue | (1<<5) : tempValue &~ (1<<5);  // enc2_enable -> ENCODER2 A,B to REFR1,2
   14aa0:	f020 0220 	bic.w	r2, r0, #32
				tempValue = (*value) ? tempValue &~ (1<<6) : tempValue | (1<<6);  // enc2_refse2 -> ENCODER1 N to REFL2
   14aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14aa8:	e7f3      	b.n	14a92 <handleParameter+0xbca>
		return TMC_ERROR_MOTOR;
   14aaa:	2408      	movs	r4, #8
   14aac:	f7ff ba1c 	b.w	13ee8 <handleParameter+0x20>
	switch(type)
   14ab0:	2404      	movs	r4, #4
   14ab2:	f7ff ba19 	b.w	13ee8 <handleParameter+0x20>
   14ab6:	2404      	movs	r4, #4
   14ab8:	f7ff ba16 	b.w	13ee8 <handleParameter+0x20>
			errors |= TMC_ERROR_TYPE;
   14abc:	2404      	movs	r4, #4
   14abe:	f7ff ba13 	b.w	13ee8 <handleParameter+0x20>
   14ac2:	2404      	movs	r4, #4
   14ac4:	f7ff ba10 	b.w	13ee8 <handleParameter+0x20>
   14ac8:	2404      	movs	r4, #4
   14aca:	f7ff ba0d 	b.w	13ee8 <handleParameter+0x20>
   14ace:	2404      	movs	r4, #4
   14ad0:	f7ff ba0a 	b.w	13ee8 <handleParameter+0x20>
   14ad4:	2404      	movs	r4, #4
   14ad6:	f7ff ba07 	b.w	13ee8 <handleParameter+0x20>
   14ada:	2404      	movs	r4, #4
   14adc:	f7ff ba04 	b.w	13ee8 <handleParameter+0x20>
   14ae0:	2404      	movs	r4, #4
   14ae2:	f7ff ba01 	b.w	13ee8 <handleParameter+0x20>

00014ae6 <SAP>:
{
   14ae6:	b507      	push	{r0, r1, r2, lr}
   14ae8:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   14aea:	ab01      	add	r3, sp, #4
   14aec:	4602      	mov	r2, r0
   14aee:	2001      	movs	r0, #1
   14af0:	f7ff f9ea 	bl	13ec8 <handleParameter>
}
   14af4:	b003      	add	sp, #12
   14af6:	f85d fb04 	ldr.w	pc, [sp], #4

00014afa <GAP>:
{
   14afa:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   14afc:	4602      	mov	r2, r0
   14afe:	2000      	movs	r0, #0
   14b00:	f7ff b9e2 	b.w	13ec8 <handleParameter>

00014b04 <reset>:
{
   14b04:	b508      	push	{r3, lr}
		if(tmc5031_readInt(motor, TMC5031_VACTUAL(motor)) != 0)
   14b06:	2122      	movs	r1, #34	; 0x22
   14b08:	2000      	movs	r0, #0
   14b0a:	f7ff f972 	bl	13df2 <tmc5031_readInt>
   14b0e:	b950      	cbnz	r0, 14b26 <reset+0x22>
   14b10:	2142      	movs	r1, #66	; 0x42
   14b12:	2001      	movs	r0, #1
   14b14:	f7ff f96d 	bl	13df2 <tmc5031_readInt>
   14b18:	b928      	cbnz	r0, 14b26 <reset+0x22>
	return tmc5031_reset(TMC5031_config);
   14b1a:	4b04      	ldr	r3, [pc, #16]	; (14b2c <reset+0x28>)
   14b1c:	6818      	ldr	r0, [r3, #0]
}
   14b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tmc5031_reset(TMC5031_config);
   14b22:	f00e bc0d 	b.w	23340 <tmc5031_reset>
}
   14b26:	2000      	movs	r0, #0
   14b28:	bd08      	pop	{r3, pc}
   14b2a:	bf00      	nop
   14b2c:	1fff3194 	.word	0x1fff3194

00014b30 <TMC5031_init>:

void TMC5031_init(void)
{
   14b30:	b570      	push	{r4, r5, r6, lr}
	tmc5031_initConfig(&TMC5031);
   14b32:	4c42      	ldr	r4, [pc, #264]	; (14c3c <TMC5031_init+0x10c>)

	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   14b34:	4e42      	ldr	r6, [pc, #264]	; (14c40 <TMC5031_init+0x110>)
	tmc5031_initConfig(&TMC5031);
   14b36:	1d20      	adds	r0, r4, #4
   14b38:	f00e fb68 	bl	2320c <tmc5031_initConfig>
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   14b3c:	68f5      	ldr	r5, [r6, #12]
   14b3e:	686b      	ldr	r3, [r5, #4]
	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
   14b40:	f503 7284 	add.w	r2, r3, #264	; 0x108
   14b44:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
   14b48:	f503 7294 	add.w	r2, r3, #296	; 0x128
   14b4c:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
	Pins.SWSEL     = &HAL.IOs->pins->DIO16;
   14b50:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
   14b54:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   14b58:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   14b5c:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   14b60:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   14b64:	f503 6281 	add.w	r2, r3, #1032	; 0x408
	Pins.SWION     = &HAL.IOs->pins->DIO19;
   14b68:	f503 6385 	add.w	r3, r3, #1064	; 0x428
   14b6c:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   14b70:	682b      	ldr	r3, [r5, #0]
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   14b72:	f8c4 22b0 	str.w	r2, [r4, #688]	; 0x2b0
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   14b76:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   14b78:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   14b7c:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SWSEL);
   14b7e:	682b      	ldr	r3, [r5, #0]
   14b80:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   14b84:	68db      	ldr	r3, [r3, #12]
   14b86:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.SWSEL);
   14b88:	682b      	ldr	r3, [r5, #0]
   14b8a:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   14b8e:	699b      	ldr	r3, [r3, #24]
   14b90:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.INT_ENCA);
   14b92:	682b      	ldr	r3, [r5, #0]
   14b94:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   14b98:	691b      	ldr	r3, [r3, #16]
   14b9a:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.PP_ENCB);
   14b9c:	682b      	ldr	r3, [r5, #0]
   14b9e:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   14ba2:	691b      	ldr	r3, [r3, #16]
   14ba4:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWION);
   14ba6:	682b      	ldr	r3, [r5, #0]
   14ba8:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   14bac:	691b      	ldr	r3, [r3, #16]
   14bae:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWIOP1);
   14bb0:	682b      	ldr	r3, [r5, #0]
   14bb2:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   14bb6:	691b      	ldr	r3, [r3, #16]
   14bb8:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWIOP2);
   14bba:	682b      	ldr	r3, [r5, #0]
   14bbc:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   14bc0:	691b      	ldr	r3, [r3, #16]
   14bc2:	4798      	blx	r3

	TMC5031_SPIChannel = &HAL.SPI->ch1;
	TMC5031_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   14bc4:	686b      	ldr	r3, [r5, #4]
	TMC5031_SPIChannel = &HAL.SPI->ch1;
   14bc6:	6932      	ldr	r2, [r6, #16]
   14bc8:	f8c4 22b8 	str.w	r2, [r4, #696]	; 0x2b8
	TMC5031_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   14bcc:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   14bd0:	6053      	str	r3, [r2, #4]

	TMC5031_config = Evalboards.ch1.config;
   14bd2:	4b1c      	ldr	r3, [pc, #112]	; (14c44 <TMC5031_init+0x114>)

	Evalboards.ch1.config->reset        = reset;
   14bd4:	491c      	ldr	r1, [pc, #112]	; (14c48 <TMC5031_init+0x118>)
	TMC5031_config = Evalboards.ch1.config;
   14bd6:	699a      	ldr	r2, [r3, #24]
   14bd8:	6022      	str	r2, [r4, #0]
	Evalboards.ch1.config->reset        = reset;
   14bda:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
	Evalboards.ch1.config->state        = CONFIG_RESET;
   14bde:	2001      	movs	r0, #1
	Evalboards.ch1.config->restore      = restore;
   14be0:	491a      	ldr	r1, [pc, #104]	; (14c4c <TMC5031_init+0x11c>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
   14be2:	8010      	strh	r0, [r2, #0]
	Evalboards.ch1.config->restore      = restore;
   14be4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   14be8:	4a19      	ldr	r2, [pc, #100]	; (14c50 <TMC5031_init+0x120>)
   14bea:	625a      	str	r2, [r3, #36]	; 0x24
	Evalboards.ch1.right                = right;
   14bec:	4a19      	ldr	r2, [pc, #100]	; (14c54 <TMC5031_init+0x124>)
   14bee:	621a      	str	r2, [r3, #32]
	Evalboards.ch1.left                 = left;
   14bf0:	4a19      	ldr	r2, [pc, #100]	; (14c58 <TMC5031_init+0x128>)
   14bf2:	61da      	str	r2, [r3, #28]
	Evalboards.ch1.stop                 = stop;
   14bf4:	4a19      	ldr	r2, [pc, #100]	; (14c5c <TMC5031_init+0x12c>)
   14bf6:	629a      	str	r2, [r3, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   14bf8:	4a19      	ldr	r2, [pc, #100]	; (14c60 <TMC5031_init+0x130>)
   14bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   14bfc:	4a19      	ldr	r2, [pc, #100]	; (14c64 <TMC5031_init+0x134>)
   14bfe:	639a      	str	r2, [r3, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   14c00:	4a19      	ldr	r2, [pc, #100]	; (14c68 <TMC5031_init+0x138>)
   14c02:	62da      	str	r2, [r3, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   14c04:	4a19      	ldr	r2, [pc, #100]	; (14c6c <TMC5031_init+0x13c>)
   14c06:	631a      	str	r2, [r3, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   14c08:	4a19      	ldr	r2, [pc, #100]	; (14c70 <TMC5031_init+0x140>)
   14c0a:	64da      	str	r2, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   14c0c:	4a19      	ldr	r2, [pc, #100]	; (14c74 <TMC5031_init+0x144>)
   14c0e:	649a      	str	r2, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   14c10:	4a19      	ldr	r2, [pc, #100]	; (14c78 <TMC5031_init+0x148>)
   14c12:	659a      	str	r2, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   14c14:	4a19      	ldr	r2, [pc, #100]	; (14c7c <TMC5031_init+0x14c>)
   14c16:	655a      	str	r2, [r3, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   14c18:	4a19      	ldr	r2, [pc, #100]	; (14c80 <TMC5031_init+0x150>)
   14c1a:	651a      	str	r2, [r3, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   14c1c:	4a19      	ldr	r2, [pc, #100]	; (14c84 <TMC5031_init+0x154>)
   14c1e:	665a      	str	r2, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   14c20:	4a19      	ldr	r2, [pc, #100]	; (14c88 <TMC5031_init+0x158>)
   14c22:	661a      	str	r2, [r3, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = MOTORS;
   14c24:	2202      	movs	r2, #2
   14c26:	751a      	strb	r2, [r3, #20]
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   14c28:	2132      	movs	r1, #50	; 0x32
   14c2a:	22b6      	movs	r2, #182	; 0xb6
   14c2c:	e9c3 2103 	strd	r2, r1, [r3, #12]
	Evalboards.ch1.deInit               = deInit;

	enableDriver(DRIVER_ENABLE);
};
   14c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Evalboards.ch1.deInit               = deInit;
   14c34:	4a15      	ldr	r2, [pc, #84]	; (14c8c <TMC5031_init+0x15c>)
   14c36:	65da      	str	r2, [r3, #92]	; 0x5c
	enableDriver(DRIVER_ENABLE);
   14c38:	f7fe bfde 	b.w	13bf8 <enableDriver>
   14c3c:	1fff3194 	.word	0x1fff3194
   14c40:	00029d1c 	.word	0x00029d1c
   14c44:	1fff5e88 	.word	0x1fff5e88
   14c48:	00014b05 	.word	0x00014b05
   14c4c:	00013b8d 	.word	0x00013b8d
   14c50:	00013d9d 	.word	0x00013d9d
   14c54:	00013df1 	.word	0x00013df1
   14c58:	00013ded 	.word	0x00013ded
   14c5c:	00013de9 	.word	0x00013de9
   14c60:	00014afb 	.word	0x00014afb
   14c64:	00014ae7 	.word	0x00014ae7
   14c68:	00013d33 	.word	0x00013d33
   14c6c:	00013ea7 	.word	0x00013ea7
   14c70:	00013d2d 	.word	0x00013d2d
   14c74:	00013e99 	.word	0x00013e99
   14c78:	00013b61 	.word	0x00013b61
   14c7c:	00013b99 	.word	0x00013b99
   14c80:	00013b2d 	.word	0x00013b2d
   14c84:	00013bf9 	.word	0x00013bf9
   14c88:	00013b55 	.word	0x00013b55
   14c8c:	00013c3d 	.word	0x00013c3d

00014c90 <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= TMC5041_MOTORS)
   14c90:	2801      	cmp	r0, #1
		return TMC_ERROR_MOTOR;

	*value = TMC5041.velocity[motor];
   14c92:	bf9f      	itttt	ls
   14c94:	4b04      	ldrls	r3, [pc, #16]	; (14ca8 <getMeasuredSpeed+0x18>)
   14c96:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   14c9a:	6843      	ldrls	r3, [r0, #4]
   14c9c:	600b      	strls	r3, [r1, #0]

	return TMC_ERROR_NONE;
   14c9e:	bf94      	ite	ls
   14ca0:	2000      	movls	r0, #0
		return TMC_ERROR_MOTOR;
   14ca2:	2008      	movhi	r0, #8
}
   14ca4:	4770      	bx	lr
   14ca6:	bf00      	nop
   14ca8:	1fff3464 	.word	0x1fff3464

00014cac <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   14cac:	4b01      	ldr	r3, [pc, #4]	; (14cb4 <checkErrors+0x8>)
   14cae:	2200      	movs	r2, #0
   14cb0:	609a      	str	r2, [r3, #8]
}
   14cb2:	4770      	bx	lr
   14cb4:	1fff5e88 	.word	0x1fff5e88

00014cb8 <periodicJob>:
{
   14cb8:	4601      	mov	r1, r0
	tmc5041_periodicJob(&TMC5041, tick);
   14cba:	4801      	ldr	r0, [pc, #4]	; (14cc0 <periodicJob+0x8>)
   14cbc:	f00e bbe2 	b.w	23484 <tmc5041_periodicJob>
   14cc0:	1fff3464 	.word	0x1fff3464

00014cc4 <readRegister>:
{
   14cc4:	b510      	push	{r4, lr}
	*value = tmc5041_readInt(&TMC5041, address);
   14cc6:	4803      	ldr	r0, [pc, #12]	; (14cd4 <readRegister+0x10>)
{
   14cc8:	4614      	mov	r4, r2
	*value = tmc5041_readInt(&TMC5041, address);
   14cca:	f00e fb8a 	bl	233e2 <tmc5041_readInt>
   14cce:	6020      	str	r0, [r4, #0]
}
   14cd0:	bd10      	pop	{r4, pc}
   14cd2:	bf00      	nop
   14cd4:	1fff3464 	.word	0x1fff3464

00014cd8 <writeRegister>:
	tmc5041_writeInt(&TMC5041, address, value);
   14cd8:	4801      	ldr	r0, [pc, #4]	; (14ce0 <writeRegister+0x8>)
   14cda:	f00e bb74 	b.w	233c6 <tmc5041_writeInt>
   14cde:	bf00      	nop
   14ce0:	1fff3464 	.word	0x1fff3464

00014ce4 <moveTo>:
	if(motor >= TMC5041_MOTORS)
   14ce4:	2801      	cmp	r0, #1
{
   14ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ce8:	4603      	mov	r3, r0
   14cea:	460f      	mov	r7, r1
	if(motor >= TMC5041_MOTORS)
   14cec:	d824      	bhi.n	14d38 <moveTo+0x54>
	if(TMC5041.vMaxModified[motor])
   14cee:	2520      	movs	r5, #32
   14cf0:	4085      	lsls	r5, r0
   14cf2:	4812      	ldr	r0, [pc, #72]	; (14d3c <moveTo+0x58>)
   14cf4:	18c4      	adds	r4, r0, r3
   14cf6:	b26e      	sxtb	r6, r5
   14cf8:	f894 3298 	ldrb.w	r3, [r4, #664]	; 0x298
   14cfc:	b173      	cbz	r3, 14d1c <moveTo+0x38>
		tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), TMC5041_config->shadowRegister[TMC5041_VMAX(motor)]);
   14cfe:	f8d0 329c 	ldr.w	r3, [r0, #668]	; 0x29c
   14d02:	f045 0207 	orr.w	r2, r5, #7
   14d06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14d0a:	f046 0107 	orr.w	r1, r6, #7
   14d0e:	685a      	ldr	r2, [r3, #4]
   14d10:	b2c9      	uxtb	r1, r1
   14d12:	f00e fb58 	bl	233c6 <tmc5041_writeInt>
		TMC5041.vMaxModified[motor] = false;
   14d16:	2300      	movs	r3, #0
   14d18:	f884 3298 	strb.w	r3, [r4, #664]	; 0x298
	tmc5041_writeInt(motorToIC(motor), TMC5041_XTARGET(motor), position);
   14d1c:	f046 060d 	orr.w	r6, r6, #13
   14d20:	4806      	ldr	r0, [pc, #24]	; (14d3c <moveTo+0x58>)
   14d22:	463a      	mov	r2, r7
   14d24:	b2f1      	uxtb	r1, r6
   14d26:	f00e fb4e 	bl	233c6 <tmc5041_writeInt>
	tmc5041_writeInt(motorToIC(motor), TMC5041_RAMPMODE(motor), TMC5041_MODE_POSITION);
   14d2a:	4804      	ldr	r0, [pc, #16]	; (14d3c <moveTo+0x58>)
   14d2c:	2200      	movs	r2, #0
   14d2e:	b2e9      	uxtb	r1, r5
   14d30:	f00e fb49 	bl	233c6 <tmc5041_writeInt>
	return TMC_ERROR_NONE;
   14d34:	2000      	movs	r0, #0
}
   14d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TMC_ERROR_MOTOR;
   14d38:	2008      	movs	r0, #8
   14d3a:	e7fc      	b.n	14d36 <moveTo+0x52>
   14d3c:	1fff3464 	.word	0x1fff3464

00014d40 <moveBy>:
{
   14d40:	b538      	push	{r3, r4, r5, lr}
	*ticks = tmc5041_readInt(motorToIC(motor), TMC5041_XACTUAL(motor)) + *ticks;
   14d42:	2320      	movs	r3, #32
   14d44:	4083      	lsls	r3, r0
   14d46:	f043 0301 	orr.w	r3, r3, #1
{
   14d4a:	460d      	mov	r5, r1
   14d4c:	4604      	mov	r4, r0
	*ticks = tmc5041_readInt(motorToIC(motor), TMC5041_XACTUAL(motor)) + *ticks;
   14d4e:	b2d9      	uxtb	r1, r3
   14d50:	4804      	ldr	r0, [pc, #16]	; (14d64 <moveBy+0x24>)
   14d52:	f00e fb46 	bl	233e2 <tmc5041_readInt>
   14d56:	6829      	ldr	r1, [r5, #0]
   14d58:	4401      	add	r1, r0
   14d5a:	6029      	str	r1, [r5, #0]
	return moveTo(motor, *ticks);
   14d5c:	4620      	mov	r0, r4
}
   14d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return moveTo(motor, *ticks);
   14d62:	e7bf      	b.n	14ce4 <moveTo>
   14d64:	1fff3464 	.word	0x1fff3464

00014d68 <handleParameter>:
	if(motor >= TMC5041_MOTORS)
   14d68:	2901      	cmp	r1, #1
{
   14d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d6c:	4604      	mov	r4, r0
   14d6e:	460d      	mov	r5, r1
   14d70:	461e      	mov	r6, r3
	if(motor >= TMC5041_MOTORS)
   14d72:	f200 8592 	bhi.w	1589a <handleParameter+0xb32>
	switch(type)
   14d76:	2a1d      	cmp	r2, #29
   14d78:	d943      	bls.n	14e02 <handleParameter+0x9a>
   14d7a:	2a8c      	cmp	r2, #140	; 0x8c
   14d7c:	f000 8290 	beq.w	152a0 <handleParameter+0x538>
   14d80:	f102 035e 	add.w	r3, r2, #94	; 0x5e
   14d84:	b2db      	uxtb	r3, r3
   14d86:	2b31      	cmp	r3, #49	; 0x31
   14d88:	d901      	bls.n	14d8e <handleParameter+0x26>
   14d8a:	2404      	movs	r4, #4
   14d8c:	e037      	b.n	14dfe <handleParameter+0x96>
   14d8e:	3aa2      	subs	r2, #162	; 0xa2
   14d90:	2a31      	cmp	r2, #49	; 0x31
   14d92:	d833      	bhi.n	14dfc <handleParameter+0x94>
   14d94:	e8df f012 	tbh	[pc, r2, lsl #1]
   14d98:	02f502d9 	.word	0x02f502d9
   14d9c:	032f0313 	.word	0x032f0313
   14da0:	03c0037e 	.word	0x03c0037e
   14da4:	03f003d5 	.word	0x03f003d5
   14da8:	0428040c 	.word	0x0428040c
   14dac:	04630446 	.word	0x04630446
   14db0:	00320484 	.word	0x00320484
   14db4:	00320032 	.word	0x00320032
   14db8:	04a90032 	.word	0x04a90032
   14dbc:	04d604c7 	.word	0x04d604c7
   14dc0:	003204fe 	.word	0x003204fe
   14dc4:	00320511 	.word	0x00320511
   14dc8:	00320032 	.word	0x00320032
   14dcc:	00320032 	.word	0x00320032
   14dd0:	00320032 	.word	0x00320032
   14dd4:	00320032 	.word	0x00320032
   14dd8:	00320032 	.word	0x00320032
   14ddc:	00320032 	.word	0x00320032
   14de0:	00320032 	.word	0x00320032
   14de4:	00320032 	.word	0x00320032
   14de8:	00320032 	.word	0x00320032
   14dec:	00320032 	.word	0x00320032
   14df0:	0032052f 	.word	0x0032052f
   14df4:	05840032 	.word	0x05840032
   14df8:	053d0584 	.word	0x053d0584
   14dfc:	2404      	movs	r4, #4
}
   14dfe:	4620      	mov	r0, r4
   14e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e02:	2a1d      	cmp	r2, #29
   14e04:	f200 854f 	bhi.w	158a6 <handleParameter+0xb3e>
   14e08:	e8df f012 	tbh	[pc, r2, lsl #1]
   14e0c:	002f001e 	.word	0x002f001e
   14e10:	00580040 	.word	0x00580040
   14e14:	008e006b 	.word	0x008e006b
   14e18:	00bd009f 	.word	0x00bd009f
   14e1c:	054d00da 	.word	0x054d00da
   14e20:	00fb00e9 	.word	0x00fb00e9
   14e24:	0139010b 	.word	0x0139010b
   14e28:	01790168 	.word	0x01790168
   14e2c:	019d018c 	.word	0x019d018c
   14e30:	01bf01ae 	.word	0x01bf01ae
   14e34:	01e101d0 	.word	0x01e101d0
   14e38:	020301f2 	.word	0x020301f2
   14e3c:	054d0214 	.word	0x054d0214
   14e40:	054d054d 	.word	0x054d054d
   14e44:	02410225 	.word	0x02410225
		if(readWrite == READ) {
   14e48:	2120      	movs	r1, #32
   14e4a:	40a9      	lsls	r1, r5
   14e4c:	f041 010d 	orr.w	r1, r1, #13
   14e50:	b2c9      	uxtb	r1, r1
   14e52:	b920      	cbnz	r0, 14e5e <handleParameter+0xf6>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_XTARGET(motor));
   14e54:	48af      	ldr	r0, [pc, #700]	; (15114 <handleParameter+0x3ac>)
   14e56:	f00e fac4 	bl	233e2 <tmc5041_readInt>
   14e5a:	6030      	str	r0, [r6, #0]
   14e5c:	e7cf      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_XTARGET(motor), *value);
   14e5e:	6832      	ldr	r2, [r6, #0]
   14e60:	48ac      	ldr	r0, [pc, #688]	; (15114 <handleParameter+0x3ac>)
   14e62:	f00e fab0 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14e66:	2400      	movs	r4, #0
   14e68:	e7c9      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14e6a:	2120      	movs	r1, #32
   14e6c:	40a9      	lsls	r1, r5
   14e6e:	f041 0101 	orr.w	r1, r1, #1
   14e72:	b2c9      	uxtb	r1, r1
   14e74:	b920      	cbnz	r0, 14e80 <handleParameter+0x118>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_XACTUAL(motor));
   14e76:	48a7      	ldr	r0, [pc, #668]	; (15114 <handleParameter+0x3ac>)
   14e78:	f00e fab3 	bl	233e2 <tmc5041_readInt>
   14e7c:	6030      	str	r0, [r6, #0]
   14e7e:	e7be      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_XACTUAL(motor), *value);
   14e80:	6832      	ldr	r2, [r6, #0]
   14e82:	48a4      	ldr	r0, [pc, #656]	; (15114 <handleParameter+0x3ac>)
   14e84:	f00e fa9f 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14e88:	2400      	movs	r4, #0
   14e8a:	e7b8      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14e8c:	2120      	movs	r1, #32
   14e8e:	40a9      	lsls	r1, r5
   14e90:	f041 0107 	orr.w	r1, r1, #7
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VMAX(motor));
   14e94:	489f      	ldr	r0, [pc, #636]	; (15114 <handleParameter+0x3ac>)
   14e96:	b2c9      	uxtb	r1, r1
		if(readWrite == READ) {
   14e98:	b91c      	cbnz	r4, 14ea2 <handleParameter+0x13a>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VMAX(motor));
   14e9a:	f00e faa2 	bl	233e2 <tmc5041_readInt>
   14e9e:	6030      	str	r0, [r6, #0]
   14ea0:	e7ad      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(*value));
   14ea2:	6832      	ldr	r2, [r6, #0]
			TMC5041.vMaxModified[motor] = true;
   14ea4:	4405      	add	r5, r0
			tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(*value));
   14ea6:	2a00      	cmp	r2, #0
			TMC5041.vMaxModified[motor] = true;
   14ea8:	f04f 0301 	mov.w	r3, #1
			tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(*value));
   14eac:	bfb8      	it	lt
   14eae:	4252      	neglt	r2, r2
			TMC5041.vMaxModified[motor] = true;
   14eb0:	f885 3298 	strb.w	r3, [r5, #664]	; 0x298
	uint32_t errors = TMC_ERROR_NONE;
   14eb4:	2400      	movs	r4, #0
			tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(*value));
   14eb6:	f00e fa86 	bl	233c6 <tmc5041_writeInt>
   14eba:	e7a0      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14ebc:	2800      	cmp	r0, #0
   14ebe:	f040 84f5 	bne.w	158ac <handleParameter+0xb44>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VACTUAL(motor));
   14ec2:	2120      	movs	r1, #32
   14ec4:	40a9      	lsls	r1, r5
   14ec6:	f041 0102 	orr.w	r1, r1, #2
   14eca:	4892      	ldr	r0, [pc, #584]	; (15114 <handleParameter+0x3ac>)
   14ecc:	b2c9      	uxtb	r1, r1
   14ece:	f00e fa88 	bl	233e2 <tmc5041_readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   14ed2:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   14ed6:	bf18      	it	ne
   14ed8:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   14edc:	4318      	orrs	r0, r3
   14ede:	6030      	str	r0, [r6, #0]
   14ee0:	e78d      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14ee2:	4f8c      	ldr	r7, [pc, #560]	; (15114 <handleParameter+0x3ac>)
   14ee4:	2120      	movs	r1, #32
   14ee6:	40a9      	lsls	r1, r5
   14ee8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   14eec:	f041 0507 	orr.w	r5, r1, #7
   14ef0:	00aa      	lsls	r2, r5, #2
			*value=TMC5041_config->shadowRegister[TMC5041_VMAX(motor)];
   14ef2:	4413      	add	r3, r2
		if(readWrite == READ) {
   14ef4:	b910      	cbnz	r0, 14efc <handleParameter+0x194>
			*value=TMC5041_config->shadowRegister[TMC5041_VMAX(motor)];
   14ef6:	685b      	ldr	r3, [r3, #4]
   14ef8:	6033      	str	r3, [r6, #0]
   14efa:	e780      	b.n	14dfe <handleParameter+0x96>
			TMC5041_config->shadowRegister[TMC5041_VMAX(motor)] = abs(*value);
   14efc:	6832      	ldr	r2, [r6, #0]
   14efe:	2a00      	cmp	r2, #0
   14f00:	bfb8      	it	lt
   14f02:	4252      	neglt	r2, r2
   14f04:	605a      	str	r2, [r3, #4]
			if(tmc5041_readInt(motorToIC(motor), TMC5041_RAMPMODE(motor)) == TMC5041_MODE_POSITION)
   14f06:	b2c9      	uxtb	r1, r1
   14f08:	4638      	mov	r0, r7
   14f0a:	f00e fa6a 	bl	233e2 <tmc5041_readInt>
   14f0e:	4604      	mov	r4, r0
   14f10:	b108      	cbz	r0, 14f16 <handleParameter+0x1ae>
	uint32_t errors = TMC_ERROR_NONE;
   14f12:	2400      	movs	r4, #0
   14f14:	e773      	b.n	14dfe <handleParameter+0x96>
				tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(*value));
   14f16:	6832      	ldr	r2, [r6, #0]
   14f18:	2a00      	cmp	r2, #0
   14f1a:	bfb8      	it	lt
   14f1c:	4252      	neglt	r2, r2
   14f1e:	b2e9      	uxtb	r1, r5
   14f20:	4638      	mov	r0, r7
   14f22:	f00e fa50 	bl	233c6 <tmc5041_writeInt>
   14f26:	e76a      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14f28:	2120      	movs	r1, #32
   14f2a:	40a9      	lsls	r1, r5
   14f2c:	f041 0106 	orr.w	r1, r1, #6
   14f30:	b2c9      	uxtb	r1, r1
   14f32:	b920      	cbnz	r0, 14f3e <handleParameter+0x1d6>
			*value=tmc5041_readInt(motorToIC(motor), TMC5041_AMAX(motor));
   14f34:	4877      	ldr	r0, [pc, #476]	; (15114 <handleParameter+0x3ac>)
   14f36:	f00e fa54 	bl	233e2 <tmc5041_readInt>
   14f3a:	6030      	str	r0, [r6, #0]
   14f3c:	e75f      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_AMAX(motor), *value);
   14f3e:	6832      	ldr	r2, [r6, #0]
   14f40:	4874      	ldr	r0, [pc, #464]	; (15114 <handleParameter+0x3ac>)
   14f42:	f00e fa40 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14f46:	2400      	movs	r4, #0
   14f48:	e759      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14f4a:	2120      	movs	r1, #32
   14f4c:	fa01 f505 	lsl.w	r5, r1, r5
   14f50:	f045 0510 	orr.w	r5, r5, #16
   14f54:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IRUN_MASK, TMC5041_IRUN_SHIFT);
   14f56:	486f      	ldr	r0, [pc, #444]	; (15114 <handleParameter+0x3ac>)
   14f58:	4629      	mov	r1, r5
		if(readWrite == READ) {
   14f5a:	b92c      	cbnz	r4, 14f68 <handleParameter+0x200>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IRUN_MASK, TMC5041_IRUN_SHIFT);
   14f5c:	f00e fa41 	bl	233e2 <tmc5041_readInt>
   14f60:	f3c0 2004 	ubfx	r0, r0, #8, #5
   14f64:	6030      	str	r0, [r6, #0]
   14f66:	e74a      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IRUN_MASK, TMC5041_IRUN_SHIFT, *value);
   14f68:	f00e fa3b 	bl	233e2 <tmc5041_readInt>
   14f6c:	6833      	ldr	r3, [r6, #0]
   14f6e:	021b      	lsls	r3, r3, #8
   14f70:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   14f74:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   14f78:	431a      	orrs	r2, r3
   14f7a:	4866      	ldr	r0, [pc, #408]	; (15114 <handleParameter+0x3ac>)
   14f7c:	4629      	mov	r1, r5
   14f7e:	f00e fa22 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14f82:	2400      	movs	r4, #0
   14f84:	e73b      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14f86:	2120      	movs	r1, #32
   14f88:	fa01 f505 	lsl.w	r5, r1, r5
   14f8c:	f045 0510 	orr.w	r5, r5, #16
   14f90:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IHOLD_MASK, TMC5041_IHOLD_SHIFT);
   14f92:	4860      	ldr	r0, [pc, #384]	; (15114 <handleParameter+0x3ac>)
   14f94:	4629      	mov	r1, r5
		if(readWrite == READ) {
   14f96:	b92c      	cbnz	r4, 14fa4 <handleParameter+0x23c>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IHOLD_MASK, TMC5041_IHOLD_SHIFT);
   14f98:	f00e fa23 	bl	233e2 <tmc5041_readInt>
   14f9c:	f000 001f 	and.w	r0, r0, #31
   14fa0:	6030      	str	r0, [r6, #0]
   14fa2:	e72c      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_IHOLD_IRUN(motor), TMC5041_IHOLD_MASK, TMC5041_IHOLD_SHIFT, *value);
   14fa4:	f00e fa1d 	bl	233e2 <tmc5041_readInt>
   14fa8:	6832      	ldr	r2, [r6, #0]
   14faa:	f020 001f 	bic.w	r0, r0, #31
   14fae:	f002 021f 	and.w	r2, r2, #31
   14fb2:	4302      	orrs	r2, r0
   14fb4:	4629      	mov	r1, r5
   14fb6:	4857      	ldr	r0, [pc, #348]	; (15114 <handleParameter+0x3ac>)
   14fb8:	f00e fa05 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   14fbc:	2400      	movs	r4, #0
   14fbe:	e71e      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14fc0:	2800      	cmp	r0, #0
   14fc2:	f040 8476 	bne.w	158b2 <handleParameter+0xb4a>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_RAMPSTAT(motor), TMC5041_POSITION_REACHED_MASK, TMC5041_POSITION_REACHED_SHIFT);
   14fc6:	2120      	movs	r1, #32
   14fc8:	40a9      	lsls	r1, r5
   14fca:	f041 0115 	orr.w	r1, r1, #21
   14fce:	4851      	ldr	r0, [pc, #324]	; (15114 <handleParameter+0x3ac>)
   14fd0:	b2c9      	uxtb	r1, r1
   14fd2:	f00e fa06 	bl	233e2 <tmc5041_readInt>
   14fd6:	f3c0 2040 	ubfx	r0, r0, #9, #1
   14fda:	6030      	str	r0, [r6, #0]
   14fdc:	e70f      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   14fde:	2800      	cmp	r0, #0
   14fe0:	f040 846a 	bne.w	158b8 <handleParameter+0xb50>
			*value = !TMC5041_FIELD_READ(&TMC5041, TMC5041_RAMPSTAT(motor), TMC5041_STATUS_STOP_R_MASK, TMC5041_STATUS_STOP_R_SHIFT);
   14fe4:	2120      	movs	r1, #32
   14fe6:	40a9      	lsls	r1, r5
   14fe8:	f041 0115 	orr.w	r1, r1, #21
   14fec:	4849      	ldr	r0, [pc, #292]	; (15114 <handleParameter+0x3ac>)
   14fee:	b2c9      	uxtb	r1, r1
   14ff0:	f00e f9f7 	bl	233e2 <tmc5041_readInt>
   14ff4:	f010 0f02 	tst.w	r0, #2
   14ff8:	bf0c      	ite	eq
   14ffa:	2301      	moveq	r3, #1
   14ffc:	2300      	movne	r3, #0
   14ffe:	6033      	str	r3, [r6, #0]
   15000:	e6fd      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15002:	2800      	cmp	r0, #0
   15004:	f040 845b 	bne.w	158be <handleParameter+0xb56>
			*value = !TMC5041_FIELD_READ(&TMC5041, TMC5041_RAMPSTAT(motor), TMC5041_STATUS_STOP_L_MASK, TMC5041_STATUS_STOP_L_SHIFT);
   15008:	2120      	movs	r1, #32
   1500a:	40a9      	lsls	r1, r5
   1500c:	f041 0115 	orr.w	r1, r1, #21
   15010:	4840      	ldr	r0, [pc, #256]	; (15114 <handleParameter+0x3ac>)
   15012:	b2c9      	uxtb	r1, r1
   15014:	f00e f9e5 	bl	233e2 <tmc5041_readInt>
   15018:	43c0      	mvns	r0, r0
   1501a:	f000 0001 	and.w	r0, r0, #1
   1501e:	6030      	str	r0, [r6, #0]
   15020:	e6ed      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15022:	2120      	movs	r1, #32
   15024:	fa01 f505 	lsl.w	r5, r1, r5
   15028:	f045 0514 	orr.w	r5, r5, #20
   1502c:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_R_ENABLE_MASK, TMC5041_STOP_R_ENABLE_SHIFT);
   1502e:	4839      	ldr	r0, [pc, #228]	; (15114 <handleParameter+0x3ac>)
   15030:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15032:	b92c      	cbnz	r4, 15040 <handleParameter+0x2d8>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_R_ENABLE_MASK, TMC5041_STOP_R_ENABLE_SHIFT);
   15034:	f00e f9d5 	bl	233e2 <tmc5041_readInt>
   15038:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1503c:	6030      	str	r0, [r6, #0]
   1503e:	e6de      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_R_ENABLE_MASK, TMC5041_STOP_R_ENABLE_SHIFT, (*value)? 1:0);
   15040:	f00e f9cf 	bl	233e2 <tmc5041_readInt>
   15044:	6833      	ldr	r3, [r6, #0]
   15046:	2b00      	cmp	r3, #0
   15048:	bf18      	it	ne
   1504a:	2302      	movne	r3, #2
   1504c:	f020 0202 	bic.w	r2, r0, #2
   15050:	431a      	orrs	r2, r3
   15052:	4830      	ldr	r0, [pc, #192]	; (15114 <handleParameter+0x3ac>)
   15054:	4629      	mov	r1, r5
   15056:	f00e f9b6 	bl	233c6 <tmc5041_writeInt>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_POL_STOP_R_MASK, TMC5041_POL_STOP_R_SHIFT, (*value==2)? 1:0);
   1505a:	4629      	mov	r1, r5
   1505c:	482d      	ldr	r0, [pc, #180]	; (15114 <handleParameter+0x3ac>)
   1505e:	f00e f9c0 	bl	233e2 <tmc5041_readInt>
   15062:	6833      	ldr	r3, [r6, #0]
   15064:	2b02      	cmp	r3, #2
   15066:	f020 0008 	bic.w	r0, r0, #8
   1506a:	bf0c      	ite	eq
   1506c:	2208      	moveq	r2, #8
   1506e:	2200      	movne	r2, #0
   15070:	4302      	orrs	r2, r0
   15072:	4629      	mov	r1, r5
   15074:	4827      	ldr	r0, [pc, #156]	; (15114 <handleParameter+0x3ac>)
   15076:	f00e f9a6 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1507a:	2400      	movs	r4, #0
   1507c:	e6bf      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   1507e:	2120      	movs	r1, #32
   15080:	fa01 f505 	lsl.w	r5, r1, r5
   15084:	f045 0514 	orr.w	r5, r5, #20
   15088:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_L_ENABLE_MASK, TMC5041_STOP_L_ENABLE_SHIFT);
   1508a:	4822      	ldr	r0, [pc, #136]	; (15114 <handleParameter+0x3ac>)
   1508c:	4629      	mov	r1, r5
		if(readWrite == READ) {
   1508e:	b92c      	cbnz	r4, 1509c <handleParameter+0x334>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_L_ENABLE_MASK, TMC5041_STOP_L_ENABLE_SHIFT);
   15090:	f00e f9a7 	bl	233e2 <tmc5041_readInt>
   15094:	f000 0001 	and.w	r0, r0, #1
   15098:	6030      	str	r0, [r6, #0]
   1509a:	e6b0      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_STOP_L_ENABLE_MASK, TMC5041_STOP_L_ENABLE_SHIFT, (*value)? 1:0);
   1509c:	f00e f9a1 	bl	233e2 <tmc5041_readInt>
   150a0:	6832      	ldr	r2, [r6, #0]
   150a2:	f020 0001 	bic.w	r0, r0, #1
   150a6:	2a00      	cmp	r2, #0
   150a8:	bf0c      	ite	eq
   150aa:	4602      	moveq	r2, r0
   150ac:	f040 0201 	orrne.w	r2, r0, #1
   150b0:	4629      	mov	r1, r5
   150b2:	4818      	ldr	r0, [pc, #96]	; (15114 <handleParameter+0x3ac>)
   150b4:	f00e f987 	bl	233c6 <tmc5041_writeInt>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_POL_STOP_L_MASK, TMC5041_POL_STOP_L_SHIFT, (*value==2)? 1:0);
   150b8:	4629      	mov	r1, r5
   150ba:	4816      	ldr	r0, [pc, #88]	; (15114 <handleParameter+0x3ac>)
   150bc:	f00e f991 	bl	233e2 <tmc5041_readInt>
   150c0:	6833      	ldr	r3, [r6, #0]
   150c2:	2b02      	cmp	r3, #2
   150c4:	f020 0004 	bic.w	r0, r0, #4
   150c8:	bf0c      	ite	eq
   150ca:	2204      	moveq	r2, #4
   150cc:	2200      	movne	r2, #0
   150ce:	4302      	orrs	r2, r0
   150d0:	4629      	mov	r1, r5
   150d2:	4810      	ldr	r0, [pc, #64]	; (15114 <handleParameter+0x3ac>)
   150d4:	f00e f977 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   150d8:	2400      	movs	r4, #0
   150da:	e690      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   150dc:	2120      	movs	r1, #32
   150de:	40a9      	lsls	r1, r5
   150e0:	f041 0114 	orr.w	r1, r1, #20
   150e4:	b2c9      	uxtb	r1, r1
   150e6:	b920      	cbnz	r0, 150f2 <handleParameter+0x38a>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_SWMODE(motor));
   150e8:	480a      	ldr	r0, [pc, #40]	; (15114 <handleParameter+0x3ac>)
   150ea:	f00e f97a 	bl	233e2 <tmc5041_readInt>
   150ee:	6030      	str	r0, [r6, #0]
   150f0:	e685      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_SWMODE(motor), *value);
   150f2:	6832      	ldr	r2, [r6, #0]
   150f4:	4807      	ldr	r0, [pc, #28]	; (15114 <handleParameter+0x3ac>)
   150f6:	f00e f966 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   150fa:	2400      	movs	r4, #0
   150fc:	e67f      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   150fe:	2120      	movs	r1, #32
   15100:	40a9      	lsls	r1, r5
   15102:	f041 0104 	orr.w	r1, r1, #4
   15106:	b2c9      	uxtb	r1, r1
   15108:	b930      	cbnz	r0, 15118 <handleParameter+0x3b0>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_A1(motor));
   1510a:	4802      	ldr	r0, [pc, #8]	; (15114 <handleParameter+0x3ac>)
   1510c:	f00e f969 	bl	233e2 <tmc5041_readInt>
   15110:	6030      	str	r0, [r6, #0]
   15112:	e674      	b.n	14dfe <handleParameter+0x96>
   15114:	1fff3464 	.word	0x1fff3464
			tmc5041_writeInt(motorToIC(motor), TMC5041_A1(motor), *value);
   15118:	6832      	ldr	r2, [r6, #0]
   1511a:	48a0      	ldr	r0, [pc, #640]	; (1539c <handleParameter+0x634>)
   1511c:	f00e f953 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15120:	2400      	movs	r4, #0
   15122:	e66c      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15124:	2120      	movs	r1, #32
   15126:	40a9      	lsls	r1, r5
   15128:	f041 0105 	orr.w	r1, r1, #5
   1512c:	b2c9      	uxtb	r1, r1
   1512e:	b920      	cbnz	r0, 1513a <handleParameter+0x3d2>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_V1(motor));
   15130:	489a      	ldr	r0, [pc, #616]	; (1539c <handleParameter+0x634>)
   15132:	f00e f956 	bl	233e2 <tmc5041_readInt>
   15136:	6030      	str	r0, [r6, #0]
   15138:	e661      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_V1(motor), *value);
   1513a:	6832      	ldr	r2, [r6, #0]
   1513c:	4897      	ldr	r0, [pc, #604]	; (1539c <handleParameter+0x634>)
   1513e:	f00e f942 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15142:	2400      	movs	r4, #0
   15144:	e65b      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15146:	2120      	movs	r1, #32
   15148:	40a9      	lsls	r1, r5
   1514a:	f041 0108 	orr.w	r1, r1, #8
   1514e:	b2c9      	uxtb	r1, r1
   15150:	b920      	cbnz	r0, 1515c <handleParameter+0x3f4>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_DMAX(motor));
   15152:	4892      	ldr	r0, [pc, #584]	; (1539c <handleParameter+0x634>)
   15154:	f00e f945 	bl	233e2 <tmc5041_readInt>
   15158:	6030      	str	r0, [r6, #0]
   1515a:	e650      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_DMAX(motor), *value);
   1515c:	6832      	ldr	r2, [r6, #0]
   1515e:	488f      	ldr	r0, [pc, #572]	; (1539c <handleParameter+0x634>)
   15160:	f00e f931 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15164:	2400      	movs	r4, #0
   15166:	e64a      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15168:	2120      	movs	r1, #32
   1516a:	40a9      	lsls	r1, r5
   1516c:	f041 010a 	orr.w	r1, r1, #10
   15170:	b2c9      	uxtb	r1, r1
   15172:	b920      	cbnz	r0, 1517e <handleParameter+0x416>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_D1(motor));
   15174:	4889      	ldr	r0, [pc, #548]	; (1539c <handleParameter+0x634>)
   15176:	f00e f934 	bl	233e2 <tmc5041_readInt>
   1517a:	6030      	str	r0, [r6, #0]
   1517c:	e63f      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_D1(motor), *value);
   1517e:	6832      	ldr	r2, [r6, #0]
   15180:	4886      	ldr	r0, [pc, #536]	; (1539c <handleParameter+0x634>)
   15182:	f00e f920 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15186:	2400      	movs	r4, #0
   15188:	e639      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   1518a:	2120      	movs	r1, #32
   1518c:	40a9      	lsls	r1, r5
   1518e:	f041 0103 	orr.w	r1, r1, #3
   15192:	b2c9      	uxtb	r1, r1
   15194:	b920      	cbnz	r0, 151a0 <handleParameter+0x438>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VSTART(motor));
   15196:	4881      	ldr	r0, [pc, #516]	; (1539c <handleParameter+0x634>)
   15198:	f00e f923 	bl	233e2 <tmc5041_readInt>
   1519c:	6030      	str	r0, [r6, #0]
   1519e:	e62e      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VSTART(motor), *value);
   151a0:	6832      	ldr	r2, [r6, #0]
   151a2:	487e      	ldr	r0, [pc, #504]	; (1539c <handleParameter+0x634>)
   151a4:	f00e f90f 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   151a8:	2400      	movs	r4, #0
   151aa:	e628      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   151ac:	2120      	movs	r1, #32
   151ae:	40a9      	lsls	r1, r5
   151b0:	f041 010b 	orr.w	r1, r1, #11
   151b4:	b2c9      	uxtb	r1, r1
   151b6:	b920      	cbnz	r0, 151c2 <handleParameter+0x45a>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VSTOP(motor));
   151b8:	4878      	ldr	r0, [pc, #480]	; (1539c <handleParameter+0x634>)
   151ba:	f00e f912 	bl	233e2 <tmc5041_readInt>
   151be:	6030      	str	r0, [r6, #0]
   151c0:	e61d      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VSTOP(motor), *value);
   151c2:	6832      	ldr	r2, [r6, #0]
   151c4:	4875      	ldr	r0, [pc, #468]	; (1539c <handleParameter+0x634>)
   151c6:	f00e f8fe 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   151ca:	2400      	movs	r4, #0
   151cc:	e617      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   151ce:	2120      	movs	r1, #32
   151d0:	40a9      	lsls	r1, r5
   151d2:	f041 010c 	orr.w	r1, r1, #12
   151d6:	b2c9      	uxtb	r1, r1
   151d8:	b920      	cbnz	r0, 151e4 <handleParameter+0x47c>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_TZEROWAIT(motor));
   151da:	4870      	ldr	r0, [pc, #448]	; (1539c <handleParameter+0x634>)
   151dc:	f00e f901 	bl	233e2 <tmc5041_readInt>
   151e0:	6030      	str	r0, [r6, #0]
   151e2:	e60c      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_TZEROWAIT(motor), *value);
   151e4:	6832      	ldr	r2, [r6, #0]
   151e6:	486d      	ldr	r0, [pc, #436]	; (1539c <handleParameter+0x634>)
   151e8:	f00e f8ed 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   151ec:	2400      	movs	r4, #0
   151ee:	e606      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   151f0:	2120      	movs	r1, #32
   151f2:	40a9      	lsls	r1, r5
   151f4:	f041 0111 	orr.w	r1, r1, #17
   151f8:	b2c9      	uxtb	r1, r1
   151fa:	b920      	cbnz	r0, 15206 <handleParameter+0x49e>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor));
   151fc:	4867      	ldr	r0, [pc, #412]	; (1539c <handleParameter+0x634>)
   151fe:	f00e f8f0 	bl	233e2 <tmc5041_readInt>
   15202:	6030      	str	r0, [r6, #0]
   15204:	e5fb      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor), *value);
   15206:	6832      	ldr	r2, [r6, #0]
   15208:	4864      	ldr	r0, [pc, #400]	; (1539c <handleParameter+0x634>)
   1520a:	f00e f8dc 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1520e:	2400      	movs	r4, #0
   15210:	e5f5      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15212:	2120      	movs	r1, #32
   15214:	40a9      	lsls	r1, r5
   15216:	f041 0112 	orr.w	r1, r1, #18
   1521a:	b2c9      	uxtb	r1, r1
   1521c:	b920      	cbnz	r0, 15228 <handleParameter+0x4c0>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VHIGH(motor));
   1521e:	485f      	ldr	r0, [pc, #380]	; (1539c <handleParameter+0x634>)
   15220:	f00e f8df 	bl	233e2 <tmc5041_readInt>
   15224:	6030      	str	r0, [r6, #0]
   15226:	e5ea      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VHIGH(motor), *value);
   15228:	6832      	ldr	r2, [r6, #0]
   1522a:	485c      	ldr	r0, [pc, #368]	; (1539c <handleParameter+0x634>)
   1522c:	f00e f8cb 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15230:	2400      	movs	r4, #0
   15232:	e5e4      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15234:	2120      	movs	r1, #32
   15236:	40a9      	lsls	r1, r5
   15238:	f041 0113 	orr.w	r1, r1, #19
   1523c:	b2c9      	uxtb	r1, r1
   1523e:	b920      	cbnz	r0, 1524a <handleParameter+0x4e2>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VDCMIN(motor));
   15240:	4856      	ldr	r0, [pc, #344]	; (1539c <handleParameter+0x634>)
   15242:	f00e f8ce 	bl	233e2 <tmc5041_readInt>
   15246:	6030      	str	r0, [r6, #0]
   15248:	e5d9      	b.n	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VDCMIN(motor), *value);
   1524a:	6832      	ldr	r2, [r6, #0]
   1524c:	4853      	ldr	r0, [pc, #332]	; (1539c <handleParameter+0x634>)
   1524e:	f00e f8ba 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15252:	2400      	movs	r4, #0
   15254:	e5d3      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15256:	010d      	lsls	r5, r1, #4
   15258:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   1525c:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VHIGHFS_MASK, TMC5041_VHIGHFS_SHIFT);
   1525e:	484f      	ldr	r0, [pc, #316]	; (1539c <handleParameter+0x634>)
   15260:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15262:	b92c      	cbnz	r4, 15270 <handleParameter+0x508>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VHIGHFS_MASK, TMC5041_VHIGHFS_SHIFT);
   15264:	f00e f8bd 	bl	233e2 <tmc5041_readInt>
   15268:	f3c0 4080 	ubfx	r0, r0, #18, #1
   1526c:	6030      	str	r0, [r6, #0]
   1526e:	e5c6      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VHIGHFS_MASK, TMC5041_VHIGHFS_SHIFT, *value);
   15270:	f00e f8b7 	bl	233e2 <tmc5041_readInt>
   15274:	6833      	ldr	r3, [r6, #0]
   15276:	049b      	lsls	r3, r3, #18
   15278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   1527c:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   15280:	431a      	orrs	r2, r3
   15282:	4846      	ldr	r0, [pc, #280]	; (1539c <handleParameter+0x634>)
   15284:	4629      	mov	r1, r5
   15286:	f00e f89e 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1528a:	2400      	movs	r4, #0
   1528c:	e5b7      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   1528e:	2800      	cmp	r0, #0
   15290:	f040 8318 	bne.w	158c4 <handleParameter+0xb5c>
			*value = TMC5041.velocity[motor];
   15294:	4941      	ldr	r1, [pc, #260]	; (1539c <handleParameter+0x634>)
   15296:	eb01 0185 	add.w	r1, r1, r5, lsl #2
   1529a:	684b      	ldr	r3, [r1, #4]
   1529c:	6033      	str	r3, [r6, #0]
   1529e:	e5ae      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   152a0:	b970      	cbnz	r0, 152c0 <handleParameter+0x558>
			*value = 256 >> TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_MRES_MASK, TMC5041_MRES_SHIFT);
   152a2:	0109      	lsls	r1, r1, #4
   152a4:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   152a8:	483c      	ldr	r0, [pc, #240]	; (1539c <handleParameter+0x634>)
   152aa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   152ae:	f00e f898 	bl	233e2 <tmc5041_readInt>
   152b2:	f3c0 6303 	ubfx	r3, r0, #24, #4
   152b6:	f44f 7080 	mov.w	r0, #256	; 0x100
   152ba:	4118      	asrs	r0, r3
   152bc:	6030      	str	r0, [r6, #0]
   152be:	e59e      	b.n	14dfe <handleParameter+0x96>
			switch(*value)
   152c0:	681b      	ldr	r3, [r3, #0]
   152c2:	2b10      	cmp	r3, #16
   152c4:	d039      	beq.n	1533a <handleParameter+0x5d2>
   152c6:	dc0a      	bgt.n	152de <handleParameter+0x576>
   152c8:	3b01      	subs	r3, #1
   152ca:	2b07      	cmp	r3, #7
   152cc:	d80e      	bhi.n	152ec <handleParameter+0x584>
   152ce:	2b07      	cmp	r3, #7
   152d0:	d80c      	bhi.n	152ec <handleParameter+0x584>
   152d2:	e8df f003 	tbb	[pc, r3]
   152d6:	2c15      	.short	0x2c15
   152d8:	0b0b2e0b 	.word	0x0b0b2e0b
   152dc:	300b      	.short	0x300b
   152de:	2b80      	cmp	r3, #128	; 0x80
   152e0:	d031      	beq.n	15346 <handleParameter+0x5de>
   152e2:	dc08      	bgt.n	152f6 <handleParameter+0x58e>
   152e4:	2b20      	cmp	r3, #32
   152e6:	d02a      	beq.n	1533e <handleParameter+0x5d6>
   152e8:	2b40      	cmp	r3, #64	; 0x40
   152ea:	d02a      	beq.n	15342 <handleParameter+0x5da>
			default:   *value = -1;  break;
   152ec:	f04f 33ff 	mov.w	r3, #4294967295
   152f0:	6033      	str	r3, [r6, #0]
	uint32_t errors = TMC_ERROR_NONE;
   152f2:	2400      	movs	r4, #0
   152f4:	e583      	b.n	14dfe <handleParameter+0x96>
   152f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   152fa:	d1f7      	bne.n	152ec <handleParameter+0x584>
			case 256:  *value = 0;   break;
   152fc:	2300      	movs	r3, #0
   152fe:	e000      	b.n	15302 <handleParameter+0x59a>
			case 1:    *value = 8;   break;
   15300:	2308      	movs	r3, #8
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_MRES_MASK, TMC5041_MRES_SHIFT, *value);
   15302:	012d      	lsls	r5, r5, #4
   15304:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   15308:	b2ed      	uxtb	r5, r5
			case 256:  *value = 0;   break;
   1530a:	6033      	str	r3, [r6, #0]
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_MRES_MASK, TMC5041_MRES_SHIFT, *value);
   1530c:	4629      	mov	r1, r5
   1530e:	4823      	ldr	r0, [pc, #140]	; (1539c <handleParameter+0x634>)
   15310:	f00e f867 	bl	233e2 <tmc5041_readInt>
   15314:	6833      	ldr	r3, [r6, #0]
   15316:	061b      	lsls	r3, r3, #24
   15318:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1531c:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   15320:	431a      	orrs	r2, r3
   15322:	481e      	ldr	r0, [pc, #120]	; (1539c <handleParameter+0x634>)
   15324:	4629      	mov	r1, r5
   15326:	f00e f84e 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1532a:	2400      	movs	r4, #0
   1532c:	e567      	b.n	14dfe <handleParameter+0x96>
			case 2:    *value = 7;   break;
   1532e:	2307      	movs	r3, #7
   15330:	e7e7      	b.n	15302 <handleParameter+0x59a>
			case 4:    *value = 6;   break;
   15332:	2306      	movs	r3, #6
   15334:	e7e5      	b.n	15302 <handleParameter+0x59a>
			case 8:    *value = 5;   break;
   15336:	2305      	movs	r3, #5
   15338:	e7e3      	b.n	15302 <handleParameter+0x59a>
			case 16:   *value = 4;   break;
   1533a:	2304      	movs	r3, #4
   1533c:	e7e1      	b.n	15302 <handleParameter+0x59a>
			case 32:   *value = 3;   break;
   1533e:	2303      	movs	r3, #3
   15340:	e7df      	b.n	15302 <handleParameter+0x59a>
			case 64:   *value = 2;   break;
   15342:	2302      	movs	r3, #2
   15344:	e7dd      	b.n	15302 <handleParameter+0x59a>
			case 128:  *value = 1;   break;
   15346:	2301      	movs	r3, #1
   15348:	e7db      	b.n	15302 <handleParameter+0x59a>
		if(readWrite == READ) {
   1534a:	012d      	lsls	r5, r5, #4
   1534c:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   15350:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TBL_MASK, TMC5041_TBL_SHIFT);
   15352:	4812      	ldr	r0, [pc, #72]	; (1539c <handleParameter+0x634>)
   15354:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15356:	b92c      	cbnz	r4, 15364 <handleParameter+0x5fc>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TBL_MASK, TMC5041_TBL_SHIFT);
   15358:	f00e f843 	bl	233e2 <tmc5041_readInt>
   1535c:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   15360:	6030      	str	r0, [r6, #0]
   15362:	e54c      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TBL_MASK, TMC5041_TBL_SHIFT, *value);
   15364:	f00e f83d 	bl	233e2 <tmc5041_readInt>
   15368:	6833      	ldr	r3, [r6, #0]
   1536a:	03db      	lsls	r3, r3, #15
   1536c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   15370:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   15374:	431a      	orrs	r2, r3
   15376:	4809      	ldr	r0, [pc, #36]	; (1539c <handleParameter+0x634>)
   15378:	4629      	mov	r1, r5
   1537a:	f00e f824 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1537e:	2400      	movs	r4, #0
   15380:	e53d      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15382:	012d      	lsls	r5, r5, #4
   15384:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   15388:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_CHM_MASK, TMC5041_CHM_SHIFT);
   1538a:	4804      	ldr	r0, [pc, #16]	; (1539c <handleParameter+0x634>)
   1538c:	4629      	mov	r1, r5
		if(readWrite == READ) {
   1538e:	b93c      	cbnz	r4, 153a0 <handleParameter+0x638>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_CHM_MASK, TMC5041_CHM_SHIFT);
   15390:	f00e f827 	bl	233e2 <tmc5041_readInt>
   15394:	f3c0 3080 	ubfx	r0, r0, #14, #1
   15398:	6030      	str	r0, [r6, #0]
   1539a:	e530      	b.n	14dfe <handleParameter+0x96>
   1539c:	1fff3464 	.word	0x1fff3464
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_CHM_MASK, TMC5041_CHM_SHIFT, *value);
   153a0:	f00e f81f 	bl	233e2 <tmc5041_readInt>
   153a4:	6833      	ldr	r3, [r6, #0]
   153a6:	039b      	lsls	r3, r3, #14
   153a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   153ac:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
   153b0:	431a      	orrs	r2, r3
   153b2:	48ba      	ldr	r0, [pc, #744]	; (1569c <handleParameter+0x934>)
   153b4:	4629      	mov	r1, r5
   153b6:	f00e f806 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   153ba:	2400      	movs	r4, #0
   153bc:	e51f      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   153be:	012d      	lsls	r5, r5, #4
   153c0:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   153c4:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_DISFDCC_MASK, TMC5041_DISFDCC_SHIFT);
   153c6:	48b5      	ldr	r0, [pc, #724]	; (1569c <handleParameter+0x934>)
   153c8:	4629      	mov	r1, r5
		if(readWrite == READ) {
   153ca:	b92c      	cbnz	r4, 153d8 <handleParameter+0x670>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_DISFDCC_MASK, TMC5041_DISFDCC_SHIFT);
   153cc:	f00e f809 	bl	233e2 <tmc5041_readInt>
   153d0:	f3c0 3000 	ubfx	r0, r0, #12, #1
   153d4:	6030      	str	r0, [r6, #0]
   153d6:	e512      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_DISFDCC_MASK, TMC5041_DISFDCC_SHIFT, *value);
   153d8:	f00e f803 	bl	233e2 <tmc5041_readInt>
   153dc:	6833      	ldr	r3, [r6, #0]
   153de:	031b      	lsls	r3, r3, #12
   153e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   153e4:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   153e8:	431a      	orrs	r2, r3
   153ea:	48ac      	ldr	r0, [pc, #688]	; (1569c <handleParameter+0x934>)
   153ec:	4629      	mov	r1, r5
   153ee:	f00d ffea 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   153f2:	2400      	movs	r4, #0
   153f4:	e503      	b.n	14dfe <handleParameter+0x96>
		tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_CHOPCONF(motor));
   153f6:	012d      	lsls	r5, r5, #4
   153f8:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   153fc:	b2ed      	uxtb	r5, r5
   153fe:	48a7      	ldr	r0, [pc, #668]	; (1569c <handleParameter+0x934>)
   15400:	4629      	mov	r1, r5
   15402:	f00d ffee 	bl	233e2 <tmc5041_readInt>
		if(readWrite == READ) {
   15406:	f400 4780 	and.w	r7, r0, #16384	; 0x4000
   1540a:	b99c      	cbnz	r4, 15434 <handleParameter+0x6cc>
			if(tempValue & TMC5041_CHM_MASK)
   1540c:	b13f      	cbz	r7, 1541e <handleParameter+0x6b6>
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HEND_MASK, TMC5041_HEND_SHIFT);
   1540e:	48a3      	ldr	r0, [pc, #652]	; (1569c <handleParameter+0x934>)
   15410:	4629      	mov	r1, r5
   15412:	f00d ffe6 	bl	233e2 <tmc5041_readInt>
   15416:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   1541a:	6030      	str	r0, [r6, #0]
   1541c:	e4ef      	b.n	14dfe <handleParameter+0x96>
				*value = (tempValue >> TMC5041_TFD_ALL_SHIFT) & TMC5041_TFD_ALL_MASK;
   1541e:	1103      	asrs	r3, r0, #4
				if(tempValue & TMC5041_TFD_3_MASK)
   15420:	0507      	lsls	r7, r0, #20
				*value = (tempValue >> TMC5041_TFD_ALL_SHIFT) & TMC5041_TFD_ALL_MASK;
   15422:	f003 0370 	and.w	r3, r3, #112	; 0x70
				if(tempValue & TMC5041_TFD_3_MASK)
   15426:	d401      	bmi.n	1542c <handleParameter+0x6c4>
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_OFFSET_MASK, TMC5041_OFFSET_SHIFT);
   15428:	6033      	str	r3, [r6, #0]
   1542a:	e572      	b.n	14f12 <handleParameter+0x1aa>
					*value |= 1<<3;	// Add MSB to value
   1542c:	f043 0308 	orr.w	r3, r3, #8
   15430:	6033      	str	r3, [r6, #0]
   15432:	e4e4      	b.n	14dfe <handleParameter+0x96>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HEND_MASK, TMC5041_HEND_SHIFT, *value);
   15434:	4899      	ldr	r0, [pc, #612]	; (1569c <handleParameter+0x934>)
   15436:	4629      	mov	r1, r5
			if(tempValue & TMC5041_CHM_MASK)
   15438:	b177      	cbz	r7, 15458 <handleParameter+0x6f0>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HEND_MASK, TMC5041_HEND_SHIFT, *value);
   1543a:	f00d ffd2 	bl	233e2 <tmc5041_readInt>
   1543e:	6833      	ldr	r3, [r6, #0]
   15440:	01db      	lsls	r3, r3, #7
   15442:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   15446:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1544a:	431a      	orrs	r2, r3
   1544c:	4893      	ldr	r0, [pc, #588]	; (1569c <handleParameter+0x934>)
   1544e:	4629      	mov	r1, r5
   15450:	f00d ffb9 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15454:	2400      	movs	r4, #0
   15456:	e4d2      	b.n	14dfe <handleParameter+0x96>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TFD_3_MASK, TMC5041_TFD_3_SHIFT, (*value & (1<<3))? 1:0);
   15458:	f00d ffc3 	bl	233e2 <tmc5041_readInt>
   1545c:	6833      	ldr	r3, [r6, #0]
   1545e:	021b      	lsls	r3, r3, #8
   15460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   15464:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
   15468:	431a      	orrs	r2, r3
   1546a:	488c      	ldr	r0, [pc, #560]	; (1569c <handleParameter+0x934>)
   1546c:	4629      	mov	r1, r5
   1546e:	f00d ffaa 	bl	233c6 <tmc5041_writeInt>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TFD_ALL_MASK, TMC5041_TFD_ALL_SHIFT, *value);
   15472:	4629      	mov	r1, r5
   15474:	4889      	ldr	r0, [pc, #548]	; (1569c <handleParameter+0x934>)
   15476:	f00d ffb4 	bl	233e2 <tmc5041_readInt>
   1547a:	6833      	ldr	r3, [r6, #0]
   1547c:	011b      	lsls	r3, r3, #4
   1547e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   15482:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   15486:	431a      	orrs	r2, r3
   15488:	4884      	ldr	r0, [pc, #528]	; (1569c <handleParameter+0x934>)
   1548a:	4629      	mov	r1, r5
   1548c:	f00d ff9b 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15490:	463c      	mov	r4, r7
   15492:	e4b4      	b.n	14dfe <handleParameter+0x96>
		tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_CHOPCONF(motor));
   15494:	012d      	lsls	r5, r5, #4
   15496:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   1549a:	b2ed      	uxtb	r5, r5
   1549c:	4629      	mov	r1, r5
   1549e:	487f      	ldr	r0, [pc, #508]	; (1569c <handleParameter+0x934>)
   154a0:	f00d ff9f 	bl	233e2 <tmc5041_readInt>
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HSTRT_MASK, TMC5041_HSTRT_SHIFT);
   154a4:	4629      	mov	r1, r5
		tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_CHOPCONF(motor));
   154a6:	4607      	mov	r7, r0
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HSTRT_MASK, TMC5041_HSTRT_SHIFT);
   154a8:	487c      	ldr	r0, [pc, #496]	; (1569c <handleParameter+0x934>)
		if(readWrite == READ) {
   154aa:	b98c      	cbnz	r4, 154d0 <handleParameter+0x768>
			if(tempValue & TMC5041_CHM_MASK)
   154ac:	047d      	lsls	r5, r7, #17
   154ae:	d505      	bpl.n	154bc <handleParameter+0x754>
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HSTRT_MASK, TMC5041_HSTRT_SHIFT);
   154b0:	f00d ff97 	bl	233e2 <tmc5041_readInt>
   154b4:	f3c0 1002 	ubfx	r0, r0, #4, #3
   154b8:	6030      	str	r0, [r6, #0]
   154ba:	e4a0      	b.n	14dfe <handleParameter+0x96>
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_OFFSET_MASK, TMC5041_OFFSET_SHIFT);
   154bc:	f00d ff91 	bl	233e2 <tmc5041_readInt>
				if(tempValue & TMC5041_TFD_3_MASK)
   154c0:	0539      	lsls	r1, r7, #20
				*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_OFFSET_MASK, TMC5041_OFFSET_SHIFT);
   154c2:	f3c0 13c3 	ubfx	r3, r0, #7, #4
				if(tempValue & TMC5041_TFD_3_MASK)
   154c6:	d5af      	bpl.n	15428 <handleParameter+0x6c0>
					*value |= 1<<3; // MSB wird zu value hinzugefügt
   154c8:	f043 0308 	orr.w	r3, r3, #8
   154cc:	6033      	str	r3, [r6, #0]
   154ce:	e496      	b.n	14dfe <handleParameter+0x96>
			if(tmc5041_readInt(motorToIC(motor), TMC5041_CHOPCONF(motor)) & (1<<14))
   154d0:	f00d ff87 	bl	233e2 <tmc5041_readInt>
   154d4:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HSTRT_MASK, TMC5041_HSTRT_SHIFT, *value);
   154d8:	4629      	mov	r1, r5
   154da:	4870      	ldr	r0, [pc, #448]	; (1569c <handleParameter+0x934>)
			if(tmc5041_readInt(motorToIC(motor), TMC5041_CHOPCONF(motor)) & (1<<14))
   154dc:	d00e      	beq.n	154fc <handleParameter+0x794>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_HSTRT_MASK, TMC5041_HSTRT_SHIFT, *value);
   154de:	f00d ff80 	bl	233e2 <tmc5041_readInt>
   154e2:	6833      	ldr	r3, [r6, #0]
   154e4:	011b      	lsls	r3, r3, #4
   154e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   154ea:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   154ee:	431a      	orrs	r2, r3
   154f0:	486a      	ldr	r0, [pc, #424]	; (1569c <handleParameter+0x934>)
   154f2:	4629      	mov	r1, r5
   154f4:	f00d ff67 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   154f8:	2400      	movs	r4, #0
   154fa:	e480      	b.n	14dfe <handleParameter+0x96>
				TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_OFFSET_MASK, TMC5041_OFFSET_SHIFT, *value);
   154fc:	f00d ff71 	bl	233e2 <tmc5041_readInt>
   15500:	6833      	ldr	r3, [r6, #0]
   15502:	01db      	lsls	r3, r3, #7
   15504:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   15508:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1550c:	431a      	orrs	r2, r3
   1550e:	4863      	ldr	r0, [pc, #396]	; (1569c <handleParameter+0x934>)
   15510:	4629      	mov	r1, r5
   15512:	f00d ff58 	bl	233c6 <tmc5041_writeInt>
   15516:	e472      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15518:	012d      	lsls	r5, r5, #4
   1551a:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   1551e:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TOFF_MASK, TMC5041_TOFF_MASK);
   15520:	485e      	ldr	r0, [pc, #376]	; (1569c <handleParameter+0x934>)
   15522:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15524:	b91c      	cbnz	r4, 1552e <handleParameter+0x7c6>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TOFF_MASK, TMC5041_TOFF_MASK);
   15526:	f00d ff5c 	bl	233e2 <tmc5041_readInt>
   1552a:	6034      	str	r4, [r6, #0]
   1552c:	e467      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_TOFF_MASK, TMC5041_TOFF_MASK, *value);
   1552e:	f00d ff58 	bl	233e2 <tmc5041_readInt>
   15532:	4629      	mov	r1, r5
   15534:	f020 020f 	bic.w	r2, r0, #15
   15538:	4858      	ldr	r0, [pc, #352]	; (1569c <handleParameter+0x934>)
   1553a:	f00d ff44 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1553e:	2400      	movs	r4, #0
   15540:	e45d      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15542:	012d      	lsls	r5, r5, #4
   15544:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   15548:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEIMIN_MASK, TMC5041_SEIMIN_SHIFT);
   1554a:	4854      	ldr	r0, [pc, #336]	; (1569c <handleParameter+0x934>)
   1554c:	4629      	mov	r1, r5
		if(readWrite == READ) {
   1554e:	b92c      	cbnz	r4, 1555c <handleParameter+0x7f4>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEIMIN_MASK, TMC5041_SEIMIN_SHIFT);
   15550:	f00d ff47 	bl	233e2 <tmc5041_readInt>
   15554:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   15558:	6030      	str	r0, [r6, #0]
   1555a:	e450      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEIMIN_MASK, TMC5041_SEIMIN_SHIFT, *value);
   1555c:	f00d ff41 	bl	233e2 <tmc5041_readInt>
   15560:	6833      	ldr	r3, [r6, #0]
   15562:	03db      	lsls	r3, r3, #15
   15564:	b29b      	uxth	r3, r3
   15566:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1556a:	431a      	orrs	r2, r3
   1556c:	484b      	ldr	r0, [pc, #300]	; (1569c <handleParameter+0x934>)
   1556e:	4629      	mov	r1, r5
   15570:	f00d ff29 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15574:	2400      	movs	r4, #0
   15576:	e442      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15578:	012d      	lsls	r5, r5, #4
   1557a:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   1557e:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEDN_MASK, TMC5041_SEDN_SHIFT);
   15580:	4846      	ldr	r0, [pc, #280]	; (1569c <handleParameter+0x934>)
   15582:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15584:	b92c      	cbnz	r4, 15592 <handleParameter+0x82a>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEDN_MASK, TMC5041_SEDN_SHIFT);
   15586:	f00d ff2c 	bl	233e2 <tmc5041_readInt>
   1558a:	f3c0 3041 	ubfx	r0, r0, #13, #2
   1558e:	6030      	str	r0, [r6, #0]
   15590:	e435      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEDN_MASK, TMC5041_SEDN_SHIFT, *value);
   15592:	f00d ff26 	bl	233e2 <tmc5041_readInt>
   15596:	6833      	ldr	r3, [r6, #0]
   15598:	035b      	lsls	r3, r3, #13
   1559a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   1559e:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   155a2:	431a      	orrs	r2, r3
   155a4:	483d      	ldr	r0, [pc, #244]	; (1569c <handleParameter+0x934>)
   155a6:	4629      	mov	r1, r5
   155a8:	f00d ff0d 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   155ac:	2400      	movs	r4, #0
   155ae:	e426      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   155b0:	012d      	lsls	r5, r5, #4
   155b2:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   155b6:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMAX_MASK, TMC5041_SEMAX_SHIFT);
   155b8:	4838      	ldr	r0, [pc, #224]	; (1569c <handleParameter+0x934>)
   155ba:	4629      	mov	r1, r5
		if(readWrite == READ) {
   155bc:	b92c      	cbnz	r4, 155ca <handleParameter+0x862>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMAX_MASK, TMC5041_SEMAX_SHIFT);
   155be:	f00d ff10 	bl	233e2 <tmc5041_readInt>
   155c2:	f3c0 2003 	ubfx	r0, r0, #8, #4
   155c6:	6030      	str	r0, [r6, #0]
   155c8:	e419      	b.n	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMAX_MASK, TMC5041_SEMAX_SHIFT, *value);
   155ca:	f00d ff0a 	bl	233e2 <tmc5041_readInt>
   155ce:	6833      	ldr	r3, [r6, #0]
   155d0:	021b      	lsls	r3, r3, #8
   155d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   155d6:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   155da:	431a      	orrs	r2, r3
   155dc:	482f      	ldr	r0, [pc, #188]	; (1569c <handleParameter+0x934>)
   155de:	4629      	mov	r1, r5
   155e0:	f00d fef1 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   155e4:	2400      	movs	r4, #0
   155e6:	e40a      	b.n	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   155e8:	012d      	lsls	r5, r5, #4
   155ea:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   155ee:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEUP_MASK, TMC5041_SEUP_SHIFT);
   155f0:	482a      	ldr	r0, [pc, #168]	; (1569c <handleParameter+0x934>)
   155f2:	4629      	mov	r1, r5
		if(readWrite == READ) {
   155f4:	b934      	cbnz	r4, 15604 <handleParameter+0x89c>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEUP_MASK, TMC5041_SEUP_SHIFT);
   155f6:	f00d fef4 	bl	233e2 <tmc5041_readInt>
   155fa:	f3c0 1041 	ubfx	r0, r0, #5, #2
   155fe:	6030      	str	r0, [r6, #0]
   15600:	f7ff bbfd 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEUP_MASK, TMC5041_SEUP_SHIFT, *value);
   15604:	f00d feed 	bl	233e2 <tmc5041_readInt>
   15608:	6833      	ldr	r3, [r6, #0]
   1560a:	015b      	lsls	r3, r3, #5
   1560c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   15610:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   15614:	431a      	orrs	r2, r3
   15616:	4821      	ldr	r0, [pc, #132]	; (1569c <handleParameter+0x934>)
   15618:	4629      	mov	r1, r5
   1561a:	f00d fed4 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1561e:	2400      	movs	r4, #0
   15620:	f7ff bbed 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15624:	012d      	lsls	r5, r5, #4
   15626:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   1562a:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMIN_MASK, TMC5041_SEMIN_SHIFT);
   1562c:	481b      	ldr	r0, [pc, #108]	; (1569c <handleParameter+0x934>)
   1562e:	4629      	mov	r1, r5
		if(readWrite == READ) {
   15630:	b934      	cbnz	r4, 15640 <handleParameter+0x8d8>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMIN_MASK, TMC5041_SEMIN_SHIFT);
   15632:	f00d fed6 	bl	233e2 <tmc5041_readInt>
   15636:	f000 000f 	and.w	r0, r0, #15
   1563a:	6030      	str	r0, [r6, #0]
   1563c:	f7ff bbdf 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SEMIN_MASK, TMC5041_SEMIN_SHIFT, *value);
   15640:	f00d fecf 	bl	233e2 <tmc5041_readInt>
   15644:	6832      	ldr	r2, [r6, #0]
   15646:	f020 000f 	bic.w	r0, r0, #15
   1564a:	f002 020f 	and.w	r2, r2, #15
   1564e:	4302      	orrs	r2, r0
   15650:	4629      	mov	r1, r5
   15652:	4812      	ldr	r0, [pc, #72]	; (1569c <handleParameter+0x934>)
   15654:	f00d feb7 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15658:	2400      	movs	r4, #0
   1565a:	f7ff bbd0 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   1565e:	012d      	lsls	r5, r5, #4
   15660:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   15664:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SFILT_MASK, TMC5041_SFILT_SHIFT);
   15666:	480d      	ldr	r0, [pc, #52]	; (1569c <handleParameter+0x934>)
   15668:	4629      	mov	r1, r5
		if(readWrite == READ) {
   1566a:	b934      	cbnz	r4, 1567a <handleParameter+0x912>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SFILT_MASK, TMC5041_SFILT_SHIFT);
   1566c:	f00d feb9 	bl	233e2 <tmc5041_readInt>
   15670:	f3c0 6000 	ubfx	r0, r0, #24, #1
   15674:	6030      	str	r0, [r6, #0]
   15676:	f7ff bbc2 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SFILT_MASK, TMC5041_SFILT_SHIFT, *value);
   1567a:	f00d feb2 	bl	233e2 <tmc5041_readInt>
   1567e:	6833      	ldr	r3, [r6, #0]
   15680:	061b      	lsls	r3, r3, #24
   15682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   15686:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   1568a:	431a      	orrs	r2, r3
   1568c:	4803      	ldr	r0, [pc, #12]	; (1569c <handleParameter+0x934>)
   1568e:	4629      	mov	r1, r5
   15690:	f00d fe99 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15694:	2400      	movs	r4, #0
   15696:	f7ff bbb2 	b.w	14dfe <handleParameter+0x96>
   1569a:	bf00      	nop
   1569c:	1fff3464 	.word	0x1fff3464
		if(readWrite == READ) {
   156a0:	012d      	lsls	r5, r5, #4
   156a2:	f045 056d 	orr.w	r5, r5, #109	; 0x6d
   156a6:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SGT_MASK, TMC5041_SGT_SHIFT);
   156a8:	488b      	ldr	r0, [pc, #556]	; (158d8 <handleParameter+0xb70>)
   156aa:	4629      	mov	r1, r5
		if(readWrite == READ) {
   156ac:	b96c      	cbnz	r4, 156ca <handleParameter+0x962>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SGT_MASK, TMC5041_SGT_SHIFT);
   156ae:	f00d fe98 	bl	233e2 <tmc5041_readInt>
   156b2:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   156b4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SGT_MASK, TMC5041_SGT_SHIFT);
   156b8:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   156bc:	bf18      	it	ne
   156be:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   156c2:	4318      	orrs	r0, r3
   156c4:	6030      	str	r0, [r6, #0]
   156c6:	f7ff bb9a 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_COOLCONF(motor), TMC5041_SGT_MASK, TMC5041_SGT_SHIFT, *value);
   156ca:	f00d fe8a 	bl	233e2 <tmc5041_readInt>
   156ce:	6833      	ldr	r3, [r6, #0]
   156d0:	041b      	lsls	r3, r3, #16
   156d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   156d6:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   156da:	431a      	orrs	r2, r3
   156dc:	487e      	ldr	r0, [pc, #504]	; (158d8 <handleParameter+0xb70>)
   156de:	4629      	mov	r1, r5
   156e0:	f00d fe71 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   156e4:	2400      	movs	r4, #0
   156e6:	f7ff bb8a 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   156ea:	012d      	lsls	r5, r5, #4
   156ec:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   156f0:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VSENSE_MASK, TMC5041_VSENSE_SHIFT);
   156f2:	4879      	ldr	r0, [pc, #484]	; (158d8 <handleParameter+0xb70>)
   156f4:	4629      	mov	r1, r5
		if(readWrite == READ) {
   156f6:	b934      	cbnz	r4, 15706 <handleParameter+0x99e>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VSENSE_MASK, TMC5041_VSENSE_SHIFT);
   156f8:	f00d fe73 	bl	233e2 <tmc5041_readInt>
   156fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
   15700:	6030      	str	r0, [r6, #0]
   15702:	f7ff bb7c 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_VSENSE_MASK, TMC5041_VSENSE_SHIFT, *value);
   15706:	f00d fe6c 	bl	233e2 <tmc5041_readInt>
   1570a:	6833      	ldr	r3, [r6, #0]
   1570c:	045b      	lsls	r3, r3, #17
   1570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   15712:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
   15716:	431a      	orrs	r2, r3
   15718:	486f      	ldr	r0, [pc, #444]	; (158d8 <handleParameter+0xb70>)
   1571a:	4629      	mov	r1, r5
   1571c:	f00d fe53 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15720:	2400      	movs	r4, #0
   15722:	f7ff bb6c 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15726:	2c00      	cmp	r4, #0
   15728:	f040 80cf 	bne.w	158ca <handleParameter+0xb62>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_DRVSTATUS(motor), TMC5041_CS_ACTUAL_MASK, TMC5041_CS_ACTUAL_SHIFT);
   1572c:	0129      	lsls	r1, r5, #4
   1572e:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   15732:	4869      	ldr	r0, [pc, #420]	; (158d8 <handleParameter+0xb70>)
   15734:	b2c9      	uxtb	r1, r1
   15736:	f00d fe54 	bl	233e2 <tmc5041_readInt>
   1573a:	f3c0 4004 	ubfx	r0, r0, #16, #5
   1573e:	6030      	str	r0, [r6, #0]
   15740:	f7ff bb5d 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15744:	2120      	movs	r1, #32
   15746:	fa01 f505 	lsl.w	r5, r1, r5
   1574a:	b26d      	sxtb	r5, r5
   1574c:	f045 0111 	orr.w	r1, r5, #17
   15750:	b2c9      	uxtb	r1, r1
   15752:	b92c      	cbnz	r4, 15760 <handleParameter+0x9f8>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor));
   15754:	4860      	ldr	r0, [pc, #384]	; (158d8 <handleParameter+0xb70>)
   15756:	f00d fe44 	bl	233e2 <tmc5041_readInt>
   1575a:	6030      	str	r0, [r6, #0]
   1575c:	f7ff bb4f 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_SG_STOP_MASK, TMC5041_SG_STOP_SHIFT, (*value)? 1:0);
   15760:	f045 0514 	orr.w	r5, r5, #20
			tmc5041_writeInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor),*value);
   15764:	6832      	ldr	r2, [r6, #0]
   15766:	485c      	ldr	r0, [pc, #368]	; (158d8 <handleParameter+0xb70>)
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_SG_STOP_MASK, TMC5041_SG_STOP_SHIFT, (*value)? 1:0);
   15768:	b2ed      	uxtb	r5, r5
			tmc5041_writeInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor),*value);
   1576a:	f00d fe2c 	bl	233c6 <tmc5041_writeInt>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_SWMODE(motor), TMC5041_SG_STOP_MASK, TMC5041_SG_STOP_SHIFT, (*value)? 1:0);
   1576e:	4629      	mov	r1, r5
   15770:	4859      	ldr	r0, [pc, #356]	; (158d8 <handleParameter+0xb70>)
   15772:	f00d fe36 	bl	233e2 <tmc5041_readInt>
   15776:	6833      	ldr	r3, [r6, #0]
   15778:	2b00      	cmp	r3, #0
   1577a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   1577e:	bf18      	it	ne
   15780:	f44f 6380 	movne.w	r3, #1024	; 0x400
   15784:	4854      	ldr	r0, [pc, #336]	; (158d8 <handleParameter+0xb70>)
   15786:	431a      	orrs	r2, r3
   15788:	4629      	mov	r1, r5
   1578a:	f00d fe1c 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1578e:	2400      	movs	r4, #0
   15790:	f7ff bb35 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15794:	2120      	movs	r1, #32
   15796:	40a9      	lsls	r1, r5
   15798:	f041 0111 	orr.w	r1, r1, #17
   1579c:	b2c9      	uxtb	r1, r1
   1579e:	b92c      	cbnz	r4, 157ac <handleParameter+0xa44>
			*value = tmc5041_readInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor));
   157a0:	484d      	ldr	r0, [pc, #308]	; (158d8 <handleParameter+0xb70>)
   157a2:	f00d fe1e 	bl	233e2 <tmc5041_readInt>
   157a6:	6030      	str	r0, [r6, #0]
   157a8:	f7ff bb29 	b.w	14dfe <handleParameter+0x96>
			tmc5041_writeInt(motorToIC(motor), TMC5041_VCOOLTHRS(motor),*value);
   157ac:	6832      	ldr	r2, [r6, #0]
   157ae:	484a      	ldr	r0, [pc, #296]	; (158d8 <handleParameter+0xb70>)
   157b0:	f00d fe09 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   157b4:	2400      	movs	r4, #0
   157b6:	f7ff bb22 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   157ba:	012d      	lsls	r5, r5, #4
   157bc:	f045 056c 	orr.w	r5, r5, #108	; 0x6c
   157c0:	b2ed      	uxtb	r5, r5
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_RNDTF_MASK, TMC5041_RNDTF_SHIFT);
   157c2:	4845      	ldr	r0, [pc, #276]	; (158d8 <handleParameter+0xb70>)
   157c4:	4629      	mov	r1, r5
		if(readWrite == READ) {
   157c6:	b934      	cbnz	r4, 157d6 <handleParameter+0xa6e>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_RNDTF_MASK, TMC5041_RNDTF_SHIFT);
   157c8:	f00d fe0b 	bl	233e2 <tmc5041_readInt>
   157cc:	f3c0 3040 	ubfx	r0, r0, #13, #1
   157d0:	6030      	str	r0, [r6, #0]
   157d2:	f7ff bb14 	b.w	14dfe <handleParameter+0x96>
			TMC5041_FIELD_WRITE(&TMC5041, TMC5041_CHOPCONF(motor), TMC5041_RNDTF_MASK, TMC5041_RNDTF_SHIFT, *value);
   157d6:	f00d fe04 	bl	233e2 <tmc5041_readInt>
   157da:	6833      	ldr	r3, [r6, #0]
   157dc:	035b      	lsls	r3, r3, #13
   157de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   157e2:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   157e6:	431a      	orrs	r2, r3
   157e8:	483b      	ldr	r0, [pc, #236]	; (158d8 <handleParameter+0xb70>)
   157ea:	4629      	mov	r1, r5
   157ec:	f00d fdeb 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   157f0:	2400      	movs	r4, #0
   157f2:	f7ff bb04 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   157f6:	2c00      	cmp	r4, #0
   157f8:	d16a      	bne.n	158d0 <handleParameter+0xb68>
			*value = TMC5041_FIELD_READ(&TMC5041, TMC5041_DRVSTATUS(motor), TMC5041_SG_RESULT_MASK, TMC5041_SG_RESULT_SHIFT);
   157fa:	0129      	lsls	r1, r5, #4
   157fc:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   15800:	4835      	ldr	r0, [pc, #212]	; (158d8 <handleParameter+0xb70>)
   15802:	b2c9      	uxtb	r1, r1
   15804:	f00d fded 	bl	233e2 <tmc5041_readInt>
   15808:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1580c:	6030      	str	r0, [r6, #0]
   1580e:	f7ff baf6 	b.w	14dfe <handleParameter+0x96>
		if(readWrite == READ) {
   15812:	b9cc      	cbnz	r4, 15848 <handleParameter+0xae0>
			switch(motor)
   15814:	2d01      	cmp	r5, #1
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   15816:	4830      	ldr	r0, [pc, #192]	; (158d8 <handleParameter+0xb70>)
   15818:	4621      	mov	r1, r4
   1581a:	d00a      	beq.n	15832 <handleParameter+0xaca>
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   1581c:	f00d fde1 	bl	233e2 <tmc5041_readInt>
				tempValue &= (1<<3) | (1<<4);
   15820:	f000 0018 	and.w	r0, r0, #24
				*value = (tempValue == (1<<4))? 1 : 0;
   15824:	f1a0 0210 	sub.w	r2, r0, #16
   15828:	4250      	negs	r0, r2
   1582a:	4150      	adcs	r0, r2
   1582c:	6030      	str	r0, [r6, #0]
				break;
   1582e:	f7ff bae6 	b.w	14dfe <handleParameter+0x96>
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   15832:	f00d fdd6 	bl	233e2 <tmc5041_readInt>
				tempValue &= (1<<5) | (1<<6);
   15836:	f000 0060 	and.w	r0, r0, #96	; 0x60
				*value = (tempValue == (1<<5))? 1 : 0;
   1583a:	f1a0 0320 	sub.w	r3, r0, #32
   1583e:	4258      	negs	r0, r3
   15840:	4158      	adcs	r0, r3
   15842:	6030      	str	r0, [r6, #0]
				break;
   15844:	f7ff badb 	b.w	14dfe <handleParameter+0x96>
			switch(motor)
   15848:	2d01      	cmp	r5, #1
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   1584a:	4823      	ldr	r0, [pc, #140]	; (158d8 <handleParameter+0xb70>)
   1584c:	f04f 0100 	mov.w	r1, #0
   15850:	d011      	beq.n	15876 <handleParameter+0xb0e>
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   15852:	f00d fdc6 	bl	233e2 <tmc5041_readInt>
				if(*value)
   15856:	6833      	ldr	r3, [r6, #0]
   15858:	f020 0218 	bic.w	r2, r0, #24
   1585c:	b143      	cbz	r3, 15870 <handleParameter+0xb08>
					tempValue = (tempValue & ~(1<<3)) | (1<<4);
   1585e:	f042 0210 	orr.w	r2, r2, #16
				tmc5041_writeInt(motorToIC(motor), TMC5041_GCONF, tempValue);
   15862:	481d      	ldr	r0, [pc, #116]	; (158d8 <handleParameter+0xb70>)
   15864:	2100      	movs	r1, #0
   15866:	f00d fdae 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1586a:	2400      	movs	r4, #0
				break;
   1586c:	f7ff bac7 	b.w	14dfe <handleParameter+0x96>
					tempValue = (tempValue | (1<<3)) & ~(1<<4);
   15870:	f042 0208 	orr.w	r2, r2, #8
   15874:	e7f5      	b.n	15862 <handleParameter+0xafa>
				tempValue = tmc5041_readInt(motorToIC(motor), TMC5041_GCONF);
   15876:	f00d fdb4 	bl	233e2 <tmc5041_readInt>
				if(*value)
   1587a:	6833      	ldr	r3, [r6, #0]
   1587c:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   15880:	b143      	cbz	r3, 15894 <handleParameter+0xb2c>
					tempValue = (tempValue | (1<<5)) & ~(1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Codemäßig macht es so Sinn, aber die Bits sind in der Dokumentation als reserved markiert (LH) #1
   15882:	f042 0220 	orr.w	r2, r2, #32
				tmc5041_writeInt(motorToIC(motor), TMC5041_GCONF, tempValue);
   15886:	4814      	ldr	r0, [pc, #80]	; (158d8 <handleParameter+0xb70>)
   15888:	2100      	movs	r1, #0
   1588a:	f00d fd9c 	bl	233c6 <tmc5041_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1588e:	2400      	movs	r4, #0
				break;
   15890:	f7ff bab5 	b.w	14dfe <handleParameter+0x96>
					tempValue = (tempValue & ~(1<<5)) | (1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Codemäßig macht es so Sinn, aber die Bits sind in der Dokumentation als reserved markiert (LH) #2
   15894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15898:	e7f5      	b.n	15886 <handleParameter+0xb1e>
		return TMC_ERROR_MOTOR;
   1589a:	2408      	movs	r4, #8
   1589c:	f7ff baaf 	b.w	14dfe <handleParameter+0x96>
	uint32_t errors = TMC_ERROR_NONE;
   158a0:	2400      	movs	r4, #0
   158a2:	f7ff baac 	b.w	14dfe <handleParameter+0x96>
	switch(type)
   158a6:	2404      	movs	r4, #4
   158a8:	f7ff baa9 	b.w	14dfe <handleParameter+0x96>
			errors |= TMC_ERROR_TYPE;
   158ac:	2404      	movs	r4, #4
   158ae:	f7ff baa6 	b.w	14dfe <handleParameter+0x96>
   158b2:	2404      	movs	r4, #4
   158b4:	f7ff baa3 	b.w	14dfe <handleParameter+0x96>
   158b8:	2404      	movs	r4, #4
   158ba:	f7ff baa0 	b.w	14dfe <handleParameter+0x96>
   158be:	2404      	movs	r4, #4
   158c0:	f7ff ba9d 	b.w	14dfe <handleParameter+0x96>
   158c4:	2404      	movs	r4, #4
   158c6:	f7ff ba9a 	b.w	14dfe <handleParameter+0x96>
   158ca:	2404      	movs	r4, #4
   158cc:	f7ff ba97 	b.w	14dfe <handleParameter+0x96>
   158d0:	2404      	movs	r4, #4
   158d2:	f7ff ba94 	b.w	14dfe <handleParameter+0x96>
   158d6:	bf00      	nop
   158d8:	1fff3464 	.word	0x1fff3464

000158dc <SAP>:
{
   158dc:	b507      	push	{r0, r1, r2, lr}
   158de:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   158e0:	ab01      	add	r3, sp, #4
   158e2:	4602      	mov	r2, r0
   158e4:	2001      	movs	r0, #1
   158e6:	f7ff fa3f 	bl	14d68 <handleParameter>
}
   158ea:	b003      	add	sp, #12
   158ec:	f85d fb04 	ldr.w	pc, [sp], #4

000158f0 <GAP>:
{
   158f0:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   158f2:	4602      	mov	r2, r0
   158f4:	2000      	movs	r0, #0
   158f6:	f7ff ba37 	b.w	14d68 <handleParameter>

000158fa <restore>:
	return tmc5041_reset(&TMC5041);
}

static uint8_t restore()
{
	return tmc5041_restore(&TMC5041);
   158fa:	4801      	ldr	r0, [pc, #4]	; (15900 <restore+0x6>)
   158fc:	f00d be2c 	b.w	23558 <tmc5041_restore>
   15900:	1fff3464 	.word	0x1fff3464

00015904 <reset>:
{
   15904:	b508      	push	{r3, lr}
		if(tmc5041_readInt(motorToIC(motor), TMC5041_VACTUAL(motor)) != 0)
   15906:	4808      	ldr	r0, [pc, #32]	; (15928 <reset+0x24>)
   15908:	2122      	movs	r1, #34	; 0x22
   1590a:	f00d fd6a 	bl	233e2 <tmc5041_readInt>
   1590e:	b948      	cbnz	r0, 15924 <reset+0x20>
   15910:	4805      	ldr	r0, [pc, #20]	; (15928 <reset+0x24>)
   15912:	2142      	movs	r1, #66	; 0x42
   15914:	f00d fd65 	bl	233e2 <tmc5041_readInt>
   15918:	b920      	cbnz	r0, 15924 <reset+0x20>
}
   1591a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tmc5041_reset(&TMC5041);
   1591e:	4802      	ldr	r0, [pc, #8]	; (15928 <reset+0x24>)
   15920:	f00d be12 	b.w	23548 <tmc5041_reset>
}
   15924:	2000      	movs	r0, #0
   15926:	bd08      	pop	{r3, pc}
   15928:	1fff3464 	.word	0x1fff3464

0001592c <userFunction>:
	switch(type)
   1592c:	2801      	cmp	r0, #1
{
   1592e:	b510      	push	{r4, lr}
   15930:	4614      	mov	r4, r2
	switch(type)
   15932:	d003      	beq.n	1593c <userFunction+0x10>
   15934:	2802      	cmp	r0, #2
   15936:	d00f      	beq.n	15958 <userFunction+0x2c>
   15938:	2004      	movs	r0, #4
}
   1593a:	bd10      	pop	{r4, pc}
		*value = (HAL.IOs->config->isHigh(Pins.INT_ENCA))? 1 : 0;
   1593c:	4b0a      	ldr	r3, [pc, #40]	; (15968 <userFunction+0x3c>)
   1593e:	4a0b      	ldr	r2, [pc, #44]	; (1596c <userFunction+0x40>)
   15940:	68db      	ldr	r3, [r3, #12]
   15942:	f8d2 02a4 	ldr.w	r0, [r2, #676]	; 0x2a4
   15946:	681b      	ldr	r3, [r3, #0]
   15948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
   1594a:	4798      	blx	r3
   1594c:	3800      	subs	r0, #0
   1594e:	bf18      	it	ne
   15950:	2001      	movne	r0, #1
   15952:	6020      	str	r0, [r4, #0]
	uint32_t errors = 0;
   15954:	2000      	movs	r0, #0
	return errors;
   15956:	e7f0      	b.n	1593a <userFunction+0xe>
		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
   15958:	4b03      	ldr	r3, [pc, #12]	; (15968 <userFunction+0x3c>)
   1595a:	4a04      	ldr	r2, [pc, #16]	; (1596c <userFunction+0x40>)
   1595c:	68db      	ldr	r3, [r3, #12]
   1595e:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
   15962:	681b      	ldr	r3, [r3, #0]
   15964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15966:	e7f0      	b.n	1594a <userFunction+0x1e>
   15968:	00029d1c 	.word	0x00029d1c
   1596c:	1fff3464 	.word	0x1fff3464

00015970 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   15970:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   15972:	bf04      	itt	eq
   15974:	4b0c      	ldreq	r3, [pc, #48]	; (159a8 <enableDriver+0x38>)
   15976:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   1597a:	b938      	cbnz	r0, 1598c <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
   1597c:	4b0b      	ldr	r3, [pc, #44]	; (159ac <enableDriver+0x3c>)
   1597e:	68db      	ldr	r3, [r3, #12]
   15980:	681b      	ldr	r3, [r3, #0]
   15982:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   15984:	4a0a      	ldr	r2, [pc, #40]	; (159b0 <enableDriver+0x40>)
   15986:	f8d2 02a0 	ldr.w	r0, [r2, #672]	; 0x2a0
   1598a:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   1598c:	2801      	cmp	r0, #1
   1598e:	d109      	bne.n	159a4 <enableDriver+0x34>
   15990:	4b05      	ldr	r3, [pc, #20]	; (159a8 <enableDriver+0x38>)
   15992:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   15996:	2b01      	cmp	r3, #1
   15998:	d104      	bne.n	159a4 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   1599a:	4b04      	ldr	r3, [pc, #16]	; (159ac <enableDriver+0x3c>)
   1599c:	68db      	ldr	r3, [r3, #12]
   1599e:	681b      	ldr	r3, [r3, #0]
   159a0:	699b      	ldr	r3, [r3, #24]
   159a2:	e7ef      	b.n	15984 <enableDriver+0x14>
}
   159a4:	4770      	bx	lr
   159a6:	bf00      	nop
   159a8:	1fff5e88 	.word	0x1fff5e88
   159ac:	00029d1c 	.word	0x00029d1c
   159b0:	1fff3464 	.word	0x1fff3464

000159b4 <deInit>:
{
   159b4:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
   159b6:	2000      	movs	r0, #0
   159b8:	f7ff ffda 	bl	15970 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
   159bc:	4b09      	ldr	r3, [pc, #36]	; (159e4 <deInit+0x30>)
   159be:	4c0a      	ldr	r4, [pc, #40]	; (159e8 <deInit+0x34>)
   159c0:	68dd      	ldr	r5, [r3, #12]
   159c2:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   159c6:	682b      	ldr	r3, [r5, #0]
   159c8:	689b      	ldr	r3, [r3, #8]
   159ca:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INT_ENCA);
   159cc:	682b      	ldr	r3, [r5, #0]
   159ce:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   159d2:	689b      	ldr	r3, [r3, #8]
   159d4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.PP_ENCB);
   159d6:	682b      	ldr	r3, [r5, #0]
   159d8:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   159dc:	689b      	ldr	r3, [r3, #8]
};
   159de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.PP_ENCB);
   159e2:	4718      	bx	r3
   159e4:	00029d1c 	.word	0x00029d1c
   159e8:	1fff3464 	.word	0x1fff3464

000159ec <rotate>:
	if(motor >= TMC5041_MOTORS)
   159ec:	2801      	cmp	r0, #1
{
   159ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   159f0:	4604      	mov	r4, r0
   159f2:	460e      	mov	r6, r1
	if(motor >= TMC5041_MOTORS)
   159f4:	d81a      	bhi.n	15a2c <rotate+0x40>
	tmc5041_writeInt(motorToIC(motor), TMC5041_VMAX(motor), abs(velocity));
   159f6:	2520      	movs	r5, #32
   159f8:	4f0d      	ldr	r7, [pc, #52]	; (15a30 <rotate+0x44>)
   159fa:	4085      	lsls	r5, r0
   159fc:	f045 0107 	orr.w	r1, r5, #7
   15a00:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
   15a04:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   15a08:	b2c9      	uxtb	r1, r1
   15a0a:	4638      	mov	r0, r7
   15a0c:	f00d fcdb 	bl	233c6 <tmc5041_writeInt>
	TMC5041.vMaxModified[motor] = true;
   15a10:	443c      	add	r4, r7
   15a12:	2301      	movs	r3, #1
	tmc5041_writeInt(motorToIC(motor), TMC5041_RAMPMODE(motor), (velocity >= 0)? TMC5041_MODE_VELPOS:TMC5041_MODE_VELNEG);
   15a14:	2e00      	cmp	r6, #0
   15a16:	4638      	mov	r0, r7
   15a18:	bfac      	ite	ge
   15a1a:	461a      	movge	r2, r3
   15a1c:	2202      	movlt	r2, #2
   15a1e:	b2e9      	uxtb	r1, r5
	TMC5041.vMaxModified[motor] = true;
   15a20:	f884 3298 	strb.w	r3, [r4, #664]	; 0x298
	tmc5041_writeInt(motorToIC(motor), TMC5041_RAMPMODE(motor), (velocity >= 0)? TMC5041_MODE_VELPOS:TMC5041_MODE_VELNEG);
   15a24:	f00d fccf 	bl	233c6 <tmc5041_writeInt>
   15a28:	2000      	movs	r0, #0
}
   15a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TMC_ERROR_MOTOR;
   15a2c:	2008      	movs	r0, #8
   15a2e:	e7fc      	b.n	15a2a <rotate+0x3e>
   15a30:	1fff3464 	.word	0x1fff3464

00015a34 <stop>:
	return rotate(motor, 0);
   15a34:	2100      	movs	r1, #0
   15a36:	e7d9      	b.n	159ec <rotate>

00015a38 <left>:
	return rotate(motor, -velocity);
   15a38:	4249      	negs	r1, r1
   15a3a:	e7d7      	b.n	159ec <rotate>

00015a3c <right>:
	return rotate(motor, velocity);
   15a3c:	e7d6      	b.n	159ec <rotate>

00015a3e <tmc5041_readWriteArray>:
	return TMC5041_SPIChannel;
   15a3e:	4b03      	ldr	r3, [pc, #12]	; (15a4c <tmc5041_readWriteArray+0xe>)
	channelToSPI(channel)->readWriteArray(data, length);
   15a40:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
{
   15a44:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   15a46:	68db      	ldr	r3, [r3, #12]
   15a48:	4611      	mov	r1, r2
   15a4a:	4718      	bx	r3
   15a4c:	1fff3464 	.word	0x1fff3464

00015a50 <TMC5041_init>:

void TMC5041_init(void)
{
   15a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc5041_init(&TMC5041, 0, Evalboards.ch1.config, tmc5041_defaultRegisterResetState);
   15a52:	4c30      	ldr	r4, [pc, #192]	; (15b14 <TMC5041_init+0xc4>)
   15a54:	4d30      	ldr	r5, [pc, #192]	; (15b18 <TMC5041_init+0xc8>)

	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   15a56:	4f31      	ldr	r7, [pc, #196]	; (15b1c <TMC5041_init+0xcc>)
	tmc5041_init(&TMC5041, 0, Evalboards.ch1.config, tmc5041_defaultRegisterResetState);
   15a58:	69a2      	ldr	r2, [r4, #24]
   15a5a:	4b31      	ldr	r3, [pc, #196]	; (15b20 <TMC5041_init+0xd0>)
   15a5c:	2100      	movs	r1, #0
   15a5e:	4628      	mov	r0, r5
   15a60:	f00d fcec 	bl	2343c <tmc5041_init>
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   15a64:	68fe      	ldr	r6, [r7, #12]
   15a66:	6873      	ldr	r3, [r6, #4]
	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
   15a68:	f503 7284 	add.w	r2, r3, #264	; 0x108
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   15a6c:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
   15a70:	f503 7394 	add.w	r3, r3, #296	; 0x128
   15a74:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   15a78:	6833      	ldr	r3, [r6, #0]
	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
   15a7a:	f8c5 22a4 	str.w	r2, [r5, #676]	; 0x2a4
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   15a7e:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   15a80:	f8c5 02a0 	str.w	r0, [r5, #672]	; 0x2a0
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   15a84:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.INT_ENCA);
   15a86:	6833      	ldr	r3, [r6, #0]
   15a88:	f8d5 02a4 	ldr.w	r0, [r5, #676]	; 0x2a4
   15a8c:	691b      	ldr	r3, [r3, #16]
   15a8e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.PP_ENCB);
   15a90:	6833      	ldr	r3, [r6, #0]
   15a92:	f8d5 02a8 	ldr.w	r0, [r5, #680]	; 0x2a8
   15a96:	691b      	ldr	r3, [r3, #16]
   15a98:	4798      	blx	r3

	TMC5041_SPIChannel = &HAL.SPI->ch1;
	TMC5041_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   15a9a:	6873      	ldr	r3, [r6, #4]
	TMC5041_SPIChannel = &HAL.SPI->ch1;
   15a9c:	693a      	ldr	r2, [r7, #16]
   15a9e:	f8c5 22ac 	str.w	r2, [r5, #684]	; 0x2ac
	TMC5041_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   15aa2:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   15aa6:	6053      	str	r3, [r2, #4]

	TMC5041_config = Evalboards.ch1.config;
   15aa8:	69a3      	ldr	r3, [r4, #24]

	Evalboards.ch1.config->reset        = reset;
   15aaa:	4a1e      	ldr	r2, [pc, #120]	; (15b24 <TMC5041_init+0xd4>)
   15aac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   15ab0:	4a1d      	ldr	r2, [pc, #116]	; (15b28 <TMC5041_init+0xd8>)
   15ab2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   15ab6:	2201      	movs	r2, #1
   15ab8:	801a      	strh	r2, [r3, #0]
	TMC5041_config = Evalboards.ch1.config;
   15aba:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   15abe:	4b1b      	ldr	r3, [pc, #108]	; (15b2c <TMC5041_init+0xdc>)
   15ac0:	6263      	str	r3, [r4, #36]	; 0x24
	Evalboards.ch1.right                = right;
   15ac2:	4b1b      	ldr	r3, [pc, #108]	; (15b30 <TMC5041_init+0xe0>)
   15ac4:	6223      	str	r3, [r4, #32]
	Evalboards.ch1.left                 = left;
   15ac6:	4b1b      	ldr	r3, [pc, #108]	; (15b34 <TMC5041_init+0xe4>)
   15ac8:	61e3      	str	r3, [r4, #28]
	Evalboards.ch1.stop                 = stop;
   15aca:	4b1b      	ldr	r3, [pc, #108]	; (15b38 <TMC5041_init+0xe8>)
   15acc:	62a3      	str	r3, [r4, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   15ace:	4b1b      	ldr	r3, [pc, #108]	; (15b3c <TMC5041_init+0xec>)
   15ad0:	63e3      	str	r3, [r4, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   15ad2:	4b1b      	ldr	r3, [pc, #108]	; (15b40 <TMC5041_init+0xf0>)
   15ad4:	63a3      	str	r3, [r4, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   15ad6:	4b1b      	ldr	r3, [pc, #108]	; (15b44 <TMC5041_init+0xf4>)
   15ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   15ada:	4b1b      	ldr	r3, [pc, #108]	; (15b48 <TMC5041_init+0xf8>)
   15adc:	6323      	str	r3, [r4, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   15ade:	4b1b      	ldr	r3, [pc, #108]	; (15b4c <TMC5041_init+0xfc>)
   15ae0:	64e3      	str	r3, [r4, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   15ae2:	4b1b      	ldr	r3, [pc, #108]	; (15b50 <TMC5041_init+0x100>)
   15ae4:	64a3      	str	r3, [r4, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   15ae6:	4b1b      	ldr	r3, [pc, #108]	; (15b54 <TMC5041_init+0x104>)
   15ae8:	65a3      	str	r3, [r4, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   15aea:	4b1b      	ldr	r3, [pc, #108]	; (15b58 <TMC5041_init+0x108>)
   15aec:	6563      	str	r3, [r4, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   15aee:	4b1b      	ldr	r3, [pc, #108]	; (15b5c <TMC5041_init+0x10c>)
   15af0:	6523      	str	r3, [r4, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   15af2:	4b1b      	ldr	r3, [pc, #108]	; (15b60 <TMC5041_init+0x110>)
   15af4:	6663      	str	r3, [r4, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   15af6:	4b1b      	ldr	r3, [pc, #108]	; (15b64 <TMC5041_init+0x114>)
   15af8:	6623      	str	r3, [r4, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC5041_MOTORS;
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   15afa:	2232      	movs	r2, #50	; 0x32
   15afc:	f44f 738c 	mov.w	r3, #280	; 0x118
   15b00:	e9c4 3203 	strd	r3, r2, [r4, #12]
	Evalboards.ch1.numberOfMotors       = TMC5041_MOTORS;
   15b04:	2002      	movs	r0, #2
	Evalboards.ch1.deInit               = deInit;
   15b06:	4b18      	ldr	r3, [pc, #96]	; (15b68 <TMC5041_init+0x118>)
	Evalboards.ch1.numberOfMotors       = TMC5041_MOTORS;
   15b08:	7520      	strb	r0, [r4, #20]
	Evalboards.ch1.deInit               = deInit;
   15b0a:	65e3      	str	r3, [r4, #92]	; 0x5c

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
};
   15b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   15b10:	e72e      	b.n	15970 <enableDriver>
   15b12:	bf00      	nop
   15b14:	1fff5e88 	.word	0x1fff5e88
   15b18:	1fff3464 	.word	0x1fff3464
   15b1c:	00029d1c 	.word	0x00029d1c
   15b20:	000292f8 	.word	0x000292f8
   15b24:	00015905 	.word	0x00015905
   15b28:	000158fb 	.word	0x000158fb
   15b2c:	000159ed 	.word	0x000159ed
   15b30:	00015a3d 	.word	0x00015a3d
   15b34:	00015a39 	.word	0x00015a39
   15b38:	00015a35 	.word	0x00015a35
   15b3c:	000158f1 	.word	0x000158f1
   15b40:	000158dd 	.word	0x000158dd
   15b44:	00014ce5 	.word	0x00014ce5
   15b48:	00014d41 	.word	0x00014d41
   15b4c:	00014cd9 	.word	0x00014cd9
   15b50:	00014cc5 	.word	0x00014cc5
   15b54:	00014cb9 	.word	0x00014cb9
   15b58:	0001592d 	.word	0x0001592d
   15b5c:	00014c91 	.word	0x00014c91
   15b60:	00015971 	.word	0x00015971
   15b64:	00014cad 	.word	0x00014cad
   15b68:	000159b5 	.word	0x000159b5

00015b6c <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= MOTORS)
   15b6c:	2801      	cmp	r0, #1
		return TMC_ERROR_MOTOR;

	*value = TMC5062.velocity[motor];
   15b6e:	bf9f      	itttt	ls
   15b70:	4b04      	ldrls	r3, [pc, #16]	; (15b84 <getMeasuredSpeed+0x18>)
   15b72:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   15b76:	69c3      	ldrls	r3, [r0, #28]
   15b78:	600b      	strls	r3, [r1, #0]

	return TMC_ERROR_NONE;
   15b7a:	bf94      	ite	ls
   15b7c:	2000      	movls	r0, #0
		return TMC_ERROR_MOTOR;
   15b7e:	2008      	movhi	r0, #8
}
   15b80:	4770      	bx	lr
   15b82:	bf00      	nop
   15b84:	1fff3720 	.word	0x1fff3720

00015b88 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   15b88:	4b01      	ldr	r3, [pc, #4]	; (15b90 <checkErrors+0x8>)
   15b8a:	2200      	movs	r2, #0
   15b8c:	609a      	str	r2, [r3, #8]
}
   15b8e:	4770      	bx	lr
   15b90:	1fff5e88 	.word	0x1fff5e88

00015b94 <periodicJob>:
{
   15b94:	4601      	mov	r1, r0
	tmc5062_periodicJob(&TMC5062, tick);
   15b96:	4801      	ldr	r0, [pc, #4]	; (15b9c <periodicJob+0x8>)
   15b98:	f00d be76 	b.w	23888 <tmc5062_periodicJob>
   15b9c:	1fff3720 	.word	0x1fff3720

00015ba0 <readInt>:
{
   15ba0:	460a      	mov	r2, r1
	return tmc5062_readInt(IC, channel, address);
   15ba2:	4601      	mov	r1, r0
   15ba4:	4801      	ldr	r0, [pc, #4]	; (15bac <readInt+0xc>)
   15ba6:	f00d bd0d 	b.w	235c4 <tmc5062_readInt>
   15baa:	bf00      	nop
   15bac:	1fff3720 	.word	0x1fff3720

00015bb0 <readRegister>:
{
   15bb0:	b510      	push	{r4, lr}
	*value	= readInt(0, address);
   15bb2:	2000      	movs	r0, #0
{
   15bb4:	4614      	mov	r4, r2
	*value	= readInt(0, address);
   15bb6:	f7ff fff3 	bl	15ba0 <readInt>
   15bba:	6020      	str	r0, [r4, #0]
}
   15bbc:	bd10      	pop	{r4, pc}

00015bbe <readField>:
{
   15bbe:	b538      	push	{r3, r4, r5, lr}
   15bc0:	4615      	mov	r5, r2
	return TMC5062_FIELD_READ(IC, channel, address, mask, shift);
   15bc2:	460a      	mov	r2, r1
   15bc4:	4601      	mov	r1, r0
   15bc6:	4803      	ldr	r0, [pc, #12]	; (15bd4 <readField+0x16>)
{
   15bc8:	461c      	mov	r4, r3
	return TMC5062_FIELD_READ(IC, channel, address, mask, shift);
   15bca:	f00d fcfb 	bl	235c4 <tmc5062_readInt>
   15bce:	4028      	ands	r0, r5
}
   15bd0:	40e0      	lsrs	r0, r4
   15bd2:	bd38      	pop	{r3, r4, r5, pc}
   15bd4:	1fff3720 	.word	0x1fff3720

00015bd8 <writeInt>:
{
   15bd8:	4613      	mov	r3, r2
	tmc5062_writeInt(IC, channel, address, value);
   15bda:	460a      	mov	r2, r1
   15bdc:	4601      	mov	r1, r0
   15bde:	4801      	ldr	r0, [pc, #4]	; (15be4 <writeInt+0xc>)
   15be0:	f00d bcec 	b.w	235bc <tmc5062_writeInt>
   15be4:	1fff3720 	.word	0x1fff3720

00015be8 <writeRegister>:
	writeInt(0, address, value);
   15be8:	2000      	movs	r0, #0
   15bea:	e7f5      	b.n	15bd8 <writeInt>

00015bec <moveTo>:
	if(motor >= MOTORS)
   15bec:	2801      	cmp	r0, #1
{
   15bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bf2:	4604      	mov	r4, r0
   15bf4:	4688      	mov	r8, r1
	if(motor >= MOTORS)
   15bf6:	d81f      	bhi.n	15c38 <moveTo+0x4c>
	if(vMaxPosMode[motor])
   15bf8:	4f10      	ldr	r7, [pc, #64]	; (15c3c <moveTo+0x50>)
   15bfa:	eb07 0780 	add.w	r7, r7, r0, lsl #2
   15bfe:	2520      	movs	r5, #32
   15c00:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
   15c04:	4085      	lsls	r5, r0
   15c06:	b26e      	sxtb	r6, r5
   15c08:	b13a      	cbz	r2, 15c1a <moveTo+0x2e>
		writeInt(motor, TMC5062_VMAX(motor), vMaxPosMode[motor]);
   15c0a:	f046 0107 	orr.w	r1, r6, #7
   15c0e:	b2c9      	uxtb	r1, r1
   15c10:	f7ff ffe2 	bl	15bd8 <writeInt>
		vMaxPosMode[motor] = 0;
   15c14:	2300      	movs	r3, #0
   15c16:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
	writeInt(motor, TMC5062_XTARGET(motor), position);
   15c1a:	f046 060d 	orr.w	r6, r6, #13
   15c1e:	4642      	mov	r2, r8
   15c20:	b2f1      	uxtb	r1, r6
   15c22:	4620      	mov	r0, r4
   15c24:	f7ff ffd8 	bl	15bd8 <writeInt>
	writeInt(motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
   15c28:	4620      	mov	r0, r4
   15c2a:	2200      	movs	r2, #0
   15c2c:	b2e9      	uxtb	r1, r5
   15c2e:	f7ff ffd3 	bl	15bd8 <writeInt>
	return TMC_ERROR_NONE;
   15c32:	2000      	movs	r0, #0
}
   15c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TMC_ERROR_MOTOR;
   15c38:	2008      	movs	r0, #8
   15c3a:	e7fb      	b.n	15c34 <moveTo+0x48>
   15c3c:	1fff3720 	.word	0x1fff3720

00015c40 <moveBy>:
{
   15c40:	b538      	push	{r3, r4, r5, lr}
	*ticks = readInt(motor, TMC5062_XACTUAL(motor)) + *ticks;
   15c42:	2320      	movs	r3, #32
   15c44:	4083      	lsls	r3, r0
   15c46:	f043 0301 	orr.w	r3, r3, #1
{
   15c4a:	460d      	mov	r5, r1
	*ticks = readInt(motor, TMC5062_XACTUAL(motor)) + *ticks;
   15c4c:	b2d9      	uxtb	r1, r3
{
   15c4e:	4604      	mov	r4, r0
	*ticks = readInt(motor, TMC5062_XACTUAL(motor)) + *ticks;
   15c50:	f7ff ffa6 	bl	15ba0 <readInt>
   15c54:	6829      	ldr	r1, [r5, #0]
   15c56:	4401      	add	r1, r0
   15c58:	6029      	str	r1, [r5, #0]
	return moveTo(motor, *ticks);
   15c5a:	4620      	mov	r0, r4
}
   15c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return moveTo(motor, *ticks);
   15c60:	e7c4      	b.n	15bec <moveTo>

00015c62 <rotate>:
	if(motor >= MOTORS)
   15c62:	2801      	cmp	r0, #1
{
   15c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c68:	4604      	mov	r4, r0
   15c6a:	460e      	mov	r6, r1
	if(motor >= MOTORS)
   15c6c:	d822      	bhi.n	15cb4 <rotate+0x52>
	if(vMaxPosMode[motor] == 0)
   15c6e:	4b12      	ldr	r3, [pc, #72]	; (15cb8 <rotate+0x56>)
   15c70:	eb03 0880 	add.w	r8, r3, r0, lsl #2
   15c74:	2520      	movs	r5, #32
   15c76:	4085      	lsls	r5, r0
   15c78:	f8d8 32a4 	ldr.w	r3, [r8, #676]	; 0x2a4
   15c7c:	f045 0707 	orr.w	r7, r5, #7
   15c80:	b2ff      	uxtb	r7, r7
   15c82:	b923      	cbnz	r3, 15c8e <rotate+0x2c>
		vMaxPosMode[motor] = readInt(motor, TMC5062_VMAX(motor));
   15c84:	4639      	mov	r1, r7
   15c86:	f7ff ff8b 	bl	15ba0 <readInt>
   15c8a:	f8c8 02a4 	str.w	r0, [r8, #676]	; 0x2a4
	writeInt(motor, TMC5062_VMAX(motor), abs(velocity));
   15c8e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
   15c92:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   15c96:	4639      	mov	r1, r7
   15c98:	4620      	mov	r0, r4
   15c9a:	f7ff ff9d 	bl	15bd8 <writeInt>
	writeInt(motor, TMC5062_RAMPMODE(motor), (velocity >= 0)? TMC5062_MODE_VELPOS:TMC5062_MODE_VELNEG);
   15c9e:	2e00      	cmp	r6, #0
   15ca0:	4620      	mov	r0, r4
   15ca2:	bfac      	ite	ge
   15ca4:	2201      	movge	r2, #1
   15ca6:	2202      	movlt	r2, #2
   15ca8:	b2e9      	uxtb	r1, r5
   15caa:	f7ff ff95 	bl	15bd8 <writeInt>
	return TMC_ERROR_NONE;
   15cae:	2000      	movs	r0, #0
}
   15cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TMC_ERROR_MOTOR;
   15cb4:	2008      	movs	r0, #8
   15cb6:	e7fb      	b.n	15cb0 <rotate+0x4e>
   15cb8:	1fff3720 	.word	0x1fff3720

00015cbc <stop>:
	return rotate(motor, 0);
   15cbc:	2100      	movs	r1, #0
   15cbe:	e7d0      	b.n	15c62 <rotate>

00015cc0 <left>:
	return rotate(motor, -velocity);
   15cc0:	4249      	negs	r1, r1
   15cc2:	e7ce      	b.n	15c62 <rotate>

00015cc4 <right>:
	return rotate(motor, velocity);
   15cc4:	e7cd      	b.n	15c62 <rotate>

00015cc6 <writeField>:
{
   15cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TMC5062_FIELD_WRITE(IC, channel, address, mask, shift, value);
   15cca:	4f0c      	ldr	r7, [pc, #48]	; (15cfc <writeField+0x36>)
{
   15ccc:	9c08      	ldr	r4, [sp, #32]
   15cce:	4605      	mov	r5, r0
   15cd0:	460e      	mov	r6, r1
   15cd2:	4690      	mov	r8, r2
	TMC5062_FIELD_WRITE(IC, channel, address, mask, shift, value);
   15cd4:	460a      	mov	r2, r1
   15cd6:	4601      	mov	r1, r0
   15cd8:	4638      	mov	r0, r7
{
   15cda:	4699      	mov	r9, r3
	TMC5062_FIELD_WRITE(IC, channel, address, mask, shift, value);
   15cdc:	f00d fc72 	bl	235c4 <tmc5062_readInt>
   15ce0:	fa04 f409 	lsl.w	r4, r4, r9
   15ce4:	4044      	eors	r4, r0
   15ce6:	ea04 0308 	and.w	r3, r4, r8
   15cea:	4043      	eors	r3, r0
   15cec:	4632      	mov	r2, r6
   15cee:	4629      	mov	r1, r5
   15cf0:	4638      	mov	r0, r7
}
   15cf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TMC5062_FIELD_WRITE(IC, channel, address, mask, shift, value);
   15cf6:	f00d bc61 	b.w	235bc <tmc5062_writeInt>
   15cfa:	bf00      	nop
   15cfc:	1fff3720 	.word	0x1fff3720

00015d00 <handleParameter>:
	if(motor >= MOTORS)
   15d00:	2901      	cmp	r1, #1
{
   15d02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15d06:	4604      	mov	r4, r0
   15d08:	460d      	mov	r5, r1
   15d0a:	461e      	mov	r6, r3
	if(motor >= MOTORS)
   15d0c:	f200 8567 	bhi.w	167de <handleParameter+0xade>
	switch(type)
   15d10:	2a1d      	cmp	r2, #29
   15d12:	d957      	bls.n	15dc4 <handleParameter+0xc4>
   15d14:	f102 0374 	add.w	r3, r2, #116	; 0x74
   15d18:	b2db      	uxtb	r3, r3
   15d1a:	2b47      	cmp	r3, #71	; 0x47
   15d1c:	d904      	bls.n	15d28 <handleParameter+0x28>
   15d1e:	2404      	movs	r4, #4
}
   15d20:	4620      	mov	r0, r4
   15d22:	b002      	add	sp, #8
   15d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d28:	3a8c      	subs	r2, #140	; 0x8c
   15d2a:	2a47      	cmp	r2, #71	; 0x47
   15d2c:	f200 855a 	bhi.w	167e4 <handleParameter+0xae4>
   15d30:	e8df f012 	tbh	[pc, r2, lsl #1]
   15d34:	05580254 	.word	0x05580254
   15d38:	05580558 	.word	0x05580558
   15d3c:	05580558 	.word	0x05580558
   15d40:	05580558 	.word	0x05580558
   15d44:	05580558 	.word	0x05580558
   15d48:	05580558 	.word	0x05580558
   15d4c:	05580558 	.word	0x05580558
   15d50:	05580558 	.word	0x05580558
   15d54:	05580558 	.word	0x05580558
   15d58:	05580558 	.word	0x05580558
   15d5c:	05580558 	.word	0x05580558
   15d60:	02bc02a5 	.word	0x02bc02a5
   15d64:	02ea02d3 	.word	0x02ea02d3
   15d68:	037c033b 	.word	0x037c033b
   15d6c:	03a80391 	.word	0x03a80391
   15d70:	03d903c2 	.word	0x03d903c2
   15d74:	040503ee 	.word	0x040503ee
   15d78:	0558041e 	.word	0x0558041e
   15d7c:	05580558 	.word	0x05580558
   15d80:	043d0558 	.word	0x043d0558
   15d84:	04660456 	.word	0x04660456
   15d88:	05580494 	.word	0x05580494
   15d8c:	04c004a7 	.word	0x04c004a7
   15d90:	05580558 	.word	0x05580558
   15d94:	05580558 	.word	0x05580558
   15d98:	05580558 	.word	0x05580558
   15d9c:	05580558 	.word	0x05580558
   15da0:	05580558 	.word	0x05580558
   15da4:	05580558 	.word	0x05580558
   15da8:	05580558 	.word	0x05580558
   15dac:	05580558 	.word	0x05580558
   15db0:	05580558 	.word	0x05580558
   15db4:	05580558 	.word	0x05580558
   15db8:	055804d9 	.word	0x055804d9
   15dbc:	04e90558 	.word	0x04e90558
   15dc0:	050f04fc 	.word	0x050f04fc
   15dc4:	2a1d      	cmp	r2, #29
   15dc6:	f200 8510 	bhi.w	167ea <handleParameter+0xaea>
   15dca:	e8df f012 	tbh	[pc, r2, lsl #1]
   15dce:	001e      	.short	0x001e
   15dd0:	0040002f 	.word	0x0040002f
   15dd4:	00670054 	.word	0x00670054
   15dd8:	009b008a 	.word	0x009b008a
   15ddc:	00c900b3 	.word	0x00c900b3
   15de0:	00d9050e 	.word	0x00d9050e
   15de4:	00fd00eb 	.word	0x00fd00eb
   15de8:	01290113 	.word	0x01290113
   15dec:	014b013a 	.word	0x014b013a
   15df0:	016d015c 	.word	0x016d015c
   15df4:	018f017e 	.word	0x018f017e
   15df8:	01b101a0 	.word	0x01b101a0
   15dfc:	01d601c5 	.word	0x01d601c5
   15e00:	050e050e 	.word	0x050e050e
   15e04:	01e7050e 	.word	0x01e7050e
   15e08:	01fe      	.short	0x01fe
		if(readWrite == READ) {
   15e0a:	2120      	movs	r1, #32
   15e0c:	40a9      	lsls	r1, r5
   15e0e:	f041 010d 	orr.w	r1, r1, #13
   15e12:	b2c9      	uxtb	r1, r1
   15e14:	b920      	cbnz	r0, 15e20 <handleParameter+0x120>
			*value = readInt(motor, TMC5062_XTARGET(motor));
   15e16:	4628      	mov	r0, r5
   15e18:	f7ff fec2 	bl	15ba0 <readInt>
   15e1c:	6030      	str	r0, [r6, #0]
   15e1e:	e77f      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_XTARGET(motor), *value);
   15e20:	6832      	ldr	r2, [r6, #0]
   15e22:	4628      	mov	r0, r5
   15e24:	f7ff fed8 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15e28:	2400      	movs	r4, #0
   15e2a:	e779      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15e2c:	2120      	movs	r1, #32
   15e2e:	40a9      	lsls	r1, r5
   15e30:	f041 0101 	orr.w	r1, r1, #1
   15e34:	b2c9      	uxtb	r1, r1
   15e36:	b920      	cbnz	r0, 15e42 <handleParameter+0x142>
			*value = readInt(motor, TMC5062_XACTUAL(motor));
   15e38:	4628      	mov	r0, r5
   15e3a:	f7ff feb1 	bl	15ba0 <readInt>
   15e3e:	6030      	str	r0, [r6, #0]
   15e40:	e76e      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_XACTUAL(motor), *value);
   15e42:	6832      	ldr	r2, [r6, #0]
   15e44:	4628      	mov	r0, r5
   15e46:	f7ff fec7 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15e4a:	2400      	movs	r4, #0
   15e4c:	e768      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15e4e:	2120      	movs	r1, #32
   15e50:	40a9      	lsls	r1, r5
   15e52:	f041 0107 	orr.w	r1, r1, #7
   15e56:	b2c9      	uxtb	r1, r1
   15e58:	b920      	cbnz	r0, 15e64 <handleParameter+0x164>
			*value = readInt(motor, TMC5062_VMAX(motor));
   15e5a:	4628      	mov	r0, r5
   15e5c:	f7ff fea0 	bl	15ba0 <readInt>
   15e60:	6030      	str	r0, [r6, #0]
   15e62:	e75d      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VMAX(motor), abs(*value));
   15e64:	6832      	ldr	r2, [r6, #0]
   15e66:	2a00      	cmp	r2, #0
   15e68:	bfb8      	it	lt
   15e6a:	4252      	neglt	r2, r2
   15e6c:	4628      	mov	r0, r5
   15e6e:	f7ff feb3 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15e72:	2400      	movs	r4, #0
   15e74:	e754      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15e76:	2800      	cmp	r0, #0
   15e78:	f040 84ba 	bne.w	167f0 <handleParameter+0xaf0>
			*value = readInt(motor, TMC5062_VACTUAL(motor));
   15e7c:	2120      	movs	r1, #32
   15e7e:	40a9      	lsls	r1, r5
   15e80:	f041 0102 	orr.w	r1, r1, #2
   15e84:	b2c9      	uxtb	r1, r1
   15e86:	4628      	mov	r0, r5
   15e88:	f7ff fe8a 	bl	15ba0 <readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   15e8c:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   15e90:	bf18      	it	ne
   15e92:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   15e96:	4318      	orrs	r0, r3
   15e98:	6030      	str	r0, [r6, #0]
   15e9a:	e741      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15e9c:	4bad      	ldr	r3, [pc, #692]	; (16154 <handleParameter+0x454>)
   15e9e:	2120      	movs	r1, #32
   15ea0:	40a9      	lsls	r1, r5
   15ea2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
   15ea6:	f041 0707 	orr.w	r7, r1, #7
   15eaa:	00ba      	lsls	r2, r7, #2
			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
   15eac:	4413      	add	r3, r2
		if(readWrite == READ) {
   15eae:	b910      	cbnz	r0, 15eb6 <handleParameter+0x1b6>
			*value = TMC5062_config->shadowRegister[TMC5062_VMAX(motor)];
   15eb0:	685b      	ldr	r3, [r3, #4]
   15eb2:	6033      	str	r3, [r6, #0]
   15eb4:	e734      	b.n	15d20 <handleParameter+0x20>
			TMC5062_config->shadowRegister[TMC5062_VMAX(motor)] = abs(*value);
   15eb6:	6832      	ldr	r2, [r6, #0]
   15eb8:	2a00      	cmp	r2, #0
   15eba:	bfb8      	it	lt
   15ebc:	4252      	neglt	r2, r2
   15ebe:	605a      	str	r2, [r3, #4]
			if(readInt(motor, TMC5062_RAMPMODE(motor)) == TMC5062_MODE_POSITION)
   15ec0:	b2c9      	uxtb	r1, r1
   15ec2:	4628      	mov	r0, r5
   15ec4:	f7ff fe6c 	bl	15ba0 <readInt>
   15ec8:	4604      	mov	r4, r0
   15eca:	b108      	cbz	r0, 15ed0 <handleParameter+0x1d0>
	uint32_t errors = TMC_ERROR_NONE;
   15ecc:	2400      	movs	r4, #0
   15ece:	e727      	b.n	15d20 <handleParameter+0x20>
				writeInt(motor, TMC5062_VMAX(motor), abs(*value));
   15ed0:	6832      	ldr	r2, [r6, #0]
   15ed2:	2a00      	cmp	r2, #0
   15ed4:	bfb8      	it	lt
   15ed6:	4252      	neglt	r2, r2
   15ed8:	b2f9      	uxtb	r1, r7
   15eda:	4628      	mov	r0, r5
   15edc:	f7ff fe7c 	bl	15bd8 <writeInt>
   15ee0:	e71e      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15ee2:	2120      	movs	r1, #32
   15ee4:	40a9      	lsls	r1, r5
   15ee6:	f041 0106 	orr.w	r1, r1, #6
   15eea:	b2c9      	uxtb	r1, r1
   15eec:	b920      	cbnz	r0, 15ef8 <handleParameter+0x1f8>
			*value = readInt(motor, TMC5062_AMAX(motor));
   15eee:	4628      	mov	r0, r5
   15ef0:	f7ff fe56 	bl	15ba0 <readInt>
   15ef4:	6030      	str	r0, [r6, #0]
   15ef6:	e713      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_AMAX(motor), *value);
   15ef8:	6832      	ldr	r2, [r6, #0]
   15efa:	4628      	mov	r0, r5
   15efc:	f7ff fe6c 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   15f00:	2400      	movs	r4, #0
   15f02:	e70d      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15f04:	2120      	movs	r1, #32
   15f06:	40a9      	lsls	r1, r5
   15f08:	f041 0110 	orr.w	r1, r1, #16
   15f0c:	b2c9      	uxtb	r1, r1
   15f0e:	b938      	cbnz	r0, 15f20 <handleParameter+0x220>
			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT);
   15f10:	2308      	movs	r3, #8
   15f12:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
   15f16:	4628      	mov	r0, r5
   15f18:	f7ff fe51 	bl	15bbe <readField>
   15f1c:	6030      	str	r0, [r6, #0]
   15f1e:	e6ff      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IRUN_MASK, TMC5062_IRUN_SHIFT, *value);
   15f20:	6833      	ldr	r3, [r6, #0]
   15f22:	9300      	str	r3, [sp, #0]
   15f24:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
   15f28:	2308      	movs	r3, #8
   15f2a:	4628      	mov	r0, r5
   15f2c:	f7ff fecb 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   15f30:	2400      	movs	r4, #0
   15f32:	e6f5      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15f34:	2120      	movs	r1, #32
   15f36:	40a9      	lsls	r1, r5
   15f38:	f041 0110 	orr.w	r1, r1, #16
   15f3c:	b2c9      	uxtb	r1, r1
   15f3e:	b930      	cbnz	r0, 15f4e <handleParameter+0x24e>
			*value = readField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT);
   15f40:	4603      	mov	r3, r0
   15f42:	221f      	movs	r2, #31
   15f44:	4628      	mov	r0, r5
   15f46:	f7ff fe3a 	bl	15bbe <readField>
   15f4a:	6030      	str	r0, [r6, #0]
   15f4c:	e6e8      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_IHOLD_IRUN(motor), TMC5062_IHOLD_MASK, TMC5062_IHOLD_SHIFT, *value);
   15f4e:	6833      	ldr	r3, [r6, #0]
   15f50:	9300      	str	r3, [sp, #0]
   15f52:	221f      	movs	r2, #31
   15f54:	2300      	movs	r3, #0
   15f56:	4628      	mov	r0, r5
   15f58:	f7ff feb5 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   15f5c:	2400      	movs	r4, #0
   15f5e:	e6df      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15f60:	2800      	cmp	r0, #0
   15f62:	f040 8448 	bne.w	167f6 <handleParameter+0xaf6>
			*value = readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_POSITION_REACHED_MASK, TMC5062_POSITION_REACHED_SHIFT);
   15f66:	2120      	movs	r1, #32
   15f68:	40a9      	lsls	r1, r5
   15f6a:	f041 0115 	orr.w	r1, r1, #21
   15f6e:	2309      	movs	r3, #9
   15f70:	f44f 7200 	mov.w	r2, #512	; 0x200
   15f74:	b2c9      	uxtb	r1, r1
   15f76:	4628      	mov	r0, r5
   15f78:	f7ff fe21 	bl	15bbe <readField>
   15f7c:	6030      	str	r0, [r6, #0]
   15f7e:	e6cf      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15f80:	2800      	cmp	r0, #0
   15f82:	f040 843b 	bne.w	167fc <handleParameter+0xafc>
			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_R_MASK, TMC5062_STATUS_STOP_R_SHIFT);
   15f86:	2120      	movs	r1, #32
   15f88:	40a9      	lsls	r1, r5
   15f8a:	f041 0115 	orr.w	r1, r1, #21
   15f8e:	2301      	movs	r3, #1
   15f90:	2202      	movs	r2, #2
   15f92:	b2c9      	uxtb	r1, r1
   15f94:	4628      	mov	r0, r5
   15f96:	f7ff fe12 	bl	15bbe <readField>
   15f9a:	fab0 f080 	clz	r0, r0
   15f9e:	0940      	lsrs	r0, r0, #5
   15fa0:	6030      	str	r0, [r6, #0]
   15fa2:	e6bd      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15fa4:	2800      	cmp	r0, #0
   15fa6:	f040 842c 	bne.w	16802 <handleParameter+0xb02>
			*value = !readField(motor, TMC5062_RAMPSTAT(motor), TMC5062_STATUS_STOP_L_MASK, TMC5062_STATUS_STOP_L_SHIFT);
   15faa:	2120      	movs	r1, #32
   15fac:	40a9      	lsls	r1, r5
   15fae:	f041 0115 	orr.w	r1, r1, #21
   15fb2:	4603      	mov	r3, r0
   15fb4:	2201      	movs	r2, #1
   15fb6:	b2c9      	uxtb	r1, r1
   15fb8:	4628      	mov	r0, r5
   15fba:	f7ff fe00 	bl	15bbe <readField>
   15fbe:	fab0 f080 	clz	r0, r0
   15fc2:	0940      	lsrs	r0, r0, #5
   15fc4:	6030      	str	r0, [r6, #0]
   15fc6:	e6ab      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15fc8:	2120      	movs	r1, #32
   15fca:	40a9      	lsls	r1, r5
   15fcc:	f041 0114 	orr.w	r1, r1, #20
   15fd0:	b2c9      	uxtb	r1, r1
   15fd2:	b930      	cbnz	r0, 15fe2 <handleParameter+0x2e2>
			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENABLE_SHIFT);
   15fd4:	2301      	movs	r3, #1
   15fd6:	2202      	movs	r2, #2
   15fd8:	4628      	mov	r0, r5
   15fda:	f7ff fdf0 	bl	15bbe <readField>
   15fde:	6030      	str	r0, [r6, #0]
   15fe0:	e69e      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_R_ENABLE_MASK, TMC5062_STOP_R_ENABLE_SHIFT, *value);
   15fe2:	6833      	ldr	r3, [r6, #0]
   15fe4:	9300      	str	r3, [sp, #0]
   15fe6:	2202      	movs	r2, #2
   15fe8:	2301      	movs	r3, #1
   15fea:	4628      	mov	r0, r5
   15fec:	f7ff fe6b 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   15ff0:	2400      	movs	r4, #0
   15ff2:	e695      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   15ff4:	2120      	movs	r1, #32
   15ff6:	40a9      	lsls	r1, r5
   15ff8:	f041 0114 	orr.w	r1, r1, #20
   15ffc:	b2c9      	uxtb	r1, r1
   15ffe:	b930      	cbnz	r0, 1600e <handleParameter+0x30e>
			*value = readField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENABLE_SHIFT);
   16000:	4603      	mov	r3, r0
   16002:	2201      	movs	r2, #1
   16004:	4628      	mov	r0, r5
   16006:	f7ff fdda 	bl	15bbe <readField>
   1600a:	6030      	str	r0, [r6, #0]
   1600c:	e688      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_SWMODE(motor), TMC5062_STOP_L_ENABLE_MASK, TMC5062_STOP_L_ENABLE_SHIFT, *value);
   1600e:	6833      	ldr	r3, [r6, #0]
   16010:	9300      	str	r3, [sp, #0]
   16012:	2201      	movs	r2, #1
   16014:	2300      	movs	r3, #0
   16016:	4628      	mov	r0, r5
   16018:	f7ff fe55 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   1601c:	2400      	movs	r4, #0
   1601e:	e67f      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16020:	2120      	movs	r1, #32
   16022:	40a9      	lsls	r1, r5
   16024:	f041 0114 	orr.w	r1, r1, #20
   16028:	b2c9      	uxtb	r1, r1
   1602a:	b920      	cbnz	r0, 16036 <handleParameter+0x336>
			*value = readInt(motor, TMC5062_SWMODE(motor));
   1602c:	4628      	mov	r0, r5
   1602e:	f7ff fdb7 	bl	15ba0 <readInt>
   16032:	6030      	str	r0, [r6, #0]
   16034:	e674      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_SWMODE(motor), *value);
   16036:	6832      	ldr	r2, [r6, #0]
   16038:	4628      	mov	r0, r5
   1603a:	f7ff fdcd 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1603e:	2400      	movs	r4, #0
   16040:	e66e      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16042:	2120      	movs	r1, #32
   16044:	40a9      	lsls	r1, r5
   16046:	f041 0104 	orr.w	r1, r1, #4
   1604a:	b2c9      	uxtb	r1, r1
   1604c:	b920      	cbnz	r0, 16058 <handleParameter+0x358>
			*value = readInt(motor, TMC5062_A1(motor));
   1604e:	4628      	mov	r0, r5
   16050:	f7ff fda6 	bl	15ba0 <readInt>
   16054:	6030      	str	r0, [r6, #0]
   16056:	e663      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_A1(motor), *value);
   16058:	6832      	ldr	r2, [r6, #0]
   1605a:	4628      	mov	r0, r5
   1605c:	f7ff fdbc 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16060:	2400      	movs	r4, #0
   16062:	e65d      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16064:	2120      	movs	r1, #32
   16066:	40a9      	lsls	r1, r5
   16068:	f041 0105 	orr.w	r1, r1, #5
   1606c:	b2c9      	uxtb	r1, r1
   1606e:	b920      	cbnz	r0, 1607a <handleParameter+0x37a>
			*value = readInt(motor, TMC5062_V1(motor));
   16070:	4628      	mov	r0, r5
   16072:	f7ff fd95 	bl	15ba0 <readInt>
   16076:	6030      	str	r0, [r6, #0]
   16078:	e652      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_V1(motor), *value);
   1607a:	6832      	ldr	r2, [r6, #0]
   1607c:	4628      	mov	r0, r5
   1607e:	f7ff fdab 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16082:	2400      	movs	r4, #0
   16084:	e64c      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16086:	2120      	movs	r1, #32
   16088:	40a9      	lsls	r1, r5
   1608a:	f041 0108 	orr.w	r1, r1, #8
   1608e:	b2c9      	uxtb	r1, r1
   16090:	b920      	cbnz	r0, 1609c <handleParameter+0x39c>
			*value = readInt(motor, TMC5062_DMAX(motor));
   16092:	4628      	mov	r0, r5
   16094:	f7ff fd84 	bl	15ba0 <readInt>
   16098:	6030      	str	r0, [r6, #0]
   1609a:	e641      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_DMAX(motor), *value);
   1609c:	6832      	ldr	r2, [r6, #0]
   1609e:	4628      	mov	r0, r5
   160a0:	f7ff fd9a 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   160a4:	2400      	movs	r4, #0
   160a6:	e63b      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   160a8:	2120      	movs	r1, #32
   160aa:	40a9      	lsls	r1, r5
   160ac:	f041 010a 	orr.w	r1, r1, #10
   160b0:	b2c9      	uxtb	r1, r1
   160b2:	b920      	cbnz	r0, 160be <handleParameter+0x3be>
			*value = readInt(motor, TMC5062_D1(motor));
   160b4:	4628      	mov	r0, r5
   160b6:	f7ff fd73 	bl	15ba0 <readInt>
   160ba:	6030      	str	r0, [r6, #0]
   160bc:	e630      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_D1(motor), *value);
   160be:	6832      	ldr	r2, [r6, #0]
   160c0:	4628      	mov	r0, r5
   160c2:	f7ff fd89 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   160c6:	2400      	movs	r4, #0
   160c8:	e62a      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   160ca:	2120      	movs	r1, #32
   160cc:	40a9      	lsls	r1, r5
   160ce:	f041 0103 	orr.w	r1, r1, #3
   160d2:	b2c9      	uxtb	r1, r1
   160d4:	b920      	cbnz	r0, 160e0 <handleParameter+0x3e0>
			*value = readInt(motor, TMC5062_VSTART(motor));
   160d6:	4628      	mov	r0, r5
   160d8:	f7ff fd62 	bl	15ba0 <readInt>
   160dc:	6030      	str	r0, [r6, #0]
   160de:	e61f      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VSTART(motor), *value);
   160e0:	6832      	ldr	r2, [r6, #0]
   160e2:	4628      	mov	r0, r5
   160e4:	f7ff fd78 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   160e8:	2400      	movs	r4, #0
   160ea:	e619      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   160ec:	2120      	movs	r1, #32
   160ee:	40a9      	lsls	r1, r5
   160f0:	f041 010b 	orr.w	r1, r1, #11
   160f4:	b2c9      	uxtb	r1, r1
   160f6:	b920      	cbnz	r0, 16102 <handleParameter+0x402>
			*value = readInt(motor, TMC5062_VSTOP(motor));
   160f8:	4628      	mov	r0, r5
   160fa:	f7ff fd51 	bl	15ba0 <readInt>
   160fe:	6030      	str	r0, [r6, #0]
   16100:	e60e      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VSTOP(motor), *value);
   16102:	6832      	ldr	r2, [r6, #0]
   16104:	4628      	mov	r0, r5
   16106:	f7ff fd67 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1610a:	2400      	movs	r4, #0
   1610c:	e608      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1610e:	2120      	movs	r1, #32
   16110:	40a9      	lsls	r1, r5
   16112:	f041 010c 	orr.w	r1, r1, #12
   16116:	b2c9      	uxtb	r1, r1
   16118:	b920      	cbnz	r0, 16124 <handleParameter+0x424>
			*value = readInt(motor, TMC5062_TZEROWAIT(motor));
   1611a:	4628      	mov	r0, r5
   1611c:	f7ff fd40 	bl	15ba0 <readInt>
   16120:	6030      	str	r0, [r6, #0]
   16122:	e5fd      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_TZEROWAIT(motor), *value);
   16124:	6832      	ldr	r2, [r6, #0]
   16126:	4628      	mov	r0, r5
   16128:	f7ff fd56 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1612c:	2400      	movs	r4, #0
   1612e:	e5f7      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16130:	2120      	movs	r1, #32
   16132:	40a9      	lsls	r1, r5
   16134:	f041 0111 	orr.w	r1, r1, #17
   16138:	b2c9      	uxtb	r1, r1
   1613a:	b920      	cbnz	r0, 16146 <handleParameter+0x446>
			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
   1613c:	4628      	mov	r0, r5
   1613e:	f7ff fd2f 	bl	15ba0 <readInt>
   16142:	6030      	str	r0, [r6, #0]
   16144:	e5ec      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VCOOLTHRS(motor), *value);
   16146:	6832      	ldr	r2, [r6, #0]
   16148:	4628      	mov	r0, r5
   1614a:	f7ff fd45 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1614e:	2400      	movs	r4, #0
   16150:	e5e6      	b.n	15d20 <handleParameter+0x20>
   16152:	bf00      	nop
   16154:	1fff3720 	.word	0x1fff3720
		if(readWrite == READ) {
   16158:	2120      	movs	r1, #32
   1615a:	40a9      	lsls	r1, r5
   1615c:	f041 0112 	orr.w	r1, r1, #18
   16160:	b2c9      	uxtb	r1, r1
   16162:	b920      	cbnz	r0, 1616e <handleParameter+0x46e>
			*value = readInt(motor, TMC5062_VHIGH(motor));
   16164:	4628      	mov	r0, r5
   16166:	f7ff fd1b 	bl	15ba0 <readInt>
   1616a:	6030      	str	r0, [r6, #0]
   1616c:	e5d8      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VHIGH(motor), *value);
   1616e:	6832      	ldr	r2, [r6, #0]
   16170:	4628      	mov	r0, r5
   16172:	f7ff fd31 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16176:	2400      	movs	r4, #0
   16178:	e5d2      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1617a:	2120      	movs	r1, #32
   1617c:	40a9      	lsls	r1, r5
   1617e:	f041 0113 	orr.w	r1, r1, #19
   16182:	b2c9      	uxtb	r1, r1
   16184:	b920      	cbnz	r0, 16190 <handleParameter+0x490>
			*value = readInt(motor, TMC5062_VDCMIN(motor));
   16186:	4628      	mov	r0, r5
   16188:	f7ff fd0a 	bl	15ba0 <readInt>
   1618c:	6030      	str	r0, [r6, #0]
   1618e:	e5c7      	b.n	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VDCMIN(motor), *value);
   16190:	6832      	ldr	r2, [r6, #0]
   16192:	4628      	mov	r0, r5
   16194:	f7ff fd20 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16198:	2400      	movs	r4, #0
   1619a:	e5c1      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1619c:	0109      	lsls	r1, r1, #4
   1619e:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   161a2:	b2c9      	uxtb	r1, r1
   161a4:	b938      	cbnz	r0, 161b6 <handleParameter+0x4b6>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT);
   161a6:	2312      	movs	r3, #18
   161a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   161ac:	4628      	mov	r0, r5
   161ae:	f7ff fd06 	bl	15bbe <readField>
   161b2:	6030      	str	r0, [r6, #0]
   161b4:	e5b4      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VHIGHFS_MASK, TMC5062_VHIGHFS_SHIFT, *value);
   161b6:	6833      	ldr	r3, [r6, #0]
   161b8:	9300      	str	r3, [sp, #0]
   161ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   161be:	2312      	movs	r3, #18
   161c0:	4628      	mov	r0, r5
   161c2:	f7ff fd80 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   161c6:	2400      	movs	r4, #0
   161c8:	e5aa      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   161ca:	2800      	cmp	r0, #0
   161cc:	f040 831c 	bne.w	16808 <handleParameter+0xb08>
			*value = TMC5062.velocity[motor];
   161d0:	49b3      	ldr	r1, [pc, #716]	; (164a0 <handleParameter+0x7a0>)
   161d2:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   161d6:	69eb      	ldr	r3, [r5, #28]
   161d8:	6033      	str	r3, [r6, #0]
   161da:	e5a1      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   161dc:	b97c      	cbnz	r4, 161fe <handleParameter+0x4fe>
			*value = 256 >> readField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT);
   161de:	0129      	lsls	r1, r5, #4
   161e0:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   161e4:	2318      	movs	r3, #24
   161e6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
   161ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   161ee:	4628      	mov	r0, r5
   161f0:	f7ff fce5 	bl	15bbe <readField>
   161f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   161f8:	4103      	asrs	r3, r0
   161fa:	6033      	str	r3, [r6, #0]
   161fc:	e590      	b.n	15d20 <handleParameter+0x20>
			switch(*value)
   161fe:	6833      	ldr	r3, [r6, #0]
   16200:	2b10      	cmp	r3, #16
   16202:	d034      	beq.n	1626e <handleParameter+0x56e>
   16204:	dc0a      	bgt.n	1621c <handleParameter+0x51c>
   16206:	3b01      	subs	r3, #1
   16208:	2b07      	cmp	r3, #7
   1620a:	d80e      	bhi.n	1622a <handleParameter+0x52a>
   1620c:	2b07      	cmp	r3, #7
   1620e:	d80c      	bhi.n	1622a <handleParameter+0x52a>
   16210:	e8df f003 	tbb	[pc, r3]
   16214:	290b2713 	.word	0x290b2713
   16218:	2b0b0b0b 	.word	0x2b0b0b0b
   1621c:	2b80      	cmp	r3, #128	; 0x80
   1621e:	d02c      	beq.n	1627a <handleParameter+0x57a>
   16220:	dc06      	bgt.n	16230 <handleParameter+0x530>
   16222:	2b20      	cmp	r3, #32
   16224:	d025      	beq.n	16272 <handleParameter+0x572>
   16226:	2b40      	cmp	r3, #64	; 0x40
   16228:	d025      	beq.n	16276 <handleParameter+0x576>
			default:   *value = -1;  break;
   1622a:	f04f 33ff 	mov.w	r3, #4294967295
   1622e:	e005      	b.n	1623c <handleParameter+0x53c>
   16230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16234:	d1f9      	bne.n	1622a <handleParameter+0x52a>
			case 256:  *value = 0;   break;
   16236:	2300      	movs	r3, #0
   16238:	e000      	b.n	1623c <handleParameter+0x53c>
			case 1:    *value = 8;   break;
   1623a:	2308      	movs	r3, #8
			default:   *value = -1;  break;
   1623c:	6033      	str	r3, [r6, #0]
			if(*value != -1)
   1623e:	6833      	ldr	r3, [r6, #0]
   16240:	1c5c      	adds	r4, r3, #1
   16242:	f43f ae43 	beq.w	15ecc <handleParameter+0x1cc>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_MRES_MASK, TMC5062_MRES_SHIFT, *value);
   16246:	0129      	lsls	r1, r5, #4
   16248:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   1624c:	9300      	str	r3, [sp, #0]
   1624e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
   16252:	2318      	movs	r3, #24
   16254:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   16258:	4628      	mov	r0, r5
   1625a:	f7ff fd34 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   1625e:	2400      	movs	r4, #0
   16260:	e55e      	b.n	15d20 <handleParameter+0x20>
			case 2:    *value = 7;   break;
   16262:	2307      	movs	r3, #7
   16264:	e7ea      	b.n	1623c <handleParameter+0x53c>
			case 4:    *value = 6;   break;
   16266:	2306      	movs	r3, #6
   16268:	e7e8      	b.n	1623c <handleParameter+0x53c>
			case 8:    *value = 5;   break;
   1626a:	2305      	movs	r3, #5
   1626c:	e7e6      	b.n	1623c <handleParameter+0x53c>
			case 16:   *value = 4;   break;
   1626e:	2304      	movs	r3, #4
   16270:	e7e4      	b.n	1623c <handleParameter+0x53c>
			case 32:   *value = 3;   break;
   16272:	2303      	movs	r3, #3
   16274:	e7e2      	b.n	1623c <handleParameter+0x53c>
			case 64:   *value = 2;   break;
   16276:	2302      	movs	r3, #2
   16278:	e7e0      	b.n	1623c <handleParameter+0x53c>
			case 128:  *value = 1;   break;
   1627a:	2301      	movs	r3, #1
   1627c:	e7de      	b.n	1623c <handleParameter+0x53c>
		if(readWrite == READ) {
   1627e:	0129      	lsls	r1, r5, #4
   16280:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   16284:	b2c9      	uxtb	r1, r1
   16286:	b93c      	cbnz	r4, 16298 <handleParameter+0x598>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT);
   16288:	230f      	movs	r3, #15
   1628a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   1628e:	4628      	mov	r0, r5
   16290:	f7ff fc95 	bl	15bbe <readField>
   16294:	6030      	str	r0, [r6, #0]
   16296:	e543      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TBL_MASK, TMC5062_TBL_SHIFT, *value);
   16298:	6833      	ldr	r3, [r6, #0]
   1629a:	9300      	str	r3, [sp, #0]
   1629c:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   162a0:	230f      	movs	r3, #15
   162a2:	4628      	mov	r0, r5
   162a4:	f7ff fd0f 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   162a8:	2400      	movs	r4, #0
   162aa:	e539      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   162ac:	0129      	lsls	r1, r5, #4
   162ae:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   162b2:	b2c9      	uxtb	r1, r1
   162b4:	b93c      	cbnz	r4, 162c6 <handleParameter+0x5c6>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT);
   162b6:	230e      	movs	r3, #14
   162b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   162bc:	4628      	mov	r0, r5
   162be:	f7ff fc7e 	bl	15bbe <readField>
   162c2:	6030      	str	r0, [r6, #0]
   162c4:	e52c      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT, *value);
   162c6:	6833      	ldr	r3, [r6, #0]
   162c8:	9300      	str	r3, [sp, #0]
   162ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   162ce:	230e      	movs	r3, #14
   162d0:	4628      	mov	r0, r5
   162d2:	f7ff fcf8 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   162d6:	2400      	movs	r4, #0
   162d8:	e522      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   162da:	0129      	lsls	r1, r5, #4
   162dc:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   162e0:	b2c9      	uxtb	r1, r1
   162e2:	b93c      	cbnz	r4, 162f4 <handleParameter+0x5f4>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT);
   162e4:	230c      	movs	r3, #12
   162e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   162ea:	4628      	mov	r0, r5
   162ec:	f7ff fc67 	bl	15bbe <readField>
   162f0:	6030      	str	r0, [r6, #0]
   162f2:	e515      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_DISFDCC_MASK, TMC5062_DISFDCC_SHIFT, *value);
   162f4:	6833      	ldr	r3, [r6, #0]
   162f6:	9300      	str	r3, [sp, #0]
   162f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   162fc:	230c      	movs	r3, #12
   162fe:	4628      	mov	r0, r5
   16300:	f7ff fce1 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16304:	2400      	movs	r4, #0
   16306:	e50b      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16308:	012f      	lsls	r7, r5, #4
   1630a:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   1630e:	b2ff      	uxtb	r7, r7
   16310:	bb34      	cbnz	r4, 16360 <handleParameter+0x660>
			if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_CHM_MASK, TMC5062_CHM_SHIFT))
   16312:	230e      	movs	r3, #14
   16314:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   16318:	4639      	mov	r1, r7
   1631a:	4628      	mov	r0, r5
   1631c:	f7ff fc4f 	bl	15bbe <readField>
   16320:	b140      	cbz	r0, 16334 <handleParameter+0x634>
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_HEND_MASK, TMC5062_HEND_SHIFT);
   16322:	2307      	movs	r3, #7
   16324:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   16328:	4639      	mov	r1, r7
   1632a:	4628      	mov	r0, r5
   1632c:	f7ff fc47 	bl	15bbe <readField>
   16330:	6030      	str	r0, [r6, #0]
   16332:	e4f5      	b.n	15d20 <handleParameter+0x20>
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT);
   16334:	2304      	movs	r3, #4
   16336:	2270      	movs	r2, #112	; 0x70
   16338:	4639      	mov	r1, r7
   1633a:	4628      	mov	r0, r5
   1633c:	f7ff fc3f 	bl	15bbe <readField>
				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
   16340:	230b      	movs	r3, #11
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT);
   16342:	6030      	str	r0, [r6, #0]
				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
   16344:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16348:	4639      	mov	r1, r7
   1634a:	4628      	mov	r0, r5
   1634c:	f7ff fc37 	bl	15bbe <readField>
   16350:	2800      	cmp	r0, #0
   16352:	f43f adbb 	beq.w	15ecc <handleParameter+0x1cc>
					*value |= 1<<3; // MSB wird zu value hinzugefügt
   16356:	6833      	ldr	r3, [r6, #0]
   16358:	f043 0308 	orr.w	r3, r3, #8
   1635c:	6033      	str	r3, [r6, #0]
   1635e:	e4df      	b.n	15d20 <handleParameter+0x20>
			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
   16360:	4639      	mov	r1, r7
   16362:	4628      	mov	r0, r5
   16364:	f7ff fc1c 	bl	15ba0 <readInt>
   16368:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
   1636c:	6833      	ldr	r3, [r6, #0]
   1636e:	d009      	beq.n	16384 <handleParameter+0x684>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_HEND_MASK, TMC5062_HEND_SHIFT, *value);
   16370:	9300      	str	r3, [sp, #0]
   16372:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   16376:	2307      	movs	r3, #7
   16378:	4639      	mov	r1, r7
   1637a:	4628      	mov	r0, r5
   1637c:	f7ff fca3 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16380:	2400      	movs	r4, #0
   16382:	e4cd      	b.n	15d20 <handleParameter+0x20>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT, (*value & 1<<3)? 1:0);
   16384:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   16388:	9300      	str	r3, [sp, #0]
   1638a:	4639      	mov	r1, r7
   1638c:	4628      	mov	r0, r5
   1638e:	230b      	movs	r3, #11
   16390:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16394:	f7ff fc97 	bl	15cc6 <writeField>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_ALL_MASK, TMC5062_TFD_ALL_SHIFT, *value);
   16398:	6833      	ldr	r3, [r6, #0]
   1639a:	9300      	str	r3, [sp, #0]
   1639c:	2270      	movs	r2, #112	; 0x70
   1639e:	2304      	movs	r3, #4
   163a0:	4639      	mov	r1, r7
   163a2:	4628      	mov	r0, r5
   163a4:	f7ff fc8f 	bl	15cc6 <writeField>
   163a8:	e4ba      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   163aa:	012f      	lsls	r7, r5, #4
   163ac:	f047 076c 	orr.w	r7, r7, #108	; 0x6c
   163b0:	b2ff      	uxtb	r7, r7
			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
   163b2:	4639      	mov	r1, r7
   163b4:	4628      	mov	r0, r5
		if(readWrite == READ) {
   163b6:	bb14      	cbnz	r4, 163fe <handleParameter+0x6fe>
			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
   163b8:	f7ff fbf2 	bl	15ba0 <readInt>
   163bc:	0440      	lsls	r0, r0, #17
   163be:	d507      	bpl.n	163d0 <handleParameter+0x6d0>
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_HSTRT_MASK, TMC5062_HSTRT_SHIFT);
   163c0:	2304      	movs	r3, #4
   163c2:	2270      	movs	r2, #112	; 0x70
   163c4:	4639      	mov	r1, r7
   163c6:	4628      	mov	r0, r5
   163c8:	f7ff fbf9 	bl	15bbe <readField>
   163cc:	6030      	str	r0, [r6, #0]
   163ce:	e4a7      	b.n	15d20 <handleParameter+0x20>
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_OFFSET_MASK, TMC5062_OFFSET_SHIFT);
   163d0:	2307      	movs	r3, #7
   163d2:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   163d6:	4639      	mov	r1, r7
   163d8:	4628      	mov	r0, r5
   163da:	f7ff fbf0 	bl	15bbe <readField>
				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
   163de:	230b      	movs	r3, #11
				*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_OFFSET_MASK, TMC5062_OFFSET_SHIFT);
   163e0:	6030      	str	r0, [r6, #0]
				if(readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TFD_3_MASK, TMC5062_TFD_3_SHIFT))
   163e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   163e6:	4639      	mov	r1, r7
   163e8:	4628      	mov	r0, r5
   163ea:	f7ff fbe8 	bl	15bbe <readField>
   163ee:	2800      	cmp	r0, #0
   163f0:	f43f ad6c 	beq.w	15ecc <handleParameter+0x1cc>
					*value |= 1<<3;
   163f4:	6833      	ldr	r3, [r6, #0]
   163f6:	f043 0308 	orr.w	r3, r3, #8
   163fa:	6033      	str	r3, [r6, #0]
   163fc:	e490      	b.n	15d20 <handleParameter+0x20>
			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
   163fe:	f7ff fbcf 	bl	15ba0 <readInt>
   16402:	6833      	ldr	r3, [r6, #0]
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_HSTRT_MASK, TMC5062_HSTRT_SHIFT, *value);
   16404:	9300      	str	r3, [sp, #0]
			if(readInt(motor, TMC5062_CHOPCONF(motor)) & (1<<14))
   16406:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
   1640a:	d007      	beq.n	1641c <handleParameter+0x71c>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_HSTRT_MASK, TMC5062_HSTRT_SHIFT, *value);
   1640c:	2304      	movs	r3, #4
   1640e:	2270      	movs	r2, #112	; 0x70
   16410:	4639      	mov	r1, r7
   16412:	4628      	mov	r0, r5
   16414:	f7ff fc57 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16418:	2400      	movs	r4, #0
   1641a:	e481      	b.n	15d20 <handleParameter+0x20>
				writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_OFFSET_MASK, TMC5062_OFFSET_SHIFT, *value);
   1641c:	2307      	movs	r3, #7
   1641e:	f44f 62f0 	mov.w	r2, #1920	; 0x780
   16422:	4639      	mov	r1, r7
   16424:	4628      	mov	r0, r5
   16426:	f7ff fc4e 	bl	15cc6 <writeField>
   1642a:	e479      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1642c:	0129      	lsls	r1, r5, #4
   1642e:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   16432:	b2c9      	uxtb	r1, r1
   16434:	b934      	cbnz	r4, 16444 <handleParameter+0x744>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT);
   16436:	4623      	mov	r3, r4
   16438:	220f      	movs	r2, #15
   1643a:	4628      	mov	r0, r5
   1643c:	f7ff fbbf 	bl	15bbe <readField>
   16440:	6030      	str	r0, [r6, #0]
   16442:	e46d      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_TOFF_MASK, TMC5062_TOFF_SHIFT, *value);
   16444:	6833      	ldr	r3, [r6, #0]
   16446:	9300      	str	r3, [sp, #0]
   16448:	220f      	movs	r2, #15
   1644a:	2300      	movs	r3, #0
   1644c:	4628      	mov	r0, r5
   1644e:	f7ff fc3a 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16452:	2400      	movs	r4, #0
   16454:	e464      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16456:	0129      	lsls	r1, r5, #4
   16458:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   1645c:	b2c9      	uxtb	r1, r1
   1645e:	b93c      	cbnz	r4, 16470 <handleParameter+0x770>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT);
   16460:	230f      	movs	r3, #15
   16462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16466:	4628      	mov	r0, r5
   16468:	f7ff fba9 	bl	15bbe <readField>
   1646c:	6030      	str	r0, [r6, #0]
   1646e:	e457      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEIMIN_MASK, TMC5062_SEIMIN_SHIFT, *value);
   16470:	6833      	ldr	r3, [r6, #0]
   16472:	9300      	str	r3, [sp, #0]
   16474:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16478:	230f      	movs	r3, #15
   1647a:	4628      	mov	r0, r5
   1647c:	f7ff fc23 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16480:	2400      	movs	r4, #0
   16482:	e44d      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16484:	0129      	lsls	r1, r5, #4
   16486:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   1648a:	b2c9      	uxtb	r1, r1
   1648c:	b954      	cbnz	r4, 164a4 <handleParameter+0x7a4>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT);
   1648e:	230d      	movs	r3, #13
   16490:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
   16494:	4628      	mov	r0, r5
   16496:	f7ff fb92 	bl	15bbe <readField>
   1649a:	6030      	str	r0, [r6, #0]
   1649c:	e440      	b.n	15d20 <handleParameter+0x20>
   1649e:	bf00      	nop
   164a0:	1fff3720 	.word	0x1fff3720
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEDN_MASK, TMC5062_SEDN_SHIFT, *value);
   164a4:	6833      	ldr	r3, [r6, #0]
   164a6:	9300      	str	r3, [sp, #0]
   164a8:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
   164ac:	230d      	movs	r3, #13
   164ae:	4628      	mov	r0, r5
   164b0:	f7ff fc09 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   164b4:	2400      	movs	r4, #0
   164b6:	e433      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   164b8:	0129      	lsls	r1, r5, #4
   164ba:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   164be:	b2c9      	uxtb	r1, r1
   164c0:	b93c      	cbnz	r4, 164d2 <handleParameter+0x7d2>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT);
   164c2:	2308      	movs	r3, #8
   164c4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
   164c8:	4628      	mov	r0, r5
   164ca:	f7ff fb78 	bl	15bbe <readField>
   164ce:	6030      	str	r0, [r6, #0]
   164d0:	e426      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMAX_MASK, TMC5062_SEMAX_SHIFT, *value);
   164d2:	6833      	ldr	r3, [r6, #0]
   164d4:	9300      	str	r3, [sp, #0]
   164d6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
   164da:	2308      	movs	r3, #8
   164dc:	4628      	mov	r0, r5
   164de:	f7ff fbf2 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   164e2:	2400      	movs	r4, #0
   164e4:	e41c      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   164e6:	0129      	lsls	r1, r5, #4
   164e8:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   164ec:	b2c9      	uxtb	r1, r1
   164ee:	b934      	cbnz	r4, 164fe <handleParameter+0x7fe>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT);
   164f0:	2305      	movs	r3, #5
   164f2:	2260      	movs	r2, #96	; 0x60
   164f4:	4628      	mov	r0, r5
   164f6:	f7ff fb62 	bl	15bbe <readField>
   164fa:	6030      	str	r0, [r6, #0]
   164fc:	e410      	b.n	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEUP_MASK, TMC5062_SEUP_SHIFT, *value);
   164fe:	6833      	ldr	r3, [r6, #0]
   16500:	9300      	str	r3, [sp, #0]
   16502:	2260      	movs	r2, #96	; 0x60
   16504:	2305      	movs	r3, #5
   16506:	4628      	mov	r0, r5
   16508:	f7ff fbdd 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   1650c:	2400      	movs	r4, #0
   1650e:	e407      	b.n	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16510:	0129      	lsls	r1, r5, #4
   16512:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   16516:	b2c9      	uxtb	r1, r1
   16518:	b93c      	cbnz	r4, 1652a <handleParameter+0x82a>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT);
   1651a:	4623      	mov	r3, r4
   1651c:	220f      	movs	r2, #15
   1651e:	4628      	mov	r0, r5
   16520:	f7ff fb4d 	bl	15bbe <readField>
   16524:	6030      	str	r0, [r6, #0]
   16526:	f7ff bbfb 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SEMIN_MASK, TMC5062_SEMIN_SHIFT, *value);
   1652a:	6833      	ldr	r3, [r6, #0]
   1652c:	9300      	str	r3, [sp, #0]
   1652e:	220f      	movs	r2, #15
   16530:	2300      	movs	r3, #0
   16532:	4628      	mov	r0, r5
   16534:	f7ff fbc7 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16538:	2400      	movs	r4, #0
   1653a:	f7ff bbf1 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1653e:	0129      	lsls	r1, r5, #4
   16540:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   16544:	b2c9      	uxtb	r1, r1
   16546:	b944      	cbnz	r4, 1655a <handleParameter+0x85a>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT);
   16548:	2318      	movs	r3, #24
   1654a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1654e:	4628      	mov	r0, r5
   16550:	f7ff fb35 	bl	15bbe <readField>
   16554:	6030      	str	r0, [r6, #0]
   16556:	f7ff bbe3 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SFILT_MASK, TMC5062_SFILT_SHIFT, *value);
   1655a:	6833      	ldr	r3, [r6, #0]
   1655c:	9300      	str	r3, [sp, #0]
   1655e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16562:	2318      	movs	r3, #24
   16564:	4628      	mov	r0, r5
   16566:	f7ff fbae 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   1656a:	2400      	movs	r4, #0
   1656c:	f7ff bbd8 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16570:	0129      	lsls	r1, r5, #4
   16572:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
   16576:	b2c9      	uxtb	r1, r1
   16578:	b974      	cbnz	r4, 16598 <handleParameter+0x898>
			*value = readField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT);
   1657a:	2310      	movs	r3, #16
   1657c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
   16580:	4628      	mov	r0, r5
   16582:	f7ff fb1c 	bl	15bbe <readField>
			*value = CAST_Sn_TO_S32(*value, 7);
   16586:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   1658a:	bf18      	it	ne
   1658c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   16590:	4318      	orrs	r0, r3
   16592:	6030      	str	r0, [r6, #0]
   16594:	f7ff bbc4 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_COOLCONF(motor), TMC5062_SGT_MASK, TMC5062_SGT_SHIFT, *value);
   16598:	6833      	ldr	r3, [r6, #0]
   1659a:	9300      	str	r3, [sp, #0]
   1659c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
   165a0:	2310      	movs	r3, #16
   165a2:	4628      	mov	r0, r5
   165a4:	f7ff fb8f 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   165a8:	2400      	movs	r4, #0
   165aa:	f7ff bbb9 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   165ae:	0129      	lsls	r1, r5, #4
   165b0:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   165b4:	b2c9      	uxtb	r1, r1
   165b6:	b944      	cbnz	r4, 165ca <handleParameter+0x8ca>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT);
   165b8:	2311      	movs	r3, #17
   165ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   165be:	4628      	mov	r0, r5
   165c0:	f7ff fafd 	bl	15bbe <readField>
   165c4:	6030      	str	r0, [r6, #0]
   165c6:	f7ff bbab 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_VSENSE_MASK, TMC5062_VSENSE_SHIFT, *value);
   165ca:	6833      	ldr	r3, [r6, #0]
   165cc:	9300      	str	r3, [sp, #0]
   165ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   165d2:	2311      	movs	r3, #17
   165d4:	4628      	mov	r0, r5
   165d6:	f7ff fb76 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   165da:	2400      	movs	r4, #0
   165dc:	f7ff bba0 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   165e0:	2c00      	cmp	r4, #0
   165e2:	f040 8114 	bne.w	1680e <handleParameter+0xb0e>
			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_CS_ACTUAL_MASK, TMC5062_CS_ACTUAL_SHIFT);
   165e6:	0129      	lsls	r1, r5, #4
   165e8:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   165ec:	2310      	movs	r3, #16
   165ee:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
   165f2:	b2c9      	uxtb	r1, r1
   165f4:	4628      	mov	r0, r5
   165f6:	f7ff fae2 	bl	15bbe <readField>
   165fa:	6030      	str	r0, [r6, #0]
   165fc:	f7ff bb90 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16600:	2720      	movs	r7, #32
   16602:	40af      	lsls	r7, r5
   16604:	b27f      	sxtb	r7, r7
   16606:	f047 0814 	orr.w	r8, r7, #20
   1660a:	fa5f f888 	uxtb.w	r8, r8
   1660e:	b97c      	cbnz	r4, 16630 <handleParameter+0x930>
			if( readInt(motor, TMC5062_SWMODE(motor)) & (1<<10))
   16610:	4641      	mov	r1, r8
   16612:	4628      	mov	r0, r5
   16614:	f7ff fac4 	bl	15ba0 <readInt>
   16618:	0541      	lsls	r1, r0, #21
   1661a:	f57f ac57 	bpl.w	15ecc <handleParameter+0x1cc>
				*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
   1661e:	f047 0111 	orr.w	r1, r7, #17
   16622:	b2c9      	uxtb	r1, r1
   16624:	4628      	mov	r0, r5
   16626:	f7ff fabb 	bl	15ba0 <readInt>
   1662a:	6030      	str	r0, [r6, #0]
   1662c:	f7ff bb78 	b.w	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
   16630:	f047 0111 	orr.w	r1, r7, #17
   16634:	6832      	ldr	r2, [r6, #0]
   16636:	b2c9      	uxtb	r1, r1
   16638:	4628      	mov	r0, r5
   1663a:	f7ff facd 	bl	15bd8 <writeInt>
			writeField(motor, TMC5062_SWMODE(motor), TMC5062_SG_STOP_MASK, TMC5062_SG_STOP_SHIFT, (*value)? 1:0);
   1663e:	6833      	ldr	r3, [r6, #0]
   16640:	3b00      	subs	r3, #0
   16642:	bf18      	it	ne
   16644:	2301      	movne	r3, #1
   16646:	9300      	str	r3, [sp, #0]
   16648:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1664c:	230a      	movs	r3, #10
   1664e:	4641      	mov	r1, r8
   16650:	4628      	mov	r0, r5
   16652:	f7ff fb38 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   16656:	2400      	movs	r4, #0
   16658:	f7ff bb62 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1665c:	2120      	movs	r1, #32
   1665e:	40a9      	lsls	r1, r5
   16660:	f041 0111 	orr.w	r1, r1, #17
   16664:	b2c9      	uxtb	r1, r1
   16666:	b92c      	cbnz	r4, 16674 <handleParameter+0x974>
			*value = readInt(motor, TMC5062_VCOOLTHRS(motor));
   16668:	4628      	mov	r0, r5
   1666a:	f7ff fa99 	bl	15ba0 <readInt>
   1666e:	6030      	str	r0, [r6, #0]
   16670:	f7ff bb56 	b.w	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_VCOOLTHRS(motor),*value);
   16674:	6832      	ldr	r2, [r6, #0]
   16676:	4628      	mov	r0, r5
   16678:	f7ff faae 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1667c:	2400      	movs	r4, #0
   1667e:	f7ff bb4f 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16682:	0129      	lsls	r1, r5, #4
   16684:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   16688:	b2c9      	uxtb	r1, r1
   1668a:	b944      	cbnz	r4, 1669e <handleParameter+0x99e>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT);
   1668c:	230d      	movs	r3, #13
   1668e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16692:	4628      	mov	r0, r5
   16694:	f7ff fa93 	bl	15bbe <readField>
   16698:	6030      	str	r0, [r6, #0]
   1669a:	f7ff bb41 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_RNDTF_MASK, TMC5062_RNDTF_SHIFT, *value);
   1669e:	6833      	ldr	r3, [r6, #0]
   166a0:	9300      	str	r3, [sp, #0]
   166a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   166a6:	230d      	movs	r3, #13
   166a8:	4628      	mov	r0, r5
   166aa:	f7ff fb0c 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   166ae:	2400      	movs	r4, #0
   166b0:	f7ff bb36 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   166b4:	0129      	lsls	r1, r5, #4
   166b6:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   166ba:	b2c9      	uxtb	r1, r1
   166bc:	b944      	cbnz	r4, 166d0 <handleParameter+0x9d0>
			*value = readField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT);
   166be:	2314      	movs	r3, #20
   166c0:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   166c4:	4628      	mov	r0, r5
   166c6:	f7ff fa7a 	bl	15bbe <readField>
   166ca:	6030      	str	r0, [r6, #0]
   166cc:	f7ff bb28 	b.w	15d20 <handleParameter+0x20>
			writeField(motor, TMC5062_CHOPCONF(motor), TMC5062_SYNC_MASK, TMC5062_SYNC_SHIFT, *value);
   166d0:	6833      	ldr	r3, [r6, #0]
   166d2:	9300      	str	r3, [sp, #0]
   166d4:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   166d8:	2314      	movs	r3, #20
   166da:	4628      	mov	r0, r5
   166dc:	f7ff faf3 	bl	15cc6 <writeField>
	uint32_t errors = TMC_ERROR_NONE;
   166e0:	2400      	movs	r4, #0
   166e2:	f7ff bb1d 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   166e6:	2c00      	cmp	r4, #0
   166e8:	f040 8094 	bne.w	16814 <handleParameter+0xb14>
			*value = readField(motor, TMC5062_DRVSTATUS(motor), TMC5062_SG_RESULT_MASK, TMC5062_SG_RESULT_SHIFT);
   166ec:	0129      	lsls	r1, r5, #4
   166ee:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   166f2:	4623      	mov	r3, r4
   166f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
   166f8:	b2c9      	uxtb	r1, r1
   166fa:	4628      	mov	r0, r5
   166fc:	f7ff fa5f 	bl	15bbe <readField>
   16700:	6030      	str	r0, [r6, #0]
   16702:	f7ff bb0d 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16706:	2120      	movs	r1, #32
   16708:	40a9      	lsls	r1, r5
   1670a:	f041 0119 	orr.w	r1, r1, #25
   1670e:	b2c9      	uxtb	r1, r1
   16710:	b92c      	cbnz	r4, 1671e <handleParameter+0xa1e>
			*value = readInt(motor, TMC5062_XENC(motor));
   16712:	4628      	mov	r0, r5
   16714:	f7ff fa44 	bl	15ba0 <readInt>
   16718:	6030      	str	r0, [r6, #0]
   1671a:	f7ff bb01 	b.w	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_XENC(motor),*value);
   1671e:	6832      	ldr	r2, [r6, #0]
   16720:	4628      	mov	r0, r5
   16722:	f7ff fa59 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16726:	2400      	movs	r4, #0
   16728:	f7ff bafa 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   1672c:	2120      	movs	r1, #32
   1672e:	40a9      	lsls	r1, r5
   16730:	f041 011a 	orr.w	r1, r1, #26
   16734:	b2c9      	uxtb	r1, r1
   16736:	b92c      	cbnz	r4, 16744 <handleParameter+0xa44>
			*value = readInt(motor, TMC5062_ENC_CONST(motor));
   16738:	4628      	mov	r0, r5
   1673a:	f7ff fa31 	bl	15ba0 <readInt>
   1673e:	6030      	str	r0, [r6, #0]
   16740:	f7ff baee 	b.w	15d20 <handleParameter+0x20>
			writeInt(motor, TMC5062_ENC_CONST(motor),*value);
   16744:	6832      	ldr	r2, [r6, #0]
   16746:	4628      	mov	r0, r5
   16748:	f7ff fa46 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1674c:	2400      	movs	r4, #0
   1674e:	f7ff bae7 	b.w	15d20 <handleParameter+0x20>
		if(readWrite == READ) {
   16752:	b9d4      	cbnz	r4, 1678a <handleParameter+0xa8a>
			switch(motor)
   16754:	2d01      	cmp	r5, #1
				tempValue = readInt(motor, TMC5062_GCONF);
   16756:	4621      	mov	r1, r4
   16758:	d00b      	beq.n	16772 <handleParameter+0xa72>
				tempValue = readInt(motor, TMC5062_GCONF);
   1675a:	4620      	mov	r0, r4
   1675c:	f7ff fa20 	bl	15ba0 <readInt>
				tempValue &= (1<<3) | (1<<4);
   16760:	f000 0018 	and.w	r0, r0, #24
				*value = (tempValue == (1<<4))? 1 : 0;
   16764:	f1a0 0210 	sub.w	r2, r0, #16
   16768:	4250      	negs	r0, r2
   1676a:	4150      	adcs	r0, r2
   1676c:	6030      	str	r0, [r6, #0]
				break;
   1676e:	f7ff bad7 	b.w	15d20 <handleParameter+0x20>
				tempValue = readInt(motor, TMC5062_GCONF);
   16772:	4628      	mov	r0, r5
   16774:	f7ff fa14 	bl	15ba0 <readInt>
				tempValue &= (1<<5) | (1<<6);
   16778:	f000 0060 	and.w	r0, r0, #96	; 0x60
				*value = (tempValue == ((1<<5) | (0<<6)))? 1 : 0;
   1677c:	f1a0 0320 	sub.w	r3, r0, #32
   16780:	4258      	negs	r0, r3
   16782:	4158      	adcs	r0, r3
   16784:	6030      	str	r0, [r6, #0]
				break;
   16786:	f7ff bacb 	b.w	15d20 <handleParameter+0x20>
			switch(motor)
   1678a:	2d01      	cmp	r5, #1
				tempValue = readInt(motor, TMC5062_GCONF);
   1678c:	f04f 0100 	mov.w	r1, #0
   16790:	d012      	beq.n	167b8 <handleParameter+0xab8>
				tempValue = readInt(motor, TMC5062_GCONF);
   16792:	4608      	mov	r0, r1
   16794:	f7ff fa04 	bl	15ba0 <readInt>
				if(*value)
   16798:	6833      	ldr	r3, [r6, #0]
   1679a:	f020 0218 	bic.w	r2, r0, #24
   1679e:	b143      	cbz	r3, 167b2 <handleParameter+0xab2>
					tempValue = (tempValue & ~(1<<3)) | (1<<4);
   167a0:	f042 0210 	orr.w	r2, r2, #16
				writeInt(motor, TMC5062_GCONF, tempValue);
   167a4:	2100      	movs	r1, #0
   167a6:	4608      	mov	r0, r1
   167a8:	f7ff fa16 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   167ac:	2400      	movs	r4, #0
				break;
   167ae:	f7ff bab7 	b.w	15d20 <handleParameter+0x20>
					tempValue = (tempValue | (1<<3)) & ~(1<<4);
   167b2:	f042 0208 	orr.w	r2, r2, #8
   167b6:	e7f5      	b.n	167a4 <handleParameter+0xaa4>
				tempValue = readInt(motor, TMC5062_GCONF);
   167b8:	4628      	mov	r0, r5
   167ba:	f7ff f9f1 	bl	15ba0 <readInt>
				if(*value)
   167be:	6833      	ldr	r3, [r6, #0]
   167c0:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   167c4:	b143      	cbz	r3, 167d8 <handleParameter+0xad8>
					tempValue = (tempValue | (1<<5)) & ~(1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Codemäßig macht es so Sinn, aber die Bits sind in der Dokumentation als reserved markiert (LH) #3
   167c6:	f042 0220 	orr.w	r2, r2, #32
				writeInt(motor, TMC5062_GCONF, tempValue);
   167ca:	2100      	movs	r1, #0
   167cc:	2001      	movs	r0, #1
   167ce:	f7ff fa03 	bl	15bd8 <writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   167d2:	2400      	movs	r4, #0
				break;
   167d4:	f7ff baa4 	b.w	15d20 <handleParameter+0x20>
					tempValue = (tempValue & ~(1<<5)) | (1<<6); //todo: CHECK 3: Sind die Änderungen richtig? Codemäßig macht es so Sinn, aber die Bits sind in der Dokumentation als reserved markiert (LH) #4
   167d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   167dc:	e7f5      	b.n	167ca <handleParameter+0xaca>
		return TMC_ERROR_MOTOR;
   167de:	2408      	movs	r4, #8
   167e0:	f7ff ba9e 	b.w	15d20 <handleParameter+0x20>
	switch(type)
   167e4:	2404      	movs	r4, #4
   167e6:	f7ff ba9b 	b.w	15d20 <handleParameter+0x20>
   167ea:	2404      	movs	r4, #4
   167ec:	f7ff ba98 	b.w	15d20 <handleParameter+0x20>
			errors |= TMC_ERROR_TYPE;
   167f0:	2404      	movs	r4, #4
   167f2:	f7ff ba95 	b.w	15d20 <handleParameter+0x20>
   167f6:	2404      	movs	r4, #4
   167f8:	f7ff ba92 	b.w	15d20 <handleParameter+0x20>
   167fc:	2404      	movs	r4, #4
   167fe:	f7ff ba8f 	b.w	15d20 <handleParameter+0x20>
   16802:	2404      	movs	r4, #4
   16804:	f7ff ba8c 	b.w	15d20 <handleParameter+0x20>
   16808:	2404      	movs	r4, #4
   1680a:	f7ff ba89 	b.w	15d20 <handleParameter+0x20>
   1680e:	2404      	movs	r4, #4
   16810:	f7ff ba86 	b.w	15d20 <handleParameter+0x20>
   16814:	2404      	movs	r4, #4
   16816:	f7ff ba83 	b.w	15d20 <handleParameter+0x20>

0001681a <SAP>:
{
   1681a:	b507      	push	{r0, r1, r2, lr}
   1681c:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   1681e:	ab01      	add	r3, sp, #4
   16820:	4602      	mov	r2, r0
   16822:	2001      	movs	r0, #1
   16824:	f7ff fa6c 	bl	15d00 <handleParameter>
}
   16828:	b003      	add	sp, #12
   1682a:	f85d fb04 	ldr.w	pc, [sp], #4

0001682e <GAP>:
{
   1682e:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   16830:	4602      	mov	r2, r0
   16832:	2000      	movs	r0, #0
   16834:	f7ff ba64 	b.w	15d00 <handleParameter>

00016838 <restore>:
	return tmc5062_reset(&TMC5062);
}

static uint8_t restore()
{
	return tmc5062_restore(&TMC5062);
   16838:	4801      	ldr	r0, [pc, #4]	; (16840 <restore+0x8>)
   1683a:	f00c bf83 	b.w	23744 <tmc5062_restore>
   1683e:	bf00      	nop
   16840:	1fff3720 	.word	0x1fff3720

00016844 <reset>:
{
   16844:	b508      	push	{r3, lr}
		if(readInt(motor, TMC5062_VACTUAL(motor)) != 0)
   16846:	2122      	movs	r1, #34	; 0x22
   16848:	2000      	movs	r0, #0
   1684a:	f7ff f9a9 	bl	15ba0 <readInt>
   1684e:	b948      	cbnz	r0, 16864 <reset+0x20>
   16850:	2142      	movs	r1, #66	; 0x42
   16852:	2001      	movs	r0, #1
   16854:	f7ff f9a4 	bl	15ba0 <readInt>
   16858:	b920      	cbnz	r0, 16864 <reset+0x20>
}
   1685a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tmc5062_reset(&TMC5062);
   1685e:	4802      	ldr	r0, [pc, #8]	; (16868 <reset+0x24>)
   16860:	f00c bf59 	b.w	23716 <tmc5062_reset>
}
   16864:	2000      	movs	r0, #0
   16866:	bd08      	pop	{r3, pc}
   16868:	1fff3720 	.word	0x1fff3720

0001686c <userFunction>:
	switch(type)
   1686c:	2801      	cmp	r0, #1
{
   1686e:	b538      	push	{r3, r4, r5, lr}
   16870:	4614      	mov	r4, r2
	switch(type)
   16872:	d010      	beq.n	16896 <userFunction+0x2a>
   16874:	2802      	cmp	r0, #2
   16876:	d01b      	beq.n	168b0 <userFunction+0x44>
   16878:	bb10      	cbnz	r0, 168c0 <userFunction+0x54>
		if(*value)
   1687a:	4b12      	ldr	r3, [pc, #72]	; (168c4 <userFunction+0x58>)
   1687c:	4a12      	ldr	r2, [pc, #72]	; (168c8 <userFunction+0x5c>)
   1687e:	68db      	ldr	r3, [r3, #12]
   16880:	6824      	ldr	r4, [r4, #0]
   16882:	681b      	ldr	r3, [r3, #0]
   16884:	f8d2 02bc 	ldr.w	r0, [r2, #700]	; 0x2bc
   16888:	b11c      	cbz	r4, 16892 <userFunction+0x26>
			HAL.IOs->config->setHigh(Pins.SWSEL);
   1688a:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->setLow(Pins.SWSEL);
   1688c:	4798      	blx	r3
	uint32_t errors = 0;
   1688e:	2000      	movs	r0, #0
}
   16890:	bd38      	pop	{r3, r4, r5, pc}
			HAL.IOs->config->setLow(Pins.SWSEL);
   16892:	699b      	ldr	r3, [r3, #24]
   16894:	e7fa      	b.n	1688c <userFunction+0x20>
		*value = (HAL.IOs->config->isHigh(Pins.INT_ENCA))? 1 : 0;
   16896:	4b0b      	ldr	r3, [pc, #44]	; (168c4 <userFunction+0x58>)
   16898:	4a0b      	ldr	r2, [pc, #44]	; (168c8 <userFunction+0x5c>)
   1689a:	68db      	ldr	r3, [r3, #12]
   1689c:	f8d2 02b4 	ldr.w	r0, [r2, #692]	; 0x2b4
   168a0:	681b      	ldr	r3, [r3, #0]
   168a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
   168a4:	4798      	blx	r3
   168a6:	3800      	subs	r0, #0
   168a8:	bf18      	it	ne
   168aa:	2001      	movne	r0, #1
   168ac:	6020      	str	r0, [r4, #0]
   168ae:	e7ee      	b.n	1688e <userFunction+0x22>
   168b0:	4b04      	ldr	r3, [pc, #16]	; (168c4 <userFunction+0x58>)
   168b2:	4a05      	ldr	r2, [pc, #20]	; (168c8 <userFunction+0x5c>)
   168b4:	68db      	ldr	r3, [r3, #12]
   168b6:	f8d2 02b8 	ldr.w	r0, [r2, #696]	; 0x2b8
   168ba:	681b      	ldr	r3, [r3, #0]
   168bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   168be:	e7f1      	b.n	168a4 <userFunction+0x38>
	switch(type)
   168c0:	2004      	movs	r0, #4
	return errors;
   168c2:	e7e5      	b.n	16890 <userFunction+0x24>
   168c4:	00029d1c 	.word	0x00029d1c
   168c8:	1fff3720 	.word	0x1fff3720

000168cc <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   168cc:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   168ce:	bf04      	itt	eq
   168d0:	4b0c      	ldreq	r3, [pc, #48]	; (16904 <enableDriver+0x38>)
   168d2:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   168d6:	b938      	cbnz	r0, 168e8 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
   168d8:	4b0b      	ldr	r3, [pc, #44]	; (16908 <enableDriver+0x3c>)
   168da:	68db      	ldr	r3, [r3, #12]
   168dc:	681b      	ldr	r3, [r3, #0]
   168de:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   168e0:	4a0a      	ldr	r2, [pc, #40]	; (1690c <enableDriver+0x40>)
   168e2:	f8d2 02b0 	ldr.w	r0, [r2, #688]	; 0x2b0
   168e6:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   168e8:	2801      	cmp	r0, #1
   168ea:	d109      	bne.n	16900 <enableDriver+0x34>
   168ec:	4b05      	ldr	r3, [pc, #20]	; (16904 <enableDriver+0x38>)
   168ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   168f2:	2b01      	cmp	r3, #1
   168f4:	d104      	bne.n	16900 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   168f6:	4b04      	ldr	r3, [pc, #16]	; (16908 <enableDriver+0x3c>)
   168f8:	68db      	ldr	r3, [r3, #12]
   168fa:	681b      	ldr	r3, [r3, #0]
   168fc:	699b      	ldr	r3, [r3, #24]
   168fe:	e7ef      	b.n	168e0 <enableDriver+0x14>
}
   16900:	4770      	bx	lr
   16902:	bf00      	nop
   16904:	1fff5e88 	.word	0x1fff5e88
   16908:	00029d1c 	.word	0x00029d1c
   1690c:	1fff3720 	.word	0x1fff3720

00016910 <deInit>:
{
   16910:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
   16912:	2000      	movs	r0, #0
   16914:	f7ff ffda 	bl	168cc <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
   16918:	4b13      	ldr	r3, [pc, #76]	; (16968 <deInit+0x58>)
   1691a:	4c14      	ldr	r4, [pc, #80]	; (1696c <deInit+0x5c>)
   1691c:	68dd      	ldr	r5, [r3, #12]
   1691e:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   16922:	682b      	ldr	r3, [r5, #0]
   16924:	689b      	ldr	r3, [r3, #8]
   16926:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INT_ENCA);
   16928:	682b      	ldr	r3, [r5, #0]
   1692a:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   1692e:	689b      	ldr	r3, [r3, #8]
   16930:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.PP_ENCB);
   16932:	682b      	ldr	r3, [r5, #0]
   16934:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   16938:	689b      	ldr	r3, [r3, #8]
   1693a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWION);
   1693c:	682b      	ldr	r3, [r5, #0]
   1693e:	f8d4 02c8 	ldr.w	r0, [r4, #712]	; 0x2c8
   16942:	689b      	ldr	r3, [r3, #8]
   16944:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP1);
   16946:	682b      	ldr	r3, [r5, #0]
   16948:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
   1694c:	689b      	ldr	r3, [r3, #8]
   1694e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP2);
   16950:	682b      	ldr	r3, [r5, #0]
   16952:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
   16956:	689b      	ldr	r3, [r3, #8]
   16958:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWSEL);
   1695a:	682b      	ldr	r3, [r5, #0]
   1695c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
   16960:	689b      	ldr	r3, [r3, #8]
};
   16962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.SWSEL);
   16966:	4718      	bx	r3
   16968:	00029d1c 	.word	0x00029d1c
   1696c:	1fff3720 	.word	0x1fff3720

00016970 <configCallback>:

static void configCallback(TMC5062TypeDef *tmc5062, ConfigState state)
{
	if(state == CONFIG_RESET)
   16970:	2901      	cmp	r1, #1
{
   16972:	b538      	push	{r3, r4, r5, lr}
   16974:	4605      	mov	r5, r0
   16976:	460c      	mov	r4, r1
	if(state == CONFIG_RESET)
   16978:	d10f      	bne.n	1699a <configCallback+0x2a>
	{	// Change hardware-preset registers here
		for(uint8_t motor = 0; motor < TMC5062_MOTORS; motor++)
			tmc5062_writeInt(tmc5062, motor, TMC5062_PWMCONF(motor), 0x000504C8);
   1697a:	4b08      	ldr	r3, [pc, #32]	; (1699c <configCallback+0x2c>)
   1697c:	2210      	movs	r2, #16
   1697e:	2100      	movs	r1, #0
   16980:	f00c fe1c 	bl	235bc <tmc5062_writeInt>
   16984:	4628      	mov	r0, r5
   16986:	4b05      	ldr	r3, [pc, #20]	; (1699c <configCallback+0x2c>)
   16988:	4621      	mov	r1, r4
   1698a:	2218      	movs	r2, #24
   1698c:	f00c fe16 	bl	235bc <tmc5062_writeInt>

		// Fill missing shadow registers (hardware preset registers)
		tmc5062_fillShadowRegisters(&TMC5062);
	}
}
   16990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tmc5062_fillShadowRegisters(&TMC5062);
   16994:	4802      	ldr	r0, [pc, #8]	; (169a0 <configCallback+0x30>)
   16996:	f00c be8b 	b.w	236b0 <tmc5062_fillShadowRegisters>
}
   1699a:	bd38      	pop	{r3, r4, r5, pc}
   1699c:	000504c8 	.word	0x000504c8
   169a0:	1fff3720 	.word	0x1fff3720

000169a4 <tmc5062_readWrite>:
{
   169a4:	4603      	mov	r3, r0
	if(motor >= MOTORS)
   169a6:	2b01      	cmp	r3, #1
{
   169a8:	4608      	mov	r0, r1
   169aa:	4611      	mov	r1, r2
	if(motor >= MOTORS)
   169ac:	d804      	bhi.n	169b8 <tmc5062_readWrite+0x14>
	return TMC5062_SPIChannel->readWrite(data, lastTransfer);
   169ae:	4b03      	ldr	r3, [pc, #12]	; (169bc <tmc5062_readWrite+0x18>)
   169b0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
   169b4:	689b      	ldr	r3, [r3, #8]
   169b6:	4718      	bx	r3
}
   169b8:	2000      	movs	r0, #0
   169ba:	4770      	bx	lr
   169bc:	1fff3720 	.word	0x1fff3720

000169c0 <TMC5062_init>:

void TMC5062_init(void)
{
   169c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TMC5062_config = Evalboards.ch1.config;
   169c4:	4c5f      	ldr	r4, [pc, #380]	; (16b44 <TMC5062_init+0x184>)
   169c6:	4d60      	ldr	r5, [pc, #384]	; (16b48 <TMC5062_init+0x188>)
	tmc5062_init(&TMC5062, TMC5062_config, &tmc5062_defaultRegisterResetState[0], 0, 1, 16000000);
   169c8:	4b60      	ldr	r3, [pc, #384]	; (16b4c <TMC5062_init+0x18c>)
	TMC5062_config = Evalboards.ch1.config;
   169ca:	69a1      	ldr	r1, [r4, #24]
   169cc:	f8c5 12ac 	str.w	r1, [r5, #684]	; 0x2ac
{
   169d0:	b08c      	sub	sp, #48	; 0x30
	tmc5062_init(&TMC5062, TMC5062_config, &tmc5062_defaultRegisterResetState[0], 0, 1, 16000000);
   169d2:	2701      	movs	r7, #1
   169d4:	e9cd 7300 	strd	r7, r3, [sp]
   169d8:	4a5d      	ldr	r2, [pc, #372]	; (16b50 <TMC5062_init+0x190>)
	tmc5062_setCallback(&TMC5062, configCallback);

	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   169da:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 16bb8 <TMC5062_init+0x1f8>
	tmc5062_init(&TMC5062, TMC5062_config, &tmc5062_defaultRegisterResetState[0], 0, 1, 16000000);
   169de:	2300      	movs	r3, #0
   169e0:	4628      	mov	r0, r5
   169e2:	f00c fe3b 	bl	2365c <tmc5062_init>
	tmc5062_setCallback(&TMC5062, configCallback);
   169e6:	495b      	ldr	r1, [pc, #364]	; (16b54 <TMC5062_init+0x194>)
   169e8:	4628      	mov	r0, r5
   169ea:	f00c fe90 	bl	2370e <tmc5062_setCallback>
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   169ee:	f8d8 600c 	ldr.w	r6, [r8, #12]
   169f2:	6873      	ldr	r3, [r6, #4]
	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
   169f4:	f503 7284 	add.w	r2, r3, #264	; 0x108
   169f8:	f8c5 22b4 	str.w	r2, [r5, #692]	; 0x2b4
	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
   169fc:	f503 7294 	add.w	r2, r3, #296	; 0x128
   16a00:	f8c5 22b8 	str.w	r2, [r5, #696]	; 0x2b8
	Pins.SWSEL     = &HAL.IOs->pins->DIO16;
   16a04:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
   16a08:	f8c5 22bc 	str.w	r2, [r5, #700]	; 0x2bc
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   16a0c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   16a10:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   16a14:	f8c5 22c0 	str.w	r2, [r5, #704]	; 0x2c0
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   16a18:	f503 6281 	add.w	r2, r3, #1032	; 0x408
	Pins.SWION     = &HAL.IOs->pins->DIO19;
   16a1c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
   16a20:	f8c5 32c8 	str.w	r3, [r5, #712]	; 0x2c8

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   16a24:	6833      	ldr	r3, [r6, #0]
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   16a26:	f8c5 22c4 	str.w	r2, [r5, #708]	; 0x2c4
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   16a2a:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   16a2c:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   16a30:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SWSEL);
   16a32:	6833      	ldr	r3, [r6, #0]
   16a34:	f8d5 02bc 	ldr.w	r0, [r5, #700]	; 0x2bc
   16a38:	68db      	ldr	r3, [r3, #12]
   16a3a:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.SWSEL);
   16a3c:	6833      	ldr	r3, [r6, #0]
   16a3e:	f8d5 02bc 	ldr.w	r0, [r5, #700]	; 0x2bc
   16a42:	699b      	ldr	r3, [r3, #24]
   16a44:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.INT_ENCA);
   16a46:	6833      	ldr	r3, [r6, #0]
   16a48:	f8d5 02b4 	ldr.w	r0, [r5, #692]	; 0x2b4
   16a4c:	691b      	ldr	r3, [r3, #16]
   16a4e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.PP_ENCB);
   16a50:	6833      	ldr	r3, [r6, #0]
   16a52:	f8d5 02b8 	ldr.w	r0, [r5, #696]	; 0x2b8
   16a56:	691b      	ldr	r3, [r3, #16]
   16a58:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWION);
   16a5a:	6833      	ldr	r3, [r6, #0]
   16a5c:	f8d5 02c8 	ldr.w	r0, [r5, #712]	; 0x2c8
   16a60:	691b      	ldr	r3, [r3, #16]
   16a62:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWIOP1);
   16a64:	6833      	ldr	r3, [r6, #0]
   16a66:	f8d5 02c0 	ldr.w	r0, [r5, #704]	; 0x2c0
   16a6a:	691b      	ldr	r3, [r3, #16]
   16a6c:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWIOP2);
   16a6e:	6833      	ldr	r3, [r6, #0]
   16a70:	f8d5 02c4 	ldr.w	r0, [r5, #708]	; 0x2c4
   16a74:	691b      	ldr	r3, [r3, #16]
   16a76:	4798      	blx	r3

	TMC5062_SPIChannel = &HAL.SPI->ch1;
	TMC5062_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   16a78:	6873      	ldr	r3, [r6, #4]
	TMC5062_SPIChannel = &HAL.SPI->ch1;
   16a7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   16a7e:	f8c5 22cc 	str.w	r2, [r5, #716]	; 0x2cc
	TMC5062_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   16a82:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   16a86:	6053      	str	r3, [r2, #4]

	TMC5062_MicroStepTable microStepTable;
	microStepTable.LUT_0  = 0xAAAAB554;
   16a88:	4b33      	ldr	r3, [pc, #204]	; (16b58 <TMC5062_init+0x198>)
   16a8a:	9302      	str	r3, [sp, #8]
	microStepTable.LUT_1  = 0x4A9554AA;
   16a8c:	f103 239f 	add.w	r3, r3, #2667618048	; 0x9f009f00
   16a90:	f503 036a 	add.w	r3, r3, #15335424	; 0xea0000
   16a94:	3356      	adds	r3, #86	; 0x56
   16a96:	9303      	str	r3, [sp, #12]
	microStepTable.LUT_2  = 0x24492929;
	microStepTable.LUT_3  = 0x10104222;
   16a98:	4a30      	ldr	r2, [pc, #192]	; (16b5c <TMC5062_init+0x19c>)
   16a9a:	4b31      	ldr	r3, [pc, #196]	; (16b60 <TMC5062_init+0x1a0>)
	microStepTable.LUT_4  = 0xFBFFFFFF;
	microStepTable.LUT_5  = 0xB5BB777D;
	microStepTable.LUT_6  = 0x49295556;
	microStepTable.LUT_7  = 0x00404222;

	microStepTable.X1  = 0x80;
   16a9c:	4831      	ldr	r0, [pc, #196]	; (16b64 <TMC5062_init+0x1a4>)
	microStepTable.LUT_3  = 0x10104222;
   16a9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
	microStepTable.LUT_5  = 0xB5BB777D;
   16aa2:	4b31      	ldr	r3, [pc, #196]	; (16b68 <TMC5062_init+0x1a8>)
   16aa4:	f06f 6180 	mvn.w	r1, #67108864	; 0x4000000
   16aa8:	e9cd 1306 	strd	r1, r3, [sp, #24]
	microStepTable.LUT_6  = 0x49295556;
   16aac:	f1a3 43d9 	sub.w	r3, r3, #1820327936	; 0x6c800000
   16ab0:	f5a3 1391 	sub.w	r3, r3, #1187840	; 0x122000
   16ab4:	f2a3 2327 	subw	r3, r3, #551	; 0x227
   16ab8:	9308      	str	r3, [sp, #32]
	microStepTable.X1  = 0x80;
   16aba:	4b2c      	ldr	r3, [pc, #176]	; (16b6c <TMC5062_init+0x1ac>)
	microStepTable.W3  = 1;

	microStepTable.START_SIN    = 0x00;
	microStepTable.START_SIN90  = 0xF7;

	setMicroStepTable(&TMC5062, 0, &microStepTable);
   16abc:	aa02      	add	r2, sp, #8
	microStepTable.X1  = 0x80;
   16abe:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
	setMicroStepTable(&TMC5062, 0, &microStepTable);
   16ac2:	2100      	movs	r1, #0
	microStepTable.START_SIN    = 0x00;
   16ac4:	f44f 4377 	mov.w	r3, #63232	; 0xf700
	setMicroStepTable(&TMC5062, 0, &microStepTable);
   16ac8:	4628      	mov	r0, r5
	microStepTable.START_SIN    = 0x00;
   16aca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	setMicroStepTable(&TMC5062, 0, &microStepTable);
   16ace:	f00c ff79 	bl	239c4 <setMicroStepTable>
	setMicroStepTable(&TMC5062, 1, &microStepTable);
   16ad2:	aa02      	add	r2, sp, #8
   16ad4:	4639      	mov	r1, r7
   16ad6:	4628      	mov	r0, r5
   16ad8:	f00c ff74 	bl	239c4 <setMicroStepTable>

	Evalboards.ch1.config->reset        = reset;
   16adc:	69a3      	ldr	r3, [r4, #24]
   16ade:	4a24      	ldr	r2, [pc, #144]	; (16b70 <TMC5062_init+0x1b0>)
   16ae0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   16ae4:	4a23      	ldr	r2, [pc, #140]	; (16b74 <TMC5062_init+0x1b4>)
	Evalboards.ch1.config->state        = CONFIG_RESET;
   16ae6:	801f      	strh	r7, [r3, #0]
	Evalboards.ch1.config->restore      = restore;
   16ae8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   16aec:	4b22      	ldr	r3, [pc, #136]	; (16b78 <TMC5062_init+0x1b8>)
   16aee:	6263      	str	r3, [r4, #36]	; 0x24
	Evalboards.ch1.right                = right;
   16af0:	4b22      	ldr	r3, [pc, #136]	; (16b7c <TMC5062_init+0x1bc>)
   16af2:	6223      	str	r3, [r4, #32]
	Evalboards.ch1.left                 = left;
   16af4:	4b22      	ldr	r3, [pc, #136]	; (16b80 <TMC5062_init+0x1c0>)
   16af6:	61e3      	str	r3, [r4, #28]
	Evalboards.ch1.stop                 = stop;
   16af8:	4b22      	ldr	r3, [pc, #136]	; (16b84 <TMC5062_init+0x1c4>)
   16afa:	62a3      	str	r3, [r4, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   16afc:	4b22      	ldr	r3, [pc, #136]	; (16b88 <TMC5062_init+0x1c8>)
   16afe:	63e3      	str	r3, [r4, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   16b00:	4b22      	ldr	r3, [pc, #136]	; (16b8c <TMC5062_init+0x1cc>)
   16b02:	63a3      	str	r3, [r4, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   16b04:	4b22      	ldr	r3, [pc, #136]	; (16b90 <TMC5062_init+0x1d0>)
   16b06:	62e3      	str	r3, [r4, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   16b08:	4b22      	ldr	r3, [pc, #136]	; (16b94 <TMC5062_init+0x1d4>)
   16b0a:	6323      	str	r3, [r4, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   16b0c:	4b22      	ldr	r3, [pc, #136]	; (16b98 <TMC5062_init+0x1d8>)
   16b0e:	64e3      	str	r3, [r4, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   16b10:	4b22      	ldr	r3, [pc, #136]	; (16b9c <TMC5062_init+0x1dc>)
   16b12:	64a3      	str	r3, [r4, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   16b14:	4b22      	ldr	r3, [pc, #136]	; (16ba0 <TMC5062_init+0x1e0>)
   16b16:	65a3      	str	r3, [r4, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   16b18:	4b22      	ldr	r3, [pc, #136]	; (16ba4 <TMC5062_init+0x1e4>)
   16b1a:	6563      	str	r3, [r4, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   16b1c:	4b22      	ldr	r3, [pc, #136]	; (16ba8 <TMC5062_init+0x1e8>)
   16b1e:	6523      	str	r3, [r4, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   16b20:	4b22      	ldr	r3, [pc, #136]	; (16bac <TMC5062_init+0x1ec>)
   16b22:	6663      	str	r3, [r4, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   16b24:	4b22      	ldr	r3, [pc, #136]	; (16bb0 <TMC5062_init+0x1f0>)
   16b26:	6623      	str	r3, [r4, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = MOTORS;
   16b28:	2302      	movs	r3, #2
   16b2a:	7523      	strb	r3, [r4, #20]
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   16b2c:	2532      	movs	r5, #50	; 0x32
   16b2e:	23de      	movs	r3, #222	; 0xde
   16b30:	e9c4 3503 	strd	r3, r5, [r4, #12]
	Evalboards.ch1.deInit               = deInit;

	enableDriver(DRIVER_ENABLE);
   16b34:	4638      	mov	r0, r7
	Evalboards.ch1.deInit               = deInit;
   16b36:	4b1f      	ldr	r3, [pc, #124]	; (16bb4 <TMC5062_init+0x1f4>)
   16b38:	65e3      	str	r3, [r4, #92]	; 0x5c
	enableDriver(DRIVER_ENABLE);
   16b3a:	f7ff fec7 	bl	168cc <enableDriver>
};
   16b3e:	b00c      	add	sp, #48	; 0x30
   16b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b44:	1fff5e88 	.word	0x1fff5e88
   16b48:	1fff3720 	.word	0x1fff3720
   16b4c:	00f42400 	.word	0x00f42400
   16b50:	000294f8 	.word	0x000294f8
   16b54:	00016971 	.word	0x00016971
   16b58:	aaaab554 	.word	0xaaaab554
   16b5c:	24492929 	.word	0x24492929
   16b60:	10104222 	.word	0x10104222
   16b64:	00404222 	.word	0x00404222
   16b68:	b5bb777d 	.word	0xb5bb777d
   16b6c:	56ffff80 	.word	0x56ffff80
   16b70:	00016845 	.word	0x00016845
   16b74:	00016839 	.word	0x00016839
   16b78:	00015c63 	.word	0x00015c63
   16b7c:	00015cc5 	.word	0x00015cc5
   16b80:	00015cc1 	.word	0x00015cc1
   16b84:	00015cbd 	.word	0x00015cbd
   16b88:	0001682f 	.word	0x0001682f
   16b8c:	0001681b 	.word	0x0001681b
   16b90:	00015bed 	.word	0x00015bed
   16b94:	00015c41 	.word	0x00015c41
   16b98:	00015be9 	.word	0x00015be9
   16b9c:	00015bb1 	.word	0x00015bb1
   16ba0:	00015b95 	.word	0x00015b95
   16ba4:	0001686d 	.word	0x0001686d
   16ba8:	00015b6d 	.word	0x00015b6d
   16bac:	000168cd 	.word	0x000168cd
   16bb0:	00015b89 	.word	0x00015b89
   16bb4:	00016911 	.word	0x00016911
   16bb8:	00029d1c 	.word	0x00029d1c

00016bbc <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= TMC5072_MOTORS)
   16bbc:	2801      	cmp	r0, #1
		return TMC_ERROR_MOTOR;

	*value = TMC5072.velocity[motor];
   16bbe:	bf9f      	itttt	ls
   16bc0:	4b04      	ldrls	r3, [pc, #16]	; (16bd4 <getMeasuredSpeed+0x18>)
   16bc2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   16bc6:	68c3      	ldrls	r3, [r0, #12]
   16bc8:	600b      	strls	r3, [r1, #0]

	return TMC_ERROR_NONE;
   16bca:	bf94      	ite	ls
   16bcc:	2000      	movls	r0, #0
		return TMC_ERROR_MOTOR;
   16bce:	2008      	movhi	r0, #8
}
   16bd0:	4770      	bx	lr
   16bd2:	bf00      	nop
   16bd4:	1fff39fc 	.word	0x1fff39fc

00016bd8 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   16bd8:	4b01      	ldr	r3, [pc, #4]	; (16be0 <checkErrors+0x8>)
   16bda:	2200      	movs	r2, #0
   16bdc:	609a      	str	r2, [r3, #8]
}
   16bde:	4770      	bx	lr
   16be0:	1fff5e88 	.word	0x1fff5e88

00016be4 <periodicJob>:
{
   16be4:	b538      	push	{r3, r4, r5, lr}
		tmc5072_periodicJob(motorToIC(motor), tick);
   16be6:	4d06      	ldr	r5, [pc, #24]	; (16c00 <periodicJob+0x1c>)
{
   16be8:	4604      	mov	r4, r0
		tmc5072_periodicJob(motorToIC(motor), tick);
   16bea:	4601      	mov	r1, r0
   16bec:	4628      	mov	r0, r5
   16bee:	f00d f885 	bl	23cfc <tmc5072_periodicJob>
   16bf2:	4621      	mov	r1, r4
   16bf4:	4628      	mov	r0, r5
}
   16bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tmc5072_periodicJob(motorToIC(motor), tick);
   16bfa:	f00d b87f 	b.w	23cfc <tmc5072_periodicJob>
   16bfe:	bf00      	nop
   16c00:	1fff39fc 	.word	0x1fff39fc

00016c04 <readRegister>:
{
   16c04:	b510      	push	{r4, lr}
	*value = tmc5072_readInt(motorToIC(motor), address);
   16c06:	4803      	ldr	r0, [pc, #12]	; (16c14 <readRegister+0x10>)
{
   16c08:	4614      	mov	r4, r2
	*value = tmc5072_readInt(motorToIC(motor), address);
   16c0a:	f00d f804 	bl	23c16 <tmc5072_readInt>
   16c0e:	6020      	str	r0, [r4, #0]
}
   16c10:	bd10      	pop	{r4, pc}
   16c12:	bf00      	nop
   16c14:	1fff39fc 	.word	0x1fff39fc

00016c18 <writeRegister>:
	tmc5072_writeInt(motorToIC(motor), address, value);
   16c18:	4801      	ldr	r0, [pc, #4]	; (16c20 <writeRegister+0x8>)
   16c1a:	f00c bfee 	b.w	23bfa <tmc5072_writeInt>
   16c1e:	bf00      	nop
   16c20:	1fff39fc 	.word	0x1fff39fc

00016c24 <handleParameter>:
	if(motor >= TMC5072_MOTORS)
   16c24:	2901      	cmp	r1, #1
{
   16c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c28:	4604      	mov	r4, r0
   16c2a:	461d      	mov	r5, r3
	if(motor >= TMC5072_MOTORS)
   16c2c:	f200 8601 	bhi.w	17832 <handleParameter+0xc0e>
	switch(type)
   16c30:	2a1d      	cmp	r2, #29
   16c32:	d945      	bls.n	16cc0 <handleParameter+0x9c>
   16c34:	2ab8      	cmp	r2, #184	; 0xb8
   16c36:	d866      	bhi.n	16d06 <handleParameter+0xe2>
   16c38:	2a8b      	cmp	r2, #139	; 0x8b
   16c3a:	d80e      	bhi.n	16c5a <handleParameter+0x36>
   16c3c:	2404      	movs	r4, #4
}
   16c3e:	4620      	mov	r0, r4
   16c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c42:	3ace      	subs	r2, #206	; 0xce
   16c44:	2a05      	cmp	r2, #5
   16c46:	f200 85f7 	bhi.w	17838 <handleParameter+0xc14>
   16c4a:	e8df f012 	tbh	[pc, r2, lsl #1]
   16c4e:	0557      	.short	0x0557
   16c50:	05f505f5 	.word	0x05f505f5
   16c54:	057e0566 	.word	0x057e0566
   16c58:	0592      	.short	0x0592
   16c5a:	3a8c      	subs	r2, #140	; 0x8c
   16c5c:	2a2c      	cmp	r2, #44	; 0x2c
   16c5e:	f200 85ee 	bhi.w	1783e <handleParameter+0xc1a>
   16c62:	e8df f012 	tbh	[pc, r2, lsl #1]
   16c66:	028e      	.short	0x028e
   16c68:	05ec05ec 	.word	0x05ec05ec
   16c6c:	05ec05ec 	.word	0x05ec05ec
   16c70:	05ec05ec 	.word	0x05ec05ec
   16c74:	05ec05ec 	.word	0x05ec05ec
   16c78:	05ec05ec 	.word	0x05ec05ec
   16c7c:	05ec05ec 	.word	0x05ec05ec
   16c80:	05ec05ec 	.word	0x05ec05ec
   16c84:	05ec05ec 	.word	0x05ec05ec
   16c88:	05ec05ec 	.word	0x05ec05ec
   16c8c:	05ec05ec 	.word	0x05ec05ec
   16c90:	02e305ec 	.word	0x02e305ec
   16c94:	031d02ff 	.word	0x031d02ff
   16c98:	03810339 	.word	0x03810339
   16c9c:	03df03c4 	.word	0x03df03c4
   16ca0:	041a03fc 	.word	0x041a03fc
   16ca4:	04560438 	.word	0x04560438
   16ca8:	04930473 	.word	0x04930473
   16cac:	05ec05ec 	.word	0x05ec05ec
   16cb0:	05ec05ec 	.word	0x05ec05ec
   16cb4:	04d604b8 	.word	0x04d604b8
   16cb8:	051904e5 	.word	0x051904e5
   16cbc:	052d05ec 	.word	0x052d05ec
   16cc0:	2a1d      	cmp	r2, #29
   16cc2:	f200 85bf 	bhi.w	17844 <handleParameter+0xc20>
   16cc6:	e8df f012 	tbh	[pc, r2, lsl #1]
   16cca:	0025      	.short	0x0025
   16ccc:	00490037 	.word	0x00490037
   16cd0:	0072005e 	.word	0x0072005e
   16cd4:	00a60094 	.word	0x00a60094
   16cd8:	00e100c4 	.word	0x00e100c4
   16cdc:	00f105bd 	.word	0x00f105bd
   16ce0:	01110101 	.word	0x01110101
   16ce4:	016f0140 	.word	0x016f0140
   16ce8:	01950181 	.word	0x01950181
   16cec:	01b901a7 	.word	0x01b901a7
   16cf0:	01dd01cb 	.word	0x01dd01cb
   16cf4:	020101ef 	.word	0x020101ef
   16cf8:	02250213 	.word	0x02250213
   16cfc:	05bd05bd 	.word	0x05bd05bd
   16d00:	023705bd 	.word	0x023705bd
   16d04:	0253      	.short	0x0253
	switch(type)
   16d06:	f102 0332 	add.w	r3, r2, #50	; 0x32
   16d0a:	b2db      	uxtb	r3, r3
   16d0c:	2b05      	cmp	r3, #5
   16d0e:	d998      	bls.n	16c42 <handleParameter+0x1e>
   16d10:	2404      	movs	r4, #4
   16d12:	e794      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16d14:	2320      	movs	r3, #32
   16d16:	fa03 f101 	lsl.w	r1, r3, r1
   16d1a:	f041 010d 	orr.w	r1, r1, #13
   16d1e:	b2c9      	uxtb	r1, r1
   16d20:	b920      	cbnz	r0, 16d2c <handleParameter+0x108>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_XTARGET(motor));
   16d22:	48b3      	ldr	r0, [pc, #716]	; (16ff0 <handleParameter+0x3cc>)
   16d24:	f00c ff77 	bl	23c16 <tmc5072_readInt>
   16d28:	6028      	str	r0, [r5, #0]
   16d2a:	e788      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_XTARGET(motor), *value);
   16d2c:	682a      	ldr	r2, [r5, #0]
   16d2e:	48b0      	ldr	r0, [pc, #704]	; (16ff0 <handleParameter+0x3cc>)
   16d30:	f00c ff63 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16d34:	2400      	movs	r4, #0
   16d36:	e782      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16d38:	2320      	movs	r3, #32
   16d3a:	fa03 f101 	lsl.w	r1, r3, r1
   16d3e:	f041 0101 	orr.w	r1, r1, #1
   16d42:	b2c9      	uxtb	r1, r1
   16d44:	b920      	cbnz	r0, 16d50 <handleParameter+0x12c>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_XACTUAL(motor));
   16d46:	48aa      	ldr	r0, [pc, #680]	; (16ff0 <handleParameter+0x3cc>)
   16d48:	f00c ff65 	bl	23c16 <tmc5072_readInt>
   16d4c:	6028      	str	r0, [r5, #0]
   16d4e:	e776      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_XACTUAL(motor), *value);
   16d50:	682a      	ldr	r2, [r5, #0]
   16d52:	48a7      	ldr	r0, [pc, #668]	; (16ff0 <handleParameter+0x3cc>)
   16d54:	f00c ff51 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16d58:	2400      	movs	r4, #0
   16d5a:	e770      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16d5c:	2320      	movs	r3, #32
   16d5e:	fa03 f101 	lsl.w	r1, r3, r1
   16d62:	f041 0107 	orr.w	r1, r1, #7
   16d66:	b2c9      	uxtb	r1, r1
   16d68:	b920      	cbnz	r0, 16d74 <handleParameter+0x150>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VMAX(motor));
   16d6a:	48a1      	ldr	r0, [pc, #644]	; (16ff0 <handleParameter+0x3cc>)
   16d6c:	f00c ff53 	bl	23c16 <tmc5072_readInt>
   16d70:	6028      	str	r0, [r5, #0]
   16d72:	e764      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VMAX(motor), abs(*value));
   16d74:	682a      	ldr	r2, [r5, #0]
   16d76:	489e      	ldr	r0, [pc, #632]	; (16ff0 <handleParameter+0x3cc>)
   16d78:	2a00      	cmp	r2, #0
   16d7a:	bfb8      	it	lt
   16d7c:	4252      	neglt	r2, r2
   16d7e:	f00c ff3c 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16d82:	2400      	movs	r4, #0
   16d84:	e75b      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16d86:	2800      	cmp	r0, #0
   16d88:	f040 855f 	bne.w	1784a <handleParameter+0xc26>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VACTUAL(motor));
   16d8c:	2320      	movs	r3, #32
   16d8e:	fa03 f101 	lsl.w	r1, r3, r1
   16d92:	f041 0102 	orr.w	r1, r1, #2
   16d96:	4896      	ldr	r0, [pc, #600]	; (16ff0 <handleParameter+0x3cc>)
   16d98:	b2c9      	uxtb	r1, r1
   16d9a:	f00c ff3c 	bl	23c16 <tmc5072_readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   16d9e:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   16da2:	bf18      	it	ne
   16da4:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   16da8:	4318      	orrs	r0, r3
   16daa:	6028      	str	r0, [r5, #0]
   16dac:	e747      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16dae:	4e90      	ldr	r6, [pc, #576]	; (16ff0 <handleParameter+0x3cc>)
   16db0:	008f      	lsls	r7, r1, #2
			*value = vmax_position[motor];
   16db2:	4437      	add	r7, r6
		if(readWrite == READ) {
   16db4:	b918      	cbnz	r0, 16dbe <handleParameter+0x19a>
			*value = vmax_position[motor];
   16db6:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
   16dba:	602b      	str	r3, [r5, #0]
   16dbc:	e73f      	b.n	16c3e <handleParameter+0x1a>
			vmax_position[motor] = abs(*value);
   16dbe:	682b      	ldr	r3, [r5, #0]
			if(tmc5072_readInt(motorToIC(motor), TMC5072_RAMPMODE(motor)) == TMC5072_MODE_POSITION)
   16dc0:	2520      	movs	r5, #32
			vmax_position[motor] = abs(*value);
   16dc2:	2b00      	cmp	r3, #0
			if(tmc5072_readInt(motorToIC(motor), TMC5072_RAMPMODE(motor)) == TMC5072_MODE_POSITION)
   16dc4:	fa05 f501 	lsl.w	r5, r5, r1
			vmax_position[motor] = abs(*value);
   16dc8:	bfb8      	it	lt
   16dca:	425b      	neglt	r3, r3
			if(tmc5072_readInt(motorToIC(motor), TMC5072_RAMPMODE(motor)) == TMC5072_MODE_POSITION)
   16dcc:	b2e9      	uxtb	r1, r5
   16dce:	4630      	mov	r0, r6
			vmax_position[motor] = abs(*value);
   16dd0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
			if(tmc5072_readInt(motorToIC(motor), TMC5072_RAMPMODE(motor)) == TMC5072_MODE_POSITION)
   16dd4:	f00c ff1f 	bl	23c16 <tmc5072_readInt>
   16dd8:	4604      	mov	r4, r0
   16dda:	2800      	cmp	r0, #0
   16ddc:	f040 8538 	bne.w	17850 <handleParameter+0xc2c>
				tmc5072_writeInt(motorToIC(motor), TMC5072_VMAX(motor), vmax_position[motor]);
   16de0:	f045 0107 	orr.w	r1, r5, #7
   16de4:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
   16de8:	b2c9      	uxtb	r1, r1
   16dea:	4630      	mov	r0, r6
   16dec:	f00c ff05 	bl	23bfa <tmc5072_writeInt>
   16df0:	e725      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16df2:	2320      	movs	r3, #32
   16df4:	fa03 f101 	lsl.w	r1, r3, r1
   16df8:	f041 0106 	orr.w	r1, r1, #6
   16dfc:	b2c9      	uxtb	r1, r1
   16dfe:	b920      	cbnz	r0, 16e0a <handleParameter+0x1e6>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_AMAX(motor));
   16e00:	487b      	ldr	r0, [pc, #492]	; (16ff0 <handleParameter+0x3cc>)
   16e02:	f00c ff08 	bl	23c16 <tmc5072_readInt>
   16e06:	6028      	str	r0, [r5, #0]
   16e08:	e719      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_AMAX(motor), *value);
   16e0a:	682a      	ldr	r2, [r5, #0]
   16e0c:	4878      	ldr	r0, [pc, #480]	; (16ff0 <handleParameter+0x3cc>)
   16e0e:	f00c fef4 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16e12:	2400      	movs	r4, #0
   16e14:	e713      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16e16:	2620      	movs	r6, #32
   16e18:	fa06 f101 	lsl.w	r1, r6, r1
   16e1c:	f041 0610 	orr.w	r6, r1, #16
   16e20:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IRUN_MASK, TMC5072_IRUN_SHIFT);
   16e22:	4873      	ldr	r0, [pc, #460]	; (16ff0 <handleParameter+0x3cc>)
   16e24:	4631      	mov	r1, r6
		if(readWrite == READ) {
   16e26:	b92c      	cbnz	r4, 16e34 <handleParameter+0x210>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IRUN_MASK, TMC5072_IRUN_SHIFT);
   16e28:	f00c fef5 	bl	23c16 <tmc5072_readInt>
   16e2c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   16e30:	6028      	str	r0, [r5, #0]
   16e32:	e704      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IRUN_MASK, TMC5072_IRUN_SHIFT, *value);
   16e34:	f00c feef 	bl	23c16 <tmc5072_readInt>
   16e38:	682b      	ldr	r3, [r5, #0]
   16e3a:	021b      	lsls	r3, r3, #8
   16e3c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   16e40:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   16e44:	431a      	orrs	r2, r3
   16e46:	486a      	ldr	r0, [pc, #424]	; (16ff0 <handleParameter+0x3cc>)
   16e48:	4631      	mov	r1, r6
   16e4a:	f00c fed6 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16e4e:	2400      	movs	r4, #0
   16e50:	e6f5      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16e52:	2620      	movs	r6, #32
   16e54:	fa06 f101 	lsl.w	r1, r6, r1
   16e58:	f041 0610 	orr.w	r6, r1, #16
   16e5c:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IHOLD_MASK, TMC5072_IHOLD_SHIFT);
   16e5e:	4864      	ldr	r0, [pc, #400]	; (16ff0 <handleParameter+0x3cc>)
   16e60:	4631      	mov	r1, r6
		if(readWrite == READ) {
   16e62:	b92c      	cbnz	r4, 16e70 <handleParameter+0x24c>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IHOLD_MASK, TMC5072_IHOLD_SHIFT);
   16e64:	f00c fed7 	bl	23c16 <tmc5072_readInt>
   16e68:	f000 001f 	and.w	r0, r0, #31
   16e6c:	6028      	str	r0, [r5, #0]
   16e6e:	e6e6      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_IHOLD_IRUN(motor), TMC5072_IHOLD_MASK, TMC5072_IHOLD_SHIFT, *value);
   16e70:	f00c fed1 	bl	23c16 <tmc5072_readInt>
   16e74:	682a      	ldr	r2, [r5, #0]
   16e76:	f020 001f 	bic.w	r0, r0, #31
   16e7a:	f002 021f 	and.w	r2, r2, #31
   16e7e:	4302      	orrs	r2, r0
   16e80:	4631      	mov	r1, r6
   16e82:	485b      	ldr	r0, [pc, #364]	; (16ff0 <handleParameter+0x3cc>)
   16e84:	f00c feb9 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16e88:	2400      	movs	r4, #0
   16e8a:	e6d8      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16e8c:	2800      	cmp	r0, #0
   16e8e:	f040 84e2 	bne.w	17856 <handleParameter+0xc32>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_RAMPSTAT(motor), TMC5072_POSITION_REACHED_MASK, TMC5072_POSITION_REACHED_SHIFT);
   16e92:	2320      	movs	r3, #32
   16e94:	fa03 f101 	lsl.w	r1, r3, r1
   16e98:	f041 0115 	orr.w	r1, r1, #21
   16e9c:	4854      	ldr	r0, [pc, #336]	; (16ff0 <handleParameter+0x3cc>)
   16e9e:	b2c9      	uxtb	r1, r1
   16ea0:	f00c feb9 	bl	23c16 <tmc5072_readInt>
   16ea4:	f3c0 2040 	ubfx	r0, r0, #9, #1
   16ea8:	6028      	str	r0, [r5, #0]
   16eaa:	e6c8      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16eac:	2800      	cmp	r0, #0
   16eae:	f040 84d5 	bne.w	1785c <handleParameter+0xc38>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_RAMPSTAT(motor), TMC5072_STATUS_STOP_R_MASK, TMC5072_STATUS_STOP_R_SHIFT);
   16eb2:	2320      	movs	r3, #32
   16eb4:	fa03 f101 	lsl.w	r1, r3, r1
   16eb8:	f041 0115 	orr.w	r1, r1, #21
   16ebc:	484c      	ldr	r0, [pc, #304]	; (16ff0 <handleParameter+0x3cc>)
   16ebe:	b2c9      	uxtb	r1, r1
   16ec0:	f00c fea9 	bl	23c16 <tmc5072_readInt>
   16ec4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16ec8:	6028      	str	r0, [r5, #0]
   16eca:	e6b8      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16ecc:	2800      	cmp	r0, #0
   16ece:	f040 84c8 	bne.w	17862 <handleParameter+0xc3e>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_RAMPSTAT(motor), TMC5072_STATUS_STOP_L_MASK, TMC5072_STATUS_STOP_L_SHIFT);
   16ed2:	2320      	movs	r3, #32
   16ed4:	fa03 f101 	lsl.w	r1, r3, r1
   16ed8:	f041 0115 	orr.w	r1, r1, #21
   16edc:	4844      	ldr	r0, [pc, #272]	; (16ff0 <handleParameter+0x3cc>)
   16ede:	b2c9      	uxtb	r1, r1
   16ee0:	f00c fe99 	bl	23c16 <tmc5072_readInt>
   16ee4:	f000 0001 	and.w	r0, r0, #1
   16ee8:	6028      	str	r0, [r5, #0]
   16eea:	e6a8      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16eec:	2620      	movs	r6, #32
   16eee:	fa06 f101 	lsl.w	r1, r6, r1
   16ef2:	f041 0614 	orr.w	r6, r1, #20
   16ef6:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_R_ENABLE_MASK, TMC5072_STOP_R_ENABLE_SHIFT);
   16ef8:	483d      	ldr	r0, [pc, #244]	; (16ff0 <handleParameter+0x3cc>)
   16efa:	4631      	mov	r1, r6
		if(readWrite == READ) {
   16efc:	b92c      	cbnz	r4, 16f0a <handleParameter+0x2e6>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_R_ENABLE_MASK, TMC5072_STOP_R_ENABLE_SHIFT);
   16efe:	f00c fe8a 	bl	23c16 <tmc5072_readInt>
   16f02:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16f06:	6028      	str	r0, [r5, #0]
   16f08:	e699      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_R_ENABLE_MASK, TMC5072_STOP_R_ENABLE_SHIFT, (*value > 0)? 1:0);
   16f0a:	f00c fe84 	bl	23c16 <tmc5072_readInt>
   16f0e:	682b      	ldr	r3, [r5, #0]
   16f10:	2b00      	cmp	r3, #0
   16f12:	bfcc      	ite	gt
   16f14:	2202      	movgt	r2, #2
   16f16:	2200      	movle	r2, #0
   16f18:	f020 0002 	bic.w	r0, r0, #2
   16f1c:	4302      	orrs	r2, r0
   16f1e:	4631      	mov	r1, r6
   16f20:	4833      	ldr	r0, [pc, #204]	; (16ff0 <handleParameter+0x3cc>)
   16f22:	f00c fe6a 	bl	23bfa <tmc5072_writeInt>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_POL_STOP_R_MASK, TMC5072_POL_STOP_R_SHIFT, (*value == 2)? 1:0);
   16f26:	4631      	mov	r1, r6
   16f28:	4831      	ldr	r0, [pc, #196]	; (16ff0 <handleParameter+0x3cc>)
   16f2a:	f00c fe74 	bl	23c16 <tmc5072_readInt>
   16f2e:	682b      	ldr	r3, [r5, #0]
   16f30:	2b02      	cmp	r3, #2
   16f32:	f020 0008 	bic.w	r0, r0, #8
   16f36:	bf0c      	ite	eq
   16f38:	2208      	moveq	r2, #8
   16f3a:	2200      	movne	r2, #0
   16f3c:	4302      	orrs	r2, r0
   16f3e:	4631      	mov	r1, r6
   16f40:	482b      	ldr	r0, [pc, #172]	; (16ff0 <handleParameter+0x3cc>)
   16f42:	f00c fe5a 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16f46:	2400      	movs	r4, #0
   16f48:	e679      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16f4a:	2620      	movs	r6, #32
   16f4c:	fa06 f101 	lsl.w	r1, r6, r1
   16f50:	f041 0614 	orr.w	r6, r1, #20
   16f54:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_L_ENABLE_MASK, TMC5072_STOP_L_ENABLE_SHIFT);
   16f56:	4826      	ldr	r0, [pc, #152]	; (16ff0 <handleParameter+0x3cc>)
   16f58:	4631      	mov	r1, r6
		if(readWrite == READ) {
   16f5a:	b92c      	cbnz	r4, 16f68 <handleParameter+0x344>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_L_ENABLE_MASK, TMC5072_STOP_L_ENABLE_SHIFT);
   16f5c:	f00c fe5b 	bl	23c16 <tmc5072_readInt>
   16f60:	f000 0001 	and.w	r0, r0, #1
   16f64:	6028      	str	r0, [r5, #0]
   16f66:	e66a      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_STOP_L_ENABLE_MASK, TMC5072_STOP_L_ENABLE_SHIFT, (*value > 0)? 1:0);
   16f68:	f00c fe55 	bl	23c16 <tmc5072_readInt>
   16f6c:	682a      	ldr	r2, [r5, #0]
   16f6e:	f020 0001 	bic.w	r0, r0, #1
   16f72:	2a00      	cmp	r2, #0
   16f74:	bfd4      	ite	le
   16f76:	4602      	movle	r2, r0
   16f78:	f040 0201 	orrgt.w	r2, r0, #1
   16f7c:	4631      	mov	r1, r6
   16f7e:	481c      	ldr	r0, [pc, #112]	; (16ff0 <handleParameter+0x3cc>)
   16f80:	f00c fe3b 	bl	23bfa <tmc5072_writeInt>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_POL_STOP_L_MASK, TMC5072_POL_STOP_L_SHIFT, (*value == 2)? 1:0);
   16f84:	4631      	mov	r1, r6
   16f86:	481a      	ldr	r0, [pc, #104]	; (16ff0 <handleParameter+0x3cc>)
   16f88:	f00c fe45 	bl	23c16 <tmc5072_readInt>
   16f8c:	682b      	ldr	r3, [r5, #0]
   16f8e:	2b02      	cmp	r3, #2
   16f90:	f020 0004 	bic.w	r0, r0, #4
   16f94:	bf0c      	ite	eq
   16f96:	2204      	moveq	r2, #4
   16f98:	2200      	movne	r2, #0
   16f9a:	4302      	orrs	r2, r0
   16f9c:	4631      	mov	r1, r6
   16f9e:	4814      	ldr	r0, [pc, #80]	; (16ff0 <handleParameter+0x3cc>)
   16fa0:	f00c fe2b 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16fa4:	2400      	movs	r4, #0
   16fa6:	e64a      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16fa8:	2320      	movs	r3, #32
   16faa:	fa03 f101 	lsl.w	r1, r3, r1
   16fae:	f041 0114 	orr.w	r1, r1, #20
   16fb2:	b2c9      	uxtb	r1, r1
   16fb4:	b920      	cbnz	r0, 16fc0 <handleParameter+0x39c>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_SWMODE(motor));
   16fb6:	480e      	ldr	r0, [pc, #56]	; (16ff0 <handleParameter+0x3cc>)
   16fb8:	f00c fe2d 	bl	23c16 <tmc5072_readInt>
   16fbc:	6028      	str	r0, [r5, #0]
   16fbe:	e63e      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_SWMODE(motor), *value);
   16fc0:	682a      	ldr	r2, [r5, #0]
   16fc2:	480b      	ldr	r0, [pc, #44]	; (16ff0 <handleParameter+0x3cc>)
   16fc4:	f00c fe19 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16fc8:	2400      	movs	r4, #0
   16fca:	e638      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   16fcc:	2320      	movs	r3, #32
   16fce:	fa03 f101 	lsl.w	r1, r3, r1
   16fd2:	f041 0104 	orr.w	r1, r1, #4
   16fd6:	b2c9      	uxtb	r1, r1
   16fd8:	b920      	cbnz	r0, 16fe4 <handleParameter+0x3c0>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_A1(motor));
   16fda:	4805      	ldr	r0, [pc, #20]	; (16ff0 <handleParameter+0x3cc>)
   16fdc:	f00c fe1b 	bl	23c16 <tmc5072_readInt>
   16fe0:	6028      	str	r0, [r5, #0]
   16fe2:	e62c      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_A1(motor), *value);
   16fe4:	682a      	ldr	r2, [r5, #0]
   16fe6:	4802      	ldr	r0, [pc, #8]	; (16ff0 <handleParameter+0x3cc>)
   16fe8:	f00c fe07 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   16fec:	2400      	movs	r4, #0
   16fee:	e626      	b.n	16c3e <handleParameter+0x1a>
   16ff0:	1fff39fc 	.word	0x1fff39fc
		if(readWrite == READ) {
   16ff4:	2320      	movs	r3, #32
   16ff6:	fa03 f101 	lsl.w	r1, r3, r1
   16ffa:	f041 0105 	orr.w	r1, r1, #5
   16ffe:	b2c9      	uxtb	r1, r1
   17000:	b920      	cbnz	r0, 1700c <handleParameter+0x3e8>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_V1(motor));
   17002:	48a6      	ldr	r0, [pc, #664]	; (1729c <handleParameter+0x678>)
   17004:	f00c fe07 	bl	23c16 <tmc5072_readInt>
   17008:	6028      	str	r0, [r5, #0]
   1700a:	e618      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_V1(motor), *value);
   1700c:	682a      	ldr	r2, [r5, #0]
   1700e:	48a3      	ldr	r0, [pc, #652]	; (1729c <handleParameter+0x678>)
   17010:	f00c fdf3 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17014:	2400      	movs	r4, #0
   17016:	e612      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17018:	2320      	movs	r3, #32
   1701a:	fa03 f101 	lsl.w	r1, r3, r1
   1701e:	f041 0108 	orr.w	r1, r1, #8
   17022:	b2c9      	uxtb	r1, r1
   17024:	b920      	cbnz	r0, 17030 <handleParameter+0x40c>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_DMAX(motor));
   17026:	489d      	ldr	r0, [pc, #628]	; (1729c <handleParameter+0x678>)
   17028:	f00c fdf5 	bl	23c16 <tmc5072_readInt>
   1702c:	6028      	str	r0, [r5, #0]
   1702e:	e606      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_DMAX(motor), *value);
   17030:	682a      	ldr	r2, [r5, #0]
   17032:	489a      	ldr	r0, [pc, #616]	; (1729c <handleParameter+0x678>)
   17034:	f00c fde1 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17038:	2400      	movs	r4, #0
   1703a:	e600      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1703c:	2320      	movs	r3, #32
   1703e:	fa03 f101 	lsl.w	r1, r3, r1
   17042:	f041 010a 	orr.w	r1, r1, #10
   17046:	b2c9      	uxtb	r1, r1
   17048:	b920      	cbnz	r0, 17054 <handleParameter+0x430>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_D1(motor));
   1704a:	4894      	ldr	r0, [pc, #592]	; (1729c <handleParameter+0x678>)
   1704c:	f00c fde3 	bl	23c16 <tmc5072_readInt>
   17050:	6028      	str	r0, [r5, #0]
   17052:	e5f4      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_D1(motor), *value);
   17054:	682a      	ldr	r2, [r5, #0]
   17056:	4891      	ldr	r0, [pc, #580]	; (1729c <handleParameter+0x678>)
   17058:	f00c fdcf 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1705c:	2400      	movs	r4, #0
   1705e:	e5ee      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17060:	2320      	movs	r3, #32
   17062:	fa03 f101 	lsl.w	r1, r3, r1
   17066:	f041 0103 	orr.w	r1, r1, #3
   1706a:	b2c9      	uxtb	r1, r1
   1706c:	b920      	cbnz	r0, 17078 <handleParameter+0x454>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VSTART(motor));
   1706e:	488b      	ldr	r0, [pc, #556]	; (1729c <handleParameter+0x678>)
   17070:	f00c fdd1 	bl	23c16 <tmc5072_readInt>
   17074:	6028      	str	r0, [r5, #0]
   17076:	e5e2      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VSTART(motor), *value);
   17078:	682a      	ldr	r2, [r5, #0]
   1707a:	4888      	ldr	r0, [pc, #544]	; (1729c <handleParameter+0x678>)
   1707c:	f00c fdbd 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17080:	2400      	movs	r4, #0
   17082:	e5dc      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17084:	2320      	movs	r3, #32
   17086:	fa03 f101 	lsl.w	r1, r3, r1
   1708a:	f041 010b 	orr.w	r1, r1, #11
   1708e:	b2c9      	uxtb	r1, r1
   17090:	b920      	cbnz	r0, 1709c <handleParameter+0x478>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VSTOP(motor));
   17092:	4882      	ldr	r0, [pc, #520]	; (1729c <handleParameter+0x678>)
   17094:	f00c fdbf 	bl	23c16 <tmc5072_readInt>
   17098:	6028      	str	r0, [r5, #0]
   1709a:	e5d0      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VSTOP(motor), *value);
   1709c:	682a      	ldr	r2, [r5, #0]
   1709e:	487f      	ldr	r0, [pc, #508]	; (1729c <handleParameter+0x678>)
   170a0:	f00c fdab 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   170a4:	2400      	movs	r4, #0
   170a6:	e5ca      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   170a8:	2320      	movs	r3, #32
   170aa:	fa03 f101 	lsl.w	r1, r3, r1
   170ae:	f041 010c 	orr.w	r1, r1, #12
   170b2:	b2c9      	uxtb	r1, r1
   170b4:	b920      	cbnz	r0, 170c0 <handleParameter+0x49c>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_TZEROWAIT(motor));
   170b6:	4879      	ldr	r0, [pc, #484]	; (1729c <handleParameter+0x678>)
   170b8:	f00c fdad 	bl	23c16 <tmc5072_readInt>
   170bc:	6028      	str	r0, [r5, #0]
   170be:	e5be      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_TZEROWAIT(motor), *value);
   170c0:	682a      	ldr	r2, [r5, #0]
   170c2:	4876      	ldr	r0, [pc, #472]	; (1729c <handleParameter+0x678>)
   170c4:	f00c fd99 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   170c8:	2400      	movs	r4, #0
   170ca:	e5b8      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   170cc:	2320      	movs	r3, #32
   170ce:	fa03 f101 	lsl.w	r1, r3, r1
   170d2:	f041 0111 	orr.w	r1, r1, #17
   170d6:	b2c9      	uxtb	r1, r1
   170d8:	b920      	cbnz	r0, 170e4 <handleParameter+0x4c0>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor));
   170da:	4870      	ldr	r0, [pc, #448]	; (1729c <handleParameter+0x678>)
   170dc:	f00c fd9b 	bl	23c16 <tmc5072_readInt>
   170e0:	6028      	str	r0, [r5, #0]
   170e2:	e5ac      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor), *value);
   170e4:	682a      	ldr	r2, [r5, #0]
   170e6:	486d      	ldr	r0, [pc, #436]	; (1729c <handleParameter+0x678>)
   170e8:	f00c fd87 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   170ec:	2400      	movs	r4, #0
   170ee:	e5a6      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   170f0:	2320      	movs	r3, #32
   170f2:	fa03 f101 	lsl.w	r1, r3, r1
   170f6:	f041 0112 	orr.w	r1, r1, #18
   170fa:	b2c9      	uxtb	r1, r1
   170fc:	b920      	cbnz	r0, 17108 <handleParameter+0x4e4>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VHIGH(motor));
   170fe:	4867      	ldr	r0, [pc, #412]	; (1729c <handleParameter+0x678>)
   17100:	f00c fd89 	bl	23c16 <tmc5072_readInt>
   17104:	6028      	str	r0, [r5, #0]
   17106:	e59a      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VHIGH(motor), *value);
   17108:	682a      	ldr	r2, [r5, #0]
   1710a:	4864      	ldr	r0, [pc, #400]	; (1729c <handleParameter+0x678>)
   1710c:	f00c fd75 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17110:	2400      	movs	r4, #0
   17112:	e594      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17114:	2320      	movs	r3, #32
   17116:	fa03 f101 	lsl.w	r1, r3, r1
   1711a:	f041 0113 	orr.w	r1, r1, #19
   1711e:	b2c9      	uxtb	r1, r1
   17120:	b920      	cbnz	r0, 1712c <handleParameter+0x508>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VDCMIN(motor));
   17122:	485e      	ldr	r0, [pc, #376]	; (1729c <handleParameter+0x678>)
   17124:	f00c fd77 	bl	23c16 <tmc5072_readInt>
   17128:	6028      	str	r0, [r5, #0]
   1712a:	e588      	b.n	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VDCMIN(motor), *value);
   1712c:	682a      	ldr	r2, [r5, #0]
   1712e:	485b      	ldr	r0, [pc, #364]	; (1729c <handleParameter+0x678>)
   17130:	f00c fd63 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17134:	2400      	movs	r4, #0
   17136:	e582      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17138:	0109      	lsls	r1, r1, #4
   1713a:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   1713e:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VHIGHFS_MASK, TMC5072_VHIGHFS_SHIFT);
   17140:	4856      	ldr	r0, [pc, #344]	; (1729c <handleParameter+0x678>)
   17142:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17144:	b92c      	cbnz	r4, 17152 <handleParameter+0x52e>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VHIGHFS_MASK, TMC5072_VHIGHFS_SHIFT);
   17146:	f00c fd66 	bl	23c16 <tmc5072_readInt>
   1714a:	f3c0 4080 	ubfx	r0, r0, #18, #1
   1714e:	6028      	str	r0, [r5, #0]
   17150:	e575      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VHIGHFS_MASK, TMC5072_VHIGHFS_SHIFT, *value);
   17152:	f00c fd60 	bl	23c16 <tmc5072_readInt>
   17156:	682b      	ldr	r3, [r5, #0]
   17158:	049b      	lsls	r3, r3, #18
   1715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   1715e:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   17162:	431a      	orrs	r2, r3
   17164:	484d      	ldr	r0, [pc, #308]	; (1729c <handleParameter+0x678>)
   17166:	4631      	mov	r1, r6
   17168:	f00c fd47 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1716c:	2400      	movs	r4, #0
   1716e:	e566      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17170:	2800      	cmp	r0, #0
   17172:	f040 8379 	bne.w	17868 <handleParameter+0xc44>
			*value = motorToIC(motor)->velocity[motor];
   17176:	4b49      	ldr	r3, [pc, #292]	; (1729c <handleParameter+0x678>)
   17178:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1717c:	68cb      	ldr	r3, [r1, #12]
   1717e:	602b      	str	r3, [r5, #0]
   17180:	e55d      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17182:	b974      	cbnz	r4, 171a2 <handleParameter+0x57e>
			*value = 256 >> TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TOFF_MASK, TMC5072_TOFF_SHIFT);
   17184:	0109      	lsls	r1, r1, #4
   17186:	f041 016c 	orr.w	r1, r1, #108	; 0x6c
   1718a:	4844      	ldr	r0, [pc, #272]	; (1729c <handleParameter+0x678>)
   1718c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17190:	f00c fd41 	bl	23c16 <tmc5072_readInt>
   17194:	f000 030f 	and.w	r3, r0, #15
   17198:	f44f 7080 	mov.w	r0, #256	; 0x100
   1719c:	4118      	asrs	r0, r3
   1719e:	6028      	str	r0, [r5, #0]
   171a0:	e54d      	b.n	16c3e <handleParameter+0x1a>
			switch(*value)
   171a2:	682b      	ldr	r3, [r5, #0]
   171a4:	2b10      	cmp	r3, #16
   171a6:	d039      	beq.n	1721c <handleParameter+0x5f8>
   171a8:	dc0a      	bgt.n	171c0 <handleParameter+0x59c>
   171aa:	3b01      	subs	r3, #1
   171ac:	2b07      	cmp	r3, #7
   171ae:	d80e      	bhi.n	171ce <handleParameter+0x5aa>
   171b0:	2b07      	cmp	r3, #7
   171b2:	d80c      	bhi.n	171ce <handleParameter+0x5aa>
   171b4:	e8df f003 	tbb	[pc, r3]
   171b8:	2e0b2c15 	.word	0x2e0b2c15
   171bc:	300b0b0b 	.word	0x300b0b0b
   171c0:	2b80      	cmp	r3, #128	; 0x80
   171c2:	d031      	beq.n	17228 <handleParameter+0x604>
   171c4:	dc08      	bgt.n	171d8 <handleParameter+0x5b4>
   171c6:	2b20      	cmp	r3, #32
   171c8:	d02a      	beq.n	17220 <handleParameter+0x5fc>
   171ca:	2b40      	cmp	r3, #64	; 0x40
   171cc:	d02a      	beq.n	17224 <handleParameter+0x600>
			default:   *value = -1;  break;
   171ce:	f04f 33ff 	mov.w	r3, #4294967295
   171d2:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   171d4:	2400      	movs	r4, #0
   171d6:	e532      	b.n	16c3e <handleParameter+0x1a>
   171d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   171dc:	d1f7      	bne.n	171ce <handleParameter+0x5aa>
			case 256:  *value = 0;   break;
   171de:	2300      	movs	r3, #0
   171e0:	e000      	b.n	171e4 <handleParameter+0x5c0>
			case 1:    *value = 8;   break;
   171e2:	2308      	movs	r3, #8
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_MRES_MASK, TMC5072_MRES_SHIFT, *value);
   171e4:	0109      	lsls	r1, r1, #4
   171e6:	f041 046c 	orr.w	r4, r1, #108	; 0x6c
   171ea:	b2e4      	uxtb	r4, r4
   171ec:	4621      	mov	r1, r4
			case 256:  *value = 0;   break;
   171ee:	602b      	str	r3, [r5, #0]
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_MRES_MASK, TMC5072_MRES_SHIFT, *value);
   171f0:	482a      	ldr	r0, [pc, #168]	; (1729c <handleParameter+0x678>)
   171f2:	f00c fd10 	bl	23c16 <tmc5072_readInt>
   171f6:	682b      	ldr	r3, [r5, #0]
   171f8:	061b      	lsls	r3, r3, #24
   171fa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   171fe:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   17202:	4621      	mov	r1, r4
   17204:	4825      	ldr	r0, [pc, #148]	; (1729c <handleParameter+0x678>)
   17206:	431a      	orrs	r2, r3
   17208:	f00c fcf7 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1720c:	2400      	movs	r4, #0
   1720e:	e516      	b.n	16c3e <handleParameter+0x1a>
			case 2:    *value = 7;   break;
   17210:	2307      	movs	r3, #7
   17212:	e7e7      	b.n	171e4 <handleParameter+0x5c0>
			case 4:    *value = 6;   break;
   17214:	2306      	movs	r3, #6
   17216:	e7e5      	b.n	171e4 <handleParameter+0x5c0>
			case 8:    *value = 5;   break;
   17218:	2305      	movs	r3, #5
   1721a:	e7e3      	b.n	171e4 <handleParameter+0x5c0>
			case 16:   *value = 4;   break;
   1721c:	2304      	movs	r3, #4
   1721e:	e7e1      	b.n	171e4 <handleParameter+0x5c0>
			case 32:   *value = 3;   break;
   17220:	2303      	movs	r3, #3
   17222:	e7df      	b.n	171e4 <handleParameter+0x5c0>
			case 64:   *value = 2;   break;
   17224:	2302      	movs	r3, #2
   17226:	e7dd      	b.n	171e4 <handleParameter+0x5c0>
			case 128:  *value = 1;   break;
   17228:	2301      	movs	r3, #1
   1722a:	e7db      	b.n	171e4 <handleParameter+0x5c0>
		if(readWrite == READ) {
   1722c:	0109      	lsls	r1, r1, #4
   1722e:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   17232:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TBL_MASK, TMC5072_TBL_SHIFT);
   17234:	4819      	ldr	r0, [pc, #100]	; (1729c <handleParameter+0x678>)
   17236:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17238:	b92c      	cbnz	r4, 17246 <handleParameter+0x622>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TBL_MASK, TMC5072_TBL_SHIFT);
   1723a:	f00c fcec 	bl	23c16 <tmc5072_readInt>
   1723e:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   17242:	6028      	str	r0, [r5, #0]
   17244:	e4fb      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TBL_MASK, TMC5072_TBL_SHIFT, *value);
   17246:	f00c fce6 	bl	23c16 <tmc5072_readInt>
   1724a:	682b      	ldr	r3, [r5, #0]
   1724c:	03db      	lsls	r3, r3, #15
   1724e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   17252:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   17256:	431a      	orrs	r2, r3
   17258:	4810      	ldr	r0, [pc, #64]	; (1729c <handleParameter+0x678>)
   1725a:	4631      	mov	r1, r6
   1725c:	f00c fccd 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17260:	2400      	movs	r4, #0
   17262:	e4ec      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17264:	0109      	lsls	r1, r1, #4
   17266:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   1726a:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT);
   1726c:	480b      	ldr	r0, [pc, #44]	; (1729c <handleParameter+0x678>)
   1726e:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17270:	b92c      	cbnz	r4, 1727e <handleParameter+0x65a>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT);
   17272:	f00c fcd0 	bl	23c16 <tmc5072_readInt>
   17276:	f3c0 3040 	ubfx	r0, r0, #13, #1
   1727a:	6028      	str	r0, [r5, #0]
   1727c:	e4df      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT, *value);
   1727e:	f00c fcca 	bl	23c16 <tmc5072_readInt>
   17282:	682b      	ldr	r3, [r5, #0]
   17284:	035b      	lsls	r3, r3, #13
   17286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   1728a:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   1728e:	431a      	orrs	r2, r3
   17290:	4802      	ldr	r0, [pc, #8]	; (1729c <handleParameter+0x678>)
   17292:	4631      	mov	r1, r6
   17294:	f00c fcb1 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17298:	2400      	movs	r4, #0
   1729a:	e4d0      	b.n	16c3e <handleParameter+0x1a>
   1729c:	1fff39fc 	.word	0x1fff39fc
		if(readWrite == READ) {
   172a0:	0109      	lsls	r1, r1, #4
   172a2:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   172a6:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_DISFDCC_MASK, TMC5072_DISFDCC_SHIFT);
   172a8:	48b7      	ldr	r0, [pc, #732]	; (17588 <handleParameter+0x964>)
   172aa:	4631      	mov	r1, r6
		if(readWrite == READ) {
   172ac:	b92c      	cbnz	r4, 172ba <handleParameter+0x696>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_DISFDCC_MASK, TMC5072_DISFDCC_SHIFT);
   172ae:	f00c fcb2 	bl	23c16 <tmc5072_readInt>
   172b2:	f3c0 3000 	ubfx	r0, r0, #12, #1
   172b6:	6028      	str	r0, [r5, #0]
   172b8:	e4c1      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_DISFDCC_MASK, TMC5072_DISFDCC_SHIFT, *value);
   172ba:	f00c fcac 	bl	23c16 <tmc5072_readInt>
   172be:	682b      	ldr	r3, [r5, #0]
   172c0:	031b      	lsls	r3, r3, #12
   172c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   172c6:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   172ca:	431a      	orrs	r2, r3
   172cc:	48ae      	ldr	r0, [pc, #696]	; (17588 <handleParameter+0x964>)
   172ce:	4631      	mov	r1, r6
   172d0:	f00c fc93 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   172d4:	2400      	movs	r4, #0
   172d6:	e4b2      	b.n	16c3e <handleParameter+0x1a>
		tempValue = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_CHM_MASK, TMC5072_CHM_SHIFT);
   172d8:	0109      	lsls	r1, r1, #4
   172da:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   172de:	b2f6      	uxtb	r6, r6
   172e0:	4631      	mov	r1, r6
   172e2:	48a9      	ldr	r0, [pc, #676]	; (17588 <handleParameter+0x964>)
   172e4:	f00c fc97 	bl	23c16 <tmc5072_readInt>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HEND_MASK, TMC5072_HEND_SHIFT);
   172e8:	4631      	mov	r1, r6
		tempValue = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_CHM_MASK, TMC5072_CHM_SHIFT);
   172ea:	f3c0 3780 	ubfx	r7, r0, #14, #1
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HEND_MASK, TMC5072_HEND_SHIFT);
   172ee:	48a6      	ldr	r0, [pc, #664]	; (17588 <handleParameter+0x964>)
		if(readWrite == READ) {
   172f0:	b964      	cbnz	r4, 1730c <handleParameter+0x6e8>
			if(tempValue)
   172f2:	b12f      	cbz	r7, 17300 <handleParameter+0x6dc>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HEND_MASK, TMC5072_HEND_SHIFT);
   172f4:	f00c fc8f 	bl	23c16 <tmc5072_readInt>
   172f8:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   172fc:	6028      	str	r0, [r5, #0]
   172fe:	e49e      	b.n	16c3e <handleParameter+0x1a>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TFD_ALL_MASK, TMC5072_TFD_ALL_SHIFT);
   17300:	f00c fc89 	bl	23c16 <tmc5072_readInt>
   17304:	f3c0 1002 	ubfx	r0, r0, #4, #3
				*value |= (*value & (1<<11)) << 3;
   17308:	6028      	str	r0, [r5, #0]
   1730a:	e498      	b.n	16c3e <handleParameter+0x1a>
			if(tempValue)
   1730c:	b177      	cbz	r7, 1732c <handleParameter+0x708>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HEND_MASK, TMC5072_HEND_SHIFT, *value);
   1730e:	f00c fc82 	bl	23c16 <tmc5072_readInt>
   17312:	682b      	ldr	r3, [r5, #0]
   17314:	01db      	lsls	r3, r3, #7
   17316:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   1731a:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1731e:	431a      	orrs	r2, r3
   17320:	4899      	ldr	r0, [pc, #612]	; (17588 <handleParameter+0x964>)
   17322:	4631      	mov	r1, r6
   17324:	f00c fc69 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17328:	2400      	movs	r4, #0
   1732a:	e488      	b.n	16c3e <handleParameter+0x1a>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TFD_3_MASK, TMC5072_TFD_3_SHIFT, (*value & (1<<3))? 1:0);
   1732c:	f00c fc73 	bl	23c16 <tmc5072_readInt>
   17330:	682b      	ldr	r3, [r5, #0]
   17332:	021b      	lsls	r3, r3, #8
   17334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   17338:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
   1733c:	431a      	orrs	r2, r3
   1733e:	4892      	ldr	r0, [pc, #584]	; (17588 <handleParameter+0x964>)
   17340:	4631      	mov	r1, r6
   17342:	f00c fc5a 	bl	23bfa <tmc5072_writeInt>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TFD_ALL_MASK, TMC5072_TFD_ALL_SHIFT, *value);
   17346:	4631      	mov	r1, r6
   17348:	488f      	ldr	r0, [pc, #572]	; (17588 <handleParameter+0x964>)
   1734a:	f00c fc64 	bl	23c16 <tmc5072_readInt>
   1734e:	682b      	ldr	r3, [r5, #0]
   17350:	011b      	lsls	r3, r3, #4
   17352:	f003 0370 	and.w	r3, r3, #112	; 0x70
   17356:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   1735a:	431a      	orrs	r2, r3
   1735c:	488a      	ldr	r0, [pc, #552]	; (17588 <handleParameter+0x964>)
   1735e:	4631      	mov	r1, r6
   17360:	f00c fc4b 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17364:	463c      	mov	r4, r7
   17366:	e46a      	b.n	16c3e <handleParameter+0x1a>
		tempValue = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_CHM_MASK, TMC5072_CHM_SHIFT);
   17368:	0109      	lsls	r1, r1, #4
   1736a:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   1736e:	b2f6      	uxtb	r6, r6
   17370:	4631      	mov	r1, r6
   17372:	4885      	ldr	r0, [pc, #532]	; (17588 <handleParameter+0x964>)
   17374:	f00c fc4f 	bl	23c16 <tmc5072_readInt>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HSTRT_MASK, TMC5072_HSTRT_SHIFT);
   17378:	4631      	mov	r1, r6
		tempValue = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_CHM_MASK, TMC5072_CHM_SHIFT);
   1737a:	f3c0 3780 	ubfx	r7, r0, #14, #1
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HSTRT_MASK, TMC5072_HSTRT_SHIFT);
   1737e:	4882      	ldr	r0, [pc, #520]	; (17588 <handleParameter+0x964>)
		if(readWrite == READ) {
   17380:	b9b4      	cbnz	r4, 173b0 <handleParameter+0x78c>
			if(tempValue)
   17382:	b12f      	cbz	r7, 17390 <handleParameter+0x76c>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HSTRT_MASK, TMC5072_HSTRT_SHIFT);
   17384:	f00c fc47 	bl	23c16 <tmc5072_readInt>
   17388:	f3c0 1002 	ubfx	r0, r0, #4, #3
   1738c:	6028      	str	r0, [r5, #0]
   1738e:	e456      	b.n	16c3e <handleParameter+0x1a>
				*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_OFFSET_MASK, TMC5072_OFFSET_SHIFT);
   17390:	f00c fc41 	bl	23c16 <tmc5072_readInt>
   17394:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   17398:	6028      	str	r0, [r5, #0]
				tempValue = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TFD_3_MASK, TMC5072_TFD_3_SHIFT);
   1739a:	4631      	mov	r1, r6
   1739c:	487a      	ldr	r0, [pc, #488]	; (17588 <handleParameter+0x964>)
   1739e:	f00c fc3a 	bl	23c16 <tmc5072_readInt>
				*value |= tempValue << 3;
   173a2:	682b      	ldr	r3, [r5, #0]
   173a4:	0a00      	lsrs	r0, r0, #8
   173a6:	f000 0008 	and.w	r0, r0, #8
   173aa:	4318      	orrs	r0, r3
   173ac:	6028      	str	r0, [r5, #0]
   173ae:	e446      	b.n	16c3e <handleParameter+0x1a>
			if(tempValue)
   173b0:	b177      	cbz	r7, 173d0 <handleParameter+0x7ac>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_HSTRT_MASK, TMC5072_HSTRT_SHIFT, *value);
   173b2:	f00c fc30 	bl	23c16 <tmc5072_readInt>
   173b6:	682b      	ldr	r3, [r5, #0]
   173b8:	011b      	lsls	r3, r3, #4
   173ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   173be:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   173c2:	431a      	orrs	r2, r3
   173c4:	4870      	ldr	r0, [pc, #448]	; (17588 <handleParameter+0x964>)
   173c6:	4631      	mov	r1, r6
   173c8:	f00c fc17 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   173cc:	2400      	movs	r4, #0
   173ce:	e436      	b.n	16c3e <handleParameter+0x1a>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_OFFSET_MASK, TMC5072_OFFSET_SHIFT, *value);
   173d0:	f00c fc21 	bl	23c16 <tmc5072_readInt>
   173d4:	682b      	ldr	r3, [r5, #0]
   173d6:	01db      	lsls	r3, r3, #7
   173d8:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   173dc:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   173e0:	431a      	orrs	r2, r3
   173e2:	4869      	ldr	r0, [pc, #420]	; (17588 <handleParameter+0x964>)
   173e4:	4631      	mov	r1, r6
   173e6:	f00c fc08 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   173ea:	463c      	mov	r4, r7
   173ec:	e427      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   173ee:	0109      	lsls	r1, r1, #4
   173f0:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   173f4:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TOFF_MASK, TMC5072_TOFF_SHIFT);
   173f6:	4864      	ldr	r0, [pc, #400]	; (17588 <handleParameter+0x964>)
   173f8:	4631      	mov	r1, r6
		if(readWrite == READ) {
   173fa:	b92c      	cbnz	r4, 17408 <handleParameter+0x7e4>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TOFF_MASK, TMC5072_TOFF_SHIFT);
   173fc:	f00c fc0b 	bl	23c16 <tmc5072_readInt>
   17400:	f000 000f 	and.w	r0, r0, #15
   17404:	6028      	str	r0, [r5, #0]
   17406:	e41a      	b.n	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_TOFF_MASK, TMC5072_TOFF_SHIFT, *value);
   17408:	f00c fc05 	bl	23c16 <tmc5072_readInt>
   1740c:	682a      	ldr	r2, [r5, #0]
   1740e:	f020 000f 	bic.w	r0, r0, #15
   17412:	f002 020f 	and.w	r2, r2, #15
   17416:	4302      	orrs	r2, r0
   17418:	4631      	mov	r1, r6
   1741a:	485b      	ldr	r0, [pc, #364]	; (17588 <handleParameter+0x964>)
   1741c:	f00c fbed 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17420:	2400      	movs	r4, #0
   17422:	e40c      	b.n	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17424:	0109      	lsls	r1, r1, #4
   17426:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   1742a:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEIMIN_MASK, TMC5072_SEIMIN_SHIFT);
   1742c:	4856      	ldr	r0, [pc, #344]	; (17588 <handleParameter+0x964>)
   1742e:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17430:	b934      	cbnz	r4, 17440 <handleParameter+0x81c>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEIMIN_MASK, TMC5072_SEIMIN_SHIFT);
   17432:	f00c fbf0 	bl	23c16 <tmc5072_readInt>
   17436:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1743a:	6028      	str	r0, [r5, #0]
   1743c:	f7ff bbff 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEIMIN_MASK, TMC5072_SEIMIN_SHIFT, *value);
   17440:	f00c fbe9 	bl	23c16 <tmc5072_readInt>
   17444:	682b      	ldr	r3, [r5, #0]
   17446:	03db      	lsls	r3, r3, #15
   17448:	b29b      	uxth	r3, r3
   1744a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1744e:	431a      	orrs	r2, r3
   17450:	484d      	ldr	r0, [pc, #308]	; (17588 <handleParameter+0x964>)
   17452:	4631      	mov	r1, r6
   17454:	f00c fbd1 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17458:	2400      	movs	r4, #0
   1745a:	f7ff bbf0 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1745e:	0109      	lsls	r1, r1, #4
   17460:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   17464:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEDN_MASK, TMC5072_SEDN_SHIFT);
   17466:	4848      	ldr	r0, [pc, #288]	; (17588 <handleParameter+0x964>)
   17468:	4631      	mov	r1, r6
		if(readWrite == READ) {
   1746a:	b934      	cbnz	r4, 1747a <handleParameter+0x856>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEDN_MASK, TMC5072_SEDN_SHIFT);
   1746c:	f00c fbd3 	bl	23c16 <tmc5072_readInt>
   17470:	f3c0 3041 	ubfx	r0, r0, #13, #2
   17474:	6028      	str	r0, [r5, #0]
   17476:	f7ff bbe2 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEDN_MASK, TMC5072_SEDN_SHIFT, *value);
   1747a:	f00c fbcc 	bl	23c16 <tmc5072_readInt>
   1747e:	682b      	ldr	r3, [r5, #0]
   17480:	035b      	lsls	r3, r3, #13
   17482:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   17486:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   1748a:	431a      	orrs	r2, r3
   1748c:	483e      	ldr	r0, [pc, #248]	; (17588 <handleParameter+0x964>)
   1748e:	4631      	mov	r1, r6
   17490:	f00c fbb3 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17494:	2400      	movs	r4, #0
   17496:	f7ff bbd2 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1749a:	0109      	lsls	r1, r1, #4
   1749c:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   174a0:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMAX_MASK, TMC5072_SEMAX_SHIFT);
   174a2:	4839      	ldr	r0, [pc, #228]	; (17588 <handleParameter+0x964>)
   174a4:	4631      	mov	r1, r6
		if(readWrite == READ) {
   174a6:	b934      	cbnz	r4, 174b6 <handleParameter+0x892>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMAX_MASK, TMC5072_SEMAX_SHIFT);
   174a8:	f00c fbb5 	bl	23c16 <tmc5072_readInt>
   174ac:	f3c0 2003 	ubfx	r0, r0, #8, #4
   174b0:	6028      	str	r0, [r5, #0]
   174b2:	f7ff bbc4 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMAX_MASK, TMC5072_SEMAX_SHIFT, *value);
   174b6:	f00c fbae 	bl	23c16 <tmc5072_readInt>
   174ba:	682b      	ldr	r3, [r5, #0]
   174bc:	021b      	lsls	r3, r3, #8
   174be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   174c2:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   174c6:	431a      	orrs	r2, r3
   174c8:	482f      	ldr	r0, [pc, #188]	; (17588 <handleParameter+0x964>)
   174ca:	4631      	mov	r1, r6
   174cc:	f00c fb95 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   174d0:	2400      	movs	r4, #0
   174d2:	f7ff bbb4 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   174d6:	0109      	lsls	r1, r1, #4
   174d8:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   174dc:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEUP_MASK, TMC5072_SEUP_SHIFT);
   174de:	482a      	ldr	r0, [pc, #168]	; (17588 <handleParameter+0x964>)
   174e0:	4631      	mov	r1, r6
		if(readWrite == READ) {
   174e2:	b934      	cbnz	r4, 174f2 <handleParameter+0x8ce>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEUP_MASK, TMC5072_SEUP_SHIFT);
   174e4:	f00c fb97 	bl	23c16 <tmc5072_readInt>
   174e8:	f3c0 1041 	ubfx	r0, r0, #5, #2
   174ec:	6028      	str	r0, [r5, #0]
   174ee:	f7ff bba6 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEUP_MASK, TMC5072_SEUP_SHIFT, *value);
   174f2:	f00c fb90 	bl	23c16 <tmc5072_readInt>
   174f6:	682b      	ldr	r3, [r5, #0]
   174f8:	015b      	lsls	r3, r3, #5
   174fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
   174fe:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   17502:	431a      	orrs	r2, r3
   17504:	4820      	ldr	r0, [pc, #128]	; (17588 <handleParameter+0x964>)
   17506:	4631      	mov	r1, r6
   17508:	f00c fb77 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1750c:	2400      	movs	r4, #0
   1750e:	f7ff bb96 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17512:	0109      	lsls	r1, r1, #4
   17514:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   17518:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMIN_MASK, TMC5072_SEMIN_SHIFT);
   1751a:	481b      	ldr	r0, [pc, #108]	; (17588 <handleParameter+0x964>)
   1751c:	4631      	mov	r1, r6
		if(readWrite == READ) {
   1751e:	b934      	cbnz	r4, 1752e <handleParameter+0x90a>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMIN_MASK, TMC5072_SEMIN_SHIFT);
   17520:	f00c fb79 	bl	23c16 <tmc5072_readInt>
   17524:	f000 000f 	and.w	r0, r0, #15
   17528:	6028      	str	r0, [r5, #0]
   1752a:	f7ff bb88 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SEMIN_MASK, TMC5072_SEMIN_SHIFT, *value);
   1752e:	f00c fb72 	bl	23c16 <tmc5072_readInt>
   17532:	682a      	ldr	r2, [r5, #0]
   17534:	f020 000f 	bic.w	r0, r0, #15
   17538:	f002 020f 	and.w	r2, r2, #15
   1753c:	4302      	orrs	r2, r0
   1753e:	4631      	mov	r1, r6
   17540:	4811      	ldr	r0, [pc, #68]	; (17588 <handleParameter+0x964>)
   17542:	f00c fb5a 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17546:	2400      	movs	r4, #0
   17548:	f7ff bb79 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1754c:	0109      	lsls	r1, r1, #4
   1754e:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   17552:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SFILT_MASK, TMC5072_SFILT_SHIFT);
   17554:	480c      	ldr	r0, [pc, #48]	; (17588 <handleParameter+0x964>)
   17556:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17558:	b934      	cbnz	r4, 17568 <handleParameter+0x944>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SFILT_MASK, TMC5072_SFILT_SHIFT);
   1755a:	f00c fb5c 	bl	23c16 <tmc5072_readInt>
   1755e:	f3c0 6000 	ubfx	r0, r0, #24, #1
   17562:	6028      	str	r0, [r5, #0]
   17564:	f7ff bb6b 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SFILT_MASK, TMC5072_SFILT_SHIFT, *value);
   17568:	f00c fb55 	bl	23c16 <tmc5072_readInt>
   1756c:	682b      	ldr	r3, [r5, #0]
   1756e:	061b      	lsls	r3, r3, #24
   17570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   17574:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   17578:	431a      	orrs	r2, r3
   1757a:	4803      	ldr	r0, [pc, #12]	; (17588 <handleParameter+0x964>)
   1757c:	4631      	mov	r1, r6
   1757e:	f00c fb3c 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17582:	2400      	movs	r4, #0
   17584:	f7ff bb5b 	b.w	16c3e <handleParameter+0x1a>
   17588:	1fff39fc 	.word	0x1fff39fc
		if(readWrite == READ) {
   1758c:	0109      	lsls	r1, r1, #4
   1758e:	f041 066d 	orr.w	r6, r1, #109	; 0x6d
   17592:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SGT_MASK, TMC5072_SGT_SHIFT);
   17594:	48b9      	ldr	r0, [pc, #740]	; (1787c <handleParameter+0xc58>)
   17596:	4631      	mov	r1, r6
		if(readWrite == READ) {
   17598:	b96c      	cbnz	r4, 175b6 <handleParameter+0x992>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SGT_MASK, TMC5072_SGT_SHIFT);
   1759a:	f00c fb3c 	bl	23c16 <tmc5072_readInt>
   1759e:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   175a0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SGT_MASK, TMC5072_SGT_SHIFT);
   175a4:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   175a8:	bf18      	it	ne
   175aa:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   175ae:	4318      	orrs	r0, r3
   175b0:	6028      	str	r0, [r5, #0]
   175b2:	f7ff bb44 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_COOLCONF(motor), TMC5072_SGT_MASK, TMC5072_SGT_SHIFT, *value);
   175b6:	f00c fb2e 	bl	23c16 <tmc5072_readInt>
   175ba:	682b      	ldr	r3, [r5, #0]
   175bc:	041b      	lsls	r3, r3, #16
   175be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   175c2:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   175c6:	431a      	orrs	r2, r3
   175c8:	48ac      	ldr	r0, [pc, #688]	; (1787c <handleParameter+0xc58>)
   175ca:	4631      	mov	r1, r6
   175cc:	f00c fb15 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   175d0:	2400      	movs	r4, #0
   175d2:	f7ff bb34 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   175d6:	0109      	lsls	r1, r1, #4
   175d8:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   175dc:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VSENSE_MASK, TMC5072_VSENSE_SHIFT);
   175de:	48a7      	ldr	r0, [pc, #668]	; (1787c <handleParameter+0xc58>)
   175e0:	4631      	mov	r1, r6
		if(readWrite == READ) {
   175e2:	b934      	cbnz	r4, 175f2 <handleParameter+0x9ce>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VSENSE_MASK, TMC5072_VSENSE_SHIFT);
   175e4:	f00c fb17 	bl	23c16 <tmc5072_readInt>
   175e8:	f3c0 4040 	ubfx	r0, r0, #17, #1
   175ec:	6028      	str	r0, [r5, #0]
   175ee:	f7ff bb26 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_VSENSE_MASK, TMC5072_VSENSE_SHIFT, *value);
   175f2:	f00c fb10 	bl	23c16 <tmc5072_readInt>
   175f6:	682b      	ldr	r3, [r5, #0]
   175f8:	045b      	lsls	r3, r3, #17
   175fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   175fe:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
   17602:	431a      	orrs	r2, r3
   17604:	489d      	ldr	r0, [pc, #628]	; (1787c <handleParameter+0xc58>)
   17606:	4631      	mov	r1, r6
   17608:	f00c faf7 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1760c:	2400      	movs	r4, #0
   1760e:	f7ff bb16 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17612:	2c00      	cmp	r4, #0
   17614:	f040 812b 	bne.w	1786e <handleParameter+0xc4a>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_DRVSTATUS(motor), TMC5072_CS_ACTUAL_MASK, TMC5072_CS_ACTUAL_SHIFT);
   17618:	0109      	lsls	r1, r1, #4
   1761a:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   1761e:	4897      	ldr	r0, [pc, #604]	; (1787c <handleParameter+0xc58>)
   17620:	b2c9      	uxtb	r1, r1
   17622:	f00c faf8 	bl	23c16 <tmc5072_readInt>
   17626:	f3c0 4004 	ubfx	r0, r0, #16, #5
   1762a:	6028      	str	r0, [r5, #0]
   1762c:	f7ff bb07 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17630:	2620      	movs	r6, #32
   17632:	fa06 f101 	lsl.w	r1, r6, r1
   17636:	b24e      	sxtb	r6, r1
   17638:	f046 0714 	orr.w	r7, r6, #20
   1763c:	b2ff      	uxtb	r7, r7
   1763e:	b98c      	cbnz	r4, 17664 <handleParameter+0xa40>
			if(TMC5072_FIELD_READ(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_SG_STOP_MASK, TMC5072_SG_STOP_SHIFT))
   17640:	4639      	mov	r1, r7
   17642:	488e      	ldr	r0, [pc, #568]	; (1787c <handleParameter+0xc58>)
   17644:	f00c fae7 	bl	23c16 <tmc5072_readInt>
   17648:	0541      	lsls	r1, r0, #21
   1764a:	d508      	bpl.n	1765e <handleParameter+0xa3a>
				*value = tmc5072_readInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor));
   1764c:	f046 0111 	orr.w	r1, r6, #17
   17650:	488a      	ldr	r0, [pc, #552]	; (1787c <handleParameter+0xc58>)
   17652:	b2c9      	uxtb	r1, r1
   17654:	f00c fadf 	bl	23c16 <tmc5072_readInt>
   17658:	6028      	str	r0, [r5, #0]
   1765a:	f7ff baf0 	b.w	16c3e <handleParameter+0x1a>
				*value = 0;
   1765e:	602c      	str	r4, [r5, #0]
   17660:	f7ff baed 	b.w	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor),*value);
   17664:	f046 0111 	orr.w	r1, r6, #17
   17668:	682a      	ldr	r2, [r5, #0]
   1766a:	4884      	ldr	r0, [pc, #528]	; (1787c <handleParameter+0xc58>)
   1766c:	b2c9      	uxtb	r1, r1
   1766e:	f00c fac4 	bl	23bfa <tmc5072_writeInt>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_SWMODE(motor), TMC5072_SG_STOP_MASK, TMC5072_SG_STOP_SHIFT, (*value)? 1:0);
   17672:	4639      	mov	r1, r7
   17674:	4881      	ldr	r0, [pc, #516]	; (1787c <handleParameter+0xc58>)
   17676:	f00c face 	bl	23c16 <tmc5072_readInt>
   1767a:	682b      	ldr	r3, [r5, #0]
   1767c:	2b00      	cmp	r3, #0
   1767e:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   17682:	bf18      	it	ne
   17684:	f44f 6380 	movne.w	r3, #1024	; 0x400
   17688:	487c      	ldr	r0, [pc, #496]	; (1787c <handleParameter+0xc58>)
   1768a:	431a      	orrs	r2, r3
   1768c:	4639      	mov	r1, r7
   1768e:	f00c fab4 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17692:	2400      	movs	r4, #0
   17694:	f7ff bad3 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17698:	2320      	movs	r3, #32
   1769a:	fa03 f101 	lsl.w	r1, r3, r1
   1769e:	f041 0111 	orr.w	r1, r1, #17
   176a2:	b2c9      	uxtb	r1, r1
   176a4:	b92c      	cbnz	r4, 176b2 <handleParameter+0xa8e>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor));
   176a6:	4875      	ldr	r0, [pc, #468]	; (1787c <handleParameter+0xc58>)
   176a8:	f00c fab5 	bl	23c16 <tmc5072_readInt>
   176ac:	6028      	str	r0, [r5, #0]
   176ae:	f7ff bac6 	b.w	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_VCOOLTHRS(motor),*value);
   176b2:	682a      	ldr	r2, [r5, #0]
   176b4:	4871      	ldr	r0, [pc, #452]	; (1787c <handleParameter+0xc58>)
   176b6:	f00c faa0 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   176ba:	2400      	movs	r4, #0
   176bc:	f7ff babf 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   176c0:	0109      	lsls	r1, r1, #4
   176c2:	f041 066c 	orr.w	r6, r1, #108	; 0x6c
   176c6:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT);
   176c8:	486c      	ldr	r0, [pc, #432]	; (1787c <handleParameter+0xc58>)
   176ca:	4631      	mov	r1, r6
		if(readWrite == READ) {
   176cc:	b934      	cbnz	r4, 176dc <handleParameter+0xab8>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT);
   176ce:	f00c faa2 	bl	23c16 <tmc5072_readInt>
   176d2:	f3c0 3040 	ubfx	r0, r0, #13, #1
   176d6:	6028      	str	r0, [r5, #0]
   176d8:	f7ff bab1 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_CHOPCONF(motor), TMC5072_RNDTF_MASK, TMC5072_RNDTF_SHIFT, *value);
   176dc:	f00c fa9b 	bl	23c16 <tmc5072_readInt>
   176e0:	682b      	ldr	r3, [r5, #0]
   176e2:	035b      	lsls	r3, r3, #13
   176e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   176e8:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   176ec:	431a      	orrs	r2, r3
   176ee:	4863      	ldr	r0, [pc, #396]	; (1787c <handleParameter+0xc58>)
   176f0:	4631      	mov	r1, r6
   176f2:	f00c fa82 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   176f6:	2400      	movs	r4, #0
   176f8:	f7ff baa1 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   176fc:	2c00      	cmp	r4, #0
   176fe:	f040 80b9 	bne.w	17874 <handleParameter+0xc50>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_DRVSTATUS(motor), TMC5072_SG_RESULT_MASK, TMC5072_SG_RESULT_SHIFT);
   17702:	0109      	lsls	r1, r1, #4
   17704:	f041 016f 	orr.w	r1, r1, #111	; 0x6f
   17708:	485c      	ldr	r0, [pc, #368]	; (1787c <handleParameter+0xc58>)
   1770a:	b2c9      	uxtb	r1, r1
   1770c:	f00c fa83 	bl	23c16 <tmc5072_readInt>
   17710:	f3c0 0009 	ubfx	r0, r0, #0, #10
   17714:	6028      	str	r0, [r5, #0]
   17716:	f7ff ba92 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1771a:	2620      	movs	r6, #32
   1771c:	fa06 f101 	lsl.w	r1, r6, r1
   17720:	f041 0619 	orr.w	r6, r1, #25
   17724:	b2f6      	uxtb	r6, r6
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_XENC(motor), TMC5072_X_ENC_MASK, TMC5072_X_ENC_SHIFT);
   17726:	4855      	ldr	r0, [pc, #340]	; (1787c <handleParameter+0xc58>)
   17728:	4631      	mov	r1, r6
		if(readWrite == READ) {
   1772a:	b924      	cbnz	r4, 17736 <handleParameter+0xb12>
			*value = TMC5072_FIELD_READ(motorToIC(motor), TMC5072_XENC(motor), TMC5072_X_ENC_MASK, TMC5072_X_ENC_SHIFT);
   1772c:	f00c fa73 	bl	23c16 <tmc5072_readInt>
   17730:	6028      	str	r0, [r5, #0]
   17732:	f7ff ba84 	b.w	16c3e <handleParameter+0x1a>
			TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_XENC(motor), TMC5072_X_ENC_MASK, TMC5072_X_ENC_SHIFT, *value);
   17736:	f00c fa6e 	bl	23c16 <tmc5072_readInt>
   1773a:	682a      	ldr	r2, [r5, #0]
   1773c:	484f      	ldr	r0, [pc, #316]	; (1787c <handleParameter+0xc58>)
   1773e:	4631      	mov	r1, r6
   17740:	f00c fa5b 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17744:	2400      	movs	r4, #0
   17746:	f7ff ba7a 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   1774a:	2320      	movs	r3, #32
   1774c:	fa03 f101 	lsl.w	r1, r3, r1
   17750:	f041 011a 	orr.w	r1, r1, #26
   17754:	b2c9      	uxtb	r1, r1
   17756:	b92c      	cbnz	r4, 17764 <handleParameter+0xb40>
			*value = tmc5072_readInt(motorToIC(motor), TMC5072_ENC_CONST(motor));
   17758:	4848      	ldr	r0, [pc, #288]	; (1787c <handleParameter+0xc58>)
   1775a:	f00c fa5c 	bl	23c16 <tmc5072_readInt>
   1775e:	6028      	str	r0, [r5, #0]
   17760:	f7ff ba6d 	b.w	16c3e <handleParameter+0x1a>
			tmc5072_writeInt(motorToIC(motor), TMC5072_ENC_CONST(motor),*value);
   17764:	682a      	ldr	r2, [r5, #0]
   17766:	4845      	ldr	r0, [pc, #276]	; (1787c <handleParameter+0xc58>)
   17768:	f00c fa47 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1776c:	2400      	movs	r4, #0
   1776e:	f7ff ba66 	b.w	16c3e <handleParameter+0x1a>
		if(readWrite == READ) {
   17772:	b9cc      	cbnz	r4, 177a8 <handleParameter+0xb84>
			switch(motor)
   17774:	2901      	cmp	r1, #1
				tempValue = tmc5072_readInt(motorToIC(motor), TMC5072_GCONF);
   17776:	4841      	ldr	r0, [pc, #260]	; (1787c <handleParameter+0xc58>)
   17778:	4621      	mov	r1, r4
   1777a:	d00a      	beq.n	17792 <handleParameter+0xb6e>
				tempValue = tmc5072_readInt(motorToIC(motor), TMC5072_GCONF);
   1777c:	f00c fa4b 	bl	23c16 <tmc5072_readInt>
				tempValue &= 0x18; //(1<<3) | (1<<4);
   17780:	f000 0018 	and.w	r0, r0, #24
				*value = (tempValue == 0x10) ? 1 : 0;
   17784:	f1a0 0210 	sub.w	r2, r0, #16
   17788:	4250      	negs	r0, r2
   1778a:	4150      	adcs	r0, r2
   1778c:	6028      	str	r0, [r5, #0]
				break;
   1778e:	f7ff ba56 	b.w	16c3e <handleParameter+0x1a>
				tempValue = tmc5072_readInt(motorToIC(motor), TMC5072_GCONF);
   17792:	f00c fa40 	bl	23c16 <tmc5072_readInt>
				tempValue &= 0x60; //(1<<5) | (1<<6);
   17796:	f000 0060 	and.w	r0, r0, #96	; 0x60
				*value = (tempValue == 0x20) ? 1 : 0;
   1779a:	f1a0 0320 	sub.w	r3, r0, #32
   1779e:	4258      	negs	r0, r3
   177a0:	4158      	adcs	r0, r3
   177a2:	6028      	str	r0, [r5, #0]
				break;
   177a4:	f7ff ba4b 	b.w	16c3e <handleParameter+0x1a>
			switch(motor)
   177a8:	2901      	cmp	r1, #1
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_GCONF, TMC5072_ENC2_ENABLE_MASK, TMC5072_ENC2_ENABLE_SHIFT, (*value) ? 1 : 0);
   177aa:	4834      	ldr	r0, [pc, #208]	; (1787c <handleParameter+0xc58>)
   177ac:	f04f 0100 	mov.w	r1, #0
   177b0:	d01f      	beq.n	177f2 <handleParameter+0xbce>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_GCONF, TMC5072_POSCMP_ENABLE_MASK, TMC5072_POSCMP_ENABLE_SHIFT, (*value) ? 0 : 1);
   177b2:	f00c fa30 	bl	23c16 <tmc5072_readInt>
   177b6:	682b      	ldr	r3, [r5, #0]
   177b8:	2b00      	cmp	r3, #0
   177ba:	bf0c      	ite	eq
   177bc:	2208      	moveq	r2, #8
   177be:	2200      	movne	r2, #0
   177c0:	f020 0008 	bic.w	r0, r0, #8
   177c4:	4302      	orrs	r2, r0
   177c6:	2100      	movs	r1, #0
   177c8:	482c      	ldr	r0, [pc, #176]	; (1787c <handleParameter+0xc58>)
   177ca:	f00c fa16 	bl	23bfa <tmc5072_writeInt>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_GCONF, TMC5072_ENC1_REFSEL_MASK, TMC5072_ENC1_REFSEL_SHIFT, (*value) ? 1 : 0);
   177ce:	2100      	movs	r1, #0
   177d0:	482a      	ldr	r0, [pc, #168]	; (1787c <handleParameter+0xc58>)
   177d2:	f00c fa20 	bl	23c16 <tmc5072_readInt>
   177d6:	682b      	ldr	r3, [r5, #0]
   177d8:	2b00      	cmp	r3, #0
   177da:	f020 0210 	bic.w	r2, r0, #16
   177de:	bf18      	it	ne
   177e0:	2310      	movne	r3, #16
   177e2:	4826      	ldr	r0, [pc, #152]	; (1787c <handleParameter+0xc58>)
   177e4:	431a      	orrs	r2, r3
   177e6:	2100      	movs	r1, #0
   177e8:	f00c fa07 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   177ec:	2400      	movs	r4, #0
				break;
   177ee:	f7ff ba26 	b.w	16c3e <handleParameter+0x1a>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_GCONF, TMC5072_ENC2_ENABLE_MASK, TMC5072_ENC2_ENABLE_SHIFT, (*value) ? 1 : 0);
   177f2:	f00c fa10 	bl	23c16 <tmc5072_readInt>
   177f6:	682b      	ldr	r3, [r5, #0]
   177f8:	2b00      	cmp	r3, #0
   177fa:	bf18      	it	ne
   177fc:	2320      	movne	r3, #32
   177fe:	f020 0220 	bic.w	r2, r0, #32
   17802:	431a      	orrs	r2, r3
   17804:	481d      	ldr	r0, [pc, #116]	; (1787c <handleParameter+0xc58>)
   17806:	2100      	movs	r1, #0
   17808:	f00c f9f7 	bl	23bfa <tmc5072_writeInt>
				TMC5072_FIELD_WRITE(motorToIC(motor), TMC5072_GCONF, TMC5072_ENC2_REFSEL_MASK, TMC5072_ENC2_REFSEL_SHIFT, (*value) ? 0 : 1);
   1780c:	2100      	movs	r1, #0
   1780e:	481b      	ldr	r0, [pc, #108]	; (1787c <handleParameter+0xc58>)
   17810:	f00c fa01 	bl	23c16 <tmc5072_readInt>
   17814:	682b      	ldr	r3, [r5, #0]
   17816:	2b00      	cmp	r3, #0
   17818:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1781c:	bf0c      	ite	eq
   1781e:	2240      	moveq	r2, #64	; 0x40
   17820:	2200      	movne	r2, #0
   17822:	4302      	orrs	r2, r0
   17824:	2100      	movs	r1, #0
   17826:	4815      	ldr	r0, [pc, #84]	; (1787c <handleParameter+0xc58>)
   17828:	f00c f9e7 	bl	23bfa <tmc5072_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1782c:	2400      	movs	r4, #0
				break;
   1782e:	f7ff ba06 	b.w	16c3e <handleParameter+0x1a>
		return TMC_ERROR_MOTOR;
   17832:	2408      	movs	r4, #8
   17834:	f7ff ba03 	b.w	16c3e <handleParameter+0x1a>
	switch(type)
   17838:	2404      	movs	r4, #4
   1783a:	f7ff ba00 	b.w	16c3e <handleParameter+0x1a>
   1783e:	2404      	movs	r4, #4
   17840:	f7ff b9fd 	b.w	16c3e <handleParameter+0x1a>
   17844:	2404      	movs	r4, #4
   17846:	f7ff b9fa 	b.w	16c3e <handleParameter+0x1a>
			errors |= TMC_ERROR_TYPE;
   1784a:	2404      	movs	r4, #4
   1784c:	f7ff b9f7 	b.w	16c3e <handleParameter+0x1a>
	uint32_t errors = TMC_ERROR_NONE;
   17850:	2400      	movs	r4, #0
   17852:	f7ff b9f4 	b.w	16c3e <handleParameter+0x1a>
			errors |= TMC_ERROR_TYPE;
   17856:	2404      	movs	r4, #4
   17858:	f7ff b9f1 	b.w	16c3e <handleParameter+0x1a>
   1785c:	2404      	movs	r4, #4
   1785e:	f7ff b9ee 	b.w	16c3e <handleParameter+0x1a>
   17862:	2404      	movs	r4, #4
   17864:	f7ff b9eb 	b.w	16c3e <handleParameter+0x1a>
   17868:	2404      	movs	r4, #4
   1786a:	f7ff b9e8 	b.w	16c3e <handleParameter+0x1a>
   1786e:	2404      	movs	r4, #4
   17870:	f7ff b9e5 	b.w	16c3e <handleParameter+0x1a>
   17874:	2404      	movs	r4, #4
   17876:	f7ff b9e2 	b.w	16c3e <handleParameter+0x1a>
   1787a:	bf00      	nop
   1787c:	1fff39fc 	.word	0x1fff39fc

00017880 <SAP>:
{
   17880:	b507      	push	{r0, r1, r2, lr}
   17882:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   17884:	ab01      	add	r3, sp, #4
   17886:	4602      	mov	r2, r0
   17888:	2001      	movs	r0, #1
   1788a:	f7ff f9cb 	bl	16c24 <handleParameter>
}
   1788e:	b003      	add	sp, #12
   17890:	f85d fb04 	ldr.w	pc, [sp], #4

00017894 <GAP>:
{
   17894:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   17896:	4602      	mov	r2, r0
   17898:	2000      	movs	r0, #0
   1789a:	f7ff b9c3 	b.w	16c24 <handleParameter>

0001789e <moveBy>:
{
   1789e:	b510      	push	{r4, lr}
   178a0:	4604      	mov	r4, r0
	tmc5072_moveBy(motorToIC(motor), motor, vmax_position[motor], ticks);
   178a2:	4805      	ldr	r0, [pc, #20]	; (178b8 <moveBy+0x1a>)
   178a4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
{
   178a8:	460b      	mov	r3, r1
	tmc5072_moveBy(motorToIC(motor), motor, vmax_position[motor], ticks);
   178aa:	f8d2 2298 	ldr.w	r2, [r2, #664]	; 0x298
   178ae:	4621      	mov	r1, r4
   178b0:	f00c fb13 	bl	23eda <tmc5072_moveBy>
}
   178b4:	2000      	movs	r0, #0
   178b6:	bd10      	pop	{r4, pc}
   178b8:	1fff39fc 	.word	0x1fff39fc

000178bc <moveTo>:
{
   178bc:	b510      	push	{r4, lr}
   178be:	4604      	mov	r4, r0
	tmc5072_moveTo(motorToIC(motor), motor, position, vmax_position[motor]);
   178c0:	4805      	ldr	r0, [pc, #20]	; (178d8 <moveTo+0x1c>)
   178c2:	eb00 0384 	add.w	r3, r0, r4, lsl #2
{
   178c6:	460a      	mov	r2, r1
	tmc5072_moveTo(motorToIC(motor), motor, position, vmax_position[motor]);
   178c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
   178cc:	4621      	mov	r1, r4
   178ce:	f00c fae6 	bl	23e9e <tmc5072_moveTo>
}
   178d2:	2000      	movs	r0, #0
   178d4:	bd10      	pop	{r4, pc}
   178d6:	bf00      	nop
   178d8:	1fff39fc 	.word	0x1fff39fc

000178dc <stop>:
{
   178dc:	b508      	push	{r3, lr}
   178de:	4601      	mov	r1, r0
	tmc5072_stop(motorToIC(motor), motor);
   178e0:	4802      	ldr	r0, [pc, #8]	; (178ec <stop+0x10>)
   178e2:	f00c fad9 	bl	23e98 <tmc5072_stop>
}
   178e6:	2000      	movs	r0, #0
   178e8:	bd08      	pop	{r3, pc}
   178ea:	bf00      	nop
   178ec:	1fff39fc 	.word	0x1fff39fc

000178f0 <left>:
{
   178f0:	b508      	push	{r3, lr}
   178f2:	460a      	mov	r2, r1
	tmc5072_left(motorToIC(motor), motor, velocity);
   178f4:	4601      	mov	r1, r0
   178f6:	4802      	ldr	r0, [pc, #8]	; (17900 <left+0x10>)
   178f8:	f00c facb 	bl	23e92 <tmc5072_left>
}
   178fc:	2000      	movs	r0, #0
   178fe:	bd08      	pop	{r3, pc}
   17900:	1fff39fc 	.word	0x1fff39fc

00017904 <right>:
{
   17904:	b508      	push	{r3, lr}
   17906:	460a      	mov	r2, r1
	tmc5072_right(motorToIC(motor), motor, velocity);
   17908:	4601      	mov	r1, r0
   1790a:	4802      	ldr	r0, [pc, #8]	; (17914 <right+0x10>)
   1790c:	f00c fabf 	bl	23e8e <tmc5072_right>
}
   17910:	2000      	movs	r0, #0
   17912:	bd08      	pop	{r3, pc}
   17914:	1fff39fc 	.word	0x1fff39fc

00017918 <rotate>:
{
   17918:	b508      	push	{r3, lr}
   1791a:	460a      	mov	r2, r1
	tmc5072_rotate(motorToIC(motor), motor, velocity);
   1791c:	4601      	mov	r1, r0
   1791e:	4802      	ldr	r0, [pc, #8]	; (17928 <rotate+0x10>)
   17920:	f00c fa97 	bl	23e52 <tmc5072_rotate>
}
   17924:	2000      	movs	r0, #0
   17926:	bd08      	pop	{r3, pc}
   17928:	1fff39fc 	.word	0x1fff39fc

0001792c <restore>:
	return tmc5072_reset(&TMC5072);
}

static uint8_t restore()
{
	return tmc5072_restore(&TMC5072);
   1792c:	4801      	ldr	r0, [pc, #4]	; (17934 <restore+0x8>)
   1792e:	f00c ba78 	b.w	23e22 <tmc5072_restore>
   17932:	bf00      	nop
   17934:	1fff39fc 	.word	0x1fff39fc

00017938 <reset>:
{
   17938:	b508      	push	{r3, lr}
		if(tmc5072_readInt(motorToIC(motor), TMC5072_VACTUAL(motor)) != 0)
   1793a:	4808      	ldr	r0, [pc, #32]	; (1795c <reset+0x24>)
   1793c:	2122      	movs	r1, #34	; 0x22
   1793e:	f00c f96a 	bl	23c16 <tmc5072_readInt>
   17942:	b948      	cbnz	r0, 17958 <reset+0x20>
   17944:	4805      	ldr	r0, [pc, #20]	; (1795c <reset+0x24>)
   17946:	2142      	movs	r1, #66	; 0x42
   17948:	f00c f965 	bl	23c16 <tmc5072_readInt>
   1794c:	b920      	cbnz	r0, 17958 <reset+0x20>
}
   1794e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tmc5072_reset(&TMC5072);
   17952:	4802      	ldr	r0, [pc, #8]	; (1795c <reset+0x24>)
   17954:	f00c ba4e 	b.w	23df4 <tmc5072_reset>
}
   17958:	2000      	movs	r0, #0
   1795a:	bd08      	pop	{r3, pc}
   1795c:	1fff39fc 	.word	0x1fff39fc

00017960 <userFunction>:
	switch(type)
   17960:	2801      	cmp	r0, #1
{
   17962:	b538      	push	{r3, r4, r5, lr}
   17964:	4614      	mov	r4, r2
	switch(type)
   17966:	d010      	beq.n	1798a <userFunction+0x2a>
   17968:	2802      	cmp	r0, #2
   1796a:	d01b      	beq.n	179a4 <userFunction+0x44>
   1796c:	bb10      	cbnz	r0, 179b4 <userFunction+0x54>
		if(*value)
   1796e:	4b12      	ldr	r3, [pc, #72]	; (179b8 <userFunction+0x58>)
   17970:	4a12      	ldr	r2, [pc, #72]	; (179bc <userFunction+0x5c>)
   17972:	68db      	ldr	r3, [r3, #12]
   17974:	6824      	ldr	r4, [r4, #0]
   17976:	681b      	ldr	r3, [r3, #0]
   17978:	f8d2 02ac 	ldr.w	r0, [r2, #684]	; 0x2ac
   1797c:	b11c      	cbz	r4, 17986 <userFunction+0x26>
			HAL.IOs->config->setHigh(Pins.SWSEL);
   1797e:	695b      	ldr	r3, [r3, #20]
			HAL.IOs->config->setLow(Pins.SWSEL);
   17980:	4798      	blx	r3
	uint32_t errors = 0;
   17982:	2000      	movs	r0, #0
}
   17984:	bd38      	pop	{r3, r4, r5, pc}
			HAL.IOs->config->setLow(Pins.SWSEL);
   17986:	699b      	ldr	r3, [r3, #24]
   17988:	e7fa      	b.n	17980 <userFunction+0x20>
		*value = (HAL.IOs->config->isHigh(Pins.INT_ENCA))? 1 : 0;
   1798a:	4b0b      	ldr	r3, [pc, #44]	; (179b8 <userFunction+0x58>)
   1798c:	4a0b      	ldr	r2, [pc, #44]	; (179bc <userFunction+0x5c>)
   1798e:	68db      	ldr	r3, [r3, #12]
   17990:	f8d2 02a4 	ldr.w	r0, [r2, #676]	; 0x2a4
   17994:	681b      	ldr	r3, [r3, #0]
   17996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.PP_ENCB))? 1 : 0;
   17998:	4798      	blx	r3
   1799a:	3800      	subs	r0, #0
   1799c:	bf18      	it	ne
   1799e:	2001      	movne	r0, #1
   179a0:	6020      	str	r0, [r4, #0]
   179a2:	e7ee      	b.n	17982 <userFunction+0x22>
   179a4:	4b04      	ldr	r3, [pc, #16]	; (179b8 <userFunction+0x58>)
   179a6:	4a05      	ldr	r2, [pc, #20]	; (179bc <userFunction+0x5c>)
   179a8:	68db      	ldr	r3, [r3, #12]
   179aa:	f8d2 02a8 	ldr.w	r0, [r2, #680]	; 0x2a8
   179ae:	681b      	ldr	r3, [r3, #0]
   179b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   179b2:	e7f1      	b.n	17998 <userFunction+0x38>
	switch(type)
   179b4:	2004      	movs	r0, #4
	return errors;
   179b6:	e7e5      	b.n	17984 <userFunction+0x24>
   179b8:	00029d1c 	.word	0x00029d1c
   179bc:	1fff39fc 	.word	0x1fff39fc

000179c0 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   179c0:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   179c2:	bf04      	itt	eq
   179c4:	4b0c      	ldreq	r3, [pc, #48]	; (179f8 <enableDriver+0x38>)
   179c6:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   179ca:	b938      	cbnz	r0, 179dc <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN);
   179cc:	4b0b      	ldr	r3, [pc, #44]	; (179fc <enableDriver+0x3c>)
   179ce:	68db      	ldr	r3, [r3, #12]
   179d0:	681b      	ldr	r3, [r3, #0]
   179d2:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   179d4:	4a0a      	ldr	r2, [pc, #40]	; (17a00 <enableDriver+0x40>)
   179d6:	f8d2 02a0 	ldr.w	r0, [r2, #672]	; 0x2a0
   179da:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   179dc:	2801      	cmp	r0, #1
   179de:	d109      	bne.n	179f4 <enableDriver+0x34>
   179e0:	4b05      	ldr	r3, [pc, #20]	; (179f8 <enableDriver+0x38>)
   179e2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   179e6:	2b01      	cmp	r3, #1
   179e8:	d104      	bne.n	179f4 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN);
   179ea:	4b04      	ldr	r3, [pc, #16]	; (179fc <enableDriver+0x3c>)
   179ec:	68db      	ldr	r3, [r3, #12]
   179ee:	681b      	ldr	r3, [r3, #0]
   179f0:	699b      	ldr	r3, [r3, #24]
   179f2:	e7ef      	b.n	179d4 <enableDriver+0x14>
}
   179f4:	4770      	bx	lr
   179f6:	bf00      	nop
   179f8:	1fff5e88 	.word	0x1fff5e88
   179fc:	00029d1c 	.word	0x00029d1c
   17a00:	1fff39fc 	.word	0x1fff39fc

00017a04 <deInit>:
{
   17a04:	b570      	push	{r4, r5, r6, lr}
	enableDriver(DRIVER_DISABLE);
   17a06:	2000      	movs	r0, #0
   17a08:	f7ff ffda 	bl	179c0 <enableDriver>
	HAL.IOs->config->reset(Pins.DRV_ENN);
   17a0c:	4b13      	ldr	r3, [pc, #76]	; (17a5c <deInit+0x58>)
   17a0e:	4c14      	ldr	r4, [pc, #80]	; (17a60 <deInit+0x5c>)
   17a10:	68dd      	ldr	r5, [r3, #12]
   17a12:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   17a16:	682b      	ldr	r3, [r5, #0]
   17a18:	689b      	ldr	r3, [r3, #8]
   17a1a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.INT_ENCA);
   17a1c:	682b      	ldr	r3, [r5, #0]
   17a1e:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   17a22:	689b      	ldr	r3, [r3, #8]
   17a24:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.PP_ENCB);
   17a26:	682b      	ldr	r3, [r5, #0]
   17a28:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   17a2c:	689b      	ldr	r3, [r3, #8]
   17a2e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWION);
   17a30:	682b      	ldr	r3, [r5, #0]
   17a32:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   17a36:	689b      	ldr	r3, [r3, #8]
   17a38:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP1);
   17a3a:	682b      	ldr	r3, [r5, #0]
   17a3c:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   17a40:	689b      	ldr	r3, [r3, #8]
   17a42:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWIOP2);
   17a44:	682b      	ldr	r3, [r5, #0]
   17a46:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   17a4a:	689b      	ldr	r3, [r3, #8]
   17a4c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWSEL);
   17a4e:	682b      	ldr	r3, [r5, #0]
   17a50:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   17a54:	689b      	ldr	r3, [r3, #8]
};
   17a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.SWSEL);
   17a5a:	4718      	bx	r3
   17a5c:	00029d1c 	.word	0x00029d1c
   17a60:	1fff39fc 	.word	0x1fff39fc

00017a64 <configCallback>:

static void configCallback(TMC5072TypeDef *tmc5072, ConfigState state)
{
	if(state == CONFIG_RESET)
   17a64:	2901      	cmp	r1, #1
{
   17a66:	b510      	push	{r4, lr}
   17a68:	4604      	mov	r4, r0
	if(state == CONFIG_RESET)
   17a6a:	d10d      	bne.n	17a88 <configCallback+0x24>
	{	// Change hardware-preset registers here
		for(uint8_t motor = 0; motor < TMC5072_MOTORS; motor++)
			tmc5072_writeInt(tmc5072, TMC5072_PWMCONF(motor), 0x000504C8);
   17a6c:	4a07      	ldr	r2, [pc, #28]	; (17a8c <configCallback+0x28>)
   17a6e:	2110      	movs	r1, #16
   17a70:	f00c f8c3 	bl	23bfa <tmc5072_writeInt>
   17a74:	4620      	mov	r0, r4
   17a76:	4a05      	ldr	r2, [pc, #20]	; (17a8c <configCallback+0x28>)
   17a78:	2118      	movs	r1, #24
   17a7a:	f00c f8be 	bl	23bfa <tmc5072_writeInt>

		// Fill missing shadow registers (hardware preset registers)
		tmc5072_fillShadowRegisters(&TMC5072);
	}
}
   17a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tmc5072_fillShadowRegisters(&TMC5072);
   17a82:	4803      	ldr	r0, [pc, #12]	; (17a90 <configCallback+0x2c>)
   17a84:	f00c b916 	b.w	23cb4 <tmc5072_fillShadowRegisters>
}
   17a88:	bd10      	pop	{r4, pc}
   17a8a:	bf00      	nop
   17a8c:	000504c8 	.word	0x000504c8
   17a90:	1fff39fc 	.word	0x1fff39fc

00017a94 <tmc5072_readWriteArray>:
	return TMC5072_SPIChannel;
   17a94:	4b03      	ldr	r3, [pc, #12]	; (17aa4 <tmc5072_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   17a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
{
   17a9a:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   17a9c:	68db      	ldr	r3, [r3, #12]
   17a9e:	4611      	mov	r1, r2
   17aa0:	4718      	bx	r3
   17aa2:	bf00      	nop
   17aa4:	1fff39fc 	.word	0x1fff39fc

00017aa8 <TMC5072_init>:

void TMC5072_init(void)
{
   17aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc5072_init(&TMC5072, 0, Evalboards.ch1.config, &tmc5072_defaultRegisterResetState[0]);
   17aaa:	4c4a      	ldr	r4, [pc, #296]	; (17bd4 <TMC5072_init+0x12c>)
   17aac:	4d4a      	ldr	r5, [pc, #296]	; (17bd8 <TMC5072_init+0x130>)
   17aae:	69a2      	ldr	r2, [r4, #24]
   17ab0:	4b4a      	ldr	r3, [pc, #296]	; (17bdc <TMC5072_init+0x134>)
	tmc5072_setCallback(&TMC5072, configCallback);

	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   17ab2:	4f4b      	ldr	r7, [pc, #300]	; (17be0 <TMC5072_init+0x138>)
	tmc5072_init(&TMC5072, 0, Evalboards.ch1.config, &tmc5072_defaultRegisterResetState[0]);
   17ab4:	4628      	mov	r0, r5
   17ab6:	2100      	movs	r1, #0
   17ab8:	f00c f8da 	bl	23c70 <tmc5072_init>
	tmc5072_setCallback(&TMC5072, configCallback);
   17abc:	4949      	ldr	r1, [pc, #292]	; (17be4 <TMC5072_init+0x13c>)
   17abe:	4628      	mov	r0, r5
   17ac0:	f00c f9c3 	bl	23e4a <tmc5072_setCallback>
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   17ac4:	68fe      	ldr	r6, [r7, #12]
   17ac6:	6873      	ldr	r3, [r6, #4]
	Pins.INT_ENCA  = &HAL.IOs->pins->DIO5;
   17ac8:	f503 7284 	add.w	r2, r3, #264	; 0x108
   17acc:	f8c5 22a4 	str.w	r2, [r5, #676]	; 0x2a4
	Pins.PP_ENCB   = &HAL.IOs->pins->DIO6;
   17ad0:	f503 7294 	add.w	r2, r3, #296	; 0x128
   17ad4:	f8c5 22a8 	str.w	r2, [r5, #680]	; 0x2a8

	Pins.SWSEL     = &HAL.IOs->pins->DIO16;
   17ad8:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
   17adc:	f8c5 22ac 	str.w	r2, [r5, #684]	; 0x2ac
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   17ae0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   17ae4:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.SWIOP1    = &HAL.IOs->pins->DIO17;
   17ae8:	f8c5 22b0 	str.w	r2, [r5, #688]	; 0x2b0
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   17aec:	f503 6281 	add.w	r2, r3, #1032	; 0x408
	Pins.SWION     = &HAL.IOs->pins->DIO19;
   17af0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
   17af4:	f8c5 32b8 	str.w	r3, [r5, #696]	; 0x2b8

	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   17af8:	6833      	ldr	r3, [r6, #0]
	Pins.SWIOP2    = &HAL.IOs->pins->DIO18;
   17afa:	f8c5 22b4 	str.w	r2, [r5, #692]	; 0x2b4
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   17afe:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN   = &HAL.IOs->pins->DIO0;
   17b00:	f8c5 02a0 	str.w	r0, [r5, #672]	; 0x2a0
	HAL.IOs->config->toOutput(Pins.DRV_ENN);
   17b04:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SWSEL);
   17b06:	6833      	ldr	r3, [r6, #0]
   17b08:	f8d5 02ac 	ldr.w	r0, [r5, #684]	; 0x2ac
   17b0c:	68db      	ldr	r3, [r3, #12]
   17b0e:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.SWSEL);
   17b10:	6833      	ldr	r3, [r6, #0]
   17b12:	f8d5 02ac 	ldr.w	r0, [r5, #684]	; 0x2ac
   17b16:	699b      	ldr	r3, [r3, #24]
   17b18:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.INT_ENCA);
   17b1a:	6833      	ldr	r3, [r6, #0]
   17b1c:	f8d5 02a4 	ldr.w	r0, [r5, #676]	; 0x2a4
   17b20:	691b      	ldr	r3, [r3, #16]
   17b22:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.PP_ENCB);
   17b24:	6833      	ldr	r3, [r6, #0]
   17b26:	f8d5 02a8 	ldr.w	r0, [r5, #680]	; 0x2a8
   17b2a:	691b      	ldr	r3, [r3, #16]
   17b2c:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.SWION);
   17b2e:	6833      	ldr	r3, [r6, #0]
   17b30:	f8d5 02b8 	ldr.w	r0, [r5, #696]	; 0x2b8
   17b34:	691b      	ldr	r3, [r3, #16]
   17b36:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.SWIOP1);
   17b38:	6833      	ldr	r3, [r6, #0]
   17b3a:	f8d5 02b0 	ldr.w	r0, [r5, #688]	; 0x2b0
   17b3e:	691b      	ldr	r3, [r3, #16]
   17b40:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWIOP2);
   17b42:	6833      	ldr	r3, [r6, #0]
   17b44:	f8d5 02b4 	ldr.w	r0, [r5, #692]	; 0x2b4
   17b48:	691b      	ldr	r3, [r3, #16]
   17b4a:	4798      	blx	r3

	TMC5072_SPIChannel = &HAL.SPI->ch1;
	TMC5072_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   17b4c:	6873      	ldr	r3, [r6, #4]
	TMC5072_SPIChannel = &HAL.SPI->ch1;
   17b4e:	693a      	ldr	r2, [r7, #16]
   17b50:	f8c5 22bc 	str.w	r2, [r5, #700]	; 0x2bc
	TMC5072_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   17b54:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   17b58:	6053      	str	r3, [r2, #4]

	Evalboards.ch1.config->reset        = reset;
   17b5a:	69a3      	ldr	r3, [r4, #24]
   17b5c:	4a22      	ldr	r2, [pc, #136]	; (17be8 <TMC5072_init+0x140>)
   17b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   17b62:	4a22      	ldr	r2, [pc, #136]	; (17bec <TMC5072_init+0x144>)
   17b64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   17b68:	2201      	movs	r2, #1
   17b6a:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   17b6c:	4b20      	ldr	r3, [pc, #128]	; (17bf0 <TMC5072_init+0x148>)
   17b6e:	6263      	str	r3, [r4, #36]	; 0x24
	Evalboards.ch1.right                = right;
   17b70:	4b20      	ldr	r3, [pc, #128]	; (17bf4 <TMC5072_init+0x14c>)
   17b72:	6223      	str	r3, [r4, #32]
	Evalboards.ch1.left                 = left;
   17b74:	4b20      	ldr	r3, [pc, #128]	; (17bf8 <TMC5072_init+0x150>)
   17b76:	61e3      	str	r3, [r4, #28]
	Evalboards.ch1.stop                 = stop;
   17b78:	4b20      	ldr	r3, [pc, #128]	; (17bfc <TMC5072_init+0x154>)
   17b7a:	62a3      	str	r3, [r4, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   17b7c:	4b20      	ldr	r3, [pc, #128]	; (17c00 <TMC5072_init+0x158>)
   17b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   17b80:	4b20      	ldr	r3, [pc, #128]	; (17c04 <TMC5072_init+0x15c>)
   17b82:	63a3      	str	r3, [r4, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   17b84:	4b20      	ldr	r3, [pc, #128]	; (17c08 <TMC5072_init+0x160>)
   17b86:	62e3      	str	r3, [r4, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   17b88:	4b20      	ldr	r3, [pc, #128]	; (17c0c <TMC5072_init+0x164>)
   17b8a:	6323      	str	r3, [r4, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   17b8c:	4b20      	ldr	r3, [pc, #128]	; (17c10 <TMC5072_init+0x168>)
   17b8e:	64e3      	str	r3, [r4, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   17b90:	4b20      	ldr	r3, [pc, #128]	; (17c14 <TMC5072_init+0x16c>)
   17b92:	64a3      	str	r3, [r4, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   17b94:	4b20      	ldr	r3, [pc, #128]	; (17c18 <TMC5072_init+0x170>)
   17b96:	65a3      	str	r3, [r4, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   17b98:	4b20      	ldr	r3, [pc, #128]	; (17c1c <TMC5072_init+0x174>)
   17b9a:	6563      	str	r3, [r4, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   17b9c:	4b20      	ldr	r3, [pc, #128]	; (17c20 <TMC5072_init+0x178>)
   17b9e:	6523      	str	r3, [r4, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   17ba0:	4b20      	ldr	r3, [pc, #128]	; (17c24 <TMC5072_init+0x17c>)
   17ba2:	6663      	str	r3, [r4, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   17ba4:	4b20      	ldr	r3, [pc, #128]	; (17c28 <TMC5072_init+0x180>)
   17ba6:	6623      	str	r3, [r4, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC5072_MOTORS;
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   17ba8:	2232      	movs	r2, #50	; 0x32
   17baa:	f44f 738c 	mov.w	r3, #280	; 0x118
   17bae:	e9c4 3203 	strd	r3, r2, [r4, #12]
	Evalboards.ch1.deInit               = deInit;
   17bb2:	4b1e      	ldr	r3, [pc, #120]	; (17c2c <TMC5072_init+0x184>)
   17bb4:	65e3      	str	r3, [r4, #92]	; 0x5c

	for(uint8_t motor = 0; motor < TMC5072_MOTORS; motor++)
	{
		vmax_position[motor] = motorToIC(motor)->config->shadowRegister[TMC5072_VMAX(motor)];
   17bb6:	682b      	ldr	r3, [r5, #0]
	Evalboards.ch1.numberOfMotors       = TMC5072_MOTORS;
   17bb8:	2002      	movs	r0, #2
		vmax_position[motor] = motorToIC(motor)->config->shadowRegister[TMC5072_VMAX(motor)];
   17bba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   17bbe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
	Evalboards.ch1.numberOfMotors       = TMC5072_MOTORS;
   17bc2:	7520      	strb	r0, [r4, #20]
		vmax_position[motor] = motorToIC(motor)->config->shadowRegister[TMC5072_VMAX(motor)];
   17bc4:	f8c5 2298 	str.w	r2, [r5, #664]	; 0x298
   17bc8:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
	}

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
};
   17bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   17bd0:	e6f6      	b.n	179c0 <enableDriver>
   17bd2:	bf00      	nop
   17bd4:	1fff5e88 	.word	0x1fff5e88
   17bd8:	1fff39fc 	.word	0x1fff39fc
   17bdc:	000296f8 	.word	0x000296f8
   17be0:	00029d1c 	.word	0x00029d1c
   17be4:	00017a65 	.word	0x00017a65
   17be8:	00017939 	.word	0x00017939
   17bec:	0001792d 	.word	0x0001792d
   17bf0:	00017919 	.word	0x00017919
   17bf4:	00017905 	.word	0x00017905
   17bf8:	000178f1 	.word	0x000178f1
   17bfc:	000178dd 	.word	0x000178dd
   17c00:	00017895 	.word	0x00017895
   17c04:	00017881 	.word	0x00017881
   17c08:	000178bd 	.word	0x000178bd
   17c0c:	0001789f 	.word	0x0001789f
   17c10:	00016c19 	.word	0x00016c19
   17c14:	00016c05 	.word	0x00016c05
   17c18:	00016be5 	.word	0x00016be5
   17c1c:	00017961 	.word	0x00017961
   17c20:	00016bbd 	.word	0x00016bbd
   17c24:	000179c1 	.word	0x000179c1
   17c28:	00016bd9 	.word	0x00016bd9
   17c2c:	00017a05 	.word	0x00017a05

00017c30 <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= TMC5130_MOTORS)
   17c30:	b918      	cbnz	r0, 17c3a <getMeasuredSpeed+0xa>
		return TMC_ERROR_MOTOR;

	*value = TMC5130.velocity;
   17c32:	4b03      	ldr	r3, [pc, #12]	; (17c40 <getMeasuredSpeed+0x10>)
   17c34:	685b      	ldr	r3, [r3, #4]
   17c36:	600b      	str	r3, [r1, #0]

	return TMC_ERROR_NONE;
   17c38:	4770      	bx	lr
		return TMC_ERROR_MOTOR;
   17c3a:	2008      	movs	r0, #8
}
   17c3c:	4770      	bx	lr
   17c3e:	bf00      	nop
   17c40:	1fff3cc8 	.word	0x1fff3cc8

00017c44 <checkErrors>:

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);

	Evalboards.ch1.errors = 0;
   17c44:	4b01      	ldr	r3, [pc, #4]	; (17c4c <checkErrors+0x8>)
   17c46:	2200      	movs	r2, #0
   17c48:	609a      	str	r2, [r3, #8]
}
   17c4a:	4770      	bx	lr
   17c4c:	1fff5e88 	.word	0x1fff5e88

00017c50 <userFunction>:
	uint32_t buffer;
	uint32_t errors = 0;

	UNUSED(motor);

	switch(type)
   17c50:	2807      	cmp	r0, #7
{
   17c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c54:	4614      	mov	r4, r2
	switch(type)
   17c56:	d808      	bhi.n	17c6a <userFunction+0x1a>
   17c58:	3801      	subs	r0, #1
   17c5a:	2806      	cmp	r0, #6
   17c5c:	d80b      	bhi.n	17c76 <userFunction+0x26>
   17c5e:	e8df f000 	tbb	[pc, r0]
   17c62:	5232      	.short	0x5232
   17c64:	92856450 	.word	0x92856450
   17c68:	9a          	.byte	0x9a
   17c69:	00          	.byte	0x00
   17c6a:	28fc      	cmp	r0, #252	; 0xfc
   17c6c:	f000 809f 	beq.w	17dae <userFunction+0x15e>
   17c70:	2404      	movs	r4, #4
	default:
		errors |= TMC_ERROR_TYPE;
		break;
	}
	return errors;
}
   17c72:	4620      	mov	r0, r4
   17c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!(*value & ~3))
   17c76:	6812      	ldr	r2, [r2, #0]
   17c78:	f032 0303 	bics.w	r3, r2, #3
   17c7c:	f040 80a8 	bne.w	17dd0 <userFunction+0x180>
			if(*value & (1<<0))
   17c80:	4b54      	ldr	r3, [pc, #336]	; (17dd4 <userFunction+0x184>)
   17c82:	4d55      	ldr	r5, [pc, #340]	; (17dd8 <userFunction+0x188>)
   17c84:	68de      	ldr	r6, [r3, #12]
   17c86:	f8d5 0294 	ldr.w	r0, [r5, #660]	; 0x294
   17c8a:	6833      	ldr	r3, [r6, #0]
   17c8c:	07d2      	lsls	r2, r2, #31
   17c8e:	d50b      	bpl.n	17ca8 <userFunction+0x58>
				HAL.IOs->config->toInput(Pins.REFR_UC); // pull up -> set it to floating causes high
   17c90:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.REFR_UC);
   17c92:	4798      	blx	r3
			if(*value & (1<<1))
   17c94:	6824      	ldr	r4, [r4, #0]
   17c96:	6832      	ldr	r2, [r6, #0]
   17c98:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
   17c9c:	f014 0402 	ands.w	r4, r4, #2
   17ca0:	d009      	beq.n	17cb6 <userFunction+0x66>
				HAL.IOs->config->toInput(Pins.REFL_UC); // pull up -> set it to floating causes high
   17ca2:	6913      	ldr	r3, [r2, #16]
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   17ca4:	4798      	blx	r3
   17ca6:	e02c      	b.n	17d02 <userFunction+0xb2>
				HAL.IOs->config->toOutput(Pins.REFR_UC);
   17ca8:	68db      	ldr	r3, [r3, #12]
   17caa:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFR_UC);
   17cac:	6833      	ldr	r3, [r6, #0]
   17cae:	f8d5 0294 	ldr.w	r0, [r5, #660]	; 0x294
   17cb2:	699b      	ldr	r3, [r3, #24]
   17cb4:	e7ed      	b.n	17c92 <userFunction+0x42>
				HAL.IOs->config->toOutput(Pins.REFL_UC);
   17cb6:	68d3      	ldr	r3, [r2, #12]
   17cb8:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFL_UC);
   17cba:	6833      	ldr	r3, [r6, #0]
   17cbc:	f8d5 0290 	ldr.w	r0, [r5, #656]	; 0x290
   17cc0:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   17cc2:	4798      	blx	r3
   17cc4:	e7d5      	b.n	17c72 <userFunction+0x22>
		if(*value <= 20000)
   17cc6:	6812      	ldr	r2, [r2, #0]
   17cc8:	f644 6320 	movw	r3, #20000	; 0x4e20
   17ccc:	429a      	cmp	r2, r3
   17cce:	dc7f      	bgt.n	17dd0 <userFunction+0x180>
			if(*value > 10000)
   17cd0:	4b41      	ldr	r3, [pc, #260]	; (17dd8 <userFunction+0x188>)
   17cd2:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
   17cd6:	4b3f      	ldr	r3, [pc, #252]	; (17dd4 <userFunction+0x184>)
   17cd8:	68db      	ldr	r3, [r3, #12]
   17cda:	f242 7110 	movw	r1, #10000	; 0x2710
   17cde:	681b      	ldr	r3, [r3, #0]
   17ce0:	428a      	cmp	r2, r1
				HAL.IOs->config->setHigh(Pins.AIN_REF_SW);
   17ce2:	bfcc      	ite	gt
   17ce4:	695b      	ldrgt	r3, [r3, #20]
				HAL.IOs->config->setLow(Pins.AIN_REF_SW);
   17ce6:	699b      	ldrle	r3, [r3, #24]
   17ce8:	4798      	blx	r3
			Timer.setDuty(TIMER_CHANNEL_1, *value % 10001);
   17cea:	6822      	ldr	r2, [r4, #0]
   17cec:	f242 7311 	movw	r3, #10001	; 0x2711
   17cf0:	fb92 f1f3 	sdiv	r1, r2, r3
   17cf4:	fb03 2111 	mls	r1, r3, r1, r2
   17cf8:	4b38      	ldr	r3, [pc, #224]	; (17ddc <userFunction+0x18c>)
   17cfa:	b289      	uxth	r1, r1
   17cfc:	689b      	ldr	r3, [r3, #8]
   17cfe:	2000      	movs	r0, #0
   17d00:	4798      	blx	r3
	uint32_t errors = 0;
   17d02:	2400      	movs	r4, #0
   17d04:	e7b5      	b.n	17c72 <userFunction+0x22>
		if(*value)
   17d06:	4b33      	ldr	r3, [pc, #204]	; (17dd4 <userFunction+0x184>)
   17d08:	6814      	ldr	r4, [r2, #0]
   17d0a:	68dd      	ldr	r5, [r3, #12]
   17d0c:	e9d5 3000 	ldrd	r3, r0, [r5]
   17d10:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   17d14:	b13c      	cbz	r4, 17d26 <userFunction+0xd6>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
   17d16:	68db      	ldr	r3, [r3, #12]
   17d18:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   17d1a:	e9d5 3000 	ldrd	r3, r0, [r5]
   17d1e:	699b      	ldr	r3, [r3, #24]
   17d20:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   17d24:	e7be      	b.n	17ca4 <userFunction+0x54>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
   17d26:	689b      	ldr	r3, [r3, #8]
   17d28:	e7cb      	b.n	17cc2 <userFunction+0x72>
		switch(buffer = *value)
   17d2a:	4b2a      	ldr	r3, [pc, #168]	; (17dd4 <userFunction+0x184>)
   17d2c:	4e2a      	ldr	r6, [pc, #168]	; (17dd8 <userFunction+0x188>)
   17d2e:	68df      	ldr	r7, [r3, #12]
   17d30:	6815      	ldr	r5, [r2, #0]
   17d32:	683b      	ldr	r3, [r7, #0]
   17d34:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   17d38:	b155      	cbz	r5, 17d50 <userFunction+0x100>
   17d3a:	2d01      	cmp	r5, #1
   17d3c:	d011      	beq.n	17d62 <userFunction+0x112>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   17d3e:	691b      	ldr	r3, [r3, #16]
   17d40:	4798      	blx	r3
			buffer = HAL.IOs->config->isHigh(Pins.ENCB_DCEN_CFG4);
   17d42:	683b      	ldr	r3, [r7, #0]
   17d44:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   17d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17d4a:	4798      	blx	r3
   17d4c:	4605      	mov	r5, r0
			break;
   17d4e:	e006      	b.n	17d5e <userFunction+0x10e>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   17d50:	68db      	ldr	r3, [r3, #12]
   17d52:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   17d54:	683b      	ldr	r3, [r7, #0]
   17d56:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   17d58:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   17d5c:	4798      	blx	r3
		*value = buffer;
   17d5e:	6025      	str	r5, [r4, #0]
		break;
   17d60:	e7cf      	b.n	17d02 <userFunction+0xb2>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   17d62:	68db      	ldr	r3, [r3, #12]
   17d64:	4798      	blx	r3
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   17d66:	683b      	ldr	r3, [r7, #0]
   17d68:	695b      	ldr	r3, [r3, #20]
   17d6a:	e7f5      	b.n	17d58 <userFunction+0x108>
		*value = (HAL.IOs->config->isHigh(Pins.SWN_DIAG0))? 1 : 0;
   17d6c:	4b19      	ldr	r3, [pc, #100]	; (17dd4 <userFunction+0x184>)
   17d6e:	4a1a      	ldr	r2, [pc, #104]	; (17dd8 <userFunction+0x188>)
   17d70:	68db      	ldr	r3, [r3, #12]
   17d72:	f8d2 02ac 	ldr.w	r0, [r2, #684]	; 0x2ac
   17d76:	681b      	ldr	r3, [r3, #0]
   17d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1 : 0;
   17d7a:	4798      	blx	r3
   17d7c:	3800      	subs	r0, #0
   17d7e:	bf18      	it	ne
   17d80:	2001      	movne	r0, #1
   17d82:	6020      	str	r0, [r4, #0]
		break;
   17d84:	e7bd      	b.n	17d02 <userFunction+0xb2>
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1 : 0;
   17d86:	4b13      	ldr	r3, [pc, #76]	; (17dd4 <userFunction+0x184>)
   17d88:	4a13      	ldr	r2, [pc, #76]	; (17dd8 <userFunction+0x188>)
   17d8a:	68db      	ldr	r3, [r3, #12]
   17d8c:	f8d2 02b0 	ldr.w	r0, [r2, #688]	; 0x2b0
   17d90:	681b      	ldr	r3, [r3, #0]
   17d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17d94:	e7f1      	b.n	17d7a <userFunction+0x12a>
		if(*value == 1)
   17d96:	4b10      	ldr	r3, [pc, #64]	; (17dd8 <userFunction+0x188>)
   17d98:	6812      	ldr	r2, [r2, #0]
   17d9a:	f8d3 02a8 	ldr.w	r0, [r3, #680]	; 0x2a8
   17d9e:	4b0d      	ldr	r3, [pc, #52]	; (17dd4 <userFunction+0x184>)
   17da0:	68db      	ldr	r3, [r3, #12]
   17da2:	681b      	ldr	r3, [r3, #0]
   17da4:	2a01      	cmp	r2, #1
			HAL.IOs->config->setHigh(Pins.SWSEL);
   17da6:	bf0c      	ite	eq
   17da8:	695b      	ldreq	r3, [r3, #20]
			HAL.IOs->config->setLow(Pins.SWSEL);
   17daa:	699b      	ldrne	r3, [r3, #24]
   17dac:	e77a      	b.n	17ca4 <userFunction+0x54>
		if(*value)
   17dae:	4b09      	ldr	r3, [pc, #36]	; (17dd4 <userFunction+0x184>)
   17db0:	4d09      	ldr	r5, [pc, #36]	; (17dd8 <userFunction+0x188>)
   17db2:	68de      	ldr	r6, [r3, #12]
   17db4:	6814      	ldr	r4, [r2, #0]
   17db6:	6833      	ldr	r3, [r6, #0]
   17db8:	f8d5 02a0 	ldr.w	r0, [r5, #672]	; 0x2a0
   17dbc:	b134      	cbz	r4, 17dcc <userFunction+0x17c>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   17dbe:	68db      	ldr	r3, [r3, #12]
   17dc0:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   17dc2:	6833      	ldr	r3, [r6, #0]
   17dc4:	f8d5 02a0 	ldr.w	r0, [r5, #672]	; 0x2a0
   17dc8:	699b      	ldr	r3, [r3, #24]
   17dca:	e76b      	b.n	17ca4 <userFunction+0x54>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   17dcc:	691b      	ldr	r3, [r3, #16]
   17dce:	e778      	b.n	17cc2 <userFunction+0x72>
			errors |= TMC_ERROR_VALUE;
   17dd0:	2410      	movs	r4, #16
	return errors;
   17dd2:	e74e      	b.n	17c72 <userFunction+0x22>
   17dd4:	00029d1c 	.word	0x00029d1c
   17dd8:	1fff3cc8 	.word	0x1fff3cc8
   17ddc:	1fff0ae0 	.word	0x1fff0ae0

00017de0 <deInit>:

static void deInit(void)
{
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   17de0:	4b22      	ldr	r3, [pc, #136]	; (17e6c <deInit+0x8c>)
{
   17de2:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   17de4:	68dd      	ldr	r5, [r3, #12]
   17de6:	4c22      	ldr	r4, [pc, #136]	; (17e70 <deInit+0x90>)
   17de8:	682b      	ldr	r3, [r5, #0]
   17dea:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   17dee:	699b      	ldr	r3, [r3, #24]
   17df0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.AIN_REF_PWM);
   17df2:	682b      	ldr	r3, [r5, #0]
   17df4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   17df8:	689b      	ldr	r3, [r3, #8]
   17dfa:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.AIN_REF_SW);
   17dfc:	682b      	ldr	r3, [r5, #0]
   17dfe:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   17e02:	689b      	ldr	r3, [r3, #8]
   17e04:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
   17e06:	682b      	ldr	r3, [r5, #0]
   17e08:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   17e0c:	689b      	ldr	r3, [r3, #8]
   17e0e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
   17e10:	682b      	ldr	r3, [r5, #0]
   17e12:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   17e16:	689b      	ldr	r3, [r3, #8]
   17e18:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCN_DCO);
   17e1a:	682b      	ldr	r3, [r5, #0]
   17e1c:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   17e20:	689b      	ldr	r3, [r3, #8]
   17e22:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFL_UC);
   17e24:	682b      	ldr	r3, [r5, #0]
   17e26:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   17e2a:	689b      	ldr	r3, [r3, #8]
   17e2c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFR_UC);
   17e2e:	682b      	ldr	r3, [r5, #0]
   17e30:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   17e34:	689b      	ldr	r3, [r3, #8]
   17e36:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWN_DIAG0);
   17e38:	682b      	ldr	r3, [r5, #0]
   17e3a:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   17e3e:	689b      	ldr	r3, [r3, #8]
   17e40:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWP_DIAG1);
   17e42:	682b      	ldr	r3, [r5, #0]
   17e44:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   17e48:	689b      	ldr	r3, [r3, #8]
   17e4a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWSEL);
   17e4c:	682b      	ldr	r3, [r5, #0]
   17e4e:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   17e52:	689b      	ldr	r3, [r3, #8]
   17e54:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
   17e56:	682b      	ldr	r3, [r5, #0]
   17e58:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   17e5c:	689b      	ldr	r3, [r3, #8]
   17e5e:	4798      	blx	r3

	Timer.deInit();
   17e60:	4b04      	ldr	r3, [pc, #16]	; (17e74 <deInit+0x94>)
};
   17e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.deInit();
   17e66:	685b      	ldr	r3, [r3, #4]
   17e68:	4718      	bx	r3
   17e6a:	bf00      	nop
   17e6c:	00029d1c 	.word	0x00029d1c
   17e70:	1fff3cc8 	.word	0x1fff3cc8
   17e74:	1fff0ae0 	.word	0x1fff0ae0

00017e78 <writeRegister>:
	tmc5130_writeInt(&TMC5130, address, value);
   17e78:	4801      	ldr	r0, [pc, #4]	; (17e80 <writeRegister+0x8>)
   17e7a:	f00c b878 	b.w	23f6e <tmc5130_writeInt>
   17e7e:	bf00      	nop
   17e80:	1fff3cc8 	.word	0x1fff3cc8

00017e84 <periodicJob>:
{
   17e84:	4601      	mov	r1, r0
	tmc5130_periodicJob(&TMC5130, tick);
   17e86:	4801      	ldr	r0, [pc, #4]	; (17e8c <periodicJob+0x8>)
   17e88:	f00c b925 	b.w	240d6 <tmc5130_periodicJob>
   17e8c:	1fff3cc8 	.word	0x1fff3cc8

00017e90 <readRegister>:
{
   17e90:	b510      	push	{r4, lr}
	*value = tmc5130_readInt(&TMC5130, address);
   17e92:	4803      	ldr	r0, [pc, #12]	; (17ea0 <readRegister+0x10>)
{
   17e94:	4614      	mov	r4, r2
	*value = tmc5130_readInt(&TMC5130, address);
   17e96:	f00c f878 	bl	23f8a <tmc5130_readInt>
   17e9a:	6020      	str	r0, [r4, #0]
}
   17e9c:	bd10      	pop	{r4, pc}
   17e9e:	bf00      	nop
   17ea0:	1fff3cc8 	.word	0x1fff3cc8

00017ea4 <handleParameter>:
{
   17ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ea6:	4606      	mov	r6, r0
   17ea8:	461d      	mov	r5, r3
	if(motor >= TMC5130_MOTORS)
   17eaa:	2900      	cmp	r1, #0
   17eac:	f040 863d 	bne.w	18b2a <handleParameter+0xc86>
	switch(type)
   17eb0:	2a22      	cmp	r2, #34	; 0x22
   17eb2:	d874      	bhi.n	17f9e <handleParameter+0xfa>
   17eb4:	2a22      	cmp	r2, #34	; 0x22
   17eb6:	f200 863e 	bhi.w	18b36 <handleParameter+0xc92>
   17eba:	e8df f012 	tbh	[pc, r2, lsl #1]
   17ebe:	0078      	.short	0x0078
   17ec0:	00960087 	.word	0x00960087
   17ec4:	00b500a5 	.word	0x00b500a5
   17ec8:	00e000d1 	.word	0x00e000d1
   17ecc:	011100f9 	.word	0x011100f9
   17ed0:	011d063c 	.word	0x011d063c
   17ed4:	0139012c 	.word	0x0139012c
   17ed8:	01730156 	.word	0x01730156
   17edc:	01910182 	.word	0x01910182
   17ee0:	01af01a0 	.word	0x01af01a0
   17ee4:	01cf01be 	.word	0x01cf01be
   17ee8:	063c01de 	.word	0x063c01de
   17eec:	021201ed 	.word	0x021201ed
   17ef0:	063c063c 	.word	0x063c063c
   17ef4:	023a0221 	.word	0x023a0221
   17ef8:	063c0253 	.word	0x063c0253
   17efc:	063c063c 	.word	0x063c063c
   17f00:	0275025b 	.word	0x0275025b
   17f04:	3a8c      	subs	r2, #140	; 0x8c
   17f06:	2a46      	cmp	r2, #70	; 0x46
   17f08:	f200 8612 	bhi.w	18b30 <handleParameter+0xc8c>
   17f0c:	e8df f012 	tbh	[pc, r2, lsl #1]
   17f10:	06100267 	.word	0x06100267
   17f14:	06100610 	.word	0x06100610
   17f18:	06100610 	.word	0x06100610
   17f1c:	06100610 	.word	0x06100610
   17f20:	06100610 	.word	0x06100610
   17f24:	06100610 	.word	0x06100610
   17f28:	06100610 	.word	0x06100610
   17f2c:	06100610 	.word	0x06100610
   17f30:	06100610 	.word	0x06100610
   17f34:	06100610 	.word	0x06100610
   17f38:	06100610 	.word	0x06100610
   17f3c:	02ce02b5 	.word	0x02ce02b5
   17f40:	030402e7 	.word	0x030402e7
   17f44:	03840342 	.word	0x03840342
   17f48:	03b4039c 	.word	0x03b4039c
   17f4c:	03e603cd 	.word	0x03e603cd
   17f50:	041703ff 	.word	0x041703ff
   17f54:	06100430 	.word	0x06100430
   17f58:	06100610 	.word	0x06100610
   17f5c:	04510610 	.word	0x04510610
   17f60:	047c046c 	.word	0x047c046c
   17f64:	061004bc 	.word	0x061004bc
   17f68:	04fd04e2 	.word	0x04fd04e2
   17f6c:	053f0518 	.word	0x053f0518
   17f70:	06100568 	.word	0x06100568
   17f74:	057f0610 	.word	0x057f0610
   17f78:	061005a0 	.word	0x061005a0
   17f7c:	06100610 	.word	0x06100610
   17f80:	06100610 	.word	0x06100610
   17f84:	06100610 	.word	0x06100610
   17f88:	06100610 	.word	0x06100610
   17f8c:	06100610 	.word	0x06100610
   17f90:	061005c0 	.word	0x061005c0
   17f94:	061005db 	.word	0x061005db
   17f98:	05e70610 	.word	0x05e70610
   17f9c:	05fc      	.short	0x05fc
   17f9e:	f102 0374 	add.w	r3, r2, #116	; 0x74
   17fa2:	b2db      	uxtb	r3, r3
   17fa4:	2b46      	cmp	r3, #70	; 0x46
   17fa6:	d9ad      	bls.n	17f04 <handleParameter+0x60>
   17fa8:	2404      	movs	r4, #4
}
   17faa:	4620      	mov	r0, r4
   17fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(readWrite == READ) {
   17fae:	b930      	cbnz	r0, 17fbe <handleParameter+0x11a>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XTARGET);
   17fb0:	48a9      	ldr	r0, [pc, #676]	; (18258 <handleParameter+0x3b4>)
   17fb2:	212d      	movs	r1, #45	; 0x2d
   17fb4:	f00b ffe9 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   17fb8:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XTARGET);
   17fba:	6028      	str	r0, [r5, #0]
   17fbc:	e7f5      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_XTARGET, *value);
   17fbe:	682a      	ldr	r2, [r5, #0]
   17fc0:	48a5      	ldr	r0, [pc, #660]	; (18258 <handleParameter+0x3b4>)
   17fc2:	212d      	movs	r1, #45	; 0x2d
   17fc4:	f00b ffd3 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17fc8:	2400      	movs	r4, #0
   17fca:	e7ee      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   17fcc:	b930      	cbnz	r0, 17fdc <handleParameter+0x138>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XACTUAL);
   17fce:	48a2      	ldr	r0, [pc, #648]	; (18258 <handleParameter+0x3b4>)
   17fd0:	2121      	movs	r1, #33	; 0x21
   17fd2:	f00b ffda 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   17fd6:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XACTUAL);
   17fd8:	6028      	str	r0, [r5, #0]
   17fda:	e7e6      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_XACTUAL, *value);
   17fdc:	682a      	ldr	r2, [r5, #0]
   17fde:	489e      	ldr	r0, [pc, #632]	; (18258 <handleParameter+0x3b4>)
   17fe0:	2121      	movs	r1, #33	; 0x21
   17fe2:	f00b ffc4 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   17fe6:	2400      	movs	r4, #0
   17fe8:	e7df      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   17fea:	b930      	cbnz	r0, 17ffa <handleParameter+0x156>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VMAX);
   17fec:	489a      	ldr	r0, [pc, #616]	; (18258 <handleParameter+0x3b4>)
   17fee:	2127      	movs	r1, #39	; 0x27
   17ff0:	f00b ffcb 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   17ff4:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VMAX);
   17ff6:	6028      	str	r0, [r5, #0]
   17ff8:	e7d7      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_VMAX, *value);
   17ffa:	682a      	ldr	r2, [r5, #0]
   17ffc:	4896      	ldr	r0, [pc, #600]	; (18258 <handleParameter+0x3b4>)
   17ffe:	2127      	movs	r1, #39	; 0x27
   18000:	f00b ffb5 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18004:	2400      	movs	r4, #0
   18006:	e7d0      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18008:	2800      	cmp	r0, #0
   1800a:	f040 8597 	bne.w	18b3c <handleParameter+0xc98>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VACTUAL);
   1800e:	4892      	ldr	r0, [pc, #584]	; (18258 <handleParameter+0x3b4>)
   18010:	2122      	movs	r1, #34	; 0x22
   18012:	f00b ffba 	bl	23f8a <tmc5130_readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   18016:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   1801a:	bf18      	it	ne
   1801c:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   18020:	4318      	orrs	r0, r3
   18022:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18024:	4634      	mov	r4, r6
   18026:	e7c0      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18028:	4f8b      	ldr	r7, [pc, #556]	; (18258 <handleParameter+0x3b4>)
   1802a:	b920      	cbnz	r0, 18036 <handleParameter+0x192>
			*value = vmax_position;
   1802c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
   18030:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18032:	4604      	mov	r4, r0
   18034:	e7b9      	b.n	17faa <handleParameter+0x106>
			vmax_position = abs(*value);
   18036:	682b      	ldr	r3, [r5, #0]
   18038:	2b00      	cmp	r3, #0
   1803a:	bfb8      	it	lt
   1803c:	425b      	neglt	r3, r3
			if(tmc5130_readInt(motorToIC(motor), TMC5130_RAMPMODE) == TMC5130_MODE_POSITION)
   1803e:	2120      	movs	r1, #32
   18040:	4638      	mov	r0, r7
			vmax_position = abs(*value);
   18042:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
			if(tmc5130_readInt(motorToIC(motor), TMC5130_RAMPMODE) == TMC5130_MODE_POSITION)
   18046:	f00b ffa0 	bl	23f8a <tmc5130_readInt>
   1804a:	4604      	mov	r4, r0
   1804c:	2800      	cmp	r0, #0
   1804e:	f040 8578 	bne.w	18b42 <handleParameter+0xc9e>
				tmc5130_writeInt(motorToIC(motor), TMC5130_VMAX, vmax_position);
   18052:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
   18056:	2127      	movs	r1, #39	; 0x27
   18058:	4638      	mov	r0, r7
   1805a:	f00b ff88 	bl	23f6e <tmc5130_writeInt>
   1805e:	e7a4      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18060:	b930      	cbnz	r0, 18070 <handleParameter+0x1cc>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_AMAX);
   18062:	487d      	ldr	r0, [pc, #500]	; (18258 <handleParameter+0x3b4>)
   18064:	2126      	movs	r1, #38	; 0x26
   18066:	f00b ff90 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1806a:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_AMAX);
   1806c:	6028      	str	r0, [r5, #0]
   1806e:	e79c      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_AMAX, *value);
   18070:	682a      	ldr	r2, [r5, #0]
   18072:	4879      	ldr	r0, [pc, #484]	; (18258 <handleParameter+0x3b4>)
   18074:	2126      	movs	r1, #38	; 0x26
   18076:	f00b ff7a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1807a:	2400      	movs	r4, #0
   1807c:	e795      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IRUN_MASK, TMC5130_IRUN_SHIFT);
   1807e:	4876      	ldr	r0, [pc, #472]	; (18258 <handleParameter+0x3b4>)
   18080:	2110      	movs	r1, #16
		if(readWrite == READ) {
   18082:	b936      	cbnz	r6, 18092 <handleParameter+0x1ee>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IRUN_MASK, TMC5130_IRUN_SHIFT);
   18084:	f00b ff81 	bl	23f8a <tmc5130_readInt>
   18088:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1808c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1808e:	4634      	mov	r4, r6
   18090:	e78b      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IRUN_MASK, TMC5130_IRUN_SHIFT, *value);
   18092:	f00b ff7a 	bl	23f8a <tmc5130_readInt>
   18096:	682b      	ldr	r3, [r5, #0]
   18098:	021b      	lsls	r3, r3, #8
   1809a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   1809e:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   180a2:	431a      	orrs	r2, r3
   180a4:	486c      	ldr	r0, [pc, #432]	; (18258 <handleParameter+0x3b4>)
   180a6:	2110      	movs	r1, #16
   180a8:	f00b ff61 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   180ac:	2400      	movs	r4, #0
   180ae:	e77c      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IHOLD_MASK, TMC5130_IHOLD_SHIFT);
   180b0:	4869      	ldr	r0, [pc, #420]	; (18258 <handleParameter+0x3b4>)
   180b2:	2110      	movs	r1, #16
		if(readWrite == READ) {
   180b4:	b936      	cbnz	r6, 180c4 <handleParameter+0x220>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IHOLD_MASK, TMC5130_IHOLD_SHIFT);
   180b6:	f00b ff68 	bl	23f8a <tmc5130_readInt>
   180ba:	f000 001f 	and.w	r0, r0, #31
   180be:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   180c0:	4634      	mov	r4, r6
   180c2:	e772      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_IHOLD_IRUN, TMC5130_IHOLD_MASK, TMC5130_IHOLD_SHIFT, *value);
   180c4:	f00b ff61 	bl	23f8a <tmc5130_readInt>
   180c8:	682a      	ldr	r2, [r5, #0]
   180ca:	f020 001f 	bic.w	r0, r0, #31
   180ce:	f002 021f 	and.w	r2, r2, #31
   180d2:	4302      	orrs	r2, r0
   180d4:	2110      	movs	r1, #16
   180d6:	4860      	ldr	r0, [pc, #384]	; (18258 <handleParameter+0x3b4>)
   180d8:	f00b ff49 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   180dc:	2400      	movs	r4, #0
   180de:	e764      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   180e0:	2800      	cmp	r0, #0
   180e2:	f040 8531 	bne.w	18b48 <handleParameter+0xca4>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_RAMPSTAT) & TMC5130_RS_POSREACHED)? 1:0;
   180e6:	485c      	ldr	r0, [pc, #368]	; (18258 <handleParameter+0x3b4>)
   180e8:	2135      	movs	r1, #53	; 0x35
   180ea:	f00b ff4e 	bl	23f8a <tmc5130_readInt>
   180ee:	f3c0 2040 	ubfx	r0, r0, #9, #1
   180f2:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   180f4:	4634      	mov	r4, r6
   180f6:	e758      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   180f8:	2800      	cmp	r0, #0
   180fa:	f040 8528 	bne.w	18b4e <handleParameter+0xcaa>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_RAMPSTAT) & TMC5130_RS_STOPR)? 0:1;
   180fe:	4856      	ldr	r0, [pc, #344]	; (18258 <handleParameter+0x3b4>)
   18100:	2135      	movs	r1, #53	; 0x35
   18102:	f00b ff42 	bl	23f8a <tmc5130_readInt>
   18106:	f010 0f02 	tst.w	r0, #2
   1810a:	bf0c      	ite	eq
   1810c:	2301      	moveq	r3, #1
   1810e:	2300      	movne	r3, #0
   18110:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18112:	4634      	mov	r4, r6
   18114:	e749      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18116:	2800      	cmp	r0, #0
   18118:	f040 851c 	bne.w	18b54 <handleParameter+0xcb0>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_RAMPSTAT) & TMC5130_RS_STOPL)? 0:1;
   1811c:	484e      	ldr	r0, [pc, #312]	; (18258 <handleParameter+0x3b4>)
   1811e:	2135      	movs	r1, #53	; 0x35
   18120:	f00b ff33 	bl	23f8a <tmc5130_readInt>
   18124:	43c0      	mvns	r0, r0
   18126:	f000 0001 	and.w	r0, r0, #1
   1812a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1812c:	4634      	mov	r4, r6
   1812e:	e73c      	b.n	17faa <handleParameter+0x106>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE) & TMC5130_SW_STOPR_ENABLE)? 1:0;
   18130:	4849      	ldr	r0, [pc, #292]	; (18258 <handleParameter+0x3b4>)
   18132:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ) {
   18134:	b936      	cbnz	r6, 18144 <handleParameter+0x2a0>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE) & TMC5130_SW_STOPR_ENABLE)? 1:0;
   18136:	f00b ff28 	bl	23f8a <tmc5130_readInt>
   1813a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1813e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18140:	4634      	mov	r4, r6
   18142:	e732      	b.n	17faa <handleParameter+0x106>
			buffer = tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE);
   18144:	f00b ff21 	bl	23f8a <tmc5130_readInt>
			if(*value == 0)
   18148:	682c      	ldr	r4, [r5, #0]
   1814a:	b934      	cbnz	r4, 1815a <handleParameter+0x2b6>
				tmc5130_writeInt(motorToIC(motor), TMC5130_SWMODE, buffer | TMC5130_SW_STOPR_ENABLE);
   1814c:	f040 0202 	orr.w	r2, r0, #2
   18150:	2134      	movs	r1, #52	; 0x34
   18152:	4841      	ldr	r0, [pc, #260]	; (18258 <handleParameter+0x3b4>)
   18154:	f00b ff0b 	bl	23f6e <tmc5130_writeInt>
   18158:	e727      	b.n	17faa <handleParameter+0x106>
				tmc5130_writeInt(motorToIC(motor), TMC5130_SWMODE, buffer & ~TMC5130_SW_STOPR_ENABLE);
   1815a:	f020 0202 	bic.w	r2, r0, #2
   1815e:	2134      	movs	r1, #52	; 0x34
   18160:	483d      	ldr	r0, [pc, #244]	; (18258 <handleParameter+0x3b4>)
   18162:	f00b ff04 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18166:	2400      	movs	r4, #0
   18168:	e71f      	b.n	17faa <handleParameter+0x106>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE) & TMC5130_SW_STOPL_ENABLE)? 1:0;
   1816a:	483b      	ldr	r0, [pc, #236]	; (18258 <handleParameter+0x3b4>)
   1816c:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ) {
   1816e:	b936      	cbnz	r6, 1817e <handleParameter+0x2da>
			*value = (tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE) & TMC5130_SW_STOPL_ENABLE)? 1:0;
   18170:	f00b ff0b 	bl	23f8a <tmc5130_readInt>
   18174:	f000 0001 	and.w	r0, r0, #1
   18178:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1817a:	4634      	mov	r4, r6
   1817c:	e715      	b.n	17faa <handleParameter+0x106>
			buffer	= tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE);
   1817e:	f00b ff04 	bl	23f8a <tmc5130_readInt>
			if(*value==0)
   18182:	682c      	ldr	r4, [r5, #0]
   18184:	b934      	cbnz	r4, 18194 <handleParameter+0x2f0>
				tmc5130_writeInt(motorToIC(motor), TMC5130_SWMODE, buffer | TMC5130_SW_STOPL_ENABLE);
   18186:	f040 0201 	orr.w	r2, r0, #1
   1818a:	2134      	movs	r1, #52	; 0x34
   1818c:	4832      	ldr	r0, [pc, #200]	; (18258 <handleParameter+0x3b4>)
   1818e:	f00b feee 	bl	23f6e <tmc5130_writeInt>
   18192:	e70a      	b.n	17faa <handleParameter+0x106>
				tmc5130_writeInt(motorToIC(motor), TMC5130_SWMODE, buffer & ~TMC5130_SW_STOPL_ENABLE);
   18194:	f020 0201 	bic.w	r2, r0, #1
   18198:	2134      	movs	r1, #52	; 0x34
   1819a:	482f      	ldr	r0, [pc, #188]	; (18258 <handleParameter+0x3b4>)
   1819c:	f00b fee7 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   181a0:	2400      	movs	r4, #0
   181a2:	e702      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   181a4:	b930      	cbnz	r0, 181b4 <handleParameter+0x310>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE);
   181a6:	482c      	ldr	r0, [pc, #176]	; (18258 <handleParameter+0x3b4>)
   181a8:	2134      	movs	r1, #52	; 0x34
   181aa:	f00b feee 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   181ae:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_SWMODE);
   181b0:	6028      	str	r0, [r5, #0]
   181b2:	e6fa      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_SWMODE, *value);
   181b4:	682a      	ldr	r2, [r5, #0]
   181b6:	4828      	ldr	r0, [pc, #160]	; (18258 <handleParameter+0x3b4>)
   181b8:	2134      	movs	r1, #52	; 0x34
   181ba:	f00b fed8 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   181be:	2400      	movs	r4, #0
   181c0:	e6f3      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   181c2:	b930      	cbnz	r0, 181d2 <handleParameter+0x32e>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_A1);
   181c4:	4824      	ldr	r0, [pc, #144]	; (18258 <handleParameter+0x3b4>)
   181c6:	2124      	movs	r1, #36	; 0x24
   181c8:	f00b fedf 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   181cc:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_A1);
   181ce:	6028      	str	r0, [r5, #0]
   181d0:	e6eb      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_A1, *value);
   181d2:	682a      	ldr	r2, [r5, #0]
   181d4:	4820      	ldr	r0, [pc, #128]	; (18258 <handleParameter+0x3b4>)
   181d6:	2124      	movs	r1, #36	; 0x24
   181d8:	f00b fec9 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   181dc:	2400      	movs	r4, #0
   181de:	e6e4      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   181e0:	b930      	cbnz	r0, 181f0 <handleParameter+0x34c>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_V1);
   181e2:	481d      	ldr	r0, [pc, #116]	; (18258 <handleParameter+0x3b4>)
   181e4:	2125      	movs	r1, #37	; 0x25
   181e6:	f00b fed0 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   181ea:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_V1);
   181ec:	6028      	str	r0, [r5, #0]
   181ee:	e6dc      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_V1, *value);
   181f0:	682a      	ldr	r2, [r5, #0]
   181f2:	4819      	ldr	r0, [pc, #100]	; (18258 <handleParameter+0x3b4>)
   181f4:	2125      	movs	r1, #37	; 0x25
   181f6:	f00b feba 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   181fa:	2400      	movs	r4, #0
   181fc:	e6d5      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   181fe:	b930      	cbnz	r0, 1820e <handleParameter+0x36a>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_DMAX);
   18200:	4815      	ldr	r0, [pc, #84]	; (18258 <handleParameter+0x3b4>)
   18202:	2128      	movs	r1, #40	; 0x28
   18204:	f00b fec1 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18208:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_DMAX);
   1820a:	6028      	str	r0, [r5, #0]
   1820c:	e6cd      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_DMAX, *value);
   1820e:	682a      	ldr	r2, [r5, #0]
   18210:	4811      	ldr	r0, [pc, #68]	; (18258 <handleParameter+0x3b4>)
   18212:	2128      	movs	r1, #40	; 0x28
   18214:	f00b feab 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18218:	2400      	movs	r4, #0
   1821a:	e6c6      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   1821c:	b930      	cbnz	r0, 1822c <handleParameter+0x388>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_D1);
   1821e:	480e      	ldr	r0, [pc, #56]	; (18258 <handleParameter+0x3b4>)
   18220:	212a      	movs	r1, #42	; 0x2a
   18222:	f00b feb2 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18226:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_D1);
   18228:	6028      	str	r0, [r5, #0]
   1822a:	e6be      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_D1, *value);
   1822c:	682a      	ldr	r2, [r5, #0]
   1822e:	480a      	ldr	r0, [pc, #40]	; (18258 <handleParameter+0x3b4>)
   18230:	212a      	movs	r1, #42	; 0x2a
   18232:	f00b fe9c 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18236:	2400      	movs	r4, #0
   18238:	e6b7      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   1823a:	b930      	cbnz	r0, 1824a <handleParameter+0x3a6>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VSTART);
   1823c:	4806      	ldr	r0, [pc, #24]	; (18258 <handleParameter+0x3b4>)
   1823e:	2123      	movs	r1, #35	; 0x23
   18240:	f00b fea3 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18244:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VSTART);
   18246:	6028      	str	r0, [r5, #0]
   18248:	e6af      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_VSTART, *value);
   1824a:	682a      	ldr	r2, [r5, #0]
   1824c:	4802      	ldr	r0, [pc, #8]	; (18258 <handleParameter+0x3b4>)
   1824e:	2123      	movs	r1, #35	; 0x23
   18250:	f00b fe8d 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18254:	2400      	movs	r4, #0
   18256:	e6a8      	b.n	17faa <handleParameter+0x106>
   18258:	1fff3cc8 	.word	0x1fff3cc8
		if(readWrite == READ) {
   1825c:	b930      	cbnz	r0, 1826c <handleParameter+0x3c8>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VSTOP);
   1825e:	48ac      	ldr	r0, [pc, #688]	; (18510 <handleParameter+0x66c>)
   18260:	212b      	movs	r1, #43	; 0x2b
   18262:	f00b fe92 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18266:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VSTOP);
   18268:	6028      	str	r0, [r5, #0]
   1826a:	e69e      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_VSTOP, *value);
   1826c:	682a      	ldr	r2, [r5, #0]
   1826e:	48a8      	ldr	r0, [pc, #672]	; (18510 <handleParameter+0x66c>)
   18270:	212b      	movs	r1, #43	; 0x2b
   18272:	f00b fe7c 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18276:	2400      	movs	r4, #0
   18278:	e697      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   1827a:	b930      	cbnz	r0, 1828a <handleParameter+0x3e6>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_TZEROWAIT);
   1827c:	48a4      	ldr	r0, [pc, #656]	; (18510 <handleParameter+0x66c>)
   1827e:	212c      	movs	r1, #44	; 0x2c
   18280:	f00b fe83 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18284:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_TZEROWAIT);
   18286:	6028      	str	r0, [r5, #0]
   18288:	e68f      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_TZEROWAIT, *value);
   1828a:	682a      	ldr	r2, [r5, #0]
   1828c:	48a0      	ldr	r0, [pc, #640]	; (18510 <handleParameter+0x66c>)
   1828e:	212c      	movs	r1, #44	; 0x2c
   18290:	f00b fe6d 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18294:	2400      	movs	r4, #0
   18296:	e688      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18298:	4c9e      	ldr	r4, [pc, #632]	; (18514 <handleParameter+0x670>)
   1829a:	b980      	cbnz	r0, 182be <handleParameter+0x41a>
			buffer = tmc5130_readInt(motorToIC(motor), TMC5130_THIGH);
   1829c:	489c      	ldr	r0, [pc, #624]	; (18510 <handleParameter+0x66c>)
   1829e:	2115      	movs	r1, #21
   182a0:	f00b fe73 	bl	23f8a <tmc5130_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   182a4:	2801      	cmp	r0, #1
   182a6:	bf38      	it	cc
   182a8:	2001      	movcc	r0, #1
   182aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   182ae:	fbb3 f0f0 	udiv	r0, r3, r0
   182b2:	42a0      	cmp	r0, r4
   182b4:	bf94      	ite	ls
   182b6:	6028      	strls	r0, [r5, #0]
   182b8:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   182ba:	4634      	mov	r4, r6
   182bc:	e675      	b.n	17faa <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   182be:	682b      	ldr	r3, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_THIGH, *value);
   182c0:	4893      	ldr	r0, [pc, #588]	; (18510 <handleParameter+0x66c>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   182c2:	2b00      	cmp	r3, #0
   182c4:	bf08      	it	eq
   182c6:	2301      	moveq	r3, #1
   182c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   182cc:	fb92 f2f3 	sdiv	r2, r2, r3
   182d0:	42a2      	cmp	r2, r4
   182d2:	bfa8      	it	ge
   182d4:	4622      	movge	r2, r4
   182d6:	602a      	str	r2, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_THIGH, *value);
   182d8:	2115      	movs	r1, #21
   182da:	f00b fe48 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   182de:	2400      	movs	r4, #0
   182e0:	e663      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   182e2:	b930      	cbnz	r0, 182f2 <handleParameter+0x44e>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VDCMIN);
   182e4:	488a      	ldr	r0, [pc, #552]	; (18510 <handleParameter+0x66c>)
   182e6:	2133      	movs	r1, #51	; 0x33
   182e8:	f00b fe4f 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   182ec:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_VDCMIN);
   182ee:	6028      	str	r0, [r5, #0]
   182f0:	e65b      	b.n	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_VDCMIN, *value);
   182f2:	682a      	ldr	r2, [r5, #0]
   182f4:	4886      	ldr	r0, [pc, #536]	; (18510 <handleParameter+0x66c>)
   182f6:	2133      	movs	r1, #51	; 0x33
   182f8:	f00b fe39 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   182fc:	2400      	movs	r4, #0
   182fe:	e654      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHCHM_MASK, TMC5130_VHIGHCHM_SHIFT);
   18300:	4883      	ldr	r0, [pc, #524]	; (18510 <handleParameter+0x66c>)
   18302:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   18304:	b936      	cbnz	r6, 18314 <handleParameter+0x470>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHCHM_MASK, TMC5130_VHIGHCHM_SHIFT);
   18306:	f00b fe40 	bl	23f8a <tmc5130_readInt>
   1830a:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   1830e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18310:	4634      	mov	r4, r6
   18312:	e64a      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHCHM_MASK, TMC5130_VHIGHCHM_SHIFT, *value);
   18314:	f00b fe39 	bl	23f8a <tmc5130_readInt>
   18318:	682b      	ldr	r3, [r5, #0]
   1831a:	04db      	lsls	r3, r3, #19
   1831c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   18320:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
   18324:	431a      	orrs	r2, r3
   18326:	487a      	ldr	r0, [pc, #488]	; (18510 <handleParameter+0x66c>)
   18328:	216c      	movs	r1, #108	; 0x6c
   1832a:	f00b fe20 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1832e:	2400      	movs	r4, #0
   18330:	e63b      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHFS_MASK, TMC5130_VHIGHFS_SHIFT);
   18332:	4877      	ldr	r0, [pc, #476]	; (18510 <handleParameter+0x66c>)
   18334:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   18336:	b936      	cbnz	r6, 18346 <handleParameter+0x4a2>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHFS_MASK, TMC5130_VHIGHFS_SHIFT);
   18338:	f00b fe27 	bl	23f8a <tmc5130_readInt>
   1833c:	f3c0 4080 	ubfx	r0, r0, #18, #1
   18340:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18342:	4634      	mov	r4, r6
   18344:	e631      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VHIGHFS_MASK, TMC5130_VHIGHFS_SHIFT, *value);
   18346:	f00b fe20 	bl	23f8a <tmc5130_readInt>
   1834a:	682b      	ldr	r3, [r5, #0]
   1834c:	049b      	lsls	r3, r3, #18
   1834e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   18352:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   18356:	431a      	orrs	r2, r3
   18358:	486d      	ldr	r0, [pc, #436]	; (18510 <handleParameter+0x66c>)
   1835a:	216c      	movs	r1, #108	; 0x6c
   1835c:	f00b fe07 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18360:	2400      	movs	r4, #0
   18362:	e622      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18364:	2800      	cmp	r0, #0
   18366:	f040 83f8 	bne.w	18b5a <handleParameter+0xcb6>
			*value = motorToIC(motor)->velocity;
   1836a:	4b69      	ldr	r3, [pc, #420]	; (18510 <handleParameter+0x66c>)
   1836c:	685b      	ldr	r3, [r3, #4]
   1836e:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18370:	4604      	mov	r4, r0
   18372:	e61a      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18374:	b940      	cbnz	r0, 18388 <handleParameter+0x4e4>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_GCONF, TMC5130_I_SCALE_ANALOG_MASK, TMC5130_I_SCALE_ANALOG_SHIFT);
   18376:	4601      	mov	r1, r0
   18378:	4865      	ldr	r0, [pc, #404]	; (18510 <handleParameter+0x66c>)
   1837a:	f00b fe06 	bl	23f8a <tmc5130_readInt>
   1837e:	f000 0001 	and.w	r0, r0, #1
   18382:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18384:	4634      	mov	r4, r6
   18386:	e610      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_GCONF, TMC5130_I_SCALE_ANALOG_MASK, TMC5130_I_SCALE_ANALOG_SHIFT, *value);
   18388:	2100      	movs	r1, #0
   1838a:	4861      	ldr	r0, [pc, #388]	; (18510 <handleParameter+0x66c>)
   1838c:	f00b fdfd 	bl	23f8a <tmc5130_readInt>
   18390:	682a      	ldr	r2, [r5, #0]
   18392:	f020 0001 	bic.w	r0, r0, #1
   18396:	f002 0201 	and.w	r2, r2, #1
   1839a:	4302      	orrs	r2, r0
   1839c:	2100      	movs	r1, #0
   1839e:	485c      	ldr	r0, [pc, #368]	; (18510 <handleParameter+0x66c>)
   183a0:	f00b fde5 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   183a4:	2400      	movs	r4, #0
   183a6:	e600      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   183a8:	b940      	cbnz	r0, 183bc <handleParameter+0x518>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_GCONF, TMC5130_INTERNAL_RSENSE_MASK, TMC5130_INTERNAL_RSENSE_SHIFT);
   183aa:	4601      	mov	r1, r0
   183ac:	4858      	ldr	r0, [pc, #352]	; (18510 <handleParameter+0x66c>)
   183ae:	f00b fdec 	bl	23f8a <tmc5130_readInt>
   183b2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   183b6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   183b8:	4634      	mov	r4, r6
   183ba:	e5f6      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_GCONF, TMC5130_INTERNAL_RSENSE_MASK, TMC5130_INTERNAL_RSENSE_SHIFT, *value);
   183bc:	2100      	movs	r1, #0
   183be:	4854      	ldr	r0, [pc, #336]	; (18510 <handleParameter+0x66c>)
   183c0:	f00b fde3 	bl	23f8a <tmc5130_readInt>
   183c4:	682b      	ldr	r3, [r5, #0]
   183c6:	005b      	lsls	r3, r3, #1
   183c8:	f003 0302 	and.w	r3, r3, #2
   183cc:	f020 0202 	bic.w	r2, r0, #2
   183d0:	431a      	orrs	r2, r3
   183d2:	484f      	ldr	r0, [pc, #316]	; (18510 <handleParameter+0x66c>)
   183d4:	2100      	movs	r1, #0
   183d6:	f00b fdca 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   183da:	2400      	movs	r4, #0
   183dc:	e5e5      	b.n	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   183de:	b95e      	cbnz	r6, 183f8 <handleParameter+0x554>
			*value = 256 >> TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_MRES_MASK, TMC5130_MRES_SHIFT);
   183e0:	484b      	ldr	r0, [pc, #300]	; (18510 <handleParameter+0x66c>)
   183e2:	216c      	movs	r1, #108	; 0x6c
   183e4:	f00b fdd1 	bl	23f8a <tmc5130_readInt>
   183e8:	f3c0 6303 	ubfx	r3, r0, #24, #4
   183ec:	f44f 7080 	mov.w	r0, #256	; 0x100
   183f0:	4118      	asrs	r0, r3
   183f2:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   183f4:	4634      	mov	r4, r6
   183f6:	e5d8      	b.n	17faa <handleParameter+0x106>
			switch(*value)
   183f8:	682b      	ldr	r3, [r5, #0]
   183fa:	2b10      	cmp	r3, #16
   183fc:	d035      	beq.n	1846a <handleParameter+0x5c6>
   183fe:	dc0a      	bgt.n	18416 <handleParameter+0x572>
   18400:	3b01      	subs	r3, #1
   18402:	2b07      	cmp	r3, #7
   18404:	d80e      	bhi.n	18424 <handleParameter+0x580>
   18406:	2b07      	cmp	r3, #7
   18408:	d80c      	bhi.n	18424 <handleParameter+0x580>
   1840a:	e8df f003 	tbb	[pc, r3]
   1840e:	2815      	.short	0x2815
   18410:	0b0b2a0b 	.word	0x0b0b2a0b
   18414:	2c0b      	.short	0x2c0b
   18416:	2b80      	cmp	r3, #128	; 0x80
   18418:	d02d      	beq.n	18476 <handleParameter+0x5d2>
   1841a:	dc08      	bgt.n	1842e <handleParameter+0x58a>
   1841c:	2b20      	cmp	r3, #32
   1841e:	d026      	beq.n	1846e <handleParameter+0x5ca>
   18420:	2b40      	cmp	r3, #64	; 0x40
   18422:	d026      	beq.n	18472 <handleParameter+0x5ce>
			default:   *value = -1;  break;
   18424:	f04f 33ff 	mov.w	r3, #4294967295
   18428:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
   1842a:	2410      	movs	r4, #16
   1842c:	e5bd      	b.n	17faa <handleParameter+0x106>
   1842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   18432:	d1f7      	bne.n	18424 <handleParameter+0x580>
			case 256:  *value = 0;   break;
   18434:	2300      	movs	r3, #0
   18436:	e000      	b.n	1843a <handleParameter+0x596>
			case 1:    *value = 8;   break;
   18438:	2308      	movs	r3, #8
			case 256:  *value = 0;   break;
   1843a:	602b      	str	r3, [r5, #0]
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_MRES_MASK, TMC5130_MRES_SHIFT, *value);
   1843c:	216c      	movs	r1, #108	; 0x6c
   1843e:	4834      	ldr	r0, [pc, #208]	; (18510 <handleParameter+0x66c>)
   18440:	f00b fda3 	bl	23f8a <tmc5130_readInt>
   18444:	682b      	ldr	r3, [r5, #0]
   18446:	061b      	lsls	r3, r3, #24
   18448:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1844c:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   18450:	431a      	orrs	r2, r3
   18452:	482f      	ldr	r0, [pc, #188]	; (18510 <handleParameter+0x66c>)
   18454:	216c      	movs	r1, #108	; 0x6c
   18456:	f00b fd8a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1845a:	2400      	movs	r4, #0
   1845c:	e5a5      	b.n	17faa <handleParameter+0x106>
			case 2:    *value = 7;   break;
   1845e:	2307      	movs	r3, #7
   18460:	e7eb      	b.n	1843a <handleParameter+0x596>
			case 4:    *value = 6;   break;
   18462:	2306      	movs	r3, #6
   18464:	e7e9      	b.n	1843a <handleParameter+0x596>
			case 8:    *value = 5;   break;
   18466:	2305      	movs	r3, #5
   18468:	e7e7      	b.n	1843a <handleParameter+0x596>
			case 16:   *value = 4;   break;
   1846a:	2304      	movs	r3, #4
   1846c:	e7e5      	b.n	1843a <handleParameter+0x596>
			case 32:   *value = 3;   break;
   1846e:	2303      	movs	r3, #3
   18470:	e7e3      	b.n	1843a <handleParameter+0x596>
			case 64:   *value = 2;   break;
   18472:	2302      	movs	r3, #2
   18474:	e7e1      	b.n	1843a <handleParameter+0x596>
			case 128:  *value = 1;   break;
   18476:	2301      	movs	r3, #1
   18478:	e7df      	b.n	1843a <handleParameter+0x596>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TBL_MASK, TMC5130_TBL_SHIFT);
   1847a:	4825      	ldr	r0, [pc, #148]	; (18510 <handleParameter+0x66c>)
   1847c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1847e:	b936      	cbnz	r6, 1848e <handleParameter+0x5ea>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TBL_MASK, TMC5130_TBL_SHIFT);
   18480:	f00b fd83 	bl	23f8a <tmc5130_readInt>
   18484:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   18488:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1848a:	4634      	mov	r4, r6
   1848c:	e58d      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TBL_MASK, TMC5130_TBL_SHIFT, *value);
   1848e:	f00b fd7c 	bl	23f8a <tmc5130_readInt>
   18492:	682b      	ldr	r3, [r5, #0]
   18494:	03db      	lsls	r3, r3, #15
   18496:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   1849a:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   1849e:	431a      	orrs	r2, r3
   184a0:	481b      	ldr	r0, [pc, #108]	; (18510 <handleParameter+0x66c>)
   184a2:	216c      	movs	r1, #108	; 0x6c
   184a4:	f00b fd63 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   184a8:	2400      	movs	r4, #0
   184aa:	e57e      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_CHM_MASK, TMC5130_CHM_SHIFT);
   184ac:	4818      	ldr	r0, [pc, #96]	; (18510 <handleParameter+0x66c>)
   184ae:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   184b0:	b936      	cbnz	r6, 184c0 <handleParameter+0x61c>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_CHM_MASK, TMC5130_CHM_SHIFT);
   184b2:	f00b fd6a 	bl	23f8a <tmc5130_readInt>
   184b6:	f3c0 3080 	ubfx	r0, r0, #14, #1
   184ba:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   184bc:	4634      	mov	r4, r6
   184be:	e574      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_CHM_MASK, TMC5130_CHM_SHIFT, *value);
   184c0:	f00b fd63 	bl	23f8a <tmc5130_readInt>
   184c4:	682b      	ldr	r3, [r5, #0]
   184c6:	039b      	lsls	r3, r3, #14
   184c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   184cc:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
   184d0:	431a      	orrs	r2, r3
   184d2:	480f      	ldr	r0, [pc, #60]	; (18510 <handleParameter+0x66c>)
   184d4:	216c      	movs	r1, #108	; 0x6c
   184d6:	f00b fd4a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   184da:	2400      	movs	r4, #0
   184dc:	e565      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_DISFDCC_MASK, TMC5130_DISFDCC_SHIFT);
   184de:	480c      	ldr	r0, [pc, #48]	; (18510 <handleParameter+0x66c>)
   184e0:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   184e2:	b936      	cbnz	r6, 184f2 <handleParameter+0x64e>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_DISFDCC_MASK, TMC5130_DISFDCC_SHIFT);
   184e4:	f00b fd51 	bl	23f8a <tmc5130_readInt>
   184e8:	f3c0 3000 	ubfx	r0, r0, #12, #1
   184ec:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   184ee:	4634      	mov	r4, r6
   184f0:	e55b      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_DISFDCC_MASK, TMC5130_DISFDCC_SHIFT, *value);
   184f2:	f00b fd4a 	bl	23f8a <tmc5130_readInt>
   184f6:	682b      	ldr	r3, [r5, #0]
   184f8:	031b      	lsls	r3, r3, #12
   184fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   184fe:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   18502:	431a      	orrs	r2, r3
   18504:	4802      	ldr	r0, [pc, #8]	; (18510 <handleParameter+0x66c>)
   18506:	216c      	movs	r1, #108	; 0x6c
   18508:	f00b fd31 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1850c:	2400      	movs	r4, #0
   1850e:	e54c      	b.n	17faa <handleParameter+0x106>
   18510:	1fff3cc8 	.word	0x1fff3cc8
   18514:	000fffff 	.word	0x000fffff
		buffer = tmc5130_readInt(motorToIC(motor), TMC5130_CHOPCONF);
   18518:	48ba      	ldr	r0, [pc, #744]	; (18804 <handleParameter+0x960>)
   1851a:	216c      	movs	r1, #108	; 0x6c
   1851c:	f00b fd35 	bl	23f8a <tmc5130_readInt>
		if(readWrite == READ) {
   18520:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
   18524:	b99e      	cbnz	r6, 1854e <handleParameter+0x6aa>
			if(buffer & (1<<14))
   18526:	b144      	cbz	r4, 1853a <handleParameter+0x696>
				*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_HEND_MASK, TMC5130_HEND_SHIFT);
   18528:	48b6      	ldr	r0, [pc, #728]	; (18804 <handleParameter+0x960>)
   1852a:	216c      	movs	r1, #108	; 0x6c
   1852c:	f00b fd2d 	bl	23f8a <tmc5130_readInt>
   18530:	f3c0 10c3 	ubfx	r0, r0, #7, #4
   18534:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18536:	4634      	mov	r4, r6
   18538:	e537      	b.n	17faa <handleParameter+0x106>
				*value = ((buffer >> 4) & 0x07) | (buffer & (1<<11))? (1<<3):0;
   1853a:	f3c0 1302 	ubfx	r3, r0, #4, #3
   1853e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
   18542:	4303      	orrs	r3, r0
   18544:	bf14      	ite	ne
   18546:	2308      	movne	r3, #8
   18548:	2300      	moveq	r3, #0
   1854a:	602b      	str	r3, [r5, #0]
   1854c:	e52d      	b.n	17faa <handleParameter+0x106>
			if(buffer & (1<<14))
   1854e:	b184      	cbz	r4, 18572 <handleParameter+0x6ce>
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_HEND_MASK, TMC5130_HEND_SHIFT, *value);
   18550:	216c      	movs	r1, #108	; 0x6c
   18552:	48ac      	ldr	r0, [pc, #688]	; (18804 <handleParameter+0x960>)
   18554:	f00b fd19 	bl	23f8a <tmc5130_readInt>
   18558:	682b      	ldr	r3, [r5, #0]
   1855a:	01db      	lsls	r3, r3, #7
   1855c:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   18560:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   18564:	431a      	orrs	r2, r3
   18566:	48a7      	ldr	r0, [pc, #668]	; (18804 <handleParameter+0x960>)
   18568:	216c      	movs	r1, #108	; 0x6c
   1856a:	f00b fd00 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1856e:	2400      	movs	r4, #0
   18570:	e51b      	b.n	17faa <handleParameter+0x106>
				if(*value & (1<<3))
   18572:	682a      	ldr	r2, [r5, #0]
   18574:	0711      	lsls	r1, r2, #28
					buffer |= (0x01<<11);
   18576:	bf4c      	ite	mi
   18578:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
					buffer &= ~(0x01<<11);
   1857c:	f420 6000 	bicpl.w	r0, r0, #2048	; 0x800
				buffer |= (*value & 0x0F) << 4;
   18580:	0112      	lsls	r2, r2, #4
				buffer &= ~(0x07<<4);
   18582:	f020 0070 	bic.w	r0, r0, #112	; 0x70
				buffer |= (*value & 0x0F) << 4;
   18586:	b2d2      	uxtb	r2, r2
				tmc5130_writeInt(motorToIC(motor), TMC5130_CHOPCONF,buffer);
   18588:	4302      	orrs	r2, r0
   1858a:	216c      	movs	r1, #108	; 0x6c
   1858c:	489d      	ldr	r0, [pc, #628]	; (18804 <handleParameter+0x960>)
   1858e:	f00b fcee 	bl	23f6e <tmc5130_writeInt>
   18592:	e50a      	b.n	17faa <handleParameter+0x106>
		buffer = tmc5130_readInt(motorToIC(motor), TMC5130_CHOPCONF);
   18594:	489b      	ldr	r0, [pc, #620]	; (18804 <handleParameter+0x960>)
   18596:	216c      	movs	r1, #108	; 0x6c
   18598:	f00b fcf7 	bl	23f8a <tmc5130_readInt>
		if(readWrite == READ) {
   1859c:	b9ae      	cbnz	r6, 185ca <handleParameter+0x726>
			if(buffer & (1<<14))
   1859e:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
   185a2:	d008      	beq.n	185b6 <handleParameter+0x712>
				*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_HSTRT_MASK, TMC5130_HSTRT_SHIFT);
   185a4:	4897      	ldr	r0, [pc, #604]	; (18804 <handleParameter+0x960>)
   185a6:	216c      	movs	r1, #108	; 0x6c
   185a8:	f00b fcef 	bl	23f8a <tmc5130_readInt>
   185ac:	f3c0 1002 	ubfx	r0, r0, #4, #3
   185b0:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   185b2:	4634      	mov	r4, r6
   185b4:	e4f9      	b.n	17faa <handleParameter+0x106>
				*value = ((buffer >> 7) & 0x0F) | (buffer & (1<<11))? 1<<3 : 0;
   185b6:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   185ba:	f400 6000 	and.w	r0, r0, #2048	; 0x800
   185be:	4303      	orrs	r3, r0
   185c0:	bf14      	ite	ne
   185c2:	2308      	movne	r3, #8
   185c4:	2300      	moveq	r3, #0
   185c6:	602b      	str	r3, [r5, #0]
   185c8:	e4ef      	b.n	17faa <handleParameter+0x106>
			if(tmc5130_readInt(motorToIC(motor), TMC5130_CHOPCONF) & (1<<14))
   185ca:	216c      	movs	r1, #108	; 0x6c
   185cc:	488d      	ldr	r0, [pc, #564]	; (18804 <handleParameter+0x960>)
   185ce:	f00b fcdc 	bl	23f8a <tmc5130_readInt>
   185d2:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_HSTRT_MASK, TMC5130_HSTRT_SHIFT, *value);
   185d6:	f04f 016c 	mov.w	r1, #108	; 0x6c
   185da:	488a      	ldr	r0, [pc, #552]	; (18804 <handleParameter+0x960>)
			if(tmc5130_readInt(motorToIC(motor), TMC5130_CHOPCONF) & (1<<14))
   185dc:	d00e      	beq.n	185fc <handleParameter+0x758>
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_HSTRT_MASK, TMC5130_HSTRT_SHIFT, *value);
   185de:	f00b fcd4 	bl	23f8a <tmc5130_readInt>
   185e2:	682b      	ldr	r3, [r5, #0]
   185e4:	011b      	lsls	r3, r3, #4
   185e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   185ea:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   185ee:	431a      	orrs	r2, r3
   185f0:	4884      	ldr	r0, [pc, #528]	; (18804 <handleParameter+0x960>)
   185f2:	216c      	movs	r1, #108	; 0x6c
   185f4:	f00b fcbb 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   185f8:	2400      	movs	r4, #0
   185fa:	e4d6      	b.n	17faa <handleParameter+0x106>
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_OFFSET_MASK, TMC5130_OFFSET_SHIFT, *value);
   185fc:	f00b fcc5 	bl	23f8a <tmc5130_readInt>
   18600:	682b      	ldr	r3, [r5, #0]
   18602:	01db      	lsls	r3, r3, #7
   18604:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   18608:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1860c:	431a      	orrs	r2, r3
   1860e:	487d      	ldr	r0, [pc, #500]	; (18804 <handleParameter+0x960>)
   18610:	216c      	movs	r1, #108	; 0x6c
   18612:	f00b fcac 	bl	23f6e <tmc5130_writeInt>
   18616:	e4c8      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TOFF_MASK, TMC5130_TOFF_SHIFT);
   18618:	487a      	ldr	r0, [pc, #488]	; (18804 <handleParameter+0x960>)
   1861a:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1861c:	b936      	cbnz	r6, 1862c <handleParameter+0x788>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TOFF_MASK, TMC5130_TOFF_SHIFT);
   1861e:	f00b fcb4 	bl	23f8a <tmc5130_readInt>
   18622:	f000 000f 	and.w	r0, r0, #15
   18626:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18628:	4634      	mov	r4, r6
   1862a:	e4be      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_TOFF_MASK, TMC5130_TOFF_SHIFT, *value);
   1862c:	f00b fcad 	bl	23f8a <tmc5130_readInt>
   18630:	682a      	ldr	r2, [r5, #0]
   18632:	f020 000f 	bic.w	r0, r0, #15
   18636:	f002 020f 	and.w	r2, r2, #15
   1863a:	4302      	orrs	r2, r0
   1863c:	216c      	movs	r1, #108	; 0x6c
   1863e:	4871      	ldr	r0, [pc, #452]	; (18804 <handleParameter+0x960>)
   18640:	f00b fc95 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18644:	2400      	movs	r4, #0
   18646:	e4b0      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEIMIN_MASK, TMC5130_SEIMIN_SHIFT);
   18648:	486e      	ldr	r0, [pc, #440]	; (18804 <handleParameter+0x960>)
   1864a:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1864c:	b936      	cbnz	r6, 1865c <handleParameter+0x7b8>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEIMIN_MASK, TMC5130_SEIMIN_SHIFT);
   1864e:	f00b fc9c 	bl	23f8a <tmc5130_readInt>
   18652:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   18656:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18658:	4634      	mov	r4, r6
   1865a:	e4a6      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEIMIN_MASK, TMC5130_SEIMIN_SHIFT, *value);
   1865c:	f00b fc95 	bl	23f8a <tmc5130_readInt>
   18660:	682b      	ldr	r3, [r5, #0]
   18662:	03db      	lsls	r3, r3, #15
   18664:	b29b      	uxth	r3, r3
   18666:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1866a:	431a      	orrs	r2, r3
   1866c:	4865      	ldr	r0, [pc, #404]	; (18804 <handleParameter+0x960>)
   1866e:	216d      	movs	r1, #109	; 0x6d
   18670:	f00b fc7d 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18674:	2400      	movs	r4, #0
   18676:	e498      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEDN_MASK, TMC5130_SEDN_SHIFT);
   18678:	4862      	ldr	r0, [pc, #392]	; (18804 <handleParameter+0x960>)
   1867a:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1867c:	b936      	cbnz	r6, 1868c <handleParameter+0x7e8>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEDN_MASK, TMC5130_SEDN_SHIFT);
   1867e:	f00b fc84 	bl	23f8a <tmc5130_readInt>
   18682:	f3c0 3041 	ubfx	r0, r0, #13, #2
   18686:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18688:	4634      	mov	r4, r6
   1868a:	e48e      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEDN_MASK, TMC5130_SEDN_SHIFT, *value);
   1868c:	f00b fc7d 	bl	23f8a <tmc5130_readInt>
   18690:	682b      	ldr	r3, [r5, #0]
   18692:	035b      	lsls	r3, r3, #13
   18694:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   18698:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   1869c:	431a      	orrs	r2, r3
   1869e:	4859      	ldr	r0, [pc, #356]	; (18804 <handleParameter+0x960>)
   186a0:	216d      	movs	r1, #109	; 0x6d
   186a2:	f00b fc64 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   186a6:	2400      	movs	r4, #0
   186a8:	e47f      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMAX_MASK, TMC5130_SEMAX_SHIFT);
   186aa:	4856      	ldr	r0, [pc, #344]	; (18804 <handleParameter+0x960>)
   186ac:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   186ae:	b936      	cbnz	r6, 186be <handleParameter+0x81a>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMAX_MASK, TMC5130_SEMAX_SHIFT);
   186b0:	f00b fc6b 	bl	23f8a <tmc5130_readInt>
   186b4:	f3c0 2003 	ubfx	r0, r0, #8, #4
   186b8:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   186ba:	4634      	mov	r4, r6
   186bc:	e475      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMAX_MASK, TMC5130_SEMAX_SHIFT, *value);
   186be:	f00b fc64 	bl	23f8a <tmc5130_readInt>
   186c2:	682b      	ldr	r3, [r5, #0]
   186c4:	021b      	lsls	r3, r3, #8
   186c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   186ca:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   186ce:	431a      	orrs	r2, r3
   186d0:	484c      	ldr	r0, [pc, #304]	; (18804 <handleParameter+0x960>)
   186d2:	216d      	movs	r1, #109	; 0x6d
   186d4:	f00b fc4b 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   186d8:	2400      	movs	r4, #0
   186da:	e466      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEUP_MASK, TMC5130_SEUP_SHIFT);
   186dc:	4849      	ldr	r0, [pc, #292]	; (18804 <handleParameter+0x960>)
   186de:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   186e0:	b936      	cbnz	r6, 186f0 <handleParameter+0x84c>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEUP_MASK, TMC5130_SEUP_SHIFT);
   186e2:	f00b fc52 	bl	23f8a <tmc5130_readInt>
   186e6:	f3c0 1041 	ubfx	r0, r0, #5, #2
   186ea:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   186ec:	4634      	mov	r4, r6
   186ee:	e45c      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEUP_MASK, TMC5130_SEUP_SHIFT, *value);
   186f0:	f00b fc4b 	bl	23f8a <tmc5130_readInt>
   186f4:	682b      	ldr	r3, [r5, #0]
   186f6:	015b      	lsls	r3, r3, #5
   186f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   186fc:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   18700:	431a      	orrs	r2, r3
   18702:	4840      	ldr	r0, [pc, #256]	; (18804 <handleParameter+0x960>)
   18704:	216d      	movs	r1, #109	; 0x6d
   18706:	f00b fc32 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1870a:	2400      	movs	r4, #0
   1870c:	e44d      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMIN_MASK, TMC5130_SEMIN_SHIFT);
   1870e:	483d      	ldr	r0, [pc, #244]	; (18804 <handleParameter+0x960>)
   18710:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   18712:	b936      	cbnz	r6, 18722 <handleParameter+0x87e>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMIN_MASK, TMC5130_SEMIN_SHIFT);
   18714:	f00b fc39 	bl	23f8a <tmc5130_readInt>
   18718:	f000 000f 	and.w	r0, r0, #15
   1871c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1871e:	4634      	mov	r4, r6
   18720:	e443      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SEMIN_MASK, TMC5130_SEMIN_SHIFT, *value);
   18722:	f00b fc32 	bl	23f8a <tmc5130_readInt>
   18726:	682a      	ldr	r2, [r5, #0]
   18728:	f020 000f 	bic.w	r0, r0, #15
   1872c:	f002 020f 	and.w	r2, r2, #15
   18730:	4302      	orrs	r2, r0
   18732:	216d      	movs	r1, #109	; 0x6d
   18734:	4833      	ldr	r0, [pc, #204]	; (18804 <handleParameter+0x960>)
   18736:	f00b fc1a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1873a:	2400      	movs	r4, #0
   1873c:	e435      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SFILT_MASK, TMC5130_SFILT_SHIFT);
   1873e:	4831      	ldr	r0, [pc, #196]	; (18804 <handleParameter+0x960>)
   18740:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   18742:	b936      	cbnz	r6, 18752 <handleParameter+0x8ae>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SFILT_MASK, TMC5130_SFILT_SHIFT);
   18744:	f00b fc21 	bl	23f8a <tmc5130_readInt>
   18748:	f3c0 6000 	ubfx	r0, r0, #24, #1
   1874c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1874e:	4634      	mov	r4, r6
   18750:	e42b      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SFILT_MASK, TMC5130_SFILT_SHIFT, *value);
   18752:	f00b fc1a 	bl	23f8a <tmc5130_readInt>
   18756:	682b      	ldr	r3, [r5, #0]
   18758:	061b      	lsls	r3, r3, #24
   1875a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1875e:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   18762:	431a      	orrs	r2, r3
   18764:	4827      	ldr	r0, [pc, #156]	; (18804 <handleParameter+0x960>)
   18766:	216d      	movs	r1, #109	; 0x6d
   18768:	f00b fc01 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1876c:	2400      	movs	r4, #0
   1876e:	e41c      	b.n	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SGT_MASK, TMC5130_SGT_SHIFT);
   18770:	4824      	ldr	r0, [pc, #144]	; (18804 <handleParameter+0x960>)
   18772:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   18774:	b96e      	cbnz	r6, 18792 <handleParameter+0x8ee>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SGT_MASK, TMC5130_SGT_SHIFT);
   18776:	f00b fc08 	bl	23f8a <tmc5130_readInt>
   1877a:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   1877c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SGT_MASK, TMC5130_SGT_SHIFT);
   18780:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   18784:	bf18      	it	ne
   18786:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   1878a:	4318      	orrs	r0, r3
   1878c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1878e:	4634      	mov	r4, r6
   18790:	e40b      	b.n	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_COOLCONF, TMC5130_SGT_MASK, TMC5130_SGT_SHIFT, *value);
   18792:	f00b fbfa 	bl	23f8a <tmc5130_readInt>
   18796:	682b      	ldr	r3, [r5, #0]
   18798:	041b      	lsls	r3, r3, #16
   1879a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   1879e:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   187a2:	431a      	orrs	r2, r3
   187a4:	4817      	ldr	r0, [pc, #92]	; (18804 <handleParameter+0x960>)
   187a6:	216d      	movs	r1, #109	; 0x6d
   187a8:	f00b fbe1 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   187ac:	2400      	movs	r4, #0
   187ae:	f7ff bbfc 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VSENSE_MASK, TMC5130_VSENSE_SHIFT);
   187b2:	4814      	ldr	r0, [pc, #80]	; (18804 <handleParameter+0x960>)
   187b4:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   187b6:	b93e      	cbnz	r6, 187c8 <handleParameter+0x924>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VSENSE_MASK, TMC5130_VSENSE_SHIFT);
   187b8:	f00b fbe7 	bl	23f8a <tmc5130_readInt>
   187bc:	f3c0 4040 	ubfx	r0, r0, #17, #1
   187c0:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   187c2:	4634      	mov	r4, r6
   187c4:	f7ff bbf1 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_VSENSE_MASK, TMC5130_VSENSE_SHIFT, *value);
   187c8:	f00b fbdf 	bl	23f8a <tmc5130_readInt>
   187cc:	682b      	ldr	r3, [r5, #0]
   187ce:	045b      	lsls	r3, r3, #17
   187d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   187d4:	f420 3200 	bic.w	r2, r0, #131072	; 0x20000
   187d8:	431a      	orrs	r2, r3
   187da:	480a      	ldr	r0, [pc, #40]	; (18804 <handleParameter+0x960>)
   187dc:	216c      	movs	r1, #108	; 0x6c
   187de:	f00b fbc6 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   187e2:	2400      	movs	r4, #0
   187e4:	f7ff bbe1 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   187e8:	2e00      	cmp	r6, #0
   187ea:	f040 81b9 	bne.w	18b60 <handleParameter+0xcbc>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_DRVSTATUS, TMC5130_CS_ACTUAL_MASK, TMC5130_CS_ACTUAL_SHIFT);
   187ee:	4805      	ldr	r0, [pc, #20]	; (18804 <handleParameter+0x960>)
   187f0:	216f      	movs	r1, #111	; 0x6f
   187f2:	f00b fbca 	bl	23f8a <tmc5130_readInt>
   187f6:	f3c0 4004 	ubfx	r0, r0, #16, #5
   187fa:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   187fc:	4634      	mov	r4, r6
   187fe:	f7ff bbd4 	b.w	17faa <handleParameter+0x106>
   18802:	bf00      	nop
   18804:	1fff3cc8 	.word	0x1fff3cc8
			if(TMC5130_FIELD_READ(motorToIC(motor), TMC5130_SWMODE, TMC5130_SG_STOP_MASK, TMC5130_SG_STOP_SHIFT))
   18808:	48bd      	ldr	r0, [pc, #756]	; (18b00 <handleParameter+0xc5c>)
   1880a:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ)
   1880c:	b9d6      	cbnz	r6, 18844 <handleParameter+0x9a0>
			if(TMC5130_FIELD_READ(motorToIC(motor), TMC5130_SWMODE, TMC5130_SG_STOP_MASK, TMC5130_SG_STOP_SHIFT))
   1880e:	f00b fbbc 	bl	23f8a <tmc5130_readInt>
   18812:	0543      	lsls	r3, r0, #21
   18814:	d512      	bpl.n	1883c <handleParameter+0x998>
				buffer = tmc5130_readInt(motorToIC(motor), TMC5130_TCOOLTHRS);
   18816:	48ba      	ldr	r0, [pc, #744]	; (18b00 <handleParameter+0xc5c>)
   18818:	2114      	movs	r1, #20
   1881a:	f00b fbb6 	bl	23f8a <tmc5130_readInt>
				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer : 1));
   1881e:	2801      	cmp	r0, #1
   18820:	bf38      	it	cc
   18822:	2001      	movcc	r0, #1
   18824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   18828:	fbb3 f0f0 	udiv	r0, r3, r0
   1882c:	4bb5      	ldr	r3, [pc, #724]	; (18b04 <handleParameter+0xc60>)
   1882e:	4298      	cmp	r0, r3
   18830:	bf94      	ite	ls
   18832:	6028      	strls	r0, [r5, #0]
   18834:	602b      	strhi	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18836:	4634      	mov	r4, r6
   18838:	f7ff bbb7 	b.w	17faa <handleParameter+0x106>
				*value = 0;
   1883c:	602e      	str	r6, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1883e:	4634      	mov	r4, r6
   18840:	f7ff bbb3 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_SWMODE, TMC5130_SG_STOP_MASK, TMC5130_SG_STOP_SHIFT, (*value) ? 1:0);
   18844:	f00b fba1 	bl	23f8a <tmc5130_readInt>
   18848:	682b      	ldr	r3, [r5, #0]
   1884a:	2b00      	cmp	r3, #0
   1884c:	bf18      	it	ne
   1884e:	f44f 6380 	movne.w	r3, #1024	; 0x400
   18852:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   18856:	431a      	orrs	r2, r3
   18858:	48a9      	ldr	r0, [pc, #676]	; (18b00 <handleParameter+0xc5c>)
   1885a:	2134      	movs	r1, #52	; 0x34
   1885c:	f00b fb87 	bl	23f6e <tmc5130_writeInt>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   18860:	682b      	ldr	r3, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_TCOOLTHRS, *value);
   18862:	48a7      	ldr	r0, [pc, #668]	; (18b00 <handleParameter+0xc5c>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   18864:	2b00      	cmp	r3, #0
   18866:	bf08      	it	eq
   18868:	2301      	moveq	r3, #1
   1886a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1886e:	fb92 f2f3 	sdiv	r2, r2, r3
   18872:	4ba4      	ldr	r3, [pc, #656]	; (18b04 <handleParameter+0xc60>)
   18874:	429a      	cmp	r2, r3
   18876:	bfa8      	it	ge
   18878:	461a      	movge	r2, r3
   1887a:	602a      	str	r2, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_TCOOLTHRS, *value);
   1887c:	2114      	movs	r1, #20
   1887e:	f00b fb76 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18882:	2400      	movs	r4, #0
   18884:	f7ff bb91 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18888:	4c9e      	ldr	r4, [pc, #632]	; (18b04 <handleParameter+0xc60>)
   1888a:	b98e      	cbnz	r6, 188b0 <handleParameter+0xa0c>
			buffer = tmc5130_readInt(motorToIC(motor), TMC5130_TCOOLTHRS);
   1888c:	489c      	ldr	r0, [pc, #624]	; (18b00 <handleParameter+0xc5c>)
   1888e:	2114      	movs	r1, #20
   18890:	f00b fb7b 	bl	23f8a <tmc5130_readInt>
			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
   18894:	2801      	cmp	r0, #1
   18896:	bf38      	it	cc
   18898:	2001      	movcc	r0, #1
   1889a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1889e:	fbb3 f0f0 	udiv	r0, r3, r0
   188a2:	42a0      	cmp	r0, r4
   188a4:	bf94      	ite	ls
   188a6:	6028      	strls	r0, [r5, #0]
   188a8:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   188aa:	4634      	mov	r4, r6
   188ac:	f7ff bb7d 	b.w	17faa <handleParameter+0x106>
			buffer = MIN(0xFFFFF, (1<<24) / ((*value)? *value : 1));
   188b0:	682a      	ldr	r2, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_TCOOLTHRS, buffer);
   188b2:	4893      	ldr	r0, [pc, #588]	; (18b00 <handleParameter+0xc5c>)
			buffer = MIN(0xFFFFF, (1<<24) / ((*value)? *value : 1));
   188b4:	2a00      	cmp	r2, #0
   188b6:	bf08      	it	eq
   188b8:	2201      	moveq	r2, #1
   188ba:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   188be:	fb91 f2f2 	sdiv	r2, r1, r2
			tmc5130_writeInt(motorToIC(motor), TMC5130_TCOOLTHRS, buffer);
   188c2:	42a2      	cmp	r2, r4
   188c4:	bfa8      	it	ge
   188c6:	4622      	movge	r2, r4
   188c8:	2114      	movs	r1, #20
   188ca:	f00b fb50 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   188ce:	2400      	movs	r4, #0
   188d0:	f7ff bb6b 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_RNDTF_MASK, TMC5130_RNDTF_SHIFT);
   188d4:	488a      	ldr	r0, [pc, #552]	; (18b00 <handleParameter+0xc5c>)
   188d6:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   188d8:	b93e      	cbnz	r6, 188ea <handleParameter+0xa46>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_RNDTF_MASK, TMC5130_RNDTF_SHIFT);
   188da:	f00b fb56 	bl	23f8a <tmc5130_readInt>
   188de:	f3c0 3040 	ubfx	r0, r0, #13, #1
   188e2:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   188e4:	4634      	mov	r4, r6
   188e6:	f7ff bb60 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_RNDTF_MASK, TMC5130_RNDTF_SHIFT, *value);
   188ea:	f00b fb4e 	bl	23f8a <tmc5130_readInt>
   188ee:	682b      	ldr	r3, [r5, #0]
   188f0:	035b      	lsls	r3, r3, #13
   188f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   188f6:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   188fa:	431a      	orrs	r2, r3
   188fc:	4880      	ldr	r0, [pc, #512]	; (18b00 <handleParameter+0xc5c>)
   188fe:	216c      	movs	r1, #108	; 0x6c
   18900:	f00b fb35 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18904:	2400      	movs	r4, #0
   18906:	f7ff bb50 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_SYNC_MASK, TMC5130_SYNC_SHIFT);
   1890a:	487d      	ldr	r0, [pc, #500]	; (18b00 <handleParameter+0xc5c>)
   1890c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1890e:	b93e      	cbnz	r6, 18920 <handleParameter+0xa7c>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_SYNC_MASK, TMC5130_SYNC_SHIFT);
   18910:	f00b fb3b 	bl	23f8a <tmc5130_readInt>
   18914:	f3c0 5003 	ubfx	r0, r0, #20, #4
   18918:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1891a:	4634      	mov	r4, r6
   1891c:	f7ff bb45 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_CHOPCONF, TMC5130_SYNC_MASK, TMC5130_SYNC_SHIFT, *value);
   18920:	f00b fb33 	bl	23f8a <tmc5130_readInt>
   18924:	682b      	ldr	r3, [r5, #0]
   18926:	051b      	lsls	r3, r3, #20
   18928:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
   1892c:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
   18930:	431a      	orrs	r2, r3
   18932:	4873      	ldr	r0, [pc, #460]	; (18b00 <handleParameter+0xc5c>)
   18934:	216c      	movs	r1, #108	; 0x6c
   18936:	f00b fb1a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1893a:	2400      	movs	r4, #0
   1893c:	f7ff bb35 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18940:	4c70      	ldr	r4, [pc, #448]	; (18b04 <handleParameter+0xc60>)
   18942:	b98e      	cbnz	r6, 18968 <handleParameter+0xac4>
			buffer = tmc5130_readInt(motorToIC(motor), TMC5130_TPWMTHRS);
   18944:	486e      	ldr	r0, [pc, #440]	; (18b00 <handleParameter+0xc5c>)
   18946:	2113      	movs	r1, #19
   18948:	f00b fb1f 	bl	23f8a <tmc5130_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer : 1));
   1894c:	2801      	cmp	r0, #1
   1894e:	bf38      	it	cc
   18950:	2001      	movcc	r0, #1
   18952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   18956:	fbb3 f0f0 	udiv	r0, r3, r0
   1895a:	42a0      	cmp	r0, r4
   1895c:	bf94      	ite	ls
   1895e:	6028      	strls	r0, [r5, #0]
   18960:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18962:	4634      	mov	r4, r6
   18964:	f7ff bb21 	b.w	17faa <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value : 1));
   18968:	682b      	ldr	r3, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_TPWMTHRS, *value);
   1896a:	4865      	ldr	r0, [pc, #404]	; (18b00 <handleParameter+0xc5c>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value : 1));
   1896c:	2b00      	cmp	r3, #0
   1896e:	bf08      	it	eq
   18970:	2301      	moveq	r3, #1
   18972:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18976:	fb92 f2f3 	sdiv	r2, r2, r3
   1897a:	42a2      	cmp	r2, r4
   1897c:	bfa8      	it	ge
   1897e:	4622      	movge	r2, r4
   18980:	602a      	str	r2, [r5, #0]
			tmc5130_writeInt(motorToIC(motor), TMC5130_TPWMTHRS, *value);
   18982:	2113      	movs	r1, #19
   18984:	f00b faf3 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18988:	2400      	movs	r4, #0
   1898a:	f7ff bb0e 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_GRAD_MASK, TMC5130_PWM_GRAD_SHIFT);
   1898e:	485c      	ldr	r0, [pc, #368]	; (18b00 <handleParameter+0xc5c>)
   18990:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   18992:	b93e      	cbnz	r6, 189a4 <handleParameter+0xb00>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_GRAD_MASK, TMC5130_PWM_GRAD_SHIFT);
   18994:	f00b faf9 	bl	23f8a <tmc5130_readInt>
   18998:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1899c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1899e:	4634      	mov	r4, r6
   189a0:	f7ff bb03 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_GRAD_MASK, TMC5130_PWM_GRAD_SHIFT, *value);
   189a4:	f00b faf1 	bl	23f8a <tmc5130_readInt>
   189a8:	682b      	ldr	r3, [r5, #0]
   189aa:	021b      	lsls	r3, r3, #8
   189ac:	b29b      	uxth	r3, r3
   189ae:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
   189b2:	431a      	orrs	r2, r3
   189b4:	4852      	ldr	r0, [pc, #328]	; (18b00 <handleParameter+0xc5c>)
   189b6:	2170      	movs	r1, #112	; 0x70
   189b8:	f00b fad9 	bl	23f6e <tmc5130_writeInt>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_GCONF, TMC5130_EN_PWM_MODE_MASK, TMC5130_EN_PWM_MODE_SHIFT, (*value)? 1:0);
   189bc:	2100      	movs	r1, #0
   189be:	4850      	ldr	r0, [pc, #320]	; (18b00 <handleParameter+0xc5c>)
   189c0:	f00b fae3 	bl	23f8a <tmc5130_readInt>
   189c4:	682b      	ldr	r3, [r5, #0]
   189c6:	2b00      	cmp	r3, #0
   189c8:	f020 0204 	bic.w	r2, r0, #4
   189cc:	bf18      	it	ne
   189ce:	2304      	movne	r3, #4
   189d0:	484b      	ldr	r0, [pc, #300]	; (18b00 <handleParameter+0xc5c>)
   189d2:	431a      	orrs	r2, r3
   189d4:	2100      	movs	r1, #0
   189d6:	f00b faca 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   189da:	2400      	movs	r4, #0
   189dc:	f7ff bae5 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_AMPL_MASK, TMC5130_PWM_AMPL_SHIFT);
   189e0:	4847      	ldr	r0, [pc, #284]	; (18b00 <handleParameter+0xc5c>)
   189e2:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   189e4:	b936      	cbnz	r6, 189f4 <handleParameter+0xb50>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_AMPL_MASK, TMC5130_PWM_AMPL_SHIFT);
   189e6:	f00b fad0 	bl	23f8a <tmc5130_readInt>
   189ea:	b2c0      	uxtb	r0, r0
   189ec:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   189ee:	4634      	mov	r4, r6
   189f0:	f7ff badb 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_AMPL_MASK, TMC5130_PWM_AMPL_SHIFT, *value);
   189f4:	f00b fac9 	bl	23f8a <tmc5130_readInt>
   189f8:	782a      	ldrb	r2, [r5, #0]
   189fa:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   189fe:	4302      	orrs	r2, r0
   18a00:	2170      	movs	r1, #112	; 0x70
   18a02:	483f      	ldr	r0, [pc, #252]	; (18b00 <handleParameter+0xc5c>)
   18a04:	f00b fab3 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18a08:	2400      	movs	r4, #0
   18a0a:	f7ff bace 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18a0e:	b94e      	cbnz	r6, 18a24 <handleParameter+0xb80>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_FREQ_MASK, TMC5130_PWM_FREQ_SHIFT);
   18a10:	483b      	ldr	r0, [pc, #236]	; (18b00 <handleParameter+0xc5c>)
   18a12:	2170      	movs	r1, #112	; 0x70
   18a14:	f00b fab9 	bl	23f8a <tmc5130_readInt>
   18a18:	f3c0 4001 	ubfx	r0, r0, #16, #2
   18a1c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18a1e:	4634      	mov	r4, r6
   18a20:	f7ff bac3 	b.w	17faa <handleParameter+0x106>
			if(*value >= 0 && *value < 4)
   18a24:	682b      	ldr	r3, [r5, #0]
   18a26:	2b03      	cmp	r3, #3
   18a28:	f200 809d 	bhi.w	18b66 <handleParameter+0xcc2>
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_FREQ_MASK, TMC5130_PWM_FREQ_SHIFT, *value);
   18a2c:	2170      	movs	r1, #112	; 0x70
   18a2e:	4834      	ldr	r0, [pc, #208]	; (18b00 <handleParameter+0xc5c>)
   18a30:	f00b faab 	bl	23f8a <tmc5130_readInt>
   18a34:	682b      	ldr	r3, [r5, #0]
   18a36:	041b      	lsls	r3, r3, #16
   18a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
   18a3c:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
   18a40:	431a      	orrs	r2, r3
   18a42:	482f      	ldr	r0, [pc, #188]	; (18b00 <handleParameter+0xc5c>)
   18a44:	2170      	movs	r1, #112	; 0x70
   18a46:	f00b fa92 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18a4a:	2400      	movs	r4, #0
   18a4c:	f7ff baad 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18a50:	b94e      	cbnz	r6, 18a66 <handleParameter+0xbc2>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_AUTOSCALE_MASK, TMC5130_PWM_AUTOSCALE_SHIFT);
   18a52:	482b      	ldr	r0, [pc, #172]	; (18b00 <handleParameter+0xc5c>)
   18a54:	2170      	movs	r1, #112	; 0x70
   18a56:	f00b fa98 	bl	23f8a <tmc5130_readInt>
   18a5a:	f3c0 4080 	ubfx	r0, r0, #18, #1
   18a5e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18a60:	4634      	mov	r4, r6
   18a62:	f7ff baa2 	b.w	17faa <handleParameter+0x106>
			if(*value >= 0 && *value < 2)
   18a66:	682b      	ldr	r3, [r5, #0]
   18a68:	2b01      	cmp	r3, #1
   18a6a:	d87f      	bhi.n	18b6c <handleParameter+0xcc8>
				TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_PWMCONF, TMC5130_PWM_AUTOSCALE_MASK, TMC5130_PWM_AUTOSCALE_SHIFT, *value);
   18a6c:	2170      	movs	r1, #112	; 0x70
   18a6e:	4824      	ldr	r0, [pc, #144]	; (18b00 <handleParameter+0xc5c>)
   18a70:	f00b fa8b 	bl	23f8a <tmc5130_readInt>
   18a74:	682b      	ldr	r3, [r5, #0]
   18a76:	049b      	lsls	r3, r3, #18
   18a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   18a7c:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   18a80:	431a      	orrs	r2, r3
   18a82:	481f      	ldr	r0, [pc, #124]	; (18b00 <handleParameter+0xc5c>)
   18a84:	2170      	movs	r1, #112	; 0x70
   18a86:	f00b fa72 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18a8a:	2400      	movs	r4, #0
   18a8c:	f7ff ba8d 	b.w	17faa <handleParameter+0x106>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_FREEWHEEL_MASK, TMC5130_FREEWHEEL_SHIFT);
   18a90:	481b      	ldr	r0, [pc, #108]	; (18b00 <handleParameter+0xc5c>)
   18a92:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   18a94:	b93e      	cbnz	r6, 18aa6 <handleParameter+0xc02>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_PWMCONF, TMC5130_FREEWHEEL_MASK, TMC5130_FREEWHEEL_SHIFT);
   18a96:	f00b fa78 	bl	23f8a <tmc5130_readInt>
   18a9a:	f3c0 5001 	ubfx	r0, r0, #20, #2
   18a9e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18aa0:	4634      	mov	r4, r6
   18aa2:	f7ff ba82 	b.w	17faa <handleParameter+0x106>
			TMC5130_FIELD_WRITE(motorToIC(motor), TMC5130_PWMCONF, TMC5130_FREEWHEEL_MASK, TMC5130_FREEWHEEL_SHIFT, *value);
   18aa6:	f00b fa70 	bl	23f8a <tmc5130_readInt>
   18aaa:	682b      	ldr	r3, [r5, #0]
   18aac:	051b      	lsls	r3, r3, #20
   18aae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
   18ab2:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
   18ab6:	431a      	orrs	r2, r3
   18ab8:	4811      	ldr	r0, [pc, #68]	; (18b00 <handleParameter+0xc5c>)
   18aba:	2170      	movs	r1, #112	; 0x70
   18abc:	f00b fa57 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18ac0:	2400      	movs	r4, #0
   18ac2:	f7ff ba72 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18ac6:	2e00      	cmp	r6, #0
   18ac8:	d153      	bne.n	18b72 <handleParameter+0xcce>
			*value = TMC5130_FIELD_READ(motorToIC(motor), TMC5130_DRVSTATUS, TMC5130_SG_RESULT_MASK, TMC5130_SG_RESULT_SHIFT);
   18aca:	480d      	ldr	r0, [pc, #52]	; (18b00 <handleParameter+0xc5c>)
   18acc:	216f      	movs	r1, #111	; 0x6f
   18ace:	f00b fa5c 	bl	23f8a <tmc5130_readInt>
   18ad2:	f3c0 0009 	ubfx	r0, r0, #0, #10
   18ad6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   18ad8:	4634      	mov	r4, r6
   18ada:	f7ff ba66 	b.w	17faa <handleParameter+0x106>
		if(readWrite == READ) {
   18ade:	b93e      	cbnz	r6, 18af0 <handleParameter+0xc4c>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XENC);
   18ae0:	4807      	ldr	r0, [pc, #28]	; (18b00 <handleParameter+0xc5c>)
   18ae2:	2139      	movs	r1, #57	; 0x39
   18ae4:	f00b fa51 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18ae8:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_XENC);
   18aea:	6028      	str	r0, [r5, #0]
   18aec:	f7ff ba5d 	b.w	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_XENC, *value);
   18af0:	682a      	ldr	r2, [r5, #0]
   18af2:	4803      	ldr	r0, [pc, #12]	; (18b00 <handleParameter+0xc5c>)
   18af4:	2139      	movs	r1, #57	; 0x39
   18af6:	f00b fa3a 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18afa:	2400      	movs	r4, #0
   18afc:	f7ff ba55 	b.w	17faa <handleParameter+0x106>
   18b00:	1fff3cc8 	.word	0x1fff3cc8
   18b04:	000fffff 	.word	0x000fffff
		if(readWrite == READ) {
   18b08:	b93e      	cbnz	r6, 18b1a <handleParameter+0xc76>
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_ENC_CONST);
   18b0a:	481b      	ldr	r0, [pc, #108]	; (18b78 <handleParameter+0xcd4>)
   18b0c:	213a      	movs	r1, #58	; 0x3a
   18b0e:	f00b fa3c 	bl	23f8a <tmc5130_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   18b12:	4634      	mov	r4, r6
			*value = tmc5130_readInt(motorToIC(motor), TMC5130_ENC_CONST);
   18b14:	6028      	str	r0, [r5, #0]
   18b16:	f7ff ba48 	b.w	17faa <handleParameter+0x106>
			tmc5130_writeInt(motorToIC(motor), TMC5130_ENC_CONST, *value);
   18b1a:	682a      	ldr	r2, [r5, #0]
   18b1c:	4816      	ldr	r0, [pc, #88]	; (18b78 <handleParameter+0xcd4>)
   18b1e:	213a      	movs	r1, #58	; 0x3a
   18b20:	f00b fa25 	bl	23f6e <tmc5130_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   18b24:	2400      	movs	r4, #0
   18b26:	f7ff ba40 	b.w	17faa <handleParameter+0x106>
		return TMC_ERROR_MOTOR;
   18b2a:	2408      	movs	r4, #8
   18b2c:	f7ff ba3d 	b.w	17faa <handleParameter+0x106>
	switch(type)
   18b30:	2404      	movs	r4, #4
   18b32:	f7ff ba3a 	b.w	17faa <handleParameter+0x106>
   18b36:	2404      	movs	r4, #4
   18b38:	f7ff ba37 	b.w	17faa <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   18b3c:	2404      	movs	r4, #4
   18b3e:	f7ff ba34 	b.w	17faa <handleParameter+0x106>
	uint32_t errors = TMC_ERROR_NONE;
   18b42:	2400      	movs	r4, #0
   18b44:	f7ff ba31 	b.w	17faa <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   18b48:	2404      	movs	r4, #4
   18b4a:	f7ff ba2e 	b.w	17faa <handleParameter+0x106>
   18b4e:	2404      	movs	r4, #4
   18b50:	f7ff ba2b 	b.w	17faa <handleParameter+0x106>
   18b54:	2404      	movs	r4, #4
   18b56:	f7ff ba28 	b.w	17faa <handleParameter+0x106>
   18b5a:	2404      	movs	r4, #4
   18b5c:	f7ff ba25 	b.w	17faa <handleParameter+0x106>
   18b60:	2404      	movs	r4, #4
   18b62:	f7ff ba22 	b.w	17faa <handleParameter+0x106>
				errors |= TMC_ERROR_VALUE;
   18b66:	2410      	movs	r4, #16
   18b68:	f7ff ba1f 	b.w	17faa <handleParameter+0x106>
   18b6c:	2410      	movs	r4, #16
   18b6e:	f7ff ba1c 	b.w	17faa <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   18b72:	2404      	movs	r4, #4
   18b74:	f7ff ba19 	b.w	17faa <handleParameter+0x106>
   18b78:	1fff3cc8 	.word	0x1fff3cc8

00018b7c <SAP>:
{
   18b7c:	b507      	push	{r0, r1, r2, lr}
   18b7e:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   18b80:	ab01      	add	r3, sp, #4
   18b82:	4602      	mov	r2, r0
   18b84:	2001      	movs	r0, #1
   18b86:	f7ff f98d 	bl	17ea4 <handleParameter>
}
   18b8a:	b003      	add	sp, #12
   18b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00018b90 <GAP>:
{
   18b90:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   18b92:	4602      	mov	r2, r0
   18b94:	2000      	movs	r0, #0
   18b96:	f7ff b985 	b.w	17ea4 <handleParameter>

00018b9a <moveBy>:
{
   18b9a:	b508      	push	{r3, lr}
	tmc5130_moveBy(motorToIC(motor), ticks, vmax_position);
   18b9c:	4803      	ldr	r0, [pc, #12]	; (18bac <moveBy+0x12>)
   18b9e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   18ba2:	f00b fb2e 	bl	24202 <tmc5130_moveBy>
}
   18ba6:	2000      	movs	r0, #0
   18ba8:	bd08      	pop	{r3, pc}
   18baa:	bf00      	nop
   18bac:	1fff3cc8 	.word	0x1fff3cc8

00018bb0 <moveTo>:
{
   18bb0:	b508      	push	{r3, lr}
	tmc5130_moveTo(motorToIC(motor), position, vmax_position);
   18bb2:	4803      	ldr	r0, [pc, #12]	; (18bc0 <moveTo+0x10>)
   18bb4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
   18bb8:	f00b fb0f 	bl	241da <tmc5130_moveTo>
}
   18bbc:	2000      	movs	r0, #0
   18bbe:	bd08      	pop	{r3, pc}
   18bc0:	1fff3cc8 	.word	0x1fff3cc8

00018bc4 <stop>:
{
   18bc4:	b508      	push	{r3, lr}
	tmc5130_stop(motorToIC(motor));
   18bc6:	4802      	ldr	r0, [pc, #8]	; (18bd0 <stop+0xc>)
   18bc8:	f00b fb04 	bl	241d4 <tmc5130_stop>
}
   18bcc:	2000      	movs	r0, #0
   18bce:	bd08      	pop	{r3, pc}
   18bd0:	1fff3cc8 	.word	0x1fff3cc8

00018bd4 <left>:
{
   18bd4:	b508      	push	{r3, lr}
	tmc5130_left(motorToIC(motor), velocity);
   18bd6:	4802      	ldr	r0, [pc, #8]	; (18be0 <left+0xc>)
   18bd8:	f00b faf9 	bl	241ce <tmc5130_left>
}
   18bdc:	2000      	movs	r0, #0
   18bde:	bd08      	pop	{r3, pc}
   18be0:	1fff3cc8 	.word	0x1fff3cc8

00018be4 <right>:
{
   18be4:	b508      	push	{r3, lr}
	tmc5130_right(motorToIC(motor), velocity);
   18be6:	4802      	ldr	r0, [pc, #8]	; (18bf0 <right+0xc>)
   18be8:	f00b faef 	bl	241ca <tmc5130_right>
}
   18bec:	2000      	movs	r0, #0
   18bee:	bd08      	pop	{r3, pc}
   18bf0:	1fff3cc8 	.word	0x1fff3cc8

00018bf4 <rotate>:
{
   18bf4:	b508      	push	{r3, lr}
	tmc5130_rotate(motorToIC(motor), velocity);
   18bf6:	4802      	ldr	r0, [pc, #8]	; (18c00 <rotate+0xc>)
   18bf8:	f00b fad2 	bl	241a0 <tmc5130_rotate>
}
   18bfc:	2000      	movs	r0, #0
   18bfe:	bd08      	pop	{r3, pc}
   18c00:	1fff3cc8 	.word	0x1fff3cc8

00018c04 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc5130_restore(&TMC5130);
   18c04:	4801      	ldr	r0, [pc, #4]	; (18c0c <restore+0x8>)
   18c06:	f00b ba4e 	b.w	240a6 <tmc5130_restore>
   18c0a:	bf00      	nop
   18c0c:	1fff3cc8 	.word	0x1fff3cc8

00018c10 <reset>:
{
   18c10:	b538      	push	{r3, r4, r5, lr}
	if(!tmc5130_readInt(&TMC5130, TMC5130_VACTUAL))
   18c12:	480e      	ldr	r0, [pc, #56]	; (18c4c <reset+0x3c>)
   18c14:	4c0d      	ldr	r4, [pc, #52]	; (18c4c <reset+0x3c>)
   18c16:	2122      	movs	r1, #34	; 0x22
   18c18:	f00b f9b7 	bl	23f8a <tmc5130_readInt>
   18c1c:	b910      	cbnz	r0, 18c24 <reset+0x14>
		tmc5130_reset(&TMC5130);
   18c1e:	4620      	mov	r0, r4
   18c20:	f00b fa2a 	bl	24078 <tmc5130_reset>
	HAL.IOs->config->setLow(Pins.AIN_REF_SW);
   18c24:	4b0a      	ldr	r3, [pc, #40]	; (18c50 <reset+0x40>)
   18c26:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   18c2a:	68dd      	ldr	r5, [r3, #12]
   18c2c:	682b      	ldr	r3, [r5, #0]
   18c2e:	699b      	ldr	r3, [r3, #24]
   18c30:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFL_UC);
   18c32:	682b      	ldr	r3, [r5, #0]
   18c34:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   18c38:	691b      	ldr	r3, [r3, #16]
   18c3a:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   18c3c:	682b      	ldr	r3, [r5, #0]
   18c3e:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   18c42:	691b      	ldr	r3, [r3, #16]
   18c44:	4798      	blx	r3
}
   18c46:	2001      	movs	r0, #1
   18c48:	bd38      	pop	{r3, r4, r5, pc}
   18c4a:	bf00      	nop
   18c4c:	1fff3cc8 	.word	0x1fff3cc8
   18c50:	00029d1c 	.word	0x00029d1c

00018c54 <enableDriver>:
	}
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   18c54:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   18c56:	bf04      	itt	eq
   18c58:	4b0c      	ldreq	r3, [pc, #48]	; (18c8c <enableDriver+0x38>)
   18c5a:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   18c5e:	b938      	cbnz	r0, 18c70 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
   18c60:	4b0b      	ldr	r3, [pc, #44]	; (18c90 <enableDriver+0x3c>)
   18c62:	68db      	ldr	r3, [r3, #12]
   18c64:	681b      	ldr	r3, [r3, #0]
   18c66:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   18c68:	4a0a      	ldr	r2, [pc, #40]	; (18c94 <enableDriver+0x40>)
   18c6a:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
   18c6e:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   18c70:	2801      	cmp	r0, #1
   18c72:	d109      	bne.n	18c88 <enableDriver+0x34>
   18c74:	4b05      	ldr	r3, [pc, #20]	; (18c8c <enableDriver+0x38>)
   18c76:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   18c7a:	2b01      	cmp	r3, #1
   18c7c:	d104      	bne.n	18c88 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   18c7e:	4b04      	ldr	r3, [pc, #16]	; (18c90 <enableDriver+0x3c>)
   18c80:	68db      	ldr	r3, [r3, #12]
   18c82:	681b      	ldr	r3, [r3, #0]
   18c84:	699b      	ldr	r3, [r3, #24]
   18c86:	e7ef      	b.n	18c68 <enableDriver+0x14>
}
   18c88:	4770      	bx	lr
   18c8a:	bf00      	nop
   18c8c:	1fff5e88 	.word	0x1fff5e88
   18c90:	00029d1c 	.word	0x00029d1c
   18c94:	1fff3cc8 	.word	0x1fff3cc8

00018c98 <configCallback>:
	if(completedState == CONFIG_RESET)
   18c98:	2901      	cmp	r1, #1
{
   18c9a:	b508      	push	{r3, lr}
	if(completedState == CONFIG_RESET)
   18c9c:	d108      	bne.n	18cb0 <configCallback+0x18>
		tmc5130_writeInt(tmc5130, TMC5130_PWMCONF, 0x000504C8);
   18c9e:	4a05      	ldr	r2, [pc, #20]	; (18cb4 <configCallback+0x1c>)
   18ca0:	2170      	movs	r1, #112	; 0x70
   18ca2:	f00b f964 	bl	23f6e <tmc5130_writeInt>
}
   18ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		tmc5130_fillShadowRegisters(&TMC5130);
   18caa:	4803      	ldr	r0, [pc, #12]	; (18cb8 <configCallback+0x20>)
   18cac:	f00b b9ba 	b.w	24024 <tmc5130_fillShadowRegisters>
}
   18cb0:	bd08      	pop	{r3, pc}
   18cb2:	bf00      	nop
   18cb4:	000504c8 	.word	0x000504c8
   18cb8:	1fff3cc8 	.word	0x1fff3cc8

00018cbc <tmc5130_readWriteArray>:
	return TMC5130_SPIChannel;
   18cbc:	4b03      	ldr	r3, [pc, #12]	; (18ccc <tmc5130_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   18cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
{
   18cc2:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   18cc4:	68db      	ldr	r3, [r3, #12]
   18cc6:	4611      	mov	r1, r2
   18cc8:	4718      	bx	r3
   18cca:	bf00      	nop
   18ccc:	1fff3cc8 	.word	0x1fff3cc8

00018cd0 <TMC5130_init>:

void TMC5130_init(void)
{
   18cd0:	b570      	push	{r4, r5, r6, lr}
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   18cd2:	4e63      	ldr	r6, [pc, #396]	; (18e60 <TMC5130_init+0x190>)
   18cd4:	4c63      	ldr	r4, [pc, #396]	; (18e64 <TMC5130_init+0x194>)
   18cd6:	68f5      	ldr	r5, [r6, #12]
   18cd8:	686b      	ldr	r3, [r5, #4]
   18cda:	f103 0268 	add.w	r2, r3, #104	; 0x68
   18cde:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO2;
   18ce2:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
   18ce6:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO3;
   18cea:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   18cee:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.REFL_UC         = &HAL.IOs->pins->DIO6;
   18cf2:	f503 7294 	add.w	r2, r3, #296	; 0x128
   18cf6:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.REFR_UC         = &HAL.IOs->pins->DIO7;
   18cfa:	f503 72a4 	add.w	r2, r3, #328	; 0x148
   18cfe:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.AIN_REF_SW      = &HAL.IOs->pins->DIO10;
   18d02:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
   18d06:	f8c4 22b4 	str.w	r2, [r4, #692]	; 0x2b4
	Pins.AIN_REF_PWM     = &HAL.IOs->pins->DIO11;
   18d0a:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
   18d0e:	f8c4 22b8 	str.w	r2, [r4, #696]	; 0x2b8
	Pins.SWSEL           = &HAL.IOs->pins->DIO14;
   18d12:	f503 7262 	add.w	r2, r3, #904	; 0x388
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
   18d16:	f103 0088 	add.w	r0, r3, #136	; 0x88
	Pins.SWSEL           = &HAL.IOs->pins->DIO14;
   18d1a:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   18d1e:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
   18d22:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
   18d26:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac

	HAL.IOs->config->toInput(Pins.ENCN_DCO);
   18d2a:	682b      	ldr	r3, [r5, #0]
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   18d2c:	f8c4 22b0 	str.w	r2, [r4, #688]	; 0x2b0
	HAL.IOs->config->toInput(Pins.ENCN_DCO);
   18d30:	691b      	ldr	r3, [r3, #16]
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
   18d32:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
	HAL.IOs->config->toInput(Pins.ENCN_DCO);
   18d36:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   18d38:	682b      	ldr	r3, [r5, #0]
   18d3a:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   18d3e:	691b      	ldr	r3, [r3, #16]
   18d40:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCA_DCIN_CFG5);
   18d42:	682b      	ldr	r3, [r5, #0]
   18d44:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   18d48:	691b      	ldr	r3, [r3, #16]
   18d4a:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.SWN_DIAG0);
   18d4c:	682b      	ldr	r3, [r5, #0]
   18d4e:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   18d52:	691b      	ldr	r3, [r3, #16]
   18d54:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWP_DIAG1);
   18d56:	682b      	ldr	r3, [r5, #0]
   18d58:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   18d5c:	691b      	ldr	r3, [r3, #16]
   18d5e:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SWSEL);
   18d60:	682b      	ldr	r3, [r5, #0]
   18d62:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   18d66:	68db      	ldr	r3, [r3, #12]
   18d68:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFL_UC);
   18d6a:	682b      	ldr	r3, [r5, #0]
   18d6c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   18d70:	691b      	ldr	r3, [r3, #16]
   18d72:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   18d74:	682b      	ldr	r3, [r5, #0]
   18d76:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   18d7a:	691b      	ldr	r3, [r3, #16]
   18d7c:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   18d7e:	682b      	ldr	r3, [r5, #0]
   18d80:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   18d84:	68db      	ldr	r3, [r3, #12]
   18d86:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_SW);
   18d88:	682b      	ldr	r3, [r5, #0]
   18d8a:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   18d8e:	68db      	ldr	r3, [r3, #12]
   18d90:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
   18d92:	682b      	ldr	r3, [r5, #0]
   18d94:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   18d98:	68db      	ldr	r3, [r3, #12]
   18d9a:	4798      	blx	r3

	HAL.IOs->config->setLow(Pins.SWSEL);
   18d9c:	682b      	ldr	r3, [r5, #0]
   18d9e:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   18da2:	699b      	ldr	r3, [r3, #24]
   18da4:	4798      	blx	r3

	TMC5130_SPIChannel = &HAL.SPI->ch1;
	TMC5130_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   18da6:	686b      	ldr	r3, [r5, #4]
	TMC5130_SPIChannel = &HAL.SPI->ch1;
   18da8:	6932      	ldr	r2, [r6, #16]
   18daa:	f8c4 22c0 	str.w	r2, [r4, #704]	; 0x2c0
	TMC5130_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   18dae:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   18db2:	6053      	str	r3, [r2, #4]

	Evalboards.ch1.config->reset        = reset;
   18db4:	4b2c      	ldr	r3, [pc, #176]	; (18e68 <TMC5130_init+0x198>)
   18db6:	492d      	ldr	r1, [pc, #180]	; (18e6c <TMC5130_init+0x19c>)
   18db8:	699a      	ldr	r2, [r3, #24]
	Evalboards.ch1.config->restore      = restore;
	Evalboards.ch1.config->state        = CONFIG_RESET;
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   18dba:	482d      	ldr	r0, [pc, #180]	; (18e70 <TMC5130_init+0x1a0>)
	Evalboards.ch1.config->reset        = reset;
   18dbc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   18dc0:	492c      	ldr	r1, [pc, #176]	; (18e74 <TMC5130_init+0x1a4>)
   18dc2:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   18dc6:	2101      	movs	r1, #1
   18dc8:	8011      	strh	r1, [r2, #0]
	Evalboards.ch1.rotate               = rotate;
   18dca:	6258      	str	r0, [r3, #36]	; 0x24
	Evalboards.ch1.right                = right;
   18dcc:	482a      	ldr	r0, [pc, #168]	; (18e78 <TMC5130_init+0x1a8>)
   18dce:	6218      	str	r0, [r3, #32]
	Evalboards.ch1.left                 = left;
   18dd0:	482a      	ldr	r0, [pc, #168]	; (18e7c <TMC5130_init+0x1ac>)
   18dd2:	61d8      	str	r0, [r3, #28]
	Evalboards.ch1.stop                 = stop;
   18dd4:	482a      	ldr	r0, [pc, #168]	; (18e80 <TMC5130_init+0x1b0>)
   18dd6:	6298      	str	r0, [r3, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   18dd8:	482a      	ldr	r0, [pc, #168]	; (18e84 <TMC5130_init+0x1b4>)
   18dda:	63d8      	str	r0, [r3, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   18ddc:	482a      	ldr	r0, [pc, #168]	; (18e88 <TMC5130_init+0x1b8>)
   18dde:	6398      	str	r0, [r3, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   18de0:	482a      	ldr	r0, [pc, #168]	; (18e8c <TMC5130_init+0x1bc>)
   18de2:	62d8      	str	r0, [r3, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   18de4:	482a      	ldr	r0, [pc, #168]	; (18e90 <TMC5130_init+0x1c0>)
   18de6:	6318      	str	r0, [r3, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   18de8:	482a      	ldr	r0, [pc, #168]	; (18e94 <TMC5130_init+0x1c4>)
   18dea:	64d8      	str	r0, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   18dec:	482a      	ldr	r0, [pc, #168]	; (18e98 <TMC5130_init+0x1c8>)
   18dee:	6498      	str	r0, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   18df0:	482a      	ldr	r0, [pc, #168]	; (18e9c <TMC5130_init+0x1cc>)
   18df2:	6598      	str	r0, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   18df4:	482a      	ldr	r0, [pc, #168]	; (18ea0 <TMC5130_init+0x1d0>)
   18df6:	6558      	str	r0, [r3, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   18df8:	482a      	ldr	r0, [pc, #168]	; (18ea4 <TMC5130_init+0x1d4>)
   18dfa:	6518      	str	r0, [r3, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   18dfc:	482a      	ldr	r0, [pc, #168]	; (18ea8 <TMC5130_init+0x1d8>)
   18dfe:	6658      	str	r0, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   18e00:	482a      	ldr	r0, [pc, #168]	; (18eac <TMC5130_init+0x1dc>)
   18e02:	6618      	str	r0, [r3, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC5130_MOTORS;
   18e04:	7519      	strb	r1, [r3, #20]
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   18e06:	2032      	movs	r0, #50	; 0x32
   18e08:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   18e0c:	e9c3 1003 	strd	r1, r0, [r3, #12]
	Evalboards.ch1.deInit               = deInit;
   18e10:	4927      	ldr	r1, [pc, #156]	; (18eb0 <TMC5130_init+0x1e0>)
   18e12:	65d9      	str	r1, [r3, #92]	; 0x5c

	tmc5130_init(&TMC5130, 0, Evalboards.ch1.config, &tmc5130_defaultRegisterResetState[0]);
   18e14:	4620      	mov	r0, r4
   18e16:	4b27      	ldr	r3, [pc, #156]	; (18eb4 <TMC5130_init+0x1e4>)
   18e18:	2100      	movs	r1, #0
   18e1a:	f00b f8e3 	bl	23fe4 <tmc5130_init>
	tmc5130_setCallback(&TMC5130, configCallback);
   18e1e:	4926      	ldr	r1, [pc, #152]	; (18eb8 <TMC5130_init+0x1e8>)
   18e20:	4620      	mov	r0, r4
   18e22:	f00b f954 	bl	240ce <tmc5130_setCallback>

	vmax_position = TMC5130.config->shadowRegister[TMC5130_VMAX];
   18e26:	6823      	ldr	r3, [r4, #0]

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   18e28:	2002      	movs	r0, #2
	vmax_position = TMC5130.config->shadowRegister[TMC5130_VMAX];
   18e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   18e2e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   18e32:	f7ff ff0f 	bl	18c54 <enableDriver>

#if defined(Startrampe)
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF;
	GPIO_PinAFConfig(Pins.AIN_REF_PWM->port, Pins.AIN_REF_PWM->bit, GPIO_AF_TIM1);
#elif defined(Landungsbruecke)
	HAL.IOs->config->toOutput(Pins.AIN_REF_PWM);
   18e36:	682b      	ldr	r3, [r5, #0]
   18e38:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   18e3c:	68db      	ldr	r3, [r3, #12]
   18e3e:	4798      	blx	r3
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
   18e40:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
#endif

	HAL.IOs->config->set(Pins.AIN_REF_PWM);
	Timer.init();
   18e44:	4c1d      	ldr	r4, [pc, #116]	; (18ebc <TMC5130_init+0x1ec>)
	Pins.AIN_REF_PWM->configuration.GPIO_Mode = GPIO_Mode_AF4;
   18e46:	2304      	movs	r3, #4
   18e48:	7543      	strb	r3, [r0, #21]
	HAL.IOs->config->set(Pins.AIN_REF_PWM);
   18e4a:	682b      	ldr	r3, [r5, #0]
   18e4c:	681b      	ldr	r3, [r3, #0]
   18e4e:	4798      	blx	r3
	Timer.init();
   18e50:	6823      	ldr	r3, [r4, #0]
   18e52:	4798      	blx	r3
	Timer.setDuty(TIMER_CHANNEL_1, 0);
   18e54:	2100      	movs	r1, #0
   18e56:	68a3      	ldr	r3, [r4, #8]
   18e58:	4608      	mov	r0, r1
};
   18e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Timer.setDuty(TIMER_CHANNEL_1, 0);
   18e5e:	4718      	bx	r3
   18e60:	00029d1c 	.word	0x00029d1c
   18e64:	1fff3cc8 	.word	0x1fff3cc8
   18e68:	1fff5e88 	.word	0x1fff5e88
   18e6c:	00018c11 	.word	0x00018c11
   18e70:	00018bf5 	.word	0x00018bf5
   18e74:	00018c05 	.word	0x00018c05
   18e78:	00018be5 	.word	0x00018be5
   18e7c:	00018bd5 	.word	0x00018bd5
   18e80:	00018bc5 	.word	0x00018bc5
   18e84:	00018b91 	.word	0x00018b91
   18e88:	00018b7d 	.word	0x00018b7d
   18e8c:	00018bb1 	.word	0x00018bb1
   18e90:	00018b9b 	.word	0x00018b9b
   18e94:	00017e79 	.word	0x00017e79
   18e98:	00017e91 	.word	0x00017e91
   18e9c:	00017e85 	.word	0x00017e85
   18ea0:	00017c51 	.word	0x00017c51
   18ea4:	00017c31 	.word	0x00017c31
   18ea8:	00018c55 	.word	0x00018c55
   18eac:	00017c45 	.word	0x00017c45
   18eb0:	00017de1 	.word	0x00017de1
   18eb4:	000298f8 	.word	0x000298f8
   18eb8:	00018c99 	.word	0x00018c99
   18ebc:	1fff0ae0 	.word	0x1fff0ae0

00018ec0 <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= TMC5160_MOTORS)
   18ec0:	b918      	cbnz	r0, 18eca <getMeasuredSpeed+0xa>
		return TMC_ERROR_MOTOR;

	*value = TMC5160.velocity;
   18ec2:	4b03      	ldr	r3, [pc, #12]	; (18ed0 <getMeasuredSpeed+0x10>)
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	600b      	str	r3, [r1, #0]

	return TMC_ERROR_NONE;
   18ec8:	4770      	bx	lr
		return TMC_ERROR_MOTOR;
   18eca:	2008      	movs	r0, #8
}
   18ecc:	4770      	bx	lr
   18ece:	bf00      	nop
   18ed0:	1fff3f98 	.word	0x1fff3f98

00018ed4 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   18ed4:	4b01      	ldr	r3, [pc, #4]	; (18edc <checkErrors+0x8>)
   18ed6:	2200      	movs	r2, #0
   18ed8:	609a      	str	r2, [r3, #8]
}
   18eda:	4770      	bx	lr
   18edc:	1fff5e88 	.word	0x1fff5e88

00018ee0 <deInit>:
	return errors;
}

static void deInit(void)
{
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   18ee0:	4b23      	ldr	r3, [pc, #140]	; (18f70 <deInit+0x90>)
{
   18ee2:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   18ee4:	68dd      	ldr	r5, [r3, #12]
   18ee6:	4c23      	ldr	r4, [pc, #140]	; (18f74 <deInit+0x94>)
   18ee8:	682b      	ldr	r3, [r5, #0]
   18eea:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   18eee:	699b      	ldr	r3, [r3, #24]
   18ef0:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SD_MODE);
   18ef2:	682b      	ldr	r3, [r5, #0]
   18ef4:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   18ef8:	699b      	ldr	r3, [r3, #24]
   18efa:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SPI_MODE);
   18efc:	682b      	ldr	r3, [r5, #0]
   18efe:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   18f02:	699b      	ldr	r3, [r3, #24]
   18f04:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
   18f06:	682b      	ldr	r3, [r5, #0]
   18f08:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   18f0c:	689b      	ldr	r3, [r3, #8]
   18f0e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
   18f10:	682b      	ldr	r3, [r5, #0]
   18f12:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   18f16:	689b      	ldr	r3, [r3, #8]
   18f18:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCN_DCO);
   18f1a:	682b      	ldr	r3, [r5, #0]
   18f1c:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   18f20:	689b      	ldr	r3, [r3, #8]
   18f22:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFL_UC);
   18f24:	682b      	ldr	r3, [r5, #0]
   18f26:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   18f2a:	689b      	ldr	r3, [r3, #8]
   18f2c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFR_UC);
   18f2e:	682b      	ldr	r3, [r5, #0]
   18f30:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   18f34:	689b      	ldr	r3, [r3, #8]
   18f36:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWN_DIAG0);
   18f38:	682b      	ldr	r3, [r5, #0]
   18f3a:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   18f3e:	689b      	ldr	r3, [r3, #8]
   18f40:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWP_DIAG1);
   18f42:	682b      	ldr	r3, [r5, #0]
   18f44:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   18f48:	689b      	ldr	r3, [r3, #8]
   18f4a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
   18f4c:	682b      	ldr	r3, [r5, #0]
   18f4e:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   18f52:	689b      	ldr	r3, [r3, #8]
   18f54:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SD_MODE);
   18f56:	682b      	ldr	r3, [r5, #0]
   18f58:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   18f5c:	689b      	ldr	r3, [r3, #8]
   18f5e:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SPI_MODE);
   18f60:	682b      	ldr	r3, [r5, #0]
   18f62:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   18f66:	689b      	ldr	r3, [r3, #8]
};
   18f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.SPI_MODE);
   18f6c:	4718      	bx	r3
   18f6e:	bf00      	nop
   18f70:	00029d1c 	.word	0x00029d1c
   18f74:	1fff3f98 	.word	0x1fff3f98

00018f78 <periodicJob>:
		tmc5160_periodicJob(motor, tick, &TMC5160, TMC5160_config);
   18f78:	4a03      	ldr	r2, [pc, #12]	; (18f88 <periodicJob+0x10>)
{
   18f7a:	4601      	mov	r1, r0
		tmc5160_periodicJob(motor, tick, &TMC5160, TMC5160_config);
   18f7c:	f8d2 32b8 	ldr.w	r3, [r2, #696]	; 0x2b8
   18f80:	2000      	movs	r0, #0
   18f82:	f00b b98c 	b.w	2429e <tmc5160_periodicJob>
   18f86:	bf00      	nop
   18f88:	1fff3f98 	.word	0x1fff3f98

00018f8c <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc5160_restore(TMC5160_config);
   18f8c:	4b02      	ldr	r3, [pc, #8]	; (18f98 <restore+0xc>)
   18f8e:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
   18f92:	f00b b9bd 	b.w	24310 <tmc5160_restore>
   18f96:	bf00      	nop
   18f98:	1fff3f98 	.word	0x1fff3f98

00018f9c <readInt_spi.isra.0>:
static int32_t readInt_spi(uint8_t motor, uint8_t address)
   18f9c:	b538      	push	{r3, r4, r5, lr}
	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
   18f9e:	4c28      	ldr	r4, [pc, #160]	; (19040 <readInt_spi.isra.0+0xa4>)
	address = TMC_ADDRESS(address);
   18fa0:	f000 057f 	and.w	r5, r0, #127	; 0x7f
	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
   18fa4:	1963      	adds	r3, r4, r5
   18fa6:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
   18faa:	07db      	lsls	r3, r3, #31
   18fac:	d405      	bmi.n	18fba <readInt_spi.isra.0+0x1e>
		return TMC5160_config->shadowRegister[address];
   18fae:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   18fb2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   18fb6:	6868      	ldr	r0, [r5, #4]
}
   18fb8:	bd38      	pop	{r3, r4, r5, pc}
	TMC5160_SPIChannel->readWrite(address, false);
   18fba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18fbe:	2100      	movs	r1, #0
   18fc0:	689b      	ldr	r3, [r3, #8]
   18fc2:	4628      	mov	r0, r5
   18fc4:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(0, false);
   18fc6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18fca:	2100      	movs	r1, #0
   18fcc:	689b      	ldr	r3, [r3, #8]
   18fce:	4608      	mov	r0, r1
   18fd0:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(0, false);
   18fd2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18fd6:	2100      	movs	r1, #0
   18fd8:	689b      	ldr	r3, [r3, #8]
   18fda:	4608      	mov	r0, r1
   18fdc:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(0, false);
   18fde:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18fe2:	2100      	movs	r1, #0
   18fe4:	689b      	ldr	r3, [r3, #8]
   18fe6:	4608      	mov	r0, r1
   18fe8:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(0, true);
   18fea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18fee:	2101      	movs	r1, #1
   18ff0:	689b      	ldr	r3, [r3, #8]
   18ff2:	2000      	movs	r0, #0
   18ff4:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(address, false);
   18ff6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   18ffa:	2100      	movs	r1, #0
   18ffc:	689b      	ldr	r3, [r3, #8]
   18ffe:	4628      	mov	r0, r5
   19000:	4798      	blx	r3
	int value = TMC5160_SPIChannel->readWrite(0, false);
   19002:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   19006:	2100      	movs	r1, #0
   19008:	689b      	ldr	r3, [r3, #8]
   1900a:	4608      	mov	r0, r1
   1900c:	4798      	blx	r3
	value |= TMC5160_SPIChannel->readWrite(0, false);
   1900e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   19012:	2100      	movs	r1, #0
   19014:	689b      	ldr	r3, [r3, #8]
	value <<= 8;
   19016:	0205      	lsls	r5, r0, #8
	value |= TMC5160_SPIChannel->readWrite(0, false);
   19018:	4608      	mov	r0, r1
   1901a:	4798      	blx	r3
	value |= TMC5160_SPIChannel->readWrite(0, false);
   1901c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
   19020:	2100      	movs	r1, #0
   19022:	689b      	ldr	r3, [r3, #8]
	value |= TMC5160_SPIChannel->readWrite(0, false);
   19024:	4305      	orrs	r5, r0
	value |= TMC5160_SPIChannel->readWrite(0, false);
   19026:	4608      	mov	r0, r1
   19028:	4798      	blx	r3
	value |= TMC5160_SPIChannel->readWrite(0, true);
   1902a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
	value <<=	8;
   1902e:	022d      	lsls	r5, r5, #8
	value |= TMC5160_SPIChannel->readWrite(0, false);
   19030:	4305      	orrs	r5, r0
	value |= TMC5160_SPIChannel->readWrite(0, true);
   19032:	689b      	ldr	r3, [r3, #8]
   19034:	2101      	movs	r1, #1
   19036:	2000      	movs	r0, #0
   19038:	4798      	blx	r3
	value <<= 8;
   1903a:	022d      	lsls	r5, r5, #8
	value |= TMC5160_SPIChannel->readWrite(0, true);
   1903c:	4328      	orrs	r0, r5
	return value;
   1903e:	e7bb      	b.n	18fb8 <readInt_spi.isra.0+0x1c>
   19040:	1fff3f98 	.word	0x1fff3f98

00019044 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   19044:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   19046:	bf04      	itt	eq
   19048:	4b0c      	ldreq	r3, [pc, #48]	; (1907c <enableDriver+0x38>)
   1904a:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   1904e:	b938      	cbnz	r0, 19060 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
   19050:	4b0b      	ldr	r3, [pc, #44]	; (19080 <enableDriver+0x3c>)
   19052:	68db      	ldr	r3, [r3, #12]
   19054:	681b      	ldr	r3, [r3, #0]
   19056:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   19058:	4a0a      	ldr	r2, [pc, #40]	; (19084 <enableDriver+0x40>)
   1905a:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
   1905e:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   19060:	2801      	cmp	r0, #1
   19062:	d109      	bne.n	19078 <enableDriver+0x34>
   19064:	4b05      	ldr	r3, [pc, #20]	; (1907c <enableDriver+0x38>)
   19066:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   1906a:	2b01      	cmp	r3, #1
   1906c:	d104      	bne.n	19078 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   1906e:	4b04      	ldr	r3, [pc, #16]	; (19080 <enableDriver+0x3c>)
   19070:	68db      	ldr	r3, [r3, #12]
   19072:	681b      	ldr	r3, [r3, #0]
   19074:	699b      	ldr	r3, [r3, #24]
   19076:	e7ef      	b.n	19058 <enableDriver+0x14>
}
   19078:	4770      	bx	lr
   1907a:	bf00      	nop
   1907c:	1fff5e88 	.word	0x1fff5e88
   19080:	00029d1c 	.word	0x00029d1c
   19084:	1fff3f98 	.word	0x1fff3f98

00019088 <init_comm>:

static void init_comm(TMC_Board_Comm_Mode mode)
{
	static TMC_Board_Comm_Mode old = TMC_COMM_SPI;
	switch(mode) {
   19088:	2801      	cmp	r0, #1
{
   1908a:	b570      	push	{r4, r5, r6, lr}
   1908c:	4e0f      	ldr	r6, [pc, #60]	; (190cc <init_comm+0x44>)
   1908e:	4c10      	ldr	r4, [pc, #64]	; (190d0 <init_comm+0x48>)
   19090:	4605      	mov	r5, r0
	switch(mode) {
   19092:	d107      	bne.n	190a4 <init_comm+0x1c>
	case TMC_COMM_UART:
		TMC5160_UARTChannel = HAL.UART;
   19094:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   19096:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
		TMC5160_UARTChannel->rxtx.init();
   1909a:	685b      	ldr	r3, [r3, #4]
   1909c:	4798      	blx	r3
		old = TMC_COMM_UART;
   1909e:	f884 52c4 	strb.w	r5, [r4, #708]	; 0x2c4
		TMC5160_SPIChannel = &HAL.SPI->ch1;
		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
		old = TMC_COMM_SPI;
		break;
	}
}
   190a2:	bd70      	pop	{r4, r5, r6, pc}
		if(old == TMC_COMM_UART)
   190a4:	f894 32c4 	ldrb.w	r3, [r4, #708]	; 0x2c4
   190a8:	2b01      	cmp	r3, #1
   190aa:	d103      	bne.n	190b4 <init_comm+0x2c>
			TMC5160_UARTChannel->rxtx.deInit();
   190ac:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
   190b0:	689b      	ldr	r3, [r3, #8]
   190b2:	4798      	blx	r3
		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   190b4:	68f3      	ldr	r3, [r6, #12]
		TMC5160_SPIChannel = &HAL.SPI->ch1;
   190b6:	6932      	ldr	r2, [r6, #16]
		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   190b8:	685b      	ldr	r3, [r3, #4]
		TMC5160_SPIChannel = &HAL.SPI->ch1;
   190ba:	f8c4 22bc 	str.w	r2, [r4, #700]	; 0x2bc
		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   190be:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   190c2:	6053      	str	r3, [r2, #4]
		old = TMC_COMM_SPI;
   190c4:	2300      	movs	r3, #0
   190c6:	f884 32c4 	strb.w	r3, [r4, #708]	; 0x2c4
}
   190ca:	e7ea      	b.n	190a2 <init_comm+0x1a>
   190cc:	00029d1c 	.word	0x00029d1c
   190d0:	1fff3f98 	.word	0x1fff3f98

000190d4 <userFunction>:
	switch(type)
   190d4:	2809      	cmp	r0, #9
{
   190d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190d8:	460c      	mov	r4, r1
   190da:	4615      	mov	r5, r2
	switch(type)
   190dc:	d808      	bhi.n	190f0 <userFunction+0x1c>
   190de:	2809      	cmp	r0, #9
   190e0:	d809      	bhi.n	190f6 <userFunction+0x22>
   190e2:	e8df f000 	tbb	[pc, r0]
   190e6:	080a      	.short	0x080a
   190e8:	7d5c4634 	.word	0x7d5c4634
   190ec:	9b92088a 	.word	0x9b92088a
   190f0:	28fc      	cmp	r0, #252	; 0xfc
   190f2:	f000 80a3 	beq.w	1923c <userFunction+0x168>
   190f6:	2404      	movs	r4, #4
   190f8:	e018      	b.n	1912c <userFunction+0x58>
		if(!(*value & ~3))
   190fa:	682a      	ldr	r2, [r5, #0]
   190fc:	f032 0303 	bics.w	r3, r2, #3
   19100:	f040 80ad 	bne.w	1925e <userFunction+0x18a>
			if(*value & (1<<0))
   19104:	4b57      	ldr	r3, [pc, #348]	; (19264 <userFunction+0x190>)
   19106:	4e58      	ldr	r6, [pc, #352]	; (19268 <userFunction+0x194>)
   19108:	68df      	ldr	r7, [r3, #12]
   1910a:	f8d6 0294 	ldr.w	r0, [r6, #660]	; 0x294
   1910e:	683b      	ldr	r3, [r7, #0]
   19110:	07d2      	lsls	r2, r2, #31
   19112:	d50d      	bpl.n	19130 <userFunction+0x5c>
				HAL.IOs->config->toInput(Pins.REFR_UC); // pull up -> set it to floating causes high
   19114:	691b      	ldr	r3, [r3, #16]
				HAL.IOs->config->setLow(Pins.REFR_UC);
   19116:	4798      	blx	r3
			if(*value & (1<<1))
   19118:	682c      	ldr	r4, [r5, #0]
   1911a:	683b      	ldr	r3, [r7, #0]
   1911c:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
   19120:	f014 0402 	ands.w	r4, r4, #2
   19124:	d00b      	beq.n	1913e <userFunction+0x6a>
				HAL.IOs->config->toInput(Pins.REFL_UC); // pull up -> set it to floating causes high
   19126:	691b      	ldr	r3, [r3, #16]
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   19128:	4798      	blx	r3
	uint32_t errors = 0;
   1912a:	2400      	movs	r4, #0
}
   1912c:	4620      	mov	r0, r4
   1912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				HAL.IOs->config->toOutput(Pins.REFR_UC);
   19130:	68db      	ldr	r3, [r3, #12]
   19132:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFR_UC);
   19134:	683b      	ldr	r3, [r7, #0]
   19136:	f8d6 0294 	ldr.w	r0, [r6, #660]	; 0x294
   1913a:	699b      	ldr	r3, [r3, #24]
   1913c:	e7eb      	b.n	19116 <userFunction+0x42>
				HAL.IOs->config->toOutput(Pins.REFL_UC);
   1913e:	68db      	ldr	r3, [r3, #12]
   19140:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFL_UC);
   19142:	683b      	ldr	r3, [r7, #0]
   19144:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
   19148:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1914a:	4798      	blx	r3
   1914c:	e7ee      	b.n	1912c <userFunction+0x58>
		if(*value)
   1914e:	4b45      	ldr	r3, [pc, #276]	; (19264 <userFunction+0x190>)
   19150:	682c      	ldr	r4, [r5, #0]
   19152:	68de      	ldr	r6, [r3, #12]
   19154:	e9d6 3000 	ldrd	r3, r0, [r6]
   19158:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1915c:	b13c      	cbz	r4, 1916e <userFunction+0x9a>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
   1915e:	68db      	ldr	r3, [r3, #12]
   19160:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   19162:	e9d6 3000 	ldrd	r3, r0, [r6]
   19166:	699b      	ldr	r3, [r3, #24]
   19168:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1916c:	e7dc      	b.n	19128 <userFunction+0x54>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
   1916e:	689b      	ldr	r3, [r3, #8]
   19170:	e7eb      	b.n	1914a <userFunction+0x76>
		if(motor)
   19172:	4b3d      	ldr	r3, [pc, #244]	; (19268 <userFunction+0x194>)
   19174:	f8d3 02a8 	ldr.w	r0, [r3, #680]	; 0x2a8
   19178:	4b3a      	ldr	r3, [pc, #232]	; (19264 <userFunction+0x190>)
   1917a:	68db      	ldr	r3, [r3, #12]
   1917c:	681b      	ldr	r3, [r3, #0]
   1917e:	b139      	cbz	r1, 19190 <userFunction+0xbc>
			if(*value & 0x00000001)
   19180:	682c      	ldr	r4, [r5, #0]
   19182:	f014 0401 	ands.w	r4, r4, #1
   19186:	d001      	beq.n	1918c <userFunction+0xb8>
				HAL.IOs->config->setHigh(Pins.SD_MODE);
   19188:	695b      	ldr	r3, [r3, #20]
   1918a:	e7cd      	b.n	19128 <userFunction+0x54>
				HAL.IOs->config->setLow(Pins.SD_MODE);
   1918c:	699b      	ldr	r3, [r3, #24]
   1918e:	e7dc      	b.n	1914a <userFunction+0x76>
			*value = (HAL.IOs->config->isHigh(Pins.SD_MODE))? 1:0;
   19190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19192:	4798      	blx	r3
   19194:	3800      	subs	r0, #0
   19196:	bf18      	it	ne
   19198:	2001      	movne	r0, #1
   1919a:	6028      	str	r0, [r5, #0]
   1919c:	e7c6      	b.n	1912c <userFunction+0x58>
		switch(buffer = *value)
   1919e:	4b31      	ldr	r3, [pc, #196]	; (19264 <userFunction+0x190>)
   191a0:	4e31      	ldr	r6, [pc, #196]	; (19268 <userFunction+0x194>)
   191a2:	68df      	ldr	r7, [r3, #12]
   191a4:	682c      	ldr	r4, [r5, #0]
   191a6:	683b      	ldr	r3, [r7, #0]
   191a8:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   191ac:	b154      	cbz	r4, 191c4 <userFunction+0xf0>
   191ae:	2c01      	cmp	r4, #1
   191b0:	d011      	beq.n	191d6 <userFunction+0x102>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   191b2:	691b      	ldr	r3, [r3, #16]
   191b4:	4798      	blx	r3
			buffer = HAL.IOs->config->isHigh(Pins.ENCB_DCEN_CFG4);;
   191b6:	683b      	ldr	r3, [r7, #0]
   191b8:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   191bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   191be:	4798      	blx	r3
   191c0:	4604      	mov	r4, r0
			break;
   191c2:	e006      	b.n	191d2 <userFunction+0xfe>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   191c4:	68db      	ldr	r3, [r3, #12]
   191c6:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   191c8:	683b      	ldr	r3, [r7, #0]
   191ca:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   191cc:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   191d0:	4798      	blx	r3
		*value = buffer;
   191d2:	602c      	str	r4, [r5, #0]
		break;
   191d4:	e7a9      	b.n	1912a <userFunction+0x56>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   191d6:	68db      	ldr	r3, [r3, #12]
   191d8:	4798      	blx	r3
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   191da:	683b      	ldr	r3, [r7, #0]
   191dc:	695b      	ldr	r3, [r3, #20]
   191de:	e7f5      	b.n	191cc <userFunction+0xf8>
		*value = (HAL.IOs->config->isHigh(Pins.SWN_DIAG0))? 1:0;
   191e0:	4b20      	ldr	r3, [pc, #128]	; (19264 <userFunction+0x190>)
   191e2:	4a21      	ldr	r2, [pc, #132]	; (19268 <userFunction+0x194>)
   191e4:	68db      	ldr	r3, [r3, #12]
   191e6:	f8d2 02b0 	ldr.w	r0, [r2, #688]	; 0x2b0
   191ea:	681b      	ldr	r3, [r3, #0]
   191ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1:0;
   191ee:	4798      	blx	r3
   191f0:	3800      	subs	r0, #0
   191f2:	bf18      	it	ne
   191f4:	2001      	movne	r0, #1
   191f6:	6028      	str	r0, [r5, #0]
		break;
   191f8:	e797      	b.n	1912a <userFunction+0x56>
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1:0;
   191fa:	4b1a      	ldr	r3, [pc, #104]	; (19264 <userFunction+0x190>)
   191fc:	4a1a      	ldr	r2, [pc, #104]	; (19268 <userFunction+0x194>)
   191fe:	68db      	ldr	r3, [r3, #12]
   19200:	f8d2 02b4 	ldr.w	r0, [r2, #692]	; 0x2b4
   19204:	681b      	ldr	r3, [r3, #0]
   19206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19208:	e7f1      	b.n	191ee <userFunction+0x11a>
		uart_mode = ((*value & 1) == 1);
   1920a:	6828      	ldr	r0, [r5, #0]
   1920c:	4b16      	ldr	r3, [pc, #88]	; (19268 <userFunction+0x194>)
   1920e:	f000 0001 	and.w	r0, r0, #1
   19212:	f883 02c5 	strb.w	r0, [r3, #709]	; 0x2c5
		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
   19216:	f7ff ff37 	bl	19088 <init_comm>
		break;
   1921a:	e786      	b.n	1912a <userFunction+0x56>
		if(*value == 1) {
   1921c:	4b11      	ldr	r3, [pc, #68]	; (19264 <userFunction+0x190>)
   1921e:	682a      	ldr	r2, [r5, #0]
   19220:	68dc      	ldr	r4, [r3, #12]
   19222:	e9d4 3000 	ldrd	r3, r0, [r4]
   19226:	2a01      	cmp	r2, #1
   19228:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1922c:	d104      	bne.n	19238 <userFunction+0x164>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
   1922e:	68db      	ldr	r3, [r3, #12]
   19230:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   19232:	e9d4 3000 	ldrd	r3, r0, [r4]
   19236:	e796      	b.n	19166 <userFunction+0x92>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
   19238:	689b      	ldr	r3, [r3, #8]
   1923a:	e775      	b.n	19128 <userFunction+0x54>
		if(*value)
   1923c:	4b09      	ldr	r3, [pc, #36]	; (19264 <userFunction+0x190>)
   1923e:	4e0a      	ldr	r6, [pc, #40]	; (19268 <userFunction+0x194>)
   19240:	68df      	ldr	r7, [r3, #12]
   19242:	6814      	ldr	r4, [r2, #0]
   19244:	683b      	ldr	r3, [r7, #0]
   19246:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1924a:	b134      	cbz	r4, 1925a <userFunction+0x186>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   1924c:	68db      	ldr	r3, [r3, #12]
   1924e:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   19250:	683b      	ldr	r3, [r7, #0]
   19252:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   19256:	699b      	ldr	r3, [r3, #24]
   19258:	e766      	b.n	19128 <userFunction+0x54>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1925a:	691b      	ldr	r3, [r3, #16]
   1925c:	e775      	b.n	1914a <userFunction+0x76>
			errors |= TMC_ERROR_VALUE;
   1925e:	2410      	movs	r4, #16
	return errors;
   19260:	e764      	b.n	1912c <userFunction+0x58>
   19262:	bf00      	nop
   19264:	00029d1c 	.word	0x00029d1c
   19268:	1fff3f98 	.word	0x1fff3f98

0001926c <readInt_uart.isra.0>:
static int32_t readInt_uart(uint8_t motor, uint8_t address)
   1926c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
   1926e:	4b2c      	ldr	r3, [pc, #176]	; (19320 <readInt_uart.isra.0+0xb4>)
	address = TMC_ADDRESS(address);
   19270:	f000 047f 	and.w	r4, r0, #127	; 0x7f
	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
   19274:	191a      	adds	r2, r3, r4
   19276:	461d      	mov	r5, r3
   19278:	f892 220c 	ldrb.w	r2, [r2, #524]	; 0x20c
   1927c:	f012 0f01 	tst.w	r2, #1
   19280:	d106      	bne.n	19290 <readInt_uart.isra.0+0x24>
		return TMC5160_config->shadowRegister[address];
   19282:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
   19286:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1928a:	6860      	ldr	r0, [r4, #4]
}
   1928c:	b004      	add	sp, #16
   1928e:	bd70      	pop	{r4, r5, r6, pc}
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
   19290:	2201      	movs	r2, #1
	dataRequest[0] = 0x05;                         // Sync byte
   19292:	2305      	movs	r3, #5
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
   19294:	2103      	movs	r1, #3
   19296:	a801      	add	r0, sp, #4
	dataRequest[0] = 0x05;                         // Sync byte
   19298:	f8ad 3004 	strh.w	r3, [sp, #4]
	dataRequest[2] = address;                      // Register address
   1929c:	f88d 4006 	strb.w	r4, [sp, #6]
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
   192a0:	f006 febc 	bl	2001c <tmc_CRC8>
	TMC5160_UARTChannel->rxtx.clearBuffers();
   192a4:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
   192a8:	f88d 0007 	strb.w	r0, [sp, #7]
	TMC5160_UARTChannel->rxtx.clearBuffers();
   192ac:	69db      	ldr	r3, [r3, #28]
   192ae:	4798      	blx	r3
	TMC5160_UARTChannel->rxtx.txN(dataRequest, ARRAY_SIZE(dataRequest));
   192b0:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
   192b4:	2104      	movs	r1, #4
   192b6:	695b      	ldr	r3, [r3, #20]
   192b8:	eb0d 0001 	add.w	r0, sp, r1
   192bc:	4798      	blx	r3
	timeout = systick_getTick();
   192be:	f003 f839 	bl	1c334 <systick_getTick>
   192c2:	4606      	mov	r6, r0
	while(TMC5160_UARTChannel->rxtx.bytesAvailable() < ARRAY_SIZE(readData))
   192c4:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
   192c8:	6a1b      	ldr	r3, [r3, #32]
   192ca:	4798      	blx	r3
   192cc:	2807      	cmp	r0, #7
   192ce:	d91f      	bls.n	19310 <readInt_uart.isra.0+0xa4>
	TMC5160_UARTChannel->rxtx.rxN(readData, ARRAY_SIZE(readData));
   192d0:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
   192d4:	2108      	movs	r1, #8
   192d6:	699b      	ldr	r3, [r3, #24]
   192d8:	eb0d 0001 	add.w	r0, sp, r1
   192dc:	4798      	blx	r3
	if(readData[7] != tmc_CRC8(readData, 7, 1) || readData[0] != 0x05 || readData[1] != 0xFF || readData[2] != address)
   192de:	2201      	movs	r2, #1
   192e0:	2107      	movs	r1, #7
   192e2:	a802      	add	r0, sp, #8
   192e4:	f89d 500f 	ldrb.w	r5, [sp, #15]
   192e8:	f006 fe98 	bl	2001c <tmc_CRC8>
   192ec:	4285      	cmp	r5, r0
   192ee:	d114      	bne.n	1931a <readInt_uart.isra.0+0xae>
   192f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   192f4:	2b05      	cmp	r3, #5
   192f6:	d110      	bne.n	1931a <readInt_uart.isra.0+0xae>
   192f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
   192fc:	2bff      	cmp	r3, #255	; 0xff
   192fe:	d10c      	bne.n	1931a <readInt_uart.isra.0+0xae>
   19300:	f89d 300a 	ldrb.w	r3, [sp, #10]
   19304:	42a3      	cmp	r3, r4
   19306:	d108      	bne.n	1931a <readInt_uart.isra.0+0xae>
	return _8_32(readData[3], readData[4], readData[5], readData[6]);
   19308:	f8dd 000b 	ldr.w	r0, [sp, #11]
   1930c:	ba00      	rev	r0, r0
   1930e:	e7bd      	b.n	1928c <readInt_uart.isra.0+0x20>
		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
   19310:	4630      	mov	r0, r6
   19312:	f003 f81f 	bl	1c354 <timeSince>
   19316:	2832      	cmp	r0, #50	; 0x32
   19318:	d9d4      	bls.n	192c4 <readInt_uart.isra.0+0x58>
			return -1;
   1931a:	f04f 30ff 	mov.w	r0, #4294967295
   1931e:	e7b5      	b.n	1928c <readInt_uart.isra.0+0x20>
   19320:	1fff3f98 	.word	0x1fff3f98

00019324 <tmc5160_readInt.constprop.0>:
	if(uart_mode)
   19324:	4b02      	ldr	r3, [pc, #8]	; (19330 <tmc5160_readInt.constprop.0+0xc>)
   19326:	f893 32c5 	ldrb.w	r3, [r3, #709]	; 0x2c5
   1932a:	b103      	cbz	r3, 1932e <tmc5160_readInt.constprop.0+0xa>
		r = readInt_uart(motor, address);
   1932c:	e79e      	b.n	1926c <readInt_uart.isra.0>
		r = readInt_spi(motor, address);
   1932e:	e635      	b.n	18f9c <readInt_spi.isra.0>
   19330:	1fff3f98 	.word	0x1fff3f98

00019334 <reset>:
{
   19334:	b538      	push	{r3, r4, r5, lr}
	if(!tmc5160_readInt(0, TMC5160_VACTUAL))
   19336:	2022      	movs	r0, #34	; 0x22
   19338:	f7ff fff4 	bl	19324 <tmc5160_readInt.constprop.0>
   1933c:	4c09      	ldr	r4, [pc, #36]	; (19364 <reset+0x30>)
   1933e:	b918      	cbnz	r0, 19348 <reset+0x14>
		tmc5160_reset(TMC5160_config);
   19340:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
   19344:	f00a ffdc 	bl	24300 <tmc5160_reset>
	HAL.IOs->config->toInput(Pins.REFL_UC);
   19348:	4b07      	ldr	r3, [pc, #28]	; (19368 <reset+0x34>)
   1934a:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   1934e:	68dd      	ldr	r5, [r3, #12]
   19350:	682b      	ldr	r3, [r5, #0]
   19352:	691b      	ldr	r3, [r3, #16]
   19354:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   19356:	682b      	ldr	r3, [r5, #0]
   19358:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   1935c:	691b      	ldr	r3, [r3, #16]
   1935e:	4798      	blx	r3
}
   19360:	2001      	movs	r0, #1
   19362:	bd38      	pop	{r3, r4, r5, pc}
   19364:	1fff3f98 	.word	0x1fff3f98
   19368:	00029d1c 	.word	0x00029d1c

0001936c <readRegister>:
{
   1936c:	b510      	push	{r4, lr}
	*value = tmc5160_readInt(DEFAULT_MOTOR, address);
   1936e:	4608      	mov	r0, r1
{
   19370:	4614      	mov	r4, r2
	*value = tmc5160_readInt(DEFAULT_MOTOR, address);
   19372:	f7ff ffd7 	bl	19324 <tmc5160_readInt.constprop.0>
   19376:	6020      	str	r0, [r4, #0]
}
   19378:	bd10      	pop	{r4, pc}

0001937a <tmc5160_writeDatagram>:
{
   1937a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(uart_mode)
   1937e:	4d39      	ldr	r5, [pc, #228]	; (19464 <tmc5160_writeDatagram+0xea>)
{
   19380:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
	if(uart_mode)
   19384:	f895 a2c5 	ldrb.w	sl, [r5, #709]	; 0x2c5
{
   19388:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
   1938c:	4690      	mov	r8, r2
   1938e:	461e      	mov	r6, r3
   19390:	f001 097f 	and.w	r9, r1, #127	; 0x7f
   19394:	f041 0080 	orr.w	r0, r1, #128	; 0x80
   19398:	46ab      	mov	fp, r5
	if(uart_mode)
   1939a:	f1ba 0f00 	cmp.w	sl, #0
   1939e:	d037      	beq.n	19410 <tmc5160_writeDatagram+0x96>
	writeData[0] = 0x05;                         // Sync byte
   193a0:	2305      	movs	r3, #5
	writeData[2] = address | TMC5160_WRITE_BIT;  // Register address with write bit set
   193a2:	f88d 0002 	strb.w	r0, [sp, #2]
	writeData[3] = x1;                           // Register Data
   193a6:	f88d 2003 	strb.w	r2, [sp, #3]
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   193aa:	2107      	movs	r1, #7
   193ac:	2201      	movs	r2, #1
   193ae:	4668      	mov	r0, sp
	writeData[0] = 0x05;                         // Sync byte
   193b0:	f8ad 3000 	strh.w	r3, [sp]
	writeData[4] = x2;                           // Register Data
   193b4:	f88d 6004 	strb.w	r6, [sp, #4]
	writeData[5] = x3;                           // Register Data
   193b8:	f88d 4005 	strb.w	r4, [sp, #5]
	writeData[6] = x4;                           // Register Data
   193bc:	f88d 7006 	strb.w	r7, [sp, #6]
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   193c0:	f006 fe2c 	bl	2001c <tmc_CRC8>
	TMC5160_UARTChannel->rxtx.clearBuffers();
   193c4:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   193c8:	f88d 0007 	strb.w	r0, [sp, #7]
	TMC5160_UARTChannel->rxtx.clearBuffers();
   193cc:	69db      	ldr	r3, [r3, #28]
   193ce:	4798      	blx	r3
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   193d0:	466d      	mov	r5, sp
   193d2:	f04f 0a00 	mov.w	sl, #0
		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
   193d6:	f8db 32c0 	ldr.w	r3, [fp, #704]	; 0x2c0
   193da:	f815 0b01 	ldrb.w	r0, [r5], #1
   193de:	68db      	ldr	r3, [r3, #12]
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   193e0:	f10a 0a01 	add.w	sl, sl, #1
		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
   193e4:	4798      	blx	r3
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   193e6:	f1ba 0f08 	cmp.w	sl, #8
   193ea:	d1f4      	bne.n	193d6 <tmc5160_writeDatagram+0x5c>
	wait(2);
   193ec:	2002      	movs	r0, #2
   193ee:	f002 ffa7 	bl	1c340 <wait>
	TMC5160_config->shadowRegister[address] = _8_32(x1, x2, x3, x4);
   193f2:	f8db 32b8 	ldr.w	r3, [fp, #696]	; 0x2b8
   193f6:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
   193fa:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   193fe:	ea44 4606 	orr.w	r6, r4, r6, lsl #16
   19402:	ea46 6608 	orr.w	r6, r6, r8, lsl #24
   19406:	f8c9 6004 	str.w	r6, [r9, #4]
}
   1940a:	b003      	add	sp, #12
   1940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TMC5160_SPIChannel->readWrite(address|0x80, false);
   19410:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
   19414:	4651      	mov	r1, sl
   19416:	689b      	ldr	r3, [r3, #8]
   19418:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(x1, false);
   1941a:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
   1941e:	4651      	mov	r1, sl
   19420:	689b      	ldr	r3, [r3, #8]
   19422:	4640      	mov	r0, r8
   19424:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(x2, false);
   19426:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
   1942a:	4651      	mov	r1, sl
   1942c:	689b      	ldr	r3, [r3, #8]
   1942e:	4630      	mov	r0, r6
   19430:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(x3, false);
   19432:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
   19436:	4651      	mov	r1, sl
   19438:	689b      	ldr	r3, [r3, #8]
   1943a:	4620      	mov	r0, r4
   1943c:	4798      	blx	r3
	TMC5160_SPIChannel->readWrite(x4, true);
   1943e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
   19442:	2101      	movs	r1, #1
   19444:	689b      	ldr	r3, [r3, #8]
   19446:	4638      	mov	r0, r7
   19448:	4798      	blx	r3
	TMC5160_config->shadowRegister[address] = value;
   1944a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
	value |= x2;
   1944e:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
	value |= x3;
   19452:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	TMC5160_config->shadowRegister[address] = value;
   19456:	eb03 0989 	add.w	r9, r3, r9, lsl #2
	value |= x4;
   1945a:	ea47 2404 	orr.w	r4, r7, r4, lsl #8
	TMC5160_config->shadowRegister[address] = value;
   1945e:	f8c9 4004 	str.w	r4, [r9, #4]
}
   19462:	e7d2      	b.n	1940a <tmc5160_writeDatagram+0x90>
   19464:	1fff3f98 	.word	0x1fff3f98

00019468 <tmc5160_writeInt>:
{
   19468:	b507      	push	{r0, r1, r2, lr}
	tmc5160_writeDatagram(motor, address, 0xFF & (value>>24), 0xFF & (value>>16), 0xFF & (value>>8), 0xFF & (value>>0));
   1946a:	b2d3      	uxtb	r3, r2
   1946c:	9301      	str	r3, [sp, #4]
   1946e:	f3c2 2307 	ubfx	r3, r2, #8, #8
   19472:	9300      	str	r3, [sp, #0]
   19474:	f3c2 4307 	ubfx	r3, r2, #16, #8
   19478:	0e12      	lsrs	r2, r2, #24
   1947a:	f7ff ff7e 	bl	1937a <tmc5160_writeDatagram>
}
   1947e:	b003      	add	sp, #12
   19480:	f85d fb04 	ldr.w	pc, [sp], #4

00019484 <writeRegister>:
	tmc5160_writeInt(DEFAULT_MOTOR, address, value);
   19484:	2000      	movs	r0, #0
   19486:	f7ff bfef 	b.w	19468 <tmc5160_writeInt>

0001948a <moveTo>:
{
   1948a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1948c:	460d      	mov	r5, r1
	if(motor >= TMC5160_MOTORS)
   1948e:	4604      	mov	r4, r0
   19490:	b9e8      	cbnz	r0, 194ce <moveTo+0x44>
	if(vMaxModified)
   19492:	4e10      	ldr	r6, [pc, #64]	; (194d4 <moveTo+0x4a>)
   19494:	f896 32c6 	ldrb.w	r3, [r6, #710]	; 0x2c6
   19498:	b143      	cbz	r3, 194ac <moveTo+0x22>
		tmc5160_writeInt(motor, TMC5160_VMAX, TMC5160_config->shadowRegister[TMC5160_VMAX]);
   1949a:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
   1949e:	2127      	movs	r1, #39	; 0x27
   194a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   194a4:	f7ff ffe0 	bl	19468 <tmc5160_writeInt>
		vMaxModified = false;
   194a8:	f886 42c6 	strb.w	r4, [r6, #710]	; 0x2c6
	tmc5160_writeDatagram(motor, TMC5160_RAMPMODE, 0, 0, 0, 0);
   194ac:	2400      	movs	r4, #0
	tmc5160_writeInt(motor, TMC5160_XTARGET, position);
   194ae:	462a      	mov	r2, r5
   194b0:	212d      	movs	r1, #45	; 0x2d
   194b2:	2000      	movs	r0, #0
   194b4:	f7ff ffd8 	bl	19468 <tmc5160_writeInt>
	tmc5160_writeDatagram(motor, TMC5160_RAMPMODE, 0, 0, 0, 0);
   194b8:	4620      	mov	r0, r4
   194ba:	e9cd 4400 	strd	r4, r4, [sp]
   194be:	4623      	mov	r3, r4
   194c0:	4622      	mov	r2, r4
   194c2:	2120      	movs	r1, #32
   194c4:	f7ff ff59 	bl	1937a <tmc5160_writeDatagram>
	return TMC_ERROR_NONE;
   194c8:	4620      	mov	r0, r4
}
   194ca:	b002      	add	sp, #8
   194cc:	bd70      	pop	{r4, r5, r6, pc}
		return TMC_ERROR_MOTOR;
   194ce:	2008      	movs	r0, #8
   194d0:	e7fb      	b.n	194ca <moveTo+0x40>
   194d2:	bf00      	nop
   194d4:	1fff3f98 	.word	0x1fff3f98

000194d8 <moveBy>:
{
   194d8:	b538      	push	{r3, r4, r5, lr}
   194da:	460c      	mov	r4, r1
   194dc:	4605      	mov	r5, r0
	*ticks = tmc5160_readInt(motor, TMC5160_XACTUAL) + *ticks;
   194de:	2021      	movs	r0, #33	; 0x21
   194e0:	f7ff ff20 	bl	19324 <tmc5160_readInt.constprop.0>
   194e4:	6821      	ldr	r1, [r4, #0]
   194e6:	4401      	add	r1, r0
   194e8:	6021      	str	r1, [r4, #0]
	return moveTo(motor, *ticks);
   194ea:	4628      	mov	r0, r5
}
   194ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return moveTo(motor, *ticks);
   194f0:	e7cb      	b.n	1948a <moveTo>

000194f2 <rotate>:
{
   194f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   194f4:	460d      	mov	r5, r1
	if(motor >= TMC5160_MOTORS)
   194f6:	4604      	mov	r4, r0
   194f8:	b9c8      	cbnz	r0, 1952e <rotate+0x3c>
	vMaxModified = true;
   194fa:	4b0e      	ldr	r3, [pc, #56]	; (19534 <rotate+0x42>)
   194fc:	2201      	movs	r2, #1
   194fe:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
	tmc5160_writeInt(motor, TMC5160_VMAX, abs(velocity));
   19502:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   19506:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   1950a:	2127      	movs	r1, #39	; 0x27
   1950c:	f7ff ffac 	bl	19468 <tmc5160_writeInt>
	tmc5160_writeDatagram(motor, TMC5160_RAMPMODE, 0, 0, 0, (velocity >= 0)? 1 : 2);
   19510:	2d00      	cmp	r5, #0
   19512:	bfac      	ite	ge
   19514:	2301      	movge	r3, #1
   19516:	2302      	movlt	r3, #2
   19518:	e9cd 4300 	strd	r4, r3, [sp]
   1951c:	4620      	mov	r0, r4
   1951e:	4623      	mov	r3, r4
   19520:	4622      	mov	r2, r4
   19522:	2120      	movs	r1, #32
   19524:	f7ff ff29 	bl	1937a <tmc5160_writeDatagram>
   19528:	4620      	mov	r0, r4
}
   1952a:	b003      	add	sp, #12
   1952c:	bd30      	pop	{r4, r5, pc}
		return TMC_ERROR_MOTOR;
   1952e:	2008      	movs	r0, #8
   19530:	e7fb      	b.n	1952a <rotate+0x38>
   19532:	bf00      	nop
   19534:	1fff3f98 	.word	0x1fff3f98

00019538 <stop>:
	return rotate(motor, 0);
   19538:	2100      	movs	r1, #0
   1953a:	e7da      	b.n	194f2 <rotate>

0001953c <left>:
	return rotate(motor, -velocity);
   1953c:	4249      	negs	r1, r1
   1953e:	e7d8      	b.n	194f2 <rotate>

00019540 <right>:
	return rotate(motor, velocity);
   19540:	e7d7      	b.n	194f2 <rotate>

00019542 <handleParameter>:
{
   19542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19544:	4606      	mov	r6, r0
   19546:	461d      	mov	r5, r3
	if(motor >= TMC5160_MOTORS)
   19548:	2900      	cmp	r1, #0
   1954a:	f040 85e0 	bne.w	1a10e <handleParameter+0xbcc>
	switch(type)
   1954e:	2a22      	cmp	r2, #34	; 0x22
   19550:	d874      	bhi.n	1963c <handleParameter+0xfa>
   19552:	2a22      	cmp	r2, #34	; 0x22
   19554:	f200 85e1 	bhi.w	1a11a <handleParameter+0xbd8>
   19558:	e8df f012 	tbh	[pc, r2, lsl #1]
   1955c:	00860078 	.word	0x00860078
   19560:	00a90094 	.word	0x00a90094
   19564:	00d600b8 	.word	0x00d600b8
   19568:	00fc00e4 	.word	0x00fc00e4
   1956c:	05df0113 	.word	0x05df0113
   19570:	012c011e 	.word	0x012c011e
   19574:	01500138 	.word	0x01500138
   19578:	01750167 	.word	0x01750167
   1957c:	01910183 	.word	0x01910183
   19580:	01ad019f 	.word	0x01ad019f
   19584:	01c901bb 	.word	0x01c901bb
   19588:	01d705df 	.word	0x01d705df
   1958c:	05df01fb 	.word	0x05df01fb
   19590:	020e05df 	.word	0x020e05df
   19594:	023e0226 	.word	0x023e0226
   19598:	05df05df 	.word	0x05df05df
   1959c:	024605df 	.word	0x024605df
   195a0:	025d      	.short	0x025d
   195a2:	3a8c      	subs	r2, #140	; 0x8c
   195a4:	2a46      	cmp	r2, #70	; 0x46
   195a6:	f200 85b5 	bhi.w	1a114 <handleParameter+0xbd2>
   195aa:	e8df f012 	tbh	[pc, r2, lsl #1]
   195ae:	024c      	.short	0x024c
   195b0:	05b305b3 	.word	0x05b305b3
   195b4:	05b305b3 	.word	0x05b305b3
   195b8:	05b305b3 	.word	0x05b305b3
   195bc:	05b305b3 	.word	0x05b305b3
   195c0:	05b305b3 	.word	0x05b305b3
   195c4:	05b305b3 	.word	0x05b305b3
   195c8:	05b305b3 	.word	0x05b305b3
   195cc:	05b305b3 	.word	0x05b305b3
   195d0:	05b305b3 	.word	0x05b305b3
   195d4:	05b305b3 	.word	0x05b305b3
   195d8:	029805b3 	.word	0x029805b3
   195dc:	02c802b0 	.word	0x02c802b0
   195e0:	032c02e0 	.word	0x032c02e0
   195e4:	037a0363 	.word	0x037a0363
   195e8:	03ab0393 	.word	0x03ab0393
   195ec:	03db03c3 	.word	0x03db03c3
   195f0:	040a03f2 	.word	0x040a03f2
   195f4:	05b305b3 	.word	0x05b305b3
   195f8:	05b305b3 	.word	0x05b305b3
   195fc:	042905b3 	.word	0x042905b3
   19600:	04710434 	.word	0x04710434
   19604:	049705b3 	.word	0x049705b3
   19608:	04cb04b1 	.word	0x04cb04b1
   1960c:	051804f1 	.word	0x051804f1
   19610:	05b305b3 	.word	0x05b305b3
   19614:	054d052e 	.word	0x054d052e
   19618:	05b305b3 	.word	0x05b305b3
   1961c:	05b305b3 	.word	0x05b305b3
   19620:	05b305b3 	.word	0x05b305b3
   19624:	05b305b3 	.word	0x05b305b3
   19628:	05b305b3 	.word	0x05b305b3
   1962c:	056b05b3 	.word	0x056b05b3
   19630:	058505b3 	.word	0x058505b3
   19634:	05b305b3 	.word	0x05b305b3
   19638:	05a00590 	.word	0x05a00590
   1963c:	f102 0374 	add.w	r3, r2, #116	; 0x74
   19640:	b2db      	uxtb	r3, r3
   19642:	2b46      	cmp	r3, #70	; 0x46
   19644:	d9ad      	bls.n	195a2 <handleParameter+0x60>
   19646:	2404      	movs	r4, #4
}
   19648:	4620      	mov	r0, r4
   1964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(readWrite == READ) {
   1964c:	b928      	cbnz	r0, 1965a <handleParameter+0x118>
			*value = tmc5160_readInt(motor, TMC5160_XTARGET);
   1964e:	202d      	movs	r0, #45	; 0x2d
   19650:	f7ff fe68 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   19654:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_XTARGET);
   19656:	6028      	str	r0, [r5, #0]
   19658:	e7f6      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_XTARGET, *value);
   1965a:	682a      	ldr	r2, [r5, #0]
   1965c:	212d      	movs	r1, #45	; 0x2d
   1965e:	2000      	movs	r0, #0
   19660:	f7ff ff02 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19664:	2400      	movs	r4, #0
   19666:	e7ef      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19668:	b928      	cbnz	r0, 19676 <handleParameter+0x134>
			*value = tmc5160_readInt(motor, TMC5160_XACTUAL);
   1966a:	2021      	movs	r0, #33	; 0x21
   1966c:	f7ff fe5a 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   19670:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_XACTUAL);
   19672:	6028      	str	r0, [r5, #0]
   19674:	e7e8      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_XACTUAL, *value);
   19676:	682a      	ldr	r2, [r5, #0]
   19678:	2121      	movs	r1, #33	; 0x21
   1967a:	2000      	movs	r0, #0
   1967c:	f7ff fef4 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19680:	2400      	movs	r4, #0
   19682:	e7e1      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19684:	b928      	cbnz	r0, 19692 <handleParameter+0x150>
			*value = tmc5160_readInt(motor, TMC5160_VMAX);
   19686:	2027      	movs	r0, #39	; 0x27
   19688:	f7ff fe4c 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1968c:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_VMAX);
   1968e:	6028      	str	r0, [r5, #0]
   19690:	e7da      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
   19692:	682a      	ldr	r2, [r5, #0]
   19694:	2a00      	cmp	r2, #0
   19696:	bfb8      	it	lt
   19698:	4252      	neglt	r2, r2
   1969a:	2127      	movs	r1, #39	; 0x27
   1969c:	2000      	movs	r0, #0
   1969e:	f7ff fee3 	bl	19468 <tmc5160_writeInt>
			vMaxModified = true;
   196a2:	4bb3      	ldr	r3, [pc, #716]	; (19970 <handleParameter+0x42e>)
   196a4:	2201      	movs	r2, #1
   196a6:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
	uint32_t errors = TMC_ERROR_NONE;
   196aa:	2400      	movs	r4, #0
   196ac:	e7cc      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   196ae:	2800      	cmp	r0, #0
   196b0:	f040 8536 	bne.w	1a120 <handleParameter+0xbde>
			*value = tmc5160_readInt(motor, TMC5160_VACTUAL);
   196b4:	2022      	movs	r0, #34	; 0x22
   196b6:	f7ff fe35 	bl	19324 <tmc5160_readInt.constprop.0>
			*value = CAST_Sn_TO_S32(*value, 24);
   196ba:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   196be:	bf18      	it	ne
   196c0:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   196c4:	4318      	orrs	r0, r3
   196c6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   196c8:	4634      	mov	r4, r6
   196ca:	e7bd      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   196cc:	4ba8      	ldr	r3, [pc, #672]	; (19970 <handleParameter+0x42e>)
   196ce:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
   196d2:	b920      	cbnz	r0, 196de <handleParameter+0x19c>
			*value = TMC5160_config->shadowRegister[TMC5160_VMAX];
   196d4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   196d8:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   196da:	4604      	mov	r4, r0
   196dc:	e7b4      	b.n	19648 <handleParameter+0x106>
			TMC5160_config->shadowRegister[TMC5160_VMAX] = abs(*value);
   196de:	682b      	ldr	r3, [r5, #0]
   196e0:	2b00      	cmp	r3, #0
   196e2:	bfb8      	it	lt
   196e4:	425b      	neglt	r3, r3
   196e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			if(tmc5160_readInt(motor, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
   196ea:	2020      	movs	r0, #32
   196ec:	f7ff fe1a 	bl	19324 <tmc5160_readInt.constprop.0>
   196f0:	4604      	mov	r4, r0
   196f2:	b108      	cbz	r0, 196f8 <handleParameter+0x1b6>
	uint32_t errors = TMC_ERROR_NONE;
   196f4:	2400      	movs	r4, #0
   196f6:	e7a7      	b.n	19648 <handleParameter+0x106>
				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
   196f8:	682a      	ldr	r2, [r5, #0]
   196fa:	2a00      	cmp	r2, #0
   196fc:	bfb8      	it	lt
   196fe:	4252      	neglt	r2, r2
   19700:	2127      	movs	r1, #39	; 0x27
   19702:	f7ff feb1 	bl	19468 <tmc5160_writeInt>
   19706:	e79f      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19708:	b928      	cbnz	r0, 19716 <handleParameter+0x1d4>
			*value = tmc5160_readInt(motor, TMC5160_AMAX);
   1970a:	2026      	movs	r0, #38	; 0x26
   1970c:	f7ff fe0a 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   19710:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_AMAX);
   19712:	6028      	str	r0, [r5, #0]
   19714:	e798      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_AMAX, *value);
   19716:	682a      	ldr	r2, [r5, #0]
   19718:	2126      	movs	r1, #38	; 0x26
   1971a:	2000      	movs	r0, #0
   1971c:	f7ff fea4 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19720:	2400      	movs	r4, #0
   19722:	e791      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
   19724:	2010      	movs	r0, #16
		if(readWrite == READ) {
   19726:	b936      	cbnz	r6, 19736 <handleParameter+0x1f4>
			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
   19728:	f7ff fdfc 	bl	19324 <tmc5160_readInt.constprop.0>
   1972c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   19730:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19732:	4634      	mov	r4, r6
   19734:	e788      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, *value);
   19736:	f7ff fdf5 	bl	19324 <tmc5160_readInt.constprop.0>
   1973a:	682b      	ldr	r3, [r5, #0]
   1973c:	021b      	lsls	r3, r3, #8
   1973e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   19742:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   19746:	431a      	orrs	r2, r3
   19748:	2110      	movs	r1, #16
   1974a:	2000      	movs	r0, #0
   1974c:	f7ff fe8c 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19750:	2400      	movs	r4, #0
   19752:	e779      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
   19754:	2010      	movs	r0, #16
		if(readWrite == READ) {
   19756:	b936      	cbnz	r6, 19766 <handleParameter+0x224>
			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
   19758:	f7ff fde4 	bl	19324 <tmc5160_readInt.constprop.0>
   1975c:	f000 001f 	and.w	r0, r0, #31
   19760:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19762:	4634      	mov	r4, r6
   19764:	e770      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, *value);
   19766:	f7ff fddd 	bl	19324 <tmc5160_readInt.constprop.0>
   1976a:	682a      	ldr	r2, [r5, #0]
   1976c:	f020 001f 	bic.w	r0, r0, #31
   19770:	f002 021f 	and.w	r2, r2, #31
   19774:	4302      	orrs	r2, r0
   19776:	2110      	movs	r1, #16
   19778:	2000      	movs	r0, #0
   1977a:	f7ff fe75 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1977e:	2400      	movs	r4, #0
   19780:	e762      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19782:	2800      	cmp	r0, #0
   19784:	f040 84cf 	bne.w	1a126 <handleParameter+0xbe4>
			*value = TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_POSITION_REACHED_MASK, TMC5160_POSITION_REACHED_SHIFT);
   19788:	2035      	movs	r0, #53	; 0x35
   1978a:	f7ff fdcb 	bl	19324 <tmc5160_readInt.constprop.0>
   1978e:	f3c0 2040 	ubfx	r0, r0, #9, #1
   19792:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19794:	4634      	mov	r4, r6
   19796:	e757      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19798:	2800      	cmp	r0, #0
   1979a:	f040 84c7 	bne.w	1a12c <handleParameter+0xbea>
			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_R_MASK, TMC5160_STATUS_STOP_R_SHIFT);
   1979e:	2035      	movs	r0, #53	; 0x35
   197a0:	f7ff fdc0 	bl	19324 <tmc5160_readInt.constprop.0>
   197a4:	f010 0f02 	tst.w	r0, #2
   197a8:	bf0c      	ite	eq
   197aa:	2301      	moveq	r3, #1
   197ac:	2300      	movne	r3, #0
   197ae:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   197b0:	4634      	mov	r4, r6
   197b2:	e749      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   197b4:	2800      	cmp	r0, #0
   197b6:	f040 84bc 	bne.w	1a132 <handleParameter+0xbf0>
			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_L_MASK, TMC5160_STATUS_STOP_L_SHIFT);
   197ba:	2035      	movs	r0, #53	; 0x35
   197bc:	f7ff fdb2 	bl	19324 <tmc5160_readInt.constprop.0>
   197c0:	43c0      	mvns	r0, r0
   197c2:	f000 0001 	and.w	r0, r0, #1
   197c6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   197c8:	4634      	mov	r4, r6
   197ca:	e73d      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_ENABLE_SHIFT);
   197cc:	2034      	movs	r0, #52	; 0x34
		if(readWrite == READ) {
   197ce:	b936      	cbnz	r6, 197de <handleParameter+0x29c>
			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_ENABLE_SHIFT);
   197d0:	f7ff fda8 	bl	19324 <tmc5160_readInt.constprop.0>
   197d4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   197d8:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   197da:	4634      	mov	r4, r6
   197dc:	e734      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_ENABLE_SHIFT, *value);
   197de:	f7ff fda1 	bl	19324 <tmc5160_readInt.constprop.0>
   197e2:	682b      	ldr	r3, [r5, #0]
   197e4:	005b      	lsls	r3, r3, #1
   197e6:	f003 0302 	and.w	r3, r3, #2
   197ea:	f020 0202 	bic.w	r2, r0, #2
   197ee:	431a      	orrs	r2, r3
   197f0:	2134      	movs	r1, #52	; 0x34
   197f2:	2000      	movs	r0, #0
   197f4:	f7ff fe38 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   197f8:	2400      	movs	r4, #0
   197fa:	e725      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_ENABLE_SHIFT);
   197fc:	2034      	movs	r0, #52	; 0x34
		if(readWrite == READ) {
   197fe:	b936      	cbnz	r6, 1980e <handleParameter+0x2cc>
			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_ENABLE_SHIFT);
   19800:	f7ff fd90 	bl	19324 <tmc5160_readInt.constprop.0>
   19804:	f000 0001 	and.w	r0, r0, #1
   19808:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1980a:	4634      	mov	r4, r6
   1980c:	e71c      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_ENABLE_SHIFT, *value);
   1980e:	f7ff fd89 	bl	19324 <tmc5160_readInt.constprop.0>
   19812:	682a      	ldr	r2, [r5, #0]
   19814:	f020 0001 	bic.w	r0, r0, #1
   19818:	f002 0201 	and.w	r2, r2, #1
   1981c:	4302      	orrs	r2, r0
   1981e:	2134      	movs	r1, #52	; 0x34
   19820:	2000      	movs	r0, #0
   19822:	f7ff fe21 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19826:	2400      	movs	r4, #0
   19828:	e70e      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1982a:	b928      	cbnz	r0, 19838 <handleParameter+0x2f6>
			*value = tmc5160_readInt(motor, TMC5160_SWMODE);
   1982c:	2034      	movs	r0, #52	; 0x34
   1982e:	f7ff fd79 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   19832:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_SWMODE);
   19834:	6028      	str	r0, [r5, #0]
   19836:	e707      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_SWMODE, *value);
   19838:	682a      	ldr	r2, [r5, #0]
   1983a:	2134      	movs	r1, #52	; 0x34
   1983c:	2000      	movs	r0, #0
   1983e:	f7ff fe13 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19842:	2400      	movs	r4, #0
   19844:	e700      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19846:	b928      	cbnz	r0, 19854 <handleParameter+0x312>
			*value = tmc5160_readInt(motor, TMC5160_A1);
   19848:	2024      	movs	r0, #36	; 0x24
   1984a:	f7ff fd6b 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1984e:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_A1);
   19850:	6028      	str	r0, [r5, #0]
   19852:	e6f9      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_A1, *value);
   19854:	682a      	ldr	r2, [r5, #0]
   19856:	2124      	movs	r1, #36	; 0x24
   19858:	2000      	movs	r0, #0
   1985a:	f7ff fe05 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1985e:	2400      	movs	r4, #0
   19860:	e6f2      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19862:	b928      	cbnz	r0, 19870 <handleParameter+0x32e>
			*value = tmc5160_readInt(motor, TMC5160_V1);
   19864:	2025      	movs	r0, #37	; 0x25
   19866:	f7ff fd5d 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1986a:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_V1);
   1986c:	6028      	str	r0, [r5, #0]
   1986e:	e6eb      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_V1, *value);
   19870:	682a      	ldr	r2, [r5, #0]
   19872:	2125      	movs	r1, #37	; 0x25
   19874:	2000      	movs	r0, #0
   19876:	f7ff fdf7 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1987a:	2400      	movs	r4, #0
   1987c:	e6e4      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1987e:	b928      	cbnz	r0, 1988c <handleParameter+0x34a>
			*value = tmc5160_readInt(motor, TMC5160_DMAX);
   19880:	2028      	movs	r0, #40	; 0x28
   19882:	f7ff fd4f 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   19886:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_DMAX);
   19888:	6028      	str	r0, [r5, #0]
   1988a:	e6dd      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_DMAX, *value);
   1988c:	682a      	ldr	r2, [r5, #0]
   1988e:	2128      	movs	r1, #40	; 0x28
   19890:	2000      	movs	r0, #0
   19892:	f7ff fde9 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19896:	2400      	movs	r4, #0
   19898:	e6d6      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1989a:	b928      	cbnz	r0, 198a8 <handleParameter+0x366>
			*value = tmc5160_readInt(motor, TMC5160_D1);
   1989c:	202a      	movs	r0, #42	; 0x2a
   1989e:	f7ff fd41 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   198a2:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_D1);
   198a4:	6028      	str	r0, [r5, #0]
   198a6:	e6cf      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_D1, *value);
   198a8:	682a      	ldr	r2, [r5, #0]
   198aa:	212a      	movs	r1, #42	; 0x2a
   198ac:	2000      	movs	r0, #0
   198ae:	f7ff fddb 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   198b2:	2400      	movs	r4, #0
   198b4:	e6c8      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   198b6:	b928      	cbnz	r0, 198c4 <handleParameter+0x382>
			*value = tmc5160_readInt(motor, TMC5160_VSTART);
   198b8:	2023      	movs	r0, #35	; 0x23
   198ba:	f7ff fd33 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   198be:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_VSTART);
   198c0:	6028      	str	r0, [r5, #0]
   198c2:	e6c1      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_VSTART, *value);
   198c4:	682a      	ldr	r2, [r5, #0]
   198c6:	2123      	movs	r1, #35	; 0x23
   198c8:	2000      	movs	r0, #0
   198ca:	f7ff fdcd 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   198ce:	2400      	movs	r4, #0
   198d0:	e6ba      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   198d2:	b928      	cbnz	r0, 198e0 <handleParameter+0x39e>
			*value = tmc5160_readInt(motor, TMC5160_VSTOP);
   198d4:	202b      	movs	r0, #43	; 0x2b
   198d6:	f7ff fd25 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   198da:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_VSTOP);
   198dc:	6028      	str	r0, [r5, #0]
   198de:	e6b3      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_VSTOP, *value);
   198e0:	682a      	ldr	r2, [r5, #0]
   198e2:	212b      	movs	r1, #43	; 0x2b
   198e4:	2000      	movs	r0, #0
   198e6:	f7ff fdbf 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   198ea:	2400      	movs	r4, #0
   198ec:	e6ac      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   198ee:	b928      	cbnz	r0, 198fc <handleParameter+0x3ba>
			*value = tmc5160_readInt(motor, TMC5160_TZEROWAIT);
   198f0:	202c      	movs	r0, #44	; 0x2c
   198f2:	f7ff fd17 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   198f6:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_TZEROWAIT);
   198f8:	6028      	str	r0, [r5, #0]
   198fa:	e6a5      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_TZEROWAIT, *value);
   198fc:	682a      	ldr	r2, [r5, #0]
   198fe:	212c      	movs	r1, #44	; 0x2c
   19900:	2000      	movs	r0, #0
   19902:	f7ff fdb1 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19906:	2400      	movs	r4, #0
   19908:	e69e      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1990a:	4c1a      	ldr	r4, [pc, #104]	; (19974 <handleParameter+0x432>)
   1990c:	b978      	cbnz	r0, 1992e <handleParameter+0x3ec>
			buffer = tmc5160_readInt(motor, TMC5160_THIGH);
   1990e:	2015      	movs	r0, #21
   19910:	f7ff fd08 	bl	19324 <tmc5160_readInt.constprop.0>
			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
   19914:	2801      	cmp	r0, #1
   19916:	bf38      	it	cc
   19918:	2001      	movcc	r0, #1
   1991a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1991e:	fbb3 f0f0 	udiv	r0, r3, r0
   19922:	42a0      	cmp	r0, r4
   19924:	bf94      	ite	ls
   19926:	6028      	strls	r0, [r5, #0]
   19928:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1992a:	4634      	mov	r4, r6
   1992c:	e68c      	b.n	19648 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1 << 24) / ((*value)? *value:1));
   1992e:	682b      	ldr	r3, [r5, #0]
   19930:	2b00      	cmp	r3, #0
   19932:	bf08      	it	eq
   19934:	2301      	moveq	r3, #1
   19936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1993a:	fb92 f2f3 	sdiv	r2, r2, r3
   1993e:	42a2      	cmp	r2, r4
   19940:	bfa8      	it	ge
   19942:	4622      	movge	r2, r4
   19944:	602a      	str	r2, [r5, #0]
			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
   19946:	2115      	movs	r1, #21
   19948:	2000      	movs	r0, #0
   1994a:	f7ff fd8d 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1994e:	2400      	movs	r4, #0
   19950:	e67a      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19952:	b928      	cbnz	r0, 19960 <handleParameter+0x41e>
			*value = tmc5160_readInt(motor, TMC5160_VDCMIN);
   19954:	2033      	movs	r0, #51	; 0x33
   19956:	f7ff fce5 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1995a:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_VDCMIN);
   1995c:	6028      	str	r0, [r5, #0]
   1995e:	e673      	b.n	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_VDCMIN, *value);
   19960:	682a      	ldr	r2, [r5, #0]
   19962:	2133      	movs	r1, #51	; 0x33
   19964:	2000      	movs	r0, #0
   19966:	f7ff fd7f 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1996a:	2400      	movs	r4, #0
   1996c:	e66c      	b.n	19648 <handleParameter+0x106>
   1996e:	bf00      	nop
   19970:	1fff3f98 	.word	0x1fff3f98
   19974:	000fffff 	.word	0x000fffff
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHIFT);
   19978:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   1997a:	b936      	cbnz	r6, 1998a <handleParameter+0x448>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHIFT);
   1997c:	f7ff fcd2 	bl	19324 <tmc5160_readInt.constprop.0>
   19980:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   19984:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19986:	4634      	mov	r4, r6
   19988:	e65e      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHIFT, *value);
   1998a:	f7ff fccb 	bl	19324 <tmc5160_readInt.constprop.0>
   1998e:	682b      	ldr	r3, [r5, #0]
   19990:	04db      	lsls	r3, r3, #19
   19992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   19996:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
   1999a:	431a      	orrs	r2, r3
   1999c:	216c      	movs	r1, #108	; 0x6c
   1999e:	2000      	movs	r0, #0
   199a0:	f7ff fd62 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   199a4:	2400      	movs	r4, #0
   199a6:	e64f      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT);
   199a8:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   199aa:	b936      	cbnz	r6, 199ba <handleParameter+0x478>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT);
   199ac:	f7ff fcba 	bl	19324 <tmc5160_readInt.constprop.0>
   199b0:	f3c0 4080 	ubfx	r0, r0, #18, #1
   199b4:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   199b6:	4634      	mov	r4, r6
   199b8:	e646      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT, *value);
   199ba:	f7ff fcb3 	bl	19324 <tmc5160_readInt.constprop.0>
   199be:	682b      	ldr	r3, [r5, #0]
   199c0:	049b      	lsls	r3, r3, #18
   199c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   199c6:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   199ca:	431a      	orrs	r2, r3
   199cc:	216c      	movs	r1, #108	; 0x6c
   199ce:	2000      	movs	r0, #0
   199d0:	f7ff fd4a 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   199d4:	2400      	movs	r4, #0
   199d6:	e637      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   199d8:	2800      	cmp	r0, #0
   199da:	f040 83ad 	bne.w	1a138 <handleParameter+0xbf6>
			*value = TMC5160.velocity;
   199de:	4bb5      	ldr	r3, [pc, #724]	; (19cb4 <handleParameter+0x772>)
   199e0:	681b      	ldr	r3, [r3, #0]
   199e2:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   199e4:	4604      	mov	r4, r0
   199e6:	e62f      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   199e8:	b930      	cbnz	r0, 199f8 <handleParameter+0x4b6>
			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_SHIFT);
   199ea:	f7ff fc9b 	bl	19324 <tmc5160_readInt.constprop.0>
   199ee:	f000 0001 	and.w	r0, r0, #1
   199f2:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   199f4:	4634      	mov	r4, r6
   199f6:	e627      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_SHIFT, *value);
   199f8:	2000      	movs	r0, #0
   199fa:	f7ff fc93 	bl	19324 <tmc5160_readInt.constprop.0>
   199fe:	682a      	ldr	r2, [r5, #0]
   19a00:	f020 0001 	bic.w	r0, r0, #1
   19a04:	2100      	movs	r1, #0
   19a06:	f002 0201 	and.w	r2, r2, #1
   19a0a:	4302      	orrs	r2, r0
   19a0c:	4608      	mov	r0, r1
   19a0e:	f7ff fd2b 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19a12:	2400      	movs	r4, #0
   19a14:	e618      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19a16:	b930      	cbnz	r0, 19a26 <handleParameter+0x4e4>
			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT);
   19a18:	f7ff fc84 	bl	19324 <tmc5160_readInt.constprop.0>
   19a1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19a20:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19a22:	4634      	mov	r4, r6
   19a24:	e610      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT, *value);
   19a26:	2000      	movs	r0, #0
   19a28:	f7ff fc7c 	bl	19324 <tmc5160_readInt.constprop.0>
   19a2c:	682b      	ldr	r3, [r5, #0]
   19a2e:	005b      	lsls	r3, r3, #1
   19a30:	f003 0302 	and.w	r3, r3, #2
   19a34:	f020 0202 	bic.w	r2, r0, #2
   19a38:	2100      	movs	r1, #0
   19a3a:	431a      	orrs	r2, r3
   19a3c:	4608      	mov	r0, r1
   19a3e:	f7ff fd13 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19a42:	2400      	movs	r4, #0
   19a44:	e600      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19a46:	b956      	cbnz	r6, 19a5e <handleParameter+0x51c>
			*value = 0x100 >> TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SHIFT);
   19a48:	206c      	movs	r0, #108	; 0x6c
   19a4a:	f7ff fc6b 	bl	19324 <tmc5160_readInt.constprop.0>
   19a4e:	f3c0 6303 	ubfx	r3, r0, #24, #4
   19a52:	f44f 7080 	mov.w	r0, #256	; 0x100
   19a56:	4118      	asrs	r0, r3
   19a58:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19a5a:	4634      	mov	r4, r6
   19a5c:	e5f4      	b.n	19648 <handleParameter+0x106>
			switch(*value)
   19a5e:	682b      	ldr	r3, [r5, #0]
   19a60:	2b10      	cmp	r3, #16
   19a62:	d034      	beq.n	19ace <handleParameter+0x58c>
   19a64:	dc0a      	bgt.n	19a7c <handleParameter+0x53a>
   19a66:	3b01      	subs	r3, #1
   19a68:	2b07      	cmp	r3, #7
   19a6a:	d80e      	bhi.n	19a8a <handleParameter+0x548>
   19a6c:	2b07      	cmp	r3, #7
   19a6e:	d80c      	bhi.n	19a8a <handleParameter+0x548>
   19a70:	e8df f003 	tbb	[pc, r3]
   19a74:	290b2715 	.word	0x290b2715
   19a78:	2b0b0b0b 	.word	0x2b0b0b0b
   19a7c:	2b80      	cmp	r3, #128	; 0x80
   19a7e:	d02c      	beq.n	19ada <handleParameter+0x598>
   19a80:	dc08      	bgt.n	19a94 <handleParameter+0x552>
   19a82:	2b20      	cmp	r3, #32
   19a84:	d025      	beq.n	19ad2 <handleParameter+0x590>
   19a86:	2b40      	cmp	r3, #64	; 0x40
   19a88:	d025      	beq.n	19ad6 <handleParameter+0x594>
				default:   *value = -1;  break;
   19a8a:	f04f 33ff 	mov.w	r3, #4294967295
   19a8e:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
   19a90:	2410      	movs	r4, #16
   19a92:	e5d9      	b.n	19648 <handleParameter+0x106>
   19a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19a98:	d1f7      	bne.n	19a8a <handleParameter+0x548>
				case 256:  *value = 0;   break;
   19a9a:	2300      	movs	r3, #0
   19a9c:	e000      	b.n	19aa0 <handleParameter+0x55e>
				case 1:    *value = 8;   break;
   19a9e:	2308      	movs	r3, #8
				case 256:  *value = 0;   break;
   19aa0:	602b      	str	r3, [r5, #0]
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SHIFT, *value);
   19aa2:	206c      	movs	r0, #108	; 0x6c
   19aa4:	f7ff fc3e 	bl	19324 <tmc5160_readInt.constprop.0>
   19aa8:	682b      	ldr	r3, [r5, #0]
   19aaa:	061b      	lsls	r3, r3, #24
   19aac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   19ab0:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   19ab4:	431a      	orrs	r2, r3
   19ab6:	216c      	movs	r1, #108	; 0x6c
   19ab8:	2000      	movs	r0, #0
   19aba:	f7ff fcd5 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19abe:	2400      	movs	r4, #0
   19ac0:	e5c2      	b.n	19648 <handleParameter+0x106>
				case 2:    *value = 7;   break;
   19ac2:	2307      	movs	r3, #7
   19ac4:	e7ec      	b.n	19aa0 <handleParameter+0x55e>
				case 4:    *value = 6;   break;
   19ac6:	2306      	movs	r3, #6
   19ac8:	e7ea      	b.n	19aa0 <handleParameter+0x55e>
				case 8:    *value = 5;   break;
   19aca:	2305      	movs	r3, #5
   19acc:	e7e8      	b.n	19aa0 <handleParameter+0x55e>
				case 16:   *value = 4;   break;
   19ace:	2304      	movs	r3, #4
   19ad0:	e7e6      	b.n	19aa0 <handleParameter+0x55e>
				case 32:   *value = 3;   break;
   19ad2:	2303      	movs	r3, #3
   19ad4:	e7e4      	b.n	19aa0 <handleParameter+0x55e>
				case 64:   *value = 2;   break;
   19ad6:	2302      	movs	r3, #2
   19ad8:	e7e2      	b.n	19aa0 <handleParameter+0x55e>
				case 128:  *value = 1;   break;
   19ada:	2301      	movs	r3, #1
   19adc:	e7e0      	b.n	19aa0 <handleParameter+0x55e>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
   19ade:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19ae0:	b936      	cbnz	r6, 19af0 <handleParameter+0x5ae>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
   19ae2:	f7ff fc1f 	bl	19324 <tmc5160_readInt.constprop.0>
   19ae6:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   19aea:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19aec:	4634      	mov	r4, r6
   19aee:	e5ab      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, *value);
   19af0:	f7ff fc18 	bl	19324 <tmc5160_readInt.constprop.0>
   19af4:	682b      	ldr	r3, [r5, #0]
   19af6:	03db      	lsls	r3, r3, #15
   19af8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   19afc:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   19b00:	431a      	orrs	r2, r3
   19b02:	216c      	movs	r1, #108	; 0x6c
   19b04:	2000      	movs	r0, #0
   19b06:	f7ff fcaf 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19b0a:	2400      	movs	r4, #0
   19b0c:	e59c      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT);
   19b0e:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19b10:	b936      	cbnz	r6, 19b20 <handleParameter+0x5de>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT);
   19b12:	f7ff fc07 	bl	19324 <tmc5160_readInt.constprop.0>
   19b16:	f3c0 3080 	ubfx	r0, r0, #14, #1
   19b1a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19b1c:	4634      	mov	r4, r6
   19b1e:	e593      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT, *value);
   19b20:	f7ff fc00 	bl	19324 <tmc5160_readInt.constprop.0>
   19b24:	682b      	ldr	r3, [r5, #0]
   19b26:	039b      	lsls	r3, r3, #14
   19b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   19b2c:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
   19b30:	431a      	orrs	r2, r3
   19b32:	216c      	movs	r1, #108	; 0x6c
   19b34:	2000      	movs	r0, #0
   19b36:	f7ff fc97 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19b3a:	2400      	movs	r4, #0
   19b3c:	e584      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT);
   19b3e:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19b40:	b936      	cbnz	r6, 19b50 <handleParameter+0x60e>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT);
   19b42:	f7ff fbef 	bl	19324 <tmc5160_readInt.constprop.0>
   19b46:	f3c0 3000 	ubfx	r0, r0, #12, #1
   19b4a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19b4c:	4634      	mov	r4, r6
   19b4e:	e57b      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT, *value);
   19b50:	f7ff fbe8 	bl	19324 <tmc5160_readInt.constprop.0>
   19b54:	682b      	ldr	r3, [r5, #0]
   19b56:	031b      	lsls	r3, r3, #12
   19b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   19b5c:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   19b60:	431a      	orrs	r2, r3
   19b62:	216c      	movs	r1, #108	; 0x6c
   19b64:	2000      	movs	r0, #0
   19b66:	f7ff fc7f 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19b6a:	2400      	movs	r4, #0
   19b6c:	e56c      	b.n	19648 <handleParameter+0x106>
		buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
   19b6e:	206c      	movs	r0, #108	; 0x6c
   19b70:	f7ff fbd8 	bl	19324 <tmc5160_readInt.constprop.0>
   19b74:	4607      	mov	r7, r0
		if(readWrite == READ) {
   19b76:	b9c6      	cbnz	r6, 19baa <handleParameter+0x668>
			if(buffer & (1 << TMC5160_CHM_SHIFT))
   19b78:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
   19b7c:	d005      	beq.n	19b8a <handleParameter+0x648>
				*value = (buffer >> TMC5160_HEND_SHIFT) & TMC5160_HEND_MASK;
   19b7e:	09c7      	lsrs	r7, r0, #7
   19b80:	f407 67f0 	and.w	r7, r7, #1920	; 0x780
   19b84:	602f      	str	r7, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19b86:	4634      	mov	r4, r6
   19b88:	e55e      	b.n	19648 <handleParameter+0x106>
				*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> TMC5160_TFD_ALL_SHIFT) & TMC5160_TFD_ALL_MASK;
   19b8a:	206c      	movs	r0, #108	; 0x6c
   19b8c:	f7ff fbca 	bl	19324 <tmc5160_readInt.constprop.0>
				if(buffer & TMC5160_TFD_3_SHIFT)
   19b90:	f017 0f0b 	tst.w	r7, #11
				*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> TMC5160_TFD_ALL_SHIFT) & TMC5160_TFD_ALL_MASK;
   19b94:	ea4f 1020 	mov.w	r0, r0, asr #4
   19b98:	f000 0070 	and.w	r0, r0, #112	; 0x70
				if(buffer & TMC5160_TFD_3_SHIFT)
   19b9c:	d101      	bne.n	19ba2 <handleParameter+0x660>
				*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> TMC5160_TFD_ALL_SHIFT) & TMC5160_TFD_ALL_MASK;
   19b9e:	6028      	str	r0, [r5, #0]
   19ba0:	e5a8      	b.n	196f4 <handleParameter+0x1b2>
					*value |= 1<<3; // MSB wird zu value dazugefügt
   19ba2:	f040 0008 	orr.w	r0, r0, #8
   19ba6:	6028      	str	r0, [r5, #0]
   19ba8:	e54e      	b.n	19648 <handleParameter+0x106>
			if(tmc5160_readInt(motor, TMC5160_CHOPCONF) & (1<<14))
   19baa:	206c      	movs	r0, #108	; 0x6c
   19bac:	f7ff fbba 	bl	19324 <tmc5160_readInt.constprop.0>
   19bb0:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HEND_MASK, TMC5160_HEND_SHIFT, *value);
   19bb4:	f04f 006c 	mov.w	r0, #108	; 0x6c
			if(tmc5160_readInt(motor, TMC5160_CHOPCONF) & (1<<14))
   19bb8:	d00e      	beq.n	19bd8 <handleParameter+0x696>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HEND_MASK, TMC5160_HEND_SHIFT, *value);
   19bba:	f7ff fbb3 	bl	19324 <tmc5160_readInt.constprop.0>
   19bbe:	682b      	ldr	r3, [r5, #0]
   19bc0:	01db      	lsls	r3, r3, #7
   19bc2:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   19bc6:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   19bca:	431a      	orrs	r2, r3
   19bcc:	216c      	movs	r1, #108	; 0x6c
   19bce:	2000      	movs	r0, #0
   19bd0:	f7ff fc4a 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19bd4:	2400      	movs	r4, #0
   19bd6:	e537      	b.n	19648 <handleParameter+0x106>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TFD_3_MASK, TMC5160_TFD_3_SHIFT, (*value & (1<<3))); // MSB wird zu value dazugefügt
   19bd8:	f7ff fba4 	bl	19324 <tmc5160_readInt.constprop.0>
   19bdc:	216c      	movs	r1, #108	; 0x6c
   19bde:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
   19be2:	4620      	mov	r0, r4
   19be4:	f7ff fc40 	bl	19468 <tmc5160_writeInt>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TFD_ALL_MASK, TMC5160_TFD_ALL_SHIFT, *value);
   19be8:	206c      	movs	r0, #108	; 0x6c
   19bea:	f7ff fb9b 	bl	19324 <tmc5160_readInt.constprop.0>
   19bee:	682b      	ldr	r3, [r5, #0]
   19bf0:	011b      	lsls	r3, r3, #4
   19bf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   19bf6:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   19bfa:	431a      	orrs	r2, r3
   19bfc:	216c      	movs	r1, #108	; 0x6c
   19bfe:	4620      	mov	r0, r4
   19c00:	f7ff fc32 	bl	19468 <tmc5160_writeInt>
   19c04:	e520      	b.n	19648 <handleParameter+0x106>
		buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
   19c06:	206c      	movs	r0, #108	; 0x6c
   19c08:	f7ff fb8c 	bl	19324 <tmc5160_readInt.constprop.0>
		if(readWrite == READ) {
   19c0c:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
   19c10:	b98e      	cbnz	r6, 19c36 <handleParameter+0x6f4>
			if(buffer & (1 << TMC5160_CHM_SHIFT))
   19c12:	b12c      	cbz	r4, 19c20 <handleParameter+0x6de>
				*value = (buffer >> TMC5160_HSTRT_SHIFT) & TMC5160_HSTRT_MASK;
   19c14:	0900      	lsrs	r0, r0, #4
   19c16:	f000 0070 	and.w	r0, r0, #112	; 0x70
   19c1a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19c1c:	4634      	mov	r4, r6
   19c1e:	e513      	b.n	19648 <handleParameter+0x106>
				*value = (buffer >> TMC5160_OFFSET_SHIFT) & TMC5160_OFFSET_MASK;
   19c20:	09c3      	lsrs	r3, r0, #7
				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
   19c22:	0502      	lsls	r2, r0, #20
				*value = (buffer >> TMC5160_OFFSET_SHIFT) & TMC5160_OFFSET_MASK;
   19c24:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
   19c28:	d401      	bmi.n	19c2e <handleParameter+0x6ec>
				*value = (buffer >> TMC5160_OFFSET_SHIFT) & TMC5160_OFFSET_MASK;
   19c2a:	602b      	str	r3, [r5, #0]
   19c2c:	e562      	b.n	196f4 <handleParameter+0x1b2>
					*value |= 1<<3; // MSB wird zu value dazugefügt
   19c2e:	f043 0308 	orr.w	r3, r3, #8
   19c32:	602b      	str	r3, [r5, #0]
   19c34:	e508      	b.n	19648 <handleParameter+0x106>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HSTRT_MASK, TMC5160_HSTRT_SHIFT, *value);
   19c36:	206c      	movs	r0, #108	; 0x6c
			if(buffer & (1 << TMC5160_CHM_SHIFT))
   19c38:	b174      	cbz	r4, 19c58 <handleParameter+0x716>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HSTRT_MASK, TMC5160_HSTRT_SHIFT, *value);
   19c3a:	f7ff fb73 	bl	19324 <tmc5160_readInt.constprop.0>
   19c3e:	682b      	ldr	r3, [r5, #0]
   19c40:	011b      	lsls	r3, r3, #4
   19c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   19c46:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   19c4a:	431a      	orrs	r2, r3
   19c4c:	216c      	movs	r1, #108	; 0x6c
   19c4e:	2000      	movs	r0, #0
   19c50:	f7ff fc0a 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19c54:	2400      	movs	r4, #0
   19c56:	e4f7      	b.n	19648 <handleParameter+0x106>
				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_OFFSET_MASK, TMC5160_OFFSET_SHIFT, *value);
   19c58:	f7ff fb64 	bl	19324 <tmc5160_readInt.constprop.0>
   19c5c:	682b      	ldr	r3, [r5, #0]
   19c5e:	01db      	lsls	r3, r3, #7
   19c60:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   19c64:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   19c68:	431a      	orrs	r2, r3
   19c6a:	216c      	movs	r1, #108	; 0x6c
   19c6c:	4620      	mov	r0, r4
   19c6e:	f7ff fbfb 	bl	19468 <tmc5160_writeInt>
   19c72:	e4e9      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
   19c74:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19c76:	b936      	cbnz	r6, 19c86 <handleParameter+0x744>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
   19c78:	f7ff fb54 	bl	19324 <tmc5160_readInt.constprop.0>
   19c7c:	f000 000f 	and.w	r0, r0, #15
   19c80:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19c82:	4634      	mov	r4, r6
   19c84:	e4e0      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, *value);
   19c86:	f7ff fb4d 	bl	19324 <tmc5160_readInt.constprop.0>
   19c8a:	682a      	ldr	r2, [r5, #0]
   19c8c:	f020 000f 	bic.w	r0, r0, #15
   19c90:	f002 020f 	and.w	r2, r2, #15
   19c94:	4302      	orrs	r2, r0
   19c96:	216c      	movs	r1, #108	; 0x6c
   19c98:	2000      	movs	r0, #0
   19c9a:	f7ff fbe5 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19c9e:	2400      	movs	r4, #0
   19ca0:	e4d2      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
   19ca2:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19ca4:	b946      	cbnz	r6, 19cb8 <handleParameter+0x776>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
   19ca6:	f7ff fb3d 	bl	19324 <tmc5160_readInt.constprop.0>
   19caa:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   19cae:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19cb0:	4634      	mov	r4, r6
   19cb2:	e4c9      	b.n	19648 <handleParameter+0x106>
   19cb4:	1fff3f98 	.word	0x1fff3f98
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, *value);
   19cb8:	f7ff fb34 	bl	19324 <tmc5160_readInt.constprop.0>
   19cbc:	682b      	ldr	r3, [r5, #0]
   19cbe:	03db      	lsls	r3, r3, #15
   19cc0:	b29b      	uxth	r3, r3
   19cc2:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   19cc6:	431a      	orrs	r2, r3
   19cc8:	216d      	movs	r1, #109	; 0x6d
   19cca:	2000      	movs	r0, #0
   19ccc:	f7ff fbcc 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19cd0:	2400      	movs	r4, #0
   19cd2:	e4b9      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
   19cd4:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19cd6:	b936      	cbnz	r6, 19ce6 <handleParameter+0x7a4>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
   19cd8:	f7ff fb24 	bl	19324 <tmc5160_readInt.constprop.0>
   19cdc:	f3c0 3041 	ubfx	r0, r0, #13, #2
   19ce0:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19ce2:	4634      	mov	r4, r6
   19ce4:	e4b0      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, *value);
   19ce6:	f7ff fb1d 	bl	19324 <tmc5160_readInt.constprop.0>
   19cea:	682b      	ldr	r3, [r5, #0]
   19cec:	035b      	lsls	r3, r3, #13
   19cee:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   19cf2:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   19cf6:	431a      	orrs	r2, r3
   19cf8:	216d      	movs	r1, #109	; 0x6d
   19cfa:	2000      	movs	r0, #0
   19cfc:	f7ff fbb4 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19d00:	2400      	movs	r4, #0
   19d02:	e4a1      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
   19d04:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19d06:	b936      	cbnz	r6, 19d16 <handleParameter+0x7d4>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
   19d08:	f7ff fb0c 	bl	19324 <tmc5160_readInt.constprop.0>
   19d0c:	f3c0 2003 	ubfx	r0, r0, #8, #4
   19d10:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19d12:	4634      	mov	r4, r6
   19d14:	e498      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, *value);
   19d16:	f7ff fb05 	bl	19324 <tmc5160_readInt.constprop.0>
   19d1a:	682b      	ldr	r3, [r5, #0]
   19d1c:	021b      	lsls	r3, r3, #8
   19d1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   19d22:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   19d26:	431a      	orrs	r2, r3
   19d28:	216d      	movs	r1, #109	; 0x6d
   19d2a:	2000      	movs	r0, #0
   19d2c:	f7ff fb9c 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19d30:	2400      	movs	r4, #0
   19d32:	e489      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT);
   19d34:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19d36:	b936      	cbnz	r6, 19d46 <handleParameter+0x804>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT);
   19d38:	f7ff faf4 	bl	19324 <tmc5160_readInt.constprop.0>
   19d3c:	f3c0 1041 	ubfx	r0, r0, #5, #2
   19d40:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19d42:	4634      	mov	r4, r6
   19d44:	e480      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT, *value);
   19d46:	f7ff faed 	bl	19324 <tmc5160_readInt.constprop.0>
   19d4a:	682b      	ldr	r3, [r5, #0]
   19d4c:	015b      	lsls	r3, r3, #5
   19d4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19d52:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   19d56:	431a      	orrs	r2, r3
   19d58:	216d      	movs	r1, #109	; 0x6d
   19d5a:	2000      	movs	r0, #0
   19d5c:	f7ff fb84 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19d60:	2400      	movs	r4, #0
   19d62:	e471      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT);
   19d64:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19d66:	b936      	cbnz	r6, 19d76 <handleParameter+0x834>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT);
   19d68:	f7ff fadc 	bl	19324 <tmc5160_readInt.constprop.0>
   19d6c:	f000 000f 	and.w	r0, r0, #15
   19d70:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19d72:	4634      	mov	r4, r6
   19d74:	e468      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT, *value);
   19d76:	f7ff fad5 	bl	19324 <tmc5160_readInt.constprop.0>
   19d7a:	682a      	ldr	r2, [r5, #0]
   19d7c:	f020 000f 	bic.w	r0, r0, #15
   19d80:	f002 020f 	and.w	r2, r2, #15
   19d84:	4302      	orrs	r2, r0
   19d86:	216d      	movs	r1, #109	; 0x6d
   19d88:	2000      	movs	r0, #0
   19d8a:	f7ff fb6d 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19d8e:	2400      	movs	r4, #0
   19d90:	e45a      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT);
   19d92:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19d94:	b936      	cbnz	r6, 19da4 <handleParameter+0x862>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT);
   19d96:	f7ff fac5 	bl	19324 <tmc5160_readInt.constprop.0>
   19d9a:	f3c0 6000 	ubfx	r0, r0, #24, #1
   19d9e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19da0:	4634      	mov	r4, r6
   19da2:	e451      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT, *value);
   19da4:	f7ff fabe 	bl	19324 <tmc5160_readInt.constprop.0>
   19da8:	682b      	ldr	r3, [r5, #0]
   19daa:	061b      	lsls	r3, r3, #24
   19dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   19db0:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   19db4:	431a      	orrs	r2, r3
   19db6:	216d      	movs	r1, #109	; 0x6d
   19db8:	2000      	movs	r0, #0
   19dba:	f7ff fb55 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19dbe:	2400      	movs	r4, #0
   19dc0:	e442      	b.n	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
   19dc2:	206d      	movs	r0, #109	; 0x6d
		if(readWrite == READ) {
   19dc4:	b96e      	cbnz	r6, 19de2 <handleParameter+0x8a0>
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
   19dc6:	f7ff faad 	bl	19324 <tmc5160_readInt.constprop.0>
   19dca:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   19dcc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
   19dd0:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   19dd4:	bf18      	it	ne
   19dd6:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   19dda:	4318      	orrs	r0, r3
   19ddc:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19dde:	4634      	mov	r4, r6
   19de0:	e432      	b.n	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, *value);
   19de2:	f7ff fa9f 	bl	19324 <tmc5160_readInt.constprop.0>
   19de6:	682b      	ldr	r3, [r5, #0]
   19de8:	041b      	lsls	r3, r3, #16
   19dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   19dee:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   19df2:	431a      	orrs	r2, r3
   19df4:	216d      	movs	r1, #109	; 0x6d
   19df6:	2000      	movs	r0, #0
   19df8:	f7ff fb36 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19dfc:	2400      	movs	r4, #0
   19dfe:	e423      	b.n	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19e00:	2e00      	cmp	r6, #0
   19e02:	f040 819c 	bne.w	1a13e <handleParameter+0xbfc>
			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_CS_ACTUAL_MASK, TMC5160_CS_ACTUAL_SHIFT);
   19e06:	206f      	movs	r0, #111	; 0x6f
   19e08:	f7ff fa8c 	bl	19324 <tmc5160_readInt.constprop.0>
   19e0c:	f3c0 4004 	ubfx	r0, r0, #16, #5
   19e10:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19e12:	4634      	mov	r4, r6
   19e14:	e418      	b.n	19648 <handleParameter+0x106>
			if(TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT))
   19e16:	2034      	movs	r0, #52	; 0x34
		if(readWrite == READ) {
   19e18:	b9c6      	cbnz	r6, 19e4c <handleParameter+0x90a>
			if(TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT))
   19e1a:	f7ff fa83 	bl	19324 <tmc5160_readInt.constprop.0>
   19e1e:	0543      	lsls	r3, r0, #21
   19e20:	d510      	bpl.n	19e44 <handleParameter+0x902>
				buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
   19e22:	2014      	movs	r0, #20
   19e24:	f7ff fa7e 	bl	19324 <tmc5160_readInt.constprop.0>
				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   19e28:	2801      	cmp	r0, #1
   19e2a:	bf38      	it	cc
   19e2c:	2001      	movcc	r0, #1
   19e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19e32:	fbb3 f0f0 	udiv	r0, r3, r0
   19e36:	4bc8      	ldr	r3, [pc, #800]	; (1a158 <handleParameter+0xc16>)
   19e38:	4298      	cmp	r0, r3
   19e3a:	bf94      	ite	ls
   19e3c:	6028      	strls	r0, [r5, #0]
   19e3e:	602b      	strhi	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19e40:	4634      	mov	r4, r6
   19e42:	e401      	b.n	19648 <handleParameter+0x106>
				*value = 0;
   19e44:	602e      	str	r6, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19e46:	4634      	mov	r4, r6
   19e48:	f7ff bbfe 	b.w	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT, (*value)? 1:0);
   19e4c:	f7ff fa6a 	bl	19324 <tmc5160_readInt.constprop.0>
   19e50:	682b      	ldr	r3, [r5, #0]
   19e52:	2b00      	cmp	r3, #0
   19e54:	bf18      	it	ne
   19e56:	f44f 6380 	movne.w	r3, #1024	; 0x400
   19e5a:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   19e5e:	431a      	orrs	r2, r3
   19e60:	2134      	movs	r1, #52	; 0x34
   19e62:	2000      	movs	r0, #0
   19e64:	f7ff fb00 	bl	19468 <tmc5160_writeInt>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   19e68:	682b      	ldr	r3, [r5, #0]
   19e6a:	2b00      	cmp	r3, #0
   19e6c:	bf08      	it	eq
   19e6e:	2301      	moveq	r3, #1
   19e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19e74:	fb92 f2f3 	sdiv	r2, r2, r3
   19e78:	4bb7      	ldr	r3, [pc, #732]	; (1a158 <handleParameter+0xc16>)
   19e7a:	429a      	cmp	r2, r3
   19e7c:	bfa8      	it	ge
   19e7e:	461a      	movge	r2, r3
   19e80:	602a      	str	r2, [r5, #0]
			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
   19e82:	2114      	movs	r1, #20
   19e84:	2000      	movs	r0, #0
   19e86:	f7ff faef 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19e8a:	2400      	movs	r4, #0
   19e8c:	f7ff bbdc 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19e90:	4cb1      	ldr	r4, [pc, #708]	; (1a158 <handleParameter+0xc16>)
   19e92:	b986      	cbnz	r6, 19eb6 <handleParameter+0x974>
			buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
   19e94:	2014      	movs	r0, #20
   19e96:	f7ff fa45 	bl	19324 <tmc5160_readInt.constprop.0>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   19e9a:	2801      	cmp	r0, #1
   19e9c:	bf38      	it	cc
   19e9e:	2001      	movcc	r0, #1
   19ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19ea4:	fbb3 f0f0 	udiv	r0, r3, r0
   19ea8:	42a0      	cmp	r0, r4
   19eaa:	bf94      	ite	ls
   19eac:	6028      	strls	r0, [r5, #0]
   19eae:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19eb0:	4634      	mov	r4, r6
   19eb2:	f7ff bbc9 	b.w	19648 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   19eb6:	682b      	ldr	r3, [r5, #0]
   19eb8:	2b00      	cmp	r3, #0
   19eba:	bf08      	it	eq
   19ebc:	2301      	moveq	r3, #1
   19ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19ec2:	fb92 f2f3 	sdiv	r2, r2, r3
   19ec6:	42a2      	cmp	r2, r4
   19ec8:	bfa8      	it	ge
   19eca:	4622      	movge	r2, r4
   19ecc:	602a      	str	r2, [r5, #0]
			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
   19ece:	2114      	movs	r1, #20
   19ed0:	2000      	movs	r0, #0
   19ed2:	f7ff fac9 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19ed6:	2400      	movs	r4, #0
   19ed8:	f7ff bbb6 	b.w	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT);
   19edc:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19ede:	b93e      	cbnz	r6, 19ef0 <handleParameter+0x9ae>
			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT);
   19ee0:	f7ff fa20 	bl	19324 <tmc5160_readInt.constprop.0>
   19ee4:	f3c0 3040 	ubfx	r0, r0, #13, #1
   19ee8:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19eea:	4634      	mov	r4, r6
   19eec:	f7ff bbac 	b.w	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT, *value);
   19ef0:	f7ff fa18 	bl	19324 <tmc5160_readInt.constprop.0>
   19ef4:	682b      	ldr	r3, [r5, #0]
   19ef6:	035b      	lsls	r3, r3, #13
   19ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   19efc:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   19f00:	431a      	orrs	r2, r3
   19f02:	216c      	movs	r1, #108	; 0x6c
   19f04:	2000      	movs	r0, #0
   19f06:	f7ff faaf 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19f0a:	2400      	movs	r4, #0
   19f0c:	f7ff bb9c 	b.w	19648 <handleParameter+0x106>
			*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> 20) & 0x0F;
   19f10:	206c      	movs	r0, #108	; 0x6c
		if(readWrite == READ) {
   19f12:	b93e      	cbnz	r6, 19f24 <handleParameter+0x9e2>
			*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> 20) & 0x0F;
   19f14:	f7ff fa06 	bl	19324 <tmc5160_readInt.constprop.0>
   19f18:	f3c0 5003 	ubfx	r0, r0, #20, #4
   19f1c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19f1e:	4634      	mov	r4, r6
   19f20:	f7ff bb92 	b.w	19648 <handleParameter+0x106>
			buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
   19f24:	f7ff f9fe 	bl	19324 <tmc5160_readInt.constprop.0>
			buffer |= (*value & 0x0F) << 20;
   19f28:	682b      	ldr	r3, [r5, #0]
   19f2a:	051b      	lsls	r3, r3, #20
			buffer &= ~(0x0F<<20);
   19f2c:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
			buffer |= (*value & 0x0F) << 20;
   19f30:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
			tmc5160_writeInt(motor, TMC5160_CHOPCONF,buffer);
   19f34:	431a      	orrs	r2, r3
   19f36:	216c      	movs	r1, #108	; 0x6c
   19f38:	2000      	movs	r0, #0
   19f3a:	f7ff fa95 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19f3e:	2400      	movs	r4, #0
   19f40:	f7ff bb82 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   19f44:	4c84      	ldr	r4, [pc, #528]	; (1a158 <handleParameter+0xc16>)
   19f46:	b986      	cbnz	r6, 19f6a <handleParameter+0xa28>
			buffer = tmc5160_readInt(motor, TMC5160_TPWMTHRS);
   19f48:	2013      	movs	r0, #19
   19f4a:	f7ff f9eb 	bl	19324 <tmc5160_readInt.constprop.0>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   19f4e:	2801      	cmp	r0, #1
   19f50:	bf38      	it	cc
   19f52:	2001      	movcc	r0, #1
   19f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19f58:	fbb3 f0f0 	udiv	r0, r3, r0
   19f5c:	42a0      	cmp	r0, r4
   19f5e:	bf94      	ite	ls
   19f60:	6028      	strls	r0, [r5, #0]
   19f62:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19f64:	4634      	mov	r4, r6
   19f66:	f7ff bb6f 	b.w	19648 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   19f6a:	682b      	ldr	r3, [r5, #0]
   19f6c:	2b00      	cmp	r3, #0
   19f6e:	bf08      	it	eq
   19f70:	2301      	moveq	r3, #1
   19f72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19f76:	fb92 f2f3 	sdiv	r2, r2, r3
   19f7a:	42a2      	cmp	r2, r4
   19f7c:	bfa8      	it	ge
   19f7e:	4622      	movge	r2, r4
   19f80:	602a      	str	r2, [r5, #0]
			tmc5160_writeInt(motor, TMC5160_TPWMTHRS, *value);
   19f82:	2113      	movs	r1, #19
   19f84:	2000      	movs	r0, #0
   19f86:	f7ff fa6f 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19f8a:	2400      	movs	r4, #0
   19f8c:	f7ff bb5c 	b.w	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIFT);
   19f90:	2070      	movs	r0, #112	; 0x70
		if(readWrite == READ) {
   19f92:	b93e      	cbnz	r6, 19fa4 <handleParameter+0xa62>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIFT);
   19f94:	f7ff f9c6 	bl	19324 <tmc5160_readInt.constprop.0>
   19f98:	f3c0 2007 	ubfx	r0, r0, #8, #8
   19f9c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19f9e:	4634      	mov	r4, r6
   19fa0:	f7ff bb52 	b.w	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIFT, *value);
   19fa4:	f7ff f9be 	bl	19324 <tmc5160_readInt.constprop.0>
   19fa8:	682b      	ldr	r3, [r5, #0]
   19faa:	021b      	lsls	r3, r3, #8
   19fac:	b29b      	uxth	r3, r3
   19fae:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
   19fb2:	431a      	orrs	r2, r3
   19fb4:	2170      	movs	r1, #112	; 0x70
   19fb6:	2000      	movs	r0, #0
   19fb8:	f7ff fa56 	bl	19468 <tmc5160_writeInt>
			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_EN_PWM_MODE_MASK, TMC5160_EN_PWM_MODE_SHIFT, (*value) ? 1 : 0);
   19fbc:	2000      	movs	r0, #0
   19fbe:	f7ff f9b1 	bl	19324 <tmc5160_readInt.constprop.0>
   19fc2:	682b      	ldr	r3, [r5, #0]
   19fc4:	2b00      	cmp	r3, #0
   19fc6:	f020 0204 	bic.w	r2, r0, #4
   19fca:	bf18      	it	ne
   19fcc:	2304      	movne	r3, #4
   19fce:	2100      	movs	r1, #0
   19fd0:	431a      	orrs	r2, r3
   19fd2:	4608      	mov	r0, r1
   19fd4:	f7ff fa48 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   19fd8:	2400      	movs	r4, #0
   19fda:	f7ff bb35 	b.w	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_OFS_MASK, TMC5160_PWM_OFS_SHIFT);
   19fde:	2070      	movs	r0, #112	; 0x70
		if(readWrite == READ) {
   19fe0:	b936      	cbnz	r6, 19ff0 <handleParameter+0xaae>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_OFS_MASK, TMC5160_PWM_OFS_SHIFT);
   19fe2:	f7ff f99f 	bl	19324 <tmc5160_readInt.constprop.0>
   19fe6:	b2c0      	uxtb	r0, r0
   19fe8:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   19fea:	4634      	mov	r4, r6
   19fec:	f7ff bb2c 	b.w	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_GLOBAL_SCALER_MASK, TMC5160_GLOBAL_SCALER_SHIFT, *value);
   19ff0:	f7ff f998 	bl	19324 <tmc5160_readInt.constprop.0>
   19ff4:	782a      	ldrb	r2, [r5, #0]
   19ff6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   19ffa:	4302      	orrs	r2, r0
   19ffc:	2170      	movs	r1, #112	; 0x70
   19ffe:	2000      	movs	r0, #0
   1a000:	f7ff fa32 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a004:	2400      	movs	r4, #0
   1a006:	f7ff bb1f 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1a00a:	b946      	cbnz	r6, 1a01e <handleParameter+0xadc>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIFT);
   1a00c:	2070      	movs	r0, #112	; 0x70
   1a00e:	f7ff f989 	bl	19324 <tmc5160_readInt.constprop.0>
   1a012:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1a016:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a018:	4634      	mov	r4, r6
   1a01a:	f7ff bb15 	b.w	19648 <handleParameter+0x106>
			if(*value >= 0 && *value < 4)
   1a01e:	682b      	ldr	r3, [r5, #0]
   1a020:	2b03      	cmp	r3, #3
   1a022:	f200 808f 	bhi.w	1a144 <handleParameter+0xc02>
				TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIFT, *value);
   1a026:	2070      	movs	r0, #112	; 0x70
   1a028:	f7ff f97c 	bl	19324 <tmc5160_readInt.constprop.0>
   1a02c:	682b      	ldr	r3, [r5, #0]
   1a02e:	041b      	lsls	r3, r3, #16
   1a030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
   1a034:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
   1a038:	431a      	orrs	r2, r3
   1a03a:	2170      	movs	r1, #112	; 0x70
   1a03c:	2000      	movs	r0, #0
   1a03e:	f7ff fa13 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a042:	2400      	movs	r4, #0
   1a044:	f7ff bb00 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1a048:	b946      	cbnz	r6, 1a05c <handleParameter+0xb1a>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTOSCALE_SHIFT);
   1a04a:	2070      	movs	r0, #112	; 0x70
   1a04c:	f7ff f96a 	bl	19324 <tmc5160_readInt.constprop.0>
   1a050:	f3c0 4080 	ubfx	r0, r0, #18, #1
   1a054:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a056:	4634      	mov	r4, r6
   1a058:	f7ff baf6 	b.w	19648 <handleParameter+0x106>
			if(*value >= 0 && *value < 2)
   1a05c:	682b      	ldr	r3, [r5, #0]
   1a05e:	2b01      	cmp	r3, #1
   1a060:	d873      	bhi.n	1a14a <handleParameter+0xc08>
				TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTOSCALE_SHIFT, *value);
   1a062:	2070      	movs	r0, #112	; 0x70
   1a064:	f7ff f95e 	bl	19324 <tmc5160_readInt.constprop.0>
   1a068:	682b      	ldr	r3, [r5, #0]
   1a06a:	049b      	lsls	r3, r3, #18
   1a06c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   1a070:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   1a074:	431a      	orrs	r2, r3
   1a076:	2170      	movs	r1, #112	; 0x70
   1a078:	2000      	movs	r0, #0
   1a07a:	f7ff f9f5 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a07e:	2400      	movs	r4, #0
   1a080:	f7ff bae2 	b.w	19648 <handleParameter+0x106>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SHIFT);
   1a084:	2070      	movs	r0, #112	; 0x70
		if(readWrite == READ) {
   1a086:	b93e      	cbnz	r6, 1a098 <handleParameter+0xb56>
			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SHIFT);
   1a088:	f7ff f94c 	bl	19324 <tmc5160_readInt.constprop.0>
   1a08c:	f3c0 5001 	ubfx	r0, r0, #20, #2
   1a090:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a092:	4634      	mov	r4, r6
   1a094:	f7ff bad8 	b.w	19648 <handleParameter+0x106>
			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SHIFT, *value);
   1a098:	f7ff f944 	bl	19324 <tmc5160_readInt.constprop.0>
   1a09c:	682b      	ldr	r3, [r5, #0]
   1a09e:	051b      	lsls	r3, r3, #20
   1a0a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
   1a0a4:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
   1a0a8:	431a      	orrs	r2, r3
   1a0aa:	2170      	movs	r1, #112	; 0x70
   1a0ac:	2000      	movs	r0, #0
   1a0ae:	f7ff f9db 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a0b2:	2400      	movs	r4, #0
   1a0b4:	f7ff bac8 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1a0b8:	2e00      	cmp	r6, #0
   1a0ba:	d149      	bne.n	1a150 <handleParameter+0xc0e>
			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_SG_RESULT_MASK, TMC5160_SG_RESULT_SHIFT);
   1a0bc:	206f      	movs	r0, #111	; 0x6f
   1a0be:	f7ff f931 	bl	19324 <tmc5160_readInt.constprop.0>
   1a0c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1a0c6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a0c8:	4634      	mov	r4, r6
   1a0ca:	f7ff babd 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1a0ce:	b936      	cbnz	r6, 1a0de <handleParameter+0xb9c>
			*value = tmc5160_readInt(motor, TMC5160_XENC);
   1a0d0:	2039      	movs	r0, #57	; 0x39
   1a0d2:	f7ff f927 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1a0d6:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_XENC);
   1a0d8:	6028      	str	r0, [r5, #0]
   1a0da:	f7ff bab5 	b.w	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_XENC, *value);
   1a0de:	682a      	ldr	r2, [r5, #0]
   1a0e0:	2139      	movs	r1, #57	; 0x39
   1a0e2:	2000      	movs	r0, #0
   1a0e4:	f7ff f9c0 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a0e8:	2400      	movs	r4, #0
   1a0ea:	f7ff baad 	b.w	19648 <handleParameter+0x106>
		if(readWrite == READ) {
   1a0ee:	b936      	cbnz	r6, 1a0fe <handleParameter+0xbbc>
			*value = tmc5160_readInt(motor, TMC5160_ENC_CONST);
   1a0f0:	203a      	movs	r0, #58	; 0x3a
   1a0f2:	f7ff f917 	bl	19324 <tmc5160_readInt.constprop.0>
	uint32_t errors = TMC_ERROR_NONE;
   1a0f6:	4634      	mov	r4, r6
			*value = tmc5160_readInt(motor, TMC5160_ENC_CONST);
   1a0f8:	6028      	str	r0, [r5, #0]
   1a0fa:	f7ff baa5 	b.w	19648 <handleParameter+0x106>
			tmc5160_writeInt(motor, TMC5160_ENC_CONST, *value);
   1a0fe:	682a      	ldr	r2, [r5, #0]
   1a100:	213a      	movs	r1, #58	; 0x3a
   1a102:	2000      	movs	r0, #0
   1a104:	f7ff f9b0 	bl	19468 <tmc5160_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a108:	2400      	movs	r4, #0
   1a10a:	f7ff ba9d 	b.w	19648 <handleParameter+0x106>
		return TMC_ERROR_MOTOR;
   1a10e:	2408      	movs	r4, #8
   1a110:	f7ff ba9a 	b.w	19648 <handleParameter+0x106>
	switch(type)
   1a114:	2404      	movs	r4, #4
   1a116:	f7ff ba97 	b.w	19648 <handleParameter+0x106>
   1a11a:	2404      	movs	r4, #4
   1a11c:	f7ff ba94 	b.w	19648 <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   1a120:	2404      	movs	r4, #4
   1a122:	f7ff ba91 	b.w	19648 <handleParameter+0x106>
   1a126:	2404      	movs	r4, #4
   1a128:	f7ff ba8e 	b.w	19648 <handleParameter+0x106>
   1a12c:	2404      	movs	r4, #4
   1a12e:	f7ff ba8b 	b.w	19648 <handleParameter+0x106>
   1a132:	2404      	movs	r4, #4
   1a134:	f7ff ba88 	b.w	19648 <handleParameter+0x106>
   1a138:	2404      	movs	r4, #4
   1a13a:	f7ff ba85 	b.w	19648 <handleParameter+0x106>
   1a13e:	2404      	movs	r4, #4
   1a140:	f7ff ba82 	b.w	19648 <handleParameter+0x106>
				errors |= TMC_ERROR_VALUE;
   1a144:	2410      	movs	r4, #16
   1a146:	f7ff ba7f 	b.w	19648 <handleParameter+0x106>
   1a14a:	2410      	movs	r4, #16
   1a14c:	f7ff ba7c 	b.w	19648 <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   1a150:	2404      	movs	r4, #4
   1a152:	f7ff ba79 	b.w	19648 <handleParameter+0x106>
   1a156:	bf00      	nop
   1a158:	000fffff 	.word	0x000fffff

0001a15c <SAP>:
{
   1a15c:	b507      	push	{r0, r1, r2, lr}
   1a15e:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   1a160:	ab01      	add	r3, sp, #4
   1a162:	4602      	mov	r2, r0
   1a164:	2001      	movs	r0, #1
   1a166:	f7ff f9ec 	bl	19542 <handleParameter>
}
   1a16a:	b003      	add	sp, #12
   1a16c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a170 <GAP>:
{
   1a170:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   1a172:	4602      	mov	r2, r0
   1a174:	2000      	movs	r0, #0
   1a176:	f7ff b9e4 	b.w	19542 <handleParameter>

0001a17a <tmc5160_readInt>:
	if(uart_mode)
   1a17a:	4b04      	ldr	r3, [pc, #16]	; (1a18c <tmc5160_readInt+0x12>)
   1a17c:	f893 32c5 	ldrb.w	r3, [r3, #709]	; 0x2c5
{
   1a180:	4608      	mov	r0, r1
	if(uart_mode)
   1a182:	b10b      	cbz	r3, 1a188 <tmc5160_readInt+0xe>
		r = readInt_uart(motor, address);
   1a184:	f7ff b872 	b.w	1926c <readInt_uart.isra.0>
		r = readInt_spi(motor, address);
   1a188:	f7fe bf08 	b.w	18f9c <readInt_spi.isra.0>
   1a18c:	1fff3f98 	.word	0x1fff3f98

0001a190 <TMC5160_init>:

void TMC5160_init(void)
{
   1a190:	b538      	push	{r3, r4, r5, lr}
	tmc5160_initConfig(&TMC5160);
   1a192:	4c54      	ldr	r4, [pc, #336]	; (1a2e4 <TMC5160_init+0x154>)
   1a194:	4620      	mov	r0, r4
   1a196:	f00a f845 	bl	24224 <tmc5160_initConfig>

	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1a19a:	4b53      	ldr	r3, [pc, #332]	; (1a2e8 <TMC5160_init+0x158>)
   1a19c:	68dd      	ldr	r5, [r3, #12]
   1a19e:	686b      	ldr	r3, [r5, #4]
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
   1a1a0:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1a1a4:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO2;
   1a1a8:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
   1a1ac:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO3;
   1a1b0:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   1a1b4:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.REFL_UC         = &HAL.IOs->pins->DIO6;
   1a1b8:	f503 7294 	add.w	r2, r3, #296	; 0x128
   1a1bc:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.REFR_UC         = &HAL.IOs->pins->DIO7;
   1a1c0:	f503 72a4 	add.w	r2, r3, #328	; 0x148
   1a1c4:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.SD_MODE         = &HAL.IOs->pins->DIO9;
   1a1c8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
   1a1cc:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
   1a1d0:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1a1d4:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
   1a1d8:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   1a1dc:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
   1a1e0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
   1a1e4:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0

	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1a1e8:	682b      	ldr	r3, [r5, #0]
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   1a1ea:	f8c4 22b4 	str.w	r2, [r4, #692]	; 0x2b4
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1a1ee:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1a1f0:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1a1f4:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SD_MODE);
   1a1f6:	682b      	ldr	r3, [r5, #0]
   1a1f8:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1a1fc:	68db      	ldr	r3, [r3, #12]
   1a1fe:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SPI_MODE);
   1a200:	682b      	ldr	r3, [r5, #0]
   1a202:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1a206:	68db      	ldr	r3, [r3, #12]
   1a208:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
   1a20a:	682b      	ldr	r3, [r5, #0]
   1a20c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   1a210:	695b      	ldr	r3, [r3, #20]
   1a212:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SD_MODE);
   1a214:	682b      	ldr	r3, [r5, #0]
   1a216:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1a21a:	699b      	ldr	r3, [r3, #24]
   1a21c:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.SPI_MODE);
   1a21e:	682b      	ldr	r3, [r5, #0]
   1a220:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1a224:	695b      	ldr	r3, [r3, #20]
   1a226:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.ENCN_DCO);
   1a228:	682b      	ldr	r3, [r5, #0]
   1a22a:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   1a22e:	691b      	ldr	r3, [r3, #16]
   1a230:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1a232:	682b      	ldr	r3, [r5, #0]
   1a234:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   1a238:	691b      	ldr	r3, [r3, #16]
   1a23a:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCA_DCIN_CFG5);
   1a23c:	682b      	ldr	r3, [r5, #0]
   1a23e:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   1a242:	691b      	ldr	r3, [r3, #16]
   1a244:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWN_DIAG0);
   1a246:	682b      	ldr	r3, [r5, #0]
   1a248:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   1a24c:	691b      	ldr	r3, [r3, #16]
   1a24e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWP_DIAG1);
   1a250:	682b      	ldr	r3, [r5, #0]
   1a252:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   1a256:	691b      	ldr	r3, [r3, #16]
   1a258:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFL_UC);
   1a25a:	682b      	ldr	r3, [r5, #0]
   1a25c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   1a260:	691b      	ldr	r3, [r3, #16]
   1a262:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   1a264:	682b      	ldr	r3, [r5, #0]
   1a266:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   1a26a:	691b      	ldr	r3, [r3, #16]
   1a26c:	4798      	blx	r3
	// Disable CLK output -> use internal 12 MHz clock
	// Switchable via user function
//	HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
//	HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);

	init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
   1a26e:	f894 02c5 	ldrb.w	r0, [r4, #709]	; 0x2c5
   1a272:	f7fe ff09 	bl	19088 <init_comm>

	TMC5160_config = Evalboards.ch1.config;
   1a276:	4b1d      	ldr	r3, [pc, #116]	; (1a2ec <TMC5160_init+0x15c>)

	Evalboards.ch1.config->reset        = reset;
   1a278:	491d      	ldr	r1, [pc, #116]	; (1a2f0 <TMC5160_init+0x160>)
	TMC5160_config = Evalboards.ch1.config;
   1a27a:	699a      	ldr	r2, [r3, #24]
   1a27c:	f8c4 22b8 	str.w	r2, [r4, #696]	; 0x2b8
	Evalboards.ch1.config->reset        = reset;
   1a280:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   1a284:	491b      	ldr	r1, [pc, #108]	; (1a2f4 <TMC5160_init+0x164>)
   1a286:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   1a28a:	2101      	movs	r1, #1
   1a28c:	8011      	strh	r1, [r2, #0]
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   1a28e:	4a1a      	ldr	r2, [pc, #104]	; (1a2f8 <TMC5160_init+0x168>)
   1a290:	625a      	str	r2, [r3, #36]	; 0x24
	Evalboards.ch1.right                = right;
   1a292:	4a1a      	ldr	r2, [pc, #104]	; (1a2fc <TMC5160_init+0x16c>)
   1a294:	621a      	str	r2, [r3, #32]
	Evalboards.ch1.left                 = left;
   1a296:	4a1a      	ldr	r2, [pc, #104]	; (1a300 <TMC5160_init+0x170>)
   1a298:	61da      	str	r2, [r3, #28]
	Evalboards.ch1.stop                 = stop;
   1a29a:	4a1a      	ldr	r2, [pc, #104]	; (1a304 <TMC5160_init+0x174>)
   1a29c:	629a      	str	r2, [r3, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   1a29e:	4a1a      	ldr	r2, [pc, #104]	; (1a308 <TMC5160_init+0x178>)
   1a2a0:	63da      	str	r2, [r3, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   1a2a2:	4a1a      	ldr	r2, [pc, #104]	; (1a30c <TMC5160_init+0x17c>)
   1a2a4:	639a      	str	r2, [r3, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   1a2a6:	4a1a      	ldr	r2, [pc, #104]	; (1a310 <TMC5160_init+0x180>)
   1a2a8:	62da      	str	r2, [r3, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   1a2aa:	4a1a      	ldr	r2, [pc, #104]	; (1a314 <TMC5160_init+0x184>)
   1a2ac:	631a      	str	r2, [r3, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   1a2ae:	4a1a      	ldr	r2, [pc, #104]	; (1a318 <TMC5160_init+0x188>)
   1a2b0:	64da      	str	r2, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   1a2b2:	4a1a      	ldr	r2, [pc, #104]	; (1a31c <TMC5160_init+0x18c>)
   1a2b4:	649a      	str	r2, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   1a2b6:	4a1a      	ldr	r2, [pc, #104]	; (1a320 <TMC5160_init+0x190>)
   1a2b8:	659a      	str	r2, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   1a2ba:	4a1a      	ldr	r2, [pc, #104]	; (1a324 <TMC5160_init+0x194>)
   1a2bc:	655a      	str	r2, [r3, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   1a2be:	4a1a      	ldr	r2, [pc, #104]	; (1a328 <TMC5160_init+0x198>)
   1a2c0:	651a      	str	r2, [r3, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   1a2c2:	4a1a      	ldr	r2, [pc, #104]	; (1a32c <TMC5160_init+0x19c>)
   1a2c4:	665a      	str	r2, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   1a2c6:	4a1a      	ldr	r2, [pc, #104]	; (1a330 <TMC5160_init+0x1a0>)
   1a2c8:	661a      	str	r2, [r3, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC5160_MOTORS;
   1a2ca:	7519      	strb	r1, [r3, #20]
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   1a2cc:	f44f 7225 	mov.w	r2, #660	; 0x294
   1a2d0:	2132      	movs	r1, #50	; 0x32
   1a2d2:	e9c3 2103 	strd	r2, r1, [r3, #12]
	Evalboards.ch1.deInit               = deInit;
   1a2d6:	4a17      	ldr	r2, [pc, #92]	; (1a334 <TMC5160_init+0x1a4>)
   1a2d8:	65da      	str	r2, [r3, #92]	; 0x5c

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1a2da:	2002      	movs	r0, #2
};
   1a2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1a2e0:	f7fe beb0 	b.w	19044 <enableDriver>
   1a2e4:	1fff3f98 	.word	0x1fff3f98
   1a2e8:	00029d1c 	.word	0x00029d1c
   1a2ec:	1fff5e88 	.word	0x1fff5e88
   1a2f0:	00019335 	.word	0x00019335
   1a2f4:	00018f8d 	.word	0x00018f8d
   1a2f8:	000194f3 	.word	0x000194f3
   1a2fc:	00019541 	.word	0x00019541
   1a300:	0001953d 	.word	0x0001953d
   1a304:	00019539 	.word	0x00019539
   1a308:	0001a171 	.word	0x0001a171
   1a30c:	0001a15d 	.word	0x0001a15d
   1a310:	0001948b 	.word	0x0001948b
   1a314:	000194d9 	.word	0x000194d9
   1a318:	00019485 	.word	0x00019485
   1a31c:	0001936d 	.word	0x0001936d
   1a320:	00018f79 	.word	0x00018f79
   1a324:	000190d5 	.word	0x000190d5
   1a328:	00018ec1 	.word	0x00018ec1
   1a32c:	00019045 	.word	0x00019045
   1a330:	00018ed5 	.word	0x00018ed5
   1a334:	00018ee1 	.word	0x00018ee1

0001a338 <getMeasuredSpeed>:
	return handleParameter(READ, motor, type, value);
}

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	if(motor >= TMC5161_MOTORS)
   1a338:	b918      	cbnz	r0, 1a342 <getMeasuredSpeed+0xa>
		return TMC_ERROR_MOTOR;

	*value = TMC5161.velocity;
   1a33a:	4b03      	ldr	r3, [pc, #12]	; (1a348 <getMeasuredSpeed+0x10>)
   1a33c:	685b      	ldr	r3, [r3, #4]
   1a33e:	600b      	str	r3, [r1, #0]

	return TMC_ERROR_NONE;
   1a340:	4770      	bx	lr
		return TMC_ERROR_MOTOR;
   1a342:	2008      	movs	r0, #8
}
   1a344:	4770      	bx	lr
   1a346:	bf00      	nop
   1a348:	1fff426c 	.word	0x1fff426c

0001a34c <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   1a34c:	4b01      	ldr	r3, [pc, #4]	; (1a354 <checkErrors+0x8>)
   1a34e:	2200      	movs	r2, #0
   1a350:	609a      	str	r2, [r3, #8]
}
   1a352:	4770      	bx	lr
   1a354:	1fff5e88 	.word	0x1fff5e88

0001a358 <userFunction>:
	uint32_t buffer;
	uint32_t errors = 0;

	UNUSED(motor);

	switch(type)
   1a358:	2806      	cmp	r0, #6
{
   1a35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a35c:	460c      	mov	r4, r1
   1a35e:	4615      	mov	r5, r2
	switch(type)
   1a360:	d807      	bhi.n	1a372 <userFunction+0x1a>
   1a362:	2806      	cmp	r0, #6
   1a364:	d808      	bhi.n	1a378 <userFunction+0x20>
   1a366:	e8df f000 	tbb	[pc, r0]
   1a36a:	0709      	.short	0x0709
   1a36c:	7c5b4533 	.word	0x7c5b4533
   1a370:	89          	.byte	0x89
   1a371:	00          	.byte	0x00
   1a372:	28fc      	cmp	r0, #252	; 0xfc
   1a374:	f000 808a 	beq.w	1a48c <userFunction+0x134>
   1a378:	2404      	movs	r4, #4
   1a37a:	e018      	b.n	1a3ae <userFunction+0x56>
	case 0:  // simulate reference switches, set high to support external ref swiches
		/*
		 * The the TMC5161 ref switch input is pulled high by external resistor an can be pulled low either by
		 * this µC or external signal. To use external signal make sure the signals from µC are high or floating.
		 */
		if(!(*value & ~3))
   1a37c:	682a      	ldr	r2, [r5, #0]
   1a37e:	f032 0303 	bics.w	r3, r2, #3
   1a382:	f040 8094 	bne.w	1a4ae <userFunction+0x156>
		{
			if(*value & (1<<0))
   1a386:	4b4b      	ldr	r3, [pc, #300]	; (1a4b4 <userFunction+0x15c>)
   1a388:	4e4b      	ldr	r6, [pc, #300]	; (1a4b8 <userFunction+0x160>)
   1a38a:	68df      	ldr	r7, [r3, #12]
   1a38c:	f8d6 0294 	ldr.w	r0, [r6, #660]	; 0x294
   1a390:	683b      	ldr	r3, [r7, #0]
   1a392:	07d2      	lsls	r2, r2, #31
   1a394:	d50d      	bpl.n	1a3b2 <userFunction+0x5a>
			{
				HAL.IOs->config->toInput(Pins.REFR_UC); // pull up -> set it to floating causes high
   1a396:	691b      	ldr	r3, [r3, #16]
			}
			else
			{
				HAL.IOs->config->toOutput(Pins.REFR_UC);
				HAL.IOs->config->setLow(Pins.REFR_UC);
   1a398:	4798      	blx	r3
			}

			if(*value & (1<<1))
   1a39a:	682c      	ldr	r4, [r5, #0]
   1a39c:	683b      	ldr	r3, [r7, #0]
   1a39e:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
   1a3a2:	f014 0402 	ands.w	r4, r4, #2
   1a3a6:	d00b      	beq.n	1a3c0 <userFunction+0x68>
			{
				HAL.IOs->config->toInput(Pins.REFL_UC); // pull up -> set it to floating causes high
   1a3a8:	691b      	ldr	r3, [r3, #16]
		 * Internel clock will be enabled by calling this function with a *value != 0 and unpower and repower the motor supply while keeping usb connected.
		 */
		if(*value)
		{
			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   1a3aa:	4798      	blx	r3
	uint32_t errors = 0;
   1a3ac:	2400      	movs	r4, #0
	default:
		errors |= TMC_ERROR_TYPE;
		break;
	}
	return errors;
}
   1a3ae:	4620      	mov	r0, r4
   1a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				HAL.IOs->config->toOutput(Pins.REFR_UC);
   1a3b2:	68db      	ldr	r3, [r3, #12]
   1a3b4:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFR_UC);
   1a3b6:	683b      	ldr	r3, [r7, #0]
   1a3b8:	f8d6 0294 	ldr.w	r0, [r6, #660]	; 0x294
   1a3bc:	699b      	ldr	r3, [r3, #24]
   1a3be:	e7eb      	b.n	1a398 <userFunction+0x40>
				HAL.IOs->config->toOutput(Pins.REFL_UC);
   1a3c0:	68db      	ldr	r3, [r3, #12]
   1a3c2:	4798      	blx	r3
				HAL.IOs->config->setLow(Pins.REFL_UC);
   1a3c4:	683b      	ldr	r3, [r7, #0]
   1a3c6:	f8d6 0290 	ldr.w	r0, [r6, #656]	; 0x290
   1a3ca:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1a3cc:	4798      	blx	r3
   1a3ce:	e7ee      	b.n	1a3ae <userFunction+0x56>
		if(*value)
   1a3d0:	4b38      	ldr	r3, [pc, #224]	; (1a4b4 <userFunction+0x15c>)
   1a3d2:	682c      	ldr	r4, [r5, #0]
   1a3d4:	68de      	ldr	r6, [r3, #12]
   1a3d6:	e9d6 3000 	ldrd	r3, r0, [r6]
   1a3da:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1a3de:	b13c      	cbz	r4, 1a3f0 <userFunction+0x98>
			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
   1a3e0:	68db      	ldr	r3, [r3, #12]
   1a3e2:	4798      	blx	r3
			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
   1a3e4:	e9d6 3000 	ldrd	r3, r0, [r6]
   1a3e8:	699b      	ldr	r3, [r3, #24]
   1a3ea:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1a3ee:	e7dc      	b.n	1a3aa <userFunction+0x52>
			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
   1a3f0:	689b      	ldr	r3, [r3, #8]
   1a3f2:	e7eb      	b.n	1a3cc <userFunction+0x74>
		if(motor)
   1a3f4:	4b30      	ldr	r3, [pc, #192]	; (1a4b8 <userFunction+0x160>)
   1a3f6:	f8d3 02a8 	ldr.w	r0, [r3, #680]	; 0x2a8
   1a3fa:	4b2e      	ldr	r3, [pc, #184]	; (1a4b4 <userFunction+0x15c>)
   1a3fc:	68db      	ldr	r3, [r3, #12]
   1a3fe:	681b      	ldr	r3, [r3, #0]
   1a400:	b139      	cbz	r1, 1a412 <userFunction+0xba>
			if(*value & 0x00000001)
   1a402:	682c      	ldr	r4, [r5, #0]
   1a404:	f014 0401 	ands.w	r4, r4, #1
   1a408:	d001      	beq.n	1a40e <userFunction+0xb6>
				HAL.IOs->config->setHigh(Pins.SD_MODE);
   1a40a:	695b      	ldr	r3, [r3, #20]
   1a40c:	e7cd      	b.n	1a3aa <userFunction+0x52>
				HAL.IOs->config->setLow(Pins.SD_MODE);
   1a40e:	699b      	ldr	r3, [r3, #24]
   1a410:	e7dc      	b.n	1a3cc <userFunction+0x74>
			*value = (HAL.IOs->config->isHigh(Pins.SD_MODE))? 1:0;
   1a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a414:	4798      	blx	r3
   1a416:	3800      	subs	r0, #0
   1a418:	bf18      	it	ne
   1a41a:	2001      	movne	r0, #1
   1a41c:	6028      	str	r0, [r5, #0]
   1a41e:	e7c6      	b.n	1a3ae <userFunction+0x56>
		switch(buffer = *value)
   1a420:	4b24      	ldr	r3, [pc, #144]	; (1a4b4 <userFunction+0x15c>)
   1a422:	4e25      	ldr	r6, [pc, #148]	; (1a4b8 <userFunction+0x160>)
   1a424:	68df      	ldr	r7, [r3, #12]
   1a426:	682c      	ldr	r4, [r5, #0]
   1a428:	683b      	ldr	r3, [r7, #0]
   1a42a:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1a42e:	b154      	cbz	r4, 1a446 <userFunction+0xee>
   1a430:	2c01      	cmp	r4, #1
   1a432:	d011      	beq.n	1a458 <userFunction+0x100>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1a434:	691b      	ldr	r3, [r3, #16]
   1a436:	4798      	blx	r3
			buffer = HAL.IOs->config->isHigh(Pins.ENCB_DCEN_CFG4);;
   1a438:	683b      	ldr	r3, [r7, #0]
   1a43a:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a440:	4798      	blx	r3
   1a442:	4604      	mov	r4, r0
			break;
   1a444:	e006      	b.n	1a454 <userFunction+0xfc>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   1a446:	68db      	ldr	r3, [r3, #12]
   1a448:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   1a44a:	683b      	ldr	r3, [r7, #0]
   1a44c:	699b      	ldr	r3, [r3, #24]
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   1a44e:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1a452:	4798      	blx	r3
		*value = buffer;
   1a454:	602c      	str	r4, [r5, #0]
		break;
   1a456:	e7a9      	b.n	1a3ac <userFunction+0x54>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   1a458:	68db      	ldr	r3, [r3, #12]
   1a45a:	4798      	blx	r3
			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
   1a45c:	683b      	ldr	r3, [r7, #0]
   1a45e:	695b      	ldr	r3, [r3, #20]
   1a460:	e7f5      	b.n	1a44e <userFunction+0xf6>
		*value = (HAL.IOs->config->isHigh(Pins.SWN_DIAG0))? 1:0;
   1a462:	4b14      	ldr	r3, [pc, #80]	; (1a4b4 <userFunction+0x15c>)
   1a464:	4a14      	ldr	r2, [pc, #80]	; (1a4b8 <userFunction+0x160>)
   1a466:	68db      	ldr	r3, [r3, #12]
   1a468:	f8d2 02b0 	ldr.w	r0, [r2, #688]	; 0x2b0
   1a46c:	681b      	ldr	r3, [r3, #0]
   1a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1:0;
   1a470:	4798      	blx	r3
   1a472:	3800      	subs	r0, #0
   1a474:	bf18      	it	ne
   1a476:	2001      	movne	r0, #1
   1a478:	6028      	str	r0, [r5, #0]
		break;
   1a47a:	e797      	b.n	1a3ac <userFunction+0x54>
		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1:0;
   1a47c:	4b0d      	ldr	r3, [pc, #52]	; (1a4b4 <userFunction+0x15c>)
   1a47e:	4a0e      	ldr	r2, [pc, #56]	; (1a4b8 <userFunction+0x160>)
   1a480:	68db      	ldr	r3, [r3, #12]
   1a482:	f8d2 02b4 	ldr.w	r0, [r2, #692]	; 0x2b4
   1a486:	681b      	ldr	r3, [r3, #0]
   1a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a48a:	e7f1      	b.n	1a470 <userFunction+0x118>
		if(*value)
   1a48c:	4b09      	ldr	r3, [pc, #36]	; (1a4b4 <userFunction+0x15c>)
   1a48e:	4e0a      	ldr	r6, [pc, #40]	; (1a4b8 <userFunction+0x160>)
   1a490:	68df      	ldr	r7, [r3, #12]
   1a492:	6814      	ldr	r4, [r2, #0]
   1a494:	683b      	ldr	r3, [r7, #0]
   1a496:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1a49a:	b134      	cbz	r4, 1a4aa <userFunction+0x152>
			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
   1a49c:	68db      	ldr	r3, [r3, #12]
   1a49e:	4798      	blx	r3
			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
   1a4a0:	683b      	ldr	r3, [r7, #0]
   1a4a2:	f8d6 02a0 	ldr.w	r0, [r6, #672]	; 0x2a0
   1a4a6:	699b      	ldr	r3, [r3, #24]
   1a4a8:	e77f      	b.n	1a3aa <userFunction+0x52>
			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1a4aa:	691b      	ldr	r3, [r3, #16]
   1a4ac:	e78e      	b.n	1a3cc <userFunction+0x74>
			errors |= TMC_ERROR_VALUE;
   1a4ae:	2410      	movs	r4, #16
	return errors;
   1a4b0:	e77d      	b.n	1a3ae <userFunction+0x56>
   1a4b2:	bf00      	nop
   1a4b4:	00029d1c 	.word	0x00029d1c
   1a4b8:	1fff426c 	.word	0x1fff426c

0001a4bc <deInit>:

static void deInit(void)
{
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   1a4bc:	4b23      	ldr	r3, [pc, #140]	; (1a54c <deInit+0x90>)
{
   1a4be:	b570      	push	{r4, r5, r6, lr}
	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   1a4c0:	68dd      	ldr	r5, [r3, #12]
   1a4c2:	4c23      	ldr	r4, [pc, #140]	; (1a550 <deInit+0x94>)
   1a4c4:	682b      	ldr	r3, [r5, #0]
   1a4c6:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   1a4ca:	699b      	ldr	r3, [r3, #24]
   1a4cc:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SD_MODE);
   1a4ce:	682b      	ldr	r3, [r5, #0]
   1a4d0:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1a4d4:	699b      	ldr	r3, [r3, #24]
   1a4d6:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SPI_MODE);
   1a4d8:	682b      	ldr	r3, [r5, #0]
   1a4da:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1a4de:	699b      	ldr	r3, [r3, #24]
   1a4e0:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
   1a4e2:	682b      	ldr	r3, [r5, #0]
   1a4e4:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   1a4e8:	689b      	ldr	r3, [r3, #8]
   1a4ea:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
   1a4ec:	682b      	ldr	r3, [r5, #0]
   1a4ee:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   1a4f2:	689b      	ldr	r3, [r3, #8]
   1a4f4:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.ENCN_DCO);
   1a4f6:	682b      	ldr	r3, [r5, #0]
   1a4f8:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   1a4fc:	689b      	ldr	r3, [r3, #8]
   1a4fe:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFL_UC);
   1a500:	682b      	ldr	r3, [r5, #0]
   1a502:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   1a506:	689b      	ldr	r3, [r3, #8]
   1a508:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.REFR_UC);
   1a50a:	682b      	ldr	r3, [r5, #0]
   1a50c:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   1a510:	689b      	ldr	r3, [r3, #8]
   1a512:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWN_DIAG0);
   1a514:	682b      	ldr	r3, [r5, #0]
   1a516:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   1a51a:	689b      	ldr	r3, [r3, #8]
   1a51c:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SWP_DIAG1);
   1a51e:	682b      	ldr	r3, [r5, #0]
   1a520:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   1a524:	689b      	ldr	r3, [r3, #8]
   1a526:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
   1a528:	682b      	ldr	r3, [r5, #0]
   1a52a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   1a52e:	689b      	ldr	r3, [r3, #8]
   1a530:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SD_MODE);
   1a532:	682b      	ldr	r3, [r5, #0]
   1a534:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1a538:	689b      	ldr	r3, [r3, #8]
   1a53a:	4798      	blx	r3
	HAL.IOs->config->reset(Pins.SPI_MODE);
   1a53c:	682b      	ldr	r3, [r5, #0]
   1a53e:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1a542:	689b      	ldr	r3, [r3, #8]
};
   1a544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.IOs->config->reset(Pins.SPI_MODE);
   1a548:	4718      	bx	r3
   1a54a:	bf00      	nop
   1a54c:	00029d1c 	.word	0x00029d1c
   1a550:	1fff426c 	.word	0x1fff426c

0001a554 <periodicJob>:
{
   1a554:	4601      	mov	r1, r0
	tmc5161_periodicJob(&TMC5161, tick);
   1a556:	4801      	ldr	r0, [pc, #4]	; (1a55c <periodicJob+0x8>)
   1a558:	f009 bf68 	b.w	2442c <tmc5161_periodicJob>
   1a55c:	1fff426c 	.word	0x1fff426c

0001a560 <readRegister>:
{
   1a560:	b510      	push	{r4, lr}
	*value = tmc5161_readInt(&TMC5161, address);
   1a562:	4803      	ldr	r0, [pc, #12]	; (1a570 <readRegister+0x10>)
{
   1a564:	4614      	mov	r4, r2
	*value = tmc5161_readInt(&TMC5161, address);
   1a566:	f009 ff1c 	bl	243a2 <tmc5161_readInt>
   1a56a:	6020      	str	r0, [r4, #0]
}
   1a56c:	bd10      	pop	{r4, pc}
   1a56e:	bf00      	nop
   1a570:	1fff426c 	.word	0x1fff426c

0001a574 <writeRegister>:
	tmc5161_writeInt(&TMC5161, address, value);
   1a574:	4801      	ldr	r0, [pc, #4]	; (1a57c <writeRegister+0x8>)
   1a576:	f009 bf06 	b.w	24386 <tmc5161_writeInt>
   1a57a:	bf00      	nop
   1a57c:	1fff426c 	.word	0x1fff426c

0001a580 <handleParameter>:
{
   1a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a582:	4606      	mov	r6, r0
   1a584:	461d      	mov	r5, r3
	if(motor >= TMC5161_MOTORS)
   1a586:	2900      	cmp	r1, #0
   1a588:	f040 8627 	bne.w	1b1da <handleParameter+0xc5a>
	switch(type)
   1a58c:	2a22      	cmp	r2, #34	; 0x22
   1a58e:	d874      	bhi.n	1a67a <handleParameter+0xfa>
   1a590:	2a22      	cmp	r2, #34	; 0x22
   1a592:	f200 8628 	bhi.w	1b1e6 <handleParameter+0xc66>
   1a596:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a59a:	0078      	.short	0x0078
   1a59c:	00960087 	.word	0x00960087
   1a5a0:	00b800a8 	.word	0x00b800a8
   1a5a4:	00e300d4 	.word	0x00e300d4
   1a5a8:	011400fc 	.word	0x011400fc
   1a5ac:	01200626 	.word	0x01200626
   1a5b0:	013c012f 	.word	0x013c012f
   1a5b4:	016d0155 	.word	0x016d0155
   1a5b8:	018b017c 	.word	0x018b017c
   1a5bc:	01a9019a 	.word	0x01a9019a
   1a5c0:	01c701b8 	.word	0x01c701b8
   1a5c4:	062601d8 	.word	0x062601d8
   1a5c8:	020c01e7 	.word	0x020c01e7
   1a5cc:	06260626 	.word	0x06260626
   1a5d0:	0234021b 	.word	0x0234021b
   1a5d4:	0626024d 	.word	0x0626024d
   1a5d8:	06260626 	.word	0x06260626
   1a5dc:	026f0255 	.word	0x026f0255
   1a5e0:	3a8c      	subs	r2, #140	; 0x8c
   1a5e2:	2a46      	cmp	r2, #70	; 0x46
   1a5e4:	f200 85fc 	bhi.w	1b1e0 <handleParameter+0xc60>
   1a5e8:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a5ec:	05fa0261 	.word	0x05fa0261
   1a5f0:	05fa05fa 	.word	0x05fa05fa
   1a5f4:	05fa05fa 	.word	0x05fa05fa
   1a5f8:	05fa05fa 	.word	0x05fa05fa
   1a5fc:	05fa05fa 	.word	0x05fa05fa
   1a600:	05fa05fa 	.word	0x05fa05fa
   1a604:	05fa05fa 	.word	0x05fa05fa
   1a608:	05fa05fa 	.word	0x05fa05fa
   1a60c:	05fa05fa 	.word	0x05fa05fa
   1a610:	05fa05fa 	.word	0x05fa05fa
   1a614:	05fa05fa 	.word	0x05fa05fa
   1a618:	02c802af 	.word	0x02c802af
   1a61c:	02fe02e1 	.word	0x02fe02e1
   1a620:	0388034f 	.word	0x0388034f
   1a624:	03b803a0 	.word	0x03b803a0
   1a628:	03ea03d1 	.word	0x03ea03d1
   1a62c:	041b0403 	.word	0x041b0403
   1a630:	05fa0434 	.word	0x05fa0434
   1a634:	05fa05fa 	.word	0x05fa05fa
   1a638:	05fa05fa 	.word	0x05fa05fa
   1a63c:	04640455 	.word	0x04640455
   1a640:	05fa04a4 	.word	0x05fa04a4
   1a644:	04e604cb 	.word	0x04e604cb
   1a648:	05280501 	.word	0x05280501
   1a64c:	05fa0551 	.word	0x05fa0551
   1a650:	056805fa 	.word	0x056805fa
   1a654:	05fa0589 	.word	0x05fa0589
   1a658:	05fa05fa 	.word	0x05fa05fa
   1a65c:	05fa05fa 	.word	0x05fa05fa
   1a660:	05fa05fa 	.word	0x05fa05fa
   1a664:	05fa05fa 	.word	0x05fa05fa
   1a668:	05fa05fa 	.word	0x05fa05fa
   1a66c:	05fa05a9 	.word	0x05fa05a9
   1a670:	05fa05c4 	.word	0x05fa05c4
   1a674:	05d005fa 	.word	0x05d005fa
   1a678:	05e6      	.short	0x05e6
   1a67a:	f102 0374 	add.w	r3, r2, #116	; 0x74
   1a67e:	b2db      	uxtb	r3, r3
   1a680:	2b46      	cmp	r3, #70	; 0x46
   1a682:	d9ad      	bls.n	1a5e0 <handleParameter+0x60>
   1a684:	2404      	movs	r4, #4
}
   1a686:	4620      	mov	r0, r4
   1a688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(readWrite == READ) {
   1a68a:	b930      	cbnz	r0, 1a69a <handleParameter+0x11a>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XTARGET);
   1a68c:	48aa      	ldr	r0, [pc, #680]	; (1a938 <handleParameter+0x3b8>)
   1a68e:	212d      	movs	r1, #45	; 0x2d
   1a690:	f009 fe87 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a694:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XTARGET);
   1a696:	6028      	str	r0, [r5, #0]
   1a698:	e7f5      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_XTARGET, *value);
   1a69a:	682a      	ldr	r2, [r5, #0]
   1a69c:	48a6      	ldr	r0, [pc, #664]	; (1a938 <handleParameter+0x3b8>)
   1a69e:	212d      	movs	r1, #45	; 0x2d
   1a6a0:	f009 fe71 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a6a4:	2400      	movs	r4, #0
   1a6a6:	e7ee      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a6a8:	b930      	cbnz	r0, 1a6b8 <handleParameter+0x138>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XACTUAL);
   1a6aa:	48a3      	ldr	r0, [pc, #652]	; (1a938 <handleParameter+0x3b8>)
   1a6ac:	2121      	movs	r1, #33	; 0x21
   1a6ae:	f009 fe78 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a6b2:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XACTUAL);
   1a6b4:	6028      	str	r0, [r5, #0]
   1a6b6:	e7e6      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_XACTUAL, *value);
   1a6b8:	682a      	ldr	r2, [r5, #0]
   1a6ba:	489f      	ldr	r0, [pc, #636]	; (1a938 <handleParameter+0x3b8>)
   1a6bc:	2121      	movs	r1, #33	; 0x21
   1a6be:	f009 fe62 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a6c2:	2400      	movs	r4, #0
   1a6c4:	e7df      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a6c6:	b930      	cbnz	r0, 1a6d6 <handleParameter+0x156>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VMAX);
   1a6c8:	489b      	ldr	r0, [pc, #620]	; (1a938 <handleParameter+0x3b8>)
   1a6ca:	2127      	movs	r1, #39	; 0x27
   1a6cc:	f009 fe69 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a6d0:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VMAX);
   1a6d2:	6028      	str	r0, [r5, #0]
   1a6d4:	e7d7      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_VMAX, abs(*value));
   1a6d6:	682a      	ldr	r2, [r5, #0]
   1a6d8:	4897      	ldr	r0, [pc, #604]	; (1a938 <handleParameter+0x3b8>)
   1a6da:	2a00      	cmp	r2, #0
   1a6dc:	bfb8      	it	lt
   1a6de:	4252      	neglt	r2, r2
   1a6e0:	2127      	movs	r1, #39	; 0x27
   1a6e2:	f009 fe50 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a6e6:	2400      	movs	r4, #0
   1a6e8:	e7cd      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a6ea:	2800      	cmp	r0, #0
   1a6ec:	f040 857e 	bne.w	1b1ec <handleParameter+0xc6c>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VACTUAL);
   1a6f0:	4891      	ldr	r0, [pc, #580]	; (1a938 <handleParameter+0x3b8>)
   1a6f2:	2122      	movs	r1, #34	; 0x22
   1a6f4:	f009 fe55 	bl	243a2 <tmc5161_readInt>
			*value = CAST_Sn_TO_S32(*value, 24);
   1a6f8:	f410 0300 	ands.w	r3, r0, #8388608	; 0x800000
   1a6fc:	bf18      	it	ne
   1a6fe:	f04f 437f 	movne.w	r3, #4278190080	; 0xff000000
   1a702:	4318      	orrs	r0, r3
   1a704:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a706:	4634      	mov	r4, r6
   1a708:	e7bd      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a70a:	4f8b      	ldr	r7, [pc, #556]	; (1a938 <handleParameter+0x3b8>)
   1a70c:	b920      	cbnz	r0, 1a718 <handleParameter+0x198>
			*value = vmax_position;
   1a70e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
   1a712:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a714:	4604      	mov	r4, r0
   1a716:	e7b6      	b.n	1a686 <handleParameter+0x106>
			vmax_position = abs(*value);
   1a718:	682b      	ldr	r3, [r5, #0]
   1a71a:	2b00      	cmp	r3, #0
   1a71c:	bfb8      	it	lt
   1a71e:	425b      	neglt	r3, r3
			if(tmc5161_readInt(motorToIC(motor), TMC5161_RAMPMODE) == TMC5161_MODE_POSITION)
   1a720:	2120      	movs	r1, #32
   1a722:	4638      	mov	r0, r7
			vmax_position = abs(*value);
   1a724:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
			if(tmc5161_readInt(motorToIC(motor), TMC5161_RAMPMODE) == TMC5161_MODE_POSITION)
   1a728:	f009 fe3b 	bl	243a2 <tmc5161_readInt>
   1a72c:	4604      	mov	r4, r0
   1a72e:	b108      	cbz	r0, 1a734 <handleParameter+0x1b4>
	uint32_t errors = TMC_ERROR_NONE;
   1a730:	2400      	movs	r4, #0
   1a732:	e7a8      	b.n	1a686 <handleParameter+0x106>
				tmc5161_writeInt(motorToIC(motor), TMC5161_VMAX, vmax_position);
   1a734:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
   1a738:	2127      	movs	r1, #39	; 0x27
   1a73a:	4638      	mov	r0, r7
   1a73c:	f009 fe23 	bl	24386 <tmc5161_writeInt>
   1a740:	e7a1      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a742:	b930      	cbnz	r0, 1a752 <handleParameter+0x1d2>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_AMAX);
   1a744:	487c      	ldr	r0, [pc, #496]	; (1a938 <handleParameter+0x3b8>)
   1a746:	2126      	movs	r1, #38	; 0x26
   1a748:	f009 fe2b 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a74c:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_AMAX);
   1a74e:	6028      	str	r0, [r5, #0]
   1a750:	e799      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_AMAX, *value);
   1a752:	682a      	ldr	r2, [r5, #0]
   1a754:	4878      	ldr	r0, [pc, #480]	; (1a938 <handleParameter+0x3b8>)
   1a756:	2126      	movs	r1, #38	; 0x26
   1a758:	f009 fe15 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a75c:	2400      	movs	r4, #0
   1a75e:	e792      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IRUN_MASK, TMC5161_IRUN_SHIFT);
   1a760:	4875      	ldr	r0, [pc, #468]	; (1a938 <handleParameter+0x3b8>)
   1a762:	2110      	movs	r1, #16
		if(readWrite == READ) {
   1a764:	b936      	cbnz	r6, 1a774 <handleParameter+0x1f4>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IRUN_MASK, TMC5161_IRUN_SHIFT);
   1a766:	f009 fe1c 	bl	243a2 <tmc5161_readInt>
   1a76a:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1a76e:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a770:	4634      	mov	r4, r6
   1a772:	e788      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IRUN_MASK, TMC5161_IRUN_SHIFT, *value);
   1a774:	f009 fe15 	bl	243a2 <tmc5161_readInt>
   1a778:	682b      	ldr	r3, [r5, #0]
   1a77a:	021b      	lsls	r3, r3, #8
   1a77c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   1a780:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
   1a784:	431a      	orrs	r2, r3
   1a786:	486c      	ldr	r0, [pc, #432]	; (1a938 <handleParameter+0x3b8>)
   1a788:	2110      	movs	r1, #16
   1a78a:	f009 fdfc 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a78e:	2400      	movs	r4, #0
   1a790:	e779      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IHOLD_MASK, TMC5161_IHOLD_SHIFT);
   1a792:	4869      	ldr	r0, [pc, #420]	; (1a938 <handleParameter+0x3b8>)
   1a794:	2110      	movs	r1, #16
		if(readWrite == READ) {
   1a796:	b936      	cbnz	r6, 1a7a6 <handleParameter+0x226>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IHOLD_MASK, TMC5161_IHOLD_SHIFT);
   1a798:	f009 fe03 	bl	243a2 <tmc5161_readInt>
   1a79c:	f000 001f 	and.w	r0, r0, #31
   1a7a0:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a7a2:	4634      	mov	r4, r6
   1a7a4:	e76f      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_IHOLD_IRUN, TMC5161_IHOLD_MASK, TMC5161_IHOLD_SHIFT, *value);
   1a7a6:	f009 fdfc 	bl	243a2 <tmc5161_readInt>
   1a7aa:	682a      	ldr	r2, [r5, #0]
   1a7ac:	f020 001f 	bic.w	r0, r0, #31
   1a7b0:	f002 021f 	and.w	r2, r2, #31
   1a7b4:	4302      	orrs	r2, r0
   1a7b6:	2110      	movs	r1, #16
   1a7b8:	485f      	ldr	r0, [pc, #380]	; (1a938 <handleParameter+0x3b8>)
   1a7ba:	f009 fde4 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a7be:	2400      	movs	r4, #0
   1a7c0:	e761      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a7c2:	2800      	cmp	r0, #0
   1a7c4:	f040 8515 	bne.w	1b1f2 <handleParameter+0xc72>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_RAMPSTAT, TMC5161_POSITION_REACHED_MASK, TMC5161_POSITION_REACHED_SHIFT);
   1a7c8:	485b      	ldr	r0, [pc, #364]	; (1a938 <handleParameter+0x3b8>)
   1a7ca:	2135      	movs	r1, #53	; 0x35
   1a7cc:	f009 fde9 	bl	243a2 <tmc5161_readInt>
   1a7d0:	f3c0 2040 	ubfx	r0, r0, #9, #1
   1a7d4:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a7d6:	4634      	mov	r4, r6
   1a7d8:	e755      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a7da:	2800      	cmp	r0, #0
   1a7dc:	f040 850c 	bne.w	1b1f8 <handleParameter+0xc78>
			*value = !TMC5161_FIELD_READ(motorToIC(motor), TMC5161_RAMPSTAT, TMC5161_STATUS_STOP_R_MASK, TMC5161_STATUS_STOP_R_SHIFT);
   1a7e0:	4855      	ldr	r0, [pc, #340]	; (1a938 <handleParameter+0x3b8>)
   1a7e2:	2135      	movs	r1, #53	; 0x35
   1a7e4:	f009 fddd 	bl	243a2 <tmc5161_readInt>
   1a7e8:	f010 0f02 	tst.w	r0, #2
   1a7ec:	bf0c      	ite	eq
   1a7ee:	2301      	moveq	r3, #1
   1a7f0:	2300      	movne	r3, #0
   1a7f2:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a7f4:	4634      	mov	r4, r6
   1a7f6:	e746      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a7f8:	2800      	cmp	r0, #0
   1a7fa:	f040 8500 	bne.w	1b1fe <handleParameter+0xc7e>
			*value = !TMC5161_FIELD_READ(motorToIC(motor), TMC5161_RAMPSTAT, TMC5161_STATUS_STOP_L_MASK, TMC5161_STATUS_STOP_L_SHIFT);
   1a7fe:	484e      	ldr	r0, [pc, #312]	; (1a938 <handleParameter+0x3b8>)
   1a800:	2135      	movs	r1, #53	; 0x35
   1a802:	f009 fdce 	bl	243a2 <tmc5161_readInt>
   1a806:	43c0      	mvns	r0, r0
   1a808:	f000 0001 	and.w	r0, r0, #1
   1a80c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a80e:	4634      	mov	r4, r6
   1a810:	e739      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_R_ENABLE_MASK, TMC5161_STOP_R_ENABLE_SHIFT);
   1a812:	4849      	ldr	r0, [pc, #292]	; (1a938 <handleParameter+0x3b8>)
   1a814:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ) {
   1a816:	b936      	cbnz	r6, 1a826 <handleParameter+0x2a6>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_R_ENABLE_MASK, TMC5161_STOP_R_ENABLE_SHIFT);
   1a818:	f009 fdc3 	bl	243a2 <tmc5161_readInt>
   1a81c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1a820:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a822:	4634      	mov	r4, r6
   1a824:	e72f      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_R_ENABLE_MASK, TMC5161_STOP_R_ENABLE_SHIFT, *value);
   1a826:	f009 fdbc 	bl	243a2 <tmc5161_readInt>
   1a82a:	682b      	ldr	r3, [r5, #0]
   1a82c:	005b      	lsls	r3, r3, #1
   1a82e:	f003 0302 	and.w	r3, r3, #2
   1a832:	f020 0202 	bic.w	r2, r0, #2
   1a836:	431a      	orrs	r2, r3
   1a838:	483f      	ldr	r0, [pc, #252]	; (1a938 <handleParameter+0x3b8>)
   1a83a:	2134      	movs	r1, #52	; 0x34
   1a83c:	f009 fda3 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a840:	2400      	movs	r4, #0
   1a842:	e720      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_L_ENABLE_MASK, TMC5161_STOP_L_ENABLE_SHIFT);
   1a844:	483c      	ldr	r0, [pc, #240]	; (1a938 <handleParameter+0x3b8>)
   1a846:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ) {
   1a848:	b936      	cbnz	r6, 1a858 <handleParameter+0x2d8>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_L_ENABLE_MASK, TMC5161_STOP_L_ENABLE_SHIFT);
   1a84a:	f009 fdaa 	bl	243a2 <tmc5161_readInt>
   1a84e:	f000 0001 	and.w	r0, r0, #1
   1a852:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a854:	4634      	mov	r4, r6
   1a856:	e716      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_SWMODE, TMC5161_STOP_L_ENABLE_MASK, TMC5161_STOP_L_ENABLE_SHIFT, *value);
   1a858:	f009 fda3 	bl	243a2 <tmc5161_readInt>
   1a85c:	682a      	ldr	r2, [r5, #0]
   1a85e:	f020 0001 	bic.w	r0, r0, #1
   1a862:	f002 0201 	and.w	r2, r2, #1
   1a866:	4302      	orrs	r2, r0
   1a868:	2134      	movs	r1, #52	; 0x34
   1a86a:	4833      	ldr	r0, [pc, #204]	; (1a938 <handleParameter+0x3b8>)
   1a86c:	f009 fd8b 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a870:	2400      	movs	r4, #0
   1a872:	e708      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a874:	b930      	cbnz	r0, 1a884 <handleParameter+0x304>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_SWMODE);
   1a876:	4830      	ldr	r0, [pc, #192]	; (1a938 <handleParameter+0x3b8>)
   1a878:	2134      	movs	r1, #52	; 0x34
   1a87a:	f009 fd92 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a87e:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_SWMODE);
   1a880:	6028      	str	r0, [r5, #0]
   1a882:	e700      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_SWMODE, *value);
   1a884:	682a      	ldr	r2, [r5, #0]
   1a886:	482c      	ldr	r0, [pc, #176]	; (1a938 <handleParameter+0x3b8>)
   1a888:	2134      	movs	r1, #52	; 0x34
   1a88a:	f009 fd7c 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a88e:	2400      	movs	r4, #0
   1a890:	e6f9      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a892:	b930      	cbnz	r0, 1a8a2 <handleParameter+0x322>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_A1);
   1a894:	4828      	ldr	r0, [pc, #160]	; (1a938 <handleParameter+0x3b8>)
   1a896:	2124      	movs	r1, #36	; 0x24
   1a898:	f009 fd83 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a89c:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_A1);
   1a89e:	6028      	str	r0, [r5, #0]
   1a8a0:	e6f1      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_A1, *value);
   1a8a2:	682a      	ldr	r2, [r5, #0]
   1a8a4:	4824      	ldr	r0, [pc, #144]	; (1a938 <handleParameter+0x3b8>)
   1a8a6:	2124      	movs	r1, #36	; 0x24
   1a8a8:	f009 fd6d 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8ac:	2400      	movs	r4, #0
   1a8ae:	e6ea      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a8b0:	b930      	cbnz	r0, 1a8c0 <handleParameter+0x340>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_V1);
   1a8b2:	4821      	ldr	r0, [pc, #132]	; (1a938 <handleParameter+0x3b8>)
   1a8b4:	2125      	movs	r1, #37	; 0x25
   1a8b6:	f009 fd74 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8ba:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_V1);
   1a8bc:	6028      	str	r0, [r5, #0]
   1a8be:	e6e2      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_V1, *value);
   1a8c0:	682a      	ldr	r2, [r5, #0]
   1a8c2:	481d      	ldr	r0, [pc, #116]	; (1a938 <handleParameter+0x3b8>)
   1a8c4:	2125      	movs	r1, #37	; 0x25
   1a8c6:	f009 fd5e 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8ca:	2400      	movs	r4, #0
   1a8cc:	e6db      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a8ce:	b930      	cbnz	r0, 1a8de <handleParameter+0x35e>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_DMAX);
   1a8d0:	4819      	ldr	r0, [pc, #100]	; (1a938 <handleParameter+0x3b8>)
   1a8d2:	2128      	movs	r1, #40	; 0x28
   1a8d4:	f009 fd65 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8d8:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_DMAX);
   1a8da:	6028      	str	r0, [r5, #0]
   1a8dc:	e6d3      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_DMAX, *value);
   1a8de:	682a      	ldr	r2, [r5, #0]
   1a8e0:	4815      	ldr	r0, [pc, #84]	; (1a938 <handleParameter+0x3b8>)
   1a8e2:	2128      	movs	r1, #40	; 0x28
   1a8e4:	f009 fd4f 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8e8:	2400      	movs	r4, #0
   1a8ea:	e6cc      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a8ec:	b930      	cbnz	r0, 1a8fc <handleParameter+0x37c>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_D1);
   1a8ee:	4812      	ldr	r0, [pc, #72]	; (1a938 <handleParameter+0x3b8>)
   1a8f0:	212a      	movs	r1, #42	; 0x2a
   1a8f2:	f009 fd56 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a8f6:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_D1);
   1a8f8:	6028      	str	r0, [r5, #0]
   1a8fa:	e6c4      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_D1, *value);
   1a8fc:	682a      	ldr	r2, [r5, #0]
   1a8fe:	480e      	ldr	r0, [pc, #56]	; (1a938 <handleParameter+0x3b8>)
   1a900:	212a      	movs	r1, #42	; 0x2a
   1a902:	f009 fd40 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a906:	2400      	movs	r4, #0
   1a908:	e6bd      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a90a:	b930      	cbnz	r0, 1a91a <handleParameter+0x39a>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VSTART);
   1a90c:	480a      	ldr	r0, [pc, #40]	; (1a938 <handleParameter+0x3b8>)
   1a90e:	2123      	movs	r1, #35	; 0x23
   1a910:	f009 fd47 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a914:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VSTART);
   1a916:	6028      	str	r0, [r5, #0]
   1a918:	e6b5      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_VSTART, *value);
   1a91a:	682a      	ldr	r2, [r5, #0]
   1a91c:	4806      	ldr	r0, [pc, #24]	; (1a938 <handleParameter+0x3b8>)
   1a91e:	2123      	movs	r1, #35	; 0x23
   1a920:	f009 fd31 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a924:	2400      	movs	r4, #0
   1a926:	e6ae      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a928:	b940      	cbnz	r0, 1a93c <handleParameter+0x3bc>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VSTOP);
   1a92a:	4803      	ldr	r0, [pc, #12]	; (1a938 <handleParameter+0x3b8>)
   1a92c:	212b      	movs	r1, #43	; 0x2b
   1a92e:	f009 fd38 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a932:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VSTOP);
   1a934:	6028      	str	r0, [r5, #0]
   1a936:	e6a6      	b.n	1a686 <handleParameter+0x106>
   1a938:	1fff426c 	.word	0x1fff426c
			tmc5161_writeInt(motorToIC(motor), TMC5161_VSTOP, *value);
   1a93c:	682a      	ldr	r2, [r5, #0]
   1a93e:	48a8      	ldr	r0, [pc, #672]	; (1abe0 <handleParameter+0x660>)
   1a940:	212b      	movs	r1, #43	; 0x2b
   1a942:	f009 fd20 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a946:	2400      	movs	r4, #0
   1a948:	e69d      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a94a:	b930      	cbnz	r0, 1a95a <handleParameter+0x3da>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_TZEROWAIT);
   1a94c:	48a4      	ldr	r0, [pc, #656]	; (1abe0 <handleParameter+0x660>)
   1a94e:	212c      	movs	r1, #44	; 0x2c
   1a950:	f009 fd27 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a954:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_TZEROWAIT);
   1a956:	6028      	str	r0, [r5, #0]
   1a958:	e695      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_TZEROWAIT, *value);
   1a95a:	682a      	ldr	r2, [r5, #0]
   1a95c:	48a0      	ldr	r0, [pc, #640]	; (1abe0 <handleParameter+0x660>)
   1a95e:	212c      	movs	r1, #44	; 0x2c
   1a960:	f009 fd11 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a964:	2400      	movs	r4, #0
   1a966:	e68e      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a968:	4c9e      	ldr	r4, [pc, #632]	; (1abe4 <handleParameter+0x664>)
   1a96a:	b980      	cbnz	r0, 1a98e <handleParameter+0x40e>
			buffer = tmc5161_readInt(motorToIC(motor), TMC5161_THIGH);
   1a96c:	489c      	ldr	r0, [pc, #624]	; (1abe0 <handleParameter+0x660>)
   1a96e:	2115      	movs	r1, #21
   1a970:	f009 fd17 	bl	243a2 <tmc5161_readInt>
			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
   1a974:	2801      	cmp	r0, #1
   1a976:	bf38      	it	cc
   1a978:	2001      	movcc	r0, #1
   1a97a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1a97e:	fbb3 f0f0 	udiv	r0, r3, r0
   1a982:	42a0      	cmp	r0, r4
   1a984:	bf94      	ite	ls
   1a986:	6028      	strls	r0, [r5, #0]
   1a988:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a98a:	4634      	mov	r4, r6
   1a98c:	e67b      	b.n	1a686 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1 << 24) / ((*value)? *value:1));
   1a98e:	682b      	ldr	r3, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_THIGH, *value);
   1a990:	4893      	ldr	r0, [pc, #588]	; (1abe0 <handleParameter+0x660>)
			*value = MIN(0xFFFFF, (1 << 24) / ((*value)? *value:1));
   1a992:	2b00      	cmp	r3, #0
   1a994:	bf08      	it	eq
   1a996:	2301      	moveq	r3, #1
   1a998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1a99c:	fb92 f2f3 	sdiv	r2, r2, r3
   1a9a0:	42a2      	cmp	r2, r4
   1a9a2:	bfa8      	it	ge
   1a9a4:	4622      	movge	r2, r4
   1a9a6:	602a      	str	r2, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_THIGH, *value);
   1a9a8:	2115      	movs	r1, #21
   1a9aa:	f009 fcec 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a9ae:	2400      	movs	r4, #0
   1a9b0:	e669      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1a9b2:	b930      	cbnz	r0, 1a9c2 <handleParameter+0x442>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VDCMIN);
   1a9b4:	488a      	ldr	r0, [pc, #552]	; (1abe0 <handleParameter+0x660>)
   1a9b6:	2133      	movs	r1, #51	; 0x33
   1a9b8:	f009 fcf3 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a9bc:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_VDCMIN);
   1a9be:	6028      	str	r0, [r5, #0]
   1a9c0:	e661      	b.n	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_VDCMIN, *value);
   1a9c2:	682a      	ldr	r2, [r5, #0]
   1a9c4:	4886      	ldr	r0, [pc, #536]	; (1abe0 <handleParameter+0x660>)
   1a9c6:	2133      	movs	r1, #51	; 0x33
   1a9c8:	f009 fcdd 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a9cc:	2400      	movs	r4, #0
   1a9ce:	e65a      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHCHM_MASK, TMC5161_VHIGHCHM_SHIFT);
   1a9d0:	4883      	ldr	r0, [pc, #524]	; (1abe0 <handleParameter+0x660>)
   1a9d2:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1a9d4:	b936      	cbnz	r6, 1a9e4 <handleParameter+0x464>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHCHM_MASK, TMC5161_VHIGHCHM_SHIFT);
   1a9d6:	f009 fce4 	bl	243a2 <tmc5161_readInt>
   1a9da:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   1a9de:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1a9e0:	4634      	mov	r4, r6
   1a9e2:	e650      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHCHM_MASK, TMC5161_VHIGHCHM_SHIFT, *value);
   1a9e4:	f009 fcdd 	bl	243a2 <tmc5161_readInt>
   1a9e8:	682b      	ldr	r3, [r5, #0]
   1a9ea:	04db      	lsls	r3, r3, #19
   1a9ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   1a9f0:	f420 2200 	bic.w	r2, r0, #524288	; 0x80000
   1a9f4:	431a      	orrs	r2, r3
   1a9f6:	487a      	ldr	r0, [pc, #488]	; (1abe0 <handleParameter+0x660>)
   1a9f8:	216c      	movs	r1, #108	; 0x6c
   1a9fa:	f009 fcc4 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1a9fe:	2400      	movs	r4, #0
   1aa00:	e641      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHFS_MASK, TMC5161_VHIGHFS_SHIFT);
   1aa02:	4877      	ldr	r0, [pc, #476]	; (1abe0 <handleParameter+0x660>)
   1aa04:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1aa06:	b936      	cbnz	r6, 1aa16 <handleParameter+0x496>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHFS_MASK, TMC5161_VHIGHFS_SHIFT);
   1aa08:	f009 fccb 	bl	243a2 <tmc5161_readInt>
   1aa0c:	f3c0 4080 	ubfx	r0, r0, #18, #1
   1aa10:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aa12:	4634      	mov	r4, r6
   1aa14:	e637      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_VHIGHFS_MASK, TMC5161_VHIGHFS_SHIFT, *value);
   1aa16:	f009 fcc4 	bl	243a2 <tmc5161_readInt>
   1aa1a:	682b      	ldr	r3, [r5, #0]
   1aa1c:	049b      	lsls	r3, r3, #18
   1aa1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   1aa22:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   1aa26:	431a      	orrs	r2, r3
   1aa28:	486d      	ldr	r0, [pc, #436]	; (1abe0 <handleParameter+0x660>)
   1aa2a:	216c      	movs	r1, #108	; 0x6c
   1aa2c:	f009 fcab 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1aa30:	2400      	movs	r4, #0
   1aa32:	e628      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1aa34:	2800      	cmp	r0, #0
   1aa36:	f040 83e5 	bne.w	1b204 <handleParameter+0xc84>
			*value = TMC5161.velocity;
   1aa3a:	4b69      	ldr	r3, [pc, #420]	; (1abe0 <handleParameter+0x660>)
   1aa3c:	685b      	ldr	r3, [r3, #4]
   1aa3e:	602b      	str	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aa40:	4604      	mov	r4, r0
   1aa42:	e620      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1aa44:	b940      	cbnz	r0, 1aa58 <handleParameter+0x4d8>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_GCONF, TMC5161_RECALIBRATE_MASK, TMC5161_RECALIBRATE_SHIFT);
   1aa46:	4601      	mov	r1, r0
   1aa48:	4865      	ldr	r0, [pc, #404]	; (1abe0 <handleParameter+0x660>)
   1aa4a:	f009 fcaa 	bl	243a2 <tmc5161_readInt>
   1aa4e:	f000 0001 	and.w	r0, r0, #1
   1aa52:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aa54:	4634      	mov	r4, r6
   1aa56:	e616      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_GCONF, TMC5161_RECALIBRATE_MASK, TMC5161_RECALIBRATE_SHIFT, *value);
   1aa58:	2100      	movs	r1, #0
   1aa5a:	4861      	ldr	r0, [pc, #388]	; (1abe0 <handleParameter+0x660>)
   1aa5c:	f009 fca1 	bl	243a2 <tmc5161_readInt>
   1aa60:	682a      	ldr	r2, [r5, #0]
   1aa62:	f020 0001 	bic.w	r0, r0, #1
   1aa66:	f002 0201 	and.w	r2, r2, #1
   1aa6a:	4302      	orrs	r2, r0
   1aa6c:	2100      	movs	r1, #0
   1aa6e:	485c      	ldr	r0, [pc, #368]	; (1abe0 <handleParameter+0x660>)
   1aa70:	f009 fc89 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1aa74:	2400      	movs	r4, #0
   1aa76:	e606      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1aa78:	b940      	cbnz	r0, 1aa8c <handleParameter+0x50c>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_GCONF, TMC5161_REFR_DIR_MASK, TMC5161_REFR_DIR_SHIFT);
   1aa7a:	4601      	mov	r1, r0
   1aa7c:	4858      	ldr	r0, [pc, #352]	; (1abe0 <handleParameter+0x660>)
   1aa7e:	f009 fc90 	bl	243a2 <tmc5161_readInt>
   1aa82:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1aa86:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aa88:	4634      	mov	r4, r6
   1aa8a:	e5fc      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_GCONF, TMC5161_REFR_DIR_MASK, TMC5161_REFR_DIR_SHIFT, *value);
   1aa8c:	2100      	movs	r1, #0
   1aa8e:	4854      	ldr	r0, [pc, #336]	; (1abe0 <handleParameter+0x660>)
   1aa90:	f009 fc87 	bl	243a2 <tmc5161_readInt>
   1aa94:	682b      	ldr	r3, [r5, #0]
   1aa96:	005b      	lsls	r3, r3, #1
   1aa98:	f003 0302 	and.w	r3, r3, #2
   1aa9c:	f020 0202 	bic.w	r2, r0, #2
   1aaa0:	431a      	orrs	r2, r3
   1aaa2:	484f      	ldr	r0, [pc, #316]	; (1abe0 <handleParameter+0x660>)
   1aaa4:	2100      	movs	r1, #0
   1aaa6:	f009 fc6e 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1aaaa:	2400      	movs	r4, #0
   1aaac:	e5eb      	b.n	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1aaae:	b95e      	cbnz	r6, 1aac8 <handleParameter+0x548>
			*value = 0x100 >> TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_MRES_MASK, TMC5161_MRES_SHIFT);
   1aab0:	484b      	ldr	r0, [pc, #300]	; (1abe0 <handleParameter+0x660>)
   1aab2:	216c      	movs	r1, #108	; 0x6c
   1aab4:	f009 fc75 	bl	243a2 <tmc5161_readInt>
   1aab8:	f3c0 6303 	ubfx	r3, r0, #24, #4
   1aabc:	f44f 7080 	mov.w	r0, #256	; 0x100
   1aac0:	4118      	asrs	r0, r3
   1aac2:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aac4:	4634      	mov	r4, r6
   1aac6:	e5de      	b.n	1a686 <handleParameter+0x106>
			switch(*value)
   1aac8:	682b      	ldr	r3, [r5, #0]
   1aaca:	2b10      	cmp	r3, #16
   1aacc:	d035      	beq.n	1ab3a <handleParameter+0x5ba>
   1aace:	dc0a      	bgt.n	1aae6 <handleParameter+0x566>
   1aad0:	3b01      	subs	r3, #1
   1aad2:	2b07      	cmp	r3, #7
   1aad4:	d80e      	bhi.n	1aaf4 <handleParameter+0x574>
   1aad6:	2b07      	cmp	r3, #7
   1aad8:	d80c      	bhi.n	1aaf4 <handleParameter+0x574>
   1aada:	e8df f003 	tbb	[pc, r3]
   1aade:	2815      	.short	0x2815
   1aae0:	0b0b2a0b 	.word	0x0b0b2a0b
   1aae4:	2c0b      	.short	0x2c0b
   1aae6:	2b80      	cmp	r3, #128	; 0x80
   1aae8:	d02d      	beq.n	1ab46 <handleParameter+0x5c6>
   1aaea:	dc08      	bgt.n	1aafe <handleParameter+0x57e>
   1aaec:	2b20      	cmp	r3, #32
   1aaee:	d026      	beq.n	1ab3e <handleParameter+0x5be>
   1aaf0:	2b40      	cmp	r3, #64	; 0x40
   1aaf2:	d026      	beq.n	1ab42 <handleParameter+0x5c2>
				default:   *value = -1;  break;
   1aaf4:	f04f 33ff 	mov.w	r3, #4294967295
   1aaf8:	602b      	str	r3, [r5, #0]
				errors |= TMC_ERROR_VALUE;
   1aafa:	2410      	movs	r4, #16
   1aafc:	e5c3      	b.n	1a686 <handleParameter+0x106>
   1aafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1ab02:	d1f7      	bne.n	1aaf4 <handleParameter+0x574>
				case 256:  *value = 0;   break;
   1ab04:	2300      	movs	r3, #0
   1ab06:	e000      	b.n	1ab0a <handleParameter+0x58a>
				case 1:    *value = 8;   break;
   1ab08:	2308      	movs	r3, #8
				case 256:  *value = 0;   break;
   1ab0a:	602b      	str	r3, [r5, #0]
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_MRES_MASK, TMC5161_MRES_SHIFT, *value);
   1ab0c:	216c      	movs	r1, #108	; 0x6c
   1ab0e:	4834      	ldr	r0, [pc, #208]	; (1abe0 <handleParameter+0x660>)
   1ab10:	f009 fc47 	bl	243a2 <tmc5161_readInt>
   1ab14:	682b      	ldr	r3, [r5, #0]
   1ab16:	061b      	lsls	r3, r3, #24
   1ab18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   1ab1c:	f020 6270 	bic.w	r2, r0, #251658240	; 0xf000000
   1ab20:	431a      	orrs	r2, r3
   1ab22:	482f      	ldr	r0, [pc, #188]	; (1abe0 <handleParameter+0x660>)
   1ab24:	216c      	movs	r1, #108	; 0x6c
   1ab26:	f009 fc2e 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ab2a:	2400      	movs	r4, #0
   1ab2c:	e5ab      	b.n	1a686 <handleParameter+0x106>
				case 2:    *value = 7;   break;
   1ab2e:	2307      	movs	r3, #7
   1ab30:	e7eb      	b.n	1ab0a <handleParameter+0x58a>
				case 4:    *value = 6;   break;
   1ab32:	2306      	movs	r3, #6
   1ab34:	e7e9      	b.n	1ab0a <handleParameter+0x58a>
				case 8:    *value = 5;   break;
   1ab36:	2305      	movs	r3, #5
   1ab38:	e7e7      	b.n	1ab0a <handleParameter+0x58a>
				case 16:   *value = 4;   break;
   1ab3a:	2304      	movs	r3, #4
   1ab3c:	e7e5      	b.n	1ab0a <handleParameter+0x58a>
				case 32:   *value = 3;   break;
   1ab3e:	2303      	movs	r3, #3
   1ab40:	e7e3      	b.n	1ab0a <handleParameter+0x58a>
				case 64:   *value = 2;   break;
   1ab42:	2302      	movs	r3, #2
   1ab44:	e7e1      	b.n	1ab0a <handleParameter+0x58a>
				case 128:  *value = 1;   break;
   1ab46:	2301      	movs	r3, #1
   1ab48:	e7df      	b.n	1ab0a <handleParameter+0x58a>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TBL_MASK, TMC5161_TBL_SHIFT);
   1ab4a:	4825      	ldr	r0, [pc, #148]	; (1abe0 <handleParameter+0x660>)
   1ab4c:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1ab4e:	b936      	cbnz	r6, 1ab5e <handleParameter+0x5de>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TBL_MASK, TMC5161_TBL_SHIFT);
   1ab50:	f009 fc27 	bl	243a2 <tmc5161_readInt>
   1ab54:	f3c0 30c1 	ubfx	r0, r0, #15, #2
   1ab58:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ab5a:	4634      	mov	r4, r6
   1ab5c:	e593      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TBL_MASK, TMC5161_TBL_SHIFT, *value);
   1ab5e:	f009 fc20 	bl	243a2 <tmc5161_readInt>
   1ab62:	682b      	ldr	r3, [r5, #0]
   1ab64:	03db      	lsls	r3, r3, #15
   1ab66:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
   1ab6a:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
   1ab6e:	431a      	orrs	r2, r3
   1ab70:	481b      	ldr	r0, [pc, #108]	; (1abe0 <handleParameter+0x660>)
   1ab72:	216c      	movs	r1, #108	; 0x6c
   1ab74:	f009 fc07 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ab78:	2400      	movs	r4, #0
   1ab7a:	e584      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_CHM_MASK, TMC5161_CHM_SHIFT);
   1ab7c:	4818      	ldr	r0, [pc, #96]	; (1abe0 <handleParameter+0x660>)
   1ab7e:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1ab80:	b936      	cbnz	r6, 1ab90 <handleParameter+0x610>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_CHM_MASK, TMC5161_CHM_SHIFT);
   1ab82:	f009 fc0e 	bl	243a2 <tmc5161_readInt>
   1ab86:	f3c0 3080 	ubfx	r0, r0, #14, #1
   1ab8a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ab8c:	4634      	mov	r4, r6
   1ab8e:	e57a      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_CHM_MASK, TMC5161_CHM_SHIFT, *value);
   1ab90:	f009 fc07 	bl	243a2 <tmc5161_readInt>
   1ab94:	682b      	ldr	r3, [r5, #0]
   1ab96:	039b      	lsls	r3, r3, #14
   1ab98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   1ab9c:	f420 4280 	bic.w	r2, r0, #16384	; 0x4000
   1aba0:	431a      	orrs	r2, r3
   1aba2:	480f      	ldr	r0, [pc, #60]	; (1abe0 <handleParameter+0x660>)
   1aba4:	216c      	movs	r1, #108	; 0x6c
   1aba6:	f009 fbee 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1abaa:	2400      	movs	r4, #0
   1abac:	e56b      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_DISFDCC_MASK, TMC5161_DISFDCC_SHIFT);
   1abae:	480c      	ldr	r0, [pc, #48]	; (1abe0 <handleParameter+0x660>)
   1abb0:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1abb2:	b936      	cbnz	r6, 1abc2 <handleParameter+0x642>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_DISFDCC_MASK, TMC5161_DISFDCC_SHIFT);
   1abb4:	f009 fbf5 	bl	243a2 <tmc5161_readInt>
   1abb8:	f3c0 3000 	ubfx	r0, r0, #12, #1
   1abbc:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1abbe:	4634      	mov	r4, r6
   1abc0:	e561      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_DISFDCC_MASK, TMC5161_DISFDCC_SHIFT, *value);
   1abc2:	f009 fbee 	bl	243a2 <tmc5161_readInt>
   1abc6:	682b      	ldr	r3, [r5, #0]
   1abc8:	031b      	lsls	r3, r3, #12
   1abca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1abce:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
   1abd2:	431a      	orrs	r2, r3
   1abd4:	4802      	ldr	r0, [pc, #8]	; (1abe0 <handleParameter+0x660>)
   1abd6:	216c      	movs	r1, #108	; 0x6c
   1abd8:	f009 fbd5 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1abdc:	2400      	movs	r4, #0
   1abde:	e552      	b.n	1a686 <handleParameter+0x106>
   1abe0:	1fff426c 	.word	0x1fff426c
   1abe4:	000fffff 	.word	0x000fffff
		buffer = tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF);
   1abe8:	48b1      	ldr	r0, [pc, #708]	; (1aeb0 <handleParameter+0x930>)
   1abea:	216c      	movs	r1, #108	; 0x6c
   1abec:	f009 fbd9 	bl	243a2 <tmc5161_readInt>
   1abf0:	4607      	mov	r7, r0
		if(readWrite == READ) {
   1abf2:	b9ce      	cbnz	r6, 1ac28 <handleParameter+0x6a8>
			if(buffer & (1 << TMC5161_CHM_SHIFT))
   1abf4:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
   1abf8:	d005      	beq.n	1ac06 <handleParameter+0x686>
				*value = (buffer >> TMC5161_HEND_SHIFT) & TMC5161_HEND_MASK;
   1abfa:	09c7      	lsrs	r7, r0, #7
   1abfc:	f407 67f0 	and.w	r7, r7, #1920	; 0x780
   1ac00:	602f      	str	r7, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ac02:	4634      	mov	r4, r6
   1ac04:	e53f      	b.n	1a686 <handleParameter+0x106>
				*value = (tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) >> TMC5161_TFD_ALL_SHIFT) & TMC5161_TFD_ALL_MASK;
   1ac06:	48aa      	ldr	r0, [pc, #680]	; (1aeb0 <handleParameter+0x930>)
   1ac08:	216c      	movs	r1, #108	; 0x6c
   1ac0a:	f009 fbca 	bl	243a2 <tmc5161_readInt>
				if(buffer & TMC5161_TFD_3_SHIFT)
   1ac0e:	f017 0f0b 	tst.w	r7, #11
				*value = (tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) >> TMC5161_TFD_ALL_SHIFT) & TMC5161_TFD_ALL_MASK;
   1ac12:	ea4f 1020 	mov.w	r0, r0, asr #4
   1ac16:	f000 0070 	and.w	r0, r0, #112	; 0x70
				if(buffer & TMC5161_TFD_3_SHIFT)
   1ac1a:	d101      	bne.n	1ac20 <handleParameter+0x6a0>
				*value = (tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) >> TMC5161_TFD_ALL_SHIFT) & TMC5161_TFD_ALL_MASK;
   1ac1c:	6028      	str	r0, [r5, #0]
   1ac1e:	e587      	b.n	1a730 <handleParameter+0x1b0>
					*value |= 1<<3; // MSB wird zu value dazugefügt
   1ac20:	f040 0008 	orr.w	r0, r0, #8
   1ac24:	6028      	str	r0, [r5, #0]
   1ac26:	e52e      	b.n	1a686 <handleParameter+0x106>
			if(tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) & (1<<14))
   1ac28:	216c      	movs	r1, #108	; 0x6c
   1ac2a:	48a1      	ldr	r0, [pc, #644]	; (1aeb0 <handleParameter+0x930>)
   1ac2c:	f009 fbb9 	bl	243a2 <tmc5161_readInt>
   1ac30:	f410 4480 	ands.w	r4, r0, #16384	; 0x4000
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_HEND_MASK, TMC5161_HEND_SHIFT, *value);
   1ac34:	f04f 016c 	mov.w	r1, #108	; 0x6c
   1ac38:	489d      	ldr	r0, [pc, #628]	; (1aeb0 <handleParameter+0x930>)
			if(tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) & (1<<14))
   1ac3a:	d00e      	beq.n	1ac5a <handleParameter+0x6da>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_HEND_MASK, TMC5161_HEND_SHIFT, *value);
   1ac3c:	f009 fbb1 	bl	243a2 <tmc5161_readInt>
   1ac40:	682b      	ldr	r3, [r5, #0]
   1ac42:	01db      	lsls	r3, r3, #7
   1ac44:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   1ac48:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1ac4c:	431a      	orrs	r2, r3
   1ac4e:	4898      	ldr	r0, [pc, #608]	; (1aeb0 <handleParameter+0x930>)
   1ac50:	216c      	movs	r1, #108	; 0x6c
   1ac52:	f009 fb98 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ac56:	2400      	movs	r4, #0
   1ac58:	e515      	b.n	1a686 <handleParameter+0x106>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TFD_3_MASK, TMC5161_TFD_3_SHIFT, (*value & (1<<3))); // MSB wird zu value dazugefügt
   1ac5a:	f009 fba2 	bl	243a2 <tmc5161_readInt>
   1ac5e:	216c      	movs	r1, #108	; 0x6c
   1ac60:	f420 6200 	bic.w	r2, r0, #2048	; 0x800
   1ac64:	4892      	ldr	r0, [pc, #584]	; (1aeb0 <handleParameter+0x930>)
   1ac66:	f009 fb8e 	bl	24386 <tmc5161_writeInt>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TFD_ALL_MASK, TMC5161_TFD_ALL_SHIFT, *value);
   1ac6a:	216c      	movs	r1, #108	; 0x6c
   1ac6c:	4890      	ldr	r0, [pc, #576]	; (1aeb0 <handleParameter+0x930>)
   1ac6e:	f009 fb98 	bl	243a2 <tmc5161_readInt>
   1ac72:	682b      	ldr	r3, [r5, #0]
   1ac74:	011b      	lsls	r3, r3, #4
   1ac76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1ac7a:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   1ac7e:	431a      	orrs	r2, r3
   1ac80:	488b      	ldr	r0, [pc, #556]	; (1aeb0 <handleParameter+0x930>)
   1ac82:	216c      	movs	r1, #108	; 0x6c
   1ac84:	f009 fb7f 	bl	24386 <tmc5161_writeInt>
   1ac88:	e4fd      	b.n	1a686 <handleParameter+0x106>
		buffer = tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF);
   1ac8a:	4889      	ldr	r0, [pc, #548]	; (1aeb0 <handleParameter+0x930>)
   1ac8c:	216c      	movs	r1, #108	; 0x6c
   1ac8e:	f009 fb88 	bl	243a2 <tmc5161_readInt>
		if(readWrite == READ) {
   1ac92:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
   1ac96:	b98e      	cbnz	r6, 1acbc <handleParameter+0x73c>
			if(buffer & (1 << TMC5161_CHM_SHIFT))
   1ac98:	b12c      	cbz	r4, 1aca6 <handleParameter+0x726>
				*value = (buffer >> TMC5161_HSTRT_SHIFT) & TMC5161_HSTRT_MASK;
   1ac9a:	0900      	lsrs	r0, r0, #4
   1ac9c:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1aca0:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aca2:	4634      	mov	r4, r6
   1aca4:	e4ef      	b.n	1a686 <handleParameter+0x106>
				*value = (buffer >> TMC5161_OFFSET_SHIFT) & TMC5161_OFFSET_MASK;
   1aca6:	09c3      	lsrs	r3, r0, #7
				if(buffer & (1 << TMC5161_TFD_3_SHIFT))
   1aca8:	0502      	lsls	r2, r0, #20
				*value = (buffer >> TMC5161_OFFSET_SHIFT) & TMC5161_OFFSET_MASK;
   1acaa:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
				if(buffer & (1 << TMC5161_TFD_3_SHIFT))
   1acae:	d401      	bmi.n	1acb4 <handleParameter+0x734>
				*value = (buffer >> TMC5161_OFFSET_SHIFT) & TMC5161_OFFSET_MASK;
   1acb0:	602b      	str	r3, [r5, #0]
   1acb2:	e53d      	b.n	1a730 <handleParameter+0x1b0>
					*value |= 1<<3; // MSB wird zu value dazugefügt
   1acb4:	f043 0308 	orr.w	r3, r3, #8
   1acb8:	602b      	str	r3, [r5, #0]
   1acba:	e4e4      	b.n	1a686 <handleParameter+0x106>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_HSTRT_MASK, TMC5161_HSTRT_SHIFT, *value);
   1acbc:	487c      	ldr	r0, [pc, #496]	; (1aeb0 <handleParameter+0x930>)
   1acbe:	216c      	movs	r1, #108	; 0x6c
			if(buffer & (1 << TMC5161_CHM_SHIFT))
   1acc0:	b174      	cbz	r4, 1ace0 <handleParameter+0x760>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_HSTRT_MASK, TMC5161_HSTRT_SHIFT, *value);
   1acc2:	f009 fb6e 	bl	243a2 <tmc5161_readInt>
   1acc6:	682b      	ldr	r3, [r5, #0]
   1acc8:	011b      	lsls	r3, r3, #4
   1acca:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1acce:	f020 0270 	bic.w	r2, r0, #112	; 0x70
   1acd2:	431a      	orrs	r2, r3
   1acd4:	4876      	ldr	r0, [pc, #472]	; (1aeb0 <handleParameter+0x930>)
   1acd6:	216c      	movs	r1, #108	; 0x6c
   1acd8:	f009 fb55 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1acdc:	2400      	movs	r4, #0
   1acde:	e4d2      	b.n	1a686 <handleParameter+0x106>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_OFFSET_MASK, TMC5161_OFFSET_SHIFT, *value);
   1ace0:	f009 fb5f 	bl	243a2 <tmc5161_readInt>
   1ace4:	682b      	ldr	r3, [r5, #0]
   1ace6:	01db      	lsls	r3, r3, #7
   1ace8:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
   1acec:	f420 62f0 	bic.w	r2, r0, #1920	; 0x780
   1acf0:	431a      	orrs	r2, r3
   1acf2:	486f      	ldr	r0, [pc, #444]	; (1aeb0 <handleParameter+0x930>)
   1acf4:	216c      	movs	r1, #108	; 0x6c
   1acf6:	f009 fb46 	bl	24386 <tmc5161_writeInt>
   1acfa:	e4c4      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TOFF_MASK, TMC5161_TOFF_SHIFT);
   1acfc:	486c      	ldr	r0, [pc, #432]	; (1aeb0 <handleParameter+0x930>)
   1acfe:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1ad00:	b936      	cbnz	r6, 1ad10 <handleParameter+0x790>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TOFF_MASK, TMC5161_TOFF_SHIFT);
   1ad02:	f009 fb4e 	bl	243a2 <tmc5161_readInt>
   1ad06:	f000 000f 	and.w	r0, r0, #15
   1ad0a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ad0c:	4634      	mov	r4, r6
   1ad0e:	e4ba      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_TOFF_MASK, TMC5161_TOFF_SHIFT, *value);
   1ad10:	f009 fb47 	bl	243a2 <tmc5161_readInt>
   1ad14:	682a      	ldr	r2, [r5, #0]
   1ad16:	f020 000f 	bic.w	r0, r0, #15
   1ad1a:	f002 020f 	and.w	r2, r2, #15
   1ad1e:	4302      	orrs	r2, r0
   1ad20:	216c      	movs	r1, #108	; 0x6c
   1ad22:	4863      	ldr	r0, [pc, #396]	; (1aeb0 <handleParameter+0x930>)
   1ad24:	f009 fb2f 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ad28:	2400      	movs	r4, #0
   1ad2a:	e4ac      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEIMIN_MASK, TMC5161_SEIMIN_SHIFT);
   1ad2c:	4860      	ldr	r0, [pc, #384]	; (1aeb0 <handleParameter+0x930>)
   1ad2e:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1ad30:	b936      	cbnz	r6, 1ad40 <handleParameter+0x7c0>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEIMIN_MASK, TMC5161_SEIMIN_SHIFT);
   1ad32:	f009 fb36 	bl	243a2 <tmc5161_readInt>
   1ad36:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   1ad3a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ad3c:	4634      	mov	r4, r6
   1ad3e:	e4a2      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEIMIN_MASK, TMC5161_SEIMIN_SHIFT, *value);
   1ad40:	f009 fb2f 	bl	243a2 <tmc5161_readInt>
   1ad44:	682b      	ldr	r3, [r5, #0]
   1ad46:	03db      	lsls	r3, r3, #15
   1ad48:	b29b      	uxth	r3, r3
   1ad4a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
   1ad4e:	431a      	orrs	r2, r3
   1ad50:	4857      	ldr	r0, [pc, #348]	; (1aeb0 <handleParameter+0x930>)
   1ad52:	216d      	movs	r1, #109	; 0x6d
   1ad54:	f009 fb17 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ad58:	2400      	movs	r4, #0
   1ad5a:	e494      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEDN_MASK, TMC5161_SEDN_SHIFT);
   1ad5c:	4854      	ldr	r0, [pc, #336]	; (1aeb0 <handleParameter+0x930>)
   1ad5e:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1ad60:	b936      	cbnz	r6, 1ad70 <handleParameter+0x7f0>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEDN_MASK, TMC5161_SEDN_SHIFT);
   1ad62:	f009 fb1e 	bl	243a2 <tmc5161_readInt>
   1ad66:	f3c0 3041 	ubfx	r0, r0, #13, #2
   1ad6a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ad6c:	4634      	mov	r4, r6
   1ad6e:	e48a      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEDN_MASK, TMC5161_SEDN_SHIFT, *value);
   1ad70:	f009 fb17 	bl	243a2 <tmc5161_readInt>
   1ad74:	682b      	ldr	r3, [r5, #0]
   1ad76:	035b      	lsls	r3, r3, #13
   1ad78:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
   1ad7c:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
   1ad80:	431a      	orrs	r2, r3
   1ad82:	484b      	ldr	r0, [pc, #300]	; (1aeb0 <handleParameter+0x930>)
   1ad84:	216d      	movs	r1, #109	; 0x6d
   1ad86:	f009 fafe 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ad8a:	2400      	movs	r4, #0
   1ad8c:	e47b      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMAX_MASK, TMC5161_SEMAX_SHIFT);
   1ad8e:	4848      	ldr	r0, [pc, #288]	; (1aeb0 <handleParameter+0x930>)
   1ad90:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1ad92:	b936      	cbnz	r6, 1ada2 <handleParameter+0x822>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMAX_MASK, TMC5161_SEMAX_SHIFT);
   1ad94:	f009 fb05 	bl	243a2 <tmc5161_readInt>
   1ad98:	f3c0 2003 	ubfx	r0, r0, #8, #4
   1ad9c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ad9e:	4634      	mov	r4, r6
   1ada0:	e471      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMAX_MASK, TMC5161_SEMAX_SHIFT, *value);
   1ada2:	f009 fafe 	bl	243a2 <tmc5161_readInt>
   1ada6:	682b      	ldr	r3, [r5, #0]
   1ada8:	021b      	lsls	r3, r3, #8
   1adaa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1adae:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
   1adb2:	431a      	orrs	r2, r3
   1adb4:	483e      	ldr	r0, [pc, #248]	; (1aeb0 <handleParameter+0x930>)
   1adb6:	216d      	movs	r1, #109	; 0x6d
   1adb8:	f009 fae5 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1adbc:	2400      	movs	r4, #0
   1adbe:	e462      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEUP_MASK, TMC5161_SEUP_SHIFT);
   1adc0:	483b      	ldr	r0, [pc, #236]	; (1aeb0 <handleParameter+0x930>)
   1adc2:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1adc4:	b936      	cbnz	r6, 1add4 <handleParameter+0x854>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEUP_MASK, TMC5161_SEUP_SHIFT);
   1adc6:	f009 faec 	bl	243a2 <tmc5161_readInt>
   1adca:	f3c0 1041 	ubfx	r0, r0, #5, #2
   1adce:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1add0:	4634      	mov	r4, r6
   1add2:	e458      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEUP_MASK, TMC5161_SEUP_SHIFT, *value);
   1add4:	f009 fae5 	bl	243a2 <tmc5161_readInt>
   1add8:	682b      	ldr	r3, [r5, #0]
   1adda:	015b      	lsls	r3, r3, #5
   1addc:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1ade0:	f020 0260 	bic.w	r2, r0, #96	; 0x60
   1ade4:	431a      	orrs	r2, r3
   1ade6:	4832      	ldr	r0, [pc, #200]	; (1aeb0 <handleParameter+0x930>)
   1ade8:	216d      	movs	r1, #109	; 0x6d
   1adea:	f009 facc 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1adee:	2400      	movs	r4, #0
   1adf0:	e449      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMIN_MASK, TMC5161_SEMIN_SHIFT);
   1adf2:	482f      	ldr	r0, [pc, #188]	; (1aeb0 <handleParameter+0x930>)
   1adf4:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1adf6:	b936      	cbnz	r6, 1ae06 <handleParameter+0x886>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMIN_MASK, TMC5161_SEMIN_SHIFT);
   1adf8:	f009 fad3 	bl	243a2 <tmc5161_readInt>
   1adfc:	f000 000f 	and.w	r0, r0, #15
   1ae00:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ae02:	4634      	mov	r4, r6
   1ae04:	e43f      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SEMIN_MASK, TMC5161_SEMIN_SHIFT, *value);
   1ae06:	f009 facc 	bl	243a2 <tmc5161_readInt>
   1ae0a:	682a      	ldr	r2, [r5, #0]
   1ae0c:	f020 000f 	bic.w	r0, r0, #15
   1ae10:	f002 020f 	and.w	r2, r2, #15
   1ae14:	4302      	orrs	r2, r0
   1ae16:	216d      	movs	r1, #109	; 0x6d
   1ae18:	4825      	ldr	r0, [pc, #148]	; (1aeb0 <handleParameter+0x930>)
   1ae1a:	f009 fab4 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ae1e:	2400      	movs	r4, #0
   1ae20:	e431      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SFILT_MASK, TMC5161_SFILT_SHIFT);
   1ae22:	4823      	ldr	r0, [pc, #140]	; (1aeb0 <handleParameter+0x930>)
   1ae24:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1ae26:	b936      	cbnz	r6, 1ae36 <handleParameter+0x8b6>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SFILT_MASK, TMC5161_SFILT_SHIFT);
   1ae28:	f009 fabb 	bl	243a2 <tmc5161_readInt>
   1ae2c:	f3c0 6000 	ubfx	r0, r0, #24, #1
   1ae30:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ae32:	4634      	mov	r4, r6
   1ae34:	e427      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SFILT_MASK, TMC5161_SFILT_SHIFT, *value);
   1ae36:	f009 fab4 	bl	243a2 <tmc5161_readInt>
   1ae3a:	682b      	ldr	r3, [r5, #0]
   1ae3c:	061b      	lsls	r3, r3, #24
   1ae3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1ae42:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   1ae46:	431a      	orrs	r2, r3
   1ae48:	4819      	ldr	r0, [pc, #100]	; (1aeb0 <handleParameter+0x930>)
   1ae4a:	216d      	movs	r1, #109	; 0x6d
   1ae4c:	f009 fa9b 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ae50:	2400      	movs	r4, #0
   1ae52:	e418      	b.n	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SGT_MASK, TMC5161_SGT_SHIFT);
   1ae54:	4816      	ldr	r0, [pc, #88]	; (1aeb0 <handleParameter+0x930>)
   1ae56:	216d      	movs	r1, #109	; 0x6d
		if(readWrite == READ) {
   1ae58:	b96e      	cbnz	r6, 1ae76 <handleParameter+0x8f6>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SGT_MASK, TMC5161_SGT_SHIFT);
   1ae5a:	f009 faa2 	bl	243a2 <tmc5161_readInt>
   1ae5e:	1403      	asrs	r3, r0, #16
			*value = CAST_Sn_TO_S32(*value, 7);
   1ae60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SGT_MASK, TMC5161_SGT_SHIFT);
   1ae64:	f3c0 4006 	ubfx	r0, r0, #16, #7
			*value = CAST_Sn_TO_S32(*value, 7);
   1ae68:	bf18      	it	ne
   1ae6a:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   1ae6e:	4318      	orrs	r0, r3
   1ae70:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1ae72:	4634      	mov	r4, r6
   1ae74:	e407      	b.n	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_COOLCONF, TMC5161_SGT_MASK, TMC5161_SGT_SHIFT, *value);
   1ae76:	f009 fa94 	bl	243a2 <tmc5161_readInt>
   1ae7a:	682b      	ldr	r3, [r5, #0]
   1ae7c:	041b      	lsls	r3, r3, #16
   1ae7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   1ae82:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
   1ae86:	431a      	orrs	r2, r3
   1ae88:	4809      	ldr	r0, [pc, #36]	; (1aeb0 <handleParameter+0x930>)
   1ae8a:	216d      	movs	r1, #109	; 0x6d
   1ae8c:	f009 fa7b 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1ae90:	2400      	movs	r4, #0
   1ae92:	f7ff bbf8 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1ae96:	2e00      	cmp	r6, #0
   1ae98:	f040 81b7 	bne.w	1b20a <handleParameter+0xc8a>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_DRVSTATUS, TMC5161_CS_ACTUAL_MASK, TMC5161_CS_ACTUAL_SHIFT);
   1ae9c:	4804      	ldr	r0, [pc, #16]	; (1aeb0 <handleParameter+0x930>)
   1ae9e:	216f      	movs	r1, #111	; 0x6f
   1aea0:	f009 fa7f 	bl	243a2 <tmc5161_readInt>
   1aea4:	f3c0 4004 	ubfx	r0, r0, #16, #5
   1aea8:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aeaa:	4634      	mov	r4, r6
   1aeac:	f7ff bbeb 	b.w	1a686 <handleParameter+0x106>
   1aeb0:	1fff426c 	.word	0x1fff426c
			if(TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_SG_STOP_MASK, TMC5161_SG_STOP_SHIFT))
   1aeb4:	48be      	ldr	r0, [pc, #760]	; (1b1b0 <handleParameter+0xc30>)
   1aeb6:	2134      	movs	r1, #52	; 0x34
		if(readWrite == READ) {
   1aeb8:	b9d6      	cbnz	r6, 1aef0 <handleParameter+0x970>
			if(TMC5161_FIELD_READ(motorToIC(motor), TMC5161_SWMODE, TMC5161_SG_STOP_MASK, TMC5161_SG_STOP_SHIFT))
   1aeba:	f009 fa72 	bl	243a2 <tmc5161_readInt>
   1aebe:	0543      	lsls	r3, r0, #21
   1aec0:	d512      	bpl.n	1aee8 <handleParameter+0x968>
				buffer = tmc5161_readInt(motorToIC(motor), TMC5161_TCOOLTHRS);
   1aec2:	48bb      	ldr	r0, [pc, #748]	; (1b1b0 <handleParameter+0xc30>)
   1aec4:	2114      	movs	r1, #20
   1aec6:	f009 fa6c 	bl	243a2 <tmc5161_readInt>
				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   1aeca:	2801      	cmp	r0, #1
   1aecc:	bf38      	it	cc
   1aece:	2001      	movcc	r0, #1
   1aed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1aed4:	fbb3 f0f0 	udiv	r0, r3, r0
   1aed8:	4bb6      	ldr	r3, [pc, #728]	; (1b1b4 <handleParameter+0xc34>)
   1aeda:	4298      	cmp	r0, r3
   1aedc:	bf94      	ite	ls
   1aede:	6028      	strls	r0, [r5, #0]
   1aee0:	602b      	strhi	r3, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aee2:	4634      	mov	r4, r6
   1aee4:	f7ff bbcf 	b.w	1a686 <handleParameter+0x106>
				*value = 0;
   1aee8:	602e      	str	r6, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1aeea:	4634      	mov	r4, r6
   1aeec:	f7ff bbcb 	b.w	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_SWMODE, TMC5161_SG_STOP_MASK, TMC5161_SG_STOP_SHIFT, (*value)? 1:0);
   1aef0:	f009 fa57 	bl	243a2 <tmc5161_readInt>
   1aef4:	682b      	ldr	r3, [r5, #0]
   1aef6:	2b00      	cmp	r3, #0
   1aef8:	bf18      	it	ne
   1aefa:	f44f 6380 	movne.w	r3, #1024	; 0x400
   1aefe:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
   1af02:	431a      	orrs	r2, r3
   1af04:	48aa      	ldr	r0, [pc, #680]	; (1b1b0 <handleParameter+0xc30>)
   1af06:	2134      	movs	r1, #52	; 0x34
   1af08:	f009 fa3d 	bl	24386 <tmc5161_writeInt>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1af0c:	682b      	ldr	r3, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TCOOLTHRS, *value);
   1af0e:	48a8      	ldr	r0, [pc, #672]	; (1b1b0 <handleParameter+0xc30>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1af10:	2b00      	cmp	r3, #0
   1af12:	bf08      	it	eq
   1af14:	2301      	moveq	r3, #1
   1af16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1af1a:	fb92 f2f3 	sdiv	r2, r2, r3
   1af1e:	4ba5      	ldr	r3, [pc, #660]	; (1b1b4 <handleParameter+0xc34>)
   1af20:	429a      	cmp	r2, r3
   1af22:	bfa8      	it	ge
   1af24:	461a      	movge	r2, r3
   1af26:	602a      	str	r2, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TCOOLTHRS, *value);
   1af28:	2114      	movs	r1, #20
   1af2a:	f009 fa2c 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1af2e:	2400      	movs	r4, #0
   1af30:	f7ff bba9 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1af34:	4c9f      	ldr	r4, [pc, #636]	; (1b1b4 <handleParameter+0xc34>)
   1af36:	b98e      	cbnz	r6, 1af5c <handleParameter+0x9dc>
			buffer = tmc5161_readInt(motorToIC(motor), TMC5161_TCOOLTHRS);
   1af38:	489d      	ldr	r0, [pc, #628]	; (1b1b0 <handleParameter+0xc30>)
   1af3a:	2114      	movs	r1, #20
   1af3c:	f009 fa31 	bl	243a2 <tmc5161_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   1af40:	2801      	cmp	r0, #1
   1af42:	bf38      	it	cc
   1af44:	2001      	movcc	r0, #1
   1af46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1af4a:	fbb3 f0f0 	udiv	r0, r3, r0
   1af4e:	42a0      	cmp	r0, r4
   1af50:	bf94      	ite	ls
   1af52:	6028      	strls	r0, [r5, #0]
   1af54:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1af56:	4634      	mov	r4, r6
   1af58:	f7ff bb95 	b.w	1a686 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1af5c:	682b      	ldr	r3, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TCOOLTHRS, *value);
   1af5e:	4894      	ldr	r0, [pc, #592]	; (1b1b0 <handleParameter+0xc30>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1af60:	2b00      	cmp	r3, #0
   1af62:	bf08      	it	eq
   1af64:	2301      	moveq	r3, #1
   1af66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1af6a:	fb92 f2f3 	sdiv	r2, r2, r3
   1af6e:	42a2      	cmp	r2, r4
   1af70:	bfa8      	it	ge
   1af72:	4622      	movge	r2, r4
   1af74:	602a      	str	r2, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TCOOLTHRS, *value);
   1af76:	2114      	movs	r1, #20
   1af78:	f009 fa05 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1af7c:	2400      	movs	r4, #0
   1af7e:	f7ff bb82 	b.w	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_RNDTF_MASK, TMC5161_RNDTF_SHIFT);
   1af82:	488b      	ldr	r0, [pc, #556]	; (1b1b0 <handleParameter+0xc30>)
   1af84:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1af86:	b93e      	cbnz	r6, 1af98 <handleParameter+0xa18>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_RNDTF_MASK, TMC5161_RNDTF_SHIFT);
   1af88:	f009 fa0b 	bl	243a2 <tmc5161_readInt>
   1af8c:	f3c0 3040 	ubfx	r0, r0, #13, #1
   1af90:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1af92:	4634      	mov	r4, r6
   1af94:	f7ff bb77 	b.w	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_CHOPCONF, TMC5161_RNDTF_MASK, TMC5161_RNDTF_SHIFT, *value);
   1af98:	f009 fa03 	bl	243a2 <tmc5161_readInt>
   1af9c:	682b      	ldr	r3, [r5, #0]
   1af9e:	035b      	lsls	r3, r3, #13
   1afa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   1afa4:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
   1afa8:	431a      	orrs	r2, r3
   1afaa:	4881      	ldr	r0, [pc, #516]	; (1b1b0 <handleParameter+0xc30>)
   1afac:	216c      	movs	r1, #108	; 0x6c
   1afae:	f009 f9ea 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1afb2:	2400      	movs	r4, #0
   1afb4:	f7ff bb67 	b.w	1a686 <handleParameter+0x106>
			*value = (tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) >> 20) & 0x0F;
   1afb8:	487d      	ldr	r0, [pc, #500]	; (1b1b0 <handleParameter+0xc30>)
   1afba:	216c      	movs	r1, #108	; 0x6c
		if(readWrite == READ) {
   1afbc:	b93e      	cbnz	r6, 1afce <handleParameter+0xa4e>
			*value = (tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF) >> 20) & 0x0F;
   1afbe:	f009 f9f0 	bl	243a2 <tmc5161_readInt>
   1afc2:	f3c0 5003 	ubfx	r0, r0, #20, #4
   1afc6:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1afc8:	4634      	mov	r4, r6
   1afca:	f7ff bb5c 	b.w	1a686 <handleParameter+0x106>
			buffer = tmc5161_readInt(motorToIC(motor), TMC5161_CHOPCONF);
   1afce:	f009 f9e8 	bl	243a2 <tmc5161_readInt>
			buffer |= (*value & 0x0F) << 20;
   1afd2:	682b      	ldr	r3, [r5, #0]
   1afd4:	051b      	lsls	r3, r3, #20
			buffer &= ~(0x0F<<20);
   1afd6:	f420 0270 	bic.w	r2, r0, #15728640	; 0xf00000
			buffer |= (*value & 0x0F) << 20;
   1afda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
			tmc5161_writeInt(motorToIC(motor), TMC5161_CHOPCONF,buffer);
   1afde:	4874      	ldr	r0, [pc, #464]	; (1b1b0 <handleParameter+0xc30>)
   1afe0:	431a      	orrs	r2, r3
   1afe2:	216c      	movs	r1, #108	; 0x6c
   1afe4:	f009 f9cf 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1afe8:	2400      	movs	r4, #0
   1afea:	f7ff bb4c 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1afee:	4c71      	ldr	r4, [pc, #452]	; (1b1b4 <handleParameter+0xc34>)
   1aff0:	b98e      	cbnz	r6, 1b016 <handleParameter+0xa96>
			buffer = tmc5161_readInt(motorToIC(motor), TMC5161_TPWMTHRS);
   1aff2:	486f      	ldr	r0, [pc, #444]	; (1b1b0 <handleParameter+0xc30>)
   1aff4:	2113      	movs	r1, #19
   1aff6:	f009 f9d4 	bl	243a2 <tmc5161_readInt>
			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
   1affa:	2801      	cmp	r0, #1
   1affc:	bf38      	it	cc
   1affe:	2001      	movcc	r0, #1
   1b000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1b004:	fbb3 f0f0 	udiv	r0, r3, r0
   1b008:	42a0      	cmp	r0, r4
   1b00a:	bf94      	ite	ls
   1b00c:	6028      	strls	r0, [r5, #0]
   1b00e:	602c      	strhi	r4, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b010:	4634      	mov	r4, r6
   1b012:	f7ff bb38 	b.w	1a686 <handleParameter+0x106>
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1b016:	682b      	ldr	r3, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TPWMTHRS, *value);
   1b018:	4865      	ldr	r0, [pc, #404]	; (1b1b0 <handleParameter+0xc30>)
			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
   1b01a:	2b00      	cmp	r3, #0
   1b01c:	bf08      	it	eq
   1b01e:	2301      	moveq	r3, #1
   1b020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1b024:	fb92 f2f3 	sdiv	r2, r2, r3
   1b028:	42a2      	cmp	r2, r4
   1b02a:	bfa8      	it	ge
   1b02c:	4622      	movge	r2, r4
   1b02e:	602a      	str	r2, [r5, #0]
			tmc5161_writeInt(motorToIC(motor), TMC5161_TPWMTHRS, *value);
   1b030:	2113      	movs	r1, #19
   1b032:	f009 f9a8 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b036:	2400      	movs	r4, #0
   1b038:	f7ff bb25 	b.w	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_GRAD_MASK, TMC5161_PWM_GRAD_SHIFT);
   1b03c:	485c      	ldr	r0, [pc, #368]	; (1b1b0 <handleParameter+0xc30>)
   1b03e:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   1b040:	b93e      	cbnz	r6, 1b052 <handleParameter+0xad2>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_GRAD_MASK, TMC5161_PWM_GRAD_SHIFT);
   1b042:	f009 f9ae 	bl	243a2 <tmc5161_readInt>
   1b046:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1b04a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b04c:	4634      	mov	r4, r6
   1b04e:	f7ff bb1a 	b.w	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_GRAD_MASK, TMC5161_PWM_GRAD_SHIFT, *value);
   1b052:	f009 f9a6 	bl	243a2 <tmc5161_readInt>
   1b056:	682b      	ldr	r3, [r5, #0]
   1b058:	021b      	lsls	r3, r3, #8
   1b05a:	b29b      	uxth	r3, r3
   1b05c:	f420 427f 	bic.w	r2, r0, #65280	; 0xff00
   1b060:	431a      	orrs	r2, r3
   1b062:	4853      	ldr	r0, [pc, #332]	; (1b1b0 <handleParameter+0xc30>)
   1b064:	2170      	movs	r1, #112	; 0x70
   1b066:	f009 f98e 	bl	24386 <tmc5161_writeInt>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_GCONF, TMC5161_EN_PWM_MODE_MASK, TMC5161_EN_PWM_MODE_SHIFT, (*value) ? 1 : 0);
   1b06a:	2100      	movs	r1, #0
   1b06c:	4850      	ldr	r0, [pc, #320]	; (1b1b0 <handleParameter+0xc30>)
   1b06e:	f009 f998 	bl	243a2 <tmc5161_readInt>
   1b072:	682b      	ldr	r3, [r5, #0]
   1b074:	2b00      	cmp	r3, #0
   1b076:	f020 0204 	bic.w	r2, r0, #4
   1b07a:	bf18      	it	ne
   1b07c:	2304      	movne	r3, #4
   1b07e:	484c      	ldr	r0, [pc, #304]	; (1b1b0 <handleParameter+0xc30>)
   1b080:	431a      	orrs	r2, r3
   1b082:	2100      	movs	r1, #0
   1b084:	f009 f97f 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b088:	2400      	movs	r4, #0
   1b08a:	f7ff bafc 	b.w	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_OFS_MASK, TMC5161_PWM_OFS_SHIFT);
   1b08e:	4848      	ldr	r0, [pc, #288]	; (1b1b0 <handleParameter+0xc30>)
   1b090:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   1b092:	b936      	cbnz	r6, 1b0a2 <handleParameter+0xb22>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_OFS_MASK, TMC5161_PWM_OFS_SHIFT);
   1b094:	f009 f985 	bl	243a2 <tmc5161_readInt>
   1b098:	b2c0      	uxtb	r0, r0
   1b09a:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b09c:	4634      	mov	r4, r6
   1b09e:	f7ff baf2 	b.w	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_PWMCONF, TMC5161_GLOBAL_SCALER_MASK, TMC5161_GLOBAL_SCALER_SHIFT, *value);
   1b0a2:	f009 f97e 	bl	243a2 <tmc5161_readInt>
   1b0a6:	782a      	ldrb	r2, [r5, #0]
   1b0a8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   1b0ac:	4302      	orrs	r2, r0
   1b0ae:	2170      	movs	r1, #112	; 0x70
   1b0b0:	483f      	ldr	r0, [pc, #252]	; (1b1b0 <handleParameter+0xc30>)
   1b0b2:	f009 f968 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b0b6:	2400      	movs	r4, #0
   1b0b8:	f7ff bae5 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1b0bc:	b94e      	cbnz	r6, 1b0d2 <handleParameter+0xb52>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_FREQ_MASK, TMC5161_PWM_FREQ_SHIFT);
   1b0be:	483c      	ldr	r0, [pc, #240]	; (1b1b0 <handleParameter+0xc30>)
   1b0c0:	2170      	movs	r1, #112	; 0x70
   1b0c2:	f009 f96e 	bl	243a2 <tmc5161_readInt>
   1b0c6:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1b0ca:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b0cc:	4634      	mov	r4, r6
   1b0ce:	f7ff bada 	b.w	1a686 <handleParameter+0x106>
			if(*value >= 0 && *value < 4)
   1b0d2:	682b      	ldr	r3, [r5, #0]
   1b0d4:	2b03      	cmp	r3, #3
   1b0d6:	f200 809b 	bhi.w	1b210 <handleParameter+0xc90>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_FREQ_MASK, TMC5161_PWM_FREQ_SHIFT, *value);
   1b0da:	2170      	movs	r1, #112	; 0x70
   1b0dc:	4834      	ldr	r0, [pc, #208]	; (1b1b0 <handleParameter+0xc30>)
   1b0de:	f009 f960 	bl	243a2 <tmc5161_readInt>
   1b0e2:	682b      	ldr	r3, [r5, #0]
   1b0e4:	041b      	lsls	r3, r3, #16
   1b0e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
   1b0ea:	f420 3240 	bic.w	r2, r0, #196608	; 0x30000
   1b0ee:	431a      	orrs	r2, r3
   1b0f0:	482f      	ldr	r0, [pc, #188]	; (1b1b0 <handleParameter+0xc30>)
   1b0f2:	2170      	movs	r1, #112	; 0x70
   1b0f4:	f009 f947 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b0f8:	2400      	movs	r4, #0
   1b0fa:	f7ff bac4 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1b0fe:	b94e      	cbnz	r6, 1b114 <handleParameter+0xb94>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_AUTOSCALE_MASK, TMC5161_PWM_AUTOSCALE_SHIFT);
   1b100:	482b      	ldr	r0, [pc, #172]	; (1b1b0 <handleParameter+0xc30>)
   1b102:	2170      	movs	r1, #112	; 0x70
   1b104:	f009 f94d 	bl	243a2 <tmc5161_readInt>
   1b108:	f3c0 4080 	ubfx	r0, r0, #18, #1
   1b10c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b10e:	4634      	mov	r4, r6
   1b110:	f7ff bab9 	b.w	1a686 <handleParameter+0x106>
			if(*value >= 0 && *value < 2)
   1b114:	682b      	ldr	r3, [r5, #0]
   1b116:	2b01      	cmp	r3, #1
   1b118:	d87d      	bhi.n	1b216 <handleParameter+0xc96>
				TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_PWMCONF, TMC5161_PWM_AUTOSCALE_MASK, TMC5161_PWM_AUTOSCALE_SHIFT, *value);
   1b11a:	2170      	movs	r1, #112	; 0x70
   1b11c:	4824      	ldr	r0, [pc, #144]	; (1b1b0 <handleParameter+0xc30>)
   1b11e:	f009 f940 	bl	243a2 <tmc5161_readInt>
   1b122:	682b      	ldr	r3, [r5, #0]
   1b124:	049b      	lsls	r3, r3, #18
   1b126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   1b12a:	f420 2280 	bic.w	r2, r0, #262144	; 0x40000
   1b12e:	431a      	orrs	r2, r3
   1b130:	481f      	ldr	r0, [pc, #124]	; (1b1b0 <handleParameter+0xc30>)
   1b132:	2170      	movs	r1, #112	; 0x70
   1b134:	f009 f927 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b138:	2400      	movs	r4, #0
   1b13a:	f7ff baa4 	b.w	1a686 <handleParameter+0x106>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_FREEWHEEL_MASK, TMC5161_FREEWHEEL_SHIFT);
   1b13e:	481c      	ldr	r0, [pc, #112]	; (1b1b0 <handleParameter+0xc30>)
   1b140:	2170      	movs	r1, #112	; 0x70
		if(readWrite == READ) {
   1b142:	b93e      	cbnz	r6, 1b154 <handleParameter+0xbd4>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_PWMCONF, TMC5161_FREEWHEEL_MASK, TMC5161_FREEWHEEL_SHIFT);
   1b144:	f009 f92d 	bl	243a2 <tmc5161_readInt>
   1b148:	f3c0 5001 	ubfx	r0, r0, #20, #2
   1b14c:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b14e:	4634      	mov	r4, r6
   1b150:	f7ff ba99 	b.w	1a686 <handleParameter+0x106>
			TMC5161_FIELD_UPDATE(motorToIC(motor), TMC5161_PWMCONF, TMC5161_FREEWHEEL_MASK, TMC5161_FREEWHEEL_SHIFT, *value);
   1b154:	f009 f925 	bl	243a2 <tmc5161_readInt>
   1b158:	682b      	ldr	r3, [r5, #0]
   1b15a:	051b      	lsls	r3, r3, #20
   1b15c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
   1b160:	f420 1240 	bic.w	r2, r0, #3145728	; 0x300000
   1b164:	431a      	orrs	r2, r3
   1b166:	4812      	ldr	r0, [pc, #72]	; (1b1b0 <handleParameter+0xc30>)
   1b168:	2170      	movs	r1, #112	; 0x70
   1b16a:	f009 f90c 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b16e:	2400      	movs	r4, #0
   1b170:	f7ff ba89 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1b174:	2e00      	cmp	r6, #0
   1b176:	d151      	bne.n	1b21c <handleParameter+0xc9c>
			*value = TMC5161_FIELD_READ(motorToIC(motor), TMC5161_DRVSTATUS, TMC5161_SG_RESULT_MASK, TMC5161_SG_RESULT_SHIFT);
   1b178:	480d      	ldr	r0, [pc, #52]	; (1b1b0 <handleParameter+0xc30>)
   1b17a:	216f      	movs	r1, #111	; 0x6f
   1b17c:	f009 f911 	bl	243a2 <tmc5161_readInt>
   1b180:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1b184:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1b186:	4634      	mov	r4, r6
   1b188:	f7ff ba7d 	b.w	1a686 <handleParameter+0x106>
		if(readWrite == READ) {
   1b18c:	b93e      	cbnz	r6, 1b19e <handleParameter+0xc1e>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XENC);
   1b18e:	4808      	ldr	r0, [pc, #32]	; (1b1b0 <handleParameter+0xc30>)
   1b190:	2139      	movs	r1, #57	; 0x39
   1b192:	f009 f906 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b196:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_XENC);
   1b198:	6028      	str	r0, [r5, #0]
   1b19a:	f7ff ba74 	b.w	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_XENC, *value);
   1b19e:	682a      	ldr	r2, [r5, #0]
   1b1a0:	4803      	ldr	r0, [pc, #12]	; (1b1b0 <handleParameter+0xc30>)
   1b1a2:	2139      	movs	r1, #57	; 0x39
   1b1a4:	f009 f8ef 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b1a8:	2400      	movs	r4, #0
   1b1aa:	f7ff ba6c 	b.w	1a686 <handleParameter+0x106>
   1b1ae:	bf00      	nop
   1b1b0:	1fff426c 	.word	0x1fff426c
   1b1b4:	000fffff 	.word	0x000fffff
		if(readWrite == READ) {
   1b1b8:	b93e      	cbnz	r6, 1b1ca <handleParameter+0xc4a>
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_ENC_CONST);
   1b1ba:	481a      	ldr	r0, [pc, #104]	; (1b224 <handleParameter+0xca4>)
   1b1bc:	213a      	movs	r1, #58	; 0x3a
   1b1be:	f009 f8f0 	bl	243a2 <tmc5161_readInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b1c2:	4634      	mov	r4, r6
			*value = tmc5161_readInt(motorToIC(motor), TMC5161_ENC_CONST);
   1b1c4:	6028      	str	r0, [r5, #0]
   1b1c6:	f7ff ba5e 	b.w	1a686 <handleParameter+0x106>
			tmc5161_writeInt(motorToIC(motor), TMC5161_ENC_CONST, *value);
   1b1ca:	682a      	ldr	r2, [r5, #0]
   1b1cc:	4815      	ldr	r0, [pc, #84]	; (1b224 <handleParameter+0xca4>)
   1b1ce:	213a      	movs	r1, #58	; 0x3a
   1b1d0:	f009 f8d9 	bl	24386 <tmc5161_writeInt>
	uint32_t errors = TMC_ERROR_NONE;
   1b1d4:	2400      	movs	r4, #0
   1b1d6:	f7ff ba56 	b.w	1a686 <handleParameter+0x106>
		return TMC_ERROR_MOTOR;
   1b1da:	2408      	movs	r4, #8
   1b1dc:	f7ff ba53 	b.w	1a686 <handleParameter+0x106>
	switch(type)
   1b1e0:	2404      	movs	r4, #4
   1b1e2:	f7ff ba50 	b.w	1a686 <handleParameter+0x106>
   1b1e6:	2404      	movs	r4, #4
   1b1e8:	f7ff ba4d 	b.w	1a686 <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   1b1ec:	2404      	movs	r4, #4
   1b1ee:	f7ff ba4a 	b.w	1a686 <handleParameter+0x106>
   1b1f2:	2404      	movs	r4, #4
   1b1f4:	f7ff ba47 	b.w	1a686 <handleParameter+0x106>
   1b1f8:	2404      	movs	r4, #4
   1b1fa:	f7ff ba44 	b.w	1a686 <handleParameter+0x106>
   1b1fe:	2404      	movs	r4, #4
   1b200:	f7ff ba41 	b.w	1a686 <handleParameter+0x106>
   1b204:	2404      	movs	r4, #4
   1b206:	f7ff ba3e 	b.w	1a686 <handleParameter+0x106>
   1b20a:	2404      	movs	r4, #4
   1b20c:	f7ff ba3b 	b.w	1a686 <handleParameter+0x106>
				errors |= TMC_ERROR_VALUE;
   1b210:	2410      	movs	r4, #16
   1b212:	f7ff ba38 	b.w	1a686 <handleParameter+0x106>
   1b216:	2410      	movs	r4, #16
   1b218:	f7ff ba35 	b.w	1a686 <handleParameter+0x106>
			errors |= TMC_ERROR_TYPE;
   1b21c:	2404      	movs	r4, #4
   1b21e:	f7ff ba32 	b.w	1a686 <handleParameter+0x106>
   1b222:	bf00      	nop
   1b224:	1fff426c 	.word	0x1fff426c

0001b228 <SAP>:
{
   1b228:	b507      	push	{r0, r1, r2, lr}
   1b22a:	9201      	str	r2, [sp, #4]
	return handleParameter(WRITE, motor, type, &value);
   1b22c:	ab01      	add	r3, sp, #4
   1b22e:	4602      	mov	r2, r0
   1b230:	2001      	movs	r0, #1
   1b232:	f7ff f9a5 	bl	1a580 <handleParameter>
}
   1b236:	b003      	add	sp, #12
   1b238:	f85d fb04 	ldr.w	pc, [sp], #4

0001b23c <GAP>:
{
   1b23c:	4613      	mov	r3, r2
	return handleParameter(READ, motor, type, value);
   1b23e:	4602      	mov	r2, r0
   1b240:	2000      	movs	r0, #0
   1b242:	f7ff b99d 	b.w	1a580 <handleParameter>

0001b246 <moveBy>:
{
   1b246:	b508      	push	{r3, lr}
	tmc5161_moveBy(motorToIC(motor), ticks, vmax_position);
   1b248:	4803      	ldr	r0, [pc, #12]	; (1b258 <moveBy+0x12>)
   1b24a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
   1b24e:	f009 f9af 	bl	245b0 <tmc5161_moveBy>
}
   1b252:	2000      	movs	r0, #0
   1b254:	bd08      	pop	{r3, pc}
   1b256:	bf00      	nop
   1b258:	1fff426c 	.word	0x1fff426c

0001b25c <moveTo>:
{
   1b25c:	b508      	push	{r3, lr}
	tmc5161_moveTo(motorToIC(motor), position, vmax_position);
   1b25e:	4803      	ldr	r0, [pc, #12]	; (1b26c <moveTo+0x10>)
   1b260:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
   1b264:	f009 f990 	bl	24588 <tmc5161_moveTo>
}
   1b268:	2000      	movs	r0, #0
   1b26a:	bd08      	pop	{r3, pc}
   1b26c:	1fff426c 	.word	0x1fff426c

0001b270 <stop>:
{
   1b270:	b508      	push	{r3, lr}
	tmc5161_stop(motorToIC(motor));
   1b272:	4802      	ldr	r0, [pc, #8]	; (1b27c <stop+0xc>)
   1b274:	f009 f985 	bl	24582 <tmc5161_stop>
}
   1b278:	2000      	movs	r0, #0
   1b27a:	bd08      	pop	{r3, pc}
   1b27c:	1fff426c 	.word	0x1fff426c

0001b280 <left>:
{
   1b280:	b508      	push	{r3, lr}
	tmc5161_left(motorToIC(motor), velocity);
   1b282:	4802      	ldr	r0, [pc, #8]	; (1b28c <left+0xc>)
   1b284:	f009 f97a 	bl	2457c <tmc5161_left>
}
   1b288:	2000      	movs	r0, #0
   1b28a:	bd08      	pop	{r3, pc}
   1b28c:	1fff426c 	.word	0x1fff426c

0001b290 <right>:
{
   1b290:	b508      	push	{r3, lr}
	tmc5161_right(motorToIC(motor), velocity);
   1b292:	4802      	ldr	r0, [pc, #8]	; (1b29c <right+0xc>)
   1b294:	f009 f970 	bl	24578 <tmc5161_right>
}
   1b298:	2000      	movs	r0, #0
   1b29a:	bd08      	pop	{r3, pc}
   1b29c:	1fff426c 	.word	0x1fff426c

0001b2a0 <rotate>:
{
   1b2a0:	b508      	push	{r3, lr}
	tmc5161_rotate(motorToIC(motor), velocity);
   1b2a2:	4802      	ldr	r0, [pc, #8]	; (1b2ac <rotate+0xc>)
   1b2a4:	f009 f953 	bl	2454e <tmc5161_rotate>
}
   1b2a8:	2000      	movs	r0, #0
   1b2aa:	bd08      	pop	{r3, pc}
   1b2ac:	1fff426c 	.word	0x1fff426c

0001b2b0 <restore>:
	return 1;
}

static uint8_t restore()
{
	return tmc5161_restore(&TMC5161);
   1b2b0:	4801      	ldr	r0, [pc, #4]	; (1b2b8 <restore+0x8>)
   1b2b2:	f009 b934 	b.w	2451e <tmc5161_restore>
   1b2b6:	bf00      	nop
   1b2b8:	1fff426c 	.word	0x1fff426c

0001b2bc <reset>:
{
   1b2bc:	b538      	push	{r3, r4, r5, lr}
	if(!tmc5161_readInt(&TMC5161, TMC5161_VACTUAL))
   1b2be:	480b      	ldr	r0, [pc, #44]	; (1b2ec <reset+0x30>)
   1b2c0:	4c0a      	ldr	r4, [pc, #40]	; (1b2ec <reset+0x30>)
   1b2c2:	2122      	movs	r1, #34	; 0x22
   1b2c4:	f009 f86d 	bl	243a2 <tmc5161_readInt>
   1b2c8:	b910      	cbnz	r0, 1b2d0 <reset+0x14>
		tmc5161_reset(&TMC5161);
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	f009 f914 	bl	244f8 <tmc5161_reset>
	HAL.IOs->config->toInput(Pins.REFL_UC);
   1b2d0:	4b07      	ldr	r3, [pc, #28]	; (1b2f0 <reset+0x34>)
   1b2d2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   1b2d6:	68dd      	ldr	r5, [r3, #12]
   1b2d8:	682b      	ldr	r3, [r5, #0]
   1b2da:	691b      	ldr	r3, [r3, #16]
   1b2dc:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   1b2de:	682b      	ldr	r3, [r5, #0]
   1b2e0:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   1b2e4:	691b      	ldr	r3, [r3, #16]
   1b2e6:	4798      	blx	r3
}
   1b2e8:	2001      	movs	r0, #1
   1b2ea:	bd38      	pop	{r3, r4, r5, pc}
   1b2ec:	1fff426c 	.word	0x1fff426c
   1b2f0:	00029d1c 	.word	0x00029d1c

0001b2f4 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	if(state == DRIVER_USE_GLOBAL_ENABLE)
   1b2f4:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   1b2f6:	bf04      	itt	eq
   1b2f8:	4b0c      	ldreq	r3, [pc, #48]	; (1b32c <enableDriver+0x38>)
   1b2fa:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0

	if(state ==  DRIVER_DISABLE)
   1b2fe:	b938      	cbnz	r0, 1b310 <enableDriver+0x1c>
		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
   1b300:	4b0b      	ldr	r3, [pc, #44]	; (1b330 <enableDriver+0x3c>)
   1b302:	68db      	ldr	r3, [r3, #12]
   1b304:	681b      	ldr	r3, [r3, #0]
   1b306:	695b      	ldr	r3, [r3, #20]
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   1b308:	4a0a      	ldr	r2, [pc, #40]	; (1b334 <enableDriver+0x40>)
   1b30a:	f8d2 0298 	ldr.w	r0, [r2, #664]	; 0x298
   1b30e:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   1b310:	2801      	cmp	r0, #1
   1b312:	d109      	bne.n	1b328 <enableDriver+0x34>
   1b314:	4b05      	ldr	r3, [pc, #20]	; (1b32c <enableDriver+0x38>)
   1b316:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   1b31a:	2b01      	cmp	r3, #1
   1b31c:	d104      	bne.n	1b328 <enableDriver+0x34>
		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
   1b31e:	4b04      	ldr	r3, [pc, #16]	; (1b330 <enableDriver+0x3c>)
   1b320:	68db      	ldr	r3, [r3, #12]
   1b322:	681b      	ldr	r3, [r3, #0]
   1b324:	699b      	ldr	r3, [r3, #24]
   1b326:	e7ef      	b.n	1b308 <enableDriver+0x14>
}
   1b328:	4770      	bx	lr
   1b32a:	bf00      	nop
   1b32c:	1fff5e88 	.word	0x1fff5e88
   1b330:	00029d1c 	.word	0x00029d1c
   1b334:	1fff426c 	.word	0x1fff426c

0001b338 <configCallback>:

static void configCallback(TMC5161TypeDef *tmc5161, ConfigState state)
{
	if(state == CONFIG_RESET)
   1b338:	2901      	cmp	r1, #1
{
   1b33a:	b510      	push	{r4, lr}
   1b33c:	4604      	mov	r4, r0
	if(state == CONFIG_RESET)
   1b33e:	d10f      	bne.n	1b360 <configCallback+0x28>
	{	// Change hardware-preset registers here
		tmc5161_writeInt(tmc5161, TMC5161_SHORT_CONF, 0x00010C0C);
   1b340:	4a08      	ldr	r2, [pc, #32]	; (1b364 <configCallback+0x2c>)
   1b342:	2109      	movs	r1, #9
   1b344:	f009 f81f 	bl	24386 <tmc5161_writeInt>
		tmc5161_writeInt(tmc5161, TMC5161_DRV_CONF, 0x00080200);
   1b348:	4620      	mov	r0, r4
   1b34a:	4a07      	ldr	r2, [pc, #28]	; (1b368 <configCallback+0x30>)
   1b34c:	210a      	movs	r1, #10
   1b34e:	f009 f81a 	bl	24386 <tmc5161_writeInt>
		tmc5161_writeInt(tmc5161, TMC5161_PWMCONF, 0xC40C001E);
   1b352:	4620      	mov	r0, r4
   1b354:	4a05      	ldr	r2, [pc, #20]	; (1b36c <configCallback+0x34>)
	}
}
   1b356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tmc5161_writeInt(tmc5161, TMC5161_PWMCONF, 0xC40C001E);
   1b35a:	2170      	movs	r1, #112	; 0x70
   1b35c:	f009 b813 	b.w	24386 <tmc5161_writeInt>
}
   1b360:	bd10      	pop	{r4, pc}
   1b362:	bf00      	nop
   1b364:	00010c0c 	.word	0x00010c0c
   1b368:	00080200 	.word	0x00080200
   1b36c:	c40c001e 	.word	0xc40c001e

0001b370 <tmc5161_readWriteArray>:
	return TMC5161_SPIChannel;
   1b370:	4b03      	ldr	r3, [pc, #12]	; (1b380 <tmc5161_readWriteArray+0x10>)
	channelToSPI(channel)->readWriteArray(data, length);
   1b372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
{
   1b376:	4608      	mov	r0, r1
	channelToSPI(channel)->readWriteArray(data, length);
   1b378:	68db      	ldr	r3, [r3, #12]
   1b37a:	4611      	mov	r1, r2
   1b37c:	4718      	bx	r3
   1b37e:	bf00      	nop
   1b380:	1fff426c 	.word	0x1fff426c

0001b384 <TMC5161_init>:

void TMC5161_init(void)
{
   1b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmc5161_init(&TMC5161, 0, Evalboards.ch1.config, tmc5161_defaultRegisterResetState);
   1b386:	4c5a      	ldr	r4, [pc, #360]	; (1b4f0 <TMC5161_init+0x16c>)
   1b388:	4d5a      	ldr	r5, [pc, #360]	; (1b4f4 <TMC5161_init+0x170>)
   1b38a:	4b5b      	ldr	r3, [pc, #364]	; (1b4f8 <TMC5161_init+0x174>)
   1b38c:	69aa      	ldr	r2, [r5, #24]
	tmc5161_setCallback(&TMC5161, configCallback);

	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1b38e:	4f5b      	ldr	r7, [pc, #364]	; (1b4fc <TMC5161_init+0x178>)
	tmc5161_init(&TMC5161, 0, Evalboards.ch1.config, tmc5161_defaultRegisterResetState);
   1b390:	4620      	mov	r0, r4
   1b392:	2100      	movs	r1, #0
   1b394:	f009 f829 	bl	243ea <tmc5161_init>
	tmc5161_setCallback(&TMC5161, configCallback);
   1b398:	4959      	ldr	r1, [pc, #356]	; (1b500 <TMC5161_init+0x17c>)
   1b39a:	4620      	mov	r0, r4
   1b39c:	f009 f8d3 	bl	24546 <tmc5161_setCallback>
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1b3a0:	68fe      	ldr	r6, [r7, #12]
   1b3a2:	6873      	ldr	r3, [r6, #4]
	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
   1b3a4:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1b3a8:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO2;
   1b3ac:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
   1b3b0:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO3;
   1b3b4:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   1b3b8:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
	Pins.REFL_UC         = &HAL.IOs->pins->DIO6;
   1b3bc:	f503 7294 	add.w	r2, r3, #296	; 0x128
   1b3c0:	f8c4 2290 	str.w	r2, [r4, #656]	; 0x290
	Pins.REFR_UC         = &HAL.IOs->pins->DIO7;
   1b3c4:	f503 72a4 	add.w	r2, r3, #328	; 0x148
   1b3c8:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294
	Pins.SD_MODE         = &HAL.IOs->pins->DIO9;
   1b3cc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
   1b3d0:	f8c4 22a8 	str.w	r2, [r4, #680]	; 0x2a8
	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
   1b3d4:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1b3d8:	f103 0068 	add.w	r0, r3, #104	; 0x68
	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
   1b3dc:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   1b3e0:	f503 726a 	add.w	r2, r3, #936	; 0x3a8
	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
   1b3e4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
   1b3e8:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0

	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1b3ec:	6833      	ldr	r3, [r6, #0]
	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
   1b3ee:	f8c4 22b4 	str.w	r2, [r4, #692]	; 0x2b4
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1b3f2:	68db      	ldr	r3, [r3, #12]
	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
   1b3f4:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
   1b3f8:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SD_MODE);
   1b3fa:	6833      	ldr	r3, [r6, #0]
   1b3fc:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1b400:	68db      	ldr	r3, [r3, #12]
   1b402:	4798      	blx	r3
	HAL.IOs->config->toOutput(Pins.SPI_MODE);
   1b404:	6833      	ldr	r3, [r6, #0]
   1b406:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1b40a:	68db      	ldr	r3, [r3, #12]
   1b40c:	4798      	blx	r3

	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
   1b40e:	6833      	ldr	r3, [r6, #0]
   1b410:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
   1b414:	695b      	ldr	r3, [r3, #20]
   1b416:	4798      	blx	r3
	HAL.IOs->config->setLow(Pins.SD_MODE);
   1b418:	6833      	ldr	r3, [r6, #0]
   1b41a:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
   1b41e:	699b      	ldr	r3, [r3, #24]
   1b420:	4798      	blx	r3
	HAL.IOs->config->setHigh(Pins.SPI_MODE);
   1b422:	6833      	ldr	r3, [r6, #0]
   1b424:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
   1b428:	695b      	ldr	r3, [r3, #20]
   1b42a:	4798      	blx	r3

	HAL.IOs->config->toInput(Pins.ENCN_DCO);
   1b42c:	6833      	ldr	r3, [r6, #0]
   1b42e:	f8d4 02a4 	ldr.w	r0, [r4, #676]	; 0x2a4
   1b432:	691b      	ldr	r3, [r3, #16]
   1b434:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
   1b436:	6833      	ldr	r3, [r6, #0]
   1b438:	f8d4 02a0 	ldr.w	r0, [r4, #672]	; 0x2a0
   1b43c:	691b      	ldr	r3, [r3, #16]
   1b43e:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.ENCA_DCIN_CFG5);
   1b440:	6833      	ldr	r3, [r6, #0]
   1b442:	f8d4 029c 	ldr.w	r0, [r4, #668]	; 0x29c
   1b446:	691b      	ldr	r3, [r3, #16]
   1b448:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWN_DIAG0);
   1b44a:	6833      	ldr	r3, [r6, #0]
   1b44c:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
   1b450:	691b      	ldr	r3, [r3, #16]
   1b452:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.SWP_DIAG1);
   1b454:	6833      	ldr	r3, [r6, #0]
   1b456:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
   1b45a:	691b      	ldr	r3, [r3, #16]
   1b45c:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFL_UC);
   1b45e:	6833      	ldr	r3, [r6, #0]
   1b460:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
   1b464:	691b      	ldr	r3, [r3, #16]
   1b466:	4798      	blx	r3
	HAL.IOs->config->toInput(Pins.REFR_UC);
   1b468:	6833      	ldr	r3, [r6, #0]
   1b46a:	f8d4 0294 	ldr.w	r0, [r4, #660]	; 0x294
   1b46e:	691b      	ldr	r3, [r3, #16]
   1b470:	4798      	blx	r3
	// Switchable via user function
	//HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
	//HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);

	TMC5161_SPIChannel = &HAL.SPI->ch1;
	TMC5161_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   1b472:	6873      	ldr	r3, [r6, #4]
	TMC5161_SPIChannel = &HAL.SPI->ch1;
   1b474:	693a      	ldr	r2, [r7, #16]
   1b476:	f8c4 22bc 	str.w	r2, [r4, #700]	; 0x2bc
	TMC5161_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
   1b47a:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   1b47e:	6053      	str	r3, [r2, #4]

	Evalboards.ch1.config->reset        = reset;
   1b480:	69ab      	ldr	r3, [r5, #24]
   1b482:	4a20      	ldr	r2, [pc, #128]	; (1b504 <TMC5161_init+0x180>)
   1b484:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   1b488:	4a1f      	ldr	r2, [pc, #124]	; (1b508 <TMC5161_init+0x184>)
   1b48a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_RESET;
   1b48e:	2201      	movs	r2, #1
   1b490:	801a      	strh	r2, [r3, #0]
	Evalboards.ch1.config->configIndex  = 0;

	Evalboards.ch1.rotate               = rotate;
   1b492:	4b1e      	ldr	r3, [pc, #120]	; (1b50c <TMC5161_init+0x188>)
   1b494:	626b      	str	r3, [r5, #36]	; 0x24
	Evalboards.ch1.right                = right;
   1b496:	4b1e      	ldr	r3, [pc, #120]	; (1b510 <TMC5161_init+0x18c>)
   1b498:	622b      	str	r3, [r5, #32]
	Evalboards.ch1.left                 = left;
   1b49a:	4b1e      	ldr	r3, [pc, #120]	; (1b514 <TMC5161_init+0x190>)
   1b49c:	61eb      	str	r3, [r5, #28]
	Evalboards.ch1.stop                 = stop;
   1b49e:	4b1e      	ldr	r3, [pc, #120]	; (1b518 <TMC5161_init+0x194>)
   1b4a0:	62ab      	str	r3, [r5, #40]	; 0x28
	Evalboards.ch1.GAP                  = GAP;
   1b4a2:	4b1e      	ldr	r3, [pc, #120]	; (1b51c <TMC5161_init+0x198>)
   1b4a4:	63eb      	str	r3, [r5, #60]	; 0x3c
	Evalboards.ch1.SAP                  = SAP;
   1b4a6:	4b1e      	ldr	r3, [pc, #120]	; (1b520 <TMC5161_init+0x19c>)
   1b4a8:	63ab      	str	r3, [r5, #56]	; 0x38
	Evalboards.ch1.moveTo               = moveTo;
   1b4aa:	4b1e      	ldr	r3, [pc, #120]	; (1b524 <TMC5161_init+0x1a0>)
   1b4ac:	62eb      	str	r3, [r5, #44]	; 0x2c
	Evalboards.ch1.moveBy               = moveBy;
   1b4ae:	4b1e      	ldr	r3, [pc, #120]	; (1b528 <TMC5161_init+0x1a4>)
   1b4b0:	632b      	str	r3, [r5, #48]	; 0x30
	Evalboards.ch1.writeRegister        = writeRegister;
   1b4b2:	4b1e      	ldr	r3, [pc, #120]	; (1b52c <TMC5161_init+0x1a8>)
   1b4b4:	64eb      	str	r3, [r5, #76]	; 0x4c
	Evalboards.ch1.readRegister         = readRegister;
   1b4b6:	4b1e      	ldr	r3, [pc, #120]	; (1b530 <TMC5161_init+0x1ac>)
   1b4b8:	64ab      	str	r3, [r5, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   1b4ba:	4b1e      	ldr	r3, [pc, #120]	; (1b534 <TMC5161_init+0x1b0>)
   1b4bc:	65ab      	str	r3, [r5, #88]	; 0x58
	Evalboards.ch1.userFunction         = userFunction;
   1b4be:	4b1e      	ldr	r3, [pc, #120]	; (1b538 <TMC5161_init+0x1b4>)
   1b4c0:	656b      	str	r3, [r5, #84]	; 0x54
	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
   1b4c2:	4b1e      	ldr	r3, [pc, #120]	; (1b53c <TMC5161_init+0x1b8>)
   1b4c4:	652b      	str	r3, [r5, #80]	; 0x50
	Evalboards.ch1.enableDriver         = enableDriver;
   1b4c6:	4b1e      	ldr	r3, [pc, #120]	; (1b540 <TMC5161_init+0x1bc>)
   1b4c8:	666b      	str	r3, [r5, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   1b4ca:	4b1e      	ldr	r3, [pc, #120]	; (1b544 <TMC5161_init+0x1c0>)
   1b4cc:	662b      	str	r3, [r5, #96]	; 0x60
	Evalboards.ch1.numberOfMotors       = TMC5161_MOTORS;
   1b4ce:	752a      	strb	r2, [r5, #20]
	Evalboards.ch1.VMMin                = VM_MIN;
	Evalboards.ch1.VMMax                = VM_MAX;
   1b4d0:	f44f 7325 	mov.w	r3, #660	; 0x294
   1b4d4:	2232      	movs	r2, #50	; 0x32
   1b4d6:	e9c5 3203 	strd	r3, r2, [r5, #12]
	Evalboards.ch1.deInit               = deInit;
   1b4da:	4b1b      	ldr	r3, [pc, #108]	; (1b548 <TMC5161_init+0x1c4>)
   1b4dc:	65eb      	str	r3, [r5, #92]	; 0x5c

	vmax_position = TMC5161.config->shadowRegister[TMC5161_VMAX];
   1b4de:	6823      	ldr	r3, [r4, #0]
   1b4e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1b4e4:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8

	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1b4e8:	2002      	movs	r0, #2
};
   1b4ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1b4ee:	e701      	b.n	1b2f4 <enableDriver>
   1b4f0:	1fff426c 	.word	0x1fff426c
   1b4f4:	1fff5e88 	.word	0x1fff5e88
   1b4f8:	00029af8 	.word	0x00029af8
   1b4fc:	00029d1c 	.word	0x00029d1c
   1b500:	0001b339 	.word	0x0001b339
   1b504:	0001b2bd 	.word	0x0001b2bd
   1b508:	0001b2b1 	.word	0x0001b2b1
   1b50c:	0001b2a1 	.word	0x0001b2a1
   1b510:	0001b291 	.word	0x0001b291
   1b514:	0001b281 	.word	0x0001b281
   1b518:	0001b271 	.word	0x0001b271
   1b51c:	0001b23d 	.word	0x0001b23d
   1b520:	0001b229 	.word	0x0001b229
   1b524:	0001b25d 	.word	0x0001b25d
   1b528:	0001b247 	.word	0x0001b247
   1b52c:	0001a575 	.word	0x0001a575
   1b530:	0001a561 	.word	0x0001a561
   1b534:	0001a555 	.word	0x0001a555
   1b538:	0001a359 	.word	0x0001a359
   1b53c:	0001a339 	.word	0x0001a339
   1b540:	0001b2f5 	.word	0x0001b2f5
   1b544:	0001a34d 	.word	0x0001a34d
   1b548:	0001a4bd 	.word	0x0001a4bd

0001b54c <rotate>:

static uint32_t rotate(uint8_t motor, int32_t velocity)
{
	UNUSED(velocity);

	if(motor >= TMC6100_MOTORS)
   1b54c:	2800      	cmp	r0, #0
		return TMC_ERROR_MOTOR;

	return TMC_ERROR_NONE;
}
   1b54e:	bf14      	ite	ne
   1b550:	2008      	movne	r0, #8
   1b552:	2000      	moveq	r0, #0
   1b554:	4770      	bx	lr

0001b556 <right>:
	if(motor >= TMC6100_MOTORS)
   1b556:	2800      	cmp	r0, #0

static uint32_t right(uint8_t motor, int32_t velocity)
{
	return rotate(motor, velocity);
}
   1b558:	bf14      	ite	ne
   1b55a:	2008      	movne	r0, #8
   1b55c:	2000      	moveq	r0, #0
   1b55e:	4770      	bx	lr

0001b560 <stop>:
	if(motor >= TMC6100_MOTORS)
   1b560:	2800      	cmp	r0, #0
}

static uint32_t stop(uint8_t motor)
{
	return rotate(motor, 0);
}
   1b562:	bf14      	ite	ne
   1b564:	2008      	movne	r0, #8
   1b566:	2000      	moveq	r0, #0
   1b568:	4770      	bx	lr

0001b56a <moveBy>:

static uint32_t moveTo(uint8_t motor, int32_t position)
{
	UNUSED(position);

	if(motor >= TMC6100_MOTORS)
   1b56a:	2800      	cmp	r0, #0
}

static uint32_t moveBy(uint8_t motor, int32_t *ticks)
{
	return moveTo(motor, *ticks);
}
   1b56c:	bf14      	ite	ne
   1b56e:	2008      	movne	r0, #8
   1b570:	2000      	moveq	r0, #0
   1b572:	4770      	bx	lr

0001b574 <SAP>:
	UNUSED(readWrite);
	UNUSED(value);

	uint32_t errors = TMC_ERROR_NONE;

	if(motor >= TMC6100_MOTORS)
   1b574:	2900      	cmp	r1, #0
}

static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
{
	return handleParameter(WRITE, motor, type, &value);
}
   1b576:	bf0c      	ite	eq
   1b578:	2004      	moveq	r0, #4
   1b57a:	2008      	movne	r0, #8
   1b57c:	4770      	bx	lr

0001b57e <GAP>:
	if(motor >= TMC6100_MOTORS)
   1b57e:	2900      	cmp	r1, #0

static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
{
	return handleParameter(READ, motor, type, value);
}
   1b580:	bf0c      	ite	eq
   1b582:	2004      	moveq	r0, #4
   1b584:	2008      	movne	r0, #8
   1b586:	4770      	bx	lr

0001b588 <getMeasuredSpeed>:

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	UNUSED(value);

	if(motor >= TMC6100_MOTORS)
   1b588:	2800      	cmp	r0, #0
		return TMC_ERROR_MOTOR;

	return TMC_ERROR_NONE;
}
   1b58a:	bf14      	ite	ne
   1b58c:	2008      	movne	r0, #8
   1b58e:	2000      	moveq	r0, #0
   1b590:	4770      	bx	lr

0001b592 <periodicJob>:
}

static void periodicJob(uint32_t tick)
{
	UNUSED(tick);
}
   1b592:	4770      	bx	lr

0001b594 <checkErrors>:

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
   1b594:	4b02      	ldr	r3, [pc, #8]	; (1b5a0 <checkErrors+0xc>)
   1b596:	2200      	movs	r2, #0
   1b598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1b59c:	4770      	bx	lr
   1b59e:	bf00      	nop
   1b5a0:	1fff5e88 	.word	0x1fff5e88

0001b5a4 <userFunction>:
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);

	return 0;
}
   1b5a4:	2000      	movs	r0, #0
   1b5a6:	4770      	bx	lr

0001b5a8 <deInit>:

static void deInit(void)
{
};
   1b5a8:	4770      	bx	lr

0001b5aa <enableDriver>:
}

static void enableDriver(DriverState state)
{
	UNUSED(state);
}
   1b5aa:	4770      	bx	lr

0001b5ac <writeRegister>:
	tmc6100_writeInt(TMC6100_DEFAULT_MOTOR, address, value);
   1b5ac:	2000      	movs	r0, #0
   1b5ae:	f009 b831 	b.w	24614 <tmc6100_writeInt>

0001b5b2 <reset>:
{
   1b5b2:	b508      	push	{r3, lr}
	tmc6100_writeInt(TMC6100_DEFAULT_MOTOR, TMC6100_GCONF, 0x40);
   1b5b4:	2100      	movs	r1, #0
   1b5b6:	4608      	mov	r0, r1
   1b5b8:	2240      	movs	r2, #64	; 0x40
   1b5ba:	f009 f82b 	bl	24614 <tmc6100_writeInt>
}
   1b5be:	2001      	movs	r0, #1
   1b5c0:	bd08      	pop	{r3, pc}

0001b5c2 <restore>:
   1b5c2:	e7f6      	b.n	1b5b2 <reset>

0001b5c4 <readRegister>:
{
   1b5c4:	b510      	push	{r4, lr}
	*value = tmc6100_readInt(TMC6100_DEFAULT_MOTOR, address);
   1b5c6:	2000      	movs	r0, #0
{
   1b5c8:	4614      	mov	r4, r2
	*value = tmc6100_readInt(TMC6100_DEFAULT_MOTOR, address);
   1b5ca:	f009 f801 	bl	245d0 <tmc6100_readInt>
   1b5ce:	6020      	str	r0, [r4, #0]
}
   1b5d0:	bd10      	pop	{r4, pc}

0001b5d2 <moveTo>:
   1b5d2:	2800      	cmp	r0, #0
   1b5d4:	bf14      	ite	ne
   1b5d6:	2008      	movne	r0, #8
   1b5d8:	2000      	moveq	r0, #0
   1b5da:	4770      	bx	lr

0001b5dc <left>:
   1b5dc:	2800      	cmp	r0, #0
   1b5de:	bf14      	ite	ne
   1b5e0:	2008      	movne	r0, #8
   1b5e2:	2000      	moveq	r0, #0
   1b5e4:	4770      	bx	lr

0001b5e6 <tmc6100_readwriteByte>:
{
   1b5e6:	4603      	mov	r3, r0
   1b5e8:	4608      	mov	r0, r1
   1b5ea:	4611      	mov	r1, r2
	if (motor == TMC6100_DEFAULT_MOTOR)
   1b5ec:	b91b      	cbnz	r3, 1b5f6 <tmc6100_readwriteByte+0x10>
		return TMC6100_SPIChannel->readWrite(data, lastTransfer);
   1b5ee:	4b03      	ldr	r3, [pc, #12]	; (1b5fc <tmc6100_readwriteByte+0x16>)
   1b5f0:	681b      	ldr	r3, [r3, #0]
   1b5f2:	689b      	ldr	r3, [r3, #8]
   1b5f4:	4718      	bx	r3
}
   1b5f6:	2000      	movs	r0, #0
   1b5f8:	4770      	bx	lr
   1b5fa:	bf00      	nop
   1b5fc:	1fff6534 	.word	0x1fff6534

0001b600 <TMC6100_init>:

void TMC6100_init(void)
{
	TMC6100_SPIChannel = &HAL.SPI->ch2;
   1b600:	4b28      	ldr	r3, [pc, #160]	; (1b6a4 <TMC6100_init+0xa4>)
   1b602:	4929      	ldr	r1, [pc, #164]	; (1b6a8 <TMC6100_init+0xa8>)
   1b604:	691a      	ldr	r2, [r3, #16]
	TMC6100_SPIChannel->CSN = &HAL.IOs->pins->SPI2_CSN0;
   1b606:	68db      	ldr	r3, [r3, #12]
   1b608:	685b      	ldr	r3, [r3, #4]
   1b60a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1b60e:	6193      	str	r3, [r2, #24]

	Evalboards.ch2.config->reset        = reset;
   1b610:	4b26      	ldr	r3, [pc, #152]	; (1b6ac <TMC6100_init+0xac>)
	TMC6100_SPIChannel = &HAL.SPI->ch2;
   1b612:	f102 0014 	add.w	r0, r2, #20
	Evalboards.ch2.config->reset        = reset;
   1b616:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	TMC6100_SPIChannel = &HAL.SPI->ch2;
   1b61a:	6008      	str	r0, [r1, #0]
	Evalboards.ch2.config->reset        = reset;
   1b61c:	4924      	ldr	r1, [pc, #144]	; (1b6b0 <TMC6100_init+0xb0>)
   1b61e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
   1b622:	4924      	ldr	r1, [pc, #144]	; (1b6b4 <TMC6100_init+0xb4>)
   1b624:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
   1b628:	2101      	movs	r1, #1
   1b62a:	8011      	strh	r1, [r2, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
   1b62c:	4a22      	ldr	r2, [pc, #136]	; (1b6b8 <TMC6100_init+0xb8>)
   1b62e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
   1b632:	4a22      	ldr	r2, [pc, #136]	; (1b6bc <TMC6100_init+0xbc>)
   1b634:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
   1b638:	4a21      	ldr	r2, [pc, #132]	; (1b6c0 <TMC6100_init+0xc0>)
   1b63a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
   1b63e:	4a21      	ldr	r2, [pc, #132]	; (1b6c4 <TMC6100_init+0xc4>)
   1b640:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
   1b644:	4a20      	ldr	r2, [pc, #128]	; (1b6c8 <TMC6100_init+0xc8>)
   1b646:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
   1b64a:	4a20      	ldr	r2, [pc, #128]	; (1b6cc <TMC6100_init+0xcc>)
   1b64c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
   1b650:	4a1f      	ldr	r2, [pc, #124]	; (1b6d0 <TMC6100_init+0xd0>)
   1b652:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
   1b656:	4a1f      	ldr	r2, [pc, #124]	; (1b6d4 <TMC6100_init+0xd4>)
   1b658:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
   1b65c:	4a1e      	ldr	r2, [pc, #120]	; (1b6d8 <TMC6100_init+0xd8>)
   1b65e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
   1b662:	4a1e      	ldr	r2, [pc, #120]	; (1b6dc <TMC6100_init+0xdc>)
   1b664:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
   1b668:	4a1d      	ldr	r2, [pc, #116]	; (1b6e0 <TMC6100_init+0xe0>)
   1b66a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
   1b66e:	4a1d      	ldr	r2, [pc, #116]	; (1b6e4 <TMC6100_init+0xe4>)
   1b670:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
   1b674:	4a1c      	ldr	r2, [pc, #112]	; (1b6e8 <TMC6100_init+0xe8>)
   1b676:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
   1b67a:	4a1c      	ldr	r2, [pc, #112]	; (1b6ec <TMC6100_init+0xec>)
   1b67c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
   1b680:	4a1b      	ldr	r2, [pc, #108]	; (1b6f0 <TMC6100_init+0xf0>)
   1b682:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = TMC6100_MOTORS;
   1b686:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
   1b68a:	f240 2226 	movw	r2, #550	; 0x226
   1b68e:	2132      	movs	r1, #50	; 0x32
   1b690:	e9c3 2121 	strd	r2, r1, [r3, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
   1b694:	4a17      	ldr	r2, [pc, #92]	; (1b6f4 <TMC6100_init+0xf4>)
   1b696:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	// set default PWM configuration for evaluation board use with TMC467x-EVAL
	tmc6100_writeInt(TMC6100_DEFAULT_MOTOR, TMC6100_GCONF, 0x40);
   1b69a:	2100      	movs	r1, #0
   1b69c:	2240      	movs	r2, #64	; 0x40
   1b69e:	4608      	mov	r0, r1
   1b6a0:	f008 bfb8 	b.w	24614 <tmc6100_writeInt>
   1b6a4:	00029d1c 	.word	0x00029d1c
   1b6a8:	1fff6534 	.word	0x1fff6534
   1b6ac:	1fff5e88 	.word	0x1fff5e88
   1b6b0:	0001b5b3 	.word	0x0001b5b3
   1b6b4:	0001b5c3 	.word	0x0001b5c3
   1b6b8:	0001b54d 	.word	0x0001b54d
   1b6bc:	0001b557 	.word	0x0001b557
   1b6c0:	0001b5dd 	.word	0x0001b5dd
   1b6c4:	0001b561 	.word	0x0001b561
   1b6c8:	0001b57f 	.word	0x0001b57f
   1b6cc:	0001b575 	.word	0x0001b575
   1b6d0:	0001b5d3 	.word	0x0001b5d3
   1b6d4:	0001b56b 	.word	0x0001b56b
   1b6d8:	0001b5ad 	.word	0x0001b5ad
   1b6dc:	0001b5c5 	.word	0x0001b5c5
   1b6e0:	0001b593 	.word	0x0001b593
   1b6e4:	0001b5a5 	.word	0x0001b5a5
   1b6e8:	0001b589 	.word	0x0001b589
   1b6ec:	0001b5ab 	.word	0x0001b5ab
   1b6f0:	0001b595 	.word	0x0001b595
   1b6f4:	0001b5a9 	.word	0x0001b5a9

0001b6f8 <rotate>:

static uint32_t rotate(uint8_t motor, int32_t velocity)
{
	UNUSED(velocity);

	if(motor >= TMC6200_MOTORS)
   1b6f8:	2800      	cmp	r0, #0
		return TMC_ERROR_MOTOR;

	return TMC_ERROR_NONE;
}
   1b6fa:	bf14      	ite	ne
   1b6fc:	2008      	movne	r0, #8
   1b6fe:	2000      	moveq	r0, #0
   1b700:	4770      	bx	lr

0001b702 <right>:
	if(motor >= TMC6200_MOTORS)
   1b702:	2800      	cmp	r0, #0

static uint32_t right(uint8_t motor, int32_t velocity)
{
	return rotate(motor, velocity);
}
   1b704:	bf14      	ite	ne
   1b706:	2008      	movne	r0, #8
   1b708:	2000      	moveq	r0, #0
   1b70a:	4770      	bx	lr

0001b70c <stop>:
	if(motor >= TMC6200_MOTORS)
   1b70c:	2800      	cmp	r0, #0
}

static uint32_t stop(uint8_t motor)
{
	return rotate(motor, 0);
}
   1b70e:	bf14      	ite	ne
   1b710:	2008      	movne	r0, #8
   1b712:	2000      	moveq	r0, #0
   1b714:	4770      	bx	lr

0001b716 <moveBy>:

static uint32_t moveTo(uint8_t motor, int32_t position)
{
	UNUSED(position);

	if(motor >= TMC6200_MOTORS)
   1b716:	2800      	cmp	r0, #0
}

static uint32_t moveBy(uint8_t motor, int32_t *ticks)
{
	return moveTo(motor, *ticks);
}
   1b718:	bf14      	ite	ne
   1b71a:	2008      	movne	r0, #8
   1b71c:	2000      	moveq	r0, #0
   1b71e:	4770      	bx	lr

0001b720 <SAP>:
	UNUSED(readWrite);
	UNUSED(value);

	uint32_t errors = TMC_ERROR_NONE;

	if(motor >= TMC6200_MOTORS)
   1b720:	2900      	cmp	r1, #0
}

static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
{
	return handleParameter(WRITE, motor, type, &value);
}
   1b722:	bf0c      	ite	eq
   1b724:	2004      	moveq	r0, #4
   1b726:	2008      	movne	r0, #8
   1b728:	4770      	bx	lr

0001b72a <GAP>:
	if(motor >= TMC6200_MOTORS)
   1b72a:	2900      	cmp	r1, #0

static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
{
	return handleParameter(READ, motor, type, value);
}
   1b72c:	bf0c      	ite	eq
   1b72e:	2004      	moveq	r0, #4
   1b730:	2008      	movne	r0, #8
   1b732:	4770      	bx	lr

0001b734 <getMeasuredSpeed>:

static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
{
	UNUSED(value);

	if(motor >= TMC6200_MOTORS)
   1b734:	2800      	cmp	r0, #0
		return TMC_ERROR_MOTOR;

	return TMC_ERROR_NONE;
}
   1b736:	bf14      	ite	ne
   1b738:	2008      	movne	r0, #8
   1b73a:	2000      	moveq	r0, #0
   1b73c:	4770      	bx	lr

0001b73e <periodicJob>:
}

static void periodicJob(uint32_t tick)
{
	UNUSED(tick);
}
   1b73e:	4770      	bx	lr

0001b740 <checkErrors>:

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch2.errors = 0;
   1b740:	4b02      	ldr	r3, [pc, #8]	; (1b74c <checkErrors+0xc>)
   1b742:	2200      	movs	r2, #0
   1b744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1b748:	4770      	bx	lr
   1b74a:	bf00      	nop
   1b74c:	1fff5e88 	.word	0x1fff5e88

0001b750 <userFunction>:
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);

	return 0;
}
   1b750:	2000      	movs	r0, #0
   1b752:	4770      	bx	lr

0001b754 <deInit>:

static void deInit(void)
{
};
   1b754:	4770      	bx	lr

0001b756 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	UNUSED(state);
}
   1b756:	4770      	bx	lr

0001b758 <writeRegister>:
	tmc6200_writeInt(TMC6200_DEFAULT_MOTOR, address, value);
   1b758:	2000      	movs	r0, #0
   1b75a:	f008 bf9d 	b.w	24698 <tmc6200_writeInt>

0001b75e <reset>:
{
   1b75e:	b508      	push	{r3, lr}
	tmc6200_writeInt(TMC6200_DEFAULT_MOTOR, TMC6200_GCONF, 0x0);
   1b760:	2200      	movs	r2, #0
   1b762:	4610      	mov	r0, r2
   1b764:	4611      	mov	r1, r2
   1b766:	f008 ff97 	bl	24698 <tmc6200_writeInt>
}
   1b76a:	2001      	movs	r0, #1
   1b76c:	bd08      	pop	{r3, pc}

0001b76e <restore>:
   1b76e:	e7f6      	b.n	1b75e <reset>

0001b770 <readRegister>:
{
   1b770:	b510      	push	{r4, lr}
	*value = tmc6200_readInt(TMC6200_DEFAULT_MOTOR, address);
   1b772:	2000      	movs	r0, #0
{
   1b774:	4614      	mov	r4, r2
	*value = tmc6200_readInt(TMC6200_DEFAULT_MOTOR, address);
   1b776:	f008 ff6d 	bl	24654 <tmc6200_readInt>
   1b77a:	6020      	str	r0, [r4, #0]
}
   1b77c:	bd10      	pop	{r4, pc}

0001b77e <moveTo>:
   1b77e:	2800      	cmp	r0, #0
   1b780:	bf14      	ite	ne
   1b782:	2008      	movne	r0, #8
   1b784:	2000      	moveq	r0, #0
   1b786:	4770      	bx	lr

0001b788 <left>:
   1b788:	2800      	cmp	r0, #0
   1b78a:	bf14      	ite	ne
   1b78c:	2008      	movne	r0, #8
   1b78e:	2000      	moveq	r0, #0
   1b790:	4770      	bx	lr

0001b792 <tmc6200_readwriteByte>:
{
   1b792:	4603      	mov	r3, r0
   1b794:	4608      	mov	r0, r1
   1b796:	4611      	mov	r1, r2
	if (motor == TMC6200_DEFAULT_MOTOR)
   1b798:	b91b      	cbnz	r3, 1b7a2 <tmc6200_readwriteByte+0x10>
		return TMC6200_SPIChannel->readWrite(data, lastTransfer);
   1b79a:	4b03      	ldr	r3, [pc, #12]	; (1b7a8 <tmc6200_readwriteByte+0x16>)
   1b79c:	681b      	ldr	r3, [r3, #0]
   1b79e:	689b      	ldr	r3, [r3, #8]
   1b7a0:	4718      	bx	r3
}
   1b7a2:	2000      	movs	r0, #0
   1b7a4:	4770      	bx	lr
   1b7a6:	bf00      	nop
   1b7a8:	1fff6538 	.word	0x1fff6538

0001b7ac <TMC6200_init>:

void TMC6200_init(void)
{
	TMC6200_SPIChannel = &HAL.SPI->ch2;
   1b7ac:	4b28      	ldr	r3, [pc, #160]	; (1b850 <TMC6200_init+0xa4>)
   1b7ae:	4929      	ldr	r1, [pc, #164]	; (1b854 <TMC6200_init+0xa8>)
   1b7b0:	691a      	ldr	r2, [r3, #16]
	TMC6200_SPIChannel->CSN = &HAL.IOs->pins->SPI2_CSN0;
   1b7b2:	68db      	ldr	r3, [r3, #12]
   1b7b4:	685b      	ldr	r3, [r3, #4]
   1b7b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1b7ba:	6193      	str	r3, [r2, #24]

	Evalboards.ch2.config->reset        = reset;
   1b7bc:	4b26      	ldr	r3, [pc, #152]	; (1b858 <TMC6200_init+0xac>)
	TMC6200_SPIChannel = &HAL.SPI->ch2;
   1b7be:	f102 0014 	add.w	r0, r2, #20
	Evalboards.ch2.config->reset        = reset;
   1b7c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	TMC6200_SPIChannel = &HAL.SPI->ch2;
   1b7c6:	6008      	str	r0, [r1, #0]
	Evalboards.ch2.config->reset        = reset;
   1b7c8:	4924      	ldr	r1, [pc, #144]	; (1b85c <TMC6200_init+0xb0>)
   1b7ca:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
   1b7ce:	4924      	ldr	r1, [pc, #144]	; (1b860 <TMC6200_init+0xb4>)
   1b7d0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_RESET;
   1b7d4:	2101      	movs	r1, #1
   1b7d6:	8011      	strh	r1, [r2, #0]
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
   1b7d8:	4a22      	ldr	r2, [pc, #136]	; (1b864 <TMC6200_init+0xb8>)
   1b7da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
   1b7de:	4a22      	ldr	r2, [pc, #136]	; (1b868 <TMC6200_init+0xbc>)
   1b7e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
   1b7e4:	4a21      	ldr	r2, [pc, #132]	; (1b86c <TMC6200_init+0xc0>)
   1b7e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
   1b7ea:	4a21      	ldr	r2, [pc, #132]	; (1b870 <TMC6200_init+0xc4>)
   1b7ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Evalboards.ch2.GAP                  = GAP;
   1b7f0:	4a20      	ldr	r2, [pc, #128]	; (1b874 <TMC6200_init+0xc8>)
   1b7f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
   1b7f6:	4a20      	ldr	r2, [pc, #128]	; (1b878 <TMC6200_init+0xcc>)
   1b7f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
   1b7fc:	4a1f      	ldr	r2, [pc, #124]	; (1b87c <TMC6200_init+0xd0>)
   1b7fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
   1b802:	4a1f      	ldr	r2, [pc, #124]	; (1b880 <TMC6200_init+0xd4>)
   1b804:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
   1b808:	4a1e      	ldr	r2, [pc, #120]	; (1b884 <TMC6200_init+0xd8>)
   1b80a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
   1b80e:	4a1e      	ldr	r2, [pc, #120]	; (1b888 <TMC6200_init+0xdc>)
   1b810:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
   1b814:	4a1d      	ldr	r2, [pc, #116]	; (1b88c <TMC6200_init+0xe0>)
   1b816:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
   1b81a:	4a1d      	ldr	r2, [pc, #116]	; (1b890 <TMC6200_init+0xe4>)
   1b81c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
   1b820:	4a1c      	ldr	r2, [pc, #112]	; (1b894 <TMC6200_init+0xe8>)
   1b822:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	Evalboards.ch2.enableDriver         = enableDriver;
   1b826:	4a1c      	ldr	r2, [pc, #112]	; (1b898 <TMC6200_init+0xec>)
   1b828:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
   1b82c:	4a1b      	ldr	r2, [pc, #108]	; (1b89c <TMC6200_init+0xf0>)
   1b82e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = TMC6200_MOTORS;
   1b832:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
	Evalboards.ch2.VMMin                = VM_MIN;
	Evalboards.ch2.VMMax                = VM_MAX;
   1b836:	f44f 7225 	mov.w	r2, #660	; 0x294
   1b83a:	2132      	movs	r1, #50	; 0x32
   1b83c:	e9c3 2121 	strd	r2, r1, [r3, #132]	; 0x84
	Evalboards.ch2.deInit               = deInit;
   1b840:	4a17      	ldr	r2, [pc, #92]	; (1b8a0 <TMC6200_init+0xf4>)
   1b842:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	// set default PWM configuration for evaluation board use with TMC467x-EVAL
	tmc6200_writeInt(TMC6200_DEFAULT_MOTOR, TMC6200_GCONF, 0x0);
   1b846:	2200      	movs	r2, #0
   1b848:	4611      	mov	r1, r2
   1b84a:	4610      	mov	r0, r2
   1b84c:	f008 bf24 	b.w	24698 <tmc6200_writeInt>
   1b850:	00029d1c 	.word	0x00029d1c
   1b854:	1fff6538 	.word	0x1fff6538
   1b858:	1fff5e88 	.word	0x1fff5e88
   1b85c:	0001b75f 	.word	0x0001b75f
   1b860:	0001b76f 	.word	0x0001b76f
   1b864:	0001b6f9 	.word	0x0001b6f9
   1b868:	0001b703 	.word	0x0001b703
   1b86c:	0001b789 	.word	0x0001b789
   1b870:	0001b70d 	.word	0x0001b70d
   1b874:	0001b72b 	.word	0x0001b72b
   1b878:	0001b721 	.word	0x0001b721
   1b87c:	0001b77f 	.word	0x0001b77f
   1b880:	0001b717 	.word	0x0001b717
   1b884:	0001b759 	.word	0x0001b759
   1b888:	0001b771 	.word	0x0001b771
   1b88c:	0001b73f 	.word	0x0001b73f
   1b890:	0001b751 	.word	0x0001b751
   1b894:	0001b735 	.word	0x0001b735
   1b898:	0001b757 	.word	0x0001b757
   1b89c:	0001b741 	.word	0x0001b741
   1b8a0:	0001b755 	.word	0x0001b755

0001b8a4 <periodicJob>:
}

static void periodicJob(uint32_t actualSystick)
{
	UNUSED(actualSystick);
}
   1b8a4:	4770      	bx	lr

0001b8a6 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	UNUSED(state);
}
   1b8a6:	4770      	bx	lr

0001b8a8 <deInit>:

static void deInit(void)
{

}
   1b8a8:	4770      	bx	lr

0001b8aa <reset>:

static uint8_t reset()
{
	return 1;
}
   1b8aa:	2001      	movs	r0, #1
   1b8ac:	4770      	bx	lr

0001b8ae <checkErrors>:

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);

	Evalboards.ch1.errors = 0;
   1b8ae:	4b03      	ldr	r3, [pc, #12]	; (1b8bc <checkErrors+0xe>)
   1b8b0:	2200      	movs	r2, #0
   1b8b2:	609a      	str	r2, [r3, #8]
	Evalboards.ch2.errors = 0;
   1b8b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1b8b8:	4770      	bx	lr
   1b8ba:	bf00      	nop
   1b8bc:	1fff5e88 	.word	0x1fff5e88

0001b8c0 <memory_write>:
	tmc8461_esc_write_8(&tmc8461, (motor << 8) | address, BYTE(value, 0));
   1b8c0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1b8c4:	b2d2      	uxtb	r2, r2
   1b8c6:	4801      	ldr	r0, [pc, #4]	; (1b8cc <memory_write+0xc>)
   1b8c8:	f009 b801 	b.w	248ce <tmc8461_esc_write_8>
   1b8cc:	1fff6544 	.word	0x1fff6544

0001b8d0 <memory_read>:
{
   1b8d0:	b510      	push	{r4, lr}
	*value = tmc8461_esc_read_16(&tmc8461, (motor << 8) | address);
   1b8d2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1b8d6:	4803      	ldr	r0, [pc, #12]	; (1b8e4 <memory_read+0x14>)
{
   1b8d8:	4614      	mov	r4, r2
	*value = tmc8461_esc_read_16(&tmc8461, (motor << 8) | address);
   1b8da:	f008 ffc3 	bl	24864 <tmc8461_esc_read_16>
   1b8de:	6020      	str	r0, [r4, #0]
}
   1b8e0:	bd10      	pop	{r4, pc}
   1b8e2:	bf00      	nop
   1b8e4:	1fff6544 	.word	0x1fff6544

0001b8e8 <register_write>:
{
   1b8e8:	b470      	push	{r4, r5, r6}
   1b8ea:	4b0c      	ldr	r3, [pc, #48]	; (1b91c <register_write+0x34>)
	switch(motor)
   1b8ec:	28ff      	cmp	r0, #255	; 0xff
   1b8ee:	b2d6      	uxtb	r6, r2
   1b8f0:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1b8f4:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1b8f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
		write_buffer[7] = BYTE(value, 3);
   1b8fc:	bf09      	itett	eq
   1b8fe:	71da      	strbeq	r2, [r3, #7]
		write_buffer[3] = BYTE(value, 3);
   1b900:	70da      	strbne	r2, [r3, #3]
		write_buffer[4] = BYTE(value, 0);
   1b902:	711e      	strbeq	r6, [r3, #4]
		write_buffer[5] = BYTE(value, 1);
   1b904:	715d      	strbeq	r5, [r3, #5]
		write_buffer[6] = BYTE(value, 2);
   1b906:	bf0f      	iteee	eq
   1b908:	719c      	strbeq	r4, [r3, #6]
		write_buffer[0] = BYTE(value, 0);
   1b90a:	701e      	strbne	r6, [r3, #0]
		write_buffer[1] = BYTE(value, 1);
   1b90c:	705d      	strbne	r5, [r3, #1]
		write_buffer[2] = BYTE(value, 2);
   1b90e:	709c      	strbne	r4, [r3, #2]
}
   1b910:	bc70      	pop	{r4, r5, r6}
	tmc8461_mfc_write_auto(&tmc8461, _address, write_buffer);
   1b912:	4a02      	ldr	r2, [pc, #8]	; (1b91c <register_write+0x34>)
   1b914:	4802      	ldr	r0, [pc, #8]	; (1b920 <register_write+0x38>)
	uint16_t _address = TMC8461_MFC(address);
   1b916:	0109      	lsls	r1, r1, #4
	tmc8461_mfc_write_auto(&tmc8461, _address, write_buffer);
   1b918:	f009 b880 	b.w	24a1c <tmc8461_mfc_write_auto>
   1b91c:	1fff4538 	.word	0x1fff4538
   1b920:	1fff6544 	.word	0x1fff6544

0001b924 <user_function>:
	switch(type)
   1b924:	2801      	cmp	r0, #1
{
   1b926:	b538      	push	{r3, r4, r5, lr}
   1b928:	4615      	mov	r5, r2
	switch(type)
   1b92a:	d015      	beq.n	1b958 <user_function+0x34>
   1b92c:	2802      	cmp	r0, #2
   1b92e:	d055      	beq.n	1b9dc <user_function+0xb8>
   1b930:	2800      	cmp	r0, #0
   1b932:	f040 8094 	bne.w	1ba5e <user_function+0x13a>
	tmc8461_esc_write_8(&tmc8461, TMC8461_ESC_RESET_PDI, TMC8461_MAGIC_RESET_0);
   1b936:	484b      	ldr	r0, [pc, #300]	; (1ba64 <user_function+0x140>)
   1b938:	2252      	movs	r2, #82	; 0x52
   1b93a:	2141      	movs	r1, #65	; 0x41
   1b93c:	f008 ffc7 	bl	248ce <tmc8461_esc_write_8>
	tmc8461_esc_write_8(&tmc8461, TMC8461_ESC_RESET_PDI, TMC8461_MAGIC_RESET_1);
   1b940:	4848      	ldr	r0, [pc, #288]	; (1ba64 <user_function+0x140>)
   1b942:	2245      	movs	r2, #69	; 0x45
   1b944:	2141      	movs	r1, #65	; 0x41
   1b946:	f008 ffc2 	bl	248ce <tmc8461_esc_write_8>
	tmc8461_esc_write_8(&tmc8461, TMC8461_ESC_RESET_PDI, TMC8461_MAGIC_RESET_2);
   1b94a:	4846      	ldr	r0, [pc, #280]	; (1ba64 <user_function+0x140>)
   1b94c:	2253      	movs	r2, #83	; 0x53
   1b94e:	2141      	movs	r1, #65	; 0x41
   1b950:	f008 ffbd 	bl	248ce <tmc8461_esc_write_8>
	return TMC_ERROR_NONE;
   1b954:	2000      	movs	r0, #0
   1b956:	e007      	b.n	1b968 <user_function+0x44>
	if (!TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_8, TMC8461_ESC_EEP_CFG, TMC8461_ESC_EEP_PDI_MASK, TMC8461_ESC_EEP_PDI_SHIFT))
   1b958:	4842      	ldr	r0, [pc, #264]	; (1ba64 <user_function+0x140>)
   1b95a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1b95e:	f008 ff72 	bl	24846 <tmc8461_esc_read_8>
   1b962:	07c2      	lsls	r2, r0, #31
   1b964:	d401      	bmi.n	1b96a <user_function+0x46>
		return TMC_ERROR_CHIP;
   1b966:	2040      	movs	r0, #64	; 0x40
}
   1b968:	bd38      	pop	{r3, r4, r5, pc}
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_8, tmc8461_esc_write_8, TMC8461_ESC_EEP_PDI_ACCESS, TMC8461_ESC_PDI_ACCESS_MASK, TMC8461_ESC_PDI_ACCESS_SHIFT, true);
   1b96a:	f240 5101 	movw	r1, #1281	; 0x501
   1b96e:	483d      	ldr	r0, [pc, #244]	; (1ba64 <user_function+0x140>)
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1b970:	4c3c      	ldr	r4, [pc, #240]	; (1ba64 <user_function+0x140>)
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_8, tmc8461_esc_write_8, TMC8461_ESC_EEP_PDI_ACCESS, TMC8461_ESC_PDI_ACCESS_MASK, TMC8461_ESC_PDI_ACCESS_SHIFT, true);
   1b972:	f008 ff68 	bl	24846 <tmc8461_esc_read_8>
   1b976:	f040 0201 	orr.w	r2, r0, #1
   1b97a:	b2d2      	uxtb	r2, r2
   1b97c:	4839      	ldr	r0, [pc, #228]	; (1ba64 <user_function+0x140>)
   1b97e:	f240 5101 	movw	r1, #1281	; 0x501
   1b982:	f008 ffa4 	bl	248ce <tmc8461_esc_write_8>
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1b986:	f240 5102 	movw	r1, #1282	; 0x502
   1b98a:	4620      	mov	r0, r4
   1b98c:	f008 ff6a 	bl	24864 <tmc8461_esc_read_16>
   1b990:	0403      	lsls	r3, r0, #16
   1b992:	d4f8      	bmi.n	1b986 <user_function+0x62>
	tmc8461_esc_write_32(&tmc8461, TMC8461_ESC_EEP_ADDRESS, *value);
   1b994:	682a      	ldr	r2, [r5, #0]
   1b996:	4833      	ldr	r0, [pc, #204]	; (1ba64 <user_function+0x140>)
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1b998:	4c32      	ldr	r4, [pc, #200]	; (1ba64 <user_function+0x140>)
	tmc8461_esc_write_32(&tmc8461, TMC8461_ESC_EEP_ADDRESS, *value);
   1b99a:	f240 5104 	movw	r1, #1284	; 0x504
   1b99e:	f008 ffad 	bl	248fc <tmc8461_esc_write_32>
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_16, tmc8461_esc_write_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_CMD_MASK, TMC8461_ESC_EEP_CMD_SHIFT, TMC8461_ESC_EEP_CMD_READ);
   1b9a2:	f240 5102 	movw	r1, #1282	; 0x502
   1b9a6:	482f      	ldr	r0, [pc, #188]	; (1ba64 <user_function+0x140>)
   1b9a8:	f008 ff5c 	bl	24864 <tmc8461_esc_read_16>
   1b9ac:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
   1b9b0:	4002      	ands	r2, r0
   1b9b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1b9b6:	482b      	ldr	r0, [pc, #172]	; (1ba64 <user_function+0x140>)
   1b9b8:	f240 5102 	movw	r1, #1282	; 0x502
   1b9bc:	f008 ff93 	bl	248e6 <tmc8461_esc_write_16>
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1b9c0:	f240 5102 	movw	r1, #1282	; 0x502
   1b9c4:	4620      	mov	r0, r4
   1b9c6:	f008 ff4d 	bl	24864 <tmc8461_esc_read_16>
   1b9ca:	0400      	lsls	r0, r0, #16
   1b9cc:	d4f8      	bmi.n	1b9c0 <user_function+0x9c>
	*value = tmc8461_esc_read_32(&tmc8461, TMC8461_ESC_EEP_DATA);
   1b9ce:	4825      	ldr	r0, [pc, #148]	; (1ba64 <user_function+0x140>)
   1b9d0:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1b9d4:	f008 ff55 	bl	24882 <tmc8461_esc_read_32>
   1b9d8:	6028      	str	r0, [r5, #0]
	return TMC_ERROR_NONE;
   1b9da:	e7bb      	b.n	1b954 <user_function+0x30>
	if (!TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_8, TMC8461_ESC_EEP_CFG, TMC8461_ESC_EEP_PDI_MASK, TMC8461_ESC_EEP_PDI_SHIFT))
   1b9dc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1b9e0:	4820      	ldr	r0, [pc, #128]	; (1ba64 <user_function+0x140>)
		reply = eep_write(*value);
   1b9e2:	6814      	ldr	r4, [r2, #0]
	if (!TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_8, TMC8461_ESC_EEP_CFG, TMC8461_ESC_EEP_PDI_MASK, TMC8461_ESC_EEP_PDI_SHIFT))
   1b9e4:	f008 ff2f 	bl	24846 <tmc8461_esc_read_8>
   1b9e8:	07c1      	lsls	r1, r0, #31
   1b9ea:	d5bc      	bpl.n	1b966 <user_function+0x42>
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_8, tmc8461_esc_write_8, TMC8461_ESC_EEP_PDI_ACCESS, TMC8461_ESC_PDI_ACCESS_MASK, TMC8461_ESC_PDI_ACCESS_SHIFT, true);
   1b9ec:	f240 5101 	movw	r1, #1281	; 0x501
   1b9f0:	481c      	ldr	r0, [pc, #112]	; (1ba64 <user_function+0x140>)
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1b9f2:	4d1c      	ldr	r5, [pc, #112]	; (1ba64 <user_function+0x140>)
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_8, tmc8461_esc_write_8, TMC8461_ESC_EEP_PDI_ACCESS, TMC8461_ESC_PDI_ACCESS_MASK, TMC8461_ESC_PDI_ACCESS_SHIFT, true);
   1b9f4:	f008 ff27 	bl	24846 <tmc8461_esc_read_8>
   1b9f8:	f040 0201 	orr.w	r2, r0, #1
   1b9fc:	b2d2      	uxtb	r2, r2
   1b9fe:	4819      	ldr	r0, [pc, #100]	; (1ba64 <user_function+0x140>)
   1ba00:	f240 5101 	movw	r1, #1281	; 0x501
   1ba04:	f008 ff63 	bl	248ce <tmc8461_esc_write_8>
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1ba08:	f240 5102 	movw	r1, #1282	; 0x502
   1ba0c:	4628      	mov	r0, r5
   1ba0e:	f008 ff29 	bl	24864 <tmc8461_esc_read_16>
   1ba12:	0402      	lsls	r2, r0, #16
   1ba14:	d4f8      	bmi.n	1ba08 <user_function+0xe4>
	tmc8461_esc_write_32(&tmc8461, TMC8461_ESC_EEP_ADDRESS, SHORT(value, 1));
   1ba16:	0c22      	lsrs	r2, r4, #16
   1ba18:	4812      	ldr	r0, [pc, #72]	; (1ba64 <user_function+0x140>)
   1ba1a:	f240 5104 	movw	r1, #1284	; 0x504
   1ba1e:	f008 ff6d 	bl	248fc <tmc8461_esc_write_32>
	tmc8461_esc_write_32(&tmc8461, TMC8461_ESC_EEP_DATA, SHORT(value, 0));
   1ba22:	b2a2      	uxth	r2, r4
   1ba24:	480f      	ldr	r0, [pc, #60]	; (1ba64 <user_function+0x140>)
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1ba26:	4c0f      	ldr	r4, [pc, #60]	; (1ba64 <user_function+0x140>)
	tmc8461_esc_write_32(&tmc8461, TMC8461_ESC_EEP_DATA, SHORT(value, 0));
   1ba28:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1ba2c:	f008 ff66 	bl	248fc <tmc8461_esc_write_32>
	TMC8461_FIELD_UPDATE(&tmc8461, tmc8461_esc_read_16, tmc8461_esc_write_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_CMD_MASK, TMC8461_ESC_EEP_CMD_SHIFT, TMC8461_ESC_EEP_CMD_WRITE);
   1ba30:	f240 5102 	movw	r1, #1282	; 0x502
   1ba34:	480b      	ldr	r0, [pc, #44]	; (1ba64 <user_function+0x140>)
   1ba36:	f008 ff15 	bl	24864 <tmc8461_esc_read_16>
   1ba3a:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
   1ba3e:	4002      	ands	r2, r0
   1ba40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1ba44:	4807      	ldr	r0, [pc, #28]	; (1ba64 <user_function+0x140>)
   1ba46:	f240 5102 	movw	r1, #1282	; 0x502
   1ba4a:	f008 ff4c 	bl	248e6 <tmc8461_esc_write_16>
	while (TMC8461_FIELD_READ(&tmc8461, tmc8461_esc_read_16, TMC8461_ESC_EEP_STATUS, TMC8461_ESC_EEP_BUSY_MASK, TMC8461_ESC_EEP_BUSY_SHIFT));
   1ba4e:	f240 5102 	movw	r1, #1282	; 0x502
   1ba52:	4620      	mov	r0, r4
   1ba54:	f008 ff06 	bl	24864 <tmc8461_esc_read_16>
   1ba58:	0403      	lsls	r3, r0, #16
   1ba5a:	d4f8      	bmi.n	1ba4e <user_function+0x12a>
   1ba5c:	e77a      	b.n	1b954 <user_function+0x30>
		*value = TMC_ERROR_TYPE;
   1ba5e:	2004      	movs	r0, #4
   1ba60:	6010      	str	r0, [r2, #0]
	return reply;
   1ba62:	e781      	b.n	1b968 <user_function+0x44>
   1ba64:	1fff6544 	.word	0x1fff6544

0001ba68 <register_read>:
{
   1ba68:	b570      	push	{r4, r5, r6, lr}
	tmc8461_mfc_read_auto(&tmc8461, address, readBuffer);
   1ba6a:	4d09      	ldr	r5, [pc, #36]	; (1ba90 <register_read+0x28>)
	address = TMC8461_MFC(address);
   1ba6c:	0109      	lsls	r1, r1, #4
{
   1ba6e:	4606      	mov	r6, r0
   1ba70:	4614      	mov	r4, r2
	tmc8461_mfc_read_auto(&tmc8461, address, readBuffer);
   1ba72:	4808      	ldr	r0, [pc, #32]	; (1ba94 <register_read+0x2c>)
   1ba74:	f105 0208 	add.w	r2, r5, #8
   1ba78:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1ba7c:	f008 ff7f 	bl	2497e <tmc8461_mfc_read_auto>
	switch (motor)
   1ba80:	b10e      	cbz	r6, 1ba86 <register_read+0x1e>
   1ba82:	2eff      	cmp	r6, #255	; 0xff
   1ba84:	d001      	beq.n	1ba8a <register_read+0x22>
		*value = (readBuffer[3] << 24) | (readBuffer[2] << 16) | (readBuffer[1] << 8) | readBuffer[0];
   1ba86:	68ab      	ldr	r3, [r5, #8]
   1ba88:	e000      	b.n	1ba8c <register_read+0x24>
		*value = (readBuffer[7] << 24) | (readBuffer[6] << 16) | (readBuffer[5] << 8) | readBuffer[4];
   1ba8a:	68eb      	ldr	r3, [r5, #12]
		*value = (readBuffer[3] << 24) | (readBuffer[2] << 16) | (readBuffer[1] << 8) | readBuffer[0];
   1ba8c:	6023      	str	r3, [r4, #0]
}
   1ba8e:	bd70      	pop	{r4, r5, r6, pc}
   1ba90:	1fff4538 	.word	0x1fff4538
   1ba94:	1fff6544 	.word	0x1fff6544

0001ba98 <restore>:
   1ba98:	2001      	movs	r0, #1
   1ba9a:	4770      	bx	lr

0001ba9c <tmc8461_readWrite>:
{
   1ba9c:	4603      	mov	r3, r0
   1ba9e:	4608      	mov	r0, r1
   1baa0:	4611      	mov	r1, r2
	switch(channel)
   1baa2:	b11b      	cbz	r3, 1baac <tmc8461_readWrite+0x10>
   1baa4:	2b01      	cmp	r3, #1
   1baa6:	d005      	beq.n	1bab4 <tmc8461_readWrite+0x18>
}
   1baa8:	2000      	movs	r0, #0
   1baaa:	4770      	bx	lr
		out = tmc8461_spi_esc->readWrite(data, lastTransfer);
   1baac:	4b02      	ldr	r3, [pc, #8]	; (1bab8 <tmc8461_readWrite+0x1c>)
		out = tmc8461_spi_mfc->readWrite(data, lastTransfer);
   1baae:	681b      	ldr	r3, [r3, #0]
   1bab0:	689b      	ldr	r3, [r3, #8]
   1bab2:	4718      	bx	r3
   1bab4:	4b01      	ldr	r3, [pc, #4]	; (1babc <tmc8461_readWrite+0x20>)
   1bab6:	e7fa      	b.n	1baae <tmc8461_readWrite+0x12>
   1bab8:	1fff654c 	.word	0x1fff654c
   1babc:	1fff653c 	.word	0x1fff653c

0001bac0 <TMC8461_init_ch2>:
	 * 1. Setting tmc8461_spi_mfc to channel 1 and use SPI2_CSN0
	 * 2. Setting tmc8461_spi_mfc to channel 2 and use SPI2_CSN0
	 *
	 * Switchable in hardware by jumper.
	 */
	tmc8461_spi_mfc       = &HAL.SPI->ch2;
   1bac0:	4b1b      	ldr	r3, [pc, #108]	; (1bb30 <TMC8461_init_ch2+0x70>)
   1bac2:	491c      	ldr	r1, [pc, #112]	; (1bb34 <TMC8461_init_ch2+0x74>)
   1bac4:	691a      	ldr	r2, [r3, #16]
	tmc8461_spi_mfc->CSN  = &HAL.IOs->pins->SPI2_CSN0;
   1bac6:	68db      	ldr	r3, [r3, #12]
   1bac8:	685b      	ldr	r3, [r3, #4]
   1baca:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1bace:	6193      	str	r3, [r2, #24]

	Evalboards.ch2.config->reset        = reset;
   1bad0:	4b19      	ldr	r3, [pc, #100]	; (1bb38 <TMC8461_init_ch2+0x78>)
	tmc8461_spi_mfc       = &HAL.SPI->ch2;
   1bad2:	f102 0014 	add.w	r0, r2, #20
	Evalboards.ch2.config->reset        = reset;
   1bad6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	tmc8461_spi_mfc       = &HAL.SPI->ch2;
   1bada:	6008      	str	r0, [r1, #0]
	Evalboards.ch2.config->reset        = reset;
   1badc:	4917      	ldr	r1, [pc, #92]	; (1bb3c <TMC8461_init_ch2+0x7c>)
   1bade:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
   1bae2:	4917      	ldr	r1, [pc, #92]	; (1bb40 <TMC8461_init_ch2+0x80>)
	Evalboards.ch2.config->state        = CONFIG_READY; // Config instantly ready since we dont write anything for now
	Evalboards.ch2.config->configIndex  = 0;
	Evalboards.ch2.writeRegister        = memory_write;
   1bae4:	4817      	ldr	r0, [pc, #92]	; (1bb44 <TMC8461_init_ch2+0x84>)
	Evalboards.ch2.config->restore      = restore;
   1bae6:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_READY; // Config instantly ready since we dont write anything for now
   1baea:	2100      	movs	r1, #0
   1baec:	8011      	strh	r1, [r2, #0]
	Evalboards.ch2.writeRegister        = memory_write;
   1baee:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = memory_read;
   1baf2:	4815      	ldr	r0, [pc, #84]	; (1bb48 <TMC8461_init_ch2+0x88>)
   1baf4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
   1baf8:	4814      	ldr	r0, [pc, #80]	; (1bb4c <TMC8461_init_ch2+0x8c>)
   1bafa:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = user_function;
   1bafe:	4814      	ldr	r0, [pc, #80]	; (1bb50 <TMC8461_init_ch2+0x90>)
   1bb00:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
   1bb04:	4813      	ldr	r0, [pc, #76]	; (1bb54 <TMC8461_init_ch2+0x94>)
   1bb06:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
   1bb0a:	4813      	ldr	r0, [pc, #76]	; (1bb58 <TMC8461_init_ch2+0x98>)
   1bb0c:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = TMC8461_MOTORS;
   1bb10:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
	Evalboards.ch2.deInit               = deInit;
   1bb14:	4811      	ldr	r0, [pc, #68]	; (1bb5c <TMC8461_init_ch2+0x9c>)
	Evalboards.ch2.VMMin                = 0;
   1bb16:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	Evalboards.ch2.VMMax                = ~0;
   1bb1a:	f04f 31ff 	mov.w	r1, #4294967295
	Evalboards.ch2.deInit               = deInit;
   1bb1e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	Evalboards.ch2.VMMax                = ~0;
   1bb22:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

	tmc8461_initConfig(&tmc8461, Evalboards.ch1.config, Evalboards.ch2.config);
   1bb26:	480e      	ldr	r0, [pc, #56]	; (1bb60 <TMC8461_init_ch2+0xa0>)
   1bb28:	6999      	ldr	r1, [r3, #24]
   1bb2a:	f008 bf8b 	b.w	24a44 <tmc8461_initConfig>
   1bb2e:	bf00      	nop
   1bb30:	00029d1c 	.word	0x00029d1c
   1bb34:	1fff653c 	.word	0x1fff653c
   1bb38:	1fff5e88 	.word	0x1fff5e88
   1bb3c:	0001b8ab 	.word	0x0001b8ab
   1bb40:	0001ba99 	.word	0x0001ba99
   1bb44:	0001b8c1 	.word	0x0001b8c1
   1bb48:	0001b8d1 	.word	0x0001b8d1
   1bb4c:	0001b8a5 	.word	0x0001b8a5
   1bb50:	0001b925 	.word	0x0001b925
   1bb54:	0001b8a7 	.word	0x0001b8a7
   1bb58:	0001b8af 	.word	0x0001b8af
   1bb5c:	0001b8a9 	.word	0x0001b8a9
   1bb60:	1fff6544 	.word	0x1fff6544

0001bb64 <TMC8461_init_ch1>:
{
   1bb64:	b570      	push	{r4, r5, r6, lr}
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   1bb66:	4d1a      	ldr	r5, [pc, #104]	; (1bbd0 <TMC8461_init_ch1+0x6c>)
   1bb68:	4e1a      	ldr	r6, [pc, #104]	; (1bbd4 <TMC8461_init_ch1+0x70>)
   1bb6a:	68ec      	ldr	r4, [r5, #12]
   1bb6c:	6860      	ldr	r0, [r4, #4]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1bb6e:	6823      	ldr	r3, [r4, #0]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   1bb70:	3068      	adds	r0, #104	; 0x68
   1bb72:	6030      	str	r0, [r6, #0]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1bb74:	68db      	ldr	r3, [r3, #12]
   1bb76:	4798      	blx	r3
	HAL.IOs->config->setHigh(PIN_DRV_ENN);
   1bb78:	6823      	ldr	r3, [r4, #0]
   1bb7a:	6830      	ldr	r0, [r6, #0]
   1bb7c:	695b      	ldr	r3, [r3, #20]
   1bb7e:	4798      	blx	r3
	tmc8461_spi_esc       = &HAL.SPI->ch1;
   1bb80:	4b15      	ldr	r3, [pc, #84]	; (1bbd8 <TMC8461_init_ch1+0x74>)
   1bb82:	692a      	ldr	r2, [r5, #16]
   1bb84:	601a      	str	r2, [r3, #0]
	tmc8461_spi_esc->CSN  = &HAL.IOs->pins->SPI1_CSN;
   1bb86:	6863      	ldr	r3, [r4, #4]
   1bb88:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   1bb8c:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->reset        = reset;
   1bb8e:	4b13      	ldr	r3, [pc, #76]	; (1bbdc <TMC8461_init_ch1+0x78>)
   1bb90:	4a13      	ldr	r2, [pc, #76]	; (1bbe0 <TMC8461_init_ch1+0x7c>)
   1bb92:	6999      	ldr	r1, [r3, #24]
   1bb94:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   1bb98:	4a12      	ldr	r2, [pc, #72]	; (1bbe4 <TMC8461_init_ch1+0x80>)
   1bb9a:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_READY;
   1bb9e:	2200      	movs	r2, #0
   1bba0:	800a      	strh	r2, [r1, #0]
	Evalboards.ch1.writeRegister        = register_write;
   1bba2:	4911      	ldr	r1, [pc, #68]	; (1bbe8 <TMC8461_init_ch1+0x84>)
   1bba4:	64d9      	str	r1, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = register_read;
   1bba6:	4911      	ldr	r1, [pc, #68]	; (1bbec <TMC8461_init_ch1+0x88>)
   1bba8:	6499      	str	r1, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   1bbaa:	4911      	ldr	r1, [pc, #68]	; (1bbf0 <TMC8461_init_ch1+0x8c>)
   1bbac:	6599      	str	r1, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = user_function;
   1bbae:	4911      	ldr	r1, [pc, #68]	; (1bbf4 <TMC8461_init_ch1+0x90>)
   1bbb0:	6559      	str	r1, [r3, #84]	; 0x54
	Evalboards.ch1.enableDriver         = enableDriver;
   1bbb2:	4911      	ldr	r1, [pc, #68]	; (1bbf8 <TMC8461_init_ch1+0x94>)
	Evalboards.ch1.numberOfMotors       = TMC8461_MOTORS;
   1bbb4:	751a      	strb	r2, [r3, #20]
	Evalboards.ch1.enableDriver         = enableDriver;
   1bbb6:	6659      	str	r1, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   1bbb8:	4910      	ldr	r1, [pc, #64]	; (1bbfc <TMC8461_init_ch1+0x98>)
   1bbba:	6619      	str	r1, [r3, #96]	; 0x60
	Evalboards.ch1.VMMin                = 0;
   1bbbc:	611a      	str	r2, [r3, #16]
	Evalboards.ch1.deInit               = deInit;
   1bbbe:	4910      	ldr	r1, [pc, #64]	; (1bc00 <TMC8461_init_ch1+0x9c>)
   1bbc0:	65d9      	str	r1, [r3, #92]	; 0x5c
	Evalboards.ch1.VMMax                = ~0;
   1bbc2:	f04f 32ff 	mov.w	r2, #4294967295
}
   1bbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Evalboards.ch1.VMMax                = ~0;
   1bbca:	60da      	str	r2, [r3, #12]
	TMC8461_init_ch2();
   1bbcc:	f7ff bf78 	b.w	1bac0 <TMC8461_init_ch2>
   1bbd0:	00029d1c 	.word	0x00029d1c
   1bbd4:	1fff6540 	.word	0x1fff6540
   1bbd8:	1fff654c 	.word	0x1fff654c
   1bbdc:	1fff5e88 	.word	0x1fff5e88
   1bbe0:	0001b8ab 	.word	0x0001b8ab
   1bbe4:	0001ba99 	.word	0x0001ba99
   1bbe8:	0001b8e9 	.word	0x0001b8e9
   1bbec:	0001ba69 	.word	0x0001ba69
   1bbf0:	0001b8a5 	.word	0x0001b8a5
   1bbf4:	0001b925 	.word	0x0001b925
   1bbf8:	0001b8a7 	.word	0x0001b8a7
   1bbfc:	0001b8af 	.word	0x0001b8af
   1bc00:	0001b8a9 	.word	0x0001b8a9

0001bc04 <periodicJob>:
}

static void periodicJob(uint32_t actualSystick)
{
	UNUSED(actualSystick);
}
   1bc04:	4770      	bx	lr

0001bc06 <enableDriver>:
}

static void enableDriver(DriverState state)
{
	UNUSED(state);
}
   1bc06:	4770      	bx	lr

0001bc08 <deInit>:

static void deInit(void)
{

}
   1bc08:	4770      	bx	lr

0001bc0a <reset>:

static uint8_t reset()
{
	return 1;
}
   1bc0a:	2001      	movs	r0, #1
   1bc0c:	4770      	bx	lr

0001bc0e <checkErrors>:

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);

	Evalboards.ch1.errors = 0;
   1bc0e:	4b03      	ldr	r3, [pc, #12]	; (1bc1c <checkErrors+0xe>)
   1bc10:	2200      	movs	r2, #0
   1bc12:	609a      	str	r2, [r3, #8]
	Evalboards.ch2.errors = 0;
   1bc14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1bc18:	4770      	bx	lr
   1bc1a:	bf00      	nop
   1bc1c:	1fff5e88 	.word	0x1fff5e88

0001bc20 <memory_write>:
	tmc8462_esc_write_8(&tmc8462, (motor << 8) | address, BYTE(value, 0));
   1bc20:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1bc24:	b2d2      	uxtb	r2, r2
   1bc26:	4801      	ldr	r0, [pc, #4]	; (1bc2c <memory_write+0xc>)
   1bc28:	f009 b828 	b.w	24c7c <tmc8462_esc_write_8>
   1bc2c:	1fff6554 	.word	0x1fff6554

0001bc30 <memory_read>:
{
   1bc30:	b510      	push	{r4, lr}
	*value = tmc8462_esc_read_16(&tmc8462, (motor << 8) | address);
   1bc32:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1bc36:	4803      	ldr	r0, [pc, #12]	; (1bc44 <memory_read+0x14>)
{
   1bc38:	4614      	mov	r4, r2
	*value = tmc8462_esc_read_16(&tmc8462, (motor << 8) | address);
   1bc3a:	f008 ffea 	bl	24c12 <tmc8462_esc_read_16>
   1bc3e:	6020      	str	r0, [r4, #0]
}
   1bc40:	bd10      	pop	{r4, pc}
   1bc42:	bf00      	nop
   1bc44:	1fff6554 	.word	0x1fff6554

0001bc48 <register_write>:
{
   1bc48:	b470      	push	{r4, r5, r6}
   1bc4a:	4b0e      	ldr	r3, [pc, #56]	; (1bc84 <register_write+0x3c>)
	switch(motor)
   1bc4c:	28ff      	cmp	r0, #255	; 0xff
   1bc4e:	b2d6      	uxtb	r6, r2
   1bc50:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1bc54:	f3c2 4407 	ubfx	r4, r2, #16, #8
   1bc58:	ea4f 6212 	mov.w	r2, r2, lsr #24
		write_buffer[7] = BYTE(value, 3);
   1bc5c:	bf0c      	ite	eq
   1bc5e:	71da      	strbeq	r2, [r3, #7]
		write_buffer[3] = BYTE(value, 3);
   1bc60:	70da      	strbne	r2, [r3, #3]
	address = TMC8462_MFC(address);
   1bc62:	ea4f 1101 	mov.w	r1, r1, lsl #4
		write_buffer[4] = BYTE(value, 0);
   1bc66:	bf03      	ittte	eq
   1bc68:	711e      	strbeq	r6, [r3, #4]
		write_buffer[5] = BYTE(value, 1);
   1bc6a:	715d      	strbeq	r5, [r3, #5]
		write_buffer[6] = BYTE(value, 2);
   1bc6c:	719c      	strbeq	r4, [r3, #6]
		write_buffer[0] = BYTE(value, 0);
   1bc6e:	701e      	strbne	r6, [r3, #0]
		write_buffer[1] = BYTE(value, 1);
   1bc70:	bf1c      	itt	ne
   1bc72:	705d      	strbne	r5, [r3, #1]
		write_buffer[2] = BYTE(value, 2);
   1bc74:	709c      	strbne	r4, [r3, #2]
}
   1bc76:	bc70      	pop	{r4, r5, r6}
	tmc8462_mfc_write_auto(&tmc8462, address, write_buffer);
   1bc78:	4a02      	ldr	r2, [pc, #8]	; (1bc84 <register_write+0x3c>)
   1bc7a:	4803      	ldr	r0, [pc, #12]	; (1bc88 <register_write+0x40>)
	address = TMC8462_MFC(address);
   1bc7c:	b2c9      	uxtb	r1, r1
	tmc8462_mfc_write_auto(&tmc8462, address, write_buffer);
   1bc7e:	f009 b8a4 	b.w	24dca <tmc8462_mfc_write_auto>
   1bc82:	bf00      	nop
   1bc84:	1fff4554 	.word	0x1fff4554
   1bc88:	1fff6554 	.word	0x1fff6554

0001bc8c <user_function>:
	switch(type)
   1bc8c:	2801      	cmp	r0, #1
{
   1bc8e:	b538      	push	{r3, r4, r5, lr}
   1bc90:	4615      	mov	r5, r2
	switch(type)
   1bc92:	d015      	beq.n	1bcc0 <user_function+0x34>
   1bc94:	2802      	cmp	r0, #2
   1bc96:	d055      	beq.n	1bd44 <user_function+0xb8>
   1bc98:	2800      	cmp	r0, #0
   1bc9a:	f040 8094 	bne.w	1bdc6 <user_function+0x13a>
	tmc8462_esc_write_8(&tmc8462, TMC8462_ESC_RESET_PDI, TMC8462_MAGIC_RESET_0);
   1bc9e:	484b      	ldr	r0, [pc, #300]	; (1bdcc <user_function+0x140>)
   1bca0:	2252      	movs	r2, #82	; 0x52
   1bca2:	2141      	movs	r1, #65	; 0x41
   1bca4:	f008 ffea 	bl	24c7c <tmc8462_esc_write_8>
	tmc8462_esc_write_8(&tmc8462, TMC8462_ESC_RESET_PDI, TMC8462_MAGIC_RESET_1);
   1bca8:	4848      	ldr	r0, [pc, #288]	; (1bdcc <user_function+0x140>)
   1bcaa:	2245      	movs	r2, #69	; 0x45
   1bcac:	2141      	movs	r1, #65	; 0x41
   1bcae:	f008 ffe5 	bl	24c7c <tmc8462_esc_write_8>
	tmc8462_esc_write_8(&tmc8462, TMC8462_ESC_RESET_PDI, TMC8462_MAGIC_RESET_2);
   1bcb2:	4846      	ldr	r0, [pc, #280]	; (1bdcc <user_function+0x140>)
   1bcb4:	2253      	movs	r2, #83	; 0x53
   1bcb6:	2141      	movs	r1, #65	; 0x41
   1bcb8:	f008 ffe0 	bl	24c7c <tmc8462_esc_write_8>
	return TMC_ERROR_NONE;
   1bcbc:	2000      	movs	r0, #0
   1bcbe:	e007      	b.n	1bcd0 <user_function+0x44>
	if (!TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_8, TMC8462_ESC_EEP_CFG, TMC8462_ESC_EEP_PDI_MASK, TMC8462_ESC_EEP_PDI_SHIFT))
   1bcc0:	4842      	ldr	r0, [pc, #264]	; (1bdcc <user_function+0x140>)
   1bcc2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1bcc6:	f008 ff95 	bl	24bf4 <tmc8462_esc_read_8>
   1bcca:	07c2      	lsls	r2, r0, #31
   1bccc:	d401      	bmi.n	1bcd2 <user_function+0x46>
		return TMC_ERROR_CHIP;
   1bcce:	2040      	movs	r0, #64	; 0x40
}
   1bcd0:	bd38      	pop	{r3, r4, r5, pc}
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_8, tmc8462_esc_write_8, TMC8462_ESC_EEP_PDI_ACCESS, TMC8462_ESC_PDI_ACCESS_MASK, TMC8462_ESC_PDI_ACCESS_SHIFT, true);
   1bcd2:	f240 5101 	movw	r1, #1281	; 0x501
   1bcd6:	483d      	ldr	r0, [pc, #244]	; (1bdcc <user_function+0x140>)
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bcd8:	4c3c      	ldr	r4, [pc, #240]	; (1bdcc <user_function+0x140>)
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_8, tmc8462_esc_write_8, TMC8462_ESC_EEP_PDI_ACCESS, TMC8462_ESC_PDI_ACCESS_MASK, TMC8462_ESC_PDI_ACCESS_SHIFT, true);
   1bcda:	f008 ff8b 	bl	24bf4 <tmc8462_esc_read_8>
   1bcde:	f040 0201 	orr.w	r2, r0, #1
   1bce2:	b2d2      	uxtb	r2, r2
   1bce4:	4839      	ldr	r0, [pc, #228]	; (1bdcc <user_function+0x140>)
   1bce6:	f240 5101 	movw	r1, #1281	; 0x501
   1bcea:	f008 ffc7 	bl	24c7c <tmc8462_esc_write_8>
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bcee:	f240 5102 	movw	r1, #1282	; 0x502
   1bcf2:	4620      	mov	r0, r4
   1bcf4:	f008 ff8d 	bl	24c12 <tmc8462_esc_read_16>
   1bcf8:	0403      	lsls	r3, r0, #16
   1bcfa:	d4f8      	bmi.n	1bcee <user_function+0x62>
	tmc8462_esc_write_32(&tmc8462, TMC8462_ESC_EEP_ADDRESS, *value);
   1bcfc:	682a      	ldr	r2, [r5, #0]
   1bcfe:	4833      	ldr	r0, [pc, #204]	; (1bdcc <user_function+0x140>)
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bd00:	4c32      	ldr	r4, [pc, #200]	; (1bdcc <user_function+0x140>)
	tmc8462_esc_write_32(&tmc8462, TMC8462_ESC_EEP_ADDRESS, *value);
   1bd02:	f240 5104 	movw	r1, #1284	; 0x504
   1bd06:	f008 ffd0 	bl	24caa <tmc8462_esc_write_32>
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_16, tmc8462_esc_write_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_CMD_MASK, TMC8462_ESC_EEP_CMD_SHIFT, TMC8462_ESC_EEP_CMD_READ);
   1bd0a:	f240 5102 	movw	r1, #1282	; 0x502
   1bd0e:	482f      	ldr	r0, [pc, #188]	; (1bdcc <user_function+0x140>)
   1bd10:	f008 ff7f 	bl	24c12 <tmc8462_esc_read_16>
   1bd14:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
   1bd18:	4002      	ands	r2, r0
   1bd1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1bd1e:	482b      	ldr	r0, [pc, #172]	; (1bdcc <user_function+0x140>)
   1bd20:	f240 5102 	movw	r1, #1282	; 0x502
   1bd24:	f008 ffb6 	bl	24c94 <tmc8462_esc_write_16>
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bd28:	f240 5102 	movw	r1, #1282	; 0x502
   1bd2c:	4620      	mov	r0, r4
   1bd2e:	f008 ff70 	bl	24c12 <tmc8462_esc_read_16>
   1bd32:	0400      	lsls	r0, r0, #16
   1bd34:	d4f8      	bmi.n	1bd28 <user_function+0x9c>
	*value = tmc8462_esc_read_32(&tmc8462, TMC8462_ESC_EEP_DATA);
   1bd36:	4825      	ldr	r0, [pc, #148]	; (1bdcc <user_function+0x140>)
   1bd38:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1bd3c:	f008 ff78 	bl	24c30 <tmc8462_esc_read_32>
   1bd40:	6028      	str	r0, [r5, #0]
	return TMC_ERROR_NONE;
   1bd42:	e7bb      	b.n	1bcbc <user_function+0x30>
	if (!TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_8, TMC8462_ESC_EEP_CFG, TMC8462_ESC_EEP_PDI_MASK, TMC8462_ESC_EEP_PDI_SHIFT))
   1bd44:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   1bd48:	4820      	ldr	r0, [pc, #128]	; (1bdcc <user_function+0x140>)
		reply = eep_write(*value);
   1bd4a:	6814      	ldr	r4, [r2, #0]
	if (!TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_8, TMC8462_ESC_EEP_CFG, TMC8462_ESC_EEP_PDI_MASK, TMC8462_ESC_EEP_PDI_SHIFT))
   1bd4c:	f008 ff52 	bl	24bf4 <tmc8462_esc_read_8>
   1bd50:	07c1      	lsls	r1, r0, #31
   1bd52:	d5bc      	bpl.n	1bcce <user_function+0x42>
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_8, tmc8462_esc_write_8, TMC8462_ESC_EEP_PDI_ACCESS, TMC8462_ESC_PDI_ACCESS_MASK, TMC8462_ESC_PDI_ACCESS_SHIFT, true);
   1bd54:	f240 5101 	movw	r1, #1281	; 0x501
   1bd58:	481c      	ldr	r0, [pc, #112]	; (1bdcc <user_function+0x140>)
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bd5a:	4d1c      	ldr	r5, [pc, #112]	; (1bdcc <user_function+0x140>)
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_8, tmc8462_esc_write_8, TMC8462_ESC_EEP_PDI_ACCESS, TMC8462_ESC_PDI_ACCESS_MASK, TMC8462_ESC_PDI_ACCESS_SHIFT, true);
   1bd5c:	f008 ff4a 	bl	24bf4 <tmc8462_esc_read_8>
   1bd60:	f040 0201 	orr.w	r2, r0, #1
   1bd64:	b2d2      	uxtb	r2, r2
   1bd66:	4819      	ldr	r0, [pc, #100]	; (1bdcc <user_function+0x140>)
   1bd68:	f240 5101 	movw	r1, #1281	; 0x501
   1bd6c:	f008 ff86 	bl	24c7c <tmc8462_esc_write_8>
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bd70:	f240 5102 	movw	r1, #1282	; 0x502
   1bd74:	4628      	mov	r0, r5
   1bd76:	f008 ff4c 	bl	24c12 <tmc8462_esc_read_16>
   1bd7a:	0402      	lsls	r2, r0, #16
   1bd7c:	d4f8      	bmi.n	1bd70 <user_function+0xe4>
	tmc8462_esc_write_32(&tmc8462, TMC8462_ESC_EEP_ADDRESS, SHORT(value, 1));
   1bd7e:	0c22      	lsrs	r2, r4, #16
   1bd80:	4812      	ldr	r0, [pc, #72]	; (1bdcc <user_function+0x140>)
   1bd82:	f240 5104 	movw	r1, #1284	; 0x504
   1bd86:	f008 ff90 	bl	24caa <tmc8462_esc_write_32>
	tmc8462_esc_write_32(&tmc8462, TMC8462_ESC_EEP_DATA, SHORT(value, 0));
   1bd8a:	b2a2      	uxth	r2, r4
   1bd8c:	480f      	ldr	r0, [pc, #60]	; (1bdcc <user_function+0x140>)
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bd8e:	4c0f      	ldr	r4, [pc, #60]	; (1bdcc <user_function+0x140>)
	tmc8462_esc_write_32(&tmc8462, TMC8462_ESC_EEP_DATA, SHORT(value, 0));
   1bd90:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1bd94:	f008 ff89 	bl	24caa <tmc8462_esc_write_32>
	TMC8462_FIELD_UPDATE(&tmc8462, tmc8462_esc_read_16, tmc8462_esc_write_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_CMD_MASK, TMC8462_ESC_EEP_CMD_SHIFT, TMC8462_ESC_EEP_CMD_WRITE);
   1bd98:	f240 5102 	movw	r1, #1282	; 0x502
   1bd9c:	480b      	ldr	r0, [pc, #44]	; (1bdcc <user_function+0x140>)
   1bd9e:	f008 ff38 	bl	24c12 <tmc8462_esc_read_16>
   1bda2:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
   1bda6:	4002      	ands	r2, r0
   1bda8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1bdac:	4807      	ldr	r0, [pc, #28]	; (1bdcc <user_function+0x140>)
   1bdae:	f240 5102 	movw	r1, #1282	; 0x502
   1bdb2:	f008 ff6f 	bl	24c94 <tmc8462_esc_write_16>
	while (TMC8462_FIELD_READ(&tmc8462, tmc8462_esc_read_16, TMC8462_ESC_EEP_STATUS, TMC8462_ESC_EEP_BUSY_MASK, TMC8462_ESC_EEP_BUSY_SHIFT));
   1bdb6:	f240 5102 	movw	r1, #1282	; 0x502
   1bdba:	4620      	mov	r0, r4
   1bdbc:	f008 ff29 	bl	24c12 <tmc8462_esc_read_16>
   1bdc0:	0403      	lsls	r3, r0, #16
   1bdc2:	d4f8      	bmi.n	1bdb6 <user_function+0x12a>
   1bdc4:	e77a      	b.n	1bcbc <user_function+0x30>
	switch(type)
   1bdc6:	2004      	movs	r0, #4
	return reply;
   1bdc8:	e782      	b.n	1bcd0 <user_function+0x44>
   1bdca:	bf00      	nop
   1bdcc:	1fff6554 	.word	0x1fff6554

0001bdd0 <register_read>:
{
   1bdd0:	b570      	push	{r4, r5, r6, lr}
	tmc8462_mfc_read_auto(&tmc8462, address, readBuffer);
   1bdd2:	4d09      	ldr	r5, [pc, #36]	; (1bdf8 <register_read+0x28>)
	address = TMC8462_MFC(address);
   1bdd4:	0109      	lsls	r1, r1, #4
{
   1bdd6:	4606      	mov	r6, r0
   1bdd8:	4614      	mov	r4, r2
	tmc8462_mfc_read_auto(&tmc8462, address, readBuffer);
   1bdda:	4808      	ldr	r0, [pc, #32]	; (1bdfc <register_read+0x2c>)
   1bddc:	f105 0208 	add.w	r2, r5, #8
   1bde0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1bde4:	f008 ffa2 	bl	24d2c <tmc8462_mfc_read_auto>
	switch (motor)
   1bde8:	b10e      	cbz	r6, 1bdee <register_read+0x1e>
   1bdea:	2eff      	cmp	r6, #255	; 0xff
   1bdec:	d001      	beq.n	1bdf2 <register_read+0x22>
		*value = (readBuffer[3] << 24) | (readBuffer[2] << 16) | (readBuffer[1] << 8) | readBuffer[0];
   1bdee:	68ab      	ldr	r3, [r5, #8]
   1bdf0:	e000      	b.n	1bdf4 <register_read+0x24>
		*value = (readBuffer[7] << 24) | (readBuffer[6] << 16) | (readBuffer[5] << 8) | readBuffer[4];
   1bdf2:	68eb      	ldr	r3, [r5, #12]
		*value = (readBuffer[3] << 24) | (readBuffer[2] << 16) | (readBuffer[1] << 8) | readBuffer[0];
   1bdf4:	6023      	str	r3, [r4, #0]
}
   1bdf6:	bd70      	pop	{r4, r5, r6, pc}
   1bdf8:	1fff4554 	.word	0x1fff4554
   1bdfc:	1fff6554 	.word	0x1fff6554

0001be00 <restore>:
   1be00:	2001      	movs	r0, #1
   1be02:	4770      	bx	lr

0001be04 <tmc8462_readWrite>:
{
   1be04:	4603      	mov	r3, r0
   1be06:	4608      	mov	r0, r1
   1be08:	4611      	mov	r1, r2
	switch(channel)
   1be0a:	b11b      	cbz	r3, 1be14 <tmc8462_readWrite+0x10>
   1be0c:	2b01      	cmp	r3, #1
   1be0e:	d005      	beq.n	1be1c <tmc8462_readWrite+0x18>
}
   1be10:	2000      	movs	r0, #0
   1be12:	4770      	bx	lr
		out = tmc8462_spi_esc->readWrite(data, lastTransfer);
   1be14:	4b02      	ldr	r3, [pc, #8]	; (1be20 <tmc8462_readWrite+0x1c>)
		out = tmc8462_spi_mfc->readWrite(data, lastTransfer);
   1be16:	681b      	ldr	r3, [r3, #0]
   1be18:	689b      	ldr	r3, [r3, #8]
   1be1a:	4718      	bx	r3
   1be1c:	4b01      	ldr	r3, [pc, #4]	; (1be24 <tmc8462_readWrite+0x20>)
   1be1e:	e7fa      	b.n	1be16 <tmc8462_readWrite+0x12>
   1be20:	1fff6550 	.word	0x1fff6550
   1be24:	1fff655c 	.word	0x1fff655c

0001be28 <TMC8462_init_ch2>:
	 * 1. Setting tmc8462_spi_mfc to channel 1 and use SPI2_CSN0
	 * 2. Setting tmc8462_spi_mfc to channel 2 and use SPI2_CSN0
	 *
	 * Switchable in hardware by jumper.
	 */
	tmc8462_spi_mfc = &HAL.SPI->ch2;
   1be28:	4b1b      	ldr	r3, [pc, #108]	; (1be98 <TMC8462_init_ch2+0x70>)
   1be2a:	491c      	ldr	r1, [pc, #112]	; (1be9c <TMC8462_init_ch2+0x74>)
   1be2c:	691a      	ldr	r2, [r3, #16]
	tmc8462_spi_mfc->CSN = &HAL.IOs->pins->SPI2_CSN0;
   1be2e:	68db      	ldr	r3, [r3, #12]
   1be30:	685b      	ldr	r3, [r3, #4]
   1be32:	f503 7302 	add.w	r3, r3, #520	; 0x208
   1be36:	6193      	str	r3, [r2, #24]

	Evalboards.ch2.config->reset        = reset;
   1be38:	4b19      	ldr	r3, [pc, #100]	; (1bea0 <TMC8462_init_ch2+0x78>)
	tmc8462_spi_mfc = &HAL.SPI->ch2;
   1be3a:	f102 0014 	add.w	r0, r2, #20
	Evalboards.ch2.config->reset        = reset;
   1be3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	tmc8462_spi_mfc = &HAL.SPI->ch2;
   1be42:	6008      	str	r0, [r1, #0]
	Evalboards.ch2.config->reset        = reset;
   1be44:	4917      	ldr	r1, [pc, #92]	; (1bea4 <TMC8462_init_ch2+0x7c>)
   1be46:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
   1be4a:	4917      	ldr	r1, [pc, #92]	; (1bea8 <TMC8462_init_ch2+0x80>)
	Evalboards.ch2.config->state        = CONFIG_READY; // Config instantly ready since we dont write anything for now
	Evalboards.ch2.config->configIndex  = 0;
	Evalboards.ch2.writeRegister        = memory_write;
   1be4c:	4817      	ldr	r0, [pc, #92]	; (1beac <TMC8462_init_ch2+0x84>)
	Evalboards.ch2.config->restore      = restore;
   1be4e:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->state        = CONFIG_READY; // Config instantly ready since we dont write anything for now
   1be52:	2100      	movs	r1, #0
   1be54:	8011      	strh	r1, [r2, #0]
	Evalboards.ch2.writeRegister        = memory_write;
   1be56:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = memory_read;
   1be5a:	4815      	ldr	r0, [pc, #84]	; (1beb0 <TMC8462_init_ch2+0x88>)
   1be5c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
   1be60:	4814      	ldr	r0, [pc, #80]	; (1beb4 <TMC8462_init_ch2+0x8c>)
   1be62:	f8c3 00d0 	str.w	r0, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = user_function;
   1be66:	4814      	ldr	r0, [pc, #80]	; (1beb8 <TMC8462_init_ch2+0x90>)
   1be68:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
   1be6c:	4813      	ldr	r0, [pc, #76]	; (1bebc <TMC8462_init_ch2+0x94>)
   1be6e:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
   1be72:	4813      	ldr	r0, [pc, #76]	; (1bec0 <TMC8462_init_ch2+0x98>)
   1be74:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = TMC8462_MOTORS;
   1be78:	f883 108c 	strb.w	r1, [r3, #140]	; 0x8c
	Evalboards.ch2.deInit               = deInit;
   1be7c:	4811      	ldr	r0, [pc, #68]	; (1bec4 <TMC8462_init_ch2+0x9c>)
	Evalboards.ch2.VMMin                = 0;
   1be7e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	Evalboards.ch2.VMMax                = ~0;
   1be82:	f04f 31ff 	mov.w	r1, #4294967295
	Evalboards.ch2.deInit               = deInit;
   1be86:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	Evalboards.ch2.VMMax                = ~0;
   1be8a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

	tmc8462_initConfig(&tmc8462, Evalboards.ch1.config, Evalboards.ch2.config);
   1be8e:	480e      	ldr	r0, [pc, #56]	; (1bec8 <TMC8462_init_ch2+0xa0>)
   1be90:	6999      	ldr	r1, [r3, #24]
   1be92:	f008 bfae 	b.w	24df2 <tmc8462_initConfig>
   1be96:	bf00      	nop
   1be98:	00029d1c 	.word	0x00029d1c
   1be9c:	1fff655c 	.word	0x1fff655c
   1bea0:	1fff5e88 	.word	0x1fff5e88
   1bea4:	0001bc0b 	.word	0x0001bc0b
   1bea8:	0001be01 	.word	0x0001be01
   1beac:	0001bc21 	.word	0x0001bc21
   1beb0:	0001bc31 	.word	0x0001bc31
   1beb4:	0001bc05 	.word	0x0001bc05
   1beb8:	0001bc8d 	.word	0x0001bc8d
   1bebc:	0001bc07 	.word	0x0001bc07
   1bec0:	0001bc0f 	.word	0x0001bc0f
   1bec4:	0001bc09 	.word	0x0001bc09
   1bec8:	1fff6554 	.word	0x1fff6554

0001becc <TMC8462_init_ch1>:
{
   1becc:	b570      	push	{r4, r5, r6, lr}
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   1bece:	4d1a      	ldr	r5, [pc, #104]	; (1bf38 <TMC8462_init_ch1+0x6c>)
   1bed0:	4e1a      	ldr	r6, [pc, #104]	; (1bf3c <TMC8462_init_ch1+0x70>)
   1bed2:	68ec      	ldr	r4, [r5, #12]
   1bed4:	6860      	ldr	r0, [r4, #4]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1bed6:	6823      	ldr	r3, [r4, #0]
	PIN_DRV_ENN = &HAL.IOs->pins->DIO0;
   1bed8:	3068      	adds	r0, #104	; 0x68
   1beda:	6030      	str	r0, [r6, #0]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1bedc:	68db      	ldr	r3, [r3, #12]
   1bede:	4798      	blx	r3
	HAL.IOs->config->setHigh(PIN_DRV_ENN);
   1bee0:	6823      	ldr	r3, [r4, #0]
   1bee2:	6830      	ldr	r0, [r6, #0]
   1bee4:	695b      	ldr	r3, [r3, #20]
   1bee6:	4798      	blx	r3
	tmc8462_spi_esc = &HAL.SPI->ch1;
   1bee8:	4b15      	ldr	r3, [pc, #84]	; (1bf40 <TMC8462_init_ch1+0x74>)
   1beea:	692a      	ldr	r2, [r5, #16]
   1beec:	601a      	str	r2, [r3, #0]
	tmc8462_spi_esc->CSN = &HAL.IOs->pins->SPI1_CSN;
   1beee:	6863      	ldr	r3, [r4, #4]
   1bef0:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
   1bef4:	6053      	str	r3, [r2, #4]
	Evalboards.ch1.config->reset        = reset;
   1bef6:	4b13      	ldr	r3, [pc, #76]	; (1bf44 <TMC8462_init_ch1+0x78>)
   1bef8:	4a13      	ldr	r2, [pc, #76]	; (1bf48 <TMC8462_init_ch1+0x7c>)
   1befa:	6999      	ldr	r1, [r3, #24]
   1befc:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
	Evalboards.ch1.config->restore      = restore;
   1bf00:	4a12      	ldr	r2, [pc, #72]	; (1bf4c <TMC8462_init_ch1+0x80>)
   1bf02:	f8c1 2208 	str.w	r2, [r1, #520]	; 0x208
	Evalboards.ch1.config->state        = CONFIG_READY;
   1bf06:	2200      	movs	r2, #0
   1bf08:	800a      	strh	r2, [r1, #0]
	Evalboards.ch1.writeRegister        = register_write;
   1bf0a:	4911      	ldr	r1, [pc, #68]	; (1bf50 <TMC8462_init_ch1+0x84>)
   1bf0c:	64d9      	str	r1, [r3, #76]	; 0x4c
	Evalboards.ch1.readRegister         = register_read;
   1bf0e:	4911      	ldr	r1, [pc, #68]	; (1bf54 <TMC8462_init_ch1+0x88>)
   1bf10:	6499      	str	r1, [r3, #72]	; 0x48
	Evalboards.ch1.periodicJob          = periodicJob;
   1bf12:	4911      	ldr	r1, [pc, #68]	; (1bf58 <TMC8462_init_ch1+0x8c>)
   1bf14:	6599      	str	r1, [r3, #88]	; 0x58
	Evalboards.ch1.userFunction         = user_function;
   1bf16:	4911      	ldr	r1, [pc, #68]	; (1bf5c <TMC8462_init_ch1+0x90>)
   1bf18:	6559      	str	r1, [r3, #84]	; 0x54
	Evalboards.ch1.enableDriver         = enableDriver;
   1bf1a:	4911      	ldr	r1, [pc, #68]	; (1bf60 <TMC8462_init_ch1+0x94>)
	Evalboards.ch1.numberOfMotors       = TMC8462_MOTORS;
   1bf1c:	751a      	strb	r2, [r3, #20]
	Evalboards.ch1.enableDriver         = enableDriver;
   1bf1e:	6659      	str	r1, [r3, #100]	; 0x64
	Evalboards.ch1.checkErrors          = checkErrors;
   1bf20:	4910      	ldr	r1, [pc, #64]	; (1bf64 <TMC8462_init_ch1+0x98>)
   1bf22:	6619      	str	r1, [r3, #96]	; 0x60
	Evalboards.ch1.VMMin                = 0;
   1bf24:	611a      	str	r2, [r3, #16]
	Evalboards.ch1.deInit               = deInit;
   1bf26:	4910      	ldr	r1, [pc, #64]	; (1bf68 <TMC8462_init_ch1+0x9c>)
   1bf28:	65d9      	str	r1, [r3, #92]	; 0x5c
	Evalboards.ch1.VMMax                = ~0;
   1bf2a:	f04f 32ff 	mov.w	r2, #4294967295
}
   1bf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Evalboards.ch1.VMMax                = ~0;
   1bf32:	60da      	str	r2, [r3, #12]
	TMC8462_init_ch2();
   1bf34:	f7ff bf78 	b.w	1be28 <TMC8462_init_ch2>
   1bf38:	00029d1c 	.word	0x00029d1c
   1bf3c:	1fff6540 	.word	0x1fff6540
   1bf40:	1fff6550 	.word	0x1fff6550
   1bf44:	1fff5e88 	.word	0x1fff5e88
   1bf48:	0001bc0b 	.word	0x0001bc0b
   1bf4c:	0001be01 	.word	0x0001be01
   1bf50:	0001bc49 	.word	0x0001bc49
   1bf54:	0001bdd1 	.word	0x0001bdd1
   1bf58:	0001bc05 	.word	0x0001bc05
   1bf5c:	0001bc8d 	.word	0x0001bc8d
   1bf60:	0001bc07 	.word	0x0001bc07
   1bf64:	0001bc0f 	.word	0x0001bc0f
   1bf68:	0001bc09 	.word	0x0001bc09

0001bf6c <userFunction>:
{
	UNUSED(type);
	UNUSED(motor);
	UNUSED(value);
	return 0;
}
   1bf6c:	2000      	movs	r0, #0
   1bf6e:	4770      	bx	lr

0001bf70 <reset>:
};

static uint8_t reset()
{
	return 1;
}
   1bf70:	2001      	movs	r0, #1
   1bf72:	4770      	bx	lr

0001bf74 <checkErrors>:
}

static void checkErrors(uint32_t tick)
{
	UNUSED(tick);
	Evalboards.ch1.errors = 0;
   1bf74:	4b01      	ldr	r3, [pc, #4]	; (1bf7c <checkErrors+0x8>)
   1bf76:	2200      	movs	r2, #0
   1bf78:	609a      	str	r2, [r3, #8]
}
   1bf7a:	4770      	bx	lr
   1bf7c:	1fff5e88 	.word	0x1fff5e88

0001bf80 <periodicJob>:
	tmcc160_periodicJob(actualSystick);
   1bf80:	f008 bf59 	b.w	24e36 <tmcc160_periodicJob>

0001bf84 <readRegister>:
{
   1bf84:	b510      	push	{r4, lr}
	*value = tmcc160_readInt(address);
   1bf86:	4608      	mov	r0, r1
{
   1bf88:	4614      	mov	r4, r2
	*value = tmcc160_readInt(address);
   1bf8a:	f008 ff79 	bl	24e80 <tmcc160_readInt>
   1bf8e:	6020      	str	r0, [r4, #0]
}
   1bf90:	bd10      	pop	{r4, pc}

0001bf92 <writeRegister>:
{
   1bf92:	4608      	mov	r0, r1
	tmcc160_writeInt(address, value);
   1bf94:	4611      	mov	r1, r2
   1bf96:	f008 bf58 	b.w	24e4a <tmcc160_writeInt>

0001bf9a <moveBy>:
{
   1bf9a:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
   1bf9c:	4604      	mov	r4, r0
   1bf9e:	b920      	cbnz	r0, 1bfaa <moveBy+0x10>
	tmcc160_setRelativeTargetPosition(*ticks);
   1bfa0:	6808      	ldr	r0, [r1, #0]
   1bfa2:	f008 ffc6 	bl	24f32 <tmcc160_setRelativeTargetPosition>
	return TMC_ERROR_NONE;
   1bfa6:	4620      	mov	r0, r4
}
   1bfa8:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1bfaa:	2008      	movs	r0, #8
   1bfac:	e7fc      	b.n	1bfa8 <moveBy+0xe>

0001bfae <moveTo>:
{
   1bfae:	b510      	push	{r4, lr}
   1bfb0:	4604      	mov	r4, r0
   1bfb2:	4608      	mov	r0, r1
	if(motor >= MOTORS)
   1bfb4:	b91c      	cbnz	r4, 1bfbe <moveTo+0x10>
	tmcc160_setAbsolutTargetPosition(position);
   1bfb6:	f008 ffb8 	bl	24f2a <tmcc160_setAbsolutTargetPosition>
	return TMC_ERROR_NONE;
   1bfba:	4620      	mov	r0, r4
}
   1bfbc:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1bfbe:	2008      	movs	r0, #8
   1bfc0:	e7fc      	b.n	1bfbc <moveTo+0xe>

0001bfc2 <rotate>:
{
   1bfc2:	b510      	push	{r4, lr}
   1bfc4:	4604      	mov	r4, r0
   1bfc6:	4608      	mov	r0, r1
	if(motor >= MOTORS)
   1bfc8:	b91c      	cbnz	r4, 1bfd2 <rotate+0x10>
	tmcc160_setTargetVelocity(velocity);
   1bfca:	f008 ffa1 	bl	24f10 <tmcc160_setTargetVelocity>
	return TMC_ERROR_NONE;
   1bfce:	4620      	mov	r0, r4
}
   1bfd0:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1bfd2:	2008      	movs	r0, #8
   1bfd4:	e7fc      	b.n	1bfd0 <rotate+0xe>

0001bfd6 <stop>:
{
   1bfd6:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
   1bfd8:	4604      	mov	r4, r0
   1bfda:	b918      	cbnz	r0, 1bfe4 <stop+0xe>
	tmcc160_setTargetVelocity(velocity);
   1bfdc:	f008 ff98 	bl	24f10 <tmcc160_setTargetVelocity>
	return TMC_ERROR_NONE;
   1bfe0:	4620      	mov	r0, r4
}
   1bfe2:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1bfe4:	2008      	movs	r0, #8
	return rotate(motor, 0);
   1bfe6:	e7fc      	b.n	1bfe2 <stop+0xc>

0001bfe8 <left>:
{
   1bfe8:	b510      	push	{r4, lr}
	if(motor >= MOTORS)
   1bfea:	4604      	mov	r4, r0
   1bfec:	b920      	cbnz	r0, 1bff8 <left+0x10>
	tmcc160_setTargetVelocity(velocity);
   1bfee:	4248      	negs	r0, r1
   1bff0:	f008 ff8e 	bl	24f10 <tmcc160_setTargetVelocity>
	return TMC_ERROR_NONE;
   1bff4:	4620      	mov	r0, r4
}
   1bff6:	bd10      	pop	{r4, pc}
		return TMC_ERROR_MOTOR;
   1bff8:	2008      	movs	r0, #8
	return rotate(motor, -velocity);
   1bffa:	e7fc      	b.n	1bff6 <left+0xe>

0001bffc <getMeasuredSpeed>:
{
   1bffc:	b538      	push	{r3, r4, r5, lr}
   1bffe:	460d      	mov	r5, r1
	if(motor >= MOTORS)
   1c000:	4604      	mov	r4, r0
   1c002:	b920      	cbnz	r0, 1c00e <getMeasuredSpeed+0x12>
	*value = tmcc160_getActualVelocity();
   1c004:	f008 ff8b 	bl	24f1e <tmcc160_getActualVelocity>
   1c008:	6028      	str	r0, [r5, #0]
	return TMC_ERROR_NONE;
   1c00a:	4620      	mov	r0, r4
}
   1c00c:	bd38      	pop	{r3, r4, r5, pc}
		return TMC_ERROR_MOTOR;
   1c00e:	2008      	movs	r0, #8
   1c010:	e7fc      	b.n	1c00c <getMeasuredSpeed+0x10>

0001c012 <enableDriver>:
	if(state== DRIVER_USE_GLOBAL_ENABLE)
   1c012:	2802      	cmp	r0, #2
		state = Evalboards.driverEnable;
   1c014:	bf04      	itt	eq
   1c016:	4b0c      	ldreq	r3, [pc, #48]	; (1c048 <enableDriver+0x36>)
   1c018:	f893 00f0 	ldrbeq.w	r0, [r3, #240]	; 0xf0
	if(state ==  DRIVER_DISABLE)
   1c01c:	b930      	cbnz	r0, 1c02c <enableDriver+0x1a>
		HAL.IOs->config->setLow(PIN_DRV_ENN);
   1c01e:	4b0b      	ldr	r3, [pc, #44]	; (1c04c <enableDriver+0x3a>)
   1c020:	68db      	ldr	r3, [r3, #12]
   1c022:	681b      	ldr	r3, [r3, #0]
   1c024:	699b      	ldr	r3, [r3, #24]
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   1c026:	4a0a      	ldr	r2, [pc, #40]	; (1c050 <enableDriver+0x3e>)
   1c028:	6810      	ldr	r0, [r2, #0]
   1c02a:	4718      	bx	r3
	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
   1c02c:	2801      	cmp	r0, #1
   1c02e:	d109      	bne.n	1c044 <enableDriver+0x32>
   1c030:	4b05      	ldr	r3, [pc, #20]	; (1c048 <enableDriver+0x36>)
   1c032:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   1c036:	2b01      	cmp	r3, #1
   1c038:	d104      	bne.n	1c044 <enableDriver+0x32>
		HAL.IOs->config->setHigh(PIN_DRV_ENN);
   1c03a:	4b04      	ldr	r3, [pc, #16]	; (1c04c <enableDriver+0x3a>)
   1c03c:	68db      	ldr	r3, [r3, #12]
   1c03e:	681b      	ldr	r3, [r3, #0]
   1c040:	695b      	ldr	r3, [r3, #20]
   1c042:	e7f0      	b.n	1c026 <enableDriver+0x14>
}
   1c044:	4770      	bx	lr
   1c046:	bf00      	nop
   1c048:	1fff5e88 	.word	0x1fff5e88
   1c04c:	00029d1c 	.word	0x00029d1c
   1c050:	1fff6540 	.word	0x1fff6540

0001c054 <deInit>:
{
   1c054:	b510      	push	{r4, lr}
	enableDriver(DRIVER_DISABLE);
   1c056:	2000      	movs	r0, #0
   1c058:	f7ff ffdb 	bl	1c012 <enableDriver>
	HAL.IOs->config->reset(PIN_DRV_ENN);
   1c05c:	4b04      	ldr	r3, [pc, #16]	; (1c070 <deInit+0x1c>)
   1c05e:	4a05      	ldr	r2, [pc, #20]	; (1c074 <deInit+0x20>)
   1c060:	68db      	ldr	r3, [r3, #12]
   1c062:	6810      	ldr	r0, [r2, #0]
   1c064:	681b      	ldr	r3, [r3, #0]
};
   1c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL.IOs->config->reset(PIN_DRV_ENN);
   1c06a:	689b      	ldr	r3, [r3, #8]
   1c06c:	4718      	bx	r3
   1c06e:	bf00      	nop
   1c070:	00029d1c 	.word	0x00029d1c
   1c074:	1fff6540 	.word	0x1fff6540

0001c078 <restore>:
   1c078:	2001      	movs	r0, #1
   1c07a:	4770      	bx	lr

0001c07c <right>:
   1c07c:	b510      	push	{r4, lr}
   1c07e:	4604      	mov	r4, r0
   1c080:	4608      	mov	r0, r1
   1c082:	b91c      	cbnz	r4, 1c08c <right+0x10>
   1c084:	f008 ff44 	bl	24f10 <tmcc160_setTargetVelocity>
   1c088:	4620      	mov	r0, r4
   1c08a:	bd10      	pop	{r4, pc}
   1c08c:	2008      	movs	r0, #8
   1c08e:	e7fc      	b.n	1c08a <right+0xe>

0001c090 <tmcc160_spi_readwriteByte>:
	return spi_ch1_readWriteByte(data, lastTransfer);
   1c090:	f000 bea0 	b.w	1cdd4 <spi_ch1_readWriteByte>

0001c094 <tmcc160_writeDatagram>:
{
   1c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tmcc160_spi_readwriteByte(address | 0x80, false);
   1c096:	f040 0080 	orr.w	r0, r0, #128	; 0x80
{
   1c09a:	460e      	mov	r6, r1
	tmcc160_spi_readwriteByte(address | 0x80, false);
   1c09c:	2100      	movs	r1, #0
{
   1c09e:	4615      	mov	r5, r2
   1c0a0:	461c      	mov	r4, r3
   1c0a2:	f89d 7018 	ldrb.w	r7, [sp, #24]
	tmcc160_spi_readwriteByte(address | 0x80, false);
   1c0a6:	f7ff fff3 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(x3, false);
   1c0aa:	2100      	movs	r1, #0
   1c0ac:	4630      	mov	r0, r6
   1c0ae:	f7ff ffef 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(x2, false);
   1c0b2:	2100      	movs	r1, #0
   1c0b4:	4628      	mov	r0, r5
   1c0b6:	f7ff ffeb 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(x1, false);
   1c0ba:	2100      	movs	r1, #0
   1c0bc:	4620      	mov	r0, r4
   1c0be:	f7ff ffe7 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(x0, true);
   1c0c2:	4638      	mov	r0, r7
   1c0c4:	2101      	movs	r1, #1
}
   1c0c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tmcc160_spi_readwriteByte(x0, true);
   1c0ca:	f7ff bfe1 	b.w	1c090 <tmcc160_spi_readwriteByte>

0001c0ce <GAP>:
{
   1c0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c0d0:	4606      	mov	r6, r0
   1c0d2:	4615      	mov	r5, r2
	if(motor >= MOTORS)
   1c0d4:	460c      	mov	r4, r1
   1c0d6:	2900      	cmp	r1, #0
   1c0d8:	d146      	bne.n	1c168 <GAP+0x9a>
	switch(type)
   1c0da:	280d      	cmp	r0, #13
   1c0dc:	d80a      	bhi.n	1c0f4 <GAP+0x26>
   1c0de:	280d      	cmp	r0, #13
   1c0e0:	d80c      	bhi.n	1c0fc <GAP+0x2e>
   1c0e2:	e8df f000 	tbb	[pc, r0]
   1c0e6:	2e27      	.short	0x2e27
   1c0e8:	0b0b3431 	.word	0x0b0b3431
   1c0ec:	0b0b0b0b 	.word	0x0b0b0b0b
   1c0f0:	370b0b0b 	.word	0x370b0b0b
   1c0f4:	2896      	cmp	r0, #150	; 0x96
   1c0f6:	d030      	beq.n	1c15a <GAP+0x8c>
   1c0f8:	289b      	cmp	r0, #155	; 0x9b
   1c0fa:	d032      	beq.n	1c162 <GAP+0x94>
			tmcc160_writeDatagram(TMCL_REQUEST_BYTE_0123_REG_ADDR | 0x80, 6/*TMCL_GAP*/, type, motor, 0/*TMCL.command->Error*/);
   1c0fc:	2400      	movs	r4, #0
   1c0fe:	4623      	mov	r3, r4
   1c100:	4632      	mov	r2, r6
   1c102:	2106      	movs	r1, #6
   1c104:	20fc      	movs	r0, #252	; 0xfc
   1c106:	9400      	str	r4, [sp, #0]
   1c108:	f7ff ffc4 	bl	1c094 <tmcc160_writeDatagram>
		tmcc160_default_spi_delay();
   1c10c:	f008 fe99 	bl	24e42 <tmcc160_default_spi_delay>
		tmcc160_writeInt(TMCL_REQUEST_BYTE_4567_REG_ADDR | 0x80, *value);
   1c110:	6829      	ldr	r1, [r5, #0]
   1c112:	20fd      	movs	r0, #253	; 0xfd
   1c114:	f008 fe99 	bl	24e4a <tmcc160_writeInt>
		tmcc160_default_spi_delay();
   1c118:	f008 fe93 	bl	24e42 <tmcc160_default_spi_delay>
		tmcc160_readInt(TMCL_REPLY_BYTE_0123_REG_ADDR);
   1c11c:	207e      	movs	r0, #126	; 0x7e
   1c11e:	f008 feaf 	bl	24e80 <tmcc160_readInt>
		tmcc160_default_spi_delay();
   1c122:	f008 fe8e 	bl	24e42 <tmcc160_default_spi_delay>
		*value	= tmcc160_readInt(TMCL_REPLY_BYTE_4567_REG_ADDR);
   1c126:	207f      	movs	r0, #127	; 0x7f
   1c128:	f008 feaa 	bl	24e80 <tmcc160_readInt>
   1c12c:	6028      	str	r0, [r5, #0]
		tmcc160_default_spi_delay();
   1c12e:	f008 fe88 	bl	24e42 <tmcc160_default_spi_delay>
		break;
   1c132:	e003      	b.n	1c13c <GAP+0x6e>
			*value = tmcc160_getTargetPosition();
   1c134:	f008 ff01 	bl	24f3a <tmcc160_getTargetPosition>
			*value = tmcc160_getActualPosition();
   1c138:	6028      	str	r0, [r5, #0]
	uint32_t errors = TMC_ERROR_NONE;
   1c13a:	2400      	movs	r4, #0
}
   1c13c:	4620      	mov	r0, r4
   1c13e:	b002      	add	sp, #8
   1c140:	bd70      	pop	{r4, r5, r6, pc}
			*value = tmcc160_getActualPosition();
   1c142:	f008 ff01 	bl	24f48 <tmcc160_getActualPosition>
   1c146:	e7f7      	b.n	1c138 <GAP+0x6a>
			*value = tmcc160_getTargetVelocity();
   1c148:	f008 fee6 	bl	24f18 <tmcc160_getTargetVelocity>
   1c14c:	e7f4      	b.n	1c138 <GAP+0x6a>
			*value = tmcc160_getActualVelocity();
   1c14e:	f008 fee6 	bl	24f1e <tmcc160_getActualVelocity>
   1c152:	e7f1      	b.n	1c138 <GAP+0x6a>
			*value = tmcc160_getActualRampVelocity();
   1c154:	f008 fee6 	bl	24f24 <tmcc160_getActualRampVelocity>
   1c158:	e7ee      	b.n	1c138 <GAP+0x6a>
			*value = tmcc160_getActualTorque_mA();
   1c15a:	f008 fed5 	bl	24f08 <tmcc160_getActualTorque_mA>
			*value = tmcc160_getTargetTorque_mA();
   1c15e:	6028      	str	r0, [r5, #0]
   1c160:	e7ec      	b.n	1c13c <GAP+0x6e>
   1c162:	f008 fecf 	bl	24f04 <tmcc160_getTargetTorque_mA>
   1c166:	e7fa      	b.n	1c15e <GAP+0x90>
		return TMC_ERROR_MOTOR;
   1c168:	2408      	movs	r4, #8
	return handleParameter(READ, motor, type, value);
   1c16a:	e7e7      	b.n	1c13c <GAP+0x6e>

0001c16c <SAP>:
{
   1c16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c16e:	4615      	mov	r5, r2
	if(motor >= MOTORS)
   1c170:	2900      	cmp	r1, #0
   1c172:	d13d      	bne.n	1c1f0 <SAP+0x84>
	switch(type)
   1c174:	280d      	cmp	r0, #13
   1c176:	d80a      	bhi.n	1c18e <SAP+0x22>
   1c178:	280d      	cmp	r0, #13
   1c17a:	d80c      	bhi.n	1c196 <SAP+0x2a>
   1c17c:	e8df f000 	tbb	[pc, r0]
   1c180:	3a302c26 	.word	0x3a302c26
   1c184:	0b0b0b0b 	.word	0x0b0b0b0b
   1c188:	0b0b0b0b 	.word	0x0b0b0b0b
   1c18c:	3a0b      	.short	0x3a0b
   1c18e:	2896      	cmp	r0, #150	; 0x96
   1c190:	d030      	beq.n	1c1f4 <SAP+0x88>
   1c192:	289b      	cmp	r0, #155	; 0x9b
   1c194:	d028      	beq.n	1c1e8 <SAP+0x7c>
			tmcc160_writeDatagram(TMCL_REQUEST_BYTE_0123_REG_ADDR | 0x80, 5/*TMCL_SAP*/, type, motor, 0/*TMCL.command->Error*/);
   1c196:	2400      	movs	r4, #0
   1c198:	4602      	mov	r2, r0
   1c19a:	4623      	mov	r3, r4
   1c19c:	2105      	movs	r1, #5
   1c19e:	20fc      	movs	r0, #252	; 0xfc
   1c1a0:	9400      	str	r4, [sp, #0]
   1c1a2:	f7ff ff77 	bl	1c094 <tmcc160_writeDatagram>
		tmcc160_default_spi_delay();
   1c1a6:	f008 fe4c 	bl	24e42 <tmcc160_default_spi_delay>
		tmcc160_writeInt(TMCL_REQUEST_BYTE_4567_REG_ADDR | 0x80, *value);
   1c1aa:	4629      	mov	r1, r5
   1c1ac:	20fd      	movs	r0, #253	; 0xfd
   1c1ae:	f008 fe4c 	bl	24e4a <tmcc160_writeInt>
		tmcc160_default_spi_delay();
   1c1b2:	f008 fe46 	bl	24e42 <tmcc160_default_spi_delay>
		tmcc160_readInt(TMCL_REPLY_BYTE_0123_REG_ADDR);
   1c1b6:	207e      	movs	r0, #126	; 0x7e
   1c1b8:	f008 fe62 	bl	24e80 <tmcc160_readInt>
		tmcc160_default_spi_delay();
   1c1bc:	f008 fe41 	bl	24e42 <tmcc160_default_spi_delay>
		*value	= tmcc160_readInt(TMCL_REPLY_BYTE_4567_REG_ADDR);
   1c1c0:	207f      	movs	r0, #127	; 0x7f
   1c1c2:	f008 fe5d 	bl	24e80 <tmcc160_readInt>
		tmcc160_default_spi_delay();
   1c1c6:	f008 fe3c 	bl	24e42 <tmcc160_default_spi_delay>
		break;
   1c1ca:	e002      	b.n	1c1d2 <SAP+0x66>
			tmcc160_setAbsolutTargetPosition(*value);
   1c1cc:	4610      	mov	r0, r2
   1c1ce:	f008 feac 	bl	24f2a <tmcc160_setAbsolutTargetPosition>
	uint32_t errors = TMC_ERROR_NONE;
   1c1d2:	2000      	movs	r0, #0
}
   1c1d4:	b003      	add	sp, #12
   1c1d6:	bd30      	pop	{r4, r5, pc}
			tmcc160_setActualPosition(*value);
   1c1d8:	4610      	mov	r0, r2
   1c1da:	f008 feb1 	bl	24f40 <tmcc160_setActualPosition>
   1c1de:	e7f8      	b.n	1c1d2 <SAP+0x66>
			tmcc160_setTargetVelocity(*value);
   1c1e0:	4610      	mov	r0, r2
   1c1e2:	f008 fe95 	bl	24f10 <tmcc160_setTargetVelocity>
   1c1e6:	e7f4      	b.n	1c1d2 <SAP+0x66>
			tmcc160_setTargetTorque_mA(*value);
   1c1e8:	4610      	mov	r0, r2
   1c1ea:	f008 fe89 	bl	24f00 <tmcc160_setTargetTorque_mA>
   1c1ee:	e7f0      	b.n	1c1d2 <SAP+0x66>
		return TMC_ERROR_MOTOR;
   1c1f0:	2008      	movs	r0, #8
   1c1f2:	e7ef      	b.n	1c1d4 <SAP+0x68>
	switch(type)
   1c1f4:	2004      	movs	r0, #4
	return handleParameter(WRITE, motor, type, &value);
   1c1f6:	e7ed      	b.n	1c1d4 <SAP+0x68>

0001c1f8 <TMCC160_init>:

void TMCC160_init(void)
{
   1c1f8:	b538      	push	{r3, r4, r5, lr}
	// configure ENABLE-PIN for TMCC160
	PIN_DRV_ENN	= &HAL.IOs->pins->DIO0;
   1c1fa:	4b2b      	ldr	r3, [pc, #172]	; (1c2a8 <TMCC160_init+0xb0>)
   1c1fc:	4d2b      	ldr	r5, [pc, #172]	; (1c2ac <TMCC160_init+0xb4>)
   1c1fe:	68dc      	ldr	r4, [r3, #12]
   1c200:	6860      	ldr	r0, [r4, #4]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1c202:	6823      	ldr	r3, [r4, #0]
	PIN_DRV_ENN	= &HAL.IOs->pins->DIO0;
   1c204:	3068      	adds	r0, #104	; 0x68
   1c206:	6028      	str	r0, [r5, #0]
	HAL.IOs->config->toOutput(PIN_DRV_ENN);
   1c208:	68db      	ldr	r3, [r3, #12]
   1c20a:	4798      	blx	r3
	HAL.IOs->config->setHigh(PIN_DRV_ENN);
   1c20c:	6823      	ldr	r3, [r4, #0]
   1c20e:	6828      	ldr	r0, [r5, #0]
   1c210:	695b      	ldr	r3, [r3, #20]
   1c212:	4798      	blx	r3

	C160_config	= Evalboards.ch2.config;
   1c214:	4b26      	ldr	r3, [pc, #152]	; (1c2b0 <TMCC160_init+0xb8>)
   1c216:	4927      	ldr	r1, [pc, #156]	; (1c2b4 <TMCC160_init+0xbc>)
   1c218:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   1c21c:	600a      	str	r2, [r1, #0]

	// connect evalboard functions
	Evalboards.ch2.config->reset        = reset;
   1c21e:	4926      	ldr	r1, [pc, #152]	; (1c2b8 <TMCC160_init+0xc0>)
   1c220:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	Evalboards.ch2.config->restore      = restore;
	Evalboards.ch2.config->state        = CONFIG_RESET;
   1c224:	2401      	movs	r4, #1
	Evalboards.ch2.config->restore      = restore;
   1c226:	4925      	ldr	r1, [pc, #148]	; (1c2bc <TMCC160_init+0xc4>)
	Evalboards.ch2.config->state        = CONFIG_RESET;
   1c228:	8014      	strh	r4, [r2, #0]
	Evalboards.ch2.config->restore      = restore;
   1c22a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
	Evalboards.ch2.config->configIndex  = 0;

	Evalboards.ch2.rotate               = rotate;
   1c22e:	4a24      	ldr	r2, [pc, #144]	; (1c2c0 <TMCC160_init+0xc8>)
   1c230:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Evalboards.ch2.right                = right;
   1c234:	4a23      	ldr	r2, [pc, #140]	; (1c2c4 <TMCC160_init+0xcc>)
   1c236:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Evalboards.ch2.left                 = left;
   1c23a:	4a23      	ldr	r2, [pc, #140]	; (1c2c8 <TMCC160_init+0xd0>)
   1c23c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Evalboards.ch2.stop                 = stop;
   1c240:	4a22      	ldr	r2, [pc, #136]	; (1c2cc <TMCC160_init+0xd4>)
   1c242:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Evalboards.ch2.getMeasuredSpeed     = getMeasuredSpeed;
   1c246:	4a22      	ldr	r2, [pc, #136]	; (1c2d0 <TMCC160_init+0xd8>)
   1c248:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	Evalboards.ch2.GAP                  = GAP;
   1c24c:	4a21      	ldr	r2, [pc, #132]	; (1c2d4 <TMCC160_init+0xdc>)
   1c24e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Evalboards.ch2.SAP                  = SAP;
   1c252:	4a21      	ldr	r2, [pc, #132]	; (1c2d8 <TMCC160_init+0xe0>)
   1c254:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Evalboards.ch2.moveTo               = moveTo;
   1c258:	4a20      	ldr	r2, [pc, #128]	; (1c2dc <TMCC160_init+0xe4>)
   1c25a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Evalboards.ch2.moveBy               = moveBy;
   1c25e:	4a20      	ldr	r2, [pc, #128]	; (1c2e0 <TMCC160_init+0xe8>)
   1c260:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Evalboards.ch2.writeRegister        = writeRegister;
   1c264:	4a1f      	ldr	r2, [pc, #124]	; (1c2e4 <TMCC160_init+0xec>)
   1c266:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	Evalboards.ch2.readRegister         = readRegister;
   1c26a:	4a1f      	ldr	r2, [pc, #124]	; (1c2e8 <TMCC160_init+0xf0>)
   1c26c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	Evalboards.ch2.periodicJob          = periodicJob;
   1c270:	4a1e      	ldr	r2, [pc, #120]	; (1c2ec <TMCC160_init+0xf4>)
   1c272:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Evalboards.ch2.userFunction         = userFunction;
   1c276:	4a1e      	ldr	r2, [pc, #120]	; (1c2f0 <TMCC160_init+0xf8>)
   1c278:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	Evalboards.ch2.enableDriver         = enableDriver;
   1c27c:	4a1d      	ldr	r2, [pc, #116]	; (1c2f4 <TMCC160_init+0xfc>)
   1c27e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	Evalboards.ch2.checkErrors          = checkErrors;
   1c282:	4a1d      	ldr	r2, [pc, #116]	; (1c2f8 <TMCC160_init+0x100>)
   1c284:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Evalboards.ch2.numberOfMotors       = MOTORS;
	Evalboards.ch2.deInit               = deInit;
   1c288:	4a1c      	ldr	r2, [pc, #112]	; (1c2fc <TMCC160_init+0x104>)
   1c28a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Evalboards.ch2.VMMin                = 50;   // VM[V/10] min
	Evalboards.ch2.VMMax                = 280;  // VM[V/10] max +10%
   1c28e:	2132      	movs	r1, #50	; 0x32
   1c290:	f44f 728c 	mov.w	r2, #280	; 0x118
   1c294:	e9c3 2121 	strd	r2, r1, [r3, #132]	; 0x84
	Evalboards.ch2.numberOfMotors       = MOTORS;
   1c298:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c

	// init used API functions
	tmcc160_init();
   1c29c:	f008 fdca 	bl	24e34 <tmcc160_init>

	// enable the driver
	enableDriver(DRIVER_ENABLE);
   1c2a0:	4620      	mov	r0, r4
};
   1c2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	enableDriver(DRIVER_ENABLE);
   1c2a6:	e6b4      	b.n	1c012 <enableDriver>
   1c2a8:	00029d1c 	.word	0x00029d1c
   1c2ac:	1fff6540 	.word	0x1fff6540
   1c2b0:	1fff5e88 	.word	0x1fff5e88
   1c2b4:	1fff6560 	.word	0x1fff6560
   1c2b8:	0001bf71 	.word	0x0001bf71
   1c2bc:	0001c079 	.word	0x0001c079
   1c2c0:	0001bfc3 	.word	0x0001bfc3
   1c2c4:	0001c07d 	.word	0x0001c07d
   1c2c8:	0001bfe9 	.word	0x0001bfe9
   1c2cc:	0001bfd7 	.word	0x0001bfd7
   1c2d0:	0001bffd 	.word	0x0001bffd
   1c2d4:	0001c0cf 	.word	0x0001c0cf
   1c2d8:	0001c16d 	.word	0x0001c16d
   1c2dc:	0001bfaf 	.word	0x0001bfaf
   1c2e0:	0001bf9b 	.word	0x0001bf9b
   1c2e4:	0001bf93 	.word	0x0001bf93
   1c2e8:	0001bf85 	.word	0x0001bf85
   1c2ec:	0001bf81 	.word	0x0001bf81
   1c2f0:	0001bf6d 	.word	0x0001bf6d
   1c2f4:	0001c013 	.word	0x0001c013
   1c2f8:	0001bf75 	.word	0x0001bf75
   1c2fc:	0001c055 	.word	0x0001c055

0001c300 <SysTick_Handler>:
volatile uint32_t systick = 0;

void __attribute__ ((interrupt)) SysTick_Handler(void);

void SysTick_Handler(void)
{
   1c300:	4668      	mov	r0, sp
   1c302:	f020 0107 	bic.w	r1, r0, #7
   1c306:	468d      	mov	sp, r1
   1c308:	b501      	push	{r0, lr}
	systick++;
   1c30a:	4a04      	ldr	r2, [pc, #16]	; (1c31c <SysTick_Handler+0x1c>)
}
   1c30c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
	systick++;
   1c310:	6813      	ldr	r3, [r2, #0]
   1c312:	3301      	adds	r3, #1
   1c314:	6013      	str	r3, [r2, #0]
}
   1c316:	4685      	mov	sp, r0
   1c318:	4770      	bx	lr
   1c31a:	bf00      	nop
   1c31c:	1fff4570 	.word	0x1fff4570

0001c320 <systick_init>:

void systick_init()
{
	SYST_RVR  = 48000;
   1c320:	4b03      	ldr	r3, [pc, #12]	; (1c330 <systick_init+0x10>)
   1c322:	f64b 3280 	movw	r2, #48000	; 0xbb80
   1c326:	605a      	str	r2, [r3, #4]
	SYST_CSR  = 7;
   1c328:	2207      	movs	r2, #7
   1c32a:	601a      	str	r2, [r3, #0]
}
   1c32c:	4770      	bx	lr
   1c32e:	bf00      	nop
   1c330:	e000e010 	.word	0xe000e010

0001c334 <systick_getTick>:

uint32_t systick_getTick()
{
	return systick;
   1c334:	4b01      	ldr	r3, [pc, #4]	; (1c33c <systick_getTick+0x8>)
   1c336:	6818      	ldr	r0, [r3, #0]
}
   1c338:	4770      	bx	lr
   1c33a:	bf00      	nop
   1c33c:	1fff4570 	.word	0x1fff4570

0001c340 <wait>:
 * to UINT32_MAX, returning 0 in that case (Saturated subtraction).
 *
 */
void wait(uint32_t delay)	// wait for [delay] ms/systicks
{
	uint32_t startTick = systick;
   1c340:	4b03      	ldr	r3, [pc, #12]	; (1c350 <wait+0x10>)
   1c342:	6819      	ldr	r1, [r3, #0]
	while((systick-startTick) <= delay) {}
   1c344:	681a      	ldr	r2, [r3, #0]
   1c346:	1a52      	subs	r2, r2, r1
   1c348:	4282      	cmp	r2, r0
   1c34a:	d9fb      	bls.n	1c344 <wait+0x4>
}
   1c34c:	4770      	bx	lr
   1c34e:	bf00      	nop
   1c350:	1fff4570 	.word	0x1fff4570

0001c354 <timeSince>:

uint32_t timeSince(uint32_t tick)	// time difference since the [tick] timestamp in ms/systicks
{
	uint32_t tickDiff = systick - tick;
   1c354:	4b03      	ldr	r3, [pc, #12]	; (1c364 <timeSince+0x10>)
   1c356:	681b      	ldr	r3, [r3, #0]

	// Prevent subtraction underflow - saturate to 0 instead
	if(tickDiff != 0)
   1c358:	1a18      	subs	r0, r3, r0
		return tickDiff - 1;
   1c35a:	bf18      	it	ne
   1c35c:	f100 30ff 	addne.w	r0, r0, #4294967295
	else
		return 0;
}
   1c360:	4770      	bx	lr
   1c362:	bf00      	nop
   1c364:	1fff4570 	.word	0x1fff4570

0001c368 <init>:

static void init()
{
	// Set the Clock divider for core/system clock
	// 96 MHz / 2 = 48 MHz
	SIM_CLKDIV1 |= SIM_CLKDIV1_OUTDIV1(1);
   1c368:	4b0e      	ldr	r3, [pc, #56]	; (1c3a4 <init+0x3c>)
   1c36a:	f241 0144 	movw	r1, #4164	; 0x1044
   1c36e:	585a      	ldr	r2, [r3, r1]
   1c370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1c374:	505a      	str	r2, [r3, r1]

	SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK| SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK |SIM_SCGC5_PORTD_MASK);
   1c376:	f241 0138 	movw	r1, #4152	; 0x1038
   1c37a:	585a      	ldr	r2, [r3, r1]
   1c37c:	f442 52f0 	orr.w	r2, r2, #7680	; 0x1e00
   1c380:	505a      	str	r2, [r3, r1]

	// Ausgabe des 16Mhz Taktes auf den CLK16 Pin
	SIM_SOPT2 &= ~SIM_SOPT2_CLKOUTSEL_MASK;
   1c382:	f241 0204 	movw	r2, #4100	; 0x1004
   1c386:	5899      	ldr	r1, [r3, r2]
   1c388:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
   1c38c:	5099      	str	r1, [r3, r2]
	SIM_SOPT2 |= SIM_SOPT2_CLKOUTSEL(6);
   1c38e:	5899      	ldr	r1, [r3, r2]
   1c390:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   1c394:	5099      	str	r1, [r3, r2]
	PORTC_PCR3 = PORT_PCR_MUX(5);
   1c396:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   1c39a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   1c39e:	60da      	str	r2, [r3, #12]
}
   1c3a0:	4770      	bx	lr
   1c3a2:	bf00      	nop
   1c3a4:	40047000 	.word	0x40047000

0001c3a8 <setPinConfiguration>:

static void setPinConfiguration(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c3a8:	6903      	ldr	r3, [r0, #16]
   1c3aa:	b1fb      	cbz	r3, 1c3ec <setPinConfiguration+0x44>
		return;

	uint32_t config = 0;
	switch(pin->configuration.GPIO_Mode)
   1c3ac:	7d42      	ldrb	r2, [r0, #21]
   1c3ae:	3a01      	subs	r2, #1
   1c3b0:	2a08      	cmp	r2, #8
   1c3b2:	d833      	bhi.n	1c41c <setPinConfiguration+0x74>
   1c3b4:	e8df f002 	tbb	[pc, r2]
   1c3b8:	2623200a 	.word	0x2623200a
   1c3bc:	052f2c29 	.word	0x052f2c29
   1c3c0:	1b          	.byte	0x1b
   1c3c1:	00          	.byte	0x00
	{
	case GPIO_Mode_IN:
		GPIO_PDD_SetPortInputDirectionMask(pin->GPIOBase, pin->bitWeight);
   1c3c2:	6841      	ldr	r1, [r0, #4]
   1c3c4:	694a      	ldr	r2, [r1, #20]
   1c3c6:	ea22 0303 	bic.w	r3, r2, r3
   1c3ca:	614b      	str	r3, [r1, #20]
		config |= PORT_PCR_MUX(1);
   1c3cc:	f44f 7380 	mov.w	r3, #256	; 0x100
	case GPIO_Mode_AF5:  config |= PORT_PCR_MUX(5);  break;
	case GPIO_Mode_AF6:  config |= PORT_PCR_MUX(6);  break;
	case GPIO_Mode_AF7:  config |= PORT_PCR_MUX(7);  break;
	}

	switch(pin->configuration.GPIO_OType)
   1c3d0:	7dc2      	ldrb	r2, [r0, #23]
   1c3d2:	2a01      	cmp	r2, #1
	case GPIO_Speed_25MHz:   break;
	case GPIO_Speed_50MHz:   break;
	case GPIO_Speed_100MHz:  break;
	}

	switch(pin->configuration.GPIO_PuPd)
   1c3d4:	7e02      	ldrb	r2, [r0, #24]
		config |= PORT_PCR_ODE_MASK; // enable open drain
   1c3d6:	bf08      	it	eq
   1c3d8:	f043 0320 	orreq.w	r3, r3, #32
	switch(pin->configuration.GPIO_PuPd)
   1c3dc:	2a01      	cmp	r2, #1
   1c3de:	d01f      	beq.n	1c420 <setPinConfiguration+0x78>
   1c3e0:	2a02      	cmp	r2, #2
   1c3e2:	d020      	beq.n	1c426 <setPinConfiguration+0x7e>
		config |= PORT_PCR_PE_MASK;
		config &= ~(PORT_PCR_PS_MASK);
		break;
	}

	PORT_PCR_REG(pin->portBase, pin->bit) = config;
   1c3e4:	6802      	ldr	r2, [r0, #0]
   1c3e6:	7d01      	ldrb	r1, [r0, #20]
   1c3e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1c3ec:	4770      	bx	lr
		GPIO_PDD_SetPortOutputDirectionMask(pin->GPIOBase, pin->bitWeight);
   1c3ee:	6842      	ldr	r2, [r0, #4]
   1c3f0:	6951      	ldr	r1, [r2, #20]
   1c3f2:	430b      	orrs	r3, r1
   1c3f4:	6153      	str	r3, [r2, #20]
		break;
   1c3f6:	e7e9      	b.n	1c3cc <setPinConfiguration+0x24>
	case GPIO_Mode_AF2:  config |= PORT_PCR_MUX(2);  break;
   1c3f8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c3fc:	e7e8      	b.n	1c3d0 <setPinConfiguration+0x28>
	case GPIO_Mode_AF3:  config |= PORT_PCR_MUX(3);  break;
   1c3fe:	f44f 7340 	mov.w	r3, #768	; 0x300
   1c402:	e7e5      	b.n	1c3d0 <setPinConfiguration+0x28>
	case GPIO_Mode_AF4:  config |= PORT_PCR_MUX(4);  break;
   1c404:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1c408:	e7e2      	b.n	1c3d0 <setPinConfiguration+0x28>
	case GPIO_Mode_AF5:  config |= PORT_PCR_MUX(5);  break;
   1c40a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   1c40e:	e7df      	b.n	1c3d0 <setPinConfiguration+0x28>
	case GPIO_Mode_AF6:  config |= PORT_PCR_MUX(6);  break;
   1c410:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1c414:	e7dc      	b.n	1c3d0 <setPinConfiguration+0x28>
	case GPIO_Mode_AF7:  config |= PORT_PCR_MUX(7);  break;
   1c416:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   1c41a:	e7d9      	b.n	1c3d0 <setPinConfiguration+0x28>
	uint32_t config = 0;
   1c41c:	2300      	movs	r3, #0
   1c41e:	e7d7      	b.n	1c3d0 <setPinConfiguration+0x28>
		config |= PORT_PCR_PS_MASK;
   1c420:	f043 0303 	orr.w	r3, r3, #3
		break;
   1c424:	e7de      	b.n	1c3e4 <setPinConfiguration+0x3c>
		config |= PORT_PCR_PE_MASK;
   1c426:	f043 0302 	orr.w	r3, r3, #2
		break;
   1c42a:	e7db      	b.n	1c3e4 <setPinConfiguration+0x3c>

0001c42c <setPin2Output>:

static void setPin2Output(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c42c:	6902      	ldr	r2, [r0, #16]
   1c42e:	b112      	cbz	r2, 1c436 <setPin2Output+0xa>
		return;

	pin->configuration.GPIO_Mode = GPIO_Mode_OUT;
   1c430:	2209      	movs	r2, #9
   1c432:	7542      	strb	r2, [r0, #21]
	setPinConfiguration(pin);
   1c434:	e7b8      	b.n	1c3a8 <setPinConfiguration>
}
   1c436:	4770      	bx	lr

0001c438 <setPin2Input>:

static void setPin2Input(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c438:	6902      	ldr	r2, [r0, #16]
   1c43a:	b112      	cbz	r2, 1c442 <setPin2Input+0xa>
		return;

	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
   1c43c:	2208      	movs	r2, #8
   1c43e:	7542      	strb	r2, [r0, #21]
	setPinConfiguration(pin);
   1c440:	e7b2      	b.n	1c3a8 <setPinConfiguration>
}
   1c442:	4770      	bx	lr

0001c444 <getPinState>:
	setPinConfiguration(pin);
}

static IO_States getPinState(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c444:	6903      	ldr	r3, [r0, #16]
   1c446:	b15b      	cbz	r3, 1c460 <getPinState+0x1c>
		return IOS_OPEN;

	if(pin->configuration.GPIO_Mode == GPIO_Mode_AN)
   1c448:	7d42      	ldrb	r2, [r0, #21]
   1c44a:	b91a      	cbnz	r2, 1c454 <getPinState+0x10>
		pin->state = IOS_OPEN;
   1c44c:	2302      	movs	r3, #2
	else if(GPIO_PDIR_REG(pin->GPIOBase) & pin->bitWeight)
		pin->state = IOS_HIGH;
	else
		pin->state = IOS_LOW;
   1c44e:	7783      	strb	r3, [r0, #30]

	return pin->state;
   1c450:	7f80      	ldrb	r0, [r0, #30]
   1c452:	4770      	bx	lr
	else if(GPIO_PDIR_REG(pin->GPIOBase) & pin->bitWeight)
   1c454:	6842      	ldr	r2, [r0, #4]
   1c456:	6912      	ldr	r2, [r2, #16]
   1c458:	4013      	ands	r3, r2
		pin->state = IOS_HIGH;
   1c45a:	bf18      	it	ne
   1c45c:	2301      	movne	r3, #1
   1c45e:	e7f6      	b.n	1c44e <getPinState+0xa>
		return IOS_OPEN;
   1c460:	2002      	movs	r0, #2
}
   1c462:	4770      	bx	lr

0001c464 <setPinHigh>:

static void setPinHigh(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c464:	6903      	ldr	r3, [r0, #16]
   1c466:	b11b      	cbz	r3, 1c470 <setPinHigh+0xc>
		return;

	*pin->setBitRegister = pin->bitWeight;
   1c468:	6882      	ldr	r2, [r0, #8]
   1c46a:	6013      	str	r3, [r2, #0]
	pin->state = IOS_HIGH;
   1c46c:	2301      	movs	r3, #1
   1c46e:	7783      	strb	r3, [r0, #30]
}
   1c470:	4770      	bx	lr

0001c472 <setPinLow>:

static void setPinLow(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c472:	6903      	ldr	r3, [r0, #16]
   1c474:	b11b      	cbz	r3, 1c47e <setPinLow+0xc>
		return;

	*pin->resetBitRegister = pin->bitWeight;
   1c476:	68c2      	ldr	r2, [r0, #12]
   1c478:	6013      	str	r3, [r2, #0]
	pin->state = IOS_LOW;
   1c47a:	2300      	movs	r3, #0
   1c47c:	7783      	strb	r3, [r0, #30]
}
   1c47e:	4770      	bx	lr

0001c480 <isPinHigh>:

static uint8_t isPinHigh(IOPinTypeDef *pin) // Die Abfrage eines Pins funktioniert nur, wenn der Pin AF1 ist
{
	if(IS_DUMMY_PIN(pin))
   1c480:	6903      	ldr	r3, [r0, #16]
   1c482:	b133      	cbz	r3, 1c492 <isPinHigh+0x12>
		return -1;

	return (GPIO_PDIR_REG(pin->GPIOBase) & pin->bitWeight)? 1 : 0;
   1c484:	6842      	ldr	r2, [r0, #4]
   1c486:	6912      	ldr	r2, [r2, #16]
   1c488:	4213      	tst	r3, r2
   1c48a:	bf14      	ite	ne
   1c48c:	2001      	movne	r0, #1
   1c48e:	2000      	moveq	r0, #0
   1c490:	4770      	bx	lr
		return -1;
   1c492:	20ff      	movs	r0, #255	; 0xff
}
   1c494:	4770      	bx	lr

0001c496 <setPinState>:
{
   1c496:	b538      	push	{r3, r4, r5, lr}
	if(IS_DUMMY_PIN(pin))
   1c498:	6903      	ldr	r3, [r0, #16]
{
   1c49a:	4604      	mov	r4, r0
   1c49c:	460d      	mov	r5, r1
	if(IS_DUMMY_PIN(pin))
   1c49e:	b303      	cbz	r3, 1c4e2 <setPinState+0x4c>
	switch(state)
   1c4a0:	2901      	cmp	r1, #1
   1c4a2:	d010      	beq.n	1c4c6 <setPinState+0x30>
   1c4a4:	2902      	cmp	r1, #2
   1c4a6:	d017      	beq.n	1c4d8 <setPinState+0x42>
   1c4a8:	b941      	cbnz	r1, 1c4bc <setPinState+0x26>
		pin->configuration.GPIO_Mode   = GPIO_Mode_OUT;
   1c4aa:	2309      	movs	r3, #9
   1c4ac:	7543      	strb	r3, [r0, #21]
		pin->configuration.GPIO_PuPd   = GPIO_PuPd_NOPULL;
   1c4ae:	7601      	strb	r1, [r0, #24]
		pin->configuration.GPIO_OType  = GPIO_OType_PP;
   1c4b0:	75c1      	strb	r1, [r0, #23]
		setPinConfiguration(pin);
   1c4b2:	f7ff ff79 	bl	1c3a8 <setPinConfiguration>
		*pin->resetBitRegister = pin->bitWeight;
   1c4b6:	68c3      	ldr	r3, [r0, #12]
		*pin->setBitRegister = pin->bitWeight;
   1c4b8:	6922      	ldr	r2, [r4, #16]
   1c4ba:	601a      	str	r2, [r3, #0]
	pin->state = state;
   1c4bc:	77a5      	strb	r5, [r4, #30]
	setPinConfiguration(pin);
   1c4be:	4620      	mov	r0, r4
}
   1c4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	setPinConfiguration(pin);
   1c4c4:	e770      	b.n	1c3a8 <setPinConfiguration>
		pin->configuration.GPIO_Mode   = GPIO_Mode_OUT;
   1c4c6:	2309      	movs	r3, #9
   1c4c8:	7543      	strb	r3, [r0, #21]
		pin->configuration.GPIO_PuPd   = GPIO_PuPd_NOPULL;
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	7603      	strb	r3, [r0, #24]
		pin->configuration.GPIO_OType  = GPIO_OType_PP;
   1c4ce:	75c3      	strb	r3, [r0, #23]
		setPinConfiguration(pin);
   1c4d0:	f7ff ff6a 	bl	1c3a8 <setPinConfiguration>
		*pin->setBitRegister = pin->bitWeight;
   1c4d4:	6883      	ldr	r3, [r0, #8]
   1c4d6:	e7ef      	b.n	1c4b8 <setPinState+0x22>
		pin->configuration.GPIO_Mode  = GPIO_Mode_AN;
   1c4d8:	2300      	movs	r3, #0
   1c4da:	7543      	strb	r3, [r0, #21]
		setPinConfiguration(pin);
   1c4dc:	f7ff ff64 	bl	1c3a8 <setPinConfiguration>
		break;
   1c4e0:	e7ec      	b.n	1c4bc <setPinState+0x26>
}
   1c4e2:	bd38      	pop	{r3, r4, r5, pc}

0001c4e4 <copyPinConfiguration>:

static void copyPinConfiguration(IOPinInitTypeDef *from, IOPinTypeDef *to)
{
	if(IS_DUMMY_PIN(to))
   1c4e4:	690a      	ldr	r2, [r1, #16]
{
   1c4e6:	4603      	mov	r3, r0
   1c4e8:	4608      	mov	r0, r1
	if(IS_DUMMY_PIN(to))
   1c4ea:	b142      	cbz	r2, 1c4fe <copyPinConfiguration+0x1a>
		return;

	to->configuration.GPIO_Mode   = from->GPIO_Mode;
   1c4ec:	781a      	ldrb	r2, [r3, #0]
   1c4ee:	754a      	strb	r2, [r1, #21]
	to->configuration.GPIO_OType  = from->GPIO_OType;
   1c4f0:	789a      	ldrb	r2, [r3, #2]
   1c4f2:	75ca      	strb	r2, [r1, #23]
	to->configuration.GPIO_PuPd   = from->GPIO_PuPd;
   1c4f4:	78da      	ldrb	r2, [r3, #3]
   1c4f6:	760a      	strb	r2, [r1, #24]
	to->configuration.GPIO_Speed  = from->GPIO_Speed;
   1c4f8:	785b      	ldrb	r3, [r3, #1]
   1c4fa:	758b      	strb	r3, [r1, #22]
	setPinConfiguration(to);
   1c4fc:	e754      	b.n	1c3a8 <setPinConfiguration>
}
   1c4fe:	4770      	bx	lr

0001c500 <resetPinConfiguration>:

static void resetPinConfiguration(IOPinTypeDef *pin)
{
	if(IS_DUMMY_PIN(pin))
   1c500:	6903      	ldr	r3, [r0, #16]
{
   1c502:	b510      	push	{r4, lr}
   1c504:	4604      	mov	r4, r0
	if(IS_DUMMY_PIN(pin))
   1c506:	b1ab      	cbz	r3, 1c534 <resetPinConfiguration+0x34>
		return;

	copyPinConfiguration(&(pin->resetConfiguration), pin);
   1c508:	4601      	mov	r1, r0
   1c50a:	3019      	adds	r0, #25
   1c50c:	f7ff ffea 	bl	1c4e4 <copyPinConfiguration>

	// Extra Reset Konfiguration für CLK16
	if(pin == &IOMap.CLK16)
   1c510:	4b09      	ldr	r3, [pc, #36]	; (1c538 <resetPinConfiguration+0x38>)
   1c512:	429c      	cmp	r4, r3
   1c514:	d10e      	bne.n	1c534 <resetPinConfiguration+0x34>
	{
		SIM_SOPT2 &= ~SIM_SOPT2_CLKOUTSEL_MASK;
   1c516:	4a09      	ldr	r2, [pc, #36]	; (1c53c <resetPinConfiguration+0x3c>)
   1c518:	f241 0304 	movw	r3, #4100	; 0x1004
   1c51c:	58d1      	ldr	r1, [r2, r3]
   1c51e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
   1c522:	50d1      	str	r1, [r2, r3]
		SIM_SOPT2 |= SIM_SOPT2_CLKOUTSEL(6);
   1c524:	58d1      	ldr	r1, [r2, r3]
   1c526:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   1c52a:	50d1      	str	r1, [r2, r3]
		PORTC_PCR3 = PORT_PCR_MUX(5);
   1c52c:	4b04      	ldr	r3, [pc, #16]	; (1c540 <resetPinConfiguration+0x40>)
   1c52e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   1c532:	60da      	str	r2, [r3, #12]
	}
}
   1c534:	bd10      	pop	{r4, pc}
   1c536:	bf00      	nop
   1c538:	1fff0398 	.word	0x1fff0398
   1c53c:	40047000 	.word	0x40047000
   1c540:	4004b000 	.word	0x4004b000

0001c544 <init>:
};


static void init()
{
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_CLK);
   1c544:	4bb2      	ldr	r3, [pc, #712]	; (1c810 <init+0x2cc>)
{
   1c546:	b510      	push	{r4, lr}
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_CLK);
   1c548:	68dc      	ldr	r4, [r3, #12]
   1c54a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c54e:	689b      	ldr	r3, [r3, #8]
   1c550:	3008      	adds	r0, #8
   1c552:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_CH0);
   1c554:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c558:	689b      	ldr	r3, [r3, #8]
   1c55a:	3028      	adds	r0, #40	; 0x28
   1c55c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_CH1);
   1c55e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c562:	689b      	ldr	r3, [r3, #8]
   1c564:	3048      	adds	r0, #72	; 0x48
   1c566:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO0);
   1c568:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c56c:	689b      	ldr	r3, [r3, #8]
   1c56e:	3068      	adds	r0, #104	; 0x68
   1c570:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO1);
   1c572:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c576:	689b      	ldr	r3, [r3, #8]
   1c578:	3088      	adds	r0, #136	; 0x88
   1c57a:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO2);
   1c57c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c580:	689b      	ldr	r3, [r3, #8]
   1c582:	30a8      	adds	r0, #168	; 0xa8
   1c584:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO3);
   1c586:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c58a:	689b      	ldr	r3, [r3, #8]
   1c58c:	30c8      	adds	r0, #200	; 0xc8
   1c58e:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO4);
   1c590:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c594:	689b      	ldr	r3, [r3, #8]
   1c596:	30e8      	adds	r0, #232	; 0xe8
   1c598:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO5);
   1c59a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c59e:	689b      	ldr	r3, [r3, #8]
   1c5a0:	f500 7084 	add.w	r0, r0, #264	; 0x108
   1c5a4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO6);
   1c5a6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5aa:	689b      	ldr	r3, [r3, #8]
   1c5ac:	f500 7094 	add.w	r0, r0, #296	; 0x128
   1c5b0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO7);
   1c5b2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5b6:	689b      	ldr	r3, [r3, #8]
   1c5b8:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   1c5bc:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO8);
   1c5be:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5c2:	689b      	ldr	r3, [r3, #8]
   1c5c4:	f500 70b4 	add.w	r0, r0, #360	; 0x168
   1c5c8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO9);
   1c5ca:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5ce:	689b      	ldr	r3, [r3, #8]
   1c5d0:	f500 70c4 	add.w	r0, r0, #392	; 0x188
   1c5d4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO10);
   1c5d6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5da:	689b      	ldr	r3, [r3, #8]
   1c5dc:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1c5e0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO11);
   1c5e2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5e6:	689b      	ldr	r3, [r3, #8]
   1c5e8:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1c5ec:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_CSN0);
   1c5ee:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5f2:	689b      	ldr	r3, [r3, #8]
   1c5f4:	f500 7002 	add.w	r0, r0, #520	; 0x208
   1c5f8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_CSN1);
   1c5fa:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c5fe:	689b      	ldr	r3, [r3, #8]
   1c600:	f500 700a 	add.w	r0, r0, #552	; 0x228
   1c604:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_CSN2);
   1c606:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c60a:	689b      	ldr	r3, [r3, #8]
   1c60c:	f500 7012 	add.w	r0, r0, #584	; 0x248
   1c610:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SCK);
   1c612:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c616:	689b      	ldr	r3, [r3, #8]
   1c618:	f500 701a 	add.w	r0, r0, #616	; 0x268
   1c61c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDO);
   1c61e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c622:	689b      	ldr	r3, [r3, #8]
   1c624:	f500 7022 	add.w	r0, r0, #648	; 0x288
   1c628:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDI);
   1c62a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c62e:	689b      	ldr	r3, [r3, #8]
   1c630:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
   1c634:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_CSN);
   1c636:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c63a:	689b      	ldr	r3, [r3, #8]
   1c63c:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
   1c640:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SCK);
   1c642:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c646:	689b      	ldr	r3, [r3, #8]
   1c648:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
   1c64c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDI);
   1c64e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c652:	689b      	ldr	r3, [r3, #8]
   1c654:	f500 7042 	add.w	r0, r0, #776	; 0x308
   1c658:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDO);
   1c65a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c65e:	689b      	ldr	r3, [r3, #8]
   1c660:	f500 704a 	add.w	r0, r0, #808	; 0x328
   1c664:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO12);
   1c666:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c66a:	689b      	ldr	r3, [r3, #8]
   1c66c:	f500 7052 	add.w	r0, r0, #840	; 0x348
   1c670:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO13);
   1c672:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c676:	689b      	ldr	r3, [r3, #8]
   1c678:	f500 705a 	add.w	r0, r0, #872	; 0x368
   1c67c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO14);
   1c67e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c682:	689b      	ldr	r3, [r3, #8]
   1c684:	f500 7062 	add.w	r0, r0, #904	; 0x388
   1c688:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO15);
   1c68a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c68e:	689b      	ldr	r3, [r3, #8]
   1c690:	f500 706a 	add.w	r0, r0, #936	; 0x3a8
   1c694:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO16);
   1c696:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c69a:	689b      	ldr	r3, [r3, #8]
   1c69c:	f500 7072 	add.w	r0, r0, #968	; 0x3c8
   1c6a0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO17);
   1c6a2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6a6:	689b      	ldr	r3, [r3, #8]
   1c6a8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
   1c6ac:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO18);
   1c6ae:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6b2:	689b      	ldr	r3, [r3, #8]
   1c6b4:	f500 6081 	add.w	r0, r0, #1032	; 0x408
   1c6b8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->DIO19);
   1c6ba:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6be:	689b      	ldr	r3, [r3, #8]
   1c6c0:	f500 6085 	add.w	r0, r0, #1064	; 0x428
   1c6c4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->WIRELESS_TX);
   1c6c6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6ca:	689b      	ldr	r3, [r3, #8]
   1c6cc:	f500 6089 	add.w	r0, r0, #1096	; 0x448
   1c6d0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->WIRELESS_RX);
   1c6d2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6d6:	689b      	ldr	r3, [r3, #8]
   1c6d8:	f500 608d 	add.w	r0, r0, #1128	; 0x468
   1c6dc:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->WIRELESS_NRST);
   1c6de:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6e2:	689b      	ldr	r3, [r3, #8]
   1c6e4:	f500 6091 	add.w	r0, r0, #1160	; 0x488
   1c6e8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->RS232_TX);
   1c6ea:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6ee:	689b      	ldr	r3, [r3, #8]
   1c6f0:	f500 6095 	add.w	r0, r0, #1192	; 0x4a8
   1c6f4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->RS232_RX);
   1c6f6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c6fa:	689b      	ldr	r3, [r3, #8]
   1c6fc:	f500 6099 	add.w	r0, r0, #1224	; 0x4c8
   1c700:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->USB_V_BUS);
   1c702:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c706:	689b      	ldr	r3, [r3, #8]
   1c708:	f500 609d 	add.w	r0, r0, #1256	; 0x4e8
   1c70c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->LED_STAT);
   1c70e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c712:	689b      	ldr	r3, [r3, #8]
   1c714:	f500 60a9 	add.w	r0, r0, #1352	; 0x548
   1c718:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->LED_ERROR);
   1c71a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c71e:	689b      	ldr	r3, [r3, #8]
   1c720:	f500 60ad 	add.w	r0, r0, #1384	; 0x568
   1c724:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EXTIO_2);
   1c726:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c72a:	689b      	ldr	r3, [r3, #8]
   1c72c:	f500 60b1 	add.w	r0, r0, #1416	; 0x588
   1c730:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EXTIO_3);
   1c732:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c736:	689b      	ldr	r3, [r3, #8]
   1c738:	f500 60b5 	add.w	r0, r0, #1448	; 0x5a8
   1c73c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EXTIO_4);
   1c73e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c742:	689b      	ldr	r3, [r3, #8]
   1c744:	f500 60b9 	add.w	r0, r0, #1480	; 0x5c8
   1c748:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EXTIO_5);
   1c74a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c74e:	689b      	ldr	r3, [r3, #8]
   1c750:	f500 60bd 	add.w	r0, r0, #1512	; 0x5e8
   1c754:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EEPROM_SCK);
   1c756:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c75a:	689b      	ldr	r3, [r3, #8]
   1c75c:	f500 60c9 	add.w	r0, r0, #1608	; 0x648
   1c760:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EEPROM_SI);
   1c762:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c766:	689b      	ldr	r3, [r3, #8]
   1c768:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   1c76c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EEPROM_SO);
   1c76e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c772:	689b      	ldr	r3, [r3, #8]
   1c774:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
   1c778:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->EEPROM_NCS);
   1c77a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c77e:	689b      	ldr	r3, [r3, #8]
   1c780:	f500 60d5 	add.w	r0, r0, #1704	; 0x6a8
   1c784:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
   1c786:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c78a:	689b      	ldr	r3, [r3, #8]
   1c78c:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
   1c790:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED0);
   1c792:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c796:	689b      	ldr	r3, [r3, #8]
   1c798:	f500 60d9 	add.w	r0, r0, #1736	; 0x6c8
   1c79c:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED1);
   1c79e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7a2:	689b      	ldr	r3, [r3, #8]
   1c7a4:	f500 60dd 	add.w	r0, r0, #1768	; 0x6e8
   1c7a8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED2);
   1c7aa:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7ae:	689b      	ldr	r3, [r3, #8]
   1c7b0:	f500 60e1 	add.w	r0, r0, #1800	; 0x708
   1c7b4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED3);
   1c7b6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7ba:	689b      	ldr	r3, [r3, #8]
   1c7bc:	f500 60e5 	add.w	r0, r0, #1832	; 0x728
   1c7c0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED4);
   1c7c2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7c6:	689b      	ldr	r3, [r3, #8]
   1c7c8:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
   1c7cc:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED5);
   1c7ce:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7d2:	689b      	ldr	r3, [r3, #8]
   1c7d4:	f500 60ed 	add.w	r0, r0, #1896	; 0x768
   1c7d8:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->MIXED6);
   1c7da:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7de:	689b      	ldr	r3, [r3, #8]
   1c7e0:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
   1c7e4:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_HW_0);
   1c7e6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7ea:	689b      	ldr	r3, [r3, #8]
   1c7ec:	f500 60f5 	add.w	r0, r0, #1960	; 0x7a8
   1c7f0:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_HW_1);
   1c7f2:	e9d4 3000 	ldrd	r3, r0, [r4]
   1c7f6:	689b      	ldr	r3, [r3, #8]
   1c7f8:	f500 60f9 	add.w	r0, r0, #1992	; 0x7c8
   1c7fc:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_HW_2);
   1c7fe:	e9d4 3000 	ldrd	r3, r0, [r4]
}
   1c802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL.IOs->config->reset(&HAL.IOs->pins->ID_HW_2);
   1c806:	689b      	ldr	r3, [r3, #8]
   1c808:	f500 60fd 	add.w	r0, r0, #2024	; 0x7e8
   1c80c:	4718      	bx	r3
   1c80e:	bf00      	nop
   1c810:	00029d1c 	.word	0x00029d1c

0001c814 <reset>:
	get_hwid();
}

static void __attribute((noreturn)) reset(uint8_t ResetPeripherals)
{
	DisableInterrupts;
   1c814:	b672      	cpsid	i

	if(ResetPeripherals)
   1c816:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1c81a:	b118      	cbz	r0, 1c824 <reset+0x10>
		SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_SYSRESETREQ_MASK;
   1c81c:	4a03      	ldr	r2, [pc, #12]	; (1c82c <reset+0x18>)
   1c81e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	else
		SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_VECTRESET_MASK;

	// SYSRESETREQ does not happen instantly since peripheral reset timing is not specified.
	// Trap execution here so nothing else happens until the reset completes.
	while(1);
   1c822:	e7fe      	b.n	1c822 <reset+0xe>
		SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_VECTRESET_MASK;
   1c824:	4a02      	ldr	r2, [pc, #8]	; (1c830 <reset+0x1c>)
   1c826:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
   1c82a:	e7fa      	b.n	1c822 <reset+0xe>
   1c82c:	05fa0004 	.word	0x05fa0004
   1c830:	05fa0001 	.word	0x05fa0001

0001c834 <NVIC_DeInit>:

static void NVIC_DeInit(void)
{
	uint8_t index;

	asm volatile("CPSID I\n");	// disable interrupts
   1c834:	b672      	cpsid	i

	// Clear all NVIC interrupts
	for(index = 0; index < (sizeof(NVIC_BASE_PTR->ICER)/sizeof(NVIC_BASE_PTR->ICER[0])); index++)
		NVIC_ICER_REG(NVIC_BASE_PTR,index) = 0xFFFFFFFF;	// Interrupt clear-enable Registers
   1c836:	4b0f      	ldr	r3, [pc, #60]	; (1c874 <NVIC_DeInit+0x40>)
   1c838:	f04f 32ff 	mov.w	r2, #4294967295
   1c83c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1c840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1c844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1c848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	for(index = 0; index < (sizeof(NVIC_BASE_PTR->ICPR)/sizeof(NVIC_BASE_PTR->ICPR[0])); index++)
		NVIC_ICPR_REG(NVIC_BASE_PTR,index) = 0xFFFFFFFF;	// Interrupt clear-pending Registers
   1c84c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1c850:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1c854:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1c858:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1c85c:	2200      	movs	r2, #0

	// Reset interrupt priorities
	for(index = 0; index < (sizeof(NVIC_BASE_PTR->IP)/sizeof(NVIC_BASE_PTR->IP[0])); index++)
		NVIC_IP_REG(NVIC_BASE_PTR,index) = 0x00000000;
   1c85e:	4611      	mov	r1, r2
   1c860:	1898      	adds	r0, r3, r2
   1c862:	3201      	adds	r2, #1
	for(index = 0; index < (sizeof(NVIC_BASE_PTR->IP)/sizeof(NVIC_BASE_PTR->IP[0])); index++)
   1c864:	2a6a      	cmp	r2, #106	; 0x6a
		NVIC_IP_REG(NVIC_BASE_PTR,index) = 0x00000000;
   1c866:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	for(index = 0; index < (sizeof(NVIC_BASE_PTR->IP)/sizeof(NVIC_BASE_PTR->IP[0])); index++)
   1c86a:	d1f9      	bne.n	1c860 <NVIC_DeInit+0x2c>

	SYST_CSR = 0; // disable systick
   1c86c:	4b02      	ldr	r3, [pc, #8]	; (1c878 <NVIC_DeInit+0x44>)
   1c86e:	6019      	str	r1, [r3, #0]
}
   1c870:	4770      	bx	lr
   1c872:	bf00      	nop
   1c874:	e000e100 	.word	0xe000e100
   1c878:	e000e010 	.word	0xe000e010

0001c87c <getTristate>:
	STATE_HIGH = 2
} Tristate;

// Helper for get_hwid()
static Tristate getTristate(IOPinTypeDef *pin)
{
   1c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Input with pulldown
	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
	pin->configuration.GPIO_OType = GPIO_OType_OD;
	pin->configuration.GPIO_PuPd = GPIO_PuPd_DOWN;
	HAL.IOs->config->set(pin);
   1c880:	4e10      	ldr	r6, [pc, #64]	; (1c8c4 <getTristate+0x48>)
	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
   1c882:	f04f 0808 	mov.w	r8, #8
	pin->configuration.GPIO_OType = GPIO_OType_OD;
   1c886:	2701      	movs	r7, #1
	pin->configuration.GPIO_PuPd = GPIO_PuPd_DOWN;
   1c888:	2502      	movs	r5, #2
	HAL.IOs->config->set(pin);
   1c88a:	6833      	ldr	r3, [r6, #0]
	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
   1c88c:	f880 8015 	strb.w	r8, [r0, #21]
{
   1c890:	4604      	mov	r4, r0
	pin->configuration.GPIO_OType = GPIO_OType_OD;
   1c892:	75c7      	strb	r7, [r0, #23]
	pin->configuration.GPIO_PuPd = GPIO_PuPd_DOWN;
   1c894:	7605      	strb	r5, [r0, #24]
	HAL.IOs->config->set(pin);
   1c896:	4798      	blx	r3

	if (HAL.IOs->config->isHigh(pin)) {
   1c898:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1c89a:	4620      	mov	r0, r4
   1c89c:	4798      	blx	r3
   1c89e:	b970      	cbnz	r0, 1c8be <getTristate+0x42>

	// Input with pullup
	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
	pin->configuration.GPIO_OType = GPIO_OType_OD;
	pin->configuration.GPIO_PuPd = GPIO_PuPd_UP;
	HAL.IOs->config->set(pin);
   1c8a0:	6833      	ldr	r3, [r6, #0]
	pin->configuration.GPIO_Mode = GPIO_Mode_IN;
   1c8a2:	f884 8015 	strb.w	r8, [r4, #21]
	HAL.IOs->config->set(pin);
   1c8a6:	4620      	mov	r0, r4
	pin->configuration.GPIO_OType = GPIO_OType_OD;
   1c8a8:	75e7      	strb	r7, [r4, #23]
	pin->configuration.GPIO_PuPd = GPIO_PuPd_UP;
   1c8aa:	7627      	strb	r7, [r4, #24]
	HAL.IOs->config->set(pin);
   1c8ac:	4798      	blx	r3

	if (HAL.IOs->config->isHigh(pin)) {
   1c8ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1c8b0:	4620      	mov	r0, r4
   1c8b2:	4798      	blx	r3
		return STATE_HIGH;
   1c8b4:	fab0 f080 	clz	r0, r0
   1c8b8:	0940      	lsrs	r0, r0, #5
		return STATE_Z;
	} else {
		// Low despite pullup -> Low state
		return STATE_LOW;
	}
}
   1c8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return STATE_HIGH;
   1c8be:	4628      	mov	r0, r5
   1c8c0:	e7fb      	b.n	1c8ba <getTristate+0x3e>
   1c8c2:	bf00      	nop
   1c8c4:	1fff0078 	.word	0x1fff0078

0001c8c8 <init>:
{
   1c8c8:	b570      	push	{r4, r5, r6, lr}
	Cpu.initClocks();
   1c8ca:	4c1e      	ldr	r4, [pc, #120]	; (1c944 <init+0x7c>)
   1c8cc:	6823      	ldr	r3, [r4, #0]
   1c8ce:	4798      	blx	r3
	Cpu.initLowLevel();
   1c8d0:	6863      	ldr	r3, [r4, #4]
   1c8d2:	4798      	blx	r3
	EnableInterrupts;;
   1c8d4:	b662      	cpsie	i
	systick_init();
   1c8d6:	f7ff fd23 	bl	1c320 <systick_init>
	wait(100);
   1c8da:	2064      	movs	r0, #100	; 0x64
   1c8dc:	f7ff fd30 	bl	1c340 <wait>
	IOs.init();
   1c8e0:	4b19      	ldr	r3, [pc, #100]	; (1c948 <init+0x80>)
	IOMap.init();
   1c8e2:	4e1a      	ldr	r6, [pc, #104]	; (1c94c <init+0x84>)
	IOs.init();
   1c8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c8e6:	4798      	blx	r3
	IOMap.init();
   1c8e8:	6833      	ldr	r3, [r6, #0]
   1c8ea:	4798      	blx	r3
	LEDs.init();
   1c8ec:	4b18      	ldr	r3, [pc, #96]	; (1c950 <init+0x88>)
   1c8ee:	681b      	ldr	r3, [r3, #0]
   1c8f0:	4798      	blx	r3
	ADCs.init();
   1c8f2:	4b18      	ldr	r3, [pc, #96]	; (1c954 <init+0x8c>)
   1c8f4:	699b      	ldr	r3, [r3, #24]
   1c8f6:	4798      	blx	r3
	SPI.init();
   1c8f8:	4b17      	ldr	r3, [pc, #92]	; (1c958 <init+0x90>)
   1c8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c8fc:	4798      	blx	r3
	WLAN.init();
   1c8fe:	4b17      	ldr	r3, [pc, #92]	; (1c95c <init+0x94>)
   1c900:	681b      	ldr	r3, [r3, #0]
   1c902:	4798      	blx	r3
	RS232.init();
   1c904:	4b16      	ldr	r3, [pc, #88]	; (1c960 <init+0x98>)
   1c906:	681b      	ldr	r3, [r3, #0]
   1c908:	4798      	blx	r3
	USB.init();
   1c90a:	4b16      	ldr	r3, [pc, #88]	; (1c964 <init+0x9c>)
   1c90c:	681b      	ldr	r3, [r3, #0]
   1c90e:	4798      	blx	r3
			 0,  0,  0,  0,  0,  0,  0,  2,  0, // L <- ID_HW_2
			 0,  0,  0,  0,  0,  0,  0,  0,  0  // H
	};

	uint8_t tmp;
	tmp = getTristate(&HAL.IOs->pins->ID_HW_0)
   1c910:	f506 60f5 	add.w	r0, r6, #1960	; 0x7a8
   1c914:	f7ff ffb2 	bl	1c87c <getTristate>
   1c918:	4605      	mov	r5, r0
	    + getTristate(&HAL.IOs->pins->ID_HW_1) * 3
	    + getTristate(&HAL.IOs->pins->ID_HW_2) * (3*3);
   1c91a:	f506 60fd 	add.w	r0, r6, #2024	; 0x7e8
   1c91e:	f7ff ffad 	bl	1c87c <getTristate>
   1c922:	4604      	mov	r4, r0
	    + getTristate(&HAL.IOs->pins->ID_HW_1) * 3
   1c924:	f506 60f9 	add.w	r0, r6, #1992	; 0x7c8
   1c928:	f7ff ffa8 	bl	1c87c <getTristate>
	    + getTristate(&HAL.IOs->pins->ID_HW_2) * (3*3);
   1c92c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1c930:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c934:	4404      	add	r4, r0
	tmp = getTristate(&HAL.IOs->pins->ID_HW_0)
   1c936:	442c      	add	r4, r5

	hwid = hwid_map[tmp];
   1c938:	4b0b      	ldr	r3, [pc, #44]	; (1c968 <init+0xa0>)
   1c93a:	b2e4      	uxtb	r4, r4
   1c93c:	5d1a      	ldrb	r2, [r3, r4]
   1c93e:	4b0b      	ldr	r3, [pc, #44]	; (1c96c <init+0xa4>)
   1c940:	701a      	strb	r2, [r3, #0]
}
   1c942:	bd70      	pop	{r4, r5, r6, pc}
   1c944:	1fff0b4c 	.word	0x1fff0b4c
   1c948:	1fff0078 	.word	0x1fff0078
   1c94c:	1fff01b0 	.word	0x1fff01b0
   1c950:	1fff0a48 	.word	0x1fff0a48
   1c954:	1fff0a28 	.word	0x1fff0a28
   1c958:	1fff09d8 	.word	0x1fff09d8
   1c95c:	1fff0abc 	.word	0x1fff0abc
   1c960:	1fff0a7c 	.word	0x1fff0a7c
   1c964:	1fff0a04 	.word	0x1fff0a04
   1c968:	00029cf8 	.word	0x00029cf8
   1c96c:	1fff5f7c 	.word	0x1fff5f7c

0001c970 <_exit>:
}

void _exit(int i)	// function has the attribute noreturn per default
{
	UNUSED(i);
	while(1) {};
   1c970:	e7fe      	b.n	1c970 <_exit>

0001c972 <_kill>:
}

void _kill(void)
{
}
   1c972:	4770      	bx	lr

0001c974 <_getpid>:
   1c974:	4770      	bx	lr
   1c976:	bf00      	nop

0001c978 <setTMCSPIParameters>:
}

void setTMCSPIParameters(SPI_MemMapPtr basePtr)
{
	// set SPI2 to STOP mode
	SPI_MCR_REG(basePtr) = SPI_MCR_HALT_MASK;
   1c978:	2301      	movs	r3, #1
   1c97a:	6003      	str	r3, [r0, #0]

	// set SPI2 to master mode, set inactive state of chip select to HIGH, flush both FIFO buffer by clearing their counters (Tx FIFO, and Rx FIFO are enabled)
	SPI_MCR_REG(basePtr) |= SPI_MCR_MSTR_MASK
   1c97c:	6803      	ldr	r3, [r0, #0]
   1c97e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c982:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1c986:	6003      	str	r3, [r0, #0]
	                     |  SPI_MCR_CLR_RXF_MASK
	                     |  SPI_MCR_CLR_TXF_MASK;

	// baudrate => 48MHz/18 = 2.66MHz
	SPI_CTAR_REG(basePtr, 0) = SPI_CTAR_FMSZ(7)     // duty cycle 50/50; 8bit frame(7+1); inactive SCK state low; capture->leading; MSB first;
   1c988:	4b07      	ldr	r3, [pc, #28]	; (1c9a8 <setTMCSPIParameters+0x30>)
   1c98a:	60c3      	str	r3, [r0, #12]
	                         | SPI_CTAR_PCSSCK(1)   // shift NCS->SCK
	                         | SPI_CTAR_PASC(1)     // shift NCS->SCK
	                         | SPI_CTAR_CPOL_MASK;  // clk high in idle

	// set SPI2 to RUNNING mode
	SPI_SR_REG(basePtr) |= SPI_SR_EOQF_MASK;
   1c98c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c98e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1c992:	62c3      	str	r3, [r0, #44]	; 0x2c
	SPI_MCR_REG(basePtr) &= ~SPI_MCR_HALT_MASK;
   1c994:	6803      	ldr	r3, [r0, #0]
   1c996:	f023 0301 	bic.w	r3, r3, #1
   1c99a:	6003      	str	r3, [r0, #0]
	SPI_MCR_REG(basePtr) &= ~SPI_MCR_FRZ_MASK;
   1c99c:	6803      	ldr	r3, [r0, #0]
   1c99e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1c9a2:	6003      	str	r3, [r0, #0]
}
   1c9a4:	4770      	bx	lr
   1c9a6:	bf00      	nop
   1c9a8:	3e510022 	.word	0x3e510022

0001c9ac <init>:
{
   1c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  // enable clock for PORT C
   1c9b0:	4d6f      	ldr	r5, [pc, #444]	; (1cb70 <init+0x1c4>)
	HAL.IOs->pins->EEPROM_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9b2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 1cb88 <init+0x1dc>
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  // enable clock for PORT C
   1c9b6:	f241 0838 	movw	r8, #4152	; 0x1038
	SIM_SCGC6 |= SIM_SCGC6_SPI0_MASK;   // enable clock for SPI0
   1c9ba:	f241 063c 	movw	r6, #4156	; 0x103c
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  // enable clock for PORT C
   1c9be:	f855 3008 	ldr.w	r3, [r5, r8]
	HAL.IOs->pins->EEPROM_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9c2:	f8da 400c 	ldr.w	r4, [sl, #12]
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;  // enable clock for PORT C
   1c9c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1c9ca:	f845 3008 	str.w	r3, [r5, r8]
	SIM_SCGC6 |= SIM_SCGC6_SPI0_MASK;   // enable clock for SPI0
   1c9ce:	59ab      	ldr	r3, [r5, r6]
	HAL.IOs->pins->EEPROM_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9d0:	6860      	ldr	r0, [r4, #4]
	SIM_SCGC6 |= SIM_SCGC6_SPI0_MASK;   // enable clock for SPI0
   1c9d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1c9d6:	51ab      	str	r3, [r5, r6]
	SIM_SCGC6 &= ~SIM_SCGC6_CRC_MASK;   // disable clock for CRC module
   1c9d8:	59ab      	ldr	r3, [r5, r6]
	HAL.IOs->pins->EEPROM_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9da:	2702      	movs	r7, #2
	HAL.IOs->pins->EEPROM_NCS.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1c9dc:	f04f 0909 	mov.w	r9, #9
	SIM_SCGC6 &= ~SIM_SCGC6_CRC_MASK;   // disable clock for CRC module
   1c9e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   1c9e4:	51ab      	str	r3, [r5, r6]
	HAL.IOs->pins->EEPROM_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9e6:	f880 765d 	strb.w	r7, [r0, #1629]	; 0x65d
	HAL.IOs->pins->EEPROM_SI.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9ea:	f880 767d 	strb.w	r7, [r0, #1661]	; 0x67d
	HAL.IOs->pins->EEPROM_SO.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1c9ee:	f880 769d 	strb.w	r7, [r0, #1693]	; 0x69d
	HAL.IOs->pins->EEPROM_NCS.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1c9f2:	f880 96bd 	strb.w	r9, [r0, #1725]	; 0x6bd
	HAL.IOs->config->set(&HAL.IOs->pins->EEPROM_SCK);
   1c9f6:	6823      	ldr	r3, [r4, #0]
   1c9f8:	f500 60c9 	add.w	r0, r0, #1608	; 0x648
   1c9fc:	681b      	ldr	r3, [r3, #0]
   1c9fe:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->EEPROM_SI);
   1ca00:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca04:	681b      	ldr	r3, [r3, #0]
   1ca06:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
   1ca0a:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->EEPROM_SO);
   1ca0c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca10:	681b      	ldr	r3, [r3, #0]
   1ca12:	f500 60d1 	add.w	r0, r0, #1672	; 0x688
   1ca16:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->EEPROM_NCS);
   1ca18:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca1c:	681b      	ldr	r3, [r3, #0]
   1ca1e:	f500 60d5 	add.w	r0, r0, #1704	; 0x6a8
   1ca22:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->EEPROM_NCS);
   1ca24:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca28:	695b      	ldr	r3, [r3, #20]
   1ca2a:	f500 60d5 	add.w	r0, r0, #1704	; 0x6a8
   1ca2e:	4798      	blx	r3
	setTMCSPIParameters(SPI0_BASE_PTR);
   1ca30:	4850      	ldr	r0, [pc, #320]	; (1cb74 <init+0x1c8>)
   1ca32:	f7ff ffa1 	bl	1c978 <setTMCSPIParameters>
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;  // enable clock for PORT B
   1ca36:	f855 3008 	ldr.w	r3, [r5, r8]
	HAL.IOs->pins->SPI1_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1ca3a:	6860      	ldr	r0, [r4, #4]
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;  // enable clock for PORT B
   1ca3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ca40:	f845 3008 	str.w	r3, [r5, r8]
	SIM_SCGC6 |= SIM_SCGC6_SPI1_MASK;   // enable clock for SPI1
   1ca44:	59ab      	ldr	r3, [r5, r6]
   1ca46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1ca4a:	51ab      	str	r3, [r5, r6]
	SIM_SCGC6 &= ~SIM_SCGC6_CRC_MASK;   // disable clock for CRC module
   1ca4c:	59ab      	ldr	r3, [r5, r6]
   1ca4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   1ca52:	51ab      	str	r3, [r5, r6]
	HAL.IOs->pins->SPI1_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1ca54:	f880 72fd 	strb.w	r7, [r0, #765]	; 0x2fd
	HAL.IOs->pins->SPI1_SDI.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1ca58:	f880 731d 	strb.w	r7, [r0, #797]	; 0x31d
	HAL.IOs->pins->SPI1_SDO.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1ca5c:	f880 733d 	strb.w	r7, [r0, #829]	; 0x33d
	HAL.IOs->pins->SPI1_CSN.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1ca60:	f880 92dd 	strb.w	r9, [r0, #733]	; 0x2dd
	HAL.IOs->config->set(&HAL.IOs->pins->SPI1_SCK);
   1ca64:	6823      	ldr	r3, [r4, #0]
   1ca66:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
   1ca6a:	681b      	ldr	r3, [r3, #0]
   1ca6c:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI1_SDI);
   1ca6e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca72:	681b      	ldr	r3, [r3, #0]
   1ca74:	f500 7042 	add.w	r0, r0, #776	; 0x308
   1ca78:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI1_SDO);
   1ca7a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca7e:	681b      	ldr	r3, [r3, #0]
   1ca80:	f500 704a 	add.w	r0, r0, #808	; 0x328
   1ca84:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI1_CSN);
   1ca86:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca8a:	681b      	ldr	r3, [r3, #0]
   1ca8c:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
   1ca90:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->SPI1_CSN);
   1ca92:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ca96:	695b      	ldr	r3, [r3, #20]
   1ca98:	f500 7032 	add.w	r0, r0, #712	; 0x2c8
   1ca9c:	4798      	blx	r3
	setTMCSPIParameters(SPI1_BASE_PTR);
   1ca9e:	4836      	ldr	r0, [pc, #216]	; (1cb78 <init+0x1cc>)
   1caa0:	f7ff ff6a 	bl	1c978 <setTMCSPIParameters>
	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK;  // enable clocks
   1caa4:	f855 3008 	ldr.w	r3, [r5, r8]
	HAL.IOs->pins->SPI2_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1caa8:	6860      	ldr	r0, [r4, #4]
	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK;  // enable clocks
   1caaa:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
	SIM_SCGC3 |= SIM_SCGC3_SPI2_MASK;                                                 // enable clock for SPI2
   1caae:	f241 0230 	movw	r2, #4144	; 0x1030
	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTC_MASK;  // enable clocks
   1cab2:	f845 3008 	str.w	r3, [r5, r8]
	SIM_SCGC3 |= SIM_SCGC3_SPI2_MASK;                                                 // enable clock for SPI2
   1cab6:	58ab      	ldr	r3, [r5, r2]
   1cab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1cabc:	50ab      	str	r3, [r5, r2]
	SIM_SCGC6 &= ~SIM_SCGC6_CRC_MASK;                                                 // disable clock for CRC module
   1cabe:	59ab      	ldr	r3, [r5, r6]
   1cac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   1cac4:	51ab      	str	r3, [r5, r6]
	HAL.IOs->pins->SPI2_SCK.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1cac6:	f880 727d 	strb.w	r7, [r0, #637]	; 0x27d
	HAL.IOs->pins->SPI2_SDI.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1caca:	f880 72bd 	strb.w	r7, [r0, #701]	; 0x2bd
	HAL.IOs->pins->SPI2_SDO.configuration.GPIO_Mode = GPIO_Mode_AF2;
   1cace:	f880 729d 	strb.w	r7, [r0, #669]	; 0x29d
	HAL.IOs->pins->SPI2_CSN0.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1cad2:	f880 921d 	strb.w	r9, [r0, #541]	; 0x21d
	HAL.IOs->pins->SPI2_CSN1.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1cad6:	f880 923d 	strb.w	r9, [r0, #573]	; 0x23d
	HAL.IOs->pins->SPI2_CSN2.configuration.GPIO_Mode = GPIO_Mode_OUT;
   1cada:	f880 925d 	strb.w	r9, [r0, #605]	; 0x25d
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_SCK);
   1cade:	6823      	ldr	r3, [r4, #0]
   1cae0:	f500 701a 	add.w	r0, r0, #616	; 0x268
   1cae4:	681b      	ldr	r3, [r3, #0]
   1cae6:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_SDI);
   1cae8:	e9d4 3000 	ldrd	r3, r0, [r4]
   1caec:	681b      	ldr	r3, [r3, #0]
   1caee:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
   1caf2:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_SDO);
   1caf4:	e9d4 3000 	ldrd	r3, r0, [r4]
   1caf8:	681b      	ldr	r3, [r3, #0]
   1cafa:	f500 7022 	add.w	r0, r0, #648	; 0x288
   1cafe:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_CSN0);
   1cb00:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb04:	681b      	ldr	r3, [r3, #0]
   1cb06:	f500 7002 	add.w	r0, r0, #520	; 0x208
   1cb0a:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_CSN1);
   1cb0c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	f500 700a 	add.w	r0, r0, #552	; 0x228
   1cb16:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->SPI2_CSN2);
   1cb18:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb1c:	681b      	ldr	r3, [r3, #0]
   1cb1e:	f500 7012 	add.w	r0, r0, #584	; 0x248
   1cb22:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->SPI2_CSN0);
   1cb24:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb28:	695b      	ldr	r3, [r3, #20]
   1cb2a:	f500 7002 	add.w	r0, r0, #520	; 0x208
   1cb2e:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->SPI2_CSN1);
   1cb30:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb34:	695b      	ldr	r3, [r3, #20]
   1cb36:	f500 700a 	add.w	r0, r0, #552	; 0x228
   1cb3a:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->SPI2_CSN2);
   1cb3c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb40:	695b      	ldr	r3, [r3, #20]
   1cb42:	f500 7012 	add.w	r0, r0, #584	; 0x248
   1cb46:	4798      	blx	r3
	setTMCSPIParameters(SPI2_BASE_PTR);
   1cb48:	480c      	ldr	r0, [pc, #48]	; (1cb7c <init+0x1d0>)
   1cb4a:	f7ff ff15 	bl	1c978 <setTMCSPIParameters>
	SPIChannel_1_default = &HAL.SPI->ch1;
   1cb4e:	4a0c      	ldr	r2, [pc, #48]	; (1cb80 <init+0x1d4>)
   1cb50:	f8da 3010 	ldr.w	r3, [sl, #16]
   1cb54:	6013      	str	r3, [r2, #0]
	SPIChannel_1_default->CSN = &HAL.IOs->pins->SPI1_CSN;
   1cb56:	6862      	ldr	r2, [r4, #4]
   1cb58:	f502 7132 	add.w	r1, r2, #712	; 0x2c8
   1cb5c:	6059      	str	r1, [r3, #4]
	SPIChannel_2_default = &HAL.SPI->ch2;
   1cb5e:	4909      	ldr	r1, [pc, #36]	; (1cb84 <init+0x1d8>)
   1cb60:	f103 0014 	add.w	r0, r3, #20
	SPIChannel_2_default->CSN = &HAL.IOs->pins->SPI2_CSN0;
   1cb64:	f502 7202 	add.w	r2, r2, #520	; 0x208
	SPIChannel_2_default = &HAL.SPI->ch2;
   1cb68:	6008      	str	r0, [r1, #0]
	SPIChannel_2_default->CSN = &HAL.IOs->pins->SPI2_CSN0;
   1cb6a:	619a      	str	r2, [r3, #24]
}
   1cb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cb70:	40047000 	.word	0x40047000
   1cb74:	4002c000 	.word	0x4002c000
   1cb78:	4002d000 	.word	0x4002d000
   1cb7c:	400ac000 	.word	0x400ac000
   1cb80:	1fff6568 	.word	0x1fff6568
   1cb84:	1fff6564 	.word	0x1fff6564
   1cb88:	00029d1c 	.word	0x00029d1c

0001cb8c <reset_ch1>:

void reset_ch1()
{
   1cb8c:	b538      	push	{r3, r4, r5, lr}
	// configure SPI1 pins PORTB_PCR11(SCK), PORTB_PCR17(SDI), PORTB_PCR15(SDO), PORTB_PCR10(CSN)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SCK);
   1cb8e:	4b0f      	ldr	r3, [pc, #60]	; (1cbcc <reset_ch1+0x40>)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDI);
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDO);
	HAL.IOs->config->reset(SPI.ch1.CSN);
   1cb90:	4d0f      	ldr	r5, [pc, #60]	; (1cbd0 <reset_ch1+0x44>)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SCK);
   1cb92:	68dc      	ldr	r4, [r3, #12]
   1cb94:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cb98:	689b      	ldr	r3, [r3, #8]
   1cb9a:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
   1cb9e:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDI);
   1cba0:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cba4:	689b      	ldr	r3, [r3, #8]
   1cba6:	f500 7042 	add.w	r0, r0, #776	; 0x308
   1cbaa:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI1_SDO);
   1cbac:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cbb0:	689b      	ldr	r3, [r3, #8]
   1cbb2:	f500 704a 	add.w	r0, r0, #808	; 0x328
   1cbb6:	4798      	blx	r3
	HAL.IOs->config->reset(SPI.ch1.CSN);
   1cbb8:	6823      	ldr	r3, [r4, #0]
   1cbba:	6868      	ldr	r0, [r5, #4]
   1cbbc:	689b      	ldr	r3, [r3, #8]
   1cbbe:	4798      	blx	r3

	// set SPI0 to master mode, set inactive state of chip select to HIGH, flush both FIFO buffer by clearing their counters (Tx FIFO, and Rx FIFO are enabled)
	SPI_MCR_REG(SPI.ch1.periphery) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   1cbc0:	682a      	ldr	r2, [r5, #0]
   1cbc2:	6813      	ldr	r3, [r2, #0]
   1cbc4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1cbc8:	6013      	str	r3, [r2, #0]
}
   1cbca:	bd38      	pop	{r3, r4, r5, pc}
   1cbcc:	00029d1c 	.word	0x00029d1c
   1cbd0:	1fff09d8 	.word	0x1fff09d8

0001cbd4 <reset_ch2>:

void reset_ch2()
{
   1cbd4:	b538      	push	{r3, r4, r5, lr}
//	// configure SPI2 pins PORTB_PCR21(SCK), PORTB_PCR23(SDI), PORTB_PCR22(SDO), PORTC_PCR0(CSN0), PORTA_PCR0(CSN5), PORTA_PCR4(CSN2)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SCK);
   1cbd6:	4b10      	ldr	r3, [pc, #64]	; (1cc18 <reset_ch2+0x44>)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDI);
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDO);
	HAL.IOs->config->reset(SPI.ch2.CSN);
   1cbd8:	4d10      	ldr	r5, [pc, #64]	; (1cc1c <reset_ch2+0x48>)
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SCK);
   1cbda:	68dc      	ldr	r4, [r3, #12]
   1cbdc:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cbe0:	689b      	ldr	r3, [r3, #8]
   1cbe2:	f500 701a 	add.w	r0, r0, #616	; 0x268
   1cbe6:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDI);
   1cbe8:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cbec:	689b      	ldr	r3, [r3, #8]
   1cbee:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
   1cbf2:	4798      	blx	r3
	HAL.IOs->config->reset(&HAL.IOs->pins->SPI2_SDO);
   1cbf4:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cbf8:	689b      	ldr	r3, [r3, #8]
   1cbfa:	f500 7022 	add.w	r0, r0, #648	; 0x288
   1cbfe:	4798      	blx	r3
	HAL.IOs->config->reset(SPI.ch2.CSN);
   1cc00:	6823      	ldr	r3, [r4, #0]
   1cc02:	69a8      	ldr	r0, [r5, #24]
   1cc04:	689b      	ldr	r3, [r3, #8]
   1cc06:	4798      	blx	r3
	SPI.ch2.readWrite = spi_ch2_readWrite;

	// set SPI0 to master mode, set inactive state of chip select to HIGH, flush both FIFO buffer by clearing their counters (Tx FIFO, and Rx FIFO are enabled)
	SPI_MCR_REG(SPI.ch2.periphery) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   1cc08:	696a      	ldr	r2, [r5, #20]
	SPI.ch2.readWrite = spi_ch2_readWrite;
   1cc0a:	4b05      	ldr	r3, [pc, #20]	; (1cc20 <reset_ch2+0x4c>)
   1cc0c:	61eb      	str	r3, [r5, #28]
	SPI_MCR_REG(SPI.ch2.periphery) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   1cc0e:	6813      	ldr	r3, [r2, #0]
   1cc10:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1cc14:	6013      	str	r3, [r2, #0]
}
   1cc16:	bd38      	pop	{r3, r4, r5, pc}
   1cc18:	00029d1c 	.word	0x00029d1c
   1cc1c:	1fff09d8 	.word	0x1fff09d8
   1cc20:	0001ccd1 	.word	0x0001ccd1

0001cc24 <readWrite>:
{
	return readWrite(SPIChannel_1_default, data, lastTransfer);
}

uint8_t readWrite(SPIChannelTypeDef *SPIChannel, uint8_t writeData, uint8_t lastTransfer)
{
   1cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc26:	4605      	mov	r5, r0
	uint8_t readData = 0;

	if(IS_DUMMY_PIN(SPIChannel->CSN))
   1cc28:	6840      	ldr	r0, [r0, #4]
   1cc2a:	6903      	ldr	r3, [r0, #16]
{
   1cc2c:	460c      	mov	r4, r1
   1cc2e:	4616      	mov	r6, r2
	if(IS_DUMMY_PIN(SPIChannel->CSN))
   1cc30:	2b00      	cmp	r3, #0
   1cc32:	d02f      	beq.n	1cc94 <readWrite+0x70>
		return 0;

	HAL.IOs->config->setLow(SPIChannel->CSN); // Chip Select
   1cc34:	4b18      	ldr	r3, [pc, #96]	; (1cc98 <readWrite+0x74>)
   1cc36:	68df      	ldr	r7, [r3, #12]
   1cc38:	683b      	ldr	r3, [r7, #0]
   1cc3a:	699b      	ldr	r3, [r3, #24]
   1cc3c:	4798      	blx	r3

	if(lastTransfer)
   1cc3e:	682b      	ldr	r3, [r5, #0]
   1cc40:	b1ce      	cbz	r6, 1cc76 <readWrite+0x52>
	{
		// send last byte
		SPI_PUSHR_REG(SPIChannel->periphery) = SPI_PUSHR_EOQ_MASK | SPI_PUSHR_TXDATA(writeData) ;
   1cc42:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
   1cc46:	635c      	str	r4, [r3, #52]	; 0x34

		while(!(SPI_SR_REG(SPIChannel->periphery) & SPI_SR_EOQF_MASK)) {} // wait until End Of Queue flag has been set -> transfer done
   1cc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc4a:	00d2      	lsls	r2, r2, #3
   1cc4c:	d5fc      	bpl.n	1cc48 <readWrite+0x24>

		SPI_SR_REG(SPIChannel->periphery) |= SPI_SR_EOQF_MASK;   // clear EOQ Flag by writing a 1 to EOQF
   1cc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c

		HAL.IOs->config->setHigh(SPIChannel->CSN); // reset CSN manual, falls Probleme Auftreten, dann diese Zeile unter die while Schleife
   1cc50:	6868      	ldr	r0, [r5, #4]
		SPI_SR_REG(SPIChannel->periphery) |= SPI_SR_EOQF_MASK;   // clear EOQ Flag by writing a 1 to EOQF
   1cc52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1cc56:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL.IOs->config->setHigh(SPIChannel->CSN); // reset CSN manual, falls Probleme Auftreten, dann diese Zeile unter die while Schleife
   1cc58:	683b      	ldr	r3, [r7, #0]
   1cc5a:	695b      	ldr	r3, [r3, #20]
   1cc5c:	4798      	blx	r3

		// wait for an answer
		while(((SPI_SR_REG(SPIChannel->periphery) & SPI_SR_RXCTR_MASK) >> SPI_SR_RXCTR_SHIFT) == 0) {}
   1cc5e:	682b      	ldr	r3, [r5, #0]
   1cc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc62:	f012 0ff0 	tst.w	r2, #240	; 0xf0
   1cc66:	d0fb      	beq.n	1cc60 <readWrite+0x3c>

		// read the data
		readData = SPI_POPR_REG(SPIChannel->periphery);
   1cc68:	6b98      	ldr	r0, [r3, #56]	; 0x38

		// clear TXF and RXF
		SPI_MCR_REG(SPIChannel->periphery) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   1cc6a:	681a      	ldr	r2, [r3, #0]
   1cc6c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
		readData = SPI_POPR_REG(SPIChannel->periphery);
   1cc70:	b2c0      	uxtb	r0, r0
		SPI_MCR_REG(SPIChannel->periphery) |= SPI_MCR_CLR_RXF_MASK | SPI_MCR_CLR_TXF_MASK;
   1cc72:	601a      	str	r2, [r3, #0]
		// read the data
		readData = SPI_POPR_REG(SPIChannel->periphery);
	}

	return readData;
}
   1cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SPI_PUSHR_REG(SPIChannel->periphery) = SPI_PUSHR_CONT_MASK | SPI_PUSHR_TXDATA(writeData); // | SPI_PUSHR_PCS(0x0);
   1cc76:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
   1cc7a:	635c      	str	r4, [r3, #52]	; 0x34
		while(((SPI_SR_REG(SPIChannel->periphery) & SPI_SR_TXCTR_MASK) >> SPI_SR_TXCTR_SHIFT) > 3) {} // wait if TX counter > 3
   1cc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc7e:	0b12      	lsrs	r2, r2, #12
   1cc80:	f012 0f0c 	tst.w	r2, #12
   1cc84:	d1fa      	bne.n	1cc7c <readWrite+0x58>
		while(((SPI_SR_REG(SPIChannel->periphery) & SPI_SR_RXCTR_MASK) >> SPI_SR_RXCTR_SHIFT) == 0) {}
   1cc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc88:	f012 0ff0 	tst.w	r2, #240	; 0xf0
   1cc8c:	d0fb      	beq.n	1cc86 <readWrite+0x62>
		readData = SPI_POPR_REG(SPIChannel->periphery);
   1cc8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
   1cc90:	b2c0      	uxtb	r0, r0
   1cc92:	e7ef      	b.n	1cc74 <readWrite+0x50>
		return 0;
   1cc94:	4618      	mov	r0, r3
   1cc96:	e7ed      	b.n	1cc74 <readWrite+0x50>
   1cc98:	00029d1c 	.word	0x00029d1c

0001cc9c <spi_ch2_readWriteArray>:
{
   1cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		data[i] = readWrite(&SPI.ch2, data[i], (i == (length - 1))? true:false);
   1cca0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1cccc <spi_ch2_readWriteArray+0x30>
{
   1cca4:	4604      	mov	r4, r0
   1cca6:	1846      	adds	r6, r0, r1
		data[i] = readWrite(&SPI.ch2, data[i], (i == (length - 1))? true:false);
   1cca8:	43c7      	mvns	r7, r0
   1ccaa:	1e4d      	subs	r5, r1, #1
	for(size_t i = 0; i < length; i++)
   1ccac:	42b4      	cmp	r4, r6
   1ccae:	d101      	bne.n	1ccb4 <spi_ch2_readWriteArray+0x18>
}
   1ccb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data[i] = readWrite(&SPI.ch2, data[i], (i == (length - 1))? true:false);
   1ccb4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ccb8:	193a      	adds	r2, r7, r4
   1ccba:	1b53      	subs	r3, r2, r5
   1ccbc:	425a      	negs	r2, r3
   1ccbe:	415a      	adcs	r2, r3
   1ccc0:	4640      	mov	r0, r8
   1ccc2:	f7ff ffaf 	bl	1cc24 <readWrite>
   1ccc6:	f804 0c01 	strb.w	r0, [r4, #-1]
	for(size_t i = 0; i < length; i++)
   1ccca:	e7ef      	b.n	1ccac <spi_ch2_readWriteArray+0x10>
   1cccc:	1fff09ec 	.word	0x1fff09ec

0001ccd0 <spi_ch2_readWrite>:
{
   1ccd0:	460a      	mov	r2, r1
	return readWrite(&SPI.ch2, data, lastTransfer);
   1ccd2:	4601      	mov	r1, r0
   1ccd4:	4800      	ldr	r0, [pc, #0]	; (1ccd8 <spi_ch2_readWrite+0x8>)
   1ccd6:	e7a5      	b.n	1cc24 <readWrite>
   1ccd8:	1fff09ec 	.word	0x1fff09ec

0001ccdc <spi_ch1_readWriteArray>:
{
   1ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		data[i] = readWrite(&SPI.ch1, data[i], (i == (length - 1))? true:false);
   1cce0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1cd0c <spi_ch1_readWriteArray+0x30>
{
   1cce4:	4604      	mov	r4, r0
   1cce6:	1846      	adds	r6, r0, r1
		data[i] = readWrite(&SPI.ch1, data[i], (i == (length - 1))? true:false);
   1cce8:	43c7      	mvns	r7, r0
   1ccea:	1e4d      	subs	r5, r1, #1
	for(size_t i = 0; i < length; i++)
   1ccec:	42b4      	cmp	r4, r6
   1ccee:	d101      	bne.n	1ccf4 <spi_ch1_readWriteArray+0x18>
}
   1ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data[i] = readWrite(&SPI.ch1, data[i], (i == (length - 1))? true:false);
   1ccf4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1ccf8:	193a      	adds	r2, r7, r4
   1ccfa:	1b53      	subs	r3, r2, r5
   1ccfc:	425a      	negs	r2, r3
   1ccfe:	415a      	adcs	r2, r3
   1cd00:	4640      	mov	r0, r8
   1cd02:	f7ff ff8f 	bl	1cc24 <readWrite>
   1cd06:	f804 0c01 	strb.w	r0, [r4, #-1]
	for(size_t i = 0; i < length; i++)
   1cd0a:	e7ef      	b.n	1ccec <spi_ch1_readWriteArray+0x10>
   1cd0c:	1fff09d8 	.word	0x1fff09d8

0001cd10 <spi_ch1_readWrite>:
{
   1cd10:	460a      	mov	r2, r1
	return readWrite(&SPI.ch1, data, lastTransfer);
   1cd12:	4601      	mov	r1, r0
   1cd14:	4800      	ldr	r0, [pc, #0]	; (1cd18 <spi_ch1_readWrite+0x8>)
   1cd16:	e785      	b.n	1cc24 <readWrite>
   1cd18:	1fff09d8 	.word	0x1fff09d8

0001cd1c <spi_readInt>:
{
   1cd1c:	b538      	push	{r3, r4, r5, lr}
   1cd1e:	4604      	mov	r4, r0
   1cd20:	4608      	mov	r0, r1
	SPIChannel->readWrite(address, false);
   1cd22:	68a3      	ldr	r3, [r4, #8]
   1cd24:	2100      	movs	r1, #0
   1cd26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1cd2a:	4798      	blx	r3
	int value = SPIChannel->readWrite(0, false);
   1cd2c:	2100      	movs	r1, #0
   1cd2e:	68a3      	ldr	r3, [r4, #8]
   1cd30:	4608      	mov	r0, r1
   1cd32:	4798      	blx	r3
	value |= SPIChannel->readWrite(0, false);
   1cd34:	2100      	movs	r1, #0
   1cd36:	68a3      	ldr	r3, [r4, #8]
	value <<= 8;
   1cd38:	0205      	lsls	r5, r0, #8
	value |= SPIChannel->readWrite(0, false);
   1cd3a:	4608      	mov	r0, r1
   1cd3c:	4798      	blx	r3
	value |= SPIChannel->readWrite(0, false);
   1cd3e:	2100      	movs	r1, #0
   1cd40:	68a3      	ldr	r3, [r4, #8]
	value |= SPIChannel->readWrite(0, false);
   1cd42:	4305      	orrs	r5, r0
	value |= SPIChannel->readWrite(0, false);
   1cd44:	4608      	mov	r0, r1
   1cd46:	4798      	blx	r3
	value <<= 8;
   1cd48:	022d      	lsls	r5, r5, #8
	value |= SPIChannel->readWrite(0, true);
   1cd4a:	68a3      	ldr	r3, [r4, #8]
	value |= SPIChannel->readWrite(0, false);
   1cd4c:	4305      	orrs	r5, r0
	value |= SPIChannel->readWrite(0, true);
   1cd4e:	2101      	movs	r1, #1
   1cd50:	2000      	movs	r0, #0
   1cd52:	4798      	blx	r3
	value <<= 8;
   1cd54:	022d      	lsls	r5, r5, #8
}
   1cd56:	4328      	orrs	r0, r5
   1cd58:	bd38      	pop	{r3, r4, r5, pc}

0001cd5a <spi_ch1_readInt>:
	return spi_readInt(SPIChannel_1_default, address);
   1cd5a:	4b02      	ldr	r3, [pc, #8]	; (1cd64 <spi_ch1_readInt+0xa>)
{
   1cd5c:	4601      	mov	r1, r0
	return spi_readInt(SPIChannel_1_default, address);
   1cd5e:	6818      	ldr	r0, [r3, #0]
   1cd60:	f7ff bfdc 	b.w	1cd1c <spi_readInt>
   1cd64:	1fff6568 	.word	0x1fff6568

0001cd68 <spi_ch2_readInt>:
	return spi_readInt(SPIChannel_2_default, address);
   1cd68:	4b02      	ldr	r3, [pc, #8]	; (1cd74 <spi_ch2_readInt+0xc>)
{
   1cd6a:	4601      	mov	r1, r0
	return spi_readInt(SPIChannel_2_default, address);
   1cd6c:	6818      	ldr	r0, [r3, #0]
   1cd6e:	f7ff bfd5 	b.w	1cd1c <spi_readInt>
   1cd72:	bf00      	nop
   1cd74:	1fff6564 	.word	0x1fff6564

0001cd78 <spi_writeInt>:
{
   1cd78:	b570      	push	{r4, r5, r6, lr}
   1cd7a:	4604      	mov	r4, r0
   1cd7c:	4608      	mov	r0, r1
   1cd7e:	4615      	mov	r5, r2
	SPIChannel->readWrite(address|0x80, false);
   1cd80:	68a3      	ldr	r3, [r4, #8]
   1cd82:	2100      	movs	r1, #0
   1cd84:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1cd88:	4798      	blx	r3
	SPIChannel->readWrite(0xFF & (value>>24), false);
   1cd8a:	68a3      	ldr	r3, [r4, #8]
   1cd8c:	2100      	movs	r1, #0
   1cd8e:	0e28      	lsrs	r0, r5, #24
   1cd90:	4798      	blx	r3
	SPIChannel->readWrite(0xFF & (value>>16), false);
   1cd92:	68a3      	ldr	r3, [r4, #8]
   1cd94:	2100      	movs	r1, #0
   1cd96:	f3c5 4007 	ubfx	r0, r5, #16, #8
   1cd9a:	4798      	blx	r3
	SPIChannel->readWrite(0xFF & (value>>8), false);
   1cd9c:	68a3      	ldr	r3, [r4, #8]
   1cd9e:	2100      	movs	r1, #0
   1cda0:	f3c5 2007 	ubfx	r0, r5, #8, #8
   1cda4:	4798      	blx	r3
	SPIChannel->readWrite(0xFF & (value>>0), true);
   1cda6:	68a3      	ldr	r3, [r4, #8]
   1cda8:	b2e8      	uxtb	r0, r5
   1cdaa:	2101      	movs	r1, #1
}
   1cdac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPIChannel->readWrite(0xFF & (value>>0), true);
   1cdb0:	4718      	bx	r3

0001cdb2 <spi_ch1_writeInt>:
	spi_writeInt(SPIChannel_1_default, address, value);
   1cdb2:	4b03      	ldr	r3, [pc, #12]	; (1cdc0 <spi_ch1_writeInt+0xe>)
{
   1cdb4:	460a      	mov	r2, r1
	spi_writeInt(SPIChannel_1_default, address, value);
   1cdb6:	4601      	mov	r1, r0
   1cdb8:	6818      	ldr	r0, [r3, #0]
   1cdba:	f7ff bfdd 	b.w	1cd78 <spi_writeInt>
   1cdbe:	bf00      	nop
   1cdc0:	1fff6568 	.word	0x1fff6568

0001cdc4 <spi_ch2_writeInt>:
	spi_writeInt(SPIChannel_2_default, address, value);
   1cdc4:	4b02      	ldr	r3, [pc, #8]	; (1cdd0 <spi_ch2_writeInt+0xc>)
{
   1cdc6:	460a      	mov	r2, r1
	spi_writeInt(SPIChannel_2_default, address, value);
   1cdc8:	4601      	mov	r1, r0
   1cdca:	6818      	ldr	r0, [r3, #0]
   1cdcc:	f7ff bfd4 	b.w	1cd78 <spi_writeInt>
   1cdd0:	1fff6564 	.word	0x1fff6564

0001cdd4 <spi_ch1_readWriteByte>:
	return readWrite(SPIChannel_1_default, data, lastTransfer);
   1cdd4:	4b02      	ldr	r3, [pc, #8]	; (1cde0 <spi_ch1_readWriteByte+0xc>)
{
   1cdd6:	460a      	mov	r2, r1
	return readWrite(SPIChannel_1_default, data, lastTransfer);
   1cdd8:	4601      	mov	r1, r0
   1cdda:	6818      	ldr	r0, [r3, #0]
   1cddc:	e722      	b.n	1cc24 <readWrite>
   1cdde:	bf00      	nop
   1cde0:	1fff6568 	.word	0x1fff6568

0001cde4 <bytesAvailable>:
	Rx1_Init();
	EnableInterrupts;
}

static uint32_t bytesAvailable()
{
   1cde4:	b508      	push	{r3, lr}
	return CDC1_GetCharsInRxBuf();
   1cde6:	f008 faab 	bl	25340 <CDC1_GetCharsInRxBuf>
}
   1cdea:	bd08      	pop	{r3, pc}

0001cdec <clearBuffers>:
{
   1cdec:	b508      	push	{r3, lr}
	DisableInterrupts;
   1cdee:	b672      	cpsid	i
	Tx1_Init();
   1cdf0:	f008 fb9e 	bl	25530 <Tx1_Init>
	Rx1_Init();
   1cdf4:	f008 fb4e 	bl	25494 <Rx1_Init>
	EnableInterrupts;
   1cdf8:	b662      	cpsie	i
}
   1cdfa:	bd08      	pop	{r3, pc}

0001cdfc <tx>:
	CDC1_SendChar(ch);
   1cdfc:	f008 baac 	b.w	25358 <CDC1_SendChar>

0001ce00 <txN>:
{
   1ce00:	b570      	push	{r4, r5, r6, lr}
   1ce02:	4606      	mov	r6, r0
   1ce04:	460d      	mov	r5, r1
	for(int32_t i = 0; i < number; i++)
   1ce06:	2400      	movs	r4, #0
   1ce08:	42a5      	cmp	r5, r4
   1ce0a:	dc00      	bgt.n	1ce0e <txN+0xe>
}
   1ce0c:	bd70      	pop	{r4, r5, r6, pc}
	CDC1_SendChar(ch);
   1ce0e:	5d30      	ldrb	r0, [r6, r4]
   1ce10:	f008 faa2 	bl	25358 <CDC1_SendChar>
	for(int32_t i = 0; i < number; i++)
   1ce14:	3401      	adds	r4, #1
   1ce16:	e7f7      	b.n	1ce08 <txN+0x8>

0001ce18 <deInit>:

static void deInit(void)
{
   1ce18:	b508      	push	{r3, lr}
	USB_DCI_DeInit();
   1ce1a:	f008 fff1 	bl	25e00 <USB_DCI_DeInit>
	USB_Class_CDC_DeInit(0);
   1ce1e:	2000      	movs	r0, #0
   1ce20:	f008 fd3a 	bl	25898 <USB_Class_CDC_DeInit>
	USB_Class_DeInit(0);
   1ce24:	2000      	movs	r0, #0
   1ce26:	f008 fedf 	bl	25be8 <USB_Class_DeInit>

	SIM_SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
   1ce2a:	4b0a      	ldr	r3, [pc, #40]	; (1ce54 <deInit+0x3c>)
   1ce2c:	f241 0134 	movw	r1, #4148	; 0x1034
   1ce30:	585a      	ldr	r2, [r3, r1]
   1ce32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   1ce36:	505a      	str	r2, [r3, r1]
	SIM_SCGC6 &= ~SIM_SCGC6_USBDCD_MASK;
   1ce38:	f241 013c 	movw	r1, #4156	; 0x103c
   1ce3c:	585a      	ldr	r2, [r3, r1]
   1ce3e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1ce42:	505a      	str	r2, [r3, r1]
	SIM_SOPT2 &= ~SIM_SOPT2_USBSRC_MASK;
   1ce44:	f241 0104 	movw	r1, #4100	; 0x1004
   1ce48:	585a      	ldr	r2, [r3, r1]
   1ce4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   1ce4e:	505a      	str	r2, [r3, r1]
}
   1ce50:	bd08      	pop	{r3, pc}
   1ce52:	bf00      	nop
   1ce54:	40047000 	.word	0x40047000

0001ce58 <init>:
{
   1ce58:	b508      	push	{r3, lr}
	USB0_Init();
   1ce5a:	f00a f893 	bl	26f84 <USB0_Init>
	Tx1_Init();
   1ce5e:	f008 fb67 	bl	25530 <Tx1_Init>
	Rx1_Init();
   1ce62:	f008 fb17 	bl	25494 <Rx1_Init>
	USB1_Init();
   1ce66:	f00a f90f 	bl	27088 <USB1_Init>
}
   1ce6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	enable_irq(INT_USB0-16);
   1ce6e:	2049      	movs	r0, #73	; 0x49
   1ce70:	f008 b944 	b.w	250fc <enable_irq>

0001ce74 <rxN>:
{
   1ce74:	b570      	push	{r4, r5, r6, lr}
   1ce76:	460c      	mov	r4, r1
   1ce78:	4606      	mov	r6, r0
	if(CDC1_GetCharsInRxBuf() >= number)
   1ce7a:	f008 fa61 	bl	25340 <CDC1_GetCharsInRxBuf>
   1ce7e:	42a0      	cmp	r0, r4
   1ce80:	d20b      	bcs.n	1ce9a <rxN+0x26>
	return false;
   1ce82:	2000      	movs	r0, #0
}
   1ce84:	bd70      	pop	{r4, r5, r6, pc}
			if(CDC1_GetChar(&str[i])!= ERR_OK)
   1ce86:	1970      	adds	r0, r6, r5
   1ce88:	f008 fada 	bl	25440 <Rx1_Get>
   1ce8c:	2800      	cmp	r0, #0
   1ce8e:	d1f8      	bne.n	1ce82 <rxN+0xe>
		for(int32_t i = 0; i < number; i++)
   1ce90:	3501      	adds	r5, #1
   1ce92:	42a5      	cmp	r5, r4
   1ce94:	dbf7      	blt.n	1ce86 <rxN+0x12>
		return true;
   1ce96:	2001      	movs	r0, #1
   1ce98:	e7f4      	b.n	1ce84 <rxN+0x10>
		for(int32_t i = 0; i < number; i++)
   1ce9a:	2500      	movs	r5, #0
   1ce9c:	e7f9      	b.n	1ce92 <rxN+0x1e>

0001ce9e <rx>:
	return rxN(ch,1);
   1ce9e:	2101      	movs	r1, #1
   1cea0:	e7e8      	b.n	1ce74 <rxN>
   1cea2:	bf00      	nop

0001cea4 <init>:
	.init    = init,
	.deInit  = deInit
};

static void init(void)
{
   1cea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// === ADC initialization ===
	// enable clock for ADC0 & ADC1
	SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
   1cea8:	f241 013c 	movw	r1, #4156	; 0x103c
   1ceac:	4b94      	ldr	r3, [pc, #592]	; (1d100 <init+0x25c>)
   1ceae:	585a      	ldr	r2, [r3, r1]
   1ceb0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   1ceb4:	505a      	str	r2, [r3, r1]
	SIM_SCGC3 |= SIM_SCGC3_ADC1_MASK;
   1ceb6:	f241 0130 	movw	r1, #4144	; 0x1030
   1ceba:	585a      	ldr	r2, [r3, r1]
   1cebc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   1cec0:	505a      	str	r2, [r3, r1]

	HAL.IOs->pins->DIO4.configuration.GPIO_Mode = GPIO_Mode_IN;
   1cec2:	4b90      	ldr	r3, [pc, #576]	; (1d104 <init+0x260>)
   1cec4:	68dc      	ldr	r4, [r3, #12]
   1cec6:	6860      	ldr	r0, [r4, #4]
   1cec8:	2308      	movs	r3, #8
   1ceca:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
	HAL.IOs->pins->DIO5.configuration.GPIO_Mode = GPIO_Mode_IN;
   1cece:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d

	HAL.IOs->config->set(&HAL.IOs->pins->DIO4);
   1ced2:	6823      	ldr	r3, [r4, #0]
   1ced4:	30e8      	adds	r0, #232	; 0xe8
   1ced6:	681b      	ldr	r3, [r3, #0]
   1ced8:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->DIO5);
   1ceda:	e9d4 3000 	ldrd	r3, r0, [r4]
   1cede:	681b      	ldr	r3, [r3, #0]
   1cee0:	f500 7084 	add.w	r0, r0, #264	; 0x108
   1cee4:	4798      	blx	r3

	// CFG1: set ADC clocks
	ADC0_CFG1 = ADC_CFG1_MODE(0x03) | ADC_CFG1_ADICLK(1);
   1cee6:	4b88      	ldr	r3, [pc, #544]	; (1d108 <init+0x264>)
	ADC1_CFG1 = ADC_CFG1_MODE(0x03) | ADC_CFG1_ADICLK(1);
   1cee8:	4a88      	ldr	r2, [pc, #544]	; (1d10c <init+0x268>)
	ADC0_CFG1 = ADC_CFG1_MODE(0x03) | ADC_CFG1_ADICLK(1);
   1ceea:	210d      	movs	r1, #13
   1ceec:	6099      	str	r1, [r3, #8]
	ADC1_CFG1 = ADC_CFG1_MODE(0x03) | ADC_CFG1_ADICLK(1);
   1ceee:	6091      	str	r1, [r2, #8]

	// CFG2: configuration for high speed conversions and selects the long sample time duration
	ADC0_CFG2 = ADC_CFG2_ADLSTS(0);  // use default longest sample time
   1cef0:	2100      	movs	r1, #0
   1cef2:	60d9      	str	r1, [r3, #12]
	ADC1_CFG2 = ADC_CFG2_ADLSTS(0);  // use default longest sample time
   1cef4:	60d1      	str	r1, [r2, #12]

	// SC2: conversion
	ADC0_SC2 = ADC_SC2_DMAEN_MASK;  // enable DMA
   1cef6:	2104      	movs	r1, #4
   1cef8:	6219      	str	r1, [r3, #32]
	ADC1_SC2 = ADC_SC2_DMAEN_MASK;  // enable DMA;
   1cefa:	6211      	str	r1, [r2, #32]

	// average over 4 samples, single measurement (trigger from having DMA write the MUX value to SC1A)
	ADC0_SC3 = 	ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(0);
   1cefc:	6259      	str	r1, [r3, #36]	; 0x24
	ADC1_SC3 = 	ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(0);
   1cefe:	6251      	str	r1, [r2, #36]	; 0x24

	ADC0_SC3 |= ADC_SC3_CAL_MASK;
   1cf00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cf02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1cf06:	625a      	str	r2, [r3, #36]	; 0x24
	while(ADC0_SC3 & ADC_SC3_CAL_MASK);
   1cf08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cf0a:	0612      	lsls	r2, r2, #24
   1cf0c:	d4fc      	bmi.n	1cf08 <init+0x64>

	uint16_t cal = 0;
	cal += ADC0_CLP0;
   1cf0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	cal += ADC0_CLP1;
   1cf10:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1cf12:	440a      	add	r2, r1
	cal += ADC0_CLP2;
   1cf14:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1cf16:	fa11 f282 	uxtah	r2, r1, r2
	cal += ADC0_CLP3;
   1cf1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1cf1c:	fa11 f282 	uxtah	r2, r1, r2
	cal += ADC0_CLP4;
   1cf20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1cf22:	fa11 f282 	uxtah	r2, r1, r2
	cal += ADC0_CLPS;
   1cf26:	6b99      	ldr	r1, [r3, #56]	; 0x38
   1cf28:	fa11 f282 	uxtah	r2, r1, r2
	cal >>= 1;
   1cf2c:	f3c2 024e 	ubfx	r2, r2, #1, #15
	cal |= 1<<15;

	ADC0_PG = cal;

	ADC1_SC3 |= ADC_SC3_CAL_MASK;
   1cf30:	4976      	ldr	r1, [pc, #472]	; (1d10c <init+0x268>)
	ADC0_PG = cal;
   1cf32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   1cf36:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1_SC3 |= ADC_SC3_CAL_MASK;
   1cf38:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1cf3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cf3e:	624b      	str	r3, [r1, #36]	; 0x24
	while(ADC1_SC3 & ADC_SC3_CAL_MASK);
   1cf40:	6a4a      	ldr	r2, [r1, #36]	; 0x24
   1cf42:	f012 0280 	ands.w	r2, r2, #128	; 0x80
   1cf46:	d1fb      	bne.n	1cf40 <init+0x9c>

	cal = 0;
	cal += ADC1_CLP0;
   1cf48:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
	cal += ADC1_CLP1;
   1cf4a:	6c88      	ldr	r0, [r1, #72]	; 0x48
	ADC1_PG = cal;

	// === DMA initialization ===

	// enable clock for DMA
	SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;
   1cf4c:	4c70      	ldr	r4, [pc, #448]	; (1d110 <init+0x26c>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;

	// === setup DMA channels for ADC0 ===

	// DMA channel 0, use for write ADC mux channel, from SRAM to ADC
	DMAMUX_CHCFG0           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x36);                 // DMA source: DMA Mux channel 1 (Source Number 54)
   1cf4e:	4f71      	ldr	r7, [pc, #452]	; (1d114 <init+0x270>)
	DMA_TCD0_SADDR          = (uint32_t) &adc0_mux[0];                                              // Source address: ADC Mux Settings Array
   1cf50:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 1d130 <init+0x28c>
	DMA_TCD0_SOFF           = 0x01;                                                               // Source address increment (Added after each major loop step)
	DMA_TCD0_SLAST          = (uint32_t) -3;                                                        // Source address decrement (Added on major loop completion)
	DMA_TCD0_DADDR          = (uint32_t) &ADC0_SC1A;                                                // Destination address: ADC0 control register (containing ADC Mux bitfield)
   1cf54:	4d6c      	ldr	r5, [pc, #432]	; (1d108 <init+0x264>)
	DMA_TCD0_ATTR           = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0);                              // Source and destination size: 8 bit
	DMA_TCD0_CSR            = DMA_CSR_START_MASK;                                                 // Request channel start, to initiate our readout loop

	// DMA channel 1, use for read ADC result data, from ADC to SRAM
	DMAMUX_CHCFG1           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x28);                 // DMA source: ADC0 (Source Number 40)
	DMA_TCD1_SADDR          = (uint32_t) &ADC0_RA;                                                  // Source address: ADC0 result register
   1cf56:	4e70      	ldr	r6, [pc, #448]	; (1d118 <init+0x274>)
	cal += ADC1_CLP1;
   1cf58:	4403      	add	r3, r0
	cal += ADC1_CLP2;
   1cf5a:	6c48      	ldr	r0, [r1, #68]	; 0x44
   1cf5c:	fa10 f383 	uxtah	r3, r0, r3
	cal += ADC1_CLP3;
   1cf60:	6c08      	ldr	r0, [r1, #64]	; 0x40
   1cf62:	fa10 f383 	uxtah	r3, r0, r3
	cal += ADC1_CLP4;
   1cf66:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   1cf68:	fa10 f383 	uxtah	r3, r0, r3
	cal += ADC1_CLPS;
   1cf6c:	6b88      	ldr	r0, [r1, #56]	; 0x38
   1cf6e:	fa10 f383 	uxtah	r3, r0, r3
	cal >>= 1;
   1cf72:	f3c3 034e 	ubfx	r3, r3, #1, #15
	ADC1_PG = cal;
   1cf76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1cf7a:	62cb      	str	r3, [r1, #44]	; 0x2c
	SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;
   1cf7c:	6823      	ldr	r3, [r4, #0]
   1cf7e:	4860      	ldr	r0, [pc, #384]	; (1d100 <init+0x25c>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
   1cf80:	f241 0e3c 	movw	lr, #4156	; 0x103c
	SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;
   1cf84:	f043 0302 	orr.w	r3, r3, #2
   1cf88:	6023      	str	r3, [r4, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
   1cf8a:	f850 300e 	ldr.w	r3, [r0, lr]
   1cf8e:	f043 0302 	orr.w	r3, r3, #2
   1cf92:	f840 300e 	str.w	r3, [r0, lr]
	DMAMUX_CHCFG0           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x36);                 // DMA source: DMA Mux channel 1 (Source Number 54)
   1cf96:	23b6      	movs	r3, #182	; 0xb6
	DMA_TCD0_SADDR          = (uint32_t) &adc0_mux[0];                                              // Source address: ADC Mux Settings Array
   1cf98:	f5a0 3078 	sub.w	r0, r0, #253952	; 0x3e000
	DMAMUX_CHCFG0           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x36);                 // DMA source: DMA Mux channel 1 (Source Number 54)
   1cf9c:	703b      	strb	r3, [r7, #0]
	DMA_TCD0_SOFF           = 0x01;                                                               // Source address increment (Added after each major loop step)
   1cf9e:	f241 0404 	movw	r4, #4100	; 0x1004
	DMA_TCD0_SADDR          = (uint32_t) &adc0_mux[0];                                              // Source address: ADC Mux Settings Array
   1cfa2:	4b5e      	ldr	r3, [pc, #376]	; (1d11c <init+0x278>)
   1cfa4:	f8c0 c000 	str.w	ip, [r0]
	DMA_TCD0_SOFF           = 0x01;                                                               // Source address increment (Added after each major loop step)
   1cfa8:	2001      	movs	r0, #1
   1cfaa:	5318      	strh	r0, [r3, r4]
	DMA_TCD0_SLAST          = (uint32_t) -3;                                                        // Source address decrement (Added on major loop completion)
   1cfac:	f241 040c 	movw	r4, #4108	; 0x100c
   1cfb0:	f06f 0a02 	mvn.w	sl, #2
   1cfb4:	f843 a004 	str.w	sl, [r3, r4]
	DMA_TCD0_DADDR          = (uint32_t) &ADC0_SC1A;                                                // Destination address: ADC0 control register (containing ADC Mux bitfield)
   1cfb8:	f241 0410 	movw	r4, #4112	; 0x1010
	DMA_TCD1_SOFF           = 0x00;                                                               // Source address increment (Added after each major loop step)
	DMA_TCD1_SLAST          = 0x00;                                                               // Source address decrement (Added on major loop completion)
	DMA_TCD1_DADDR          = (uint32_t) &adc0_result[0];                                           // Destination address: ADC0 result buffer
	DMA_TCD1_DOFF           = 0x02;                                                               // Destination address increment (Added after each major loop step)
   1cfbc:	f241 0834 	movw	r8, #4148	; 0x1034
	DMA_TCD0_DADDR          = (uint32_t) &ADC0_SC1A;                                                // Destination address: ADC0 control register (containing ADC Mux bitfield)
   1cfc0:	511d      	str	r5, [r3, r4]
	DMA_TCD0_DOFF           = 0x00;                                                               // Destination address increment (Added after each major loop step)
   1cfc2:	f241 0414 	movw	r4, #4116	; 0x1014
	DMA_TCD0_BITER_ELINKNO  = 0x03;                                                               // Disable channel link, beginning major iteration count: 3
   1cfc6:	f241 051e 	movw	r5, #4126	; 0x101e
	DMA_TCD0_DOFF           = 0x00;                                                               // Destination address increment (Added after each major loop step)
   1cfca:	531a      	strh	r2, [r3, r4]
	DMA_TCD0_DLASTSGA       = 0x00;                                                               // Destination address decrement (Added on major loop completion)
   1cfcc:	f241 0418 	movw	r4, #4120	; 0x1018
	DMA_TCD1_DLASTSGA       = (uint32_t) -6;                                                        // Destination address decrement (Added on major loop completion)
   1cfd0:	f06f 0905 	mvn.w	r9, #5
	DMA_TCD0_DLASTSGA       = 0x00;                                                               // Destination address decrement (Added on major loop completion)
   1cfd4:	511a      	str	r2, [r3, r4]
	DMA_TCD0_NBYTES_MLNO    = 0x01;                                                               // Number of bytes transferred per request (1 Byte ADC Setting)
   1cfd6:	f241 0408 	movw	r4, #4104	; 0x1008
	DMA_TCD1_NBYTES_MLNO    = 0x02;                                                               // Number of bytes transferred per request (2 Byte ADC Result)
	DMA_TCD1_BITER_ELINKYES = (DMA_BITER_ELINKYES_ELINK_MASK|DMA_BITER_ELINKYES_LINKCH(0)|0x03);  // Enable channel link (to channel 0) on major loop step, beginning major iteration count: 3
   1cfda:	f241 0b3e 	movw	fp, #4158	; 0x103e
	DMA_TCD0_NBYTES_MLNO    = 0x01;                                                               // Number of bytes transferred per request (1 Byte ADC Setting)
   1cfde:	5118      	str	r0, [r3, r4]
	DMA_TCD0_BITER_ELINKNO  = 0x03;                                                               // Disable channel link, beginning major iteration count: 3
   1cfe0:	2403      	movs	r4, #3
   1cfe2:	535c      	strh	r4, [r3, r5]
	DMA_TCD0_CITER_ELINKNO  = 0x03;                                                               // Disable channel link, current major iteration count: 3
   1cfe4:	f241 0516 	movw	r5, #4118	; 0x1016

	// === setup DMA channels for ADC1 ===

	// DMA channel 2, use for write ADC mux channel, from SRAM to ADC
	DMAMUX_CHCFG2           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x38);                   // DMA source: DMA Mux channel 2 (Source Number 56)
	DMA_TCD2_SADDR          = (uint32_t) &adc1_mux[0];                                                // Source address: ADC Mux Settings
   1cfe8:	44a4      	add	ip, r4
	DMA_TCD0_CITER_ELINKNO  = 0x03;                                                               // Disable channel link, current major iteration count: 3
   1cfea:	535c      	strh	r4, [r3, r5]
	DMA_TCD0_ATTR           = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0);                              // Source and destination size: 8 bit
   1cfec:	f241 0506 	movw	r5, #4102	; 0x1006
   1cff0:	535a      	strh	r2, [r3, r5]
	DMA_TCD0_CSR            = DMA_CSR_START_MASK;                                                 // Request channel start, to initiate our readout loop
   1cff2:	f241 051c 	movw	r5, #4124	; 0x101c
   1cff6:	5358      	strh	r0, [r3, r5]
	DMAMUX_CHCFG1           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x28);                 // DMA source: ADC0 (Source Number 40)
   1cff8:	25a8      	movs	r5, #168	; 0xa8
   1cffa:	707d      	strb	r5, [r7, #1]
	DMA_TCD1_SADDR          = (uint32_t) &ADC0_RA;                                                  // Source address: ADC0 result register
   1cffc:	4d48      	ldr	r5, [pc, #288]	; (1d120 <init+0x27c>)
   1cffe:	602e      	str	r6, [r5, #0]
	DMA_TCD1_SOFF           = 0x00;                                                               // Source address increment (Added after each major loop step)
   1d000:	f241 0524 	movw	r5, #4132	; 0x1024
	DMA_TCD1_DADDR          = (uint32_t) &adc0_result[0];                                           // Destination address: ADC0 result buffer
   1d004:	4e47      	ldr	r6, [pc, #284]	; (1d124 <init+0x280>)
	DMA_TCD1_SOFF           = 0x00;                                                               // Source address increment (Added after each major loop step)
   1d006:	535a      	strh	r2, [r3, r5]
	DMA_TCD1_SLAST          = 0x00;                                                               // Source address decrement (Added on major loop completion)
   1d008:	f241 052c 	movw	r5, #4140	; 0x102c
   1d00c:	515a      	str	r2, [r3, r5]
	DMA_TCD1_DADDR          = (uint32_t) &adc0_result[0];                                           // Destination address: ADC0 result buffer
   1d00e:	f241 0530 	movw	r5, #4144	; 0x1030
   1d012:	515e      	str	r6, [r3, r5]
	DMA_TCD1_DOFF           = 0x02;                                                               // Destination address increment (Added after each major loop step)
   1d014:	2502      	movs	r5, #2
   1d016:	f823 5008 	strh.w	r5, [r3, r8]
	DMA_TCD1_DLASTSGA       = (uint32_t) -6;                                                        // Destination address decrement (Added on major loop completion)
   1d01a:	f241 0838 	movw	r8, #4152	; 0x1038
	// DMA channel 3, use for read ADC result data, from ADC to SRAM
	DMAMUX_CHCFG3           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x29);                   // DMA source: ADC1 (Source Number 41)
	DMA_TCD3_SADDR          = (uint32_t) &ADC1_RA;                                                    // Source address: ADC1 result register
	DMA_TCD3_SOFF           = 0x00;                                                                 // Source address increment (Added after each major loop step)
	DMA_TCD3_SLAST          = 0x00;                                                                 // Source address decrement (Added on major loop completion)
	DMA_TCD3_DADDR          = (uint32_t) &adc1_result[0];                                             // Destination address: ADC0 result buffer
   1d01e:	3606      	adds	r6, #6
	DMA_TCD1_DLASTSGA       = (uint32_t) -6;                                                        // Destination address decrement (Added on major loop completion)
   1d020:	f843 9008 	str.w	r9, [r3, r8]
	DMA_TCD1_NBYTES_MLNO    = 0x02;                                                               // Number of bytes transferred per request (2 Byte ADC Result)
   1d024:	f241 0828 	movw	r8, #4136	; 0x1028
   1d028:	f843 5008 	str.w	r5, [r3, r8]
	DMA_TCD1_BITER_ELINKYES = (DMA_BITER_ELINKYES_ELINK_MASK|DMA_BITER_ELINKYES_LINKCH(0)|0x03);  // Enable channel link (to channel 0) on major loop step, beginning major iteration count: 3
   1d02c:	f248 0803 	movw	r8, #32771	; 0x8003
   1d030:	f823 800b 	strh.w	r8, [r3, fp]
	DMA_TCD1_CITER_ELINKYES = (DMA_CITER_ELINKYES_ELINK_MASK|DMA_BITER_ELINKYES_LINKCH(0)|0x03);  // Enable channel link (to channel 0) on major loop step, current major iteration count: 3
   1d034:	f241 0b36 	movw	fp, #4150	; 0x1036
   1d038:	f823 800b 	strh.w	r8, [r3, fp]
	DMA_TCD1_ATTR           = DMA_ATTR_SSIZE(1) | DMA_ATTR_DSIZE(1);                              // Source and destination size: 16 bit
   1d03c:	f241 0b26 	movw	fp, #4134	; 0x1026
   1d040:	f240 1801 	movw	r8, #257	; 0x101
   1d044:	f823 800b 	strh.w	r8, [r3, fp]
	DMA_TCD1_CSR            = (DMA_CSR_MAJORLINKCH(0) | DMA_CSR_MAJORELINK_MASK);                 // Major loop completion starts request for Channel 0
   1d048:	f04f 0b20 	mov.w	fp, #32
   1d04c:	f823 b00e 	strh.w	fp, [r3, lr]
	DMAMUX_CHCFG2           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x38);                   // DMA source: DMA Mux channel 2 (Source Number 56)
   1d050:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
	DMA_SERQ = 1;
   1d054:	76d8      	strb	r0, [r3, #27]
	DMAMUX_CHCFG2           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x38);                   // DMA source: DMA Mux channel 2 (Source Number 56)
   1d056:	f887 e002 	strb.w	lr, [r7, #2]
	DMA_TCD2_SADDR          = (uint32_t) &adc1_mux[0];                                                // Source address: ADC Mux Settings
   1d05a:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 1d134 <init+0x290>
   1d05e:	f8ce c000 	str.w	ip, [lr]
	DMA_TCD2_SOFF           = 0x01;                                                                 // Source address increment (Added after each major loop step)
   1d062:	f241 0c44 	movw	ip, #4164	; 0x1044
   1d066:	f823 000c 	strh.w	r0, [r3, ip]
	DMA_TCD2_SLAST          = (uint32_t) -3;                                                          // Source address decrement (Added on major loop completion)
   1d06a:	f241 0c4c 	movw	ip, #4172	; 0x104c
   1d06e:	f843 a00c 	str.w	sl, [r3, ip]
	DMA_TCD2_DADDR          = (uint32_t) &ADC1_SC1A;                                                  // Destination address: ADC1 control register (containing ADC Mux bitfield)
   1d072:	f241 0c50 	movw	ip, #4176	; 0x1050
   1d076:	f843 100c 	str.w	r1, [r3, ip]
	DMA_TCD2_DOFF           = 0x00;                                                                 // Destination address increment (Added for each major loop step)
   1d07a:	f241 0154 	movw	r1, #4180	; 0x1054
   1d07e:	525a      	strh	r2, [r3, r1]
	DMA_TCD2_DLASTSGA       = 0x00;                                                                 // Destination address decrement (Added on major loop completion)
   1d080:	f241 0158 	movw	r1, #4184	; 0x1058
   1d084:	505a      	str	r2, [r3, r1]
	DMA_TCD2_NBYTES_MLNO    = 0x01;                                                                 // Number of bytes transferred per request (1 Byte ADC Setting)
   1d086:	f241 0148 	movw	r1, #4168	; 0x1048
   1d08a:	5058      	str	r0, [r3, r1]
	DMA_TCD2_BITER_ELINKNO  = 0x03;                                                                 // Disable channel link, beginning major iteration count: 3
   1d08c:	f241 015e 	movw	r1, #4190	; 0x105e
   1d090:	525c      	strh	r4, [r3, r1]
	DMA_TCD2_CITER_ELINKNO  = 0x03;                                                                 // Disable channel link, current major iteration count: 3
   1d092:	f241 0156 	movw	r1, #4182	; 0x1056
   1d096:	525c      	strh	r4, [r3, r1]
	DMA_TCD2_ATTR           = DMA_ATTR_SSIZE(0) | DMA_ATTR_DSIZE(0);                                // Source and destination size: 8 bit
   1d098:	f241 0146 	movw	r1, #4166	; 0x1046
   1d09c:	525a      	strh	r2, [r3, r1]
	DMA_TCD2_CSR            = DMA_CSR_START_MASK;                                                   // Request channel start, to initiate our readout loop
   1d09e:	f241 015c 	movw	r1, #4188	; 0x105c
   1d0a2:	5258      	strh	r0, [r3, r1]
	DMAMUX_CHCFG3           = DMAMUX_CHCFG_ENBL_MASK | DMAMUX_CHCFG_SOURCE(0x29);                   // DMA source: ADC1 (Source Number 41)
   1d0a4:	21a9      	movs	r1, #169	; 0xa9
   1d0a6:	70f9      	strb	r1, [r7, #3]
	DMA_TCD3_SADDR          = (uint32_t) &ADC1_RA;                                                    // Source address: ADC1 result register
   1d0a8:	491f      	ldr	r1, [pc, #124]	; (1d128 <init+0x284>)
   1d0aa:	4820      	ldr	r0, [pc, #128]	; (1d12c <init+0x288>)
   1d0ac:	6008      	str	r0, [r1, #0]
	DMA_TCD3_SOFF           = 0x00;                                                                 // Source address increment (Added after each major loop step)
   1d0ae:	f241 0164 	movw	r1, #4196	; 0x1064
   1d0b2:	525a      	strh	r2, [r3, r1]
	DMA_TCD3_SLAST          = 0x00;                                                                 // Source address decrement (Added on major loop completion)
   1d0b4:	f241 016c 	movw	r1, #4204	; 0x106c
   1d0b8:	505a      	str	r2, [r3, r1]
	DMA_TCD3_DADDR          = (uint32_t) &adc1_result[0];                                             // Destination address: ADC0 result buffer
   1d0ba:	f241 0270 	movw	r2, #4208	; 0x1070
	DMA_TCD3_DOFF           = 0x02;                                                                 // Destination address increment (Added after each major loop step)
	DMA_TCD3_DLASTSGA       = (uint32_t) -6;                                                          // Destination address decrement (Added on major loop completion)
	DMA_TCD3_NBYTES_MLNO    = 0x02;                                                                 // Number of bytes transferred per request (2 Byte ADC Result)
	DMA_TCD3_BITER_ELINKYES = DMA_BITER_ELINKYES_ELINK_MASK | DMA_BITER_ELINKYES_LINKCH(2) | 0x03;  // Enable channel link (to channel 2) on major loop step, beginning major iteration count: 3
   1d0be:	f241 017e 	movw	r1, #4222	; 0x107e
	DMA_TCD3_DADDR          = (uint32_t) &adc1_result[0];                                             // Destination address: ADC0 result buffer
   1d0c2:	509e      	str	r6, [r3, r2]
	DMA_TCD3_DOFF           = 0x02;                                                                 // Destination address increment (Added after each major loop step)
   1d0c4:	f241 0274 	movw	r2, #4212	; 0x1074
   1d0c8:	529d      	strh	r5, [r3, r2]
	DMA_TCD3_DLASTSGA       = (uint32_t) -6;                                                          // Destination address decrement (Added on major loop completion)
   1d0ca:	f241 0278 	movw	r2, #4216	; 0x1078
   1d0ce:	f843 9002 	str.w	r9, [r3, r2]
	DMA_TCD3_NBYTES_MLNO    = 0x02;                                                                 // Number of bytes transferred per request (2 Byte ADC Result)
   1d0d2:	f241 0268 	movw	r2, #4200	; 0x1068
   1d0d6:	509d      	str	r5, [r3, r2]
	DMA_TCD3_BITER_ELINKYES = DMA_BITER_ELINKYES_ELINK_MASK | DMA_BITER_ELINKYES_LINKCH(2) | 0x03;  // Enable channel link (to channel 2) on major loop step, beginning major iteration count: 3
   1d0d8:	f248 4203 	movw	r2, #33795	; 0x8403
   1d0dc:	525a      	strh	r2, [r3, r1]
	DMA_TCD3_CITER_ELINKYES = DMA_CITER_ELINKYES_ELINK_MASK | DMA_CITER_ELINKYES_LINKCH(2) | 0x03;  // Enable channel link (to channel 2) on major loop step, current major iteration count: 3
   1d0de:	f241 0176 	movw	r1, #4214	; 0x1076
   1d0e2:	525a      	strh	r2, [r3, r1]
	DMA_TCD3_ATTR           = DMA_ATTR_SSIZE(1) | DMA_ATTR_DSIZE(1);                                // Source and destination size: 16 bit
   1d0e4:	f241 0266 	movw	r2, #4198	; 0x1066
	DMA_TCD3_CSR            = DMA_CSR_MAJORLINKCH(2) | DMA_CSR_MAJORELINK_MASK;                     // Major loop completion starts request for Channel 2
   1d0e8:	f44f 7108 	mov.w	r1, #544	; 0x220
	DMA_TCD3_ATTR           = DMA_ATTR_SSIZE(1) | DMA_ATTR_DSIZE(1);                                // Source and destination size: 16 bit
   1d0ec:	f823 8002 	strh.w	r8, [r3, r2]
	DMA_TCD3_CSR            = DMA_CSR_MAJORLINKCH(2) | DMA_CSR_MAJORELINK_MASK;                     // Major loop completion starts request for Channel 2
   1d0f0:	f241 027c 	movw	r2, #4220	; 0x107c
   1d0f4:	5299      	strh	r1, [r3, r2]

	// Start the DMA Channel 3
	DMA_SERQ = 3;
   1d0f6:	76dc      	strb	r4, [r3, #27]

	EnableInterrupts;
   1d0f8:	b662      	cpsie	i
}
   1d0fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0fe:	bf00      	nop
   1d100:	40047000 	.word	0x40047000
   1d104:	00029d1c 	.word	0x00029d1c
   1d108:	4003b000 	.word	0x4003b000
   1d10c:	400bb000 	.word	0x400bb000
   1d110:	40048040 	.word	0x40048040
   1d114:	40021000 	.word	0x40021000
   1d118:	4003b010 	.word	0x4003b010
   1d11c:	40008000 	.word	0x40008000
   1d120:	40009020 	.word	0x40009020
   1d124:	1fff45ac 	.word	0x1fff45ac
   1d128:	40009060 	.word	0x40009060
   1d12c:	400bb010 	.word	0x400bb010
   1d130:	00029d4c 	.word	0x00029d4c
   1d134:	40009040 	.word	0x40009040

0001d138 <deInit>:

static void deInit()
{
	// disable clock for DMA
	SIM_SCGC7 &= ~(SIM_SCGC7_DMA_MASK);
   1d138:	4b0b      	ldr	r3, [pc, #44]	; (1d168 <deInit+0x30>)
   1d13a:	f503 5182 	add.w	r1, r3, #4160	; 0x1040
   1d13e:	680a      	ldr	r2, [r1, #0]
   1d140:	f022 0202 	bic.w	r2, r2, #2
   1d144:	600a      	str	r2, [r1, #0]

	// disable clock for DMA mux
	SIM_SCGC6 &= ~(SIM_SCGC6_DMAMUX_MASK);
   1d146:	f241 023c 	movw	r2, #4156	; 0x103c
   1d14a:	5899      	ldr	r1, [r3, r2]
   1d14c:	f021 0102 	bic.w	r1, r1, #2
   1d150:	5099      	str	r1, [r3, r2]

	// disable clock for ADC0/ADC1
	SIM_SCGC6 &= ~(SIM_SCGC6_ADC0_MASK);
   1d152:	5899      	ldr	r1, [r3, r2]
   1d154:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   1d158:	5099      	str	r1, [r3, r2]
	SIM_SCGC3 &= ~(SIM_SCGC3_ADC1_MASK);
   1d15a:	f241 0130 	movw	r1, #4144	; 0x1030
   1d15e:	585a      	ldr	r2, [r3, r1]
   1d160:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
   1d164:	505a      	str	r2, [r3, r1]
}
   1d166:	4770      	bx	lr
   1d168:	40047000 	.word	0x40047000

0001d16c <init>:
	},
};

static void init()
{
	HAL.IOs->pins->LED_ERROR.configuration.GPIO_Mode   = GPIO_Mode_OUT;
   1d16c:	4b12      	ldr	r3, [pc, #72]	; (1d1b8 <init+0x4c>)
{
   1d16e:	b510      	push	{r4, lr}
	HAL.IOs->pins->LED_ERROR.configuration.GPIO_Mode   = GPIO_Mode_OUT;
   1d170:	68dc      	ldr	r4, [r3, #12]
   1d172:	6860      	ldr	r0, [r4, #4]
   1d174:	2209      	movs	r2, #9
	HAL.IOs->pins->LED_ERROR.configuration.GPIO_OType  = GPIO_OType_PP;
   1d176:	2300      	movs	r3, #0
	HAL.IOs->pins->LED_ERROR.configuration.GPIO_Mode   = GPIO_Mode_OUT;
   1d178:	f880 257d 	strb.w	r2, [r0, #1405]	; 0x57d
	HAL.IOs->pins->LED_STAT.configuration.GPIO_Mode    = GPIO_Mode_OUT;
   1d17c:	f880 255d 	strb.w	r2, [r0, #1373]	; 0x55d
	HAL.IOs->pins->LED_ERROR.configuration.GPIO_OType  = GPIO_OType_PP;
   1d180:	f880 357f 	strb.w	r3, [r0, #1407]	; 0x57f
	HAL.IOs->pins->LED_STAT.configuration.GPIO_OType   = GPIO_OType_PP;
   1d184:	f880 355f 	strb.w	r3, [r0, #1375]	; 0x55f

	HAL.IOs->config->set(&HAL.IOs->pins->LED_ERROR);
   1d188:	6823      	ldr	r3, [r4, #0]
   1d18a:	f500 60ad 	add.w	r0, r0, #1384	; 0x568
   1d18e:	681b      	ldr	r3, [r3, #0]
   1d190:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->LED_STAT);
   1d192:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d196:	681b      	ldr	r3, [r3, #0]
   1d198:	f500 60a9 	add.w	r0, r0, #1352	; 0x548
   1d19c:	4798      	blx	r3

	LED_OFF();
   1d19e:	6863      	ldr	r3, [r4, #4]
   1d1a0:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
   1d1a4:	f8d3 1558 	ldr.w	r1, [r3, #1368]	; 0x558
   1d1a8:	6011      	str	r1, [r2, #0]
	LED_ERROR_OFF();
   1d1aa:	f8d3 2570 	ldr.w	r2, [r3, #1392]	; 0x570
   1d1ae:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
   1d1b2:	6013      	str	r3, [r2, #0]
}
   1d1b4:	bd10      	pop	{r4, pc}
   1d1b6:	bf00      	nop
   1d1b8:	00029d1c 	.word	0x00029d1c

0001d1bc <onStat>:

static void onStat()
{
	LED_ON();
   1d1bc:	4b04      	ldr	r3, [pc, #16]	; (1d1d0 <onStat+0x14>)
   1d1be:	68db      	ldr	r3, [r3, #12]
   1d1c0:	685b      	ldr	r3, [r3, #4]
   1d1c2:	f8d3 2554 	ldr.w	r2, [r3, #1364]	; 0x554
   1d1c6:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
   1d1ca:	6013      	str	r3, [r2, #0]
}
   1d1cc:	4770      	bx	lr
   1d1ce:	bf00      	nop
   1d1d0:	00029d1c 	.word	0x00029d1c

0001d1d4 <onError>:

static void onError()
{
	LED_ERROR_ON();
   1d1d4:	4b04      	ldr	r3, [pc, #16]	; (1d1e8 <onError+0x14>)
   1d1d6:	68db      	ldr	r3, [r3, #12]
   1d1d8:	685b      	ldr	r3, [r3, #4]
   1d1da:	f8d3 2574 	ldr.w	r2, [r3, #1396]	; 0x574
   1d1de:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
   1d1e2:	6013      	str	r3, [r2, #0]
}
   1d1e4:	4770      	bx	lr
   1d1e6:	bf00      	nop
   1d1e8:	00029d1c 	.word	0x00029d1c

0001d1ec <offStat>:

static void offStat()
{
	LED_OFF();
   1d1ec:	4b04      	ldr	r3, [pc, #16]	; (1d200 <offStat+0x14>)
   1d1ee:	68db      	ldr	r3, [r3, #12]
   1d1f0:	685b      	ldr	r3, [r3, #4]
   1d1f2:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
   1d1f6:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
   1d1fa:	6013      	str	r3, [r2, #0]
}
   1d1fc:	4770      	bx	lr
   1d1fe:	bf00      	nop
   1d200:	00029d1c 	.word	0x00029d1c

0001d204 <offError>:

static void offError()
{
	LED_ERROR_OFF();
   1d204:	4b04      	ldr	r3, [pc, #16]	; (1d218 <offError+0x14>)
   1d206:	68db      	ldr	r3, [r3, #12]
   1d208:	685b      	ldr	r3, [r3, #4]
   1d20a:	f8d3 2570 	ldr.w	r2, [r3, #1392]	; 0x570
   1d20e:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
   1d212:	6013      	str	r3, [r2, #0]
}
   1d214:	4770      	bx	lr
   1d216:	bf00      	nop
   1d218:	00029d1c 	.word	0x00029d1c

0001d21c <toggleStat>:

static void toggleStat()
{
	LED_TOGGLE();
   1d21c:	4b05      	ldr	r3, [pc, #20]	; (1d234 <toggleStat+0x18>)
   1d21e:	68db      	ldr	r3, [r3, #12]
   1d220:	6859      	ldr	r1, [r3, #4]
   1d222:	f8d1 254c 	ldr.w	r2, [r1, #1356]	; 0x54c
   1d226:	f8d1 1558 	ldr.w	r1, [r1, #1368]	; 0x558
   1d22a:	68d3      	ldr	r3, [r2, #12]
   1d22c:	404b      	eors	r3, r1
   1d22e:	60d3      	str	r3, [r2, #12]
}
   1d230:	4770      	bx	lr
   1d232:	bf00      	nop
   1d234:	00029d1c 	.word	0x00029d1c

0001d238 <toggleError>:

static void toggleError()
{
	LED_ERROR_TOGGLE();
   1d238:	4b05      	ldr	r3, [pc, #20]	; (1d250 <toggleError+0x18>)
   1d23a:	68db      	ldr	r3, [r3, #12]
   1d23c:	6859      	ldr	r1, [r3, #4]
   1d23e:	f8d1 256c 	ldr.w	r2, [r1, #1388]	; 0x56c
   1d242:	f8d1 1578 	ldr.w	r1, [r1, #1400]	; 0x578
   1d246:	68d3      	ldr	r3, [r2, #12]
   1d248:	404b      	eors	r3, r1
   1d24a:	60d3      	str	r3, [r2, #12]
}
   1d24c:	4770      	bx	lr
   1d24e:	bf00      	nop
   1d250:	00029d1c 	.word	0x00029d1c

0001d254 <tx>:
	}
}

static void tx(uint8_t ch)
{
	buffers.tx.buffer[buffers.tx.wrote] = ch;
   1d254:	4a06      	ldr	r2, [pc, #24]	; (1d270 <tx+0x1c>)
   1d256:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   1d25a:	54c8      	strb	r0, [r1, r3]
	buffers.tx.wrote = (buffers.tx.wrote + 1) % BUFFER_SIZE;
   1d25c:	3301      	adds	r3, #1
   1d25e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d262:	6053      	str	r3, [r2, #4]

	// enable send interrupt
	UART4_C2 |= UART_C2_TIE_MASK;
   1d264:	4a03      	ldr	r2, [pc, #12]	; (1d274 <tx+0x20>)
   1d266:	78d3      	ldrb	r3, [r2, #3]
   1d268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d26c:	70d3      	strb	r3, [r2, #3]
}
   1d26e:	4770      	bx	lr
   1d270:	1fff0a64 	.word	0x1fff0a64
   1d274:	400ea000 	.word	0x400ea000

0001d278 <rx>:

static uint8_t rx(uint8_t *ch)
{
	if(buffers.rx.read == buffers.rx.wrote)
   1d278:	4a09      	ldr	r2, [pc, #36]	; (1d2a0 <rx+0x28>)
   1d27a:	e9d2 3103 	ldrd	r3, r1, [r2, #12]
   1d27e:	428b      	cmp	r3, r1
   1d280:	d00c      	beq.n	1d29c <rx+0x24>
		return 0;

	*ch = buffers.rx.buffer[buffers.rx.read];
   1d282:	6951      	ldr	r1, [r2, #20]
   1d284:	5cc9      	ldrb	r1, [r1, r3]
   1d286:	7001      	strb	r1, [r0, #0]
	buffers.rx.read = (buffers.rx.read + 1) % BUFFER_SIZE;
   1d288:	3301      	adds	r3, #1
   1d28a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d28e:	60d3      	str	r3, [r2, #12]
	available--;
   1d290:	4a04      	ldr	r2, [pc, #16]	; (1d2a4 <rx+0x2c>)
   1d292:	6813      	ldr	r3, [r2, #0]
   1d294:	3b01      	subs	r3, #1
   1d296:	6013      	str	r3, [r2, #0]

	return 1;
   1d298:	2001      	movs	r0, #1
   1d29a:	4770      	bx	lr
		return 0;
   1d29c:	2000      	movs	r0, #0
}
   1d29e:	4770      	bx	lr
   1d2a0:	1fff0a64 	.word	0x1fff0a64
   1d2a4:	1fff45c4 	.word	0x1fff45c4

0001d2a8 <txN>:

static void txN(uint8_t *str, uint8_t number)
{
   1d2a8:	b570      	push	{r4, r5, r6, lr}
   1d2aa:	4606      	mov	r6, r0
   1d2ac:	460d      	mov	r5, r1
	for(int32_t i = 0; i < number; i++)
   1d2ae:	2400      	movs	r4, #0
   1d2b0:	42a5      	cmp	r5, r4
   1d2b2:	dc00      	bgt.n	1d2b6 <txN+0xe>
		tx(str[i]);
}
   1d2b4:	bd70      	pop	{r4, r5, r6, pc}
		tx(str[i]);
   1d2b6:	5d30      	ldrb	r0, [r6, r4]
   1d2b8:	f7ff ffcc 	bl	1d254 <tx>
	for(int32_t i = 0; i < number; i++)
   1d2bc:	3401      	adds	r4, #1
   1d2be:	e7f7      	b.n	1d2b0 <txN+0x8>

0001d2c0 <bytesAvailable>:
	enable_irq(INT_UART4_RX_TX-16);
}

static uint32_t bytesAvailable()
{
	return available;
   1d2c0:	4b01      	ldr	r3, [pc, #4]	; (1d2c8 <bytesAvailable+0x8>)
   1d2c2:	6818      	ldr	r0, [r3, #0]
}
   1d2c4:	4770      	bx	lr
   1d2c6:	bf00      	nop
   1d2c8:	1fff45c4 	.word	0x1fff45c4

0001d2cc <clearBuffers>:
{
   1d2cc:	b508      	push	{r3, lr}
	disable_irq(INT_UART4_RX_TX-16);
   1d2ce:	2035      	movs	r0, #53	; 0x35
   1d2d0:	f007 ff62 	bl	25198 <disable_irq>
	available         = 0;
   1d2d4:	4a06      	ldr	r2, [pc, #24]	; (1d2f0 <clearBuffers+0x24>)
   1d2d6:	2300      	movs	r3, #0
   1d2d8:	6013      	str	r3, [r2, #0]
	buffers.rx.read   = 0;
   1d2da:	4a06      	ldr	r2, [pc, #24]	; (1d2f4 <clearBuffers+0x28>)
	enable_irq(INT_UART4_RX_TX-16);
   1d2dc:	2035      	movs	r0, #53	; 0x35
	buffers.rx.wrote  = 0;
   1d2de:	e9c2 3303 	strd	r3, r3, [r2, #12]
	buffers.tx.wrote  = 0;
   1d2e2:	e9c2 3300 	strd	r3, r3, [r2]
}
   1d2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	enable_irq(INT_UART4_RX_TX-16);
   1d2ea:	f007 bf07 	b.w	250fc <enable_irq>
   1d2ee:	bf00      	nop
   1d2f0:	1fff45c4 	.word	0x1fff45c4
   1d2f4:	1fff0a64 	.word	0x1fff0a64

0001d2f8 <deInit>:
	SIM_SCGC1 &= ~(SIM_SCGC1_UART4_MASK);
   1d2f8:	4910      	ldr	r1, [pc, #64]	; (1d33c <deInit+0x44>)
   1d2fa:	f241 0228 	movw	r2, #4136	; 0x1028
{
   1d2fe:	b510      	push	{r4, lr}
	SIM_SCGC1 &= ~(SIM_SCGC1_UART4_MASK);
   1d300:	588b      	ldr	r3, [r1, r2]
   1d302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1d306:	508b      	str	r3, [r1, r2]
	HAL.IOs->pins->RS232_RX.configuration.GPIO_Mode = GPIO_Mode_IN;
   1d308:	4b0d      	ldr	r3, [pc, #52]	; (1d340 <deInit+0x48>)
   1d30a:	68dc      	ldr	r4, [r3, #12]
   1d30c:	6860      	ldr	r0, [r4, #4]
   1d30e:	2308      	movs	r3, #8
   1d310:	f880 34dd 	strb.w	r3, [r0, #1245]	; 0x4dd
	HAL.IOs->pins->RS232_TX.configuration.GPIO_Mode = GPIO_Mode_IN;
   1d314:	f880 34bd 	strb.w	r3, [r0, #1213]	; 0x4bd
	HAL.IOs->config->set(&HAL.IOs->pins->RS232_RX);
   1d318:	6823      	ldr	r3, [r4, #0]
   1d31a:	f500 6099 	add.w	r0, r0, #1224	; 0x4c8
   1d31e:	681b      	ldr	r3, [r3, #0]
   1d320:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->RS232_TX);
   1d322:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d326:	681b      	ldr	r3, [r3, #0]
   1d328:	f500 6095 	add.w	r0, r0, #1192	; 0x4a8
   1d32c:	4798      	blx	r3
	disable_irq(INT_UART4_RX_TX-16);
   1d32e:	2035      	movs	r0, #53	; 0x35
   1d330:	f007 ff32 	bl	25198 <disable_irq>
}
   1d334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clearBuffers();
   1d338:	e7c8      	b.n	1d2cc <clearBuffers>
   1d33a:	bf00      	nop
   1d33c:	40047000 	.word	0x40047000
   1d340:	00029d1c 	.word	0x00029d1c

0001d344 <init>:
	SIM_SCGC1 |= (SIM_SCGC1_UART4_MASK);
   1d344:	491a      	ldr	r1, [pc, #104]	; (1d3b0 <init+0x6c>)
   1d346:	f241 0228 	movw	r2, #4136	; 0x1028
{
   1d34a:	b510      	push	{r4, lr}
	SIM_SCGC1 |= (SIM_SCGC1_UART4_MASK);
   1d34c:	588b      	ldr	r3, [r1, r2]
   1d34e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1d352:	508b      	str	r3, [r1, r2]
	HAL.IOs->pins->RS232_RX.configuration.GPIO_Mode = GPIO_Mode_AF3;
   1d354:	4b17      	ldr	r3, [pc, #92]	; (1d3b4 <init+0x70>)
   1d356:	68dc      	ldr	r4, [r3, #12]
   1d358:	6860      	ldr	r0, [r4, #4]
   1d35a:	2303      	movs	r3, #3
   1d35c:	f880 34dd 	strb.w	r3, [r0, #1245]	; 0x4dd
	HAL.IOs->pins->RS232_TX.configuration.GPIO_Mode = GPIO_Mode_AF3;
   1d360:	f880 34bd 	strb.w	r3, [r0, #1213]	; 0x4bd
	HAL.IOs->config->set(&HAL.IOs->pins->RS232_RX);
   1d364:	6823      	ldr	r3, [r4, #0]
   1d366:	f500 6099 	add.w	r0, r0, #1224	; 0x4c8
   1d36a:	681b      	ldr	r3, [r3, #0]
   1d36c:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->RS232_TX);
   1d36e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d372:	681b      	ldr	r3, [r3, #0]
   1d374:	f500 6095 	add.w	r0, r0, #1192	; 0x4a8
   1d378:	4798      	blx	r3
	UART_C2_REG(UART4_BASE_PTR) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
   1d37a:	4b0f      	ldr	r3, [pc, #60]	; (1d3b8 <init+0x74>)
   1d37c:	78da      	ldrb	r2, [r3, #3]
   1d37e:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
   1d382:	70da      	strb	r2, [r3, #3]
	UART_C1_REG(UART4_BASE_PTR) = 0;
   1d384:	2200      	movs	r2, #0
   1d386:	709a      	strb	r2, [r3, #2]
	ubd = (CPU_BUS_CLK_HZ / 16) / (RS232.baudRate);
   1d388:	4a0c      	ldr	r2, [pc, #48]	; (1d3bc <init+0x78>)
   1d38a:	6b91      	ldr	r1, [r2, #56]	; 0x38
   1d38c:	4a0c      	ldr	r2, [pc, #48]	; (1d3c0 <init+0x7c>)
   1d38e:	fbb2 f2f1 	udiv	r2, r2, r1
	UART_BDH_REG(UART4_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1d392:	f3c2 2104 	ubfx	r1, r2, #8, #5
	UART_BDL_REG(UART4_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1d396:	b2d2      	uxtb	r2, r2
	UART_BDH_REG(UART4_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1d398:	7019      	strb	r1, [r3, #0]
	UART_BDL_REG(UART4_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1d39a:	705a      	strb	r2, [r3, #1]
	UART_C2_REG(UART4_BASE_PTR) |= (UART_C2_TE_MASK | UART_C2_RE_MASK | UART_C2_RIE_MASK);
   1d39c:	78da      	ldrb	r2, [r3, #3]
   1d39e:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
   1d3a2:	70da      	strb	r2, [r3, #3]
}
   1d3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	enable_irq(INT_UART4_RX_TX-16);
   1d3a8:	2035      	movs	r0, #53	; 0x35
   1d3aa:	f007 bea7 	b.w	250fc <enable_irq>
   1d3ae:	bf00      	nop
   1d3b0:	40047000 	.word	0x40047000
   1d3b4:	00029d1c 	.word	0x00029d1c
   1d3b8:	400ea000 	.word	0x400ea000
   1d3bc:	1fff0a64 	.word	0x1fff0a64
   1d3c0:	002dc6c0 	.word	0x002dc6c0

0001d3c4 <rxN>:
	if(available < number)
   1d3c4:	4b09      	ldr	r3, [pc, #36]	; (1d3ec <rxN+0x28>)
   1d3c6:	681b      	ldr	r3, [r3, #0]
   1d3c8:	4299      	cmp	r1, r3
{
   1d3ca:	b570      	push	{r4, r5, r6, lr}
   1d3cc:	4606      	mov	r6, r0
   1d3ce:	460c      	mov	r4, r1
	if(available < number)
   1d3d0:	d809      	bhi.n	1d3e6 <rxN+0x22>
	for(int32_t i = 0; i < number; i++)
   1d3d2:	2500      	movs	r5, #0
   1d3d4:	42a5      	cmp	r5, r4
   1d3d6:	db01      	blt.n	1d3dc <rxN+0x18>
   1d3d8:	2001      	movs	r0, #1
}
   1d3da:	bd70      	pop	{r4, r5, r6, pc}
		rx(&str[i]);
   1d3dc:	1970      	adds	r0, r6, r5
   1d3de:	f7ff ff4b 	bl	1d278 <rx>
	for(int32_t i = 0; i < number; i++)
   1d3e2:	3501      	adds	r5, #1
   1d3e4:	e7f6      	b.n	1d3d4 <rxN+0x10>
		return 0;
   1d3e6:	2000      	movs	r0, #0
   1d3e8:	e7f7      	b.n	1d3da <rxN+0x16>
   1d3ea:	bf00      	nop
   1d3ec:	1fff45c4 	.word	0x1fff45c4

0001d3f0 <UART4_RX_TX_IRQHandler>:
{
   1d3f0:	b530      	push	{r4, r5, lr}
	uint32_t status = UART4_S1;
   1d3f2:	4a19      	ldr	r2, [pc, #100]	; (1d458 <UART4_RX_TX_IRQHandler+0x68>)
   1d3f4:	7913      	ldrb	r3, [r2, #4]
	if(status & UART_S1_RDRF_MASK)
   1d3f6:	0699      	lsls	r1, r3, #26
	uint32_t status = UART4_S1;
   1d3f8:	b2dc      	uxtb	r4, r3
	if(status & UART_S1_RDRF_MASK)
   1d3fa:	d511      	bpl.n	1d420 <UART4_RX_TX_IRQHandler+0x30>
		buffers.rx.buffer[buffers.rx.wrote] = UART4_D;
   1d3fc:	4917      	ldr	r1, [pc, #92]	; (1d45c <UART4_RX_TX_IRQHandler+0x6c>)
   1d3fe:	79d0      	ldrb	r0, [r2, #7]
   1d400:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d404:	b2c0      	uxtb	r0, r0
   1d406:	54e8      	strb	r0, [r5, r3]
		buffers.rx.wrote = (buffers.rx.wrote + 1) % BUFFER_SIZE;
   1d408:	3301      	adds	r3, #1
   1d40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d40e:	610b      	str	r3, [r1, #16]
		available++;
   1d410:	4913      	ldr	r1, [pc, #76]	; (1d460 <UART4_RX_TX_IRQHandler+0x70>)
   1d412:	680b      	ldr	r3, [r1, #0]
   1d414:	3301      	adds	r3, #1
   1d416:	600b      	str	r3, [r1, #0]
		UART4_S1 &= ~(UART_S1_RDRF_MASK);
   1d418:	7913      	ldrb	r3, [r2, #4]
   1d41a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d41e:	7113      	strb	r3, [r2, #4]
	if(status & UART_S1_TDRE_MASK)
   1d420:	0623      	lsls	r3, r4, #24
   1d422:	d512      	bpl.n	1d44a <UART4_RX_TX_IRQHandler+0x5a>
		if(buffers.tx.read != buffers.tx.wrote)
   1d424:	4a0d      	ldr	r2, [pc, #52]	; (1d45c <UART4_RX_TX_IRQHandler+0x6c>)
   1d426:	e9d2 3100 	ldrd	r3, r1, [r2]
   1d42a:	428b      	cmp	r3, r1
   1d42c:	490a      	ldr	r1, [pc, #40]	; (1d458 <UART4_RX_TX_IRQHandler+0x68>)
   1d42e:	d00d      	beq.n	1d44c <UART4_RX_TX_IRQHandler+0x5c>
			UART4_D	= buffers.tx.buffer[buffers.tx.read];
   1d430:	6890      	ldr	r0, [r2, #8]
   1d432:	5cc0      	ldrb	r0, [r0, r3]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d434:	3301      	adds	r3, #1
			UART4_D	= buffers.tx.buffer[buffers.tx.read];
   1d436:	b2c0      	uxtb	r0, r0
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d438:	f3c3 0309 	ubfx	r3, r3, #0, #10
			UART4_D	= buffers.tx.buffer[buffers.tx.read];
   1d43c:	71c8      	strb	r0, [r1, #7]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d43e:	6013      	str	r3, [r2, #0]
		UART4_S1 &= ~(UART_S1_TDRE_MASK);
   1d440:	4a05      	ldr	r2, [pc, #20]	; (1d458 <UART4_RX_TX_IRQHandler+0x68>)
   1d442:	7913      	ldrb	r3, [r2, #4]
   1d444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d448:	7113      	strb	r3, [r2, #4]
}
   1d44a:	bd30      	pop	{r4, r5, pc}
			UART4_C2 &= ~UART_C2_TIE_MASK;
   1d44c:	78cb      	ldrb	r3, [r1, #3]
   1d44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d452:	70cb      	strb	r3, [r1, #3]
   1d454:	e7f4      	b.n	1d440 <UART4_RX_TX_IRQHandler+0x50>
   1d456:	bf00      	nop
   1d458:	400ea000 	.word	0x400ea000
   1d45c:	1fff0a64 	.word	0x1fff0a64
   1d460:	1fff45c4 	.word	0x1fff45c4

0001d464 <rawRx>:
		rawTx(ch);
}

static uint8_t rawRx(uint8_t *ch)
{
	if(buffers.rx.read == buffers.rx.wrote)
   1d464:	4a09      	ldr	r2, [pc, #36]	; (1d48c <rawRx+0x28>)
   1d466:	e9d2 3103 	ldrd	r3, r1, [r2, #12]
   1d46a:	428b      	cmp	r3, r1
   1d46c:	d00c      	beq.n	1d488 <rawRx+0x24>
		return 0;

	*ch = buffers.rx.buffer[buffers.rx.read];
   1d46e:	6951      	ldr	r1, [r2, #20]
   1d470:	5cc9      	ldrb	r1, [r1, r3]
   1d472:	7001      	strb	r1, [r0, #0]
	buffers.rx.read = (buffers.rx.read + 1) % BUFFER_SIZE;	// Move ring buffer index
   1d474:	3301      	adds	r3, #1
   1d476:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d47a:	60d3      	str	r3, [r2, #12]
	available--;
   1d47c:	4a04      	ldr	r2, [pc, #16]	; (1d490 <rawRx+0x2c>)
   1d47e:	6813      	ldr	r3, [r2, #0]
   1d480:	3b01      	subs	r3, #1
   1d482:	6013      	str	r3, [r2, #0]

	return 1;
   1d484:	2001      	movs	r0, #1
   1d486:	4770      	bx	lr
		return 0;
   1d488:	2000      	movs	r0, #0
}
   1d48a:	4770      	bx	lr
   1d48c:	1fff0aa0 	.word	0x1fff0aa0
   1d490:	1fff4dd4 	.word	0x1fff4dd4

0001d494 <rx>:

static uint8_t rx(uint8_t *ch)
{
	if(wlanState != WLAN_DATA_MODE)
   1d494:	4b03      	ldr	r3, [pc, #12]	; (1d4a4 <rx+0x10>)
   1d496:	7e1b      	ldrb	r3, [r3, #24]
   1d498:	2b02      	cmp	r3, #2
   1d49a:	d100      	bne.n	1d49e <rx+0xa>
		return 0;

	return rawRx(ch);
   1d49c:	e7e2      	b.n	1d464 <rawRx>
}
   1d49e:	2000      	movs	r0, #0
   1d4a0:	4770      	bx	lr
   1d4a2:	bf00      	nop
   1d4a4:	1fff0aa0 	.word	0x1fff0aa0

0001d4a8 <bytesAvailable>:
	enable_irq(INT_UART0_RX_TX-16);
}

static uint32_t bytesAvailable()
{
	return available;
   1d4a8:	4b01      	ldr	r3, [pc, #4]	; (1d4b0 <bytesAvailable+0x8>)
   1d4aa:	6818      	ldr	r0, [r3, #0]
}
   1d4ac:	4770      	bx	lr
   1d4ae:	bf00      	nop
   1d4b0:	1fff4dd4 	.word	0x1fff4dd4

0001d4b4 <clearBuffers>:
{
   1d4b4:	b508      	push	{r3, lr}
	disable_irq(INT_UART0_RX_TX-16);
   1d4b6:	202d      	movs	r0, #45	; 0x2d
   1d4b8:	f007 fe6e 	bl	25198 <disable_irq>
	available         = 0;
   1d4bc:	4a06      	ldr	r2, [pc, #24]	; (1d4d8 <clearBuffers+0x24>)
   1d4be:	2300      	movs	r3, #0
   1d4c0:	6013      	str	r3, [r2, #0]
	buffers.rx.read   = 0;
   1d4c2:	4a06      	ldr	r2, [pc, #24]	; (1d4dc <clearBuffers+0x28>)
	enable_irq(INT_UART0_RX_TX-16);
   1d4c4:	202d      	movs	r0, #45	; 0x2d
	buffers.rx.wrote  = 0;
   1d4c6:	e9c2 3303 	strd	r3, r3, [r2, #12]
	buffers.tx.wrote  = 0;
   1d4ca:	e9c2 3300 	strd	r3, r3, [r2]
}
   1d4ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	enable_irq(INT_UART0_RX_TX-16);
   1d4d2:	f007 be13 	b.w	250fc <enable_irq>
   1d4d6:	bf00      	nop
   1d4d8:	1fff4dd4 	.word	0x1fff4dd4
   1d4dc:	1fff0aa0 	.word	0x1fff0aa0

0001d4e0 <deInit>:
	SIM_SCGC4 &= ~(SIM_SCGC4_UART0_MASK);
   1d4e0:	4910      	ldr	r1, [pc, #64]	; (1d524 <deInit+0x44>)
   1d4e2:	f241 0234 	movw	r2, #4148	; 0x1034
{
   1d4e6:	b510      	push	{r4, lr}
	SIM_SCGC4 &= ~(SIM_SCGC4_UART0_MASK);
   1d4e8:	588b      	ldr	r3, [r1, r2]
   1d4ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1d4ee:	508b      	str	r3, [r1, r2]
	HAL.IOs->pins->WIRELESS_RX.configuration.GPIO_Mode = GPIO_Mode_IN;
   1d4f0:	4b0d      	ldr	r3, [pc, #52]	; (1d528 <deInit+0x48>)
   1d4f2:	68dc      	ldr	r4, [r3, #12]
   1d4f4:	6860      	ldr	r0, [r4, #4]
   1d4f6:	2308      	movs	r3, #8
   1d4f8:	f880 347d 	strb.w	r3, [r0, #1149]	; 0x47d
	HAL.IOs->pins->WIRELESS_TX.configuration.GPIO_Mode = GPIO_Mode_IN;
   1d4fc:	f880 345d 	strb.w	r3, [r0, #1117]	; 0x45d
	HAL.IOs->config->set(&HAL.IOs->pins->WIRELESS_RX);
   1d500:	6823      	ldr	r3, [r4, #0]
   1d502:	f500 608d 	add.w	r0, r0, #1128	; 0x468
   1d506:	681b      	ldr	r3, [r3, #0]
   1d508:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->WIRELESS_TX);
   1d50a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d50e:	681b      	ldr	r3, [r3, #0]
   1d510:	f500 6089 	add.w	r0, r0, #1096	; 0x448
   1d514:	4798      	blx	r3
	disable_irq(INT_UART0_RX_TX-16);
   1d516:	202d      	movs	r0, #45	; 0x2d
   1d518:	f007 fe3e 	bl	25198 <disable_irq>
}
   1d51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clearBuffers();
   1d520:	e7c8      	b.n	1d4b4 <clearBuffers>
   1d522:	bf00      	nop
   1d524:	40047000 	.word	0x40047000
   1d528:	00029d1c 	.word	0x00029d1c

0001d52c <init>:
	HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED6);
   1d52c:	4b1f      	ldr	r3, [pc, #124]	; (1d5ac <init+0x80>)
{
   1d52e:	b510      	push	{r4, lr}
	HAL.IOs->config->toOutput(&HAL.IOs->pins->MIXED6);
   1d530:	68dc      	ldr	r4, [r3, #12]
   1d532:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d536:	68db      	ldr	r3, [r3, #12]
   1d538:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
   1d53c:	4798      	blx	r3
	HAL.IOs->config->setLow(&HAL.IOs->pins->MIXED6);
   1d53e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d542:	699b      	ldr	r3, [r3, #24]
   1d544:	f500 60f1 	add.w	r0, r0, #1928	; 0x788
   1d548:	4798      	blx	r3
	SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   1d54a:	4919      	ldr	r1, [pc, #100]	; (1d5b0 <init+0x84>)
	HAL.IOs->pins->WIRELESS_RX.configuration.GPIO_Mode = GPIO_Mode_AF3;
   1d54c:	6860      	ldr	r0, [r4, #4]
	SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   1d54e:	f241 0234 	movw	r2, #4148	; 0x1034
	HAL.IOs->config->set(&HAL.IOs->pins->WIRELESS_RX);
   1d552:	f500 608d 	add.w	r0, r0, #1128	; 0x468
	SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   1d556:	588b      	ldr	r3, [r1, r2]
   1d558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1d55c:	508b      	str	r3, [r1, r2]
	HAL.IOs->pins->WIRELESS_RX.configuration.GPIO_Mode = GPIO_Mode_AF3;
   1d55e:	2303      	movs	r3, #3
   1d560:	7543      	strb	r3, [r0, #21]
	HAL.IOs->pins->WIRELESS_TX.configuration.GPIO_Mode = GPIO_Mode_AF3;
   1d562:	f800 3c0b 	strb.w	r3, [r0, #-11]
	HAL.IOs->config->set(&HAL.IOs->pins->WIRELESS_RX);
   1d566:	6823      	ldr	r3, [r4, #0]
   1d568:	681b      	ldr	r3, [r3, #0]
   1d56a:	4798      	blx	r3
	HAL.IOs->config->set(&HAL.IOs->pins->WIRELESS_TX);
   1d56c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d570:	681b      	ldr	r3, [r3, #0]
   1d572:	f500 6089 	add.w	r0, r0, #1096	; 0x448
   1d576:	4798      	blx	r3
	UART_C2_REG(UART0_BASE_PTR) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   1d578:	4b0e      	ldr	r3, [pc, #56]	; (1d5b4 <init+0x88>)
   1d57a:	78da      	ldrb	r2, [r3, #3]
   1d57c:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
   1d580:	70da      	strb	r2, [r3, #3]
	UART_C1_REG(UART0_BASE_PTR) = 0;
   1d582:	2200      	movs	r2, #0
   1d584:	709a      	strb	r2, [r3, #2]
	ubd = (CPU_BUS_CLK_HZ / 16) / (WLAN.baudRate);
   1d586:	4a0c      	ldr	r2, [pc, #48]	; (1d5b8 <init+0x8c>)
   1d588:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   1d58a:	4a0c      	ldr	r2, [pc, #48]	; (1d5bc <init+0x90>)
   1d58c:	fbb2 f2f1 	udiv	r2, r2, r1
	UART_BDH_REG(UART0_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1d590:	f3c2 2104 	ubfx	r1, r2, #8, #5
	UART_BDL_REG(UART0_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1d594:	b2d2      	uxtb	r2, r2
	UART_BDH_REG(UART0_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1d596:	7019      	strb	r1, [r3, #0]
	UART_BDL_REG(UART0_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1d598:	705a      	strb	r2, [r3, #1]
	UART_C2_REG(UART0_BASE_PTR) |= (UART_C2_TE_MASK | UART_C2_RE_MASK | UART_C2_RIE_MASK);
   1d59a:	78da      	ldrb	r2, [r3, #3]
   1d59c:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
   1d5a0:	70da      	strb	r2, [r3, #3]
}
   1d5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	enable_irq(INT_UART0_RX_TX-16);
   1d5a6:	202d      	movs	r0, #45	; 0x2d
   1d5a8:	f007 bda8 	b.w	250fc <enable_irq>
   1d5ac:	00029d1c 	.word	0x00029d1c
   1d5b0:	40047000 	.word	0x40047000
   1d5b4:	4006a000 	.word	0x4006a000
   1d5b8:	1fff0aa0 	.word	0x1fff0aa0
   1d5bc:	002dc6c0 	.word	0x002dc6c0

0001d5c0 <rawTx>:
	if(wlanState == WLAN_INIT_CMD_MODE)
   1d5c0:	4a07      	ldr	r2, [pc, #28]	; (1d5e0 <rawTx+0x20>)
   1d5c2:	7e13      	ldrb	r3, [r2, #24]
   1d5c4:	b15b      	cbz	r3, 1d5de <rawTx+0x1e>
	buffers.tx.buffer[buffers.tx.wrote] = ch;
   1d5c6:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   1d5ca:	54c8      	strb	r0, [r1, r3]
	buffers.tx.wrote = (buffers.tx.wrote + 1) % BUFFER_SIZE;	// Move ring buffer index
   1d5cc:	3301      	adds	r3, #1
   1d5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d5d2:	6053      	str	r3, [r2, #4]
	UART0_C2 |= UART_C2_TIE_MASK;
   1d5d4:	4a03      	ldr	r2, [pc, #12]	; (1d5e4 <rawTx+0x24>)
   1d5d6:	78d3      	ldrb	r3, [r2, #3]
   1d5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d5dc:	70d3      	strb	r3, [r2, #3]
}
   1d5de:	4770      	bx	lr
   1d5e0:	1fff0aa0 	.word	0x1fff0aa0
   1d5e4:	4006a000 	.word	0x4006a000

0001d5e8 <rxN>:
	if(available < number)
   1d5e8:	4b09      	ldr	r3, [pc, #36]	; (1d610 <rxN+0x28>)
   1d5ea:	681b      	ldr	r3, [r3, #0]
   1d5ec:	4299      	cmp	r1, r3
{
   1d5ee:	b570      	push	{r4, r5, r6, lr}
   1d5f0:	4606      	mov	r6, r0
   1d5f2:	460c      	mov	r4, r1
	if(available < number)
   1d5f4:	d809      	bhi.n	1d60a <rxN+0x22>
	for(int32_t i = 0; i < number; i++)
   1d5f6:	2500      	movs	r5, #0
   1d5f8:	42a5      	cmp	r5, r4
   1d5fa:	db01      	blt.n	1d600 <rxN+0x18>
   1d5fc:	2001      	movs	r0, #1
}
   1d5fe:	bd70      	pop	{r4, r5, r6, pc}
		rx(&str[i]);
   1d600:	1970      	adds	r0, r6, r5
   1d602:	f7ff ff47 	bl	1d494 <rx>
	for(int32_t i = 0; i < number; i++)
   1d606:	3501      	adds	r5, #1
   1d608:	e7f6      	b.n	1d5f8 <rxN+0x10>
		return 0;
   1d60a:	2000      	movs	r0, #0
   1d60c:	e7f7      	b.n	1d5fe <rxN+0x16>
   1d60e:	bf00      	nop
   1d610:	1fff4dd4 	.word	0x1fff4dd4

0001d614 <UART0_RX_TX_IRQHandler_WLAN>:
{
   1d614:	b530      	push	{r4, r5, lr}
	uint32_t status = UART0_S1;
   1d616:	4a1a      	ldr	r2, [pc, #104]	; (1d680 <UART0_RX_TX_IRQHandler_WLAN+0x6c>)
   1d618:	7913      	ldrb	r3, [r2, #4]
	if(status & UART_S1_RDRF_MASK)
   1d61a:	0699      	lsls	r1, r3, #26
	uint32_t status = UART0_S1;
   1d61c:	b2dc      	uxtb	r4, r3
	if(status & UART_S1_RDRF_MASK)
   1d61e:	d514      	bpl.n	1d64a <UART0_RX_TX_IRQHandler_WLAN+0x36>
		buffers.rx.buffer[buffers.rx.wrote] = UART0_D;
   1d620:	4918      	ldr	r1, [pc, #96]	; (1d684 <UART0_RX_TX_IRQHandler_WLAN+0x70>)
   1d622:	79d0      	ldrb	r0, [r2, #7]
   1d624:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d628:	b2c0      	uxtb	r0, r0
   1d62a:	54e8      	strb	r0, [r5, r3]
		buffers.rx.wrote = (buffers.rx.wrote + 1) % BUFFER_SIZE;
   1d62c:	3301      	adds	r3, #1
   1d62e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d632:	610b      	str	r3, [r1, #16]
		available++;
   1d634:	4914      	ldr	r1, [pc, #80]	; (1d688 <UART0_RX_TX_IRQHandler_WLAN+0x74>)
   1d636:	680b      	ldr	r3, [r1, #0]
   1d638:	3301      	adds	r3, #1
   1d63a:	600b      	str	r3, [r1, #0]
		UART0_TimeoutTimer = UART_TIMEOUT_VALUE;
   1d63c:	4b13      	ldr	r3, [pc, #76]	; (1d68c <UART0_RX_TX_IRQHandler_WLAN+0x78>)
   1d63e:	2105      	movs	r1, #5
   1d640:	6019      	str	r1, [r3, #0]
		UART0_S1 &= ~(UART_S1_RDRF_MASK); // Zurücksetzen InterruptFlag
   1d642:	7913      	ldrb	r3, [r2, #4]
   1d644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d648:	7113      	strb	r3, [r2, #4]
	if(status & UART_S1_TDRE_MASK)
   1d64a:	0623      	lsls	r3, r4, #24
   1d64c:	d512      	bpl.n	1d674 <UART0_RX_TX_IRQHandler_WLAN+0x60>
		if(buffers.tx.read != buffers.tx.wrote)
   1d64e:	4a0d      	ldr	r2, [pc, #52]	; (1d684 <UART0_RX_TX_IRQHandler_WLAN+0x70>)
   1d650:	e9d2 3100 	ldrd	r3, r1, [r2]
   1d654:	428b      	cmp	r3, r1
   1d656:	490a      	ldr	r1, [pc, #40]	; (1d680 <UART0_RX_TX_IRQHandler_WLAN+0x6c>)
   1d658:	d00d      	beq.n	1d676 <UART0_RX_TX_IRQHandler_WLAN+0x62>
			UART0_D	= buffers.tx.buffer[buffers.tx.read];
   1d65a:	6890      	ldr	r0, [r2, #8]
   1d65c:	5cc0      	ldrb	r0, [r0, r3]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d65e:	3301      	adds	r3, #1
			UART0_D	= buffers.tx.buffer[buffers.tx.read];
   1d660:	b2c0      	uxtb	r0, r0
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d662:	f3c3 0309 	ubfx	r3, r3, #0, #10
			UART0_D	= buffers.tx.buffer[buffers.tx.read];
   1d666:	71c8      	strb	r0, [r1, #7]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1d668:	6013      	str	r3, [r2, #0]
		UART0_S1 &= ~(UART_S1_TDRE_MASK); // Zurücksetzen InterruptFlag
   1d66a:	4a05      	ldr	r2, [pc, #20]	; (1d680 <UART0_RX_TX_IRQHandler_WLAN+0x6c>)
   1d66c:	7913      	ldrb	r3, [r2, #4]
   1d66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d672:	7113      	strb	r3, [r2, #4]
}
   1d674:	bd30      	pop	{r4, r5, pc}
			UART0_C2 &= ~UART_C2_TIE_MASK;
   1d676:	78cb      	ldrb	r3, [r1, #3]
   1d678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d67c:	70cb      	strb	r3, [r1, #3]
   1d67e:	e7f4      	b.n	1d66a <UART0_RX_TX_IRQHandler_WLAN+0x56>
   1d680:	4006a000 	.word	0x4006a000
   1d684:	1fff0aa0 	.word	0x1fff0aa0
   1d688:	1fff4dd4 	.word	0x1fff4dd4
   1d68c:	1fff656c 	.word	0x1fff656c

0001d690 <enableWLANCommandMode>:
		return (wlanState == WLAN_INIT_CMD_MODE)? false:true;
	}
}

void enableWLANCommandMode()
{	/* To enable command mode, the escape character (default: $) needs to be sent 3 times.
   1d690:	b510      	push	{r4, lr}
	 * Additionally, both before and after that sequence there should be 250ms without data sent to the module
	 * Since the configuration mode is supposed to be used as a simple testing tool,
	 * there is no check for the time span before the write. If the switching fails due to that,
	 * an error will be returned upon attempted command execution, just try to reenter command mode then.
	 */
	wlanState = WLAN_CMD_MODE; // Block external write sources
   1d692:	4c0a      	ldr	r4, [pc, #40]	; (1d6bc <enableWLANCommandMode+0x2c>)
   1d694:	2301      	movs	r3, #1
   1d696:	7623      	strb	r3, [r4, #24]

	clearBuffers();
   1d698:	f7ff ff0c 	bl	1d4b4 <clearBuffers>
	rawTx('$'); // txN doesn't work, as WLAN_CMD_MODE prevents tx (which txN calls) from writing to the buffer)
   1d69c:	2024      	movs	r0, #36	; 0x24
   1d69e:	f7ff ff8f 	bl	1d5c0 <rawTx>
	rawTx('$');
   1d6a2:	2024      	movs	r0, #36	; 0x24
   1d6a4:	f7ff ff8c 	bl	1d5c0 <rawTx>
	rawTx('$');
   1d6a8:	2024      	movs	r0, #36	; 0x24
   1d6aa:	f7ff ff89 	bl	1d5c0 <rawTx>
	wlanState = WLAN_INIT_CMD_MODE; // Block all writes
   1d6ae:	2300      	movs	r3, #0
   1d6b0:	7623      	strb	r3, [r4, #24]
	cmdEnabledTime = systick_getTick();
   1d6b2:	f7fe fe3f 	bl	1c334 <systick_getTick>
   1d6b6:	4b02      	ldr	r3, [pc, #8]	; (1d6c0 <enableWLANCommandMode+0x30>)
   1d6b8:	6058      	str	r0, [r3, #4]
}
   1d6ba:	bd10      	pop	{r4, pc}
   1d6bc:	1fff0aa0 	.word	0x1fff0aa0
   1d6c0:	1fff4dd4 	.word	0x1fff4dd4

0001d6c4 <checkCmdModeEnabled>:

uint32_t checkCmdModeEnabled()
{
   1d6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(wlanState == WLAN_CMD_MODE)
   1d6c6:	4c11      	ldr	r4, [pc, #68]	; (1d70c <checkCmdModeEnabled+0x48>)
   1d6c8:	7e20      	ldrb	r0, [r4, #24]
   1d6ca:	2801      	cmp	r0, #1
   1d6cc:	4625      	mov	r5, r4
   1d6ce:	d011      	beq.n	1d6f4 <checkCmdModeEnabled+0x30>
		return true;
	else if(wlanState == WLAN_DATA_MODE)
   1d6d0:	2802      	cmp	r0, #2
   1d6d2:	d101      	bne.n	1d6d8 <checkCmdModeEnabled+0x14>
			return true;
		}
		else
		{	// Unexpected answer - going back to data mode
			wlanState = WLAN_DATA_MODE;
			return false;
   1d6d4:	2000      	movs	r0, #0
   1d6d6:	e00d      	b.n	1d6f4 <checkCmdModeEnabled+0x30>
	uint8_t reply[4] = { 0 };	// expected reply: {'C','M','D'}, we're appending \0 so we have a NULL-terminated string that we can use in strcmp()
   1d6d8:	2300      	movs	r3, #0
	if(rxN(reply, 3))
   1d6da:	2103      	movs	r1, #3
   1d6dc:	a801      	add	r0, sp, #4
	uint8_t reply[4] = { 0 };	// expected reply: {'C','M','D'}, we're appending \0 so we have a NULL-terminated string that we can use in strcmp()
   1d6de:	9301      	str	r3, [sp, #4]
	if(rxN(reply, 3))
   1d6e0:	f7ff ff82 	bl	1d5e8 <rxN>
   1d6e4:	b140      	cbz	r0, 1d6f8 <checkCmdModeEnabled+0x34>
		if(strcmp((const char *)reply, "CMD") == 0)
   1d6e6:	490a      	ldr	r1, [pc, #40]	; (1d710 <checkCmdModeEnabled+0x4c>)
   1d6e8:	a801      	add	r0, sp, #4
   1d6ea:	f009 fced 	bl	270c8 <strcmp>
   1d6ee:	b950      	cbnz	r0, 1d706 <checkCmdModeEnabled+0x42>
			wlanState = WLAN_CMD_MODE;
   1d6f0:	2001      	movs	r0, #1
   1d6f2:	7620      	strb	r0, [r4, #24]
		else
		{	// Not enough time passed, we're not in command mode yet but we're still giving the chip time
			return false;
		}
	}
}
   1d6f4:	b003      	add	sp, #12
   1d6f6:	bd30      	pop	{r4, r5, pc}
		if(timeSince(cmdEnabledTime) > 350)	// 250 ms from chip spec + 100ms, just to be safe
   1d6f8:	4b06      	ldr	r3, [pc, #24]	; (1d714 <checkCmdModeEnabled+0x50>)
   1d6fa:	6858      	ldr	r0, [r3, #4]
   1d6fc:	f7fe fe2a 	bl	1c354 <timeSince>
   1d700:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   1d704:	d9e6      	bls.n	1d6d4 <checkCmdModeEnabled+0x10>
			wlanState = WLAN_DATA_MODE;
   1d706:	2302      	movs	r3, #2
   1d708:	762b      	strb	r3, [r5, #24]
   1d70a:	e7e3      	b.n	1d6d4 <checkCmdModeEnabled+0x10>
   1d70c:	1fff0aa0 	.word	0x1fff0aa0
   1d710:	0002b23f 	.word	0x0002b23f
   1d714:	1fff4dd4 	.word	0x1fff4dd4

0001d718 <checkReadyToSend>:
{
   1d718:	b508      	push	{r3, lr}
	if(checkCmdModeEnabled())
   1d71a:	f7ff ffd3 	bl	1d6c4 <checkCmdModeEnabled>
   1d71e:	b928      	cbnz	r0, 1d72c <checkReadyToSend+0x14>
		return (wlanState == WLAN_INIT_CMD_MODE)? false:true;
   1d720:	4b03      	ldr	r3, [pc, #12]	; (1d730 <checkReadyToSend+0x18>)
   1d722:	7e18      	ldrb	r0, [r3, #24]
   1d724:	3800      	subs	r0, #0
   1d726:	bf18      	it	ne
   1d728:	2001      	movne	r0, #1
}
   1d72a:	bd08      	pop	{r3, pc}
		return false;
   1d72c:	2000      	movs	r0, #0
   1d72e:	e7fc      	b.n	1d72a <checkReadyToSend+0x12>
   1d730:	1fff0aa0 	.word	0x1fff0aa0

0001d734 <tx>:
{
   1d734:	b510      	push	{r4, lr}
   1d736:	4604      	mov	r4, r0
	if(checkReadyToSend())
   1d738:	f7ff ffee 	bl	1d718 <checkReadyToSend>
   1d73c:	b118      	cbz	r0, 1d746 <tx+0x12>
		rawTx(ch);
   1d73e:	4620      	mov	r0, r4
}
   1d740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rawTx(ch);
   1d744:	e73c      	b.n	1d5c0 <rawTx>
}
   1d746:	bd10      	pop	{r4, pc}

0001d748 <txN>:
{
   1d748:	b570      	push	{r4, r5, r6, lr}
   1d74a:	4606      	mov	r6, r0
   1d74c:	460d      	mov	r5, r1
	for(int32_t i = 0; i < number; i++)
   1d74e:	2400      	movs	r4, #0
   1d750:	42a5      	cmp	r5, r4
   1d752:	dc00      	bgt.n	1d756 <txN+0xe>
}
   1d754:	bd70      	pop	{r4, r5, r6, pc}
		tx(str[i]);
   1d756:	5d30      	ldrb	r0, [r6, r4]
   1d758:	f7ff ffec 	bl	1d734 <tx>
	for(int32_t i = 0; i < number; i++)
   1d75c:	3401      	adds	r4, #1
   1d75e:	e7f7      	b.n	1d750 <txN+0x8>

0001d760 <handleWLANCommand>:

uint32_t handleWLANCommand(BufferCommandTypedef cmd, uint32_t value)
{
	switch(cmd)
   1d760:	2801      	cmp	r0, #1
{
   1d762:	b570      	push	{r4, r5, r6, lr}
	switch(cmd)
   1d764:	d004      	beq.n	1d770 <handleWLANCommand+0x10>
   1d766:	2802      	cmp	r0, #2
   1d768:	d01c      	beq.n	1d7a4 <handleWLANCommand+0x44>
   1d76a:	b168      	cbz	r0, 1d788 <handleWLANCommand+0x28>
   1d76c:	2000      	movs	r0, #0
		cmdBufferSize = 0;
		break;
	}

	return 0;
}
   1d76e:	bd70      	pop	{r4, r5, r6, pc}
   1d770:	4b18      	ldr	r3, [pc, #96]	; (1d7d4 <handleWLANCommand+0x74>)
   1d772:	689a      	ldr	r2, [r3, #8]
	switch(cmd)
   1d774:	2400      	movs	r4, #0
			cmdBuffer[cmdBufferSize] = value & 0xFF;
   1d776:	f103 050c 	add.w	r5, r3, #12
		while((value & 0xFF) != CMDBUFFER_END_CHAR)
   1d77a:	f011 00ff 	ands.w	r0, r1, #255	; 0xff
   1d77e:	d106      	bne.n	1d78e <handleWLANCommand+0x2e>
   1d780:	2c00      	cmp	r4, #0
   1d782:	d0f4      	beq.n	1d76e <handleWLANCommand+0xe>
   1d784:	609a      	str	r2, [r3, #8]
   1d786:	e7f2      	b.n	1d76e <handleWLANCommand+0xe>
		cmdBufferSize = 0;
   1d788:	4b12      	ldr	r3, [pc, #72]	; (1d7d4 <handleWLANCommand+0x74>)
   1d78a:	6098      	str	r0, [r3, #8]
		break;
   1d78c:	e7ef      	b.n	1d76e <handleWLANCommand+0xe>
			if(cmdBufferSize == WLAN_CMD_BUFFER_SIZE)
   1d78e:	2a80      	cmp	r2, #128	; 0x80
   1d790:	d103      	bne.n	1d79a <handleWLANCommand+0x3a>
   1d792:	b104      	cbz	r4, 1d796 <handleWLANCommand+0x36>
   1d794:	609a      	str	r2, [r3, #8]
					return 1;
   1d796:	2001      	movs	r0, #1
   1d798:	e7e9      	b.n	1d76e <handleWLANCommand+0xe>
			cmdBuffer[cmdBufferSize] = value & 0xFF;
   1d79a:	5551      	strb	r1, [r2, r5]
			cmdBufferSize++;
   1d79c:	2401      	movs	r4, #1
			value >>= 8;
   1d79e:	0a09      	lsrs	r1, r1, #8
			cmdBufferSize++;
   1d7a0:	3201      	adds	r2, #1
   1d7a2:	e7ea      	b.n	1d77a <handleWLANCommand+0x1a>
		if(!checkCmdModeEnabled())
   1d7a4:	f7ff ff8e 	bl	1d6c4 <checkCmdModeEnabled>
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	d0f4      	beq.n	1d796 <handleWLANCommand+0x36>
   1d7ac:	4d0a      	ldr	r5, [pc, #40]	; (1d7d8 <handleWLANCommand+0x78>)
		for(uint32_t i = 0; i < cmdBufferSize; i++)
   1d7ae:	2400      	movs	r4, #0
   1d7b0:	f1a5 060c 	sub.w	r6, r5, #12
   1d7b4:	68b3      	ldr	r3, [r6, #8]
   1d7b6:	42a3      	cmp	r3, r4
   1d7b8:	d805      	bhi.n	1d7c6 <handleWLANCommand+0x66>
		rawTx('\r'); // End of command character
   1d7ba:	200d      	movs	r0, #13
   1d7bc:	f7ff ff00 	bl	1d5c0 <rawTx>
		cmdBufferSize = 0;
   1d7c0:	2000      	movs	r0, #0
   1d7c2:	60b0      	str	r0, [r6, #8]
		break;
   1d7c4:	e7d3      	b.n	1d76e <handleWLANCommand+0xe>
			rawTx(cmdBuffer[i]); // Can't use txN since its blocked from sending while in command mode
   1d7c6:	f815 0b01 	ldrb.w	r0, [r5], #1
   1d7ca:	f7ff fef9 	bl	1d5c0 <rawTx>
		for(uint32_t i = 0; i < cmdBufferSize; i++)
   1d7ce:	3401      	adds	r4, #1
   1d7d0:	e7f0      	b.n	1d7b4 <handleWLANCommand+0x54>
   1d7d2:	bf00      	nop
   1d7d4:	1fff4dd4 	.word	0x1fff4dd4
   1d7d8:	1fff4de0 	.word	0x1fff4de0

0001d7dc <getCMDReply>:

uint32_t getCMDReply()
{
   1d7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d7de:	2504      	movs	r5, #4
	uint8_t cmdReply;
	uint32_t result = 0;
   1d7e0:	2400      	movs	r4, #0

	for(int i = 0; i < 4; i++)
	{
		if(rawRx(&cmdReply) == 0)
   1d7e2:	f10d 0007 	add.w	r0, sp, #7
   1d7e6:	f7ff fe3d 	bl	1d464 <rawRx>
   1d7ea:	b908      	cbnz	r0, 1d7f0 <getCMDReply+0x14>
			cmdReply = 0;
   1d7ec:	f88d 0007 	strb.w	r0, [sp, #7]
		// First character is in the smallest byte of result
		result |= cmdReply << 24;
   1d7f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	for(int i = 0; i < 4; i++)
   1d7f4:	3d01      	subs	r5, #1
		result |= cmdReply << 24;
   1d7f6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
		result >>= 8;
   1d7fa:	ea4f 2414 	mov.w	r4, r4, lsr #8
	for(int i = 0; i < 4; i++)
   1d7fe:	d1f0      	bne.n	1d7e2 <getCMDReply+0x6>
	}

	return result;
}
   1d800:	4620      	mov	r0, r4
   1d802:	b003      	add	sp, #12
   1d804:	bd30      	pop	{r4, r5, pc}
   1d806:	bf00      	nop

0001d808 <init>:
};

static void init(void)
{
	// enable clock for FTM0
	SIM_SCGC6 |= SIM_SCGC6_FTM0_MASK;
   1d808:	4b2c      	ldr	r3, [pc, #176]	; (1d8bc <init+0xb4>)
   1d80a:	f241 013c 	movw	r1, #4156	; 0x103c
   1d80e:	585a      	ldr	r2, [r3, r1]
   1d810:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   1d814:	505a      	str	r2, [r3, r1]

	// enable clock for port D
	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
   1d816:	f241 0138 	movw	r1, #4152	; 0x1038
   1d81a:	585a      	ldr	r2, [r3, r1]
   1d81c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1d820:	505a      	str	r2, [r3, r1]

	// disable write protection
	FTM0_MODE |= FTM_MODE_WPDIS_MASK;
   1d822:	f5a3 4370 	sub.w	r3, r3, #61440	; 0xf000
   1d826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d828:	f042 0204 	orr.w	r2, r2, #4
   1d82c:	655a      	str	r2, [r3, #84]	; 0x54

	// FAULTM = 1 - Fault control is enabled for all channels,
	// FTMEN  = 1 - all registers are available for use with no restrictions.
	FTM0_MODE |= FTM_MODE_FAULTM_MASK | FTM_MODE_FTMEN_MASK;
   1d82e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d830:	f042 0261 	orr.w	r2, r2, #97	; 0x61
   1d834:	655a      	str	r2, [r3, #84]	; 0x54

	// setting for Center Aligned PWM in Combine Mode
	FTM0_MOD = TIMER_MAX;  // set PWM frequency
   1d836:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   1d83a:	609a      	str	r2, [r3, #8]
	FTM0_CNTIN = 0;        // CTNMAX = 1 - PWM update at counter in max. value
   1d83c:	2200      	movs	r2, #0
   1d83e:	64da      	str	r2, [r3, #76]	; 0x4c
	FTM0_SYNC |= FTM_SYNC_CNTMAX_MASK;
   1d840:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1d842:	f041 0102 	orr.w	r1, r1, #2
   1d846:	6599      	str	r1, [r3, #88]	; 0x58

	// SWSYNC = 1 - set PWM value update. This bit is cleared automatically.
	FTM0_SYNC |= FTM_SYNC_SWSYNC_MASK;
   1d848:	6d99      	ldr	r1, [r3, #88]	; 0x58
   1d84a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   1d84e:	6599      	str	r1, [r3, #88]	; 0x58

	// disable all channels outputs using the OUTPUT MASK feature
	FTM0_OUTMASK = FTM_OUTMASK_CH0OM_MASK | FTM_OUTMASK_CH1OM_MASK
   1d850:	21f3      	movs	r1, #243	; 0xf3
   1d852:	6619      	str	r1, [r3, #96]	; 0x60
	             | FTM_OUTMASK_CH6OM_MASK | FTM_OUTMASK_CH7OM_MASK;

	/* COMBINE = 1 - combine mode set, COMP = 1 - complementary PWM set,
	DTEN = 1 - deadtime enabled, SYNCEN = 1 - PWM update synchronization enabled,
	FAULTEN = 1 - fault control enabled */
	FTM0_COMBINE = FTM_COMBINE_SYNCEN0_MASK | FTM_COMBINE_DTEN0_MASK
   1d854:	491a      	ldr	r1, [pc, #104]	; (1d8c0 <init+0xb8>)
   1d856:	6659      	str	r1, [r3, #100]	; 0x64
	             | FTM_COMBINE_SYNCEN3_MASK | FTM_COMBINE_DTEN3_MASK
	             | FTM_COMBINE_COMP3_MASK   | FTM_COMBINE_COMBINE3_MASK;

	// initialize setting of value registers to  duty cycle
	FTM0_C0V = 0;
	FTM0_C1V = MAX_ARR_HALF;
   1d858:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	FTM0_C0V = 0;
   1d85c:	611a      	str	r2, [r3, #16]
	FTM0_C1V = MAX_ARR_HALF;
   1d85e:	6199      	str	r1, [r3, #24]
	FTM0_C4V = 0;
   1d860:	631a      	str	r2, [r3, #48]	; 0x30
	FTM0_C5V = MAX_ARR_HALF;
   1d862:	6399      	str	r1, [r3, #56]	; 0x38
	FTM0_C6V = 0;
   1d864:	641a      	str	r2, [r3, #64]	; 0x40
	FTM0_C7V = MAX_ARR_HALF;
   1d866:	6499      	str	r1, [r3, #72]	; 0x48

	// set channel mode to generate positive PWM
	FTM0_C0SC |= FTM_CnSC_ELSB_MASK;
   1d868:	68d9      	ldr	r1, [r3, #12]
   1d86a:	f041 0108 	orr.w	r1, r1, #8
   1d86e:	60d9      	str	r1, [r3, #12]
	FTM0_C1SC |= FTM_CnSC_ELSB_MASK;
   1d870:	6959      	ldr	r1, [r3, #20]
   1d872:	f041 0108 	orr.w	r1, r1, #8
   1d876:	6159      	str	r1, [r3, #20]
	FTM0_C4SC |= FTM_CnSC_ELSB_MASK;
   1d878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1d87a:	f041 0108 	orr.w	r1, r1, #8
   1d87e:	62d9      	str	r1, [r3, #44]	; 0x2c
	FTM0_C5SC |= FTM_CnSC_ELSB_MASK;
   1d880:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1d882:	f041 0108 	orr.w	r1, r1, #8
   1d886:	6359      	str	r1, [r3, #52]	; 0x34
	FTM0_C6SC |= FTM_CnSC_ELSB_MASK;
   1d888:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1d88a:	f041 0108 	orr.w	r1, r1, #8
   1d88e:	63d9      	str	r1, [r3, #60]	; 0x3c
	FTM0_C7SC |= FTM_CnSC_ELSB_MASK;
   1d890:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1d892:	f041 0108 	orr.w	r1, r1, #8
   1d896:	6459      	str	r1, [r3, #68]	; 0x44

	// enable loading of the MOD, CNTIN, and CV registers with the values of their write buffers
	FTM0_PWMLOAD = FTM_PWMLOAD_LDOK_MASK;
   1d898:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d89c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98

	// enable the generation of the trigger when the FTM counter is equal to the CNTIN register
	FTM0_EXTTRIG |= FTM_EXTTRIG_INITTRIGEN_MASK;
   1d8a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   1d8a2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   1d8a6:	66d9      	str	r1, [r3, #108]	; 0x6c
	FTM0_MODE |= FTM_MODE_INIT_MASK;
   1d8a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
   1d8aa:	f041 0102 	orr.w	r1, r1, #2
   1d8ae:	6559      	str	r1, [r3, #84]	; 0x54

	// set system clock as source for FTM0 (CLKS[1:0] = 01)
	FTM0_SC |= FTM_SC_CLKS(1); // Periodendauer 166,66us
   1d8b0:	6819      	ldr	r1, [r3, #0]
   1d8b2:	f041 0108 	orr.w	r1, r1, #8
   1d8b6:	6019      	str	r1, [r3, #0]




	// enable PWM outputs of FTM0
	FTM0_OUTMASK = 0;
   1d8b8:	661a      	str	r2, [r3, #96]	; 0x60
}
   1d8ba:	4770      	bx	lr
   1d8bc:	40047000 	.word	0x40047000
   1d8c0:	33330033 	.word	0x33330033

0001d8c4 <deInit>:

static void deInit(void)
{
	SIM_SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
   1d8c4:	4903      	ldr	r1, [pc, #12]	; (1d8d4 <deInit+0x10>)
   1d8c6:	f241 023c 	movw	r2, #4156	; 0x103c
   1d8ca:	588b      	ldr	r3, [r1, r2]
   1d8cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d8d0:	508b      	str	r3, [r1, r2]
}
   1d8d2:	4770      	bx	lr
   1d8d4:	40047000 	.word	0x40047000

0001d8d8 <setDuty>:

static void setDuty(timer_channel channel, uint16_t duty)
{
	switch(channel) {
   1d8d8:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
   1d8dc:	bf28      	it	cs
   1d8de:	f44f 51fa 	movcs.w	r1, #8000	; 0x1f40
   1d8e2:	2801      	cmp	r0, #1
   1d8e4:	4b06      	ldr	r3, [pc, #24]	; (1d900 <setDuty+0x28>)
   1d8e6:	d003      	beq.n	1d8f0 <setDuty+0x18>
   1d8e8:	2802      	cmp	r0, #2
   1d8ea:	d007      	beq.n	1d8fc <setDuty+0x24>
	case TIMER_CHANNEL_3:
		FTM0_C5V = (duty < TIMER_MAX) ? duty : TIMER_MAX;
		break;
	case TIMER_CHANNEL_1:
	default:
		FTM0_C7V = (duty < TIMER_MAX) ? duty : TIMER_MAX;
   1d8ec:	6499      	str	r1, [r3, #72]	; 0x48
		break;
   1d8ee:	e000      	b.n	1d8f2 <setDuty+0x1a>
		FTM0_C1V = (duty < TIMER_MAX) ? duty : TIMER_MAX;
   1d8f0:	6199      	str	r1, [r3, #24]
	}
	FTM0_PWMLOAD = FTM_PWMLOAD_LDOK_MASK;
   1d8f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d8f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
   1d8fa:	4770      	bx	lr
		FTM0_C5V = (duty < TIMER_MAX) ? duty : TIMER_MAX;
   1d8fc:	6399      	str	r1, [r3, #56]	; 0x38
		break;
   1d8fe:	e7f8      	b.n	1d8f2 <setDuty+0x1a>
   1d900:	40038000 	.word	0x40038000

0001d904 <getDuty>:

static uint16_t getDuty(timer_channel channel)
{
	uint16_t duty = 0;
	switch(channel) {
   1d904:	2801      	cmp	r0, #1
   1d906:	4b07      	ldr	r3, [pc, #28]	; (1d924 <getDuty+0x20>)
   1d908:	d004      	beq.n	1d914 <getDuty+0x10>
   1d90a:	2802      	cmp	r0, #2
   1d90c:	d007      	beq.n	1d91e <getDuty+0x1a>
	case TIMER_CHANNEL_3:
		duty = (FTM0_C5V - FTM0_C4V);
		break;
	case TIMER_CHANNEL_1:
	default:
		duty = (FTM0_C7V - FTM0_C6V);
   1d90e:	6c98      	ldr	r0, [r3, #72]	; 0x48
   1d910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d912:	e001      	b.n	1d918 <getDuty+0x14>
		duty = (FTM0_C1V - FTM0_C0V);
   1d914:	6998      	ldr	r0, [r3, #24]
   1d916:	691b      	ldr	r3, [r3, #16]
		duty = (FTM0_C7V - FTM0_C6V);
   1d918:	1ac0      	subs	r0, r0, r3
   1d91a:	b280      	uxth	r0, r0
		break;
	}
	return duty;
}
   1d91c:	4770      	bx	lr
		duty = (FTM0_C5V - FTM0_C4V);
   1d91e:	6b98      	ldr	r0, [r3, #56]	; 0x38
   1d920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d922:	e7f9      	b.n	1d918 <getDuty+0x14>
   1d924:	40038000 	.word	0x40038000

0001d928 <rx>:
	}
}

static uint8_t rx(uint8_t *ch)
{
	if(buffers.rx.read == buffers.rx.wrote)
   1d928:	4a09      	ldr	r2, [pc, #36]	; (1d950 <rx+0x28>)
   1d92a:	e9d2 3103 	ldrd	r3, r1, [r2, #12]
   1d92e:	428b      	cmp	r3, r1
   1d930:	d00c      	beq.n	1d94c <rx+0x24>
		return 0;

	*ch = buffers.rx.buffer[buffers.rx.read];
   1d932:	6951      	ldr	r1, [r2, #20]
   1d934:	5cc9      	ldrb	r1, [r1, r3]
   1d936:	7001      	strb	r1, [r0, #0]
	buffers.rx.read = (buffers.rx.read + 1) % BUFFER_SIZE;
   1d938:	3301      	adds	r3, #1
   1d93a:	f003 031f 	and.w	r3, r3, #31
   1d93e:	60d3      	str	r3, [r2, #12]
	available--;
   1d940:	4a04      	ldr	r2, [pc, #16]	; (1d954 <rx+0x2c>)
   1d942:	6813      	ldr	r3, [r2, #0]
   1d944:	3b01      	subs	r3, #1
   1d946:	6013      	str	r3, [r2, #0]

	return 1;
   1d948:	2001      	movs	r0, #1
   1d94a:	4770      	bx	lr
		return 0;
   1d94c:	2000      	movs	r0, #0
}
   1d94e:	4770      	bx	lr
   1d950:	1fff0af0 	.word	0x1fff0af0
   1d954:	1fff566c 	.word	0x1fff566c

0001d958 <bytesAvailable>:
	}
}

static uint32_t bytesAvailable()
{
	return available;
   1d958:	4b01      	ldr	r3, [pc, #4]	; (1d960 <bytesAvailable+0x8>)
   1d95a:	6818      	ldr	r0, [r3, #0]
}
   1d95c:	4770      	bx	lr
   1d95e:	bf00      	nop
   1d960:	1fff566c 	.word	0x1fff566c

0001d964 <init>:
	register uint16_t ubd = (CPU_BUS_CLK_HZ / 16) / UART.rxtx.baudRate;
   1d964:	4a40      	ldr	r2, [pc, #256]	; (1da68 <init+0x104>)
{
   1d966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	register uint16_t ubd = (CPU_BUS_CLK_HZ / 16) / UART.rxtx.baudRate;
   1d968:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1d96a:	4d40      	ldr	r5, [pc, #256]	; (1da6c <init+0x108>)
   1d96c:	fbb5 f5f3 	udiv	r5, r5, r3
	switch(UART.pinout) {
   1d970:	4b3f      	ldr	r3, [pc, #252]	; (1da70 <init+0x10c>)
   1d972:	7e10      	ldrb	r0, [r2, #24]
   1d974:	68dc      	ldr	r4, [r3, #12]
   1d976:	e9d4 1300 	ldrd	r1, r3, [r4]
   1d97a:	2801      	cmp	r0, #1
   1d97c:	f3c5 2704 	ubfx	r7, r5, #8, #5
   1d980:	6809      	ldr	r1, [r1, #0]
   1d982:	b2ed      	uxtb	r5, r5
   1d984:	d12a      	bne.n	1d9dc <init+0x78>
		HAL.IOs->pins->DIO10.configuration.GPIO_Mode  = GPIO_Mode_AF3;  // TxD (DIO10)
   1d986:	2203      	movs	r2, #3
   1d988:	f883 21bd 	strb.w	r2, [r3, #445]	; 0x1bd
		HAL.IOs->pins->DIO11.configuration.GPIO_Mode  = GPIO_Mode_AF3;  // RxD (DIO11)
   1d98c:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
		HAL.IOs->pins->DIO10.configuration.GPIO_OType = GPIO_OType_OD;  // TxD as open drain output
   1d990:	f883 01bf 	strb.w	r0, [r3, #447]	; 0x1bf
		HAL.IOs->pins->DIO11.configuration.GPIO_PuPd  = GPIO_PuPd_UP;   // RxD with pull-up resistor
   1d994:	f883 01e0 	strb.w	r0, [r3, #480]	; 0x1e0
		HAL.IOs->config->set(&HAL.IOs->pins->DIO10);
   1d998:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
   1d99c:	4788      	blx	r1
		HAL.IOs->config->set(&HAL.IOs->pins->DIO11);
   1d99e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1d9a2:	681b      	ldr	r3, [r3, #0]
   1d9a4:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1d9a8:	4798      	blx	r3
		SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   1d9aa:	f241 0234 	movw	r2, #4148	; 0x1034
   1d9ae:	4931      	ldr	r1, [pc, #196]	; (1da74 <init+0x110>)
   1d9b0:	588b      	ldr	r3, [r1, r2]
   1d9b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1d9b6:	508b      	str	r3, [r1, r2]
		UART_C2_REG(UART0_BASE_PTR) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   1d9b8:	4b2f      	ldr	r3, [pc, #188]	; (1da78 <init+0x114>)
   1d9ba:	78da      	ldrb	r2, [r3, #3]
   1d9bc:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
   1d9c0:	70da      	strb	r2, [r3, #3]
		UART_C1_REG(UART0_BASE_PTR) = 0;
   1d9c2:	2200      	movs	r2, #0
   1d9c4:	709a      	strb	r2, [r3, #2]
		UART_BDH_REG(UART0_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1d9c6:	701f      	strb	r7, [r3, #0]
		UART_BDL_REG(UART0_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1d9c8:	705d      	strb	r5, [r3, #1]
		UART_C2_REG(UART0_BASE_PTR) |= (UART_C2_TE_MASK | UART_C2_RE_MASK | UART_C2_RIE_MASK);
   1d9ca:	78da      	ldrb	r2, [r3, #3]
   1d9cc:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
   1d9d0:	70da      	strb	r2, [r3, #3]
		enable_irq(INT_UART0_RX_TX-16);
   1d9d2:	202d      	movs	r0, #45	; 0x2d
}
   1d9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		enable_irq(INT_UART2_RX_TX-16);
   1d9d8:	f007 bb90 	b.w	250fc <enable_irq>
		SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
   1d9dc:	f8df c094 	ldr.w	ip, [pc, #148]	; 1da74 <init+0x110>
   1d9e0:	f241 0634 	movw	r6, #4148	; 0x1034
   1d9e4:	f85c 0006 	ldr.w	r0, [ip, r6]
   1d9e8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
   1d9ec:	f84c 0006 	str.w	r0, [ip, r6]
		UART_C1_REG(UART2_BASE_PTR) = 0;
   1d9f0:	4e22      	ldr	r6, [pc, #136]	; (1da7c <init+0x118>)
   1d9f2:	2000      	movs	r0, #0
   1d9f4:	70b0      	strb	r0, [r6, #2]
		switch(UART.mode) {
   1d9f6:	f892 c019 	ldrb.w	ip, [r2, #25]
   1d9fa:	2203      	movs	r2, #3
   1d9fc:	f1bc 0f01 	cmp.w	ip, #1
   1da00:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
			HAL.IOs->pins->DIO17.configuration.GPIO_Mode  = GPIO_Mode_AF3;  // TxD (DIO17)
   1da04:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
			HAL.IOs->pins->DIO18.configuration.GPIO_Mode  = GPIO_Mode_AF3;  // RxD (DIO18)
   1da08:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
   1da0c:	d11f      	bne.n	1da4e <init+0xea>
			HAL.IOs->pins->DIO18.configuration.GPIO_OType = GPIO_OType_OD;  // TxD as open drain output
   1da0e:	f883 c41f 	strb.w	ip, [r3, #1055]	; 0x41f
			HAL.IOs->pins->DIO17.configuration.GPIO_PuPd  = GPIO_PuPd_UP;   // RxD with pull-up resistor
   1da12:	f883 c400 	strb.w	ip, [r3, #1024]	; 0x400
			HAL.IOs->config->set(&HAL.IOs->pins->DIO17);
   1da16:	4788      	blx	r1
			HAL.IOs->config->set(&HAL.IOs->pins->DIO18);
   1da18:	e9d4 3000 	ldrd	r3, r0, [r4]
   1da1c:	681b      	ldr	r3, [r3, #0]
   1da1e:	f500 6081 	add.w	r0, r0, #1032	; 0x408
   1da22:	4798      	blx	r3
			UART_C1_REG(UART2_BASE_PTR) |= (UART_C1_LOOPS_MASK | UART_C1_RSRC_MASK);
   1da24:	78b3      	ldrb	r3, [r6, #2]
   1da26:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
   1da2a:	70b3      	strb	r3, [r6, #2]
			UART_C3_REG(UART2_BASE_PTR) |= UART_C3_TXDIR_MASK;
   1da2c:	79b3      	ldrb	r3, [r6, #6]
   1da2e:	f043 0320 	orr.w	r3, r3, #32
   1da32:	71b3      	strb	r3, [r6, #6]
		UART_C2_REG(UART2_BASE_PTR) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   1da34:	4b11      	ldr	r3, [pc, #68]	; (1da7c <init+0x118>)
   1da36:	78da      	ldrb	r2, [r3, #3]
   1da38:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
   1da3c:	70da      	strb	r2, [r3, #3]
		UART_BDH_REG(UART2_BASE_PTR) = (ubd >> 8) & UART_BDH_SBR_MASK;
   1da3e:	701f      	strb	r7, [r3, #0]
		UART_BDL_REG(UART2_BASE_PTR) = (ubd & UART_BDL_SBR_MASK);
   1da40:	705d      	strb	r5, [r3, #1]
		UART_C2_REG(UART2_BASE_PTR) |= (UART_C2_TE_MASK | UART_C2_RE_MASK | UART_C2_RIE_MASK);
   1da42:	78da      	ldrb	r2, [r3, #3]
   1da44:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
   1da48:	70da      	strb	r2, [r3, #3]
		enable_irq(INT_UART2_RX_TX-16);
   1da4a:	2031      	movs	r0, #49	; 0x31
   1da4c:	e7c2      	b.n	1d9d4 <init+0x70>
			HAL.IOs->pins->DIO17.configuration.GPIO_OType = GPIO_OType_OD;  // TxD as open drain output
   1da4e:	2201      	movs	r2, #1
   1da50:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
			HAL.IOs->pins->DIO18.configuration.GPIO_PuPd  = GPIO_PuPd_UP;   // RxD with pull-up resistor
   1da54:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
			HAL.IOs->config->set(&HAL.IOs->pins->DIO17);
   1da58:	4788      	blx	r1
			HAL.IOs->config->set(&HAL.IOs->pins->DIO18);
   1da5a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1da5e:	681b      	ldr	r3, [r3, #0]
   1da60:	f500 6081 	add.w	r0, r0, #1032	; 0x408
   1da64:	4798      	blx	r3
			break;
   1da66:	e7e5      	b.n	1da34 <init+0xd0>
   1da68:	1fff0af0 	.word	0x1fff0af0
   1da6c:	002dc6c0 	.word	0x002dc6c0
   1da70:	00029d1c 	.word	0x00029d1c
   1da74:	40047000 	.word	0x40047000
   1da78:	4006a000 	.word	0x4006a000
   1da7c:	4006c000 	.word	0x4006c000

0001da80 <tx>:
	buffers.tx.buffer[buffers.tx.wrote] = ch;
   1da80:	4a08      	ldr	r2, [pc, #32]	; (1daa4 <tx+0x24>)
   1da82:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   1da86:	54c8      	strb	r0, [r1, r3]
	buffers.tx.wrote = (buffers.tx.wrote + 1) % BUFFER_SIZE;
   1da88:	3301      	adds	r3, #1
   1da8a:	f003 031f 	and.w	r3, r3, #31
   1da8e:	6053      	str	r3, [r2, #4]
	switch(UART.pinout) {
   1da90:	7e13      	ldrb	r3, [r2, #24]
   1da92:	2b01      	cmp	r3, #1
		UART0_C2 |= UART_C2_TIE_MASK;
   1da94:	bf0c      	ite	eq
   1da96:	4a04      	ldreq	r2, [pc, #16]	; (1daa8 <tx+0x28>)
		UART2_C2 |= UART_C2_TIE_MASK;
   1da98:	4a04      	ldrne	r2, [pc, #16]	; (1daac <tx+0x2c>)
   1da9a:	78d3      	ldrb	r3, [r2, #3]
   1da9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1daa0:	70d3      	strb	r3, [r2, #3]
}
   1daa2:	4770      	bx	lr
   1daa4:	1fff0af0 	.word	0x1fff0af0
   1daa8:	4006a000 	.word	0x4006a000
   1daac:	4006c000 	.word	0x4006c000

0001dab0 <txN>:
{
   1dab0:	b570      	push	{r4, r5, r6, lr}
   1dab2:	4606      	mov	r6, r0
   1dab4:	460d      	mov	r5, r1
	for(int32_t i = 0; i < number; i++)
   1dab6:	2400      	movs	r4, #0
   1dab8:	42a5      	cmp	r5, r4
   1daba:	dc00      	bgt.n	1dabe <txN+0xe>
}
   1dabc:	bd70      	pop	{r4, r5, r6, pc}
		tx(str[i]);
   1dabe:	5d30      	ldrb	r0, [r6, r4]
   1dac0:	f7ff ffde 	bl	1da80 <tx>
	for(int32_t i = 0; i < number; i++)
   1dac4:	3401      	adds	r4, #1
   1dac6:	e7f7      	b.n	1dab8 <txN+0x8>

0001dac8 <rxN>:
	if(available < number)
   1dac8:	4b09      	ldr	r3, [pc, #36]	; (1daf0 <rxN+0x28>)
   1daca:	681b      	ldr	r3, [r3, #0]
   1dacc:	4299      	cmp	r1, r3
{
   1dace:	b570      	push	{r4, r5, r6, lr}
   1dad0:	4606      	mov	r6, r0
   1dad2:	460c      	mov	r4, r1
	if(available < number)
   1dad4:	d809      	bhi.n	1daea <rxN+0x22>
	for(int32_t i = 0; i < number; i++)
   1dad6:	2500      	movs	r5, #0
   1dad8:	42a5      	cmp	r5, r4
   1dada:	db01      	blt.n	1dae0 <rxN+0x18>
   1dadc:	2001      	movs	r0, #1
}
   1dade:	bd70      	pop	{r4, r5, r6, pc}
		rx(&str[i]);
   1dae0:	1970      	adds	r0, r6, r5
   1dae2:	f7ff ff21 	bl	1d928 <rx>
	for(int32_t i = 0; i < number; i++)
   1dae6:	3501      	adds	r5, #1
   1dae8:	e7f6      	b.n	1dad8 <rxN+0x10>
		return 0;
   1daea:	2000      	movs	r0, #0
   1daec:	e7f7      	b.n	1dade <rxN+0x16>
   1daee:	bf00      	nop
   1daf0:	1fff566c 	.word	0x1fff566c

0001daf4 <clearBuffers>:
{
   1daf4:	b570      	push	{r4, r5, r6, lr}
	switch(UART.pinout) {
   1daf6:	4d0f      	ldr	r5, [pc, #60]	; (1db34 <clearBuffers+0x40>)
   1daf8:	4e0f      	ldr	r6, [pc, #60]	; (1db38 <clearBuffers+0x44>)
   1dafa:	7e2b      	ldrb	r3, [r5, #24]
   1dafc:	2b01      	cmp	r3, #1
   1dafe:	f04f 0400 	mov.w	r4, #0
   1db02:	d10c      	bne.n	1db1e <clearBuffers+0x2a>
		disable_irq(INT_UART0_RX_TX-16);
   1db04:	202d      	movs	r0, #45	; 0x2d
   1db06:	f007 fb47 	bl	25198 <disable_irq>
		buffers.rx.wrote  = 0;
   1db0a:	e9c5 4403 	strd	r4, r4, [r5, #12]
		buffers.tx.wrote  = 0;
   1db0e:	e9c5 4400 	strd	r4, r4, [r5]
		available         = 0;
   1db12:	6034      	str	r4, [r6, #0]
		enable_irq(INT_UART0_RX_TX-16);
   1db14:	202d      	movs	r0, #45	; 0x2d
}
   1db16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		enable_irq(INT_UART2_RX_TX-16);
   1db1a:	f007 baef 	b.w	250fc <enable_irq>
		disable_irq(INT_UART2_RX_TX-16);
   1db1e:	2031      	movs	r0, #49	; 0x31
   1db20:	f007 fb3a 	bl	25198 <disable_irq>
		buffers.rx.wrote  = 0;
   1db24:	e9c5 4403 	strd	r4, r4, [r5, #12]
		buffers.tx.wrote  = 0;
   1db28:	e9c5 4400 	strd	r4, r4, [r5]
		available         = 0;
   1db2c:	6034      	str	r4, [r6, #0]
		enable_irq(INT_UART2_RX_TX-16);
   1db2e:	2031      	movs	r0, #49	; 0x31
   1db30:	e7f1      	b.n	1db16 <clearBuffers+0x22>
   1db32:	bf00      	nop
   1db34:	1fff0af0 	.word	0x1fff0af0
   1db38:	1fff566c 	.word	0x1fff566c

0001db3c <deInit>:
{
   1db3c:	b538      	push	{r3, r4, r5, lr}
   1db3e:	4b1b      	ldr	r3, [pc, #108]	; (1dbac <deInit+0x70>)
   1db40:	4a1b      	ldr	r2, [pc, #108]	; (1dbb0 <deInit+0x74>)
   1db42:	68dc      	ldr	r4, [r3, #12]
   1db44:	e9d4 3000 	ldrd	r3, r0, [r4]
   1db48:	681d      	ldr	r5, [r3, #0]
	switch(UART.pinout) {
   1db4a:	4b1a      	ldr	r3, [pc, #104]	; (1dbb4 <deInit+0x78>)
   1db4c:	7e1b      	ldrb	r3, [r3, #24]
   1db4e:	2b01      	cmp	r3, #1
   1db50:	f241 0334 	movw	r3, #4148	; 0x1034
		SIM_SCGC4 &= ~(SIM_SCGC4_UART2_MASK);
   1db54:	58d1      	ldr	r1, [r2, r3]
	switch(UART.pinout) {
   1db56:	d116      	bne.n	1db86 <deInit+0x4a>
		SIM_SCGC4 &= ~(SIM_SCGC4_UART0_MASK);
   1db58:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   1db5c:	50d1      	str	r1, [r2, r3]
		HAL.IOs->pins->DIO10.configuration.GPIO_Mode = GPIO_Mode_IN;
   1db5e:	2308      	movs	r3, #8
   1db60:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
		HAL.IOs->pins->DIO11.configuration.GPIO_Mode = GPIO_Mode_IN;
   1db64:	f880 31dd 	strb.w	r3, [r0, #477]	; 0x1dd
		HAL.IOs->config->set(&HAL.IOs->pins->DIO10);
   1db68:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1db6c:	47a8      	blx	r5
		HAL.IOs->config->set(&HAL.IOs->pins->DIO11);
   1db6e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1db72:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1db76:	681b      	ldr	r3, [r3, #0]
   1db78:	4798      	blx	r3
		disable_irq(INT_UART0_RX_TX-16);
   1db7a:	202d      	movs	r0, #45	; 0x2d
		disable_irq(INT_UART2_RX_TX-16);
   1db7c:	f007 fb0c 	bl	25198 <disable_irq>
}
   1db80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	clearBuffers();
   1db84:	e7b6      	b.n	1daf4 <clearBuffers>
		SIM_SCGC4 &= ~(SIM_SCGC4_UART2_MASK);
   1db86:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1db8a:	50d1      	str	r1, [r2, r3]
		HAL.IOs->pins->DIO17.configuration.GPIO_Mode = GPIO_Mode_IN;
   1db8c:	2308      	movs	r3, #8
   1db8e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
		HAL.IOs->pins->DIO18.configuration.GPIO_Mode = GPIO_Mode_IN;
   1db92:	f880 341d 	strb.w	r3, [r0, #1053]	; 0x41d
		HAL.IOs->config->set(&HAL.IOs->pins->DIO17);
   1db96:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
   1db9a:	47a8      	blx	r5
		HAL.IOs->config->set(&HAL.IOs->pins->DIO18);
   1db9c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1dba0:	f500 6081 	add.w	r0, r0, #1032	; 0x408
   1dba4:	681b      	ldr	r3, [r3, #0]
   1dba6:	4798      	blx	r3
		disable_irq(INT_UART2_RX_TX-16);
   1dba8:	2031      	movs	r0, #49	; 0x31
   1dbaa:	e7e7      	b.n	1db7c <deInit+0x40>
   1dbac:	00029d1c 	.word	0x00029d1c
   1dbb0:	40047000 	.word	0x40047000
   1dbb4:	1fff0af0 	.word	0x1fff0af0

0001dbb8 <UART0_RX_TX_IRQHandler_UART>:
{
   1dbb8:	b510      	push	{r4, lr}
	uint32_t status = UART0_S1;
   1dbba:	4a1d      	ldr	r2, [pc, #116]	; (1dc30 <UART0_RX_TX_IRQHandler_UART+0x78>)
   1dbbc:	7913      	ldrb	r3, [r2, #4]
	if(status & UART_S1_RDRF_MASK)
   1dbbe:	0699      	lsls	r1, r3, #26
	uint32_t status = UART0_S1;
   1dbc0:	b2d8      	uxtb	r0, r3
	if(status & UART_S1_RDRF_MASK)
   1dbc2:	d50f      	bpl.n	1dbe4 <UART0_RX_TX_IRQHandler_UART+0x2c>
		buffers.rx.buffer[buffers.rx.wrote] = UART0_D;
   1dbc4:	491b      	ldr	r1, [pc, #108]	; (1dc34 <UART0_RX_TX_IRQHandler_UART+0x7c>)
   1dbc6:	79d2      	ldrb	r2, [r2, #7]
   1dbc8:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
   1dbcc:	b2d2      	uxtb	r2, r2
   1dbce:	54e2      	strb	r2, [r4, r3]
		if(!isSending) // Only move ring buffer index & available counter when the received byte wasn't the send echo
   1dbd0:	4a19      	ldr	r2, [pc, #100]	; (1dc38 <UART0_RX_TX_IRQHandler_UART+0x80>)
   1dbd2:	7914      	ldrb	r4, [r2, #4]
   1dbd4:	b934      	cbnz	r4, 1dbe4 <UART0_RX_TX_IRQHandler_UART+0x2c>
			buffers.rx.wrote = (buffers.rx.wrote + 1) % BUFFER_SIZE;
   1dbd6:	3301      	adds	r3, #1
   1dbd8:	f003 031f 	and.w	r3, r3, #31
   1dbdc:	610b      	str	r3, [r1, #16]
			available++;
   1dbde:	6813      	ldr	r3, [r2, #0]
   1dbe0:	3301      	adds	r3, #1
   1dbe2:	6013      	str	r3, [r2, #0]
	if(status & UART_S1_TC_MASK)
   1dbe4:	0642      	lsls	r2, r0, #25
   1dbe6:	d507      	bpl.n	1dbf8 <UART0_RX_TX_IRQHandler_UART+0x40>
		isSending = false;
   1dbe8:	4b13      	ldr	r3, [pc, #76]	; (1dc38 <UART0_RX_TX_IRQHandler_UART+0x80>)
   1dbea:	2200      	movs	r2, #0
   1dbec:	711a      	strb	r2, [r3, #4]
		UART0_C2 &= ~UART_C2_TCIE_MASK;
   1dbee:	4a10      	ldr	r2, [pc, #64]	; (1dc30 <UART0_RX_TX_IRQHandler_UART+0x78>)
   1dbf0:	78d3      	ldrb	r3, [r2, #3]
   1dbf2:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   1dbf6:	70d3      	strb	r3, [r2, #3]
	if(status & UART_S1_TDRE_MASK)
   1dbf8:	0603      	lsls	r3, r0, #24
   1dbfa:	d514      	bpl.n	1dc26 <UART0_RX_TX_IRQHandler_UART+0x6e>
		if(buffers.tx.read != buffers.tx.wrote)
   1dbfc:	490d      	ldr	r1, [pc, #52]	; (1dc34 <UART0_RX_TX_IRQHandler_UART+0x7c>)
   1dbfe:	e9d1 3200 	ldrd	r3, r2, [r1]
   1dc02:	4293      	cmp	r3, r2
   1dc04:	4a0a      	ldr	r2, [pc, #40]	; (1dc30 <UART0_RX_TX_IRQHandler_UART+0x78>)
   1dc06:	d00f      	beq.n	1dc28 <UART0_RX_TX_IRQHandler_UART+0x70>
			UART0_D = buffers.tx.buffer[buffers.tx.read];
   1dc08:	6888      	ldr	r0, [r1, #8]
   1dc0a:	5cc0      	ldrb	r0, [r0, r3]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1dc0c:	3301      	adds	r3, #1
   1dc0e:	f003 031f 	and.w	r3, r3, #31
			UART0_D = buffers.tx.buffer[buffers.tx.read];
   1dc12:	b2c0      	uxtb	r0, r0
   1dc14:	71d0      	strb	r0, [r2, #7]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1dc16:	600b      	str	r3, [r1, #0]
			isSending = true; // Ignore echo
   1dc18:	4b07      	ldr	r3, [pc, #28]	; (1dc38 <UART0_RX_TX_IRQHandler_UART+0x80>)
   1dc1a:	2101      	movs	r1, #1
   1dc1c:	7119      	strb	r1, [r3, #4]
			UART0_C2 |= UART_C2_TCIE_MASK; // Turn on transmission complete interrupt
   1dc1e:	78d3      	ldrb	r3, [r2, #3]
   1dc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			UART0_C2 &= ~UART_C2_TIE_MASK; // empty buffer -> turn off transmit buffer empty interrupt
   1dc24:	70d3      	strb	r3, [r2, #3]
}
   1dc26:	bd10      	pop	{r4, pc}
			UART0_C2 &= ~UART_C2_TIE_MASK; // empty buffer -> turn off transmit buffer empty interrupt
   1dc28:	78d3      	ldrb	r3, [r2, #3]
   1dc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dc2e:	e7f9      	b.n	1dc24 <UART0_RX_TX_IRQHandler_UART+0x6c>
   1dc30:	4006a000 	.word	0x4006a000
   1dc34:	1fff0af0 	.word	0x1fff0af0
   1dc38:	1fff566c 	.word	0x1fff566c

0001dc3c <UART2_RX_TX_IRQHandler>:
{
   1dc3c:	b510      	push	{r4, lr}
	uint32_t status = UART2_S1;
   1dc3e:	4a1d      	ldr	r2, [pc, #116]	; (1dcb4 <UART2_RX_TX_IRQHandler+0x78>)
   1dc40:	7913      	ldrb	r3, [r2, #4]
	if(status & UART_S1_RDRF_MASK)
   1dc42:	0699      	lsls	r1, r3, #26
	uint32_t status = UART2_S1;
   1dc44:	b2d8      	uxtb	r0, r3
	if(status & UART_S1_RDRF_MASK)
   1dc46:	d50f      	bpl.n	1dc68 <UART2_RX_TX_IRQHandler+0x2c>
		buffers.rx.buffer[buffers.rx.wrote] = UART2_D;
   1dc48:	491b      	ldr	r1, [pc, #108]	; (1dcb8 <UART2_RX_TX_IRQHandler+0x7c>)
   1dc4a:	79d2      	ldrb	r2, [r2, #7]
   1dc4c:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
   1dc50:	b2d2      	uxtb	r2, r2
   1dc52:	54e2      	strb	r2, [r4, r3]
		if(!isSending) // Only move ring buffer index & available counter when the received byte wasn't the send echo
   1dc54:	4a19      	ldr	r2, [pc, #100]	; (1dcbc <UART2_RX_TX_IRQHandler+0x80>)
   1dc56:	7954      	ldrb	r4, [r2, #5]
   1dc58:	b934      	cbnz	r4, 1dc68 <UART2_RX_TX_IRQHandler+0x2c>
			buffers.rx.wrote = (buffers.rx.wrote + 1) % BUFFER_SIZE;
   1dc5a:	3301      	adds	r3, #1
   1dc5c:	f003 031f 	and.w	r3, r3, #31
   1dc60:	610b      	str	r3, [r1, #16]
			available++;
   1dc62:	6813      	ldr	r3, [r2, #0]
   1dc64:	3301      	adds	r3, #1
   1dc66:	6013      	str	r3, [r2, #0]
	if(status & UART_S1_TC_MASK)
   1dc68:	0642      	lsls	r2, r0, #25
   1dc6a:	d507      	bpl.n	1dc7c <UART2_RX_TX_IRQHandler+0x40>
		isSending = false;
   1dc6c:	4b13      	ldr	r3, [pc, #76]	; (1dcbc <UART2_RX_TX_IRQHandler+0x80>)
   1dc6e:	2200      	movs	r2, #0
   1dc70:	715a      	strb	r2, [r3, #5]
		UART2_C2 &= ~UART_C2_TCIE_MASK;
   1dc72:	4a10      	ldr	r2, [pc, #64]	; (1dcb4 <UART2_RX_TX_IRQHandler+0x78>)
   1dc74:	78d3      	ldrb	r3, [r2, #3]
   1dc76:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   1dc7a:	70d3      	strb	r3, [r2, #3]
	if(status & UART_S1_TDRE_MASK)
   1dc7c:	0603      	lsls	r3, r0, #24
   1dc7e:	d514      	bpl.n	1dcaa <UART2_RX_TX_IRQHandler+0x6e>
		if(buffers.tx.read != buffers.tx.wrote)
   1dc80:	490d      	ldr	r1, [pc, #52]	; (1dcb8 <UART2_RX_TX_IRQHandler+0x7c>)
   1dc82:	e9d1 3200 	ldrd	r3, r2, [r1]
   1dc86:	4293      	cmp	r3, r2
   1dc88:	4a0a      	ldr	r2, [pc, #40]	; (1dcb4 <UART2_RX_TX_IRQHandler+0x78>)
   1dc8a:	d00f      	beq.n	1dcac <UART2_RX_TX_IRQHandler+0x70>
			UART2_D = buffers.tx.buffer[buffers.tx.read];
   1dc8c:	6888      	ldr	r0, [r1, #8]
   1dc8e:	5cc0      	ldrb	r0, [r0, r3]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1dc90:	3301      	adds	r3, #1
   1dc92:	f003 031f 	and.w	r3, r3, #31
			UART2_D = buffers.tx.buffer[buffers.tx.read];
   1dc96:	b2c0      	uxtb	r0, r0
   1dc98:	71d0      	strb	r0, [r2, #7]
			buffers.tx.read = (buffers.tx.read + 1) % BUFFER_SIZE;
   1dc9a:	600b      	str	r3, [r1, #0]
			isSending = true; // Ignore echo
   1dc9c:	4b07      	ldr	r3, [pc, #28]	; (1dcbc <UART2_RX_TX_IRQHandler+0x80>)
   1dc9e:	2101      	movs	r1, #1
   1dca0:	7159      	strb	r1, [r3, #5]
			UART2_C2 |= UART_C2_TCIE_MASK; // Turn on transmission complete interrupt
   1dca2:	78d3      	ldrb	r3, [r2, #3]
   1dca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			UART2_C2 &= ~UART_C2_TIE_MASK; // empty buffer -> turn off transmit buffer empty interrupt
   1dca8:	70d3      	strb	r3, [r2, #3]
}
   1dcaa:	bd10      	pop	{r4, pc}
			UART2_C2 &= ~UART_C2_TIE_MASK; // empty buffer -> turn off transmit buffer empty interrupt
   1dcac:	78d3      	ldrb	r3, [r2, #3]
   1dcae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1dcb2:	e7f9      	b.n	1dca8 <UART2_RX_TX_IRQHandler+0x6c>
   1dcb4:	4006c000 	.word	0x4006c000
   1dcb8:	1fff0af0 	.word	0x1fff0af0
   1dcbc:	1fff566c 	.word	0x1fff566c

0001dcc0 <UART_readWrite>:
{
   1dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcc2:	4605      	mov	r5, r0
   1dcc4:	460e      	mov	r6, r1
   1dcc6:	4617      	mov	r7, r2
   1dcc8:	461c      	mov	r4, r3
	uart->rxtx.clearBuffers();
   1dcca:	69c3      	ldr	r3, [r0, #28]
   1dccc:	4798      	blx	r3
	uart->rxtx.txN(data, writeLength);
   1dcce:	4630      	mov	r0, r6
   1dcd0:	696b      	ldr	r3, [r5, #20]
   1dcd2:	b2f9      	uxtb	r1, r7
   1dcd4:	4798      	blx	r3
	wait(2);
   1dcd6:	2002      	movs	r0, #2
   1dcd8:	f7fe fb32 	bl	1c340 <wait>
	if (readLength <= 0)
   1dcdc:	b154      	cbz	r4, 1dcf4 <UART_readWrite+0x34>
	uint32_t timestamp = systick_getTick();
   1dcde:	f7fe fb29 	bl	1c334 <systick_getTick>
   1dce2:	4607      	mov	r7, r0
	while(uart->rxtx.bytesAvailable() < readLength)
   1dce4:	6a2b      	ldr	r3, [r5, #32]
   1dce6:	4798      	blx	r3
   1dce8:	42a0      	cmp	r0, r4
   1dcea:	d305      	bcc.n	1dcf8 <UART_readWrite+0x38>
	uart->rxtx.rxN(data, readLength);
   1dcec:	69ab      	ldr	r3, [r5, #24]
   1dcee:	4621      	mov	r1, r4
   1dcf0:	4630      	mov	r0, r6
   1dcf2:	4798      	blx	r3
	return 0;
   1dcf4:	2000      	movs	r0, #0
}
   1dcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(timeSince(timestamp) > UART_TIMEOUT_VALUE)
   1dcf8:	4638      	mov	r0, r7
   1dcfa:	f7fe fb2b 	bl	1c354 <timeSince>
   1dcfe:	280a      	cmp	r0, #10
   1dd00:	d9f0      	bls.n	1dce4 <UART_readWrite+0x24>
			return -1;
   1dd02:	f04f 30ff 	mov.w	r0, #4294967295
   1dd06:	e7f6      	b.n	1dcf6 <UART_readWrite+0x36>

0001dd08 <UART_readInt>:
{
   1dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd0a:	b085      	sub	sp, #20
   1dd0c:	4604      	mov	r4, r0
	dataRequest[1] = slave;                       // Slave address
   1dd0e:	f88d 1005 	strb.w	r1, [sp, #5]
	dataRequest[2] = address;                     // Register address
   1dd12:	f88d 2006 	strb.w	r2, [sp, #6]
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1); // Cyclic redundancy check
   1dd16:	2103      	movs	r1, #3
{
   1dd18:	4615      	mov	r5, r2
   1dd1a:	461e      	mov	r6, r3
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1); // Cyclic redundancy check
   1dd1c:	2201      	movs	r2, #1
	dataRequest[0] = 0x05;                        // Sync byte
   1dd1e:	2305      	movs	r3, #5
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1); // Cyclic redundancy check
   1dd20:	a801      	add	r0, sp, #4
	dataRequest[0] = 0x05;                        // Sync byte
   1dd22:	f88d 3004 	strb.w	r3, [sp, #4]
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1); // Cyclic redundancy check
   1dd26:	f002 f979 	bl	2001c <tmc_CRC8>
	channel->rxtx.clearBuffers();
   1dd2a:	69e3      	ldr	r3, [r4, #28]
	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1); // Cyclic redundancy check
   1dd2c:	f88d 0007 	strb.w	r0, [sp, #7]
	channel->rxtx.clearBuffers();
   1dd30:	4798      	blx	r3
	channel->rxtx.txN(dataRequest, ARRAY_SIZE(dataRequest));
   1dd32:	2104      	movs	r1, #4
   1dd34:	6963      	ldr	r3, [r4, #20]
   1dd36:	eb0d 0001 	add.w	r0, sp, r1
   1dd3a:	4798      	blx	r3
	timeout = systick_getTick();
   1dd3c:	f7fe fafa 	bl	1c334 <systick_getTick>
   1dd40:	4607      	mov	r7, r0
	while(channel->rxtx.bytesAvailable() < ARRAY_SIZE(readData))
   1dd42:	6a23      	ldr	r3, [r4, #32]
   1dd44:	4798      	blx	r3
   1dd46:	2807      	cmp	r0, #7
   1dd48:	d91e      	bls.n	1dd88 <UART_readInt+0x80>
	channel->rxtx.rxN(readData, ARRAY_SIZE(readData));
   1dd4a:	2108      	movs	r1, #8
   1dd4c:	69a3      	ldr	r3, [r4, #24]
   1dd4e:	eb0d 0001 	add.w	r0, sp, r1
   1dd52:	4798      	blx	r3
	if(readData[7] != tmc_CRC8(readData, 7, 1) || readData[0] != 0x05 || readData[1] != 0xFF || readData[2] != address)
   1dd54:	2201      	movs	r2, #1
   1dd56:	2107      	movs	r1, #7
   1dd58:	a802      	add	r0, sp, #8
   1dd5a:	f89d 400f 	ldrb.w	r4, [sp, #15]
   1dd5e:	f002 f95d 	bl	2001c <tmc_CRC8>
   1dd62:	4284      	cmp	r4, r0
   1dd64:	d115      	bne.n	1dd92 <UART_readInt+0x8a>
   1dd66:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1dd6a:	2b05      	cmp	r3, #5
   1dd6c:	d111      	bne.n	1dd92 <UART_readInt+0x8a>
   1dd6e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1dd72:	2bff      	cmp	r3, #255	; 0xff
   1dd74:	d10d      	bne.n	1dd92 <UART_readInt+0x8a>
   1dd76:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1dd7a:	42ab      	cmp	r3, r5
	*value = readData[3] << 24 | readData[4] << 16 | readData[5] << 8 | readData[6];
   1dd7c:	bf02      	ittt	eq
   1dd7e:	f8dd 300b 	ldreq.w	r3, [sp, #11]
   1dd82:	ba1b      	reveq	r3, r3
   1dd84:	6033      	streq	r3, [r6, #0]
	return;
   1dd86:	e004      	b.n	1dd92 <UART_readInt+0x8a>
		if(timeSince(timeout) > UART_TIMEOUT_VALUE) // Timeout
   1dd88:	4638      	mov	r0, r7
   1dd8a:	f7fe fae3 	bl	1c354 <timeSince>
   1dd8e:	280a      	cmp	r0, #10
   1dd90:	d9d7      	bls.n	1dd42 <UART_readInt+0x3a>
}
   1dd92:	b005      	add	sp, #20
   1dd94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd96 <UART_writeInt>:
{
   1dd96:	b573      	push	{r0, r1, r4, r5, r6, lr}
	writeData[2] = address | TMC_WRITE_BIT;      // Register address with write bit set
   1dd98:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1dd9c:	f88d 2002 	strb.w	r2, [sp, #2]
	writeData[3] = value >> 24;                  // Register Data
   1dda0:	161a      	asrs	r2, r3, #24
   1dda2:	f88d 2003 	strb.w	r2, [sp, #3]
	writeData[4] = value >> 16;                  // Register Data
   1dda6:	141a      	asrs	r2, r3, #16
{
   1dda8:	4605      	mov	r5, r0
	writeData[4] = value >> 16;                  // Register Data
   1ddaa:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData[0] = 0x05;                         // Sync byte
   1ddae:	2005      	movs	r0, #5
	writeData[5] = value >> 8;                   // Register Data
   1ddb0:	121a      	asrs	r2, r3, #8
	writeData[0] = 0x05;                         // Sync byte
   1ddb2:	f88d 0000 	strb.w	r0, [sp]
	writeData[1] = slave;                        // Slave address
   1ddb6:	f88d 1001 	strb.w	r1, [sp, #1]
	writeData[5] = value >> 8;                   // Register Data
   1ddba:	f88d 2005 	strb.w	r2, [sp, #5]
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   1ddbe:	2107      	movs	r1, #7
   1ddc0:	2201      	movs	r2, #1
   1ddc2:	4668      	mov	r0, sp
	writeData[6] = value & 0xFF;                 // Register Data
   1ddc4:	f88d 3006 	strb.w	r3, [sp, #6]
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   1ddc8:	f002 f928 	bl	2001c <tmc_CRC8>
	channel->rxtx.clearBuffers();
   1ddcc:	69eb      	ldr	r3, [r5, #28]
	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
   1ddce:	f88d 0007 	strb.w	r0, [sp, #7]
	channel->rxtx.clearBuffers();
   1ddd2:	4798      	blx	r3
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   1ddd4:	466c      	mov	r4, sp
   1ddd6:	2600      	movs	r6, #0
		channel->rxtx.tx(writeData[i]);
   1ddd8:	68eb      	ldr	r3, [r5, #12]
   1ddda:	f814 0b01 	ldrb.w	r0, [r4], #1
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   1ddde:	3601      	adds	r6, #1
		channel->rxtx.tx(writeData[i]);
   1dde0:	4798      	blx	r3
	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
   1dde2:	2e08      	cmp	r6, #8
   1dde4:	d1f8      	bne.n	1ddd8 <UART_writeInt+0x42>
	wait(2);
   1dde6:	2002      	movs	r0, #2
   1dde8:	f7fe faaa 	bl	1c340 <wait>
}
   1ddec:	b002      	add	sp, #8
   1ddee:	bd70      	pop	{r4, r5, r6, pc}

0001ddf0 <UART0_RX_TX_IRQHandler>:

UART0_Interrupt uart0_interrupt = UART0_INTERRUPT_UART;

void UART0_RX_TX_IRQHandler(void)
{
	switch(uart0_interrupt) {
   1ddf0:	4b03      	ldr	r3, [pc, #12]	; (1de00 <UART0_RX_TX_IRQHandler+0x10>)
   1ddf2:	781b      	ldrb	r3, [r3, #0]
   1ddf4:	2b01      	cmp	r3, #1
   1ddf6:	d101      	bne.n	1ddfc <UART0_RX_TX_IRQHandler+0xc>
	case UART0_INTERRUPT_WLAN:
		UART0_RX_TX_IRQHandler_WLAN();
   1ddf8:	f7ff bc0c 	b.w	1d614 <UART0_RX_TX_IRQHandler_WLAN>
		break;
	case UART0_INTERRUPT_UART:
	default:
		UART0_RX_TX_IRQHandler_UART();
   1ddfc:	f7ff bedc 	b.w	1dbb8 <UART0_RX_TX_IRQHandler_UART>
   1de00:	1fff56be 	.word	0x1fff56be

0001de04 <shallForceBoot>:

	void shallForceBoot()
	{
		// toggle each pin and see if you can read the state on the other
		// leave if not, because this means that the pins are not tied together
		HAL.IOs->config->toOutput(&HAL.IOs->pins->ID_CLK);
   1de04:	4b23      	ldr	r3, [pc, #140]	; (1de94 <shallForceBoot+0x90>)
	{
   1de06:	b510      	push	{r4, lr}
		HAL.IOs->config->toOutput(&HAL.IOs->pins->ID_CLK);
   1de08:	68dc      	ldr	r4, [r3, #12]
   1de0a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de0e:	68db      	ldr	r3, [r3, #12]
   1de10:	3008      	adds	r0, #8
   1de12:	4798      	blx	r3
		HAL.IOs->config->toInput(&HAL.IOs->pins->ID_CH0);
   1de14:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de18:	691b      	ldr	r3, [r3, #16]
   1de1a:	3028      	adds	r0, #40	; 0x28
   1de1c:	4798      	blx	r3

		HAL.IOs->config->setHigh(&HAL.IOs->pins->ID_CLK);
   1de1e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de22:	695b      	ldr	r3, [r3, #20]
   1de24:	3008      	adds	r0, #8
   1de26:	4798      	blx	r3
		if(!HAL.IOs->config->isHigh(&HAL.IOs->pins->ID_CH0))
   1de28:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de2e:	3028      	adds	r0, #40	; 0x28
   1de30:	4798      	blx	r3
   1de32:	b370      	cbz	r0, 1de92 <shallForceBoot+0x8e>
			return;

		HAL.IOs->config->setLow(&HAL.IOs->pins->ID_CLK);
   1de34:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de38:	699b      	ldr	r3, [r3, #24]
   1de3a:	3008      	adds	r0, #8
   1de3c:	4798      	blx	r3
		if(HAL.IOs->config->isHigh(&HAL.IOs->pins->ID_CH0))
   1de3e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de44:	3028      	adds	r0, #40	; 0x28
   1de46:	4798      	blx	r3
   1de48:	bb18      	cbnz	r0, 1de92 <shallForceBoot+0x8e>
			return;

		HAL.IOs->config->toOutput(&HAL.IOs->pins->ID_CH0);
   1de4a:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de4e:	68db      	ldr	r3, [r3, #12]
   1de50:	3028      	adds	r0, #40	; 0x28
   1de52:	4798      	blx	r3
		HAL.IOs->config->toInput(&HAL.IOs->pins->ID_CLK);
   1de54:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de58:	691b      	ldr	r3, [r3, #16]
   1de5a:	3008      	adds	r0, #8
   1de5c:	4798      	blx	r3

		HAL.IOs->config->setHigh(&HAL.IOs->pins->ID_CH0);
   1de5e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de62:	695b      	ldr	r3, [r3, #20]
   1de64:	3028      	adds	r0, #40	; 0x28
   1de66:	4798      	blx	r3
		if(!HAL.IOs->config->isHigh(&HAL.IOs->pins->ID_CLK))
   1de68:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de6e:	3008      	adds	r0, #8
   1de70:	4798      	blx	r3
   1de72:	b170      	cbz	r0, 1de92 <shallForceBoot+0x8e>
			return;

		HAL.IOs->config->setLow(&HAL.IOs->pins->ID_CH0);
   1de74:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de78:	699b      	ldr	r3, [r3, #24]
   1de7a:	3028      	adds	r0, #40	; 0x28
   1de7c:	4798      	blx	r3
		if(HAL.IOs->config->isHigh(&HAL.IOs->pins->ID_CLK))
   1de7e:	e9d4 3000 	ldrd	r3, r0, [r4]
   1de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de84:	3008      	adds	r0, #8
   1de86:	4798      	blx	r3
   1de88:	b918      	cbnz	r0, 1de92 <shallForceBoot+0x8e>
			return;

		// not returned, this means pins are tied together
		tmcl_boot();
	}
   1de8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tmcl_boot();
   1de8e:	f000 b99b 	b.w	1e1c8 <tmcl_boot>
	}
   1de92:	bd10      	pop	{r4, pc}
   1de94:	00029d1c 	.word	0x00029d1c

0001de98 <init_reg>:

void init_reg(){
   1de98:	b570      	push	{r4, r5, r6, lr}

#if defined(Landungsbruecke)
	// Default value: Driver enable gets set high by the bootloader
	BLConfig.drvEnableResetValue = 1;
   1de9a:	4b5c      	ldr	r3, [pc, #368]	; (1e00c <init_reg+0x174>)
#endif

	HAL.init();                  // Initialize Hardware Abstraction Layer
   1de9c:	4e5c      	ldr	r6, [pc, #368]	; (1e010 <init_reg+0x178>)
	tmcl_init();                 // Initialize TMCL communication

	tmcdriver_init();            // Initialize dummy driver board --> preset EvalBoards.ch2
	tmcmotioncontroller_init();  // Initialize dummy motion controller board  --> preset EvalBoards.ch1

	VitalSignsMonitor.busy = 1;  // Put state to busy
   1de9e:	4d5d      	ldr	r5, [pc, #372]	; (1e014 <init_reg+0x17c>)
	BLConfig.drvEnableResetValue = 1;
   1dea0:	2401      	movs	r4, #1
void init_reg(){
   1dea2:	b08a      	sub	sp, #40	; 0x28
	BLConfig.drvEnableResetValue = 1;
   1dea4:	605c      	str	r4, [r3, #4]
	HAL.init();                  // Initialize Hardware Abstraction Layer
   1dea6:	6833      	ldr	r3, [r6, #0]
   1dea8:	4798      	blx	r3
	IDDetection_init();          // Initialize board detection
   1deaa:	f000 fec1 	bl	1ec30 <IDDetection_init>
	tmcl_init();                 // Initialize TMCL communication
   1deae:	f000 f8fd 	bl	1e0ac <tmcl_init>
	tmcdriver_init();            // Initialize dummy driver board --> preset EvalBoards.ch2
   1deb2:	f7ea fe37 	bl	8b24 <tmcdriver_init>
	tmcmotioncontroller_init();  // Initialize dummy motion controller board  --> preset EvalBoards.ch1
   1deb6:	f7ea fe4f 	bl	8b58 <tmcmotioncontroller_init>
	Evalboards.driverEnable = DRIVER_ENABLE;
   1deba:	4b57      	ldr	r3, [pc, #348]	; (1e018 <init_reg+0x180>)
	VitalSignsMonitor.busy = 1;  // Put state to busy
   1debc:	706c      	strb	r4, [r5, #1]
	Evalboards.ch1.id = 0;       // preset id for driver board to 0 --> error/not found
   1debe:	2200      	movs	r2, #0
	Evalboards.driverEnable = DRIVER_ENABLE;
   1dec0:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
	Evalboards.ch2.id = 0;       // preset id for driver board to 0 --> error/not found

	// We disable the drivers before configurating anything
	HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO0);
   1dec4:	68f4      	ldr	r4, [r6, #12]
	Evalboards.ch1.id = 0;       // preset id for driver board to 0 --> error/not found
   1dec6:	711a      	strb	r2, [r3, #4]
	Evalboards.ch2.id = 0;       // preset id for driver board to 0 --> error/not found
   1dec8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	HAL.IOs->config->toOutput(&HAL.IOs->pins->DIO0);
   1decc:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ded0:	68db      	ldr	r3, [r3, #12]
   1ded2:	3068      	adds	r0, #104	; 0x68
   1ded4:	4798      	blx	r3
	HAL.IOs->config->setHigh(&HAL.IOs->pins->DIO0);
   1ded6:	e9d4 3000 	ldrd	r3, r0, [r4]
   1deda:	695b      	ldr	r3, [r3, #20]
   1dedc:	3068      	adds	r0, #104	; 0x68
   1dede:	4798      	blx	r3

	IdAssignmentTypeDef ids;
	IDDetection_initialScan(&ids);  // start initial board detection
   1dee0:	4668      	mov	r0, sp
   1dee2:	f000 ffcf 	bl	1ee84 <IDDetection_initialScan>
	IDDetection_initialScan(&ids);  // start second time, first time not 100% reliable, not sure why - too fast after startup?
   1dee6:	4668      	mov	r0, sp
   1dee8:	f000 ffcc 	bl	1ee84 <IDDetection_initialScan>
	if(!ids.ch1.id && !ids.ch2.id)
   1deec:	f89d 2001 	ldrb.w	r2, [sp, #1]
   1def0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1def4:	4313      	orrs	r3, r2
   1def6:	d10b      	bne.n	1df10 <init_reg+0x78>
	{
		shallForceBoot();           // only checking to force jump into bootloader if there are no boards attached
   1def8:	f7ff ff84 	bl	1de04 <shallForceBoot>
		// todo CHECK 2: Workaround: shallForceBoot() changes pin settings - change them again here, since otherwise IDDetection partially breaks (LH)
		HAL.IOs->config->toOutput(&HAL.IOs->pins->ID_CLK);
   1defc:	e9d4 3000 	ldrd	r3, r0, [r4]
   1df00:	68db      	ldr	r3, [r3, #12]
   1df02:	3008      	adds	r0, #8
   1df04:	4798      	blx	r3
		HAL.IOs->config->toInput(&HAL.IOs->pins->ID_CH0);
   1df06:	e9d4 3000 	ldrd	r3, r0, [r4]
   1df0a:	691b      	ldr	r3, [r3, #16]
   1df0c:	3028      	adds	r0, #40	; 0x28
   1df0e:	4798      	blx	r3
	}
	Board_assign(&ids);             // assign boards with detected id

	VitalSignsMonitor.busy 	= 0;    // not busy any more!
   1df10:	2400      	movs	r4, #0
	Board_assign(&ids);             // assign boards with detected id
   1df12:	4668      	mov	r0, sp
   1df14:	f001 f9c8 	bl	1f2a8 <Board_assign>

	// Motor type &  PWM configuration
	tmc4671_writeInt(0, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, 0x00030004);
   1df18:	4620      	mov	r0, r4
   1df1a:	4a40      	ldr	r2, [pc, #256]	; (1e01c <init_reg+0x184>)
	VitalSignsMonitor.busy 	= 0;    // not busy any more!
   1df1c:	706c      	strb	r4, [r5, #1]
	tmc4671_writeInt(0, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, 0x00030004);
   1df1e:	211b      	movs	r1, #27
   1df20:	f004 fe6a 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_POLARITIES, 0x00000000);
   1df24:	4622      	mov	r2, r4
   1df26:	4620      	mov	r0, r4
   1df28:	2117      	movs	r1, #23
   1df2a:	f004 fe65 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_MAXCNT, 0x00000F9F);
   1df2e:	4620      	mov	r0, r4
   1df30:	f640 729f 	movw	r2, #3999	; 0xf9f
   1df34:	2118      	movs	r1, #24
   1df36:	f004 fe5f 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_BBM_H_BBM_L, 0x00000A0A);
   1df3a:	4620      	mov	r0, r4
   1df3c:	f640 220a 	movw	r2, #2570	; 0xa0a
   1df40:	2119      	movs	r1, #25
   1df42:	f004 fe59 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PWM_SV_CHOP, 0x00000007);
   1df46:	4620      	mov	r0, r4
   1df48:	2207      	movs	r2, #7
   1df4a:	211a      	movs	r1, #26
   1df4c:	f004 fe54 	bl	22bf8 <tmc4671_writeInt>

	// ADC configuration
	tmc4671_writeInt(0, TMC4671_ADC_I_SELECT, 0x18000100); // @suppress("Invalid arguments")
   1df50:	4620      	mov	r0, r4
   1df52:	4a33      	ldr	r2, [pc, #204]	; (1e020 <init_reg+0x188>)
   1df54:	210a      	movs	r1, #10
   1df56:	f004 fe4f 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCFG_B_MCFG_A, 0x00100010); // @suppress("Invalid arguments")
   1df5a:	4620      	mov	r0, r4
   1df5c:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   1df60:	2104      	movs	r1, #4
   1df62:	f004 fe49 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCLK_A, 0x20000000); // @suppress("Invalid arguments")
   1df66:	4620      	mov	r0, r4
   1df68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   1df6c:	2105      	movs	r1, #5
   1df6e:	f004 fe43 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MCLK_B, 0x00000000); // @suppress("Invalid arguments")
   1df72:	4622      	mov	r2, r4
   1df74:	4620      	mov	r0, r4
   1df76:	2106      	movs	r1, #6
   1df78:	f004 fe3e 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_dsADC_MDEC_B_MDEC_A, 0x014E014E); // @suppress("Invalid arguments")
   1df7c:	4620      	mov	r0, r4
   1df7e:	4a29      	ldr	r2, [pc, #164]	; (1e024 <init_reg+0x18c>)
   1df80:	2107      	movs	r1, #7
   1df82:	f004 fe39 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ADC_I0_SCALE_OFFSET, 0x0100815B); // @suppress("Invalid arguments")
   1df86:	4620      	mov	r0, r4
   1df88:	4a27      	ldr	r2, [pc, #156]	; (1e028 <init_reg+0x190>)
   1df8a:	2109      	movs	r1, #9
   1df8c:	f004 fe34 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ADC_I1_SCALE_OFFSET, 0x010081CE); // @suppress("Invalid arguments")
   1df90:	4620      	mov	r0, r4
   1df92:	4a26      	ldr	r2, [pc, #152]	; (1e02c <init_reg+0x194>)
   1df94:	2108      	movs	r1, #8
   1df96:	f004 fe2f 	bl	22bf8 <tmc4671_writeInt>

	// ABN encoder settings
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_MODE, 0x00000000); // @suppress("Invalid arguments")
   1df9a:	4622      	mov	r2, r4
   1df9c:	4620      	mov	r0, r4
   1df9e:	2125      	movs	r1, #37	; 0x25
   1dfa0:	f004 fe2a 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_PPR, 0x00001000); // @suppress("Invalid arguments")
   1dfa4:	4620      	mov	r0, r4
   1dfa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1dfaa:	2126      	movs	r1, #38	; 0x26
   1dfac:	f004 fe24 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_COUNT, 0x00000CAD); // @suppress("Invalid arguments")
   1dfb0:	4620      	mov	r0, r4
   1dfb2:	f640 42ad 	movw	r2, #3245	; 0xcad
   1dfb6:	2127      	movs	r1, #39	; 0x27
   1dfb8:	f004 fe1e 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, 0x00000000); // @suppress("Invalid arguments")
   1dfbc:	4622      	mov	r2, r4
   1dfbe:	4620      	mov	r0, r4
   1dfc0:	2129      	movs	r1, #41	; 0x29
   1dfc2:	f004 fe19 	bl	22bf8 <tmc4671_writeInt>

	// Limits
	tmc4671_writeInt(0, TMC4671_PID_TORQUE_FLUX_LIMITS, 0x00000BB8); // @suppress("Invalid arguments")
   1dfc6:	4620      	mov	r0, r4
   1dfc8:	f640 32b8 	movw	r2, #3000	; 0xbb8
   1dfcc:	215e      	movs	r1, #94	; 0x5e
   1dfce:	f004 fe13 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PID_VELOCITY_LIMIT, 0x00000064);
   1dfd2:	4620      	mov	r0, r4
   1dfd4:	2264      	movs	r2, #100	; 0x64
   1dfd6:	2160      	movs	r1, #96	; 0x60
   1dfd8:	f004 fe0e 	bl	22bf8 <tmc4671_writeInt>
	// PI settings
	tmc4671_writeInt(0, TMC4671_PID_TORQUE_P_TORQUE_I, 0x01000100); // @suppress("Invalid arguments")
   1dfdc:	4620      	mov	r0, r4
   1dfde:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
   1dfe2:	2156      	movs	r1, #86	; 0x56
   1dfe4:	f004 fe08 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PID_FLUX_P_FLUX_I, 0x01000100); // @suppress("Invalid arguments")
   1dfe8:	4620      	mov	r0, r4
   1dfea:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
   1dfee:	2154      	movs	r1, #84	; 0x54
   1dff0:	f004 fe02 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PID_VELOCITY_P_VELOCITY_I, 0x271005DC);
   1dff4:	4620      	mov	r0, r4
   1dff6:	4a0e      	ldr	r2, [pc, #56]	; (1e030 <init_reg+0x198>)
   1dff8:	2158      	movs	r1, #88	; 0x58
   1dffa:	f004 fdfd 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PID_POSITION_P_POSITION_I, 0x000F0002);
   1dffe:	4a0d      	ldr	r2, [pc, #52]	; (1e034 <init_reg+0x19c>)
   1e000:	215a      	movs	r1, #90	; 0x5a
   1e002:	4620      	mov	r0, r4
   1e004:	f004 fdf8 	bl	22bf8 <tmc4671_writeInt>


}
   1e008:	b00a      	add	sp, #40	; 0x28
   1e00a:	bd70      	pop	{r4, r5, r6, pc}
   1e00c:	1fff0000 	.word	0x1fff0000
   1e010:	00029d1c 	.word	0x00029d1c
   1e014:	1fff0b34 	.word	0x1fff0b34
   1e018:	1fff5e88 	.word	0x1fff5e88
   1e01c:	00030004 	.word	0x00030004
   1e020:	18000100 	.word	0x18000100
   1e024:	014e014e 	.word	0x014e014e
   1e028:	0100815b 	.word	0x0100815b
   1e02c:	010081ce 	.word	0x010081ce
   1e030:	271005dc 	.word	0x271005dc
   1e034:	000f0002 	.word	0x000f0002

0001e038 <setDriversEnable>:
		break;
	}
}

static void setDriversEnable()
{
   1e038:	b510      	push	{r4, lr}
	vitalsignsmonitor_clearOvervoltageErrors();
   1e03a:	f001 fb53 	bl	1f6e4 <vitalsignsmonitor_clearOvervoltageErrors>

	Evalboards.driverEnable = (ActualCommand.Value.Int32) ? DRIVER_ENABLE : DRIVER_DISABLE;
   1e03e:	4b08      	ldr	r3, [pc, #32]	; (1e060 <setDriversEnable+0x28>)
   1e040:	4c08      	ldr	r4, [pc, #32]	; (1e064 <setDriversEnable+0x2c>)
   1e042:	689b      	ldr	r3, [r3, #8]
   1e044:	3b00      	subs	r3, #0
   1e046:	bf18      	it	ne
   1e048:	2301      	movne	r3, #1
   1e04a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	Evalboards.ch1.enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1e04e:	2002      	movs	r0, #2
   1e050:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e052:	4798      	blx	r3
	Evalboards.ch2.enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1e054:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   1e058:	2002      	movs	r0, #2
}
   1e05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Evalboards.ch2.enableDriver(DRIVER_USE_GLOBAL_ENABLE);
   1e05e:	4718      	bx	r3
   1e060:	1fff6604 	.word	0x1fff6604
   1e064:	1fff5e88 	.word	0x1fff5e88

0001e068 <setTMCLStatus>:
	if(evalError == TMC_ERROR_NONE)          ActualReply.Status = REPLY_OK;
   1e068:	b918      	cbnz	r0, 1e072 <setTMCLStatus+0xa>
   1e06a:	4b0f      	ldr	r3, [pc, #60]	; (1e0a8 <setTMCLStatus+0x40>)
   1e06c:	2264      	movs	r2, #100	; 0x64
	else if(evalError & TMC_ERROR_CHIP)      ActualReply.Status = REPLY_EEPROM_LOCKED;
   1e06e:	701a      	strb	r2, [r3, #0]
}
   1e070:	4770      	bx	lr
	else if(evalError & TMC_ERROR_FUNCTION)  ActualReply.Status = REPLY_INVALID_CMD;
   1e072:	0783      	lsls	r3, r0, #30
   1e074:	d502      	bpl.n	1e07c <setTMCLStatus+0x14>
   1e076:	4b0c      	ldr	r3, [pc, #48]	; (1e0a8 <setTMCLStatus+0x40>)
   1e078:	2202      	movs	r2, #2
   1e07a:	e7f8      	b.n	1e06e <setTMCLStatus+0x6>
	else if(evalError & TMC_ERROR_MOTOR)     ActualReply.Status = REPLY_INVALID_TYPE; // todo CHECK ADD 2: Different errors for Evalboard type/motor errors? (LH) #1
   1e07c:	f010 0f0c 	tst.w	r0, #12
   1e080:	d002      	beq.n	1e088 <setTMCLStatus+0x20>
	else if(evalError & TMC_ERROR_TYPE)      ActualReply.Status = REPLY_INVALID_TYPE;
   1e082:	4b09      	ldr	r3, [pc, #36]	; (1e0a8 <setTMCLStatus+0x40>)
   1e084:	2203      	movs	r2, #3
   1e086:	e7f2      	b.n	1e06e <setTMCLStatus+0x6>
	else if(evalError & TMC_ERROR_VALUE)     ActualReply.Status = REPLY_INVALID_VALUE;
   1e088:	06c1      	lsls	r1, r0, #27
   1e08a:	d502      	bpl.n	1e092 <setTMCLStatus+0x2a>
   1e08c:	4b06      	ldr	r3, [pc, #24]	; (1e0a8 <setTMCLStatus+0x40>)
   1e08e:	2204      	movs	r2, #4
   1e090:	e7ed      	b.n	1e06e <setTMCLStatus+0x6>
	else if(evalError & TMC_ERROR_NOT_DONE)  ActualReply.Status = REPLY_DELAYED;
   1e092:	0682      	lsls	r2, r0, #26
   1e094:	d502      	bpl.n	1e09c <setTMCLStatus+0x34>
   1e096:	4b04      	ldr	r3, [pc, #16]	; (1e0a8 <setTMCLStatus+0x40>)
   1e098:	2280      	movs	r2, #128	; 0x80
   1e09a:	e7e8      	b.n	1e06e <setTMCLStatus+0x6>
	else if(evalError & TMC_ERROR_CHIP)      ActualReply.Status = REPLY_EEPROM_LOCKED;
   1e09c:	0643      	lsls	r3, r0, #25
   1e09e:	d5e7      	bpl.n	1e070 <setTMCLStatus+0x8>
   1e0a0:	4b01      	ldr	r3, [pc, #4]	; (1e0a8 <setTMCLStatus+0x40>)
   1e0a2:	2205      	movs	r2, #5
   1e0a4:	e7e3      	b.n	1e06e <setTMCLStatus+0x6>
   1e0a6:	bf00      	nop
   1e0a8:	1fff6610 	.word	0x1fff6610

0001e0ac <tmcl_init>:
{
   1e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	interfaces[0]        = *HAL.USB;
   1e0ae:	4f11      	ldr	r7, [pc, #68]	; (1e0f4 <tmcl_init+0x48>)
	ActualCommand.Error  = TMCL_RX_ERROR_NODATA;
   1e0b0:	4b11      	ldr	r3, [pc, #68]	; (1e0f8 <tmcl_init+0x4c>)
	interfaces[0]        = *HAL.USB;
   1e0b2:	697e      	ldr	r6, [r7, #20]
   1e0b4:	4c11      	ldr	r4, [pc, #68]	; (1e0fc <tmcl_init+0x50>)
	ActualCommand.Error  = TMCL_RX_ERROR_NODATA;
   1e0b6:	2201      	movs	r2, #1
   1e0b8:	605a      	str	r2, [r3, #4]
	interfaces[0]        = *HAL.USB;
   1e0ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e0bc:	4625      	mov	r5, r4
   1e0be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e0c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e0c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e0c4:	6833      	ldr	r3, [r6, #0]
	interfaces[1]        = *HAL.RS232;
   1e0c6:	6a3e      	ldr	r6, [r7, #32]
	interfaces[0]        = *HAL.USB;
   1e0c8:	602b      	str	r3, [r5, #0]
	interfaces[1]        = *HAL.RS232;
   1e0ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e0cc:	f104 0524 	add.w	r5, r4, #36	; 0x24
   1e0d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e0d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e0d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e0d6:	6833      	ldr	r3, [r6, #0]
   1e0d8:	602b      	str	r3, [r5, #0]
	interfaces[2]        = *HAL.WLAN;
   1e0da:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   1e0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e0de:	3448      	adds	r4, #72	; 0x48
   1e0e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e0e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e0e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e0e6:	682b      	ldr	r3, [r5, #0]
   1e0e8:	6023      	str	r3, [r4, #0]
	numberOfInterfaces   = 3;
   1e0ea:	4b05      	ldr	r3, [pc, #20]	; (1e100 <tmcl_init+0x54>)
   1e0ec:	2203      	movs	r2, #3
   1e0ee:	601a      	str	r2, [r3, #0]
}
   1e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e0f2:	bf00      	nop
   1e0f4:	00029d1c 	.word	0x00029d1c
   1e0f8:	1fff6604 	.word	0x1fff6604
   1e0fc:	1fff6570 	.word	0x1fff6570
   1e100:	1fff6600 	.word	0x1fff6600

0001e104 <tx>:
{
   1e104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(ActualReply.IsSpecial)
   1e106:	4b18      	ldr	r3, [pc, #96]	; (1e168 <tx+0x64>)
   1e108:	7c5a      	ldrb	r2, [r3, #17]
   1e10a:	b172      	cbz	r2, 1e12a <tx+0x26>
   1e10c:	3308      	adds	r3, #8
   1e10e:	a901      	add	r1, sp, #4
   1e110:	2209      	movs	r2, #9
			reply[i] = ActualReply.Special[i];
   1e112:	f813 4b01 	ldrb.w	r4, [r3], #1
   1e116:	f801 4b01 	strb.w	r4, [r1], #1
		for(int i = 0; i < 9; i++)
   1e11a:	3a01      	subs	r2, #1
   1e11c:	d1f9      	bne.n	1e112 <tx+0xe>
	RXTX->txN(reply, 9);
   1e11e:	6903      	ldr	r3, [r0, #16]
   1e120:	2109      	movs	r1, #9
   1e122:	a801      	add	r0, sp, #4
   1e124:	4798      	blx	r3
}
   1e126:	b004      	add	sp, #16
   1e128:	bd70      	pop	{r4, r5, r6, pc}
		checkSum += ActualReply.Status;
   1e12a:	781d      	ldrb	r5, [r3, #0]
		checkSum += ActualReply.Opcode;
   1e12c:	785c      	ldrb	r4, [r3, #1]
		checkSum += ActualReply.Value.Byte[3];
   1e12e:	79de      	ldrb	r6, [r3, #7]
   1e130:	6859      	ldr	r1, [r3, #4]
		reply[2] = ActualReply.Status;
   1e132:	f88d 5006 	strb.w	r5, [sp, #6]
		checkSum += ActualReply.Opcode;
   1e136:	192a      	adds	r2, r5, r4
   1e138:	3203      	adds	r2, #3
		checkSum += ActualReply.Value.Byte[3];
   1e13a:	fa56 f282 	uxtab	r2, r6, r2
		checkSum += ActualReply.Value.Byte[2];
   1e13e:	799e      	ldrb	r6, [r3, #6]
		reply[3] = ActualReply.Opcode;
   1e140:	f88d 4007 	strb.w	r4, [sp, #7]
		checkSum += ActualReply.Value.Byte[2];
   1e144:	fa56 f282 	uxtab	r2, r6, r2
		checkSum += ActualReply.Value.Byte[1];
   1e148:	795e      	ldrb	r6, [r3, #5]
		checkSum += ActualReply.Value.Byte[0];
   1e14a:	791b      	ldrb	r3, [r3, #4]
		checkSum += ActualReply.Value.Byte[1];
   1e14c:	fa56 f282 	uxtab	r2, r6, r2
		checkSum += ActualReply.Value.Byte[0];
   1e150:	fa53 f382 	uxtab	r3, r3, r2
		reply[1] = SERIAL_MODULE_ADDRESS;
   1e154:	ba09      	rev	r1, r1
		reply[0] = SERIAL_HOST_ADDRESS;
   1e156:	f44f 7281 	mov.w	r2, #258	; 0x102
   1e15a:	f8ad 2004 	strh.w	r2, [sp, #4]
		reply[4] = ActualReply.Value.Byte[3];
   1e15e:	9102      	str	r1, [sp, #8]
		reply[8] = checkSum;
   1e160:	f88d 300c 	strb.w	r3, [sp, #12]
   1e164:	e7db      	b.n	1e11e <tx+0x1a>
   1e166:	bf00      	nop
   1e168:	1fff6610 	.word	0x1fff6610

0001e16c <rx>:
{
   1e16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(!RXTX->rxN(cmd, 9))
   1e16e:	6943      	ldr	r3, [r0, #20]
   1e170:	2109      	movs	r1, #9
   1e172:	a801      	add	r0, sp, #4
   1e174:	4798      	blx	r3
   1e176:	b928      	cbnz	r0, 1e184 <rx+0x18>
		ActualCommand.Error = TMCL_RX_ERROR_NODATA;
   1e178:	4b12      	ldr	r3, [pc, #72]	; (1e1c4 <rx+0x58>)
   1e17a:	2201      	movs	r2, #1
	ActualCommand.Error          = TMCL_RX_ERROR_NONE;
   1e17c:	605a      	str	r2, [r3, #4]
}
   1e17e:	b005      	add	sp, #20
   1e180:	f85d fb04 	ldr.w	pc, [sp], #4
	for(int i = 0; i < 8; i++)
   1e184:	2100      	movs	r1, #0
   1e186:	aa01      	add	r2, sp, #4
	uint8_t checkSum = 0;
   1e188:	460b      	mov	r3, r1
		checkSum += cmd[i];
   1e18a:	f812 0b01 	ldrb.w	r0, [r2], #1
	for(int i = 0; i < 8; i++)
   1e18e:	3101      	adds	r1, #1
		checkSum += cmd[i];
   1e190:	4403      	add	r3, r0
	for(int i = 0; i < 8; i++)
   1e192:	2908      	cmp	r1, #8
		checkSum += cmd[i];
   1e194:	b2db      	uxtb	r3, r3
	for(int i = 0; i < 8; i++)
   1e196:	d1f8      	bne.n	1e18a <rx+0x1e>
	if(checkSum != cmd[8])
   1e198:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1e19c:	429a      	cmp	r2, r3
   1e19e:	4b09      	ldr	r3, [pc, #36]	; (1e1c4 <rx+0x58>)
   1e1a0:	d001      	beq.n	1e1a6 <rx+0x3a>
		ActualCommand.Error	= TMCL_RX_ERROR_CHECKSUM;
   1e1a2:	2202      	movs	r2, #2
   1e1a4:	e7ea      	b.n	1e17c <rx+0x10>
	ActualCommand.Opcode         = cmd[1];
   1e1a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1e1aa:	701a      	strb	r2, [r3, #0]
	ActualCommand.Type           = cmd[2];
   1e1ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1e1b0:	705a      	strb	r2, [r3, #1]
	ActualCommand.Motor          = cmd[3];
   1e1b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e1b6:	709a      	strb	r2, [r3, #2]
	ActualCommand.Value.Byte[0]  = cmd[7];
   1e1b8:	9a02      	ldr	r2, [sp, #8]
   1e1ba:	ba12      	rev	r2, r2
   1e1bc:	609a      	str	r2, [r3, #8]
	ActualCommand.Error          = TMCL_RX_ERROR_NONE;
   1e1be:	2200      	movs	r2, #0
   1e1c0:	e7dc      	b.n	1e17c <rx+0x10>
   1e1c2:	bf00      	nop
   1e1c4:	1fff6604 	.word	0x1fff6604

0001e1c8 <tmcl_boot>:
{
   1e1c8:	b570      	push	{r4, r5, r6, lr}
	if(Evalboards.ch1.id == ID_TMC4670 || Evalboards.ch1.id == ID_TMC4671)
   1e1ca:	4c1c      	ldr	r4, [pc, #112]	; (1e23c <tmcl_boot+0x74>)
   1e1cc:	4e1c      	ldr	r6, [pc, #112]	; (1e240 <tmcl_boot+0x78>)
   1e1ce:	7923      	ldrb	r3, [r4, #4]
   1e1d0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1e1d4:	3b09      	subs	r3, #9
   1e1d6:	bf18      	it	ne
   1e1d8:	2301      	movne	r3, #1
	Evalboards.driverEnable = DRIVER_DISABLE;
   1e1da:	2500      	movs	r5, #0
   1e1dc:	6073      	str	r3, [r6, #4]
   1e1de:	f884 50f0 	strb.w	r5, [r4, #240]	; 0xf0
	Evalboards.ch1.enableDriver(DRIVER_DISABLE); // todo CHECK 2: the ch1/2 deInit() calls should already disable the drivers - keep this driver disabling to be sure or remove it and leave the disabling to deInit? (LH)
   1e1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e1e4:	4628      	mov	r0, r5
   1e1e6:	4798      	blx	r3
	Evalboards.ch2.enableDriver(DRIVER_DISABLE);
   1e1e8:	4628      	mov	r0, r5
   1e1ea:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   1e1ee:	4798      	blx	r3
	Evalboards.ch1.deInit();
   1e1f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e1f2:	4798      	blx	r3
	Evalboards.ch2.deInit();
   1e1f4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
	HAL.USB->deInit();
   1e1f8:	4c12      	ldr	r4, [pc, #72]	; (1e244 <tmcl_boot+0x7c>)
	Evalboards.ch2.deInit();
   1e1fa:	4798      	blx	r3
	HAL.USB->deInit();
   1e1fc:	6963      	ldr	r3, [r4, #20]
   1e1fe:	685b      	ldr	r3, [r3, #4]
   1e200:	4798      	blx	r3
	wait(500);
   1e202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1e206:	f7fe f89b 	bl	1c340 <wait>
	HAL.Timer->deInit();
   1e20a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e20c:	685b      	ldr	r3, [r3, #4]
   1e20e:	4798      	blx	r3
	HAL.RS232->deInit();
   1e210:	6a23      	ldr	r3, [r4, #32]
   1e212:	685b      	ldr	r3, [r3, #4]
   1e214:	4798      	blx	r3
	HAL.WLAN->deInit();
   1e216:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e218:	685b      	ldr	r3, [r3, #4]
   1e21a:	4798      	blx	r3
	HAL.ADCs->deInit();
   1e21c:	69e3      	ldr	r3, [r4, #28]
   1e21e:	69db      	ldr	r3, [r3, #28]
   1e220:	4798      	blx	r3
	StepDir_deInit();
   1e222:	f001 fd4f 	bl	1fcc4 <StepDir_deInit>
	IDDetection_deInit();
   1e226:	f000 fd59 	bl	1ecdc <IDDetection_deInit>
	HAL.NVIC_DeInit();
   1e22a:	68a3      	ldr	r3, [r4, #8]
   1e22c:	4798      	blx	r3
	BLConfig.BLMagic = 0x12345678;
   1e22e:	4b06      	ldr	r3, [pc, #24]	; (1e248 <tmcl_boot+0x80>)
   1e230:	6033      	str	r3, [r6, #0]
	HAL.reset(true);
   1e232:	2001      	movs	r0, #1
   1e234:	6863      	ldr	r3, [r4, #4]
}
   1e236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL.reset(true);
   1e23a:	4718      	bx	r3
   1e23c:	1fff5e88 	.word	0x1fff5e88
   1e240:	1fff0000 	.word	0x1fff0000
   1e244:	00029d1c 	.word	0x00029d1c
   1e248:	12345678 	.word	0x12345678

0001e24c <ExecuteActualCommand>:
{
   1e24c:	b570      	push	{r4, r5, r6, lr}
	ActualReply.Opcode = ActualCommand.Opcode;
   1e24e:	4ab5      	ldr	r2, [pc, #724]	; (1e524 <ExecuteActualCommand+0x2d8>)
   1e250:	48b5      	ldr	r0, [pc, #724]	; (1e528 <ExecuteActualCommand+0x2dc>)
	if(ActualCommand.Error == TMCL_RX_ERROR_CHECKSUM)
   1e252:	6854      	ldr	r4, [r2, #4]
	ActualReply.Opcode = ActualCommand.Opcode;
   1e254:	7813      	ldrb	r3, [r2, #0]
   1e256:	7043      	strb	r3, [r0, #1]
	ActualReply.Status = REPLY_OK;
   1e258:	2164      	movs	r1, #100	; 0x64
   1e25a:	7001      	strb	r1, [r0, #0]
	if(ActualCommand.Error == TMCL_RX_ERROR_CHECKSUM)
   1e25c:	2c02      	cmp	r4, #2
	ActualReply.Value.Int32 = ActualCommand.Value.Int32;
   1e25e:	6891      	ldr	r1, [r2, #8]
   1e260:	6041      	str	r1, [r0, #4]
{
   1e262:	b08a      	sub	sp, #40	; 0x28
   1e264:	4614      	mov	r4, r2
   1e266:	4605      	mov	r5, r0
	if(ActualCommand.Error == TMCL_RX_ERROR_CHECKSUM)
   1e268:	d105      	bne.n	1e276 <ExecuteActualCommand+0x2a>
		ActualReply.Value.Int32  = 0;
   1e26a:	2300      	movs	r3, #0
   1e26c:	6043      	str	r3, [r0, #4]
		ActualReply.Status       = REPLY_CHKERR;
   1e26e:	2301      	movs	r3, #1
   1e270:	7003      	strb	r3, [r0, #0]
}
   1e272:	b00a      	add	sp, #40	; 0x28
   1e274:	bd70      	pop	{r4, r5, r6, pc}
	switch(ActualCommand.Opcode)
   1e276:	2bab      	cmp	r3, #171	; 0xab
   1e278:	f200 8092 	bhi.w	1e3a0 <ExecuteActualCommand+0x154>
   1e27c:	2b87      	cmp	r3, #135	; 0x87
   1e27e:	d805      	bhi.n	1e28c <ExecuteActualCommand+0x40>
   1e280:	2b0f      	cmp	r3, #15
   1e282:	d875      	bhi.n	1e370 <ExecuteActualCommand+0x124>
   1e284:	2b00      	cmp	r3, #0
   1e286:	d14f      	bne.n	1e328 <ExecuteActualCommand+0xdc>
		ActualReply.Status = REPLY_INVALID_CMD;
   1e288:	2302      	movs	r3, #2
   1e28a:	e1df      	b.n	1e64c <ExecuteActualCommand+0x400>
   1e28c:	3b88      	subs	r3, #136	; 0x88
   1e28e:	2b23      	cmp	r3, #35	; 0x23
   1e290:	d8fa      	bhi.n	1e288 <ExecuteActualCommand+0x3c>
   1e292:	a201      	add	r2, pc, #4	; (adr r2, 1e298 <ExecuteActualCommand+0x4c>)
   1e294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e298:	0001e683 	.word	0x0001e683
   1e29c:	0001e289 	.word	0x0001e289
   1e2a0:	0001e289 	.word	0x0001e289
   1e2a4:	0001e289 	.word	0x0001e289
   1e2a8:	0001e289 	.word	0x0001e289
   1e2ac:	0001e289 	.word	0x0001e289
   1e2b0:	0001e289 	.word	0x0001e289
   1e2b4:	0001e70f 	.word	0x0001e70f
   1e2b8:	0001e797 	.word	0x0001e797
   1e2bc:	0001e7a5 	.word	0x0001e7a5
   1e2c0:	0001e7d9 	.word	0x0001e7d9
   1e2c4:	0001e7e5 	.word	0x0001e7e5
   1e2c8:	0001e7ed 	.word	0x0001e7ed
   1e2cc:	0001e80d 	.word	0x0001e80d
   1e2d0:	0001e815 	.word	0x0001e815
   1e2d4:	0001e83b 	.word	0x0001e83b
   1e2d8:	0001e851 	.word	0x0001e851
   1e2dc:	0001e289 	.word	0x0001e289
   1e2e0:	0001e289 	.word	0x0001e289
   1e2e4:	0001e289 	.word	0x0001e289
   1e2e8:	0001e289 	.word	0x0001e289
   1e2ec:	0001e289 	.word	0x0001e289
   1e2f0:	0001e289 	.word	0x0001e289
   1e2f4:	0001e289 	.word	0x0001e289
   1e2f8:	0001e893 	.word	0x0001e893
   1e2fc:	0001e289 	.word	0x0001e289
   1e300:	0001e289 	.word	0x0001e289
   1e304:	0001e289 	.word	0x0001e289
   1e308:	0001e289 	.word	0x0001e289
   1e30c:	0001e289 	.word	0x0001e289
   1e310:	0001e289 	.word	0x0001e289
   1e314:	0001e289 	.word	0x0001e289
   1e318:	0001e289 	.word	0x0001e289
   1e31c:	0001e289 	.word	0x0001e289
   1e320:	0001e8c5 	.word	0x0001e8c5
   1e324:	0001e8e5 	.word	0x0001e8e5
   1e328:	3b01      	subs	r3, #1
   1e32a:	2b0e      	cmp	r3, #14
   1e32c:	d8ac      	bhi.n	1e288 <ExecuteActualCommand+0x3c>
   1e32e:	a201      	add	r2, pc, #4	; (adr r2, 1e334 <ExecuteActualCommand+0xe8>)
   1e330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e334:	0001e3bf 	.word	0x0001e3bf
   1e338:	0001e3e5 	.word	0x0001e3e5
   1e33c:	0001e3ff 	.word	0x0001e3ff
   1e340:	0001e41d 	.word	0x0001e41d
   1e344:	0001e489 	.word	0x0001e489
   1e348:	0001e4b1 	.word	0x0001e4b1
   1e34c:	0001e289 	.word	0x0001e289
   1e350:	0001e289 	.word	0x0001e289
   1e354:	0001e4d3 	.word	0x0001e4d3
   1e358:	0001e55d 	.word	0x0001e55d
   1e35c:	0001e289 	.word	0x0001e289
   1e360:	0001e289 	.word	0x0001e289
   1e364:	0001e289 	.word	0x0001e289
   1e368:	0001e289 	.word	0x0001e289
   1e36c:	0001e5c1 	.word	0x0001e5c1
	switch(ActualCommand.Opcode)
   1e370:	3b40      	subs	r3, #64	; 0x40
   1e372:	b2da      	uxtb	r2, r3
   1e374:	2a06      	cmp	r2, #6
   1e376:	d887      	bhi.n	1e288 <ExecuteActualCommand+0x3c>
   1e378:	2b06      	cmp	r3, #6
   1e37a:	d885      	bhi.n	1e288 <ExecuteActualCommand+0x3c>
   1e37c:	a201      	add	r2, pc, #4	; (adr r2, 1e384 <ExecuteActualCommand+0x138>)
   1e37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e382:	bf00      	nop
   1e384:	0001e4ff 	.word	0x0001e4ff
   1e388:	0001e60d 	.word	0x0001e60d
   1e38c:	0001e62d 	.word	0x0001e62d
   1e390:	0001e289 	.word	0x0001e289
   1e394:	0001e65d 	.word	0x0001e65d
   1e398:	0001e7d9 	.word	0x0001e7d9
   1e39c:	0001e67b 	.word	0x0001e67b
   1e3a0:	2bf2      	cmp	r3, #242	; 0xf2
   1e3a2:	f000 82af 	beq.w	1e904 <ExecuteActualCommand+0x6b8>
   1e3a6:	2bff      	cmp	r3, #255	; 0xff
   1e3a8:	f47f af6e 	bne.w	1e288 <ExecuteActualCommand+0x3c>
	}
}

static void SoftwareReset(void)
{
	if(ActualCommand.Value.Int32 == 1234)
   1e3ac:	f240 43d2 	movw	r3, #1234	; 0x4d2
   1e3b0:	4299      	cmp	r1, r3
   1e3b2:	f47f af5e 	bne.w	1e272 <ExecuteActualCommand+0x26>
		resetRequest = true;
   1e3b6:	4b5d      	ldr	r3, [pc, #372]	; (1e52c <ExecuteActualCommand+0x2e0>)
   1e3b8:	2201      	movs	r2, #1
   1e3ba:	601a      	str	r2, [r3, #0]
   1e3bc:	e759      	b.n	1e272 <ExecuteActualCommand+0x26>
		if(setTMCLStatus(Evalboards.ch1.right(ActualCommand.Motor, ActualCommand.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e3be:	4d5c      	ldr	r5, [pc, #368]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e3c0:	78a0      	ldrb	r0, [r4, #2]
   1e3c2:	6a2b      	ldr	r3, [r5, #32]
   1e3c4:	4798      	blx	r3
   1e3c6:	b2c0      	uxtb	r0, r0
   1e3c8:	f7ff fe4e 	bl	1e068 <setTMCLStatus>
   1e3cc:	0781      	lsls	r1, r0, #30
   1e3ce:	f57f af50 	bpl.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.right(ActualCommand.Motor, ActualCommand.Value.Int32));
   1e3d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
			setTMCLStatus(Evalboards.ch2.left(ActualCommand.Motor, ActualCommand.Value.Int32));
   1e3d6:	68a1      	ldr	r1, [r4, #8]
   1e3d8:	78a0      	ldrb	r0, [r4, #2]
   1e3da:	4798      	blx	r3
   1e3dc:	b2c0      	uxtb	r0, r0
   1e3de:	f7ff fe43 	bl	1e068 <setTMCLStatus>
   1e3e2:	e746      	b.n	1e272 <ExecuteActualCommand+0x26>
		if(setTMCLStatus(Evalboards.ch1.left(ActualCommand.Motor, ActualCommand.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e3e4:	4d52      	ldr	r5, [pc, #328]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e3e6:	78a0      	ldrb	r0, [r4, #2]
   1e3e8:	69eb      	ldr	r3, [r5, #28]
   1e3ea:	4798      	blx	r3
   1e3ec:	b2c0      	uxtb	r0, r0
   1e3ee:	f7ff fe3b 	bl	1e068 <setTMCLStatus>
   1e3f2:	0782      	lsls	r2, r0, #30
   1e3f4:	f57f af3d 	bpl.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.left(ActualCommand.Motor, ActualCommand.Value.Int32));
   1e3f8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   1e3fc:	e7eb      	b.n	1e3d6 <ExecuteActualCommand+0x18a>
		if(setTMCLStatus(Evalboards.ch1.stop(ActualCommand.Motor)) & TMC_ERROR_FUNCTION)
   1e3fe:	4d4c      	ldr	r5, [pc, #304]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e400:	78a0      	ldrb	r0, [r4, #2]
   1e402:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e404:	4798      	blx	r3
   1e406:	b2c0      	uxtb	r0, r0
   1e408:	f7ff fe2e 	bl	1e068 <setTMCLStatus>
   1e40c:	0783      	lsls	r3, r0, #30
   1e40e:	f57f af30 	bpl.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.stop(ActualCommand.Motor));
   1e412:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   1e416:	78a0      	ldrb	r0, [r4, #2]
   1e418:	4798      	blx	r3
   1e41a:	e7df      	b.n	1e3dc <ExecuteActualCommand+0x190>
		switch(ActualCommand.Type)
   1e41c:	7863      	ldrb	r3, [r4, #1]
   1e41e:	2b01      	cmp	r3, #1
   1e420:	d010      	beq.n	1e444 <ExecuteActualCommand+0x1f8>
   1e422:	2b02      	cmp	r3, #2
   1e424:	d023      	beq.n	1e46e <ExecuteActualCommand+0x222>
   1e426:	2b00      	cmp	r3, #0
   1e428:	d16f      	bne.n	1e50a <ExecuteActualCommand+0x2be>
			if(setTMCLStatus(Evalboards.ch1.moveTo(ActualCommand.Motor, ActualCommand.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e42a:	4d41      	ldr	r5, [pc, #260]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e42c:	78a0      	ldrb	r0, [r4, #2]
   1e42e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1e430:	4798      	blx	r3
   1e432:	b2c0      	uxtb	r0, r0
   1e434:	f7ff fe18 	bl	1e068 <setTMCLStatus>
   1e438:	0786      	lsls	r6, r0, #30
   1e43a:	f57f af1a 	bpl.w	1e272 <ExecuteActualCommand+0x26>
				setTMCLStatus(Evalboards.ch2.moveTo(ActualCommand.Motor, ActualCommand.Value.Int32));
   1e43e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   1e442:	e7c8      	b.n	1e3d6 <ExecuteActualCommand+0x18a>
			if(setTMCLStatus(Evalboards.ch1.moveBy(ActualCommand.Motor, &ActualCommand.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e444:	4e3a      	ldr	r6, [pc, #232]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e446:	493b      	ldr	r1, [pc, #236]	; (1e534 <ExecuteActualCommand+0x2e8>)
   1e448:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e44a:	78a0      	ldrb	r0, [r4, #2]
   1e44c:	4798      	blx	r3
   1e44e:	b2c0      	uxtb	r0, r0
   1e450:	f7ff fe0a 	bl	1e068 <setTMCLStatus>
   1e454:	0780      	lsls	r0, r0, #30
   1e456:	d507      	bpl.n	1e468 <ExecuteActualCommand+0x21c>
				setTMCLStatus(Evalboards.ch2.moveBy(ActualCommand.Motor, &ActualCommand.Value.Int32));
   1e458:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
   1e45c:	4935      	ldr	r1, [pc, #212]	; (1e534 <ExecuteActualCommand+0x2e8>)
   1e45e:	78a0      	ldrb	r0, [r4, #2]
   1e460:	4798      	blx	r3
   1e462:	b2c0      	uxtb	r0, r0
   1e464:	f7ff fe00 	bl	1e068 <setTMCLStatus>
			ActualReply.Value.Int32 = ActualCommand.Value.Int32;
   1e468:	68a3      	ldr	r3, [r4, #8]
			ActualReply.Value.Int32 = VitalSignsMonitor.errors;
   1e46a:	606b      	str	r3, [r5, #4]
			break;
   1e46c:	e701      	b.n	1e272 <ExecuteActualCommand+0x26>
			if(setTMCLStatus(Evalboards.ch1.moveProfile(ActualCommand.Motor, ActualCommand.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e46e:	4d30      	ldr	r5, [pc, #192]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e470:	78a0      	ldrb	r0, [r4, #2]
   1e472:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e474:	4798      	blx	r3
   1e476:	b2c0      	uxtb	r0, r0
   1e478:	f7ff fdf6 	bl	1e068 <setTMCLStatus>
   1e47c:	0781      	lsls	r1, r0, #30
   1e47e:	f57f aef8 	bpl.w	1e272 <ExecuteActualCommand+0x26>
				setTMCLStatus(Evalboards.ch2.moveProfile(ActualCommand.Motor, ActualCommand.Value.Int32));
   1e482:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
   1e486:	e7a6      	b.n	1e3d6 <ExecuteActualCommand+0x18a>
		if(setTMCLStatus(Evalboards.ch1.SAP(ActualCommand.Type, ActualCommand.Motor, ActualCommand.Value.Int32)) & (TMC_ERROR_TYPE | TMC_ERROR_FUNCTION))
   1e488:	4d29      	ldr	r5, [pc, #164]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e48a:	7860      	ldrb	r0, [r4, #1]
   1e48c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e48e:	460a      	mov	r2, r1
   1e490:	78a1      	ldrb	r1, [r4, #2]
   1e492:	4798      	blx	r3
   1e494:	b2c0      	uxtb	r0, r0
   1e496:	f7ff fde7 	bl	1e068 <setTMCLStatus>
   1e49a:	f010 0f06 	tst.w	r0, #6
   1e49e:	f43f aee8 	beq.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.SAP(ActualCommand.Type, ActualCommand.Motor, ActualCommand.Value.Int32));
   1e4a2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   1e4a6:	68a2      	ldr	r2, [r4, #8]
			setTMCLStatus(Evalboards.ch2.getMax(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32));
   1e4a8:	78a1      	ldrb	r1, [r4, #2]
   1e4aa:	7860      	ldrb	r0, [r4, #1]
   1e4ac:	4798      	blx	r3
   1e4ae:	e795      	b.n	1e3dc <ExecuteActualCommand+0x190>
		if(setTMCLStatus(Evalboards.ch1.GAP(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32)) & (TMC_ERROR_TYPE | TMC_ERROR_FUNCTION))
   1e4b0:	4d1f      	ldr	r5, [pc, #124]	; (1e530 <ExecuteActualCommand+0x2e4>)
   1e4b2:	4a21      	ldr	r2, [pc, #132]	; (1e538 <ExecuteActualCommand+0x2ec>)
   1e4b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1e4b6:	78a1      	ldrb	r1, [r4, #2]
   1e4b8:	7860      	ldrb	r0, [r4, #1]
   1e4ba:	4798      	blx	r3
   1e4bc:	b2c0      	uxtb	r0, r0
   1e4be:	f7ff fdd3 	bl	1e068 <setTMCLStatus>
   1e4c2:	f010 0f06 	tst.w	r0, #6
   1e4c6:	f43f aed4 	beq.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.GAP(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32));
   1e4ca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
			setTMCLStatus(Evalboards.ch2.getMax(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32));
   1e4ce:	4a1a      	ldr	r2, [pc, #104]	; (1e538 <ExecuteActualCommand+0x2ec>)
   1e4d0:	e7ea      	b.n	1e4a8 <ExecuteActualCommand+0x25c>
	switch(ActualCommand.Type)
   1e4d2:	7863      	ldrb	r3, [r4, #1]
   1e4d4:	3b01      	subs	r3, #1
   1e4d6:	2b05      	cmp	r3, #5
   1e4d8:	d817      	bhi.n	1e50a <ExecuteActualCommand+0x2be>
   1e4da:	a201      	add	r2, pc, #4	; (adr r2, 1e4e0 <ExecuteActualCommand+0x294>)
   1e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e4e0:	0001e4f9 	.word	0x0001e4f9
   1e4e4:	0001e4ff 	.word	0x0001e4ff
   1e4e8:	0001e505 	.word	0x0001e505
   1e4ec:	0001e273 	.word	0x0001e273
   1e4f0:	0001e50b 	.word	0x0001e50b
   1e4f4:	0001e545 	.word	0x0001e545
		VitalSignsMonitor.errorMask = ActualCommand.Value.Int32;
   1e4f8:	4b10      	ldr	r3, [pc, #64]	; (1e53c <ExecuteActualCommand+0x2f0>)
   1e4fa:	6059      	str	r1, [r3, #4]
		break;
   1e4fc:	e6b9      	b.n	1e272 <ExecuteActualCommand+0x26>
		setDriversEnable();
   1e4fe:	f7ff fd9b 	bl	1e038 <setDriversEnable>
		break;
   1e502:	e6b6      	b.n	1e272 <ExecuteActualCommand+0x26>
		switch(ActualCommand.Value.Int32)
   1e504:	b119      	cbz	r1, 1e50e <ExecuteActualCommand+0x2c2>
   1e506:	2901      	cmp	r1, #1
   1e508:	d004      	beq.n	1e514 <ExecuteActualCommand+0x2c8>
		ActualReply.Status = REPLY_INVALID_TYPE;
   1e50a:	2303      	movs	r3, #3
   1e50c:	e09e      	b.n	1e64c <ExecuteActualCommand+0x400>
			VitalSignsMonitor.debugMode = 0;
   1e50e:	4b0b      	ldr	r3, [pc, #44]	; (1e53c <ExecuteActualCommand+0x2f0>)
   1e510:	7019      	strb	r1, [r3, #0]
			break;
   1e512:	e6ae      	b.n	1e272 <ExecuteActualCommand+0x26>
			VitalSignsMonitor.debugMode = 1;
   1e514:	4b09      	ldr	r3, [pc, #36]	; (1e53c <ExecuteActualCommand+0x2f0>)
   1e516:	7019      	strb	r1, [r3, #0]
			HAL.LEDs->error.off();
   1e518:	4b09      	ldr	r3, [pc, #36]	; (1e540 <ExecuteActualCommand+0x2f4>)
   1e51a:	699b      	ldr	r3, [r3, #24]
   1e51c:	695b      	ldr	r3, [r3, #20]
   1e51e:	4798      	blx	r3
			break;
   1e520:	e6a7      	b.n	1e272 <ExecuteActualCommand+0x26>
   1e522:	bf00      	nop
   1e524:	1fff6604 	.word	0x1fff6604
   1e528:	1fff6610 	.word	0x1fff6610
   1e52c:	1fff56c0 	.word	0x1fff56c0
   1e530:	1fff5e88 	.word	0x1fff5e88
   1e534:	1fff660c 	.word	0x1fff660c
   1e538:	1fff6614 	.word	0x1fff6614
   1e53c:	1fff0b34 	.word	0x1fff0b34
   1e540:	00029d1c 	.word	0x00029d1c
		HAL.IOs->config->setToState(HAL.IOs->pins->pins[ActualCommand.Motor], ActualCommand.Value.UInt32);
   1e544:	4b99      	ldr	r3, [pc, #612]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e546:	78a0      	ldrb	r0, [r4, #2]
   1e548:	68db      	ldr	r3, [r3, #12]
   1e54a:	7a21      	ldrb	r1, [r4, #8]
   1e54c:	685a      	ldr	r2, [r3, #4]
   1e54e:	681b      	ldr	r3, [r3, #0]
   1e550:	6852      	ldr	r2, [r2, #4]
   1e552:	69db      	ldr	r3, [r3, #28]
   1e554:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1e558:	4798      	blx	r3
		break;
   1e55a:	e68a      	b.n	1e272 <ExecuteActualCommand+0x26>
	switch(ActualCommand.Type)
   1e55c:	7863      	ldrb	r3, [r4, #1]
   1e55e:	3b01      	subs	r3, #1
   1e560:	2b05      	cmp	r3, #5
   1e562:	d8d2      	bhi.n	1e50a <ExecuteActualCommand+0x2be>
   1e564:	e8df f003 	tbb	[pc, r3]
   1e568:	110d0603 	.word	0x110d0603
   1e56c:	201d      	.short	0x201d
			ActualReply.Value.Int32 = VitalSignsMonitor.errors;
   1e56e:	4b90      	ldr	r3, [pc, #576]	; (1e7b0 <ExecuteActualCommand+0x564>)
   1e570:	689b      	ldr	r3, [r3, #8]
   1e572:	e77a      	b.n	1e46a <ExecuteActualCommand+0x21e>
			ActualReply.Value.Int32 = (Evalboards.driverEnable == DRIVER_ENABLE)? 1:0;
   1e574:	4b8f      	ldr	r3, [pc, #572]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e576:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
   1e57a:	1e5a      	subs	r2, r3, #1
   1e57c:	4253      	negs	r3, r2
   1e57e:	4153      	adcs	r3, r2
   1e580:	e773      	b.n	1e46a <ExecuteActualCommand+0x21e>
			ActualReply.Value.Int32 = VitalSignsMonitor.debugMode;
   1e582:	4b8b      	ldr	r3, [pc, #556]	; (1e7b0 <ExecuteActualCommand+0x564>)
   1e584:	f993 3000 	ldrsb.w	r3, [r3]
   1e588:	e76f      	b.n	1e46a <ExecuteActualCommand+0x21e>
				ids.ch1.id = Evalboards.ch1.id;
   1e58a:	4b8a      	ldr	r3, [pc, #552]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e58c:	791a      	ldrb	r2, [r3, #4]
				ids.ch2.id = Evalboards.ch2.id;
   1e58e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
				ids.ch1.id = Evalboards.ch1.id;
   1e592:	f88d 2001 	strb.w	r2, [sp, #1]
				ids.ch2.id = Evalboards.ch2.id;
   1e596:	f88d 3015 	strb.w	r3, [sp, #21]
				ActualReply.Value.Int32 = Board_supported(&ids);
   1e59a:	4668      	mov	r0, sp
		ActualReply.Value.Int32 = Board_supported(&ids_buff);
   1e59c:	f000 ff4e 	bl	1f43c <Board_supported>
   1e5a0:	e00c      	b.n	1e5bc <ExecuteActualCommand+0x370>
			ActualReply.Value.Int32 = hwid;
   1e5a2:	4b85      	ldr	r3, [pc, #532]	; (1e7b8 <ExecuteActualCommand+0x56c>)
   1e5a4:	781b      	ldrb	r3, [r3, #0]
   1e5a6:	e760      	b.n	1e46a <ExecuteActualCommand+0x21e>
			ActualReply.Value.UInt32 = HAL.IOs->config->getState(HAL.IOs->pins->pins[ActualCommand.Motor]);
   1e5a8:	4b80      	ldr	r3, [pc, #512]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5aa:	78a1      	ldrb	r1, [r4, #2]
   1e5ac:	68db      	ldr	r3, [r3, #12]
   1e5ae:	685a      	ldr	r2, [r3, #4]
   1e5b0:	681b      	ldr	r3, [r3, #0]
   1e5b2:	6852      	ldr	r2, [r2, #4]
   1e5b4:	6a1b      	ldr	r3, [r3, #32]
   1e5b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1e5ba:	4798      	blx	r3
		break;
	case 3:
		ActualReply.Value.Int32 = checkCmdModeEnabled();
		break;
	case 4:
		ActualReply.Value.Int32 = getCMDReply();
   1e5bc:	6068      	str	r0, [r5, #4]
		break;
   1e5be:	e658      	b.n	1e272 <ExecuteActualCommand+0x26>
	switch(ActualCommand.Type)
   1e5c0:	7863      	ldrb	r3, [r4, #1]
   1e5c2:	2b06      	cmp	r3, #6
   1e5c4:	d8a1      	bhi.n	1e50a <ExecuteActualCommand+0x2be>
   1e5c6:	e8df f003 	tbb	[pc, r3]
   1e5ca:	0a04      	.short	0x0a04
   1e5cc:	1a16120e 	.word	0x1a16120e
   1e5d0:	1d          	.byte	0x1d
   1e5d1:	00          	.byte	0x00
		ActualReply.Value.Int32 = *HAL.ADCs->AIN0;
   1e5d2:	4b76      	ldr	r3, [pc, #472]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5d4:	69db      	ldr	r3, [r3, #28]
   1e5d6:	681b      	ldr	r3, [r3, #0]
		ActualReply.Value.Int32 = *HAL.ADCs->AIN1;
   1e5d8:	881b      	ldrh	r3, [r3, #0]
   1e5da:	b29b      	uxth	r3, r3
   1e5dc:	e745      	b.n	1e46a <ExecuteActualCommand+0x21e>
   1e5de:	4b73      	ldr	r3, [pc, #460]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5e0:	69db      	ldr	r3, [r3, #28]
   1e5e2:	685b      	ldr	r3, [r3, #4]
   1e5e4:	e7f8      	b.n	1e5d8 <ExecuteActualCommand+0x38c>
		ActualReply.Value.Int32 = *HAL.ADCs->AIN2;
   1e5e6:	4b71      	ldr	r3, [pc, #452]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5e8:	69db      	ldr	r3, [r3, #28]
   1e5ea:	689b      	ldr	r3, [r3, #8]
   1e5ec:	e7f4      	b.n	1e5d8 <ExecuteActualCommand+0x38c>
		ActualReply.Value.Int32 = *HAL.ADCs->DIO4;
   1e5ee:	4b6f      	ldr	r3, [pc, #444]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5f0:	69db      	ldr	r3, [r3, #28]
   1e5f2:	68db      	ldr	r3, [r3, #12]
   1e5f4:	e7f0      	b.n	1e5d8 <ExecuteActualCommand+0x38c>
		ActualReply.Value.Int32 = *HAL.ADCs->DIO5;
   1e5f6:	4b6d      	ldr	r3, [pc, #436]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e5f8:	69db      	ldr	r3, [r3, #28]
   1e5fa:	691b      	ldr	r3, [r3, #16]
   1e5fc:	e7ec      	b.n	1e5d8 <ExecuteActualCommand+0x38c>
		ActualReply.Value.Int32 = VitalSignsMonitor.VM;
   1e5fe:	4b6c      	ldr	r3, [pc, #432]	; (1e7b0 <ExecuteActualCommand+0x564>)
   1e600:	691b      	ldr	r3, [r3, #16]
   1e602:	e732      	b.n	1e46a <ExecuteActualCommand+0x21e>
		ActualReply.Value.Int32 = *HAL.ADCs->VM;
   1e604:	4b69      	ldr	r3, [pc, #420]	; (1e7ac <ExecuteActualCommand+0x560>)
   1e606:	69db      	ldr	r3, [r3, #28]
   1e608:	695b      	ldr	r3, [r3, #20]
   1e60a:	e7e5      	b.n	1e5d8 <ExecuteActualCommand+0x38c>
	if(ActualCommand.Type == 1)
   1e60c:	7863      	ldrb	r3, [r4, #1]
   1e60e:	2b01      	cmp	r3, #1
   1e610:	d004      	beq.n	1e61c <ExecuteActualCommand+0x3d0>
	else if(ActualCommand.Type == 2)
   1e612:	2b02      	cmp	r3, #2
   1e614:	f47f af79 	bne.w	1e50a <ExecuteActualCommand+0x2be>
		spi = &SPI.ch2;
   1e618:	4868      	ldr	r0, [pc, #416]	; (1e7bc <ExecuteActualCommand+0x570>)
   1e61a:	e000      	b.n	1e61e <ExecuteActualCommand+0x3d2>
		spi = &SPI.ch1;
   1e61c:	4868      	ldr	r0, [pc, #416]	; (1e7c0 <ExecuteActualCommand+0x574>)
	eeprom_read_array(spi, ActualCommand.Value.Int32, array, 4);
   1e61e:	2304      	movs	r3, #4
   1e620:	466a      	mov	r2, sp
   1e622:	b289      	uxth	r1, r1
   1e624:	f000 fd6c 	bl	1f100 <eeprom_read_array>
	ActualReply.Value.Int32 = array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0];
   1e628:	9b00      	ldr	r3, [sp, #0]
   1e62a:	e71e      	b.n	1e46a <ExecuteActualCommand+0x21e>
	if(ActualCommand.Type == 1)
   1e62c:	7863      	ldrb	r3, [r4, #1]
   1e62e:	2b01      	cmp	r3, #1
   1e630:	d004      	beq.n	1e63c <ExecuteActualCommand+0x3f0>
	else if(ActualCommand.Type == 2)
   1e632:	2b02      	cmp	r3, #2
   1e634:	f47f af69 	bne.w	1e50a <ExecuteActualCommand+0x2be>
		spi = &SPI.ch2;
   1e638:	4e60      	ldr	r6, [pc, #384]	; (1e7bc <ExecuteActualCommand+0x570>)
   1e63a:	e000      	b.n	1e63e <ExecuteActualCommand+0x3f2>
		spi = &SPI.ch1;
   1e63c:	4e60      	ldr	r6, [pc, #384]	; (1e7c0 <ExecuteActualCommand+0x574>)
	uint8_t out = eeprom_check(spi);
   1e63e:	4630      	mov	r0, r6
   1e640:	f000 fde0 	bl	1f204 <eeprom_check>
	if(out != ID_CHECKERROR_MAGICNUMBER && out != 0)
   1e644:	f010 0ffd 	tst.w	r0, #253	; 0xfd
   1e648:	d002      	beq.n	1e650 <ExecuteActualCommand+0x404>
		ActualReply.Status = REPLY_EEPROM_LOCKED; // todo CHECK 2: Not sure which error to send here, this one sounded ok (LH)
   1e64a:	2305      	movs	r3, #5
		ActualReply.Status = REPLY_INVALID_CMD;
   1e64c:	702b      	strb	r3, [r5, #0]
		break;
   1e64e:	e610      	b.n	1e272 <ExecuteActualCommand+0x26>
	eeprom_write_byte(spi, ActualCommand.Value.Int32, ActualCommand.Motor);
   1e650:	78a2      	ldrb	r2, [r4, #2]
   1e652:	8921      	ldrh	r1, [r4, #8]
   1e654:	4630      	mov	r0, r6
   1e656:	f000 fc21 	bl	1ee9c <eeprom_write_byte>
	return;
   1e65a:	e60a      	b.n	1e272 <ExecuteActualCommand+0x26>
		if(setTMCLStatus(Evalboards.ch1.getMeasuredSpeed(ActualCommand.Motor, &ActualReply.Value.Int32)) & TMC_ERROR_FUNCTION)
   1e65c:	4d55      	ldr	r5, [pc, #340]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e65e:	4959      	ldr	r1, [pc, #356]	; (1e7c4 <ExecuteActualCommand+0x578>)
   1e660:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1e662:	78a0      	ldrb	r0, [r4, #2]
   1e664:	4798      	blx	r3
   1e666:	b2c0      	uxtb	r0, r0
   1e668:	f7ff fcfe 	bl	1e068 <setTMCLStatus>
   1e66c:	0783      	lsls	r3, r0, #30
   1e66e:	f57f ae00 	bpl.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.getMeasuredSpeed(ActualCommand.Motor, &ActualReply.Value.Int32));
   1e672:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   1e676:	4953      	ldr	r1, [pc, #332]	; (1e7c4 <ExecuteActualCommand+0x578>)
   1e678:	e6ae      	b.n	1e3d8 <ExecuteActualCommand+0x18c>
		Evalboards.ch1.readRegister(ActualCommand.Motor, ActualCommand.Type, &ActualReply.Value.Int32);
   1e67a:	4b4e      	ldr	r3, [pc, #312]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e67c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
			Evalboards.ch2.readRegister(ActualCommand.Motor, ActualCommand.Type, &ActualReply.Value.Int32);
   1e67e:	4a51      	ldr	r2, [pc, #324]	; (1e7c4 <ExecuteActualCommand+0x578>)
   1e680:	e0ad      	b.n	1e7de <ExecuteActualCommand+0x592>
	if(ActualCommand.Type == VERSION_FORMAT_ASCII)
   1e682:	7863      	ldrb	r3, [r4, #1]
   1e684:	b97b      	cbnz	r3, 1e6a6 <ExecuteActualCommand+0x45a>
		ActualReply.IsSpecial   = 1;
   1e686:	2301      	movs	r3, #1
   1e688:	7443      	strb	r3, [r0, #17]
		ActualReply.Special[0]  = SERIAL_HOST_ADDRESS;
   1e68a:	2302      	movs	r3, #2
   1e68c:	7203      	strb	r3, [r0, #8]
			ActualReply.Special[i+1] = VersionString[i];
   1e68e:	4b4e      	ldr	r3, [pc, #312]	; (1e7c8 <ExecuteActualCommand+0x57c>)
   1e690:	494e      	ldr	r1, [pc, #312]	; (1e7cc <ExecuteActualCommand+0x580>)
   1e692:	681b      	ldr	r3, [r3, #0]
   1e694:	1e5a      	subs	r2, r3, #1
   1e696:	3307      	adds	r3, #7
   1e698:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   1e69c:	f801 0b01 	strb.w	r0, [r1], #1
		for(int i = 0; i < 8; i++)
   1e6a0:	429a      	cmp	r2, r3
   1e6a2:	d1f9      	bne.n	1e698 <ExecuteActualCommand+0x44c>
   1e6a4:	e5e5      	b.n	1e272 <ExecuteActualCommand+0x26>
	else if(ActualCommand.Type == VERSION_FORMAT_BINARY)
   1e6a6:	2b01      	cmp	r3, #1
   1e6a8:	d123      	bne.n	1e6f2 <ExecuteActualCommand+0x4a6>
		tmpVal = (uint8_t) VersionString[0] - '0';	// Ascii digit - '0' = digit value
   1e6aa:	4b47      	ldr	r3, [pc, #284]	; (1e7c8 <ExecuteActualCommand+0x57c>)
   1e6ac:	681a      	ldr	r2, [r3, #0]
   1e6ae:	7813      	ldrb	r3, [r2, #0]
		tmpVal += (uint8_t) VersionString[1] - '0';
   1e6b0:	7851      	ldrb	r1, [r2, #1]
		tmpVal = (uint8_t) VersionString[0] - '0';	// Ascii digit - '0' = digit value
   1e6b2:	3b30      	subs	r3, #48	; 0x30
   1e6b4:	b2db      	uxtb	r3, r3
		tmpVal += (uint8_t) VersionString[1] - '0';
   1e6b6:	3930      	subs	r1, #48	; 0x30
		tmpVal *= 10;
   1e6b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		tmpVal += (uint8_t) VersionString[1] - '0';
   1e6bc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		ActualReply.Value.Byte[3] = tmpVal;
   1e6c0:	71c3      	strb	r3, [r0, #7]
		tmpVal = (uint8_t) VersionString[2] - '0';
   1e6c2:	7893      	ldrb	r3, [r2, #2]
		tmpVal += (uint8_t) VersionString[3] - '0';
   1e6c4:	78d1      	ldrb	r1, [r2, #3]
		tmpVal = (uint8_t) VersionString[2] - '0';
   1e6c6:	3b30      	subs	r3, #48	; 0x30
   1e6c8:	b2db      	uxtb	r3, r3
		tmpVal *= 10;
   1e6ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		tmpVal += (uint8_t) VersionString[3] - '0';
   1e6ce:	3930      	subs	r1, #48	; 0x30
   1e6d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		ActualReply.Value.Byte[2] = tmpVal;
   1e6d4:	7183      	strb	r3, [r0, #6]
		ActualReply.Value.Byte[1] = (uint8_t) VersionString[5] - '0';
   1e6d6:	7953      	ldrb	r3, [r2, #5]
   1e6d8:	3b30      	subs	r3, #48	; 0x30
   1e6da:	7143      	strb	r3, [r0, #5]
		tmpVal = (uint8_t) VersionString[6] - '0';
   1e6dc:	7993      	ldrb	r3, [r2, #6]
		tmpVal += (uint8_t) VersionString[7] - '0';
   1e6de:	79d2      	ldrb	r2, [r2, #7]
		tmpVal = (uint8_t) VersionString[6] - '0';
   1e6e0:	3b30      	subs	r3, #48	; 0x30
   1e6e2:	b2db      	uxtb	r3, r3
		tmpVal *= 10;
   1e6e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		tmpVal += (uint8_t) VersionString[7] - '0';
   1e6e8:	3a30      	subs	r2, #48	; 0x30
   1e6ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		ActualReply.Value.Byte[0] = tmpVal;
   1e6ee:	7103      	strb	r3, [r0, #4]
   1e6f0:	e5bf      	b.n	1e272 <ExecuteActualCommand+0x26>
	else if(ActualCommand.Type == VERSION_BOARD_DETECT_SRC)
   1e6f2:	2b04      	cmp	r3, #4
   1e6f4:	d105      	bne.n	1e702 <ExecuteActualCommand+0x4b6>
		ActualReply.Value.Byte[0] = IdState.ch1.detectedBy;
   1e6f6:	4b36      	ldr	r3, [pc, #216]	; (1e7d0 <ExecuteActualCommand+0x584>)
   1e6f8:	789a      	ldrb	r2, [r3, #2]
		ActualReply.Value.Byte[1] = IdState.ch2.detectedBy;
   1e6fa:	7d9b      	ldrb	r3, [r3, #22]
		ActualReply.Value.Byte[0] = IdState.ch1.detectedBy;
   1e6fc:	7102      	strb	r2, [r0, #4]
		ActualReply.Value.Byte[1] = IdState.ch2.detectedBy;
   1e6fe:	7143      	strb	r3, [r0, #5]
   1e700:	e5b7      	b.n	1e272 <ExecuteActualCommand+0x26>
	else if(ActualCommand.Type == VERSION_BUILD) {
   1e702:	2b05      	cmp	r3, #5
   1e704:	f47f adb5 	bne.w	1e272 <ExecuteActualCommand+0x26>
		ActualReply.Value.UInt32 = BUILD_VERSION;
   1e708:	f247 73fb 	movw	r3, #30715	; 0x77fb
   1e70c:	e6ad      	b.n	1e46a <ExecuteActualCommand+0x21e>
	ids.ch1.id     = (ActualCommand.Value.Int32 >> 0)   & 0xFF;
   1e70e:	7863      	ldrb	r3, [r4, #1]
   1e710:	b2c8      	uxtb	r0, r1
	ids.ch2.id     = (ActualCommand.Value.Int32 >> 16)  & 0xFF;
   1e712:	f3c1 4207 	ubfx	r2, r1, #16, #8
	switch(ActualCommand.Type)
   1e716:	2b04      	cmp	r3, #4
   1e718:	f63f aef7 	bhi.w	1e50a <ExecuteActualCommand+0x2be>
   1e71c:	e8df f003 	tbb	[pc, r3]
   1e720:	1f301c03 	.word	0x1f301c03
   1e724:	34          	.byte	0x34
   1e725:	00          	.byte	0x00
	if(IDDetection_detect(&ids))
   1e726:	4668      	mov	r0, sp
   1e728:	f000 faf2 	bl	1ed10 <IDDetection_detect>
   1e72c:	b190      	cbz	r0, 1e754 <ExecuteActualCommand+0x508>
			| (ids.ch2.id    << 16)
   1e72e:	f89d 3015 	ldrb.w	r3, [sp, #21]
			| (ids.ch1.state << 8)
   1e732:	f89d 2000 	ldrb.w	r2, [sp]
			| (ids.ch2.id    << 16)
   1e736:	041b      	lsls	r3, r3, #16
   1e738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			(ids.ch1.id)
   1e73c:	f89d 2001 	ldrb.w	r2, [sp, #1]
			| (ids.ch2.id    << 16)
   1e740:	4313      	orrs	r3, r2
			| (ids.ch2.state << 24)
   1e742:	f89d 2014 	ldrb.w	r2, [sp, #20]
		Board_assign(&ids);
   1e746:	4668      	mov	r0, sp
			| (ids.ch2.state << 24)
   1e748:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		ActualReply.Value.Int32	= (uint32_t)
   1e74c:	606b      	str	r3, [r5, #4]
		Board_assign(&ids);
   1e74e:	f000 fdab 	bl	1f2a8 <Board_assign>
   1e752:	e58e      	b.n	1e272 <ExecuteActualCommand+0x26>
		ActualReply.Status = REPLY_DELAYED;
   1e754:	2380      	movs	r3, #128	; 0x80
   1e756:	e779      	b.n	1e64c <ExecuteActualCommand+0x400>
		ids.ch2.id     = Evalboards.ch2.id;
   1e758:	4b16      	ldr	r3, [pc, #88]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e75a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
	switch(ActualCommand.Type)
   1e75e:	2300      	movs	r3, #0
	ids_buff.ch1.state  = ID_STATE_DONE;
   1e760:	2102      	movs	r1, #2
	ids_buff.ch1.id     = ids.ch1.id;
   1e762:	f88d 0001 	strb.w	r0, [sp, #1]
	ids_buff.ch1.state  = ID_STATE_DONE;
   1e766:	f88d 1000 	strb.w	r1, [sp]
	ids_buff.ch2.id     = ids.ch2.id;
   1e76a:	f88d 2015 	strb.w	r2, [sp, #21]
	ids_buff.ch2.state  = ID_STATE_DONE;
   1e76e:	f88d 1014 	strb.w	r1, [sp, #20]
		ActualReply.Value.Int32 = Board_assign(&ids_buff);
   1e772:	4668      	mov	r0, sp
	if(!testOnly)
   1e774:	2b00      	cmp	r3, #0
   1e776:	f47f af11 	bne.w	1e59c <ExecuteActualCommand+0x350>
		ActualReply.Value.Int32 = Board_assign(&ids_buff);
   1e77a:	f000 fd95 	bl	1f2a8 <Board_assign>
   1e77e:	e71d      	b.n	1e5bc <ExecuteActualCommand+0x370>
		ids.ch1.id     = Evalboards.ch1.id;
   1e780:	4b0c      	ldr	r3, [pc, #48]	; (1e7b4 <ExecuteActualCommand+0x568>)
	ids.ch1.id     = (ActualCommand.Value.Int32 >> 0)   & 0xFF;
   1e782:	4602      	mov	r2, r0
		ids.ch1.id     = Evalboards.ch1.id;
   1e784:	7918      	ldrb	r0, [r3, #4]
   1e786:	e7ea      	b.n	1e75e <ExecuteActualCommand+0x512>
		if(ActualReply.Value.Int32 == 0)
   1e788:	b919      	cbnz	r1, 1e792 <ExecuteActualCommand+0x546>
			ids.ch1.id = Evalboards.ch1.id;
   1e78a:	4b0a      	ldr	r3, [pc, #40]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e78c:	7918      	ldrb	r0, [r3, #4]
			ids.ch2.id = Evalboards.ch2.id;
   1e78e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
		testOnly = 1;
   1e792:	2301      	movs	r3, #1
   1e794:	e7e4      	b.n	1e760 <ExecuteActualCommand+0x514>
		setTMCLStatus(Evalboards.ch1.userFunction(ActualCommand.Type, ActualCommand.Motor, &ActualCommand.Value.Int32));
   1e796:	4b07      	ldr	r3, [pc, #28]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		setTMCLStatus(Evalboards.ch2.userFunction(ActualCommand.Type, ActualCommand.Motor, &ActualCommand.Value.Int32));
   1e79a:	4a0e      	ldr	r2, [pc, #56]	; (1e7d4 <ExecuteActualCommand+0x588>)
   1e79c:	78a1      	ldrb	r1, [r4, #2]
   1e79e:	7860      	ldrb	r0, [r4, #1]
   1e7a0:	4798      	blx	r3
   1e7a2:	e65e      	b.n	1e462 <ExecuteActualCommand+0x216>
   1e7a4:	4b03      	ldr	r3, [pc, #12]	; (1e7b4 <ExecuteActualCommand+0x568>)
   1e7a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   1e7aa:	e7f6      	b.n	1e79a <ExecuteActualCommand+0x54e>
   1e7ac:	00029d1c 	.word	0x00029d1c
   1e7b0:	1fff0b34 	.word	0x1fff0b34
   1e7b4:	1fff5e88 	.word	0x1fff5e88
   1e7b8:	1fff5f7c 	.word	0x1fff5f7c
   1e7bc:	1fff09ec 	.word	0x1fff09ec
   1e7c0:	1fff09d8 	.word	0x1fff09d8
   1e7c4:	1fff6614 	.word	0x1fff6614
   1e7c8:	1fff0b30 	.word	0x1fff0b30
   1e7cc:	1fff6619 	.word	0x1fff6619
   1e7d0:	1fff56dc 	.word	0x1fff56dc
   1e7d4:	1fff660c 	.word	0x1fff660c
		Evalboards.ch1.writeRegister(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
   1e7d8:	4b58      	ldr	r3, [pc, #352]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
		Evalboards.ch2.writeRegister(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
   1e7dc:	460a      	mov	r2, r1
			Evalboards.ch2.readRegister(ActualCommand.Motor, ActualCommand.Type, &ActualReply.Value.Int32);
   1e7de:	7861      	ldrb	r1, [r4, #1]
   1e7e0:	78a0      	ldrb	r0, [r4, #2]
   1e7e2:	e011      	b.n	1e808 <ExecuteActualCommand+0x5bc>
		Evalboards.ch2.writeRegister(ActualCommand.Motor, ActualCommand.Type, ActualCommand.Value.Int32);
   1e7e4:	4b55      	ldr	r3, [pc, #340]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e7e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   1e7ea:	e7f7      	b.n	1e7dc <ExecuteActualCommand+0x590>
		if ((VitalSignsMonitor.brownOut & VSM_ERRORS_BROWNOUT_CH1) && ActualCommand.Motor != 255)
   1e7ec:	4b54      	ldr	r3, [pc, #336]	; (1e940 <ExecuteActualCommand+0x6f4>)
   1e7ee:	78a0      	ldrb	r0, [r4, #2]
   1e7f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
   1e7f4:	2b00      	cmp	r3, #0
   1e7f6:	da03      	bge.n	1e800 <ExecuteActualCommand+0x5b4>
   1e7f8:	28ff      	cmp	r0, #255	; 0xff
   1e7fa:	d001      	beq.n	1e800 <ExecuteActualCommand+0x5b4>
			ActualReply.Status = REPLY_CHIP_READ_FAILED;
   1e7fc:	230b      	movs	r3, #11
   1e7fe:	e725      	b.n	1e64c <ExecuteActualCommand+0x400>
			Evalboards.ch1.readRegister(ActualCommand.Motor, ActualCommand.Type, &ActualReply.Value.Int32);
   1e800:	4b4e      	ldr	r3, [pc, #312]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e802:	4a50      	ldr	r2, [pc, #320]	; (1e944 <ExecuteActualCommand+0x6f8>)
   1e804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e806:	7861      	ldrb	r1, [r4, #1]
			Evalboards.ch2.readRegister(ActualCommand.Motor, ActualCommand.Type, &ActualReply.Value.Int32);
   1e808:	4798      	blx	r3
   1e80a:	e532      	b.n	1e272 <ExecuteActualCommand+0x26>
   1e80c:	4b4b      	ldr	r3, [pc, #300]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e80e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1e812:	e734      	b.n	1e67e <ExecuteActualCommand+0x432>
	switch(ActualCommand.Type)
   1e814:	7863      	ldrb	r3, [r4, #1]
   1e816:	b13b      	cbz	r3, 1e828 <ExecuteActualCommand+0x5dc>
   1e818:	2b01      	cmp	r3, #1
   1e81a:	f47f ae76 	bne.w	1e50a <ExecuteActualCommand+0x2be>
		ActualReply.Status = Evalboards.ch2.getMeasuredSpeed(ActualCommand.Motor, &ActualReply.Value.Int32);
   1e81e:	4b47      	ldr	r3, [pc, #284]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e820:	4d48      	ldr	r5, [pc, #288]	; (1e944 <ExecuteActualCommand+0x6f8>)
   1e822:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1e826:	e002      	b.n	1e82e <ExecuteActualCommand+0x5e2>
		ActualReply.Status = Evalboards.ch1.getMeasuredSpeed(ActualCommand.Motor, &ActualReply.Value.Int32);
   1e828:	4b44      	ldr	r3, [pc, #272]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e82a:	4d46      	ldr	r5, [pc, #280]	; (1e944 <ExecuteActualCommand+0x6f8>)
   1e82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
		ActualReply.Status = Evalboards.ch2.getMeasuredSpeed(ActualCommand.Motor, &ActualReply.Value.Int32);
   1e82e:	78a0      	ldrb	r0, [r4, #2]
   1e830:	4629      	mov	r1, r5
   1e832:	4798      	blx	r3
   1e834:	f805 0c04 	strb.w	r0, [r5, #-4]
		break;
   1e838:	e51b      	b.n	1e272 <ExecuteActualCommand+0x26>
	switch(ActualCommand.Type)
   1e83a:	7863      	ldrb	r3, [r4, #1]
   1e83c:	b133      	cbz	r3, 1e84c <ExecuteActualCommand+0x600>
   1e83e:	2b01      	cmp	r3, #1
   1e840:	f47f ae63 	bne.w	1e50a <ExecuteActualCommand+0x2be>
		ActualReply.Value.Int32 = Evalboards.ch2.errors;
   1e844:	4b3d      	ldr	r3, [pc, #244]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1e84a:	e60e      	b.n	1e46a <ExecuteActualCommand+0x21e>
		ActualReply.Value.Int32 = Evalboards.ch1.errors;
   1e84c:	4b3b      	ldr	r3, [pc, #236]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e84e:	e68f      	b.n	1e570 <ExecuteActualCommand+0x324>
	switch(ActualCommand.Type)
   1e850:	7863      	ldrb	r3, [r4, #1]
   1e852:	2b01      	cmp	r3, #1
   1e854:	d00e      	beq.n	1e874 <ExecuteActualCommand+0x628>
   1e856:	2b02      	cmp	r3, #2
   1e858:	d010      	beq.n	1e87c <ExecuteActualCommand+0x630>
   1e85a:	2b00      	cmp	r3, #0
   1e85c:	f47f ae55 	bne.w	1e50a <ExecuteActualCommand+0x2be>
		if(!Evalboards.ch1.config->reset())
   1e860:	4b36      	ldr	r3, [pc, #216]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e862:	699b      	ldr	r3, [r3, #24]
   1e864:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1e868:	4798      	blx	r3
   1e86a:	2800      	cmp	r0, #0
   1e86c:	f47f ad01 	bne.w	1e272 <ExecuteActualCommand+0x26>
			ActualReply.Status = REPLY_WRITE_PROTECTED;
   1e870:	2308      	movs	r3, #8
   1e872:	e6eb      	b.n	1e64c <ExecuteActualCommand+0x400>
		if(!Evalboards.ch2.config->reset())
   1e874:	4b31      	ldr	r3, [pc, #196]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1e87a:	e7f3      	b.n	1e864 <ExecuteActualCommand+0x618>
		if(!Evalboards.ch1.config->reset())
   1e87c:	4c2f      	ldr	r4, [pc, #188]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e87e:	69a3      	ldr	r3, [r4, #24]
   1e880:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1e884:	4798      	blx	r3
   1e886:	b908      	cbnz	r0, 1e88c <ExecuteActualCommand+0x640>
			ActualReply.Status = REPLY_WRITE_PROTECTED;
   1e888:	2308      	movs	r3, #8
   1e88a:	702b      	strb	r3, [r5, #0]
		if(!Evalboards.ch2.config->reset())
   1e88c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1e890:	e7e8      	b.n	1e864 <ExecuteActualCommand+0x618>
	switch(ActualCommand.Type)
   1e892:	7863      	ldrb	r3, [r4, #1]
   1e894:	2b04      	cmp	r3, #4
   1e896:	f63f ae38 	bhi.w	1e50a <ExecuteActualCommand+0x2be>
   1e89a:	e8df f003 	tbb	[pc, r3]
   1e89e:	0703      	.short	0x0703
   1e8a0:	0d0a      	.short	0x0d0a
   1e8a2:	10          	.byte	0x10
   1e8a3:	00          	.byte	0x00
		ActualReply.Value.Int32 = handleWLANCommand(ActualCommand.Motor, ActualCommand.Value.Int32);
   1e8a4:	78a0      	ldrb	r0, [r4, #2]
   1e8a6:	f7fe ff5b 	bl	1d760 <handleWLANCommand>
   1e8aa:	e687      	b.n	1e5bc <ExecuteActualCommand+0x370>
		enableWLANCommandMode();
   1e8ac:	f7fe fef0 	bl	1d690 <enableWLANCommandMode>
		break;
   1e8b0:	e4df      	b.n	1e272 <ExecuteActualCommand+0x26>
		ActualReply.Value.Int32 = checkReadyToSend();
   1e8b2:	f7fe ff31 	bl	1d718 <checkReadyToSend>
   1e8b6:	e681      	b.n	1e5bc <ExecuteActualCommand+0x370>
		ActualReply.Value.Int32 = checkCmdModeEnabled();
   1e8b8:	f7fe ff04 	bl	1d6c4 <checkCmdModeEnabled>
   1e8bc:	e67e      	b.n	1e5bc <ExecuteActualCommand+0x370>
		ActualReply.Value.Int32 = getCMDReply();
   1e8be:	f7fe ff8d 	bl	1d7dc <getCMDReply>
   1e8c2:	e67b      	b.n	1e5bc <ExecuteActualCommand+0x370>
		if(setTMCLStatus(Evalboards.ch1.getMin(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32)) & (TMC_ERROR_TYPE | TMC_ERROR_FUNCTION))
   1e8c4:	4d1d      	ldr	r5, [pc, #116]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e8c6:	4a1f      	ldr	r2, [pc, #124]	; (1e944 <ExecuteActualCommand+0x6f8>)
   1e8c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1e8ca:	78a1      	ldrb	r1, [r4, #2]
   1e8cc:	7860      	ldrb	r0, [r4, #1]
   1e8ce:	4798      	blx	r3
   1e8d0:	b2c0      	uxtb	r0, r0
   1e8d2:	f7ff fbc9 	bl	1e068 <setTMCLStatus>
   1e8d6:	f010 0f06 	tst.w	r0, #6
   1e8da:	f43f acca 	beq.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.getMin(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32));
   1e8de:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
   1e8e2:	e5f4      	b.n	1e4ce <ExecuteActualCommand+0x282>
		if(setTMCLStatus(Evalboards.ch1.getMax(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32)) & (TMC_ERROR_TYPE | TMC_ERROR_FUNCTION))
   1e8e4:	4d15      	ldr	r5, [pc, #84]	; (1e93c <ExecuteActualCommand+0x6f0>)
   1e8e6:	4a17      	ldr	r2, [pc, #92]	; (1e944 <ExecuteActualCommand+0x6f8>)
   1e8e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   1e8ea:	78a1      	ldrb	r1, [r4, #2]
   1e8ec:	7860      	ldrb	r0, [r4, #1]
   1e8ee:	4798      	blx	r3
   1e8f0:	b2c0      	uxtb	r0, r0
   1e8f2:	f7ff fbb9 	bl	1e068 <setTMCLStatus>
   1e8f6:	f010 0f06 	tst.w	r0, #6
   1e8fa:	f43f acba 	beq.w	1e272 <ExecuteActualCommand+0x26>
			setTMCLStatus(Evalboards.ch2.getMax(ActualCommand.Type, ActualCommand.Motor, &ActualReply.Value.Int32));
   1e8fe:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e902:	e5e4      	b.n	1e4ce <ExecuteActualCommand+0x282>
		if(ActualCommand.Type           != 0x81)  break;
   1e904:	7853      	ldrb	r3, [r2, #1]
   1e906:	2b81      	cmp	r3, #129	; 0x81
   1e908:	f47f acb3 	bne.w	1e272 <ExecuteActualCommand+0x26>
		if(ActualCommand.Motor          != 0x92)  break;
   1e90c:	7893      	ldrb	r3, [r2, #2]
   1e90e:	2b92      	cmp	r3, #146	; 0x92
   1e910:	f47f acaf 	bne.w	1e272 <ExecuteActualCommand+0x26>
		if(ActualCommand.Value.Byte[3]  != 0xA3)  break;
   1e914:	7ad3      	ldrb	r3, [r2, #11]
   1e916:	2ba3      	cmp	r3, #163	; 0xa3
   1e918:	f47f acab 	bne.w	1e272 <ExecuteActualCommand+0x26>
		if(ActualCommand.Value.Byte[2]  != 0xB4)  break;
   1e91c:	7a93      	ldrb	r3, [r2, #10]
   1e91e:	2bb4      	cmp	r3, #180	; 0xb4
   1e920:	f47f aca7 	bne.w	1e272 <ExecuteActualCommand+0x26>
		if(ActualCommand.Value.Byte[1]  != 0xC5)  break;
   1e924:	7a53      	ldrb	r3, [r2, #9]
   1e926:	2bc5      	cmp	r3, #197	; 0xc5
   1e928:	f47f aca3 	bne.w	1e272 <ExecuteActualCommand+0x26>
		if(ActualCommand.Value.Byte[0]  != 0xD6)  break;
   1e92c:	7a13      	ldrb	r3, [r2, #8]
   1e92e:	2bd6      	cmp	r3, #214	; 0xd6
   1e930:	f47f ac9f 	bne.w	1e272 <ExecuteActualCommand+0x26>
		tmcl_boot();
   1e934:	f7ff fc48 	bl	1e1c8 <tmcl_boot>
		break;
   1e938:	e49b      	b.n	1e272 <ExecuteActualCommand+0x26>
   1e93a:	bf00      	nop
   1e93c:	1fff5e88 	.word	0x1fff5e88
   1e940:	1fff0b34 	.word	0x1fff0b34
   1e944:	1fff6614 	.word	0x1fff6614

0001e948 <tmcl_process>:
{
   1e948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(ActualCommand.Error != TMCL_RX_ERROR_NODATA)
   1e94c:	4e16      	ldr	r6, [pc, #88]	; (1e9a8 <tmcl_process+0x60>)
   1e94e:	4d17      	ldr	r5, [pc, #92]	; (1e9ac <tmcl_process+0x64>)
   1e950:	6872      	ldr	r2, [r6, #4]
   1e952:	2a01      	cmp	r2, #1
   1e954:	d006      	beq.n	1e964 <tmcl_process+0x1c>
		tx(&interfaces[currentInterface]);
   1e956:	686a      	ldr	r2, [r5, #4]
   1e958:	4b15      	ldr	r3, [pc, #84]	; (1e9b0 <tmcl_process+0x68>)
   1e95a:	2024      	movs	r0, #36	; 0x24
   1e95c:	fb00 3002 	mla	r0, r0, r2, r3
   1e960:	f7ff fbd0 	bl	1e104 <tx>
	if(resetRequest)
   1e964:	682b      	ldr	r3, [r5, #0]
   1e966:	b11b      	cbz	r3, 1e970 <tmcl_process+0x28>
		HAL.reset(true);
   1e968:	4b12      	ldr	r3, [pc, #72]	; (1e9b4 <tmcl_process+0x6c>)
   1e96a:	2001      	movs	r0, #1
   1e96c:	685b      	ldr	r3, [r3, #4]
   1e96e:	4798      	blx	r3
	ActualReply.IsSpecial = 0;
   1e970:	4b11      	ldr	r3, [pc, #68]	; (1e9b8 <tmcl_process+0x70>)
	for(uint32_t i = 0; i < numberOfInterfaces; i++)
   1e972:	4f12      	ldr	r7, [pc, #72]	; (1e9bc <tmcl_process+0x74>)
		rx(&interfaces[i]);
   1e974:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1e9b0 <tmcl_process+0x68>
	ActualReply.IsSpecial = 0;
   1e978:	2400      	movs	r4, #0
   1e97a:	745c      	strb	r4, [r3, #17]
		rx(&interfaces[i]);
   1e97c:	f04f 0824 	mov.w	r8, #36	; 0x24
	for(uint32_t i = 0; i < numberOfInterfaces; i++)
   1e980:	683b      	ldr	r3, [r7, #0]
   1e982:	42a3      	cmp	r3, r4
   1e984:	d801      	bhi.n	1e98a <tmcl_process+0x42>
}
   1e986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx(&interfaces[i]);
   1e98a:	fb08 9004 	mla	r0, r8, r4, r9
   1e98e:	f7ff fbed 	bl	1e16c <rx>
		if(ActualCommand.Error != TMCL_RX_ERROR_NODATA)
   1e992:	6873      	ldr	r3, [r6, #4]
   1e994:	2b01      	cmp	r3, #1
   1e996:	d004      	beq.n	1e9a2 <tmcl_process+0x5a>
			currentInterface = i;
   1e998:	606c      	str	r4, [r5, #4]
}
   1e99a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ExecuteActualCommand();
   1e99e:	f7ff bc55 	b.w	1e24c <ExecuteActualCommand>
	for(uint32_t i = 0; i < numberOfInterfaces; i++)
   1e9a2:	3401      	adds	r4, #1
   1e9a4:	e7ec      	b.n	1e980 <tmcl_process+0x38>
   1e9a6:	bf00      	nop
   1e9a8:	1fff6604 	.word	0x1fff6604
   1e9ac:	1fff56c0 	.word	0x1fff56c0
   1e9b0:	1fff6570 	.word	0x1fff6570
   1e9b4:	00029d1c 	.word	0x00029d1c
   1e9b8:	1fff6610 	.word	0x1fff6610
   1e9bc:	1fff6600 	.word	0x1fff6600

0001e9c0 <assign>:
}

//returns ID assigned to given pulse (length in 0.1us)
static uint8_t assign(uint32_t pulse)
{
	if(     pulse < 5      ) return 0; // error
   1e9c0:	2804      	cmp	r0, #4
   1e9c2:	f240 8088 	bls.w	1ead6 <assign+0x116>
	else if(pulse < 110    ) return 1;
   1e9c6:	286d      	cmp	r0, #109	; 0x6d
   1e9c8:	f240 8087 	bls.w	1eada <assign+0x11a>
	else if(pulse < 135    ) return 2;
   1e9cc:	2886      	cmp	r0, #134	; 0x86
   1e9ce:	f240 8086 	bls.w	1eade <assign+0x11e>
	else if(pulse < 165    ) return 3;
   1e9d2:	28a4      	cmp	r0, #164	; 0xa4
   1e9d4:	f240 8085 	bls.w	1eae2 <assign+0x122>
	else if(pulse < 200    ) return 4;
   1e9d8:	28c7      	cmp	r0, #199	; 0xc7
   1e9da:	f240 8084 	bls.w	1eae6 <assign+0x126>
	else if(pulse < 245    ) return 5;
   1e9de:	28f4      	cmp	r0, #244	; 0xf4
   1e9e0:	f240 8083 	bls.w	1eaea <assign+0x12a>
	else if(pulse <	300    ) return 6;
   1e9e4:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   1e9e8:	f0c0 8081 	bcc.w	1eaee <assign+0x12e>
	else if(pulse <	360    ) return 7;
   1e9ec:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
   1e9f0:	d37f      	bcc.n	1eaf2 <assign+0x132>
	else if(pulse <	430    ) return 8;
   1e9f2:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
   1e9f6:	d37e      	bcc.n	1eaf6 <assign+0x136>
	else if(pulse <	515    ) return 9;
   1e9f8:	f240 2302 	movw	r3, #514	; 0x202
   1e9fc:	4298      	cmp	r0, r3
   1e9fe:	d97c      	bls.n	1eafa <assign+0x13a>
	else if(pulse <	620    ) return 10;
   1ea00:	f5b0 7f1b 	cmp.w	r0, #620	; 0x26c
   1ea04:	d37b      	bcc.n	1eafe <assign+0x13e>
	else if(pulse <	750    ) return 11;
   1ea06:	f240 23ed 	movw	r3, #749	; 0x2ed
   1ea0a:	4298      	cmp	r0, r3
   1ea0c:	d979      	bls.n	1eb02 <assign+0x142>
	else if(pulse <	910    ) return 12;
   1ea0e:	f240 338d 	movw	r3, #909	; 0x38d
   1ea12:	4298      	cmp	r0, r3
   1ea14:	d977      	bls.n	1eb06 <assign+0x146>
	else if(pulse <	1100   ) return 13;
   1ea16:	f240 434b 	movw	r3, #1099	; 0x44b
   1ea1a:	4298      	cmp	r0, r3
   1ea1c:	d975      	bls.n	1eb0a <assign+0x14a>
	else if(pulse <	1350   ) return 14;
   1ea1e:	f240 5345 	movw	r3, #1349	; 0x545
   1ea22:	4298      	cmp	r0, r3
   1ea24:	d973      	bls.n	1eb0e <assign+0x14e>
	else if(pulse <	1650   ) return 15;
   1ea26:	f240 6371 	movw	r3, #1649	; 0x671
   1ea2a:	4298      	cmp	r0, r3
   1ea2c:	d971      	bls.n	1eb12 <assign+0x152>
	else if(pulse <	2000   ) return 16;
   1ea2e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   1ea32:	d370      	bcc.n	1eb16 <assign+0x156>
	else if(pulse <	2450   ) return 17;
   1ea34:	f640 1391 	movw	r3, #2449	; 0x991
   1ea38:	4298      	cmp	r0, r3
   1ea3a:	d96e      	bls.n	1eb1a <assign+0x15a>
	else if(pulse <	3000   ) return 18;
   1ea3c:	f640 33b7 	movw	r3, #2999	; 0xbb7
   1ea40:	4298      	cmp	r0, r3
   1ea42:	d96c      	bls.n	1eb1e <assign+0x15e>
	else if(pulse <	3600   ) return 19;
   1ea44:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
   1ea48:	d36b      	bcc.n	1eb22 <assign+0x162>
	else if(pulse <	4300   ) return 20;
   1ea4a:	f241 03cb 	movw	r3, #4299	; 0x10cb
   1ea4e:	4298      	cmp	r0, r3
   1ea50:	d969      	bls.n	1eb26 <assign+0x166>
	else if(pulse <	5150   ) return 21;
   1ea52:	f241 431d 	movw	r3, #5149	; 0x141d
   1ea56:	4298      	cmp	r0, r3
   1ea58:	d967      	bls.n	1eb2a <assign+0x16a>
	else if(pulse <	6200   ) return 22;
   1ea5a:	f641 0337 	movw	r3, #6199	; 0x1837
   1ea5e:	4298      	cmp	r0, r3
   1ea60:	d965      	bls.n	1eb2e <assign+0x16e>
	else if(pulse <	7500   ) return 23;
   1ea62:	f641 534b 	movw	r3, #7499	; 0x1d4b
   1ea66:	4298      	cmp	r0, r3
   1ea68:	d963      	bls.n	1eb32 <assign+0x172>
	else if(pulse <	9100   ) return 24;
   1ea6a:	f242 338b 	movw	r3, #9099	; 0x238b
   1ea6e:	4298      	cmp	r0, r3
   1ea70:	d961      	bls.n	1eb36 <assign+0x176>
	else if(pulse <	11000  ) return 25;
   1ea72:	f642 23f7 	movw	r3, #10999	; 0x2af7
   1ea76:	4298      	cmp	r0, r3
   1ea78:	d95f      	bls.n	1eb3a <assign+0x17a>
	else if(pulse <	13500  ) return 26;
   1ea7a:	f243 43bb 	movw	r3, #13499	; 0x34bb
   1ea7e:	4298      	cmp	r0, r3
   1ea80:	d95d      	bls.n	1eb3e <assign+0x17e>
	else if(pulse <	16500  ) return 27;
   1ea82:	f244 0373 	movw	r3, #16499	; 0x4073
   1ea86:	4298      	cmp	r0, r3
   1ea88:	d95b      	bls.n	1eb42 <assign+0x182>
	else if(pulse <	20000  ) return 28;
   1ea8a:	f644 631f 	movw	r3, #19999	; 0x4e1f
   1ea8e:	4298      	cmp	r0, r3
   1ea90:	d959      	bls.n	1eb46 <assign+0x186>
	else if(pulse <	24500  ) return 29;
   1ea92:	f645 73b3 	movw	r3, #24499	; 0x5fb3
   1ea96:	4298      	cmp	r0, r3
   1ea98:	d957      	bls.n	1eb4a <assign+0x18a>
	else if(pulse <	30000  ) return 30;
   1ea9a:	f247 532f 	movw	r3, #29999	; 0x752f
   1ea9e:	4298      	cmp	r0, r3
   1eaa0:	d955      	bls.n	1eb4e <assign+0x18e>
	else if(pulse <	36000  ) return 31;
   1eaa2:	f648 439f 	movw	r3, #35999	; 0x8c9f
   1eaa6:	4298      	cmp	r0, r3
   1eaa8:	d953      	bls.n	1eb52 <assign+0x192>
	else if(pulse <	43000  ) return 32;
   1eaaa:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
   1eaae:	4298      	cmp	r0, r3
   1eab0:	d951      	bls.n	1eb56 <assign+0x196>
	else if(pulse <	51500  ) return 33;
   1eab2:	f64c 132b 	movw	r3, #51499	; 0xc92b
   1eab6:	4298      	cmp	r0, r3
   1eab8:	d94f      	bls.n	1eb5a <assign+0x19a>
	else if(pulse <	62000  ) return 34;
   1eaba:	f24f 232f 	movw	r3, #61999	; 0xf22f
   1eabe:	4298      	cmp	r0, r3
   1eac0:	d94d      	bls.n	1eb5e <assign+0x19e>
	else if(pulse <	75000  ) return 35;
   1eac2:	4b29      	ldr	r3, [pc, #164]	; (1eb68 <assign+0x1a8>)
   1eac4:	4298      	cmp	r0, r3
   1eac6:	d94c      	bls.n	1eb62 <assign+0x1a2>
	else if(pulse <	91000  ) return 36;
   1eac8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   1eacc:	4298      	cmp	r0, r3
   1eace:	bf94      	ite	ls
   1ead0:	2024      	movls	r0, #36	; 0x24
   1ead2:	2000      	movhi	r0, #0
   1ead4:	4770      	bx	lr
	if(     pulse < 5      ) return 0; // error
   1ead6:	2000      	movs	r0, #0
   1ead8:	4770      	bx	lr
	else if(pulse < 110    ) return 1;
   1eada:	2001      	movs	r0, #1
   1eadc:	4770      	bx	lr
	else if(pulse < 135    ) return 2;
   1eade:	2002      	movs	r0, #2
   1eae0:	4770      	bx	lr
	else if(pulse < 165    ) return 3;
   1eae2:	2003      	movs	r0, #3
   1eae4:	4770      	bx	lr
	else if(pulse < 200    ) return 4;
   1eae6:	2004      	movs	r0, #4
   1eae8:	4770      	bx	lr
	else if(pulse < 245    ) return 5;
   1eaea:	2005      	movs	r0, #5
   1eaec:	4770      	bx	lr
	else if(pulse <	300    ) return 6;
   1eaee:	2006      	movs	r0, #6
   1eaf0:	4770      	bx	lr
	else if(pulse <	360    ) return 7;
   1eaf2:	2007      	movs	r0, #7
   1eaf4:	4770      	bx	lr
	else if(pulse <	430    ) return 8;
   1eaf6:	2008      	movs	r0, #8
   1eaf8:	4770      	bx	lr
	else if(pulse <	515    ) return 9;
   1eafa:	2009      	movs	r0, #9
   1eafc:	4770      	bx	lr
	else if(pulse <	620    ) return 10;
   1eafe:	200a      	movs	r0, #10
   1eb00:	4770      	bx	lr
	else if(pulse <	750    ) return 11;
   1eb02:	200b      	movs	r0, #11
   1eb04:	4770      	bx	lr
	else if(pulse <	910    ) return 12;
   1eb06:	200c      	movs	r0, #12
   1eb08:	4770      	bx	lr
	else if(pulse <	1100   ) return 13;
   1eb0a:	200d      	movs	r0, #13
   1eb0c:	4770      	bx	lr
	else if(pulse <	1350   ) return 14;
   1eb0e:	200e      	movs	r0, #14
   1eb10:	4770      	bx	lr
	else if(pulse <	1650   ) return 15;
   1eb12:	200f      	movs	r0, #15
   1eb14:	4770      	bx	lr
	else if(pulse <	2000   ) return 16;
   1eb16:	2010      	movs	r0, #16
   1eb18:	4770      	bx	lr
	else if(pulse <	2450   ) return 17;
   1eb1a:	2011      	movs	r0, #17
   1eb1c:	4770      	bx	lr
	else if(pulse <	3000   ) return 18;
   1eb1e:	2012      	movs	r0, #18
   1eb20:	4770      	bx	lr
	else if(pulse <	3600   ) return 19;
   1eb22:	2013      	movs	r0, #19
   1eb24:	4770      	bx	lr
	else if(pulse <	4300   ) return 20;
   1eb26:	2014      	movs	r0, #20
   1eb28:	4770      	bx	lr
	else if(pulse <	5150   ) return 21;
   1eb2a:	2015      	movs	r0, #21
   1eb2c:	4770      	bx	lr
	else if(pulse <	6200   ) return 22;
   1eb2e:	2016      	movs	r0, #22
   1eb30:	4770      	bx	lr
	else if(pulse <	7500   ) return 23;
   1eb32:	2017      	movs	r0, #23
   1eb34:	4770      	bx	lr
	else if(pulse <	9100   ) return 24;
   1eb36:	2018      	movs	r0, #24
   1eb38:	4770      	bx	lr
	else if(pulse <	11000  ) return 25;
   1eb3a:	2019      	movs	r0, #25
   1eb3c:	4770      	bx	lr
	else if(pulse <	13500  ) return 26;
   1eb3e:	201a      	movs	r0, #26
   1eb40:	4770      	bx	lr
	else if(pulse <	16500  ) return 27;
   1eb42:	201b      	movs	r0, #27
   1eb44:	4770      	bx	lr
	else if(pulse <	20000  ) return 28;
   1eb46:	201c      	movs	r0, #28
   1eb48:	4770      	bx	lr
	else if(pulse <	24500  ) return 29;
   1eb4a:	201d      	movs	r0, #29
   1eb4c:	4770      	bx	lr
	else if(pulse <	30000  ) return 30;
   1eb4e:	201e      	movs	r0, #30
   1eb50:	4770      	bx	lr
	else if(pulse <	36000  ) return 31;
   1eb52:	201f      	movs	r0, #31
   1eb54:	4770      	bx	lr
	else if(pulse <	43000  ) return 32;
   1eb56:	2020      	movs	r0, #32
   1eb58:	4770      	bx	lr
	else if(pulse <	51500  ) return 33;
   1eb5a:	2021      	movs	r0, #33	; 0x21
   1eb5c:	4770      	bx	lr
	else if(pulse <	62000  ) return 34;
   1eb5e:	2022      	movs	r0, #34	; 0x22
   1eb60:	4770      	bx	lr
	else if(pulse <	75000  ) return 35;
   1eb62:	2023      	movs	r0, #35	; 0x23

	return 0; // error
}
   1eb64:	4770      	bx	lr
   1eb66:	bf00      	nop
   1eb68:	000124f7 	.word	0x000124f7

0001eb6c <PORTB_IRQHandler>:
	uint32_t timerVal = FTM2_CNT;
   1eb6c:	4b16      	ldr	r3, [pc, #88]	; (1ebc8 <PORTB_IRQHandler+0x5c>)
{
   1eb6e:	b530      	push	{r4, r5, lr}
	uint32_t timerVal = FTM2_CNT;
   1eb70:	6859      	ldr	r1, [r3, #4]
	uint32_t interruptFlags = PORTB_ISFR;
   1eb72:	4c16      	ldr	r4, [pc, #88]	; (1ebcc <PORTB_IRQHandler+0x60>)
	uint32_t counterVal = counter;
   1eb74:	4b16      	ldr	r3, [pc, #88]	; (1ebd0 <PORTB_IRQHandler+0x64>)
	uint32_t interruptFlags = PORTB_ISFR;
   1eb76:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	uint32_t counterVal = counter;
   1eb7a:	681a      	ldr	r2, [r3, #0]
	PORTB_ISFR = PORT_ISFR_ISF_MASK;
   1eb7c:	f04f 35ff 	mov.w	r5, #4294967295
   1eb80:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	if(!isScanning)
   1eb84:	791c      	ldrb	r4, [r3, #4]
   1eb86:	b1f4      	cbz	r4, 1ebc6 <PORTB_IRQHandler+0x5a>
	if(interruptFlags & PORT_ISFR_ISF(HAL.IOs->pins->ID_CH0.bitWeight))
   1eb88:	4c12      	ldr	r4, [pc, #72]	; (1ebd4 <PORTB_IRQHandler+0x68>)
   1eb8a:	68e4      	ldr	r4, [r4, #12]
   1eb8c:	6864      	ldr	r4, [r4, #4]
   1eb8e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1eb90:	4228      	tst	r0, r5
   1eb92:	d00a      	beq.n	1ebaa <PORTB_IRQHandler+0x3e>
		if(IdState.ch1.state == ID_STATE_WAIT_HIGH)
   1eb94:	7a1d      	ldrb	r5, [r3, #8]
   1eb96:	2d01      	cmp	r5, #1
			IdState.ch1.state      = ID_STATE_DONE;
   1eb98:	bf09      	itett	eq
   1eb9a:	2502      	moveq	r5, #2
			IdState.ch1.state      = ID_STATE_WAIT_HIGH;
   1eb9c:	2501      	movne	r5, #1
			IdState.ch1.timer_2    = timerVal;
   1eb9e:	6199      	streq	r1, [r3, #24]
			IdState.ch1.counter_2  = counterVal;
   1eba0:	611a      	streq	r2, [r3, #16]
			IdState.ch1.timer_1    = timerVal;
   1eba2:	bf1c      	itt	ne
   1eba4:	6159      	strne	r1, [r3, #20]
			IdState.ch1.counter_1  = counterVal;
   1eba6:	60da      	strne	r2, [r3, #12]
			IdState.ch1.state      = ID_STATE_WAIT_HIGH;
   1eba8:	721d      	strb	r5, [r3, #8]
	if(interruptFlags & PORT_ISFR_ISF(HAL.IOs->pins->ID_CH1.bitWeight))
   1ebaa:	6da4      	ldr	r4, [r4, #88]	; 0x58
   1ebac:	4220      	tst	r0, r4
   1ebae:	d00a      	beq.n	1ebc6 <PORTB_IRQHandler+0x5a>
		if(IdState.ch2.state == ID_STATE_WAIT_HIGH)
   1ebb0:	7f18      	ldrb	r0, [r3, #28]
   1ebb2:	2801      	cmp	r0, #1
			IdState.ch2.counter_2  = counterVal;
   1ebb4:	bf0b      	itete	eq
   1ebb6:	625a      	streq	r2, [r3, #36]	; 0x24
			IdState.ch2.counter_1  = counterVal;
   1ebb8:	621a      	strne	r2, [r3, #32]
			IdState.ch2.state      = ID_STATE_DONE;
   1ebba:	2202      	moveq	r2, #2
			IdState.ch2.state      = ID_STATE_WAIT_HIGH;
   1ebbc:	2201      	movne	r2, #1
			IdState.ch2.timer_2    = timerVal;
   1ebbe:	bf0c      	ite	eq
   1ebc0:	62d9      	streq	r1, [r3, #44]	; 0x2c
			IdState.ch2.timer_1    = timerVal;
   1ebc2:	6299      	strne	r1, [r3, #40]	; 0x28
			IdState.ch2.state      = ID_STATE_WAIT_HIGH;
   1ebc4:	771a      	strb	r2, [r3, #28]
}
   1ebc6:	bd30      	pop	{r4, r5, pc}
   1ebc8:	400b8000 	.word	0x400b8000
   1ebcc:	4004a000 	.word	0x4004a000
   1ebd0:	1fff56d4 	.word	0x1fff56d4
   1ebd4:	00029d1c 	.word	0x00029d1c

0001ebd8 <FTM2_IRQHandler>:
	FTM2_SC &= ~FTM_SC_TOF_MASK;
   1ebd8:	4a13      	ldr	r2, [pc, #76]	; (1ec28 <FTM2_IRQHandler+0x50>)
	counter++;
   1ebda:	4814      	ldr	r0, [pc, #80]	; (1ec2c <FTM2_IRQHandler+0x54>)
	FTM2_SC &= ~FTM_SC_TOF_MASK;
   1ebdc:	6813      	ldr	r3, [r2, #0]
   1ebde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1ebe2:	6013      	str	r3, [r2, #0]
	counter++;
   1ebe4:	6801      	ldr	r1, [r0, #0]
   1ebe6:	3101      	adds	r1, #1
	if(counter < 100)
   1ebe8:	2963      	cmp	r1, #99	; 0x63
   1ebea:	4603      	mov	r3, r0
   1ebec:	d801      	bhi.n	1ebf2 <FTM2_IRQHandler+0x1a>
	counter++;
   1ebee:	6001      	str	r1, [r0, #0]
   1ebf0:	4770      	bx	lr
	counter = 0;
   1ebf2:	2100      	movs	r1, #0
   1ebf4:	6001      	str	r1, [r0, #0]
	FTM2_SC &= ~FTM_SC_CLKS_MASK;
   1ebf6:	6811      	ldr	r1, [r2, #0]
   1ebf8:	f021 0118 	bic.w	r1, r1, #24
   1ebfc:	6011      	str	r1, [r2, #0]
	if(!isScanning)
   1ebfe:	7902      	ldrb	r2, [r0, #4]
   1ec00:	b14a      	cbz	r2, 1ec16 <FTM2_IRQHandler+0x3e>
	if(IdState.ch1.state == ID_STATE_WAIT_HIGH)
   1ec02:	7a02      	ldrb	r2, [r0, #8]
   1ec04:	2a01      	cmp	r2, #1
   1ec06:	d107      	bne.n	1ec18 <FTM2_IRQHandler+0x40>
		IdState.ch1.state = ID_STATE_TIMEOUT;
   1ec08:	2205      	movs	r2, #5
		IdState.ch1.state = ID_STATE_NO_ANSWER;
   1ec0a:	721a      	strb	r2, [r3, #8]
	if(IdState.ch2.state == ID_STATE_WAIT_HIGH)
   1ec0c:	7f1a      	ldrb	r2, [r3, #28]
   1ec0e:	2a01      	cmp	r2, #1
   1ec10:	d106      	bne.n	1ec20 <FTM2_IRQHandler+0x48>
		IdState.ch2.state = ID_STATE_TIMEOUT;
   1ec12:	2205      	movs	r2, #5
		IdState.ch2.state = ID_STATE_NO_ANSWER;
   1ec14:	771a      	strb	r2, [r3, #28]
}
   1ec16:	4770      	bx	lr
	else if(IdState.ch1.state == ID_STATE_WAIT_LOW)
   1ec18:	2a00      	cmp	r2, #0
   1ec1a:	d1f7      	bne.n	1ec0c <FTM2_IRQHandler+0x34>
		IdState.ch1.state = ID_STATE_NO_ANSWER;
   1ec1c:	2204      	movs	r2, #4
   1ec1e:	e7f4      	b.n	1ec0a <FTM2_IRQHandler+0x32>
	else if(IdState.ch2.state == ID_STATE_WAIT_LOW)
   1ec20:	2a00      	cmp	r2, #0
   1ec22:	d1f8      	bne.n	1ec16 <FTM2_IRQHandler+0x3e>
		IdState.ch2.state = ID_STATE_NO_ANSWER;
   1ec24:	2204      	movs	r2, #4
   1ec26:	e7f5      	b.n	1ec14 <FTM2_IRQHandler+0x3c>
   1ec28:	400b8000 	.word	0x400b8000
   1ec2c:	1fff56d4 	.word	0x1fff56d4

0001ec30 <IDDetection_init>:
	isScanning = false;
   1ec30:	4b24      	ldr	r3, [pc, #144]	; (1ecc4 <IDDetection_init+0x94>)
   1ec32:	2200      	movs	r2, #0
{
   1ec34:	b510      	push	{r4, lr}
	SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;
   1ec36:	4c24      	ldr	r4, [pc, #144]	; (1ecc8 <IDDetection_init+0x98>)
	isScanning = false;
   1ec38:	711a      	strb	r2, [r3, #4]
	SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;
   1ec3a:	f241 0230 	movw	r2, #4144	; 0x1030
	enable_irq(INT_FTM2 - 16);
   1ec3e:	2040      	movs	r0, #64	; 0x40
	SIM_SCGC3 |= SIM_SCGC3_FTM2_MASK;
   1ec40:	58a3      	ldr	r3, [r4, r2]
   1ec42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ec46:	50a3      	str	r3, [r4, r2]
	FTM2_MODE |= FTM_MODE_WPDIS_MASK | FTM_MODE_FTMEN_MASK | FTM_MODE_FAULTM_MASK;
   1ec48:	4b20      	ldr	r3, [pc, #128]	; (1eccc <IDDetection_init+0x9c>)
   1ec4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ec4c:	f042 0265 	orr.w	r2, r2, #101	; 0x65
   1ec50:	655a      	str	r2, [r3, #84]	; 0x54
	FTM2_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(3);
   1ec52:	681a      	ldr	r2, [r3, #0]
   1ec54:	f042 020b 	orr.w	r2, r2, #11
   1ec58:	601a      	str	r2, [r3, #0]
	FTM2_CNTIN = TIMER_START;
   1ec5a:	f241 52a1 	movw	r2, #5537	; 0x15a1
   1ec5e:	64da      	str	r2, [r3, #76]	; 0x4c
	FTM2_CONF |= FTM_CONF_NUMTOF(0);
   1ec60:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   1ec64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FTM2_C0SC |= FTM_CnSC_MSB_MASK | FTM_CnSC_ELSB_MASK;
   1ec68:	68da      	ldr	r2, [r3, #12]
   1ec6a:	f042 0228 	orr.w	r2, r2, #40	; 0x28
   1ec6e:	60da      	str	r2, [r3, #12]
	FTM2_SC |= FTM_SC_TOIE_MASK;
   1ec70:	681a      	ldr	r2, [r3, #0]
   1ec72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1ec76:	601a      	str	r2, [r3, #0]
	enable_irq(INT_FTM2 - 16);
   1ec78:	f006 fa40 	bl	250fc <enable_irq>
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
   1ec7c:	f241 0238 	movw	r2, #4152	; 0x1038
   1ec80:	58a3      	ldr	r3, [r4, r2]
   1ec82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ec86:	50a3      	str	r3, [r4, r2]
	HAL.IOs->config->toOutput(&HAL.IOs->pins->ID_CLK);
   1ec88:	4b11      	ldr	r3, [pc, #68]	; (1ecd0 <IDDetection_init+0xa0>)
   1ec8a:	68dc      	ldr	r4, [r3, #12]
   1ec8c:	e9d4 3000 	ldrd	r3, r0, [r4]
   1ec90:	68db      	ldr	r3, [r3, #12]
   1ec92:	3008      	adds	r0, #8
   1ec94:	4798      	blx	r3
	PORT_PCR_REG(HAL.IOs->pins->ID_CH0.portBase, HAL.IOs->pins->ID_CH0.bit)  = PORT_PCR_MUX(1) | PORT_PCR_IRQC(0x0B) | PORT_PCR_PE_MASK | 0x000000;
   1ec96:	6863      	ldr	r3, [r4, #4]
   1ec98:	4a0e      	ldr	r2, [pc, #56]	; (1ecd4 <IDDetection_init+0xa4>)
   1ec9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1ec9c:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
   1eca0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
	PORT_PCR_REG(HAL.IOs->pins->ID_CH1.portBase, HAL.IOs->pins->ID_CH1.bit)  = PORT_PCR_MUX(1) | PORT_PCR_IRQC(0x0B) | PORT_PCR_PE_MASK | 0x000000;
   1eca4:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1eca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1ecaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	PORTB_ISFR = -1;
   1ecae:	4b0a      	ldr	r3, [pc, #40]	; (1ecd8 <IDDetection_init+0xa8>)
   1ecb0:	f04f 32ff 	mov.w	r2, #4294967295
}
   1ecb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PORTB_ISFR = -1;
   1ecb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	enable_irq(INT_PORTB - 16);
   1ecbc:	2058      	movs	r0, #88	; 0x58
   1ecbe:	f006 ba1d 	b.w	250fc <enable_irq>
   1ecc2:	bf00      	nop
   1ecc4:	1fff56d4 	.word	0x1fff56d4
   1ecc8:	40047000 	.word	0x40047000
   1eccc:	400b8000 	.word	0x400b8000
   1ecd0:	00029d1c 	.word	0x00029d1c
   1ecd4:	000b0102 	.word	0x000b0102
   1ecd8:	4004a000 	.word	0x4004a000

0001ecdc <IDDetection_deInit>:
{
   1ecdc:	b508      	push	{r3, lr}
	disable_irq(INT_FTM2 - 16);
   1ecde:	2040      	movs	r0, #64	; 0x40
   1ece0:	f006 fa5a 	bl	25198 <disable_irq>
	FTM2_SC &= ~FTM_SC_CLKS_MASK;
   1ece4:	4b08      	ldr	r3, [pc, #32]	; (1ed08 <IDDetection_deInit+0x2c>)
   1ece6:	681a      	ldr	r2, [r3, #0]
   1ece8:	f022 0218 	bic.w	r2, r2, #24
   1ecec:	601a      	str	r2, [r3, #0]
	FTM2_SC &= ~FTM_SC_TOF_MASK;
   1ecee:	681a      	ldr	r2, [r3, #0]
   1ecf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1ecf4:	601a      	str	r2, [r3, #0]
	disable_irq(INT_PORTB - 16);
   1ecf6:	2058      	movs	r0, #88	; 0x58
   1ecf8:	f006 fa4e 	bl	25198 <disable_irq>
	PORTB_ISFR = -1;
   1ecfc:	4b03      	ldr	r3, [pc, #12]	; (1ed0c <IDDetection_deInit+0x30>)
   1ecfe:	f04f 32ff 	mov.w	r2, #4294967295
   1ed02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   1ed06:	bd08      	pop	{r3, pc}
   1ed08:	400b8000 	.word	0x400b8000
   1ed0c:	4004a000 	.word	0x4004a000

0001ed10 <IDDetection_detect>:

// Detect IDs of attached boards - returns true when done
uint8_t IDDetection_detect(IdAssignmentTypeDef *out)
{
	if(!isScanning)
   1ed10:	4b56      	ldr	r3, [pc, #344]	; (1ee6c <IDDetection_detect+0x15c>)
{
   1ed12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(!isScanning)
   1ed14:	791d      	ldrb	r5, [r3, #4]
{
   1ed16:	4606      	mov	r6, r0
   1ed18:	461c      	mov	r4, r3
	if(!isScanning)
   1ed1a:	b9dd      	cbnz	r5, 1ed54 <IDDetection_detect+0x44>
	{
		FTM2_SC &= ~FTM_SC_CLKS_MASK;  // stop timer
   1ed1c:	4a54      	ldr	r2, [pc, #336]	; (1ee70 <IDDetection_detect+0x160>)
   1ed1e:	6811      	ldr	r1, [r2, #0]
   1ed20:	f021 0118 	bic.w	r1, r1, #24
   1ed24:	6011      	str	r1, [r2, #0]
		FTM2_CNTIN = TIMER_START;      // clear counter
   1ed26:	f241 51a1 	movw	r1, #5537	; 0x15a1
   1ed2a:	64d1      	str	r1, [r2, #76]	; 0x4c

		IdState.ch1.state       = ID_STATE_WAIT_LOW;
   1ed2c:	721d      	strb	r5, [r3, #8]
		IdState.ch1.detectedBy  = FOUND_BY_NONE;
   1ed2e:	729d      	strb	r5, [r3, #10]
		IdState.ch2.state       = ID_STATE_WAIT_LOW;
   1ed30:	771d      	strb	r5, [r3, #28]
		IdState.ch2.detectedBy  = FOUND_BY_NONE;
   1ed32:	779d      	strb	r5, [r3, #30]
		isScanning = true;
   1ed34:	2101      	movs	r1, #1
   1ed36:	7119      	strb	r1, [r3, #4]

		FTM2_SC |= FTM_SC_CLKS(1);  // start timer
   1ed38:	6813      	ldr	r3, [r2, #0]
   1ed3a:	f043 0308 	orr.w	r3, r3, #8
   1ed3e:	6013      	str	r3, [r2, #0]
		ID_CLK_HIGH();
   1ed40:	4b4c      	ldr	r3, [pc, #304]	; (1ee74 <IDDetection_detect+0x164>)
   1ed42:	68db      	ldr	r3, [r3, #12]
   1ed44:	e9d3 3000 	ldrd	r3, r0, [r3]
   1ed48:	695b      	ldr	r3, [r3, #20]
   1ed4a:	3008      	adds	r0, #8
   1ed4c:	4798      	blx	r3
		// EEPROM access changes the ID_CH1 pin configuration -> write it again // todo CHECK 2: workaround, do this better later (LH) #2
		PORT_PCR_REG(HAL.IOs->pins->ID_CH1.portBase, HAL.IOs->pins->ID_CH1.bit) = PORT_PCR_MUX(1) | PORT_PCR_IRQC(0x0B) | PORT_PCR_PE_MASK | 0x000000;
	}

	return true;
}
   1ed4e:	4628      	mov	r0, r5
   1ed50:	b003      	add	sp, #12
   1ed52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(!IDSTATE_SCAN_DONE(IdState))
   1ed54:	7a1b      	ldrb	r3, [r3, #8]
   1ed56:	2b01      	cmp	r3, #1
   1ed58:	f04f 0500 	mov.w	r5, #0
   1ed5c:	d9f7      	bls.n	1ed4e <IDDetection_detect+0x3e>
   1ed5e:	7f23      	ldrb	r3, [r4, #28]
   1ed60:	2b01      	cmp	r3, #1
   1ed62:	d9f4      	bls.n	1ed4e <IDDetection_detect+0x3e>
	ID_CLK_LOW();
   1ed64:	4b43      	ldr	r3, [pc, #268]	; (1ee74 <IDDetection_detect+0x164>)
	isScanning = false;
   1ed66:	7125      	strb	r5, [r4, #4]
	ID_CLK_LOW();
   1ed68:	68df      	ldr	r7, [r3, #12]
   1ed6a:	e9d7 3000 	ldrd	r3, r0, [r7]
   1ed6e:	699b      	ldr	r3, [r3, #24]
   1ed70:	3008      	adds	r0, #8
   1ed72:	4798      	blx	r3
	FTM2_SC &= ~FTM_SC_CLKS_MASK; // stop timer
   1ed74:	4a3e      	ldr	r2, [pc, #248]	; (1ee70 <IDDetection_detect+0x160>)
   1ed76:	6813      	ldr	r3, [r2, #0]
   1ed78:	f023 0318 	bic.w	r3, r3, #24
   1ed7c:	6013      	str	r3, [r2, #0]
	out->ch1.state = IdState.ch1.state;
   1ed7e:	7a23      	ldrb	r3, [r4, #8]
   1ed80:	7033      	strb	r3, [r6, #0]
	if(IdState.ch1.state == ID_STATE_DONE)
   1ed82:	7a23      	ldrb	r3, [r4, #8]
   1ed84:	2b02      	cmp	r3, #2
   1ed86:	d169      	bne.n	1ee5c <IDDetection_detect+0x14c>
		uint32_t tickDiff =    (IdState.ch1.counter_2 - IdState.ch1.counter_1) * FULLCOUNTER
   1ed88:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
   1ed8c:	1ac0      	subs	r0, r0, r3
						   + (IdState.ch1.timer_2   - IdState.ch1.timer_1);
   1ed8e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1ed92:	1a9b      	subs	r3, r3, r2
		uint32_t tickDiff =    (IdState.ch1.counter_2 - IdState.ch1.counter_1) * FULLCOUNTER
   1ed94:	f64e 2260 	movw	r2, #60000	; 0xea60
   1ed98:	fb02 3000 	mla	r0, r2, r0, r3
		out->ch1.id = assign(tickDiff * TICK_FACTOR);
   1ed9c:	230a      	movs	r3, #10
   1ed9e:	4358      	muls	r0, r3
   1eda0:	2306      	movs	r3, #6
   1eda2:	fbb0 f0f3 	udiv	r0, r0, r3
   1eda6:	f7ff fe0b 	bl	1e9c0 <assign>
   1edaa:	7070      	strb	r0, [r6, #1]
		if(out->ch1.id)
   1edac:	2800      	cmp	r0, #0
   1edae:	d052      	beq.n	1ee56 <IDDetection_detect+0x146>
			IdState.ch1.detectedBy = FOUND_BY_MONOFLOP;
   1edb0:	2301      	movs	r3, #1
   1edb2:	72a3      	strb	r3, [r4, #10]
	out->ch2.state 	= IdState.ch2.state;
   1edb4:	7f23      	ldrb	r3, [r4, #28]
   1edb6:	7533      	strb	r3, [r6, #20]
	if(IdState.ch2.state == ID_STATE_DONE)
   1edb8:	7f23      	ldrb	r3, [r4, #28]
   1edba:	2b02      	cmp	r3, #2
   1edbc:	d153      	bne.n	1ee66 <IDDetection_detect+0x156>
		uint32_t tickDiff =    (IdState.ch2.counter_2 - IdState.ch2.counter_1) * FULLCOUNTER
   1edbe:	e9d4 3008 	ldrd	r3, r0, [r4, #32]
   1edc2:	1ac0      	subs	r0, r0, r3
						   + (IdState.ch2.timer_2   - IdState.ch2.timer_1);
   1edc4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1edc8:	1a9b      	subs	r3, r3, r2
		uint32_t tickDiff =    (IdState.ch2.counter_2 - IdState.ch2.counter_1) * FULLCOUNTER
   1edca:	f64e 2260 	movw	r2, #60000	; 0xea60
   1edce:	fb02 3000 	mla	r0, r2, r0, r3
		out->ch2.id = assign(tickDiff * TICK_FACTOR);
   1edd2:	230a      	movs	r3, #10
   1edd4:	4358      	muls	r0, r3
   1edd6:	2306      	movs	r3, #6
   1edd8:	fbb0 f0f3 	udiv	r0, r0, r3
   1eddc:	f7ff fdf0 	bl	1e9c0 <assign>
   1ede0:	7570      	strb	r0, [r6, #21]
		if(out->ch2.id)
   1ede2:	2800      	cmp	r0, #0
   1ede4:	d03c      	beq.n	1ee60 <IDDetection_detect+0x150>
			IdState.ch2.detectedBy = FOUND_BY_MONOFLOP;
   1ede6:	2301      	movs	r3, #1
   1ede8:	77a3      	strb	r3, [r4, #30]
	if(!out->ch1.id)
   1edea:	7873      	ldrb	r3, [r6, #1]
   1edec:	b9bb      	cbnz	r3, 1ee1e <IDDetection_detect+0x10e>
		if(!eeprom_check(&SPI.ch1))
   1edee:	4822      	ldr	r0, [pc, #136]	; (1ee78 <IDDetection_detect+0x168>)
   1edf0:	f000 fa08 	bl	1f204 <eeprom_check>
   1edf4:	b960      	cbnz	r0, 1ee10 <IDDetection_detect+0x100>
			eeprom_read_array(&SPI.ch1, EEPROM_ADDR_ID, &idBuffer[0], 1);
   1edf6:	2301      	movs	r3, #1
   1edf8:	481f      	ldr	r0, [pc, #124]	; (1ee78 <IDDetection_detect+0x168>)
   1edfa:	aa01      	add	r2, sp, #4
   1edfc:	2110      	movs	r1, #16
   1edfe:	f000 f97f 	bl	1f100 <eeprom_read_array>
			out->ch1.id = idBuffer[0];
   1ee02:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1ee06:	7073      	strb	r3, [r6, #1]
			if(out->ch1.id)
   1ee08:	b113      	cbz	r3, 1ee10 <IDDetection_detect+0x100>
				out->ch1.state = ID_STATE_DONE;
   1ee0a:	2302      	movs	r3, #2
   1ee0c:	7033      	strb	r3, [r6, #0]
				IdState.ch1.detectedBy = FOUND_BY_EEPROM;
   1ee0e:	72a3      	strb	r3, [r4, #10]
		PORT_PCR_REG(HAL.IOs->pins->ID_CH0.portBase, HAL.IOs->pins->ID_CH0.bit) = PORT_PCR_MUX(1) | PORT_PCR_IRQC(0x0B) | PORT_PCR_PE_MASK | 0x000000;
   1ee10:	687b      	ldr	r3, [r7, #4]
   1ee12:	491a      	ldr	r1, [pc, #104]	; (1ee7c <IDDetection_detect+0x16c>)
   1ee14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ee16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1ee1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if(!out->ch2.id)
   1ee1e:	7d73      	ldrb	r3, [r6, #21]
   1ee20:	b9bb      	cbnz	r3, 1ee52 <IDDetection_detect+0x142>
		if(!eeprom_check(&SPI.ch2))
   1ee22:	4817      	ldr	r0, [pc, #92]	; (1ee80 <IDDetection_detect+0x170>)
   1ee24:	f000 f9ee 	bl	1f204 <eeprom_check>
   1ee28:	b960      	cbnz	r0, 1ee44 <IDDetection_detect+0x134>
			eeprom_read_array(&SPI.ch2, EEPROM_ADDR_ID, &idBuffer[0], 1);
   1ee2a:	2301      	movs	r3, #1
   1ee2c:	4814      	ldr	r0, [pc, #80]	; (1ee80 <IDDetection_detect+0x170>)
   1ee2e:	aa01      	add	r2, sp, #4
   1ee30:	2110      	movs	r1, #16
   1ee32:	f000 f965 	bl	1f100 <eeprom_read_array>
			out->ch2.id = idBuffer[0];
   1ee36:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1ee3a:	7573      	strb	r3, [r6, #21]
			if(out->ch2.id)
   1ee3c:	b113      	cbz	r3, 1ee44 <IDDetection_detect+0x134>
				out->ch2.state = ID_STATE_DONE;
   1ee3e:	2302      	movs	r3, #2
   1ee40:	7533      	strb	r3, [r6, #20]
				IdState.ch2.detectedBy = FOUND_BY_EEPROM;
   1ee42:	77a3      	strb	r3, [r4, #30]
		PORT_PCR_REG(HAL.IOs->pins->ID_CH1.portBase, HAL.IOs->pins->ID_CH1.bit) = PORT_PCR_MUX(1) | PORT_PCR_IRQC(0x0B) | PORT_PCR_PE_MASK | 0x000000;
   1ee44:	687b      	ldr	r3, [r7, #4]
   1ee46:	490d      	ldr	r1, [pc, #52]	; (1ee7c <IDDetection_detect+0x16c>)
   1ee48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ee4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
   1ee4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1ee52:	2501      	movs	r5, #1
   1ee54:	e77b      	b.n	1ed4e <IDDetection_detect+0x3e>
			out->ch1.state = ID_STATE_INVALID; // Invalid ID pulse detected
   1ee56:	2303      	movs	r3, #3
   1ee58:	7033      	strb	r3, [r6, #0]
   1ee5a:	e7ab      	b.n	1edb4 <IDDetection_detect+0xa4>
		out->ch1.id = 0;
   1ee5c:	7075      	strb	r5, [r6, #1]
   1ee5e:	e7a9      	b.n	1edb4 <IDDetection_detect+0xa4>
			out->ch2.state = ID_STATE_INVALID; // Invalid ID pulse detected
   1ee60:	2303      	movs	r3, #3
   1ee62:	7533      	strb	r3, [r6, #20]
   1ee64:	e7c1      	b.n	1edea <IDDetection_detect+0xda>
		out->ch2.id = 0;
   1ee66:	2300      	movs	r3, #0
   1ee68:	7573      	strb	r3, [r6, #21]
   1ee6a:	e7be      	b.n	1edea <IDDetection_detect+0xda>
   1ee6c:	1fff56d4 	.word	0x1fff56d4
   1ee70:	400b8000 	.word	0x400b8000
   1ee74:	00029d1c 	.word	0x00029d1c
   1ee78:	1fff09d8 	.word	0x1fff09d8
   1ee7c:	000b0102 	.word	0x000b0102
   1ee80:	1fff09ec 	.word	0x1fff09ec

0001ee84 <IDDetection_initialScan>:

void IDDetection_initialScan(IdAssignmentTypeDef *ids)
{
   1ee84:	b510      	push	{r4, lr}
   1ee86:	4604      	mov	r4, r0
	while(!IDDetection_detect(ids))
   1ee88:	4620      	mov	r0, r4
   1ee8a:	f7ff ff41 	bl	1ed10 <IDDetection_detect>
   1ee8e:	b100      	cbz	r0, 1ee92 <IDDetection_initialScan+0xe>
	{
		vitalsignsmonitor_checkVitalSigns();
		tmcl_process();
	}
}
   1ee90:	bd10      	pop	{r4, pc}
		vitalsignsmonitor_checkVitalSigns();
   1ee92:	f000 fba7 	bl	1f5e4 <vitalsignsmonitor_checkVitalSigns>
		tmcl_process();
   1ee96:	f7ff fd57 	bl	1e948 <tmcl_process>
   1ee9a:	e7f5      	b.n	1ee88 <IDDetection_initialScan+0x4>

0001ee9c <eeprom_write_byte>:
	Zweck: Schreiben eines Bytes in das EEPROM auf dem Evalboard.
********************************************************************/
void eeprom_write_byte(SPIChannelTypeDef *SPIChannel, uint16_t address, uint8_t value)
{
	// select CSN of eeprom
	IOPinTypeDef* io = SPIChannel->CSN;
   1ee9c:	4b2b      	ldr	r3, [pc, #172]	; (1ef4c <eeprom_write_byte+0xb0>)
{
   1ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eea2:	68de      	ldr	r6, [r3, #12]
	IOPinTypeDef* io = SPIChannel->CSN;
   1eea4:	6847      	ldr	r7, [r0, #4]
	if(SPIChannel == &SPI.ch1) {
   1eea6:	6873      	ldr	r3, [r6, #4]
{
   1eea8:	4690      	mov	r8, r2
	if(SPIChannel == &SPI.ch1) {
   1eeaa:	4a29      	ldr	r2, [pc, #164]	; (1ef50 <eeprom_write_byte+0xb4>)
   1eeac:	4290      	cmp	r0, r2
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1eeae:	bf0e      	itee	eq
   1eeb0:	3328      	addeq	r3, #40	; 0x28
		EEPROM.ch1.init = false;
	} else {
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1eeb2:	3348      	addne	r3, #72	; 0x48
   1eeb4:	6043      	strne	r3, [r0, #4]
   1eeb6:	4a27      	ldr	r2, [pc, #156]	; (1ef54 <eeprom_write_byte+0xb8>)
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1eeb8:	bf08      	it	eq
   1eeba:	6043      	streq	r3, [r0, #4]
		EEPROM.ch2.init = false;
	}

	IOs.toOutput(SPIChannel->CSN);
   1eebc:	4b26      	ldr	r3, [pc, #152]	; (1ef58 <eeprom_write_byte+0xbc>)
{
   1eebe:	4604      	mov	r4, r0
   1eec0:	460d      	mov	r5, r1
   1eec2:	f04f 0100 	mov.w	r1, #0
	IOs.toOutput(SPIChannel->CSN);
   1eec6:	68db      	ldr	r3, [r3, #12]
   1eec8:	6840      	ldr	r0, [r0, #4]
		EEPROM.ch1.init = false;
   1eeca:	bf0c      	ite	eq
   1eecc:	7011      	strbeq	r1, [r2, #0]
		EEPROM.ch2.init = false;
   1eece:	7611      	strbne	r1, [r2, #24]
	IOs.toOutput(SPIChannel->CSN);
   1eed0:	4798      	blx	r3

	// Schreiben erlauben
	SPIChannel->readWrite(0x06, true); // Befehl "Write Enable"
   1eed2:	68a3      	ldr	r3, [r4, #8]
   1eed4:	2101      	movs	r1, #1
   1eed6:	2006      	movs	r0, #6
   1eed8:	4798      	blx	r3
	do
	{
		SPIChannel->readWrite(0x05, false); // Befehl "Get Status"
   1eeda:	68a3      	ldr	r3, [r4, #8]
   1eedc:	2100      	movs	r1, #0
   1eede:	2005      	movs	r0, #5
   1eee0:	4798      	blx	r3
	} while((SPIChannel->readWrite(0x00, true) & 0x02) == 0x00);  // Warte bis "Write Enable"-Bit gesetzt ist
   1eee2:	68a3      	ldr	r3, [r4, #8]
   1eee4:	2101      	movs	r1, #1
   1eee6:	2000      	movs	r0, #0
   1eee8:	4798      	blx	r3
   1eeea:	0783      	lsls	r3, r0, #30
   1eeec:	d5f5      	bpl.n	1eeda <eeprom_write_byte+0x3e>

	// Eigentliches Schreiben
	SPIChannel->readWrite(0x02, false); // Befehl "Write"
   1eeee:	68a3      	ldr	r3, [r4, #8]
   1eef0:	2100      	movs	r1, #0
   1eef2:	2002      	movs	r0, #2
   1eef4:	4798      	blx	r3
	SPIChannel->readWrite(address >> 8, false);
   1eef6:	68a3      	ldr	r3, [r4, #8]
   1eef8:	2100      	movs	r1, #0
   1eefa:	0a28      	lsrs	r0, r5, #8
   1eefc:	4798      	blx	r3
	SPIChannel->readWrite(address & 0xFF, false);
   1eefe:	68a3      	ldr	r3, [r4, #8]
   1ef00:	2100      	movs	r1, #0
   1ef02:	b2e8      	uxtb	r0, r5
   1ef04:	4798      	blx	r3
	SPIChannel->readWrite(value, true);
   1ef06:	68a3      	ldr	r3, [r4, #8]
   1ef08:	2101      	movs	r1, #1
   1ef0a:	4640      	mov	r0, r8
   1ef0c:	4798      	blx	r3

	// Warten bis Schreibvorgang beendet ist
	do
	{
		SPIChannel->readWrite(0x05, false); //Befehl "Get Status"
   1ef0e:	68a3      	ldr	r3, [r4, #8]
   1ef10:	2100      	movs	r1, #0
   1ef12:	2005      	movs	r0, #5
   1ef14:	4798      	blx	r3
	} while(SPIChannel->readWrite(0x00, true) & 0x01);
   1ef16:	68a3      	ldr	r3, [r4, #8]
   1ef18:	2101      	movs	r1, #1
   1ef1a:	2000      	movs	r0, #0
   1ef1c:	4798      	blx	r3
   1ef1e:	f010 0501 	ands.w	r5, r0, #1
   1ef22:	d1f4      	bne.n	1ef0e <eeprom_write_byte+0x72>

	//block writing
	SPIChannel->readWrite(0x04, true); //Befehl "Write Disable"
   1ef24:	68a3      	ldr	r3, [r4, #8]
   1ef26:	2101      	movs	r1, #1
   1ef28:	2004      	movs	r0, #4
   1ef2a:	4798      	blx	r3
	do
	{
		SPIChannel->readWrite(0x05, false); //Befehl "Get Status"
   1ef2c:	68a3      	ldr	r3, [r4, #8]
   1ef2e:	4629      	mov	r1, r5
   1ef30:	2005      	movs	r0, #5
   1ef32:	4798      	blx	r3
	} while((SPIChannel->readWrite(0x00, true) & 0x02) == 0x01); //Warte bis "Write Enable"-Bit zurückgesetzt wird
   1ef34:	68a3      	ldr	r3, [r4, #8]
   1ef36:	2101      	movs	r1, #1
   1ef38:	4628      	mov	r0, r5
   1ef3a:	4798      	blx	r3

	HAL.IOs->config->toInput(SPIChannel->CSN);
   1ef3c:	6833      	ldr	r3, [r6, #0]
   1ef3e:	6860      	ldr	r0, [r4, #4]
   1ef40:	691b      	ldr	r3, [r3, #16]
   1ef42:	4798      	blx	r3
	SPIChannel->CSN = io;
   1ef44:	6067      	str	r7, [r4, #4]
}
   1ef46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef4a:	bf00      	nop
   1ef4c:	00029d1c 	.word	0x00029d1c
   1ef50:	1fff09d8 	.word	0x1fff09d8
   1ef54:	1fff5710 	.word	0x1fff5710
   1ef58:	1fff0078 	.word	0x1fff0078

0001ef5c <eeprom_write_array>:
	Dabei können beliebig viele Bytes (also auch das gesamte EEPROM
	beschrieben werden (die speziellen Eigenschaften des 25128 werden
	dabei beachtet).
********************************************************************/
void eeprom_write_array(SPIChannelTypeDef *SPIChannel, uint16_t address, uint8_t *data, uint16_t size)
{
   1ef5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef60:	461f      	mov	r7, r3
   1ef62:	4b4b      	ldr	r3, [pc, #300]	; (1f090 <eeprom_write_array+0x134>)
	uint16_t i;

	//select CSN of eeprom
	IOPinTypeDef* io = SPIChannel->CSN;
   1ef64:	f8d0 a004 	ldr.w	sl, [r0, #4]
	if(SPIChannel == &SPI.ch1) {
   1ef68:	68db      	ldr	r3, [r3, #12]
   1ef6a:	9301      	str	r3, [sp, #4]
{
   1ef6c:	460d      	mov	r5, r1
   1ef6e:	6859      	ldr	r1, [r3, #4]
	if(SPIChannel == &SPI.ch1) {
   1ef70:	4b48      	ldr	r3, [pc, #288]	; (1f094 <eeprom_write_array+0x138>)
   1ef72:	4298      	cmp	r0, r3
   1ef74:	4b48      	ldr	r3, [pc, #288]	; (1f098 <eeprom_write_array+0x13c>)
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
		EEPROM.ch1.init = false;
	} else {
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1ef76:	bf18      	it	ne
   1ef78:	3148      	addne	r1, #72	; 0x48
{
   1ef7a:	4690      	mov	r8, r2
   1ef7c:	f04f 0200 	mov.w	r2, #0
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1ef80:	bf13      	iteet	ne
   1ef82:	6041      	strne	r1, [r0, #4]
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1ef84:	3128      	addeq	r1, #40	; 0x28
		EEPROM.ch1.init = false;
   1ef86:	701a      	strbeq	r2, [r3, #0]
		EEPROM.ch2.init = false;
   1ef88:	761a      	strbne	r2, [r3, #24]
	}

	IOs.toOutput(SPIChannel->CSN);
   1ef8a:	4b44      	ldr	r3, [pc, #272]	; (1f09c <eeprom_write_array+0x140>)
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1ef8c:	bf08      	it	eq
   1ef8e:	6041      	streq	r1, [r0, #4]
{
   1ef90:	4604      	mov	r4, r0
	IOs.toOutput(SPIChannel->CSN);
   1ef92:	68db      	ldr	r3, [r3, #12]
   1ef94:	6840      	ldr	r0, [r0, #4]
   1ef96:	4798      	blx	r3

	// Schreiben erlauben
	SPIChannel->readWrite(0x06, true); // Befehl "Write Enable"
   1ef98:	68a3      	ldr	r3, [r4, #8]
   1ef9a:	2101      	movs	r1, #1
   1ef9c:	2006      	movs	r0, #6
   1ef9e:	4798      	blx	r3
	do
	{
		SPIChannel->readWrite( 0x05, false); //Befehl "Get Status"
   1efa0:	68a3      	ldr	r3, [r4, #8]
   1efa2:	2100      	movs	r1, #0
   1efa4:	2005      	movs	r0, #5
   1efa6:	4798      	blx	r3
	} while((SPIChannel->readWrite(0x00, true) & 0x02)==0x00); //Warte bis "Write Enable"-Bit gesetzt
   1efa8:	68a3      	ldr	r3, [r4, #8]
   1efaa:	2101      	movs	r1, #1
   1efac:	2000      	movs	r0, #0
   1efae:	4798      	blx	r3
   1efb0:	0783      	lsls	r3, r0, #30
   1efb2:	d5f5      	bpl.n	1efa0 <eeprom_write_array+0x44>

	// Schreibvorgang (Startadresse)
	SPIChannel->readWrite(0x02, false); // Befehl "Write"
   1efb4:	68a3      	ldr	r3, [r4, #8]
   1efb6:	2100      	movs	r1, #0
   1efb8:	2002      	movs	r0, #2
   1efba:	4798      	blx	r3
	SPIChannel->readWrite(address >> 8, false);
   1efbc:	68a3      	ldr	r3, [r4, #8]
   1efbe:	2100      	movs	r1, #0
   1efc0:	0a28      	lsrs	r0, r5, #8
   1efc2:	4798      	blx	r3
	SPIChannel->readWrite(address & 0xFF, false);
   1efc4:	68a3      	ldr	r3, [r4, #8]
   1efc6:	2100      	movs	r1, #0
   1efc8:	b2e8      	uxtb	r0, r5
   1efca:	4798      	blx	r3

	// Eigentliches Schreiben der Daten
	for(i = 0; i < size; i++)
   1efcc:	2600      	movs	r6, #0
		// und neuen Write-Befehl senden (bzw. beim letzten Datenbyte einfach nur EEPROM
		// deselektieren).
		// Dies ist erforderlich, da beim Beschreiben im 25128 nur die untersten sechs Bits der
		// Adresse hochgezählt werden (anders als beim Lesen).
		address++;
		SPIChannel->readWrite(*(data+i), (address & 0x0000003F)==0 || i==size-1);
   1efce:	f107 3bff 	add.w	fp, r7, #4294967295
	for(i = 0; i < size; i++)
   1efd2:	42b7      	cmp	r7, r6
   1efd4:	68a2      	ldr	r2, [r4, #8]
   1efd6:	d120      	bne.n	1f01a <eeprom_write_array+0xbe>
	}

	// Warte bis Schreibvorgang beendet
	do
	{
		SPIChannel->readWrite(0x05, false); // Befehl "Get Status"
   1efd8:	68a3      	ldr	r3, [r4, #8]
   1efda:	2100      	movs	r1, #0
   1efdc:	2005      	movs	r0, #5
   1efde:	4798      	blx	r3
	} while(SPIChannel->readWrite(0x00, true) & 0x01);
   1efe0:	68a3      	ldr	r3, [r4, #8]
   1efe2:	2101      	movs	r1, #1
   1efe4:	2000      	movs	r0, #0
   1efe6:	4798      	blx	r3
   1efe8:	f010 0501 	ands.w	r5, r0, #1
   1efec:	d1f4      	bne.n	1efd8 <eeprom_write_array+0x7c>

	// block writing
	SPIChannel->readWrite(0x04, true); // Befehl "Write Disable"
   1efee:	68a3      	ldr	r3, [r4, #8]
   1eff0:	2101      	movs	r1, #1
   1eff2:	2004      	movs	r0, #4
   1eff4:	4798      	blx	r3
	do
	{
		SPIChannel->readWrite(0x05, false); // Befehl "Get Status"
   1eff6:	68a3      	ldr	r3, [r4, #8]
   1eff8:	4629      	mov	r1, r5
   1effa:	2005      	movs	r0, #5
   1effc:	4798      	blx	r3
	} while((SPIChannel->readWrite(0x00, true) & 0x02) == 0x01);  // Warte bis "Write Enable"-Bit zurückgesetzt wird
   1effe:	68a3      	ldr	r3, [r4, #8]
   1f000:	2101      	movs	r1, #1
   1f002:	4628      	mov	r0, r5
   1f004:	4798      	blx	r3

	HAL.IOs->config->toInput(SPIChannel->CSN);
   1f006:	9b01      	ldr	r3, [sp, #4]
   1f008:	6860      	ldr	r0, [r4, #4]
   1f00a:	681b      	ldr	r3, [r3, #0]
   1f00c:	691b      	ldr	r3, [r3, #16]
   1f00e:	4798      	blx	r3
	SPIChannel->CSN = io;
   1f010:	f8c4 a004 	str.w	sl, [r4, #4]
}
   1f014:	b003      	add	sp, #12
   1f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		address++;
   1f01a:	1c6b      	adds	r3, r5, #1
		SPIChannel->readWrite(*(data+i), (address & 0x0000003F)==0 || i==size-1);
   1f01c:	f013 093f 	ands.w	r9, r3, #63	; 0x3f
   1f020:	f818 0006 	ldrb.w	r0, [r8, r6]
		address++;
   1f024:	b29d      	uxth	r5, r3
		SPIChannel->readWrite(*(data+i), (address & 0x0000003F)==0 || i==size-1);
   1f026:	d031      	beq.n	1f08c <eeprom_write_array+0x130>
   1f028:	ebab 0c06 	sub.w	ip, fp, r6
   1f02c:	f1dc 0100 	rsbs	r1, ip, #0
   1f030:	eb41 010c 	adc.w	r1, r1, ip
   1f034:	4790      	blx	r2
		if((address & 0x0000003F)==0 && i<size-1)  // Adressbits übergelaufen, aber noch Bytes zu schreiben?
   1f036:	f1b9 0f00 	cmp.w	r9, #0
   1f03a:	d125      	bne.n	1f088 <eeprom_write_array+0x12c>
   1f03c:	45b3      	cmp	fp, r6
   1f03e:	dd23      	ble.n	1f088 <eeprom_write_array+0x12c>
				SPIChannel->readWrite(0x05, false);  // Befehl "Get Status"
   1f040:	68a3      	ldr	r3, [r4, #8]
   1f042:	2100      	movs	r1, #0
   1f044:	2005      	movs	r0, #5
   1f046:	4798      	blx	r3
			} while(SPIChannel->readWrite(0x00, true) & 0x01);
   1f048:	68a3      	ldr	r3, [r4, #8]
   1f04a:	2101      	movs	r1, #1
   1f04c:	2000      	movs	r0, #0
   1f04e:	4798      	blx	r3
   1f050:	07c2      	lsls	r2, r0, #31
   1f052:	d4f5      	bmi.n	1f040 <eeprom_write_array+0xe4>
			SPIChannel->readWrite(0x06, true);  // Befehl "Write Enable"
   1f054:	68a3      	ldr	r3, [r4, #8]
   1f056:	2101      	movs	r1, #1
   1f058:	2006      	movs	r0, #6
   1f05a:	4798      	blx	r3
				SPIChannel->readWrite(0x05, false);  // Befehl "Get Status"
   1f05c:	68a3      	ldr	r3, [r4, #8]
   1f05e:	2100      	movs	r1, #0
   1f060:	2005      	movs	r0, #5
   1f062:	4798      	blx	r3
			} while((SPIChannel->readWrite(0x00, true) & 0x02)==0x00); //Warte bis "Write Enable"-Bit gesetzt
   1f064:	68a3      	ldr	r3, [r4, #8]
   1f066:	2101      	movs	r1, #1
   1f068:	2000      	movs	r0, #0
   1f06a:	4798      	blx	r3
   1f06c:	0783      	lsls	r3, r0, #30
   1f06e:	d5f5      	bpl.n	1f05c <eeprom_write_array+0x100>
			SPIChannel->readWrite(0x02, false); // Befehl "Write"
   1f070:	68a3      	ldr	r3, [r4, #8]
   1f072:	2100      	movs	r1, #0
   1f074:	2002      	movs	r0, #2
   1f076:	4798      	blx	r3
			SPIChannel->readWrite(address >> 8, false);
   1f078:	68a3      	ldr	r3, [r4, #8]
   1f07a:	2100      	movs	r1, #0
   1f07c:	0a28      	lsrs	r0, r5, #8
   1f07e:	4798      	blx	r3
			SPIChannel->readWrite(address & 0xFF, false);
   1f080:	68a3      	ldr	r3, [r4, #8]
   1f082:	2100      	movs	r1, #0
   1f084:	b2e8      	uxtb	r0, r5
   1f086:	4798      	blx	r3
	for(i = 0; i < size; i++)
   1f088:	3601      	adds	r6, #1
   1f08a:	e7a2      	b.n	1efd2 <eeprom_write_array+0x76>
		SPIChannel->readWrite(*(data+i), (address & 0x0000003F)==0 || i==size-1);
   1f08c:	2101      	movs	r1, #1
   1f08e:	e7d1      	b.n	1f034 <eeprom_write_array+0xd8>
   1f090:	00029d1c 	.word	0x00029d1c
   1f094:	1fff09d8 	.word	0x1fff09d8
   1f098:	1fff5710 	.word	0x1fff5710
   1f09c:	1fff0078 	.word	0x1fff0078

0001f0a0 <eeprom_read_byte>:
	Rückgabewert: der gelesene Wert

	Zweck: Lesen eines Bytes aus dem EEPROM des Evalboards.
********************************************************************/
uint8_t eeprom_read_byte(SPIChannelTypeDef *SPIChannel, uint16_t address)
{
   1f0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f0a2:	4b14      	ldr	r3, [pc, #80]	; (1f0f4 <eeprom_read_byte+0x54>)
	//select CSN of eeprom
	IOPinTypeDef* io = SPIChannel->CSN;
	if(SPIChannel == &SPI.ch1)
   1f0a4:	4a14      	ldr	r2, [pc, #80]	; (1f0f8 <eeprom_read_byte+0x58>)
   1f0a6:	68de      	ldr	r6, [r3, #12]
	IOPinTypeDef* io = SPIChannel->CSN;
   1f0a8:	6847      	ldr	r7, [r0, #4]
	if(SPIChannel == &SPI.ch1)
   1f0aa:	6873      	ldr	r3, [r6, #4]
   1f0ac:	4290      	cmp	r0, r2
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1f0ae:	bf0c      	ite	eq
   1f0b0:	3328      	addeq	r3, #40	; 0x28
	else
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1f0b2:	3348      	addne	r3, #72	; 0x48
   1f0b4:	6043      	str	r3, [r0, #4]

	IOs.toOutput(SPIChannel->CSN);
   1f0b6:	4b11      	ldr	r3, [pc, #68]	; (1f0fc <eeprom_read_byte+0x5c>)
{
   1f0b8:	4604      	mov	r4, r0
	IOs.toOutput(SPIChannel->CSN);
   1f0ba:	68db      	ldr	r3, [r3, #12]
   1f0bc:	6840      	ldr	r0, [r0, #4]
{
   1f0be:	460d      	mov	r5, r1
	IOs.toOutput(SPIChannel->CSN);
   1f0c0:	4798      	blx	r3

	SPIChannel->readWrite(0x03, false); //Befehl "Read"
   1f0c2:	68a3      	ldr	r3, [r4, #8]
   1f0c4:	2100      	movs	r1, #0
   1f0c6:	2003      	movs	r0, #3
   1f0c8:	4798      	blx	r3
	SPIChannel->readWrite(address >> 8, false);
   1f0ca:	68a3      	ldr	r3, [r4, #8]
   1f0cc:	2100      	movs	r1, #0
   1f0ce:	0a28      	lsrs	r0, r5, #8
   1f0d0:	4798      	blx	r3
	SPIChannel->readWrite(address & 0xFF, false);
   1f0d2:	68a3      	ldr	r3, [r4, #8]
   1f0d4:	2100      	movs	r1, #0
   1f0d6:	b2e8      	uxtb	r0, r5
   1f0d8:	4798      	blx	r3

	uint8_t out = SPIChannel->readWrite(0, true);
   1f0da:	68a3      	ldr	r3, [r4, #8]
   1f0dc:	2101      	movs	r1, #1
   1f0de:	2000      	movs	r0, #0
   1f0e0:	4798      	blx	r3

	HAL.IOs->config->toInput(SPIChannel->CSN);
   1f0e2:	6833      	ldr	r3, [r6, #0]
	uint8_t out = SPIChannel->readWrite(0, true);
   1f0e4:	4605      	mov	r5, r0
	HAL.IOs->config->toInput(SPIChannel->CSN);
   1f0e6:	691b      	ldr	r3, [r3, #16]
   1f0e8:	6860      	ldr	r0, [r4, #4]
   1f0ea:	4798      	blx	r3
	SPIChannel->CSN = io;
   1f0ec:	6067      	str	r7, [r4, #4]

	return out;
}
   1f0ee:	4628      	mov	r0, r5
   1f0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0f2:	bf00      	nop
   1f0f4:	00029d1c 	.word	0x00029d1c
   1f0f8:	1fff09d8 	.word	0x1fff09d8
   1f0fc:	1fff0078 	.word	0x1fff0078

0001f100 <eeprom_read_array>:
	Zweck: Lesen mehrerer Bytes aus dem Konfigurations-EEPROM.
	Dabei dürfen ab beliebiger Adresse beliebig viele Bytes gelesen
	werden.
********************************************************************/
void eeprom_read_array(SPIChannelTypeDef *SPIChannel, uint16_t address, uint8_t *data, uint16_t size)
{
   1f100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f104:	461d      	mov	r5, r3
   1f106:	4b1c      	ldr	r3, [pc, #112]	; (1f178 <eeprom_read_array+0x78>)
	uint16_t i;

	// select CSN of eeprom
	IOPinTypeDef* io = SPIChannel->CSN;
   1f108:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if(SPIChannel == &SPI.ch1)
   1f10c:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1f110:	4b1a      	ldr	r3, [pc, #104]	; (1f17c <eeprom_read_array+0x7c>)
{
   1f112:	4604      	mov	r4, r0
   1f114:	f8d8 0004 	ldr.w	r0, [r8, #4]
	if(SPIChannel == &SPI.ch1)
   1f118:	429c      	cmp	r4, r3
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1f11a:	bf0c      	ite	eq
   1f11c:	3028      	addeq	r0, #40	; 0x28
	else
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1f11e:	3048      	addne	r0, #72	; 0x48

	IOs.toOutput(SPIChannel->CSN);
   1f120:	4b17      	ldr	r3, [pc, #92]	; (1f180 <eeprom_read_array+0x80>)
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1f122:	6060      	str	r0, [r4, #4]
	IOs.toOutput(SPIChannel->CSN);
   1f124:	68db      	ldr	r3, [r3, #12]
   1f126:	6860      	ldr	r0, [r4, #4]
{
   1f128:	460e      	mov	r6, r1
   1f12a:	4617      	mov	r7, r2
	IOs.toOutput(SPIChannel->CSN);
   1f12c:	4798      	blx	r3

	SPIChannel->readWrite(0x03, false); // Befehl "Read"
   1f12e:	68a3      	ldr	r3, [r4, #8]
   1f130:	2100      	movs	r1, #0
   1f132:	2003      	movs	r0, #3
   1f134:	4798      	blx	r3
	SPIChannel->readWrite(address >> 8, false);
   1f136:	68a3      	ldr	r3, [r4, #8]
   1f138:	2100      	movs	r1, #0
   1f13a:	0a30      	lsrs	r0, r6, #8
   1f13c:	4798      	blx	r3
	SPIChannel->readWrite(address & 0xFF, false);
   1f13e:	b2f0      	uxtb	r0, r6
   1f140:	68a3      	ldr	r3, [r4, #8]
   1f142:	2100      	movs	r1, #0
   1f144:	4798      	blx	r3

	for(i = 0; i < size; i++)
   1f146:	2600      	movs	r6, #0
		*(data+i) = SPIChannel->readWrite(0, i == size-1); // beim letzten Byte EEPROM deselektieren
   1f148:	f105 3aff 	add.w	sl, r5, #4294967295
	for(i = 0; i < size; i++)
   1f14c:	42b5      	cmp	r5, r6
   1f14e:	d108      	bne.n	1f162 <eeprom_read_array+0x62>

	HAL.IOs->config->toInput(SPIChannel->CSN);
   1f150:	f8d8 3000 	ldr.w	r3, [r8]
   1f154:	6860      	ldr	r0, [r4, #4]
   1f156:	691b      	ldr	r3, [r3, #16]
   1f158:	4798      	blx	r3
	SPIChannel->CSN = io;
   1f15a:	f8c4 9004 	str.w	r9, [r4, #4]
}
   1f15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*(data+i) = SPIChannel->readWrite(0, i == size-1); // beim letzten Byte EEPROM deselektieren
   1f162:	ebaa 0206 	sub.w	r2, sl, r6
   1f166:	4251      	negs	r1, r2
   1f168:	68a3      	ldr	r3, [r4, #8]
   1f16a:	4151      	adcs	r1, r2
   1f16c:	2000      	movs	r0, #0
   1f16e:	4798      	blx	r3
   1f170:	55b8      	strb	r0, [r7, r6]
	for(i = 0; i < size; i++)
   1f172:	3601      	adds	r6, #1
   1f174:	e7ea      	b.n	1f14c <eeprom_read_array+0x4c>
   1f176:	bf00      	nop
   1f178:	00029d1c 	.word	0x00029d1c
   1f17c:	1fff09d8 	.word	0x1fff09d8
   1f180:	1fff0078 	.word	0x1fff0078

0001f184 <eeprom_init>:
{
   1f184:	b570      	push	{r4, r5, r6, lr}
	uint8_t buffer[EEPROM_SIZE_META] = { 0 };
   1f186:	2600      	movs	r6, #0
{
   1f188:	b086      	sub	sp, #24
   1f18a:	4605      	mov	r5, r0
	uint8_t buffer[EEPROM_SIZE_META] = { 0 };
   1f18c:	4631      	mov	r1, r6
	EEPROM_Data *eep = (SPIChannel == &SPI.ch1) ? &EEPROM.ch1 : &EEPROM.ch2;
   1f18e:	4c1b      	ldr	r4, [pc, #108]	; (1f1fc <eeprom_init+0x78>)
	uint8_t buffer[EEPROM_SIZE_META] = { 0 };
   1f190:	9600      	str	r6, [sp, #0]
   1f192:	2212      	movs	r2, #18
   1f194:	a801      	add	r0, sp, #4
   1f196:	f008 fddf 	bl	27d58 <memset>
	EEPROM_Data *eep = (SPIChannel == &SPI.ch1) ? &EEPROM.ch1 : &EEPROM.ch2;
   1f19a:	4a19      	ldr	r2, [pc, #100]	; (1f200 <eeprom_init+0x7c>)
   1f19c:	f104 0318 	add.w	r3, r4, #24
   1f1a0:	4295      	cmp	r5, r2
   1f1a2:	bf18      	it	ne
   1f1a4:	461c      	movne	r4, r3
	eeprom_read_array(SPIChannel, EEPROM_ADDR_META, buffer, EEPROM_SIZE_META);
   1f1a6:	4631      	mov	r1, r6
   1f1a8:	2316      	movs	r3, #22
   1f1aa:	4628      	mov	r0, r5
   1f1ac:	466a      	mov	r2, sp
   1f1ae:	f7ff ffa7 	bl	1f100 <eeprom_read_array>
	memcpy(eep->name, &buffer[EEPROM_ADDR_NAME - EEPROM_ADDR_META], EEPROM_SIZE_NAME);
   1f1b2:	1c65      	adds	r5, r4, #1
   1f1b4:	466b      	mov	r3, sp
   1f1b6:	ae04      	add	r6, sp, #16
   1f1b8:	461a      	mov	r2, r3
   1f1ba:	ca03      	ldmia	r2!, {r0, r1}
   1f1bc:	42b2      	cmp	r2, r6
   1f1be:	6028      	str	r0, [r5, #0]
   1f1c0:	6069      	str	r1, [r5, #4]
   1f1c2:	4613      	mov	r3, r2
   1f1c4:	f105 0508 	add.w	r5, r5, #8
   1f1c8:	d1f6      	bne.n	1f1b8 <eeprom_init+0x34>
	eep->id = _8_16(buffer[EEPROM_ADDR_ID - EEPROM_ADDR_META], buffer[(EEPROM_ADDR_ID + 1) - EEPROM_ADDR_META]);
   1f1ca:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1f1ce:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1f1d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f1d6:	8263      	strh	r3, [r4, #18]
	eep->hw = _8_16(buffer[EEPROM_ADDR_HW - EEPROM_ADDR_META], buffer[(EEPROM_ADDR_HW + 1) - EEPROM_ADDR_META]);
   1f1d8:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1f1dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f1e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f1e4:	82a3      	strh	r3, [r4, #20]
	eep->magic = _8_16(buffer[EEPROM_ADDR_MAGIC - EEPROM_ADDR_META], buffer[(EEPROM_ADDR_MAGIC + 1) - EEPROM_ADDR_META]);
   1f1e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1f1ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1f1ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1f1f2:	82e3      	strh	r3, [r4, #22]
	eep->init = true;
   1f1f4:	2301      	movs	r3, #1
   1f1f6:	7023      	strb	r3, [r4, #0]
}
   1f1f8:	b006      	add	sp, #24
   1f1fa:	bd70      	pop	{r4, r5, r6, pc}
   1f1fc:	1fff5710 	.word	0x1fff5710
   1f200:	1fff09d8 	.word	0x1fff09d8

0001f204 <eeprom_check>:
	IOPinTypeDef* io = SPIChannel->CSN;
   1f204:	4b23      	ldr	r3, [pc, #140]	; (1f294 <eeprom_check+0x90>)
	if(SPIChannel == &SPI.ch1)
   1f206:	4a24      	ldr	r2, [pc, #144]	; (1f298 <eeprom_check+0x94>)
{
   1f208:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f20c:	68de      	ldr	r6, [r3, #12]
	IOPinTypeDef* io = SPIChannel->CSN;
   1f20e:	6847      	ldr	r7, [r0, #4]
	if(SPIChannel == &SPI.ch1)
   1f210:	6873      	ldr	r3, [r6, #4]
   1f212:	4290      	cmp	r0, r2
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH0;
   1f214:	bf0c      	ite	eq
   1f216:	3328      	addeq	r3, #40	; 0x28
		SPIChannel->CSN = &HAL.IOs->pins->ID_CH1;
   1f218:	3348      	addne	r3, #72	; 0x48
   1f21a:	6043      	str	r3, [r0, #4]
	IOs.toOutput(SPIChannel->CSN);
   1f21c:	4b1f      	ldr	r3, [pc, #124]	; (1f29c <eeprom_check+0x98>)
{
   1f21e:	4604      	mov	r4, r0
	IOs.toOutput(SPIChannel->CSN);
   1f220:	68db      	ldr	r3, [r3, #12]
   1f222:	6840      	ldr	r0, [r0, #4]
   1f224:	4690      	mov	r8, r2
   1f226:	4798      	blx	r3
	SPIChannel->readWrite(0x05, false);  // Befehl "Get Status"
   1f228:	68a3      	ldr	r3, [r4, #8]
   1f22a:	2100      	movs	r1, #0
   1f22c:	2005      	movs	r0, #5
   1f22e:	4798      	blx	r3
	uint8_t out = SPIChannel->readWrite(0x00, true);
   1f230:	68a3      	ldr	r3, [r4, #8]
   1f232:	2101      	movs	r1, #1
   1f234:	2000      	movs	r0, #0
   1f236:	4798      	blx	r3
	if((out & 0x71) != 0)
   1f238:	f010 0f71 	tst.w	r0, #113	; 0x71
	uint8_t out = SPIChannel->readWrite(0x00, true);
   1f23c:	4605      	mov	r5, r0
	if((out & 0x71) != 0)
   1f23e:	d10f      	bne.n	1f260 <eeprom_check+0x5c>
	eeprom_read_array(SPIChannel, EEPROM_ADDR_MAGIC, number, 2);
   1f240:	2302      	movs	r3, #2
   1f242:	aa01      	add	r2, sp, #4
   1f244:	2114      	movs	r1, #20
   1f246:	4620      	mov	r0, r4
   1f248:	f7ff ff5a 	bl	1f100 <eeprom_read_array>
	if(number[0] != MAGICNUMBER_LOW || number[1] != MAGICNUMBER_HIGH)
   1f24c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f250:	2b12      	cmp	r3, #18
   1f252:	d117      	bne.n	1f284 <eeprom_check+0x80>
   1f254:	f89d 3005 	ldrb.w	r3, [sp, #5]
		out = ID_CHECKERROR_MAGICNUMBER;
   1f258:	2b34      	cmp	r3, #52	; 0x34
   1f25a:	bf0c      	ite	eq
   1f25c:	2500      	moveq	r5, #0
   1f25e:	2502      	movne	r5, #2
	HAL.IOs->config->toInput(SPIChannel->CSN);
   1f260:	6833      	ldr	r3, [r6, #0]
   1f262:	6860      	ldr	r0, [r4, #4]
   1f264:	691b      	ldr	r3, [r3, #16]
   1f266:	4798      	blx	r3
	SPIChannel->CSN = io;
   1f268:	6067      	str	r7, [r4, #4]
	if(out && ((SPIChannel == &SPI.ch1 && !EEPROM.ch1.init)
   1f26a:	b13d      	cbz	r5, 1f27c <eeprom_check+0x78>
   1f26c:	4544      	cmp	r4, r8
   1f26e:	d10b      	bne.n	1f288 <eeprom_check+0x84>
   1f270:	4b0b      	ldr	r3, [pc, #44]	; (1f2a0 <eeprom_check+0x9c>)
   1f272:	781b      	ldrb	r3, [r3, #0]
			|| (SPIChannel == &SPI.ch2 && !EEPROM.ch2.init))) {
   1f274:	b913      	cbnz	r3, 1f27c <eeprom_check+0x78>
		eeprom_init(SPIChannel);
   1f276:	4620      	mov	r0, r4
   1f278:	f7ff ff84 	bl	1f184 <eeprom_init>
}
   1f27c:	4628      	mov	r0, r5
   1f27e:	b002      	add	sp, #8
   1f280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		out = ID_CHECKERROR_MAGICNUMBER;
   1f284:	2502      	movs	r5, #2
   1f286:	e7eb      	b.n	1f260 <eeprom_check+0x5c>
			|| (SPIChannel == &SPI.ch2 && !EEPROM.ch2.init))) {
   1f288:	4b06      	ldr	r3, [pc, #24]	; (1f2a4 <eeprom_check+0xa0>)
   1f28a:	429c      	cmp	r4, r3
   1f28c:	d1f6      	bne.n	1f27c <eeprom_check+0x78>
   1f28e:	4b04      	ldr	r3, [pc, #16]	; (1f2a0 <eeprom_check+0x9c>)
   1f290:	7e1b      	ldrb	r3, [r3, #24]
   1f292:	e7ef      	b.n	1f274 <eeprom_check+0x70>
   1f294:	00029d1c 	.word	0x00029d1c
   1f298:	1fff09d8 	.word	0x1fff09d8
   1f29c:	1fff0078 	.word	0x1fff0078
   1f2a0:	1fff5710 	.word	0x1fff5710
   1f2a4:	1fff09ec 	.word	0x1fff09ec

0001f2a8 <Board_assign>:
static uint8_t assignCh2(uint8_t id, uint8_t justCheck);
static void hookDriverSPI(IdAssignmentTypeDef *ids);
static void unassign(IdAssignmentTypeDef *ids);

int32_t Board_assign(IdAssignmentTypeDef *ids)
{
   1f2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f2aa:	4604      	mov	r4, r0
	int32_t out = 0;

	// Test mode // todo REM 2: still needed? (LH)
	if((ids->ch1.id == 0xFF) || (ids->ch2.id == 0xFF))
   1f2ac:	7840      	ldrb	r0, [r0, #1]
   1f2ae:	7d63      	ldrb	r3, [r4, #21]
   1f2b0:	4d5e      	ldr	r5, [pc, #376]	; (1f42c <Board_assign+0x184>)
   1f2b2:	28ff      	cmp	r0, #255	; 0xff
   1f2b4:	d001      	beq.n	1f2ba <Board_assign+0x12>
   1f2b6:	2bff      	cmp	r3, #255	; 0xff
   1f2b8:	d10f      	bne.n	1f2da <Board_assign+0x32>
	{
		if((Evalboards.ch1.id != 0) || (Evalboards.ch2.id != 0) || (ids->ch1.id != ids->ch2.id))
   1f2ba:	7929      	ldrb	r1, [r5, #4]
   1f2bc:	f895 207c 	ldrb.w	r2, [r5, #124]	; 0x7c
   1f2c0:	430a      	orrs	r2, r1
   1f2c2:	d101      	bne.n	1f2c8 <Board_assign+0x20>
   1f2c4:	4298      	cmp	r0, r3
   1f2c6:	d008      	beq.n	1f2da <Board_assign+0x32>
		{
			ids->ch1.state = ID_STATE_NOT_IN_FW;
   1f2c8:	2206      	movs	r2, #6
			ids->ch2.state = ID_STATE_NOT_IN_FW;
			out |= ids->ch2.state  << 24;
			out |= ids->ch2.id     << 16;
			out |= ids->ch1.state  << 8;
			out |= ids->ch1.id     << 0;
   1f2ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			ids->ch1.state = ID_STATE_NOT_IN_FW;
   1f2ce:	7022      	strb	r2, [r4, #0]
			ids->ch2.state = ID_STATE_NOT_IN_FW;
   1f2d0:	7522      	strb	r2, [r4, #20]
			out |= ids->ch1.id     << 0;
   1f2d2:	f040 2006 	orr.w	r0, r0, #100664832	; 0x6000600
	out |= (ids->ch2.id     << 16) & 0xFF;
	out |= (ids->ch1.state  << 8)  & 0xFF;
	out |= (ids->ch1.id     << 0)  & 0xFF;

	return out;
}
   1f2d6:	b003      	add	sp, #12
   1f2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((Evalboards.ch1.id == ids->ch1.id) && (ids->ch1.id != 0))
   1f2da:	792b      	ldrb	r3, [r5, #4]
   1f2dc:	4283      	cmp	r3, r0
   1f2de:	d143      	bne.n	1f368 <Board_assign+0xc0>
   1f2e0:	2800      	cmp	r0, #0
   1f2e2:	d041      	beq.n	1f368 <Board_assign+0xc0>
	if(!justCheck)
		tmcmotioncontroller_init();

	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
	{
		if(init_ch1[i].id == id)
   1f2e4:	4a52      	ldr	r2, [pc, #328]	; (1f430 <Board_assign+0x188>)
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f2e6:	2300      	movs	r3, #0
		if(init_ch1[i].id == id)
   1f2e8:	b280      	uxth	r0, r0
   1f2ea:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
   1f2ee:	4281      	cmp	r1, r0
   1f2f0:	d038      	beq.n	1f364 <Board_assign+0xbc>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f2f2:	3301      	adds	r3, #1
   1f2f4:	2b10      	cmp	r3, #16
   1f2f6:	d1f8      	bne.n	1f2ea <Board_assign+0x42>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f2f8:	2306      	movs	r3, #6
		ids->ch1.state = assignCh1(ids->ch1.id, true);
   1f2fa:	7023      	strb	r3, [r4, #0]
	if((Evalboards.ch2.id == ids->ch2.id) && (ids->ch2.id != 0))
   1f2fc:	7d62      	ldrb	r2, [r4, #21]
   1f2fe:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   1f302:	4293      	cmp	r3, r2
   1f304:	d150      	bne.n	1f3a8 <Board_assign+0x100>
   1f306:	2b00      	cmp	r3, #0
   1f308:	d04e      	beq.n	1f3a8 <Board_assign+0x100>
		return ok;
#endif

	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
	{
		if(init_ch2[i].id == id)
   1f30a:	494a      	ldr	r1, [pc, #296]	; (1f434 <Board_assign+0x18c>)
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f30c:	2200      	movs	r2, #0
		if(init_ch2[i].id == id)
   1f30e:	b29b      	uxth	r3, r3
   1f310:	f831 0032 	ldrh.w	r0, [r1, r2, lsl #3]
   1f314:	4298      	cmp	r0, r3
   1f316:	d045      	beq.n	1f3a4 <Board_assign+0xfc>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f318:	3201      	adds	r2, #1
   1f31a:	2a0d      	cmp	r2, #13
   1f31c:	d1f8      	bne.n	1f310 <Board_assign+0x68>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f31e:	2306      	movs	r3, #6
		ids->ch2.state = assignCh2(ids->ch2.id, true);
   1f320:	7523      	strb	r3, [r4, #20]

// Reroute the driver's SPI to run through the motion controller if required
// This also handles special case logic for the motion controller + driver chain (different pins etc.)
static void hookDriverSPI(IdAssignmentTypeDef *ids)
{
	if((ids->ch1.id == ID_TMC4361) || (ids->ch1.id == ID_TMC4361A) || (ids->ch1.id == ID_TMC4331))
   1f322:	7863      	ldrb	r3, [r4, #1]
   1f324:	2b04      	cmp	r3, #4
   1f326:	d002      	beq.n	1f32e <Board_assign+0x86>
   1f328:	3b0a      	subs	r3, #10
   1f32a:	2b01      	cmp	r3, #1
   1f32c:	d80d      	bhi.n	1f34a <Board_assign+0xa2>
	{
		// Redirect ch2 SPI to the SPI cover function of the TMC43XX Board
		HAL.SPI->ch2.readWrite = Evalboards.ch1.cover;
   1f32e:	4b42      	ldr	r3, [pc, #264]	; (1f438 <Board_assign+0x190>)
   1f330:	6eaa      	ldr	r2, [r5, #104]	; 0x68
   1f332:	691b      	ldr	r3, [r3, #16]
   1f334:	61da      	str	r2, [r3, #28]

		if(ids->ch2.id == ID_TMC2660)
   1f336:	7d63      	ldrb	r3, [r4, #21]
   1f338:	2b01      	cmp	r3, #1
   1f33a:	d106      	bne.n	1f34a <Board_assign+0xa2>
		{
			// TMC2660: Disable the continuous mode via userFunction
			int32_t value = 1;
			Evalboards.ch2.userFunction(0, 0, &value);
   1f33c:	2100      	movs	r1, #0
			int32_t value = 1;
   1f33e:	9301      	str	r3, [sp, #4]
			Evalboards.ch2.userFunction(0, 0, &value);
   1f340:	aa01      	add	r2, sp, #4
   1f342:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1f346:	4608      	mov	r0, r1
   1f348:	4798      	blx	r3
		}
	}


	if(ids->ch1.id == ID_TMC4330)
   1f34a:	7863      	ldrb	r3, [r4, #1]
   1f34c:	2b0f      	cmp	r3, #15
   1f34e:	d155      	bne.n	1f3fc <Board_assign+0x154>
   1f350:	7d63      	ldrb	r3, [r4, #21]
	{
		if(ids->ch2.id == ID_TMC2100)
   1f352:	2b04      	cmp	r3, #4
   1f354:	d148      	bne.n	1f3e8 <Board_assign+0x140>
		{
			Evalboards.ch2.userFunction(1, 0, NULL);
   1f356:	2200      	movs	r2, #0
   1f358:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1f35c:	4611      	mov	r1, r2
   1f35e:	2001      	movs	r0, #1
		{
			Evalboards.ch2.userFunction(5, 0, NULL);
		}
		else if(ids->ch2.id == ID_TMC2160)
		{
			Evalboards.ch2.userFunction(5, 0, NULL);
   1f360:	4798      	blx	r3
   1f362:	e04b      	b.n	1f3fc <Board_assign+0x154>
			ok = ID_STATE_DONE;
   1f364:	2302      	movs	r3, #2
   1f366:	e7c8      	b.n	1f2fa <Board_assign+0x52>
		Evalboards.ch1.deInit(); // todo REM 2: Hot-Unplugging is not maintained currently, should probably be removed (LH) #1
   1f368:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1f36a:	4798      	blx	r3
		if(ids->ch1.state == ID_STATE_DONE)
   1f36c:	7826      	ldrb	r6, [r4, #0]
   1f36e:	2e02      	cmp	r6, #2
   1f370:	d10e      	bne.n	1f390 <Board_assign+0xe8>
			ids->ch1.state = assignCh1(ids->ch1.id, false);
   1f372:	7867      	ldrb	r7, [r4, #1]
		tmcmotioncontroller_init();
   1f374:	f7e9 fbf0 	bl	8b58 <tmcmotioncontroller_init>
		if(init_ch1[i].id == id)
   1f378:	4a2d      	ldr	r2, [pc, #180]	; (1f430 <Board_assign+0x188>)
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f37a:	2300      	movs	r3, #0
		if(init_ch1[i].id == id)
   1f37c:	b2bf      	uxth	r7, r7
   1f37e:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
   1f382:	42b9      	cmp	r1, r7
   1f384:	d109      	bne.n	1f39a <Board_assign+0xf2>
				init_ch1[i].init();
   1f386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f38a:	685b      	ldr	r3, [r3, #4]
   1f38c:	4798      	blx	r3
			ids->ch1.state = assignCh1(ids->ch1.id, false);
   1f38e:	7026      	strb	r6, [r4, #0]
		Evalboards.ch1.config->reset();
   1f390:	69ab      	ldr	r3, [r5, #24]
   1f392:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1f396:	4798      	blx	r3
   1f398:	e7b0      	b.n	1f2fc <Board_assign+0x54>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f39a:	3301      	adds	r3, #1
   1f39c:	2b10      	cmp	r3, #16
   1f39e:	d1ee      	bne.n	1f37e <Board_assign+0xd6>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f3a0:	2606      	movs	r6, #6
   1f3a2:	e7f4      	b.n	1f38e <Board_assign+0xe6>
			ok = ID_STATE_DONE;
   1f3a4:	2302      	movs	r3, #2
   1f3a6:	e7bb      	b.n	1f320 <Board_assign+0x78>
		Evalboards.ch2.deInit(); // todo REM 2: Hot-Unplugging is not maintained currently, should probably be removed (LH) #2
   1f3a8:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1f3ac:	4798      	blx	r3
		if(ids->ch2.state == ID_STATE_DONE)
   1f3ae:	7d26      	ldrb	r6, [r4, #20]
   1f3b0:	2e02      	cmp	r6, #2
   1f3b2:	d10e      	bne.n	1f3d2 <Board_assign+0x12a>
		if(init_ch2[i].id == id)
   1f3b4:	4a1e      	ldr	r2, [pc, #120]	; (1f430 <Board_assign+0x188>)
   1f3b6:	7d60      	ldrb	r0, [r4, #21]
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f3b8:	2300      	movs	r3, #0
		if(init_ch2[i].id == id)
   1f3ba:	f102 0180 	add.w	r1, r2, #128	; 0x80
   1f3be:	f831 7033 	ldrh.w	r7, [r1, r3, lsl #3]
   1f3c2:	4287      	cmp	r7, r0
   1f3c4:	d10b      	bne.n	1f3de <Board_assign+0x136>
				init_ch2[i].init();
   1f3c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   1f3ce:	4798      	blx	r3
			ids->ch2.state = assignCh2(ids->ch2.id, false);
   1f3d0:	7526      	strb	r6, [r4, #20]
		Evalboards.ch2.config->reset();
   1f3d2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1f3d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1f3da:	4798      	blx	r3
   1f3dc:	e7a1      	b.n	1f322 <Board_assign+0x7a>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f3de:	3301      	adds	r3, #1
   1f3e0:	2b0d      	cmp	r3, #13
   1f3e2:	d1ec      	bne.n	1f3be <Board_assign+0x116>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f3e4:	2606      	movs	r6, #6
   1f3e6:	e7f3      	b.n	1f3d0 <Board_assign+0x128>
		else if(ids->ch2.id == ID_TMC2130)
   1f3e8:	2b03      	cmp	r3, #3
   1f3ea:	d105      	bne.n	1f3f8 <Board_assign+0x150>
			Evalboards.ch2.userFunction(5, 0, NULL);
   1f3ec:	2200      	movs	r2, #0
   1f3ee:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1f3f2:	4611      	mov	r1, r2
   1f3f4:	2005      	movs	r0, #5
   1f3f6:	e7b3      	b.n	1f360 <Board_assign+0xb8>
		else if(ids->ch2.id == ID_TMC2160)
   1f3f8:	2b0b      	cmp	r3, #11
   1f3fa:	d0f7      	beq.n	1f3ec <Board_assign+0x144>
		}
	}

	if ((ids->ch1.id == ID_TMC4330) || (ids->ch1.id == ID_TMC4331) || (ids->ch1.id == ID_TMC4361) || (ids->ch1.id == ID_TMC4361A))
   1f3fc:	7863      	ldrb	r3, [r4, #1]
   1f3fe:	2b0f      	cmp	r3, #15
   1f400:	d80e      	bhi.n	1f420 <Board_assign+0x178>
   1f402:	f648 4210 	movw	r2, #35856	; 0x8c10
   1f406:	40da      	lsrs	r2, r3
   1f408:	43d2      	mvns	r2, r2
   1f40a:	f012 0201 	ands.w	r2, r2, #1
   1f40e:	7d61      	ldrb	r1, [r4, #21]
   1f410:	d106      	bne.n	1f420 <Board_assign+0x178>
	{
		if (ids->ch2.id == ID_TMC2130)
   1f412:	2903      	cmp	r1, #3
   1f414:	d104      	bne.n	1f420 <Board_assign+0x178>
		{
			Evalboards.ch2.userFunction(6, 0, NULL);
   1f416:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1f41a:	4611      	mov	r1, r2
   1f41c:	2006      	movs	r0, #6
   1f41e:	4798      	blx	r3
	Evalboards.ch1.id = ids->ch1.id;
   1f420:	7860      	ldrb	r0, [r4, #1]
	Evalboards.ch2.id = ids->ch2.id;
   1f422:	7d63      	ldrb	r3, [r4, #21]
	Evalboards.ch1.id = ids->ch1.id;
   1f424:	7128      	strb	r0, [r5, #4]
	Evalboards.ch2.id = ids->ch2.id;
   1f426:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
	return out;
   1f42a:	e754      	b.n	1f2d6 <Board_assign+0x2e>
   1f42c:	1fff5e88 	.word	0x1fff5e88
   1f430:	00029d54 	.word	0x00029d54
   1f434:	00029dd4 	.word	0x00029dd4
   1f438:	00029d1c 	.word	0x00029d1c

0001f43c <Board_supported>:
{
   1f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ids->ch1.state = assignCh1(ids->ch1.id, true);
   1f43e:	7843      	ldrb	r3, [r0, #1]
		if(init_ch1[i].id == id)
   1f440:	4911      	ldr	r1, [pc, #68]	; (1f488 <Board_supported+0x4c>)
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f442:	2200      	movs	r2, #0
		if(init_ch1[i].id == id)
   1f444:	461c      	mov	r4, r3
   1f446:	f831 5032 	ldrh.w	r5, [r1, r2, lsl #3]
   1f44a:	42a5      	cmp	r5, r4
   1f44c:	d018      	beq.n	1f480 <Board_supported+0x44>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch1); i < sz; i++)
   1f44e:	3201      	adds	r2, #1
   1f450:	2a10      	cmp	r2, #16
   1f452:	d1f8      	bne.n	1f446 <Board_supported+0xa>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f454:	2106      	movs	r1, #6
	ids->ch2.state = assignCh2(ids->ch2.id, true);
   1f456:	7d44      	ldrb	r4, [r0, #21]
		if(init_ch2[i].id == id)
   1f458:	4d0c      	ldr	r5, [pc, #48]	; (1f48c <Board_supported+0x50>)
	ids->ch1.state = assignCh1(ids->ch1.id, true);
   1f45a:	7001      	strb	r1, [r0, #0]
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f45c:	2200      	movs	r2, #0
		if(init_ch2[i].id == id)
   1f45e:	4626      	mov	r6, r4
   1f460:	f835 7032 	ldrh.w	r7, [r5, r2, lsl #3]
   1f464:	42b7      	cmp	r7, r6
   1f466:	d00d      	beq.n	1f484 <Board_supported+0x48>
	for(size_t i = 0, sz = ARRAY_SIZE(init_ch2); i < sz; i++)
   1f468:	3201      	adds	r2, #1
   1f46a:	2a0d      	cmp	r2, #13
   1f46c:	d1f8      	bne.n	1f460 <Board_supported+0x24>
	uint8_t ok = ID_STATE_NOT_IN_FW;
   1f46e:	2206      	movs	r2, #6
	out |= ids->ch1.id     << 0;
   1f470:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
	ids->ch2.state = assignCh2(ids->ch2.id, true);
   1f474:	7502      	strb	r2, [r0, #20]
	out |= ids->ch1.id     << 0;
   1f476:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1f47a:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
   1f47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ok = ID_STATE_DONE;
   1f480:	2102      	movs	r1, #2
   1f482:	e7e8      	b.n	1f456 <Board_supported+0x1a>
			ok = ID_STATE_DONE;
   1f484:	2202      	movs	r2, #2
   1f486:	e7f3      	b.n	1f470 <Board_supported+0x34>
   1f488:	00029d54 	.word	0x00029d54
   1f48c:	00029dd4 	.word	0x00029dd4

0001f490 <periodicJob>:
}

void periodicJob(unsigned int tick)
{
	UNUSED(tick);
}
   1f490:	4770      	bx	lr

0001f492 <deInit>:

void deInit(void)
{
   1f492:	b510      	push	{r4, lr}
	IdAssignmentTypeDef ids;
	Evalboards.ch1.deInit();
   1f494:	4c05      	ldr	r4, [pc, #20]	; (1f4ac <deInit+0x1a>)
   1f496:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f498:	4798      	blx	r3
	Evalboards.ch2.deInit();
   1f49a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   1f49e:	4798      	blx	r3

	ids.ch1.id = Evalboards.ch1.id;
	ids.ch2.id = Evalboards.ch2.id;
	unassign(&ids);

	tmcdriver_init();
   1f4a0:	f7e9 fb40 	bl	8b24 <tmcdriver_init>
	tmcmotioncontroller_init();
}
   1f4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tmcmotioncontroller_init();
   1f4a8:	f7e9 bb56 	b.w	8b58 <tmcmotioncontroller_init>
   1f4ac:	1fff5e88 	.word	0x1fff5e88

0001f4b0 <heartBeat>:
// Frequency informs about normal operation or busy state
void heartBeat(uint32_t tick)
{
	static uint32_t lastTick = 0;

	if(VitalSignsMonitor.heartRate == 0)
   1f4b0:	4b0a      	ldr	r3, [pc, #40]	; (1f4dc <heartBeat+0x2c>)
   1f4b2:	68d9      	ldr	r1, [r3, #12]
{
   1f4b4:	b510      	push	{r4, lr}
	if(VitalSignsMonitor.heartRate == 0)
   1f4b6:	b179      	cbz	r1, 1f4d8 <heartBeat+0x28>
		return;

	if((tick - lastTick) > VitalSignsMonitor.heartRate)
   1f4b8:	4a09      	ldr	r2, [pc, #36]	; (1f4e0 <heartBeat+0x30>)
   1f4ba:	6813      	ldr	r3, [r2, #0]
   1f4bc:	1ac3      	subs	r3, r0, r3
   1f4be:	4299      	cmp	r1, r3
   1f4c0:	d20a      	bcs.n	1f4d8 <heartBeat+0x28>
	{
		LED_TOGGLE();
   1f4c2:	4b08      	ldr	r3, [pc, #32]	; (1f4e4 <heartBeat+0x34>)
		lastTick = tick;
   1f4c4:	6010      	str	r0, [r2, #0]
		LED_TOGGLE();
   1f4c6:	68db      	ldr	r3, [r3, #12]
   1f4c8:	685c      	ldr	r4, [r3, #4]
   1f4ca:	f8d4 154c 	ldr.w	r1, [r4, #1356]	; 0x54c
   1f4ce:	f8d4 4558 	ldr.w	r4, [r4, #1368]	; 0x558
   1f4d2:	68cb      	ldr	r3, [r1, #12]
   1f4d4:	4063      	eors	r3, r4
   1f4d6:	60cb      	str	r3, [r1, #12]
	}
}
   1f4d8:	bd10      	pop	{r4, pc}
   1f4da:	bf00      	nop
   1f4dc:	1fff0b34 	.word	0x1fff0b34
   1f4e0:	1fff574c 	.word	0x1fff574c
   1f4e4:	00029d1c 	.word	0x00029d1c

0001f4e8 <checkVM>:

// Check for over/undervoltage of motor supply VM
void checkVM()
{
   1f4e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t VM;
	static uint8_t stable = VSM_BROWNOUT_DELAY + 1; // delay value + 1 is the state during normal voltage levels - set here to prevent restore shortly after boot
	static uint8_t vio_state = 1;

	VM = *HAL.ADCs->VM;              // read ADC value for motor supply VM
   1f4ea:	4b39      	ldr	r3, [pc, #228]	; (1f5d0 <checkVM+0xe8>)
	VM = (VM*VM_FACTOR)/ADC_VM_RES;  // calculate voltage from ADC value

	VitalSignsMonitor.VM           = VM;  // write to interface
   1f4ec:	4c39      	ldr	r4, [pc, #228]	; (1f5d4 <checkVM+0xec>)
	VM = *HAL.ADCs->VM;              // read ADC value for motor supply VM
   1f4ee:	69db      	ldr	r3, [r3, #28]
	VitalSignsMonitor.overVoltage  = 0;   // reset overvoltage status
	VitalSignsMonitor.brownOut     = 0;   // reset undervoltage status

	// check for over/undervoltage and set according status if necessary
	if(VM > VM_MAX_INTERFACE_BOARD)  VitalSignsMonitor.overVoltage  |= VSM_CHX;
	if(VM >	Evalboards.ch1.VMMax)    VitalSignsMonitor.overVoltage  |= VSM_CHX | VSM_CH1;
   1f4f0:	4d39      	ldr	r5, [pc, #228]	; (1f5d8 <checkVM+0xf0>)
	VM = *HAL.ADCs->VM;              // read ADC value for motor supply VM
   1f4f2:	695b      	ldr	r3, [r3, #20]
   1f4f4:	881a      	ldrh	r2, [r3, #0]
	VitalSignsMonitor.brownOut     = 0;   // reset undervoltage status
   1f4f6:	2100      	movs	r1, #0
   1f4f8:	8061      	strh	r1, [r4, #2]
	VM = *HAL.ADCs->VM;              // read ADC value for motor supply VM
   1f4fa:	b293      	uxth	r3, r2
	if(VM > VM_MAX_INTERFACE_BOARD)  VitalSignsMonitor.overVoltage  |= VSM_CHX;
   1f4fc:	4937      	ldr	r1, [pc, #220]	; (1f5dc <checkVM+0xf4>)
	VM = (VM*VM_FACTOR)/ADC_VM_RES;  // calculate voltage from ADC value
   1f4fe:	f240 22c9 	movw	r2, #713	; 0x2c9
   1f502:	435a      	muls	r2, r3
	if(VM > VM_MAX_INTERFACE_BOARD)  VitalSignsMonitor.overVoltage  |= VSM_CHX;
   1f504:	428a      	cmp	r2, r1
   1f506:	bf84      	itt	hi
   1f508:	2101      	movhi	r1, #1
   1f50a:	70e1      	strbhi	r1, [r4, #3]
	if(VM >	Evalboards.ch1.VMMax)    VitalSignsMonitor.overVoltage  |= VSM_CHX | VSM_CH1;
   1f50c:	68e9      	ldr	r1, [r5, #12]
	VM = (VM*VM_FACTOR)/ADC_VM_RES;  // calculate voltage from ADC value
   1f50e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f512:	fbb2 f3f3 	udiv	r3, r2, r3
	if(VM >	Evalboards.ch1.VMMax)    VitalSignsMonitor.overVoltage  |= VSM_CHX | VSM_CH1;
   1f516:	4299      	cmp	r1, r3
   1f518:	bf38      	it	cc
   1f51a:	78e1      	ldrbcc	r1, [r4, #3]
	VitalSignsMonitor.VM           = VM;  // write to interface
   1f51c:	6123      	str	r3, [r4, #16]
	if(VM >	Evalboards.ch1.VMMax)    VitalSignsMonitor.overVoltage  |= VSM_CHX | VSM_CH1;
   1f51e:	bf3c      	itt	cc
   1f520:	f041 0103 	orrcc.w	r1, r1, #3
   1f524:	70e1      	strbcc	r1, [r4, #3]
	if(VM >	Evalboards.ch2.VMMax)    VitalSignsMonitor.overVoltage  |= VSM_CHX | VSM_CH2;
   1f526:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
   1f52a:	4299      	cmp	r1, r3
   1f52c:	bf3e      	ittt	cc
   1f52e:	78e1      	ldrbcc	r1, [r4, #3]
   1f530:	f041 0105 	orrcc.w	r1, r1, #5
   1f534:	70e1      	strbcc	r1, [r4, #3]

	// check for over/undervoltage and set according status if necessary
	if(VM <	Evalboards.ch1.VMMin)    VitalSignsMonitor.brownOut  |= VSM_CHX | VSM_CH1;
   1f536:	6929      	ldr	r1, [r5, #16]
   1f538:	4299      	cmp	r1, r3
   1f53a:	bf84      	itt	hi
   1f53c:	2003      	movhi	r0, #3
   1f53e:	70a0      	strbhi	r0, [r4, #2]
	if(VM <	Evalboards.ch2.VMMin)    VitalSignsMonitor.brownOut  |= VSM_CHX | VSM_CH2;
   1f540:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1f544:	4298      	cmp	r0, r3
   1f546:	d918      	bls.n	1f57a <checkVM+0x92>
   1f548:	78a3      	ldrb	r3, [r4, #2]
   1f54a:	f043 0305 	orr.w	r3, r3, #5
   1f54e:	70a3      	strb	r3, [r4, #2]
	// Global minimum voltage check (skipped if a minimum voltage of 0 is set by a board)
	if(Evalboards.ch1.VMMin && Evalboards.ch2.VMMin)
   1f550:	b111      	cbz	r1, 1f558 <checkVM+0x70>
		if(VM <	VM_MIN_INTERFACE_BOARD)  VitalSignsMonitor.brownOut  |= VSM_CHX;
   1f552:	4b23      	ldr	r3, [pc, #140]	; (1f5e0 <checkVM+0xf8>)
   1f554:	429a      	cmp	r2, r3
   1f556:	d915      	bls.n	1f584 <checkVM+0x9c>

	if((VitalSignsMonitor.errors & VSM_ERRORS_CH1) || (VitalSignsMonitor.errors & VSM_ERRORS_CH2)) // VIO low in CH1
   1f558:	68a3      	ldr	r3, [r4, #8]
   1f55a:	f013 0f06 	tst.w	r3, #6
   1f55e:	d016      	beq.n	1f58e <checkVM+0xa6>
	{
		if((Evalboards.ch1.errors & VSM_ERRORS_VIO_LOW) || (Evalboards.ch2.errors & VSM_ERRORS_VIO_LOW))
   1f560:	68ab      	ldr	r3, [r5, #8]
   1f562:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
   1f566:	4313      	orrs	r3, r2
   1f568:	079b      	lsls	r3, r3, #30
   1f56a:	d501      	bpl.n	1f570 <checkVM+0x88>
		{
			vio_state = 0;
   1f56c:	2300      	movs	r3, #0
	}
	else if(vio_state == 0) // VIO high
	{
		Evalboards.ch2.config->reset();
		Evalboards.ch1.config->reset();
		vio_state = 1;
   1f56e:	7523      	strb	r3, [r4, #20]
	}

	// after brownout all settings are restored to the boards
	// this happens after supply was stable for a set delay (checkVM() is called every 10 ms/systicks)
	if(VitalSignsMonitor.brownOut)
   1f570:	78a3      	ldrb	r3, [r4, #2]
   1f572:	b1d3      	cbz	r3, 1f5aa <checkVM+0xc2>
	{
		stable = 0;
   1f574:	2300      	movs	r3, #0
		else if(stable == VSM_BROWNOUT_DELAY)
		{
			Evalboards.ch2.config->restore();
			Evalboards.ch1.config->restore();

			stable++;
   1f576:	7563      	strb	r3, [r4, #21]
		}
	}
}
   1f578:	bd38      	pop	{r3, r4, r5, pc}
	if(Evalboards.ch1.VMMin && Evalboards.ch2.VMMin)
   1f57a:	2900      	cmp	r1, #0
   1f57c:	d0ec      	beq.n	1f558 <checkVM+0x70>
   1f57e:	2800      	cmp	r0, #0
   1f580:	d0ea      	beq.n	1f558 <checkVM+0x70>
   1f582:	e7e6      	b.n	1f552 <checkVM+0x6a>
		if(VM <	VM_MIN_INTERFACE_BOARD)  VitalSignsMonitor.brownOut  |= VSM_CHX;
   1f584:	78a3      	ldrb	r3, [r4, #2]
   1f586:	f043 0301 	orr.w	r3, r3, #1
   1f58a:	70a3      	strb	r3, [r4, #2]
   1f58c:	e7e4      	b.n	1f558 <checkVM+0x70>
	else if(vio_state == 0) // VIO high
   1f58e:	7d23      	ldrb	r3, [r4, #20]
   1f590:	2b00      	cmp	r3, #0
   1f592:	d1ed      	bne.n	1f570 <checkVM+0x88>
		Evalboards.ch2.config->reset();
   1f594:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1f598:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1f59c:	4798      	blx	r3
		Evalboards.ch1.config->reset();
   1f59e:	69ab      	ldr	r3, [r5, #24]
   1f5a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1f5a4:	4798      	blx	r3
		vio_state = 1;
   1f5a6:	2301      	movs	r3, #1
   1f5a8:	e7e1      	b.n	1f56e <checkVM+0x86>
		if(stable < VSM_BROWNOUT_DELAY)
   1f5aa:	7d63      	ldrb	r3, [r4, #21]
   1f5ac:	2b63      	cmp	r3, #99	; 0x63
   1f5ae:	d801      	bhi.n	1f5b4 <checkVM+0xcc>
			stable++;
   1f5b0:	3301      	adds	r3, #1
   1f5b2:	e7e0      	b.n	1f576 <checkVM+0x8e>
		else if(stable == VSM_BROWNOUT_DELAY)
   1f5b4:	2b64      	cmp	r3, #100	; 0x64
   1f5b6:	d1df      	bne.n	1f578 <checkVM+0x90>
			Evalboards.ch2.config->restore();
   1f5b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1f5bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1f5c0:	4798      	blx	r3
			Evalboards.ch1.config->restore();
   1f5c2:	69ab      	ldr	r3, [r5, #24]
   1f5c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   1f5c8:	4798      	blx	r3
			stable++;
   1f5ca:	7d63      	ldrb	r3, [r4, #21]
   1f5cc:	e7f0      	b.n	1f5b0 <checkVM+0xc8>
   1f5ce:	bf00      	nop
   1f5d0:	00029d1c 	.word	0x00029d1c
   1f5d4:	1fff0b34 	.word	0x1fff0b34
   1f5d8:	1fff5e88 	.word	0x1fff5e88
   1f5dc:	02bcfd42 	.word	0x02bcfd42
   1f5e0:	0045ffb9 	.word	0x0045ffb9

0001f5e4 <vitalsignsmonitor_checkVitalSigns>:

/* Routine to frequently check system for errors */
void vitalsignsmonitor_checkVitalSigns()
{
   1f5e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t tick;

	tick = systick_getTick();

	// Check motor supply VM every 10ms
	if((tick - lastTick) >= 10)
   1f5e6:	4d3b      	ldr	r5, [pc, #236]	; (1f6d4 <vitalsignsmonitor_checkVitalSigns+0xf0>)
	tick = systick_getTick();
   1f5e8:	f7fc fea4 	bl	1c334 <systick_getTick>
	if((tick - lastTick) >= 10)
   1f5ec:	686b      	ldr	r3, [r5, #4]
   1f5ee:	1ac3      	subs	r3, r0, r3
   1f5f0:	2b09      	cmp	r3, #9
	tick = systick_getTick();
   1f5f2:	4604      	mov	r4, r0
	if((tick - lastTick) >= 10)
   1f5f4:	d902      	bls.n	1f5fc <vitalsignsmonitor_checkVitalSigns+0x18>
	{
		checkVM();
   1f5f6:	f7ff ff77 	bl	1f4e8 <checkVM>
		lastTick = tick;
   1f5fa:	606c      	str	r4, [r5, #4]
	}

	// Check for board errors
	Evalboards.ch2.checkErrors(tick);
   1f5fc:	4d36      	ldr	r5, [pc, #216]	; (1f6d8 <vitalsignsmonitor_checkVitalSigns+0xf4>)
   1f5fe:	4620      	mov	r0, r4
   1f600:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
   1f604:	4798      	blx	r3
	Evalboards.ch1.checkErrors(tick);
   1f606:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1f608:	4620      	mov	r0, r4
   1f60a:	4798      	blx	r3

	// Status LED
	heartBeat(tick);
   1f60c:	4620      	mov	r0, r4

	// reset all error bits but not the voltage errors
	errors = VitalSignsMonitor.errors & (VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2);
   1f60e:	4c33      	ldr	r4, [pc, #204]	; (1f6dc <vitalsignsmonitor_checkVitalSigns+0xf8>)
	heartBeat(tick);
   1f610:	f7ff ff4e 	bl	1f4b0 <heartBeat>
	errors = VitalSignsMonitor.errors & (VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2);
   1f614:	68a3      	ldr	r3, [r4, #8]

	// collect errors from board channels
	if(Evalboards.ch1.errors)
   1f616:	68aa      	ldr	r2, [r5, #8]
	errors = VitalSignsMonitor.errors & (VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2);
   1f618:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
	if(Evalboards.ch1.errors)
   1f61c:	b10a      	cbz	r2, 1f622 <vitalsignsmonitor_checkVitalSigns+0x3e>
		errors |= VSM_ERRORS_CH1;
   1f61e:	f043 0302 	orr.w	r3, r3, #2
	if(Evalboards.ch2.errors)
   1f622:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
   1f626:	b10a      	cbz	r2, 1f62c <vitalsignsmonitor_checkVitalSigns+0x48>
		errors |= VSM_ERRORS_CH2;
   1f628:	f043 0304 	orr.w	r3, r3, #4

	if(VitalSignsMonitor.busy)
   1f62c:	f994 2001 	ldrsb.w	r2, [r4, #1]
   1f630:	b10a      	cbz	r2, 1f636 <vitalsignsmonitor_checkVitalSigns+0x52>
		errors |= VSM_BUSY;
   1f632:	f043 0308 	orr.w	r3, r3, #8
	if(Evalboards.ch1.config->state != CONFIG_READY)
   1f636:	69aa      	ldr	r2, [r5, #24]
   1f638:	7812      	ldrb	r2, [r2, #0]
   1f63a:	b10a      	cbz	r2, 1f640 <vitalsignsmonitor_checkVitalSigns+0x5c>
		errors |= VSM_BUSY | VSM_BUSY_CH1;
   1f63c:	f043 0318 	orr.w	r3, r3, #24
	if(Evalboards.ch2.config->state != CONFIG_READY)
   1f640:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   1f644:	7812      	ldrb	r2, [r2, #0]
   1f646:	b10a      	cbz	r2, 1f64c <vitalsignsmonitor_checkVitalSigns+0x68>
		errors |= VSM_BUSY | VSM_BUSY_CH2;
   1f648:	f043 0328 	orr.w	r3, r3, #40	; 0x28

	if(VitalSignsMonitor.brownOut)
   1f64c:	78a2      	ldrb	r2, [r4, #2]
   1f64e:	b12a      	cbz	r2, 1f65c <vitalsignsmonitor_checkVitalSigns+0x78>
		errors |= VSM_WARNING_CPU_SUPPLY_LOW;
	if(VitalSignsMonitor.brownOut & VSM_CH1	)
   1f650:	0796      	lsls	r6, r2, #30
		errors |= VSM_WARNING_CPU_SUPPLY_LOW;
   1f652:	bf54      	ite	pl
   1f654:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
		errors |= VSM_ERRORS_VM | VSM_ERRORS_BROWNOUT_CH1;
   1f658:	f043 03c1 	orrmi.w	r3, r3, #193	; 0xc1
	if(VitalSignsMonitor.brownOut & VSM_CH2	)
   1f65c:	0750      	lsls	r0, r2, #29
		errors |= VSM_ERRORS_VM | VSM_ERRORS_BROWNOUT_CH2;

	if(VitalSignsMonitor.overVoltage)
   1f65e:	78e2      	ldrb	r2, [r4, #3]
		errors |= VSM_ERRORS_VM | VSM_ERRORS_BROWNOUT_CH2;
   1f660:	bf44      	itt	mi
   1f662:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
   1f666:	f043 0301 	orrmi.w	r3, r3, #1
	if(VitalSignsMonitor.overVoltage)
   1f66a:	b13a      	cbz	r2, 1f67c <vitalsignsmonitor_checkVitalSigns+0x98>
		errors |= VSM_ERRORS_VM | VSM_ERRORS_OVERVOLTAGE;
	if(VitalSignsMonitor.overVoltage & VSM_CH1)
   1f66c:	0791      	lsls	r1, r2, #30
		errors |= VSM_ERRORS_VM | VSM_ERRORS_OVERVOLTAGE;
   1f66e:	bf54      	ite	pl
   1f670:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
		errors |= VSM_ERRORS_VM | VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1;
   1f674:	f443 63c0 	orrmi.w	r3, r3, #1536	; 0x600
   1f678:	f043 0301 	orr.w	r3, r3, #1
	if(VitalSignsMonitor.overVoltage & VSM_CH2)
   1f67c:	0752      	lsls	r2, r2, #29
		errors |= VSM_ERRORS_VM | VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH2;
   1f67e:	bf48      	it	mi
   1f680:	f443 6320 	orrmi.w	r3, r3, #2560	; 0xa00

	VitalSignsMonitor.errors = errors & VitalSignsMonitor.errorMask; // write collected errors to interface
   1f684:	6862      	ldr	r2, [r4, #4]
		errors |= VSM_ERRORS_VM | VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH2;
   1f686:	bf48      	it	mi
   1f688:	f043 0301 	orrmi.w	r3, r3, #1
	VitalSignsMonitor.errors = errors & VitalSignsMonitor.errorMask; // write collected errors to interface
   1f68c:	401a      	ands	r2, r3

	// disable drivers on overvoltage
	if(errors & (VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2))
   1f68e:	f413 6f60 	tst.w	r3, #3584	; 0xe00
	VitalSignsMonitor.errors = errors & VitalSignsMonitor.errorMask; // write collected errors to interface
   1f692:	60a2      	str	r2, [r4, #8]
	if(errors & (VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2))
   1f694:	d009      	beq.n	1f6aa <vitalsignsmonitor_checkVitalSigns+0xc6>
	{
		Evalboards.driverEnable = DRIVER_DISABLE;     // set global driver enable to disabled
   1f696:	2600      	movs	r6, #0
		Evalboards.ch1.enableDriver(DRIVER_DISABLE);  // disable driver for motion controller board
   1f698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		Evalboards.driverEnable = DRIVER_DISABLE;     // set global driver enable to disabled
   1f69a:	f885 60f0 	strb.w	r6, [r5, #240]	; 0xf0
		Evalboards.ch1.enableDriver(DRIVER_DISABLE);  // disable driver for motion controller board
   1f69e:	4630      	mov	r0, r6
   1f6a0:	4798      	blx	r3
		Evalboards.ch2.enableDriver(DRIVER_DISABLE);  // disable driver for driver
   1f6a2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   1f6a6:	4630      	mov	r0, r6
   1f6a8:	4798      	blx	r3
	}

	// set debug LED if not in debug mode
	// set status LED if not in debug mode
	if(!VitalSignsMonitor.debugMode)
   1f6aa:	f994 3000 	ldrsb.w	r3, [r4]
   1f6ae:	b983      	cbnz	r3, 1f6d2 <vitalsignsmonitor_checkVitalSigns+0xee>
	{
		if(VitalSignsMonitor.errors & (~(VSM_BUSY | VSM_BUSY_CH1 | VSM_BUSY_CH2 | VSM_WARNING_CPU_SUPPLY_LOW)))
   1f6b0:	4b0b      	ldr	r3, [pc, #44]	; (1f6e0 <vitalsignsmonitor_checkVitalSigns+0xfc>)
   1f6b2:	68a2      	ldr	r2, [r4, #8]
   1f6b4:	699b      	ldr	r3, [r3, #24]
   1f6b6:	f032 0278 	bics.w	r2, r2, #120	; 0x78
			HAL.LEDs->error.on();
   1f6ba:	bf14      	ite	ne
   1f6bc:	691b      	ldrne	r3, [r3, #16]
		else
			HAL.LEDs->error.off();
   1f6be:	695b      	ldreq	r3, [r3, #20]
   1f6c0:	4798      	blx	r3

		if(VitalSignsMonitor.errors & (VSM_BUSY | VSM_BUSY_CH1 | VSM_BUSY_CH2))
   1f6c2:	68a3      	ldr	r3, [r4, #8]
   1f6c4:	f013 0f38 	tst.w	r3, #56	; 0x38
			VitalSignsMonitor.heartRate = VSM_HEARTRATE_FAST;
   1f6c8:	bf14      	ite	ne
   1f6ca:	2332      	movne	r3, #50	; 0x32
		else
			VitalSignsMonitor.heartRate = VSM_HEARTRATE_NORMAL;
   1f6cc:	f44f 73fa 	moveq.w	r3, #500	; 0x1f4
   1f6d0:	60e3      	str	r3, [r4, #12]
	}
}
   1f6d2:	bd70      	pop	{r4, r5, r6, pc}
   1f6d4:	1fff574c 	.word	0x1fff574c
   1f6d8:	1fff5e88 	.word	0x1fff5e88
   1f6dc:	1fff0b34 	.word	0x1fff0b34
   1f6e0:	00029d1c 	.word	0x00029d1c

0001f6e4 <vitalsignsmonitor_clearOvervoltageErrors>:

void vitalsignsmonitor_clearOvervoltageErrors()
{
	VitalSignsMonitor.errors &= ~(VSM_ERRORS_OVERVOLTAGE | VSM_ERRORS_OVERVOLTAGE_CH1 | VSM_ERRORS_OVERVOLTAGE_CH2);
   1f6e4:	4a02      	ldr	r2, [pc, #8]	; (1f6f0 <vitalsignsmonitor_clearOvervoltageErrors+0xc>)
   1f6e6:	6893      	ldr	r3, [r2, #8]
   1f6e8:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
   1f6ec:	6093      	str	r3, [r2, #8]
}
   1f6ee:	4770      	bx	lr
   1f6f0:	1fff0b34 	.word	0x1fff0b34

0001f6f4 <StepDir_stop.part.0>:
	{
		StepDir[channel].stallGuardActive = false;
	}
}

void StepDir_stop(uint8_t channel, StepDirStop stopType)
   1f6f4:	b570      	push	{r4, r5, r6, lr}
		break;
	case STOP_EMERGENCY:
		StepDir[channel].haltingCondition |= STATUS_EMERGENCY_STOP;
		break;
	case STOP_STALL:
		StepDir[channel].haltingCondition |= STATUS_STALLED;
   1f6f6:	4c0b      	ldr	r4, [pc, #44]	; (1f724 <StepDir_stop.part.0+0x30>)
   1f6f8:	2268      	movs	r2, #104	; 0x68
   1f6fa:	fb02 4500 	mla	r5, r2, r0, r4
		tmc_ramp_linear_set_rampVelocity(&StepDir[channel].ramp, 0);
   1f6fe:	f105 0430 	add.w	r4, r5, #48	; 0x30
		StepDir[channel].haltingCondition |= STATUS_STALLED;
   1f702:	786b      	ldrb	r3, [r5, #1]
   1f704:	f043 0308 	orr.w	r3, r3, #8
		StepDir[channel].ramp.accumulatorVelocity = 0;
   1f708:	2600      	movs	r6, #0
		StepDir[channel].haltingCondition |= STATUS_STALLED;
   1f70a:	706b      	strb	r3, [r5, #1]
		tmc_ramp_linear_set_rampVelocity(&StepDir[channel].ramp, 0);
   1f70c:	2100      	movs	r1, #0
   1f70e:	4620      	mov	r0, r4
   1f710:	f000 fdb1 	bl	20276 <tmc_ramp_linear_set_rampVelocity>
		StepDir[channel].ramp.accumulatorVelocity = 0;
   1f714:	64ee      	str	r6, [r5, #76]	; 0x4c
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, 0);
   1f716:	4631      	mov	r1, r6
   1f718:	4620      	mov	r0, r4
   1f71a:	f000 fdaa 	bl	20272 <tmc_ramp_linear_set_targetVelocity>
		StepDir[channel].ramp.accelerationSteps = 0;
   1f71e:	65ae      	str	r6, [r5, #88]	; 0x58
		break;
	}
}
   1f720:	bd70      	pop	{r4, r5, r6, pc}
   1f722:	bf00      	nop
   1f724:	1fff6624 	.word	0x1fff6624

0001f728 <StepDir_rotate>:
	if (channel >= STEP_DIR_CHANNELS)
   1f728:	2801      	cmp	r0, #1
{
   1f72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f72e:	4605      	mov	r5, r0
   1f730:	460e      	mov	r6, r1
	if (channel >= STEP_DIR_CHANNELS)
   1f732:	d81a      	bhi.n	1f76a <StepDir_rotate+0x42>
	tmc_ramp_linear_set_mode(&StepDir[channel].ramp, TMC_RAMP_LINEAR_MODE_VELOCITY);
   1f734:	4f0e      	ldr	r7, [pc, #56]	; (1f770 <StepDir_rotate+0x48>)
   1f736:	f04f 0868 	mov.w	r8, #104	; 0x68
   1f73a:	2430      	movs	r4, #48	; 0x30
   1f73c:	fb18 4400 	smlabb	r4, r8, r0, r4
   1f740:	443c      	add	r4, r7
	switch(StepDir[channel].mode) {
   1f742:	fb08 7505 	mla	r5, r8, r5, r7
	tmc_ramp_linear_set_mode(&StepDir[channel].ramp, TMC_RAMP_LINEAR_MODE_VELOCITY);
   1f746:	2100      	movs	r1, #0
   1f748:	4620      	mov	r0, r4
   1f74a:	f000 fd98 	bl	2027e <tmc_ramp_linear_set_mode>
	switch(StepDir[channel].mode) {
   1f74e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, velocity);
   1f752:	4631      	mov	r1, r6
	switch(StepDir[channel].mode) {
   1f754:	b923      	cbnz	r3, 1f760 <StepDir_rotate+0x38>
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, MIN(STEPDIR_MAX_VELOCITY, velocity));
   1f756:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
   1f75a:	bfa8      	it	ge
   1f75c:	f44f 3100 	movge.w	r1, #131072	; 0x20000
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, velocity);
   1f760:	4620      	mov	r0, r4
}
   1f762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, velocity);
   1f766:	f000 bd84 	b.w	20272 <tmc_ramp_linear_set_targetVelocity>
}
   1f76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f76e:	bf00      	nop
   1f770:	1fff6624 	.word	0x1fff6624

0001f774 <StepDir_moveTo>:
	if (channel >= STEP_DIR_CHANNELS)
   1f774:	2801      	cmp	r0, #1
{
   1f776:	b538      	push	{r3, r4, r5, lr}
   1f778:	460d      	mov	r5, r1
	if (channel >= STEP_DIR_CHANNELS)
   1f77a:	d80f      	bhi.n	1f79c <StepDir_moveTo+0x28>
	tmc_ramp_linear_set_mode(&StepDir[channel].ramp, TMC_RAMP_LINEAR_MODE_POSITION);
   1f77c:	2330      	movs	r3, #48	; 0x30
   1f77e:	2468      	movs	r4, #104	; 0x68
   1f780:	fb14 3000 	smlabb	r0, r4, r0, r3
   1f784:	4c06      	ldr	r4, [pc, #24]	; (1f7a0 <StepDir_moveTo+0x2c>)
   1f786:	4404      	add	r4, r0
   1f788:	4620      	mov	r0, r4
   1f78a:	2101      	movs	r1, #1
   1f78c:	f000 fd77 	bl	2027e <tmc_ramp_linear_set_mode>
	tmc_ramp_linear_set_targetPosition(&StepDir[channel].ramp, position);
   1f790:	4629      	mov	r1, r5
   1f792:	4620      	mov	r0, r4
}
   1f794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc_ramp_linear_set_targetPosition(&StepDir[channel].ramp, position);
   1f798:	f000 bd67 	b.w	2026a <tmc_ramp_linear_set_targetPosition>
}
   1f79c:	bd38      	pop	{r3, r4, r5, pc}
   1f79e:	bf00      	nop
   1f7a0:	1fff6624 	.word	0x1fff6624

0001f7a4 <StepDir_periodicJob>:
	if (channel >= STEP_DIR_CHANNELS)
   1f7a4:	2801      	cmp	r0, #1
{
   1f7a6:	b570      	push	{r4, r5, r6, lr}
   1f7a8:	4604      	mov	r4, r0
	if (channel >= STEP_DIR_CHANNELS)
   1f7aa:	d812      	bhi.n	1f7d2 <StepDir_periodicJob+0x2e>
	if ((StepDir[channel].stallGuardThreshold != 0) && (abs(tmc_ramp_linear_get_rampVelocity(&StepDir[channel].ramp)) >= StepDir[channel].stallGuardThreshold))
   1f7ac:	4b0c      	ldr	r3, [pc, #48]	; (1f7e0 <StepDir_periodicJob+0x3c>)
   1f7ae:	2068      	movs	r0, #104	; 0x68
   1f7b0:	fb00 3504 	mla	r5, r0, r4, r3
   1f7b4:	461e      	mov	r6, r3
   1f7b6:	686a      	ldr	r2, [r5, #4]
   1f7b8:	b162      	cbz	r2, 1f7d4 <StepDir_periodicJob+0x30>
   1f7ba:	4628      	mov	r0, r5
   1f7bc:	3030      	adds	r0, #48	; 0x30
   1f7be:	f000 fd71 	bl	202a4 <tmc_ramp_linear_get_rampVelocity>
   1f7c2:	686b      	ldr	r3, [r5, #4]
   1f7c4:	2800      	cmp	r0, #0
   1f7c6:	bfb8      	it	lt
   1f7c8:	4240      	neglt	r0, r0
   1f7ca:	4298      	cmp	r0, r3
   1f7cc:	db02      	blt.n	1f7d4 <StepDir_periodicJob+0x30>
		StepDir[channel].stallGuardActive = true;
   1f7ce:	2301      	movs	r3, #1
   1f7d0:	70ab      	strb	r3, [r5, #2]
}
   1f7d2:	bd70      	pop	{r4, r5, r6, pc}
		StepDir[channel].stallGuardActive = false;
   1f7d4:	2068      	movs	r0, #104	; 0x68
   1f7d6:	fb00 6404 	mla	r4, r0, r4, r6
   1f7da:	2300      	movs	r3, #0
   1f7dc:	70a3      	strb	r3, [r4, #2]
   1f7de:	e7f8      	b.n	1f7d2 <StepDir_periodicJob+0x2e>
   1f7e0:	1fff6624 	.word	0x1fff6624

0001f7e4 <StepDir_stop>:
	switch(stopType)
   1f7e4:	2901      	cmp	r1, #1
{
   1f7e6:	b538      	push	{r3, r4, r5, lr}
   1f7e8:	4603      	mov	r3, r0
   1f7ea:	460d      	mov	r5, r1
	switch(stopType)
   1f7ec:	d011      	beq.n	1f812 <StepDir_stop+0x2e>
   1f7ee:	2902      	cmp	r1, #2
   1f7f0:	d018      	beq.n	1f824 <StepDir_stop+0x40>
   1f7f2:	b9b1      	cbnz	r1, 1f822 <StepDir_stop+0x3e>
		tmc_ramp_linear_set_targetVelocity(&StepDir[channel].ramp, 0);
   1f7f4:	2468      	movs	r4, #104	; 0x68
   1f7f6:	2030      	movs	r0, #48	; 0x30
   1f7f8:	fb14 0303 	smlabb	r3, r4, r3, r0
   1f7fc:	4c0b      	ldr	r4, [pc, #44]	; (1f82c <StepDir_stop+0x48>)
   1f7fe:	441c      	add	r4, r3
   1f800:	4620      	mov	r0, r4
   1f802:	f000 fd36 	bl	20272 <tmc_ramp_linear_set_targetVelocity>
		tmc_ramp_linear_set_mode(&StepDir[channel].ramp, TMC_RAMP_LINEAR_MODE_VELOCITY);
   1f806:	4629      	mov	r1, r5
   1f808:	4620      	mov	r0, r4
}
   1f80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tmc_ramp_linear_set_mode(&StepDir[channel].ramp, TMC_RAMP_LINEAR_MODE_VELOCITY);
   1f80e:	f000 bd36 	b.w	2027e <tmc_ramp_linear_set_mode>
		StepDir[channel].haltingCondition |= STATUS_EMERGENCY_STOP;
   1f812:	4806      	ldr	r0, [pc, #24]	; (1f82c <StepDir_stop+0x48>)
   1f814:	2268      	movs	r2, #104	; 0x68
   1f816:	fb02 0303 	mla	r3, r2, r3, r0
   1f81a:	785a      	ldrb	r2, [r3, #1]
   1f81c:	f042 0201 	orr.w	r2, r2, #1
   1f820:	705a      	strb	r2, [r3, #1]
}
   1f822:	bd38      	pop	{r3, r4, r5, pc}
   1f824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f828:	e764      	b.n	1f6f4 <StepDir_stop.part.0>
   1f82a:	bf00      	nop
   1f82c:	1fff6624 	.word	0x1fff6624

0001f830 <StepDir_getStatus>:

uint8_t StepDir_getStatus(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1f830:	2801      	cmp	r0, #1
{
   1f832:	b570      	push	{r4, r5, r6, lr}
	if (channel >= STEP_DIR_CHANNELS)
   1f834:	d81f      	bhi.n	1f876 <StepDir_getStatus+0x46>
		return -1;

	uint8_t status = StepDir[channel].haltingCondition;
   1f836:	2268      	movs	r2, #104	; 0x68
   1f838:	4b10      	ldr	r3, [pc, #64]	; (1f87c <StepDir_getStatus+0x4c>)
   1f83a:	fb02 f500 	mul.w	r5, r2, r0
   1f83e:	1959      	adds	r1, r3, r5

	status |= (StepDir[channel].targetReached) ? STATUS_TARGET_REACHED : 0;
   1f840:	5d5c      	ldrb	r4, [r3, r5]
	uint8_t status = StepDir[channel].haltingCondition;
   1f842:	784e      	ldrb	r6, [r1, #1]
	status |= (StepDir[channel].stallGuardActive) ? STATUS_STALLGUARD_ACTIVE : 0;
   1f844:	7889      	ldrb	r1, [r1, #2]
	status |= (StepDir[channel].targetReached) ? STATUS_TARGET_REACHED : 0;
   1f846:	2c00      	cmp	r4, #0
   1f848:	bf14      	ite	ne
   1f84a:	2410      	movne	r4, #16
   1f84c:	2400      	moveq	r4, #0
	status |= (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_VELOCITY) ? STATUS_MODE : 0;
   1f84e:	fb02 3000 	mla	r0, r2, r0, r3
	status |= (StepDir[channel].stallGuardActive) ? STATUS_STALLGUARD_ACTIVE : 0;
   1f852:	2900      	cmp	r1, #0
	status |= (StepDir[channel].targetReached) ? STATUS_TARGET_REACHED : 0;
   1f854:	ea44 0406 	orr.w	r4, r4, r6
	status |= (StepDir[channel].stallGuardActive) ? STATUS_STALLGUARD_ACTIVE : 0;
   1f858:	bf14      	ite	ne
   1f85a:	2120      	movne	r1, #32
   1f85c:	2100      	moveq	r1, #0
	status |= (StepDir[channel].targetReached) ? STATUS_TARGET_REACHED : 0;
   1f85e:	b264      	sxtb	r4, r4
	status |= (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_VELOCITY) ? STATUS_MODE : 0;
   1f860:	3030      	adds	r0, #48	; 0x30
	status |= (StepDir[channel].stallGuardActive) ? STATUS_STALLGUARD_ACTIVE : 0;
   1f862:	430c      	orrs	r4, r1
	status |= (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_VELOCITY) ? STATUS_MODE : 0;
   1f864:	f000 fd25 	bl	202b2 <tmc_ramp_linear_get_mode>
   1f868:	2800      	cmp	r0, #0
   1f86a:	bf0c      	ite	eq
   1f86c:	2040      	moveq	r0, #64	; 0x40
   1f86e:	2000      	movne	r0, #0
   1f870:	4320      	orrs	r0, r4
   1f872:	b2c0      	uxtb	r0, r0

	return status;
}
   1f874:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1f876:	20ff      	movs	r0, #255	; 0xff
   1f878:	e7fc      	b.n	1f874 <StepDir_getStatus+0x44>
   1f87a:	bf00      	nop
   1f87c:	1fff6624 	.word	0x1fff6624

0001f880 <StepDir_setPins>:

// Register the pins to be used by a StepDir channel. NULL will leave the pin unchanged
void StepDir_setPins(uint8_t channel, IOPinTypeDef *stepPin, IOPinTypeDef *dirPin, IOPinTypeDef *stallPin)
{
	if (channel >= STEP_DIR_CHANNELS)
   1f880:	2801      	cmp	r0, #1
{
   1f882:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (channel >= STEP_DIR_CHANNELS)
   1f884:	d82e      	bhi.n	1f8e4 <StepDir_setPins+0x64>
		return;

	if (stepPin)
   1f886:	b199      	cbz	r1, 1f8b0 <StepDir_setPins+0x30>
	{
		if (IS_DUMMY_PIN(stepPin))
   1f888:	690f      	ldr	r7, [r1, #16]
   1f88a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 1f8e8 <StepDir_setPins+0x68>
   1f88e:	b937      	cbnz	r7, 1f89e <StepDir_setPins+0x1e>
		{
			// Set the halting condition before changing the pin
			StepDir[channel].haltingCondition |= STATUS_NO_STEP_PIN;
   1f890:	2568      	movs	r5, #104	; 0x68
   1f892:	fb05 c500 	mla	r5, r5, r0, ip
   1f896:	786e      	ldrb	r6, [r5, #1]
   1f898:	f046 0602 	orr.w	r6, r6, #2
   1f89c:	706e      	strb	r6, [r5, #1]
		}
		StepDir[channel].stepPin = stepPin;
   1f89e:	2468      	movs	r4, #104	; 0x68
   1f8a0:	fb04 c400 	mla	r4, r4, r0, ip
   1f8a4:	60e1      	str	r1, [r4, #12]
		if (!IS_DUMMY_PIN(stepPin))
   1f8a6:	b11f      	cbz	r7, 1f8b0 <StepDir_setPins+0x30>
		{
			// Clear the halting condition after setting the pin
			StepDir[channel].haltingCondition &= ~STATUS_NO_STEP_PIN;
   1f8a8:	7861      	ldrb	r1, [r4, #1]
   1f8aa:	f021 0102 	bic.w	r1, r1, #2
   1f8ae:	7061      	strb	r1, [r4, #1]
		}
	}

	if (dirPin)
   1f8b0:	b192      	cbz	r2, 1f8d8 <StepDir_setPins+0x58>
	{
		if (IS_DUMMY_PIN(dirPin))
   1f8b2:	6916      	ldr	r6, [r2, #16]
   1f8b4:	4f0c      	ldr	r7, [pc, #48]	; (1f8e8 <StepDir_setPins+0x68>)
   1f8b6:	b936      	cbnz	r6, 1f8c6 <StepDir_setPins+0x46>
		{
			// Set the halting condition before changing the pin
			StepDir[channel].haltingCondition |= STATUS_NO_DIR_PIN;
   1f8b8:	2468      	movs	r4, #104	; 0x68
   1f8ba:	fb04 7400 	mla	r4, r4, r0, r7
   1f8be:	7865      	ldrb	r5, [r4, #1]
   1f8c0:	f045 0504 	orr.w	r5, r5, #4
   1f8c4:	7065      	strb	r5, [r4, #1]
		}
		StepDir[channel].dirPin = dirPin;
   1f8c6:	2168      	movs	r1, #104	; 0x68
   1f8c8:	fb01 7100 	mla	r1, r1, r0, r7
   1f8cc:	610a      	str	r2, [r1, #16]
		if (!IS_DUMMY_PIN(dirPin))
   1f8ce:	b11e      	cbz	r6, 1f8d8 <StepDir_setPins+0x58>
		{
			// Clear the halting condition after setting the pin
			StepDir[channel].haltingCondition &= ~STATUS_NO_DIR_PIN;
   1f8d0:	784a      	ldrb	r2, [r1, #1]
   1f8d2:	f022 0204 	bic.w	r2, r2, #4
   1f8d6:	704a      	strb	r2, [r1, #1]
		}
	}

	if (stallPin)
   1f8d8:	b123      	cbz	r3, 1f8e4 <StepDir_setPins+0x64>
	{
		StepDir[channel].stallGuardPin = stallPin;
   1f8da:	4a03      	ldr	r2, [pc, #12]	; (1f8e8 <StepDir_setPins+0x68>)
   1f8dc:	2168      	movs	r1, #104	; 0x68
   1f8de:	fb01 2000 	mla	r0, r1, r0, r2
   1f8e2:	6083      	str	r3, [r0, #8]
	}
}
   1f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8e6:	bf00      	nop
   1f8e8:	1fff6624 	.word	0x1fff6624

0001f8ec <StepDir_stallGuard>:

void StepDir_stallGuard(uint8_t channel, bool stall)
{
	if (channel >= STEP_DIR_CHANNELS)
   1f8ec:	2801      	cmp	r0, #1
{
   1f8ee:	b410      	push	{r4}
	if (channel >= STEP_DIR_CHANNELS)
   1f8f0:	d808      	bhi.n	1f904 <StepDir_stallGuard+0x18>
		return;

	if (StepDir[channel].stallGuardActive && stall)
   1f8f2:	4a05      	ldr	r2, [pc, #20]	; (1f908 <StepDir_stallGuard+0x1c>)
   1f8f4:	2468      	movs	r4, #104	; 0x68
   1f8f6:	fb04 2300 	mla	r3, r4, r0, r2
   1f8fa:	789b      	ldrb	r3, [r3, #2]
   1f8fc:	b113      	cbz	r3, 1f904 <StepDir_stallGuard+0x18>
   1f8fe:	b109      	cbz	r1, 1f904 <StepDir_stallGuard+0x18>
	{
		StepDir_stop(channel, STOP_STALL);
	}
}
   1f900:	bc10      	pop	{r4}
   1f902:	e6f7      	b.n	1f6f4 <StepDir_stop.part.0>
   1f904:	bc10      	pop	{r4}
   1f906:	4770      	bx	lr
   1f908:	1fff6624 	.word	0x1fff6624

0001f90c <FTM1_IRQHandler>:
	FTM1_SC &= ~FTM_SC_TOF_MASK; // clear timer overflow flag
   1f90c:	4a27      	ldr	r2, [pc, #156]	; (1f9ac <FTM1_IRQHandler+0xa0>)
{
   1f90e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FTM1_SC &= ~FTM_SC_TOF_MASK; // clear timer overflow flag
   1f912:	6813      	ldr	r3, [r2, #0]
   1f914:	4c26      	ldr	r4, [pc, #152]	; (1f9b0 <FTM1_IRQHandler+0xa4>)
			StepDir_stallGuard(ch, HAL.IOs->config->isHigh(currCh->stallGuardPin));
   1f916:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1f9b4 <FTM1_IRQHandler+0xa8>
	FTM1_SC &= ~FTM_SC_TOF_MASK; // clear timer overflow flag
   1f91a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1f91e:	2500      	movs	r5, #0
   1f920:	6013      	str	r3, [r2, #0]
			currCh->syncFlag = SYNC_SNAPSHOT_SAVED;
   1f922:	2702      	movs	r7, #2
			currCh->syncFlag = SYNC_IDLE;
   1f924:	46a8      	mov	r8, r5
		if (currCh->haltingCondition)
   1f926:	7863      	ldrb	r3, [r4, #1]
   1f928:	b2ee      	uxtb	r6, r5
   1f92a:	bb43      	cbnz	r3, 1f97e <FTM1_IRQHandler+0x72>
		*currCh->stepPin->resetBitRegister = currCh->stepPin->bitWeight;
   1f92c:	68e3      	ldr	r3, [r4, #12]
   1f92e:	e9d3 2303 	ldrd	r2, r3, [r3, #12]
   1f932:	6013      	str	r3, [r2, #0]
		if (!IS_DUMMY_PIN(currCh->stallGuardPin))
   1f934:	68a0      	ldr	r0, [r4, #8]
   1f936:	6903      	ldr	r3, [r0, #16]
   1f938:	b153      	cbz	r3, 1f950 <FTM1_IRQHandler+0x44>
			StepDir_stallGuard(ch, HAL.IOs->config->isHigh(currCh->stallGuardPin));
   1f93a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1f93e:	681b      	ldr	r3, [r3, #0]
   1f940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f942:	4798      	blx	r3
   1f944:	1e01      	subs	r1, r0, #0
   1f946:	bf18      	it	ne
   1f948:	2101      	movne	r1, #1
   1f94a:	4630      	mov	r0, r6
   1f94c:	f7ff ffce 	bl	1f8ec <StepDir_stallGuard>
		int32_t dx = tmc_ramp_linear_compute(&currCh->ramp);
   1f950:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1f954:	4630      	mov	r0, r6
   1f956:	f000 fd5e 	bl	20416 <tmc_ramp_linear_compute>
		if (dx == 0) // No change in position -> skip step generation
   1f95a:	2800      	cmp	r0, #0
   1f95c:	d00a      	beq.n	1f974 <FTM1_IRQHandler+0x68>
		*((dx > 0) ? currCh->dirPin->resetBitRegister : currCh->dirPin->setBitRegister) = currCh->dirPin->bitWeight;
   1f95e:	6923      	ldr	r3, [r4, #16]
   1f960:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
   1f964:	bfd8      	it	le
   1f966:	460a      	movle	r2, r1
   1f968:	691b      	ldr	r3, [r3, #16]
   1f96a:	6013      	str	r3, [r2, #0]
		*currCh->stepPin->setBitRegister = currCh->stepPin->bitWeight;
   1f96c:	68e3      	ldr	r3, [r4, #12]
   1f96e:	689a      	ldr	r2, [r3, #8]
   1f970:	691b      	ldr	r3, [r3, #16]
   1f972:	6013      	str	r3, [r2, #0]
		switch(currCh->syncFlag)
   1f974:	7d23      	ldrb	r3, [r4, #20]
   1f976:	2b01      	cmp	r3, #1
   1f978:	d007      	beq.n	1f98a <FTM1_IRQHandler+0x7e>
   1f97a:	2b03      	cmp	r3, #3
   1f97c:	d00f      	beq.n	1f99e <FTM1_IRQHandler+0x92>
	for (uint8_t ch = 0; ch < STEP_DIR_CHANNELS; ch++)
   1f97e:	3468      	adds	r4, #104	; 0x68
   1f980:	b10d      	cbz	r5, 1f986 <FTM1_IRQHandler+0x7a>
}
   1f982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f986:	2501      	movs	r5, #1
   1f988:	e7cd      	b.n	1f926 <FTM1_IRQHandler+0x1a>
			tmc_ramp_linear_set_acceleration(&currCh->ramp, currCh->newAcceleration);
   1f98a:	6a21      	ldr	r1, [r4, #32]
   1f98c:	4630      	mov	r0, r6
   1f98e:	f000 fc74 	bl	2027a <tmc_ramp_linear_set_acceleration>
			currCh->oldVelocity  = tmc_ramp_linear_get_rampVelocity(&currCh->ramp);
   1f992:	4630      	mov	r0, r6
   1f994:	f000 fc86 	bl	202a4 <tmc_ramp_linear_get_rampVelocity>
			currCh->syncFlag = SYNC_SNAPSHOT_SAVED;
   1f998:	7527      	strb	r7, [r4, #20]
			currCh->oldVelocity  = tmc_ramp_linear_get_rampVelocity(&currCh->ramp);
   1f99a:	61a0      	str	r0, [r4, #24]
			break;
   1f99c:	e7ef      	b.n	1f97e <FTM1_IRQHandler+0x72>
			currCh->ramp.accelerationSteps += currCh->stepDifference;
   1f99e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1f9a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			currCh->syncFlag = SYNC_IDLE;
   1f9a2:	f884 8014 	strb.w	r8, [r4, #20]
			currCh->ramp.accelerationSteps += currCh->stepDifference;
   1f9a6:	4413      	add	r3, r2
   1f9a8:	65a3      	str	r3, [r4, #88]	; 0x58
			break;
   1f9aa:	e7e8      	b.n	1f97e <FTM1_IRQHandler+0x72>
   1f9ac:	40039000 	.word	0x40039000
   1f9b0:	1fff6624 	.word	0x1fff6624
   1f9b4:	00029d1c 	.word	0x00029d1c

0001f9b8 <StepDir_setActualPosition>:
// The setters are responsible to access their respective variables while keeping the ramp generation stable

// Set actual and target position (Not during an active position ramp)
void StepDir_setActualPosition(uint8_t channel, int actualPosition)
{
	if (channel >= STEP_DIR_CHANNELS)
   1f9b8:	2801      	cmp	r0, #1
{
   1f9ba:	b538      	push	{r3, r4, r5, lr}
   1f9bc:	460d      	mov	r5, r1
	if (channel >= STEP_DIR_CHANNELS)
   1f9be:	d814      	bhi.n	1f9ea <StepDir_setActualPosition+0x32>
		return;

	if (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_POSITION)
   1f9c0:	2330      	movs	r3, #48	; 0x30
   1f9c2:	2468      	movs	r4, #104	; 0x68
   1f9c4:	fb14 3400 	smlabb	r4, r4, r0, r3
   1f9c8:	4808      	ldr	r0, [pc, #32]	; (1f9ec <StepDir_setActualPosition+0x34>)
   1f9ca:	4404      	add	r4, r0
   1f9cc:	4620      	mov	r0, r4
   1f9ce:	f000 fc70 	bl	202b2 <tmc_ramp_linear_get_mode>
   1f9d2:	2801      	cmp	r0, #1
		// Temporarity set VMAX to 0 to prevent movement between setting actualPosition and targetPosition
//		uint32_t tmp = StepDir[channel].velocityMax;
//		StepDir[channel].velocityMax = 0;

		// Also update target position to prevent movement
		tmc_ramp_linear_set_targetPosition(&StepDir[channel].ramp, actualPosition);
   1f9d4:	4629      	mov	r1, r5
   1f9d6:	4620      	mov	r0, r4
	if (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_POSITION)
   1f9d8:	d103      	bne.n	1f9e2 <StepDir_setActualPosition+0x2a>
		tmc_ramp_linear_set_targetPosition(&StepDir[channel].ramp, actualPosition);
   1f9da:	f000 fc46 	bl	2026a <tmc_ramp_linear_set_targetPosition>
		tmc_ramp_linear_set_rampPosition(&StepDir[channel].ramp, actualPosition);
   1f9de:	4629      	mov	r1, r5
   1f9e0:	4620      	mov	r0, r4
	else
	{
		// In velocity mode the position is not relevant so we can just update it without precautions
		tmc_ramp_linear_set_rampPosition(&StepDir[channel].ramp, actualPosition);
	}
}
   1f9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tmc_ramp_linear_set_rampPosition(&StepDir[channel].ramp, actualPosition);
   1f9e6:	f000 bc42 	b.w	2026e <tmc_ramp_linear_set_rampPosition>
}
   1f9ea:	bd38      	pop	{r3, r4, r5, pc}
   1f9ec:	1fff6624 	.word	0x1fff6624

0001f9f0 <StepDir_setVelocityMax>:
	}
}

void StepDir_setVelocityMax(uint8_t channel, int velocityMax)
{
	if (channel >= STEP_DIR_CHANNELS)
   1f9f0:	2801      	cmp	r0, #1
   1f9f2:	d807      	bhi.n	1fa04 <StepDir_setVelocityMax+0x14>
		return;

	tmc_ramp_linear_set_maxVelocity(&StepDir[channel].ramp, velocityMax);
   1f9f4:	2368      	movs	r3, #104	; 0x68
   1f9f6:	2230      	movs	r2, #48	; 0x30
   1f9f8:	fb13 2000 	smlabb	r0, r3, r0, r2
   1f9fc:	4b02      	ldr	r3, [pc, #8]	; (1fa08 <StepDir_setVelocityMax+0x18>)
   1f9fe:	4418      	add	r0, r3
   1fa00:	f000 bc31 	b.w	20266 <tmc_ramp_linear_set_maxVelocity>
}
   1fa04:	4770      	bx	lr
   1fa06:	bf00      	nop
   1fa08:	1fff6624 	.word	0x1fff6624

0001fa0c <StepDir_setStallGuardThreshold>:

// Set the velocity threshold for active StallGuard. Also reset the stall flag
void StepDir_setStallGuardThreshold(uint8_t channel, int stallGuardThreshold)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fa0c:	2801      	cmp	r0, #1
   1fa0e:	d808      	bhi.n	1fa22 <StepDir_setStallGuardThreshold+0x16>
		return;

	StepDir[channel].stallGuardThreshold = stallGuardThreshold;
   1fa10:	4b04      	ldr	r3, [pc, #16]	; (1fa24 <StepDir_setStallGuardThreshold+0x18>)
   1fa12:	2268      	movs	r2, #104	; 0x68
   1fa14:	fb02 3000 	mla	r0, r2, r0, r3
	StepDir[channel].haltingCondition &= ~STATUS_STALLED;
   1fa18:	7843      	ldrb	r3, [r0, #1]
	StepDir[channel].stallGuardThreshold = stallGuardThreshold;
   1fa1a:	6041      	str	r1, [r0, #4]
	StepDir[channel].haltingCondition &= ~STATUS_STALLED;
   1fa1c:	f023 0308 	bic.w	r3, r3, #8
   1fa20:	7043      	strb	r3, [r0, #1]
}
   1fa22:	4770      	bx	lr
   1fa24:	1fff6624 	.word	0x1fff6624

0001fa28 <StepDir_setMode>:

void StepDir_setMode(uint8_t channel, StepDirMode mode)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fa28:	2801      	cmp	r0, #1
   1fa2a:	d809      	bhi.n	1fa40 <StepDir_setMode+0x18>
		return;

	StepDir[channel].mode = mode;
   1fa2c:	4b05      	ldr	r3, [pc, #20]	; (1fa44 <StepDir_setMode+0x1c>)
   1fa2e:	2268      	movs	r2, #104	; 0x68
   1fa30:	fb02 3000 	mla	r0, r2, r0, r3
   1fa34:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28

	if (mode == STEPDIR_INTERNAL)
   1fa38:	b911      	cbnz	r1, 1fa40 <StepDir_setMode+0x18>
void StepDir_setFrequency(uint8_t channel, uint32_t frequency)
{
	if (channel >= STEP_DIR_CHANNELS)
		return;

	StepDir[channel].frequency = frequency;
   1fa3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1fa3e:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   1fa40:	4770      	bx	lr
   1fa42:	bf00      	nop
   1fa44:	1fff6624 	.word	0x1fff6624

0001fa48 <StepDir_setFrequency>:
	if (channel >= STEP_DIR_CHANNELS)
   1fa48:	2801      	cmp	r0, #1
	StepDir[channel].frequency = frequency;
   1fa4a:	bf9f      	itttt	ls
   1fa4c:	4b02      	ldrls	r3, [pc, #8]	; (1fa58 <StepDir_setFrequency+0x10>)
   1fa4e:	2268      	movls	r2, #104	; 0x68
   1fa50:	fb02 3000 	mlals	r0, r2, r0, r3
   1fa54:	62c1      	strls	r1, [r0, #44]	; 0x2c
}
   1fa56:	4770      	bx	lr
   1fa58:	1fff6624 	.word	0x1fff6624

0001fa5c <StepDir_setPrecision>:

void StepDir_setPrecision(uint8_t channel, uint32_t precision)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fa5c:	2801      	cmp	r0, #1
   1fa5e:	d807      	bhi.n	1fa70 <StepDir_setPrecision+0x14>
		return;

	tmc_ramp_linear_set_precision(&StepDir[channel].ramp, precision);
   1fa60:	2368      	movs	r3, #104	; 0x68
   1fa62:	2230      	movs	r2, #48	; 0x30
   1fa64:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fa68:	4b02      	ldr	r3, [pc, #8]	; (1fa74 <StepDir_setPrecision+0x18>)
   1fa6a:	4418      	add	r0, r3
   1fa6c:	f000 bc0a 	b.w	20284 <tmc_ramp_linear_set_precision>
}
   1fa70:	4770      	bx	lr
   1fa72:	bf00      	nop
   1fa74:	1fff6624 	.word	0x1fff6624

0001fa78 <StepDir_getActualPosition>:

// ===== Getters =====
int StepDir_getActualPosition(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fa78:	2801      	cmp	r0, #1
   1fa7a:	d807      	bhi.n	1fa8c <StepDir_getActualPosition+0x14>
		return -1;

	return tmc_ramp_linear_get_rampPosition(&StepDir[channel].ramp);
   1fa7c:	2368      	movs	r3, #104	; 0x68
   1fa7e:	2230      	movs	r2, #48	; 0x30
   1fa80:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fa84:	4b03      	ldr	r3, [pc, #12]	; (1fa94 <StepDir_getActualPosition+0x1c>)
   1fa86:	4418      	add	r0, r3
   1fa88:	f000 bc08 	b.w	2029c <tmc_ramp_linear_get_rampPosition>
}
   1fa8c:	f04f 30ff 	mov.w	r0, #4294967295
   1fa90:	4770      	bx	lr
   1fa92:	bf00      	nop
   1fa94:	1fff6624 	.word	0x1fff6624

0001fa98 <StepDir_getTargetPosition>:

int StepDir_getTargetPosition(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fa98:	2801      	cmp	r0, #1
   1fa9a:	d807      	bhi.n	1faac <StepDir_getTargetPosition+0x14>
		return -1;

	return tmc_ramp_linear_get_targetPosition(&StepDir[channel].ramp);
   1fa9c:	2368      	movs	r3, #104	; 0x68
   1fa9e:	2230      	movs	r2, #48	; 0x30
   1faa0:	fb13 2000 	smlabb	r0, r3, r0, r2
   1faa4:	4b03      	ldr	r3, [pc, #12]	; (1fab4 <StepDir_getTargetPosition+0x1c>)
   1faa6:	4418      	add	r0, r3
   1faa8:	f000 bbf6 	b.w	20298 <tmc_ramp_linear_get_targetPosition>
}
   1faac:	f04f 30ff 	mov.w	r0, #4294967295
   1fab0:	4770      	bx	lr
   1fab2:	bf00      	nop
   1fab4:	1fff6624 	.word	0x1fff6624

0001fab8 <StepDir_getActualVelocity>:

int StepDir_getActualVelocity(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fab8:	2801      	cmp	r0, #1
   1faba:	d807      	bhi.n	1facc <StepDir_getActualVelocity+0x14>
		return -1;

	return tmc_ramp_linear_get_rampVelocity(&StepDir[channel].ramp);
   1fabc:	2368      	movs	r3, #104	; 0x68
   1fabe:	2230      	movs	r2, #48	; 0x30
   1fac0:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fac4:	4b03      	ldr	r3, [pc, #12]	; (1fad4 <StepDir_getActualVelocity+0x1c>)
   1fac6:	4418      	add	r0, r3
   1fac8:	f000 bbec 	b.w	202a4 <tmc_ramp_linear_get_rampVelocity>
}
   1facc:	f04f 30ff 	mov.w	r0, #4294967295
   1fad0:	4770      	bx	lr
   1fad2:	bf00      	nop
   1fad4:	1fff6624 	.word	0x1fff6624

0001fad8 <StepDir_getTargetVelocity>:

int StepDir_getTargetVelocity(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fad8:	2801      	cmp	r0, #1
   1fada:	d807      	bhi.n	1faec <StepDir_getTargetVelocity+0x14>
		return -1;

	return tmc_ramp_linear_get_targetVelocity(&StepDir[channel].ramp);
   1fadc:	2368      	movs	r3, #104	; 0x68
   1fade:	2230      	movs	r2, #48	; 0x30
   1fae0:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fae4:	4b03      	ldr	r3, [pc, #12]	; (1faf4 <StepDir_getTargetVelocity+0x1c>)
   1fae6:	4418      	add	r0, r3
   1fae8:	f000 bbda 	b.w	202a0 <tmc_ramp_linear_get_targetVelocity>
}
   1faec:	f04f 30ff 	mov.w	r0, #4294967295
   1faf0:	4770      	bx	lr
   1faf2:	bf00      	nop
   1faf4:	1fff6624 	.word	0x1fff6624

0001faf8 <StepDir_getAcceleration>:

uint32_t StepDir_getAcceleration(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1faf8:	2801      	cmp	r0, #1
   1fafa:	d807      	bhi.n	1fb0c <StepDir_getAcceleration+0x14>
		return -1;

	return tmc_ramp_linear_get_acceleration(&StepDir[channel].ramp);
   1fafc:	2368      	movs	r3, #104	; 0x68
   1fafe:	2230      	movs	r2, #48	; 0x30
   1fb00:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fb04:	4b03      	ldr	r3, [pc, #12]	; (1fb14 <StepDir_getAcceleration+0x1c>)
   1fb06:	4418      	add	r0, r3
   1fb08:	f000 bbce 	b.w	202a8 <tmc_ramp_linear_get_acceleration>
}
   1fb0c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb10:	4770      	bx	lr
   1fb12:	bf00      	nop
   1fb14:	1fff6624 	.word	0x1fff6624

0001fb18 <StepDir_getVelocityMax>:

int StepDir_getVelocityMax(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fb18:	2801      	cmp	r0, #1
   1fb1a:	d807      	bhi.n	1fb2c <StepDir_getVelocityMax+0x14>
		return -1;

	return tmc_ramp_linear_get_maxVelocity(&StepDir[channel].ramp);
   1fb1c:	2368      	movs	r3, #104	; 0x68
   1fb1e:	2230      	movs	r2, #48	; 0x30
   1fb20:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fb24:	4b03      	ldr	r3, [pc, #12]	; (1fb34 <StepDir_getVelocityMax+0x1c>)
   1fb26:	4418      	add	r0, r3
   1fb28:	f000 bbb4 	b.w	20294 <tmc_ramp_linear_get_maxVelocity>
}
   1fb2c:	f04f 30ff 	mov.w	r0, #4294967295
   1fb30:	4770      	bx	lr
   1fb32:	bf00      	nop
   1fb34:	1fff6624 	.word	0x1fff6624

0001fb38 <StepDir_getStallGuardThreshold>:

int StepDir_getStallGuardThreshold(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fb38:	2801      	cmp	r0, #1
		return -1;

	return StepDir[channel].stallGuardThreshold;
   1fb3a:	bf9f      	itttt	ls
   1fb3c:	4b04      	ldrls	r3, [pc, #16]	; (1fb50 <StepDir_getStallGuardThreshold+0x18>)
   1fb3e:	2268      	movls	r2, #104	; 0x68
   1fb40:	fb02 3000 	mlals	r0, r2, r0, r3
   1fb44:	6840      	ldrls	r0, [r0, #4]
		return -1;
   1fb46:	bf88      	it	hi
   1fb48:	f04f 30ff 	movhi.w	r0, #4294967295
}
   1fb4c:	4770      	bx	lr
   1fb4e:	bf00      	nop
   1fb50:	1fff6624 	.word	0x1fff6624

0001fb54 <StepDir_getMode>:

StepDirMode StepDir_getMode(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fb54:	2801      	cmp	r0, #1
		return -1;

	return StepDir[channel].mode;
   1fb56:	bf9f      	itttt	ls
   1fb58:	4b04      	ldrls	r3, [pc, #16]	; (1fb6c <StepDir_getMode+0x18>)
   1fb5a:	2268      	movls	r2, #104	; 0x68
   1fb5c:	fb02 3000 	mlals	r0, r2, r0, r3
   1fb60:	f890 0028 	ldrbls.w	r0, [r0, #40]	; 0x28
		return -1;
   1fb64:	bf88      	it	hi
   1fb66:	20ff      	movhi	r0, #255	; 0xff
}
   1fb68:	4770      	bx	lr
   1fb6a:	bf00      	nop
   1fb6c:	1fff6624 	.word	0x1fff6624

0001fb70 <StepDir_getFrequency>:

uint32_t StepDir_getFrequency(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fb70:	2801      	cmp	r0, #1
		return -1;

	return StepDir[channel].frequency;
   1fb72:	bf9f      	itttt	ls
   1fb74:	4b04      	ldrls	r3, [pc, #16]	; (1fb88 <StepDir_getFrequency+0x18>)
   1fb76:	2268      	movls	r2, #104	; 0x68
   1fb78:	fb02 3000 	mlals	r0, r2, r0, r3
   1fb7c:	6ac0      	ldrls	r0, [r0, #44]	; 0x2c
		return -1;
   1fb7e:	bf88      	it	hi
   1fb80:	f04f 30ff 	movhi.w	r0, #4294967295
}
   1fb84:	4770      	bx	lr
   1fb86:	bf00      	nop
   1fb88:	1fff6624 	.word	0x1fff6624

0001fb8c <StepDir_getPrecision>:

uint32_t StepDir_getPrecision(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fb8c:	2801      	cmp	r0, #1
   1fb8e:	d807      	bhi.n	1fba0 <StepDir_getPrecision+0x14>
		return 0;

	return tmc_ramp_linear_get_precision(&StepDir[channel].ramp);
   1fb90:	2368      	movs	r3, #104	; 0x68
   1fb92:	2230      	movs	r2, #48	; 0x30
   1fb94:	fb13 2000 	smlabb	r0, r3, r0, r2
   1fb98:	4b02      	ldr	r3, [pc, #8]	; (1fba4 <StepDir_getPrecision+0x18>)
   1fb9a:	4418      	add	r0, r3
   1fb9c:	f000 bb8c 	b.w	202b8 <tmc_ramp_linear_get_precision>
}
   1fba0:	2000      	movs	r0, #0
   1fba2:	4770      	bx	lr
   1fba4:	1fff6624 	.word	0x1fff6624

0001fba8 <StepDir_getMaxAcceleration>:

int32_t StepDir_getMaxAcceleration(uint8_t channel)
{
	if (channel >= STEP_DIR_CHANNELS)
   1fba8:	2801      	cmp	r0, #1
   1fbaa:	d80b      	bhi.n	1fbc4 <StepDir_getMaxAcceleration+0x1c>
		return -1;

	if (StepDir[channel].mode == STEPDIR_INTERNAL)
   1fbac:	4b07      	ldr	r3, [pc, #28]	; (1fbcc <StepDir_getMaxAcceleration+0x24>)
   1fbae:	2268      	movs	r2, #104	; 0x68
   1fbb0:	fb02 3000 	mla	r0, r2, r0, r3
   1fbb4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
		return STEPDIR_MAX_ACCELERATION;
   1fbb8:	4805      	ldr	r0, [pc, #20]	; (1fbd0 <StepDir_getMaxAcceleration+0x28>)
	if (StepDir[channel].mode == STEPDIR_INTERNAL)
   1fbba:	2b00      	cmp	r3, #0
		return STEPDIR_MAX_ACCELERATION;
   1fbbc:	bf18      	it	ne
   1fbbe:	f06f 4000 	mvnne.w	r0, #2147483648	; 0x80000000
   1fbc2:	4770      	bx	lr
		return -1;
   1fbc4:	f04f 30ff 	mov.w	r0, #4294967295

	// STEPDIR_EXTERNAL -> no limitation from this generator
	return s32_MAX;
}
   1fbc8:	4770      	bx	lr
   1fbca:	bf00      	nop
   1fbcc:	1fff6624 	.word	0x1fff6624
   1fbd0:	7ffeffff 	.word	0x7ffeffff

0001fbd4 <StepDir_init>:

// ===================

void StepDir_init(uint32_t precision)
{
   1fbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	}

	// StepDir Channel initialisation
	for (int i = 0; i < STEP_DIR_CHANNELS; i++)
	{
		StepDir[i].oldVelAccu           = 0;
   1fbd8:	4c34      	ldr	r4, [pc, #208]	; (1fcac <StepDir_init+0xd8>)
		StepDir[i].newAcceleration      = 0;

		// Set the no-pin halting conditions before changing the pins
		// to avoid a race condition with the interrupt
		StepDir[i].haltingCondition     = STATUS_NO_STEP_PIN | STATUS_NO_DIR_PIN;
		StepDir[i].stallGuardPin        = &DummyPin;
   1fbda:	4f35      	ldr	r7, [pc, #212]	; (1fcb0 <StepDir_init+0xdc>)
		StepDir[i].stepPin              = &DummyPin;
		StepDir[i].dirPin               = &DummyPin;
   1fbdc:	6127      	str	r7, [r4, #16]
	if (precision == 0)
   1fbde:	1e06      	subs	r6, r0, #0
		precision = STEPDIR_FREQUENCY;
   1fbe0:	bf08      	it	eq
   1fbe2:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		StepDir[i].oldVelAccu           = 0;
   1fbe6:	2500      	movs	r5, #0
		StepDir[i].haltingCondition     = STATUS_NO_STEP_PIN | STATUS_NO_DIR_PIN;
   1fbe8:	f04f 0806 	mov.w	r8, #6
		StepDir[i].stallGuardThreshold  = STALLGUARD_THRESHOLD;

		StepDir[i].mode                 = STEPDIR_INTERNAL;
		StepDir[i].frequency            = precision;

		tmc_ramp_linear_init(&StepDir[i].ramp);
   1fbec:	f104 0030 	add.w	r0, r4, #48	; 0x30
		StepDir[i].frequency            = precision;
   1fbf0:	62e6      	str	r6, [r4, #44]	; 0x2c
		StepDir[i].oldVelocity          = 0;
   1fbf2:	e9c4 5506 	strd	r5, r5, [r4, #24]
		StepDir[i].stepPin              = &DummyPin;
   1fbf6:	e9c4 7702 	strd	r7, r7, [r4, #8]
		StepDir[i].newAcceleration      = 0;
   1fbfa:	6225      	str	r5, [r4, #32]
		StepDir[i].haltingCondition     = STATUS_NO_STEP_PIN | STATUS_NO_DIR_PIN;
   1fbfc:	f884 8001 	strb.w	r8, [r4, #1]
		StepDir[i].stallGuardThreshold  = STALLGUARD_THRESHOLD;
   1fc00:	6065      	str	r5, [r4, #4]
		StepDir[i].mode                 = STEPDIR_INTERNAL;
   1fc02:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
		tmc_ramp_linear_init(&StepDir[i].ramp);
   1fc06:	f000 fb19 	bl	2023c <tmc_ramp_linear_init>
		tmc_ramp_linear_set_precision(&StepDir[i].ramp, precision);
   1fc0a:	4631      	mov	r1, r6
   1fc0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fc10:	f000 fb38 	bl	20284 <tmc_ramp_linear_set_precision>
		tmc_ramp_linear_set_maxVelocity(&StepDir[i].ramp, STEPDIR_DEFAULT_VELOCITY);
   1fc14:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fc18:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1fc1c:	f000 fb23 	bl	20266 <tmc_ramp_linear_set_maxVelocity>
		tmc_ramp_linear_set_acceleration(&StepDir[i].ramp, STEPDIR_DEFAULT_ACCELERATION);
   1fc20:	4924      	ldr	r1, [pc, #144]	; (1fcb4 <StepDir_init+0xe0>)
   1fc22:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fc26:	f000 fb28 	bl	2027a <tmc_ramp_linear_set_acceleration>
		tmc_ramp_linear_init(&StepDir[i].ramp);
   1fc2a:	f104 0098 	add.w	r0, r4, #152	; 0x98
		StepDir[i].frequency            = precision;
   1fc2e:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
		StepDir[i].oldVelocity          = 0;
   1fc32:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		StepDir[i].stepPin              = &DummyPin;
   1fc36:	e9c4 771c 	strd	r7, r7, [r4, #112]	; 0x70
		StepDir[i].newAcceleration      = 0;
   1fc3a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
		StepDir[i].haltingCondition     = STATUS_NO_STEP_PIN | STATUS_NO_DIR_PIN;
   1fc3e:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
		StepDir[i].dirPin               = &DummyPin;
   1fc42:	67a7      	str	r7, [r4, #120]	; 0x78
		StepDir[i].stallGuardThreshold  = STALLGUARD_THRESHOLD;
   1fc44:	66e5      	str	r5, [r4, #108]	; 0x6c
		StepDir[i].mode                 = STEPDIR_INTERNAL;
   1fc46:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
		tmc_ramp_linear_init(&StepDir[i].ramp);
   1fc4a:	f000 faf7 	bl	2023c <tmc_ramp_linear_init>
		tmc_ramp_linear_set_precision(&StepDir[i].ramp, precision);
   1fc4e:	4631      	mov	r1, r6
   1fc50:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1fc54:	f000 fb16 	bl	20284 <tmc_ramp_linear_set_precision>
		tmc_ramp_linear_set_maxVelocity(&StepDir[i].ramp, STEPDIR_DEFAULT_VELOCITY);
   1fc58:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1fc5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1fc60:	f000 fb01 	bl	20266 <tmc_ramp_linear_set_maxVelocity>
		tmc_ramp_linear_set_acceleration(&StepDir[i].ramp, STEPDIR_DEFAULT_ACCELERATION);
   1fc64:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1fc68:	4912      	ldr	r1, [pc, #72]	; (1fcb4 <StepDir_init+0xe0>)
   1fc6a:	f000 fb06 	bl	2027a <tmc_ramp_linear_set_acceleration>
		NVIC_InitStructure.NVIC_IRQChannelSubPriority         = 1;
		NVIC_InitStructure.NVIC_IRQChannelCmd                 = ENABLE;
		NVIC_Init(&NVIC_InitStructure);
	#elif defined(Landungsbruecke)
		// enable clock for FTM1
		SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;
   1fc6e:	f241 023c 	movw	r2, #4156	; 0x103c
   1fc72:	4911      	ldr	r1, [pc, #68]	; (1fcb8 <StepDir_init+0xe4>)
		// Timer frequency = Bus clk frequency / (MOD - CNTIN + 1)
		//     => MOD = (f_bus / f_timer) + CNTIN - 1
		// The datasheet documents the FTM using the system/core clock, but it's
		// actually using the bus clock
		FTM1_CNTIN = 0;
		FTM1_MOD   = (48000000 / precision) - 1;
   1fc74:	4811      	ldr	r0, [pc, #68]	; (1fcbc <StepDir_init+0xe8>)
		SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;
   1fc76:	588b      	ldr	r3, [r1, r2]
		FTM1_MOD   = (48000000 / precision) - 1;
   1fc78:	fbb0 f6f6 	udiv	r6, r0, r6
		SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;
   1fc7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1fc80:	508b      	str	r3, [r1, r2]
		FTM1_MODE |= FTM_MODE_WPDIS_MASK; // disable write protection, FTM specific register are available
   1fc82:	4b0f      	ldr	r3, [pc, #60]	; (1fcc0 <StepDir_init+0xec>)
   1fc84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1fc86:	f042 0204 	orr.w	r2, r2, #4
   1fc8a:	655a      	str	r2, [r3, #84]	; 0x54
		FTM1_MODE |= FTM_MODE_FTMEN_MASK | FTM_MODE_FAULTM_MASK; //enable interrupt and select all faults
   1fc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
		FTM1_MOD   = (48000000 / precision) - 1;
   1fc8e:	3e01      	subs	r6, #1
		FTM1_MODE |= FTM_MODE_FTMEN_MASK | FTM_MODE_FAULTM_MASK; //enable interrupt and select all faults
   1fc90:	f042 0261 	orr.w	r2, r2, #97	; 0x61
   1fc94:	655a      	str	r2, [r3, #84]	; 0x54
		FTM1_CNTIN = 0;
   1fc96:	64dd      	str	r5, [r3, #76]	; 0x4c
		FTM1_MOD   = (48000000 / precision) - 1;
   1fc98:	609e      	str	r6, [r3, #8]

		// Select Bus clock as clock source, set prescaler divisor to 2^0 = 1,
		// enable timer overflow interrupt
		FTM1_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(0) | FTM_SC_TOIE_MASK;
   1fc9a:	681a      	ldr	r2, [r3, #0]
   1fc9c:	f042 0248 	orr.w	r2, r2, #72	; 0x48

		// set FTM1 interrupt handler
		enable_irq(INT_FTM1-16);
	#endif
}
   1fca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		FTM1_SC |= FTM_SC_CLKS(1) | FTM_SC_PS(0) | FTM_SC_TOIE_MASK;
   1fca4:	601a      	str	r2, [r3, #0]
		enable_irq(INT_FTM1-16);
   1fca6:	203f      	movs	r0, #63	; 0x3f
   1fca8:	f005 ba28 	b.w	250fc <enable_irq>
   1fcac:	1fff6624 	.word	0x1fff6624
   1fcb0:	1fff5760 	.word	0x1fff5760
   1fcb4:	000186a0 	.word	0x000186a0
   1fcb8:	40047000 	.word	0x40047000
   1fcbc:	02dc6c00 	.word	0x02dc6c00
   1fcc0:	40039000 	.word	0x40039000

0001fcc4 <StepDir_deInit>:

void StepDir_deInit()
{
   1fcc4:	b538      	push	{r3, r4, r5, lr}
	#if defined(Startrampe)
		TIM_DeInit(TIM2);
	#elif defined(Landungsbruecke)
		// Only disable the module if it has been enabled before
		if (SIM_SCGC6 & SIM_SCGC6_FTM1_MASK)
   1fcc6:	4d0e      	ldr	r5, [pc, #56]	; (1fd00 <StepDir_deInit+0x3c>)
   1fcc8:	f241 043c 	movw	r4, #4156	; 0x103c
   1fccc:	592b      	ldr	r3, [r5, r4]
   1fcce:	019b      	lsls	r3, r3, #6
   1fcd0:	d515      	bpl.n	1fcfe <StepDir_deInit+0x3a>
		{
			// Disable interrupt in FTM module
			FTM1_SC &= ~FTM_SC_TOIE_MASK;
   1fcd2:	4b0c      	ldr	r3, [pc, #48]	; (1fd04 <StepDir_deInit+0x40>)
   1fcd4:	681a      	ldr	r2, [r3, #0]
   1fcd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1fcda:	601a      	str	r2, [r3, #0]

			// Disable the FTM module
			FTM1_MODE &= ~FTM_MODE_FTMEN_MASK;
   1fcdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1fcde:	f022 0201 	bic.w	r2, r2, #1
   1fce2:	655a      	str	r2, [r3, #84]	; 0x54

			// Disable the interrupt
			disable_irq(INT_FTM1-16);
   1fce4:	203f      	movs	r0, #63	; 0x3f
   1fce6:	f005 fa57 	bl	25198 <disable_irq>

			// Ensure that the module is disabled BEFORE clock gating gets disabled.
			// Without this the processor can crash under heavy FTM interrupt load.
			asm volatile("DMB");
   1fcea:	f3bf 8f5f 	dmb	sy

			// Disable clock gating for the FTM module
			SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK;
   1fcee:	592b      	ldr	r3, [r5, r4]
   1fcf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1fcf4:	512b      	str	r3, [r5, r4]
			SIM_SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
   1fcf6:	592b      	ldr	r3, [r5, r4]
   1fcf8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1fcfc:	512b      	str	r3, [r5, r4]
		}
	#endif
}
   1fcfe:	bd38      	pop	{r3, r4, r5, pc}
   1fd00:	40047000 	.word	0x40047000
   1fd04:	40039000 	.word	0x40039000

0001fd08 <calculateStepDifference>:
 *   velocity: v
 *   oldSteps: s1
 *   newSteps: s2
 */
int32_t calculateStepDifference(int32_t velocity, uint32_t oldAccel, uint32_t newAccel)
{
   1fd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int64_t tmp = velocity;
	tmp = tmp * 2 + 1;
   1fd0a:	2302      	movs	r3, #2
   1fd0c:	2601      	movs	r6, #1
   1fd0e:	2700      	movs	r7, #0
   1fd10:	fbc3 6700 	smlal	r6, r7, r3, r0
	tmp = (tmp * tmp) / 4;
   1fd14:	fb06 f307 	mul.w	r3, r6, r7
{
   1fd18:	460c      	mov	r4, r1
	tmp = (tmp * tmp) / 4;
   1fd1a:	fba6 0106 	umull	r0, r1, r6, r6
   1fd1e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	tmp = tmp / 2;
   1fd22:	2800      	cmp	r0, #0
   1fd24:	f171 0300 	sbcs.w	r3, r1, #0
   1fd28:	da02      	bge.n	1fd30 <calculateStepDifference+0x28>
   1fd2a:	3007      	adds	r0, #7
   1fd2c:	f141 0100 	adc.w	r1, r1, #0
   1fd30:	08c5      	lsrs	r5, r0, #3
   1fd32:	ea45 7541 	orr.w	r5, r5, r1, lsl #29
   1fd36:	10cf      	asrs	r7, r1, #3
	uint32_t oldSteps = tmp / oldAccel;
	uint32_t newSteps = tmp / newAccel;
   1fd38:	2300      	movs	r3, #0
   1fd3a:	4628      	mov	r0, r5
   1fd3c:	4639      	mov	r1, r7
   1fd3e:	f007 fdd1 	bl	278e4 <__aeabi_ldivmod>
	uint32_t oldSteps = tmp / oldAccel;
   1fd42:	4622      	mov	r2, r4
	uint32_t newSteps = tmp / newAccel;
   1fd44:	4606      	mov	r6, r0
	uint32_t oldSteps = tmp / oldAccel;
   1fd46:	2300      	movs	r3, #0
   1fd48:	4628      	mov	r0, r5
   1fd4a:	4639      	mov	r1, r7
   1fd4c:	f007 fdca 	bl	278e4 <__aeabi_ldivmod>

	return newSteps - oldSteps;
}
   1fd50:	1a30      	subs	r0, r6, r0
   1fd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fd54 <StepDir_setAcceleration>:
	if (channel >= STEP_DIR_CHANNELS)
   1fd54:	2801      	cmp	r0, #1
{
   1fd56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fd5a:	4605      	mov	r5, r0
   1fd5c:	4688      	mov	r8, r1
	if (channel >= STEP_DIR_CHANNELS)
   1fd5e:	d835      	bhi.n	1fdcc <StepDir_setAcceleration+0x78>
	if (tmc_ramp_linear_get_mode(&StepDir[channel].ramp) == TMC_RAMP_LINEAR_MODE_VELOCITY)
   1fd60:	4c22      	ldr	r4, [pc, #136]	; (1fdec <StepDir_setAcceleration+0x98>)
   1fd62:	2668      	movs	r6, #104	; 0x68
   1fd64:	2730      	movs	r7, #48	; 0x30
   1fd66:	fb16 7700 	smlabb	r7, r6, r0, r7
   1fd6a:	4427      	add	r7, r4
   1fd6c:	4638      	mov	r0, r7
   1fd6e:	f000 faa0 	bl	202b2 <tmc_ramp_linear_get_mode>
   1fd72:	b928      	cbnz	r0, 1fd80 <StepDir_setAcceleration+0x2c>
		tmc_ramp_linear_set_acceleration(&StepDir[channel].ramp, acceleration);
   1fd74:	4641      	mov	r1, r8
   1fd76:	4638      	mov	r0, r7
}
   1fd78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		tmc_ramp_linear_set_acceleration(&StepDir[channel].ramp, acceleration);
   1fd7c:	f000 ba7d 	b.w	2027a <tmc_ramp_linear_set_acceleration>
	if (acceleration == 0)
   1fd80:	f1b8 0f00 	cmp.w	r8, #0
   1fd84:	d022      	beq.n	1fdcc <StepDir_setAcceleration+0x78>
	tmc_ramp_linear_set_acceleration(&StepDir[channel].ramp, acceleration);
   1fd86:	4641      	mov	r1, r8
   1fd88:	4638      	mov	r0, r7
   1fd8a:	f000 fa76 	bl	2027a <tmc_ramp_linear_set_acceleration>
	if (StepDir[channel].haltingCondition == 0)
   1fd8e:	fb06 4605 	mla	r6, r6, r5, r4
	uint32_t oldAcceleration = tmc_ramp_linear_get_acceleration(&StepDir[channel].ramp);
   1fd92:	4638      	mov	r0, r7
   1fd94:	f000 fa88 	bl	202a8 <tmc_ramp_linear_get_acceleration>
	if (StepDir[channel].haltingCondition == 0)
   1fd98:	7873      	ldrb	r3, [r6, #1]
	uint32_t oldAcceleration = tmc_ramp_linear_get_acceleration(&StepDir[channel].ramp);
   1fd9a:	4681      	mov	r9, r0
	if (StepDir[channel].haltingCondition == 0)
   1fd9c:	b9c3      	cbnz	r3, 1fdd0 <StepDir_setAcceleration+0x7c>
		StepDir[channel].syncFlag = SYNC_SNAPSHOT_REQUESTED;
   1fd9e:	2301      	movs	r3, #1
		StepDir[channel].newAcceleration = acceleration;
   1fda0:	f8c6 8020 	str.w	r8, [r6, #32]
		StepDir[channel].syncFlag = SYNC_SNAPSHOT_REQUESTED;
   1fda4:	7533      	strb	r3, [r6, #20]
		while (ACCESS_ONCE(StepDir[channel].syncFlag) != SYNC_SNAPSHOT_SAVED); // todo CHECK 2: Timeout to prevent deadlock? (LH) #1
   1fda6:	7d33      	ldrb	r3, [r6, #20]
   1fda8:	2b02      	cmp	r3, #2
   1fdaa:	d1fc      	bne.n	1fda6 <StepDir_setAcceleration+0x52>
	int32_t stepDifference = calculateStepDifference(StepDir[channel].oldVelocity, oldAcceleration, acceleration);
   1fdac:	2068      	movs	r0, #104	; 0x68
   1fdae:	fb00 4405 	mla	r4, r0, r5, r4
   1fdb2:	4642      	mov	r2, r8
   1fdb4:	69a0      	ldr	r0, [r4, #24]
   1fdb6:	4649      	mov	r1, r9
   1fdb8:	f7ff ffa6 	bl	1fd08 <calculateStepDifference>
	if (StepDir[channel].haltingCondition == 0)
   1fdbc:	7863      	ldrb	r3, [r4, #1]
   1fdbe:	b983      	cbnz	r3, 1fde2 <StepDir_setAcceleration+0x8e>
		StepDir[channel].syncFlag = SYNC_UPDATE_DATA;
   1fdc0:	2303      	movs	r3, #3
		StepDir[channel].stepDifference = stepDifference;
   1fdc2:	6260      	str	r0, [r4, #36]	; 0x24
		StepDir[channel].syncFlag = SYNC_UPDATE_DATA;
   1fdc4:	7523      	strb	r3, [r4, #20]
		while (ACCESS_ONCE(StepDir[channel].syncFlag) != SYNC_IDLE); // todo CHECK 2: Timeout to prevent deadlock? (LH) #2
   1fdc6:	7d23      	ldrb	r3, [r4, #20]
   1fdc8:	2b00      	cmp	r3, #0
   1fdca:	d1fc      	bne.n	1fdc6 <StepDir_setAcceleration+0x72>
}
   1fdcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		tmc_ramp_linear_set_acceleration(&StepDir[channel].ramp, acceleration);
   1fdd0:	4641      	mov	r1, r8
   1fdd2:	4638      	mov	r0, r7
   1fdd4:	f000 fa51 	bl	2027a <tmc_ramp_linear_set_acceleration>
		StepDir[channel].oldVelocity = tmc_ramp_linear_get_rampVelocity(&StepDir[channel].ramp);
   1fdd8:	4638      	mov	r0, r7
   1fdda:	f000 fa63 	bl	202a4 <tmc_ramp_linear_get_rampVelocity>
   1fdde:	61b0      	str	r0, [r6, #24]
   1fde0:	e7e4      	b.n	1fdac <StepDir_setAcceleration+0x58>
		StepDir[channel].ramp.accelerationSteps += stepDifference;
   1fde2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fde4:	4418      	add	r0, r3
   1fde6:	65a0      	str	r0, [r4, #88]	; 0x58
   1fde8:	e7f0      	b.n	1fdcc <StepDir_setAcceleration+0x78>
   1fdea:	bf00      	nop
   1fdec:	1fff6624 	.word	0x1fff6624

0001fdf0 <tmc_limitInt>:
 *      Author: ed
 */
#include "Functions.h"

int32_t tmc_limitInt(int32_t value, int32_t min, int32_t max)
{
   1fdf0:	4603      	mov	r3, r0
	if (value > max)
   1fdf2:	4293      	cmp	r3, r2
{
   1fdf4:	4610      	mov	r0, r2
	if (value > max)
   1fdf6:	dc03      	bgt.n	1fe00 <tmc_limitInt+0x10>
		return max;
	else if (value < min)
   1fdf8:	428b      	cmp	r3, r1
   1fdfa:	bfb8      	it	lt
   1fdfc:	460b      	movlt	r3, r1
   1fdfe:	4618      	mov	r0, r3
		return min;
	else
		return value;
}
   1fe00:	4770      	bx	lr

0001fe02 <tmc_limitS64>:

int64_t tmc_limitS64(int64_t value, int64_t min, int64_t max)
{
   1fe02:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe04:	4606      	mov	r6, r0
   1fe06:	460f      	mov	r7, r1
   1fe08:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
	if (value > max)
   1fe0c:	42b0      	cmp	r0, r6
{
   1fe0e:	461d      	mov	r5, r3
	if (value > max)
   1fe10:	eb71 0307 	sbcs.w	r3, r1, r7
   1fe14:	db07      	blt.n	1fe26 <tmc_limitS64+0x24>
		return max;
	else if (value < min)
   1fe16:	4296      	cmp	r6, r2
   1fe18:	eb77 0305 	sbcs.w	r3, r7, r5
   1fe1c:	4630      	mov	r0, r6
   1fe1e:	4639      	mov	r1, r7
   1fe20:	bfbc      	itt	lt
   1fe22:	4610      	movlt	r0, r2
   1fe24:	4629      	movlt	r1, r5
		return min;
	else
		return value;
}
   1fe26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe28 <tmc_sqrti>:
int32_t tmc_sqrti(int32_t x)
{
	int32_t xn;

	// Negative parameter?
	if (x < 0)
   1fe28:	1e03      	subs	r3, r0, #0
   1fe2a:	db65      	blt.n	1fef8 <tmc_sqrti+0xd0>
		return -1;

	if (x < 0x0100)
   1fe2c:	2bff      	cmp	r3, #255	; 0xff
   1fe2e:	4a34      	ldr	r2, [pc, #208]	; (1ff00 <tmc_sqrti+0xd8>)
   1fe30:	dc02      	bgt.n	1fe38 <tmc_sqrti+0x10>
		return (int) sqrttable[x] >> 4;
   1fe32:	5cd0      	ldrb	r0, [r2, r3]
   1fe34:	0900      	lsrs	r0, r0, #4
   1fe36:	4770      	bx	lr

	if (x >= 0x00010000)
   1fe38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1fe3c:	db43      	blt.n	1fec6 <tmc_sqrti+0x9e>
	{
		if (x >= 0x01000000)
   1fe3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1fe42:	db27      	blt.n	1fe94 <tmc_sqrti+0x6c>
		{
			if (x >= 0x10000000)
   1fe44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1fe48:	db19      	blt.n	1fe7e <tmc_sqrti+0x56>
			{
				if (x >= 0x40000000)
   1fe4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
				{
					// 0x40000000 <= x < 0x7FFFFFFF
					xn = (int) sqrttable[x >> 24] << 8;
   1fe4e:	bfab      	itete	ge
   1fe50:	1619      	asrge	r1, r3, #24
				}
				else
				{
					// 0x10000000 <= x < 0x40000000
					xn = (int) sqrttable[x >> 22] << 7;
   1fe52:	1599      	asrlt	r1, r3, #22
					xn = (int) sqrttable[x >> 24] << 8;
   1fe54:	5c52      	ldrbge	r2, [r2, r1]
					xn = (int) sqrttable[x >> 22] << 7;
   1fe56:	5c52      	ldrblt	r2, [r2, r1]
					xn = (int) sqrttable[x >> 24] << 8;
   1fe58:	bfac      	ite	ge
   1fe5a:	0212      	lslge	r2, r2, #8
					xn = (int) sqrttable[x >> 22] << 7;
   1fe5c:	01d2      	lsllt	r2, r2, #7
					xn = (int) sqrttable[x >> 18] << 5;
				}
			}

			// Two steps of the babylonian method
			xn = (xn + 1 + (x / xn)) >> 1;
   1fe5e:	1c50      	adds	r0, r2, #1
   1fe60:	fb93 f2f2 	sdiv	r2, r3, r2
   1fe64:	4402      	add	r2, r0
   1fe66:	1052      	asrs	r2, r2, #1
					xn = (int) sqrttable[x >> 10] << 1;
				}
			}

			// One step of the babylonian method
			xn = (xn + 1 + (x / xn)) >> 1;
   1fe68:	1c50      	adds	r0, r2, #1
   1fe6a:	fb93 f2f2 	sdiv	r2, r3, r2
   1fe6e:	4410      	add	r0, r2
   1fe70:	1040      	asrs	r0, r0, #1
			}
		}
	}

	// Make sure that our result is floored
	if ((xn * xn) > x)
   1fe72:	fb00 f200 	mul.w	r2, r0, r0
   1fe76:	429a      	cmp	r2, r3
   1fe78:	dd40      	ble.n	1fefc <tmc_sqrti+0xd4>
		xn--;
   1fe7a:	3801      	subs	r0, #1
   1fe7c:	4770      	bx	lr
				if (x >= 0x04000000)
   1fe7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
					xn = (int) sqrttable[x >> 20] << 6;
   1fe82:	bfab      	itete	ge
   1fe84:	1519      	asrge	r1, r3, #20
					xn = (int) sqrttable[x >> 18] << 5;
   1fe86:	1499      	asrlt	r1, r3, #18
					xn = (int) sqrttable[x >> 20] << 6;
   1fe88:	5c52      	ldrbge	r2, [r2, r1]
					xn = (int) sqrttable[x >> 18] << 5;
   1fe8a:	5c52      	ldrblt	r2, [r2, r1]
					xn = (int) sqrttable[x >> 20] << 6;
   1fe8c:	bfac      	ite	ge
   1fe8e:	0192      	lslge	r2, r2, #6
					xn = (int) sqrttable[x >> 18] << 5;
   1fe90:	0152      	lsllt	r2, r2, #5
   1fe92:	e7e4      	b.n	1fe5e <tmc_sqrti+0x36>
			if (x >= 0x00100000)
   1fe94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fe98:	db0a      	blt.n	1feb0 <tmc_sqrti+0x88>
				if (x >= 0x00400000)
   1fe9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
					xn = (int) sqrttable[x >> 16] << 4;
   1fe9e:	bfab      	itete	ge
   1fea0:	1419      	asrge	r1, r3, #16
					xn = (int) sqrttable[x >> 14] << 3;
   1fea2:	1399      	asrlt	r1, r3, #14
					xn = (int) sqrttable[x >> 16] << 4;
   1fea4:	5c52      	ldrbge	r2, [r2, r1]
					xn = (int) sqrttable[x >> 14] << 3;
   1fea6:	5c52      	ldrblt	r2, [r2, r1]
					xn = (int) sqrttable[x >> 16] << 4;
   1fea8:	bfac      	ite	ge
   1feaa:	0112      	lslge	r2, r2, #4
					xn = (int) sqrttable[x >> 14] << 3;
   1feac:	00d2      	lsllt	r2, r2, #3
   1feae:	e7db      	b.n	1fe68 <tmc_sqrti+0x40>
				if (x >= 0x00040000)
   1feb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
					xn = (int) sqrttable[x >> 12] << 2;
   1feb4:	bfab      	itete	ge
   1feb6:	1319      	asrge	r1, r3, #12
					xn = (int) sqrttable[x >> 10] << 1;
   1feb8:	1299      	asrlt	r1, r3, #10
					xn = (int) sqrttable[x >> 12] << 2;
   1feba:	5c52      	ldrbge	r2, [r2, r1]
					xn = (int) sqrttable[x >> 10] << 1;
   1febc:	5c52      	ldrblt	r2, [r2, r1]
					xn = (int) sqrttable[x >> 12] << 2;
   1febe:	bfac      	ite	ge
   1fec0:	0092      	lslge	r2, r2, #2
					xn = (int) sqrttable[x >> 10] << 1;
   1fec2:	0052      	lsllt	r2, r2, #1
   1fec4:	e7d0      	b.n	1fe68 <tmc_sqrti+0x40>
		if (x >= 0x1000)
   1fec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1feca:	db0a      	blt.n	1fee2 <tmc_sqrti+0xba>
			if (x >= 0x4000)
   1fecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				xn = (int) (sqrttable[x >> 6] >> 1) + 1;
   1fed0:	bfb5      	itete	lt
   1fed2:	1199      	asrlt	r1, r3, #6
				xn = (int) (sqrttable[x >> 8] ) + 1;
   1fed4:	1219      	asrge	r1, r3, #8
				xn = (int) (sqrttable[x >> 6] >> 1) + 1;
   1fed6:	5c50      	ldrblt	r0, [r2, r1]
				xn = (int) (sqrttable[x >> 8] ) + 1;
   1fed8:	5c50      	ldrbge	r0, [r2, r1]
				xn = (int) (sqrttable[x >> 6] >> 1) + 1;
   1feda:	bfb8      	it	lt
   1fedc:	0840      	lsrlt	r0, r0, #1
				xn = (int) (sqrttable[x >> 2] >> 3) + 1;
   1fede:	3001      	adds	r0, #1
   1fee0:	e7c7      	b.n	1fe72 <tmc_sqrti+0x4a>
			if (x >= 0x0400)
   1fee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
				xn = (int) (sqrttable[x >> 4] >> 2) + 1;
   1fee6:	bfab      	itete	ge
   1fee8:	1119      	asrge	r1, r3, #4
				xn = (int) (sqrttable[x >> 2] >> 3) + 1;
   1feea:	1099      	asrlt	r1, r3, #2
				xn = (int) (sqrttable[x >> 4] >> 2) + 1;
   1feec:	5c50      	ldrbge	r0, [r2, r1]
				xn = (int) (sqrttable[x >> 2] >> 3) + 1;
   1feee:	5c50      	ldrblt	r0, [r2, r1]
				xn = (int) (sqrttable[x >> 4] >> 2) + 1;
   1fef0:	bfac      	ite	ge
   1fef2:	0880      	lsrge	r0, r0, #2
				xn = (int) (sqrttable[x >> 2] >> 3) + 1;
   1fef4:	08c0      	lsrlt	r0, r0, #3
   1fef6:	e7f2      	b.n	1fede <tmc_sqrti+0xb6>
		return -1;
   1fef8:	f04f 30ff 	mov.w	r0, #4294967295

	return xn;
}
   1fefc:	4770      	bx	lr
   1fefe:	bf00      	nop
   1ff00:	00029e3c 	.word	0x00029e3c

0001ff04 <tmc_filterPT1>:

int32_t tmc_filterPT1(int64_t *akku, int32_t newValue, int32_t lastValue, uint8_t actualFilter, uint8_t maxFilter)
{
   1ff04:	b530      	push	{r4, r5, lr}
   1ff06:	f89d 400c 	ldrb.w	r4, [sp, #12]
	*akku += (newValue-lastValue) << (maxFilter-actualFilter);
   1ff0a:	1a89      	subs	r1, r1, r2
   1ff0c:	1ae3      	subs	r3, r4, r3
   1ff0e:	4099      	lsls	r1, r3
   1ff10:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ff14:	1852      	adds	r2, r2, r1
   1ff16:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
	return *akku >> maxFilter;
   1ff1a:	f1c4 0520 	rsb	r5, r4, #32
   1ff1e:	f1b4 0120 	subs.w	r1, r4, #32
	*akku += (newValue-lastValue) << (maxFilter-actualFilter);
   1ff22:	e9c0 2300 	strd	r2, r3, [r0]
	return *akku >> maxFilter;
   1ff26:	fa03 f505 	lsl.w	r5, r3, r5
   1ff2a:	fa22 f004 	lsr.w	r0, r2, r4
   1ff2e:	ea40 0005 	orr.w	r0, r0, r5
   1ff32:	bf5c      	itt	pl
   1ff34:	fa43 f101 	asrpl.w	r1, r3, r1
   1ff38:	4308      	orrpl	r0, r1
}
   1ff3a:	bd30      	pop	{r4, r5, pc}

0001ff3c <flipBitsInBytes>:
 * [b24 b25 b26 b27 b28 b29 b30 b31 .. b0 b1 b2 b3 b4 b5 b6 b7]
 */
static uint32_t flipBitsInBytes(uint32_t value)
{
	// swap odd and even bits
	value = ((value >> 1) & 0x55555555) | ((value & 0x55555555) << 1);
   1ff3c:	0842      	lsrs	r2, r0, #1
   1ff3e:	0040      	lsls	r0, r0, #1
   1ff40:	f000 30aa 	and.w	r0, r0, #2863311530	; 0xaaaaaaaa
   1ff44:	f002 3255 	and.w	r2, r2, #1431655765	; 0x55555555
   1ff48:	4302      	orrs	r2, r0
	// swap consecutive pairs
	value = ((value >> 2) & 0x33333333) | ((value & 0x33333333) << 2);
   1ff4a:	0893      	lsrs	r3, r2, #2
   1ff4c:	0092      	lsls	r2, r2, #2
   1ff4e:	f002 32cc 	and.w	r2, r2, #3435973836	; 0xcccccccc
   1ff52:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1ff56:	4313      	orrs	r3, r2
	// swap nibbles ...
	value = ((value >> 4) & 0x0F0F0F0F) | ((value & 0x0F0F0F0F) << 4);
   1ff58:	0918      	lsrs	r0, r3, #4
   1ff5a:	011b      	lsls	r3, r3, #4
   1ff5c:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
   1ff60:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f

	return value;
}
   1ff64:	4318      	orrs	r0, r3
   1ff66:	4770      	bx	lr

0001ff68 <tmc_fillCRC8Table>:
	if(index >= CRC_TABLE_COUNT)
   1ff68:	2a01      	cmp	r2, #1
{
   1ff6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(index >= CRC_TABLE_COUNT)
   1ff6e:	d84d      	bhi.n	2000c <tmc_fillCRC8Table+0xa4>
	CRCTables[index].polynomial   = polynomial;
   1ff70:	4c27      	ldr	r4, [pc, #156]	; (20010 <tmc_fillCRC8Table+0xa8>)
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
   1ff72:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20018 <tmc_fillCRC8Table+0xb0>
   1ff76:	4e27      	ldr	r6, [pc, #156]	; (20014 <tmc_fillCRC8Table+0xac>)
	CRCTables[index].polynomial   = polynomial;
   1ff78:	f44f 7381 	mov.w	r3, #258	; 0x102
   1ff7c:	435a      	muls	r2, r3
   1ff7e:	18a3      	adds	r3, r4, r2
	uint32_t poly = (uint32_t) polynomial | 0x0100;
   1ff80:	f440 7580 	orr.w	r5, r0, #256	; 0x100
   1ff84:	3204      	adds	r2, #4
	CRCTables[index].polynomial   = polynomial;
   1ff86:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	CRCTables[index].isReflected  = isReflected;
   1ff8a:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
   1ff8e:	022f      	lsls	r7, r5, #8
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
   1ff90:	ea4f 4805 	mov.w	r8, r5, lsl #16
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
   1ff94:	ea4f 6905 	mov.w	r9, r5, lsl #24
   1ff98:	4414      	add	r4, r2
		CRCdata = (isReflected)? flipBitsInBytes(i) : i;
   1ff9a:	4650      	mov	r0, sl
   1ff9c:	b109      	cbz	r1, 1ffa2 <tmc_fillCRC8Table+0x3a>
   1ff9e:	f7ff ffcd 	bl	1ff3c <flipBitsInBytes>
   1ffa2:	2208      	movs	r2, #8
			CRCdata <<= 1;
   1ffa4:	ea4f 0c40 	mov.w	ip, r0, lsl #1
			CRCdata ^= (CRCdata & 0x00000100)? (poly      ) : 0;
   1ffa8:	f41c 7380 	ands.w	r3, ip, #256	; 0x100
   1ffac:	bf18      	it	ne
   1ffae:	462b      	movne	r3, r5
   1ffb0:	ea83 030c 	eor.w	r3, r3, ip
			CRCdata ^= (CRCdata & 0x00010000)? (poly << 8 ) : 0;
   1ffb4:	f41c 3c80 	ands.w	ip, ip, #65536	; 0x10000
   1ffb8:	bf18      	it	ne
   1ffba:	46bc      	movne	ip, r7
   1ffbc:	ea8c 0c03 	eor.w	ip, ip, r3
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
   1ffc0:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   1ffc4:	bf18      	it	ne
   1ffc6:	4643      	movne	r3, r8
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
   1ffc8:	0fc0      	lsrs	r0, r0, #31
   1ffca:	bf18      	it	ne
   1ffcc:	4648      	movne	r0, r9
			CRCdata ^= (CRCdata & 0x01000000)? (poly << 16) : 0;
   1ffce:	ea83 030c 	eor.w	r3, r3, ip
		for(j = 0; j < 8; j++)
   1ffd2:	3a01      	subs	r2, #1
			CRCdata ^= (isMSBSet)?             (poly << 24) : 0;
   1ffd4:	ea80 0003 	eor.w	r0, r0, r3
		for(j = 0; j < 8; j++)
   1ffd8:	d1e4      	bne.n	1ffa4 <tmc_fillCRC8Table+0x3c>
		CRCdata = (isReflected)? flipBitsInBytes(CRCdata) : CRCdata;
   1ffda:	b109      	cbz	r1, 1ffe0 <tmc_fillCRC8Table+0x78>
   1ffdc:	f7ff ffae 	bl	1ff3c <flipBitsInBytes>
		CRCdata >>= 8;
   1ffe0:	0a03      	lsrs	r3, r0, #8
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
   1ffe2:	f10a 3a04 	add.w	sl, sl, #67372036	; 0x4040404
		*table++ = (uint8_t) CRCdata;
   1ffe6:	f804 0c04 	strb.w	r0, [r4, #-4]
		*table++ = (uint8_t) CRCdata;
   1ffea:	f804 3c03 	strb.w	r3, [r4, #-3]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
   1ffee:	45b2      	cmp	sl, r6
		CRCdata >>= 8;
   1fff0:	ea4f 4310 	mov.w	r3, r0, lsr #16
		CRCdata >>= 8;
   1fff4:	ea4f 6010 	mov.w	r0, r0, lsr #24
		*table++ = (uint8_t) CRCdata;
   1fff8:	f804 3c02 	strb.w	r3, [r4, #-2]
		*table++ = (uint8_t) CRCdata;
   1fffc:	f804 0c01 	strb.w	r0, [r4, #-1]
	for(i = 0x03020100; i != 0x04030200; i+=0x04040404)
   20000:	f104 0404 	add.w	r4, r4, #4
   20004:	d1c9      	bne.n	1ff9a <tmc_fillCRC8Table+0x32>
	return 1;
   20006:	2001      	movs	r0, #1
}
   20008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   2000c:	2000      	movs	r0, #0
   2000e:	e7fb      	b.n	20008 <tmc_fillCRC8Table+0xa0>
   20010:	1fff578c 	.word	0x1fff578c
   20014:	04030200 	.word	0x04030200
   20018:	03020100 	.word	0x03020100

0002001c <tmc_CRC8>:
	if(index >= CRC_TABLE_COUNT)
   2001c:	2a01      	cmp	r2, #1
{
   2001e:	b570      	push	{r4, r5, r6, lr}
   20020:	4604      	mov	r4, r0
	if(index >= CRC_TABLE_COUNT)
   20022:	d827      	bhi.n	20074 <tmc_CRC8+0x58>
	table = &CRCTables[index].table[0];
   20024:	f44f 7581 	mov.w	r5, #258	; 0x102
   20028:	4e13      	ldr	r6, [pc, #76]	; (20078 <tmc_CRC8+0x5c>)
   2002a:	4401      	add	r1, r0
   2002c:	4355      	muls	r5, r2
	uint8_t result = 0;
   2002e:	2000      	movs	r0, #0
	while(bytes--)
   20030:	428c      	cmp	r4, r1
   20032:	d119      	bne.n	20068 <tmc_CRC8+0x4c>
	return (CRCTables[index].isReflected)? flipByte(result) : result;
   20034:	f44f 7381 	mov.w	r3, #258	; 0x102
   20038:	fb03 6202 	mla	r2, r3, r2, r6
   2003c:	f892 3101 	ldrb.w	r3, [r2, #257]	; 0x101
   20040:	b18b      	cbz	r3, 20066 <tmc_CRC8+0x4a>
	value = ((value >> 1) & 0x55) | ((value & 0x55) << 1);
   20042:	0843      	lsrs	r3, r0, #1
   20044:	f003 0255 	and.w	r2, r3, #85	; 0x55
   20048:	0043      	lsls	r3, r0, #1
   2004a:	f003 03aa 	and.w	r3, r3, #170	; 0xaa
   2004e:	4313      	orrs	r3, r2
	value = ((value >> 2) & 0x33) | ((value & 0x33) << 2);
   20050:	0898      	lsrs	r0, r3, #2
   20052:	f000 0233 	and.w	r2, r0, #51	; 0x33
   20056:	0098      	lsls	r0, r3, #2
   20058:	f000 00cc 	and.w	r0, r0, #204	; 0xcc
   2005c:	4310      	orrs	r0, r2
	value = ((value >> 4) & 0x0F) | ((value & 0x0F) << 4);
   2005e:	0103      	lsls	r3, r0, #4
   20060:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
   20064:	b2c0      	uxtb	r0, r0
}
   20066:	bd70      	pop	{r4, r5, r6, pc}
		result = table[result ^ *data++];
   20068:	f814 3b01 	ldrb.w	r3, [r4], #1
   2006c:	4043      	eors	r3, r0
   2006e:	442b      	add	r3, r5
   20070:	5cf0      	ldrb	r0, [r6, r3]
   20072:	e7dd      	b.n	20030 <tmc_CRC8+0x14>
		return 0;
   20074:	2000      	movs	r0, #0
   20076:	e7f6      	b.n	20066 <tmc_CRC8+0x4a>
   20078:	1fff578c 	.word	0x1fff578c

0002007c <tmc_tableGetPolynomial>:
	if(index >= CRC_TABLE_COUNT)
   2007c:	2801      	cmp	r0, #1
	return CRCTables[index].polynomial;
   2007e:	bf9f      	itttt	ls
   20080:	4b04      	ldrls	r3, [pc, #16]	; (20094 <tmc_tableGetPolynomial+0x18>)
   20082:	f44f 7281 	movls.w	r2, #258	; 0x102
   20086:	fb02 3000 	mlals	r0, r2, r0, r3
   2008a:	f890 0100 	ldrbls.w	r0, [r0, #256]	; 0x100
		return 0;
   2008e:	bf88      	it	hi
   20090:	2000      	movhi	r0, #0
}
   20092:	4770      	bx	lr
   20094:	1fff578c 	.word	0x1fff578c

00020098 <tmc_tableIsReflected>:
	if(index >= CRC_TABLE_COUNT)
   20098:	2801      	cmp	r0, #1
	return CRCTables[index].isReflected;
   2009a:	bf9f      	itttt	ls
   2009c:	4b04      	ldrls	r3, [pc, #16]	; (200b0 <tmc_tableIsReflected+0x18>)
   2009e:	f44f 7281 	movls.w	r2, #258	; 0x102
   200a2:	fb02 3000 	mlals	r0, r2, r0, r3
   200a6:	f890 0101 	ldrbls.w	r0, [r0, #257]	; 0x101
		return false;
   200aa:	bf88      	it	hi
   200ac:	2000      	movhi	r0, #0
}
   200ae:	4770      	bx	lr
   200b0:	1fff578c 	.word	0x1fff578c

000200b4 <tmc_linearRamp_init>:
 */
#include "LinearRamp.h"

void tmc_linearRamp_init(TMC_LinearRamp *linearRamp)
{
	linearRamp->maxVelocity     = 0;
   200b4:	2300      	movs	r3, #0
	linearRamp->targetPosition  = 0;
	linearRamp->targetVelocity  = 0;
	linearRamp->rampVelocity    = 0;
	linearRamp->acceleration    = 0;
	linearRamp->encoderSteps	= u16_MAX;
   200b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	linearRamp->targetPosition  = 0;
   200ba:	e9c0 3300 	strd	r3, r3, [r0]
	linearRamp->rampVelocity    = 0;
   200be:	e9c0 3303 	strd	r3, r3, [r0, #12]
	linearRamp->lastdVRest      = 0;
	linearRamp->lastdXRest      = 0;
   200c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	linearRamp->acceleration    = 0;
   200c6:	6143      	str	r3, [r0, #20]
	linearRamp->encoderSteps	= u16_MAX;
   200c8:	8302      	strh	r2, [r0, #24]
	linearRamp->rampEnabled     = false;
   200ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
   200ce:	4770      	bx	lr

000200d0 <tmc_linearRamp_computeRampVelocity>:

void tmc_linearRamp_computeRampVelocity(TMC_LinearRamp *linearRamp)
{
   200d0:	b570      	push	{r4, r5, r6, lr}
	if (linearRamp->rampEnabled)
   200d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   200d6:	68c5      	ldr	r5, [r0, #12]
{
   200d8:	4604      	mov	r4, r0
	if (linearRamp->rampEnabled)
   200da:	b333      	cbz	r3, 2012a <tmc_linearRamp_computeRampVelocity+0x5a>
		// (scaling pre-factor of 1000 used for 1ms velocity ramp handling)

		int dV = linearRamp->acceleration;

		// to ensure that small velocity changes at high set acceleration are also possible
		int maxDTV = abs(linearRamp->targetVelocity - linearRamp->rampVelocity);
   200dc:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
   200e0:	1a68      	subs	r0, r5, r1
   200e2:	2800      	cmp	r0, #0
   200e4:	bfb8      	it	lt
   200e6:	4240      	neglt	r0, r0
		if (maxDTV < (dV/1000))
   200e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   200ec:	fb93 f6f2 	sdiv	r6, r3, r2
   200f0:	4286      	cmp	r6, r0
			dV = maxDTV*1000;
   200f2:	bfc8      	it	gt
   200f4:	fb02 f300 	mulgt.w	r3, r2, r0

		dV += linearRamp->lastdVRest;
   200f8:	69e0      	ldr	r0, [r4, #28]
   200fa:	4403      	add	r3, r0
		linearRamp->lastdVRest = dV % 1000;

		if (linearRamp->rampVelocity < linearRamp->targetVelocity)
   200fc:	42a9      	cmp	r1, r5
		linearRamp->lastdVRest = dV % 1000;
   200fe:	fb93 f0f2 	sdiv	r0, r3, r2
   20102:	fb02 3210 	mls	r2, r2, r0, r3
   20106:	61e2      	str	r2, [r4, #28]
		if (linearRamp->rampVelocity < linearRamp->targetVelocity)
   20108:	da08      	bge.n	2011c <tmc_linearRamp_computeRampVelocity+0x4c>
		{
			// accelerate motor
			linearRamp->rampVelocity += dV/1000;	// divide with pre-factor
   2010a:	4401      	add	r1, r0
   2010c:	6121      	str	r1, [r4, #16]
		// use target velocity directly
		linearRamp->rampVelocity = linearRamp->targetVelocity;
	}

	// limit ramp velocity
	linearRamp->rampVelocity = tmc_limitInt(linearRamp->rampVelocity, -linearRamp->maxVelocity, linearRamp->maxVelocity);
   2010e:	6822      	ldr	r2, [r4, #0]
   20110:	6920      	ldr	r0, [r4, #16]
   20112:	4251      	negs	r1, r2
   20114:	f7ff fe6c 	bl	1fdf0 <tmc_limitInt>
   20118:	6120      	str	r0, [r4, #16]
}
   2011a:	bd70      	pop	{r4, r5, r6, pc}
		else if (linearRamp->rampVelocity > linearRamp->targetVelocity)
   2011c:	ddf7      	ble.n	2010e <tmc_linearRamp_computeRampVelocity+0x3e>
			linearRamp->rampVelocity -= dV/1000;	// divide with pre-factor
   2011e:	4a04      	ldr	r2, [pc, #16]	; (20130 <tmc_linearRamp_computeRampVelocity+0x60>)
   20120:	fb93 f3f2 	sdiv	r3, r3, r2
   20124:	440b      	add	r3, r1
   20126:	6123      	str	r3, [r4, #16]
   20128:	e7f1      	b.n	2010e <tmc_linearRamp_computeRampVelocity+0x3e>
		linearRamp->rampVelocity = linearRamp->targetVelocity;
   2012a:	6105      	str	r5, [r0, #16]
   2012c:	e7ef      	b.n	2010e <tmc_linearRamp_computeRampVelocity+0x3e>
   2012e:	bf00      	nop
   20130:	fffffc18 	.word	0xfffffc18

00020134 <tmc_linearRamp_computeRampPosition>:

void tmc_linearRamp_computeRampPosition(TMC_LinearRamp *linearRamp)
{
   20134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (linearRamp->rampEnabled)
   20136:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2013a:	6845      	ldr	r5, [r0, #4]
{
   2013c:	4604      	mov	r4, r0
	if (linearRamp->rampEnabled)
   2013e:	2b00      	cmp	r3, #0
   20140:	d078      	beq.n	20234 <tmc_linearRamp_computeRampPosition+0x100>
	{
		// update target position according actual set acceleration and max velocity
		// (scaling pre-factor of 1000 used for 1ms position ramp handling)

		// limit position difference for further computations
		int32_t targetPositionsDifference = linearRamp->targetPosition-linearRamp->rampPosition;
   20142:	6880      	ldr	r0, [r0, #8]

		// limit the sqrti value in case of high position differences
		int64_t sqrtiValue = tmc_limitS64(((int64_t)120 * (int64_t)linearRamp->acceleration * (int64_t)(abs(targetPositionsDifference))) / (int64_t)linearRamp->encoderSteps, 0, (int64_t)linearRamp->maxVelocity*(int64_t)linearRamp->maxVelocity);
   20144:	6963      	ldr	r3, [r4, #20]
   20146:	6826      	ldr	r6, [r4, #0]
		int32_t targetPositionsDifference = linearRamp->targetPosition-linearRamp->rampPosition;
   20148:	1a2d      	subs	r5, r5, r0
		int64_t sqrtiValue = tmc_limitS64(((int64_t)120 * (int64_t)linearRamp->acceleration * (int64_t)(abs(targetPositionsDifference))) / (int64_t)linearRamp->encoderSteps, 0, (int64_t)linearRamp->maxVelocity*(int64_t)linearRamp->maxVelocity);
   2014a:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
   2014e:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
   20152:	fb82 2303 	smull	r2, r3, r2, r3
   20156:	2778      	movs	r7, #120	; 0x78
   20158:	fba2 0107 	umull	r0, r1, r2, r7
   2015c:	fb07 1103 	mla	r1, r7, r3, r1
   20160:	8b22      	ldrh	r2, [r4, #24]
   20162:	2300      	movs	r3, #0
   20164:	fba6 6706 	umull	r6, r7, r6, r6
   20168:	f007 fbbc 	bl	278e4 <__aeabi_ldivmod>
   2016c:	2200      	movs	r2, #0
   2016e:	2300      	movs	r3, #0
   20170:	e9cd 6700 	strd	r6, r7, [sp]
   20174:	f7ff fe45 	bl	1fe02 <tmc_limitS64>

		// compute max allowed ramp velocity to ramp down to target
		int32_t maxRampStop = tmc_sqrti(sqrtiValue);
   20178:	f7ff fe56 	bl	1fe28 <tmc_sqrti>

		// compute max allowed ramp velocity
		int32_t maxRampTargetVelocity = 0;
		if (targetPositionsDifference > 0)
   2017c:	2d00      	cmp	r5, #0
   2017e:	dd4c      	ble.n	2021a <tmc_linearRamp_computeRampPosition+0xe6>
		{
			maxRampTargetVelocity = tmc_limitInt(maxRampStop, 0, (int32_t)linearRamp->maxVelocity);
   20180:	6822      	ldr	r2, [r4, #0]
   20182:	2100      	movs	r1, #0
		}
		else if (targetPositionsDifference < 0)
		{
			maxRampTargetVelocity = tmc_limitInt(-maxRampStop, -(int32_t)linearRamp->maxVelocity, 0);
   20184:	f7ff fe34 	bl	1fdf0 <tmc_limitInt>
   20188:	4605      	mov	r5, r0
		}

		int dV = linearRamp->acceleration;  // pre-factor ~ 1/1000

		// to ensure that small velocity changes at high set acceleration are also possible
		int maxDTV = abs(maxRampTargetVelocity - linearRamp->rampVelocity);
   2018a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   2018e:	1a68      	subs	r0, r5, r1
   20190:	2800      	cmp	r0, #0
   20192:	bfb8      	it	lt
   20194:	4240      	neglt	r0, r0
		if (maxDTV < (dV / 1000))
   20196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2019a:	fb93 f6f2 	sdiv	r6, r3, r2
   2019e:	4286      	cmp	r6, r0
			dV = maxDTV * 1000;
   201a0:	bfc8      	it	gt
   201a2:	fb02 f300 	mulgt.w	r3, r2, r0

		dV += linearRamp->lastdVRest;
   201a6:	69e0      	ldr	r0, [r4, #28]
   201a8:	4403      	add	r3, r0
		linearRamp->lastdVRest = dV % 1000;

		// do velocity ramping
		if (maxRampTargetVelocity > linearRamp->rampVelocity)
   201aa:	42a9      	cmp	r1, r5
		linearRamp->lastdVRest = dV % 1000;
   201ac:	fb93 f0f2 	sdiv	r0, r3, r2
   201b0:	fb02 3210 	mls	r2, r2, r0, r3
   201b4:	61e2      	str	r2, [r4, #28]
		if (maxRampTargetVelocity > linearRamp->rampVelocity)
   201b6:	da36      	bge.n	20226 <tmc_linearRamp_computeRampPosition+0xf2>
		{
			linearRamp->rampVelocity += dV / 1000;
   201b8:	4401      	add	r1, r0
   201ba:	6121      	str	r1, [r4, #16]
		{
			linearRamp->rampVelocity -= dV / 1000;
		}

		// limit positionRampTargetVelocity to maxRampTargetVelocity
		linearRamp->rampVelocity = tmc_limitInt(linearRamp->rampVelocity, -abs(maxRampTargetVelocity), abs(maxRampTargetVelocity));
   201bc:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
   201c0:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
   201c4:	4251      	negs	r1, r2
   201c6:	6920      	ldr	r0, [r4, #16]
   201c8:	f7ff fe12 	bl	1fdf0 <tmc_limitInt>

		// do position ramping using actual ramp velocity to update dX
		int64_t dX = ((int64_t)linearRamp->rampVelocity * (int64_t)linearRamp->encoderSteps) / ((int64_t)60) + linearRamp->lastdXRest;
   201cc:	8b21      	ldrh	r1, [r4, #24]
		linearRamp->rampVelocity = tmc_limitInt(linearRamp->rampVelocity, -abs(maxRampTargetVelocity), abs(maxRampTargetVelocity));
   201ce:	6120      	str	r0, [r4, #16]
		int64_t dX = ((int64_t)linearRamp->rampVelocity * (int64_t)linearRamp->encoderSteps) / ((int64_t)60) + linearRamp->lastdXRest;
   201d0:	223c      	movs	r2, #60	; 0x3c
   201d2:	2300      	movs	r3, #0
   201d4:	fb81 0100 	smull	r0, r1, r1, r0
   201d8:	f007 fb84 	bl	278e4 <__aeabi_ldivmod>
   201dc:	6a23      	ldr	r3, [r4, #32]
   201de:	18c0      	adds	r0, r0, r3
   201e0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31

		// scale actual target position
		int64_t tempActualTargetPosition = (int64_t)linearRamp->rampPosition * 1000;

		// update actual target position
		tempActualTargetPosition += dX;
   201e4:	68a3      	ldr	r3, [r4, #8]
   201e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   201ea:	fbc2 0103 	smlal	r0, r1, r2, r3

		if (tempActualTargetPosition >= 0)
   201ee:	ea80 75e0 	eor.w	r5, r0, r0, asr #31
   201f2:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
   201f6:	2800      	cmp	r0, #0
   201f8:	fbb5 f3f2 	udiv	r3, r5, r2
   201fc:	fb02 5313 	mls	r3, r2, r3, r5
   20200:	f171 0200 	sbcs.w	r2, r1, #0
			linearRamp->lastdXRest = (abs(tempActualTargetPosition) % 1000);
		else if (tempActualTargetPosition < 0)
			linearRamp->lastdXRest = -(abs(tempActualTargetPosition) % 1000);
   20204:	bfb8      	it	lt
   20206:	425b      	neglt	r3, r3
   20208:	6223      	str	r3, [r4, #32]

		// scale actual target position back
		linearRamp->rampPosition = tempActualTargetPosition / 1000;
   2020a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2020e:	2300      	movs	r3, #0
   20210:	f007 fb68 	bl	278e4 <__aeabi_ldivmod>
   20214:	60a0      	str	r0, [r4, #8]
	else
	{
		// use target position directly
		linearRamp->rampPosition = linearRamp->targetPosition;
	}
}
   20216:	b003      	add	sp, #12
   20218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (targetPositionsDifference < 0)
   2021a:	d0b6      	beq.n	2018a <tmc_linearRamp_computeRampPosition+0x56>
			maxRampTargetVelocity = tmc_limitInt(-maxRampStop, -(int32_t)linearRamp->maxVelocity, 0);
   2021c:	6821      	ldr	r1, [r4, #0]
   2021e:	2200      	movs	r2, #0
   20220:	4249      	negs	r1, r1
   20222:	4240      	negs	r0, r0
   20224:	e7ae      	b.n	20184 <tmc_linearRamp_computeRampPosition+0x50>
			linearRamp->rampVelocity -= dV / 1000;
   20226:	bfc1      	itttt	gt
   20228:	4a03      	ldrgt	r2, [pc, #12]	; (20238 <tmc_linearRamp_computeRampPosition+0x104>)
   2022a:	fb93 f3f2 	sdivgt	r3, r3, r2
   2022e:	185b      	addgt	r3, r3, r1
   20230:	6123      	strgt	r3, [r4, #16]
   20232:	e7c3      	b.n	201bc <tmc_linearRamp_computeRampPosition+0x88>
		linearRamp->rampPosition = linearRamp->targetPosition;
   20234:	6085      	str	r5, [r0, #8]
}
   20236:	e7ee      	b.n	20216 <tmc_linearRamp_computeRampPosition+0xe2>
   20238:	fffffc18 	.word	0xfffffc18

0002023c <tmc_ramp_linear_init>:
#include "LinearRamp1.h"
#include "tmc/helpers/Functions.h"

void tmc_ramp_linear_init(TMC_LinearRamp *linearRamp)
{
	linearRamp->maxVelocity         = 0;
   2023c:	2300      	movs	r3, #0
	linearRamp->targetPosition      = 0;
	linearRamp->targetVelocity      = 0;
	linearRamp->rampVelocity        = 0;
	linearRamp->rampPosition        = 0;
	linearRamp->acceleration        = 0;
	linearRamp->rampEnabled         = true;
   2023e:	2201      	movs	r2, #1
	linearRamp->targetPosition      = 0;
   20240:	e9c0 3300 	strd	r3, r3, [r0]
	linearRamp->rampVelocity        = 0;
   20244:	e9c0 3303 	strd	r3, r3, [r0, #12]
	linearRamp->accumulatorVelocity = 0;
	linearRamp->accumulatorPosition = 0;
   20248:	e9c0 3307 	strd	r3, r3, [r0, #28]
	linearRamp->rampPosition        = 0;
   2024c:	6083      	str	r3, [r0, #8]
	linearRamp->acceleration        = 0;
   2024e:	6143      	str	r3, [r0, #20]
	linearRamp->rampEnabled         = true;
   20250:	7602      	strb	r2, [r0, #24]
	linearRamp->rampMode            = TMC_RAMP_LINEAR_MODE_VELOCITY;
   20252:	8483      	strh	r3, [r0, #36]	; 0x24
	linearRamp->state               = TMC_RAMP_LINEAR_STATE_IDLE;
	linearRamp->precision           = TMC_RAMP_LINEAR_DEFAULT_PRECISION;
	linearRamp->homingDistance      = TMC_RAMP_LINEAR_DEFAULT_HOMING_DISTANCE;
   20254:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   20258:	2305      	movs	r3, #5
   2025a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
	linearRamp->stopVelocity        = TMC_RAMP_LINEAR_DEFAULT_STOP_VELOCITY;
   2025e:	6343      	str	r3, [r0, #52]	; 0x34
}
   20260:	4770      	bx	lr

00020262 <tmc_ramp_linear_set_enabled>:

void tmc_ramp_linear_set_enabled(TMC_LinearRamp *linearRamp, bool enabled)
{
	linearRamp->rampEnabled = enabled;
   20262:	7601      	strb	r1, [r0, #24]
}
   20264:	4770      	bx	lr

00020266 <tmc_ramp_linear_set_maxVelocity>:

void tmc_ramp_linear_set_maxVelocity(TMC_LinearRamp *linearRamp, uint32_t maxVelocity)
{
	linearRamp->maxVelocity = maxVelocity;
   20266:	6001      	str	r1, [r0, #0]
}
   20268:	4770      	bx	lr

0002026a <tmc_ramp_linear_set_targetPosition>:

void tmc_ramp_linear_set_targetPosition(TMC_LinearRamp *linearRamp, int32_t targetPosition)
{
	linearRamp->targetPosition = targetPosition;
   2026a:	6041      	str	r1, [r0, #4]
}
   2026c:	4770      	bx	lr

0002026e <tmc_ramp_linear_set_rampPosition>:

void tmc_ramp_linear_set_rampPosition(TMC_LinearRamp *linearRamp, int32_t rampPosition)
{
	linearRamp->rampPosition = rampPosition;
   2026e:	6081      	str	r1, [r0, #8]
}
   20270:	4770      	bx	lr

00020272 <tmc_ramp_linear_set_targetVelocity>:

void tmc_ramp_linear_set_targetVelocity(TMC_LinearRamp *linearRamp, int32_t targetVelocity)
{
	linearRamp->targetVelocity = targetVelocity;
   20272:	60c1      	str	r1, [r0, #12]
}
   20274:	4770      	bx	lr

00020276 <tmc_ramp_linear_set_rampVelocity>:

void tmc_ramp_linear_set_rampVelocity(TMC_LinearRamp *linearRamp, int32_t rampVelocity)
{
	linearRamp->rampVelocity = rampVelocity;
   20276:	6101      	str	r1, [r0, #16]
}
   20278:	4770      	bx	lr

0002027a <tmc_ramp_linear_set_acceleration>:

void tmc_ramp_linear_set_acceleration(TMC_LinearRamp *linearRamp, int32_t acceleration)
{
	linearRamp->acceleration = acceleration;
   2027a:	6141      	str	r1, [r0, #20]
}
   2027c:	4770      	bx	lr

0002027e <tmc_ramp_linear_set_mode>:

void tmc_ramp_linear_set_mode(TMC_LinearRamp *linearRamp, TMC_LinearRamp_Mode mode)
{
	linearRamp->rampMode = mode;
   2027e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
}
   20282:	4770      	bx	lr

00020284 <tmc_ramp_linear_set_precision>:

void tmc_ramp_linear_set_precision(TMC_LinearRamp * linearRamp, uint32_t precision)
{
	linearRamp->precision = precision;
   20284:	62c1      	str	r1, [r0, #44]	; 0x2c
}
   20286:	4770      	bx	lr

00020288 <tmc_ramp_linear_set_homingDistance>:

void tmc_ramp_linear_set_homingDistance(TMC_LinearRamp *linearRamp, uint32_t homingDistance)
{
	linearRamp->homingDistance = homingDistance;
   20288:	6301      	str	r1, [r0, #48]	; 0x30
}
   2028a:	4770      	bx	lr

0002028c <tmc_ramp_linear_set_stopVelocity>:

void tmc_ramp_linear_set_stopVelocity(TMC_LinearRamp *linearRamp, uint32_t stopVelocity)
{
	linearRamp->stopVelocity = stopVelocity;
   2028c:	6341      	str	r1, [r0, #52]	; 0x34
}
   2028e:	4770      	bx	lr

00020290 <tmc_ramp_linear_get_enabled>:

bool tmc_ramp_linear_get_enabled(TMC_LinearRamp *linearRamp)
{
	return linearRamp->rampEnabled;
}
   20290:	7e00      	ldrb	r0, [r0, #24]
   20292:	4770      	bx	lr

00020294 <tmc_ramp_linear_get_maxVelocity>:

uint32_t tmc_ramp_linear_get_maxVelocity(TMC_LinearRamp *linearRamp)
{
	return linearRamp->maxVelocity;
}
   20294:	6800      	ldr	r0, [r0, #0]
   20296:	4770      	bx	lr

00020298 <tmc_ramp_linear_get_targetPosition>:

int32_t tmc_ramp_linear_get_targetPosition(TMC_LinearRamp *linearRamp)
{
	return linearRamp->targetPosition;
}
   20298:	6840      	ldr	r0, [r0, #4]
   2029a:	4770      	bx	lr

0002029c <tmc_ramp_linear_get_rampPosition>:

int32_t tmc_ramp_linear_get_rampPosition(TMC_LinearRamp *linearRamp)
{
	return linearRamp->rampPosition;
}
   2029c:	6880      	ldr	r0, [r0, #8]
   2029e:	4770      	bx	lr

000202a0 <tmc_ramp_linear_get_targetVelocity>:

int32_t tmc_ramp_linear_get_targetVelocity(TMC_LinearRamp *linearRamp)
{
	return linearRamp->targetVelocity;
}
   202a0:	68c0      	ldr	r0, [r0, #12]
   202a2:	4770      	bx	lr

000202a4 <tmc_ramp_linear_get_rampVelocity>:

int32_t tmc_ramp_linear_get_rampVelocity(TMC_LinearRamp *linearRamp)
{
	return linearRamp->rampVelocity;
}
   202a4:	6900      	ldr	r0, [r0, #16]
   202a6:	4770      	bx	lr

000202a8 <tmc_ramp_linear_get_acceleration>:

int32_t tmc_ramp_linear_get_acceleration(TMC_LinearRamp *linearRamp)
{
	return linearRamp->acceleration;
}
   202a8:	6940      	ldr	r0, [r0, #20]
   202aa:	4770      	bx	lr

000202ac <tmc_ramp_linear_get_state>:

TMC_LinearRamp_State tmc_ramp_linear_get_state(TMC_LinearRamp *linearRamp)
{
	return linearRamp->state;
}
   202ac:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
   202b0:	4770      	bx	lr

000202b2 <tmc_ramp_linear_get_mode>:

TMC_LinearRamp_Mode tmc_ramp_linear_get_mode(TMC_LinearRamp *linearRamp)
{
	return linearRamp->rampMode;
}
   202b2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   202b6:	4770      	bx	lr

000202b8 <tmc_ramp_linear_get_precision>:

uint32_t tmc_ramp_linear_get_precision(TMC_LinearRamp *linearRamp)
{
	return linearRamp->precision;
}
   202b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   202ba:	4770      	bx	lr

000202bc <tmc_ramp_linear_get_acceleration_limit>:

// The maximum acceleration depends on the precision value
uint32_t tmc_ramp_linear_get_acceleration_limit(TMC_LinearRamp *linearRamp)
{
	return (0xFFFFFFFFu / linearRamp->precision) * linearRamp->precision;
   202bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   202be:	f04f 33ff 	mov.w	r3, #4294967295
   202c2:	fbb3 f3f0 	udiv	r3, r3, r0
}
   202c6:	4358      	muls	r0, r3
   202c8:	4770      	bx	lr

000202ca <tmc_ramp_linear_get_velocity_limit>:
   202ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   202cc:	4770      	bx	lr

000202ce <tmc_ramp_linear_get_homingDistance>:
}

uint32_t tmc_ramp_linear_get_homingDistance(TMC_LinearRamp *linearRamp)
{
	return linearRamp->homingDistance;
}
   202ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
   202d0:	4770      	bx	lr

000202d2 <tmc_ramp_linear_get_stopVelocity>:

uint32_t tmc_ramp_linear_get_stopVelocity(TMC_LinearRamp *linearRamp)
{
	return linearRamp->stopVelocity;
}
   202d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   202d4:	4770      	bx	lr

000202d6 <tmc_ramp_linear_compute_velocity>:
	tmc_ramp_linear_compute_position(linearRamp);
	return tmc_ramp_linear_compute_velocity(linearRamp);
}

int32_t tmc_ramp_linear_compute_velocity(TMC_LinearRamp *linearRamp)
{
   202d6:	b570      	push	{r4, r5, r6, lr}
	bool accelerating = linearRamp->rampVelocity != linearRamp->targetVelocity;
   202d8:	e9d0 1203 	ldrd	r1, r2, [r0, #12]

	if (linearRamp->rampEnabled)
   202dc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
   202de:	4603      	mov	r3, r0
	if (linearRamp->rampEnabled)
   202e0:	7e00      	ldrb	r0, [r0, #24]
   202e2:	2800      	cmp	r0, #0
   202e4:	d036      	beq.n	20354 <tmc_ramp_linear_compute_velocity+0x7e>
	{
		// Add current acceleration to accumulator
		linearRamp->accumulatorVelocity += linearRamp->acceleration;
   202e6:	69dd      	ldr	r5, [r3, #28]
   202e8:	6958      	ldr	r0, [r3, #20]
   202ea:	4405      	add	r5, r0
		// Calculate the velocity delta value and keep the remainder of the velocity accumulator
		int32_t dv = linearRamp->accumulatorVelocity / linearRamp->precision;
		linearRamp->accumulatorVelocity = linearRamp->accumulatorVelocity % linearRamp->precision;

		// Add dv to rampVelocity, and regulate to target velocity
		if(linearRamp->rampVelocity < linearRamp->targetVelocity)
   202ec:	428a      	cmp	r2, r1
		int32_t dv = linearRamp->accumulatorVelocity / linearRamp->precision;
   202ee:	fbb5 f0f4 	udiv	r0, r5, r4
		linearRamp->accumulatorVelocity = linearRamp->accumulatorVelocity % linearRamp->precision;
   202f2:	fb04 5510 	mls	r5, r4, r0, r5
   202f6:	61dd      	str	r5, [r3, #28]
		if(linearRamp->rampVelocity < linearRamp->targetVelocity)
   202f8:	da25      	bge.n	20346 <tmc_ramp_linear_compute_velocity+0x70>
			linearRamp->rampVelocity = MIN(linearRamp->rampVelocity + dv, linearRamp->targetVelocity);
   202fa:	4410      	add	r0, r2
   202fc:	4288      	cmp	r0, r1
   202fe:	bfd4      	ite	le
   20300:	6118      	strle	r0, [r3, #16]
   20302:	6119      	strgt	r1, [r3, #16]
		// Reset accumulator
		linearRamp->accumulatorVelocity = 0;
	}

	// Calculate the velocity delta value and keep the remainder of the position accumulator
	linearRamp->accumulatorPosition += linearRamp->rampVelocity;
   20304:	6a1e      	ldr	r6, [r3, #32]
   20306:	691d      	ldr	r5, [r3, #16]
   20308:	442e      	add	r6, r5
	int32_t dx = linearRamp->accumulatorPosition / (int32_t) linearRamp->precision;
   2030a:	fb96 f0f4 	sdiv	r0, r6, r4
	linearRamp->accumulatorPosition = linearRamp->accumulatorPosition % (int32_t) linearRamp->precision;
   2030e:	fb04 6410 	mls	r4, r4, r0, r6

	if(dx == 0)
   20312:	2800      	cmp	r0, #0
	linearRamp->accumulatorPosition = linearRamp->accumulatorPosition % (int32_t) linearRamp->precision;
   20314:	621c      	str	r4, [r3, #32]
	if(dx == 0)
   20316:	d015      	beq.n	20344 <tmc_ramp_linear_compute_velocity+0x6e>
		return dx;

	// Change actual position determined by position change
	linearRamp->rampPosition += (dx < 0) ? (-1) : (1);
   20318:	bfac      	ite	ge
   2031a:	2601      	movge	r6, #1
   2031c:	f04f 36ff 	movlt.w	r6, #4294967295
	bool accelerating = linearRamp->rampVelocity != linearRamp->targetVelocity;
   20320:	1a52      	subs	r2, r2, r1
   20322:	bf18      	it	ne
   20324:	2201      	movne	r2, #1
	linearRamp->rampPosition += (dx < 0) ? (-1) : (1);
   20326:	689c      	ldr	r4, [r3, #8]

	// Count acceleration steps needed for decelerating later
	linearRamp->accelerationSteps += (abs(linearRamp->rampVelocity) < abs(linearRamp->targetVelocity)) ? accelerating : -accelerating;
   20328:	2d00      	cmp	r5, #0
   2032a:	bfb8      	it	lt
   2032c:	426d      	neglt	r5, r5
   2032e:	2900      	cmp	r1, #0
	linearRamp->rampPosition += (dx < 0) ? (-1) : (1);
   20330:	4434      	add	r4, r6
	linearRamp->accelerationSteps += (abs(linearRamp->rampVelocity) < abs(linearRamp->targetVelocity)) ? accelerating : -accelerating;
   20332:	bfb8      	it	lt
   20334:	4249      	neglt	r1, r1
	linearRamp->rampPosition += (dx < 0) ? (-1) : (1);
   20336:	609c      	str	r4, [r3, #8]
	linearRamp->accelerationSteps += (abs(linearRamp->rampVelocity) < abs(linearRamp->targetVelocity)) ? accelerating : -accelerating;
   20338:	428d      	cmp	r5, r1
   2033a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2033c:	bfa8      	it	ge
   2033e:	4252      	negge	r2, r2
   20340:	4422      	add	r2, r4
   20342:	629a      	str	r2, [r3, #40]	; 0x28

	return dx;
}
   20344:	bd70      	pop	{r4, r5, r6, pc}
		else if(linearRamp->rampVelocity > linearRamp->targetVelocity)
   20346:	dddd      	ble.n	20304 <tmc_ramp_linear_compute_velocity+0x2e>
			linearRamp->rampVelocity = MAX(linearRamp->rampVelocity - dv, linearRamp->targetVelocity);
   20348:	1a10      	subs	r0, r2, r0
   2034a:	4288      	cmp	r0, r1
   2034c:	bfac      	ite	ge
   2034e:	6118      	strge	r0, [r3, #16]
   20350:	6119      	strlt	r1, [r3, #16]
   20352:	e7d7      	b.n	20304 <tmc_ramp_linear_compute_velocity+0x2e>
		linearRamp->rampVelocity = linearRamp->targetVelocity;
   20354:	6119      	str	r1, [r3, #16]
		linearRamp->accumulatorVelocity = 0;
   20356:	61d8      	str	r0, [r3, #28]
   20358:	e7d4      	b.n	20304 <tmc_ramp_linear_compute_velocity+0x2e>

0002035a <tmc_ramp_linear_compute_position>:

void tmc_ramp_linear_compute_position(TMC_LinearRamp *linearRamp)
{
	if (!linearRamp->rampEnabled)
   2035a:	7e03      	ldrb	r3, [r0, #24]
{
   2035c:	b530      	push	{r4, r5, lr}
	if (!linearRamp->rampEnabled)
   2035e:	b1a3      	cbz	r3, 2038a <tmc_ramp_linear_compute_position+0x30>
		return;

	if (linearRamp->rampMode != TMC_RAMP_LINEAR_MODE_POSITION)
   20360:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   20364:	2b01      	cmp	r3, #1
   20366:	d110      	bne.n	2038a <tmc_ramp_linear_compute_position+0x30>
		return;

	// Calculate steps needed to target
	int32_t diffx = 0;

	switch(linearRamp->state) {
   20368:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
   2036c:	2b01      	cmp	r3, #1
   2036e:	d00d      	beq.n	2038c <tmc_ramp_linear_compute_position+0x32>
   20370:	2b02      	cmp	r3, #2
   20372:	d027      	beq.n	203c4 <tmc_ramp_linear_compute_position+0x6a>
   20374:	b94b      	cbnz	r3, 2038a <tmc_ramp_linear_compute_position+0x30>
	case TMC_RAMP_LINEAR_STATE_IDLE:
		if(linearRamp->rampVelocity == 0)
   20376:	6903      	ldr	r3, [r0, #16]
   20378:	b903      	cbnz	r3, 2037c <tmc_ramp_linear_compute_position+0x22>
			linearRamp->accelerationSteps = 0;
   2037a:	6283      	str	r3, [r0, #40]	; 0x28

		if(linearRamp->rampPosition == linearRamp->targetPosition)
   2037c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   20380:	429a      	cmp	r2, r3
   20382:	d002      	beq.n	2038a <tmc_ramp_linear_compute_position+0x30>
			break;

		linearRamp->state = TMC_RAMP_LINEAR_STATE_DRIVING;
   20384:	2301      	movs	r3, #1
		// Steps left required for braking?
		// (+ 1 to compensate rounding (flooring) errors of the position accumulator)
		if(linearRamp->accelerationSteps + 1 >= diffx)
		{
			linearRamp->targetVelocity = 0;
			linearRamp->state = TMC_RAMP_LINEAR_STATE_BRAKING;
   20386:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
				linearRamp->state = TMC_RAMP_LINEAR_STATE_IDLE;
			}
		}
		break;
	}
}
   2038a:	bd30      	pop	{r4, r5, pc}
		if(linearRamp->rampVelocity > 0)
   2038c:	6903      	ldr	r3, [r0, #16]
   2038e:	2b00      	cmp	r3, #0
   20390:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
   20394:	dd08      	ble.n	203a8 <tmc_ramp_linear_compute_position+0x4e>
			diffx = linearRamp->targetPosition - linearRamp->rampPosition;
   20396:	1a53      	subs	r3, r2, r1
		if(linearRamp->accelerationSteps + 1 >= diffx)
   20398:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2039a:	3401      	adds	r4, #1
   2039c:	429c      	cmp	r4, r3
   2039e:	db0b      	blt.n	203b8 <tmc_ramp_linear_compute_position+0x5e>
			linearRamp->targetVelocity = 0;
   203a0:	2300      	movs	r3, #0
   203a2:	60c3      	str	r3, [r0, #12]
			linearRamp->state = TMC_RAMP_LINEAR_STATE_BRAKING;
   203a4:	2302      	movs	r3, #2
   203a6:	e7ee      	b.n	20386 <tmc_ramp_linear_compute_position+0x2c>
		else if(linearRamp->rampVelocity < 0)
   203a8:	d001      	beq.n	203ae <tmc_ramp_linear_compute_position+0x54>
			diffx = -(linearRamp->targetPosition - linearRamp->rampPosition);
   203aa:	1a8b      	subs	r3, r1, r2
   203ac:	e7f4      	b.n	20398 <tmc_ramp_linear_compute_position+0x3e>
			diffx = abs(linearRamp->targetPosition - linearRamp->rampPosition);
   203ae:	1a53      	subs	r3, r2, r1
   203b0:	2b00      	cmp	r3, #0
   203b2:	bfb8      	it	lt
   203b4:	425b      	neglt	r3, r3
   203b6:	e7ef      	b.n	20398 <tmc_ramp_linear_compute_position+0x3e>
			linearRamp->targetVelocity = (linearRamp->targetPosition > linearRamp->rampPosition) ? linearRamp->maxVelocity : -linearRamp->maxVelocity;
   203b8:	6803      	ldr	r3, [r0, #0]
   203ba:	4291      	cmp	r1, r2
   203bc:	bfa8      	it	ge
   203be:	425b      	negge	r3, r3
   203c0:	60c3      	str	r3, [r0, #12]
   203c2:	e7e2      	b.n	2038a <tmc_ramp_linear_compute_position+0x30>
		if(linearRamp->targetPosition == linearRamp->rampPosition)
   203c4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   203c8:	4299      	cmp	r1, r3
   203ca:	6902      	ldr	r2, [r0, #16]
   203cc:	d109      	bne.n	203e2 <tmc_ramp_linear_compute_position+0x88>
			if(abs(linearRamp->rampVelocity) <= linearRamp->stopVelocity)
   203ce:	2a00      	cmp	r2, #0
   203d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   203d2:	bfb8      	it	lt
   203d4:	4252      	neglt	r2, r2
   203d6:	429a      	cmp	r2, r3
   203d8:	d8d7      	bhi.n	2038a <tmc_ramp_linear_compute_position+0x30>
				linearRamp->rampVelocity = 0;
   203da:	2300      	movs	r3, #0
				linearRamp->targetVelocity = 0;
   203dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
				linearRamp->state = TMC_RAMP_LINEAR_STATE_IDLE;
   203e0:	e7d1      	b.n	20386 <tmc_ramp_linear_compute_position+0x2c>
			if(linearRamp->rampVelocity != 0)
   203e2:	2a00      	cmp	r2, #0
   203e4:	d007      	beq.n	203f6 <tmc_ramp_linear_compute_position+0x9c>
				if(linearRamp->accelerationSteps + 1 < diffx)
   203e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
					diffx = linearRamp->targetPosition - linearRamp->rampPosition;
   203e8:	bfcc      	ite	gt
   203ea:	1acb      	subgt	r3, r1, r3
					diffx = -(linearRamp->targetPosition - linearRamp->rampPosition);
   203ec:	1a5b      	suble	r3, r3, r1
				if(linearRamp->accelerationSteps + 1 < diffx)
   203ee:	3201      	adds	r2, #1
   203f0:	429a      	cmp	r2, r3
   203f2:	dbc7      	blt.n	20384 <tmc_ramp_linear_compute_position+0x2a>
   203f4:	e7c9      	b.n	2038a <tmc_ramp_linear_compute_position+0x30>
			if(abs(linearRamp->targetPosition - linearRamp->rampPosition) <= linearRamp->homingDistance)
   203f6:	1acc      	subs	r4, r1, r3
   203f8:	2c00      	cmp	r4, #0
   203fa:	6b05      	ldr	r5, [r0, #48]	; 0x30
   203fc:	bfb8      	it	lt
   203fe:	4264      	neglt	r4, r4
   20400:	42ac      	cmp	r4, r5
   20402:	d805      	bhi.n	20410 <tmc_ramp_linear_compute_position+0xb6>
				linearRamp->targetVelocity = (linearRamp->targetPosition > linearRamp->rampPosition)? linearRamp->stopVelocity : -linearRamp->stopVelocity;
   20404:	6b42      	ldr	r2, [r0, #52]	; 0x34
   20406:	4299      	cmp	r1, r3
   20408:	bfd8      	it	le
   2040a:	4252      	negle	r2, r2
   2040c:	60c2      	str	r2, [r0, #12]
   2040e:	e7bc      	b.n	2038a <tmc_ramp_linear_compute_position+0x30>
				linearRamp->state = TMC_RAMP_LINEAR_STATE_IDLE;
   20410:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
   20414:	e7b9      	b.n	2038a <tmc_ramp_linear_compute_position+0x30>

00020416 <tmc_ramp_linear_compute>:
{
   20416:	b510      	push	{r4, lr}
	tmc_ramp_linear_compute_position(linearRamp);
   20418:	f7ff ff9f 	bl	2035a <tmc_ramp_linear_compute_position>
}
   2041c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return tmc_ramp_linear_compute_velocity(linearRamp);
   20420:	f7ff bf59 	b.w	202d6 <tmc_ramp_linear_compute_velocity>

00020424 <tmc2041_writeDatagram>:
// => SPI wrapper
extern void tmc2041_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

void tmc2041_writeDatagram(TMC2041TypeDef *tmc2041, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   20424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20428:	4698      	mov	r8, r3
	uint8_t data[5] = { address | TMC2041_WRITE_BIT, x1, x2, x3, x4 };
   2042a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2042e:	f88d 3000 	strb.w	r3, [sp]
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   20432:	6803      	ldr	r3, [r0, #0]
{
   20434:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   20438:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC2041_WRITE_BIT, x1, x2, x3, x4 };
   2043c:	f88d 2001 	strb.w	r2, [sp, #1]
{
   20440:	4604      	mov	r4, r0
   20442:	4617      	mov	r7, r2
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   20444:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC2041_WRITE_BIT, x1, x2, x3, x4 };
   20448:	f88d 5004 	strb.w	r5, [sp, #4]
{
   2044c:	460e      	mov	r6, r1
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   2044e:	2205      	movs	r2, #5
   20450:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC2041_WRITE_BIT, x1, x2, x3, x4 };
   20452:	f88d 8002 	strb.w	r8, [sp, #2]
   20456:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   2045a:	f7e9 f879 	bl	9550 <tmc2041_readWriteArray>

	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = address & ~TMC2041_WRITE_BIT;
	tmc2041->config->shadowRegister[address] = value;
   2045e:	6822      	ldr	r2, [r4, #0]
   20460:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   20464:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc2041->config->shadowRegister[address] = value;
   20468:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   2046c:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   20470:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc2041->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20474:	4434      	add	r4, r6
	tmc2041->config->shadowRegister[address] = value;
   20476:	604b      	str	r3, [r1, #4]
	tmc2041->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20478:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   2047c:	f043 0308 	orr.w	r3, r3, #8
   20480:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   20484:	b003      	add	sp, #12
   20486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002048a <tmc2041_writeInt>:

void tmc2041_writeInt(TMC2041TypeDef *tmc2041, uint8_t address, int32_t value)
{
   2048a:	b507      	push	{r0, r1, r2, lr}
	tmc2041_writeDatagram(tmc2041, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   2048c:	b2d3      	uxtb	r3, r2
   2048e:	9301      	str	r3, [sp, #4]
   20490:	f3c2 2307 	ubfx	r3, r2, #8, #8
   20494:	9300      	str	r3, [sp, #0]
   20496:	f3c2 4307 	ubfx	r3, r2, #16, #8
   2049a:	0e12      	lsrs	r2, r2, #24
   2049c:	f7ff ffc2 	bl	20424 <tmc2041_writeDatagram>
}
   204a0:	b003      	add	sp, #12
   204a2:	f85d fb04 	ldr.w	pc, [sp], #4

000204a6 <tmc2041_readInt>:

int32_t tmc2041_readInt(TMC2041TypeDef *tmc2041, uint8_t address)
{
   204a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   204a8:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc2041->registerAccess[address]))
   204ac:	1902      	adds	r2, r0, r4
   204ae:	6803      	ldr	r3, [r0, #0]
   204b0:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   204b4:	07d2      	lsls	r2, r2, #31
{
   204b6:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc2041->registerAccess[address]))
   204b8:	d404      	bmi.n	204c4 <tmc2041_readInt+0x1e>
		return tmc2041->config->shadowRegister[address];
   204ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   204be:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   204c0:	b003      	add	sp, #12
   204c2:	bd30      	pop	{r4, r5, pc}
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   204c4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   204c8:	f88d 4000 	strb.w	r4, [sp]
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   204cc:	2205      	movs	r2, #5
   204ce:	4669      	mov	r1, sp
   204d0:	f7e9 f83e 	bl	9550 <tmc2041_readWriteArray>
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   204d4:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   204d6:	f88d 4000 	strb.w	r4, [sp]
	tmc2041_readWriteArray(tmc2041->config->channel, &data[0], 5);
   204da:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   204de:	2205      	movs	r2, #5
   204e0:	4669      	mov	r1, sp
   204e2:	f7e9 f835 	bl	9550 <tmc2041_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   204e6:	f8dd 0001 	ldr.w	r0, [sp, #1]
   204ea:	ba00      	rev	r0, r0
   204ec:	e7e8      	b.n	204c0 <tmc2041_readInt+0x1a>

000204ee <tmc2041_init>:

void tmc2041_init(TMC2041TypeDef *tmc2041, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   204ee:	b530      	push	{r4, r5, lr}
	tmc2041->config = config;

	tmc2041->config->callback     = NULL;
   204f0:	2400      	movs	r4, #0
	tmc2041->config = config;
   204f2:	6002      	str	r2, [r0, #0]
	tmc2041->config->callback     = NULL;
   204f4:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2041->config->channel      = channel;
	tmc2041->config->configIndex  = 0;
	tmc2041->config->state        = CONFIG_READY;
   204f8:	8014      	strh	r4, [r2, #0]
   204fa:	4c0a      	ldr	r4, [pc, #40]	; (20524 <tmc2041_init+0x36>)
	tmc2041->config->channel      = channel;
   204fc:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
   20500:	3b04      	subs	r3, #4
   20502:	f500 7201 	add.w	r2, r0, #516	; 0x204
   20506:	1d01      	adds	r1, r0, #4
   20508:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2041->registerAccess[i]      = tmc2041_defaultRegisterAccess[i];
   2050c:	f814 5b01 	ldrb.w	r5, [r4], #1
   20510:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2041->registerResetState[i]  = registerResetState[i];
   20514:	f853 5f04 	ldr.w	r5, [r3, #4]!
   20518:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
   2051c:	4282      	cmp	r2, r0
   2051e:	d1f5      	bne.n	2050c <tmc2041_init+0x1e>
	}
}
   20520:	bd30      	pop	{r4, r5, pc}
   20522:	bf00      	nop
   20524:	00029f3c 	.word	0x00029f3c

00020528 <tmc2041_reset>:

uint8_t tmc2041_reset(TMC2041TypeDef *tmc2041)
{
	if(tmc2041->config->state != CONFIG_READY)
   20528:	6801      	ldr	r1, [r0, #0]
   2052a:	780b      	ldrb	r3, [r1, #0]
   2052c:	b96b      	cbnz	r3, 2054a <tmc2041_reset+0x22>
   2052e:	f500 7301 	add.w	r3, r0, #516	; 0x204
   20532:	f500 7021 	add.w	r0, r0, #644	; 0x284

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
		tmc2041->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   20536:	781a      	ldrb	r2, [r3, #0]
   20538:	f022 0208 	bic.w	r2, r2, #8
   2053c:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
   20540:	4283      	cmp	r3, r0
   20542:	d1f8      	bne.n	20536 <tmc2041_reset+0xe>

	tmc2041->config->state        = CONFIG_RESET;
   20544:	2001      	movs	r0, #1
   20546:	8008      	strh	r0, [r1, #0]
	tmc2041->config->configIndex  = 0;

	return 1;
   20548:	4770      	bx	lr
		return 0;
   2054a:	2000      	movs	r0, #0
}
   2054c:	4770      	bx	lr

0002054e <tmc2041_restore>:

uint8_t tmc2041_restore(TMC2041TypeDef *tmc2041)
{
	if(tmc2041->config->state != CONFIG_READY)
   2054e:	6803      	ldr	r3, [r0, #0]
   20550:	781a      	ldrb	r2, [r3, #0]
   20552:	b91a      	cbnz	r2, 2055c <tmc2041_restore+0xe>
		return 0;

	tmc2041->config->state        = CONFIG_RESTORE;
   20554:	2202      	movs	r2, #2
   20556:	801a      	strh	r2, [r3, #0]
	tmc2041->config->configIndex  = 0;

	return 1;
   20558:	2001      	movs	r0, #1
   2055a:	4770      	bx	lr
		return 0;
   2055c:	2000      	movs	r0, #0
}
   2055e:	4770      	bx	lr

00020560 <tmc2041_setRegisterResetState>:

void tmc2041_setRegisterResetState(TMC2041TypeDef *tmc2041, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
   20560:	1f0b      	subs	r3, r1, #4
   20562:	3004      	adds	r0, #4
   20564:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc2041->registerResetState[i] = resetState[i];
   20568:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2056c:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC2041_REGISTER_COUNT; i++)
   20570:	428b      	cmp	r3, r1
   20572:	d1f9      	bne.n	20568 <tmc2041_setRegisterResetState+0x8>
}
   20574:	4770      	bx	lr

00020576 <tmc2041_setCallback>:

void tmc2041_setCallback(TMC2041TypeDef *tmc2041, tmc2041_callback callback)
{
	tmc2041->config->callback = (tmc_callback_config) callback;
   20576:	6803      	ldr	r3, [r0, #0]
   20578:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   2057c:	4770      	bx	lr

0002057e <tmc2041_periodicJob>:
		tmc2041->config->state = CONFIG_READY;
	}
}

void tmc2041_periodicJob(TMC2041TypeDef *tmc2041, uint32_t tick)
{
   2057e:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2041->config->state != CONFIG_READY)
   20580:	6804      	ldr	r4, [r0, #0]
   20582:	7823      	ldrb	r3, [r4, #0]
{
   20584:	4605      	mov	r5, r0
	if(tmc2041->config->state != CONFIG_READY)
   20586:	b1eb      	cbz	r3, 205c4 <tmc2041_periodicJob+0x46>
	if(tmc2041->config->state == CONFIG_RESTORE)
   20588:	2b02      	cmp	r3, #2
   2058a:	d11f      	bne.n	205cc <tmc2041_periodicJob+0x4e>
		settings = tmc2041->config->shadowRegister;
   2058c:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2041_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2041->registerAccess[*ptr]))
   2058e:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20592:	7862      	ldrb	r2, [r4, #1]
   20594:	2b00      	cmp	r3, #0
   20596:	db08      	blt.n	205aa <tmc2041_periodicJob+0x2c>
   20598:	18ab      	adds	r3, r5, r2
   2059a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   2059e:	0799      	lsls	r1, r3, #30
   205a0:	d511      	bpl.n	205c6 <tmc2041_periodicJob+0x48>
   205a2:	f003 0348 	and.w	r3, r3, #72	; 0x48
   205a6:	2b40      	cmp	r3, #64	; 0x40
   205a8:	d00d      	beq.n	205c6 <tmc2041_periodicJob+0x48>
	if(*ptr < TMC2041_REGISTER_COUNT)
   205aa:	f994 3001 	ldrsb.w	r3, [r4, #1]
   205ae:	7861      	ldrb	r1, [r4, #1]
   205b0:	2b00      	cmp	r3, #0
   205b2:	db1b      	blt.n	205ec <tmc2041_periodicJob+0x6e>
		tmc2041_writeInt(tmc2041, *ptr, settings[*ptr]);
   205b4:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   205b8:	4628      	mov	r0, r5
   205ba:	f7ff ff66 	bl	2048a <tmc2041_writeInt>
		(*ptr)++;
   205be:	7863      	ldrb	r3, [r4, #1]
   205c0:	3301      	adds	r3, #1
   205c2:	7063      	strb	r3, [r4, #1]
	{
		writeConfiguration(tmc2041);
		return;
	}
}
   205c4:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   205c6:	3201      	adds	r2, #1
   205c8:	7062      	strb	r2, [r4, #1]
   205ca:	e7e0      	b.n	2058e <tmc2041_periodicJob+0x10>
		settings = tmc2041->registerResetState;
   205cc:	3004      	adds	r0, #4
		while((*ptr < TMC2041_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2041->registerAccess[*ptr]))
   205ce:	f994 2001 	ldrsb.w	r2, [r4, #1]
   205d2:	7863      	ldrb	r3, [r4, #1]
   205d4:	2a00      	cmp	r2, #0
   205d6:	dbe8      	blt.n	205aa <tmc2041_periodicJob+0x2c>
   205d8:	18ea      	adds	r2, r5, r3
   205da:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   205de:	f002 0242 	and.w	r2, r2, #66	; 0x42
   205e2:	2a02      	cmp	r2, #2
   205e4:	d0e1      	beq.n	205aa <tmc2041_periodicJob+0x2c>
			(*ptr)++;
   205e6:	3301      	adds	r3, #1
   205e8:	7063      	strb	r3, [r4, #1]
   205ea:	e7f0      	b.n	205ce <tmc2041_periodicJob+0x50>
		if(tmc2041->config->callback)
   205ec:	682a      	ldr	r2, [r5, #0]
   205ee:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   205f2:	b113      	cbz	r3, 205fa <tmc2041_periodicJob+0x7c>
			((tmc2041_callback)tmc2041->config->callback)(tmc2041, tmc2041->config->state);
   205f4:	7811      	ldrb	r1, [r2, #0]
   205f6:	4628      	mov	r0, r5
   205f8:	4798      	blx	r3
		tmc2041->config->state = CONFIG_READY;
   205fa:	682b      	ldr	r3, [r5, #0]
   205fc:	2200      	movs	r2, #0
   205fe:	701a      	strb	r2, [r3, #0]
   20600:	e7e0      	b.n	205c4 <tmc2041_periodicJob+0x46>
   20602:	bf00      	nop

00020604 <tmc2130_writeDatagram>:
extern void tmc2130_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc2130_writeDatagram(TMC2130TypeDef *tmc2130, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   20604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20608:	4698      	mov	r8, r3
	uint8_t data[5] = { address | TMC2130_WRITE_BIT, x1, x2, x3, x4 };
   2060a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2060e:	f88d 3000 	strb.w	r3, [sp]
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   20612:	6803      	ldr	r3, [r0, #0]
{
   20614:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   20618:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC2130_WRITE_BIT, x1, x2, x3, x4 };
   2061c:	f88d 2001 	strb.w	r2, [sp, #1]
{
   20620:	4604      	mov	r4, r0
   20622:	4617      	mov	r7, r2
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   20624:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC2130_WRITE_BIT, x1, x2, x3, x4 };
   20628:	f88d 5004 	strb.w	r5, [sp, #4]
{
   2062c:	460e      	mov	r6, r1
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   2062e:	2205      	movs	r2, #5
   20630:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC2130_WRITE_BIT, x1, x2, x3, x4 };
   20632:	f88d 8002 	strb.w	r8, [sp, #2]
   20636:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   2063a:	f7ea fad0 	bl	abde <tmc2130_readWriteArray>

	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc2130->config->shadowRegister[address] = value;
   2063e:	6822      	ldr	r2, [r4, #0]
   20640:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   20644:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc2130->config->shadowRegister[address] = value;
   20648:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   2064c:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   20650:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc2130->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20654:	4434      	add	r4, r6
	tmc2130->config->shadowRegister[address] = value;
   20656:	604b      	str	r3, [r1, #4]
	tmc2130->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20658:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   2065c:	f043 0308 	orr.w	r3, r3, #8
   20660:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   20664:	b003      	add	sp, #12
   20666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002066a <tmc2130_writeInt>:

// Write an integer to the given address
void tmc2130_writeInt(TMC2130TypeDef *tmc2130, uint8_t address, int32_t value)
{
   2066a:	b507      	push	{r0, r1, r2, lr}
	tmc2130_writeDatagram(tmc2130, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   2066c:	b2d3      	uxtb	r3, r2
   2066e:	9301      	str	r3, [sp, #4]
   20670:	f3c2 2307 	ubfx	r3, r2, #8, #8
   20674:	9300      	str	r3, [sp, #0]
   20676:	f3c2 4307 	ubfx	r3, r2, #16, #8
   2067a:	0e12      	lsrs	r2, r2, #24
   2067c:	f7ff ffc2 	bl	20604 <tmc2130_writeDatagram>
}
   20680:	b003      	add	sp, #12
   20682:	f85d fb04 	ldr.w	pc, [sp], #4

00020686 <tmc2130_readInt>:

// Read an integer from the given address
int32_t tmc2130_readInt(TMC2130TypeDef *tmc2130, uint8_t address)
{
   20686:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   20688:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc2130->registerAccess[address]))
   2068c:	1902      	adds	r2, r0, r4
   2068e:	6803      	ldr	r3, [r0, #0]
   20690:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   20694:	07d2      	lsls	r2, r2, #31
{
   20696:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc2130->registerAccess[address]))
   20698:	d404      	bmi.n	206a4 <tmc2130_readInt+0x1e>
		return tmc2130->config->shadowRegister[address];
   2069a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2069e:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   206a0:	b003      	add	sp, #12
   206a2:	bd30      	pop	{r4, r5, pc}
	uint8_t data[5] = { 0, 0, 0, 0, 0 };
   206a4:	4a0d      	ldr	r2, [pc, #52]	; (206dc <tmc2130_readInt+0x56>)
   206a6:	6810      	ldr	r0, [r2, #0]
   206a8:	7912      	ldrb	r2, [r2, #4]
   206aa:	9000      	str	r0, [sp, #0]
   206ac:	f88d 2004 	strb.w	r2, [sp, #4]
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   206b0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   206b4:	f88d 4000 	strb.w	r4, [sp]
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   206b8:	2205      	movs	r2, #5
   206ba:	4669      	mov	r1, sp
   206bc:	f7ea fa8f 	bl	abde <tmc2130_readWriteArray>
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   206c0:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   206c2:	f88d 4000 	strb.w	r4, [sp]
	tmc2130_readWriteArray(tmc2130->config->channel, &data[0], 5);
   206c6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   206ca:	2205      	movs	r2, #5
   206cc:	4669      	mov	r1, sp
   206ce:	f7ea fa86 	bl	abde <tmc2130_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   206d2:	f8dd 0001 	ldr.w	r0, [sp, #1]
   206d6:	ba00      	rev	r0, r0
   206d8:	e7e2      	b.n	206a0 <tmc2130_readInt+0x1a>
   206da:	bf00      	nop
   206dc:	00029fbc 	.word	0x00029fbc

000206e0 <tmc2130_init>:
// This function requires:
//     - channel: The channel index, which will be sent back in the SPI callback
//     - tmc2130_config: A ConfigurationTypeDef struct, which will be used by the IC
//     - registerResetState: An int32_t array with 128 elements. This holds the values to be used for a reset.
void tmc2130_init(TMC2130TypeDef *tmc2130, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   206e0:	b530      	push	{r4, r5, lr}
	tmc2130->config               = config;
	tmc2130->config->callback     = NULL;
   206e2:	2400      	movs	r4, #0
	tmc2130->config               = config;
   206e4:	6002      	str	r2, [r0, #0]
	tmc2130->config->callback     = NULL;
   206e6:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2130->config->channel      = channel;
	tmc2130->config->configIndex  = 0;
	tmc2130->config->state        = CONFIG_READY;
   206ea:	8014      	strh	r4, [r2, #0]
   206ec:	4c09      	ldr	r4, [pc, #36]	; (20714 <tmc2130_init+0x34>)
	tmc2130->config->channel      = channel;
   206ee:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	size_t i;
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   206f2:	3b04      	subs	r3, #4
   206f4:	f500 7201 	add.w	r2, r0, #516	; 0x204
   206f8:	1d01      	adds	r1, r0, #4
   206fa:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2130->registerAccess[i]      = tmc2130_defaultRegisterAccess[i];
   206fe:	f814 5b01 	ldrb.w	r5, [r4], #1
   20702:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2130->registerResetState[i]  = registerResetState[i];
   20706:	f853 5f04 	ldr.w	r5, [r3, #4]!
   2070a:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   2070e:	4282      	cmp	r2, r0
   20710:	d1f5      	bne.n	206fe <tmc2130_init+0x1e>
	}
}
   20712:	bd30      	pop	{r4, r5, pc}
   20714:	00029fc1 	.word	0x00029fc1

00020718 <tmc2130_fillShadowRegisters>:

// Fill the shadow registers of hardware preset non-readable registers
// Only needed if you want to 'read' those registers e.g to display the value
// in the TMCL IDE register browser
void tmc2130_fillShadowRegisters(TMC2130TypeDef *tmc2130)
{
   20718:	b5f0      	push	{r4, r5, r6, r7, lr}
			continue;

		// Search the constant list for the current address. With the constant
		// list being sorted in ascended order, we can walk through the list
		// until the entry with an address equal or greater than i
		while(j < ARRAY_SIZE(tmc2130_RegisterConstants) && (tmc2130_RegisterConstants[j].address < i))
   2071a:	4d13      	ldr	r5, [pc, #76]	; (20768 <tmc2130_fillShadowRegisters+0x50>)
	for(i = 0, j = 0; i < TMC2130_REGISTER_COUNT; i++)
   2071c:	2300      	movs	r3, #0
   2071e:	f500 7401 	add.w	r4, r0, #516	; 0x204
   20722:	461a      	mov	r2, r3
		// Abort when we reach the end of the constant list
		if (j == ARRAY_SIZE(tmc2130_RegisterConstants))
			break;

		// If we have an entry for our current address, write the constant
		if(tmc2130_RegisterConstants[j].address == i)
   20724:	f1a5 0788 	sub.w	r7, r5, #136	; 0x88
		if(tmc2130->registerAccess[i] != TMC_ACCESS_W_PRESET)
   20728:	f814 1b01 	ldrb.w	r1, [r4], #1
   2072c:	2942      	cmp	r1, #66	; 0x42
   2072e:	d111      	bne.n	20754 <tmc2130_fillShadowRegisters+0x3c>
		while(j < ARRAY_SIZE(tmc2130_RegisterConstants) && (tmc2130_RegisterConstants[j].address < i))
   20730:	2b0a      	cmp	r3, #10
   20732:	d815      	bhi.n	20760 <tmc2130_fillShadowRegisters+0x48>
   20734:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
   20738:	4291      	cmp	r1, r2
   2073a:	d30f      	bcc.n	2075c <tmc2130_fillShadowRegisters+0x44>
		if(tmc2130_RegisterConstants[j].address == i)
   2073c:	eb07 06c3 	add.w	r6, r7, r3, lsl #3
   20740:	f896 1088 	ldrb.w	r1, [r6, #136]	; 0x88
   20744:	4291      	cmp	r1, r2
		{
			tmc2130->config->shadowRegister[i] = tmc2130_RegisterConstants[j].value;
   20746:	bf01      	itttt	eq
   20748:	6801      	ldreq	r1, [r0, #0]
   2074a:	f8d6 608c 	ldreq.w	r6, [r6, #140]	; 0x8c
   2074e:	eb01 0182 	addeq.w	r1, r1, r2, lsl #2
   20752:	604e      	streq	r6, [r1, #4]
	for(i = 0, j = 0; i < TMC2130_REGISTER_COUNT; i++)
   20754:	3201      	adds	r2, #1
   20756:	2a80      	cmp	r2, #128	; 0x80
   20758:	d1e6      	bne.n	20728 <tmc2130_fillShadowRegisters+0x10>
   2075a:	e003      	b.n	20764 <tmc2130_fillShadowRegisters+0x4c>
			j++;
   2075c:	3301      	adds	r3, #1
   2075e:	e7e7      	b.n	20730 <tmc2130_fillShadowRegisters+0x18>
		if (j == ARRAY_SIZE(tmc2130_RegisterConstants))
   20760:	2b0b      	cmp	r3, #11
   20762:	d1eb      	bne.n	2073c <tmc2130_fillShadowRegisters+0x24>
		}
	}
}
   20764:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20766:	bf00      	nop
   20768:	0002a044 	.word	0x0002a044

0002076c <tmc2130_reset>:

// Reset the TMC5130
uint8_t tmc2130_reset(TMC2130TypeDef *tmc2130)
{
   2076c:	b530      	push	{r4, r5, lr}
	if(tmc2130->config->state != CONFIG_READY)
   2076e:	6801      	ldr	r1, [r0, #0]
   20770:	780a      	ldrb	r2, [r1, #0]
   20772:	b982      	cbnz	r2, 20796 <tmc2130_reset+0x2a>
   20774:	f500 7301 	add.w	r3, r0, #516	; 0x204
   20778:	1d0d      	adds	r5, r1, #4
   2077a:	f500 7021 	add.w	r0, r0, #644	; 0x284

	// Reset the dirty bits
	size_t i;
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
	{
		tmc2130->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   2077e:	781c      	ldrb	r4, [r3, #0]
   20780:	f024 0408 	bic.w	r4, r4, #8
   20784:	f803 4b01 	strb.w	r4, [r3], #1
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   20788:	4283      	cmp	r3, r0
		tmc2130->config->shadowRegister[i] = 0;
   2078a:	f845 2b04 	str.w	r2, [r5], #4
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   2078e:	d1f6      	bne.n	2077e <tmc2130_reset+0x12>
	}

	tmc2130->config->state        = CONFIG_RESET;
   20790:	2001      	movs	r0, #1
   20792:	8008      	strh	r0, [r1, #0]
	tmc2130->config->configIndex  = 0;

	return true;
}
   20794:	bd30      	pop	{r4, r5, pc}
		return false;
   20796:	2000      	movs	r0, #0
   20798:	e7fc      	b.n	20794 <tmc2130_reset+0x28>

0002079a <tmc2130_restore>:

// Restore the TMC5130 to the state stored in the shadow registers.
// This can be used to recover the IC configuration after a VM power loss.
uint8_t tmc2130_restore(TMC2130TypeDef *tmc2130)
{
	if(tmc2130->config->state != CONFIG_READY)
   2079a:	6803      	ldr	r3, [r0, #0]
   2079c:	781a      	ldrb	r2, [r3, #0]
   2079e:	b91a      	cbnz	r2, 207a8 <tmc2130_restore+0xe>
		return false;

	tmc2130->config->state        = CONFIG_RESTORE;
   207a0:	2202      	movs	r2, #2
   207a2:	801a      	strh	r2, [r3, #0]
	tmc2130->config->configIndex  = 0;

	return true;
   207a4:	2001      	movs	r0, #1
   207a6:	4770      	bx	lr
		return false;
   207a8:	2000      	movs	r0, #0
}
   207aa:	4770      	bx	lr

000207ac <tmc2130_setRegisterResetState>:

// Change the values the IC will be configured with when performing a reset.
void tmc2130_setRegisterResetState(TMC2130TypeDef *tmc2130, const int32_t *resetState)
{
	size_t i;
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   207ac:	1f0b      	subs	r3, r1, #4
   207ae:	3004      	adds	r0, #4
   207b0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
	{
		tmc2130->registerResetState[i] = resetState[i];
   207b4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   207b8:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC2130_REGISTER_COUNT; i++)
   207bc:	428b      	cmp	r3, r1
   207be:	d1f9      	bne.n	207b4 <tmc2130_setRegisterResetState+0x8>
	}
}
   207c0:	4770      	bx	lr

000207c2 <tmc2130_setCallback>:

// Register a function to be called after completion of the configuration mechanism
void tmc2130_setCallback(TMC2130TypeDef *tmc2130, tmc2130_callback callback)
{
	tmc2130->config->callback = (tmc_callback_config) callback;
   207c2:	6803      	ldr	r3, [r0, #0]
   207c4:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   207c8:	4770      	bx	lr

000207ca <tmc2130_periodicJob>:
	}
}

// Call this periodically
void tmc2130_periodicJob(TMC2130TypeDef *tmc2130, uint32_t tick)
{
   207ca:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2130->config->state != CONFIG_READY)
   207cc:	6804      	ldr	r4, [r0, #0]
   207ce:	7823      	ldrb	r3, [r4, #0]
{
   207d0:	4605      	mov	r5, r0
	if(tmc2130->config->state != CONFIG_READY)
   207d2:	b1eb      	cbz	r3, 20810 <tmc2130_periodicJob+0x46>
	if(tmc2130->config->state == CONFIG_RESTORE)
   207d4:	2b02      	cmp	r3, #2
   207d6:	d11f      	bne.n	20818 <tmc2130_periodicJob+0x4e>
		settings = tmc2130->config->shadowRegister;
   207d8:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2130_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2130->registerAccess[*ptr]))
   207da:	f994 3001 	ldrsb.w	r3, [r4, #1]
   207de:	7862      	ldrb	r2, [r4, #1]
   207e0:	2b00      	cmp	r3, #0
   207e2:	db08      	blt.n	207f6 <tmc2130_periodicJob+0x2c>
   207e4:	18ab      	adds	r3, r5, r2
   207e6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   207ea:	0799      	lsls	r1, r3, #30
   207ec:	d511      	bpl.n	20812 <tmc2130_periodicJob+0x48>
   207ee:	f003 0348 	and.w	r3, r3, #72	; 0x48
   207f2:	2b40      	cmp	r3, #64	; 0x40
   207f4:	d00d      	beq.n	20812 <tmc2130_periodicJob+0x48>
	if(*ptr < TMC2130_REGISTER_COUNT)
   207f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
   207fa:	7861      	ldrb	r1, [r4, #1]
   207fc:	2b00      	cmp	r3, #0
   207fe:	db1b      	blt.n	20838 <tmc2130_periodicJob+0x6e>
		tmc2130_writeInt(tmc2130, *ptr, settings[*ptr]);
   20800:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   20804:	4628      	mov	r0, r5
   20806:	f7ff ff30 	bl	2066a <tmc2130_writeInt>
		(*ptr)++;
   2080a:	7863      	ldrb	r3, [r4, #1]
   2080c:	3301      	adds	r3, #1
   2080e:	7063      	strb	r3, [r4, #1]
	{
		writeConfiguration(tmc2130);
	}
}
   20810:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   20812:	3201      	adds	r2, #1
   20814:	7062      	strb	r2, [r4, #1]
   20816:	e7e0      	b.n	207da <tmc2130_periodicJob+0x10>
		settings = tmc2130->registerResetState;
   20818:	3004      	adds	r0, #4
		while((*ptr < TMC2130_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2130->registerAccess[*ptr]))
   2081a:	f994 2001 	ldrsb.w	r2, [r4, #1]
   2081e:	7863      	ldrb	r3, [r4, #1]
   20820:	2a00      	cmp	r2, #0
   20822:	dbe8      	blt.n	207f6 <tmc2130_periodicJob+0x2c>
   20824:	18ea      	adds	r2, r5, r3
   20826:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   2082a:	f002 0242 	and.w	r2, r2, #66	; 0x42
   2082e:	2a02      	cmp	r2, #2
   20830:	d0e1      	beq.n	207f6 <tmc2130_periodicJob+0x2c>
			(*ptr)++;
   20832:	3301      	adds	r3, #1
   20834:	7063      	strb	r3, [r4, #1]
   20836:	e7f0      	b.n	2081a <tmc2130_periodicJob+0x50>
		if(tmc2130->config->callback)
   20838:	682a      	ldr	r2, [r5, #0]
   2083a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   2083e:	b113      	cbz	r3, 20846 <tmc2130_periodicJob+0x7c>
			((tmc2130_callback)tmc2130->config->callback)(tmc2130, tmc2130->config->state);
   20840:	7811      	ldrb	r1, [r2, #0]
   20842:	4628      	mov	r0, r5
   20844:	4798      	blx	r3
		tmc2130->config->state = CONFIG_READY;
   20846:	682b      	ldr	r3, [r5, #0]
   20848:	2200      	movs	r2, #0
   2084a:	701a      	strb	r2, [r3, #0]
}
   2084c:	e7e0      	b.n	20810 <tmc2130_periodicJob+0x46>
   2084e:	bf00      	nop

00020850 <tmc2160_writeDatagram>:
extern void tmc2160_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc2160_writeDatagram(TMC2160TypeDef *tmc2160, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   20850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20854:	4698      	mov	r8, r3
	uint8_t data[5] = { address | TMC2160_WRITE_BIT, x1, x2, x3, x4 };
   20856:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2085a:	f88d 3000 	strb.w	r3, [sp]
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   2085e:	6803      	ldr	r3, [r0, #0]
{
   20860:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   20864:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC2160_WRITE_BIT, x1, x2, x3, x4 };
   20868:	f88d 2001 	strb.w	r2, [sp, #1]
{
   2086c:	4604      	mov	r4, r0
   2086e:	4617      	mov	r7, r2
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   20870:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC2160_WRITE_BIT, x1, x2, x3, x4 };
   20874:	f88d 5004 	strb.w	r5, [sp, #4]
{
   20878:	460e      	mov	r6, r1
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   2087a:	2205      	movs	r2, #5
   2087c:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC2160_WRITE_BIT, x1, x2, x3, x4 };
   2087e:	f88d 8002 	strb.w	r8, [sp, #2]
   20882:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   20886:	f7eb f99e 	bl	bbc6 <tmc2160_readWriteArray>

	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc2160->config->shadowRegister[address] = value;
   2088a:	6822      	ldr	r2, [r4, #0]
   2088c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   20890:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc2160->config->shadowRegister[address] = value;
   20894:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   20898:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   2089c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc2160->registerAccess[address] |= TMC_ACCESS_DIRTY;
   208a0:	4434      	add	r4, r6
	tmc2160->config->shadowRegister[address] = value;
   208a2:	604b      	str	r3, [r1, #4]
	tmc2160->registerAccess[address] |= TMC_ACCESS_DIRTY;
   208a4:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   208a8:	f043 0308 	orr.w	r3, r3, #8
   208ac:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   208b0:	b003      	add	sp, #12
   208b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000208b6 <tmc2160_writeInt>:

void tmc2160_writeInt(TMC2160TypeDef *tmc2160, uint8_t address, int32_t value)
{
   208b6:	b507      	push	{r0, r1, r2, lr}
	tmc2160_writeDatagram(tmc2160, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   208b8:	b2d3      	uxtb	r3, r2
   208ba:	9301      	str	r3, [sp, #4]
   208bc:	f3c2 2307 	ubfx	r3, r2, #8, #8
   208c0:	9300      	str	r3, [sp, #0]
   208c2:	f3c2 4307 	ubfx	r3, r2, #16, #8
   208c6:	0e12      	lsrs	r2, r2, #24
   208c8:	f7ff ffc2 	bl	20850 <tmc2160_writeDatagram>
}
   208cc:	b003      	add	sp, #12
   208ce:	f85d fb04 	ldr.w	pc, [sp], #4

000208d2 <tmc2160_readInt>:

int32_t tmc2160_readInt(TMC2160TypeDef *tmc2160, uint8_t address)
{
   208d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   208d4:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc2160->registerAccess[address]))
   208d8:	1902      	adds	r2, r0, r4
   208da:	6803      	ldr	r3, [r0, #0]
   208dc:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   208e0:	07d2      	lsls	r2, r2, #31
{
   208e2:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc2160->registerAccess[address]))
   208e4:	d404      	bmi.n	208f0 <tmc2160_readInt+0x1e>
		return tmc2160->config->shadowRegister[address];
   208e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   208ea:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   208ec:	b003      	add	sp, #12
   208ee:	bd30      	pop	{r4, r5, pc}
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   208f0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   208f4:	f88d 4000 	strb.w	r4, [sp]
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   208f8:	2205      	movs	r2, #5
   208fa:	4669      	mov	r1, sp
   208fc:	f7eb f963 	bl	bbc6 <tmc2160_readWriteArray>
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   20900:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   20902:	f88d 4000 	strb.w	r4, [sp]
	tmc2160_readWriteArray(tmc2160->config->channel, &data[0], 5);
   20906:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   2090a:	2205      	movs	r2, #5
   2090c:	4669      	mov	r1, sp
   2090e:	f7eb f95a 	bl	bbc6 <tmc2160_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   20912:	f8dd 0001 	ldr.w	r0, [sp, #1]
   20916:	ba00      	rev	r0, r0
   20918:	e7e8      	b.n	208ec <tmc2160_readInt+0x1a>

0002091a <tmc2160_init>:

void tmc2160_init(TMC2160TypeDef *tmc2160, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   2091a:	b530      	push	{r4, r5, lr}
	tmc2160->config = config;

	tmc2160->config->callback     = NULL;
   2091c:	2400      	movs	r4, #0
	tmc2160->config = config;
   2091e:	6002      	str	r2, [r0, #0]
	tmc2160->config->callback     = NULL;
   20920:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2160->config->channel      = channel;
	tmc2160->config->configIndex  = 0;
	tmc2160->config->state        = CONFIG_READY;
   20924:	8014      	strh	r4, [r2, #0]
   20926:	4c0a      	ldr	r4, [pc, #40]	; (20950 <tmc2160_init+0x36>)
	tmc2160->config->channel      = channel;
   20928:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
   2092c:	3b04      	subs	r3, #4
   2092e:	f500 7201 	add.w	r2, r0, #516	; 0x204
   20932:	1d01      	adds	r1, r0, #4
   20934:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2160->registerAccess[i]      = tmc2160_defaultRegisterAccess[i];
   20938:	f814 5b01 	ldrb.w	r5, [r4], #1
   2093c:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2160->registerResetState[i]  = registerResetState[i];
   20940:	f853 5f04 	ldr.w	r5, [r3, #4]!
   20944:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
   20948:	4282      	cmp	r2, r0
   2094a:	d1f5      	bne.n	20938 <tmc2160_init+0x1e>
	}
}
   2094c:	bd30      	pop	{r4, r5, pc}
   2094e:	bf00      	nop
   20950:	0002a09c 	.word	0x0002a09c

00020954 <tmc2160_fillShadowRegisters>:

void tmc2160_fillShadowRegisters(TMC2160TypeDef *tmc2160)
{
   20954:	b5f0      	push	{r4, r5, r6, r7, lr}
   20956:	4d10      	ldr	r5, [pc, #64]	; (20998 <tmc2160_fillShadowRegisters+0x44>)
	// Check if we have constants defined
	if(ARRAY_SIZE(tmc2160_RegisterConstants) == 0)
		return;

	for(size_t i = 0, j = 0; i < TMC2160_REGISTER_COUNT; i++)
   20958:	2200      	movs	r2, #0
   2095a:	f500 7401 	add.w	r4, r0, #516	; 0x204
   2095e:	4613      	mov	r3, r2
		while(j < ARRAY_SIZE(tmc2160_RegisterConstants) && (tmc2160_RegisterConstants[j].address < i))
			j++;

		// If we have an entry for our current address, write the constant
		if(tmc2160_RegisterConstants[j].address == i)
			tmc2160->config->shadowRegister[i] = tmc2160_RegisterConstants[j].value;
   20960:	f1a5 0680 	sub.w	r6, r5, #128	; 0x80
		if(tmc2160->registerAccess[i] != TMC_ACCESS_W_PRESET)
   20964:	f814 1b01 	ldrb.w	r1, [r4], #1
   20968:	2942      	cmp	r1, #66	; 0x42
   2096a:	d10f      	bne.n	2098c <tmc2160_fillShadowRegisters+0x38>
		while(j < ARRAY_SIZE(tmc2160_RegisterConstants) && (tmc2160_RegisterConstants[j].address < i))
   2096c:	2a0c      	cmp	r2, #12
   2096e:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   20972:	d801      	bhi.n	20978 <tmc2160_fillShadowRegisters+0x24>
   20974:	4299      	cmp	r1, r3
   20976:	d30d      	bcc.n	20994 <tmc2160_fillShadowRegisters+0x40>
		if(tmc2160_RegisterConstants[j].address == i)
   20978:	4299      	cmp	r1, r3
   2097a:	d107      	bne.n	2098c <tmc2160_fillShadowRegisters+0x38>
			tmc2160->config->shadowRegister[i] = tmc2160_RegisterConstants[j].value;
   2097c:	6801      	ldr	r1, [r0, #0]
   2097e:	eb06 07c2 	add.w	r7, r6, r2, lsl #3
   20982:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   20986:	f8d7 7084 	ldr.w	r7, [r7, #132]	; 0x84
   2098a:	604f      	str	r7, [r1, #4]
	for(size_t i = 0, j = 0; i < TMC2160_REGISTER_COUNT; i++)
   2098c:	3301      	adds	r3, #1
   2098e:	2b80      	cmp	r3, #128	; 0x80
   20990:	d1e8      	bne.n	20964 <tmc2160_fillShadowRegisters+0x10>
	}
}
   20992:	bdf0      	pop	{r4, r5, r6, r7, pc}
			j++;
   20994:	3201      	adds	r2, #1
   20996:	e7e9      	b.n	2096c <tmc2160_fillShadowRegisters+0x18>
   20998:	0002a11c 	.word	0x0002a11c

0002099c <tmc2160_reset>:

uint8_t tmc2160_reset(TMC2160TypeDef *tmc2160)
{
	if(tmc2160->config->state != CONFIG_READY)
   2099c:	6801      	ldr	r1, [r0, #0]
   2099e:	780b      	ldrb	r3, [r1, #0]
   209a0:	b96b      	cbnz	r3, 209be <tmc2160_reset+0x22>
   209a2:	f500 7301 	add.w	r3, r0, #516	; 0x204
   209a6:	f500 7021 	add.w	r0, r0, #644	; 0x284

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
		tmc2160->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   209aa:	781a      	ldrb	r2, [r3, #0]
   209ac:	f022 0208 	bic.w	r2, r2, #8
   209b0:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
   209b4:	4283      	cmp	r3, r0
   209b6:	d1f8      	bne.n	209aa <tmc2160_reset+0xe>

	tmc2160->config->state        = CONFIG_RESET;
   209b8:	2001      	movs	r0, #1
   209ba:	8008      	strh	r0, [r1, #0]
	tmc2160->config->configIndex  = 0;

	return true;
   209bc:	4770      	bx	lr
		return false;
   209be:	2000      	movs	r0, #0
}
   209c0:	4770      	bx	lr

000209c2 <tmc2160_restore>:

uint8_t tmc2160_restore(TMC2160TypeDef *tmc2160)
{
	if(tmc2160->config->state != CONFIG_READY)
   209c2:	6803      	ldr	r3, [r0, #0]
   209c4:	781a      	ldrb	r2, [r3, #0]
   209c6:	b91a      	cbnz	r2, 209d0 <tmc2160_restore+0xe>
		return false;

	tmc2160->config->state        = CONFIG_RESTORE;
   209c8:	2202      	movs	r2, #2
   209ca:	801a      	strh	r2, [r3, #0]
	tmc2160->config->configIndex  = 0;

	return true;
   209cc:	2001      	movs	r0, #1
   209ce:	4770      	bx	lr
		return false;
   209d0:	2000      	movs	r0, #0
}
   209d2:	4770      	bx	lr

000209d4 <tmc2160_setRegisterResetState>:

void tmc2160_setRegisterResetState(TMC2160TypeDef *tmc2160, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
   209d4:	1f0b      	subs	r3, r1, #4
   209d6:	3004      	adds	r0, #4
   209d8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc2160->registerResetState[i] = resetState[i];
   209dc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   209e0:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC2160_REGISTER_COUNT; i++)
   209e4:	428b      	cmp	r3, r1
   209e6:	d1f9      	bne.n	209dc <tmc2160_setRegisterResetState+0x8>
}
   209e8:	4770      	bx	lr

000209ea <tmc2160_setCallback>:

void tmc2160_setCallback(TMC2160TypeDef *tmc2160, tmc2160_callback callback)
{
	tmc2160->config->callback = (tmc_callback_config) callback;
   209ea:	6803      	ldr	r3, [r0, #0]
   209ec:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   209f0:	4770      	bx	lr

000209f2 <tmc2160_periodicJob>:
		tmc2160->config->state = CONFIG_READY;
	}
}

void tmc2160_periodicJob(TMC2160TypeDef *tmc2160, uint32_t tick)
{
   209f2:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2160->config->state != CONFIG_READY)
   209f4:	6804      	ldr	r4, [r0, #0]
   209f6:	7823      	ldrb	r3, [r4, #0]
{
   209f8:	4605      	mov	r5, r0
	if(tmc2160->config->state != CONFIG_READY)
   209fa:	b1eb      	cbz	r3, 20a38 <tmc2160_periodicJob+0x46>
	if(tmc2160->config->state == CONFIG_RESTORE)
   209fc:	2b02      	cmp	r3, #2
   209fe:	d11f      	bne.n	20a40 <tmc2160_periodicJob+0x4e>
		settings = tmc2160->config->shadowRegister;
   20a00:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2160_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2160->registerAccess[*ptr]))
   20a02:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20a06:	7862      	ldrb	r2, [r4, #1]
   20a08:	2b00      	cmp	r3, #0
   20a0a:	db08      	blt.n	20a1e <tmc2160_periodicJob+0x2c>
   20a0c:	18ab      	adds	r3, r5, r2
   20a0e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20a12:	0799      	lsls	r1, r3, #30
   20a14:	d511      	bpl.n	20a3a <tmc2160_periodicJob+0x48>
   20a16:	f003 0348 	and.w	r3, r3, #72	; 0x48
   20a1a:	2b40      	cmp	r3, #64	; 0x40
   20a1c:	d00d      	beq.n	20a3a <tmc2160_periodicJob+0x48>
	if(*ptr < TMC2160_REGISTER_COUNT)
   20a1e:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20a22:	7861      	ldrb	r1, [r4, #1]
   20a24:	2b00      	cmp	r3, #0
   20a26:	db1b      	blt.n	20a60 <tmc2160_periodicJob+0x6e>
		tmc2160_writeInt(tmc2160, *ptr, settings[*ptr]);
   20a28:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   20a2c:	4628      	mov	r0, r5
   20a2e:	f7ff ff42 	bl	208b6 <tmc2160_writeInt>
		(*ptr)++;
   20a32:	7863      	ldrb	r3, [r4, #1]
   20a34:	3301      	adds	r3, #1
   20a36:	7063      	strb	r3, [r4, #1]
		writeConfiguration(tmc2160);
}
   20a38:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   20a3a:	3201      	adds	r2, #1
   20a3c:	7062      	strb	r2, [r4, #1]
   20a3e:	e7e0      	b.n	20a02 <tmc2160_periodicJob+0x10>
		settings = tmc2160->registerResetState;
   20a40:	3004      	adds	r0, #4
		while((*ptr < TMC2160_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2160->registerAccess[*ptr]))
   20a42:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20a46:	7863      	ldrb	r3, [r4, #1]
   20a48:	2a00      	cmp	r2, #0
   20a4a:	dbe8      	blt.n	20a1e <tmc2160_periodicJob+0x2c>
   20a4c:	18ea      	adds	r2, r5, r3
   20a4e:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   20a52:	f002 0242 	and.w	r2, r2, #66	; 0x42
   20a56:	2a02      	cmp	r2, #2
   20a58:	d0e1      	beq.n	20a1e <tmc2160_periodicJob+0x2c>
			(*ptr)++;
   20a5a:	3301      	adds	r3, #1
   20a5c:	7063      	strb	r3, [r4, #1]
   20a5e:	e7f0      	b.n	20a42 <tmc2160_periodicJob+0x50>
		if(tmc2160->config->callback)
   20a60:	682a      	ldr	r2, [r5, #0]
   20a62:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   20a66:	b113      	cbz	r3, 20a6e <tmc2160_periodicJob+0x7c>
			((tmc2160_callback)tmc2160->config->callback)(tmc2160, tmc2160->config->state);
   20a68:	7811      	ldrb	r1, [r2, #0]
   20a6a:	4628      	mov	r0, r5
   20a6c:	4798      	blx	r3
		tmc2160->config->state = CONFIG_READY;
   20a6e:	682b      	ldr	r3, [r5, #0]
   20a70:	2200      	movs	r2, #0
   20a72:	701a      	strb	r2, [r3, #0]
}
   20a74:	e7e0      	b.n	20a38 <tmc2160_periodicJob+0x46>
   20a76:	bf00      	nop

00020a78 <tmc2208_writeInt>:
// => CRC wrapper
extern uint8_t tmc2208_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2208_writeInt(TMC2208TypeDef *tmc2208, uint8_t address, int32_t value)
{
   20a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data[8];

	data[0] = 0x05;
   20a7a:	2305      	movs	r3, #5
   20a7c:	f8ad 3000 	strh.w	r3, [sp]
	data[1] = 0;
	data[2] = address | TMC_WRITE_BIT;
   20a80:	f061 037f 	orn	r3, r1, #127	; 0x7f
   20a84:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = (value >> 24) & 0xFF;
   20a88:	0e13      	lsrs	r3, r2, #24
   20a8a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (value >> 16) & 0xFF;
   20a8e:	1413      	asrs	r3, r2, #16
{
   20a90:	4604      	mov	r4, r0
	data[4] = (value >> 16) & 0xFF;
   20a92:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20a96:	460d      	mov	r5, r1
	data[5] = (value >> 8 ) & 0xFF;
   20a98:	1213      	asrs	r3, r2, #8
	data[6] = (value      ) & 0xFF;
	data[7] = tmc2208_CRC8(data, 7);
   20a9a:	2107      	movs	r1, #7
   20a9c:	4668      	mov	r0, sp
{
   20a9e:	4616      	mov	r6, r2
	data[5] = (value >> 8 ) & 0xFF;
   20aa0:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = (value      ) & 0xFF;
   20aa4:	f88d 2006 	strb.w	r2, [sp, #6]
	data[7] = tmc2208_CRC8(data, 7);
   20aa8:	f7eb fab0 	bl	c00c <tmc2208_CRC8>
   20aac:	f88d 0007 	strb.w	r0, [sp, #7]

	tmc2208_readWriteArray(tmc2208->config->channel, &data[0], 8, 0);
   20ab0:	6820      	ldr	r0, [r4, #0]
   20ab2:	2300      	movs	r3, #0
   20ab4:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   20ab8:	2208      	movs	r2, #8
   20aba:	4669      	mov	r1, sp
   20abc:	f7eb fa9e 	bl	bffc <tmc2208_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc2208->config->shadowRegister[address] = value;
   20ac0:	6823      	ldr	r3, [r4, #0]
   20ac2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   20ac6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	tmc2208->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20aca:	442c      	add	r4, r5
	tmc2208->config->shadowRegister[address] = value;
   20acc:	605e      	str	r6, [r3, #4]
	tmc2208->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20ace:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   20ad2:	f043 0308 	orr.w	r3, r3, #8
   20ad6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   20ada:	b002      	add	sp, #8
   20adc:	bd70      	pop	{r4, r5, r6, pc}

00020ade <tmc2208_readInt>:

int32_t tmc2208_readInt(TMC2208TypeDef *tmc2208, uint8_t address)
{
   20ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t data[8] = { 0 };
   20ae0:	2300      	movs	r3, #0

	address = TMC_ADDRESS(address);
   20ae2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
	uint8_t data[8] = { 0 };
   20ae6:	e9cd 3300 	strd	r3, r3, [sp]

	if (!TMC_IS_READABLE(tmc2208->registerAccess[address]))
   20aea:	1903      	adds	r3, r0, r4
{
   20aec:	4605      	mov	r5, r0
	if (!TMC_IS_READABLE(tmc2208->registerAccess[address]))
   20aee:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20af2:	07db      	lsls	r3, r3, #31
   20af4:	d405      	bmi.n	20b02 <tmc2208_readInt+0x24>
		return tmc2208->config->shadowRegister[address];
   20af6:	6801      	ldr	r1, [r0, #0]
   20af8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   20afc:	6860      	ldr	r0, [r4, #4]
	// Byte 7: CRC correct?
	if (data[7] != tmc2208_CRC8(data, 7))
		return 0;

	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
}
   20afe:	b003      	add	sp, #12
   20b00:	bd30      	pop	{r4, r5, pc}
	data[0] = 0x05;
   20b02:	2305      	movs	r3, #5
	data[3] = tmc2208_CRC8(data, 3);
   20b04:	2103      	movs	r1, #3
   20b06:	4668      	mov	r0, sp
	data[0] = 0x05;
   20b08:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = address;
   20b0c:	f88d 4002 	strb.w	r4, [sp, #2]
	data[3] = tmc2208_CRC8(data, 3);
   20b10:	f7eb fa7c 	bl	c00c <tmc2208_CRC8>
   20b14:	f88d 0003 	strb.w	r0, [sp, #3]
	tmc2208_readWriteArray(tmc2208->config->channel, data, 4, 8);
   20b18:	6828      	ldr	r0, [r5, #0]
   20b1a:	2308      	movs	r3, #8
   20b1c:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   20b20:	2204      	movs	r2, #4
   20b22:	4669      	mov	r1, sp
   20b24:	f7eb fa6a 	bl	bffc <tmc2208_readWriteArray>
	if (data[0] != 0x05)
   20b28:	f89d 3000 	ldrb.w	r3, [sp]
   20b2c:	2b05      	cmp	r3, #5
   20b2e:	d001      	beq.n	20b34 <tmc2208_readInt+0x56>
		return 0;
   20b30:	2000      	movs	r0, #0
   20b32:	e7e4      	b.n	20afe <tmc2208_readInt+0x20>
	if (data[1] != 0xFF)
   20b34:	f89d 3001 	ldrb.w	r3, [sp, #1]
   20b38:	2bff      	cmp	r3, #255	; 0xff
   20b3a:	d1f9      	bne.n	20b30 <tmc2208_readInt+0x52>
	if (data[2] != address)
   20b3c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20b40:	42a3      	cmp	r3, r4
   20b42:	d1f5      	bne.n	20b30 <tmc2208_readInt+0x52>
	if (data[7] != tmc2208_CRC8(data, 7))
   20b44:	2107      	movs	r1, #7
   20b46:	4668      	mov	r0, sp
   20b48:	f89d 4007 	ldrb.w	r4, [sp, #7]
   20b4c:	f7eb fa5e 	bl	c00c <tmc2208_CRC8>
   20b50:	4284      	cmp	r4, r0
   20b52:	d1ed      	bne.n	20b30 <tmc2208_readInt+0x52>
	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
   20b54:	f8dd 0003 	ldr.w	r0, [sp, #3]
   20b58:	ba00      	rev	r0, r0
   20b5a:	e7d0      	b.n	20afe <tmc2208_readInt+0x20>

00020b5c <tmc2208_init>:

void tmc2208_init(TMC2208TypeDef *tmc2208, uint8_t channel, ConfigurationTypeDef *tmc2208_config, const int32_t *registerResetState)
{
   20b5c:	b530      	push	{r4, r5, lr}
	tmc2208->config               = tmc2208_config;
	tmc2208->config->callback     = NULL;
   20b5e:	2400      	movs	r4, #0
	tmc2208->config               = tmc2208_config;
   20b60:	6002      	str	r2, [r0, #0]
	tmc2208->config->callback     = NULL;
   20b62:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2208->config->channel      = channel;
	tmc2208->config->configIndex  = 0;
	tmc2208->config->state        = CONFIG_READY;
   20b66:	8014      	strh	r4, [r2, #0]
   20b68:	4c09      	ldr	r4, [pc, #36]	; (20b90 <tmc2208_init+0x34>)
	tmc2208->config->channel      = channel;
   20b6a:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20b6e:	3b04      	subs	r3, #4
   20b70:	f500 7201 	add.w	r2, r0, #516	; 0x204
   20b74:	1d01      	adds	r1, r0, #4
   20b76:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2208->registerAccess[i]      = tmc2208_defaultRegisterAccess[i];
   20b7a:	f814 5b01 	ldrb.w	r5, [r4], #1
   20b7e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2208->registerResetState[i]  = registerResetState[i];
   20b82:	f853 5f04 	ldr.w	r5, [r3, #4]!
   20b86:	f841 5b04 	str.w	r5, [r1], #4
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20b8a:	4282      	cmp	r2, r0
   20b8c:	d1f5      	bne.n	20b7a <tmc2208_init+0x1e>
	}
}
   20b8e:	bd30      	pop	{r4, r5, pc}
   20b90:	0002a184 	.word	0x0002a184

00020b94 <tmc2208_periodicJob>:
		tmc2208->config->state = CONFIG_READY;
	}
}

void tmc2208_periodicJob(TMC2208TypeDef *tmc2208, uint32_t tick)
{
   20b94:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2208->config->state != CONFIG_READY)
   20b96:	6804      	ldr	r4, [r0, #0]
   20b98:	7823      	ldrb	r3, [r4, #0]
{
   20b9a:	4605      	mov	r5, r0
	if(tmc2208->config->state != CONFIG_READY)
   20b9c:	b1eb      	cbz	r3, 20bda <tmc2208_periodicJob+0x46>
	if(tmc2208->config->state == CONFIG_RESTORE)
   20b9e:	2b02      	cmp	r3, #2
   20ba0:	d11f      	bne.n	20be2 <tmc2208_periodicJob+0x4e>
		settings = tmc2208->config->shadowRegister;
   20ba2:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2208_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2208->registerAccess[*ptr]))
   20ba4:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20ba8:	7862      	ldrb	r2, [r4, #1]
   20baa:	2b00      	cmp	r3, #0
   20bac:	db08      	blt.n	20bc0 <tmc2208_periodicJob+0x2c>
   20bae:	18ab      	adds	r3, r5, r2
   20bb0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20bb4:	0799      	lsls	r1, r3, #30
   20bb6:	d511      	bpl.n	20bdc <tmc2208_periodicJob+0x48>
   20bb8:	f003 0348 	and.w	r3, r3, #72	; 0x48
   20bbc:	2b40      	cmp	r3, #64	; 0x40
   20bbe:	d00d      	beq.n	20bdc <tmc2208_periodicJob+0x48>
	if(*ptr < TMC2208_REGISTER_COUNT)
   20bc0:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20bc4:	7861      	ldrb	r1, [r4, #1]
   20bc6:	2b00      	cmp	r3, #0
   20bc8:	db1b      	blt.n	20c02 <tmc2208_periodicJob+0x6e>
		tmc2208_writeInt(tmc2208, *ptr, settings[*ptr]);
   20bca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   20bce:	4628      	mov	r0, r5
   20bd0:	f7ff ff52 	bl	20a78 <tmc2208_writeInt>
		(*ptr)++;
   20bd4:	7863      	ldrb	r3, [r4, #1]
   20bd6:	3301      	adds	r3, #1
   20bd8:	7063      	strb	r3, [r4, #1]
	{
		writeConfiguration(tmc2208);
		return;
	}
}
   20bda:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   20bdc:	3201      	adds	r2, #1
   20bde:	7062      	strb	r2, [r4, #1]
   20be0:	e7e0      	b.n	20ba4 <tmc2208_periodicJob+0x10>
		settings = tmc2208->registerResetState;
   20be2:	3004      	adds	r0, #4
		while((*ptr < TMC2208_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2208->registerAccess[*ptr]))
   20be4:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20be8:	7863      	ldrb	r3, [r4, #1]
   20bea:	2a00      	cmp	r2, #0
   20bec:	dbe8      	blt.n	20bc0 <tmc2208_periodicJob+0x2c>
   20bee:	18ea      	adds	r2, r5, r3
   20bf0:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   20bf4:	f002 0242 	and.w	r2, r2, #66	; 0x42
   20bf8:	2a02      	cmp	r2, #2
   20bfa:	d0e1      	beq.n	20bc0 <tmc2208_periodicJob+0x2c>
			(*ptr)++;
   20bfc:	3301      	adds	r3, #1
   20bfe:	7063      	strb	r3, [r4, #1]
   20c00:	e7f0      	b.n	20be4 <tmc2208_periodicJob+0x50>
		if(tmc2208->config->callback)
   20c02:	682a      	ldr	r2, [r5, #0]
   20c04:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   20c08:	b113      	cbz	r3, 20c10 <tmc2208_periodicJob+0x7c>
			((tmc2208_callback)tmc2208->config->callback)(tmc2208, tmc2208->config->state);
   20c0a:	7811      	ldrb	r1, [r2, #0]
   20c0c:	4628      	mov	r0, r5
   20c0e:	4798      	blx	r3
		tmc2208->config->state = CONFIG_READY;
   20c10:	682b      	ldr	r3, [r5, #0]
   20c12:	2200      	movs	r2, #0
   20c14:	701a      	strb	r2, [r3, #0]
   20c16:	e7e0      	b.n	20bda <tmc2208_periodicJob+0x46>

00020c18 <tmc2208_setRegisterResetState>:

void tmc2208_setRegisterResetState(TMC2208TypeDef *tmc2208, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20c18:	1f0b      	subs	r3, r1, #4
   20c1a:	3004      	adds	r0, #4
   20c1c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
	{
		tmc2208->registerResetState[i] = resetState[i];
   20c20:	f853 2f04 	ldr.w	r2, [r3, #4]!
   20c24:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20c28:	428b      	cmp	r3, r1
   20c2a:	d1f9      	bne.n	20c20 <tmc2208_setRegisterResetState+0x8>
	}
}
   20c2c:	4770      	bx	lr

00020c2e <tmc2208_setCallback>:

void tmc2208_setCallback(TMC2208TypeDef *tmc2208, tmc2208_callback callback)
{
	tmc2208->config->callback = (tmc_callback_config) callback;
   20c2e:	6803      	ldr	r3, [r0, #0]
   20c30:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   20c34:	4770      	bx	lr

00020c36 <tmc2208_reset>:

uint8_t tmc2208_reset(TMC2208TypeDef *tmc2208)
{
   20c36:	b530      	push	{r4, r5, lr}
	if(tmc2208->config->state != CONFIG_READY)
   20c38:	6801      	ldr	r1, [r0, #0]
   20c3a:	780a      	ldrb	r2, [r1, #0]
   20c3c:	b982      	cbnz	r2, 20c60 <tmc2208_reset+0x2a>
   20c3e:	f500 7301 	add.w	r3, r0, #516	; 0x204
   20c42:	1d0d      	adds	r5, r1, #4
   20c44:	f500 7021 	add.w	r0, r0, #644	; 0x284
		return false;

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
	{
		tmc2208->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   20c48:	781c      	ldrb	r4, [r3, #0]
   20c4a:	f024 0408 	bic.w	r4, r4, #8
   20c4e:	f803 4b01 	strb.w	r4, [r3], #1
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20c52:	4283      	cmp	r3, r0
		tmc2208->config->shadowRegister[i] = 0;
   20c54:	f845 2b04 	str.w	r2, [r5], #4
	for(size_t i = 0; i < TMC2208_REGISTER_COUNT; i++)
   20c58:	d1f6      	bne.n	20c48 <tmc2208_reset+0x12>
	}

	tmc2208->config->state        = CONFIG_RESET;
   20c5a:	2001      	movs	r0, #1
   20c5c:	8008      	strh	r0, [r1, #0]
	tmc2208->config->configIndex  = 0;

	return true;
}
   20c5e:	bd30      	pop	{r4, r5, pc}
		return false;
   20c60:	2000      	movs	r0, #0
   20c62:	e7fc      	b.n	20c5e <tmc2208_reset+0x28>

00020c64 <tmc2208_restore>:

uint8_t tmc2208_restore(TMC2208TypeDef *tmc2208)
{
	if(tmc2208->config->state != CONFIG_READY)
   20c64:	6803      	ldr	r3, [r0, #0]
   20c66:	781a      	ldrb	r2, [r3, #0]
   20c68:	b91a      	cbnz	r2, 20c72 <tmc2208_restore+0xe>
		return false;

	tmc2208->config->state        = CONFIG_RESTORE;
   20c6a:	2202      	movs	r2, #2
   20c6c:	801a      	strh	r2, [r3, #0]
	tmc2208->config->configIndex  = 0;

	return true;
   20c6e:	2001      	movs	r0, #1
   20c70:	4770      	bx	lr
		return false;
   20c72:	2000      	movs	r0, #0
}
   20c74:	4770      	bx	lr

00020c76 <tmc2208_get_slave>:
{
	UNUSED(tmc2208);

	// The TMC2208 has a hardcoded slave address 0
	return 0;
}
   20c76:	2000      	movs	r0, #0
   20c78:	4770      	bx	lr
   20c7a:	bf00      	nop

00020c7c <tmc2209_writeInt>:
// => CRC wrapper
extern uint8_t tmc2209_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2209_writeInt(TMC2209TypeDef *tmc2209, uint8_t address, int32_t value)
{
   20c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data[8];

	data[0] = 0x05;
   20c7e:	2305      	movs	r3, #5
   20c80:	f88d 3000 	strb.w	r3, [sp]
	data[1] = tmc2209->slaveAddress;
   20c84:	f890 3284 	ldrb.w	r3, [r0, #644]	; 0x284
   20c88:	f88d 3001 	strb.w	r3, [sp, #1]
	data[2] = address | TMC_WRITE_BIT;
   20c8c:	f061 037f 	orn	r3, r1, #127	; 0x7f
   20c90:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = (value >> 24) & 0xFF;
   20c94:	0e13      	lsrs	r3, r2, #24
   20c96:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (value >> 16) & 0xFF;
   20c9a:	1413      	asrs	r3, r2, #16
{
   20c9c:	4604      	mov	r4, r0
	data[4] = (value >> 16) & 0xFF;
   20c9e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20ca2:	460d      	mov	r5, r1
	data[5] = (value >> 8 ) & 0xFF;
   20ca4:	1213      	asrs	r3, r2, #8
	data[6] = (value      ) & 0xFF;
	data[7] = tmc2209_CRC8(data, 7);
   20ca6:	2107      	movs	r1, #7
   20ca8:	4668      	mov	r0, sp
{
   20caa:	4616      	mov	r6, r2
	data[5] = (value >> 8 ) & 0xFF;
   20cac:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = (value      ) & 0xFF;
   20cb0:	f88d 2006 	strb.w	r2, [sp, #6]
	data[7] = tmc2209_CRC8(data, 7);
   20cb4:	f7eb ff4c 	bl	cb50 <tmc2209_CRC8>
   20cb8:	f88d 0007 	strb.w	r0, [sp, #7]

	tmc2209_readWriteArray(tmc2209->config->channel, &data[0], 8, 0);
   20cbc:	6820      	ldr	r0, [r4, #0]
   20cbe:	2300      	movs	r3, #0
   20cc0:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   20cc4:	2208      	movs	r2, #8
   20cc6:	4669      	mov	r1, sp
   20cc8:	f7eb ff3a 	bl	cb40 <tmc2209_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc2209->config->shadowRegister[address] = value;
   20ccc:	6823      	ldr	r3, [r4, #0]
   20cce:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   20cd2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20cd6:	442c      	add	r4, r5
	tmc2209->config->shadowRegister[address] = value;
   20cd8:	605e      	str	r6, [r3, #4]
	tmc2209->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20cda:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   20cde:	f043 0308 	orr.w	r3, r3, #8
   20ce2:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   20ce6:	b002      	add	sp, #8
   20ce8:	bd70      	pop	{r4, r5, r6, pc}

00020cea <tmc2209_readInt>:

int32_t tmc2209_readInt(TMC2209TypeDef *tmc2209, uint8_t address)
{
   20cea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t data[8] = { 0 };
   20cec:	2300      	movs	r3, #0

	address = TMC_ADDRESS(address);
   20cee:	f001 047f 	and.w	r4, r1, #127	; 0x7f
	uint8_t data[8] = { 0 };
   20cf2:	e9cd 3300 	strd	r3, r3, [sp]

	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
   20cf6:	1903      	adds	r3, r0, r4
{
   20cf8:	4605      	mov	r5, r0
	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
   20cfa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20cfe:	07db      	lsls	r3, r3, #31
   20d00:	d405      	bmi.n	20d0e <tmc2209_readInt+0x24>
		return tmc2209->config->shadowRegister[address];
   20d02:	6801      	ldr	r1, [r0, #0]
   20d04:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   20d08:	6860      	ldr	r0, [r4, #4]
	// Byte 7: CRC correct?
	if (data[7] != tmc2209_CRC8(data, 7))
		return 0;

	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
}
   20d0a:	b003      	add	sp, #12
   20d0c:	bd30      	pop	{r4, r5, pc}
	data[0] = 0x05;
   20d0e:	2305      	movs	r3, #5
   20d10:	f88d 3000 	strb.w	r3, [sp]
	data[3] = tmc2209_CRC8(data, 3);
   20d14:	2103      	movs	r1, #3
	data[1] = tmc2209->slaveAddress;
   20d16:	f890 3284 	ldrb.w	r3, [r0, #644]	; 0x284
   20d1a:	f88d 3001 	strb.w	r3, [sp, #1]
	data[3] = tmc2209_CRC8(data, 3);
   20d1e:	4668      	mov	r0, sp
	data[2] = address;
   20d20:	f88d 4002 	strb.w	r4, [sp, #2]
	data[3] = tmc2209_CRC8(data, 3);
   20d24:	f7eb ff14 	bl	cb50 <tmc2209_CRC8>
   20d28:	f88d 0003 	strb.w	r0, [sp, #3]
	tmc2209_readWriteArray(tmc2209->config->channel, data, 4, 8);
   20d2c:	6828      	ldr	r0, [r5, #0]
   20d2e:	2308      	movs	r3, #8
   20d30:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   20d34:	2204      	movs	r2, #4
   20d36:	4669      	mov	r1, sp
   20d38:	f7eb ff02 	bl	cb40 <tmc2209_readWriteArray>
	if (data[0] != 0x05)
   20d3c:	f89d 3000 	ldrb.w	r3, [sp]
   20d40:	2b05      	cmp	r3, #5
   20d42:	d001      	beq.n	20d48 <tmc2209_readInt+0x5e>
		return 0;
   20d44:	2000      	movs	r0, #0
   20d46:	e7e0      	b.n	20d0a <tmc2209_readInt+0x20>
	if (data[1] != 0xFF)
   20d48:	f89d 3001 	ldrb.w	r3, [sp, #1]
   20d4c:	2bff      	cmp	r3, #255	; 0xff
   20d4e:	d1f9      	bne.n	20d44 <tmc2209_readInt+0x5a>
	if (data[2] != address)
   20d50:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20d54:	42a3      	cmp	r3, r4
   20d56:	d1f5      	bne.n	20d44 <tmc2209_readInt+0x5a>
	if (data[7] != tmc2209_CRC8(data, 7))
   20d58:	2107      	movs	r1, #7
   20d5a:	4668      	mov	r0, sp
   20d5c:	f89d 4007 	ldrb.w	r4, [sp, #7]
   20d60:	f7eb fef6 	bl	cb50 <tmc2209_CRC8>
   20d64:	4284      	cmp	r4, r0
   20d66:	d1ed      	bne.n	20d44 <tmc2209_readInt+0x5a>
	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
   20d68:	f8dd 0003 	ldr.w	r0, [sp, #3]
   20d6c:	ba00      	rev	r0, r0
   20d6e:	e7cc      	b.n	20d0a <tmc2209_readInt+0x20>

00020d70 <tmc2209_init>:

void tmc2209_init(TMC2209TypeDef *tmc2209, uint8_t channel, uint8_t slaveAddress, ConfigurationTypeDef *tmc2209_config, const int32_t *registerResetState)
{
   20d70:	b530      	push	{r4, r5, lr}
	tmc2209->slaveAddress = slaveAddress;
   20d72:	f880 2284 	strb.w	r2, [r0, #644]	; 0x284

	tmc2209->config               = tmc2209_config;
	tmc2209->config->callback     = NULL;
   20d76:	2200      	movs	r2, #0
	tmc2209->config               = tmc2209_config;
   20d78:	6003      	str	r3, [r0, #0]
	tmc2209->config->callback     = NULL;
   20d7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tmc2209->config->channel      = channel;
   20d7e:	f883 1210 	strb.w	r1, [r3, #528]	; 0x210
	tmc2209->config->configIndex  = 0;
	tmc2209->config->state        = CONFIG_READY;
   20d82:	801a      	strh	r2, [r3, #0]

	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20d84:	9b03      	ldr	r3, [sp, #12]
   20d86:	4c09      	ldr	r4, [pc, #36]	; (20dac <tmc2209_init+0x3c>)
   20d88:	f500 7201 	add.w	r2, r0, #516	; 0x204
   20d8c:	1d01      	adds	r1, r0, #4
   20d8e:	3b04      	subs	r3, #4
   20d90:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2209->registerAccess[i]      = tmc2209_defaultRegisterAccess[i];
   20d94:	f814 5b01 	ldrb.w	r5, [r4], #1
   20d98:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2209->registerResetState[i]  = registerResetState[i];
   20d9c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   20da0:	f841 5b04 	str.w	r5, [r1], #4
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20da4:	4282      	cmp	r2, r0
   20da6:	d1f5      	bne.n	20d94 <tmc2209_init+0x24>
	}
}
   20da8:	bd30      	pop	{r4, r5, pc}
   20daa:	bf00      	nop
   20dac:	0002a204 	.word	0x0002a204

00020db0 <tmc2209_periodicJob>:
		tmc2209->config->state = CONFIG_READY;
	}
}

void tmc2209_periodicJob(TMC2209TypeDef *tmc2209, uint32_t tick)
{
   20db0:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2209->config->state != CONFIG_READY)
   20db2:	6804      	ldr	r4, [r0, #0]
   20db4:	7823      	ldrb	r3, [r4, #0]
{
   20db6:	4605      	mov	r5, r0
	if(tmc2209->config->state != CONFIG_READY)
   20db8:	b1eb      	cbz	r3, 20df6 <tmc2209_periodicJob+0x46>
	if(tmc2209->config->state == CONFIG_RESTORE)
   20dba:	2b02      	cmp	r3, #2
   20dbc:	d11f      	bne.n	20dfe <tmc2209_periodicJob+0x4e>
		settings = tmc2209->config->shadowRegister;
   20dbe:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2209->registerAccess[*ptr]))
   20dc0:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20dc4:	7862      	ldrb	r2, [r4, #1]
   20dc6:	2b00      	cmp	r3, #0
   20dc8:	db08      	blt.n	20ddc <tmc2209_periodicJob+0x2c>
   20dca:	18ab      	adds	r3, r5, r2
   20dcc:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20dd0:	0799      	lsls	r1, r3, #30
   20dd2:	d511      	bpl.n	20df8 <tmc2209_periodicJob+0x48>
   20dd4:	f003 0348 	and.w	r3, r3, #72	; 0x48
   20dd8:	2b40      	cmp	r3, #64	; 0x40
   20dda:	d00d      	beq.n	20df8 <tmc2209_periodicJob+0x48>
	if(*ptr < TMC2209_REGISTER_COUNT)
   20ddc:	f994 3001 	ldrsb.w	r3, [r4, #1]
   20de0:	7861      	ldrb	r1, [r4, #1]
   20de2:	2b00      	cmp	r3, #0
   20de4:	db1b      	blt.n	20e1e <tmc2209_periodicJob+0x6e>
		tmc2209_writeInt(tmc2209, *ptr, settings[*ptr]);
   20de6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   20dea:	4628      	mov	r0, r5
   20dec:	f7ff ff46 	bl	20c7c <tmc2209_writeInt>
		(*ptr)++;
   20df0:	7863      	ldrb	r3, [r4, #1]
   20df2:	3301      	adds	r3, #1
   20df4:	7063      	strb	r3, [r4, #1]
	{
		writeConfiguration(tmc2209);
		return;
	}
}
   20df6:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   20df8:	3201      	adds	r2, #1
   20dfa:	7062      	strb	r2, [r4, #1]
   20dfc:	e7e0      	b.n	20dc0 <tmc2209_periodicJob+0x10>
		settings = tmc2209->registerResetState;
   20dfe:	3004      	adds	r0, #4
		while((*ptr < TMC2209_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2209->registerAccess[*ptr]))
   20e00:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20e04:	7863      	ldrb	r3, [r4, #1]
   20e06:	2a00      	cmp	r2, #0
   20e08:	dbe8      	blt.n	20ddc <tmc2209_periodicJob+0x2c>
   20e0a:	18ea      	adds	r2, r5, r3
   20e0c:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   20e10:	f002 0242 	and.w	r2, r2, #66	; 0x42
   20e14:	2a02      	cmp	r2, #2
   20e16:	d0e1      	beq.n	20ddc <tmc2209_periodicJob+0x2c>
			(*ptr)++;
   20e18:	3301      	adds	r3, #1
   20e1a:	7063      	strb	r3, [r4, #1]
   20e1c:	e7f0      	b.n	20e00 <tmc2209_periodicJob+0x50>
		if(tmc2209->config->callback)
   20e1e:	682a      	ldr	r2, [r5, #0]
   20e20:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   20e24:	b113      	cbz	r3, 20e2c <tmc2209_periodicJob+0x7c>
			((tmc2209_callback)tmc2209->config->callback)(tmc2209, tmc2209->config->state);
   20e26:	7811      	ldrb	r1, [r2, #0]
   20e28:	4628      	mov	r0, r5
   20e2a:	4798      	blx	r3
		tmc2209->config->state = CONFIG_READY;
   20e2c:	682b      	ldr	r3, [r5, #0]
   20e2e:	2200      	movs	r2, #0
   20e30:	701a      	strb	r2, [r3, #0]
   20e32:	e7e0      	b.n	20df6 <tmc2209_periodicJob+0x46>

00020e34 <tmc2209_setRegisterResetState>:

void tmc2209_setRegisterResetState(TMC2209TypeDef *tmc2209, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20e34:	1f0b      	subs	r3, r1, #4
   20e36:	3004      	adds	r0, #4
   20e38:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc2209->registerResetState[i] = resetState[i];
   20e3c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   20e40:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20e44:	428b      	cmp	r3, r1
   20e46:	d1f9      	bne.n	20e3c <tmc2209_setRegisterResetState+0x8>
}
   20e48:	4770      	bx	lr

00020e4a <tmc2209_setCallback>:

void tmc2209_setCallback(TMC2209TypeDef *tmc2209, tmc2209_callback callback)
{
	tmc2209->config->callback = (tmc_callback_config) callback;
   20e4a:	6803      	ldr	r3, [r0, #0]
   20e4c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   20e50:	4770      	bx	lr

00020e52 <tmc2209_reset>:

uint8_t tmc2209_reset(TMC2209TypeDef *tmc2209)
{
   20e52:	b530      	push	{r4, r5, lr}
	if(tmc2209->config->state != CONFIG_READY)
   20e54:	6801      	ldr	r1, [r0, #0]
   20e56:	780a      	ldrb	r2, [r1, #0]
   20e58:	b982      	cbnz	r2, 20e7c <tmc2209_reset+0x2a>
   20e5a:	f500 7301 	add.w	r3, r0, #516	; 0x204
   20e5e:	1d0d      	adds	r5, r1, #4
   20e60:	f500 7021 	add.w	r0, r0, #644	; 0x284
		return false;

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
	{
		tmc2209->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   20e64:	781c      	ldrb	r4, [r3, #0]
   20e66:	f024 0408 	bic.w	r4, r4, #8
   20e6a:	f803 4b01 	strb.w	r4, [r3], #1
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20e6e:	4283      	cmp	r3, r0
		tmc2209->config->shadowRegister[i] = 0;
   20e70:	f845 2b04 	str.w	r2, [r5], #4
	for(size_t i = 0; i < TMC2209_REGISTER_COUNT; i++)
   20e74:	d1f6      	bne.n	20e64 <tmc2209_reset+0x12>
	}

	tmc2209->config->state        = CONFIG_RESET;
   20e76:	2001      	movs	r0, #1
   20e78:	8008      	strh	r0, [r1, #0]
	tmc2209->config->configIndex  = 0;

	return true;
}
   20e7a:	bd30      	pop	{r4, r5, pc}
		return false;
   20e7c:	2000      	movs	r0, #0
   20e7e:	e7fc      	b.n	20e7a <tmc2209_reset+0x28>

00020e80 <tmc2209_restore>:

uint8_t tmc2209_restore(TMC2209TypeDef *tmc2209)
{
	if(tmc2209->config->state != CONFIG_READY)
   20e80:	6803      	ldr	r3, [r0, #0]
   20e82:	781a      	ldrb	r2, [r3, #0]
   20e84:	b91a      	cbnz	r2, 20e8e <tmc2209_restore+0xe>
		return false;

	tmc2209->config->state        = CONFIG_RESTORE;
   20e86:	2202      	movs	r2, #2
   20e88:	801a      	strh	r2, [r3, #0]
	tmc2209->config->configIndex  = 0;

	return true;
   20e8a:	2001      	movs	r0, #1
   20e8c:	4770      	bx	lr
		return false;
   20e8e:	2000      	movs	r0, #0
}
   20e90:	4770      	bx	lr

00020e92 <tmc2209_get_slave>:

uint8_t tmc2209_get_slave(TMC2209TypeDef *tmc2209)
{
	return tmc2209->slaveAddress;
}
   20e92:	f890 0284 	ldrb.w	r0, [r0, #644]	; 0x284
   20e96:	4770      	bx	lr

00020e98 <tmc2209_set_slave>:

void tmc2209_set_slave(TMC2209TypeDef *tmc2209, uint8_t slaveAddress)
{
	tmc2209->slaveAddress = slaveAddress;
   20e98:	f880 1284 	strb.w	r1, [r0, #644]	; 0x284
}
   20e9c:	4770      	bx	lr
   20e9e:	bf00      	nop

00020ea0 <tmc2224_initConfig>:
extern void tmc2224_readRegister(uint8_t motor, uint8_t address, int32_t *value);
// <= SPI wrapper

void tmc2224_initConfig(TMC2224TypeDef *tmc2224)
{
	tmc2224->velocity      = 0;
   20ea0:	4a0d      	ldr	r2, [pc, #52]	; (20ed8 <tmc2224_initConfig+0x38>)
   20ea2:	2300      	movs	r3, #0
{
   20ea4:	b530      	push	{r4, r5, lr}
   20ea6:	f100 010c 	add.w	r1, r0, #12
	tmc2224->oldTick       = 0;
	tmc2224->oldX          = 0;
   20eaa:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tmc2224->velocity      = 0;
   20eae:	6003      	str	r3, [r0, #0]
	tmc2224->vMaxModified  = false;
   20eb0:	f880 328c 	strb.w	r3, [r0, #652]	; 0x28c

	int i;
	for(i = 0; i < TMC2224_REGISTER_COUNT; i++)
   20eb4:	f102 0480 	add.w	r4, r2, #128	; 0x80
   20eb8:	f500 7303 	add.w	r3, r0, #524	; 0x20c
   20ebc:	f500 7023 	add.w	r0, r0, #652	; 0x28c
	{
		tmc2224->registerAccess[i]      = tmc2224_defaultRegisterAccess[i];
   20ec0:	f812 5b01 	ldrb.w	r5, [r2], #1
   20ec4:	f803 5b01 	strb.w	r5, [r3], #1
		tmc2224->registerResetState[i]  = tmc2224_defaultRegisterResetState[i];
   20ec8:	f854 5b04 	ldr.w	r5, [r4], #4
   20ecc:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC2224_REGISTER_COUNT; i++)
   20ed0:	4283      	cmp	r3, r0
   20ed2:	d1f5      	bne.n	20ec0 <tmc2224_initConfig+0x20>
	}
}
   20ed4:	bd30      	pop	{r4, r5, pc}
   20ed6:	bf00      	nop
   20ed8:	0002a284 	.word	0x0002a284

00020edc <tmc2224_writeConfiguration>:

void tmc2224_writeConfiguration(TMC2224TypeDef *tmc2224, ConfigurationTypeDef *TMC2224_config)
{
   20edc:	b510      	push	{r4, lr}
	uint8_t *ptr = &TMC2224_config->configIndex;
	const int32_t *settings = (TMC2224_config->state == CONFIG_RESTORE) ? TMC2224_config->shadowRegister : tmc2224->registerResetState;
   20ede:	780b      	ldrb	r3, [r1, #0]
   20ee0:	2b02      	cmp	r3, #2
{
   20ee2:	460c      	mov	r4, r1
	const int32_t *settings = (TMC2224_config->state == CONFIG_RESTORE) ? TMC2224_config->shadowRegister : tmc2224->registerResetState;
   20ee4:	bf0c      	ite	eq
   20ee6:	1d0b      	addeq	r3, r1, #4
   20ee8:	f100 030c 	addne.w	r3, r0, #12

	while((*ptr < TMC2224_REGISTER_COUNT) && !TMC_IS_WRITABLE(tmc2224->registerAccess[*ptr]))
   20eec:	f994 2001 	ldrsb.w	r2, [r4, #1]
   20ef0:	7861      	ldrb	r1, [r4, #1]
   20ef2:	2a00      	cmp	r2, #0
   20ef4:	db10      	blt.n	20f18 <tmc2224_writeConfiguration+0x3c>
   20ef6:	1842      	adds	r2, r0, r1
   20ef8:	f892 220c 	ldrb.w	r2, [r2, #524]	; 0x20c
   20efc:	0792      	lsls	r2, r2, #30
   20efe:	d508      	bpl.n	20f12 <tmc2224_writeConfiguration+0x36>
		(*ptr)++;

	if(*ptr < TMC2224_REGISTER_COUNT)
	{
		tmc2224_writeRegister(0, *ptr, settings[*ptr]);
   20f00:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   20f04:	2000      	movs	r0, #0
   20f06:	f7eb ff33 	bl	cd70 <tmc2224_writeRegister>
		(*ptr)++;
   20f0a:	7863      	ldrb	r3, [r4, #1]
   20f0c:	3301      	adds	r3, #1
   20f0e:	7063      	strb	r3, [r4, #1]
	}
	else
	{
		TMC2224_config->state = CONFIG_READY;
	}
}
   20f10:	bd10      	pop	{r4, pc}
		(*ptr)++;
   20f12:	3101      	adds	r1, #1
   20f14:	7061      	strb	r1, [r4, #1]
   20f16:	e7e9      	b.n	20eec <tmc2224_writeConfiguration+0x10>
		TMC2224_config->state = CONFIG_READY;
   20f18:	2300      	movs	r3, #0
   20f1a:	7023      	strb	r3, [r4, #0]
   20f1c:	e7f8      	b.n	20f10 <tmc2224_writeConfiguration+0x34>

00020f1e <tmc2224_periodicJob>:

void tmc2224_periodicJob(uint8_t motor, uint32_t tick, TMC2224TypeDef *tmc2224, ConfigurationTypeDef *TMC2224_config)
{
   20f1e:	b538      	push	{r3, r4, r5, lr}
   20f20:	460d      	mov	r5, r1
   20f22:	4619      	mov	r1, r3
	UNUSED(motor);

	if(TMC2224_config->state != CONFIG_READY && (tick - tmc2224->oldTick) > 2)
   20f24:	781b      	ldrb	r3, [r3, #0]
{
   20f26:	4614      	mov	r4, r2
	if(TMC2224_config->state != CONFIG_READY && (tick - tmc2224->oldTick) > 2)
   20f28:	b13b      	cbz	r3, 20f3a <tmc2224_periodicJob+0x1c>
   20f2a:	6893      	ldr	r3, [r2, #8]
   20f2c:	1aeb      	subs	r3, r5, r3
   20f2e:	2b02      	cmp	r3, #2
   20f30:	d903      	bls.n	20f3a <tmc2224_periodicJob+0x1c>
	{
		tmc2224_writeConfiguration(tmc2224, TMC2224_config);
   20f32:	4610      	mov	r0, r2
   20f34:	f7ff ffd2 	bl	20edc <tmc2224_writeConfiguration>
		tmc2224->oldTick = tick;
   20f38:	60a5      	str	r5, [r4, #8]
	}
}
   20f3a:	bd38      	pop	{r3, r4, r5, pc}

00020f3c <tmc2224_reset>:

uint8_t tmc2224_reset(ConfigurationTypeDef *TMC2224_config)
{
	if(TMC2224_config->state != CONFIG_READY)
   20f3c:	7802      	ldrb	r2, [r0, #0]
{
   20f3e:	4603      	mov	r3, r0
	if(TMC2224_config->state != CONFIG_READY)
   20f40:	b912      	cbnz	r2, 20f48 <tmc2224_reset+0xc>
		return 0;

	TMC2224_config->state        = CONFIG_RESET;
   20f42:	2001      	movs	r0, #1
   20f44:	8018      	strh	r0, [r3, #0]
	TMC2224_config->configIndex  = 0;

	return 1;
   20f46:	4770      	bx	lr
		return 0;
   20f48:	2000      	movs	r0, #0
}
   20f4a:	4770      	bx	lr

00020f4c <tmc2224_restore>:

uint8_t tmc2224_restore(ConfigurationTypeDef *TMC2224_config)
{
	if(TMC2224_config->state != CONFIG_READY)
   20f4c:	7803      	ldrb	r3, [r0, #0]
   20f4e:	b91b      	cbnz	r3, 20f58 <tmc2224_restore+0xc>
		return 0;

	TMC2224_config->state        = CONFIG_RESTORE;
   20f50:	2302      	movs	r3, #2
   20f52:	8003      	strh	r3, [r0, #0]
	TMC2224_config->configIndex  = 0;

	return 1;
   20f54:	2001      	movs	r0, #1
   20f56:	4770      	bx	lr
		return 0;
   20f58:	2000      	movs	r0, #0
}
   20f5a:	4770      	bx	lr

00020f5c <tmc2224_get_slave>:

uint8_t tmc2224_get_slave(TMC2224TypeDef *tmc2224)
{
	return tmc2224->slave;
}
   20f5c:	f890 028d 	ldrb.w	r0, [r0, #653]	; 0x28d
   20f60:	4770      	bx	lr

00020f62 <tmc2224_set_slave>:

void tmc2224_set_slave(TMC2224TypeDef *tmc2224, uint8_t slave)
{
	tmc2224->slave = slave;
   20f62:	f880 128d 	strb.w	r1, [r0, #653]	; 0x28d
}
   20f66:	4770      	bx	lr

00020f68 <tmc2225_writeInt>:
// => CRC wrapper
extern uint8_t tmc2225_CRC8(uint8_t *data, size_t length);
// <= CRC wrapper

void tmc2225_writeInt(TMC2225TypeDef *tmc2225, uint8_t address, int32_t value)
{
   20f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t data[8];

	data[0] = 0x05;
   20f6a:	2305      	movs	r3, #5
   20f6c:	f8ad 3000 	strh.w	r3, [sp]
	data[1] = 0;
	data[2] = address | TMC_WRITE_BIT;
   20f70:	f061 037f 	orn	r3, r1, #127	; 0x7f
   20f74:	f88d 3002 	strb.w	r3, [sp, #2]
	data[3] = (value >> 24) & 0xFF;
   20f78:	0e13      	lsrs	r3, r2, #24
   20f7a:	f88d 3003 	strb.w	r3, [sp, #3]
	data[4] = (value >> 16) & 0xFF;
   20f7e:	1413      	asrs	r3, r2, #16
{
   20f80:	4604      	mov	r4, r0
	data[4] = (value >> 16) & 0xFF;
   20f82:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20f86:	460d      	mov	r5, r1
	data[5] = (value >> 8 ) & 0xFF;
   20f88:	1213      	asrs	r3, r2, #8
	data[6] = (value      ) & 0xFF;
	data[7] = tmc2225_CRC8(data, 7);
   20f8a:	2107      	movs	r1, #7
   20f8c:	4668      	mov	r0, sp
{
   20f8e:	4616      	mov	r6, r2
	data[5] = (value >> 8 ) & 0xFF;
   20f90:	f88d 3005 	strb.w	r3, [sp, #5]
	data[6] = (value      ) & 0xFF;
   20f94:	f88d 2006 	strb.w	r2, [sp, #6]
	data[7] = tmc2225_CRC8(data, 7);
   20f98:	f7ec fcb2 	bl	d900 <tmc2225_CRC8>
   20f9c:	f88d 0007 	strb.w	r0, [sp, #7]

	tmc2225_readWriteArray(tmc2225->config->channel, &data[0], 8, 0);
   20fa0:	6820      	ldr	r0, [r4, #0]
   20fa2:	2300      	movs	r3, #0
   20fa4:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   20fa8:	2208      	movs	r2, #8
   20faa:	4669      	mov	r1, sp
   20fac:	f7ec fca0 	bl	d8f0 <tmc2225_readWriteArray>

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc2225->config->shadowRegister[address] = value;
   20fb0:	6823      	ldr	r3, [r4, #0]
   20fb2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   20fb6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	tmc2225->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20fba:	442c      	add	r4, r5
	tmc2225->config->shadowRegister[address] = value;
   20fbc:	605e      	str	r6, [r3, #4]
	tmc2225->registerAccess[address] |= TMC_ACCESS_DIRTY;
   20fbe:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
   20fc2:	f043 0308 	orr.w	r3, r3, #8
   20fc6:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
}
   20fca:	b002      	add	sp, #8
   20fcc:	bd70      	pop	{r4, r5, r6, pc}

00020fce <tmc2225_readInt>:

int32_t tmc2225_readInt(TMC2225TypeDef *tmc2225, uint8_t address)
{
   20fce:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t data[8] = { 0 };
   20fd0:	2300      	movs	r3, #0

	address = TMC_ADDRESS(address);
   20fd2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
	uint8_t data[8] = { 0 };
   20fd6:	e9cd 3300 	strd	r3, r3, [sp]

	if (!TMC_IS_READABLE(tmc2225->registerAccess[address]))
   20fda:	1903      	adds	r3, r0, r4
{
   20fdc:	4605      	mov	r5, r0
	if (!TMC_IS_READABLE(tmc2225->registerAccess[address]))
   20fde:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   20fe2:	07db      	lsls	r3, r3, #31
   20fe4:	d405      	bmi.n	20ff2 <tmc2225_readInt+0x24>
		return tmc2225->config->shadowRegister[address];
   20fe6:	6801      	ldr	r1, [r0, #0]
   20fe8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   20fec:	6860      	ldr	r0, [r4, #4]
	// Byte 7: CRC correct?
	if (data[7] != tmc2225_CRC8(data, 7))
		return 0;

	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
}
   20fee:	b003      	add	sp, #12
   20ff0:	bd30      	pop	{r4, r5, pc}
	data[0] = 0x05;
   20ff2:	2305      	movs	r3, #5
	data[3] = tmc2225_CRC8(data, 3);
   20ff4:	2103      	movs	r1, #3
   20ff6:	4668      	mov	r0, sp
	data[0] = 0x05;
   20ff8:	f8ad 3000 	strh.w	r3, [sp]
	data[2] = address;
   20ffc:	f88d 4002 	strb.w	r4, [sp, #2]
	data[3] = tmc2225_CRC8(data, 3);
   21000:	f7ec fc7e 	bl	d900 <tmc2225_CRC8>
   21004:	f88d 0003 	strb.w	r0, [sp, #3]
	tmc2225_readWriteArray(tmc2225->config->channel, data, 4, 8);
   21008:	6828      	ldr	r0, [r5, #0]
   2100a:	2308      	movs	r3, #8
   2100c:	f890 0210 	ldrb.w	r0, [r0, #528]	; 0x210
   21010:	2204      	movs	r2, #4
   21012:	4669      	mov	r1, sp
   21014:	f7ec fc6c 	bl	d8f0 <tmc2225_readWriteArray>
	if (data[0] != 0x05)
   21018:	f89d 3000 	ldrb.w	r3, [sp]
   2101c:	2b05      	cmp	r3, #5
   2101e:	d001      	beq.n	21024 <tmc2225_readInt+0x56>
		return 0;
   21020:	2000      	movs	r0, #0
   21022:	e7e4      	b.n	20fee <tmc2225_readInt+0x20>
	if (data[1] != 0xFF)
   21024:	f89d 3001 	ldrb.w	r3, [sp, #1]
   21028:	2bff      	cmp	r3, #255	; 0xff
   2102a:	d1f9      	bne.n	21020 <tmc2225_readInt+0x52>
	if (data[2] != address)
   2102c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   21030:	42a3      	cmp	r3, r4
   21032:	d1f5      	bne.n	21020 <tmc2225_readInt+0x52>
	if (data[7] != tmc2225_CRC8(data, 7))
   21034:	2107      	movs	r1, #7
   21036:	4668      	mov	r0, sp
   21038:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2103c:	f7ec fc60 	bl	d900 <tmc2225_CRC8>
   21040:	4284      	cmp	r4, r0
   21042:	d1ed      	bne.n	21020 <tmc2225_readInt+0x52>
	return (data[3] << 24) | (data[4] << 16) | (data[5] << 8) | data[6];
   21044:	f8dd 0003 	ldr.w	r0, [sp, #3]
   21048:	ba00      	rev	r0, r0
   2104a:	e7d0      	b.n	20fee <tmc2225_readInt+0x20>

0002104c <tmc2225_init>:

void tmc2225_init(TMC2225TypeDef *tmc2225, uint8_t channel, ConfigurationTypeDef *tmc2225_config, const int32_t *registerResetState)
{
   2104c:	b530      	push	{r4, r5, lr}
	tmc2225->config               = tmc2225_config;
	tmc2225->config->callback     = NULL;
   2104e:	2400      	movs	r4, #0
	tmc2225->config               = tmc2225_config;
   21050:	6002      	str	r2, [r0, #0]
	tmc2225->config->callback     = NULL;
   21052:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2225->config->channel      = channel;
	tmc2225->config->configIndex  = 0;
	tmc2225->config->state        = CONFIG_READY;
   21056:	8014      	strh	r4, [r2, #0]
   21058:	4c09      	ldr	r4, [pc, #36]	; (21080 <tmc2225_init+0x34>)
	tmc2225->config->channel      = channel;
   2105a:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   2105e:	3b04      	subs	r3, #4
   21060:	f500 7201 	add.w	r2, r0, #516	; 0x204
   21064:	1d01      	adds	r1, r0, #4
   21066:	f500 7021 	add.w	r0, r0, #644	; 0x284
	{
		tmc2225->registerAccess[i]      = tmc2225_defaultRegisterAccess[i];
   2106a:	f814 5b01 	ldrb.w	r5, [r4], #1
   2106e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2225->registerResetState[i]  = registerResetState[i];
   21072:	f853 5f04 	ldr.w	r5, [r3, #4]!
   21076:	f841 5b04 	str.w	r5, [r1], #4
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   2107a:	4282      	cmp	r2, r0
   2107c:	d1f5      	bne.n	2106a <tmc2225_init+0x1e>
	}
}
   2107e:	bd30      	pop	{r4, r5, pc}
   21080:	0002a504 	.word	0x0002a504

00021084 <tmc2225_periodicJob>:
		tmc2225->config->state = CONFIG_READY;
	}
}

void tmc2225_periodicJob(TMC2225TypeDef *tmc2225, uint32_t tick)
{
   21084:	b538      	push	{r3, r4, r5, lr}
	UNUSED(tick);

	if(tmc2225->config->state != CONFIG_READY)
   21086:	6804      	ldr	r4, [r0, #0]
   21088:	7823      	ldrb	r3, [r4, #0]
{
   2108a:	4605      	mov	r5, r0
	if(tmc2225->config->state != CONFIG_READY)
   2108c:	b1eb      	cbz	r3, 210ca <tmc2225_periodicJob+0x46>
	if(tmc2225->config->state == CONFIG_RESTORE)
   2108e:	2b02      	cmp	r3, #2
   21090:	d11f      	bne.n	210d2 <tmc2225_periodicJob+0x4e>
		settings = tmc2225->config->shadowRegister;
   21092:	1d20      	adds	r0, r4, #4
		while((*ptr < TMC2225_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc2225->registerAccess[*ptr]))
   21094:	f994 3001 	ldrsb.w	r3, [r4, #1]
   21098:	7862      	ldrb	r2, [r4, #1]
   2109a:	2b00      	cmp	r3, #0
   2109c:	db08      	blt.n	210b0 <tmc2225_periodicJob+0x2c>
   2109e:	18ab      	adds	r3, r5, r2
   210a0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
   210a4:	0799      	lsls	r1, r3, #30
   210a6:	d511      	bpl.n	210cc <tmc2225_periodicJob+0x48>
   210a8:	f003 0348 	and.w	r3, r3, #72	; 0x48
   210ac:	2b40      	cmp	r3, #64	; 0x40
   210ae:	d00d      	beq.n	210cc <tmc2225_periodicJob+0x48>
	if(*ptr < TMC2225_REGISTER_COUNT)
   210b0:	f994 3001 	ldrsb.w	r3, [r4, #1]
   210b4:	7861      	ldrb	r1, [r4, #1]
   210b6:	2b00      	cmp	r3, #0
   210b8:	db1b      	blt.n	210f2 <tmc2225_periodicJob+0x6e>
		tmc2225_writeInt(tmc2225, *ptr, settings[*ptr]);
   210ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   210be:	4628      	mov	r0, r5
   210c0:	f7ff ff52 	bl	20f68 <tmc2225_writeInt>
		(*ptr)++;
   210c4:	7863      	ldrb	r3, [r4, #1]
   210c6:	3301      	adds	r3, #1
   210c8:	7063      	strb	r3, [r4, #1]
	{
		writeConfiguration(tmc2225);
		return;
	}
}
   210ca:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   210cc:	3201      	adds	r2, #1
   210ce:	7062      	strb	r2, [r4, #1]
   210d0:	e7e0      	b.n	21094 <tmc2225_periodicJob+0x10>
		settings = tmc2225->registerResetState;
   210d2:	3004      	adds	r0, #4
		while((*ptr < TMC2225_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc2225->registerAccess[*ptr]))
   210d4:	f994 2001 	ldrsb.w	r2, [r4, #1]
   210d8:	7863      	ldrb	r3, [r4, #1]
   210da:	2a00      	cmp	r2, #0
   210dc:	dbe8      	blt.n	210b0 <tmc2225_periodicJob+0x2c>
   210de:	18ea      	adds	r2, r5, r3
   210e0:	f892 2204 	ldrb.w	r2, [r2, #516]	; 0x204
   210e4:	f002 0242 	and.w	r2, r2, #66	; 0x42
   210e8:	2a02      	cmp	r2, #2
   210ea:	d0e1      	beq.n	210b0 <tmc2225_periodicJob+0x2c>
			(*ptr)++;
   210ec:	3301      	adds	r3, #1
   210ee:	7063      	strb	r3, [r4, #1]
   210f0:	e7f0      	b.n	210d4 <tmc2225_periodicJob+0x50>
		if(tmc2225->config->callback)
   210f2:	682a      	ldr	r2, [r5, #0]
   210f4:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   210f8:	b113      	cbz	r3, 21100 <tmc2225_periodicJob+0x7c>
			((tmc2225_callback)tmc2225->config->callback)(tmc2225, tmc2225->config->state);
   210fa:	7811      	ldrb	r1, [r2, #0]
   210fc:	4628      	mov	r0, r5
   210fe:	4798      	blx	r3
		tmc2225->config->state = CONFIG_READY;
   21100:	682b      	ldr	r3, [r5, #0]
   21102:	2200      	movs	r2, #0
   21104:	701a      	strb	r2, [r3, #0]
   21106:	e7e0      	b.n	210ca <tmc2225_periodicJob+0x46>

00021108 <tmc2225_setRegisterResetState>:

void tmc2225_setRegisterResetState(TMC2225TypeDef *tmc2225, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   21108:	1f0b      	subs	r3, r1, #4
   2110a:	3004      	adds	r0, #4
   2110c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
	{
		tmc2225->registerResetState[i] = resetState[i];
   21110:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21114:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   21118:	428b      	cmp	r3, r1
   2111a:	d1f9      	bne.n	21110 <tmc2225_setRegisterResetState+0x8>
	}
}
   2111c:	4770      	bx	lr

0002111e <tmc2225_setCallback>:

void tmc2225_setCallback(TMC2225TypeDef *tmc2225, tmc2225_callback callback)
{
	tmc2225->config->callback = (tmc_callback_config) callback;
   2111e:	6803      	ldr	r3, [r0, #0]
   21120:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   21124:	4770      	bx	lr

00021126 <tmc2225_reset>:

uint8_t tmc2225_reset(TMC2225TypeDef *tmc2225)
{
   21126:	b530      	push	{r4, r5, lr}
	if(tmc2225->config->state != CONFIG_READY)
   21128:	6801      	ldr	r1, [r0, #0]
   2112a:	780a      	ldrb	r2, [r1, #0]
   2112c:	b982      	cbnz	r2, 21150 <tmc2225_reset+0x2a>
   2112e:	f500 7301 	add.w	r3, r0, #516	; 0x204
   21132:	1d0d      	adds	r5, r1, #4
   21134:	f500 7021 	add.w	r0, r0, #644	; 0x284
		return false;

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
	{
		tmc2225->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   21138:	781c      	ldrb	r4, [r3, #0]
   2113a:	f024 0408 	bic.w	r4, r4, #8
   2113e:	f803 4b01 	strb.w	r4, [r3], #1
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   21142:	4283      	cmp	r3, r0
		tmc2225->config->shadowRegister[i] = 0;
   21144:	f845 2b04 	str.w	r2, [r5], #4
	for(size_t i = 0; i < TMC2225_REGISTER_COUNT; i++)
   21148:	d1f6      	bne.n	21138 <tmc2225_reset+0x12>
	}

	tmc2225->config->state        = CONFIG_RESET;
   2114a:	2001      	movs	r0, #1
   2114c:	8008      	strh	r0, [r1, #0]
	tmc2225->config->configIndex  = 0;

	return true;
}
   2114e:	bd30      	pop	{r4, r5, pc}
		return false;
   21150:	2000      	movs	r0, #0
   21152:	e7fc      	b.n	2114e <tmc2225_reset+0x28>

00021154 <tmc2225_restore>:

uint8_t tmc2225_restore(TMC2225TypeDef *tmc2225)
{
	if(tmc2225->config->state != CONFIG_READY)
   21154:	6803      	ldr	r3, [r0, #0]
   21156:	781a      	ldrb	r2, [r3, #0]
   21158:	b91a      	cbnz	r2, 21162 <tmc2225_restore+0xe>
		return false;

	tmc2225->config->state        = CONFIG_RESTORE;
   2115a:	2202      	movs	r2, #2
   2115c:	801a      	strh	r2, [r3, #0]
	tmc2225->config->configIndex  = 0;

	return true;
   2115e:	2001      	movs	r0, #1
   21160:	4770      	bx	lr
		return false;
   21162:	2000      	movs	r0, #0
}
   21164:	4770      	bx	lr

00021166 <tmc2225_set_slave>:

void tmc2225_set_slave(TMC2225TypeDef *tmc2225, uint8_t slave)
{
	tmc2225->slave_address = slave;
   21166:	f880 1284 	strb.w	r1, [r0, #644]	; 0x284
}
   2116a:	4770      	bx	lr

0002116c <tmc2225_get_slave>:

uint8_t tmc2225_get_slave(TMC2225TypeDef *tmc2225)
{
	return tmc2225->slave_address;
}
   2116c:	f890 0284 	ldrb.w	r0, [r0, #644]	; 0x284
   21170:	4770      	bx	lr
   21172:	bf00      	nop

00021174 <readWrite.isra.0>:
		// Increase the address
		write = (write + 1) & TMC2590_REGISTER_COUNT;
	}
}

static void readWrite(TMC2590TypeDef *tmc2590, uint32_t value)
   21174:	b537      	push	{r0, r1, r2, r4, r5, lr}
{	// sending data (value) via spi to TMC262, coping written and received data to shadow register
	static uint8_t rdsel = 0; // number of expected read response

	uint8_t data[] = { BYTE(value, 2), BYTE(value, 1), BYTE(value, 0) };
   21176:	0c0b      	lsrs	r3, r1, #16
   21178:	f88d 3004 	strb.w	r3, [sp, #4]
   2117c:	0a0b      	lsrs	r3, r1, #8
   2117e:	f88d 3005 	strb.w	r3, [sp, #5]

	tmc2590_readWriteArray(tmc2590->config->channel, &data[0], 3);
   21182:	6803      	ldr	r3, [r0, #0]
	uint8_t data[] = { BYTE(value, 2), BYTE(value, 1), BYTE(value, 0) };
   21184:	f88d 1006 	strb.w	r1, [sp, #6]
static void readWrite(TMC2590TypeDef *tmc2590, uint32_t value)
   21188:	4605      	mov	r5, r0
   2118a:	460c      	mov	r4, r1
	tmc2590_readWriteArray(tmc2590->config->channel, &data[0], 3);
   2118c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   21190:	2203      	movs	r2, #3
   21192:	a901      	add	r1, sp, #4
   21194:	f7ed f979 	bl	e48a <tmc2590_readWriteArray>

	tmc2590->config->shadowRegister[rdsel] = _8_32(data[0], data[1], data[2], 0) >> 12;
   21198:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2119c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   211a0:	480e      	ldr	r0, [pc, #56]	; (211dc <readWrite.isra.0+0x68>)
   211a2:	682a      	ldr	r2, [r5, #0]
   211a4:	041b      	lsls	r3, r3, #16
   211a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   211aa:	f89d 1006 	ldrb.w	r1, [sp, #6]
   211ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   211b2:	7801      	ldrb	r1, [r0, #0]
   211b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   211b8:	131b      	asrs	r3, r3, #12
   211ba:	604b      	str	r3, [r1, #4]
	tmc2590->config->shadowRegister[TMC2590_RESPONSE_LATEST] = tmc2590->config->shadowRegister[rdsel];
   211bc:	6113      	str	r3, [r2, #16]

// set virtual read address for next reply given by RDSEL, can only change by setting RDSEL in DRVCONF
	if(TMC2590_GET_ADDRESS(value) == TMC2590_DRVCONF)
   211be:	0ca3      	lsrs	r3, r4, #18
   211c0:	d006      	beq.n	211d0 <readWrite.isra.0+0x5c>
   211c2:	f3c4 4342 	ubfx	r3, r4, #17, #3
   211c6:	2b07      	cmp	r3, #7
		rdsel = TMC2590_GET_RDSEL(value);
   211c8:	bf04      	itt	eq
   211ca:	f3c4 1101 	ubfxeq	r1, r4, #4, #2
   211ce:	7001      	strbeq	r1, [r0, #0]

// write store written value to shadow register
	tmc2590->config->shadowRegister[TMC2590_GET_ADDRESS(value)] = value;
   211d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   211d4:	6054      	str	r4, [r2, #4]
}
   211d6:	b003      	add	sp, #12
   211d8:	bd30      	pop	{r4, r5, pc}
   211da:	bf00      	nop
   211dc:	1fff5990 	.word	0x1fff5990

000211e0 <tmc2590_writeInt>:
	readWrite(tmc2590, value);                                    // write to chip and readout reply
	readWrite(tmc2590, drvConf);
}

void tmc2590_writeInt(TMC2590TypeDef *tmc2590, uint8_t address, int32_t value)
{
   211e0:	460b      	mov	r3, r1
	value = TMC2590_VALUE(value);
	tmc2590->config->shadowRegister[TMC_ADDRESS(address) | TMC2590_WRITE_BIT] = value;
   211e2:	f003 0377 	and.w	r3, r3, #119	; 0x77
	value = TMC2590_VALUE(value);
   211e6:	f3c2 0113 	ubfx	r1, r2, #0, #20
	tmc2590->config->shadowRegister[TMC_ADDRESS(address) | TMC2590_WRITE_BIT] = value;
   211ea:	6802      	ldr	r2, [r0, #0]
   211ec:	f043 0308 	orr.w	r3, r3, #8
   211f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
{
   211f4:	b410      	push	{r4}
	tmc2590->config->shadowRegister[TMC_ADDRESS(address) | TMC2590_WRITE_BIT] = value;
   211f6:	6059      	str	r1, [r3, #4]
	if(!tmc2590->continuousModeEnable)
   211f8:	7903      	ldrb	r3, [r0, #4]
   211fa:	b90b      	cbnz	r3, 21200 <tmc2590_writeInt+0x20>
		readWrite(tmc2590, value);
}
   211fc:	bc10      	pop	{r4}
		readWrite(tmc2590, value);
   211fe:	e7b9      	b.n	21174 <readWrite.isra.0>
}
   21200:	bc10      	pop	{r4}
   21202:	4770      	bx	lr

00021204 <tmc2590_readInt>:

uint32_t tmc2590_readInt(TMC2590TypeDef *tmc2590, uint8_t address)
{
   21204:	b570      	push	{r4, r5, r6, lr}
	if(!tmc2590->continuousModeEnable && !(address & TMC2590_WRITE_BIT))
   21206:	7902      	ldrb	r2, [r0, #4]
   21208:	f001 0308 	and.w	r3, r1, #8
   2120c:	4313      	orrs	r3, r2
{
   2120e:	4605      	mov	r5, r0
   21210:	460c      	mov	r4, r1
	if(!tmc2590->continuousModeEnable && !(address & TMC2590_WRITE_BIT))
   21212:	d115      	bne.n	21240 <tmc2590_readInt+0x3c>
	value = tmc2590_readInt(tmc2590, TMC2590_WRITE_BIT | TMC2590_DRVCONF);  // buffer value amd  drvConf to write back later
   21214:	210f      	movs	r1, #15
   21216:	f7ff fff5 	bl	21204 <tmc2590_readInt>
	value |= TMC2590_SET_RDSEL(rdsel%3);                          // set rdsel
   2121a:	2303      	movs	r3, #3
   2121c:	fbb4 f3f3 	udiv	r3, r4, r3
   21220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21224:	1ae3      	subs	r3, r4, r3
	value &= ~TMC2590_SET_RDSEL(-1);                              // clear RDSEL bits
   21226:	f020 0130 	bic.w	r1, r0, #48	; 0x30
	value |= TMC2590_SET_RDSEL(rdsel%3);                          // set rdsel
   2122a:	b2db      	uxtb	r3, r3
	value = tmc2590_readInt(tmc2590, TMC2590_WRITE_BIT | TMC2590_DRVCONF);  // buffer value amd  drvConf to write back later
   2122c:	4606      	mov	r6, r0
	readWrite(tmc2590, value);                                    // write to chip and readout reply
   2122e:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
   21232:	4628      	mov	r0, r5
   21234:	f7ff ff9e 	bl	21174 <readWrite.isra.0>
	readWrite(tmc2590, drvConf);
   21238:	4631      	mov	r1, r6
   2123a:	4628      	mov	r0, r5
   2123c:	f7ff ff9a 	bl	21174 <readWrite.isra.0>
		readImmediately(tmc2590, address);

	return tmc2590->config->shadowRegister[TMC_ADDRESS(address)];
   21240:	6829      	ldr	r1, [r5, #0]
   21242:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   21246:	eb01 0484 	add.w	r4, r1, r4, lsl #2
}
   2124a:	6860      	ldr	r0, [r4, #4]
   2124c:	bd70      	pop	{r4, r5, r6, pc}

0002124e <tmc2590_init>:

void tmc2590_init(TMC2590TypeDef *tmc2590, uint8_t channel, ConfigurationTypeDef *tmc2590_config, const int32_t *registerResetState)
{
   2124e:	b530      	push	{r4, r5, lr}
	tmc2590->config               = tmc2590_config;
	tmc2590->config->callback     = NULL;
   21250:	2400      	movs	r4, #0
	tmc2590->config               = tmc2590_config;
   21252:	6002      	str	r2, [r0, #0]
	tmc2590->config->callback     = NULL;
   21254:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc2590->config->channel      = channel;
   21258:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210
	tmc2590->config->configIndex  = 0;
	tmc2590->config->state        = CONFIG_READY;
   2125c:	8014      	strh	r4, [r2, #0]

	tmc2590->coolStepActiveValue       = 0;
	tmc2590->coolStepInactiveValue     = 0;
	tmc2590->coolStepThreshold         = 0;

	tmc2590->isStandStillCurrent       = 0;
   2125e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   21262:	8182      	strh	r2, [r0, #12]
	tmc2590->runCurrentScale           = 7;
	tmc2590->standStillCurrentScale    = 3;
   21264:	2203      	movs	r2, #3
   21266:	7382      	strb	r2, [r0, #14]
	tmc2590->continuousModeEnable      = 0;
   21268:	8084      	strh	r4, [r0, #4]
	tmc2590->coolStepActiveValue       = 0;
   2126a:	7184      	strb	r4, [r0, #6]
	tmc2590->coolStepThreshold         = 0;
   2126c:	6084      	str	r4, [r0, #8]
	tmc2590->standStillTimeout         = 0;
   2126e:	6104      	str	r4, [r0, #16]

	for(size_t i = 0; i < TMC2590_REGISTER_COUNT; i++)
   21270:	f100 0218 	add.w	r2, r0, #24
   21274:	4907      	ldr	r1, [pc, #28]	; (21294 <tmc2590_init+0x46>)
   21276:	3020      	adds	r0, #32
   21278:	3b04      	subs	r3, #4
   2127a:	4604      	mov	r4, r0
	{
		tmc2590->registerAccess[i]      = tmc2590_defaultRegisterAccess[i];
   2127c:	f811 5b01 	ldrb.w	r5, [r1], #1
   21280:	f802 5b01 	strb.w	r5, [r2], #1
		tmc2590->registerResetState[i]  = registerResetState[i];
   21284:	f853 5f04 	ldr.w	r5, [r3, #4]!
   21288:	f840 5b04 	str.w	r5, [r0], #4
	for(size_t i = 0; i < TMC2590_REGISTER_COUNT; i++)
   2128c:	42a2      	cmp	r2, r4
   2128e:	d1f5      	bne.n	2127c <tmc2590_init+0x2e>
	}
}
   21290:	bd30      	pop	{r4, r5, pc}
   21292:	bf00      	nop
   21294:	0002a584 	.word	0x0002a584

00021298 <tmc2590_periodicJob>:

void tmc2590_periodicJob(TMC2590TypeDef *tmc2590, uint32_t tick)
{
   21298:	b538      	push	{r3, r4, r5, lr}
   2129a:	460d      	mov	r5, r1
	if (!TMC2590_GET_STST(tmc2590_readInt(tmc2590, TMC2590_RESPONSE_LATEST)))
   2129c:	2103      	movs	r1, #3
{
   2129e:	4604      	mov	r4, r0
	if (!TMC2590_GET_STST(tmc2590_readInt(tmc2590, TMC2590_RESPONSE_LATEST)))
   212a0:	f7ff ffb0 	bl	21204 <tmc2590_readInt>
   212a4:	0603      	lsls	r3, r0, #24
   212a6:	d408      	bmi.n	212ba <tmc2590_periodicJob+0x22>
		tmc2590->standStillTick = tick;
   212a8:	6165      	str	r5, [r4, #20]
		tmc2590->isStandStillCurrent = 0;
   212aa:	2300      	movs	r3, #0
   212ac:	7323      	strb	r3, [r4, #12]
		TMC2590_FIELD_UPDATE(tmc2590, TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, tmc2590->runCurrentScale);
   212ae:	2106      	movs	r1, #6
   212b0:	4620      	mov	r0, r4
   212b2:	f7ff ffa7 	bl	21204 <tmc2590_readInt>
   212b6:	7b62      	ldrb	r2, [r4, #13]
   212b8:	e00b      	b.n	212d2 <tmc2590_periodicJob+0x3a>
	if (tick - tmc2590->standStillTick > tmc2590->standStillTimeout)
   212ba:	6961      	ldr	r1, [r4, #20]
   212bc:	6923      	ldr	r3, [r4, #16]
   212be:	1a6d      	subs	r5, r5, r1
   212c0:	429d      	cmp	r5, r3
   212c2:	d9f2      	bls.n	212aa <tmc2590_periodicJob+0x12>
		tmc2590->isStandStillCurrent = 1;
   212c4:	2301      	movs	r3, #1
   212c6:	7323      	strb	r3, [r4, #12]
		TMC2590_FIELD_UPDATE(tmc2590, TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, tmc2590->standStillCurrentScale);
   212c8:	2106      	movs	r1, #6
   212ca:	4620      	mov	r0, r4
   212cc:	f7ff ff9a 	bl	21204 <tmc2590_readInt>
   212d0:	7ba2      	ldrb	r2, [r4, #14]
		TMC2590_FIELD_UPDATE(tmc2590, TMC2590_SGCSCONF, TMC2590_CS_MASK, TMC2590_CS_SHIFT, tmc2590->runCurrentScale);
   212d2:	f020 001f 	bic.w	r0, r0, #31
   212d6:	f002 021f 	and.w	r2, r2, #31
   212da:	4302      	orrs	r2, r0
   212dc:	2106      	movs	r1, #6
   212de:	4620      	mov	r0, r4
   212e0:	f7ff ff7e 	bl	211e0 <tmc2590_writeInt>
	standStillCurrentLimitation(tmc2590, tick);

	if(tmc2590->continuousModeEnable)
   212e4:	7923      	ldrb	r3, [r4, #4]
   212e6:	b32b      	cbz	r3, 21334 <tmc2590_periodicJob+0x9c>
	value = drvConf = tmc2590_readInt(0, TMC2590_WRITE_BIT | TMC2590_DRVCONF);  // buffer value amd  drvConf to write back later
   212e8:	210f      	movs	r1, #15
   212ea:	2000      	movs	r0, #0
   212ec:	f7ff ff8a 	bl	21204 <tmc2590_readInt>
   212f0:	4605      	mov	r5, r0
	readWrite(tmc2590, value);
   212f2:	f020 0130 	bic.w	r1, r0, #48	; 0x30
   212f6:	4620      	mov	r0, r4
   212f8:	f7ff ff3c 	bl	21174 <readWrite.isra.0>
	readWrite(tmc2590, drvConf);
   212fc:	4629      	mov	r1, r5
	read = (read + 1) % 3;
   212fe:	4d10      	ldr	r5, [pc, #64]	; (21340 <tmc2590_periodicJob+0xa8>)
	readWrite(tmc2590, drvConf);
   21300:	4620      	mov	r0, r4
   21302:	f7ff ff37 	bl	21174 <readWrite.isra.0>
	read = (read + 1) % 3;
   21306:	786b      	ldrb	r3, [r5, #1]
   21308:	2203      	movs	r2, #3
   2130a:	3301      	adds	r3, #1
   2130c:	fbb3 f2f2 	udiv	r2, r3, r2
   21310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   21314:	1a9b      	subs	r3, r3, r2
	readWrite(tmc2590, tmc2590->config->shadowRegister[TMC2590_WRITE_BIT | write]);
   21316:	78aa      	ldrb	r2, [r5, #2]
	read = (read + 1) % 3;
   21318:	706b      	strb	r3, [r5, #1]
	readWrite(tmc2590, tmc2590->config->shadowRegister[TMC2590_WRITE_BIT | write]);
   2131a:	6823      	ldr	r3, [r4, #0]
   2131c:	f042 0208 	orr.w	r2, r2, #8
   21320:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   21324:	4620      	mov	r0, r4
   21326:	6859      	ldr	r1, [r3, #4]
   21328:	f7ff ff24 	bl	21174 <readWrite.isra.0>
	if (write == TMC2590_DRVCTRL)
   2132c:	78ab      	ldrb	r3, [r5, #2]
   2132e:	b913      	cbnz	r3, 21336 <tmc2590_periodicJob+0x9e>
		write = TMC2590_CHOPCONF;
   21330:	2304      	movs	r3, #4
		write = (write + 1) & TMC2590_REGISTER_COUNT;
   21332:	70ab      	strb	r3, [r5, #2]
	{ // continuously write settings to chip and rotate through all reply types to keep data up to date
		continousSync(tmc2590);
	}
}
   21334:	bd38      	pop	{r3, r4, r5, pc}
		write = (write + 1) & TMC2590_REGISTER_COUNT;
   21336:	3301      	adds	r3, #1
   21338:	f003 0308 	and.w	r3, r3, #8
   2133c:	e7f9      	b.n	21332 <tmc2590_periodicJob+0x9a>
   2133e:	bf00      	nop
   21340:	1fff5990 	.word	0x1fff5990

00021344 <tmc2590_reset>:

uint8_t tmc2590_reset(TMC2590TypeDef *tmc2590)
{
   21344:	b510      	push	{r4, lr}
   21346:	4604      	mov	r4, r0
	tmc2590_writeInt(tmc2590, TMC2590_DRVCONF,  tmc2590->registerResetState[TMC2590_DRVCONF]);
   21348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   2134a:	2107      	movs	r1, #7
   2134c:	f7ff ff48 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_DRVCTRL,  tmc2590->registerResetState[TMC2590_DRVCTRL]);
   21350:	6a22      	ldr	r2, [r4, #32]
   21352:	4620      	mov	r0, r4
   21354:	2100      	movs	r1, #0
   21356:	f7ff ff43 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_CHOPCONF, tmc2590->registerResetState[TMC2590_CHOPCONF]);
   2135a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2135c:	4620      	mov	r0, r4
   2135e:	2104      	movs	r1, #4
   21360:	f7ff ff3e 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_SMARTEN,  tmc2590->registerResetState[TMC2590_SMARTEN]);
   21364:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21366:	4620      	mov	r0, r4
   21368:	2105      	movs	r1, #5
   2136a:	f7ff ff39 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_SGCSCONF, tmc2590->registerResetState[TMC2590_SGCSCONF]);
   2136e:	4620      	mov	r0, r4
   21370:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   21372:	2106      	movs	r1, #6
   21374:	f7ff ff34 	bl	211e0 <tmc2590_writeInt>

	return 1;
}
   21378:	2001      	movs	r0, #1
   2137a:	bd10      	pop	{r4, pc}

0002137c <tmc2590_restore>:

uint8_t tmc2590_restore(TMC2590TypeDef *tmc2590)
{
	tmc2590_writeInt(tmc2590, TMC2590_DRVCONF,  tmc2590->config->shadowRegister[TMC2590_DRVCONF | TMC2590_WRITE_BIT]);
   2137c:	6803      	ldr	r3, [r0, #0]
{
   2137e:	b510      	push	{r4, lr}
   21380:	4604      	mov	r4, r0
	tmc2590_writeInt(tmc2590, TMC2590_DRVCONF,  tmc2590->config->shadowRegister[TMC2590_DRVCONF | TMC2590_WRITE_BIT]);
   21382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21384:	2107      	movs	r1, #7
   21386:	f7ff ff2b 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_DRVCTRL,  tmc2590->config->shadowRegister[TMC2590_DRVCTRL | TMC2590_WRITE_BIT]);
   2138a:	6823      	ldr	r3, [r4, #0]
   2138c:	4620      	mov	r0, r4
   2138e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   21390:	2100      	movs	r1, #0
   21392:	f7ff ff25 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_CHOPCONF, tmc2590->config->shadowRegister[TMC2590_CHOPCONF | TMC2590_WRITE_BIT]);
   21396:	6823      	ldr	r3, [r4, #0]
   21398:	4620      	mov	r0, r4
   2139a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2139c:	2104      	movs	r1, #4
   2139e:	f7ff ff1f 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_SMARTEN,  tmc2590->config->shadowRegister[TMC2590_SMARTEN | TMC2590_WRITE_BIT]);
   213a2:	6823      	ldr	r3, [r4, #0]
   213a4:	4620      	mov	r0, r4
   213a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   213a8:	2105      	movs	r1, #5
   213aa:	f7ff ff19 	bl	211e0 <tmc2590_writeInt>
	tmc2590_writeInt(tmc2590, TMC2590_SGCSCONF, tmc2590->config->shadowRegister[TMC2590_SGCSCONF | TMC2590_WRITE_BIT]);
   213ae:	6823      	ldr	r3, [r4, #0]
   213b0:	4620      	mov	r0, r4
   213b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   213b4:	2106      	movs	r1, #6
   213b6:	f7ff ff13 	bl	211e0 <tmc2590_writeInt>

	return 1;
}
   213ba:	2001      	movs	r0, #1
   213bc:	bd10      	pop	{r4, pc}
   213be:	bf00      	nop

000213c0 <tmc2660_initConfig>:
	tmc2660->isStandStillOverCurrent   = 0;
	tmc2660->runCurrentScale           = 5;
	tmc2660->coolStepActiveValue       = 0;
	tmc2660->coolStepInactiveValue     = 0;
	tmc2660->coolStepThreshold         = 0;
	tmc2660->standStillCurrentScale    = 5;
   213c0:	2205      	movs	r2, #5
{
   213c2:	b530      	push	{r4, r5, lr}
	tmc2660->standStillCurrentScale    = 5;
   213c4:	7002      	strb	r2, [r0, #0]
	tmc2660->isStandStillOverCurrent   = 0;
   213c6:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
	tmc2660->velocity                  = 0;
   213ca:	2300      	movs	r3, #0
	tmc2660->isStandStillOverCurrent   = 0;
   213cc:	6082      	str	r2, [r0, #8]
   213ce:	4a0c      	ldr	r2, [pc, #48]	; (21400 <tmc2660_initConfig+0x40>)
	tmc2660->velocity                  = 0;
   213d0:	6143      	str	r3, [r0, #20]
	tmc2660->coolStepThreshold         = 0;
   213d2:	6103      	str	r3, [r0, #16]
	tmc2660->standStillTimeout         = 0;
   213d4:	6043      	str	r3, [r0, #4]
	tmc2660->coolStepInactiveValue     = 0;
   213d6:	8183      	strh	r3, [r0, #12]
	tmc2660->oldX                      = 0;
   213d8:	e9c0 3306 	strd	r3, r3, [r0, #24]

	int i;
	for(i = 0; i < TMC2660_REGISTER_COUNT; i++)
   213dc:	f100 0320 	add.w	r3, r0, #32
   213e0:	3028      	adds	r0, #40	; 0x28
   213e2:	f102 0108 	add.w	r1, r2, #8
   213e6:	4604      	mov	r4, r0
	{
		tmc2660->registerAccess[i]      = tmc2660_defaultRegisterAccess[i];
   213e8:	f812 5b01 	ldrb.w	r5, [r2], #1
   213ec:	f803 5b01 	strb.w	r5, [r3], #1
		tmc2660->registerResetState[i]  = tmc2660_defaultRegisterResetState[i];
   213f0:	f851 5b04 	ldr.w	r5, [r1], #4
   213f4:	f840 5b04 	str.w	r5, [r0], #4
	for(i = 0; i < TMC2660_REGISTER_COUNT; i++)
   213f8:	42a3      	cmp	r3, r4
   213fa:	d1f5      	bne.n	213e8 <tmc2660_initConfig+0x28>
	}
}
   213fc:	bd30      	pop	{r4, r5, pc}
   213fe:	bf00      	nop
   21400:	0002a58c 	.word	0x0002a58c

00021404 <tmc2660_writeConfiguration>:
	//}
	//else
	//{
		//TMC2660_config->state = CONFIG_READY;
	//}
}
   21404:	4770      	bx	lr

00021406 <tmc2660_periodicJob>:

void tmc2660_periodicJob(uint8_t motor, uint32_t tick, TMC2660TypeDef *tmc2660, ConfigurationTypeDef *TMC2660_config)
{
   21406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21408:	461d      	mov	r5, r3
	UNUSED(motor);

	if(tick - tmc2660->oldTick >= 10)
   2140a:	69d3      	ldr	r3, [r2, #28]
   2140c:	1acb      	subs	r3, r1, r3
   2140e:	2b09      	cmp	r3, #9
{
   21410:	460e      	mov	r6, r1
   21412:	4614      	mov	r4, r2
	if(tick - tmc2660->oldTick >= 10)
   21414:	d91a      	bls.n	2144c <tmc2660_periodicJob+0x46>
	if(TMC2660_GET_STST(tmc2660_readInt(0, TMC2660_RESPONSE_LATEST)))
   21416:	2103      	movs	r1, #3
   21418:	2000      	movs	r0, #0
   2141a:	f7ed fe8b 	bl	f134 <tmc2660_readInt>
   2141e:	f010 0f80 	tst.w	r0, #128	; 0x80
   21422:	4b22      	ldr	r3, [pc, #136]	; (214ac <tmc2660_periodicJob+0xa6>)
   21424:	d03c      	beq.n	214a0 <tmc2660_periodicJob+0x9a>
		if(TMC2660->runCurrentScale > TMC2660->standStillCurrentScale)
   21426:	7ae1      	ldrb	r1, [r4, #11]
   21428:	7822      	ldrb	r2, [r4, #0]
   2142a:	4291      	cmp	r1, r2
   2142c:	d938      	bls.n	214a0 <tmc2660_periodicJob+0x9a>
			if(errorTimer++ > TMC2660->standStillTimeout/10)
   2142e:	6818      	ldr	r0, [r3, #0]
			TMC2660->isStandStillOverCurrent = 1;
   21430:	2101      	movs	r1, #1
			if(errorTimer++ > TMC2660->standStillTimeout/10)
   21432:	1842      	adds	r2, r0, r1
   21434:	601a      	str	r2, [r3, #0]
   21436:	270a      	movs	r7, #10
   21438:	6862      	ldr	r2, [r4, #4]
   2143a:	fbb2 f2f7 	udiv	r2, r2, r7
   2143e:	4290      	cmp	r0, r2
			TMC2660->isStandStillOverCurrent = 1;
   21440:	7221      	strb	r1, [r4, #8]
			if(errorTimer++ > TMC2660->standStillTimeout/10)
   21442:	d902      	bls.n	2144a <tmc2660_periodicJob+0x44>
				TMC2660->isStandStillCurrentLimit = 1;
   21444:	7261      	strb	r1, [r4, #9]
				errorTimer = 0;
   21446:	2200      	movs	r2, #0
	errorTimer = 0;
   21448:	601a      	str	r2, [r3, #0]
	{
		standStillCurrentLimitation(tmc2660);
		tmc2660->oldTick = tick;
   2144a:	61e6      	str	r6, [r4, #28]
	}

	if(tmc2660->continuousModeEnable)
   2144c:	7aa3      	ldrb	r3, [r4, #10]
   2144e:	b333      	cbz	r3, 2149e <tmc2660_periodicJob+0x98>
	value = drvConf = tmc2660_readInt(0, TMC2660_WRITE_BIT | TMC2660_DRVCONF);  // buffer value amd  drvConf to write back later
   21450:	210f      	movs	r1, #15
   21452:	2000      	movs	r0, #0
   21454:	f7ed fe6e 	bl	f134 <tmc2660_readInt>
   21458:	4604      	mov	r4, r0
	tmc2660_readWrite(0, value);
   2145a:	f020 0130 	bic.w	r1, r0, #48	; 0x30
   2145e:	2000      	movs	r0, #0
   21460:	f7ed fe7e 	bl	f160 <tmc2660_readWrite>
	tmc2660_readWrite(0, drvConf);
   21464:	4621      	mov	r1, r4
	read = (read + 1) % 3;
   21466:	4c11      	ldr	r4, [pc, #68]	; (214ac <tmc2660_periodicJob+0xa6>)
	tmc2660_readWrite(0, drvConf);
   21468:	2000      	movs	r0, #0
   2146a:	f7ed fe79 	bl	f160 <tmc2660_readWrite>
	tmc2660_readWrite(0, TMC2660_config->shadowRegister[TMC2660_WRITE_BIT | write]);
   2146e:	7963      	ldrb	r3, [r4, #5]
	read = (read + 1) % 3;
   21470:	7922      	ldrb	r2, [r4, #4]
	tmc2660_readWrite(0, TMC2660_config->shadowRegister[TMC2660_WRITE_BIT | write]);
   21472:	f043 0308 	orr.w	r3, r3, #8
   21476:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	read = (read + 1) % 3;
   2147a:	3201      	adds	r2, #1
   2147c:	2103      	movs	r1, #3
   2147e:	fbb2 f1f1 	udiv	r1, r2, r1
   21482:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   21486:	1a52      	subs	r2, r2, r1
	tmc2660_readWrite(0, TMC2660_config->shadowRegister[TMC2660_WRITE_BIT | write]);
   21488:	2000      	movs	r0, #0
   2148a:	6869      	ldr	r1, [r5, #4]
	read = (read + 1) % 3;
   2148c:	7122      	strb	r2, [r4, #4]
	tmc2660_readWrite(0, TMC2660_config->shadowRegister[TMC2660_WRITE_BIT | write]);
   2148e:	f7ed fe67 	bl	f160 <tmc2660_readWrite>
	write = (write == TMC2660_DRVCTRL) ? TMC2660_CHOPCONF : ((write + 1) % TMC2660_REGISTER_COUNT);
   21492:	7963      	ldrb	r3, [r4, #5]
   21494:	b13b      	cbz	r3, 214a6 <tmc2660_periodicJob+0xa0>
   21496:	3301      	adds	r3, #1
   21498:	f003 0307 	and.w	r3, r3, #7
   2149c:	7163      	strb	r3, [r4, #5]
	{ // continuously write settings to chip and rotate through all reply types to keep data up to date
		continousSync(TMC2660_config);
	}
}
   2149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TMC2660->isStandStillOverCurrent  = 0;
   214a0:	2200      	movs	r2, #0
   214a2:	8122      	strh	r2, [r4, #8]
   214a4:	e7d0      	b.n	21448 <tmc2660_periodicJob+0x42>
	write = (write == TMC2660_DRVCTRL) ? TMC2660_CHOPCONF : ((write + 1) % TMC2660_REGISTER_COUNT);
   214a6:	2304      	movs	r3, #4
   214a8:	e7f8      	b.n	2149c <tmc2660_periodicJob+0x96>
   214aa:	bf00      	nop
   214ac:	1fff5994 	.word	0x1fff5994

000214b0 <tmc2660_reset>:

uint8_t tmc2660_reset(TMC2660TypeDef *TMC2660, ConfigurationTypeDef *TMC2660_config)
{
   214b0:	b510      	push	{r4, lr}
	UNUSED(TMC2660_config);

	tmc2660_writeInt(0, TMC2660_DRVCONF,  TMC2660->registerResetState[TMC2660_DRVCONF]);
   214b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
   214b4:	4604      	mov	r4, r0
	tmc2660_writeInt(0, TMC2660_DRVCONF,  TMC2660->registerResetState[TMC2660_DRVCONF]);
   214b6:	2107      	movs	r1, #7
   214b8:	2000      	movs	r0, #0
   214ba:	f7ed fe23 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_DRVCTRL,  TMC2660->registerResetState[TMC2660_DRVCTRL]);
   214be:	2100      	movs	r1, #0
   214c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   214c2:	4608      	mov	r0, r1
   214c4:	f7ed fe1e 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_CHOPCONF, TMC2660->registerResetState[TMC2660_CHOPCONF]);
   214c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   214ca:	2104      	movs	r1, #4
   214cc:	2000      	movs	r0, #0
   214ce:	f7ed fe19 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_SMARTEN,  TMC2660->registerResetState[TMC2660_SMARTEN]);
   214d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   214d4:	2105      	movs	r1, #5
   214d6:	2000      	movs	r0, #0
   214d8:	f7ed fe14 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_SGCSCONF, TMC2660->registerResetState[TMC2660_SGCSCONF]);
   214dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
   214de:	2106      	movs	r1, #6
   214e0:	2000      	movs	r0, #0
   214e2:	f7ed fe0f 	bl	f104 <tmc2660_writeInt>

	return 1;
}
   214e6:	2001      	movs	r0, #1
   214e8:	bd10      	pop	{r4, pc}

000214ea <tmc2660_restore>:

uint8_t tmc2660_restore(ConfigurationTypeDef *TMC2660_config)
{
   214ea:	b510      	push	{r4, lr}
	tmc2660_writeInt(0, TMC2660_DRVCONF,  TMC2660_config->shadowRegister[TMC2660_DRVCONF | TMC2660_WRITE_BIT]);
   214ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
   214ee:	4604      	mov	r4, r0
	tmc2660_writeInt(0, TMC2660_DRVCONF,  TMC2660_config->shadowRegister[TMC2660_DRVCONF | TMC2660_WRITE_BIT]);
   214f0:	2107      	movs	r1, #7
   214f2:	2000      	movs	r0, #0
   214f4:	f7ed fe06 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_DRVCTRL,  TMC2660_config->shadowRegister[TMC2660_DRVCTRL | TMC2660_WRITE_BIT]);
   214f8:	2100      	movs	r1, #0
   214fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   214fc:	4608      	mov	r0, r1
   214fe:	f7ed fe01 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_CHOPCONF, TMC2660_config->shadowRegister[TMC2660_CHOPCONF | TMC2660_WRITE_BIT]);
   21502:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21504:	2104      	movs	r1, #4
   21506:	2000      	movs	r0, #0
   21508:	f7ed fdfc 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_SMARTEN,  TMC2660_config->shadowRegister[TMC2660_SMARTEN | TMC2660_WRITE_BIT]);
   2150c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2150e:	2105      	movs	r1, #5
   21510:	2000      	movs	r0, #0
   21512:	f7ed fdf7 	bl	f104 <tmc2660_writeInt>
	tmc2660_writeInt(0, TMC2660_SGCSCONF, TMC2660_config->shadowRegister[TMC2660_SGCSCONF | TMC2660_WRITE_BIT]);
   21516:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   21518:	2106      	movs	r1, #6
   2151a:	2000      	movs	r0, #0
   2151c:	f7ed fdf2 	bl	f104 <tmc2660_writeInt>

	return 1;
}
   21520:	2001      	movs	r0, #1
   21522:	bd10      	pop	{r4, pc}

00021524 <tmc4330_writeDatagram>:
extern void tmc4330_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc4330_writeDatagram(TMC4330TypeDef *tmc4330, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   21524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21528:	4698      	mov	r8, r3
	int value;
	uint8_t data[5] = { address | TMC4330_WRITE_BIT, x1, x2, x3, x4 };
   2152a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2152e:	f88d 3000 	strb.w	r3, [sp]

	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   21532:	6803      	ldr	r3, [r0, #0]
{
   21534:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   21538:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC4330_WRITE_BIT, x1, x2, x3, x4 };
   2153c:	f88d 2001 	strb.w	r2, [sp, #1]
{
   21540:	4604      	mov	r4, r0
   21542:	4617      	mov	r7, r2
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   21544:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC4330_WRITE_BIT, x1, x2, x3, x4 };
   21548:	f88d 5004 	strb.w	r5, [sp, #4]
{
   2154c:	460e      	mov	r6, r1
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   2154e:	2205      	movs	r2, #5
   21550:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC4330_WRITE_BIT, x1, x2, x3, x4 };
   21552:	f88d 8002 	strb.w	r8, [sp, #2]
   21556:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   2155a:	f7ee fbc5 	bl	fce8 <tmc4330_readWriteArray>

	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc4330->config->shadowRegister[address] = value;
   2155e:	6822      	ldr	r2, [r4, #0]
	tmc4330->status = data[0];
   21560:	f89d 3000 	ldrb.w	r3, [sp]
   21564:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	tmc4330->config->shadowRegister[address] = value;
   21568:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   2156c:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc4330->config->shadowRegister[address] = value;
   21570:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   21574:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   21578:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc4330->registerAccess[address] |= TMC_ACCESS_DIRTY;
   2157c:	4434      	add	r4, r6
	tmc4330->config->shadowRegister[address] = value;
   2157e:	604b      	str	r3, [r1, #4]
	tmc4330->registerAccess[address] |= TMC_ACCESS_DIRTY;
   21580:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   21584:	f043 0308 	orr.w	r3, r3, #8
   21588:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   2158c:	b003      	add	sp, #12
   2158e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00021592 <tmc4330_writeInt>:

void tmc4330_writeInt(TMC4330TypeDef *tmc4330, uint8_t address, int32_t value)
{
   21592:	b507      	push	{r0, r1, r2, lr}
	tmc4330_writeDatagram(tmc4330, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   21594:	b2d3      	uxtb	r3, r2
   21596:	9301      	str	r3, [sp, #4]
   21598:	f3c2 2307 	ubfx	r3, r2, #8, #8
   2159c:	9300      	str	r3, [sp, #0]
   2159e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   215a2:	0e12      	lsrs	r2, r2, #24
   215a4:	f7ff ffbe 	bl	21524 <tmc4330_writeDatagram>
}
   215a8:	b003      	add	sp, #12
   215aa:	f85d fb04 	ldr.w	pc, [sp], #4

000215ae <tmc4330_readInt>:

int32_t tmc4330_readInt(TMC4330TypeDef *tmc4330, uint8_t address)
{
   215ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int value;
	uint8_t data[5];

	address = TMC_ADDRESS(address);
   215b0:	f001 057f 	and.w	r5, r1, #127	; 0x7f

	if(!TMC_IS_READABLE(tmc4330->registerAccess[address]))
   215b4:	1942      	adds	r2, r0, r5
   215b6:	6803      	ldr	r3, [r0, #0]
   215b8:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   215bc:	07d2      	lsls	r2, r2, #31
{
   215be:	4604      	mov	r4, r0
	if(!TMC_IS_READABLE(tmc4330->registerAccess[address]))
   215c0:	d404      	bmi.n	215cc <tmc4330_readInt+0x1e>
		return tmc4330->config->shadowRegister[address];
   215c2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   215c6:	6868      	ldr	r0, [r5, #4]

	tmc4330->status = data[0];
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];

	return value;
}
   215c8:	b003      	add	sp, #12
   215ca:	bd30      	pop	{r4, r5, pc}
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   215cc:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   215d0:	f88d 5000 	strb.w	r5, [sp]
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   215d4:	2205      	movs	r2, #5
   215d6:	4669      	mov	r1, sp
   215d8:	f7ee fb86 	bl	fce8 <tmc4330_readWriteArray>
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   215dc:	6823      	ldr	r3, [r4, #0]
	data[0] = address;
   215de:	f88d 5000 	strb.w	r5, [sp]
	tmc4330_readWriteArray(tmc4330->config->channel, &data[0], 5);
   215e2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   215e6:	2205      	movs	r2, #5
   215e8:	4669      	mov	r1, sp
   215ea:	f7ee fb7d 	bl	fce8 <tmc4330_readWriteArray>
	tmc4330->status = data[0];
   215ee:	f8dd 0001 	ldr.w	r0, [sp, #1]
   215f2:	f89d 3000 	ldrb.w	r3, [sp]
   215f6:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   215fa:	ba00      	rev	r0, r0
	return value;
   215fc:	e7e4      	b.n	215c8 <tmc4330_readInt+0x1a>

000215fe <tmc4330_init>:

// Provide the init function with a channel index (sent back in the SPI callback), a pointer to a ConfigurationTypeDef struct
// and a pointer to a int32_t array (size 128) holding the reset values that shall be used.
void tmc4330_init(TMC4330TypeDef *tmc4330, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   215fe:	b530      	push	{r4, r5, lr}
	tmc4330->velocity  = 0;
   21600:	2400      	movs	r4, #0
	tmc4330->oldTick   = 0;
	tmc4330->oldX      = 0;
   21602:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc4330->velocity  = 0;
   21606:	6044      	str	r4, [r0, #4]
	tmc4330->config    = config;
   21608:	6002      	str	r2, [r0, #0]

	tmc4330->config->callback     = NULL;
   2160a:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc4330->config->channel      = channel;
	tmc4330->config->configIndex  = 0;
	tmc4330->config->state        = CONFIG_READY;
   2160e:	8014      	strh	r4, [r2, #0]
   21610:	4c0a      	ldr	r4, [pc, #40]	; (2163c <tmc4330_init+0x3e>)
	tmc4330->config->channel      = channel;
   21612:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
   21616:	3b04      	subs	r3, #4
   21618:	f500 7204 	add.w	r2, r0, #528	; 0x210
   2161c:	f100 0110 	add.w	r1, r0, #16
   21620:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc4330->registerAccess[i]      = tmc4330_defaultRegisterAccess[i];
   21624:	f814 5b01 	ldrb.w	r5, [r4], #1
   21628:	f802 5b01 	strb.w	r5, [r2], #1
		tmc4330->registerResetState[i]  = registerResetState[i];
   2162c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   21630:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
   21634:	4282      	cmp	r2, r0
   21636:	d1f5      	bne.n	21624 <tmc4330_init+0x26>
	}
}
   21638:	bd30      	pop	{r4, r5, pc}
   2163a:	bf00      	nop
   2163c:	0002a5b4 	.word	0x0002a5b4

00021640 <tmc4330_reset>:

uint8_t tmc4330_reset(TMC4330TypeDef *tmc4330)
{
	if(tmc4330->config->state != CONFIG_READY)
   21640:	6801      	ldr	r1, [r0, #0]
   21642:	780b      	ldrb	r3, [r1, #0]
   21644:	b96b      	cbnz	r3, 21662 <tmc4330_reset+0x22>
   21646:	f500 7304 	add.w	r3, r0, #528	; 0x210
   2164a:	f500 7024 	add.w	r0, r0, #656	; 0x290

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
		tmc4330->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   2164e:	781a      	ldrb	r2, [r3, #0]
   21650:	f022 0208 	bic.w	r2, r2, #8
   21654:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
   21658:	4283      	cmp	r3, r0
   2165a:	d1f8      	bne.n	2164e <tmc4330_reset+0xe>

	tmc4330->config->state        = CONFIG_RESET;
   2165c:	2001      	movs	r0, #1
   2165e:	8008      	strh	r0, [r1, #0]
	tmc4330->config->configIndex  = 0;

	return 1;
   21660:	4770      	bx	lr
		return 0;
   21662:	2000      	movs	r0, #0
}
   21664:	4770      	bx	lr

00021666 <tmc4330_restore>:

uint8_t tmc4330_restore(TMC4330TypeDef *tmc4330)
{
	if(tmc4330->config->state != CONFIG_READY)
   21666:	6803      	ldr	r3, [r0, #0]
   21668:	781a      	ldrb	r2, [r3, #0]
   2166a:	b91a      	cbnz	r2, 21674 <tmc4330_restore+0xe>
		return 0;

	tmc4330->config->state        = CONFIG_RESTORE;
   2166c:	2202      	movs	r2, #2
   2166e:	801a      	strh	r2, [r3, #0]
	tmc4330->config->configIndex  = 0;

	return 1;
   21670:	2001      	movs	r0, #1
   21672:	4770      	bx	lr
		return 0;
   21674:	2000      	movs	r0, #0
}
   21676:	4770      	bx	lr

00021678 <tmc4330_setRegisterResetState>:

void tmc4330_setRegisterResetState(TMC4330TypeDef *tmc4330, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
   21678:	1f0b      	subs	r3, r1, #4
   2167a:	3010      	adds	r0, #16
   2167c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc4330->registerResetState[i] = resetState[i];
   21680:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21684:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC4330_REGISTER_COUNT; i++)
   21688:	428b      	cmp	r3, r1
   2168a:	d1f9      	bne.n	21680 <tmc4330_setRegisterResetState+0x8>
}
   2168c:	4770      	bx	lr

0002168e <tmc4330_setCallback>:

void tmc4330_setCallback(TMC4330TypeDef *tmc4330, tmc4330_callback callback)
{
	tmc4330->config->callback = (tmc_callback_config) callback;
   2168e:	6803      	ldr	r3, [r0, #0]
   21690:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   21694:	4770      	bx	lr

00021696 <tmc4330_discardVelocityDecimals>:
	tmc4330_moveTo(tmc4330, *ticks, velocityMax);
}

int32_t tmc4330_discardVelocityDecimals(int32_t value)
{
	if(abs(value) > 8000000)
   21696:	4b07      	ldr	r3, [pc, #28]	; (216b4 <tmc4330_discardVelocityDecimals+0x1e>)
   21698:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
   2169c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
   216a0:	429a      	cmp	r2, r3
   216a2:	dd04      	ble.n	216ae <tmc4330_discardVelocityDecimals+0x18>
	{
		value = (value < 0) ? -8000000 : 8000000;
   216a4:	4a04      	ldr	r2, [pc, #16]	; (216b8 <tmc4330_discardVelocityDecimals+0x22>)
   216a6:	ea12 0020 	ands.w	r0, r2, r0, asr #32
   216aa:	bf38      	it	cc
   216ac:	4618      	movcc	r0, r3
	}
	return value << 8;
}
   216ae:	0200      	lsls	r0, r0, #8
   216b0:	4770      	bx	lr
   216b2:	bf00      	nop
   216b4:	007a1200 	.word	0x007a1200
   216b8:	ff85ee00 	.word	0xff85ee00

000216bc <tmc4330_rotate>:
{
   216bc:	b538      	push	{r3, r4, r5, lr}
   216be:	460d      	mov	r5, r1
	TMC4330_FIELD_UPDATE(tmc4330, TMC4330_RAMPMODE, TMC4330_OPERATION_MODE_MASK, TMC4330_OPERATION_MODE_SHIFT, 0);
   216c0:	2120      	movs	r1, #32
{
   216c2:	4604      	mov	r4, r0
	TMC4330_FIELD_UPDATE(tmc4330, TMC4330_RAMPMODE, TMC4330_OPERATION_MODE_MASK, TMC4330_OPERATION_MODE_SHIFT, 0);
   216c4:	f7ff ff73 	bl	215ae <tmc4330_readInt>
   216c8:	2120      	movs	r1, #32
   216ca:	f020 0204 	bic.w	r2, r0, #4
   216ce:	4620      	mov	r0, r4
   216d0:	f7ff ff5f 	bl	21592 <tmc4330_writeInt>
	tmc4330_writeInt(tmc4330, TMC4330_VMAX, tmc4330_discardVelocityDecimals(velocity));
   216d4:	4628      	mov	r0, r5
   216d6:	f7ff ffde 	bl	21696 <tmc4330_discardVelocityDecimals>
   216da:	2124      	movs	r1, #36	; 0x24
   216dc:	4602      	mov	r2, r0
   216de:	4620      	mov	r0, r4
}
   216e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4330_writeInt(tmc4330, TMC4330_VMAX, tmc4330_discardVelocityDecimals(velocity));
   216e4:	f7ff bf55 	b.w	21592 <tmc4330_writeInt>

000216e8 <tmc4330_right>:
	tmc4330_rotate(tmc4330, velocity);
   216e8:	f7ff bfe8 	b.w	216bc <tmc4330_rotate>

000216ec <tmc4330_left>:
	tmc4330_rotate(tmc4330, -velocity);
   216ec:	4249      	negs	r1, r1
   216ee:	f7ff bfe5 	b.w	216bc <tmc4330_rotate>

000216f2 <tmc4330_stop>:
	tmc4330_rotate(tmc4330, 0);
   216f2:	2100      	movs	r1, #0
   216f4:	f7ff bfe2 	b.w	216bc <tmc4330_rotate>

000216f8 <tmc4330_moveTo>:
{
   216f8:	b570      	push	{r4, r5, r6, lr}
   216fa:	460d      	mov	r5, r1
	TMC4330_FIELD_UPDATE(tmc4330, TMC4330_RAMPMODE, TMC4330_OPERATION_MODE_MASK, TMC4330_OPERATION_MODE_SHIFT, 1);
   216fc:	2120      	movs	r1, #32
{
   216fe:	4604      	mov	r4, r0
   21700:	4616      	mov	r6, r2
	TMC4330_FIELD_UPDATE(tmc4330, TMC4330_RAMPMODE, TMC4330_OPERATION_MODE_MASK, TMC4330_OPERATION_MODE_SHIFT, 1);
   21702:	f7ff ff54 	bl	215ae <tmc4330_readInt>
   21706:	2120      	movs	r1, #32
   21708:	f040 0204 	orr.w	r2, r0, #4
   2170c:	4620      	mov	r0, r4
   2170e:	f7ff ff40 	bl	21592 <tmc4330_writeInt>
	tmc4330_writeInt(tmc4330, TMC4330_VMAX, tmc4330_discardVelocityDecimals(velocityMax));
   21712:	4630      	mov	r0, r6
   21714:	f7ff ffbf 	bl	21696 <tmc4330_discardVelocityDecimals>
   21718:	2124      	movs	r1, #36	; 0x24
   2171a:	4602      	mov	r2, r0
   2171c:	4620      	mov	r0, r4
   2171e:	f7ff ff38 	bl	21592 <tmc4330_writeInt>
	tmc4330_writeInt(tmc4330, TMC4330_X_TARGET, position);
   21722:	462a      	mov	r2, r5
   21724:	4620      	mov	r0, r4
   21726:	2137      	movs	r1, #55	; 0x37
}
   21728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4330_writeInt(tmc4330, TMC4330_X_TARGET, position);
   2172c:	f7ff bf31 	b.w	21592 <tmc4330_writeInt>

00021730 <tmc4330_moveBy>:
{
   21730:	b570      	push	{r4, r5, r6, lr}
   21732:	460c      	mov	r4, r1
	*ticks += tmc4330_readInt(tmc4330, TMC4330_XACTUAL);
   21734:	2121      	movs	r1, #33	; 0x21
{
   21736:	4605      	mov	r5, r0
   21738:	4616      	mov	r6, r2
	*ticks += tmc4330_readInt(tmc4330, TMC4330_XACTUAL);
   2173a:	f7ff ff38 	bl	215ae <tmc4330_readInt>
   2173e:	6821      	ldr	r1, [r4, #0]
   21740:	4401      	add	r1, r0
   21742:	6021      	str	r1, [r4, #0]
	tmc4330_moveTo(tmc4330, *ticks, velocityMax);
   21744:	4632      	mov	r2, r6
   21746:	4628      	mov	r0, r5
}
   21748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4330_moveTo(tmc4330, *ticks, velocityMax);
   2174c:	f7ff bfd4 	b.w	216f8 <tmc4330_moveTo>

00021750 <tmc4330_calibrateClosedLoop>:

	return 0;
}

uint8_t tmc4330_calibrateClosedLoop(TMC4330TypeDef *tmc4330, uint8_t worker0master1)
{
   21750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21752:	4e5c      	ldr	r6, [pc, #368]	; (218c4 <tmc4330_calibrateClosedLoop+0x174>)
   21754:	4604      	mov	r4, r0
   21756:	7833      	ldrb	r3, [r6, #0]
	static uint32_t oldRamp;

	uint32_t amax = 0;
	uint32_t dmax = 0;

	if(worker0master1 && state == 0)
   21758:	460d      	mov	r5, r1
   2175a:	b3a1      	cbz	r1, 217c6 <tmc4330_calibrateClosedLoop+0x76>
   2175c:	bb9b      	cbnz	r3, 217c6 <tmc4330_calibrateClosedLoop+0x76>
		state = 1;
   2175e:	2301      	movs	r3, #1
   21760:	7033      	strb	r3, [r6, #0]

	switch(state)
	{
	case 1:
		amax = tmc4330_readInt(tmc4330, TMC4330_AMAX);
   21762:	2128      	movs	r1, #40	; 0x28
   21764:	4620      	mov	r0, r4
   21766:	f7ff ff22 	bl	215ae <tmc4330_readInt>
		dmax = tmc4330_readInt(tmc4330, TMC4330_DMAX);
   2176a:	2129      	movs	r1, #41	; 0x29
		amax = tmc4330_readInt(tmc4330, TMC4330_AMAX);
   2176c:	4607      	mov	r7, r0
		dmax = tmc4330_readInt(tmc4330, TMC4330_DMAX);
   2176e:	4620      	mov	r0, r4
   21770:	f7ff ff1d 	bl	215ae <tmc4330_readInt>

		// Set ramp and motion parameters
		oldRamp = tmc4330_readInt(tmc4330, TMC4330_RAMPMODE);
   21774:	2120      	movs	r1, #32
		dmax = tmc4330_readInt(tmc4330, TMC4330_DMAX);
   21776:	4605      	mov	r5, r0
		oldRamp = tmc4330_readInt(tmc4330, TMC4330_RAMPMODE);
   21778:	4620      	mov	r0, r4
   2177a:	f7ff ff18 	bl	215ae <tmc4330_readInt>
		tmc4330_writeInt(tmc4330, TMC4330_RAMPMODE, TMC4330_RAMP_POSITION | TMC4330_RAMP_HOLD);
   2177e:	2204      	movs	r2, #4
		oldRamp = tmc4330_readInt(tmc4330, TMC4330_RAMPMODE);
   21780:	6070      	str	r0, [r6, #4]
		tmc4330_writeInt(tmc4330, TMC4330_RAMPMODE, TMC4330_RAMP_POSITION | TMC4330_RAMP_HOLD);
   21782:	2120      	movs	r1, #32
   21784:	4620      	mov	r0, r4
   21786:	f7ff ff04 	bl	21592 <tmc4330_writeInt>
		tmc4330_writeInt(tmc4330, TMC4330_AMAX, MAX(amax, 1000));
   2178a:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   2178e:	463a      	mov	r2, r7
   21790:	f04f 0128 	mov.w	r1, #40	; 0x28
   21794:	bf38      	it	cc
   21796:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   2179a:	4620      	mov	r0, r4
   2179c:	f7ff fef9 	bl	21592 <tmc4330_writeInt>
		tmc4330_writeInt(tmc4330, TMC4330_DMAX, MAX(dmax, 1000));
   217a0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   217a4:	462a      	mov	r2, r5
   217a6:	f04f 0129 	mov.w	r1, #41	; 0x29
   217aa:	bf38      	it	cc
   217ac:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   217b0:	4620      	mov	r0, r4
   217b2:	f7ff feee 	bl	21592 <tmc4330_writeInt>
		tmc4330_writeInt(tmc4330, TMC4330_VMAX, 0);
   217b6:	2200      	movs	r2, #0
   217b8:	2124      	movs	r1, #36	; 0x24
   217ba:	4620      	mov	r0, r4
   217bc:	f7ff fee9 	bl	21592 <tmc4330_writeInt>

		state = 2;
   217c0:	2302      	movs	r3, #2
		break;
	case 3:
		// Start encoder calibration
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_CL_CALIBRATION_EN_MASK, TMC4330_CL_CALIBRATION_EN_SHIFT, 1);

		state = 4;
   217c2:	7033      	strb	r3, [r6, #0]
		break;
   217c4:	e02b      	b.n	2181e <tmc4330_calibrateClosedLoop+0xce>
	switch(state)
   217c6:	3b01      	subs	r3, #1
   217c8:	2b04      	cmp	r3, #4
   217ca:	d828      	bhi.n	2181e <tmc4330_calibrateClosedLoop+0xce>
   217cc:	a201      	add	r2, pc, #4	; (adr r2, 217d4 <tmc4330_calibrateClosedLoop+0x84>)
   217ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   217d2:	bf00      	nop
   217d4:	00021763 	.word	0x00021763
   217d8:	000217e9 	.word	0x000217e9
   217dc:	00021863 	.word	0x00021863
   217e0:	0002187b 	.word	0x0002187b
   217e4:	000218bd 	.word	0x000218bd
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_CL_CALIBRATION_EN_MASK, TMC4330_CL_CALIBRATION_EN_SHIFT, 0);
   217e8:	2107      	movs	r1, #7
   217ea:	4620      	mov	r0, r4
   217ec:	f7ff fedf 	bl	215ae <tmc4330_readInt>
   217f0:	2107      	movs	r1, #7
   217f2:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   217f6:	4620      	mov	r0, r4
   217f8:	f7ff fecb 	bl	21592 <tmc4330_writeInt>
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_REGULATION_MODUS_MASK, TMC4330_REGULATION_MODUS_SHIFT, 1);
   217fc:	2107      	movs	r1, #7
   217fe:	4620      	mov	r0, r4
   21800:	f7ff fed5 	bl	215ae <tmc4330_readInt>
   21804:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   21808:	2107      	movs	r1, #7
   2180a:	4620      	mov	r0, r4
   2180c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   21810:	f7ff febf 	bl	21592 <tmc4330_writeInt>
	if(tmc4330_readInt(tmc4330, TMC4330_VACTUAL) != 0)
   21814:	2122      	movs	r1, #34	; 0x22
   21816:	4620      	mov	r0, r4
   21818:	f7ff fec9 	bl	215ae <tmc4330_readInt>
   2181c:	b108      	cbz	r0, 21822 <tmc4330_calibrateClosedLoop+0xd2>
		return 1;
		break;
	default:
		break;
	}
	return 0;
   2181e:	2500      	movs	r5, #0
   21820:	e01d      	b.n	2185e <tmc4330_calibrateClosedLoop+0x10e>
	tmc4330_writeInt(tmc4330, TMC4330_RAMPMODE, 4);
   21822:	2204      	movs	r2, #4
   21824:	2120      	movs	r1, #32
   21826:	4620      	mov	r0, r4
   21828:	f7ff feb3 	bl	21592 <tmc4330_writeInt>
	tmc4330_writeInt(tmc4330, TMC4330_VMAX, 10000 << 8);
   2182c:	4a26      	ldr	r2, [pc, #152]	; (218c8 <tmc4330_calibrateClosedLoop+0x178>)
   2182e:	2124      	movs	r1, #36	; 0x24
   21830:	4620      	mov	r0, r4
   21832:	f7ff feae 	bl	21592 <tmc4330_writeInt>
	stepCount = TMC4330_FIELD_READ(tmc4330, TMC4330_MSCNT_RD, TMC4330_MSCNT_MASK, TMC4330_MSCNT_SHIFT);
   21836:	2179      	movs	r1, #121	; 0x79
   21838:	4620      	mov	r0, r4
   2183a:	f7ff feb8 	bl	215ae <tmc4330_readInt>
	stepCount = stepCount % 256;
   2183e:	b2c2      	uxtb	r2, r0
	if(stepCount == 0)
   21840:	f1d2 0580 	rsbs	r5, r2, #128	; 0x80
   21844:	d009      	beq.n	2185a <tmc4330_calibrateClosedLoop+0x10a>
	stepCount += tmc4330_readInt(tmc4330, TMC4330_XACTUAL);
   21846:	2121      	movs	r1, #33	; 0x21
   21848:	4620      	mov	r0, r4
   2184a:	f7ff feb0 	bl	215ae <tmc4330_readInt>
	tmc4330_writeInt(tmc4330, TMC4330_X_TARGET, stepCount);
   2184e:	2137      	movs	r1, #55	; 0x37
   21850:	182a      	adds	r2, r5, r0
   21852:	4620      	mov	r0, r4
   21854:	f7ff fe9d 	bl	21592 <tmc4330_writeInt>
	return 0;
   21858:	e7e1      	b.n	2181e <tmc4330_calibrateClosedLoop+0xce>
			state = 3;
   2185a:	2303      	movs	r3, #3
		state = 5;
   2185c:	7033      	strb	r3, [r6, #0]
}
   2185e:	4628      	mov	r0, r5
   21860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_CL_CALIBRATION_EN_MASK, TMC4330_CL_CALIBRATION_EN_SHIFT, 1);
   21862:	2107      	movs	r1, #7
   21864:	4620      	mov	r0, r4
   21866:	f7ff fea2 	bl	215ae <tmc4330_readInt>
   2186a:	2107      	movs	r1, #7
   2186c:	f040 7280 	orr.w	r2, r0, #16777216	; 0x1000000
   21870:	4620      	mov	r0, r4
   21872:	f7ff fe8e 	bl	21592 <tmc4330_writeInt>
		state = 4;
   21876:	2304      	movs	r3, #4
   21878:	e7a3      	b.n	217c2 <tmc4330_calibrateClosedLoop+0x72>
		if(worker0master1)
   2187a:	2d00      	cmp	r5, #0
   2187c:	d1cf      	bne.n	2181e <tmc4330_calibrateClosedLoop+0xce>
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_CL_CALIBRATION_EN_MASK, TMC4330_CL_CALIBRATION_EN_SHIFT, 0);
   2187e:	2107      	movs	r1, #7
   21880:	4620      	mov	r0, r4
   21882:	f7ff fe94 	bl	215ae <tmc4330_readInt>
   21886:	2107      	movs	r1, #7
   21888:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   2188c:	4620      	mov	r0, r4
   2188e:	f7ff fe80 	bl	21592 <tmc4330_writeInt>
		TMC4330_FIELD_UPDATE(tmc4330, TMC4330_ENC_IN_CONF, TMC4330_REGULATION_MODUS_MASK, TMC4330_REGULATION_MODUS_SHIFT, 1);
   21892:	2107      	movs	r1, #7
   21894:	4620      	mov	r0, r4
   21896:	f7ff fe8a 	bl	215ae <tmc4330_readInt>
   2189a:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   2189e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   218a2:	2107      	movs	r1, #7
   218a4:	4620      	mov	r0, r4
   218a6:	f7ff fe74 	bl	21592 <tmc4330_writeInt>
		tmc4330_writeInt(tmc4330, TMC4330_RAMPMODE, TMC4330_RAMP_POSITION | oldRamp);
   218aa:	6872      	ldr	r2, [r6, #4]
   218ac:	2120      	movs	r1, #32
   218ae:	f042 0204 	orr.w	r2, r2, #4
   218b2:	4620      	mov	r0, r4
   218b4:	f7ff fe6d 	bl	21592 <tmc4330_writeInt>
		state = 5;
   218b8:	2305      	movs	r3, #5
   218ba:	e7cf      	b.n	2185c <tmc4330_calibrateClosedLoop+0x10c>
		state = 0;
   218bc:	2300      	movs	r3, #0
   218be:	7033      	strb	r3, [r6, #0]
		return 1;
   218c0:	2501      	movs	r5, #1
   218c2:	e7cc      	b.n	2185e <tmc4330_calibrateClosedLoop+0x10e>
   218c4:	1fff599c 	.word	0x1fff599c
   218c8:	00271000 	.word	0x00271000

000218cc <tmc4330_periodicJob>:
{
   218cc:	b570      	push	{r4, r5, r6, lr}
	if(tmc4330->config->state != CONFIG_READY)
   218ce:	6805      	ldr	r5, [r0, #0]
{
   218d0:	460e      	mov	r6, r1
	if(tmc4330->config->state != CONFIG_READY)
   218d2:	7829      	ldrb	r1, [r5, #0]
{
   218d4:	4604      	mov	r4, r0
	if(tmc4330->config->state != CONFIG_READY)
   218d6:	2900      	cmp	r1, #0
   218d8:	d03c      	beq.n	21954 <tmc4330_periodicJob+0x88>
	if(tmc4330->config->state == CONFIG_RESTORE)
   218da:	2902      	cmp	r1, #2
   218dc:	d11f      	bne.n	2191e <tmc4330_periodicJob+0x52>
		settings = &tmc4330->config->shadowRegister[0];
   218de:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC4330_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc4330->registerAccess[*ptr]))
   218e0:	f995 3001 	ldrsb.w	r3, [r5, #1]
   218e4:	786a      	ldrb	r2, [r5, #1]
   218e6:	2b00      	cmp	r3, #0
   218e8:	db08      	blt.n	218fc <tmc4330_periodicJob+0x30>
   218ea:	18a3      	adds	r3, r4, r2
   218ec:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   218f0:	0799      	lsls	r1, r3, #30
   218f2:	d511      	bpl.n	21918 <tmc4330_periodicJob+0x4c>
   218f4:	f003 0348 	and.w	r3, r3, #72	; 0x48
   218f8:	2b40      	cmp	r3, #64	; 0x40
   218fa:	d00d      	beq.n	21918 <tmc4330_periodicJob+0x4c>
	if (*ptr < TMC4330_REGISTER_COUNT) {
   218fc:	f995 3001 	ldrsb.w	r3, [r5, #1]
   21900:	7869      	ldrb	r1, [r5, #1]
   21902:	2b00      	cmp	r3, #0
   21904:	db1b      	blt.n	2193e <tmc4330_periodicJob+0x72>
		tmc4330_writeInt(tmc4330, *ptr, settings[*ptr]);
   21906:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2190a:	4620      	mov	r0, r4
   2190c:	f7ff fe41 	bl	21592 <tmc4330_writeInt>
		(*ptr)++;
   21910:	786b      	ldrb	r3, [r5, #1]
   21912:	3301      	adds	r3, #1
   21914:	706b      	strb	r3, [r5, #1]
}
   21916:	bd70      	pop	{r4, r5, r6, pc}
			(*ptr)++;
   21918:	3201      	adds	r2, #1
   2191a:	706a      	strb	r2, [r5, #1]
   2191c:	e7e0      	b.n	218e0 <tmc4330_periodicJob+0x14>
		settings = &tmc4330->registerResetState[0];
   2191e:	3010      	adds	r0, #16
		while((*ptr < TMC4330_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc4330->registerAccess[*ptr]))
   21920:	f995 2001 	ldrsb.w	r2, [r5, #1]
   21924:	786b      	ldrb	r3, [r5, #1]
   21926:	2a00      	cmp	r2, #0
   21928:	dbe8      	blt.n	218fc <tmc4330_periodicJob+0x30>
   2192a:	18e2      	adds	r2, r4, r3
   2192c:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   21930:	f002 0242 	and.w	r2, r2, #66	; 0x42
   21934:	2a02      	cmp	r2, #2
   21936:	d0e1      	beq.n	218fc <tmc4330_periodicJob+0x30>
			(*ptr)++;
   21938:	3301      	adds	r3, #1
   2193a:	706b      	strb	r3, [r5, #1]
   2193c:	e7f0      	b.n	21920 <tmc4330_periodicJob+0x54>
		if(tmc4330->config->callback)
   2193e:	6822      	ldr	r2, [r4, #0]
   21940:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   21944:	b113      	cbz	r3, 2194c <tmc4330_periodicJob+0x80>
			((tmc4330_callback)tmc4330->config->callback)(tmc4330, tmc4330->config->state);
   21946:	7811      	ldrb	r1, [r2, #0]
   21948:	4620      	mov	r0, r4
   2194a:	4798      	blx	r3
		tmc4330->config->state = CONFIG_READY;
   2194c:	6823      	ldr	r3, [r4, #0]
   2194e:	2200      	movs	r2, #0
   21950:	701a      	strb	r2, [r3, #0]
   21952:	e7e0      	b.n	21916 <tmc4330_periodicJob+0x4a>
	if((tick - tmc4330->oldTick) != 0)
   21954:	68c3      	ldr	r3, [r0, #12]
   21956:	42b3      	cmp	r3, r6
   21958:	d0dd      	beq.n	21916 <tmc4330_periodicJob+0x4a>
		tmc4330_calibrateClosedLoop(tmc4330, 0);
   2195a:	f7ff fef9 	bl	21750 <tmc4330_calibrateClosedLoop>
		tmc4330->oldTick = tick;
   2195e:	60e6      	str	r6, [r4, #12]
   21960:	e7d9      	b.n	21916 <tmc4330_periodicJob+0x4a>
   21962:	bf00      	nop

00021964 <tmc4331_writeDatagram>:
extern void tmc4331_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc4331_writeDatagram(TMC4331TypeDef *tmc4331, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   21964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21968:	4698      	mov	r8, r3
	int value;
	uint8_t data[5] = { address | TMC4331_WRITE_BIT, x1, x2, x3, x4 };
   2196a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2196e:	f88d 3000 	strb.w	r3, [sp]

	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21972:	6803      	ldr	r3, [r0, #0]
{
   21974:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   21978:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC4331_WRITE_BIT, x1, x2, x3, x4 };
   2197c:	f88d 2001 	strb.w	r2, [sp, #1]
{
   21980:	4604      	mov	r4, r0
   21982:	4617      	mov	r7, r2
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21984:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC4331_WRITE_BIT, x1, x2, x3, x4 };
   21988:	f88d 5004 	strb.w	r5, [sp, #4]
{
   2198c:	460e      	mov	r6, r1
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   2198e:	2205      	movs	r2, #5
   21990:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC4331_WRITE_BIT, x1, x2, x3, x4 };
   21992:	f88d 8002 	strb.w	r8, [sp, #2]
   21996:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   2199a:	f7ee fd8f 	bl	104bc <tmc4331_readWriteArray>

	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc4331->config->shadowRegister[address] = value;
   2199e:	6822      	ldr	r2, [r4, #0]
	tmc4331->status = data[0];
   219a0:	f89d 3000 	ldrb.w	r3, [sp]
   219a4:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	tmc4331->config->shadowRegister[address] = value;
   219a8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   219ac:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc4331->config->shadowRegister[address] = value;
   219b0:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   219b4:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   219b8:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc4331->registerAccess[address] |= TMC_ACCESS_DIRTY;
   219bc:	4434      	add	r4, r6
	tmc4331->config->shadowRegister[address] = value;
   219be:	604b      	str	r3, [r1, #4]
	tmc4331->registerAccess[address] |= TMC_ACCESS_DIRTY;
   219c0:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   219c4:	f043 0308 	orr.w	r3, r3, #8
   219c8:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   219cc:	b003      	add	sp, #12
   219ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000219d2 <tmc4331_writeInt>:

void tmc4331_writeInt(TMC4331TypeDef *tmc4331, uint8_t address, int32_t value)
{
   219d2:	b507      	push	{r0, r1, r2, lr}
	tmc4331_writeDatagram(tmc4331, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   219d4:	b2d3      	uxtb	r3, r2
   219d6:	9301      	str	r3, [sp, #4]
   219d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
   219dc:	9300      	str	r3, [sp, #0]
   219de:	f3c2 4307 	ubfx	r3, r2, #16, #8
   219e2:	0e12      	lsrs	r2, r2, #24
   219e4:	f7ff ffbe 	bl	21964 <tmc4331_writeDatagram>
}
   219e8:	b003      	add	sp, #12
   219ea:	f85d fb04 	ldr.w	pc, [sp], #4

000219ee <tmc4331_readInt>:

int32_t tmc4331_readInt(TMC4331TypeDef *tmc4331, uint8_t address)
{
   219ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int value;
	uint8_t data[5];

	address = TMC_ADDRESS(address);
   219f0:	f001 057f 	and.w	r5, r1, #127	; 0x7f

	if(!TMC_IS_READABLE(tmc4331->registerAccess[address]))
   219f4:	1942      	adds	r2, r0, r5
   219f6:	6803      	ldr	r3, [r0, #0]
   219f8:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   219fc:	07d2      	lsls	r2, r2, #31
{
   219fe:	4604      	mov	r4, r0
	if(!TMC_IS_READABLE(tmc4331->registerAccess[address]))
   21a00:	d404      	bmi.n	21a0c <tmc4331_readInt+0x1e>
		return tmc4331->config->shadowRegister[address];
   21a02:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   21a06:	6868      	ldr	r0, [r5, #4]

	tmc4331->status = data[0];
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];

	return value;
}
   21a08:	b003      	add	sp, #12
   21a0a:	bd30      	pop	{r4, r5, pc}
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21a0c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   21a10:	f88d 5000 	strb.w	r5, [sp]
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21a14:	2205      	movs	r2, #5
   21a16:	4669      	mov	r1, sp
   21a18:	f7ee fd50 	bl	104bc <tmc4331_readWriteArray>
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21a1c:	6823      	ldr	r3, [r4, #0]
	data[0] = address;
   21a1e:	f88d 5000 	strb.w	r5, [sp]
	tmc4331_readWriteArray(tmc4331->config->channel, &data[0], 5);
   21a22:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   21a26:	2205      	movs	r2, #5
   21a28:	4669      	mov	r1, sp
   21a2a:	f7ee fd47 	bl	104bc <tmc4331_readWriteArray>
	tmc4331->status = data[0];
   21a2e:	f8dd 0001 	ldr.w	r0, [sp, #1]
   21a32:	f89d 3000 	ldrb.w	r3, [sp]
   21a36:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   21a3a:	ba00      	rev	r0, r0
	return value;
   21a3c:	e7e4      	b.n	21a08 <tmc4331_readInt+0x1a>

00021a3e <tmc4331_readWriteCover>:

// Send [length] bytes stored in the [data] array to a driver attached to the TMC4331
// and overwrite [data] with the replies. data[0] is the first byte sent and received.
void tmc4331_readWriteCover(TMC4331TypeDef *tmc4331, uint8_t *data, size_t length)
{
   21a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Buffering old values to not interrupt manual covering
	int32_t old_high = tmc4331->config->shadowRegister[TMC4331_COVER_HIGH_WR];
	int32_t old_low = tmc4331->config->shadowRegister[TMC4331_COVER_LOW_WR];

	// Check if datagram length is valid
	if(length == 0 || length > 8)
   21a42:	1e53      	subs	r3, r2, #1
   21a44:	2b07      	cmp	r3, #7
{
   21a46:	b086      	sub	sp, #24
   21a48:	4604      	mov	r4, r0
   21a4a:	460e      	mov	r6, r1
   21a4c:	4615      	mov	r5, r2
	if(length == 0 || length > 8)
   21a4e:	d845      	bhi.n	21adc <tmc4331_readWriteCover+0x9e>
	int32_t old_high = tmc4331->config->shadowRegister[TMC4331_COVER_HIGH_WR];
   21a50:	6803      	ldr	r3, [r0, #0]
   21a52:	188f      	adds	r7, r1, r2
	int32_t old_low = tmc4331->config->shadowRegister[TMC4331_COVER_LOW_WR];
   21a54:	e9d3 9a6d 	ldrd	r9, sl, [r3, #436]	; 0x1b4
		return;

	uint8_t bytes[8] = { 0 };
   21a58:	f10d 0810 	add.w	r8, sp, #16
   21a5c:	2300      	movs	r3, #0
   21a5e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	uint32_t tmp;
	size_t i;

	// Copy data into buffer of maximum cover datagram length (8 bytes)
	for(i = 0; i < length; i++)
   21a62:	4642      	mov	r2, r8
   21a64:	463b      	mov	r3, r7
   21a66:	42b3      	cmp	r3, r6
   21a68:	d13b      	bne.n	21ae2 <tmc4331_readWriteCover+0xa4>
		bytes[i] = data[length-i-1];

	// Send the datagram
	if(length > 4)
   21a6a:	2d04      	cmp	r5, #4
   21a6c:	d90d      	bls.n	21a8a <tmc4331_readWriteCover+0x4c>
		tmc4331_writeDatagram(tmc4331, TMC4331_COVER_HIGH_WR, bytes[7], bytes[6], bytes[5], bytes[4]);
   21a6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21a72:	9301      	str	r3, [sp, #4]
   21a74:	f89d 3015 	ldrb.w	r3, [sp, #21]
   21a78:	9300      	str	r3, [sp, #0]
   21a7a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   21a7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21a82:	216d      	movs	r1, #109	; 0x6d
   21a84:	4620      	mov	r0, r4
   21a86:	f7ff ff6d 	bl	21964 <tmc4331_writeDatagram>

	tmc4331_writeDatagram(tmc4331, TMC4331_COVER_LOW_WR, bytes[3], bytes[2], bytes[1], bytes[0]);
   21a8a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   21a8e:	9301      	str	r3, [sp, #4]
   21a90:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21a94:	9300      	str	r3, [sp, #0]
   21a96:	f89d 2013 	ldrb.w	r2, [sp, #19]
   21a9a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21a9e:	216c      	movs	r1, #108	; 0x6c
   21aa0:	4620      	mov	r0, r4
   21aa2:	f7ff ff5f 	bl	21964 <tmc4331_writeDatagram>

	// Wait for datagram completion
	// TODO CHECK 3: Get the waiting for cover completion done properly (LH)
	for(i = 0; i < 100; i++)
   21aa6:	2300      	movs	r3, #0
   21aa8:	9303      	str	r3, [sp, #12]
   21aaa:	9b03      	ldr	r3, [sp, #12]
   21aac:	2b63      	cmp	r3, #99	; 0x63
   21aae:	d91d      	bls.n	21aec <tmc4331_readWriteCover+0xae>
		tmp = ACCESS_ONCE(i);

	// Read the reply
	if(length > 4)
   21ab0:	2d04      	cmp	r5, #4
   21ab2:	d904      	bls.n	21abe <tmc4331_readWriteCover+0x80>
	{
		tmp = tmc4331_readInt(tmc4331, TMC4331_COVER_DRV_HIGH_RD);
   21ab4:	216f      	movs	r1, #111	; 0x6f
   21ab6:	4620      	mov	r0, r4
   21ab8:	f7ff ff99 	bl	219ee <tmc4331_readInt>
		bytes[4] = BYTE(tmp, 0);
   21abc:	9005      	str	r0, [sp, #20]
		bytes[5] = BYTE(tmp, 1);
		bytes[6] = BYTE(tmp, 2);
		bytes[7] = BYTE(tmp, 3);
	}
	tmp = tmc4331_readInt(tmc4331, TMC4331_COVER_DRV_LOW_RD);
   21abe:	216e      	movs	r1, #110	; 0x6e
   21ac0:	4620      	mov	r0, r4
   21ac2:	f7ff ff94 	bl	219ee <tmc4331_readInt>
	bytes[0] = BYTE(tmp, 0);
   21ac6:	9004      	str	r0, [sp, #16]
	bytes[1] = BYTE(tmp, 1);
	bytes[2] = BYTE(tmp, 2);
	bytes[3] = BYTE(tmp, 3);

	// Write the reply to the data array
	for(i = 0; i < length; i++)
   21ac8:	42b7      	cmp	r7, r6
   21aca:	d112      	bne.n	21af2 <tmc4331_readWriteCover+0xb4>
	{
		data[length-i-1] = bytes[i];
	}

	// Rewriting old values to prevent interrupting manual covering. Imitating unchanged values and state.
	tmc4331_writeInt(tmc4331, TMC4331_COVER_HIGH_WR, old_high);
   21acc:	4652      	mov	r2, sl
   21ace:	216d      	movs	r1, #109	; 0x6d
   21ad0:	4620      	mov	r0, r4
   21ad2:	f7ff ff7e 	bl	219d2 <tmc4331_writeInt>
	tmc4331->config->shadowRegister[TMC4331_COVER_LOW_WR] = old_low;
   21ad6:	6823      	ldr	r3, [r4, #0]
   21ad8:	f8c3 91b4 	str.w	r9, [r3, #436]	; 0x1b4
}
   21adc:	b006      	add	sp, #24
   21ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes[i] = data[length-i-1];
   21ae2:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   21ae6:	f802 1b01 	strb.w	r1, [r2], #1
	for(i = 0; i < length; i++)
   21aea:	e7bc      	b.n	21a66 <tmc4331_readWriteCover+0x28>
		tmp = ACCESS_ONCE(i);
   21aec:	9a03      	ldr	r2, [sp, #12]
	for(i = 0; i < 100; i++)
   21aee:	3301      	adds	r3, #1
   21af0:	e7da      	b.n	21aa8 <tmc4331_readWriteCover+0x6a>
		data[length-i-1] = bytes[i];
   21af2:	f818 3b01 	ldrb.w	r3, [r8], #1
   21af6:	f807 3d01 	strb.w	r3, [r7, #-1]!
	for(i = 0; i < length; i++)
   21afa:	e7e5      	b.n	21ac8 <tmc4331_readWriteCover+0x8a>

00021afc <tmc4331_init>:

// Provide the init function with a channel index (sent back in the SPI callback), a pointer to a ConfigurationTypeDef struct
// and a pointer to a int32_t array (size 128) holding the reset values that shall be used.
void tmc4331_init(TMC4331TypeDef *tmc4331, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   21afc:	b530      	push	{r4, r5, lr}
	tmc4331->velocity  = 0;
   21afe:	2400      	movs	r4, #0
	tmc4331->oldTick   = 0;
	tmc4331->oldX      = 0;
   21b00:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc4331->velocity  = 0;
   21b04:	6044      	str	r4, [r0, #4]
	tmc4331->config    = config;
   21b06:	6002      	str	r2, [r0, #0]

	tmc4331->config->callback     = NULL;
   21b08:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc4331->config->channel      = channel;
	tmc4331->config->configIndex  = 0;
	tmc4331->config->state        = CONFIG_READY;
   21b0c:	8014      	strh	r4, [r2, #0]
   21b0e:	4c0a      	ldr	r4, [pc, #40]	; (21b38 <tmc4331_init+0x3c>)
	tmc4331->config->channel      = channel;
   21b10:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
   21b14:	3b04      	subs	r3, #4
   21b16:	f500 7204 	add.w	r2, r0, #528	; 0x210
   21b1a:	f100 0110 	add.w	r1, r0, #16
   21b1e:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc4331->registerAccess[i]      = tmc4331_defaultRegisterAccess[i];
   21b22:	f814 5b01 	ldrb.w	r5, [r4], #1
   21b26:	f802 5b01 	strb.w	r5, [r2], #1
		tmc4331->registerResetState[i]  = registerResetState[i];
   21b2a:	f853 5f04 	ldr.w	r5, [r3, #4]!
   21b2e:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
   21b32:	4282      	cmp	r2, r0
   21b34:	d1f5      	bne.n	21b22 <tmc4331_init+0x26>
	}
}
   21b36:	bd30      	pop	{r4, r5, pc}
   21b38:	0002a634 	.word	0x0002a634

00021b3c <tmc4331_reset>:

uint8_t tmc4331_reset(TMC4331TypeDef *tmc4331)
{
	if(tmc4331->config->state != CONFIG_READY)
   21b3c:	6801      	ldr	r1, [r0, #0]
   21b3e:	780b      	ldrb	r3, [r1, #0]
   21b40:	b96b      	cbnz	r3, 21b5e <tmc4331_reset+0x22>
   21b42:	f500 7304 	add.w	r3, r0, #528	; 0x210
   21b46:	f500 7024 	add.w	r0, r0, #656	; 0x290

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
		tmc4331->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   21b4a:	781a      	ldrb	r2, [r3, #0]
   21b4c:	f022 0208 	bic.w	r2, r2, #8
   21b50:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
   21b54:	4283      	cmp	r3, r0
   21b56:	d1f8      	bne.n	21b4a <tmc4331_reset+0xe>

	tmc4331->config->state        = CONFIG_RESET;
   21b58:	2001      	movs	r0, #1
   21b5a:	8008      	strh	r0, [r1, #0]
	tmc4331->config->configIndex  = 0;

	return 1;
   21b5c:	4770      	bx	lr
		return 0;
   21b5e:	2000      	movs	r0, #0
}
   21b60:	4770      	bx	lr

00021b62 <tmc4331_restore>:

uint8_t tmc4331_restore(TMC4331TypeDef *tmc4331)
{
	if(tmc4331->config->state != CONFIG_READY)
   21b62:	6803      	ldr	r3, [r0, #0]
   21b64:	781a      	ldrb	r2, [r3, #0]
   21b66:	b91a      	cbnz	r2, 21b70 <tmc4331_restore+0xe>
		return 0;

	tmc4331->config->state        = CONFIG_RESTORE;
   21b68:	2202      	movs	r2, #2
   21b6a:	801a      	strh	r2, [r3, #0]
	tmc4331->config->configIndex  = 0;

	return 1;
   21b6c:	2001      	movs	r0, #1
   21b6e:	4770      	bx	lr
		return 0;
   21b70:	2000      	movs	r0, #0
}
   21b72:	4770      	bx	lr

00021b74 <tmc4331_setRegisterResetState>:

void tmc4331_setRegisterResetState(TMC4331TypeDef *tmc4331, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
   21b74:	1f0b      	subs	r3, r1, #4
   21b76:	3010      	adds	r0, #16
   21b78:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc4331->registerResetState[i] = resetState[i];
   21b7c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21b80:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC4331_REGISTER_COUNT; i++)
   21b84:	428b      	cmp	r3, r1
   21b86:	d1f9      	bne.n	21b7c <tmc4331_setRegisterResetState+0x8>
}
   21b88:	4770      	bx	lr

00021b8a <tmc4331_setCallback>:

void tmc4331_setCallback(TMC4331TypeDef *tmc4331, tmc4331_callback callback)
{
	tmc4331->config->callback = (tmc_callback_config) callback;
   21b8a:	6803      	ldr	r3, [r0, #0]
   21b8c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   21b90:	4770      	bx	lr

00021b92 <tmc4331_periodicJob>:
		tmc4331->config->state = CONFIG_READY;
	}
}

void tmc4331_periodicJob(TMC4331TypeDef *tmc4331, uint32_t tick)
{
   21b92:	b538      	push	{r3, r4, r5, lr}
	if(tmc4331->config->state != CONFIG_READY)
   21b94:	6805      	ldr	r5, [r0, #0]
   21b96:	782b      	ldrb	r3, [r5, #0]
{
   21b98:	4604      	mov	r4, r0
	if(tmc4331->config->state != CONFIG_READY)
   21b9a:	2b00      	cmp	r3, #0
   21b9c:	d03c      	beq.n	21c18 <tmc4331_periodicJob+0x86>
	if(tmc4331->config->state == CONFIG_RESTORE)
   21b9e:	2b02      	cmp	r3, #2
   21ba0:	d11f      	bne.n	21be2 <tmc4331_periodicJob+0x50>
		settings = &tmc4331->config->shadowRegister[0];
   21ba2:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC4331_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc4331->registerAccess[*ptr]))
   21ba4:	f995 3001 	ldrsb.w	r3, [r5, #1]
   21ba8:	786a      	ldrb	r2, [r5, #1]
   21baa:	2b00      	cmp	r3, #0
   21bac:	db08      	blt.n	21bc0 <tmc4331_periodicJob+0x2e>
   21bae:	18a3      	adds	r3, r4, r2
   21bb0:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   21bb4:	0799      	lsls	r1, r3, #30
   21bb6:	d511      	bpl.n	21bdc <tmc4331_periodicJob+0x4a>
   21bb8:	f003 0348 	and.w	r3, r3, #72	; 0x48
   21bbc:	2b40      	cmp	r3, #64	; 0x40
   21bbe:	d00d      	beq.n	21bdc <tmc4331_periodicJob+0x4a>
	if (*ptr < TMC4331_REGISTER_COUNT) {
   21bc0:	f995 3001 	ldrsb.w	r3, [r5, #1]
   21bc4:	7869      	ldrb	r1, [r5, #1]
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	db1b      	blt.n	21c02 <tmc4331_periodicJob+0x70>
		tmc4331_writeInt(tmc4331, *ptr, settings[*ptr]);
   21bca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   21bce:	4620      	mov	r0, r4
   21bd0:	f7ff feff 	bl	219d2 <tmc4331_writeInt>
		(*ptr)++;
   21bd4:	786b      	ldrb	r3, [r5, #1]
   21bd6:	3301      	adds	r3, #1
   21bd8:	706b      	strb	r3, [r5, #1]

	if((tick - tmc4331->oldTick) != 0)
	{
		tmc4331->oldTick = tick;
	}
}
   21bda:	bd38      	pop	{r3, r4, r5, pc}
			(*ptr)++;
   21bdc:	3201      	adds	r2, #1
   21bde:	706a      	strb	r2, [r5, #1]
   21be0:	e7e0      	b.n	21ba4 <tmc4331_periodicJob+0x12>
		settings = &tmc4331->registerResetState[0];
   21be2:	3010      	adds	r0, #16
		while((*ptr < TMC4331_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc4331->registerAccess[*ptr]))
   21be4:	f995 2001 	ldrsb.w	r2, [r5, #1]
   21be8:	786b      	ldrb	r3, [r5, #1]
   21bea:	2a00      	cmp	r2, #0
   21bec:	dbe8      	blt.n	21bc0 <tmc4331_periodicJob+0x2e>
   21bee:	18e2      	adds	r2, r4, r3
   21bf0:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   21bf4:	f002 0242 	and.w	r2, r2, #66	; 0x42
   21bf8:	2a02      	cmp	r2, #2
   21bfa:	d0e1      	beq.n	21bc0 <tmc4331_periodicJob+0x2e>
			(*ptr)++;
   21bfc:	3301      	adds	r3, #1
   21bfe:	706b      	strb	r3, [r5, #1]
   21c00:	e7f0      	b.n	21be4 <tmc4331_periodicJob+0x52>
		if(tmc4331->config->callback)
   21c02:	6822      	ldr	r2, [r4, #0]
   21c04:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   21c08:	b113      	cbz	r3, 21c10 <tmc4331_periodicJob+0x7e>
			((tmc4331_callback)tmc4331->config->callback)(tmc4331, tmc4331->config->state);
   21c0a:	7811      	ldrb	r1, [r2, #0]
   21c0c:	4620      	mov	r0, r4
   21c0e:	4798      	blx	r3
		tmc4331->config->state = CONFIG_READY;
   21c10:	6823      	ldr	r3, [r4, #0]
   21c12:	2200      	movs	r2, #0
   21c14:	701a      	strb	r2, [r3, #0]
   21c16:	e7e0      	b.n	21bda <tmc4331_periodicJob+0x48>
	if((tick - tmc4331->oldTick) != 0)
   21c18:	68c3      	ldr	r3, [r0, #12]
   21c1a:	428b      	cmp	r3, r1
		tmc4331->oldTick = tick;
   21c1c:	bf18      	it	ne
   21c1e:	60c1      	strne	r1, [r0, #12]
   21c20:	e7db      	b.n	21bda <tmc4331_periodicJob+0x48>

00021c22 <tmc4331_discardVelocityDecimals>:
	tmc4331_moveTo(tmc4331, *ticks, velocityMax);
}

int32_t tmc4331_discardVelocityDecimals(int32_t value)
{
	if(abs(value) > 8000000)
   21c22:	4b07      	ldr	r3, [pc, #28]	; (21c40 <tmc4331_discardVelocityDecimals+0x1e>)
   21c24:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
   21c28:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
   21c2c:	429a      	cmp	r2, r3
   21c2e:	dd04      	ble.n	21c3a <tmc4331_discardVelocityDecimals+0x18>
	{
		value = (value < 0) ? -8000000 : 8000000;
   21c30:	4a04      	ldr	r2, [pc, #16]	; (21c44 <tmc4331_discardVelocityDecimals+0x22>)
   21c32:	ea12 0020 	ands.w	r0, r2, r0, asr #32
   21c36:	bf38      	it	cc
   21c38:	4618      	movcc	r0, r3
	}
	return value << 8;
}
   21c3a:	0200      	lsls	r0, r0, #8
   21c3c:	4770      	bx	lr
   21c3e:	bf00      	nop
   21c40:	007a1200 	.word	0x007a1200
   21c44:	ff85ee00 	.word	0xff85ee00

00021c48 <tmc4331_rotate>:
{
   21c48:	b538      	push	{r3, r4, r5, lr}
   21c4a:	460d      	mov	r5, r1
	TMC4331_FIELD_UPDATE(tmc4331, TMC4331_RAMPMODE, TMC4331_OPERATION_MODE_MASK, TMC4331_OPERATION_MODE_SHIFT, 0);
   21c4c:	2120      	movs	r1, #32
{
   21c4e:	4604      	mov	r4, r0
	TMC4331_FIELD_UPDATE(tmc4331, TMC4331_RAMPMODE, TMC4331_OPERATION_MODE_MASK, TMC4331_OPERATION_MODE_SHIFT, 0);
   21c50:	f7ff fecd 	bl	219ee <tmc4331_readInt>
   21c54:	2120      	movs	r1, #32
   21c56:	f020 0204 	bic.w	r2, r0, #4
   21c5a:	4620      	mov	r0, r4
   21c5c:	f7ff feb9 	bl	219d2 <tmc4331_writeInt>
	tmc4331_writeInt(tmc4331, TMC4331_VMAX, tmc4331_discardVelocityDecimals(velocity));
   21c60:	4628      	mov	r0, r5
   21c62:	f7ff ffde 	bl	21c22 <tmc4331_discardVelocityDecimals>
   21c66:	2124      	movs	r1, #36	; 0x24
   21c68:	4602      	mov	r2, r0
   21c6a:	4620      	mov	r0, r4
}
   21c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4331_writeInt(tmc4331, TMC4331_VMAX, tmc4331_discardVelocityDecimals(velocity));
   21c70:	f7ff beaf 	b.w	219d2 <tmc4331_writeInt>

00021c74 <tmc4331_right>:
	tmc4331_rotate(tmc4331, velocity);
   21c74:	f7ff bfe8 	b.w	21c48 <tmc4331_rotate>

00021c78 <tmc4331_left>:
	tmc4331_rotate(tmc4331, -velocity);
   21c78:	4249      	negs	r1, r1
   21c7a:	f7ff bfe5 	b.w	21c48 <tmc4331_rotate>

00021c7e <tmc4331_stop>:
	tmc4331_rotate(tmc4331, 0);
   21c7e:	2100      	movs	r1, #0
   21c80:	f7ff bfe2 	b.w	21c48 <tmc4331_rotate>

00021c84 <tmc4331_moveTo>:
{
   21c84:	b570      	push	{r4, r5, r6, lr}
   21c86:	460d      	mov	r5, r1
	TMC4331_FIELD_UPDATE(tmc4331, TMC4331_RAMPMODE, TMC4331_OPERATION_MODE_MASK, TMC4331_OPERATION_MODE_SHIFT, 1);
   21c88:	2120      	movs	r1, #32
{
   21c8a:	4604      	mov	r4, r0
   21c8c:	4616      	mov	r6, r2
	TMC4331_FIELD_UPDATE(tmc4331, TMC4331_RAMPMODE, TMC4331_OPERATION_MODE_MASK, TMC4331_OPERATION_MODE_SHIFT, 1);
   21c8e:	f7ff feae 	bl	219ee <tmc4331_readInt>
   21c92:	2120      	movs	r1, #32
   21c94:	f040 0204 	orr.w	r2, r0, #4
   21c98:	4620      	mov	r0, r4
   21c9a:	f7ff fe9a 	bl	219d2 <tmc4331_writeInt>
	tmc4331_writeInt(tmc4331, TMC4331_VMAX, tmc4331_discardVelocityDecimals(velocityMax));
   21c9e:	4630      	mov	r0, r6
   21ca0:	f7ff ffbf 	bl	21c22 <tmc4331_discardVelocityDecimals>
   21ca4:	2124      	movs	r1, #36	; 0x24
   21ca6:	4602      	mov	r2, r0
   21ca8:	4620      	mov	r0, r4
   21caa:	f7ff fe92 	bl	219d2 <tmc4331_writeInt>
	tmc4331_writeInt(tmc4331, TMC4331_X_TARGET, position);
   21cae:	462a      	mov	r2, r5
   21cb0:	4620      	mov	r0, r4
   21cb2:	2137      	movs	r1, #55	; 0x37
}
   21cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4331_writeInt(tmc4331, TMC4331_X_TARGET, position);
   21cb8:	f7ff be8b 	b.w	219d2 <tmc4331_writeInt>

00021cbc <tmc4331_moveBy>:
{
   21cbc:	b570      	push	{r4, r5, r6, lr}
   21cbe:	460c      	mov	r4, r1
	*ticks += tmc4331_readInt(tmc4331, TMC4331_XACTUAL);
   21cc0:	2121      	movs	r1, #33	; 0x21
{
   21cc2:	4605      	mov	r5, r0
   21cc4:	4616      	mov	r6, r2
	*ticks += tmc4331_readInt(tmc4331, TMC4331_XACTUAL);
   21cc6:	f7ff fe92 	bl	219ee <tmc4331_readInt>
   21cca:	6821      	ldr	r1, [r4, #0]
   21ccc:	4401      	add	r1, r0
   21cce:	6021      	str	r1, [r4, #0]
	tmc4331_moveTo(tmc4331, *ticks, velocityMax);
   21cd0:	4632      	mov	r2, r6
   21cd2:	4628      	mov	r0, r5
}
   21cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4331_moveTo(tmc4331, *ticks, velocityMax);
   21cd8:	f7ff bfd4 	b.w	21c84 <tmc4331_moveTo>

00021cdc <tmc4361_writeDatagram>:
extern void tmc4361_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc4361_writeDatagram(TMC4361TypeDef *tmc4361, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   21cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21ce0:	4698      	mov	r8, r3
	int value;
	uint8_t data[5] = { address | TMC4361_WRITE_BIT, x1, x2, x3, x4 };
   21ce2:	f061 037f 	orn	r3, r1, #127	; 0x7f
   21ce6:	f88d 3000 	strb.w	r3, [sp]

	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21cea:	6803      	ldr	r3, [r0, #0]
{
   21cec:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   21cf0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC4361_WRITE_BIT, x1, x2, x3, x4 };
   21cf4:	f88d 2001 	strb.w	r2, [sp, #1]
{
   21cf8:	4604      	mov	r4, r0
   21cfa:	4617      	mov	r7, r2
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21cfc:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC4361_WRITE_BIT, x1, x2, x3, x4 };
   21d00:	f88d 5004 	strb.w	r5, [sp, #4]
{
   21d04:	460e      	mov	r6, r1
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d06:	2205      	movs	r2, #5
   21d08:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC4361_WRITE_BIT, x1, x2, x3, x4 };
   21d0a:	f88d 8002 	strb.w	r8, [sp, #2]
   21d0e:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d12:	f7ef fa75 	bl	11200 <tmc4361_readWriteArray>

	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc4361->config->shadowRegister[address] = value;
   21d16:	6822      	ldr	r2, [r4, #0]
	tmc4361->status = data[0];
   21d18:	f89d 3000 	ldrb.w	r3, [sp]
   21d1c:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	tmc4361->config->shadowRegister[address] = value;
   21d20:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   21d24:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc4361->config->shadowRegister[address] = value;
   21d28:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   21d2c:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   21d30:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc4361->registerAccess[address] |= TMC_ACCESS_DIRTY;
   21d34:	4434      	add	r4, r6
	tmc4361->config->shadowRegister[address] = value;
   21d36:	604b      	str	r3, [r1, #4]
	tmc4361->registerAccess[address] |= TMC_ACCESS_DIRTY;
   21d38:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   21d3c:	f043 0308 	orr.w	r3, r3, #8
   21d40:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   21d44:	b003      	add	sp, #12
   21d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00021d4a <tmc4361_writeInt>:

void tmc4361_writeInt(TMC4361TypeDef *tmc4361, uint8_t address, int32_t value)
{
   21d4a:	b507      	push	{r0, r1, r2, lr}
	tmc4361_writeDatagram(tmc4361, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   21d4c:	b2d3      	uxtb	r3, r2
   21d4e:	9301      	str	r3, [sp, #4]
   21d50:	f3c2 2307 	ubfx	r3, r2, #8, #8
   21d54:	9300      	str	r3, [sp, #0]
   21d56:	f3c2 4307 	ubfx	r3, r2, #16, #8
   21d5a:	0e12      	lsrs	r2, r2, #24
   21d5c:	f7ff ffbe 	bl	21cdc <tmc4361_writeDatagram>
}
   21d60:	b003      	add	sp, #12
   21d62:	f85d fb04 	ldr.w	pc, [sp], #4

00021d66 <tmc4361_readInt>:

int32_t tmc4361_readInt(TMC4361TypeDef *tmc4361, uint8_t address)
{
   21d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int value;
	uint8_t data[5];

	address = TMC_ADDRESS(address);
   21d68:	f001 057f 	and.w	r5, r1, #127	; 0x7f

	if(!TMC_IS_READABLE(tmc4361->registerAccess[address]))
   21d6c:	1942      	adds	r2, r0, r5
   21d6e:	6803      	ldr	r3, [r0, #0]
   21d70:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   21d74:	07d2      	lsls	r2, r2, #31
{
   21d76:	4604      	mov	r4, r0
	if(!TMC_IS_READABLE(tmc4361->registerAccess[address]))
   21d78:	d404      	bmi.n	21d84 <tmc4361_readInt+0x1e>
		return tmc4361->config->shadowRegister[address];
   21d7a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   21d7e:	6868      	ldr	r0, [r5, #4]

	tmc4361->status = data[0];
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];

	return value;
}
   21d80:	b003      	add	sp, #12
   21d82:	bd30      	pop	{r4, r5, pc}
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d84:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   21d88:	f88d 5000 	strb.w	r5, [sp]
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d8c:	2205      	movs	r2, #5
   21d8e:	4669      	mov	r1, sp
   21d90:	f7ef fa36 	bl	11200 <tmc4361_readWriteArray>
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d94:	6823      	ldr	r3, [r4, #0]
	data[0] = address;
   21d96:	f88d 5000 	strb.w	r5, [sp]
	tmc4361_readWriteArray(tmc4361->config->channel, &data[0], 5);
   21d9a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   21d9e:	2205      	movs	r2, #5
   21da0:	4669      	mov	r1, sp
   21da2:	f7ef fa2d 	bl	11200 <tmc4361_readWriteArray>
	tmc4361->status = data[0];
   21da6:	f8dd 0001 	ldr.w	r0, [sp, #1]
   21daa:	f89d 3000 	ldrb.w	r3, [sp]
   21dae:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   21db2:	ba00      	rev	r0, r0
	return value;
   21db4:	e7e4      	b.n	21d80 <tmc4361_readInt+0x1a>

00021db6 <tmc4361_readWriteCover>:

// Send [length] bytes stored in the [data] array to a driver attached to the TMC4361
// and overwrite [data] with the replies. data[0] is the first byte sent and received.
void tmc4361_readWriteCover(TMC4361TypeDef *tmc4361, uint8_t *data, size_t length)
{
   21db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Buffering old values to not interrupt manual covering
	int32_t old_high = tmc4361->config->shadowRegister[TMC4361_COVER_HIGH_WR];
	int32_t old_low = tmc4361->config->shadowRegister[TMC4361_COVER_LOW_WR];

	// Check if datagram length is valid
	if(length == 0 || length > 8)
   21dba:	1e53      	subs	r3, r2, #1
   21dbc:	2b07      	cmp	r3, #7
{
   21dbe:	b086      	sub	sp, #24
   21dc0:	4604      	mov	r4, r0
   21dc2:	460e      	mov	r6, r1
   21dc4:	4615      	mov	r5, r2
	if(length == 0 || length > 8)
   21dc6:	d845      	bhi.n	21e54 <tmc4361_readWriteCover+0x9e>
	int32_t old_high = tmc4361->config->shadowRegister[TMC4361_COVER_HIGH_WR];
   21dc8:	6803      	ldr	r3, [r0, #0]
   21dca:	188f      	adds	r7, r1, r2
	int32_t old_low = tmc4361->config->shadowRegister[TMC4361_COVER_LOW_WR];
   21dcc:	e9d3 9a6d 	ldrd	r9, sl, [r3, #436]	; 0x1b4
		return;

	uint8_t bytes[8] = { 0 };
   21dd0:	f10d 0810 	add.w	r8, sp, #16
   21dd4:	2300      	movs	r3, #0
   21dd6:	e9cd 3304 	strd	r3, r3, [sp, #16]
	uint32_t tmp;
	size_t i;

	// Copy data into buffer of maximum cover datagram length (8 bytes)
	for(i = 0; i < length; i++)
   21dda:	4642      	mov	r2, r8
   21ddc:	463b      	mov	r3, r7
   21dde:	42b3      	cmp	r3, r6
   21de0:	d13b      	bne.n	21e5a <tmc4361_readWriteCover+0xa4>
		bytes[i] = data[length-i-1];

	// Send the datagram
	if(length > 4)
   21de2:	2d04      	cmp	r5, #4
   21de4:	d90d      	bls.n	21e02 <tmc4361_readWriteCover+0x4c>
		tmc4361_writeDatagram(tmc4361, TMC4361_COVER_HIGH_WR, bytes[7], bytes[6], bytes[5], bytes[4]);
   21de6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21dea:	9301      	str	r3, [sp, #4]
   21dec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   21df0:	9300      	str	r3, [sp, #0]
   21df2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   21df6:	f89d 3016 	ldrb.w	r3, [sp, #22]
   21dfa:	216d      	movs	r1, #109	; 0x6d
   21dfc:	4620      	mov	r0, r4
   21dfe:	f7ff ff6d 	bl	21cdc <tmc4361_writeDatagram>

	tmc4361_writeDatagram(tmc4361, TMC4361_COVER_LOW_WR, bytes[3], bytes[2], bytes[1], bytes[0]);
   21e02:	f89d 3010 	ldrb.w	r3, [sp, #16]
   21e06:	9301      	str	r3, [sp, #4]
   21e08:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21e0c:	9300      	str	r3, [sp, #0]
   21e0e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   21e12:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21e16:	216c      	movs	r1, #108	; 0x6c
   21e18:	4620      	mov	r0, r4
   21e1a:	f7ff ff5f 	bl	21cdc <tmc4361_writeDatagram>

	// Wait for datagram completion
	// TODO CHECK 3: Get the waiting for cover completion done properly (LH)
	for(i = 0; i < 100; i++)
   21e1e:	2300      	movs	r3, #0
   21e20:	9303      	str	r3, [sp, #12]
   21e22:	9b03      	ldr	r3, [sp, #12]
   21e24:	2b63      	cmp	r3, #99	; 0x63
   21e26:	d91d      	bls.n	21e64 <tmc4361_readWriteCover+0xae>
		tmp = ACCESS_ONCE(i);

	// Read the reply
	if(length > 4)
   21e28:	2d04      	cmp	r5, #4
   21e2a:	d904      	bls.n	21e36 <tmc4361_readWriteCover+0x80>
	{
		tmp = tmc4361_readInt(tmc4361, TMC4361_COVER_DRV_HIGH_RD);
   21e2c:	216f      	movs	r1, #111	; 0x6f
   21e2e:	4620      	mov	r0, r4
   21e30:	f7ff ff99 	bl	21d66 <tmc4361_readInt>
		bytes[4] = BYTE(tmp, 0);
   21e34:	9005      	str	r0, [sp, #20]
		bytes[5] = BYTE(tmp, 1);
		bytes[6] = BYTE(tmp, 2);
		bytes[7] = BYTE(tmp, 3);
	}
	tmp = tmc4361_readInt(tmc4361, TMC4361_COVER_DRV_LOW_RD);
   21e36:	216e      	movs	r1, #110	; 0x6e
   21e38:	4620      	mov	r0, r4
   21e3a:	f7ff ff94 	bl	21d66 <tmc4361_readInt>
	bytes[0] = BYTE(tmp, 0);
   21e3e:	9004      	str	r0, [sp, #16]
	bytes[1] = BYTE(tmp, 1);
	bytes[2] = BYTE(tmp, 2);
	bytes[3] = BYTE(tmp, 3);

	// Write the reply to the data array
	for(i = 0; i < length; i++)
   21e40:	42b7      	cmp	r7, r6
   21e42:	d112      	bne.n	21e6a <tmc4361_readWriteCover+0xb4>
	{
		data[length-i-1] = bytes[i];
	}

	// Rewriting old values to prevent interrupting manual covering. Imitating unchanged values and state.
	tmc4361_writeInt(tmc4361, TMC4361_COVER_HIGH_WR, old_high);
   21e44:	4652      	mov	r2, sl
   21e46:	216d      	movs	r1, #109	; 0x6d
   21e48:	4620      	mov	r0, r4
   21e4a:	f7ff ff7e 	bl	21d4a <tmc4361_writeInt>
	tmc4361->config->shadowRegister[TMC4361_COVER_LOW_WR] = old_low;
   21e4e:	6823      	ldr	r3, [r4, #0]
   21e50:	f8c3 91b4 	str.w	r9, [r3, #436]	; 0x1b4
}
   21e54:	b006      	add	sp, #24
   21e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes[i] = data[length-i-1];
   21e5a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   21e5e:	f802 1b01 	strb.w	r1, [r2], #1
	for(i = 0; i < length; i++)
   21e62:	e7bc      	b.n	21dde <tmc4361_readWriteCover+0x28>
		tmp = ACCESS_ONCE(i);
   21e64:	9a03      	ldr	r2, [sp, #12]
	for(i = 0; i < 100; i++)
   21e66:	3301      	adds	r3, #1
   21e68:	e7da      	b.n	21e20 <tmc4361_readWriteCover+0x6a>
		data[length-i-1] = bytes[i];
   21e6a:	f818 3b01 	ldrb.w	r3, [r8], #1
   21e6e:	f807 3d01 	strb.w	r3, [r7, #-1]!
	for(i = 0; i < length; i++)
   21e72:	e7e5      	b.n	21e40 <tmc4361_readWriteCover+0x8a>

00021e74 <tmc4361_init>:

// Provide the init function with a channel index (sent back in the SPI callback), a pointer to a ConfigurationTypeDef struct
// and a pointer to a int32_t array (size 128) holding the reset values that shall be used.
void tmc4361_init(TMC4361TypeDef *tmc4361, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   21e74:	b530      	push	{r4, r5, lr}
	tmc4361->velocity  = 0;
   21e76:	2400      	movs	r4, #0
	tmc4361->oldTick   = 0;
	tmc4361->oldX      = 0;
   21e78:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc4361->velocity  = 0;
   21e7c:	6044      	str	r4, [r0, #4]
	tmc4361->config    = config;
   21e7e:	6002      	str	r2, [r0, #0]

	tmc4361->config->callback     = NULL;
   21e80:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc4361->config->channel      = channel;
   21e84:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210
	tmc4361->config->configIndex  = 0;
	tmc4361->config->state        = CONFIG_READY;
   21e88:	8014      	strh	r4, [r2, #0]

	tmc4361->cover_hold = false;
   21e8a:	f880 4291 	strb.w	r4, [r0, #657]	; 0x291

	int i;
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
   21e8e:	4c09      	ldr	r4, [pc, #36]	; (21eb4 <tmc4361_init+0x40>)
   21e90:	f500 7204 	add.w	r2, r0, #528	; 0x210
   21e94:	f100 0110 	add.w	r1, r0, #16
   21e98:	3b04      	subs	r3, #4
   21e9a:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc4361->registerAccess[i]      = tmc4361_defaultRegisterAccess[i];
   21e9e:	f814 5b01 	ldrb.w	r5, [r4], #1
   21ea2:	f802 5b01 	strb.w	r5, [r2], #1
		tmc4361->registerResetState[i]  = registerResetState[i];
   21ea6:	f853 5f04 	ldr.w	r5, [r3, #4]!
   21eaa:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
   21eae:	4282      	cmp	r2, r0
   21eb0:	d1f5      	bne.n	21e9e <tmc4361_init+0x2a>
	}
}
   21eb2:	bd30      	pop	{r4, r5, pc}
   21eb4:	0002a6b4 	.word	0x0002a6b4

00021eb8 <tmc4361_reset>:

uint8_t tmc4361_reset(TMC4361TypeDef *tmc4361)
{
	if(tmc4361->config->state != CONFIG_READY)
   21eb8:	6801      	ldr	r1, [r0, #0]
   21eba:	780b      	ldrb	r3, [r1, #0]
   21ebc:	b96b      	cbnz	r3, 21eda <tmc4361_reset+0x22>
   21ebe:	f500 7304 	add.w	r3, r0, #528	; 0x210
   21ec2:	f500 7024 	add.w	r0, r0, #656	; 0x290

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
		tmc4361->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   21ec6:	781a      	ldrb	r2, [r3, #0]
   21ec8:	f022 0208 	bic.w	r2, r2, #8
   21ecc:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
   21ed0:	4283      	cmp	r3, r0
   21ed2:	d1f8      	bne.n	21ec6 <tmc4361_reset+0xe>

	tmc4361->config->state        = CONFIG_RESET;
   21ed4:	2001      	movs	r0, #1
   21ed6:	8008      	strh	r0, [r1, #0]
	tmc4361->config->configIndex  = 0;

	return 1;
   21ed8:	4770      	bx	lr
		return 0;
   21eda:	2000      	movs	r0, #0
}
   21edc:	4770      	bx	lr

00021ede <tmc4361_restore>:

uint8_t tmc4361_restore(TMC4361TypeDef *tmc4361)
{
	if(tmc4361->config->state != CONFIG_READY)
   21ede:	6803      	ldr	r3, [r0, #0]
   21ee0:	781a      	ldrb	r2, [r3, #0]
   21ee2:	b91a      	cbnz	r2, 21eec <tmc4361_restore+0xe>
		return 0;

	tmc4361->config->state        = CONFIG_RESTORE;
   21ee4:	2202      	movs	r2, #2
   21ee6:	801a      	strh	r2, [r3, #0]
	tmc4361->config->configIndex  = 0;

	return 1;
   21ee8:	2001      	movs	r0, #1
   21eea:	4770      	bx	lr
		return 0;
   21eec:	2000      	movs	r0, #0
}
   21eee:	4770      	bx	lr

00021ef0 <tmc4361_setRegisterResetState>:

void tmc4361_setRegisterResetState(TMC4361TypeDef *tmc4361, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
   21ef0:	1f0b      	subs	r3, r1, #4
   21ef2:	3010      	adds	r0, #16
   21ef4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc4361->registerResetState[i] = resetState[i];
   21ef8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21efc:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC4361_REGISTER_COUNT; i++)
   21f00:	428b      	cmp	r3, r1
   21f02:	d1f9      	bne.n	21ef8 <tmc4361_setRegisterResetState+0x8>
}
   21f04:	4770      	bx	lr

00021f06 <tmc4361_setCallback>:

void tmc4361_setCallback(TMC4361TypeDef *tmc4361, tmc4361_callback callback)
{
	tmc4361->config->callback = (tmc_callback_config) callback;
   21f06:	6803      	ldr	r3, [r0, #0]
   21f08:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   21f0c:	4770      	bx	lr

00021f0e <tmc4361_discardVelocityDecimals>:
	tmc4361_moveTo(tmc4361, *ticks, velocityMax);
}

int32_t tmc4361_discardVelocityDecimals(int32_t value)
{
	if(abs(value) > 8000000)
   21f0e:	4b07      	ldr	r3, [pc, #28]	; (21f2c <tmc4361_discardVelocityDecimals+0x1e>)
   21f10:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
   21f14:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
   21f18:	429a      	cmp	r2, r3
   21f1a:	dd04      	ble.n	21f26 <tmc4361_discardVelocityDecimals+0x18>
	{
		value = (value < 0) ? -8000000 : 8000000;
   21f1c:	4a04      	ldr	r2, [pc, #16]	; (21f30 <tmc4361_discardVelocityDecimals+0x22>)
   21f1e:	ea12 0020 	ands.w	r0, r2, r0, asr #32
   21f22:	bf38      	it	cc
   21f24:	4618      	movcc	r0, r3
	}
	return value << 8;
}
   21f26:	0200      	lsls	r0, r0, #8
   21f28:	4770      	bx	lr
   21f2a:	bf00      	nop
   21f2c:	007a1200 	.word	0x007a1200
   21f30:	ff85ee00 	.word	0xff85ee00

00021f34 <tmc4361_rotate>:
{
   21f34:	b538      	push	{r3, r4, r5, lr}
   21f36:	460d      	mov	r5, r1
	TMC4361_FIELD_UPDATE(tmc4361, TMC4361_RAMPMODE, TMC4361_OPERATION_MODE_MASK, TMC4361_OPERATION_MODE_SHIFT, 0);
   21f38:	2120      	movs	r1, #32
{
   21f3a:	4604      	mov	r4, r0
	TMC4361_FIELD_UPDATE(tmc4361, TMC4361_RAMPMODE, TMC4361_OPERATION_MODE_MASK, TMC4361_OPERATION_MODE_SHIFT, 0);
   21f3c:	f7ff ff13 	bl	21d66 <tmc4361_readInt>
   21f40:	2120      	movs	r1, #32
   21f42:	f020 0204 	bic.w	r2, r0, #4
   21f46:	4620      	mov	r0, r4
   21f48:	f7ff feff 	bl	21d4a <tmc4361_writeInt>
	tmc4361_writeInt(tmc4361, TMC4361_VMAX, tmc4361_discardVelocityDecimals(velocity));
   21f4c:	4628      	mov	r0, r5
   21f4e:	f7ff ffde 	bl	21f0e <tmc4361_discardVelocityDecimals>
   21f52:	2124      	movs	r1, #36	; 0x24
   21f54:	4602      	mov	r2, r0
   21f56:	4620      	mov	r0, r4
}
   21f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4361_writeInt(tmc4361, TMC4361_VMAX, tmc4361_discardVelocityDecimals(velocity));
   21f5c:	f7ff bef5 	b.w	21d4a <tmc4361_writeInt>

00021f60 <tmc4361_right>:
	tmc4361_rotate(tmc4361, velocity);
   21f60:	f7ff bfe8 	b.w	21f34 <tmc4361_rotate>

00021f64 <tmc4361_left>:
	tmc4361_rotate(tmc4361, -velocity);
   21f64:	4249      	negs	r1, r1
   21f66:	f7ff bfe5 	b.w	21f34 <tmc4361_rotate>

00021f6a <tmc4361_stop>:
	tmc4361_rotate(tmc4361, 0);
   21f6a:	2100      	movs	r1, #0
   21f6c:	f7ff bfe2 	b.w	21f34 <tmc4361_rotate>

00021f70 <tmc4361_moveTo>:
{
   21f70:	b570      	push	{r4, r5, r6, lr}
   21f72:	460d      	mov	r5, r1
	TMC4361_FIELD_UPDATE(tmc4361, TMC4361_RAMPMODE, TMC4361_OPERATION_MODE_MASK, TMC4361_OPERATION_MODE_SHIFT, 1);
   21f74:	2120      	movs	r1, #32
{
   21f76:	4604      	mov	r4, r0
   21f78:	4616      	mov	r6, r2
	TMC4361_FIELD_UPDATE(tmc4361, TMC4361_RAMPMODE, TMC4361_OPERATION_MODE_MASK, TMC4361_OPERATION_MODE_SHIFT, 1);
   21f7a:	f7ff fef4 	bl	21d66 <tmc4361_readInt>
   21f7e:	2120      	movs	r1, #32
   21f80:	f040 0204 	orr.w	r2, r0, #4
   21f84:	4620      	mov	r0, r4
   21f86:	f7ff fee0 	bl	21d4a <tmc4361_writeInt>
	tmc4361_writeInt(tmc4361, TMC4361_VMAX, tmc4361_discardVelocityDecimals(velocityMax));
   21f8a:	4630      	mov	r0, r6
   21f8c:	f7ff ffbf 	bl	21f0e <tmc4361_discardVelocityDecimals>
   21f90:	2124      	movs	r1, #36	; 0x24
   21f92:	4602      	mov	r2, r0
   21f94:	4620      	mov	r0, r4
   21f96:	f7ff fed8 	bl	21d4a <tmc4361_writeInt>
	tmc4361_writeInt(tmc4361, TMC4361_X_TARGET, position);
   21f9a:	462a      	mov	r2, r5
   21f9c:	4620      	mov	r0, r4
   21f9e:	2137      	movs	r1, #55	; 0x37
}
   21fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361_writeInt(tmc4361, TMC4361_X_TARGET, position);
   21fa4:	f7ff bed1 	b.w	21d4a <tmc4361_writeInt>

00021fa8 <tmc4361_moveBy>:
{
   21fa8:	b570      	push	{r4, r5, r6, lr}
   21faa:	460c      	mov	r4, r1
	*ticks += tmc4361_readInt(tmc4361, TMC4361_XACTUAL);
   21fac:	2121      	movs	r1, #33	; 0x21
{
   21fae:	4605      	mov	r5, r0
   21fb0:	4616      	mov	r6, r2
	*ticks += tmc4361_readInt(tmc4361, TMC4361_XACTUAL);
   21fb2:	f7ff fed8 	bl	21d66 <tmc4361_readInt>
   21fb6:	6821      	ldr	r1, [r4, #0]
   21fb8:	4401      	add	r1, r0
   21fba:	6021      	str	r1, [r4, #0]
	tmc4361_moveTo(tmc4361, *ticks, velocityMax);
   21fbc:	4632      	mov	r2, r6
   21fbe:	4628      	mov	r0, r5
}
   21fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361_moveTo(tmc4361, *ticks, velocityMax);
   21fc4:	f7ff bfd4 	b.w	21f70 <tmc4361_moveTo>

00021fc8 <tmc4361_calibrateClosedLoop>:

	return 0;
}

uint8_t tmc4361_calibrateClosedLoop(TMC4361TypeDef *tmc4361, uint8_t worker0master1)
{
   21fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fca:	4e5c      	ldr	r6, [pc, #368]	; (2213c <tmc4361_calibrateClosedLoop+0x174>)
   21fcc:	4604      	mov	r4, r0
   21fce:	7833      	ldrb	r3, [r6, #0]
	static uint32_t oldRamp;

	uint32_t amax = 0;
	uint32_t dmax = 0;

	if(worker0master1 && state == 0)
   21fd0:	460d      	mov	r5, r1
   21fd2:	b3a1      	cbz	r1, 2203e <tmc4361_calibrateClosedLoop+0x76>
   21fd4:	bb9b      	cbnz	r3, 2203e <tmc4361_calibrateClosedLoop+0x76>
		state = 1;
   21fd6:	2301      	movs	r3, #1
   21fd8:	7033      	strb	r3, [r6, #0]

	switch(state)
	{
	case 1:
		amax = tmc4361_readInt(tmc4361, TMC4361_AMAX);
   21fda:	2128      	movs	r1, #40	; 0x28
   21fdc:	4620      	mov	r0, r4
   21fde:	f7ff fec2 	bl	21d66 <tmc4361_readInt>
		dmax = tmc4361_readInt(tmc4361, TMC4361_DMAX);
   21fe2:	2129      	movs	r1, #41	; 0x29
		amax = tmc4361_readInt(tmc4361, TMC4361_AMAX);
   21fe4:	4607      	mov	r7, r0
		dmax = tmc4361_readInt(tmc4361, TMC4361_DMAX);
   21fe6:	4620      	mov	r0, r4
   21fe8:	f7ff febd 	bl	21d66 <tmc4361_readInt>

		// Set ramp and motion parameters
		oldRamp = tmc4361_readInt(tmc4361, TMC4361_RAMPMODE);
   21fec:	2120      	movs	r1, #32
		dmax = tmc4361_readInt(tmc4361, TMC4361_DMAX);
   21fee:	4605      	mov	r5, r0
		oldRamp = tmc4361_readInt(tmc4361, TMC4361_RAMPMODE);
   21ff0:	4620      	mov	r0, r4
   21ff2:	f7ff feb8 	bl	21d66 <tmc4361_readInt>
		tmc4361_writeInt(tmc4361, TMC4361_RAMPMODE, TMC4361_RAMP_POSITION | TMC4361_RAMP_HOLD);
   21ff6:	2204      	movs	r2, #4
		oldRamp = tmc4361_readInt(tmc4361, TMC4361_RAMPMODE);
   21ff8:	6070      	str	r0, [r6, #4]
		tmc4361_writeInt(tmc4361, TMC4361_RAMPMODE, TMC4361_RAMP_POSITION | TMC4361_RAMP_HOLD);
   21ffa:	2120      	movs	r1, #32
   21ffc:	4620      	mov	r0, r4
   21ffe:	f7ff fea4 	bl	21d4a <tmc4361_writeInt>
		tmc4361_writeInt(tmc4361, TMC4361_AMAX, MAX(amax, 1000));
   22002:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   22006:	463a      	mov	r2, r7
   22008:	f04f 0128 	mov.w	r1, #40	; 0x28
   2200c:	bf38      	it	cc
   2200e:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   22012:	4620      	mov	r0, r4
   22014:	f7ff fe99 	bl	21d4a <tmc4361_writeInt>
		tmc4361_writeInt(tmc4361, TMC4361_DMAX, MAX(dmax, 1000));
   22018:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   2201c:	462a      	mov	r2, r5
   2201e:	f04f 0129 	mov.w	r1, #41	; 0x29
   22022:	bf38      	it	cc
   22024:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   22028:	4620      	mov	r0, r4
   2202a:	f7ff fe8e 	bl	21d4a <tmc4361_writeInt>
		tmc4361_writeInt(tmc4361, TMC4361_VMAX, 0);
   2202e:	2200      	movs	r2, #0
   22030:	2124      	movs	r1, #36	; 0x24
   22032:	4620      	mov	r0, r4
   22034:	f7ff fe89 	bl	21d4a <tmc4361_writeInt>

		state = 2;
   22038:	2302      	movs	r3, #2
		break;
	case 3:
		// Start encoder calibration
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_CL_CALIBRATION_EN_MASK, TMC4361_CL_CALIBRATION_EN_SHIFT, 1);

		state = 4;
   2203a:	7033      	strb	r3, [r6, #0]
		break;
   2203c:	e02b      	b.n	22096 <tmc4361_calibrateClosedLoop+0xce>
	switch(state)
   2203e:	3b01      	subs	r3, #1
   22040:	2b04      	cmp	r3, #4
   22042:	d828      	bhi.n	22096 <tmc4361_calibrateClosedLoop+0xce>
   22044:	a201      	add	r2, pc, #4	; (adr r2, 2204c <tmc4361_calibrateClosedLoop+0x84>)
   22046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2204a:	bf00      	nop
   2204c:	00021fdb 	.word	0x00021fdb
   22050:	00022061 	.word	0x00022061
   22054:	000220db 	.word	0x000220db
   22058:	000220f3 	.word	0x000220f3
   2205c:	00022135 	.word	0x00022135
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_CL_CALIBRATION_EN_MASK, TMC4361_CL_CALIBRATION_EN_SHIFT, 0);
   22060:	2107      	movs	r1, #7
   22062:	4620      	mov	r0, r4
   22064:	f7ff fe7f 	bl	21d66 <tmc4361_readInt>
   22068:	2107      	movs	r1, #7
   2206a:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   2206e:	4620      	mov	r0, r4
   22070:	f7ff fe6b 	bl	21d4a <tmc4361_writeInt>
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_REGULATION_MODUS_MASK, TMC4361_REGULATION_MODUS_SHIFT, 1);
   22074:	2107      	movs	r1, #7
   22076:	4620      	mov	r0, r4
   22078:	f7ff fe75 	bl	21d66 <tmc4361_readInt>
   2207c:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   22080:	2107      	movs	r1, #7
   22082:	4620      	mov	r0, r4
   22084:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   22088:	f7ff fe5f 	bl	21d4a <tmc4361_writeInt>
	if(tmc4361_readInt(tmc4361, TMC4361_VACTUAL) != 0)
   2208c:	2122      	movs	r1, #34	; 0x22
   2208e:	4620      	mov	r0, r4
   22090:	f7ff fe69 	bl	21d66 <tmc4361_readInt>
   22094:	b108      	cbz	r0, 2209a <tmc4361_calibrateClosedLoop+0xd2>
		return 1;
		break;
	default:
		break;
	}
	return 0;
   22096:	2500      	movs	r5, #0
   22098:	e01d      	b.n	220d6 <tmc4361_calibrateClosedLoop+0x10e>
	tmc4361_writeInt(tmc4361, TMC4361_RAMPMODE, 4);
   2209a:	2204      	movs	r2, #4
   2209c:	2120      	movs	r1, #32
   2209e:	4620      	mov	r0, r4
   220a0:	f7ff fe53 	bl	21d4a <tmc4361_writeInt>
	tmc4361_writeInt(tmc4361, TMC4361_VMAX, 10000 << 8);
   220a4:	4a26      	ldr	r2, [pc, #152]	; (22140 <tmc4361_calibrateClosedLoop+0x178>)
   220a6:	2124      	movs	r1, #36	; 0x24
   220a8:	4620      	mov	r0, r4
   220aa:	f7ff fe4e 	bl	21d4a <tmc4361_writeInt>
	stepCount = TMC4361_FIELD_READ(tmc4361, TMC4361_MSCNT_RD, TMC4361_MSCNT_MASK, TMC4361_MSCNT_SHIFT);
   220ae:	2179      	movs	r1, #121	; 0x79
   220b0:	4620      	mov	r0, r4
   220b2:	f7ff fe58 	bl	21d66 <tmc4361_readInt>
	stepCount = stepCount % 256;
   220b6:	b2c2      	uxtb	r2, r0
	if(stepCount == 0)
   220b8:	f1d2 0580 	rsbs	r5, r2, #128	; 0x80
   220bc:	d009      	beq.n	220d2 <tmc4361_calibrateClosedLoop+0x10a>
	stepCount += tmc4361_readInt(tmc4361, TMC4361_XACTUAL);
   220be:	2121      	movs	r1, #33	; 0x21
   220c0:	4620      	mov	r0, r4
   220c2:	f7ff fe50 	bl	21d66 <tmc4361_readInt>
	tmc4361_writeInt(tmc4361, TMC4361_X_TARGET, stepCount);
   220c6:	2137      	movs	r1, #55	; 0x37
   220c8:	182a      	adds	r2, r5, r0
   220ca:	4620      	mov	r0, r4
   220cc:	f7ff fe3d 	bl	21d4a <tmc4361_writeInt>
	return 0;
   220d0:	e7e1      	b.n	22096 <tmc4361_calibrateClosedLoop+0xce>
			state = 3;
   220d2:	2303      	movs	r3, #3
		state = 5;
   220d4:	7033      	strb	r3, [r6, #0]
}
   220d6:	4628      	mov	r0, r5
   220d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_CL_CALIBRATION_EN_MASK, TMC4361_CL_CALIBRATION_EN_SHIFT, 1);
   220da:	2107      	movs	r1, #7
   220dc:	4620      	mov	r0, r4
   220de:	f7ff fe42 	bl	21d66 <tmc4361_readInt>
   220e2:	2107      	movs	r1, #7
   220e4:	f040 7280 	orr.w	r2, r0, #16777216	; 0x1000000
   220e8:	4620      	mov	r0, r4
   220ea:	f7ff fe2e 	bl	21d4a <tmc4361_writeInt>
		state = 4;
   220ee:	2304      	movs	r3, #4
   220f0:	e7a3      	b.n	2203a <tmc4361_calibrateClosedLoop+0x72>
		if(worker0master1)
   220f2:	2d00      	cmp	r5, #0
   220f4:	d1cf      	bne.n	22096 <tmc4361_calibrateClosedLoop+0xce>
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_CL_CALIBRATION_EN_MASK, TMC4361_CL_CALIBRATION_EN_SHIFT, 0);
   220f6:	2107      	movs	r1, #7
   220f8:	4620      	mov	r0, r4
   220fa:	f7ff fe34 	bl	21d66 <tmc4361_readInt>
   220fe:	2107      	movs	r1, #7
   22100:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   22104:	4620      	mov	r0, r4
   22106:	f7ff fe20 	bl	21d4a <tmc4361_writeInt>
		TMC4361_FIELD_UPDATE(tmc4361, TMC4361_ENC_IN_CONF, TMC4361_REGULATION_MODUS_MASK, TMC4361_REGULATION_MODUS_SHIFT, 1);
   2210a:	2107      	movs	r1, #7
   2210c:	4620      	mov	r0, r4
   2210e:	f7ff fe2a 	bl	21d66 <tmc4361_readInt>
   22112:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   22116:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2211a:	2107      	movs	r1, #7
   2211c:	4620      	mov	r0, r4
   2211e:	f7ff fe14 	bl	21d4a <tmc4361_writeInt>
		tmc4361_writeInt(tmc4361, TMC4361_RAMPMODE, TMC4361_RAMP_POSITION | oldRamp);
   22122:	6872      	ldr	r2, [r6, #4]
   22124:	2120      	movs	r1, #32
   22126:	f042 0204 	orr.w	r2, r2, #4
   2212a:	4620      	mov	r0, r4
   2212c:	f7ff fe0d 	bl	21d4a <tmc4361_writeInt>
		state = 5;
   22130:	2305      	movs	r3, #5
   22132:	e7cf      	b.n	220d4 <tmc4361_calibrateClosedLoop+0x10c>
		state = 0;
   22134:	2300      	movs	r3, #0
   22136:	7033      	strb	r3, [r6, #0]
		return 1;
   22138:	2501      	movs	r5, #1
   2213a:	e7cc      	b.n	220d6 <tmc4361_calibrateClosedLoop+0x10e>
   2213c:	1fff59a4 	.word	0x1fff59a4
   22140:	00271000 	.word	0x00271000

00022144 <tmc4361_periodicJob>:
{
   22144:	b570      	push	{r4, r5, r6, lr}
	if(tmc4361->config->state != CONFIG_READY)
   22146:	6805      	ldr	r5, [r0, #0]
{
   22148:	460e      	mov	r6, r1
	if(tmc4361->config->state != CONFIG_READY)
   2214a:	7829      	ldrb	r1, [r5, #0]
{
   2214c:	4604      	mov	r4, r0
	if(tmc4361->config->state != CONFIG_READY)
   2214e:	2900      	cmp	r1, #0
   22150:	d03c      	beq.n	221cc <tmc4361_periodicJob+0x88>
	if(tmc4361->config->state == CONFIG_RESTORE)
   22152:	2902      	cmp	r1, #2
   22154:	d11f      	bne.n	22196 <tmc4361_periodicJob+0x52>
		settings = &tmc4361->config->shadowRegister[0];
   22156:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC4361_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc4361->registerAccess[*ptr]))
   22158:	f995 3001 	ldrsb.w	r3, [r5, #1]
   2215c:	786a      	ldrb	r2, [r5, #1]
   2215e:	2b00      	cmp	r3, #0
   22160:	db08      	blt.n	22174 <tmc4361_periodicJob+0x30>
   22162:	18a3      	adds	r3, r4, r2
   22164:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   22168:	0799      	lsls	r1, r3, #30
   2216a:	d511      	bpl.n	22190 <tmc4361_periodicJob+0x4c>
   2216c:	f003 0348 	and.w	r3, r3, #72	; 0x48
   22170:	2b40      	cmp	r3, #64	; 0x40
   22172:	d00d      	beq.n	22190 <tmc4361_periodicJob+0x4c>
	if (*ptr < TMC4361_REGISTER_COUNT) {
   22174:	f995 3001 	ldrsb.w	r3, [r5, #1]
   22178:	7869      	ldrb	r1, [r5, #1]
   2217a:	2b00      	cmp	r3, #0
   2217c:	db1b      	blt.n	221b6 <tmc4361_periodicJob+0x72>
		tmc4361_writeInt(tmc4361, *ptr, settings[*ptr]);
   2217e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   22182:	4620      	mov	r0, r4
   22184:	f7ff fde1 	bl	21d4a <tmc4361_writeInt>
		(*ptr)++;
   22188:	786b      	ldrb	r3, [r5, #1]
   2218a:	3301      	adds	r3, #1
   2218c:	706b      	strb	r3, [r5, #1]
}
   2218e:	bd70      	pop	{r4, r5, r6, pc}
			(*ptr)++;
   22190:	3201      	adds	r2, #1
   22192:	706a      	strb	r2, [r5, #1]
   22194:	e7e0      	b.n	22158 <tmc4361_periodicJob+0x14>
		settings = &tmc4361->registerResetState[0];
   22196:	3010      	adds	r0, #16
		while((*ptr < TMC4361_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc4361->registerAccess[*ptr]))
   22198:	f995 2001 	ldrsb.w	r2, [r5, #1]
   2219c:	786b      	ldrb	r3, [r5, #1]
   2219e:	2a00      	cmp	r2, #0
   221a0:	dbe8      	blt.n	22174 <tmc4361_periodicJob+0x30>
   221a2:	18e2      	adds	r2, r4, r3
   221a4:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   221a8:	f002 0242 	and.w	r2, r2, #66	; 0x42
   221ac:	2a02      	cmp	r2, #2
   221ae:	d0e1      	beq.n	22174 <tmc4361_periodicJob+0x30>
			(*ptr)++;
   221b0:	3301      	adds	r3, #1
   221b2:	706b      	strb	r3, [r5, #1]
   221b4:	e7f0      	b.n	22198 <tmc4361_periodicJob+0x54>
		if(tmc4361->config->callback)
   221b6:	6822      	ldr	r2, [r4, #0]
   221b8:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   221bc:	b113      	cbz	r3, 221c4 <tmc4361_periodicJob+0x80>
			((tmc4361_callback)tmc4361->config->callback)(tmc4361, tmc4361->config->state);
   221be:	7811      	ldrb	r1, [r2, #0]
   221c0:	4620      	mov	r0, r4
   221c2:	4798      	blx	r3
		tmc4361->config->state = CONFIG_READY;
   221c4:	6823      	ldr	r3, [r4, #0]
   221c6:	2200      	movs	r2, #0
   221c8:	701a      	strb	r2, [r3, #0]
   221ca:	e7e0      	b.n	2218e <tmc4361_periodicJob+0x4a>
	if((tick - tmc4361->oldTick) != 0)
   221cc:	68c3      	ldr	r3, [r0, #12]
   221ce:	42b3      	cmp	r3, r6
   221d0:	d0dd      	beq.n	2218e <tmc4361_periodicJob+0x4a>
		tmc4361_calibrateClosedLoop(tmc4361, 0);
   221d2:	f7ff fef9 	bl	21fc8 <tmc4361_calibrateClosedLoop>
		tmc4361->oldTick = tick;
   221d6:	60e6      	str	r6, [r4, #12]
   221d8:	e7d9      	b.n	2218e <tmc4361_periodicJob+0x4a>
   221da:	bf00      	nop

000221dc <tmc4361A_writeDatagram>:
extern void tmc4361A_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc4361A_writeDatagram(TMC4361ATypeDef *tmc4361A, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   221dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   221e0:	4698      	mov	r8, r3
	int value;
	uint8_t data[5] = { address | TMC4361A_WRITE_BIT, x1, x2, x3, x4 };
   221e2:	f061 037f 	orn	r3, r1, #127	; 0x7f
   221e6:	f88d 3000 	strb.w	r3, [sp]

	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   221ea:	6803      	ldr	r3, [r0, #0]
{
   221ec:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   221f0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC4361A_WRITE_BIT, x1, x2, x3, x4 };
   221f4:	f88d 2001 	strb.w	r2, [sp, #1]
{
   221f8:	4604      	mov	r4, r0
   221fa:	4617      	mov	r7, r2
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   221fc:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC4361A_WRITE_BIT, x1, x2, x3, x4 };
   22200:	f88d 5004 	strb.w	r5, [sp, #4]
{
   22204:	460e      	mov	r6, r1
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   22206:	2205      	movs	r2, #5
   22208:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC4361A_WRITE_BIT, x1, x2, x3, x4 };
   2220a:	f88d 8002 	strb.w	r8, [sp, #2]
   2220e:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   22212:	f7ef fea9 	bl	11f68 <tmc4361A_readWriteArray>

	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc4361A->config->shadowRegister[address] = value;
   22216:	6822      	ldr	r2, [r4, #0]
	tmc4361A->status = data[0];
   22218:	f89d 3000 	ldrb.w	r3, [sp]
   2221c:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	tmc4361A->config->shadowRegister[address] = value;
   22220:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   22224:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc4361A->config->shadowRegister[address] = value;
   22228:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   2222c:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   22230:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc4361A->registerAccess[address] |= TMC_ACCESS_DIRTY;
   22234:	4434      	add	r4, r6
	tmc4361A->config->shadowRegister[address] = value;
   22236:	604b      	str	r3, [r1, #4]
	tmc4361A->registerAccess[address] |= TMC_ACCESS_DIRTY;
   22238:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   2223c:	f043 0308 	orr.w	r3, r3, #8
   22240:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   22244:	b003      	add	sp, #12
   22246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002224a <tmc4361A_writeInt>:

void tmc4361A_writeInt(TMC4361ATypeDef *tmc4361A, uint8_t address, int32_t value)
{
   2224a:	b507      	push	{r0, r1, r2, lr}
	tmc4361A_writeDatagram(tmc4361A, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   2224c:	b2d3      	uxtb	r3, r2
   2224e:	9301      	str	r3, [sp, #4]
   22250:	f3c2 2307 	ubfx	r3, r2, #8, #8
   22254:	9300      	str	r3, [sp, #0]
   22256:	f3c2 4307 	ubfx	r3, r2, #16, #8
   2225a:	0e12      	lsrs	r2, r2, #24
   2225c:	f7ff ffbe 	bl	221dc <tmc4361A_writeDatagram>
}
   22260:	b003      	add	sp, #12
   22262:	f85d fb04 	ldr.w	pc, [sp], #4

00022266 <tmc4361A_readInt>:

int32_t tmc4361A_readInt(TMC4361ATypeDef *tmc4361A, uint8_t address)
{
   22266:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int value;
	uint8_t data[5];

	address = TMC_ADDRESS(address);
   22268:	f001 057f 	and.w	r5, r1, #127	; 0x7f

	if(!TMC_IS_READABLE(tmc4361A->registerAccess[address]))
   2226c:	1942      	adds	r2, r0, r5
   2226e:	6803      	ldr	r3, [r0, #0]
   22270:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   22274:	07d2      	lsls	r2, r2, #31
{
   22276:	4604      	mov	r4, r0
	if(!TMC_IS_READABLE(tmc4361A->registerAccess[address]))
   22278:	d404      	bmi.n	22284 <tmc4361A_readInt+0x1e>
		return tmc4361A->config->shadowRegister[address];
   2227a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   2227e:	6868      	ldr	r0, [r5, #4]

	tmc4361A->status = data[0];
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];

	return value;
}
   22280:	b003      	add	sp, #12
   22282:	bd30      	pop	{r4, r5, pc}
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   22284:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   22288:	f88d 5000 	strb.w	r5, [sp]
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   2228c:	2205      	movs	r2, #5
   2228e:	4669      	mov	r1, sp
   22290:	f7ef fe6a 	bl	11f68 <tmc4361A_readWriteArray>
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   22294:	6823      	ldr	r3, [r4, #0]
	data[0] = address;
   22296:	f88d 5000 	strb.w	r5, [sp]
	tmc4361A_readWriteArray(tmc4361A->config->channel, &data[0], 5);
   2229a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   2229e:	2205      	movs	r2, #5
   222a0:	4669      	mov	r1, sp
   222a2:	f7ef fe61 	bl	11f68 <tmc4361A_readWriteArray>
	tmc4361A->status = data[0];
   222a6:	f8dd 0001 	ldr.w	r0, [sp, #1]
   222aa:	f89d 3000 	ldrb.w	r3, [sp]
   222ae:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
	value = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   222b2:	ba00      	rev	r0, r0
	return value;
   222b4:	e7e4      	b.n	22280 <tmc4361A_readInt+0x1a>

000222b6 <tmc4361A_readWriteCover>:

// Send [length] bytes stored in the [data] array to a driver attached to the TMC4361A
// and overwrite [data] with the replies. data[0] is the first byte sent and received.
void tmc4361A_readWriteCover(TMC4361ATypeDef *tmc4361A, uint8_t *data, size_t length)
{
   222b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// Buffering old values to not interrupt manual covering
	int32_t old_high = tmc4361A->config->shadowRegister[TMC4361A_COVER_HIGH_WR];
	int32_t old_low = tmc4361A->config->shadowRegister[TMC4361A_COVER_LOW_WR];

	// Check if datagram length is valid
	if(length == 0 || length > 8)
   222ba:	1e53      	subs	r3, r2, #1
   222bc:	2b07      	cmp	r3, #7
{
   222be:	b086      	sub	sp, #24
   222c0:	4604      	mov	r4, r0
   222c2:	460e      	mov	r6, r1
   222c4:	4615      	mov	r5, r2
	if(length == 0 || length > 8)
   222c6:	d845      	bhi.n	22354 <tmc4361A_readWriteCover+0x9e>
	int32_t old_high = tmc4361A->config->shadowRegister[TMC4361A_COVER_HIGH_WR];
   222c8:	6803      	ldr	r3, [r0, #0]
   222ca:	188f      	adds	r7, r1, r2
	int32_t old_low = tmc4361A->config->shadowRegister[TMC4361A_COVER_LOW_WR];
   222cc:	e9d3 9a6d 	ldrd	r9, sl, [r3, #436]	; 0x1b4
		return;

	uint8_t bytes[8] = { 0 };
   222d0:	f10d 0810 	add.w	r8, sp, #16
   222d4:	2300      	movs	r3, #0
   222d6:	e9cd 3304 	strd	r3, r3, [sp, #16]
	uint32_t tmp;
	size_t i;

	// Copy data into buffer of maximum cover datagram length (8 bytes)
	for(i = 0; i < length; i++)
   222da:	4642      	mov	r2, r8
   222dc:	463b      	mov	r3, r7
   222de:	42b3      	cmp	r3, r6
   222e0:	d13b      	bne.n	2235a <tmc4361A_readWriteCover+0xa4>
		bytes[i] = data[length-i-1];

	// Send the datagram
	if(length > 4)
   222e2:	2d04      	cmp	r5, #4
   222e4:	d90d      	bls.n	22302 <tmc4361A_readWriteCover+0x4c>
		tmc4361A_writeDatagram(tmc4361A, TMC4361A_COVER_HIGH_WR, bytes[7], bytes[6], bytes[5], bytes[4]);
   222e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   222ea:	9301      	str	r3, [sp, #4]
   222ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
   222f0:	9300      	str	r3, [sp, #0]
   222f2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   222f6:	f89d 3016 	ldrb.w	r3, [sp, #22]
   222fa:	216d      	movs	r1, #109	; 0x6d
   222fc:	4620      	mov	r0, r4
   222fe:	f7ff ff6d 	bl	221dc <tmc4361A_writeDatagram>

	tmc4361A_writeDatagram(tmc4361A, TMC4361A_COVER_LOW_WR, bytes[3], bytes[2], bytes[1], bytes[0]);
   22302:	f89d 3010 	ldrb.w	r3, [sp, #16]
   22306:	9301      	str	r3, [sp, #4]
   22308:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2230c:	9300      	str	r3, [sp, #0]
   2230e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   22312:	f89d 3012 	ldrb.w	r3, [sp, #18]
   22316:	216c      	movs	r1, #108	; 0x6c
   22318:	4620      	mov	r0, r4
   2231a:	f7ff ff5f 	bl	221dc <tmc4361A_writeDatagram>

	// Wait for datagram completion
	// TODO CHECK 3: Get the waiting for cover completion done properly (LH)
	for(i = 0; i < 100; i++)
   2231e:	2300      	movs	r3, #0
   22320:	9303      	str	r3, [sp, #12]
   22322:	9b03      	ldr	r3, [sp, #12]
   22324:	2b63      	cmp	r3, #99	; 0x63
   22326:	d91d      	bls.n	22364 <tmc4361A_readWriteCover+0xae>
		tmp = ACCESS_ONCE(i);

	// Read the reply
	if(length > 4)
   22328:	2d04      	cmp	r5, #4
   2232a:	d904      	bls.n	22336 <tmc4361A_readWriteCover+0x80>
	{
		tmp = tmc4361A_readInt(tmc4361A, TMC4361A_COVER_DRV_HIGH_RD);
   2232c:	216f      	movs	r1, #111	; 0x6f
   2232e:	4620      	mov	r0, r4
   22330:	f7ff ff99 	bl	22266 <tmc4361A_readInt>
		bytes[4] = BYTE(tmp, 0);
   22334:	9005      	str	r0, [sp, #20]
		bytes[5] = BYTE(tmp, 1);
		bytes[6] = BYTE(tmp, 2);
		bytes[7] = BYTE(tmp, 3);
	}
	tmp = tmc4361A_readInt(tmc4361A, TMC4361A_COVER_DRV_LOW_RD);
   22336:	216e      	movs	r1, #110	; 0x6e
   22338:	4620      	mov	r0, r4
   2233a:	f7ff ff94 	bl	22266 <tmc4361A_readInt>
	bytes[0] = BYTE(tmp, 0);
   2233e:	9004      	str	r0, [sp, #16]
	bytes[1] = BYTE(tmp, 1);
	bytes[2] = BYTE(tmp, 2);
	bytes[3] = BYTE(tmp, 3);

	// Write the reply to the data array
	for(i = 0; i < length; i++)
   22340:	42b7      	cmp	r7, r6
   22342:	d112      	bne.n	2236a <tmc4361A_readWriteCover+0xb4>
	{
		data[length-i-1] = bytes[i];
	}

	// Rewriting old values to prevent interrupting manual covering. Imitating unchanged values and state.
	tmc4361A_writeInt(tmc4361A, TMC4361A_COVER_HIGH_WR, old_high);
   22344:	4652      	mov	r2, sl
   22346:	216d      	movs	r1, #109	; 0x6d
   22348:	4620      	mov	r0, r4
   2234a:	f7ff ff7e 	bl	2224a <tmc4361A_writeInt>
	tmc4361A->config->shadowRegister[TMC4361A_COVER_LOW_WR] = old_low;
   2234e:	6823      	ldr	r3, [r4, #0]
   22350:	f8c3 91b4 	str.w	r9, [r3, #436]	; 0x1b4
}
   22354:	b006      	add	sp, #24
   22356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bytes[i] = data[length-i-1];
   2235a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   2235e:	f802 1b01 	strb.w	r1, [r2], #1
	for(i = 0; i < length; i++)
   22362:	e7bc      	b.n	222de <tmc4361A_readWriteCover+0x28>
		tmp = ACCESS_ONCE(i);
   22364:	9a03      	ldr	r2, [sp, #12]
	for(i = 0; i < 100; i++)
   22366:	3301      	adds	r3, #1
   22368:	e7da      	b.n	22320 <tmc4361A_readWriteCover+0x6a>
		data[length-i-1] = bytes[i];
   2236a:	f818 3b01 	ldrb.w	r3, [r8], #1
   2236e:	f807 3d01 	strb.w	r3, [r7, #-1]!
	for(i = 0; i < length; i++)
   22372:	e7e5      	b.n	22340 <tmc4361A_readWriteCover+0x8a>

00022374 <tmc4361A_init>:

// Provide the init function with a channel index (sent back in the SPI callback), a pointer to a ConfigurationTypeDef struct
// and a pointer to a int32_t array (size 128) holding the reset values that shall be used.
void tmc4361A_init(TMC4361ATypeDef *tmc4361A, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   22374:	b530      	push	{r4, r5, lr}
	tmc4361A->velocity  = 0;
   22376:	2400      	movs	r4, #0
	tmc4361A->oldTick   = 0;
	tmc4361A->oldX      = 0;
   22378:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc4361A->velocity  = 0;
   2237c:	6044      	str	r4, [r0, #4]
	tmc4361A->config    = config;
   2237e:	6002      	str	r2, [r0, #0]

	tmc4361A->config->callback     = NULL;
   22380:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc4361A->config->channel      = channel;
	tmc4361A->config->configIndex  = 0;
	tmc4361A->config->state        = CONFIG_READY;
   22384:	8014      	strh	r4, [r2, #0]
   22386:	4c0a      	ldr	r4, [pc, #40]	; (223b0 <tmc4361A_init+0x3c>)
	tmc4361A->config->channel      = channel;
   22388:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   2238c:	3b04      	subs	r3, #4
   2238e:	f500 7204 	add.w	r2, r0, #528	; 0x210
   22392:	f100 0110 	add.w	r1, r0, #16
   22396:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc4361A->registerAccess[i]      = tmc4361A_defaultRegisterAccess[i];
   2239a:	f814 5b01 	ldrb.w	r5, [r4], #1
   2239e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc4361A->registerResetState[i]  = registerResetState[i];
   223a2:	f853 5f04 	ldr.w	r5, [r3, #4]!
   223a6:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   223aa:	4282      	cmp	r2, r0
   223ac:	d1f5      	bne.n	2239a <tmc4361A_init+0x26>
	}
}
   223ae:	bd30      	pop	{r4, r5, pc}
   223b0:	0002a734 	.word	0x0002a734

000223b4 <tmc4361A_fillShadowRegisters>:

// Fill the shadow registers of hardware preset non-readable registers
// Only needed if you want to read out those registers to display the value
// (e.g. for the TMCL IDE register browser)
void tmc4361A_fillShadowRegisters(TMC4361ATypeDef *tmc4361A)
{
   223b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   223b6:	4e12      	ldr	r6, [pc, #72]	; (22400 <tmc4361A_fillShadowRegisters+0x4c>)
	// Check if we have constants defined
	if(ARRAY_SIZE(tmc4361A_RegisterConstants) == 0)
		return;

	int i;
	uint8_t j = 0;
   223b8:	2100      	movs	r1, #0
   223ba:	f500 7504 	add.w	r5, r0, #528	; 0x210
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   223be:	460b      	mov	r3, r1
		while(j < ARRAY_SIZE(tmc4361A_RegisterConstants) && (tmc4361A_RegisterConstants[j].address < i))
			j++;

		// If we have an entry for our current address, write the constant
		if(tmc4361A_RegisterConstants[j].address == i)
			tmc4361A->config->shadowRegister[i] = tmc4361A_RegisterConstants[j].value;
   223c0:	f1a6 0c80 	sub.w	ip, r6, #128	; 0x80
		if(tmc4361A->registerAccess[i] != TMC_ACCESS_W_PRESET)
   223c4:	f815 2b01 	ldrb.w	r2, [r5], #1
   223c8:	2a42      	cmp	r2, #66	; 0x42
   223ca:	d114      	bne.n	223f6 <tmc4361A_fillShadowRegisters+0x42>
   223cc:	460a      	mov	r2, r1
   223ce:	b2d1      	uxtb	r1, r2
		while(j < ARRAY_SIZE(tmc4361A_RegisterConstants) && (tmc4361A_RegisterConstants[j].address < i))
   223d0:	290e      	cmp	r1, #14
   223d2:	f816 7032 	ldrb.w	r7, [r6, r2, lsl #3]
   223d6:	4614      	mov	r4, r2
   223d8:	d803      	bhi.n	223e2 <tmc4361A_fillShadowRegisters+0x2e>
   223da:	429f      	cmp	r7, r3
   223dc:	f102 0201 	add.w	r2, r2, #1
   223e0:	dbf5      	blt.n	223ce <tmc4361A_fillShadowRegisters+0x1a>
		if(tmc4361A_RegisterConstants[j].address == i)
   223e2:	429f      	cmp	r7, r3
   223e4:	d107      	bne.n	223f6 <tmc4361A_fillShadowRegisters+0x42>
			tmc4361A->config->shadowRegister[i] = tmc4361A_RegisterConstants[j].value;
   223e6:	6802      	ldr	r2, [r0, #0]
   223e8:	eb0c 04c4 	add.w	r4, ip, r4, lsl #3
   223ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   223f0:	f8d4 4084 	ldr.w	r4, [r4, #132]	; 0x84
   223f4:	6054      	str	r4, [r2, #4]
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   223f6:	3301      	adds	r3, #1
   223f8:	2b80      	cmp	r3, #128	; 0x80
   223fa:	d1e3      	bne.n	223c4 <tmc4361A_fillShadowRegisters+0x10>
	}
}
   223fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   223fe:	bf00      	nop
   22400:	0002a7b4 	.word	0x0002a7b4

00022404 <tmc4361A_reset>:

uint8_t tmc4361A_reset(TMC4361ATypeDef *tmc4361A)
{
	if(tmc4361A->config->state != CONFIG_READY)
   22404:	6801      	ldr	r1, [r0, #0]
   22406:	780b      	ldrb	r3, [r1, #0]
   22408:	b96b      	cbnz	r3, 22426 <tmc4361A_reset+0x22>
   2240a:	f500 7304 	add.w	r3, r0, #528	; 0x210
   2240e:	f500 7024 	add.w	r0, r0, #656	; 0x290

	int i;

	// Reset the dirty bits
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
		tmc4361A->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   22412:	781a      	ldrb	r2, [r3, #0]
   22414:	f022 0208 	bic.w	r2, r2, #8
   22418:	f803 2b01 	strb.w	r2, [r3], #1
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   2241c:	4283      	cmp	r3, r0
   2241e:	d1f8      	bne.n	22412 <tmc4361A_reset+0xe>

	tmc4361A->config->state        = CONFIG_RESET;
   22420:	2001      	movs	r0, #1
   22422:	8008      	strh	r0, [r1, #0]
	tmc4361A->config->configIndex  = 0;

	return 1;
   22424:	4770      	bx	lr
		return 0;
   22426:	2000      	movs	r0, #0
}
   22428:	4770      	bx	lr

0002242a <tmc4361A_restore>:

uint8_t tmc4361A_restore(TMC4361ATypeDef *tmc4361A)
{
	if(tmc4361A->config->state != CONFIG_READY)
   2242a:	6803      	ldr	r3, [r0, #0]
   2242c:	781a      	ldrb	r2, [r3, #0]
   2242e:	b91a      	cbnz	r2, 22438 <tmc4361A_restore+0xe>
		return 0;

	tmc4361A->config->state        = CONFIG_RESTORE;
   22430:	2202      	movs	r2, #2
   22432:	801a      	strh	r2, [r3, #0]
	tmc4361A->config->configIndex  = 0;

	return 1;
   22434:	2001      	movs	r0, #1
   22436:	4770      	bx	lr
		return 0;
   22438:	2000      	movs	r0, #0
}
   2243a:	4770      	bx	lr

0002243c <tmc4361A_setRegisterResetState>:

void tmc4361A_setRegisterResetState(TMC4361ATypeDef *tmc4361A, const int32_t *resetState)
{
	uint32_t i;
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   2243c:	1f0b      	subs	r3, r1, #4
   2243e:	3010      	adds	r0, #16
   22440:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc4361A->registerResetState[i] = resetState[i];
   22444:	f853 2f04 	ldr.w	r2, [r3, #4]!
   22448:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC4361A_REGISTER_COUNT; i++)
   2244c:	428b      	cmp	r3, r1
   2244e:	d1f9      	bne.n	22444 <tmc4361A_setRegisterResetState+0x8>
}
   22450:	4770      	bx	lr

00022452 <tmc4361A_setCallback>:

void tmc4361A_setCallback(TMC4361ATypeDef *tmc4361A, tmc4361A_callback callback)
{
	tmc4361A->config->callback = (tmc_callback_config) callback;
   22452:	6803      	ldr	r3, [r0, #0]
   22454:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   22458:	4770      	bx	lr

0002245a <tmc4361A_discardVelocityDecimals>:
	tmc4361A_moveTo(tmc4361A, *ticks, velocityMax);
}

int32_t tmc4361A_discardVelocityDecimals(int32_t value)
{
	if(abs(value) > 8000000)
   2245a:	4b07      	ldr	r3, [pc, #28]	; (22478 <tmc4361A_discardVelocityDecimals+0x1e>)
   2245c:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
   22460:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
   22464:	429a      	cmp	r2, r3
   22466:	dd04      	ble.n	22472 <tmc4361A_discardVelocityDecimals+0x18>
	{
		value = (value < 0) ? -8000000 : 8000000;
   22468:	4a04      	ldr	r2, [pc, #16]	; (2247c <tmc4361A_discardVelocityDecimals+0x22>)
   2246a:	ea12 0020 	ands.w	r0, r2, r0, asr #32
   2246e:	bf38      	it	cc
   22470:	4618      	movcc	r0, r3
	}
	return value << 8;
}
   22472:	0200      	lsls	r0, r0, #8
   22474:	4770      	bx	lr
   22476:	bf00      	nop
   22478:	007a1200 	.word	0x007a1200
   2247c:	ff85ee00 	.word	0xff85ee00

00022480 <tmc4361A_rotate>:
{
   22480:	b538      	push	{r3, r4, r5, lr}
   22482:	460d      	mov	r5, r1
	TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_OPERATION_MODE_MASK, TMC4361A_OPERATION_MODE_SHIFT, 0);
   22484:	2120      	movs	r1, #32
{
   22486:	4604      	mov	r4, r0
	TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_OPERATION_MODE_MASK, TMC4361A_OPERATION_MODE_SHIFT, 0);
   22488:	f7ff feed 	bl	22266 <tmc4361A_readInt>
   2248c:	2120      	movs	r1, #32
   2248e:	f020 0204 	bic.w	r2, r0, #4
   22492:	4620      	mov	r0, r4
   22494:	f7ff fed9 	bl	2224a <tmc4361A_writeInt>
	tmc4361A_writeInt(tmc4361A, TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(velocity));
   22498:	4628      	mov	r0, r5
   2249a:	f7ff ffde 	bl	2245a <tmc4361A_discardVelocityDecimals>
   2249e:	2124      	movs	r1, #36	; 0x24
   224a0:	4602      	mov	r2, r0
   224a2:	4620      	mov	r0, r4
}
   224a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4361A_writeInt(tmc4361A, TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(velocity));
   224a8:	f7ff becf 	b.w	2224a <tmc4361A_writeInt>

000224ac <tmc4361A_right>:
	tmc4361A_rotate(tmc4361A, velocity);
   224ac:	f7ff bfe8 	b.w	22480 <tmc4361A_rotate>

000224b0 <tmc4361A_left>:
	tmc4361A_rotate(tmc4361A, -velocity);
   224b0:	4249      	negs	r1, r1
   224b2:	f7ff bfe5 	b.w	22480 <tmc4361A_rotate>

000224b6 <tmc4361A_stop>:
	tmc4361A_rotate(tmc4361A, 0);
   224b6:	2100      	movs	r1, #0
   224b8:	f7ff bfe2 	b.w	22480 <tmc4361A_rotate>

000224bc <tmc4361A_moveTo>:
{
   224bc:	b570      	push	{r4, r5, r6, lr}
   224be:	460d      	mov	r5, r1
	TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_OPERATION_MODE_MASK, TMC4361A_OPERATION_MODE_SHIFT, 1);
   224c0:	2120      	movs	r1, #32
{
   224c2:	4604      	mov	r4, r0
   224c4:	4616      	mov	r6, r2
	TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_OPERATION_MODE_MASK, TMC4361A_OPERATION_MODE_SHIFT, 1);
   224c6:	f7ff fece 	bl	22266 <tmc4361A_readInt>
   224ca:	2120      	movs	r1, #32
   224cc:	f040 0204 	orr.w	r2, r0, #4
   224d0:	4620      	mov	r0, r4
   224d2:	f7ff feba 	bl	2224a <tmc4361A_writeInt>
	tmc4361A_writeInt(tmc4361A, TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(velocityMax));
   224d6:	4630      	mov	r0, r6
   224d8:	f7ff ffbf 	bl	2245a <tmc4361A_discardVelocityDecimals>
   224dc:	2124      	movs	r1, #36	; 0x24
   224de:	4602      	mov	r2, r0
   224e0:	4620      	mov	r0, r4
   224e2:	f7ff feb2 	bl	2224a <tmc4361A_writeInt>
	tmc4361A_writeInt(tmc4361A, TMC4361A_X_TARGET, position);
   224e6:	462a      	mov	r2, r5
   224e8:	4620      	mov	r0, r4
   224ea:	2137      	movs	r1, #55	; 0x37
}
   224ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361A_writeInt(tmc4361A, TMC4361A_X_TARGET, position);
   224f0:	f7ff beab 	b.w	2224a <tmc4361A_writeInt>

000224f4 <tmc4361A_moveBy>:
{
   224f4:	b570      	push	{r4, r5, r6, lr}
   224f6:	460c      	mov	r4, r1
	*ticks += tmc4361A_readInt(tmc4361A, TMC4361A_XACTUAL);
   224f8:	2121      	movs	r1, #33	; 0x21
{
   224fa:	4605      	mov	r5, r0
   224fc:	4616      	mov	r6, r2
	*ticks += tmc4361A_readInt(tmc4361A, TMC4361A_XACTUAL);
   224fe:	f7ff feb2 	bl	22266 <tmc4361A_readInt>
   22502:	6821      	ldr	r1, [r4, #0]
   22504:	4401      	add	r1, r0
   22506:	6021      	str	r1, [r4, #0]
	tmc4361A_moveTo(tmc4361A, *ticks, velocityMax);
   22508:	4632      	mov	r2, r6
   2250a:	4628      	mov	r0, r5
}
   2250c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4361A_moveTo(tmc4361A, *ticks, velocityMax);
   22510:	f7ff bfd4 	b.w	224bc <tmc4361A_moveTo>

00022514 <tmc4361A_calibrateClosedLoop>:

	return 0;
}

uint8_t tmc4361A_calibrateClosedLoop(TMC4361ATypeDef *tmc4361A, uint8_t worker0master1)
{
   22514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22516:	4e5c      	ldr	r6, [pc, #368]	; (22688 <tmc4361A_calibrateClosedLoop+0x174>)
   22518:	4604      	mov	r4, r0
   2251a:	7833      	ldrb	r3, [r6, #0]
	static uint32_t oldRamp;

	uint32_t amax = 0;
	uint32_t dmax = 0;

	if(worker0master1 && state == 0)
   2251c:	460d      	mov	r5, r1
   2251e:	b3a1      	cbz	r1, 2258a <tmc4361A_calibrateClosedLoop+0x76>
   22520:	bb9b      	cbnz	r3, 2258a <tmc4361A_calibrateClosedLoop+0x76>
		state = 1;
   22522:	2301      	movs	r3, #1
   22524:	7033      	strb	r3, [r6, #0]

	switch(state)
	{
	case 1:
		amax = tmc4361A_readInt(tmc4361A, TMC4361A_AMAX);
   22526:	2128      	movs	r1, #40	; 0x28
   22528:	4620      	mov	r0, r4
   2252a:	f7ff fe9c 	bl	22266 <tmc4361A_readInt>
		dmax = tmc4361A_readInt(tmc4361A, TMC4361A_DMAX);
   2252e:	2129      	movs	r1, #41	; 0x29
		amax = tmc4361A_readInt(tmc4361A, TMC4361A_AMAX);
   22530:	4607      	mov	r7, r0
		dmax = tmc4361A_readInt(tmc4361A, TMC4361A_DMAX);
   22532:	4620      	mov	r0, r4
   22534:	f7ff fe97 	bl	22266 <tmc4361A_readInt>

		// Set ramp and motion parameters
		oldRamp = tmc4361A_readInt(tmc4361A, TMC4361A_RAMPMODE);
   22538:	2120      	movs	r1, #32
		dmax = tmc4361A_readInt(tmc4361A, TMC4361A_DMAX);
   2253a:	4605      	mov	r5, r0
		oldRamp = tmc4361A_readInt(tmc4361A, TMC4361A_RAMPMODE);
   2253c:	4620      	mov	r0, r4
   2253e:	f7ff fe92 	bl	22266 <tmc4361A_readInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_RAMP_POSITION | TMC4361A_RAMP_HOLD);
   22542:	2204      	movs	r2, #4
		oldRamp = tmc4361A_readInt(tmc4361A, TMC4361A_RAMPMODE);
   22544:	6070      	str	r0, [r6, #4]
		tmc4361A_writeInt(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_RAMP_POSITION | TMC4361A_RAMP_HOLD);
   22546:	2120      	movs	r1, #32
   22548:	4620      	mov	r0, r4
   2254a:	f7ff fe7e 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_AMAX, MAX(amax, 1000));
   2254e:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   22552:	463a      	mov	r2, r7
   22554:	f04f 0128 	mov.w	r1, #40	; 0x28
   22558:	bf38      	it	cc
   2255a:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   2255e:	4620      	mov	r0, r4
   22560:	f7ff fe73 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_DMAX, MAX(dmax, 1000));
   22564:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   22568:	462a      	mov	r2, r5
   2256a:	f04f 0129 	mov.w	r1, #41	; 0x29
   2256e:	bf38      	it	cc
   22570:	f44f 727a 	movcc.w	r2, #1000	; 0x3e8
   22574:	4620      	mov	r0, r4
   22576:	f7ff fe68 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_VMAX, 0);
   2257a:	2200      	movs	r2, #0
   2257c:	2124      	movs	r1, #36	; 0x24
   2257e:	4620      	mov	r0, r4
   22580:	f7ff fe63 	bl	2224a <tmc4361A_writeInt>

		state = 2;
   22584:	2302      	movs	r3, #2
		break;
	case 3:
		// Start encoder calibration
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_CL_CALIBRATION_EN_MASK, TMC4361A_CL_CALIBRATION_EN_SHIFT, 1);

		state = 4;
   22586:	7033      	strb	r3, [r6, #0]
		break;
   22588:	e02b      	b.n	225e2 <tmc4361A_calibrateClosedLoop+0xce>
	switch(state)
   2258a:	3b01      	subs	r3, #1
   2258c:	2b04      	cmp	r3, #4
   2258e:	d828      	bhi.n	225e2 <tmc4361A_calibrateClosedLoop+0xce>
   22590:	a201      	add	r2, pc, #4	; (adr r2, 22598 <tmc4361A_calibrateClosedLoop+0x84>)
   22592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22596:	bf00      	nop
   22598:	00022527 	.word	0x00022527
   2259c:	000225ad 	.word	0x000225ad
   225a0:	00022627 	.word	0x00022627
   225a4:	0002263f 	.word	0x0002263f
   225a8:	00022681 	.word	0x00022681
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_CL_CALIBRATION_EN_MASK, TMC4361A_CL_CALIBRATION_EN_SHIFT, 0);
   225ac:	2107      	movs	r1, #7
   225ae:	4620      	mov	r0, r4
   225b0:	f7ff fe59 	bl	22266 <tmc4361A_readInt>
   225b4:	2107      	movs	r1, #7
   225b6:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   225ba:	4620      	mov	r0, r4
   225bc:	f7ff fe45 	bl	2224a <tmc4361A_writeInt>
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_REGULATION_MODUS_MASK, TMC4361A_REGULATION_MODUS_SHIFT, 1);
   225c0:	2107      	movs	r1, #7
   225c2:	4620      	mov	r0, r4
   225c4:	f7ff fe4f 	bl	22266 <tmc4361A_readInt>
   225c8:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   225cc:	2107      	movs	r1, #7
   225ce:	4620      	mov	r0, r4
   225d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   225d4:	f7ff fe39 	bl	2224a <tmc4361A_writeInt>
	if(tmc4361A_readInt(tmc4361A, TMC4361A_VACTUAL) != 0)
   225d8:	2122      	movs	r1, #34	; 0x22
   225da:	4620      	mov	r0, r4
   225dc:	f7ff fe43 	bl	22266 <tmc4361A_readInt>
   225e0:	b108      	cbz	r0, 225e6 <tmc4361A_calibrateClosedLoop+0xd2>
		return 1;
		break;
	default:
		break;
	}
	return 0;
   225e2:	2500      	movs	r5, #0
   225e4:	e01d      	b.n	22622 <tmc4361A_calibrateClosedLoop+0x10e>
	tmc4361A_writeInt(tmc4361A, TMC4361A_RAMPMODE, 4);
   225e6:	2204      	movs	r2, #4
   225e8:	2120      	movs	r1, #32
   225ea:	4620      	mov	r0, r4
   225ec:	f7ff fe2d 	bl	2224a <tmc4361A_writeInt>
	tmc4361A_writeInt(tmc4361A, TMC4361A_VMAX, 10000 << 8);
   225f0:	4a26      	ldr	r2, [pc, #152]	; (2268c <tmc4361A_calibrateClosedLoop+0x178>)
   225f2:	2124      	movs	r1, #36	; 0x24
   225f4:	4620      	mov	r0, r4
   225f6:	f7ff fe28 	bl	2224a <tmc4361A_writeInt>
	stepCount = TMC4361A_FIELD_READ(tmc4361A, TMC4361A_MSCNT_RD, TMC4361A_MSCNT_MASK, TMC4361A_MSCNT_SHIFT);
   225fa:	2179      	movs	r1, #121	; 0x79
   225fc:	4620      	mov	r0, r4
   225fe:	f7ff fe32 	bl	22266 <tmc4361A_readInt>
	stepCount = stepCount % 256;
   22602:	b2c2      	uxtb	r2, r0
	if(stepCount == 0)
   22604:	f1d2 0580 	rsbs	r5, r2, #128	; 0x80
   22608:	d009      	beq.n	2261e <tmc4361A_calibrateClosedLoop+0x10a>
	stepCount += tmc4361A_readInt(tmc4361A, TMC4361A_XACTUAL);
   2260a:	2121      	movs	r1, #33	; 0x21
   2260c:	4620      	mov	r0, r4
   2260e:	f7ff fe2a 	bl	22266 <tmc4361A_readInt>
	tmc4361A_writeInt(tmc4361A, TMC4361A_X_TARGET, stepCount);
   22612:	2137      	movs	r1, #55	; 0x37
   22614:	182a      	adds	r2, r5, r0
   22616:	4620      	mov	r0, r4
   22618:	f7ff fe17 	bl	2224a <tmc4361A_writeInt>
	return 0;
   2261c:	e7e1      	b.n	225e2 <tmc4361A_calibrateClosedLoop+0xce>
			state = 3;
   2261e:	2303      	movs	r3, #3
		state = 5;
   22620:	7033      	strb	r3, [r6, #0]
}
   22622:	4628      	mov	r0, r5
   22624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_CL_CALIBRATION_EN_MASK, TMC4361A_CL_CALIBRATION_EN_SHIFT, 1);
   22626:	2107      	movs	r1, #7
   22628:	4620      	mov	r0, r4
   2262a:	f7ff fe1c 	bl	22266 <tmc4361A_readInt>
   2262e:	2107      	movs	r1, #7
   22630:	f040 7280 	orr.w	r2, r0, #16777216	; 0x1000000
   22634:	4620      	mov	r0, r4
   22636:	f7ff fe08 	bl	2224a <tmc4361A_writeInt>
		state = 4;
   2263a:	2304      	movs	r3, #4
   2263c:	e7a3      	b.n	22586 <tmc4361A_calibrateClosedLoop+0x72>
		if(worker0master1)
   2263e:	2d00      	cmp	r5, #0
   22640:	d1cf      	bne.n	225e2 <tmc4361A_calibrateClosedLoop+0xce>
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_CL_CALIBRATION_EN_MASK, TMC4361A_CL_CALIBRATION_EN_SHIFT, 0);
   22642:	2107      	movs	r1, #7
   22644:	4620      	mov	r0, r4
   22646:	f7ff fe0e 	bl	22266 <tmc4361A_readInt>
   2264a:	2107      	movs	r1, #7
   2264c:	f020 7280 	bic.w	r2, r0, #16777216	; 0x1000000
   22650:	4620      	mov	r0, r4
   22652:	f7ff fdfa 	bl	2224a <tmc4361A_writeInt>
		TMC4361A_FIELD_UPDATE(tmc4361A, TMC4361A_ENC_IN_CONF, TMC4361A_REGULATION_MODUS_MASK, TMC4361A_REGULATION_MODUS_SHIFT, 1);
   22656:	2107      	movs	r1, #7
   22658:	4620      	mov	r0, r4
   2265a:	f7ff fe04 	bl	22266 <tmc4361A_readInt>
   2265e:	f420 0240 	bic.w	r2, r0, #12582912	; 0xc00000
   22662:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   22666:	2107      	movs	r1, #7
   22668:	4620      	mov	r0, r4
   2266a:	f7ff fdee 	bl	2224a <tmc4361A_writeInt>
		tmc4361A_writeInt(tmc4361A, TMC4361A_RAMPMODE, TMC4361A_RAMP_POSITION | oldRamp);
   2266e:	6872      	ldr	r2, [r6, #4]
   22670:	2120      	movs	r1, #32
   22672:	f042 0204 	orr.w	r2, r2, #4
   22676:	4620      	mov	r0, r4
   22678:	f7ff fde7 	bl	2224a <tmc4361A_writeInt>
		state = 5;
   2267c:	2305      	movs	r3, #5
   2267e:	e7cf      	b.n	22620 <tmc4361A_calibrateClosedLoop+0x10c>
		state = 0;
   22680:	2300      	movs	r3, #0
   22682:	7033      	strb	r3, [r6, #0]
		return 1;
   22684:	2501      	movs	r5, #1
   22686:	e7cc      	b.n	22622 <tmc4361A_calibrateClosedLoop+0x10e>
   22688:	1fff59ac 	.word	0x1fff59ac
   2268c:	00271000 	.word	0x00271000

00022690 <tmc4361A_periodicJob>:
{
   22690:	b570      	push	{r4, r5, r6, lr}
	if(tmc4361A->config->state != CONFIG_READY)
   22692:	6805      	ldr	r5, [r0, #0]
{
   22694:	460e      	mov	r6, r1
	if(tmc4361A->config->state != CONFIG_READY)
   22696:	7829      	ldrb	r1, [r5, #0]
{
   22698:	4604      	mov	r4, r0
	if(tmc4361A->config->state != CONFIG_READY)
   2269a:	2900      	cmp	r1, #0
   2269c:	d03c      	beq.n	22718 <tmc4361A_periodicJob+0x88>
	if(tmc4361A->config->state == CONFIG_RESTORE)
   2269e:	2902      	cmp	r1, #2
   226a0:	d11f      	bne.n	226e2 <tmc4361A_periodicJob+0x52>
		settings = &tmc4361A->config->shadowRegister[0];
   226a2:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC4361A_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc4361A->registerAccess[*ptr]))
   226a4:	f995 3001 	ldrsb.w	r3, [r5, #1]
   226a8:	786a      	ldrb	r2, [r5, #1]
   226aa:	2b00      	cmp	r3, #0
   226ac:	db08      	blt.n	226c0 <tmc4361A_periodicJob+0x30>
   226ae:	18a3      	adds	r3, r4, r2
   226b0:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   226b4:	0799      	lsls	r1, r3, #30
   226b6:	d511      	bpl.n	226dc <tmc4361A_periodicJob+0x4c>
   226b8:	f003 0348 	and.w	r3, r3, #72	; 0x48
   226bc:	2b40      	cmp	r3, #64	; 0x40
   226be:	d00d      	beq.n	226dc <tmc4361A_periodicJob+0x4c>
	if (*ptr < TMC4361A_REGISTER_COUNT) {
   226c0:	f995 3001 	ldrsb.w	r3, [r5, #1]
   226c4:	7869      	ldrb	r1, [r5, #1]
   226c6:	2b00      	cmp	r3, #0
   226c8:	db1b      	blt.n	22702 <tmc4361A_periodicJob+0x72>
		tmc4361A_writeInt(tmc4361A, *ptr, settings[*ptr]);
   226ca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   226ce:	4620      	mov	r0, r4
   226d0:	f7ff fdbb 	bl	2224a <tmc4361A_writeInt>
		(*ptr)++;
   226d4:	786b      	ldrb	r3, [r5, #1]
   226d6:	3301      	adds	r3, #1
   226d8:	706b      	strb	r3, [r5, #1]
}
   226da:	bd70      	pop	{r4, r5, r6, pc}
			(*ptr)++;
   226dc:	3201      	adds	r2, #1
   226de:	706a      	strb	r2, [r5, #1]
   226e0:	e7e0      	b.n	226a4 <tmc4361A_periodicJob+0x14>
		settings = &tmc4361A->registerResetState[0];
   226e2:	3010      	adds	r0, #16
		while((*ptr < TMC4361A_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc4361A->registerAccess[*ptr]))
   226e4:	f995 2001 	ldrsb.w	r2, [r5, #1]
   226e8:	786b      	ldrb	r3, [r5, #1]
   226ea:	2a00      	cmp	r2, #0
   226ec:	dbe8      	blt.n	226c0 <tmc4361A_periodicJob+0x30>
   226ee:	18e2      	adds	r2, r4, r3
   226f0:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   226f4:	f002 0242 	and.w	r2, r2, #66	; 0x42
   226f8:	2a02      	cmp	r2, #2
   226fa:	d0e1      	beq.n	226c0 <tmc4361A_periodicJob+0x30>
			(*ptr)++;
   226fc:	3301      	adds	r3, #1
   226fe:	706b      	strb	r3, [r5, #1]
   22700:	e7f0      	b.n	226e4 <tmc4361A_periodicJob+0x54>
		if(tmc4361A->config->callback)
   22702:	6822      	ldr	r2, [r4, #0]
   22704:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   22708:	b113      	cbz	r3, 22710 <tmc4361A_periodicJob+0x80>
			((tmc4361A_callback)tmc4361A->config->callback)(tmc4361A, tmc4361A->config->state);
   2270a:	7811      	ldrb	r1, [r2, #0]
   2270c:	4620      	mov	r0, r4
   2270e:	4798      	blx	r3
		tmc4361A->config->state = CONFIG_READY;
   22710:	6823      	ldr	r3, [r4, #0]
   22712:	2200      	movs	r2, #0
   22714:	701a      	strb	r2, [r3, #0]
   22716:	e7e0      	b.n	226da <tmc4361A_periodicJob+0x4a>
	if((tick - tmc4361A->oldTick) != 0)
   22718:	68c3      	ldr	r3, [r0, #12]
   2271a:	42b3      	cmp	r3, r6
   2271c:	d0dd      	beq.n	226da <tmc4361A_periodicJob+0x4a>
		tmc4361A_calibrateClosedLoop(tmc4361A, 0);
   2271e:	f7ff fef9 	bl	22514 <tmc4361A_calibrateClosedLoop>
		tmc4361A->oldTick = tick;
   22722:	60e6      	str	r6, [r4, #12]
   22724:	e7d9      	b.n	226da <tmc4361A_periodicJob+0x4a>
   22726:	bf00      	nop

00022728 <tmc4670_readInt>:
extern uint8_t tmc4670_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4670_readInt(uint8_t motor, uint8_t address)
{
   22728:	b538      	push	{r3, r4, r5, lr}
	// clear write bit
	address &= 0x7F;

	// write address
	tmc4670_readwriteByte(motor, address, false);
   2272a:	2200      	movs	r2, #0
   2272c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
   22730:	4604      	mov	r4, r0
	tmc4670_readwriteByte(motor, address, false);
   22732:	f7f0 fe14 	bl	1335e <tmc4670_readwriteByte>

	// read data
	int32_t value = tmc4670_readwriteByte(motor, 0, false);
   22736:	2200      	movs	r2, #0
   22738:	4611      	mov	r1, r2
   2273a:	4620      	mov	r0, r4
   2273c:	f7f0 fe0f 	bl	1335e <tmc4670_readwriteByte>
	value <<= 8;
	value |= tmc4670_readwriteByte(motor, 0, false);
   22740:	2200      	movs	r2, #0
   22742:	4611      	mov	r1, r2
	value <<= 8;
   22744:	0205      	lsls	r5, r0, #8
	value |= tmc4670_readwriteByte(motor, 0, false);
   22746:	4620      	mov	r0, r4
   22748:	f7f0 fe09 	bl	1335e <tmc4670_readwriteByte>
	value <<= 8;
	value |= tmc4670_readwriteByte(motor, 0, false);
   2274c:	2200      	movs	r2, #0
   2274e:	4611      	mov	r1, r2
	value |= tmc4670_readwriteByte(motor, 0, false);
   22750:	4305      	orrs	r5, r0
	value |= tmc4670_readwriteByte(motor, 0, false);
   22752:	4620      	mov	r0, r4
   22754:	f7f0 fe03 	bl	1335e <tmc4670_readwriteByte>
	value <<= 8;
   22758:	022d      	lsls	r5, r5, #8
	value |= tmc4670_readwriteByte(motor, 0, false);
   2275a:	4305      	orrs	r5, r0
	value <<= 8;
	value |= tmc4670_readwriteByte(motor, 0, true);
   2275c:	2201      	movs	r2, #1
   2275e:	2100      	movs	r1, #0
   22760:	4620      	mov	r0, r4
   22762:	f7f0 fdfc 	bl	1335e <tmc4670_readwriteByte>
	value <<= 8;
   22766:	022d      	lsls	r5, r5, #8

	return value;
}
   22768:	4328      	orrs	r0, r5
   2276a:	bd38      	pop	{r3, r4, r5, pc}

0002276c <tmc4670_writeInt>:

void tmc4670_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
   2276c:	b538      	push	{r3, r4, r5, lr}
	// write address
	tmc4670_readwriteByte(motor, address|0x80, false);
   2276e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
   22772:	4604      	mov	r4, r0
   22774:	4615      	mov	r5, r2
	tmc4670_readwriteByte(motor, address|0x80, false);
   22776:	2200      	movs	r2, #0
   22778:	f7f0 fdf1 	bl	1335e <tmc4670_readwriteByte>

	// write value
	tmc4670_readwriteByte(motor, 0xFF & (value>>24), false);
   2277c:	0e29      	lsrs	r1, r5, #24
   2277e:	2200      	movs	r2, #0
   22780:	4620      	mov	r0, r4
   22782:	f7f0 fdec 	bl	1335e <tmc4670_readwriteByte>
	tmc4670_readwriteByte(motor, 0xFF & (value>>16), false);
   22786:	f3c5 4107 	ubfx	r1, r5, #16, #8
   2278a:	2200      	movs	r2, #0
   2278c:	4620      	mov	r0, r4
   2278e:	f7f0 fde6 	bl	1335e <tmc4670_readwriteByte>
	tmc4670_readwriteByte(motor, 0xFF & (value>>8), false);
   22792:	f3c5 2107 	ubfx	r1, r5, #8, #8
   22796:	2200      	movs	r2, #0
   22798:	4620      	mov	r0, r4
   2279a:	f7f0 fde0 	bl	1335e <tmc4670_readwriteByte>
	tmc4670_readwriteByte(motor, 0xFF & (value>>0), true);
   2279e:	b2e9      	uxtb	r1, r5
   227a0:	4620      	mov	r0, r4
   227a2:	2201      	movs	r2, #1
}
   227a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4670_readwriteByte(motor, 0xFF & (value>>0), true);
   227a8:	f7f0 bdd9 	b.w	1335e <tmc4670_readwriteByte>

000227ac <tmc4670_readRegister16BitValue>:

uint16_t tmc4670_readRegister16BitValue(uint8_t motor, uint8_t address, uint8_t channel)
{
   227ac:	b510      	push	{r4, lr}
   227ae:	4614      	mov	r4, r2
	int32_t registerValue = tmc4670_readInt(motor, address);
   227b0:	f7ff ffba 	bl	22728 <tmc4670_readInt>

	// read one channel
	switch(channel)
   227b4:	b11c      	cbz	r4, 227be <tmc4670_readRegister16BitValue+0x12>
   227b6:	2c01      	cmp	r4, #1
   227b8:	d003      	beq.n	227c2 <tmc4670_readRegister16BitValue+0x16>
   227ba:	2000      	movs	r0, #0
	case BIT_16_TO_31:
		return ((registerValue >> 16) & 0xFFFF);
		break;
	}
	return 0;
}
   227bc:	bd10      	pop	{r4, pc}
		return (registerValue & 0xFFFF);
   227be:	b280      	uxth	r0, r0
   227c0:	e7fc      	b.n	227bc <tmc4670_readRegister16BitValue+0x10>
		return ((registerValue >> 16) & 0xFFFF);
   227c2:	0c00      	lsrs	r0, r0, #16
   227c4:	e7fa      	b.n	227bc <tmc4670_readRegister16BitValue+0x10>

000227c6 <tmc4670_writeRegister16BitValue>:

void tmc4670_writeRegister16BitValue(uint8_t motor, uint8_t address, uint8_t channel, uint16_t value)
{
   227c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227c8:	4615      	mov	r5, r2
   227ca:	4606      	mov	r6, r0
   227cc:	460f      	mov	r7, r1
   227ce:	461c      	mov	r4, r3
	// read actual register content
	int32_t registerValue = tmc4670_readInt(motor, address);
   227d0:	f7ff ffaa 	bl	22728 <tmc4670_readInt>
   227d4:	4602      	mov	r2, r0

	// update one channel
	switch(channel)
   227d6:	b13d      	cbz	r5, 227e8 <tmc4670_writeRegister16BitValue+0x22>
   227d8:	2d01      	cmp	r5, #1
   227da:	d008      	beq.n	227ee <tmc4670_writeRegister16BitValue+0x28>
		registerValue &= 0x0000FFFF;
		registerValue |= (value << 16);
		break;
	}
	// write the register
	tmc4670_writeInt(motor, address, registerValue);
   227dc:	4639      	mov	r1, r7
   227de:	4630      	mov	r0, r6
}
   227e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tmc4670_writeInt(motor, address, registerValue);
   227e4:	f7ff bfc2 	b.w	2276c <tmc4670_writeInt>
		registerValue |= value;
   227e8:	f364 020f 	bfi	r2, r4, #0, #16
		break;
   227ec:	e7f6      	b.n	227dc <tmc4670_writeRegister16BitValue+0x16>
		registerValue |= (value << 16);
   227ee:	f364 421f 	bfi	r2, r4, #16, #16
		break;
   227f2:	e7f3      	b.n	227dc <tmc4670_writeRegister16BitValue+0x16>

000227f4 <tmc4670_switchToMotionMode>:

void tmc4670_switchToMotionMode(uint8_t motor, uint8_t mode)
{
   227f4:	b538      	push	{r3, r4, r5, lr}
   227f6:	460d      	mov	r5, r1
	// switch motion mode
	uint32_t actualModeRegister = tmc4670_readInt(motor, TMC4670_MODE_RAMP_MODE_MOTION);
   227f8:	2163      	movs	r1, #99	; 0x63
{
   227fa:	4604      	mov	r4, r0
	uint32_t actualModeRegister = tmc4670_readInt(motor, TMC4670_MODE_RAMP_MODE_MOTION);
   227fc:	f7ff ff94 	bl	22728 <tmc4670_readInt>
	actualModeRegister &= 0xFFFFFF00;
   22800:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	actualModeRegister |= mode;
	tmc4670_writeInt(motor, TMC4670_MODE_RAMP_MODE_MOTION, actualModeRegister);
   22804:	ea45 0200 	orr.w	r2, r5, r0
   22808:	2163      	movs	r1, #99	; 0x63
   2280a:	4620      	mov	r0, r4
}
   2280c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4670_writeInt(motor, TMC4670_MODE_RAMP_MODE_MOTION, actualModeRegister);
   22810:	f7ff bfac 	b.w	2276c <tmc4670_writeInt>

00022814 <tmc4670_setTargetTorque_raw>:

void tmc4670_setTargetTorque_raw(uint8_t motor, int32_t targetTorque)
{
   22814:	b570      	push	{r4, r5, r6, lr}
   22816:	4604      	mov	r4, r0
   22818:	460d      	mov	r5, r1
	tmc4670_switchToMotionMode(motor, TMC4670_MOTION_MODE_TORQUE);
   2281a:	2101      	movs	r1, #1
   2281c:	f7ff ffea 	bl	227f4 <tmc4670_switchToMotionMode>
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, targetTorque);
   22820:	b2ab      	uxth	r3, r5
   22822:	4620      	mov	r0, r4
   22824:	2201      	movs	r2, #1
}
   22826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, targetTorque);
   2282a:	2164      	movs	r1, #100	; 0x64
   2282c:	f7ff bfcb 	b.w	227c6 <tmc4670_writeRegister16BitValue>

00022830 <tmc4670_getTargetTorque_raw>:

int32_t tmc4670_getTargetTorque_raw(uint8_t motor)
{
   22830:	b510      	push	{r4, lr}
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 0);
   22832:	216f      	movs	r1, #111	; 0x6f
{
   22834:	4604      	mov	r4, r0
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 0);
   22836:	2200      	movs	r2, #0
   22838:	f7ff ff98 	bl	2276c <tmc4670_writeInt>
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   2283c:	4620      	mov	r0, r4
   2283e:	216e      	movs	r1, #110	; 0x6e
}
   22840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   22844:	f7ff bf70 	b.w	22728 <tmc4670_readInt>

00022848 <tmc4670_getActualTorque_raw>:

int32_t tmc4670_getActualTorque_raw(uint8_t motor)
{
   22848:	b508      	push	{r3, lr}
	int32_t registerValue = tmc4670_readInt(motor, address);
   2284a:	2169      	movs	r1, #105	; 0x69
   2284c:	f7ff ff6c 	bl	22728 <tmc4670_readInt>
	return (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
}
   22850:	1400      	asrs	r0, r0, #16
   22852:	bd08      	pop	{r3, pc}

00022854 <tmc4670_getActualRampTorque_raw>:
int32_t tmc4670_getActualRampTorque_raw(uint8_t motor)
{
	// no ramp implemented
	UNUSED(motor);
	return 0;
}
   22854:	2000      	movs	r0, #0
   22856:	4770      	bx	lr

00022858 <tmc4670_setTargetTorque_mA>:

void tmc4670_setTargetTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t targetTorque)
{
   22858:	b570      	push	{r4, r5, r6, lr}
   2285a:	4605      	mov	r5, r0
   2285c:	460e      	mov	r6, r1
   2285e:	4614      	mov	r4, r2
	tmc4670_switchToMotionMode(motor, TMC4670_MOTION_MODE_TORQUE);
   22860:	2101      	movs	r1, #1
   22862:	f7ff ffc7 	bl	227f4 <tmc4670_switchToMotionMode>
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, (targetTorque * 256) / (int32_t) torqueMeasurementFactor);
   22866:	0224      	lsls	r4, r4, #8
   22868:	4628      	mov	r0, r5
   2286a:	fb94 f3f6 	sdiv	r3, r4, r6
   2286e:	2201      	movs	r2, #1
}
   22870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, (targetTorque * 256) / (int32_t) torqueMeasurementFactor);
   22874:	b29b      	uxth	r3, r3
   22876:	2164      	movs	r1, #100	; 0x64
   22878:	f7ff bfa5 	b.w	227c6 <tmc4670_writeRegister16BitValue>

0002287c <tmc4670_getTargetTorque_mA>:

int32_t tmc4670_getTargetTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   2287c:	b510      	push	{r4, lr}
   2287e:	460c      	mov	r4, r1
	return (tmc4670_getTargetTorque_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22880:	f7ff ffd6 	bl	22830 <tmc4670_getTargetTorque_raw>
   22884:	4360      	muls	r0, r4
   22886:	bf48      	it	mi
   22888:	30ff      	addmi	r0, #255	; 0xff
}
   2288a:	1200      	asrs	r0, r0, #8
   2288c:	bd10      	pop	{r4, pc}

0002288e <tmc4670_getActualTorque_mA>:

int32_t tmc4670_getActualTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   2288e:	b510      	push	{r4, lr}
   22890:	460c      	mov	r4, r1
	return (tmc4670_getActualTorque_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22892:	f7ff ffd9 	bl	22848 <tmc4670_getActualTorque_raw>
   22896:	4360      	muls	r0, r4
   22898:	bf48      	it	mi
   2289a:	30ff      	addmi	r0, #255	; 0xff
}
   2289c:	1200      	asrs	r0, r0, #8
   2289e:	bd10      	pop	{r4, pc}

000228a0 <tmc4670_getActualRampTorque_mA>:
{
	// no ramp implemented
	UNUSED(motor);
	UNUSED(torqueMeasurementFactor);
	return 0;
}
   228a0:	2000      	movs	r0, #0
   228a2:	4770      	bx	lr

000228a4 <tmc4670_setTargetFlux_raw>:

void tmc4670_setTargetFlux_raw(uint8_t motor, int32_t targetFlux)
{
	// do not change the MOTION_MODE here! target flux can also be used during velocity and position modes
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, targetFlux);
   228a4:	b28b      	uxth	r3, r1
   228a6:	2200      	movs	r2, #0
   228a8:	2164      	movs	r1, #100	; 0x64
   228aa:	f7ff bf8c 	b.w	227c6 <tmc4670_writeRegister16BitValue>

000228ae <tmc4670_getTargetFlux_raw>:
}

int32_t tmc4670_getTargetFlux_raw(uint8_t motor)
{
   228ae:	b510      	push	{r4, lr}
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 1);
   228b0:	216f      	movs	r1, #111	; 0x6f
{
   228b2:	4604      	mov	r4, r0
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 1);
   228b4:	2201      	movs	r2, #1
   228b6:	f7ff ff59 	bl	2276c <tmc4670_writeInt>
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   228ba:	4620      	mov	r0, r4
   228bc:	216e      	movs	r1, #110	; 0x6e
}
   228be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   228c2:	f7ff bf31 	b.w	22728 <tmc4670_readInt>

000228c6 <tmc4670_getActualFlux_raw>:

int32_t tmc4670_getActualFlux_raw(uint8_t motor)
{
   228c6:	b508      	push	{r3, lr}
	int32_t registerValue = tmc4670_readInt(motor, address);
   228c8:	2169      	movs	r1, #105	; 0x69
   228ca:	f7ff ff2d 	bl	22728 <tmc4670_readInt>
	return (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_ACTUAL, BIT_0_TO_15);
}
   228ce:	b200      	sxth	r0, r0
   228d0:	bd08      	pop	{r3, pc}

000228d2 <tmc4670_setTargetFlux_mA>:

void tmc4670_setTargetFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t targetFlux)
{
	// do not change the MOTION_MODE here! target flux can also be used during velocity and position modes
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, (targetFlux * 256) / (int32_t) torqueMeasurementFactor);
   228d2:	0212      	lsls	r2, r2, #8
   228d4:	fb92 f2f1 	sdiv	r2, r2, r1
   228d8:	2164      	movs	r1, #100	; 0x64
   228da:	b293      	uxth	r3, r2
   228dc:	2200      	movs	r2, #0
   228de:	f7ff bf72 	b.w	227c6 <tmc4670_writeRegister16BitValue>

000228e2 <tmc4670_getTargetFlux_mA>:
}

int32_t tmc4670_getTargetFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   228e2:	b510      	push	{r4, lr}
   228e4:	460c      	mov	r4, r1
	return (tmc4670_getTargetFlux_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   228e6:	f7ff ffe2 	bl	228ae <tmc4670_getTargetFlux_raw>
   228ea:	4360      	muls	r0, r4
   228ec:	bf48      	it	mi
   228ee:	30ff      	addmi	r0, #255	; 0xff
}
   228f0:	1200      	asrs	r0, r0, #8
   228f2:	bd10      	pop	{r4, pc}

000228f4 <tmc4670_getActualFlux_mA>:

int32_t tmc4670_getActualFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   228f4:	b510      	push	{r4, lr}
   228f6:	460c      	mov	r4, r1
	return (tmc4670_getActualFlux_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   228f8:	f7ff ffe5 	bl	228c6 <tmc4670_getActualFlux_raw>
   228fc:	4360      	muls	r0, r4
   228fe:	bf48      	it	mi
   22900:	30ff      	addmi	r0, #255	; 0xff
}
   22902:	1200      	asrs	r0, r0, #8
   22904:	bd10      	pop	{r4, pc}

00022906 <tmc4670_setTorqueFluxLimit_mA>:

void tmc4670_setTorqueFluxLimit_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t max)
{
	tmc4670_writeRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_LIMITS, BIT_0_TO_15, (max * 256) / (int32_t) torqueMeasurementFactor);
   22906:	0212      	lsls	r2, r2, #8
   22908:	fb92 f2f1 	sdiv	r2, r2, r1
   2290c:	215e      	movs	r1, #94	; 0x5e
   2290e:	b293      	uxth	r3, r2
   22910:	2200      	movs	r2, #0
   22912:	f7ff bf58 	b.w	227c6 <tmc4670_writeRegister16BitValue>

00022916 <tmc4670_getTorqueFluxLimit_mA>:
}

int32_t tmc4670_getTorqueFluxLimit_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22916:	b510      	push	{r4, lr}
   22918:	460c      	mov	r4, r1
	int32_t registerValue = tmc4670_readInt(motor, address);
   2291a:	215e      	movs	r1, #94	; 0x5e
   2291c:	f7ff ff04 	bl	22728 <tmc4670_readInt>
	return ((int32_t) tmc4670_readRegister16BitValue(motor, TMC4670_PID_TORQUE_FLUX_LIMITS, BIT_0_TO_15) * (int32_t) torqueMeasurementFactor) / 256;
   22920:	b280      	uxth	r0, r0
   22922:	4360      	muls	r0, r4
}
   22924:	1200      	asrs	r0, r0, #8
   22926:	bd10      	pop	{r4, pc}

00022928 <tmc4670_setTargetVelocity>:

void tmc4670_setTargetVelocity(uint8_t motor, int32_t targetVelocity)
{
   22928:	b538      	push	{r3, r4, r5, lr}
   2292a:	4604      	mov	r4, r0
   2292c:	460d      	mov	r5, r1
	tmc4670_switchToMotionMode(motor, TMC4670_MOTION_MODE_VELOCITY);
   2292e:	2102      	movs	r1, #2
   22930:	f7ff ff60 	bl	227f4 <tmc4670_switchToMotionMode>
	tmc4670_writeInt(motor, TMC4670_PID_VELOCITY_TARGET, targetVelocity);
   22934:	462a      	mov	r2, r5
   22936:	4620      	mov	r0, r4
   22938:	2166      	movs	r1, #102	; 0x66
}
   2293a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4670_writeInt(motor, TMC4670_PID_VELOCITY_TARGET, targetVelocity);
   2293e:	f7ff bf15 	b.w	2276c <tmc4670_writeInt>

00022942 <tmc4670_getTargetVelocity>:

int32_t tmc4670_getTargetVelocity(uint8_t motor)
{
   22942:	b510      	push	{r4, lr}
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 2);
   22944:	216f      	movs	r1, #111	; 0x6f
{
   22946:	4604      	mov	r4, r0
	tmc4670_writeInt(motor, TMC4670_INTERIM_ADDR, 2);
   22948:	2202      	movs	r2, #2
   2294a:	f7ff ff0f 	bl	2276c <tmc4670_writeInt>
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   2294e:	4620      	mov	r0, r4
   22950:	216e      	movs	r1, #110	; 0x6e
}
   22952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (int32_t) tmc4670_readInt(motor, TMC4670_INTERIM_DATA);
   22956:	f7ff bee7 	b.w	22728 <tmc4670_readInt>

0002295a <tmc4670_getActualVelocity>:

int32_t tmc4670_getActualVelocity(uint8_t motor)
{
	return (int32_t) tmc4670_readInt(motor, TMC4670_PID_VELOCITY_ACTUAL);
   2295a:	216a      	movs	r1, #106	; 0x6a
   2295c:	f7ff bee4 	b.w	22728 <tmc4670_readInt>

00022960 <tmc4670_getActualRampVelocity>:
   22960:	2000      	movs	r0, #0
   22962:	4770      	bx	lr

00022964 <tmc4670_setAbsolutTargetPosition>:
	// no ramp implemented
	return 0;
}

void tmc4670_setAbsolutTargetPosition(uint8_t motor, int32_t targetPosition)
{
   22964:	b538      	push	{r3, r4, r5, lr}
   22966:	4604      	mov	r4, r0
   22968:	460d      	mov	r5, r1
	tmc4670_switchToMotionMode(motor, TMC4670_MOTION_MODE_POSITION);
   2296a:	2103      	movs	r1, #3
   2296c:	f7ff ff42 	bl	227f4 <tmc4670_switchToMotionMode>
	tmc4670_writeInt(motor, TMC4670_PID_POSITION_TARGET, targetPosition);
   22970:	462a      	mov	r2, r5
   22972:	4620      	mov	r0, r4
   22974:	2168      	movs	r1, #104	; 0x68
}
   22976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4670_writeInt(motor, TMC4670_PID_POSITION_TARGET, targetPosition);
   2297a:	f7ff bef7 	b.w	2276c <tmc4670_writeInt>

0002297e <tmc4670_setRelativeTargetPosition>:

void tmc4670_setRelativeTargetPosition(uint8_t motor, int32_t relativePosition)
{
   2297e:	b538      	push	{r3, r4, r5, lr}
   22980:	4604      	mov	r4, r0
   22982:	460d      	mov	r5, r1
	tmc4670_switchToMotionMode(motor, TMC4670_MOTION_MODE_POSITION);
   22984:	2103      	movs	r1, #3
   22986:	f7ff ff35 	bl	227f4 <tmc4670_switchToMotionMode>
	// determine actual position and add relative position ticks
	tmc4670_writeInt(motor, TMC4670_PID_POSITION_TARGET, (int32_t) tmc4670_readInt(motor, TMC4670_PID_POSITION_ACTUAL) + relativePosition);
   2298a:	216b      	movs	r1, #107	; 0x6b
   2298c:	4620      	mov	r0, r4
   2298e:	f7ff fecb 	bl	22728 <tmc4670_readInt>
   22992:	2168      	movs	r1, #104	; 0x68
   22994:	1942      	adds	r2, r0, r5
   22996:	4620      	mov	r0, r4
}
   22998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4670_writeInt(motor, TMC4670_PID_POSITION_TARGET, (int32_t) tmc4670_readInt(motor, TMC4670_PID_POSITION_ACTUAL) + relativePosition);
   2299c:	f7ff bee6 	b.w	2276c <tmc4670_writeInt>

000229a0 <tmc4670_getTargetPosition>:

int32_t tmc4670_getTargetPosition(uint8_t motor)
{
	return (int32_t) tmc4670_readInt(motor, TMC4670_PID_POSITION_TARGET);
   229a0:	2168      	movs	r1, #104	; 0x68
   229a2:	f7ff bec1 	b.w	22728 <tmc4670_readInt>

000229a6 <tmc4670_setActualPosition>:
}

void tmc4670_setActualPosition(uint8_t motor, int32_t actualPosition)
{
   229a6:	460a      	mov	r2, r1
	tmc4670_writeInt(motor, TMC4670_PID_POSITION_ACTUAL, actualPosition);
   229a8:	216b      	movs	r1, #107	; 0x6b
   229aa:	f7ff bedf 	b.w	2276c <tmc4670_writeInt>

000229ae <tmc4670_getActualPosition>:
}

int32_t tmc4670_getActualPosition(uint8_t motor)
{
	return (int32_t) tmc4670_readInt(motor, TMC4670_PID_POSITION_ACTUAL);
   229ae:	216b      	movs	r1, #107	; 0x6b
   229b0:	f7ff beba 	b.w	22728 <tmc4670_readInt>

000229b4 <tmc4670_getActualRampPosition>:
   229b4:	2000      	movs	r0, #0
   229b6:	4770      	bx	lr

000229b8 <tmc4670_doEncoderInitializationMode0>:
	return 0;
}

// encoder initialization
void tmc4670_doEncoderInitializationMode0(uint8_t motor, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   229b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t last_Phi_E_Selection = 0;
	static uint32_t last_UQ_UD_EXT = 0;
	static int16_t last_PHI_E_EXT = 0;

	switch (*initState)
   229ba:	780d      	ldrb	r5, [r1, #0]
   229bc:	2d01      	cmp	r5, #1
{
   229be:	4604      	mov	r4, r0
   229c0:	460e      	mov	r6, r1
	switch (*initState)
   229c2:	d005      	beq.n	229d0 <tmc4670_doEncoderInitializationMode0+0x18>
   229c4:	2d02      	cmp	r5, #2
   229c6:	d034      	beq.n	22a32 <tmc4670_doEncoderInitializationMode0+0x7a>
   229c8:	2d00      	cmp	r5, #0
   229ca:	d150      	bne.n	22a6e <tmc4670_doEncoderInitializationMode0+0xb6>
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
   229cc:	801d      	strh	r5, [r3, #0]
		break;
	default:
		*initState = 0;
		break;
	}
}
   229ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t registerValue = tmc4670_readInt(motor, address);
   229d0:	2152      	movs	r1, #82	; 0x52
   229d2:	f7ff fea9 	bl	22728 <tmc4670_readInt>
		last_Phi_E_Selection = (uint16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PHI_E_SELECTION, BIT_0_TO_15);
   229d6:	4f27      	ldr	r7, [pc, #156]	; (22a74 <tmc4670_doEncoderInitializationMode0+0xbc>)
		last_UQ_UD_EXT = (uint32_t) tmc4670_readInt(motor, TMC4670_UQ_UD_EXT);
   229d8:	2124      	movs	r1, #36	; 0x24
		return (registerValue & 0xFFFF);
   229da:	8038      	strh	r0, [r7, #0]
		last_UQ_UD_EXT = (uint32_t) tmc4670_readInt(motor, TMC4670_UQ_UD_EXT);
   229dc:	4620      	mov	r0, r4
   229de:	f7ff fea3 	bl	22728 <tmc4670_readInt>
	int32_t registerValue = tmc4670_readInt(motor, address);
   229e2:	211c      	movs	r1, #28
		last_UQ_UD_EXT = (uint32_t) tmc4670_readInt(motor, TMC4670_UQ_UD_EXT);
   229e4:	6078      	str	r0, [r7, #4]
	int32_t registerValue = tmc4670_readInt(motor, address);
   229e6:	4620      	mov	r0, r4
   229e8:	f7ff fe9e 	bl	22728 <tmc4670_readInt>
		tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   229ec:	2300      	movs	r3, #0
		last_PHI_E_EXT = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_PHI_E_EXT, BIT_0_TO_15);
   229ee:	8138      	strh	r0, [r7, #8]
		tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   229f0:	462a      	mov	r2, r5
   229f2:	2129      	movs	r1, #41	; 0x29
   229f4:	4620      	mov	r0, r4
   229f6:	f7ff fee6 	bl	227c6 <tmc4670_writeRegister16BitValue>
		tmc4670_writeRegister16BitValue(motor, TMC4670_PHI_E_SELECTION, BIT_0_TO_15, 1);
   229fa:	462b      	mov	r3, r5
   229fc:	2200      	movs	r2, #0
   229fe:	2152      	movs	r1, #82	; 0x52
   22a00:	4620      	mov	r0, r4
   22a02:	f7ff fee0 	bl	227c6 <tmc4670_writeRegister16BitValue>
		tmc4670_writeRegister16BitValue(motor, TMC4670_UQ_UD_EXT, BIT_16_TO_31, 0);
   22a06:	2300      	movs	r3, #0
   22a08:	462a      	mov	r2, r5
   22a0a:	2124      	movs	r1, #36	; 0x24
   22a0c:	4620      	mov	r0, r4
   22a0e:	f7ff feda 	bl	227c6 <tmc4670_writeRegister16BitValue>
		tmc4670_writeRegister16BitValue(motor, TMC4670_UQ_UD_EXT, BIT_0_TO_15, startVoltage);
   22a12:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   22a16:	2200      	movs	r2, #0
   22a18:	2124      	movs	r1, #36	; 0x24
   22a1a:	4620      	mov	r0, r4
   22a1c:	f7ff fed3 	bl	227c6 <tmc4670_writeRegister16BitValue>
		tmc4670_writeRegister16BitValue(motor, TMC4670_PHI_E_EXT, BIT_0_TO_15, 0);
   22a20:	2300      	movs	r3, #0
   22a22:	461a      	mov	r2, r3
   22a24:	211c      	movs	r1, #28
   22a26:	4620      	mov	r0, r4
   22a28:	f7ff fecd 	bl	227c6 <tmc4670_writeRegister16BitValue>
		*initState = STATE_WAIT_INIT_TIME;
   22a2c:	2302      	movs	r3, #2
		*initState = 0;
   22a2e:	7033      	strb	r3, [r6, #0]
}
   22a30:	e7cd      	b.n	229ce <tmc4670_doEncoderInitializationMode0+0x16>
		(*actualInitWaitTime)++;
   22a32:	8819      	ldrh	r1, [r3, #0]
   22a34:	3101      	adds	r1, #1
   22a36:	b289      	uxth	r1, r1
		if(*actualInitWaitTime >= initWaitTime)
   22a38:	4291      	cmp	r1, r2
		(*actualInitWaitTime)++;
   22a3a:	8019      	strh	r1, [r3, #0]
		if(*actualInitWaitTime >= initWaitTime)
   22a3c:	d3c7      	bcc.n	229ce <tmc4670_doEncoderInitializationMode0+0x16>
			tmc4670_writeInt(motor, TMC4670_UQ_UD_EXT, last_UQ_UD_EXT);
   22a3e:	4d0d      	ldr	r5, [pc, #52]	; (22a74 <tmc4670_doEncoderInitializationMode0+0xbc>)
			tmc4670_writeInt(motor, TMC4670_ABN_DECODER_COUNT, 0);
   22a40:	2200      	movs	r2, #0
   22a42:	2127      	movs	r1, #39	; 0x27
   22a44:	f7ff fe92 	bl	2276c <tmc4670_writeInt>
			tmc4670_writeInt(motor, TMC4670_UQ_UD_EXT, last_UQ_UD_EXT);
   22a48:	686a      	ldr	r2, [r5, #4]
   22a4a:	2124      	movs	r1, #36	; 0x24
   22a4c:	4620      	mov	r0, r4
   22a4e:	f7ff fe8d 	bl	2276c <tmc4670_writeInt>
			tmc4670_writeRegister16BitValue(motor, TMC4670_PHI_E_EXT, BIT_0_TO_15, last_PHI_E_EXT);
   22a52:	892b      	ldrh	r3, [r5, #8]
   22a54:	2200      	movs	r2, #0
   22a56:	211c      	movs	r1, #28
   22a58:	4620      	mov	r0, r4
   22a5a:	f7ff feb4 	bl	227c6 <tmc4670_writeRegister16BitValue>
			tmc4670_writeRegister16BitValue(motor, TMC4670_PHI_E_SELECTION, BIT_0_TO_15, last_Phi_E_Selection);
   22a5e:	882b      	ldrh	r3, [r5, #0]
   22a60:	2200      	movs	r2, #0
   22a62:	2152      	movs	r1, #82	; 0x52
   22a64:	4620      	mov	r0, r4
   22a66:	f7ff feae 	bl	227c6 <tmc4670_writeRegister16BitValue>
			*initState = STATE_ESTIMATE_OFFSET;
   22a6a:	2303      	movs	r3, #3
   22a6c:	e7df      	b.n	22a2e <tmc4670_doEncoderInitializationMode0+0x76>
		*initState = 0;
   22a6e:	2300      	movs	r3, #0
   22a70:	e7dd      	b.n	22a2e <tmc4670_doEncoderInitializationMode0+0x76>
   22a72:	bf00      	nop
   22a74:	1fff59b4 	.word	0x1fff59b4

00022a78 <tmc4670_getS16CircleDifference>:

int16_t tmc4670_getS16CircleDifference(int16_t newValue, int16_t oldValue)
{
	return (newValue - oldValue);
   22a78:	1a40      	subs	r0, r0, r1
}
   22a7a:	b200      	sxth	r0, r0
   22a7c:	4770      	bx	lr

00022a7e <tmc4670_doEncoderInitializationMode2>:

void tmc4670_doEncoderInitializationMode2(uint8_t motor, uint8_t *initState, uint16_t *actualInitWaitTime)
{
   22a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int16_t hall_phi_e_old = 0;
	static int16_t hall_phi_e_new = 0;
	static int16_t actual_coarse_offset = 0;

	switch (*initState)
   22a82:	780e      	ldrb	r6, [r1, #0]
   22a84:	2e01      	cmp	r6, #1
{
   22a86:	4605      	mov	r5, r0
   22a88:	460f      	mov	r7, r1
	switch (*initState)
   22a8a:	d006      	beq.n	22a9a <tmc4670_doEncoderInitializationMode2+0x1c>
   22a8c:	2e02      	cmp	r6, #2
   22a8e:	d02d      	beq.n	22aec <tmc4670_doEncoderInitializationMode2+0x6e>
   22a90:	2e00      	cmp	r6, #0
   22a92:	d14d      	bne.n	22b30 <tmc4670_doEncoderInitializationMode2+0xb2>
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
   22a94:	8016      	strh	r6, [r2, #0]
		break;
	default:
		*initState = 0;
		break;
	}
}
   22a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc4670_writeInt(motor, TMC4670_HALL_MODE, tmc4670_readInt(motor, TMC4670_HALL_MODE) & 0xFFFFFEFF);
   22a9a:	2133      	movs	r1, #51	; 0x33
   22a9c:	f7ff fe44 	bl	22728 <tmc4670_readInt>
   22aa0:	2133      	movs	r1, #51	; 0x33
   22aa2:	f420 7280 	bic.w	r2, r0, #256	; 0x100
   22aa6:	4628      	mov	r0, r5
   22aa8:	f7ff fe60 	bl	2276c <tmc4670_writeInt>
		tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   22aac:	2300      	movs	r3, #0
   22aae:	4632      	mov	r2, r6
   22ab0:	2129      	movs	r1, #41	; 0x29
   22ab2:	4628      	mov	r0, r5
   22ab4:	f7ff fe87 	bl	227c6 <tmc4670_writeRegister16BitValue>
	int32_t registerValue = tmc4670_readInt(motor, address);
   22ab8:	2139      	movs	r1, #57	; 0x39
   22aba:	4628      	mov	r0, r5
   22abc:	f7ff fe34 	bl	22728 <tmc4670_readInt>
		hall_phi_e_old = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_0_TO_15);
   22ac0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 22b34 <tmc4670_doEncoderInitializationMode2+0xb6>
	int32_t registerValue = tmc4670_readInt(motor, address);
   22ac4:	4604      	mov	r4, r0
		hall_phi_e_old = (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_0_TO_15);
   22ac6:	f8a8 000a 	strh.w	r0, [r8, #10]
	int32_t registerValue = tmc4670_readInt(motor, address);
   22aca:	212a      	movs	r1, #42	; 0x2a
   22acc:	4628      	mov	r0, r5
   22ace:	f7ff fe2b 	bl	22728 <tmc4670_readInt>
	return (newValue - oldValue);
   22ad2:	eba4 4310 	sub.w	r3, r4, r0, lsr #16
   22ad6:	b29b      	uxth	r3, r3
		tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, actual_coarse_offset);
   22ad8:	4632      	mov	r2, r6
   22ada:	2129      	movs	r1, #41	; 0x29
   22adc:	4628      	mov	r0, r5
		actual_coarse_offset = tmc4670_getS16CircleDifference(hall_phi_e_old, (int16_t) tmc4670_readRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M, BIT_16_TO_31));
   22ade:	f8a8 300c 	strh.w	r3, [r8, #12]
		tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, actual_coarse_offset);
   22ae2:	f7ff fe70 	bl	227c6 <tmc4670_writeRegister16BitValue>
		*initState = STATE_WAIT_INIT_TIME;
   22ae6:	2302      	movs	r3, #2
		*initState = 0;
   22ae8:	703b      	strb	r3, [r7, #0]
}
   22aea:	e7d4      	b.n	22a96 <tmc4670_doEncoderInitializationMode2+0x18>
	int32_t registerValue = tmc4670_readInt(motor, address);
   22aec:	2139      	movs	r1, #57	; 0x39
   22aee:	f7ff fe1b 	bl	22728 <tmc4670_readInt>
		if(hall_phi_e_old != hall_phi_e_new)
   22af2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 22b34 <tmc4670_doEncoderInitializationMode2+0xb6>
   22af6:	f9b8 400a 	ldrsh.w	r4, [r8, #10]
   22afa:	b203      	sxth	r3, r0
   22afc:	42a3      	cmp	r3, r4
	int32_t registerValue = tmc4670_readInt(motor, address);
   22afe:	4606      	mov	r6, r0
		if(hall_phi_e_old != hall_phi_e_new)
   22b00:	d0c9      	beq.n	22a96 <tmc4670_doEncoderInitializationMode2+0x18>
	return (newValue - oldValue);
   22b02:	b2a4      	uxth	r4, r4
   22b04:	1b36      	subs	r6, r6, r4
	int32_t registerValue = tmc4670_readInt(motor, address);
   22b06:	212a      	movs	r1, #42	; 0x2a
   22b08:	4628      	mov	r0, r5
   22b0a:	f7ff fe0d 	bl	22728 <tmc4670_readInt>
			int16_t hall_phi_e_estimated = hall_phi_e_old + tmc4670_getS16CircleDifference(hall_phi_e_new, hall_phi_e_old)/2;
   22b0e:	f3c6 33c0 	ubfx	r3, r6, #15, #1
   22b12:	fa03 f686 	sxtah	r6, r3, r6
	return (newValue - oldValue);
   22b16:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   22b1a:	441c      	add	r4, r3
   22b1c:	eb04 0466 	add.w	r4, r4, r6, asr #1
   22b20:	eba4 4410 	sub.w	r4, r4, r0, lsr #16
			tmc4670_writeRegister16BitValue(motor, TMC4670_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, tmc4670_getS16CircleDifference(hall_phi_e_estimated, abn_phi_e_actual));
   22b24:	b2a3      	uxth	r3, r4
   22b26:	2201      	movs	r2, #1
   22b28:	2129      	movs	r1, #41	; 0x29
   22b2a:	4628      	mov	r0, r5
   22b2c:	f7ff fe4b 	bl	227c6 <tmc4670_writeRegister16BitValue>
		*initState = 0;
   22b30:	2300      	movs	r3, #0
   22b32:	e7d9      	b.n	22ae8 <tmc4670_doEncoderInitializationMode2+0x6a>
   22b34:	1fff59b4 	.word	0x1fff59b4

00022b38 <tmc4670_checkEncderInitialization>:

void tmc4670_checkEncderInitialization(uint8_t motor, uint32_t actualSystick, uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   22b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// use the systick as 1ms timer for encoder initialization
	static uint32_t lastSystick = 0;
	if(actualSystick != lastSystick)
   22b3c:	4e10      	ldr	r6, [pc, #64]	; (22b80 <tmc4670_checkEncderInitialization+0x48>)
{
   22b3e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   22b42:	461c      	mov	r4, r3
	if(actualSystick != lastSystick)
   22b44:	6933      	ldr	r3, [r6, #16]
{
   22b46:	460f      	mov	r7, r1
	if(actualSystick != lastSystick)
   22b48:	42bb      	cmp	r3, r7
{
   22b4a:	4615      	mov	r5, r2
   22b4c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   22b50:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   22b54:	4680      	mov	r8, r0
	if(actualSystick != lastSystick)
   22b56:	d006      	beq.n	22b66 <tmc4670_checkEncderInitialization+0x2e>
	{
		// needs timer to use the wait time
		if(initMode == 0)
   22b58:	b925      	cbnz	r5, 22b64 <tmc4670_checkEncderInitialization+0x2c>
		{
			tmc4670_doEncoderInitializationMode0(motor, initState, initWaitTime, actualInitWaitTime, startVoltage);
   22b5a:	9100      	str	r1, [sp, #0]
   22b5c:	464b      	mov	r3, r9
   22b5e:	4621      	mov	r1, r4
   22b60:	f7ff ff2a 	bl	229b8 <tmc4670_doEncoderInitializationMode0>
		}
		lastSystick = actualSystick;
   22b64:	6137      	str	r7, [r6, #16]
	}

	// needs no timer
	if(initMode == 2)
   22b66:	2d02      	cmp	r5, #2
   22b68:	d107      	bne.n	22b7a <tmc4670_checkEncderInitialization+0x42>
	{
		tmc4670_doEncoderInitializationMode2(motor, initState, actualInitWaitTime);
   22b6a:	464a      	mov	r2, r9
   22b6c:	4621      	mov	r1, r4
   22b6e:	4640      	mov	r0, r8
	}
}
   22b70:	b003      	add	sp, #12
   22b72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		tmc4670_doEncoderInitializationMode2(motor, initState, actualInitWaitTime);
   22b76:	f7ff bf82 	b.w	22a7e <tmc4670_doEncoderInitializationMode2>
}
   22b7a:	b003      	add	sp, #12
   22b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22b80:	1fff59b4 	.word	0x1fff59b4

00022b84 <tmc4670_periodicJob>:

void tmc4670_periodicJob(uint8_t motor, uint32_t actualSystick, uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   22b84:	b430      	push	{r4, r5}
   22b86:	f8bd 4008 	ldrh.w	r4, [sp, #8]
   22b8a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	tmc4670_checkEncderInitialization(motor, actualSystick, initMode, initState, initWaitTime, actualInitWaitTime, startVoltage);
   22b8e:	9504      	str	r5, [sp, #16]
   22b90:	9402      	str	r4, [sp, #8]
}
   22b92:	bc30      	pop	{r4, r5}
	tmc4670_checkEncderInitialization(motor, actualSystick, initMode, initState, initWaitTime, actualInitWaitTime, startVoltage);
   22b94:	f7ff bfd0 	b.w	22b38 <tmc4670_checkEncderInitialization>

00022b98 <tmc4670_startEncoderInitialization>:

void tmc4670_startEncoderInitialization(uint8_t mode, uint8_t *initMode, uint8_t *initState)
{
	// allow only a new initialization if no actual initialization is running
	if(*initState == STATE_NOTHING_TO_DO)
   22b98:	7813      	ldrb	r3, [r2, #0]
   22b9a:	b933      	cbnz	r3, 22baa <tmc4670_startEncoderInitialization+0x12>
	{
		if(mode == 0) // estimate offset
   22b9c:	b918      	cbnz	r0, 22ba6 <tmc4670_startEncoderInitialization+0xe>
		{
			// set mode
			*initMode = 2;

			// start initialization
			*initState = 1;
   22b9e:	2301      	movs	r3, #1
			*initMode = 2;
   22ba0:	7008      	strb	r0, [r1, #0]
			*initState = 1;
   22ba2:	7013      	strb	r3, [r2, #0]
		}
	}
}
   22ba4:	e001      	b.n	22baa <tmc4670_startEncoderInitialization+0x12>
		else if(mode == 2) // use hall sensor signals
   22ba6:	2802      	cmp	r0, #2
   22ba8:	d0f9      	beq.n	22b9e <tmc4670_startEncoderInitialization+0x6>
}
   22baa:	4770      	bx	lr

00022bac <tmc4670_disablePWM>:

void tmc4670_disablePWM(uint8_t motor)
{
	tmc4670_writeInt(motor, TMC4670_PWM_SV_CHOP, 0);
   22bac:	2200      	movs	r2, #0
   22bae:	211a      	movs	r1, #26
   22bb0:	f7ff bddc 	b.w	2276c <tmc4670_writeInt>

00022bb4 <tmc4671_readInt>:
extern uint8_t tmc4671_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int32_t tmc4671_readInt(uint8_t motor, uint8_t address)
{
   22bb4:	b538      	push	{r3, r4, r5, lr}
	// clear write bit
	address &= 0x7F;

	// write address
	tmc4671_readwriteByte(motor, address, false);
   22bb6:	2200      	movs	r2, #0
   22bb8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
   22bbc:	4604      	mov	r4, r0
	tmc4671_readwriteByte(motor, address, false);
   22bbe:	f7f0 fee9 	bl	13994 <tmc4671_readwriteByte>

	// read data
	int32_t value = tmc4671_readwriteByte(motor, 0, false);
   22bc2:	2200      	movs	r2, #0
   22bc4:	4611      	mov	r1, r2
   22bc6:	4620      	mov	r0, r4
   22bc8:	f7f0 fee4 	bl	13994 <tmc4671_readwriteByte>
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, false);
   22bcc:	2200      	movs	r2, #0
   22bce:	4611      	mov	r1, r2
	value <<= 8;
   22bd0:	0205      	lsls	r5, r0, #8
	value |= tmc4671_readwriteByte(motor, 0, false);
   22bd2:	4620      	mov	r0, r4
   22bd4:	f7f0 fede 	bl	13994 <tmc4671_readwriteByte>
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, false);
   22bd8:	2200      	movs	r2, #0
   22bda:	4611      	mov	r1, r2
	value |= tmc4671_readwriteByte(motor, 0, false);
   22bdc:	4305      	orrs	r5, r0
	value |= tmc4671_readwriteByte(motor, 0, false);
   22bde:	4620      	mov	r0, r4
   22be0:	f7f0 fed8 	bl	13994 <tmc4671_readwriteByte>
	value <<= 8;
   22be4:	022d      	lsls	r5, r5, #8
	value |= tmc4671_readwriteByte(motor, 0, false);
   22be6:	4305      	orrs	r5, r0
	value <<= 8;
	value |= tmc4671_readwriteByte(motor, 0, true);
   22be8:	2201      	movs	r2, #1
   22bea:	2100      	movs	r1, #0
   22bec:	4620      	mov	r0, r4
   22bee:	f7f0 fed1 	bl	13994 <tmc4671_readwriteByte>
	value <<= 8;
   22bf2:	022d      	lsls	r5, r5, #8

	return value;
}
   22bf4:	4328      	orrs	r0, r5
   22bf6:	bd38      	pop	{r3, r4, r5, pc}

00022bf8 <tmc4671_writeInt>:

void tmc4671_writeInt(uint8_t motor, uint8_t address, int32_t value)
{
   22bf8:	b538      	push	{r3, r4, r5, lr}
	// write address
	tmc4671_readwriteByte(motor, address|0x80, false);
   22bfa:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
   22bfe:	4604      	mov	r4, r0
   22c00:	4615      	mov	r5, r2
	tmc4671_readwriteByte(motor, address|0x80, false);
   22c02:	2200      	movs	r2, #0
   22c04:	f7f0 fec6 	bl	13994 <tmc4671_readwriteByte>

	// write value
	tmc4671_readwriteByte(motor, 0xFF & (value>>24), false);
   22c08:	0e29      	lsrs	r1, r5, #24
   22c0a:	2200      	movs	r2, #0
   22c0c:	4620      	mov	r0, r4
   22c0e:	f7f0 fec1 	bl	13994 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>16), false);
   22c12:	f3c5 4107 	ubfx	r1, r5, #16, #8
   22c16:	2200      	movs	r2, #0
   22c18:	4620      	mov	r0, r4
   22c1a:	f7f0 febb 	bl	13994 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>8), false);
   22c1e:	f3c5 2107 	ubfx	r1, r5, #8, #8
   22c22:	2200      	movs	r2, #0
   22c24:	4620      	mov	r0, r4
   22c26:	f7f0 feb5 	bl	13994 <tmc4671_readwriteByte>
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
   22c2a:	b2e9      	uxtb	r1, r5
   22c2c:	4620      	mov	r0, r4
   22c2e:	2201      	movs	r2, #1
}
   22c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_readwriteByte(motor, 0xFF & (value>>0), true);
   22c34:	f7f0 beae 	b.w	13994 <tmc4671_readwriteByte>

00022c38 <tmc4671_readRegister16BitValue>:

uint16_t tmc4671_readRegister16BitValue(uint8_t motor, uint8_t address, uint8_t channel)
{
   22c38:	b510      	push	{r4, lr}
   22c3a:	4614      	mov	r4, r2
	int32_t registerValue = tmc4671_readInt(motor, address);
   22c3c:	f7ff ffba 	bl	22bb4 <tmc4671_readInt>

	// read one channel
	switch(channel)
   22c40:	b11c      	cbz	r4, 22c4a <tmc4671_readRegister16BitValue+0x12>
   22c42:	2c01      	cmp	r4, #1
   22c44:	d003      	beq.n	22c4e <tmc4671_readRegister16BitValue+0x16>
   22c46:	2000      	movs	r0, #0
	case BIT_16_TO_31:
		return ((registerValue >> 16) & 0xFFFF);
		break;
	}
	return 0;
}
   22c48:	bd10      	pop	{r4, pc}
		return (registerValue & 0xFFFF);
   22c4a:	b280      	uxth	r0, r0
   22c4c:	e7fc      	b.n	22c48 <tmc4671_readRegister16BitValue+0x10>
		return ((registerValue >> 16) & 0xFFFF);
   22c4e:	0c00      	lsrs	r0, r0, #16
   22c50:	e7fa      	b.n	22c48 <tmc4671_readRegister16BitValue+0x10>

00022c52 <tmc4671_writeRegister16BitValue>:

void tmc4671_writeRegister16BitValue(uint8_t motor, uint8_t address, uint8_t channel, uint16_t value)
{
   22c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c54:	4615      	mov	r5, r2
   22c56:	4606      	mov	r6, r0
   22c58:	460f      	mov	r7, r1
   22c5a:	461c      	mov	r4, r3
	// read actual register content
	int32_t registerValue = tmc4671_readInt(motor, address);
   22c5c:	f7ff ffaa 	bl	22bb4 <tmc4671_readInt>
   22c60:	4602      	mov	r2, r0

	// update one channel
	switch(channel)
   22c62:	b13d      	cbz	r5, 22c74 <tmc4671_writeRegister16BitValue+0x22>
   22c64:	2d01      	cmp	r5, #1
   22c66:	d008      	beq.n	22c7a <tmc4671_writeRegister16BitValue+0x28>
		registerValue &= 0x0000FFFF;
		registerValue |= (value << 16);
		break;
	}
	// write the register
	tmc4671_writeInt(motor, address, registerValue);
   22c68:	4639      	mov	r1, r7
   22c6a:	4630      	mov	r0, r6
}
   22c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tmc4671_writeInt(motor, address, registerValue);
   22c70:	f7ff bfc2 	b.w	22bf8 <tmc4671_writeInt>
		registerValue |= value;
   22c74:	f364 020f 	bfi	r2, r4, #0, #16
		break;
   22c78:	e7f6      	b.n	22c68 <tmc4671_writeRegister16BitValue+0x16>
		registerValue |= (value << 16);
   22c7a:	f364 421f 	bfi	r2, r4, #16, #16
		break;
   22c7e:	e7f3      	b.n	22c68 <tmc4671_writeRegister16BitValue+0x16>

00022c80 <tmc4671_switchToMotionMode>:

void tmc4671_switchToMotionMode(uint8_t motor, uint8_t mode)
{
   22c80:	b538      	push	{r3, r4, r5, lr}
   22c82:	460d      	mov	r5, r1
	// switch motion mode
	uint32_t actualModeRegister = tmc4671_readInt(motor, TMC4671_MODE_RAMP_MODE_MOTION);
   22c84:	2163      	movs	r1, #99	; 0x63
{
   22c86:	4604      	mov	r4, r0
	uint32_t actualModeRegister = tmc4671_readInt(motor, TMC4671_MODE_RAMP_MODE_MOTION);
   22c88:	f7ff ff94 	bl	22bb4 <tmc4671_readInt>
	actualModeRegister &= 0xFFFFFF00;
   22c8c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
	actualModeRegister |= mode;
	tmc4671_writeInt(motor, TMC4671_MODE_RAMP_MODE_MOTION, actualModeRegister);
   22c90:	ea45 0200 	orr.w	r2, r5, r0
   22c94:	2163      	movs	r1, #99	; 0x63
   22c96:	4620      	mov	r0, r4
}
   22c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_MODE_RAMP_MODE_MOTION, actualModeRegister);
   22c9c:	f7ff bfac 	b.w	22bf8 <tmc4671_writeInt>

00022ca0 <tmc4671_setTargetTorque_raw>:

void tmc4671_setTargetTorque_raw(uint8_t motor, int32_t targetTorque)
{
   22ca0:	b570      	push	{r4, r5, r6, lr}
   22ca2:	4604      	mov	r4, r0
   22ca4:	460d      	mov	r5, r1
	tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_TORQUE);
   22ca6:	2101      	movs	r1, #1
   22ca8:	f7ff ffea 	bl	22c80 <tmc4671_switchToMotionMode>
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, targetTorque);
   22cac:	b2ab      	uxth	r3, r5
   22cae:	4620      	mov	r0, r4
   22cb0:	2201      	movs	r2, #1
}
   22cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, targetTorque);
   22cb6:	2164      	movs	r1, #100	; 0x64
   22cb8:	f7ff bfcb 	b.w	22c52 <tmc4671_writeRegister16BitValue>

00022cbc <tmc4671_getTargetTorque_raw>:

int32_t tmc4671_getTargetTorque_raw(uint8_t motor)
{
   22cbc:	b570      	push	{r4, r5, r6, lr}
	// remember last set index
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22cbe:	216f      	movs	r1, #111	; 0x6f
{
   22cc0:	4604      	mov	r4, r0
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22cc2:	f7ff ff77 	bl	22bb4 <tmc4671_readInt>

	// get value
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 0);
   22cc6:	2200      	movs	r2, #0
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22cc8:	4606      	mov	r6, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 0);
   22cca:	216f      	movs	r1, #111	; 0x6f
   22ccc:	4620      	mov	r0, r4
   22cce:	f7ff ff93 	bl	22bf8 <tmc4671_writeInt>
	int32_t value = (int32_t)tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22cd2:	216e      	movs	r1, #110	; 0x6e
   22cd4:	4620      	mov	r0, r4
   22cd6:	f7ff ff6d 	bl	22bb4 <tmc4671_readInt>

	// reset last set index
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22cda:	4632      	mov	r2, r6
	int32_t value = (int32_t)tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22cdc:	4605      	mov	r5, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22cde:	216f      	movs	r1, #111	; 0x6f
   22ce0:	4620      	mov	r0, r4
   22ce2:	f7ff ff89 	bl	22bf8 <tmc4671_writeInt>
	return value;
}
   22ce6:	4628      	mov	r0, r5
   22ce8:	bd70      	pop	{r4, r5, r6, pc}

00022cea <tmc4671_getActualTorque_raw>:

int32_t tmc4671_getActualTorque_raw(uint8_t motor)
{
   22cea:	b508      	push	{r3, lr}
	int32_t registerValue = tmc4671_readInt(motor, address);
   22cec:	2169      	movs	r1, #105	; 0x69
   22cee:	f7ff ff61 	bl	22bb4 <tmc4671_readInt>
	return (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL, BIT_16_TO_31);
}
   22cf2:	1400      	asrs	r0, r0, #16
   22cf4:	bd08      	pop	{r3, pc}

00022cf6 <tmc4671_getActualRampTorque_raw>:
int32_t tmc4671_getActualRampTorque_raw(uint8_t motor)
{
	// no ramp implemented
	UNUSED(motor);
	return 0;
}
   22cf6:	2000      	movs	r0, #0
   22cf8:	4770      	bx	lr

00022cfa <tmc4671_setTargetTorque_mA>:

void tmc4671_setTargetTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t targetTorque)
{
   22cfa:	b570      	push	{r4, r5, r6, lr}
   22cfc:	4605      	mov	r5, r0
   22cfe:	460e      	mov	r6, r1
   22d00:	4614      	mov	r4, r2
	tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_TORQUE);
   22d02:	2101      	movs	r1, #1
   22d04:	f7ff ffbc 	bl	22c80 <tmc4671_switchToMotionMode>
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, (targetTorque * 256) / (int32_t) torqueMeasurementFactor);
   22d08:	0224      	lsls	r4, r4, #8
   22d0a:	4628      	mov	r0, r5
   22d0c:	fb94 f3f6 	sdiv	r3, r4, r6
   22d10:	2201      	movs	r2, #1
}
   22d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_16_TO_31, (targetTorque * 256) / (int32_t) torqueMeasurementFactor);
   22d16:	b29b      	uxth	r3, r3
   22d18:	2164      	movs	r1, #100	; 0x64
   22d1a:	f7ff bf9a 	b.w	22c52 <tmc4671_writeRegister16BitValue>

00022d1e <tmc4671_getTargetTorque_mA>:

int32_t tmc4671_getTargetTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22d1e:	b510      	push	{r4, lr}
   22d20:	460c      	mov	r4, r1
	return (tmc4671_getTargetTorque_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22d22:	f7ff ffcb 	bl	22cbc <tmc4671_getTargetTorque_raw>
   22d26:	4360      	muls	r0, r4
   22d28:	bf48      	it	mi
   22d2a:	30ff      	addmi	r0, #255	; 0xff
}
   22d2c:	1200      	asrs	r0, r0, #8
   22d2e:	bd10      	pop	{r4, pc}

00022d30 <tmc4671_getActualTorque_mA>:

int32_t tmc4671_getActualTorque_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22d30:	b510      	push	{r4, lr}
   22d32:	460c      	mov	r4, r1
	return (tmc4671_getActualTorque_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22d34:	f7ff ffd9 	bl	22cea <tmc4671_getActualTorque_raw>
   22d38:	4360      	muls	r0, r4
   22d3a:	bf48      	it	mi
   22d3c:	30ff      	addmi	r0, #255	; 0xff
}
   22d3e:	1200      	asrs	r0, r0, #8
   22d40:	bd10      	pop	{r4, pc}

00022d42 <tmc4671_getTargetTorqueFluxSum_mA>:

int32_t tmc4671_getTargetTorqueFluxSum_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d46:	460c      	mov	r4, r1
	// remember last set index
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22d48:	216f      	movs	r1, #111	; 0x6f
{
   22d4a:	4605      	mov	r5, r0
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22d4c:	f7ff ff32 	bl	22bb4 <tmc4671_readInt>

	// get target torque value
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 0);
   22d50:	2200      	movs	r2, #0
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22d52:	4680      	mov	r8, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 0);
   22d54:	216f      	movs	r1, #111	; 0x6f
   22d56:	4628      	mov	r0, r5
   22d58:	f7ff ff4e 	bl	22bf8 <tmc4671_writeInt>
	int32_t torque = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22d5c:	216e      	movs	r1, #110	; 0x6e
   22d5e:	4628      	mov	r0, r5
   22d60:	f7ff ff28 	bl	22bb4 <tmc4671_readInt>

	// get target flux value
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 1);
   22d64:	2201      	movs	r2, #1
	int32_t torque = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22d66:	4606      	mov	r6, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 1);
   22d68:	216f      	movs	r1, #111	; 0x6f
   22d6a:	4628      	mov	r0, r5
   22d6c:	f7ff ff44 	bl	22bf8 <tmc4671_writeInt>
	int32_t flux = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22d70:	216e      	movs	r1, #110	; 0x6e
   22d72:	4628      	mov	r0, r5
   22d74:	f7ff ff1e 	bl	22bb4 <tmc4671_readInt>

	// reset last set index
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22d78:	4642      	mov	r2, r8
	int32_t flux = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22d7a:	4607      	mov	r7, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22d7c:	216f      	movs	r1, #111	; 0x6f
   22d7e:	4628      	mov	r0, r5
   22d80:	f7ff ff3a 	bl	22bf8 <tmc4671_writeInt>

	return (((int32_t)flux+(int32_t)torque) * (int32_t)torqueMeasurementFactor) / 256;
   22d84:	19f0      	adds	r0, r6, r7
   22d86:	4360      	muls	r0, r4
   22d88:	bf48      	it	mi
   22d8a:	30ff      	addmi	r0, #255	; 0xff
}
   22d8c:	1200      	asrs	r0, r0, #8
   22d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022d92 <tmc4671_getActualTorqueFluxSum_mA>:

int32_t tmc4671_getActualTorqueFluxSum_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22d92:	b510      	push	{r4, lr}
   22d94:	460c      	mov	r4, r1
	int32_t registerValue = tmc4671_readInt(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL);
   22d96:	2169      	movs	r1, #105	; 0x69
   22d98:	f7ff ff0c 	bl	22bb4 <tmc4671_readInt>
	int16_t flux = (registerValue & 0xFFFF);
	int16_t torque = ((registerValue >> 16) & 0xFFFF);
	return (((int32_t)flux+(int32_t)torque) * (int32_t)torqueMeasurementFactor) / 256;
   22d9c:	b201      	sxth	r1, r0
   22d9e:	eb01 4020 	add.w	r0, r1, r0, asr #16
   22da2:	4360      	muls	r0, r4
   22da4:	bf48      	it	mi
   22da6:	30ff      	addmi	r0, #255	; 0xff
}
   22da8:	1200      	asrs	r0, r0, #8
   22daa:	bd10      	pop	{r4, pc}

00022dac <tmc4671_getActualRampTorque_mA>:
{
	// no ramp implemented
	UNUSED(motor);
	UNUSED(torqueMeasurementFactor);
	return 0;
}
   22dac:	2000      	movs	r0, #0
   22dae:	4770      	bx	lr

00022db0 <tmc4671_setTargetFlux_raw>:

void tmc4671_setTargetFlux_raw(uint8_t motor, int32_t targetFlux)
{
	// do not change the MOTION_MODE here! target flux can also be used during velocity and position modes
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, targetFlux);
   22db0:	b28b      	uxth	r3, r1
   22db2:	2200      	movs	r2, #0
   22db4:	2164      	movs	r1, #100	; 0x64
   22db6:	f7ff bf4c 	b.w	22c52 <tmc4671_writeRegister16BitValue>

00022dba <tmc4671_getTargetFlux_raw>:
}

int32_t tmc4671_getTargetFlux_raw(uint8_t motor)
{
   22dba:	b570      	push	{r4, r5, r6, lr}
	// remember last set index
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22dbc:	216f      	movs	r1, #111	; 0x6f
{
   22dbe:	4604      	mov	r4, r0
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22dc0:	f7ff fef8 	bl	22bb4 <tmc4671_readInt>

	// get value
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 1);
   22dc4:	2201      	movs	r2, #1
	uint32_t lastIndex = tmc4671_readInt(motor, TMC4671_INTERIM_ADDR);
   22dc6:	4606      	mov	r6, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, 1);
   22dc8:	216f      	movs	r1, #111	; 0x6f
   22dca:	4620      	mov	r0, r4
   22dcc:	f7ff ff14 	bl	22bf8 <tmc4671_writeInt>
	int32_t value = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22dd0:	216e      	movs	r1, #110	; 0x6e
   22dd2:	4620      	mov	r0, r4
   22dd4:	f7ff feee 	bl	22bb4 <tmc4671_readInt>

	// reset last set index
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22dd8:	4632      	mov	r2, r6
	int32_t value = (int32_t) tmc4671_readInt(motor, TMC4671_INTERIM_DATA);
   22dda:	4605      	mov	r5, r0
	tmc4671_writeInt(motor, TMC4671_INTERIM_ADDR, lastIndex);
   22ddc:	216f      	movs	r1, #111	; 0x6f
   22dde:	4620      	mov	r0, r4
   22de0:	f7ff ff0a 	bl	22bf8 <tmc4671_writeInt>
	return value;
}
   22de4:	4628      	mov	r0, r5
   22de6:	bd70      	pop	{r4, r5, r6, pc}

00022de8 <tmc4671_getActualFlux_raw>:

int32_t tmc4671_getActualFlux_raw(uint8_t motor)
{
   22de8:	b508      	push	{r3, lr}
	int32_t registerValue = tmc4671_readInt(motor, address);
   22dea:	2169      	movs	r1, #105	; 0x69
   22dec:	f7ff fee2 	bl	22bb4 <tmc4671_readInt>
	return (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_ACTUAL, BIT_0_TO_15);
}
   22df0:	b200      	sxth	r0, r0
   22df2:	bd08      	pop	{r3, pc}

00022df4 <tmc4671_setTargetFlux_mA>:

void tmc4671_setTargetFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t targetFlux)
{
	// do not change the MOTION_MODE here! target flux can also be used during velocity and position modes
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_TARGET, BIT_0_TO_15, (targetFlux * 256) / (int32_t) torqueMeasurementFactor);
   22df4:	0212      	lsls	r2, r2, #8
   22df6:	fb92 f2f1 	sdiv	r2, r2, r1
   22dfa:	2164      	movs	r1, #100	; 0x64
   22dfc:	b293      	uxth	r3, r2
   22dfe:	2200      	movs	r2, #0
   22e00:	f7ff bf27 	b.w	22c52 <tmc4671_writeRegister16BitValue>

00022e04 <tmc4671_getTargetFlux_mA>:
}

int32_t tmc4671_getTargetFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22e04:	b510      	push	{r4, lr}
   22e06:	460c      	mov	r4, r1
	return (tmc4671_getTargetFlux_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22e08:	f7ff ffd7 	bl	22dba <tmc4671_getTargetFlux_raw>
   22e0c:	4360      	muls	r0, r4
   22e0e:	bf48      	it	mi
   22e10:	30ff      	addmi	r0, #255	; 0xff
}
   22e12:	1200      	asrs	r0, r0, #8
   22e14:	bd10      	pop	{r4, pc}

00022e16 <tmc4671_getActualFlux_mA>:

int32_t tmc4671_getActualFlux_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22e16:	b510      	push	{r4, lr}
   22e18:	460c      	mov	r4, r1
	return (tmc4671_getActualFlux_raw(motor) * (int32_t) torqueMeasurementFactor) / 256;
   22e1a:	f7ff ffe5 	bl	22de8 <tmc4671_getActualFlux_raw>
   22e1e:	4360      	muls	r0, r4
   22e20:	bf48      	it	mi
   22e22:	30ff      	addmi	r0, #255	; 0xff
}
   22e24:	1200      	asrs	r0, r0, #8
   22e26:	bd10      	pop	{r4, pc}

00022e28 <tmc4671_setTorqueFluxLimit_mA>:

void tmc4671_setTorqueFluxLimit_mA(uint8_t motor, uint16_t torqueMeasurementFactor, int32_t max)
{
	tmc4671_writeRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_LIMITS, BIT_0_TO_15, (max * 256) / (int32_t) torqueMeasurementFactor);
   22e28:	0212      	lsls	r2, r2, #8
   22e2a:	fb92 f2f1 	sdiv	r2, r2, r1
   22e2e:	215e      	movs	r1, #94	; 0x5e
   22e30:	b293      	uxth	r3, r2
   22e32:	2200      	movs	r2, #0
   22e34:	f7ff bf0d 	b.w	22c52 <tmc4671_writeRegister16BitValue>

00022e38 <tmc4671_getTorqueFluxLimit_mA>:
}

int32_t tmc4671_getTorqueFluxLimit_mA(uint8_t motor, uint16_t torqueMeasurementFactor)
{
   22e38:	b510      	push	{r4, lr}
   22e3a:	460c      	mov	r4, r1
	int32_t registerValue = tmc4671_readInt(motor, address);
   22e3c:	215e      	movs	r1, #94	; 0x5e
   22e3e:	f7ff feb9 	bl	22bb4 <tmc4671_readInt>
	return ((int32_t) tmc4671_readRegister16BitValue(motor, TMC4671_PID_TORQUE_FLUX_LIMITS, BIT_0_TO_15) * (int32_t) torqueMeasurementFactor) / 256;
   22e42:	b280      	uxth	r0, r0
   22e44:	4360      	muls	r0, r4
}
   22e46:	1200      	asrs	r0, r0, #8
   22e48:	bd10      	pop	{r4, pc}

00022e4a <tmc4671_setTargetVelocity>:

void tmc4671_setTargetVelocity(uint8_t motor, int32_t targetVelocity)
{
   22e4a:	b538      	push	{r3, r4, r5, lr}
   22e4c:	4604      	mov	r4, r0
   22e4e:	460d      	mov	r5, r1
	tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_VELOCITY);
   22e50:	2102      	movs	r1, #2
   22e52:	f7ff ff15 	bl	22c80 <tmc4671_switchToMotionMode>
	tmc4671_writeInt(motor, TMC4671_PID_VELOCITY_TARGET, targetVelocity);
   22e56:	462a      	mov	r2, r5
   22e58:	4620      	mov	r0, r4
   22e5a:	2166      	movs	r1, #102	; 0x66
}
   22e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_PID_VELOCITY_TARGET, targetVelocity);
   22e60:	f7ff beca 	b.w	22bf8 <tmc4671_writeInt>

00022e64 <tmc4671_getTargetVelocity>:

int32_t tmc4671_getTargetVelocity(uint8_t motor)
{
	return (int32_t) tmc4671_readInt(motor, TMC4671_PID_VELOCITY_TARGET);
   22e64:	2166      	movs	r1, #102	; 0x66
   22e66:	f7ff bea5 	b.w	22bb4 <tmc4671_readInt>

00022e6a <tmc4671_getActualVelocity>:
}

int32_t tmc4671_getActualVelocity(uint8_t motor)
{
	return (int32_t) tmc4671_readInt(motor, TMC4671_PID_VELOCITY_ACTUAL);
   22e6a:	216a      	movs	r1, #106	; 0x6a
   22e6c:	f7ff bea2 	b.w	22bb4 <tmc4671_readInt>

00022e70 <tmc4671_getActualRampVelocity>:
   22e70:	2000      	movs	r0, #0
   22e72:	4770      	bx	lr

00022e74 <tmc4671_setAbsolutTargetPosition>:
	// no ramp implemented
	return 0;
}

void tmc4671_setAbsolutTargetPosition(uint8_t motor, int32_t targetPosition)
{
   22e74:	b538      	push	{r3, r4, r5, lr}
   22e76:	4604      	mov	r4, r0
   22e78:	460d      	mov	r5, r1
	tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   22e7a:	2103      	movs	r1, #3
   22e7c:	f7ff ff00 	bl	22c80 <tmc4671_switchToMotionMode>
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, targetPosition);
   22e80:	462a      	mov	r2, r5
   22e82:	4620      	mov	r0, r4
   22e84:	2168      	movs	r1, #104	; 0x68
}
   22e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, targetPosition);
   22e8a:	f7ff beb5 	b.w	22bf8 <tmc4671_writeInt>

00022e8e <tmc4671_setRelativeTargetPosition>:

void tmc4671_setRelativeTargetPosition(uint8_t motor, int32_t relativePosition)
{
   22e8e:	b538      	push	{r3, r4, r5, lr}
   22e90:	4604      	mov	r4, r0
   22e92:	460d      	mov	r5, r1
	tmc4671_switchToMotionMode(motor, TMC4671_MOTION_MODE_POSITION);
   22e94:	2103      	movs	r1, #3
   22e96:	f7ff fef3 	bl	22c80 <tmc4671_switchToMotionMode>
	// determine actual position and add relative position ticks
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL) + relativePosition);
   22e9a:	216b      	movs	r1, #107	; 0x6b
   22e9c:	4620      	mov	r0, r4
   22e9e:	f7ff fe89 	bl	22bb4 <tmc4671_readInt>
   22ea2:	2168      	movs	r1, #104	; 0x68
   22ea4:	1942      	adds	r2, r0, r5
   22ea6:	4620      	mov	r0, r4
}
   22ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_TARGET, (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL) + relativePosition);
   22eac:	f7ff bea4 	b.w	22bf8 <tmc4671_writeInt>

00022eb0 <tmc4671_getTargetPosition>:

int32_t tmc4671_getTargetPosition(uint8_t motor)
{
	return (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_TARGET);
   22eb0:	2168      	movs	r1, #104	; 0x68
   22eb2:	f7ff be7f 	b.w	22bb4 <tmc4671_readInt>

00022eb6 <tmc4671_setActualPosition>:
}

void tmc4671_setActualPosition(uint8_t motor, int32_t actualPosition)
{
   22eb6:	460a      	mov	r2, r1
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_ACTUAL, actualPosition);
   22eb8:	216b      	movs	r1, #107	; 0x6b
   22eba:	f7ff be9d 	b.w	22bf8 <tmc4671_writeInt>

00022ebe <tmc4671_getActualPosition>:
}

int32_t tmc4671_getActualPosition(uint8_t motor)
{
	return (int32_t) tmc4671_readInt(motor, TMC4671_PID_POSITION_ACTUAL);
   22ebe:	216b      	movs	r1, #107	; 0x6b
   22ec0:	f7ff be78 	b.w	22bb4 <tmc4671_readInt>

00022ec4 <tmc4671_getActualRampPosition>:
   22ec4:	2000      	movs	r0, #0
   22ec6:	4770      	bx	lr

00022ec8 <tmc4671_doEncoderInitializationMode0>:
	return 0;
}

// encoder initialization
void tmc4671_doEncoderInitializationMode0(uint8_t motor, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   22ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t last_Phi_E_Selection = 0;
	static uint32_t last_UQ_UD_EXT = 0;
	static int16_t last_PHI_E_EXT = 0;

	switch (*initState)
   22eca:	780d      	ldrb	r5, [r1, #0]
   22ecc:	2d01      	cmp	r5, #1
{
   22ece:	4604      	mov	r4, r0
   22ed0:	460e      	mov	r6, r1
	switch (*initState)
   22ed2:	d005      	beq.n	22ee0 <tmc4671_doEncoderInitializationMode0+0x18>
   22ed4:	2d02      	cmp	r5, #2
   22ed6:	d034      	beq.n	22f42 <tmc4671_doEncoderInitializationMode0+0x7a>
   22ed8:	2d00      	cmp	r5, #0
   22eda:	d150      	bne.n	22f7e <tmc4671_doEncoderInitializationMode0+0xb6>
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
   22edc:	801d      	strh	r5, [r3, #0]
		break;
	default:
		*initState = 0;
		break;
	}
}
   22ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t registerValue = tmc4671_readInt(motor, address);
   22ee0:	2152      	movs	r1, #82	; 0x52
   22ee2:	f7ff fe67 	bl	22bb4 <tmc4671_readInt>
		last_Phi_E_Selection = (uint16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PHI_E_SELECTION, BIT_0_TO_15);
   22ee6:	4f27      	ldr	r7, [pc, #156]	; (22f84 <tmc4671_doEncoderInitializationMode0+0xbc>)
		last_UQ_UD_EXT = (uint32_t) tmc4671_readInt(motor, TMC4671_UQ_UD_EXT);
   22ee8:	2124      	movs	r1, #36	; 0x24
		return (registerValue & 0xFFFF);
   22eea:	8038      	strh	r0, [r7, #0]
		last_UQ_UD_EXT = (uint32_t) tmc4671_readInt(motor, TMC4671_UQ_UD_EXT);
   22eec:	4620      	mov	r0, r4
   22eee:	f7ff fe61 	bl	22bb4 <tmc4671_readInt>
	int32_t registerValue = tmc4671_readInt(motor, address);
   22ef2:	211c      	movs	r1, #28
		last_UQ_UD_EXT = (uint32_t) tmc4671_readInt(motor, TMC4671_UQ_UD_EXT);
   22ef4:	6078      	str	r0, [r7, #4]
	int32_t registerValue = tmc4671_readInt(motor, address);
   22ef6:	4620      	mov	r0, r4
   22ef8:	f7ff fe5c 	bl	22bb4 <tmc4671_readInt>
		tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   22efc:	2300      	movs	r3, #0
		last_PHI_E_EXT = (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_PHI_E_EXT, BIT_0_TO_15);
   22efe:	8138      	strh	r0, [r7, #8]
		tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   22f00:	462a      	mov	r2, r5
   22f02:	2129      	movs	r1, #41	; 0x29
   22f04:	4620      	mov	r0, r4
   22f06:	f7ff fea4 	bl	22c52 <tmc4671_writeRegister16BitValue>
		tmc4671_writeRegister16BitValue(motor, TMC4671_PHI_E_SELECTION, BIT_0_TO_15, 1);
   22f0a:	462b      	mov	r3, r5
   22f0c:	2200      	movs	r2, #0
   22f0e:	2152      	movs	r1, #82	; 0x52
   22f10:	4620      	mov	r0, r4
   22f12:	f7ff fe9e 	bl	22c52 <tmc4671_writeRegister16BitValue>
		tmc4671_writeRegister16BitValue(motor, TMC4671_UQ_UD_EXT, BIT_16_TO_31, 0);
   22f16:	2300      	movs	r3, #0
   22f18:	462a      	mov	r2, r5
   22f1a:	2124      	movs	r1, #36	; 0x24
   22f1c:	4620      	mov	r0, r4
   22f1e:	f7ff fe98 	bl	22c52 <tmc4671_writeRegister16BitValue>
		tmc4671_writeRegister16BitValue(motor, TMC4671_UQ_UD_EXT, BIT_0_TO_15, startVoltage);
   22f22:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   22f26:	2200      	movs	r2, #0
   22f28:	2124      	movs	r1, #36	; 0x24
   22f2a:	4620      	mov	r0, r4
   22f2c:	f7ff fe91 	bl	22c52 <tmc4671_writeRegister16BitValue>
		tmc4671_writeRegister16BitValue(motor, TMC4671_PHI_E_EXT, BIT_0_TO_15, 0);
   22f30:	2300      	movs	r3, #0
   22f32:	461a      	mov	r2, r3
   22f34:	211c      	movs	r1, #28
   22f36:	4620      	mov	r0, r4
   22f38:	f7ff fe8b 	bl	22c52 <tmc4671_writeRegister16BitValue>
		*initState = STATE_WAIT_INIT_TIME;
   22f3c:	2302      	movs	r3, #2
		*initState = 0;
   22f3e:	7033      	strb	r3, [r6, #0]
}
   22f40:	e7cd      	b.n	22ede <tmc4671_doEncoderInitializationMode0+0x16>
		(*actualInitWaitTime)++;
   22f42:	8819      	ldrh	r1, [r3, #0]
   22f44:	3101      	adds	r1, #1
   22f46:	b289      	uxth	r1, r1
		if(*actualInitWaitTime >= initWaitTime)
   22f48:	4291      	cmp	r1, r2
		(*actualInitWaitTime)++;
   22f4a:	8019      	strh	r1, [r3, #0]
		if(*actualInitWaitTime >= initWaitTime)
   22f4c:	d3c7      	bcc.n	22ede <tmc4671_doEncoderInitializationMode0+0x16>
			tmc4671_writeInt(motor, TMC4671_UQ_UD_EXT, last_UQ_UD_EXT);
   22f4e:	4d0d      	ldr	r5, [pc, #52]	; (22f84 <tmc4671_doEncoderInitializationMode0+0xbc>)
			tmc4671_writeInt(motor, TMC4671_ABN_DECODER_COUNT, 0);
   22f50:	2200      	movs	r2, #0
   22f52:	2127      	movs	r1, #39	; 0x27
   22f54:	f7ff fe50 	bl	22bf8 <tmc4671_writeInt>
			tmc4671_writeInt(motor, TMC4671_UQ_UD_EXT, last_UQ_UD_EXT);
   22f58:	686a      	ldr	r2, [r5, #4]
   22f5a:	2124      	movs	r1, #36	; 0x24
   22f5c:	4620      	mov	r0, r4
   22f5e:	f7ff fe4b 	bl	22bf8 <tmc4671_writeInt>
			tmc4671_writeRegister16BitValue(motor, TMC4671_PHI_E_EXT, BIT_0_TO_15, last_PHI_E_EXT);
   22f62:	892b      	ldrh	r3, [r5, #8]
   22f64:	2200      	movs	r2, #0
   22f66:	211c      	movs	r1, #28
   22f68:	4620      	mov	r0, r4
   22f6a:	f7ff fe72 	bl	22c52 <tmc4671_writeRegister16BitValue>
			tmc4671_writeRegister16BitValue(motor, TMC4671_PHI_E_SELECTION, BIT_0_TO_15, last_Phi_E_Selection);
   22f6e:	882b      	ldrh	r3, [r5, #0]
   22f70:	2200      	movs	r2, #0
   22f72:	2152      	movs	r1, #82	; 0x52
   22f74:	4620      	mov	r0, r4
   22f76:	f7ff fe6c 	bl	22c52 <tmc4671_writeRegister16BitValue>
			*initState = STATE_ESTIMATE_OFFSET;
   22f7a:	2303      	movs	r3, #3
   22f7c:	e7df      	b.n	22f3e <tmc4671_doEncoderInitializationMode0+0x76>
		*initState = 0;
   22f7e:	2300      	movs	r3, #0
   22f80:	e7dd      	b.n	22f3e <tmc4671_doEncoderInitializationMode0+0x76>
   22f82:	bf00      	nop
   22f84:	1fff59c8 	.word	0x1fff59c8

00022f88 <tmc4671_getS16CircleDifference>:

int16_t tmc4671_getS16CircleDifference(int16_t newValue, int16_t oldValue)
{
	return (newValue - oldValue);
   22f88:	1a40      	subs	r0, r0, r1
}
   22f8a:	b200      	sxth	r0, r0
   22f8c:	4770      	bx	lr

00022f8e <tmc4671_doEncoderInitializationMode2>:

void tmc4671_doEncoderInitializationMode2(uint8_t motor, uint8_t *initState, uint16_t *actualInitWaitTime)
{
   22f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static int16_t hall_phi_e_old = 0;
	static int16_t hall_phi_e_new = 0;
	static int16_t actual_coarse_offset = 0;

	switch (*initState)
   22f92:	780e      	ldrb	r6, [r1, #0]
   22f94:	2e01      	cmp	r6, #1
{
   22f96:	4605      	mov	r5, r0
   22f98:	460f      	mov	r7, r1
	switch (*initState)
   22f9a:	d006      	beq.n	22faa <tmc4671_doEncoderInitializationMode2+0x1c>
   22f9c:	2e02      	cmp	r6, #2
   22f9e:	d02d      	beq.n	22ffc <tmc4671_doEncoderInitializationMode2+0x6e>
   22fa0:	2e00      	cmp	r6, #0
   22fa2:	d14d      	bne.n	23040 <tmc4671_doEncoderInitializationMode2+0xb2>
	{
	case STATE_NOTHING_TO_DO:
		*actualInitWaitTime = 0;
   22fa4:	8016      	strh	r6, [r2, #0]
		break;
	default:
		*initState = 0;
		break;
	}
}
   22fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc4671_writeInt(motor, TMC4671_HALL_MODE, tmc4671_readInt(motor, TMC4671_HALL_MODE) & 0xFFFFFEFF);
   22faa:	2133      	movs	r1, #51	; 0x33
   22fac:	f7ff fe02 	bl	22bb4 <tmc4671_readInt>
   22fb0:	2133      	movs	r1, #51	; 0x33
   22fb2:	f420 7280 	bic.w	r2, r0, #256	; 0x100
   22fb6:	4628      	mov	r0, r5
   22fb8:	f7ff fe1e 	bl	22bf8 <tmc4671_writeInt>
		tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, 0);
   22fbc:	2300      	movs	r3, #0
   22fbe:	4632      	mov	r2, r6
   22fc0:	2129      	movs	r1, #41	; 0x29
   22fc2:	4628      	mov	r0, r5
   22fc4:	f7ff fe45 	bl	22c52 <tmc4671_writeRegister16BitValue>
	int32_t registerValue = tmc4671_readInt(motor, address);
   22fc8:	2139      	movs	r1, #57	; 0x39
   22fca:	4628      	mov	r0, r5
   22fcc:	f7ff fdf2 	bl	22bb4 <tmc4671_readInt>
		hall_phi_e_old = (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_0_TO_15);
   22fd0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 23044 <tmc4671_doEncoderInitializationMode2+0xb6>
	int32_t registerValue = tmc4671_readInt(motor, address);
   22fd4:	4604      	mov	r4, r0
		hall_phi_e_old = (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_HALL_PHI_E_INTERPOLATED_PHI_E, BIT_0_TO_15);
   22fd6:	f8a8 000a 	strh.w	r0, [r8, #10]
	int32_t registerValue = tmc4671_readInt(motor, address);
   22fda:	212a      	movs	r1, #42	; 0x2a
   22fdc:	4628      	mov	r0, r5
   22fde:	f7ff fde9 	bl	22bb4 <tmc4671_readInt>
	return (newValue - oldValue);
   22fe2:	eba4 4310 	sub.w	r3, r4, r0, lsr #16
   22fe6:	b29b      	uxth	r3, r3
		tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, actual_coarse_offset);
   22fe8:	4632      	mov	r2, r6
   22fea:	2129      	movs	r1, #41	; 0x29
   22fec:	4628      	mov	r0, r5
		actual_coarse_offset = tmc4671_getS16CircleDifference(hall_phi_e_old, (int16_t) tmc4671_readRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M, BIT_16_TO_31));
   22fee:	f8a8 300c 	strh.w	r3, [r8, #12]
		tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, actual_coarse_offset);
   22ff2:	f7ff fe2e 	bl	22c52 <tmc4671_writeRegister16BitValue>
		*initState = STATE_WAIT_INIT_TIME;
   22ff6:	2302      	movs	r3, #2
		*initState = 0;
   22ff8:	703b      	strb	r3, [r7, #0]
}
   22ffa:	e7d4      	b.n	22fa6 <tmc4671_doEncoderInitializationMode2+0x18>
	int32_t registerValue = tmc4671_readInt(motor, address);
   22ffc:	2139      	movs	r1, #57	; 0x39
   22ffe:	f7ff fdd9 	bl	22bb4 <tmc4671_readInt>
		if(hall_phi_e_old != hall_phi_e_new)
   23002:	f8df 8040 	ldr.w	r8, [pc, #64]	; 23044 <tmc4671_doEncoderInitializationMode2+0xb6>
   23006:	f9b8 400a 	ldrsh.w	r4, [r8, #10]
   2300a:	b203      	sxth	r3, r0
   2300c:	42a3      	cmp	r3, r4
	int32_t registerValue = tmc4671_readInt(motor, address);
   2300e:	4606      	mov	r6, r0
		if(hall_phi_e_old != hall_phi_e_new)
   23010:	d0c9      	beq.n	22fa6 <tmc4671_doEncoderInitializationMode2+0x18>
	return (newValue - oldValue);
   23012:	b2a4      	uxth	r4, r4
   23014:	1b36      	subs	r6, r6, r4
	int32_t registerValue = tmc4671_readInt(motor, address);
   23016:	212a      	movs	r1, #42	; 0x2a
   23018:	4628      	mov	r0, r5
   2301a:	f7ff fdcb 	bl	22bb4 <tmc4671_readInt>
			int16_t hall_phi_e_estimated = hall_phi_e_old + tmc4671_getS16CircleDifference(hall_phi_e_new, hall_phi_e_old)/2;
   2301e:	f3c6 33c0 	ubfx	r3, r6, #15, #1
   23022:	fa03 f686 	sxtah	r6, r3, r6
	return (newValue - oldValue);
   23026:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   2302a:	441c      	add	r4, r3
   2302c:	eb04 0466 	add.w	r4, r4, r6, asr #1
   23030:	eba4 4410 	sub.w	r4, r4, r0, lsr #16
			tmc4671_writeRegister16BitValue(motor, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, BIT_16_TO_31, tmc4671_getS16CircleDifference(hall_phi_e_estimated, abn_phi_e_actual));
   23034:	b2a3      	uxth	r3, r4
   23036:	2201      	movs	r2, #1
   23038:	2129      	movs	r1, #41	; 0x29
   2303a:	4628      	mov	r0, r5
   2303c:	f7ff fe09 	bl	22c52 <tmc4671_writeRegister16BitValue>
		*initState = 0;
   23040:	2300      	movs	r3, #0
   23042:	e7d9      	b.n	22ff8 <tmc4671_doEncoderInitializationMode2+0x6a>
   23044:	1fff59c8 	.word	0x1fff59c8

00023048 <tmc4671_checkEncderInitialization>:

void tmc4671_checkEncderInitialization(uint8_t motor, uint32_t actualSystick, uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   23048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// use the systick as 1ms timer for encoder initialization
	static uint32_t lastSystick = 0;
	if(actualSystick != lastSystick)
   2304c:	4e10      	ldr	r6, [pc, #64]	; (23090 <tmc4671_checkEncderInitialization+0x48>)
{
   2304e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   23052:	461c      	mov	r4, r3
	if(actualSystick != lastSystick)
   23054:	6933      	ldr	r3, [r6, #16]
{
   23056:	460f      	mov	r7, r1
	if(actualSystick != lastSystick)
   23058:	42bb      	cmp	r3, r7
{
   2305a:	4615      	mov	r5, r2
   2305c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
   23060:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   23064:	4680      	mov	r8, r0
	if(actualSystick != lastSystick)
   23066:	d006      	beq.n	23076 <tmc4671_checkEncderInitialization+0x2e>
	{
		// needs timer to use the wait time
		if(initMode == 0)
   23068:	b925      	cbnz	r5, 23074 <tmc4671_checkEncderInitialization+0x2c>
		{
			tmc4671_doEncoderInitializationMode0(motor, initState, initWaitTime, actualInitWaitTime, startVoltage);
   2306a:	9100      	str	r1, [sp, #0]
   2306c:	464b      	mov	r3, r9
   2306e:	4621      	mov	r1, r4
   23070:	f7ff ff2a 	bl	22ec8 <tmc4671_doEncoderInitializationMode0>
		}
		lastSystick = actualSystick;
   23074:	6137      	str	r7, [r6, #16]
	}

	// needs no timer
	if(initMode == 2)
   23076:	2d02      	cmp	r5, #2
   23078:	d107      	bne.n	2308a <tmc4671_checkEncderInitialization+0x42>
	{
		tmc4671_doEncoderInitializationMode2(motor, initState, actualInitWaitTime);
   2307a:	464a      	mov	r2, r9
   2307c:	4621      	mov	r1, r4
   2307e:	4640      	mov	r0, r8
	}
}
   23080:	b003      	add	sp, #12
   23082:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		tmc4671_doEncoderInitializationMode2(motor, initState, actualInitWaitTime);
   23086:	f7ff bf82 	b.w	22f8e <tmc4671_doEncoderInitializationMode2>
}
   2308a:	b003      	add	sp, #12
   2308c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23090:	1fff59c8 	.word	0x1fff59c8

00023094 <tmc4671_periodicJob>:

void tmc4671_periodicJob(uint8_t motor, uint32_t actualSystick, uint8_t initMode, uint8_t *initState, uint16_t initWaitTime, uint16_t *actualInitWaitTime, uint16_t startVoltage)
{
   23094:	b430      	push	{r4, r5}
   23096:	f8bd 4008 	ldrh.w	r4, [sp, #8]
   2309a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	tmc4671_checkEncderInitialization(motor, actualSystick, initMode, initState, initWaitTime, actualInitWaitTime, startVoltage);
   2309e:	9504      	str	r5, [sp, #16]
   230a0:	9402      	str	r4, [sp, #8]
}
   230a2:	bc30      	pop	{r4, r5}
	tmc4671_checkEncderInitialization(motor, actualSystick, initMode, initState, initWaitTime, actualInitWaitTime, startVoltage);
   230a4:	f7ff bfd0 	b.w	23048 <tmc4671_checkEncderInitialization>

000230a8 <tmc4671_startEncoderInitialization>:

void tmc4671_startEncoderInitialization(uint8_t mode, uint8_t *initMode, uint8_t *initState)
{
	// allow only a new initialization if no actual initialization is running
	if(*initState == STATE_NOTHING_TO_DO)
   230a8:	7813      	ldrb	r3, [r2, #0]
   230aa:	b933      	cbnz	r3, 230ba <tmc4671_startEncoderInitialization+0x12>
	{
		if(mode == 0) // estimate offset
   230ac:	b918      	cbnz	r0, 230b6 <tmc4671_startEncoderInitialization+0xe>
		{
			// set mode
			*initMode = 2;

			// start initialization
			*initState = 1;
   230ae:	2301      	movs	r3, #1
			*initMode = 2;
   230b0:	7008      	strb	r0, [r1, #0]
			*initState = 1;
   230b2:	7013      	strb	r3, [r2, #0]
		}
	}
}
   230b4:	e001      	b.n	230ba <tmc4671_startEncoderInitialization+0x12>
		else if(mode == 2) // use hall sensor signals
   230b6:	2802      	cmp	r0, #2
   230b8:	d0f9      	beq.n	230ae <tmc4671_startEncoderInitialization+0x6>
}
   230ba:	4770      	bx	lr

000230bc <tmc4671_updatePhiSelectionAndInitialize>:

void tmc4671_updatePhiSelectionAndInitialize(uint8_t motor, uint8_t actualPhiESelection, uint8_t desiredPhiESelection, uint8_t initMode, uint8_t *initState)
{
   230bc:	b513      	push	{r0, r1, r4, lr}
	if (actualPhiESelection != desiredPhiESelection)
   230be:	4291      	cmp	r1, r2
{
   230c0:	4614      	mov	r4, r2
   230c2:	f88d 3007 	strb.w	r3, [sp, #7]
	if (actualPhiESelection != desiredPhiESelection)
   230c6:	d00b      	beq.n	230e0 <tmc4671_updatePhiSelectionAndInitialize+0x24>
	{
		tmc4671_writeInt(motor, TMC4671_PHI_E_SELECTION, desiredPhiESelection);
   230c8:	2152      	movs	r1, #82	; 0x52
   230ca:	f7ff fd95 	bl	22bf8 <tmc4671_writeInt>

		switch(desiredPhiESelection)
   230ce:	2c03      	cmp	r4, #3
   230d0:	d106      	bne.n	230e0 <tmc4671_updatePhiSelectionAndInitialize+0x24>
		{
			case 3:
				tmc4671_startEncoderInitialization(initMode, &initMode, initState);
   230d2:	9a04      	ldr	r2, [sp, #16]
   230d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   230d8:	f10d 0107 	add.w	r1, sp, #7
   230dc:	f7ff ffe4 	bl	230a8 <tmc4671_startEncoderInitialization>
				break;
		}
	}
}
   230e0:	b002      	add	sp, #8
   230e2:	bd10      	pop	{r4, pc}

000230e4 <tmc4671_disablePWM>:

// =====

void tmc4671_disablePWM(uint8_t motor)
{
	tmc4671_writeInt(motor, TMC4671_PWM_SV_CHOP, 0);
   230e4:	2200      	movs	r2, #0
   230e6:	211a      	movs	r1, #26
   230e8:	f7ff bd86 	b.w	22bf8 <tmc4671_writeInt>

000230ec <tmc4671_getMotorType>:
}

uint8_t tmc4671_getMotorType(uint8_t motor)
{
   230ec:	b508      	push	{r3, lr}
	return FIELD_GET(tmc4671_readInt(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS), TMC4671_MOTOR_TYPE_MASK, TMC4671_MOTOR_TYPE_SHIFT);
   230ee:	211b      	movs	r1, #27
   230f0:	f7ff fd60 	bl	22bb4 <tmc4671_readInt>
}
   230f4:	f3c0 4007 	ubfx	r0, r0, #16, #8
   230f8:	bd08      	pop	{r3, pc}

000230fa <tmc4671_setMotorType>:

void tmc4671_setMotorType(uint8_t motor, uint8_t motorType)
{
   230fa:	b538      	push	{r3, r4, r5, lr}
   230fc:	460d      	mov	r5, r1
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_MOTOR_TYPE_MASK, TMC4671_MOTOR_TYPE_SHIFT, motorType);
   230fe:	211b      	movs	r1, #27
{
   23100:	4604      	mov	r4, r0
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_MOTOR_TYPE_MASK, TMC4671_MOTOR_TYPE_SHIFT, motorType);
   23102:	f7ff fd57 	bl	22bb4 <tmc4671_readInt>
   23106:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
   2310a:	ea40 4205 	orr.w	r2, r0, r5, lsl #16
   2310e:	211b      	movs	r1, #27
   23110:	4620      	mov	r0, r4
}
   23112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_MOTOR_TYPE_MASK, TMC4671_MOTOR_TYPE_SHIFT, motorType);
   23116:	f7ff bd6f 	b.w	22bf8 <tmc4671_writeInt>

0002311a <tmc4671_getPolePairs>:

uint8_t tmc4671_getPolePairs(uint8_t motor)
{
   2311a:	b508      	push	{r3, lr}
	return FIELD_GET(tmc4671_readInt(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS), TMC4671_N_POLE_PAIRS_MASK, TMC4671_N_POLE_PAIRS_SHIFT);
   2311c:	211b      	movs	r1, #27
   2311e:	f7ff fd49 	bl	22bb4 <tmc4671_readInt>
}
   23122:	b2c0      	uxtb	r0, r0
   23124:	bd08      	pop	{r3, pc}

00023126 <tmc4671_setPolePairs>:

void tmc4671_setPolePairs(uint8_t motor, uint8_t polePairs)
{
   23126:	b538      	push	{r3, r4, r5, lr}
   23128:	460d      	mov	r5, r1
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, TMC4671_N_POLE_PAIRS_SHIFT, polePairs);
   2312a:	211b      	movs	r1, #27
{
   2312c:	4604      	mov	r4, r0
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, TMC4671_N_POLE_PAIRS_SHIFT, polePairs);
   2312e:	f7ff fd41 	bl	22bb4 <tmc4671_readInt>
   23132:	0c02      	lsrs	r2, r0, #16
   23134:	0412      	lsls	r2, r2, #16
   23136:	432a      	orrs	r2, r5
   23138:	4620      	mov	r0, r4
   2313a:	211b      	movs	r1, #27
}
   2313c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC4671_FIELD_UPDATE(motor, TMC4671_MOTOR_TYPE_N_POLE_PAIRS, TMC4671_N_POLE_PAIRS_MASK, TMC4671_N_POLE_PAIRS_SHIFT, polePairs);
   23140:	f7ff bd5a 	b.w	22bf8 <tmc4671_writeInt>

00023144 <tmc4671_getAdcI0Offset>:

uint16_t tmc4671_getAdcI0Offset(uint8_t motor)
{
   23144:	b508      	push	{r3, lr}
	return FIELD_GET(tmc4671_readInt(motor, TMC4671_ADC_I0_SCALE_OFFSET), TMC4671_ADC_I0_OFFSET_MASK, TMC4671_ADC_I0_OFFSET_SHIFT);
   23146:	2109      	movs	r1, #9
   23148:	f7ff fd34 	bl	22bb4 <tmc4671_readInt>
}
   2314c:	b280      	uxth	r0, r0
   2314e:	bd08      	pop	{r3, pc}

00023150 <tmc4671_setAdcI0Offset>:

void tmc4671_setAdcI0Offset(uint8_t motor, uint16_t offset)
{
   23150:	b538      	push	{r3, r4, r5, lr}
   23152:	460d      	mov	r5, r1
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I0_SCALE_OFFSET, TMC4671_ADC_I0_OFFSET_MASK, TMC4671_ADC_I0_OFFSET_SHIFT, offset);
   23154:	2109      	movs	r1, #9
{
   23156:	4604      	mov	r4, r0
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I0_SCALE_OFFSET, TMC4671_ADC_I0_OFFSET_MASK, TMC4671_ADC_I0_OFFSET_SHIFT, offset);
   23158:	f7ff fd2c 	bl	22bb4 <tmc4671_readInt>
   2315c:	0c02      	lsrs	r2, r0, #16
   2315e:	0412      	lsls	r2, r2, #16
   23160:	432a      	orrs	r2, r5
   23162:	4620      	mov	r0, r4
   23164:	2109      	movs	r1, #9
}
   23166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I0_SCALE_OFFSET, TMC4671_ADC_I0_OFFSET_MASK, TMC4671_ADC_I0_OFFSET_SHIFT, offset);
   2316a:	f7ff bd45 	b.w	22bf8 <tmc4671_writeInt>

0002316e <tmc4671_getAdcI1Offset>:

uint16_t tmc4671_getAdcI1Offset(uint8_t motor)
{
   2316e:	b508      	push	{r3, lr}
	return FIELD_GET(tmc4671_readInt(motor, TMC4671_ADC_I1_SCALE_OFFSET), TMC4671_ADC_I1_OFFSET_MASK, TMC4671_ADC_I1_OFFSET_SHIFT);
   23170:	2108      	movs	r1, #8
   23172:	f7ff fd1f 	bl	22bb4 <tmc4671_readInt>
}
   23176:	b280      	uxth	r0, r0
   23178:	bd08      	pop	{r3, pc}

0002317a <tmc4671_setAdcI1Offset>:

void tmc4671_setAdcI1Offset(uint8_t motor, uint16_t offset)
{
   2317a:	b538      	push	{r3, r4, r5, lr}
   2317c:	460d      	mov	r5, r1
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I1_SCALE_OFFSET, TMC4671_ADC_I1_OFFSET_MASK, TMC4671_ADC_I1_OFFSET_SHIFT, offset);
   2317e:	2108      	movs	r1, #8
{
   23180:	4604      	mov	r4, r0
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I1_SCALE_OFFSET, TMC4671_ADC_I1_OFFSET_MASK, TMC4671_ADC_I1_OFFSET_SHIFT, offset);
   23182:	f7ff fd17 	bl	22bb4 <tmc4671_readInt>
   23186:	0c02      	lsrs	r2, r0, #16
   23188:	0412      	lsls	r2, r2, #16
   2318a:	432a      	orrs	r2, r5
   2318c:	4620      	mov	r0, r4
   2318e:	2108      	movs	r1, #8
}
   23190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC4671_FIELD_UPDATE(motor, TMC4671_ADC_I1_SCALE_OFFSET, TMC4671_ADC_I1_OFFSET_MASK, TMC4671_ADC_I1_OFFSET_SHIFT, offset);
   23194:	f7ff bd30 	b.w	22bf8 <tmc4671_writeInt>

00023198 <tmc4671_setTorqueFluxPI>:

void tmc4671_setTorqueFluxPI(uint8_t motor, uint16_t pParameter, uint16_t iParameter)
{
   23198:	b538      	push	{r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_PID_FLUX_P_FLUX_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   2319a:	ea42 4401 	orr.w	r4, r2, r1, lsl #16
{
   2319e:	4605      	mov	r5, r0
	tmc4671_writeInt(motor, TMC4671_PID_FLUX_P_FLUX_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   231a0:	4622      	mov	r2, r4
   231a2:	2154      	movs	r1, #84	; 0x54
   231a4:	f7ff fd28 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(motor, TMC4671_PID_TORQUE_P_TORQUE_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   231a8:	4622      	mov	r2, r4
   231aa:	4628      	mov	r0, r5
   231ac:	2156      	movs	r1, #86	; 0x56
}
   231ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc4671_writeInt(motor, TMC4671_PID_TORQUE_P_TORQUE_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   231b2:	f7ff bd21 	b.w	22bf8 <tmc4671_writeInt>

000231b6 <tmc4671_setVelocityPI>:

void tmc4671_setVelocityPI(uint8_t motor, uint16_t pParameter, uint16_t iParameter)
{
	tmc4671_writeInt(motor, TMC4671_PID_VELOCITY_P_VELOCITY_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   231b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   231ba:	2158      	movs	r1, #88	; 0x58
   231bc:	f7ff bd1c 	b.w	22bf8 <tmc4671_writeInt>

000231c0 <tmc4671_setPositionPI>:
}

void tmc4671_setPositionPI(uint8_t motor, uint16_t pParameter, uint16_t iParameter)
{
	tmc4671_writeInt(motor, TMC4671_PID_POSITION_P_POSITION_I, ((uint32_t)pParameter << 16) | (uint32_t)iParameter);
   231c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   231c4:	215a      	movs	r1, #90	; 0x5a
   231c6:	f7ff bd17 	b.w	22bf8 <tmc4671_writeInt>

000231ca <tmc4671_readFieldWithDependency>:
}

int32_t tmc4671_readFieldWithDependency(uint8_t motor, uint8_t reg, uint8_t dependsReg, uint32_t dependsValue, uint32_t mask, uint8_t shift)
{
   231ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231ce:	460c      	mov	r4, r1
	// remember old depends value
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);
   231d0:	4611      	mov	r1, r2
{
   231d2:	4698      	mov	r8, r3
   231d4:	4605      	mov	r5, r0
   231d6:	4616      	mov	r6, r2
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);
   231d8:	f7ff fcec 	bl	22bb4 <tmc4671_readInt>

	// set needed depends value
	tmc4671_writeInt(motor, dependsReg, dependsValue);
   231dc:	4642      	mov	r2, r8
	uint32_t lastDependsValue = tmc4671_readInt(motor, dependsReg);
   231de:	4607      	mov	r7, r0
	tmc4671_writeInt(motor, dependsReg, dependsValue);
   231e0:	4631      	mov	r1, r6
   231e2:	4628      	mov	r0, r5
   231e4:	f7ff fd08 	bl	22bf8 <tmc4671_writeInt>
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
   231e8:	4621      	mov	r1, r4
   231ea:	4628      	mov	r0, r5
   231ec:	f7ff fce2 	bl	22bb4 <tmc4671_readInt>
   231f0:	9c06      	ldr	r4, [sp, #24]
   231f2:	4004      	ands	r4, r0
   231f4:	f89d 001c 	ldrb.w	r0, [sp, #28]

	// set old depends value
	tmc4671_writeInt(motor, dependsReg, lastDependsValue);
   231f8:	463a      	mov	r2, r7
	uint32_t value = FIELD_GET(tmc4671_readInt(motor, reg), mask, shift);
   231fa:	40c4      	lsrs	r4, r0
	tmc4671_writeInt(motor, dependsReg, lastDependsValue);
   231fc:	4631      	mov	r1, r6
   231fe:	4628      	mov	r0, r5
   23200:	f7ff fcfa 	bl	22bf8 <tmc4671_writeInt>
	return value;
}
   23204:	4620      	mov	r0, r4
   23206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2320a:	bf00      	nop

0002320c <tmc5031_initConfig>:
extern int tmc5031_readInt(uint8_t motor, uint8_t address);
// <= SPI wrapper

void tmc5031_initConfig(TMC5031TypeDef *tmc5031)
{
	tmc5031->velocity[0]      = 0;
   2320c:	4a0e      	ldr	r2, [pc, #56]	; (23248 <tmc5031_initConfig+0x3c>)
   2320e:	2300      	movs	r3, #0
{
   23210:	b530      	push	{r4, r5, lr}
   23212:	f100 0114 	add.w	r1, r0, #20
	tmc5031->velocity[1]      = 0;
   23216:	e9c0 3300 	strd	r3, r3, [r0]
	tmc5031->oldTick          = 0;
	tmc5031->oldX[0]          = 0;
	tmc5031->oldX[1]          = 0;
   2321a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	tmc5031->oldTick          = 0;
   2321e:	6103      	str	r3, [r0, #16]
	tmc5031->vMaxModified[0]  = false;
   23220:	f8a0 3294 	strh.w	r3, [r0, #660]	; 0x294
	tmc5031->vMaxModified[1]  = false;

	int i;
	for(i = 0; i < TMC5031_REGISTER_COUNT; i++)
   23224:	f102 0480 	add.w	r4, r2, #128	; 0x80
   23228:	f500 7305 	add.w	r3, r0, #532	; 0x214
   2322c:	f500 7025 	add.w	r0, r0, #660	; 0x294
	{
		tmc5031->registerAccess[i]      = tmc5031_defaultRegisterAccess[i];
   23230:	f812 5b01 	ldrb.w	r5, [r2], #1
   23234:	f803 5b01 	strb.w	r5, [r3], #1
		tmc5031->registerResetState[i]  = tmc5031_defaultRegisterResetState[i];
   23238:	f854 5b04 	ldr.w	r5, [r4], #4
   2323c:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC5031_REGISTER_COUNT; i++)
   23240:	4283      	cmp	r3, r0
   23242:	d1f5      	bne.n	23230 <tmc5031_initConfig+0x24>
	}
}
   23244:	bd30      	pop	{r4, r5, pc}
   23246:	bf00      	nop
   23248:	0002a82c 	.word	0x0002a82c

0002324c <tmc5031_writeConfiguration>:

void tmc5031_writeConfiguration(TMC5031TypeDef *tmc5031, ConfigurationTypeDef *TMC5031_config)
{
   2324c:	b510      	push	{r4, lr}
	uint8_t *ptr = &TMC5031_config->configIndex;
	const int32_t *settings = (TMC5031_config->state == CONFIG_RESTORE) ? TMC5031_config->shadowRegister : tmc5031->registerResetState;
   2324e:	780b      	ldrb	r3, [r1, #0]
   23250:	2b02      	cmp	r3, #2
{
   23252:	460c      	mov	r4, r1
	const int32_t *settings = (TMC5031_config->state == CONFIG_RESTORE) ? TMC5031_config->shadowRegister : tmc5031->registerResetState;
   23254:	bf0c      	ite	eq
   23256:	1d0b      	addeq	r3, r1, #4
   23258:	f100 0314 	addne.w	r3, r0, #20

	while((*ptr < TMC5031_REGISTER_COUNT) && !TMC_IS_WRITABLE(tmc5031->registerAccess[*ptr]))
   2325c:	f994 2001 	ldrsb.w	r2, [r4, #1]
   23260:	7861      	ldrb	r1, [r4, #1]
   23262:	2a00      	cmp	r2, #0
   23264:	db10      	blt.n	23288 <tmc5031_writeConfiguration+0x3c>
   23266:	1842      	adds	r2, r0, r1
   23268:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
   2326c:	0792      	lsls	r2, r2, #30
   2326e:	d508      	bpl.n	23282 <tmc5031_writeConfiguration+0x36>
		(*ptr)++;

	if(*ptr < TMC5031_REGISTER_COUNT)
	{
		tmc5031_writeInt(0, *ptr, settings[*ptr]);
   23270:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   23274:	2000      	movs	r0, #0
   23276:	f7f0 fd4b 	bl	13d10 <tmc5031_writeInt>
		(*ptr)++;
   2327a:	7863      	ldrb	r3, [r4, #1]
   2327c:	3301      	adds	r3, #1
   2327e:	7063      	strb	r3, [r4, #1]
	}
	else
	{
		TMC5031_config->state = CONFIG_READY;
	}
}
   23280:	bd10      	pop	{r4, pc}
		(*ptr)++;
   23282:	3101      	adds	r1, #1
   23284:	7061      	strb	r1, [r4, #1]
   23286:	e7e9      	b.n	2325c <tmc5031_writeConfiguration+0x10>
		TMC5031_config->state = CONFIG_READY;
   23288:	2300      	movs	r3, #0
   2328a:	7023      	strb	r3, [r4, #0]
   2328c:	e7f8      	b.n	23280 <tmc5031_writeConfiguration+0x34>

0002328e <tmc5031_periodicJob>:

void tmc5031_periodicJob(uint8_t motor, uint32_t tick, TMC5031TypeDef *tmc5031, ConfigurationTypeDef *TMC5031_config)
{
   2328e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int xActual;
	uint32_t tickDiff;

	if(TMC5031_config->state != CONFIG_READY)
   23292:	f893 b000 	ldrb.w	fp, [r3]
{
   23296:	4605      	mov	r5, r0
   23298:	4689      	mov	r9, r1
   2329a:	4614      	mov	r4, r2
   2329c:	461e      	mov	r6, r3
	if(TMC5031_config->state != CONFIG_READY)
   2329e:	f1bb 0f00 	cmp.w	fp, #0
   232a2:	d006      	beq.n	232b2 <tmc5031_periodicJob+0x24>
	{
		tmc5031_writeConfiguration(tmc5031, TMC5031_config);
   232a4:	4619      	mov	r1, r3
   232a6:	4610      	mov	r0, r2
		TMC562V3.velocityMotor2 = (int) ((float) (abs(xActual-oldX[1]) / (float) t) * (float) 1048.576);
		tmc5031->oldX = xActual;*/

		tmc5031->oldTick = tick;
	}
}
   232a8:	b003      	add	sp, #12
   232aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		tmc5031_writeConfiguration(tmc5031, TMC5031_config);
   232ae:	f7ff bfcd 	b.w	2324c <tmc5031_writeConfiguration>
	if((tickDiff = tick - tmc5031->oldTick) >= 5)
   232b2:	6912      	ldr	r2, [r2, #16]
   232b4:	1a8a      	subs	r2, r1, r2
   232b6:	2a04      	cmp	r2, #4
   232b8:	d93c      	bls.n	23334 <tmc5031_periodicJob+0xa6>
		xActual = tmc5031_readInt(0, TMC5031_XACTUAL(motor));
   232ba:	2720      	movs	r7, #32
   232bc:	4087      	lsls	r7, r0
   232be:	fa4f fa87 	sxtb.w	sl, r7
   232c2:	f04a 0101 	orr.w	r1, sl, #1
   232c6:	b2c9      	uxtb	r1, r1
   232c8:	4658      	mov	r0, fp
   232ca:	9201      	str	r2, [sp, #4]
		TMC5031_config->shadowRegister[TMC5031_XACTUAL(motor)] = xActual;
   232cc:	f047 0701 	orr.w	r7, r7, #1
		xActual = tmc5031_readInt(0, TMC5031_XACTUAL(motor));
   232d0:	f7f0 fd8f 	bl	13df2 <tmc5031_readInt>
		TMC5031_config->shadowRegister[TMC5031_XACTUAL(motor)] = xActual;
   232d4:	eb06 0687 	add.w	r6, r6, r7, lsl #2
		xActual = tmc5031_readInt(0, TMC5031_XACTUAL(motor));
   232d8:	4680      	mov	r8, r0
		TMC5031_config->shadowRegister[TMC5031_XACTUAL(motor)] = xActual;
   232da:	6070      	str	r0, [r6, #4]
		tmc5031->velocity[motor] = (int) ((float) (abs(xActual-tmc5031->oldX[motor]) / (float) tickDiff) * (float) 1048.576);
   232dc:	b22e      	sxth	r6, r5
   232de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   232e2:	68a8      	ldr	r0, [r5, #8]
   232e4:	eba8 0000 	sub.w	r0, r8, r0
   232e8:	2800      	cmp	r0, #0
   232ea:	bfb8      	it	lt
   232ec:	4240      	neglt	r0, r0
   232ee:	f004 f90f 	bl	27510 <__aeabi_i2f>
   232f2:	9a01      	ldr	r2, [sp, #4]
   232f4:	4607      	mov	r7, r0
   232f6:	4610      	mov	r0, r2
   232f8:	f004 f906 	bl	27508 <__aeabi_ui2f>
   232fc:	4601      	mov	r1, r0
   232fe:	4638      	mov	r0, r7
   23300:	f004 fa0e 	bl	27720 <__aeabi_fdiv>
   23304:	490d      	ldr	r1, [pc, #52]	; (2333c <tmc5031_periodicJob+0xae>)
   23306:	f004 f957 	bl	275b8 <__aeabi_fmul>
   2330a:	f004 faa5 	bl	27858 <__aeabi_f2iz>
		if(tmc5031_readInt(0, TMC5031_VACTUAL(motor))<0) tmc5031->velocity[motor] *= -1;
   2330e:	f04a 0102 	orr.w	r1, sl, #2
		tmc5031->velocity[motor] = (int) ((float) (abs(xActual-tmc5031->oldX[motor]) / (float) tickDiff) * (float) 1048.576);
   23312:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
		if(tmc5031_readInt(0, TMC5031_VACTUAL(motor))<0) tmc5031->velocity[motor] *= -1;
   23316:	b2c9      	uxtb	r1, r1
   23318:	4658      	mov	r0, fp
   2331a:	f7f0 fd6a 	bl	13df2 <tmc5031_readInt>
   2331e:	2800      	cmp	r0, #0
   23320:	bfbe      	ittt	lt
   23322:	f854 3026 	ldrlt.w	r3, [r4, r6, lsl #2]
   23326:	425b      	neglt	r3, r3
   23328:	f844 3026 	strlt.w	r3, [r4, r6, lsl #2]
		tmc5031->oldX[motor] = xActual;
   2332c:	f8c5 8008 	str.w	r8, [r5, #8]
		tmc5031->oldTick = tick;
   23330:	f8c4 9010 	str.w	r9, [r4, #16]
}
   23334:	b003      	add	sp, #12
   23336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2333a:	bf00      	nop
   2333c:	4483126f 	.word	0x4483126f

00023340 <tmc5031_reset>:

uint8_t tmc5031_reset(ConfigurationTypeDef *TMC5031_config)
{
	if(TMC5031_config->state != CONFIG_READY)
   23340:	7803      	ldrb	r3, [r0, #0]
   23342:	b913      	cbnz	r3, 2334a <tmc5031_reset+0xa>
		return 0;

	TMC5031_config->state        = CONFIG_READY;
	TMC5031_config->configIndex  = 0;
   23344:	7043      	strb	r3, [r0, #1]

	return 1;
   23346:	2001      	movs	r0, #1
   23348:	4770      	bx	lr
		return 0;
   2334a:	2000      	movs	r0, #0
}
   2334c:	4770      	bx	lr

0002334e <tmc5031_restore>:

uint8_t tmc5031_restore(ConfigurationTypeDef *TMC5031_config)
{
	if(TMC5031_config->state != CONFIG_READY)
   2334e:	7803      	ldrb	r3, [r0, #0]
   23350:	b91b      	cbnz	r3, 2335a <tmc5031_restore+0xc>
		return 0;

	TMC5031_config->state        = CONFIG_RESTORE;
   23352:	2302      	movs	r3, #2
   23354:	8003      	strh	r3, [r0, #0]
	TMC5031_config->configIndex  = 0;

	return 1;
   23356:	2001      	movs	r0, #1
   23358:	4770      	bx	lr
		return 0;
   2335a:	2000      	movs	r0, #0
}
   2335c:	4770      	bx	lr
   2335e:	bf00      	nop

00023360 <tmc5041_writeDatagram>:
// => SPI wrapper
extern void tmc5041_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

void tmc5041_writeDatagram(TMC5041TypeDef *tmc5041, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   23360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23364:	4698      	mov	r8, r3
	uint8_t data[5] = {address | TMC5041_WRITE_BIT, x1, x2, x3, x4 };
   23366:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2336a:	f88d 3000 	strb.w	r3, [sp]
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   2336e:	6803      	ldr	r3, [r0, #0]
{
   23370:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   23374:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = {address | TMC5041_WRITE_BIT, x1, x2, x3, x4 };
   23378:	f88d 2001 	strb.w	r2, [sp, #1]
{
   2337c:	4604      	mov	r4, r0
   2337e:	4617      	mov	r7, r2
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   23380:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = {address | TMC5041_WRITE_BIT, x1, x2, x3, x4 };
   23384:	f88d 5004 	strb.w	r5, [sp, #4]
{
   23388:	460e      	mov	r6, r1
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   2338a:	2205      	movs	r2, #5
   2338c:	4669      	mov	r1, sp
	uint8_t data[5] = {address | TMC5041_WRITE_BIT, x1, x2, x3, x4 };
   2338e:	f88d 8002 	strb.w	r8, [sp, #2]
   23392:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   23396:	f7f2 fb52 	bl	15a3e <tmc5041_readWriteArray>

	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc5041->config->shadowRegister[address] = value;
   2339a:	6822      	ldr	r2, [r4, #0]
   2339c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   233a0:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc5041->config->shadowRegister[address] = value;
   233a4:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   233a8:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   233ac:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc5041->registerAccess[address] |= TMC_ACCESS_DIRTY;
   233b0:	4434      	add	r4, r6
	tmc5041->config->shadowRegister[address] = value;
   233b2:	604b      	str	r3, [r1, #4]
	tmc5041->registerAccess[address] |= TMC_ACCESS_DIRTY;
   233b4:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
   233b8:	f043 0308 	orr.w	r3, r3, #8
   233bc:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
}
   233c0:	b003      	add	sp, #12
   233c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000233c6 <tmc5041_writeInt>:

void tmc5041_writeInt(TMC5041TypeDef *tmc5041, uint8_t address, int32_t value)
{
   233c6:	b507      	push	{r0, r1, r2, lr}
	tmc5041_writeDatagram(tmc5041, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   233c8:	b2d3      	uxtb	r3, r2
   233ca:	9301      	str	r3, [sp, #4]
   233cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
   233d0:	9300      	str	r3, [sp, #0]
   233d2:	f3c2 4307 	ubfx	r3, r2, #16, #8
   233d6:	0e12      	lsrs	r2, r2, #24
   233d8:	f7ff ffc2 	bl	23360 <tmc5041_writeDatagram>
}
   233dc:	b003      	add	sp, #12
   233de:	f85d fb04 	ldr.w	pc, [sp], #4

000233e2 <tmc5041_readInt>:

int32_t tmc5041_readInt(TMC5041TypeDef *tmc5041, uint8_t address)
{
   233e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   233e4:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc5041->registerAccess[address]))
   233e8:	1902      	adds	r2, r0, r4
   233ea:	6803      	ldr	r3, [r0, #0]
   233ec:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
   233f0:	07d2      	lsls	r2, r2, #31
{
   233f2:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc5041->registerAccess[address]))
   233f4:	d404      	bmi.n	23400 <tmc5041_readInt+0x1e>
		return tmc5041->config->shadowRegister[address];
   233f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   233fa:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   233fc:	b003      	add	sp, #12
   233fe:	bd30      	pop	{r4, r5, pc}
	uint8_t data[5] = { 0, 0, 0, 0, 0 };
   23400:	4a0d      	ldr	r2, [pc, #52]	; (23438 <tmc5041_readInt+0x56>)
   23402:	6810      	ldr	r0, [r2, #0]
   23404:	7912      	ldrb	r2, [r2, #4]
   23406:	9000      	str	r0, [sp, #0]
   23408:	f88d 2004 	strb.w	r2, [sp, #4]
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   2340c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   23410:	f88d 4000 	strb.w	r4, [sp]
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   23414:	2205      	movs	r2, #5
   23416:	4669      	mov	r1, sp
   23418:	f7f2 fb11 	bl	15a3e <tmc5041_readWriteArray>
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   2341c:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   2341e:	f88d 4000 	strb.w	r4, [sp]
	tmc5041_readWriteArray(tmc5041->config->channel, &data[0], 5);
   23422:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   23426:	2205      	movs	r2, #5
   23428:	4669      	mov	r1, sp
   2342a:	f7f2 fb08 	bl	15a3e <tmc5041_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   2342e:	f8dd 0001 	ldr.w	r0, [sp, #1]
   23432:	ba00      	rev	r0, r0
   23434:	e7e2      	b.n	233fc <tmc5041_readInt+0x1a>
   23436:	bf00      	nop
   23438:	0002aaac 	.word	0x0002aaac

0002343c <tmc5041_init>:

void tmc5041_init(TMC5041TypeDef *tmc5041, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   2343c:	b530      	push	{r4, r5, lr}
	tmc5041->velocity[0]      = 0;
   2343e:	2400      	movs	r4, #0
	tmc5041->velocity[1]      = 0;
   23440:	e9c0 4401 	strd	r4, r4, [r0, #4]
	tmc5041->oldTick          = 0;
	tmc5041->oldX[0]          = 0;
	tmc5041->oldX[1]          = 0;
   23444:	e9c0 4403 	strd	r4, r4, [r0, #12]
	tmc5041->oldTick          = 0;
   23448:	6144      	str	r4, [r0, #20]
	tmc5041->vMaxModified[0]  = false;
   2344a:	f8a0 4298 	strh.w	r4, [r0, #664]	; 0x298
	tmc5041->vMaxModified[1]  = false;

	tmc5041->config               = config;
   2344e:	6002      	str	r2, [r0, #0]
	tmc5041->config->callback     = NULL;
   23450:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc5041->config->channel      = channel;
	tmc5041->config->configIndex  = 0;
	tmc5041->config->state        = CONFIG_READY;
   23454:	8014      	strh	r4, [r2, #0]
   23456:	4c0a      	ldr	r4, [pc, #40]	; (23480 <tmc5041_init+0x44>)
	tmc5041->config->channel      = channel;
   23458:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	int i;
	for(i = 0; i < TMC5041_REGISTER_COUNT; i++)
   2345c:	3b04      	subs	r3, #4
   2345e:	f500 7206 	add.w	r2, r0, #536	; 0x218
   23462:	f100 0118 	add.w	r1, r0, #24
   23466:	f500 7026 	add.w	r0, r0, #664	; 0x298
	{
		tmc5041->registerAccess[i]      = tmc5041_defaultRegisterAccess[i];
   2346a:	f814 5b01 	ldrb.w	r5, [r4], #1
   2346e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc5041->registerResetState[i]  = registerResetState[i];
   23472:	f853 5f04 	ldr.w	r5, [r3, #4]!
   23476:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC5041_REGISTER_COUNT; i++)
   2347a:	4282      	cmp	r2, r0
   2347c:	d1f5      	bne.n	2346a <tmc5041_init+0x2e>
	}
}
   2347e:	bd30      	pop	{r4, r5, pc}
   23480:	0002aab1 	.word	0x0002aab1

00023484 <tmc5041_periodicJob>:
		tmc5041->config->state = CONFIG_READY;
	}
}

void tmc5041_periodicJob(TMC5041TypeDef *tmc5041, uint32_t tick)
{
   23484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int xActual;
	uint32_t tickDiff;

	if(tmc5041->config->state != CONFIG_READY)
   23486:	6805      	ldr	r5, [r0, #0]
   23488:	782b      	ldrb	r3, [r5, #0]
{
   2348a:	4604      	mov	r4, r0
   2348c:	460e      	mov	r6, r1
	if(tmc5041->config->state != CONFIG_READY)
   2348e:	b1d3      	cbz	r3, 234c6 <tmc5041_periodicJob+0x42>
	const int32_t *settings = (tmc5041->config->state == CONFIG_RESTORE) ? tmc5041->config->shadowRegister : tmc5041->registerResetState;
   23490:	2b02      	cmp	r3, #2
   23492:	bf0c      	ite	eq
   23494:	1d2b      	addeq	r3, r5, #4
   23496:	f100 0318 	addne.w	r3, r0, #24
	while((*ptr < TMC5041_REGISTER_COUNT) && !TMC_IS_WRITABLE(tmc5041->registerAccess[*ptr]))
   2349a:	f995 2001 	ldrsb.w	r2, [r5, #1]
   2349e:	7869      	ldrb	r1, [r5, #1]
   234a0:	2a00      	cmp	r2, #0
   234a2:	db4b      	blt.n	2353c <tmc5041_periodicJob+0xb8>
   234a4:	1862      	adds	r2, r4, r1
   234a6:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
   234aa:	0792      	lsls	r2, r2, #30
   234ac:	d508      	bpl.n	234c0 <tmc5041_periodicJob+0x3c>
		tmc5041_writeInt(tmc5041, *ptr, settings[*ptr]);
   234ae:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   234b2:	4620      	mov	r0, r4
   234b4:	f7ff ff87 	bl	233c6 <tmc5041_writeInt>
		(*ptr)++;
   234b8:	786b      	ldrb	r3, [r5, #1]
   234ba:	3301      	adds	r3, #1
   234bc:	706b      	strb	r3, [r5, #1]
   234be:	e03c      	b.n	2353a <tmc5041_periodicJob+0xb6>
		(*ptr)++;
   234c0:	3101      	adds	r1, #1
   234c2:	7069      	strb	r1, [r5, #1]
   234c4:	e7e9      	b.n	2349a <tmc5041_periodicJob+0x16>
	{
		tmc5041_writeConfiguration(tmc5041);
		return;
	}

	if((tickDiff = tick - tmc5041->oldTick) >= 5)
   234c6:	6947      	ldr	r7, [r0, #20]
   234c8:	1bcf      	subs	r7, r1, r7
   234ca:	2f04      	cmp	r7, #4
   234cc:	d935      	bls.n	2353a <tmc5041_periodicJob+0xb6>
	{
		int i;
		for (i = 0; i < TMC5041_MOTORS; i++)
		{
			xActual = tmc5041_readInt(tmc5041, TMC5041_XACTUAL(i));
   234ce:	2121      	movs	r1, #33	; 0x21
   234d0:	f7ff ff87 	bl	233e2 <tmc5041_readInt>
			tmc5041->config->shadowRegister[TMC5041_XACTUAL(i)] = xActual;
   234d4:	6823      	ldr	r3, [r4, #0]
			xActual = tmc5041_readInt(tmc5041, TMC5041_XACTUAL(i));
   234d6:	4605      	mov	r5, r0
			tmc5041->config->shadowRegister[TMC5041_XACTUAL(i)] = xActual;
   234d8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			tmc5041->velocity[i] = (int) ((float) (abs(xActual-tmc5041->oldX[i]) / (float) tickDiff) * (float) 1048.576);
   234dc:	4638      	mov	r0, r7
   234de:	f004 f813 	bl	27508 <__aeabi_ui2f>
   234e2:	4607      	mov	r7, r0
   234e4:	68e0      	ldr	r0, [r4, #12]
   234e6:	1a28      	subs	r0, r5, r0
   234e8:	2800      	cmp	r0, #0
   234ea:	bfb8      	it	lt
   234ec:	4240      	neglt	r0, r0
   234ee:	f004 f80f 	bl	27510 <__aeabi_i2f>
   234f2:	4639      	mov	r1, r7
   234f4:	f004 f914 	bl	27720 <__aeabi_fdiv>
   234f8:	4912      	ldr	r1, [pc, #72]	; (23544 <tmc5041_periodicJob+0xc0>)
   234fa:	f004 f85d 	bl	275b8 <__aeabi_fmul>
   234fe:	f004 f9ab 	bl	27858 <__aeabi_f2iz>
			xActual = tmc5041_readInt(tmc5041, TMC5041_XACTUAL(i));
   23502:	2141      	movs	r1, #65	; 0x41
			tmc5041->velocity[i] = (int) ((float) (abs(xActual-tmc5041->oldX[i]) / (float) tickDiff) * (float) 1048.576);
   23504:	6060      	str	r0, [r4, #4]
			tmc5041->oldX[i] = xActual;
   23506:	60e5      	str	r5, [r4, #12]
			xActual = tmc5041_readInt(tmc5041, TMC5041_XACTUAL(i));
   23508:	4620      	mov	r0, r4
   2350a:	f7ff ff6a 	bl	233e2 <tmc5041_readInt>
			tmc5041->config->shadowRegister[TMC5041_XACTUAL(i)] = xActual;
   2350e:	6823      	ldr	r3, [r4, #0]
			xActual = tmc5041_readInt(tmc5041, TMC5041_XACTUAL(i));
   23510:	4605      	mov	r5, r0
			tmc5041->config->shadowRegister[TMC5041_XACTUAL(i)] = xActual;
   23512:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
			tmc5041->velocity[i] = (int) ((float) (abs(xActual-tmc5041->oldX[i]) / (float) tickDiff) * (float) 1048.576);
   23516:	6920      	ldr	r0, [r4, #16]
   23518:	1a28      	subs	r0, r5, r0
   2351a:	2800      	cmp	r0, #0
   2351c:	bfb8      	it	lt
   2351e:	4240      	neglt	r0, r0
   23520:	f003 fff6 	bl	27510 <__aeabi_i2f>
   23524:	4639      	mov	r1, r7
   23526:	f004 f8fb 	bl	27720 <__aeabi_fdiv>
   2352a:	4906      	ldr	r1, [pc, #24]	; (23544 <tmc5041_periodicJob+0xc0>)
   2352c:	f004 f844 	bl	275b8 <__aeabi_fmul>
   23530:	f004 f992 	bl	27858 <__aeabi_f2iz>
		}
		tmc5041->oldTick = tick;
   23534:	e9c4 5604 	strd	r5, r6, [r4, #16]
			tmc5041->velocity[i] = (int) ((float) (abs(xActual-tmc5041->oldX[i]) / (float) tickDiff) * (float) 1048.576);
   23538:	60a0      	str	r0, [r4, #8]
	}
}
   2353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tmc5041->config->state = CONFIG_READY;
   2353c:	6823      	ldr	r3, [r4, #0]
   2353e:	2200      	movs	r2, #0
   23540:	701a      	strb	r2, [r3, #0]
   23542:	e7fa      	b.n	2353a <tmc5041_periodicJob+0xb6>
   23544:	4483126f 	.word	0x4483126f

00023548 <tmc5041_reset>:

uint8_t tmc5041_reset(TMC5041TypeDef *tmc5041)
{
	if(tmc5041->config->state != CONFIG_READY)
   23548:	6803      	ldr	r3, [r0, #0]
   2354a:	781a      	ldrb	r2, [r3, #0]
   2354c:	b912      	cbnz	r2, 23554 <tmc5041_reset+0xc>
		return 0;

	tmc5041->config->state        = CONFIG_RESET;
   2354e:	2001      	movs	r0, #1
   23550:	8018      	strh	r0, [r3, #0]
	tmc5041->config->configIndex  = 0;

	return 1;
   23552:	4770      	bx	lr
		return 0;
   23554:	2000      	movs	r0, #0
}
   23556:	4770      	bx	lr

00023558 <tmc5041_restore>:

uint8_t tmc5041_restore(TMC5041TypeDef *tmc5041)
{
	if(tmc5041->config->state != CONFIG_READY)
   23558:	6803      	ldr	r3, [r0, #0]
   2355a:	781a      	ldrb	r2, [r3, #0]
   2355c:	b91a      	cbnz	r2, 23566 <tmc5041_restore+0xe>
		return 0;

	tmc5041->config->state        = CONFIG_RESTORE;
   2355e:	2202      	movs	r2, #2
   23560:	801a      	strh	r2, [r3, #0]
	tmc5041->config->configIndex  = 0;

	return 1;
   23562:	2001      	movs	r0, #1
   23564:	4770      	bx	lr
		return 0;
   23566:	2000      	movs	r0, #0
}
   23568:	4770      	bx	lr
   2356a:	bf00      	nop

0002356c <tmc5062_writeInt.part.0>:
// <= SPI wrapper

static void measureVelocity(TMC5062TypeDef *tmc5062, uint32_t tick);
static void writeConfiguration(TMC5062TypeDef *tmc5062);

void tmc5062_writeInt(TMC5062TypeDef *tmc5062, uint8_t channel, uint8_t address, int value)
   2356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	if(channel >= TMC5062_MOTORS)
		return;

	tmc5062_readWrite(tmc5062->motors[channel], address | TMC5062_WRITE_BIT, false);
   2356e:	1845      	adds	r5, r0, r1
void tmc5062_writeInt(TMC5062TypeDef *tmc5062, uint8_t channel, uint8_t address, int value)
   23570:	4616      	mov	r6, r2
   23572:	461c      	mov	r4, r3
	tmc5062_readWrite(tmc5062->motors[channel], address | TMC5062_WRITE_BIT, false);
   23574:	f046 0180 	orr.w	r1, r6, #128	; 0x80
void tmc5062_writeInt(TMC5062TypeDef *tmc5062, uint8_t channel, uint8_t address, int value)
   23578:	4607      	mov	r7, r0
	tmc5062_readWrite(tmc5062->motors[channel], address | TMC5062_WRITE_BIT, false);
   2357a:	2200      	movs	r2, #0
   2357c:	7928      	ldrb	r0, [r5, #4]
   2357e:	f7f3 fa11 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], value >> 24, false);
   23582:	2200      	movs	r2, #0
   23584:	0e21      	lsrs	r1, r4, #24
   23586:	7928      	ldrb	r0, [r5, #4]
   23588:	f7f3 fa0c 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], value >> 16, false);
   2358c:	2200      	movs	r2, #0
   2358e:	f3c4 4107 	ubfx	r1, r4, #16, #8
   23592:	7928      	ldrb	r0, [r5, #4]
   23594:	f7f3 fa06 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], value >>  8, false);
   23598:	2200      	movs	r2, #0
   2359a:	f3c4 2107 	ubfx	r1, r4, #8, #8
   2359e:	7928      	ldrb	r0, [r5, #4]
   235a0:	f7f3 fa00 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], value,       true);
   235a4:	2201      	movs	r2, #1
   235a6:	7928      	ldrb	r0, [r5, #4]
   235a8:	b2e1      	uxtb	r1, r4
   235aa:	f7f3 f9fb 	bl	169a4 <tmc5062_readWrite>

	tmc5062->config->shadowRegister[TMC_ADDRESS(address)] = value;
   235ae:	683a      	ldr	r2, [r7, #0]
   235b0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
   235b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   235b8:	6074      	str	r4, [r6, #4]
}
   235ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000235bc <tmc5062_writeInt>:
	if(channel >= TMC5062_MOTORS)
   235bc:	2901      	cmp	r1, #1
   235be:	d800      	bhi.n	235c2 <tmc5062_writeInt+0x6>
   235c0:	e7d4      	b.n	2356c <tmc5062_writeInt.part.0>
}
   235c2:	4770      	bx	lr

000235c4 <tmc5062_readInt>:

int tmc5062_readInt(TMC5062TypeDef *tmc5062, uint8_t channel, uint8_t address)
{
	if(channel >= TMC5062_MOTORS)
   235c4:	2901      	cmp	r1, #1
{
   235c6:	b538      	push	{r3, r4, r5, lr}
   235c8:	4615      	mov	r5, r2
	if(channel >= TMC5062_MOTORS)
   235ca:	d845      	bhi.n	23658 <tmc5062_readInt+0x94>
		return 0;

	if(!TMC_IS_READABLE(tmc5062->registerAccess[TMC_ADDRESS(address)]))
   235cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   235d0:	1883      	adds	r3, r0, r2
   235d2:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
   235d6:	07db      	lsls	r3, r3, #31
   235d8:	d404      	bmi.n	235e4 <tmc5062_readInt+0x20>
		return tmc5062->config->shadowRegister[TMC_ADDRESS(address)];
   235da:	6803      	ldr	r3, [r0, #0]
   235dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   235e0:	6858      	ldr	r0, [r3, #4]
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
	value <<= 8;
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, true);

	return value;
}
   235e2:	bd38      	pop	{r3, r4, r5, pc}
	tmc5062_readWrite(tmc5062->motors[channel], address, false);
   235e4:	1844      	adds	r4, r0, r1
   235e6:	2200      	movs	r2, #0
   235e8:	4629      	mov	r1, r5
   235ea:	7920      	ldrb	r0, [r4, #4]
   235ec:	f7f3 f9da 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   235f0:	2200      	movs	r2, #0
   235f2:	4611      	mov	r1, r2
   235f4:	7920      	ldrb	r0, [r4, #4]
   235f6:	f7f3 f9d5 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   235fa:	2200      	movs	r2, #0
   235fc:	4611      	mov	r1, r2
   235fe:	7920      	ldrb	r0, [r4, #4]
   23600:	f7f3 f9d0 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   23604:	2200      	movs	r2, #0
   23606:	4611      	mov	r1, r2
   23608:	7920      	ldrb	r0, [r4, #4]
   2360a:	f7f3 f9cb 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], 0, true);
   2360e:	2201      	movs	r2, #1
   23610:	2100      	movs	r1, #0
   23612:	7920      	ldrb	r0, [r4, #4]
   23614:	f7f3 f9c6 	bl	169a4 <tmc5062_readWrite>
	tmc5062_readWrite(tmc5062->motors[channel], address, false);
   23618:	4629      	mov	r1, r5
   2361a:	2200      	movs	r2, #0
   2361c:	7920      	ldrb	r0, [r4, #4]
   2361e:	f7f3 f9c1 	bl	169a4 <tmc5062_readWrite>
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   23622:	2200      	movs	r2, #0
   23624:	4611      	mov	r1, r2
   23626:	7920      	ldrb	r0, [r4, #4]
   23628:	f7f3 f9bc 	bl	169a4 <tmc5062_readWrite>
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   2362c:	2200      	movs	r2, #0
	value <<= 8;
   2362e:	0205      	lsls	r5, r0, #8
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   23630:	4611      	mov	r1, r2
   23632:	7920      	ldrb	r0, [r4, #4]
   23634:	f7f3 f9b6 	bl	169a4 <tmc5062_readWrite>
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   23638:	2200      	movs	r2, #0
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   2363a:	4328      	orrs	r0, r5
	value <<= 8;
   2363c:	0205      	lsls	r5, r0, #8
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, false);
   2363e:	4611      	mov	r1, r2
   23640:	7920      	ldrb	r0, [r4, #4]
   23642:	f7f3 f9af 	bl	169a4 <tmc5062_readWrite>
   23646:	4328      	orrs	r0, r5
	value <<= 8;
   23648:	0205      	lsls	r5, r0, #8
	value |= tmc5062_readWrite(tmc5062->motors[channel], 0, true);
   2364a:	2201      	movs	r2, #1
   2364c:	7920      	ldrb	r0, [r4, #4]
   2364e:	2100      	movs	r1, #0
   23650:	f7f3 f9a8 	bl	169a4 <tmc5062_readWrite>
   23654:	4328      	orrs	r0, r5
	return value;
   23656:	e7c4      	b.n	235e2 <tmc5062_readInt+0x1e>
		return 0;
   23658:	2000      	movs	r0, #0
   2365a:	e7c2      	b.n	235e2 <tmc5062_readInt+0x1e>

0002365c <tmc5062_init>:

void tmc5062_init(TMC5062TypeDef *tmc5062, ConfigurationTypeDef *tmc5062_config, const int32_t *registerResetState, uint8_t motorIndex0, uint8_t motorIndex1, uint32_t chipFrequency)
{
   2365c:	b530      	push	{r4, r5, lr}
	tmc5062->motors[0] = motorIndex0;
   2365e:	7103      	strb	r3, [r0, #4]
	tmc5062->motors[1] = motorIndex1;
   23660:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23664:	7143      	strb	r3, [r0, #5]

	tmc5062->chipFrequency  = chipFrequency;
   23666:	9b04      	ldr	r3, [sp, #16]
   23668:	6083      	str	r3, [r0, #8]
	tmc5062->config = tmc5062_config;

	tmc5062->measurementInterval = 25; // Default: 25 ms
	tmc5062->oldTick        = 0;
   2366a:	2419      	movs	r4, #25
   2366c:	2300      	movs	r3, #0
   2366e:	e9c0 4303 	strd	r4, r3, [r0, #12]
   23672:	4c0e      	ldr	r4, [pc, #56]	; (236ac <tmc5062_init+0x50>)
	tmc5062->config = tmc5062_config;
   23674:	6001      	str	r1, [r0, #0]
	tmc5062->oldXActual[0]  = 0;
	tmc5062->oldXActual[1]  = 0;
   23676:	e9c0 3305 	strd	r3, r3, [r0, #20]
	tmc5062->velocity[0]    = 0;
	tmc5062->velocity[1]    = 0;
   2367a:	e9c0 3307 	strd	r3, r3, [r0, #28]

	tmc5062->config->callback     = NULL;
   2367e:	3a04      	subs	r2, #4
   23680:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
	tmc5062->config->channel      = 0;
   23684:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
	tmc5062->config->configIndex  = 0;
	tmc5062->config->state        = CONFIG_READY;
   23688:	800b      	strh	r3, [r1, #0]

	for(int i = 0; i < TMC5062_REGISTER_COUNT; i++)
   2368a:	f500 7309 	add.w	r3, r0, #548	; 0x224
   2368e:	f100 0124 	add.w	r1, r0, #36	; 0x24
   23692:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
	{
		tmc5062->registerAccess[i] = tmc5062_defaultRegisterAccess[i];
   23696:	f814 5b01 	ldrb.w	r5, [r4], #1
   2369a:	f803 5b01 	strb.w	r5, [r3], #1
		tmc5062->registerResetState[i]  = registerResetState[i];
   2369e:	f852 5f04 	ldr.w	r5, [r2, #4]!
   236a2:	f841 5b04 	str.w	r5, [r1], #4
	for(int i = 0; i < TMC5062_REGISTER_COUNT; i++)
   236a6:	4283      	cmp	r3, r0
   236a8:	d1f5      	bne.n	23696 <tmc5062_init+0x3a>
	}
}
   236aa:	bd30      	pop	{r4, r5, pc}
   236ac:	0002ab34 	.word	0x0002ab34

000236b0 <tmc5062_fillShadowRegisters>:

void tmc5062_fillShadowRegisters(TMC5062TypeDef *tmc5062)
{
   236b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   236b2:	4d10      	ldr	r5, [pc, #64]	; (236f4 <tmc5062_fillShadowRegisters+0x44>)
	// Check if we have constants defined
	if(ARRAY_SIZE(tmc5062_RegisterConstants) == 0)
		return;

	for(size_t i = 0, j = 0; i < TMC5062_REGISTER_COUNT; i++)
   236b4:	2200      	movs	r2, #0
   236b6:	f500 7409 	add.w	r4, r0, #548	; 0x224
   236ba:	4613      	mov	r3, r2
		while(j < ARRAY_SIZE(tmc5062_RegisterConstants) && (tmc5062_RegisterConstants[j].address < i))
			j++;

		// If we have an entry for our current address, write the constant
		if(tmc5062_RegisterConstants[j].address == i)
			tmc5062->config->shadowRegister[i] = tmc5062_RegisterConstants[j].value;
   236bc:	f1a5 0680 	sub.w	r6, r5, #128	; 0x80
		if(tmc5062->registerAccess[i] != TMC_ACCESS_W_PRESET)
   236c0:	f814 1b01 	ldrb.w	r1, [r4], #1
   236c4:	2942      	cmp	r1, #66	; 0x42
   236c6:	d10f      	bne.n	236e8 <tmc5062_fillShadowRegisters+0x38>
		while(j < ARRAY_SIZE(tmc5062_RegisterConstants) && (tmc5062_RegisterConstants[j].address < i))
   236c8:	2a13      	cmp	r2, #19
   236ca:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   236ce:	d801      	bhi.n	236d4 <tmc5062_fillShadowRegisters+0x24>
   236d0:	4299      	cmp	r1, r3
   236d2:	d30d      	bcc.n	236f0 <tmc5062_fillShadowRegisters+0x40>
		if(tmc5062_RegisterConstants[j].address == i)
   236d4:	4299      	cmp	r1, r3
   236d6:	d107      	bne.n	236e8 <tmc5062_fillShadowRegisters+0x38>
			tmc5062->config->shadowRegister[i] = tmc5062_RegisterConstants[j].value;
   236d8:	6801      	ldr	r1, [r0, #0]
   236da:	eb06 07c2 	add.w	r7, r6, r2, lsl #3
   236de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   236e2:	f8d7 7084 	ldr.w	r7, [r7, #132]	; 0x84
   236e6:	604f      	str	r7, [r1, #4]
	for(size_t i = 0, j = 0; i < TMC5062_REGISTER_COUNT; i++)
   236e8:	3301      	adds	r3, #1
   236ea:	2b80      	cmp	r3, #128	; 0x80
   236ec:	d1e8      	bne.n	236c0 <tmc5062_fillShadowRegisters+0x10>
	}
}
   236ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			j++;
   236f0:	3201      	adds	r2, #1
   236f2:	e7e9      	b.n	236c8 <tmc5062_fillShadowRegisters+0x18>
   236f4:	0002abb4 	.word	0x0002abb4

000236f8 <tmc5062_setRegisterResetState>:

void tmc5062_setRegisterResetState(TMC5062TypeDef *tmc5062, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC5062_REGISTER_COUNT; i++)
   236f8:	1f0b      	subs	r3, r1, #4
   236fa:	3024      	adds	r0, #36	; 0x24
   236fc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc5062->registerResetState[i] = resetState[i];
   23700:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23704:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC5062_REGISTER_COUNT; i++)
   23708:	428b      	cmp	r3, r1
   2370a:	d1f9      	bne.n	23700 <tmc5062_setRegisterResetState+0x8>
}
   2370c:	4770      	bx	lr

0002370e <tmc5062_setCallback>:

void tmc5062_setCallback(TMC5062TypeDef *tmc5062, tmc5062_callback callback)
{
	tmc5062->config->callback = (tmc_callback_config) callback;
   2370e:	6803      	ldr	r3, [r0, #0]
   23710:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   23714:	4770      	bx	lr

00023716 <tmc5062_reset>:
		}
	}
}

uint8_t tmc5062_reset(TMC5062TypeDef *tmc5062)
{
   23716:	b530      	push	{r4, r5, lr}
	if(tmc5062->config->state != CONFIG_READY)
   23718:	6801      	ldr	r1, [r0, #0]
   2371a:	780a      	ldrb	r2, [r1, #0]
   2371c:	b982      	cbnz	r2, 23740 <tmc5062_reset+0x2a>
   2371e:	f500 7309 	add.w	r3, r0, #548	; 0x224
   23722:	1d0d      	adds	r5, r1, #4
   23724:	f500 7029 	add.w	r0, r0, #676	; 0x2a4
		return false;

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC5062_REGISTER_COUNT; i++)
	{
		tmc5062->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   23728:	781c      	ldrb	r4, [r3, #0]
   2372a:	f024 0408 	bic.w	r4, r4, #8
   2372e:	f803 4b01 	strb.w	r4, [r3], #1
	for(size_t i = 0; i < TMC5062_REGISTER_COUNT; i++)
   23732:	4283      	cmp	r3, r0
		tmc5062->config->shadowRegister[i] = 0;
   23734:	f845 2b04 	str.w	r2, [r5], #4
	for(size_t i = 0; i < TMC5062_REGISTER_COUNT; i++)
   23738:	d1f6      	bne.n	23728 <tmc5062_reset+0x12>
	}

	tmc5062->config->state        = CONFIG_RESET;
   2373a:	2001      	movs	r0, #1
   2373c:	8008      	strh	r0, [r1, #0]
	tmc5062->config->configIndex  = 0;

	return true;
}
   2373e:	bd30      	pop	{r4, r5, pc}
		return false;
   23740:	2000      	movs	r0, #0
   23742:	e7fc      	b.n	2373e <tmc5062_reset+0x28>

00023744 <tmc5062_restore>:

uint8_t tmc5062_restore(TMC5062TypeDef *tmc5062)
{
	if(tmc5062->config->state != CONFIG_READY)
   23744:	6803      	ldr	r3, [r0, #0]
   23746:	781a      	ldrb	r2, [r3, #0]
   23748:	b91a      	cbnz	r2, 23752 <tmc5062_restore+0xe>
		return 0;

	tmc5062->config->state        = CONFIG_RESTORE;
   2374a:	2202      	movs	r2, #2
   2374c:	801a      	strh	r2, [r3, #0]
	tmc5062->config->configIndex  = 0;

	return 1;
   2374e:	2001      	movs	r0, #1
   23750:	4770      	bx	lr
		return 0;
   23752:	2000      	movs	r0, #0
}
   23754:	4770      	bx	lr

00023756 <tmc5062_rotate>:

void tmc5062_rotate(TMC5062TypeDef *tmc5062, uint8_t motor, int32_t velocity)
{
	if(motor >= TMC5062_MOTORS)
   23756:	2901      	cmp	r1, #1
{
   23758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2375c:	4607      	mov	r7, r0
   2375e:	460c      	mov	r4, r1
   23760:	4616      	mov	r6, r2
	if(motor >= TMC5062_MOTORS)
   23762:	d816      	bhi.n	23792 <tmc5062_rotate+0x3c>
		return;

	tmc5062_writeInt(tmc5062, motor, TMC5062_VMAX(motor), abs(velocity));
   23764:	2520      	movs	r5, #32
   23766:	408d      	lsls	r5, r1
   23768:	f045 0207 	orr.w	r2, r5, #7
   2376c:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
   23770:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
   23774:	b2d2      	uxtb	r2, r2
   23776:	f7ff ff21 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, motor, TMC5062_RAMPMODE(motor), (velocity >= 0) ? TMC5062_MODE_VELPOS : TMC5062_MODE_VELNEG);
   2377a:	2e00      	cmp	r6, #0
   2377c:	b2ea      	uxtb	r2, r5
   2377e:	4621      	mov	r1, r4
   23780:	4638      	mov	r0, r7
   23782:	bfa8      	it	ge
   23784:	2301      	movge	r3, #1
}
   23786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tmc5062_writeInt(tmc5062, motor, TMC5062_RAMPMODE(motor), (velocity >= 0) ? TMC5062_MODE_VELPOS : TMC5062_MODE_VELNEG);
   2378a:	bfb8      	it	lt
   2378c:	2302      	movlt	r3, #2
   2378e:	f7ff bf15 	b.w	235bc <tmc5062_writeInt>
}
   23792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023796 <tmc5062_right>:

void tmc5062_right(TMC5062TypeDef *tmc5062, uint8_t motor, int32_t velocity)
{
	return tmc5062_rotate(tmc5062, motor, velocity);
   23796:	f7ff bfde 	b.w	23756 <tmc5062_rotate>

0002379a <tmc5062_left>:
}

void tmc5062_left(TMC5062TypeDef *tmc5062, uint8_t motor, int32_t velocity)
{
	return tmc5062_rotate(tmc5062, motor, -velocity);
   2379a:	4252      	negs	r2, r2
   2379c:	f7ff bfdb 	b.w	23756 <tmc5062_rotate>

000237a0 <tmc5062_stop>:
}

void tmc5062_stop(TMC5062TypeDef *tmc5062, uint8_t motor)
{
	return tmc5062_rotate(tmc5062, motor, 0);
   237a0:	2200      	movs	r2, #0
   237a2:	f7ff bfd8 	b.w	23756 <tmc5062_rotate>

000237a6 <tmc5062_moveTo>:
}

void tmc5062_moveTo(TMC5062TypeDef *tmc5062, uint8_t motor, int32_t position, uint32_t velocityMax)
{
	if(motor >= TMC5062_MOTORS)
   237a6:	2901      	cmp	r1, #1
{
   237a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   237ac:	4606      	mov	r6, r0
   237ae:	460d      	mov	r5, r1
   237b0:	4617      	mov	r7, r2
   237b2:	4698      	mov	r8, r3
	if(motor >= TMC5062_MOTORS)
   237b4:	d818      	bhi.n	237e8 <tmc5062_moveTo+0x42>
		return;

	tmc5062_writeInt(tmc5062, motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
   237b6:	2420      	movs	r4, #32
   237b8:	408c      	lsls	r4, r1
   237ba:	b2e2      	uxtb	r2, r4
   237bc:	2300      	movs	r3, #0
	tmc5062_writeInt(tmc5062, motor, TMC5062_VMAX(motor), velocityMax);
   237be:	b264      	sxtb	r4, r4
	tmc5062_writeInt(tmc5062, motor, TMC5062_RAMPMODE(motor), TMC5062_MODE_POSITION);
   237c0:	f7ff fefc 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, motor, TMC5062_VMAX(motor), velocityMax);
   237c4:	f044 0207 	orr.w	r2, r4, #7
   237c8:	4643      	mov	r3, r8
   237ca:	4629      	mov	r1, r5
   237cc:	4630      	mov	r0, r6
   237ce:	b2d2      	uxtb	r2, r2
	tmc5062_writeInt(tmc5062, motor, TMC5062_XTARGET(motor), position);
   237d0:	f044 040d 	orr.w	r4, r4, #13
	tmc5062_writeInt(tmc5062, motor, TMC5062_VMAX(motor), velocityMax);
   237d4:	f7ff fef2 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, motor, TMC5062_XTARGET(motor), position);
   237d8:	463b      	mov	r3, r7
   237da:	b2e2      	uxtb	r2, r4
   237dc:	4629      	mov	r1, r5
   237de:	4630      	mov	r0, r6
}
   237e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	tmc5062_writeInt(tmc5062, motor, TMC5062_XTARGET(motor), position);
   237e4:	f7ff beea 	b.w	235bc <tmc5062_writeInt>
}
   237e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000237ec <tmc5062_moveBy>:

void tmc5062_moveBy(TMC5062TypeDef *tmc5062, uint8_t motor, uint32_t velocityMax, int32_t *ticks)
{
   237ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// determine actual position and add numbers of ticks to move
	*ticks += tmc5062_readInt(tmc5062, motor, TMC5062_XACTUAL(motor));
   237f0:	2420      	movs	r4, #32
   237f2:	408c      	lsls	r4, r1
   237f4:	f044 0401 	orr.w	r4, r4, #1
{
   237f8:	4698      	mov	r8, r3
   237fa:	4617      	mov	r7, r2
	*ticks += tmc5062_readInt(tmc5062, motor, TMC5062_XACTUAL(motor));
   237fc:	b2e2      	uxtb	r2, r4
{
   237fe:	4606      	mov	r6, r0
   23800:	460d      	mov	r5, r1
	*ticks += tmc5062_readInt(tmc5062, motor, TMC5062_XACTUAL(motor));
   23802:	f7ff fedf 	bl	235c4 <tmc5062_readInt>
   23806:	f8d8 2000 	ldr.w	r2, [r8]
   2380a:	4402      	add	r2, r0
   2380c:	f8c8 2000 	str.w	r2, [r8]

	return tmc5062_moveTo(tmc5062, motor, *ticks, velocityMax);
   23810:	463b      	mov	r3, r7
   23812:	4629      	mov	r1, r5
   23814:	4630      	mov	r0, r6
}
   23816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return tmc5062_moveTo(tmc5062, motor, *ticks, velocityMax);
   2381a:	f7ff bfc4 	b.w	237a6 <tmc5062_moveTo>

0002381e <calculateTOFF>:
// Chopper settings
uint8_t calculateTOFF(uint32_t chopFreq, uint32_t clkFreq)
{
	// Calculate TOff from the clock and chopper frequencies (see documentation
	// for details). We add 16 before dividing by 32 to have rounding instead of flooring.
	uint8_t result = (((clkFreq / chopFreq / 4) - 12) + 16) / 32;
   2381e:	fbb1 f0f0 	udiv	r0, r1, r0
   23822:	0880      	lsrs	r0, r0, #2
   23824:	3004      	adds	r0, #4
   23826:	f3c0 1047 	ubfx	r0, r0, #5, #8

	result = MIN(15, result);
	result = MAX(1, result);

	return result;
   2382a:	280f      	cmp	r0, #15
   2382c:	bf28      	it	cs
   2382e:	200f      	movcs	r0, #15
}
   23830:	2801      	cmp	r0, #1
   23832:	bf38      	it	cc
   23834:	2001      	movcc	r0, #1
   23836:	4770      	bx	lr

00023838 <dcStepActive>:
// dcStep
uint8_t dcStepActive(TMC5062TypeDef *tmc5062, uint8_t channel)
{

	// vhighfs and vhighchm set?
	int chopConf = tmc5062_readInt(tmc5062, channel, TMC5062_CHOPCONF(channel));
   23838:	010a      	lsls	r2, r1, #4
   2383a:	f042 026c 	orr.w	r2, r2, #108	; 0x6c
{
   2383e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int chopConf = tmc5062_readInt(tmc5062, channel, TMC5062_CHOPCONF(channel));
   23840:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
{
   23844:	4607      	mov	r7, r0
   23846:	460e      	mov	r6, r1
	int chopConf = tmc5062_readInt(tmc5062, channel, TMC5062_CHOPCONF(channel));
   23848:	f7ff febc 	bl	235c4 <tmc5062_readInt>
	if((chopConf & (TMC5062_VHIGHFS_MASK | TMC5062_VHIGHCHM_MASK)) != (TMC5062_VHIGHFS_MASK | TMC5062_VHIGHCHM_MASK))
   2384c:	f400 2040 	and.w	r0, r0, #786432	; 0xc0000
   23850:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
   23854:	d116      	bne.n	23884 <dcStepActive+0x4c>
		return 0;

	// Velocity above dcStep velocity threshold?
	int vActual = tmc5062_readInt(tmc5062, channel, TMC5062_VACTUAL(channel));
   23856:	2420      	movs	r4, #32
   23858:	40b4      	lsls	r4, r6
   2385a:	b264      	sxtb	r4, r4
   2385c:	f044 0202 	orr.w	r2, r4, #2
   23860:	b2d2      	uxtb	r2, r2
   23862:	4631      	mov	r1, r6
   23864:	4638      	mov	r0, r7
   23866:	f7ff fead 	bl	235c4 <tmc5062_readInt>
	int vDCMin  = tmc5062_readInt(tmc5062, channel, TMC5062_VDCMIN(channel));
   2386a:	f044 0213 	orr.w	r2, r4, #19
	int vActual = tmc5062_readInt(tmc5062, channel, TMC5062_VACTUAL(channel));
   2386e:	4605      	mov	r5, r0
	int vDCMin  = tmc5062_readInt(tmc5062, channel, TMC5062_VDCMIN(channel));
   23870:	b2d2      	uxtb	r2, r2
   23872:	4631      	mov	r1, r6
   23874:	4638      	mov	r0, r7
   23876:	f7ff fea5 	bl	235c4 <tmc5062_readInt>

	return vActual >= vDCMin;
   2387a:	4285      	cmp	r5, r0
   2387c:	bfb4      	ite	lt
   2387e:	2000      	movlt	r0, #0
   23880:	2001      	movge	r0, #1
}
   23882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   23884:	2000      	movs	r0, #0
   23886:	e7fc      	b.n	23882 <dcStepActive+0x4a>

00023888 <tmc5062_periodicJob>:
{
   23888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(tmc5062->config->state != CONFIG_READY)
   2388c:	6805      	ldr	r5, [r0, #0]
{
   2388e:	460e      	mov	r6, r1
	if(tmc5062->config->state != CONFIG_READY)
   23890:	7829      	ldrb	r1, [r5, #0]
{
   23892:	4604      	mov	r4, r0
	if(tmc5062->config->state != CONFIG_READY)
   23894:	2900      	cmp	r1, #0
   23896:	d155      	bne.n	23944 <tmc5062_periodicJob+0xbc>
		if(dcStepActive(tmc5062, channel))
   23898:	f7ff ffce 	bl	23838 <dcStepActive>
   2389c:	b928      	cbnz	r0, 238aa <tmc5062_periodicJob+0x22>
   2389e:	2101      	movs	r1, #1
   238a0:	4620      	mov	r0, r4
   238a2:	f7ff ffc9 	bl	23838 <dcStepActive>
   238a6:	2800      	cmp	r0, #0
   238a8:	d06b      	beq.n	23982 <tmc5062_periodicJob+0xfa>
static void measureVelocity(TMC5062TypeDef *tmc5062, uint32_t tick)
{
	int xActual;
	uint32_t tickDiff;

	if((tickDiff = tick - tmc5062->oldTick) >= tmc5062->measurementInterval)
   238aa:	6927      	ldr	r7, [r4, #16]
   238ac:	68e3      	ldr	r3, [r4, #12]
   238ae:	1bf7      	subs	r7, r6, r7
   238b0:	429f      	cmp	r7, r3
   238b2:	d366      	bcc.n	23982 <tmc5062_periodicJob+0xfa>
	{
		for(uint8_t channel = 0; channel < TMC5062_MOTORS; channel++)
		{
			xActual = tmc5062_readInt(tmc5062, channel, TMC5062_XACTUAL(channel));
   238b4:	2221      	movs	r2, #33	; 0x21
   238b6:	2100      	movs	r1, #0
   238b8:	4620      	mov	r0, r4
   238ba:	f7ff fe83 	bl	235c4 <tmc5062_readInt>
   238be:	4605      	mov	r5, r0

			// Position difference gets multiplied by 1000 to compensate ticks being in milliseconds
			int32_t xDiff = (xActual - tmc5062->oldXActual[channel])* 1000;
			tmc5062->velocity[channel] = (xDiff) / ((float) tickDiff) * ((1<<24) / (float) tmc5062->chipFrequency);
   238c0:	4638      	mov	r0, r7
   238c2:	f003 fe21 	bl	27508 <__aeabi_ui2f>
   238c6:	4607      	mov	r7, r0
			int32_t xDiff = (xActual - tmc5062->oldXActual[channel])* 1000;
   238c8:	6960      	ldr	r0, [r4, #20]
   238ca:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
   238ce:	1a28      	subs	r0, r5, r0
			tmc5062->velocity[channel] = (xDiff) / ((float) tickDiff) * ((1<<24) / (float) tmc5062->chipFrequency);
   238d0:	fb09 f000 	mul.w	r0, r9, r0
   238d4:	f003 fe1c 	bl	27510 <__aeabi_i2f>
   238d8:	4639      	mov	r1, r7
   238da:	f003 ff21 	bl	27720 <__aeabi_fdiv>
   238de:	4680      	mov	r8, r0
   238e0:	68a0      	ldr	r0, [r4, #8]
   238e2:	f003 fe11 	bl	27508 <__aeabi_ui2f>
   238e6:	4601      	mov	r1, r0
   238e8:	f04f 4097 	mov.w	r0, #1266679808	; 0x4b800000
   238ec:	f003 ff18 	bl	27720 <__aeabi_fdiv>
   238f0:	4601      	mov	r1, r0
   238f2:	4640      	mov	r0, r8
   238f4:	f003 fe60 	bl	275b8 <__aeabi_fmul>
   238f8:	f003 ffae 	bl	27858 <__aeabi_f2iz>
			xActual = tmc5062_readInt(tmc5062, channel, TMC5062_XACTUAL(channel));
   238fc:	2241      	movs	r2, #65	; 0x41
   238fe:	2101      	movs	r1, #1
			tmc5062->velocity[channel] = (xDiff) / ((float) tickDiff) * ((1<<24) / (float) tmc5062->chipFrequency);
   23900:	61e0      	str	r0, [r4, #28]

			tmc5062->oldXActual[channel] = xActual;
   23902:	6165      	str	r5, [r4, #20]
			xActual = tmc5062_readInt(tmc5062, channel, TMC5062_XACTUAL(channel));
   23904:	4620      	mov	r0, r4
   23906:	f7ff fe5d 	bl	235c4 <tmc5062_readInt>
   2390a:	4605      	mov	r5, r0
			int32_t xDiff = (xActual - tmc5062->oldXActual[channel])* 1000;
   2390c:	69a0      	ldr	r0, [r4, #24]
   2390e:	1a28      	subs	r0, r5, r0
			tmc5062->velocity[channel] = (xDiff) / ((float) tickDiff) * ((1<<24) / (float) tmc5062->chipFrequency);
   23910:	fb09 f000 	mul.w	r0, r9, r0
   23914:	f003 fdfc 	bl	27510 <__aeabi_i2f>
   23918:	4639      	mov	r1, r7
   2391a:	f003 ff01 	bl	27720 <__aeabi_fdiv>
   2391e:	4607      	mov	r7, r0
   23920:	68a0      	ldr	r0, [r4, #8]
   23922:	f003 fdf1 	bl	27508 <__aeabi_ui2f>
   23926:	4601      	mov	r1, r0
   23928:	f04f 4097 	mov.w	r0, #1266679808	; 0x4b800000
   2392c:	f003 fef8 	bl	27720 <__aeabi_fdiv>
   23930:	4601      	mov	r1, r0
   23932:	4638      	mov	r0, r7
   23934:	f003 fe40 	bl	275b8 <__aeabi_fmul>
   23938:	f003 ff8e 	bl	27858 <__aeabi_f2iz>
			tmc5062->oldXActual[channel] = xActual;
   2393c:	61a5      	str	r5, [r4, #24]
			tmc5062->velocity[channel] = (xDiff) / ((float) tickDiff) * ((1<<24) / (float) tmc5062->chipFrequency);
   2393e:	6220      	str	r0, [r4, #32]
		}
		tmc5062->oldTick = tick;
   23940:	6126      	str	r6, [r4, #16]
   23942:	e01e      	b.n	23982 <tmc5062_periodicJob+0xfa>
	if(tmc5062->config->state == CONFIG_RESTORE)
   23944:	2902      	cmp	r1, #2
   23946:	d121      	bne.n	2398c <tmc5062_periodicJob+0x104>
		settings = tmc5062->config->shadowRegister;
   23948:	1d29      	adds	r1, r5, #4
		while((*ptr < TMC5062_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc5062->registerAccess[*ptr]))
   2394a:	f995 3001 	ldrsb.w	r3, [r5, #1]
   2394e:	786a      	ldrb	r2, [r5, #1]
   23950:	2b00      	cmp	r3, #0
   23952:	db08      	blt.n	23966 <tmc5062_periodicJob+0xde>
   23954:	18a3      	adds	r3, r4, r2
   23956:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
   2395a:	0798      	lsls	r0, r3, #30
   2395c:	d513      	bpl.n	23986 <tmc5062_periodicJob+0xfe>
   2395e:	f003 0348 	and.w	r3, r3, #72	; 0x48
   23962:	2b40      	cmp	r3, #64	; 0x40
   23964:	d00f      	beq.n	23986 <tmc5062_periodicJob+0xfe>
	if(*ptr < TMC5062_REGISTER_COUNT)
   23966:	f995 3001 	ldrsb.w	r3, [r5, #1]
   2396a:	786a      	ldrb	r2, [r5, #1]
   2396c:	2b00      	cmp	r3, #0
   2396e:	db1e      	blt.n	239ae <tmc5062_periodicJob+0x126>
	if(channel >= TMC5062_MOTORS)
   23970:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   23974:	4620      	mov	r0, r4
   23976:	2100      	movs	r1, #0
   23978:	f7ff fdf8 	bl	2356c <tmc5062_writeInt.part.0>
		(*ptr)++;
   2397c:	786b      	ldrb	r3, [r5, #1]
   2397e:	3301      	adds	r3, #1
   23980:	706b      	strb	r3, [r5, #1]
}
   23982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			(*ptr)++;
   23986:	3201      	adds	r2, #1
   23988:	706a      	strb	r2, [r5, #1]
   2398a:	e7de      	b.n	2394a <tmc5062_periodicJob+0xc2>
		settings = tmc5062->registerResetState;
   2398c:	f100 0124 	add.w	r1, r0, #36	; 0x24
		while((*ptr < TMC5062_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc5062->registerAccess[*ptr]))
   23990:	f995 2001 	ldrsb.w	r2, [r5, #1]
   23994:	786b      	ldrb	r3, [r5, #1]
   23996:	2a00      	cmp	r2, #0
   23998:	dbe5      	blt.n	23966 <tmc5062_periodicJob+0xde>
   2399a:	18e2      	adds	r2, r4, r3
   2399c:	f892 2224 	ldrb.w	r2, [r2, #548]	; 0x224
   239a0:	f002 0242 	and.w	r2, r2, #66	; 0x42
   239a4:	2a02      	cmp	r2, #2
   239a6:	d0de      	beq.n	23966 <tmc5062_periodicJob+0xde>
			(*ptr)++;
   239a8:	3301      	adds	r3, #1
   239aa:	706b      	strb	r3, [r5, #1]
   239ac:	e7f0      	b.n	23990 <tmc5062_periodicJob+0x108>
		if(tmc5062->config->callback)
   239ae:	6822      	ldr	r2, [r4, #0]
   239b0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   239b4:	b113      	cbz	r3, 239bc <tmc5062_periodicJob+0x134>
			((tmc5062_callback)tmc5062->config->callback)(tmc5062, tmc5062->config->state);
   239b6:	7811      	ldrb	r1, [r2, #0]
   239b8:	4620      	mov	r0, r4
   239ba:	4798      	blx	r3
		tmc5062->config->state = CONFIG_READY;
   239bc:	6823      	ldr	r3, [r4, #0]
   239be:	2200      	movs	r2, #0
   239c0:	701a      	strb	r2, [r3, #0]
   239c2:	e7de      	b.n	23982 <tmc5062_periodicJob+0xfa>

000239c4 <setMicroStepTable>:
}

// MSLUT
uint8_t setMicroStepTable(TMC5062TypeDef *tmc5062, uint8_t channel, TMC5062_MicroStepTable *table)
{
	if(channel >= TMC5062_MOTORS || table == 0 || tmc5062 == 0)
   239c4:	2901      	cmp	r1, #1
{
   239c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   239c8:	4604      	mov	r4, r0
   239ca:	460f      	mov	r7, r1
   239cc:	4615      	mov	r5, r2
	if(channel >= TMC5062_MOTORS || table == 0 || tmc5062 == 0)
   239ce:	d87c      	bhi.n	23aca <setMicroStepTable+0x106>
   239d0:	2a00      	cmp	r2, #0
   239d2:	d07a      	beq.n	23aca <setMicroStepTable+0x106>
   239d4:	2800      	cmp	r0, #0
   239d6:	d077      	beq.n	23ac8 <setMicroStepTable+0x104>
		return 0;

	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT0(channel), table->LUT_0);
   239d8:	010e      	lsls	r6, r1, #4
   239da:	b276      	sxtb	r6, r6
   239dc:	f046 0260 	orr.w	r2, r6, #96	; 0x60
   239e0:	682b      	ldr	r3, [r5, #0]
   239e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   239e6:	f7ff fde9 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT1(channel), table->LUT_1);
   239ea:	f046 0261 	orr.w	r2, r6, #97	; 0x61
   239ee:	686b      	ldr	r3, [r5, #4]
   239f0:	f002 02f1 	and.w	r2, r2, #241	; 0xf1
   239f4:	4639      	mov	r1, r7
   239f6:	4620      	mov	r0, r4
   239f8:	f7ff fde0 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT2(channel), table->LUT_2);
   239fc:	f046 0262 	orr.w	r2, r6, #98	; 0x62
   23a00:	68ab      	ldr	r3, [r5, #8]
   23a02:	f002 02f2 	and.w	r2, r2, #242	; 0xf2
   23a06:	4639      	mov	r1, r7
   23a08:	4620      	mov	r0, r4
   23a0a:	f7ff fdd7 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT3(channel), table->LUT_3);
   23a0e:	f046 0263 	orr.w	r2, r6, #99	; 0x63
   23a12:	68eb      	ldr	r3, [r5, #12]
   23a14:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
   23a18:	4639      	mov	r1, r7
   23a1a:	4620      	mov	r0, r4
   23a1c:	f7ff fdce 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT4(channel), table->LUT_4);
   23a20:	f046 0264 	orr.w	r2, r6, #100	; 0x64
   23a24:	692b      	ldr	r3, [r5, #16]
   23a26:	f002 02f4 	and.w	r2, r2, #244	; 0xf4
   23a2a:	4639      	mov	r1, r7
   23a2c:	4620      	mov	r0, r4
   23a2e:	f7ff fdc5 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT5(channel), table->LUT_5);
   23a32:	f046 0265 	orr.w	r2, r6, #101	; 0x65
   23a36:	696b      	ldr	r3, [r5, #20]
   23a38:	f002 02f5 	and.w	r2, r2, #245	; 0xf5
   23a3c:	4639      	mov	r1, r7
   23a3e:	4620      	mov	r0, r4
   23a40:	f7ff fdbc 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT6(channel), table->LUT_6);
   23a44:	f046 0266 	orr.w	r2, r6, #102	; 0x66
   23a48:	69ab      	ldr	r3, [r5, #24]
   23a4a:	f002 02f6 	and.w	r2, r2, #246	; 0xf6
   23a4e:	4639      	mov	r1, r7
   23a50:	4620      	mov	r0, r4
   23a52:	f7ff fdb3 	bl	235bc <tmc5062_writeInt>
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUT7(channel), table->LUT_7);
   23a56:	f046 0267 	orr.w	r2, r6, #103	; 0x67
   23a5a:	69eb      	ldr	r3, [r5, #28]
   23a5c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
   23a60:	4639      	mov	r1, r7
   23a62:	4620      	mov	r0, r4
   23a64:	f7ff fdaa 	bl	235bc <tmc5062_writeInt>

	uint32_t tmp =   (table->X3 << 24) | (table->X2 << 16) | (table->X1 << 8)
   23a68:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   23a6c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   23a70:	0409      	lsls	r1, r1, #16
   23a72:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
			     | (table->W3 <<  6) | (table->W2 <<  4) | (table->W1 << 2) | (table->W0);
   23a76:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   23a7a:	f003 0203 	and.w	r2, r3, #3
   23a7e:	4311      	orrs	r1, r2
	uint32_t tmp =   (table->X3 << 24) | (table->X2 << 16) | (table->X1 << 8)
   23a80:	f895 2020 	ldrb.w	r2, [r5, #32]
			     | (table->W3 <<  6) | (table->W2 <<  4) | (table->W1 << 2) | (table->W0);
   23a84:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
   23a88:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   23a8c:	4311      	orrs	r1, r2
   23a8e:	f003 0230 	and.w	r2, r3, #48	; 0x30
   23a92:	4311      	orrs	r1, r2
   23a94:	f003 030c 	and.w	r3, r3, #12
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUTSEL(channel), tmp);
   23a98:	f046 0268 	orr.w	r2, r6, #104	; 0x68
   23a9c:	430b      	orrs	r3, r1
   23a9e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   23aa2:	4639      	mov	r1, r7
   23aa4:	4620      	mov	r0, r4
   23aa6:	f7ff fd89 	bl	235bc <tmc5062_writeInt>

	tmp = (table->START_SIN90 << 16) | (table->START_SIN);
   23aaa:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
   23aae:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	tmc5062_writeInt(tmc5062, channel, TMC5062_MSLUTSTART(channel), tmp);
   23ab2:	f046 0269 	orr.w	r2, r6, #105	; 0x69
   23ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   23aba:	4620      	mov	r0, r4
   23abc:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
   23ac0:	4639      	mov	r1, r7
   23ac2:	f7ff fd7b 	bl	235bc <tmc5062_writeInt>

	return 1;
   23ac6:	2001      	movs	r0, #1
}
   23ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   23aca:	2000      	movs	r0, #0
   23acc:	e7fc      	b.n	23ac8 <setMicroStepTable+0x104>

00023ace <setEncoderFactor>:
 * Binary:   Error = retVal / (2^16  * encoderResolution)
 * Decimal:  Error = retVal / (10000 * encoderResolution)
 * (Check the enc_sel_decimal bit in the ENCMODE register to find out which mode is used)
 */
uint32_t setEncoderFactor(TMC5062TypeDef *tmc5062, uint8_t channel, uint32_t motorFullSteps, uint32_t microSteps, uint32_t encoderResolution)
{
   23ace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ad2:	4607      	mov	r7, r0
   23ad4:	9808      	ldr	r0, [sp, #32]
   23ad6:	4688      	mov	r8, r1
	int binaryError, decimalError;
	uint8_t useDecimal, binaryRounded = false, decimalRounded = false;

	// Check for divisor 0
	// Return value here is inaccurate, this is just a protection against runtime/usage error.
	if(encoderResolution == 0)
   23ad8:	b368      	cbz	r0, 23b36 <setEncoderFactor+0x68>
		return 0;

	numerator = (motorFullSteps * microSteps) / encoderResolution;
   23ada:	435a      	muls	r2, r3
   23adc:	fbb2 fcf0 	udiv	ip, r2, r0
	remainder = (motorFullSteps * microSteps) % encoderResolution;
   23ae0:	fb00 211c 	mls	r1, r0, ip, r2

	if((binaryError = (remainder << 16) % encoderResolution) == 0)
   23ae4:	040c      	lsls	r4, r1, #16
   23ae6:	fbb4 f3f0 	udiv	r3, r4, r0
   23aea:	fb00 4413 	mls	r4, r0, r3, r4
   23aee:	bb24      	cbnz	r4, 23b3a <setEncoderFactor+0x6c>
	{
		useDecimal = 0;
		denominator = (remainder << 16) / encoderResolution;
   23af0:	461e      	mov	r6, r3
		}

		if((abs(binaryError) * 10000) <= (abs(decimalError) << 16))
		{
			// Binary error smaller -> use binary
			useDecimal = 0;
   23af2:	f04f 0900 	mov.w	r9, #0
			remainder = decimalRounded;
		}
	}

	uint32_t tmp = (numerator << 16) | (denominator & 0xFFFF);
	tmc5062_writeInt(tmc5062, channel, TMC5062_ENC_CONST(channel), tmp);
   23af6:	2520      	movs	r5, #32
   23af8:	fa05 f508 	lsl.w	r5, r5, r8
   23afc:	b26d      	sxtb	r5, r5
   23afe:	f045 021a 	orr.w	r2, r5, #26
	uint32_t tmp = (numerator << 16) | (denominator & 0xFFFF);
   23b02:	b2b6      	uxth	r6, r6
	TMC5062_FIELD_WRITE(tmc5062, channel, TMC5062_ENCMODE(channel), TMC5062_ENC_SEL_DECIMAL_MASK, TMC5062_ENC_SEL_DECIMAL_SHIFT, useDecimal);
   23b04:	f045 0518 	orr.w	r5, r5, #24
	tmc5062_writeInt(tmc5062, channel, TMC5062_ENC_CONST(channel), tmp);
   23b08:	ea46 430c 	orr.w	r3, r6, ip, lsl #16
   23b0c:	b2d2      	uxtb	r2, r2
   23b0e:	4641      	mov	r1, r8
   23b10:	4638      	mov	r0, r7
	TMC5062_FIELD_WRITE(tmc5062, channel, TMC5062_ENCMODE(channel), TMC5062_ENC_SEL_DECIMAL_MASK, TMC5062_ENC_SEL_DECIMAL_SHIFT, useDecimal);
   23b12:	b2ed      	uxtb	r5, r5
	tmc5062_writeInt(tmc5062, channel, TMC5062_ENC_CONST(channel), tmp);
   23b14:	f7ff fd52 	bl	235bc <tmc5062_writeInt>
	TMC5062_FIELD_WRITE(tmc5062, channel, TMC5062_ENCMODE(channel), TMC5062_ENC_SEL_DECIMAL_MASK, TMC5062_ENC_SEL_DECIMAL_SHIFT, useDecimal);
   23b18:	462a      	mov	r2, r5
   23b1a:	4641      	mov	r1, r8
   23b1c:	4638      	mov	r0, r7
   23b1e:	f7ff fd51 	bl	235c4 <tmc5062_readInt>
   23b22:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
   23b26:	ea43 2389 	orr.w	r3, r3, r9, lsl #10
   23b2a:	4638      	mov	r0, r7
   23b2c:	462a      	mov	r2, r5
   23b2e:	4641      	mov	r1, r8
   23b30:	f7ff fd44 	bl	235bc <tmc5062_writeInt>

	return remainder;
   23b34:	4620      	mov	r0, r4
}
   23b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if((decimalError = (remainder * 10000) % encoderResolution) == 0)
   23b3a:	f242 7210 	movw	r2, #10000	; 0x2710
   23b3e:	434a      	muls	r2, r1
   23b40:	fbb2 f6f0 	udiv	r6, r2, r0
   23b44:	fb00 2216 	mls	r2, r0, r6, r2
   23b48:	4611      	mov	r1, r2
   23b4a:	b91a      	cbnz	r2, 23b54 <setEncoderFactor+0x86>
			remainder = decimalRounded;
   23b4c:	4614      	mov	r4, r2
			useDecimal = 1;
   23b4e:	f04f 0901 	mov.w	r9, #1
   23b52:	e7d0      	b.n	23af6 <setEncoderFactor+0x28>
		if((uint32_t) binaryError > (encoderResolution/2))
   23b54:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
   23b58:	ea4f 0e50 	mov.w	lr, r0, lsr #1
			binaryError -= encoderResolution;
   23b5c:	bf86      	itte	hi
   23b5e:	1a24      	subhi	r4, r4, r0
			binaryRounded = true;
   23b60:	2501      	movhi	r5, #1
	uint8_t useDecimal, binaryRounded = false, decimalRounded = false;
   23b62:	2500      	movls	r5, #0
		if((uint32_t) decimalError > (encoderResolution/2))
   23b64:	4572      	cmp	r2, lr
			decimalError -= encoderResolution;
   23b66:	bf8a      	itet	hi
   23b68:	1a11      	subhi	r1, r2, r0
	uint8_t useDecimal, binaryRounded = false, decimalRounded = false;
   23b6a:	2200      	movls	r2, #0
			decimalRounded = true;
   23b6c:	2201      	movhi	r2, #1
		if((abs(binaryError) * 10000) <= (abs(decimalError) << 16))
   23b6e:	2c00      	cmp	r4, #0
   23b70:	bfb8      	it	lt
   23b72:	4264      	neglt	r4, r4
   23b74:	f242 7010 	movw	r0, #10000	; 0x2710
   23b78:	2900      	cmp	r1, #0
   23b7a:	fb00 f404 	mul.w	r4, r0, r4
   23b7e:	bfb8      	it	lt
   23b80:	4249      	neglt	r1, r1
   23b82:	ebb4 4f01 	cmp.w	r4, r1, lsl #16
   23b86:	dc02      	bgt.n	23b8e <setEncoderFactor+0xc0>
			denominator = (remainder << 16) / encoderResolution + ((binaryRounded)? 1:0);
   23b88:	195e      	adds	r6, r3, r5
			remainder = binaryRounded;
   23b8a:	462c      	mov	r4, r5
   23b8c:	e7b1      	b.n	23af2 <setEncoderFactor+0x24>
			denominator = (remainder * 10000) / encoderResolution + ((decimalRounded)? 1:0);
   23b8e:	4416      	add	r6, r2
   23b90:	e7dc      	b.n	23b4c <setEncoderFactor+0x7e>
   23b92:	bf00      	nop

00023b94 <tmc5072_writeDatagram>:
// => SPI wrapper
extern void tmc5072_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

void tmc5072_writeDatagram(TMC5072TypeDef *tmc5072, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   23b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23b98:	4698      	mov	r8, r3
	uint8_t data[5] = { address | TMC5072_WRITE_BIT, x1, x2, x3, x4 };
   23b9a:	f061 037f 	orn	r3, r1, #127	; 0x7f
   23b9e:	f88d 3000 	strb.w	r3, [sp]
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23ba2:	6803      	ldr	r3, [r0, #0]
{
   23ba4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   23ba8:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC5072_WRITE_BIT, x1, x2, x3, x4 };
   23bac:	f88d 2001 	strb.w	r2, [sp, #1]
{
   23bb0:	4604      	mov	r4, r0
   23bb2:	4617      	mov	r7, r2
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23bb4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC5072_WRITE_BIT, x1, x2, x3, x4 };
   23bb8:	f88d 5004 	strb.w	r5, [sp, #4]
{
   23bbc:	460e      	mov	r6, r1
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23bbe:	2205      	movs	r2, #5
   23bc0:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC5072_WRITE_BIT, x1, x2, x3, x4 };
   23bc2:	f88d 8002 	strb.w	r8, [sp, #2]
   23bc6:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23bca:	f7f3 ff63 	bl	17a94 <tmc5072_readWriteArray>

	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc5072->config->shadowRegister[address] = value;
   23bce:	6822      	ldr	r2, [r4, #0]
   23bd0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   23bd4:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc5072->config->shadowRegister[address] = value;
   23bd8:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   23bdc:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   23be0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc5072->registerAccess[address] |= TMC_ACCESS_DIRTY;
   23be4:	4434      	add	r4, r6
	tmc5072->config->shadowRegister[address] = value;
   23be6:	604b      	str	r3, [r1, #4]
	tmc5072->registerAccess[address] |= TMC_ACCESS_DIRTY;
   23be8:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
   23bec:	f043 0308 	orr.w	r3, r3, #8
   23bf0:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
}
   23bf4:	b003      	add	sp, #12
   23bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00023bfa <tmc5072_writeInt>:

void tmc5072_writeInt(TMC5072TypeDef *tmc5072, uint8_t address, int32_t value)
{
   23bfa:	b507      	push	{r0, r1, r2, lr}
	tmc5072_writeDatagram(tmc5072, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   23bfc:	b2d3      	uxtb	r3, r2
   23bfe:	9301      	str	r3, [sp, #4]
   23c00:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23c04:	9300      	str	r3, [sp, #0]
   23c06:	f3c2 4307 	ubfx	r3, r2, #16, #8
   23c0a:	0e12      	lsrs	r2, r2, #24
   23c0c:	f7ff ffc2 	bl	23b94 <tmc5072_writeDatagram>
}
   23c10:	b003      	add	sp, #12
   23c12:	f85d fb04 	ldr.w	pc, [sp], #4

00023c16 <tmc5072_readInt>:

int32_t tmc5072_readInt(TMC5072TypeDef *tmc5072, uint8_t address)
{
   23c16:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   23c18:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc5072->registerAccess[address]))
   23c1c:	1902      	adds	r2, r0, r4
   23c1e:	6803      	ldr	r3, [r0, #0]
   23c20:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
   23c24:	07d2      	lsls	r2, r2, #31
{
   23c26:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc5072->registerAccess[address]))
   23c28:	d404      	bmi.n	23c34 <tmc5072_readInt+0x1e>
		return tmc5072->config->shadowRegister[address];
   23c2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   23c2e:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   23c30:	b003      	add	sp, #12
   23c32:	bd30      	pop	{r4, r5, pc}
	uint8_t data[5] = { 0, 0, 0, 0, 0 };
   23c34:	4a0d      	ldr	r2, [pc, #52]	; (23c6c <tmc5072_readInt+0x56>)
   23c36:	6810      	ldr	r0, [r2, #0]
   23c38:	7912      	ldrb	r2, [r2, #4]
   23c3a:	9000      	str	r0, [sp, #0]
   23c3c:	f88d 2004 	strb.w	r2, [sp, #4]
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23c40:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   23c44:	f88d 4000 	strb.w	r4, [sp]
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23c48:	2205      	movs	r2, #5
   23c4a:	4669      	mov	r1, sp
   23c4c:	f7f3 ff22 	bl	17a94 <tmc5072_readWriteArray>
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23c50:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   23c52:	f88d 4000 	strb.w	r4, [sp]
	tmc5072_readWriteArray(tmc5072->config->channel, &data[0], 5);
   23c56:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   23c5a:	2205      	movs	r2, #5
   23c5c:	4669      	mov	r1, sp
   23c5e:	f7f3 ff19 	bl	17a94 <tmc5072_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   23c62:	f8dd 0001 	ldr.w	r0, [sp, #1]
   23c66:	ba00      	rev	r0, r0
   23c68:	e7e2      	b.n	23c30 <tmc5072_readInt+0x1a>
   23c6a:	bf00      	nop
   23c6c:	0002ac54 	.word	0x0002ac54

00023c70 <tmc5072_init>:
//}

// Provide the init function with a channel index (sent back in the SPI callback), a pointer to a ConfigurationTypeDef struct
// and a pointer to a int32_t array (size 128) holding the reset values that shall be used.
void tmc5072_init(TMC5072TypeDef *tmc5072, uint8_t channel, ConfigurationTypeDef *tmc5072_config, const int32_t *registerResetState)
{
   23c70:	b530      	push	{r4, r5, lr}
	for(uint8_t motor = 0; motor < TMC5072_MOTORS; motor++)
	{
		tmc5072->velocity[motor] = 0;
   23c72:	2400      	movs	r4, #0
   23c74:	60c4      	str	r4, [r0, #12]
		tmc5072->oldX[motor] = 0;
   23c76:	6044      	str	r4, [r0, #4]
		tmc5072->velocity[motor] = 0;
   23c78:	6104      	str	r4, [r0, #16]
		tmc5072->oldX[motor] = 0;
   23c7a:	6084      	str	r4, [r0, #8]
	}

	tmc5072->oldTick     = 0;
   23c7c:	6144      	str	r4, [r0, #20]
	tmc5072->config   = tmc5072_config;
   23c7e:	6002      	str	r2, [r0, #0]
	/*
	 * TODO: Config initialization
	 * We can either explicitly initialize in each IC's init respectively,
	 * or do that with a seperate function config_init where also the channel is set.
	 */
	tmc5072->config->callback     = NULL;
   23c80:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc5072->config->channel      = channel;
	tmc5072->config->configIndex  = 0;
	tmc5072->config->state        = CONFIG_READY;
   23c84:	8014      	strh	r4, [r2, #0]
   23c86:	4c0a      	ldr	r4, [pc, #40]	; (23cb0 <tmc5072_init+0x40>)
	tmc5072->config->channel      = channel;
   23c88:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	uint32_t i;
	for(i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23c8c:	3b04      	subs	r3, #4
   23c8e:	f500 7206 	add.w	r2, r0, #536	; 0x218
   23c92:	f100 0118 	add.w	r1, r0, #24
   23c96:	f500 7026 	add.w	r0, r0, #664	; 0x298
	{
		tmc5072->registerAccess[i]      = tmc5072_defaultRegisterAccess[i];
   23c9a:	f814 5b01 	ldrb.w	r5, [r4], #1
   23c9e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc5072->registerResetState[i]  = registerResetState[i];
   23ca2:	f853 5f04 	ldr.w	r5, [r3, #4]!
   23ca6:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23caa:	4282      	cmp	r2, r0
   23cac:	d1f5      	bne.n	23c9a <tmc5072_init+0x2a>
	}
}
   23cae:	bd30      	pop	{r4, r5, pc}
   23cb0:	0002ac59 	.word	0x0002ac59

00023cb4 <tmc5072_fillShadowRegisters>:
//		tmc5072->registerResetState[i]  = tmc5072_defaultRegisterResetState[i];
//	}
//}

void tmc5072_fillShadowRegisters(TMC5072TypeDef *tmc5072)
{
   23cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23cb6:	4d10      	ldr	r5, [pc, #64]	; (23cf8 <tmc5072_fillShadowRegisters+0x44>)
	// Check if we have constants defined
	if(ARRAY_SIZE(tmc5072_RegisterConstants) == 0)
		return;

	for(size_t i = 0, j = 0; i < TMC5072_REGISTER_COUNT; i++)
   23cb8:	2200      	movs	r2, #0
   23cba:	f500 7406 	add.w	r4, r0, #536	; 0x218
   23cbe:	4613      	mov	r3, r2
		while(j < ARRAY_SIZE(tmc5072_RegisterConstants) && (tmc5072_RegisterConstants[j].address < i))
			j++;

		// If we have an entry for our current address, write the constant
		if(tmc5072_RegisterConstants[j].address == i)
			tmc5072->config->shadowRegister[i] = tmc5072_RegisterConstants[j].value;
   23cc0:	f1a5 0688 	sub.w	r6, r5, #136	; 0x88
		if(tmc5072->registerAccess[i] != TMC_ACCESS_W_PRESET)
   23cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
   23cc8:	2942      	cmp	r1, #66	; 0x42
   23cca:	d10f      	bne.n	23cec <tmc5072_fillShadowRegisters+0x38>
		while(j < ARRAY_SIZE(tmc5072_RegisterConstants) && (tmc5072_RegisterConstants[j].address < i))
   23ccc:	2a09      	cmp	r2, #9
   23cce:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   23cd2:	d801      	bhi.n	23cd8 <tmc5072_fillShadowRegisters+0x24>
   23cd4:	4299      	cmp	r1, r3
   23cd6:	d30d      	bcc.n	23cf4 <tmc5072_fillShadowRegisters+0x40>
		if(tmc5072_RegisterConstants[j].address == i)
   23cd8:	4299      	cmp	r1, r3
   23cda:	d107      	bne.n	23cec <tmc5072_fillShadowRegisters+0x38>
			tmc5072->config->shadowRegister[i] = tmc5072_RegisterConstants[j].value;
   23cdc:	6801      	ldr	r1, [r0, #0]
   23cde:	eb06 07c2 	add.w	r7, r6, r2, lsl #3
   23ce2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   23ce6:	f8d7 708c 	ldr.w	r7, [r7, #140]	; 0x8c
   23cea:	604f      	str	r7, [r1, #4]
	for(size_t i = 0, j = 0; i < TMC5072_REGISTER_COUNT; i++)
   23cec:	3301      	adds	r3, #1
   23cee:	2b80      	cmp	r3, #128	; 0x80
   23cf0:	d1e8      	bne.n	23cc4 <tmc5072_fillShadowRegisters+0x10>
	}
}
   23cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			j++;
   23cf4:	3201      	adds	r2, #1
   23cf6:	e7e9      	b.n	23ccc <tmc5072_fillShadowRegisters+0x18>
   23cf8:	0002acdc 	.word	0x0002acdc

00023cfc <tmc5072_periodicJob>:
//		TMC5072_config->state = CONFIG_READY;
//	}
//}

void tmc5072_periodicJob(TMC5072TypeDef *tmc5072, uint32_t tick)
{
   23cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tickDiff;

	if(tmc5072->config->state != CONFIG_READY)
   23cfe:	6805      	ldr	r5, [r0, #0]
   23d00:	782b      	ldrb	r3, [r5, #0]
{
   23d02:	4604      	mov	r4, r0
   23d04:	460e      	mov	r6, r1
	if(tmc5072->config->state != CONFIG_READY)
   23d06:	2b00      	cmp	r3, #0
   23d08:	d03c      	beq.n	23d84 <tmc5072_periodicJob+0x88>
	if(tmc5072->config->state == CONFIG_RESTORE)
   23d0a:	2b02      	cmp	r3, #2
   23d0c:	d11f      	bne.n	23d4e <tmc5072_periodicJob+0x52>
		settings = tmc5072->config->shadowRegister;
   23d0e:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC5072_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc5072->registerAccess[*ptr]))
   23d10:	f995 3001 	ldrsb.w	r3, [r5, #1]
   23d14:	786a      	ldrb	r2, [r5, #1]
   23d16:	2b00      	cmp	r3, #0
   23d18:	db08      	blt.n	23d2c <tmc5072_periodicJob+0x30>
   23d1a:	18a3      	adds	r3, r4, r2
   23d1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
   23d20:	0799      	lsls	r1, r3, #30
   23d22:	d511      	bpl.n	23d48 <tmc5072_periodicJob+0x4c>
   23d24:	f003 0348 	and.w	r3, r3, #72	; 0x48
   23d28:	2b40      	cmp	r3, #64	; 0x40
   23d2a:	d00d      	beq.n	23d48 <tmc5072_periodicJob+0x4c>
	if(*ptr < TMC5072_REGISTER_COUNT)
   23d2c:	f995 3001 	ldrsb.w	r3, [r5, #1]
   23d30:	7869      	ldrb	r1, [r5, #1]
   23d32:	2b00      	cmp	r3, #0
   23d34:	db1b      	blt.n	23d6e <tmc5072_periodicJob+0x72>
		tmc5072_writeInt(tmc5072, *ptr, settings[*ptr]);
   23d36:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   23d3a:	4620      	mov	r0, r4
   23d3c:	f7ff ff5d 	bl	23bfa <tmc5072_writeInt>
		(*ptr)++;
   23d40:	786b      	ldrb	r3, [r5, #1]
   23d42:	3301      	adds	r3, #1
   23d44:	706b      	strb	r3, [r5, #1]
			tmc5072->velocity[motor] = (uint32_t) ((float32_t) (abs(x - tmc5072->oldX[motor]) / (float32_t) tickDiff) * (float32_t) 1048.576);
			tmc5072->oldX[motor] = x;
		}
		tmc5072->oldTick  = tick;
	}
}
   23d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*ptr)++;
   23d48:	3201      	adds	r2, #1
   23d4a:	706a      	strb	r2, [r5, #1]
   23d4c:	e7e0      	b.n	23d10 <tmc5072_periodicJob+0x14>
		settings = tmc5072->registerResetState;
   23d4e:	3018      	adds	r0, #24
		while((*ptr < TMC5072_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc5072->registerAccess[*ptr]))
   23d50:	f995 2001 	ldrsb.w	r2, [r5, #1]
   23d54:	786b      	ldrb	r3, [r5, #1]
   23d56:	2a00      	cmp	r2, #0
   23d58:	dbe8      	blt.n	23d2c <tmc5072_periodicJob+0x30>
   23d5a:	18e2      	adds	r2, r4, r3
   23d5c:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
   23d60:	f002 0242 	and.w	r2, r2, #66	; 0x42
   23d64:	2a02      	cmp	r2, #2
   23d66:	d0e1      	beq.n	23d2c <tmc5072_periodicJob+0x30>
			(*ptr)++;
   23d68:	3301      	adds	r3, #1
   23d6a:	706b      	strb	r3, [r5, #1]
   23d6c:	e7f0      	b.n	23d50 <tmc5072_periodicJob+0x54>
		if(tmc5072->config->callback)
   23d6e:	6822      	ldr	r2, [r4, #0]
   23d70:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   23d74:	b113      	cbz	r3, 23d7c <tmc5072_periodicJob+0x80>
			((tmc5072_callback)tmc5072->config->callback)(tmc5072, tmc5072->config->state);
   23d76:	7811      	ldrb	r1, [r2, #0]
   23d78:	4620      	mov	r0, r4
   23d7a:	4798      	blx	r3
		tmc5072->config->state = CONFIG_READY;
   23d7c:	6823      	ldr	r3, [r4, #0]
   23d7e:	2200      	movs	r2, #0
   23d80:	701a      	strb	r2, [r3, #0]
   23d82:	e7e0      	b.n	23d46 <tmc5072_periodicJob+0x4a>
	if((tickDiff = tick - tmc5072->oldTick) >= 5)
   23d84:	6947      	ldr	r7, [r0, #20]
   23d86:	1bcf      	subs	r7, r1, r7
   23d88:	2f04      	cmp	r7, #4
   23d8a:	d9dc      	bls.n	23d46 <tmc5072_periodicJob+0x4a>
			x = tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23d8c:	2121      	movs	r1, #33	; 0x21
   23d8e:	f7ff ff42 	bl	23c16 <tmc5072_readInt>
   23d92:	4605      	mov	r5, r0
			tmc5072->velocity[motor] = (uint32_t) ((float32_t) (abs(x - tmc5072->oldX[motor]) / (float32_t) tickDiff) * (float32_t) 1048.576);
   23d94:	4638      	mov	r0, r7
   23d96:	f003 fbb7 	bl	27508 <__aeabi_ui2f>
   23d9a:	4607      	mov	r7, r0
   23d9c:	6860      	ldr	r0, [r4, #4]
   23d9e:	1a28      	subs	r0, r5, r0
   23da0:	2800      	cmp	r0, #0
   23da2:	bfb8      	it	lt
   23da4:	4240      	neglt	r0, r0
   23da6:	f003 fbb3 	bl	27510 <__aeabi_i2f>
   23daa:	4639      	mov	r1, r7
   23dac:	f003 fcb8 	bl	27720 <__aeabi_fdiv>
   23db0:	490f      	ldr	r1, [pc, #60]	; (23df0 <tmc5072_periodicJob+0xf4>)
   23db2:	f003 fc01 	bl	275b8 <__aeabi_fmul>
   23db6:	f003 fd75 	bl	278a4 <__aeabi_f2uiz>
			x = tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23dba:	2141      	movs	r1, #65	; 0x41
			tmc5072->velocity[motor] = (uint32_t) ((float32_t) (abs(x - tmc5072->oldX[motor]) / (float32_t) tickDiff) * (float32_t) 1048.576);
   23dbc:	60e0      	str	r0, [r4, #12]
			tmc5072->oldX[motor] = x;
   23dbe:	6065      	str	r5, [r4, #4]
			x = tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23dc0:	4620      	mov	r0, r4
   23dc2:	f7ff ff28 	bl	23c16 <tmc5072_readInt>
   23dc6:	4605      	mov	r5, r0
			tmc5072->velocity[motor] = (uint32_t) ((float32_t) (abs(x - tmc5072->oldX[motor]) / (float32_t) tickDiff) * (float32_t) 1048.576);
   23dc8:	68a0      	ldr	r0, [r4, #8]
   23dca:	1a28      	subs	r0, r5, r0
   23dcc:	2800      	cmp	r0, #0
   23dce:	bfb8      	it	lt
   23dd0:	4240      	neglt	r0, r0
   23dd2:	f003 fb9d 	bl	27510 <__aeabi_i2f>
   23dd6:	4639      	mov	r1, r7
   23dd8:	f003 fca2 	bl	27720 <__aeabi_fdiv>
   23ddc:	4904      	ldr	r1, [pc, #16]	; (23df0 <tmc5072_periodicJob+0xf4>)
   23dde:	f003 fbeb 	bl	275b8 <__aeabi_fmul>
   23de2:	f003 fd5f 	bl	278a4 <__aeabi_f2uiz>
			tmc5072->oldX[motor] = x;
   23de6:	60a5      	str	r5, [r4, #8]
			tmc5072->velocity[motor] = (uint32_t) ((float32_t) (abs(x - tmc5072->oldX[motor]) / (float32_t) tickDiff) * (float32_t) 1048.576);
   23de8:	6120      	str	r0, [r4, #16]
		tmc5072->oldTick  = tick;
   23dea:	6166      	str	r6, [r4, #20]
   23dec:	e7ab      	b.n	23d46 <tmc5072_periodicJob+0x4a>
   23dee:	bf00      	nop
   23df0:	4483126f 	.word	0x4483126f

00023df4 <tmc5072_reset>:
//		tmc5072->oldTick = tick;
//	}
//}

uint8_t tmc5072_reset(TMC5072TypeDef *tmc5072)
{
   23df4:	b530      	push	{r4, r5, lr}
	if(tmc5072->config->state != CONFIG_READY)
   23df6:	6801      	ldr	r1, [r0, #0]
   23df8:	780a      	ldrb	r2, [r1, #0]
   23dfa:	b982      	cbnz	r2, 23e1e <tmc5072_reset+0x2a>
   23dfc:	f500 7306 	add.w	r3, r0, #536	; 0x218
   23e00:	1d0d      	adds	r5, r1, #4
   23e02:	f500 7026 	add.w	r0, r0, #664	; 0x298
		return false;

	// Reset the dirty bits and wipe the shadow registers
	for(size_t i = 0; i < TMC5072_REGISTER_COUNT; i++)
	{
		tmc5072->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   23e06:	781c      	ldrb	r4, [r3, #0]
   23e08:	f024 0408 	bic.w	r4, r4, #8
   23e0c:	f803 4b01 	strb.w	r4, [r3], #1
	for(size_t i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23e10:	4283      	cmp	r3, r0
		tmc5072->config->shadowRegister[i] = 0;
   23e12:	f845 2b04 	str.w	r2, [r5], #4
	for(size_t i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23e16:	d1f6      	bne.n	23e06 <tmc5072_reset+0x12>
	}

	tmc5072->config->state        = CONFIG_RESET;
   23e18:	2001      	movs	r0, #1
   23e1a:	8008      	strh	r0, [r1, #0]
	tmc5072->config->configIndex  = 0;

	return true;
}
   23e1c:	bd30      	pop	{r4, r5, pc}
		return false;
   23e1e:	2000      	movs	r0, #0
   23e20:	e7fc      	b.n	23e1c <tmc5072_reset+0x28>

00023e22 <tmc5072_restore>:
//	return 1;
//}

uint8_t tmc5072_restore(TMC5072TypeDef *tmc5072)
{
	if(tmc5072->config->state != CONFIG_READY)
   23e22:	6803      	ldr	r3, [r0, #0]
   23e24:	781a      	ldrb	r2, [r3, #0]
   23e26:	b91a      	cbnz	r2, 23e30 <tmc5072_restore+0xe>
		return 0;

	tmc5072->config->state        = CONFIG_RESTORE;
   23e28:	2202      	movs	r2, #2
   23e2a:	801a      	strh	r2, [r3, #0]
	tmc5072->config->configIndex  = 0;

	return 1;
   23e2c:	2001      	movs	r0, #1
   23e2e:	4770      	bx	lr
		return 0;
   23e30:	2000      	movs	r0, #0
}
   23e32:	4770      	bx	lr

00023e34 <tmc5072_setRegisterResetState>:

void tmc5072_setRegisterResetState(TMC5072TypeDef *tmc5072, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23e34:	1f0b      	subs	r3, r1, #4
   23e36:	3018      	adds	r0, #24
   23e38:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc5072->registerResetState[i] = resetState[i];
   23e3c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23e40:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC5072_REGISTER_COUNT; i++)
   23e44:	428b      	cmp	r3, r1
   23e46:	d1f9      	bne.n	23e3c <tmc5072_setRegisterResetState+0x8>
}
   23e48:	4770      	bx	lr

00023e4a <tmc5072_setCallback>:

void tmc5072_setCallback(TMC5072TypeDef *tmc5072, tmc5072_callback callback)
{
	tmc5072->config->callback = (tmc_callback_config) callback;
   23e4a:	6803      	ldr	r3, [r0, #0]
   23e4c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   23e50:	4770      	bx	lr

00023e52 <tmc5072_rotate>:

void tmc5072_rotate(TMC5072TypeDef *tmc5072, uint8_t motor, int32_t velocity)
{
	if(motor >= TMC5072_MOTORS)
   23e52:	2901      	cmp	r1, #1
{
   23e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23e56:	4606      	mov	r6, r0
   23e58:	4615      	mov	r5, r2
	if(motor >= TMC5072_MOTORS)
   23e5a:	d816      	bhi.n	23e8a <tmc5072_rotate+0x38>
		return;

	tmc5072_writeInt(tmc5072, TMC5072_VMAX(motor), abs(velocity));
   23e5c:	2420      	movs	r4, #32
   23e5e:	408c      	lsls	r4, r1
   23e60:	f044 0107 	orr.w	r1, r4, #7
   23e64:	ea82 72e2 	eor.w	r2, r2, r2, asr #31
   23e68:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
   23e6c:	b2c9      	uxtb	r1, r1
   23e6e:	f7ff fec4 	bl	23bfa <tmc5072_writeInt>
	tmc5072_writeDatagram(tmc5072, TMC5072_RAMPMODE(motor), 0, 0, 0, (velocity >= 0) ? TMC5072_MODE_VELPOS : TMC5072_MODE_VELNEG);
   23e72:	2d00      	cmp	r5, #0
   23e74:	bfac      	ite	ge
   23e76:	2301      	movge	r3, #1
   23e78:	2302      	movlt	r3, #2
   23e7a:	9301      	str	r3, [sp, #4]
   23e7c:	2300      	movs	r3, #0
   23e7e:	9300      	str	r3, [sp, #0]
   23e80:	461a      	mov	r2, r3
   23e82:	b2e1      	uxtb	r1, r4
   23e84:	4630      	mov	r0, r6
   23e86:	f7ff fe85 	bl	23b94 <tmc5072_writeDatagram>
}
   23e8a:	b002      	add	sp, #8
   23e8c:	bd70      	pop	{r4, r5, r6, pc}

00023e8e <tmc5072_right>:

void tmc5072_right(TMC5072TypeDef *tmc5072, uint8_t motor, int32_t velocity)
{
	return tmc5072_rotate(tmc5072, motor, velocity);
   23e8e:	f7ff bfe0 	b.w	23e52 <tmc5072_rotate>

00023e92 <tmc5072_left>:
}

void tmc5072_left(TMC5072TypeDef *tmc5072, uint8_t motor, int32_t velocity)
{
	return tmc5072_rotate(tmc5072, motor, -velocity);
   23e92:	4252      	negs	r2, r2
   23e94:	f7ff bfdd 	b.w	23e52 <tmc5072_rotate>

00023e98 <tmc5072_stop>:
}

void tmc5072_stop(TMC5072TypeDef *tmc5072, uint8_t motor)
{
	return tmc5072_rotate(tmc5072, motor, 0);
   23e98:	2200      	movs	r2, #0
   23e9a:	f7ff bfda 	b.w	23e52 <tmc5072_rotate>

00023e9e <tmc5072_moveTo>:
}

void tmc5072_moveTo(TMC5072TypeDef *tmc5072, uint8_t motor, int32_t position, uint32_t velocityMax)
{
	if(motor >= TMC5072_MOTORS)
   23e9e:	2901      	cmp	r1, #1
{
   23ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ea2:	4605      	mov	r5, r0
   23ea4:	4616      	mov	r6, r2
   23ea6:	461f      	mov	r7, r3
	if(motor >= TMC5072_MOTORS)
   23ea8:	d816      	bhi.n	23ed8 <tmc5072_moveTo+0x3a>
		return;

	tmc5072_writeInt(tmc5072, TMC5072_RAMPMODE(motor), TMC5072_MODE_POSITION);
   23eaa:	2420      	movs	r4, #32
   23eac:	408c      	lsls	r4, r1
   23eae:	b2e1      	uxtb	r1, r4
   23eb0:	2200      	movs	r2, #0
	tmc5072_writeInt(tmc5072, TMC5072_VMAX(motor), velocityMax);
   23eb2:	b264      	sxtb	r4, r4
	tmc5072_writeInt(tmc5072, TMC5072_RAMPMODE(motor), TMC5072_MODE_POSITION);
   23eb4:	f7ff fea1 	bl	23bfa <tmc5072_writeInt>
	tmc5072_writeInt(tmc5072, TMC5072_VMAX(motor), velocityMax);
   23eb8:	f044 0107 	orr.w	r1, r4, #7
   23ebc:	463a      	mov	r2, r7
   23ebe:	4628      	mov	r0, r5
   23ec0:	b2c9      	uxtb	r1, r1
   23ec2:	f7ff fe9a 	bl	23bfa <tmc5072_writeInt>
	tmc5072_writeInt(tmc5072, TMC5072_XTARGET(motor), position);
   23ec6:	f044 010d 	orr.w	r1, r4, #13
   23eca:	4632      	mov	r2, r6
   23ecc:	4628      	mov	r0, r5
   23ece:	b2c9      	uxtb	r1, r1
}
   23ed0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	tmc5072_writeInt(tmc5072, TMC5072_XTARGET(motor), position);
   23ed4:	f7ff be91 	b.w	23bfa <tmc5072_writeInt>
}
   23ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023eda <tmc5072_moveBy>:

void tmc5072_moveBy(TMC5072TypeDef *tmc5072, uint8_t motor, uint32_t velocityMax, int32_t *ticks)
{
   23eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// determine actual position and add numbers of ticks to move
	*ticks += tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23ede:	2420      	movs	r4, #32
   23ee0:	408c      	lsls	r4, r1
   23ee2:	f044 0401 	orr.w	r4, r4, #1
{
   23ee6:	461e      	mov	r6, r3
   23ee8:	460d      	mov	r5, r1
	*ticks += tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23eea:	b2e1      	uxtb	r1, r4
{
   23eec:	4690      	mov	r8, r2
   23eee:	4607      	mov	r7, r0
	*ticks += tmc5072_readInt(tmc5072, TMC5072_XACTUAL(motor));
   23ef0:	f7ff fe91 	bl	23c16 <tmc5072_readInt>
   23ef4:	6832      	ldr	r2, [r6, #0]
   23ef6:	4402      	add	r2, r0
   23ef8:	6032      	str	r2, [r6, #0]

	return tmc5072_moveTo(tmc5072, motor, *ticks, velocityMax);
   23efa:	4643      	mov	r3, r8
   23efc:	4629      	mov	r1, r5
   23efe:	4638      	mov	r0, r7
}
   23f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return tmc5072_moveTo(tmc5072, motor, *ticks, velocityMax);
   23f04:	f7ff bfcb 	b.w	23e9e <tmc5072_moveTo>

00023f08 <tmc5130_writeDatagram>:
extern void tmc5130_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

// Writes (x1 << 24) | (x2 << 16) | (x3 << 8) | x4 to the given address
void tmc5130_writeDatagram(TMC5130TypeDef *tmc5130, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   23f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23f0c:	4698      	mov	r8, r3
	uint8_t data[5] = { address | TMC5130_WRITE_BIT, x1, x2, x3, x4 };
   23f0e:	f061 037f 	orn	r3, r1, #127	; 0x7f
   23f12:	f88d 3000 	strb.w	r3, [sp]
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23f16:	6803      	ldr	r3, [r0, #0]
{
   23f18:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   23f1c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC5130_WRITE_BIT, x1, x2, x3, x4 };
   23f20:	f88d 2001 	strb.w	r2, [sp, #1]
{
   23f24:	4604      	mov	r4, r0
   23f26:	4617      	mov	r7, r2
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23f28:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC5130_WRITE_BIT, x1, x2, x3, x4 };
   23f2c:	f88d 5004 	strb.w	r5, [sp, #4]
{
   23f30:	460e      	mov	r6, r1
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23f32:	2205      	movs	r2, #5
   23f34:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC5130_WRITE_BIT, x1, x2, x3, x4 };
   23f36:	f88d 8002 	strb.w	r8, [sp, #2]
   23f3a:	f88d 9003 	strb.w	r9, [sp, #3]
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23f3e:	f7f4 febd 	bl	18cbc <tmc5130_readWriteArray>

	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc5130->config->shadowRegister[address] = value;
   23f42:	6822      	ldr	r2, [r4, #0]
   23f44:	f006 067f 	and.w	r6, r6, #127	; 0x7f
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   23f48:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
	tmc5130->config->shadowRegister[address] = value;
   23f4c:	eb02 0186 	add.w	r1, r2, r6, lsl #2
	int32_t value = (x1 << 24) | (x2 << 16) | (x3 << 8) | x4;
   23f50:	ea45 4308 	orr.w	r3, r5, r8, lsl #16
   23f54:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
	tmc5130->registerAccess[address] |= TMC_ACCESS_DIRTY;
   23f58:	4434      	add	r4, r6
	tmc5130->config->shadowRegister[address] = value;
   23f5a:	604b      	str	r3, [r1, #4]
	tmc5130->registerAccess[address] |= TMC_ACCESS_DIRTY;
   23f5c:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   23f60:	f043 0308 	orr.w	r3, r3, #8
   23f64:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   23f68:	b003      	add	sp, #12
   23f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00023f6e <tmc5130_writeInt>:

// Write an integer to the given address
void tmc5130_writeInt(TMC5130TypeDef *tmc5130, uint8_t address, int32_t value)
{
   23f6e:	b507      	push	{r0, r1, r2, lr}
	tmc5130_writeDatagram(tmc5130, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   23f70:	b2d3      	uxtb	r3, r2
   23f72:	9301      	str	r3, [sp, #4]
   23f74:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23f78:	9300      	str	r3, [sp, #0]
   23f7a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   23f7e:	0e12      	lsrs	r2, r2, #24
   23f80:	f7ff ffc2 	bl	23f08 <tmc5130_writeDatagram>
}
   23f84:	b003      	add	sp, #12
   23f86:	f85d fb04 	ldr.w	pc, [sp], #4

00023f8a <tmc5130_readInt>:

// Read an integer from the given address
int32_t tmc5130_readInt(TMC5130TypeDef *tmc5130, uint8_t address)
{
   23f8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   23f8c:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc5130->registerAccess[address]))
   23f90:	1902      	adds	r2, r0, r4
   23f92:	6803      	ldr	r3, [r0, #0]
   23f94:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   23f98:	07d2      	lsls	r2, r2, #31
{
   23f9a:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc5130->registerAccess[address]))
   23f9c:	d404      	bmi.n	23fa8 <tmc5130_readInt+0x1e>
		return tmc5130->config->shadowRegister[address];
   23f9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   23fa2:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);

	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
}
   23fa4:	b003      	add	sp, #12
   23fa6:	bd30      	pop	{r4, r5, pc}
	uint8_t data[5] = { 0, 0, 0, 0, 0 };
   23fa8:	4a0d      	ldr	r2, [pc, #52]	; (23fe0 <tmc5130_readInt+0x56>)
   23faa:	6810      	ldr	r0, [r2, #0]
   23fac:	7912      	ldrb	r2, [r2, #4]
   23fae:	9000      	str	r0, [sp, #0]
   23fb0:	f88d 2004 	strb.w	r2, [sp, #4]
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23fb4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   23fb8:	f88d 4000 	strb.w	r4, [sp]
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23fbc:	2205      	movs	r2, #5
   23fbe:	4669      	mov	r1, sp
   23fc0:	f7f4 fe7c 	bl	18cbc <tmc5130_readWriteArray>
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23fc4:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   23fc6:	f88d 4000 	strb.w	r4, [sp]
	tmc5130_readWriteArray(tmc5130->config->channel, &data[0], 5);
   23fca:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   23fce:	2205      	movs	r2, #5
   23fd0:	4669      	mov	r1, sp
   23fd2:	f7f4 fe73 	bl	18cbc <tmc5130_readWriteArray>
	return (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
   23fd6:	f8dd 0001 	ldr.w	r0, [sp, #1]
   23fda:	ba00      	rev	r0, r0
   23fdc:	e7e2      	b.n	23fa4 <tmc5130_readInt+0x1a>
   23fde:	bf00      	nop
   23fe0:	0002ad2c 	.word	0x0002ad2c

00023fe4 <tmc5130_init>:
//     - tmc5130: The pointer to a TMC5130TypeDef struct, which represents one IC
//     - channel: The channel index, which will be sent back in the SPI callback
//     - config: A ConfigurationTypeDef struct, which will be used by the IC
//     - registerResetState: An int32_t array with 128 elements. This holds the values to be used for a reset.
void tmc5130_init(TMC5130TypeDef *tmc5130, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   23fe4:	b530      	push	{r4, r5, lr}
	tmc5130->velocity  = 0;
   23fe6:	2400      	movs	r4, #0
	tmc5130->oldTick   = 0;
	tmc5130->oldX      = 0;
   23fe8:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc5130->velocity  = 0;
   23fec:	6044      	str	r4, [r0, #4]

	tmc5130->config               = config;
   23fee:	6002      	str	r2, [r0, #0]
	tmc5130->config->callback     = NULL;
   23ff0:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc5130->config->channel      = channel;
	tmc5130->config->configIndex  = 0;
	tmc5130->config->state        = CONFIG_READY;
   23ff4:	8014      	strh	r4, [r2, #0]
   23ff6:	4c0a      	ldr	r4, [pc, #40]	; (24020 <tmc5130_init+0x3c>)
	tmc5130->config->channel      = channel;
   23ff8:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	size_t i;
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   23ffc:	3b04      	subs	r3, #4
   23ffe:	f500 7204 	add.w	r2, r0, #528	; 0x210
   24002:	f100 0110 	add.w	r1, r0, #16
   24006:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc5130->registerAccess[i]      = tmc5130_defaultRegisterAccess[i];
   2400a:	f814 5b01 	ldrb.w	r5, [r4], #1
   2400e:	f802 5b01 	strb.w	r5, [r2], #1
		tmc5130->registerResetState[i]  = registerResetState[i];
   24012:	f853 5f04 	ldr.w	r5, [r3, #4]!
   24016:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   2401a:	4282      	cmp	r2, r0
   2401c:	d1f5      	bne.n	2400a <tmc5130_init+0x26>
	}
}
   2401e:	bd30      	pop	{r4, r5, pc}
   24020:	0002ad31 	.word	0x0002ad31

00024024 <tmc5130_fillShadowRegisters>:

// Fill the shadow registers of hardware preset non-readable registers
// Only needed if you want to 'read' those registers e.g to display the value
// in the TMCL IDE register browser
void tmc5130_fillShadowRegisters(TMC5130TypeDef *tmc5130)
{
   24024:	b5f0      	push	{r4, r5, r6, r7, lr}
			continue;

		// Search the constant list for the current address. With the constant
		// list being sorted in ascended order, we can walk through the list
		// until the entry with an address equal or greater than i
		while(j < ARRAY_SIZE(tmc5130_RegisterConstants) && (tmc5130_RegisterConstants[j].address < i))
   24026:	4d13      	ldr	r5, [pc, #76]	; (24074 <tmc5130_fillShadowRegisters+0x50>)
	for(i = 0, j = 0; i < TMC5130_REGISTER_COUNT; i++)
   24028:	2300      	movs	r3, #0
   2402a:	f500 7404 	add.w	r4, r0, #528	; 0x210
   2402e:	461a      	mov	r2, r3
		// Abort when we reach the end of the constant list
		if (j == ARRAY_SIZE(tmc5130_RegisterConstants))
			break;

		// If we have an entry for our current address, write the constant
		if(tmc5130_RegisterConstants[j].address == i)
   24030:	f1a5 0788 	sub.w	r7, r5, #136	; 0x88
		if(tmc5130->registerAccess[i] != TMC_ACCESS_W_PRESET)
   24034:	f814 1b01 	ldrb.w	r1, [r4], #1
   24038:	2942      	cmp	r1, #66	; 0x42
   2403a:	d111      	bne.n	24060 <tmc5130_fillShadowRegisters+0x3c>
		while(j < ARRAY_SIZE(tmc5130_RegisterConstants) && (tmc5130_RegisterConstants[j].address < i))
   2403c:	2b0a      	cmp	r3, #10
   2403e:	d815      	bhi.n	2406c <tmc5130_fillShadowRegisters+0x48>
   24040:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
   24044:	4291      	cmp	r1, r2
   24046:	d30f      	bcc.n	24068 <tmc5130_fillShadowRegisters+0x44>
		if(tmc5130_RegisterConstants[j].address == i)
   24048:	eb07 06c3 	add.w	r6, r7, r3, lsl #3
   2404c:	f896 1088 	ldrb.w	r1, [r6, #136]	; 0x88
   24050:	4291      	cmp	r1, r2
		{
			tmc5130->config->shadowRegister[i] = tmc5130_RegisterConstants[j].value;
   24052:	bf01      	itttt	eq
   24054:	6801      	ldreq	r1, [r0, #0]
   24056:	f8d6 608c 	ldreq.w	r6, [r6, #140]	; 0x8c
   2405a:	eb01 0182 	addeq.w	r1, r1, r2, lsl #2
   2405e:	604e      	streq	r6, [r1, #4]
	for(i = 0, j = 0; i < TMC5130_REGISTER_COUNT; i++)
   24060:	3201      	adds	r2, #1
   24062:	2a80      	cmp	r2, #128	; 0x80
   24064:	d1e6      	bne.n	24034 <tmc5130_fillShadowRegisters+0x10>
   24066:	e003      	b.n	24070 <tmc5130_fillShadowRegisters+0x4c>
			j++;
   24068:	3301      	adds	r3, #1
   2406a:	e7e7      	b.n	2403c <tmc5130_fillShadowRegisters+0x18>
		if (j == ARRAY_SIZE(tmc5130_RegisterConstants))
   2406c:	2b0b      	cmp	r3, #11
   2406e:	d1eb      	bne.n	24048 <tmc5130_fillShadowRegisters+0x24>
		}
	}
}
   24070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24072:	bf00      	nop
   24074:	0002adb4 	.word	0x0002adb4

00024078 <tmc5130_reset>:

// Reset the TMC5130.
uint8_t tmc5130_reset(TMC5130TypeDef *tmc5130)
{
   24078:	b530      	push	{r4, r5, lr}
	if(tmc5130->config->state != CONFIG_READY)
   2407a:	6801      	ldr	r1, [r0, #0]
   2407c:	780a      	ldrb	r2, [r1, #0]
   2407e:	b982      	cbnz	r2, 240a2 <tmc5130_reset+0x2a>
   24080:	f500 7304 	add.w	r3, r0, #528	; 0x210
   24084:	1d0d      	adds	r5, r1, #4
   24086:	f500 7024 	add.w	r0, r0, #656	; 0x290

	// Reset the dirty bits and wipe the shadow registers
	size_t i;
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
	{
		tmc5130->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   2408a:	781c      	ldrb	r4, [r3, #0]
   2408c:	f024 0408 	bic.w	r4, r4, #8
   24090:	f803 4b01 	strb.w	r4, [r3], #1
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   24094:	4283      	cmp	r3, r0
		tmc5130->config->shadowRegister[i] = 0;
   24096:	f845 2b04 	str.w	r2, [r5], #4
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   2409a:	d1f6      	bne.n	2408a <tmc5130_reset+0x12>
	}

	tmc5130->config->state        = CONFIG_RESET;
   2409c:	2001      	movs	r0, #1
   2409e:	8008      	strh	r0, [r1, #0]
	tmc5130->config->configIndex  = 0;

	return true;
}
   240a0:	bd30      	pop	{r4, r5, pc}
		return false;
   240a2:	2000      	movs	r0, #0
   240a4:	e7fc      	b.n	240a0 <tmc5130_reset+0x28>

000240a6 <tmc5130_restore>:

// Restore the TMC5130 to the state stored in the shadow registers.
// This can be used to recover the IC configuration after a VM power loss.
uint8_t tmc5130_restore(TMC5130TypeDef *tmc5130)
{
	if(tmc5130->config->state != CONFIG_READY)
   240a6:	6803      	ldr	r3, [r0, #0]
   240a8:	781a      	ldrb	r2, [r3, #0]
   240aa:	b91a      	cbnz	r2, 240b4 <tmc5130_restore+0xe>
		return false;

	tmc5130->config->state        = CONFIG_RESTORE;
   240ac:	2202      	movs	r2, #2
   240ae:	801a      	strh	r2, [r3, #0]
	tmc5130->config->configIndex  = 0;

	return true;
   240b0:	2001      	movs	r0, #1
   240b2:	4770      	bx	lr
		return false;
   240b4:	2000      	movs	r0, #0
}
   240b6:	4770      	bx	lr

000240b8 <tmc5130_setRegisterResetState>:

// Change the values the IC will be configured with when performing a reset.
void tmc5130_setRegisterResetState(TMC5130TypeDef *tmc5130, const int32_t *resetState)
{
	size_t i;
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   240b8:	1f0b      	subs	r3, r1, #4
   240ba:	3010      	adds	r0, #16
   240bc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
	{
		tmc5130->registerResetState[i] = resetState[i];
   240c0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   240c4:	f840 2b04 	str.w	r2, [r0], #4
	for(i = 0; i < TMC5130_REGISTER_COUNT; i++)
   240c8:	428b      	cmp	r3, r1
   240ca:	d1f9      	bne.n	240c0 <tmc5130_setRegisterResetState+0x8>
	}
}
   240cc:	4770      	bx	lr

000240ce <tmc5130_setCallback>:

// Register a function to be called after completion of the configuration mechanism
void tmc5130_setCallback(TMC5130TypeDef *tmc5130, tmc5130_callback callback)
{
	tmc5130->config->callback = (tmc_callback_config) callback;
   240ce:	6803      	ldr	r3, [r0, #0]
   240d0:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   240d4:	4770      	bx	lr

000240d6 <tmc5130_periodicJob>:
	}
}

// Call this periodically
void tmc5130_periodicJob(TMC5130TypeDef *tmc5130, uint32_t tick)
{
   240d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(tmc5130->config->state != CONFIG_READY)
   240da:	6805      	ldr	r5, [r0, #0]
   240dc:	782b      	ldrb	r3, [r5, #0]
{
   240de:	4604      	mov	r4, r0
   240e0:	460e      	mov	r6, r1
	if(tmc5130->config->state != CONFIG_READY)
   240e2:	2b00      	cmp	r3, #0
   240e4:	d03d      	beq.n	24162 <tmc5130_periodicJob+0x8c>
	if(tmc5130->config->state == CONFIG_RESTORE)
   240e6:	2b02      	cmp	r3, #2
   240e8:	d120      	bne.n	2412c <tmc5130_periodicJob+0x56>
		settings = tmc5130->config->shadowRegister;
   240ea:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC5130_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc5130->registerAccess[*ptr]))
   240ec:	f995 3001 	ldrsb.w	r3, [r5, #1]
   240f0:	786a      	ldrb	r2, [r5, #1]
   240f2:	2b00      	cmp	r3, #0
   240f4:	db08      	blt.n	24108 <tmc5130_periodicJob+0x32>
   240f6:	18a3      	adds	r3, r4, r2
   240f8:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   240fc:	0799      	lsls	r1, r3, #30
   240fe:	d512      	bpl.n	24126 <tmc5130_periodicJob+0x50>
   24100:	f003 0348 	and.w	r3, r3, #72	; 0x48
   24104:	2b40      	cmp	r3, #64	; 0x40
   24106:	d00e      	beq.n	24126 <tmc5130_periodicJob+0x50>
	if(*ptr < TMC5130_REGISTER_COUNT)
   24108:	f995 3001 	ldrsb.w	r3, [r5, #1]
   2410c:	7869      	ldrb	r1, [r5, #1]
   2410e:	2b00      	cmp	r3, #0
   24110:	db1c      	blt.n	2414c <tmc5130_periodicJob+0x76>
		tmc5130_writeInt(tmc5130, *ptr, settings[*ptr]);
   24112:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   24116:	4620      	mov	r0, r4
   24118:	f7ff ff29 	bl	23f6e <tmc5130_writeInt>
		(*ptr)++;
   2411c:	786b      	ldrb	r3, [r5, #1]
   2411e:	3301      	adds	r3, #1
   24120:	706b      	strb	r3, [r5, #1]
		tmc5130->velocity = (uint32_t) ((float32_t) ((XActual - tmc5130->oldX) / (float32_t) tickDiff) * (float32_t) 1048.576);

		tmc5130->oldX     = XActual;
		tmc5130->oldTick  = tick;
	}
}
   24122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(*ptr)++;
   24126:	3201      	adds	r2, #1
   24128:	706a      	strb	r2, [r5, #1]
   2412a:	e7df      	b.n	240ec <tmc5130_periodicJob+0x16>
		settings = tmc5130->registerResetState;
   2412c:	3010      	adds	r0, #16
		while((*ptr < TMC5130_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc5130->registerAccess[*ptr]))
   2412e:	f995 2001 	ldrsb.w	r2, [r5, #1]
   24132:	786b      	ldrb	r3, [r5, #1]
   24134:	2a00      	cmp	r2, #0
   24136:	dbe7      	blt.n	24108 <tmc5130_periodicJob+0x32>
   24138:	18e2      	adds	r2, r4, r3
   2413a:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   2413e:	f002 0242 	and.w	r2, r2, #66	; 0x42
   24142:	2a02      	cmp	r2, #2
   24144:	d0e0      	beq.n	24108 <tmc5130_periodicJob+0x32>
			(*ptr)++;
   24146:	3301      	adds	r3, #1
   24148:	706b      	strb	r3, [r5, #1]
   2414a:	e7f0      	b.n	2412e <tmc5130_periodicJob+0x58>
		if(tmc5130->config->callback)
   2414c:	6822      	ldr	r2, [r4, #0]
   2414e:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   24152:	b113      	cbz	r3, 2415a <tmc5130_periodicJob+0x84>
			((tmc5130_callback)tmc5130->config->callback)(tmc5130, tmc5130->config->state);
   24154:	7811      	ldrb	r1, [r2, #0]
   24156:	4620      	mov	r0, r4
   24158:	4798      	blx	r3
		tmc5130->config->state = CONFIG_READY;
   2415a:	6823      	ldr	r3, [r4, #0]
   2415c:	2200      	movs	r2, #0
   2415e:	701a      	strb	r2, [r3, #0]
   24160:	e7df      	b.n	24122 <tmc5130_periodicJob+0x4c>
	if((tickDiff = tick - tmc5130->oldTick) >= 5)
   24162:	68c7      	ldr	r7, [r0, #12]
   24164:	1bcf      	subs	r7, r1, r7
   24166:	2f04      	cmp	r7, #4
   24168:	d9db      	bls.n	24122 <tmc5130_periodicJob+0x4c>
		XActual = tmc5130_readInt(tmc5130, TMC5130_XACTUAL);
   2416a:	2121      	movs	r1, #33	; 0x21
   2416c:	f7ff ff0d 	bl	23f8a <tmc5130_readInt>
   24170:	4605      	mov	r5, r0
		tmc5130->velocity = (uint32_t) ((float32_t) ((XActual - tmc5130->oldX) / (float32_t) tickDiff) * (float32_t) 1048.576);
   24172:	68a0      	ldr	r0, [r4, #8]
   24174:	1a28      	subs	r0, r5, r0
   24176:	f003 f9cb 	bl	27510 <__aeabi_i2f>
   2417a:	4680      	mov	r8, r0
   2417c:	4638      	mov	r0, r7
   2417e:	f003 f9c3 	bl	27508 <__aeabi_ui2f>
   24182:	4601      	mov	r1, r0
   24184:	4640      	mov	r0, r8
   24186:	f003 facb 	bl	27720 <__aeabi_fdiv>
   2418a:	4904      	ldr	r1, [pc, #16]	; (2419c <tmc5130_periodicJob+0xc6>)
   2418c:	f003 fa14 	bl	275b8 <__aeabi_fmul>
   24190:	f003 fb88 	bl	278a4 <__aeabi_f2uiz>
		tmc5130->oldTick  = tick;
   24194:	60e6      	str	r6, [r4, #12]
		tmc5130->oldX     = XActual;
   24196:	e9c4 0501 	strd	r0, r5, [r4, #4]
		tmc5130->oldTick  = tick;
   2419a:	e7c2      	b.n	24122 <tmc5130_periodicJob+0x4c>
   2419c:	4483126f 	.word	0x4483126f

000241a0 <tmc5130_rotate>:

// Rotate with a given velocity (to the right)
void tmc5130_rotate(TMC5130TypeDef *tmc5130, int32_t velocity)
{
   241a0:	b538      	push	{r3, r4, r5, lr}
	// Set absolute velocity
	tmc5130_writeInt(tmc5130, TMC5130_VMAX, abs(velocity));
   241a2:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   241a6:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
{
   241aa:	460c      	mov	r4, r1
	tmc5130_writeInt(tmc5130, TMC5130_VMAX, abs(velocity));
   241ac:	2127      	movs	r1, #39	; 0x27
{
   241ae:	4605      	mov	r5, r0
	tmc5130_writeInt(tmc5130, TMC5130_VMAX, abs(velocity));
   241b0:	f7ff fedd 	bl	23f6e <tmc5130_writeInt>
	// Set direction
	tmc5130_writeInt(tmc5130, TMC5130_RAMPMODE, (velocity >= 0) ? TMC5130_MODE_VELPOS : TMC5130_MODE_VELNEG);
   241b4:	2c00      	cmp	r4, #0
   241b6:	4628      	mov	r0, r5
   241b8:	bfa8      	it	ge
   241ba:	2201      	movge	r2, #1
}
   241bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc5130_writeInt(tmc5130, TMC5130_RAMPMODE, (velocity >= 0) ? TMC5130_MODE_VELPOS : TMC5130_MODE_VELNEG);
   241c0:	bfb8      	it	lt
   241c2:	2202      	movlt	r2, #2
   241c4:	2120      	movs	r1, #32
   241c6:	f7ff bed2 	b.w	23f6e <tmc5130_writeInt>

000241ca <tmc5130_right>:

// Rotate to the right
void tmc5130_right(TMC5130TypeDef *tmc5130, uint32_t velocity)
{
	tmc5130_rotate(tmc5130, velocity);
   241ca:	f7ff bfe9 	b.w	241a0 <tmc5130_rotate>

000241ce <tmc5130_left>:
}

// Rotate to the left
void tmc5130_left(TMC5130TypeDef *tmc5130, uint32_t velocity)
{
	tmc5130_rotate(tmc5130, -velocity);
   241ce:	4249      	negs	r1, r1
   241d0:	f7ff bfe6 	b.w	241a0 <tmc5130_rotate>

000241d4 <tmc5130_stop>:
}

// Stop moving
void tmc5130_stop(TMC5130TypeDef *tmc5130)
{
	tmc5130_rotate(tmc5130, 0);
   241d4:	2100      	movs	r1, #0
   241d6:	f7ff bfe3 	b.w	241a0 <tmc5130_rotate>

000241da <tmc5130_moveTo>:
}

// Move to a specified position with a given velocity
void tmc5130_moveTo(TMC5130TypeDef *tmc5130, int32_t position, uint32_t velocityMax)
{
   241da:	b570      	push	{r4, r5, r6, lr}
   241dc:	4604      	mov	r4, r0
   241de:	460d      	mov	r5, r1
   241e0:	4616      	mov	r6, r2
	tmc5130_writeInt(tmc5130, TMC5130_RAMPMODE, TMC5130_MODE_POSITION);
   241e2:	2120      	movs	r1, #32
   241e4:	2200      	movs	r2, #0
   241e6:	f7ff fec2 	bl	23f6e <tmc5130_writeInt>

	// VMAX also holds the target velocity in velocity mode.
	// Re-write the position mode maximum velocity here.
	tmc5130_writeInt(tmc5130, TMC5130_VMAX, velocityMax);
   241ea:	4632      	mov	r2, r6
   241ec:	4620      	mov	r0, r4
   241ee:	2127      	movs	r1, #39	; 0x27
   241f0:	f7ff febd 	bl	23f6e <tmc5130_writeInt>

	tmc5130_writeInt(tmc5130, TMC5130_XTARGET, position);
   241f4:	462a      	mov	r2, r5
   241f6:	4620      	mov	r0, r4
   241f8:	212d      	movs	r1, #45	; 0x2d
}
   241fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc5130_writeInt(tmc5130, TMC5130_XTARGET, position);
   241fe:	f7ff beb6 	b.w	23f6e <tmc5130_writeInt>

00024202 <tmc5130_moveBy>:

// Move by a given amount with a given velocity
// This function will write the absolute target position to *ticks
void tmc5130_moveBy(TMC5130TypeDef *tmc5130, int32_t *ticks, uint32_t velocityMax)
{
   24202:	b570      	push	{r4, r5, r6, lr}
   24204:	460c      	mov	r4, r1
	// determine actual position and add numbers of ticks to move
	*ticks += tmc5130_readInt(tmc5130, TMC5130_XACTUAL);
   24206:	2121      	movs	r1, #33	; 0x21
{
   24208:	4605      	mov	r5, r0
   2420a:	4616      	mov	r6, r2
	*ticks += tmc5130_readInt(tmc5130, TMC5130_XACTUAL);
   2420c:	f7ff febd 	bl	23f8a <tmc5130_readInt>
   24210:	6821      	ldr	r1, [r4, #0]
   24212:	4401      	add	r1, r0
   24214:	6021      	str	r1, [r4, #0]

	tmc5130_moveTo(tmc5130, *ticks, velocityMax);
   24216:	4632      	mov	r2, r6
   24218:	4628      	mov	r0, r5
}
   2421a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc5130_moveTo(tmc5130, *ticks, velocityMax);
   2421e:	f7ff bfdc 	b.w	241da <tmc5130_moveTo>
   24222:	bf00      	nop

00024224 <tmc5160_initConfig>:
extern int tmc5160_readInt(uint8_t motor, uint8_t address);
// <= SPI wrapper

void tmc5160_initConfig(TMC5160TypeDef *tmc5160)
{
	tmc5160->velocity  = 0;
   24224:	4a0c      	ldr	r2, [pc, #48]	; (24258 <tmc5160_initConfig+0x34>)
   24226:	2300      	movs	r3, #0
{
   24228:	b530      	push	{r4, r5, lr}
   2422a:	f100 010c 	add.w	r1, r0, #12
	tmc5160->oldTick   = 0;
	tmc5160->oldX      = 0;
   2422e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tmc5160->velocity  = 0;
   24232:	6003      	str	r3, [r0, #0]

	int i;
	for(i = 0; i < TMC5160_REGISTER_COUNT; i++)
   24234:	f102 0480 	add.w	r4, r2, #128	; 0x80
   24238:	f500 7303 	add.w	r3, r0, #524	; 0x20c
   2423c:	f500 7023 	add.w	r0, r0, #652	; 0x28c
	{
		tmc5160->registerAccess[i]      = tmc5160_defaultRegisterAccess[i];
   24240:	f812 5b01 	ldrb.w	r5, [r2], #1
   24244:	f803 5b01 	strb.w	r5, [r3], #1
		tmc5160->registerResetState[i]  = tmc5160_defaultRegisterResetState[i];
   24248:	f854 5b04 	ldr.w	r5, [r4], #4
   2424c:	f841 5b04 	str.w	r5, [r1], #4
	for(i = 0; i < TMC5160_REGISTER_COUNT; i++)
   24250:	4283      	cmp	r3, r0
   24252:	d1f5      	bne.n	24240 <tmc5160_initConfig+0x1c>
	}
}
   24254:	bd30      	pop	{r4, r5, pc}
   24256:	bf00      	nop
   24258:	0002ae0c 	.word	0x0002ae0c

0002425c <tmc5160_writeConfiguration>:

void tmc5160_writeConfiguration(uint8_t motor, TMC5160TypeDef *tmc5160, ConfigurationTypeDef *TMC5160_config)
{
   2425c:	b538      	push	{r3, r4, r5, lr}
	uint8_t *ptr = &TMC5160_config->configIndex;
	const int32_t *settings = (TMC5160_config->state == CONFIG_RESTORE) ? TMC5160_config->shadowRegister : tmc5160->registerResetState;
   2425e:	7813      	ldrb	r3, [r2, #0]
   24260:	2b02      	cmp	r3, #2
{
   24262:	4614      	mov	r4, r2
   24264:	460d      	mov	r5, r1
	const int32_t *settings = (TMC5160_config->state == CONFIG_RESTORE) ? TMC5160_config->shadowRegister : tmc5160->registerResetState;
   24266:	bf0c      	ite	eq
   24268:	3204      	addeq	r2, #4
   2426a:	f101 020c 	addne.w	r2, r1, #12

	while((*ptr < TMC5160_REGISTER_COUNT) && !TMC_IS_WRITABLE(tmc5160->registerAccess[*ptr]))
   2426e:	f994 3001 	ldrsb.w	r3, [r4, #1]
   24272:	7861      	ldrb	r1, [r4, #1]
   24274:	2b00      	cmp	r3, #0
   24276:	db0f      	blt.n	24298 <tmc5160_writeConfiguration+0x3c>
   24278:	186b      	adds	r3, r5, r1
   2427a:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
   2427e:	079b      	lsls	r3, r3, #30
   24280:	d507      	bpl.n	24292 <tmc5160_writeConfiguration+0x36>
		(*ptr)++;

	if(*ptr < TMC5160_REGISTER_COUNT)
	{
		tmc5160_writeInt(motor, *ptr, settings[*ptr]);
   24282:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   24286:	f7f5 f8ef 	bl	19468 <tmc5160_writeInt>
		(*ptr)++;
   2428a:	7863      	ldrb	r3, [r4, #1]
   2428c:	3301      	adds	r3, #1
   2428e:	7063      	strb	r3, [r4, #1]
	}
	else
	{
		TMC5160_config->state = CONFIG_READY;
	}
}
   24290:	bd38      	pop	{r3, r4, r5, pc}
		(*ptr)++;
   24292:	1c4b      	adds	r3, r1, #1
   24294:	7063      	strb	r3, [r4, #1]
   24296:	e7ea      	b.n	2426e <tmc5160_writeConfiguration+0x12>
		TMC5160_config->state = CONFIG_READY;
   24298:	2300      	movs	r3, #0
   2429a:	7023      	strb	r3, [r4, #0]
   2429c:	e7f8      	b.n	24290 <tmc5160_writeConfiguration+0x34>

0002429e <tmc5160_periodicJob>:

void tmc5160_periodicJob(uint8_t motor, uint32_t tick, TMC5160TypeDef *tmc5160, ConfigurationTypeDef *TMC5160_config)
{
   2429e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242a2:	461e      	mov	r6, r3
	if(TMC5160_config->state != CONFIG_READY)
   242a4:	781b      	ldrb	r3, [r3, #0]
{
   242a6:	460f      	mov	r7, r1
   242a8:	4614      	mov	r4, r2
	if(TMC5160_config->state != CONFIG_READY)
   242aa:	b12b      	cbz	r3, 242b8 <tmc5160_periodicJob+0x1a>
	{
		tmc5160_writeConfiguration(motor, tmc5160, TMC5160_config);
   242ac:	4632      	mov	r2, r6
   242ae:	4621      	mov	r1, r4
		tmc5160->velocity = (int) ((float) ((XActual-tmc5160->oldX) / (float) tickDiff) * (float) 1048.576);

		tmc5160->oldX     = XActual;
		tmc5160->oldTick  = tick;
	}
}
   242b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		tmc5160_writeConfiguration(motor, tmc5160, TMC5160_config);
   242b4:	f7ff bfd2 	b.w	2425c <tmc5160_writeConfiguration>
	if((tickDiff = tick-tmc5160->oldTick) >= 5) // measured speed dx/dt
   242b8:	6893      	ldr	r3, [r2, #8]
   242ba:	eba1 0803 	sub.w	r8, r1, r3
   242be:	f1b8 0f04 	cmp.w	r8, #4
   242c2:	d919      	bls.n	242f8 <tmc5160_periodicJob+0x5a>
		XActual = tmc5160_readInt(motor, TMC5160_XACTUAL);
   242c4:	2121      	movs	r1, #33	; 0x21
   242c6:	f7f5 ff58 	bl	1a17a <tmc5160_readInt>
   242ca:	4605      	mov	r5, r0
		TMC5160_config->shadowRegister[TMC5160_XACTUAL] = XActual;
   242cc:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
		tmc5160->velocity = (int) ((float) ((XActual-tmc5160->oldX) / (float) tickDiff) * (float) 1048.576);
   242d0:	6860      	ldr	r0, [r4, #4]
   242d2:	1a28      	subs	r0, r5, r0
   242d4:	f003 f91c 	bl	27510 <__aeabi_i2f>
   242d8:	4606      	mov	r6, r0
   242da:	4640      	mov	r0, r8
   242dc:	f003 f914 	bl	27508 <__aeabi_ui2f>
   242e0:	4601      	mov	r1, r0
   242e2:	4630      	mov	r0, r6
   242e4:	f003 fa1c 	bl	27720 <__aeabi_fdiv>
   242e8:	4904      	ldr	r1, [pc, #16]	; (242fc <tmc5160_periodicJob+0x5e>)
   242ea:	f003 f965 	bl	275b8 <__aeabi_fmul>
   242ee:	f003 fab3 	bl	27858 <__aeabi_f2iz>
		tmc5160->oldX     = XActual;
   242f2:	e9c4 0500 	strd	r0, r5, [r4]
		tmc5160->oldTick  = tick;
   242f6:	60a7      	str	r7, [r4, #8]
}
   242f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   242fc:	4483126f 	.word	0x4483126f

00024300 <tmc5160_reset>:

uint8_t tmc5160_reset(ConfigurationTypeDef *TMC5160_config)
{
	if(TMC5160_config->state != CONFIG_READY)
   24300:	7802      	ldrb	r2, [r0, #0]
{
   24302:	4603      	mov	r3, r0
	if(TMC5160_config->state != CONFIG_READY)
   24304:	b912      	cbnz	r2, 2430c <tmc5160_reset+0xc>
		return 0;

	TMC5160_config->state        = CONFIG_RESET;
   24306:	2001      	movs	r0, #1
   24308:	8018      	strh	r0, [r3, #0]
	TMC5160_config->configIndex  = 0;

	return 1;
   2430a:	4770      	bx	lr
		return 0;
   2430c:	2000      	movs	r0, #0
}
   2430e:	4770      	bx	lr

00024310 <tmc5160_restore>:

uint8_t tmc5160_restore(ConfigurationTypeDef *TMC5160_config)
{
	if(TMC5160_config->state != CONFIG_READY)
   24310:	7803      	ldrb	r3, [r0, #0]
   24312:	b91b      	cbnz	r3, 2431c <tmc5160_restore+0xc>
		return 0;

	TMC5160_config->state        = CONFIG_RESTORE;
   24314:	2302      	movs	r3, #2
   24316:	8003      	strh	r3, [r0, #0]
	TMC5160_config->configIndex  = 0;

	return 1;
   24318:	2001      	movs	r0, #1
   2431a:	4770      	bx	lr
		return 0;
   2431c:	2000      	movs	r0, #0
}
   2431e:	4770      	bx	lr

00024320 <tmc5161_writeDatagram>:
// => SPI wrapper
extern void tmc5161_readWriteArray(uint8_t channel, uint8_t *data, size_t length);
// <= SPI wrapper

void tmc5161_writeDatagram(TMC5161TypeDef *tmc5161, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint8_t x4)
{
   24320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24324:	461e      	mov	r6, r3
	uint8_t data[5] = { address | TMC5161_WRITE_BIT, x1, x2, x3, x4 };
   24326:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2432a:	f88d 3000 	strb.w	r3, [sp]
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   2432e:	6803      	ldr	r3, [r0, #0]
{
   24330:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   24334:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
	uint8_t data[5] = { address | TMC5161_WRITE_BIT, x1, x2, x3, x4 };
   24338:	f88d 2001 	strb.w	r2, [sp, #1]
{
   2433c:	4604      	mov	r4, r0
   2433e:	4691      	mov	r9, r2
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   24340:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	uint8_t data[5] = { address | TMC5161_WRITE_BIT, x1, x2, x3, x4 };
   24344:	f88d 6002 	strb.w	r6, [sp, #2]
{
   24348:	460d      	mov	r5, r1
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   2434a:	2205      	movs	r2, #5
   2434c:	4669      	mov	r1, sp
	uint8_t data[5] = { address | TMC5161_WRITE_BIT, x1, x2, x3, x4 };
   2434e:	f88d 7004 	strb.w	r7, [sp, #4]
   24352:	f88d 8003 	strb.w	r8, [sp, #3]
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   24356:	f7f7 f80b 	bl	1b370 <tmc5161_readWriteArray>
	value <<= 8;
	value |= x4;

	// Write to the shadow register and mark the register dirty
	address = TMC_ADDRESS(address);
	tmc5161->config->shadowRegister[address] = value;
   2435a:	6823      	ldr	r3, [r4, #0]
   2435c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
	value |= x2;
   24360:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
	tmc5161->config->shadowRegister[address] = value;
   24364:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	value |= x3;
   24368:	ea48 2606 	orr.w	r6, r8, r6, lsl #8
	tmc5161->registerAccess[address] |= TMC_ACCESS_DIRTY;
   2436c:	442c      	add	r4, r5
	value |= x4;
   2436e:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
	tmc5161->config->shadowRegister[address] = value;
   24372:	605f      	str	r7, [r3, #4]
	tmc5161->registerAccess[address] |= TMC_ACCESS_DIRTY;
   24374:	f894 3210 	ldrb.w	r3, [r4, #528]	; 0x210
   24378:	f043 0308 	orr.w	r3, r3, #8
   2437c:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
}
   24380:	b003      	add	sp, #12
   24382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00024386 <tmc5161_writeInt>:

void tmc5161_writeInt(TMC5161TypeDef *tmc5161, uint8_t address, int32_t value)
{
   24386:	b507      	push	{r0, r1, r2, lr}
	tmc5161_writeDatagram(tmc5161, address, BYTE(value, 3), BYTE(value, 2), BYTE(value, 1), BYTE(value, 0));
   24388:	b2d3      	uxtb	r3, r2
   2438a:	9301      	str	r3, [sp, #4]
   2438c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   24390:	9300      	str	r3, [sp, #0]
   24392:	f3c2 4307 	ubfx	r3, r2, #16, #8
   24396:	0e12      	lsrs	r2, r2, #24
   24398:	f7ff ffc2 	bl	24320 <tmc5161_writeDatagram>
}
   2439c:	b003      	add	sp, #12
   2439e:	f85d fb04 	ldr.w	pc, [sp], #4

000243a2 <tmc5161_readInt>:

int32_t tmc5161_readInt(TMC5161TypeDef *tmc5161, uint8_t address)
{
   243a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	address = TMC_ADDRESS(address);
   243a4:	f001 047f 	and.w	r4, r1, #127	; 0x7f

	// register not readable -> shadow register copy
	if(!TMC_IS_READABLE(tmc5161->registerAccess[address]))
   243a8:	1902      	adds	r2, r0, r4
   243aa:	6803      	ldr	r3, [r0, #0]
   243ac:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   243b0:	07d2      	lsls	r2, r2, #31
{
   243b2:	4605      	mov	r5, r0
	if(!TMC_IS_READABLE(tmc5161->registerAccess[address]))
   243b4:	d404      	bmi.n	243c0 <tmc5161_readInt+0x1e>
		return tmc5161->config->shadowRegister[address];
   243b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   243ba:	6860      	ldr	r0, [r4, #4]

	data[0] = address;
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);

	return _8_32(data[1], data[2], data[3], data[4]);
}
   243bc:	b003      	add	sp, #12
   243be:	bd30      	pop	{r4, r5, pc}
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   243c0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
	data[0] = address;
   243c4:	f88d 4000 	strb.w	r4, [sp]
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   243c8:	2205      	movs	r2, #5
   243ca:	4669      	mov	r1, sp
   243cc:	f7f6 ffd0 	bl	1b370 <tmc5161_readWriteArray>
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   243d0:	682b      	ldr	r3, [r5, #0]
	data[0] = address;
   243d2:	f88d 4000 	strb.w	r4, [sp]
	tmc5161_readWriteArray(tmc5161->config->channel, &data[0], 5);
   243d6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   243da:	2205      	movs	r2, #5
   243dc:	4669      	mov	r1, sp
   243de:	f7f6 ffc7 	bl	1b370 <tmc5161_readWriteArray>
	return _8_32(data[1], data[2], data[3], data[4]);
   243e2:	f8dd 0001 	ldr.w	r0, [sp, #1]
   243e6:	ba00      	rev	r0, r0
   243e8:	e7e8      	b.n	243bc <tmc5161_readInt+0x1a>

000243ea <tmc5161_init>:

void tmc5161_init(TMC5161TypeDef *tmc5161, uint8_t channel, ConfigurationTypeDef *config, const int32_t *registerResetState)
{
   243ea:	b530      	push	{r4, r5, lr}
	tmc5161->velocity  = 0;
   243ec:	2400      	movs	r4, #0
	tmc5161->oldTick   = 0;
	tmc5161->oldX      = 0;
   243ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
	tmc5161->velocity  = 0;
   243f2:	6044      	str	r4, [r0, #4]
	tmc5161->config    = config;
   243f4:	6002      	str	r2, [r0, #0]

	tmc5161->config->callback     = NULL;
   243f6:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	tmc5161->config->channel      = channel;
	tmc5161->config->configIndex  = 0;
	tmc5161->config->state        = CONFIG_READY;
   243fa:	8014      	strh	r4, [r2, #0]
   243fc:	4c0a      	ldr	r4, [pc, #40]	; (24428 <tmc5161_init+0x3e>)
	tmc5161->config->channel      = channel;
   243fe:	f882 1210 	strb.w	r1, [r2, #528]	; 0x210

	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
   24402:	3b04      	subs	r3, #4
   24404:	f500 7204 	add.w	r2, r0, #528	; 0x210
   24408:	f100 0110 	add.w	r1, r0, #16
   2440c:	f500 7024 	add.w	r0, r0, #656	; 0x290
	{
		tmc5161->registerAccess[i]      = tmc5161_defaultRegisterAccess[i];
   24410:	f814 5b01 	ldrb.w	r5, [r4], #1
   24414:	f802 5b01 	strb.w	r5, [r2], #1
		tmc5161->registerResetState[i]  = registerResetState[i];
   24418:	f853 5f04 	ldr.w	r5, [r3, #4]!
   2441c:	f841 5b04 	str.w	r5, [r1], #4
	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
   24420:	4282      	cmp	r2, r0
   24422:	d1f5      	bne.n	24410 <tmc5161_init+0x26>
	}
}
   24424:	bd30      	pop	{r4, r5, pc}
   24426:	bf00      	nop
   24428:	0002b08c 	.word	0x0002b08c

0002442c <tmc5161_periodicJob>:
		tmc5161->config->state = CONFIG_READY;
	}
}

void tmc5161_periodicJob(TMC5161TypeDef *tmc5161, uint32_t tick)
{
   2442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(tmc5161->config->state != CONFIG_READY)
   24430:	6805      	ldr	r5, [r0, #0]
   24432:	782b      	ldrb	r3, [r5, #0]
{
   24434:	4604      	mov	r4, r0
   24436:	460e      	mov	r6, r1
	if(tmc5161->config->state != CONFIG_READY)
   24438:	2b00      	cmp	r3, #0
   2443a:	d03d      	beq.n	244b8 <tmc5161_periodicJob+0x8c>
	if(tmc5161->config->state == CONFIG_RESTORE)
   2443c:	2b02      	cmp	r3, #2
   2443e:	d120      	bne.n	24482 <tmc5161_periodicJob+0x56>
		settings = tmc5161->config->shadowRegister;
   24440:	1d28      	adds	r0, r5, #4
		while((*ptr < TMC5161_REGISTER_COUNT) && !TMC_IS_RESTORABLE(tmc5161->registerAccess[*ptr]))
   24442:	f995 3001 	ldrsb.w	r3, [r5, #1]
   24446:	786a      	ldrb	r2, [r5, #1]
   24448:	2b00      	cmp	r3, #0
   2444a:	db08      	blt.n	2445e <tmc5161_periodicJob+0x32>
   2444c:	18a3      	adds	r3, r4, r2
   2444e:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
   24452:	0799      	lsls	r1, r3, #30
   24454:	d512      	bpl.n	2447c <tmc5161_periodicJob+0x50>
   24456:	f003 0348 	and.w	r3, r3, #72	; 0x48
   2445a:	2b40      	cmp	r3, #64	; 0x40
   2445c:	d00e      	beq.n	2447c <tmc5161_periodicJob+0x50>
	if(*ptr < TMC5161_REGISTER_COUNT)
   2445e:	f995 3001 	ldrsb.w	r3, [r5, #1]
   24462:	7869      	ldrb	r1, [r5, #1]
   24464:	2b00      	cmp	r3, #0
   24466:	db1c      	blt.n	244a2 <tmc5161_periodicJob+0x76>
		tmc5161_writeInt(tmc5161, *ptr, settings[*ptr]);
   24468:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2446c:	4620      	mov	r0, r4
   2446e:	f7ff ff8a 	bl	24386 <tmc5161_writeInt>
		(*ptr)++;
   24472:	786b      	ldrb	r3, [r5, #1]
   24474:	3301      	adds	r3, #1
   24476:	706b      	strb	r3, [r5, #1]
		tmc5161->velocity = (int) ((float32_t) ((XActual-tmc5161->oldX) / (float32_t) tickDiff) * (float32_t) 1048.576);

		tmc5161->oldX     = XActual;
		tmc5161->oldTick  = tick;
	}
}
   24478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(*ptr)++;
   2447c:	3201      	adds	r2, #1
   2447e:	706a      	strb	r2, [r5, #1]
   24480:	e7df      	b.n	24442 <tmc5161_periodicJob+0x16>
		settings = tmc5161->registerResetState;
   24482:	3010      	adds	r0, #16
		while((*ptr < TMC5161_REGISTER_COUNT) && !TMC_IS_RESETTABLE(tmc5161->registerAccess[*ptr]))
   24484:	f995 2001 	ldrsb.w	r2, [r5, #1]
   24488:	786b      	ldrb	r3, [r5, #1]
   2448a:	2a00      	cmp	r2, #0
   2448c:	dbe7      	blt.n	2445e <tmc5161_periodicJob+0x32>
   2448e:	18e2      	adds	r2, r4, r3
   24490:	f892 2210 	ldrb.w	r2, [r2, #528]	; 0x210
   24494:	f002 0242 	and.w	r2, r2, #66	; 0x42
   24498:	2a02      	cmp	r2, #2
   2449a:	d0e0      	beq.n	2445e <tmc5161_periodicJob+0x32>
			(*ptr)++;
   2449c:	3301      	adds	r3, #1
   2449e:	706b      	strb	r3, [r5, #1]
   244a0:	e7f0      	b.n	24484 <tmc5161_periodicJob+0x58>
		if(tmc5161->config->callback)
   244a2:	6822      	ldr	r2, [r4, #0]
   244a4:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   244a8:	b113      	cbz	r3, 244b0 <tmc5161_periodicJob+0x84>
			((tmc5161_callback)tmc5161->config->callback)(tmc5161, tmc5161->config->state);
   244aa:	7811      	ldrb	r1, [r2, #0]
   244ac:	4620      	mov	r0, r4
   244ae:	4798      	blx	r3
		tmc5161->config->state = CONFIG_READY;
   244b0:	6823      	ldr	r3, [r4, #0]
   244b2:	2200      	movs	r2, #0
   244b4:	701a      	strb	r2, [r3, #0]
   244b6:	e7df      	b.n	24478 <tmc5161_periodicJob+0x4c>
	if((tickDiff = tick-tmc5161->oldTick) >= 5) // measured speed dx/dt
   244b8:	68c7      	ldr	r7, [r0, #12]
   244ba:	1bcf      	subs	r7, r1, r7
   244bc:	2f04      	cmp	r7, #4
   244be:	d9db      	bls.n	24478 <tmc5161_periodicJob+0x4c>
		XActual = tmc5161_readInt(tmc5161, TMC5161_XACTUAL);
   244c0:	2121      	movs	r1, #33	; 0x21
   244c2:	f7ff ff6e 	bl	243a2 <tmc5161_readInt>
   244c6:	4605      	mov	r5, r0
		tmc5161->velocity = (int) ((float32_t) ((XActual-tmc5161->oldX) / (float32_t) tickDiff) * (float32_t) 1048.576);
   244c8:	68a0      	ldr	r0, [r4, #8]
   244ca:	1a28      	subs	r0, r5, r0
   244cc:	f003 f820 	bl	27510 <__aeabi_i2f>
   244d0:	4680      	mov	r8, r0
   244d2:	4638      	mov	r0, r7
   244d4:	f003 f818 	bl	27508 <__aeabi_ui2f>
   244d8:	4601      	mov	r1, r0
   244da:	4640      	mov	r0, r8
   244dc:	f003 f920 	bl	27720 <__aeabi_fdiv>
   244e0:	4904      	ldr	r1, [pc, #16]	; (244f4 <tmc5161_periodicJob+0xc8>)
   244e2:	f003 f869 	bl	275b8 <__aeabi_fmul>
   244e6:	f003 f9b7 	bl	27858 <__aeabi_f2iz>
		tmc5161->oldTick  = tick;
   244ea:	60e6      	str	r6, [r4, #12]
		tmc5161->oldX     = XActual;
   244ec:	e9c4 0501 	strd	r0, r5, [r4, #4]
		tmc5161->oldTick  = tick;
   244f0:	e7c2      	b.n	24478 <tmc5161_periodicJob+0x4c>
   244f2:	bf00      	nop
   244f4:	4483126f 	.word	0x4483126f

000244f8 <tmc5161_reset>:

uint8_t tmc5161_reset(TMC5161TypeDef *tmc5161)
{
	if(tmc5161->config->state != CONFIG_READY)
   244f8:	6801      	ldr	r1, [r0, #0]
   244fa:	780b      	ldrb	r3, [r1, #0]
   244fc:	b96b      	cbnz	r3, 2451a <tmc5161_reset+0x22>
   244fe:	f500 7304 	add.w	r3, r0, #528	; 0x210
   24502:	f500 7024 	add.w	r0, r0, #656	; 0x290
		return false;

	// Reset the dirty bits
	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
		tmc5161->registerAccess[i] &= ~TMC_ACCESS_DIRTY;
   24506:	781a      	ldrb	r2, [r3, #0]
   24508:	f022 0208 	bic.w	r2, r2, #8
   2450c:	f803 2b01 	strb.w	r2, [r3], #1
	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
   24510:	4283      	cmp	r3, r0
   24512:	d1f8      	bne.n	24506 <tmc5161_reset+0xe>

	tmc5161->config->state        = CONFIG_RESET;
   24514:	2001      	movs	r0, #1
   24516:	8008      	strh	r0, [r1, #0]
	tmc5161->config->configIndex  = 0;

	return true;
   24518:	4770      	bx	lr
		return false;
   2451a:	2000      	movs	r0, #0
}
   2451c:	4770      	bx	lr

0002451e <tmc5161_restore>:

uint8_t tmc5161_restore(TMC5161TypeDef *tmc5161)
{
	if(tmc5161->config->state != CONFIG_READY)
   2451e:	6803      	ldr	r3, [r0, #0]
   24520:	781a      	ldrb	r2, [r3, #0]
   24522:	b91a      	cbnz	r2, 2452c <tmc5161_restore+0xe>
		return false;

	tmc5161->config->state        = CONFIG_RESTORE;
   24524:	2202      	movs	r2, #2
   24526:	801a      	strh	r2, [r3, #0]
	tmc5161->config->configIndex  = 0;

	return true;
   24528:	2001      	movs	r0, #1
   2452a:	4770      	bx	lr
		return false;
   2452c:	2000      	movs	r0, #0
}
   2452e:	4770      	bx	lr

00024530 <tmc5161_setRegisterResetState>:

void tmc5161_setRegisterResetState(TMC5161TypeDef *tmc5161, const int32_t *resetState)
{
	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
   24530:	1f0b      	subs	r3, r1, #4
   24532:	3010      	adds	r0, #16
   24534:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
		tmc5161->registerResetState[i] = resetState[i];
   24538:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2453c:	f840 2b04 	str.w	r2, [r0], #4
	for(size_t i = 0; i < TMC5161_REGISTER_COUNT; i++)
   24540:	428b      	cmp	r3, r1
   24542:	d1f9      	bne.n	24538 <tmc5161_setRegisterResetState+0x8>
}
   24544:	4770      	bx	lr

00024546 <tmc5161_setCallback>:

void tmc5161_setCallback(TMC5161TypeDef *tmc5130, tmc5161_callback callback)
{
	tmc5130->config->callback = (tmc_callback_config) callback;
   24546:	6803      	ldr	r3, [r0, #0]
   24548:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
}
   2454c:	4770      	bx	lr

0002454e <tmc5161_rotate>:

void tmc5161_rotate(TMC5161TypeDef *tmc5161, int32_t velocity)
{
   2454e:	b538      	push	{r3, r4, r5, lr}
	// set absolute velocity, independent from direction
	tmc5161_writeInt(tmc5161, TMC5161_VMAX, abs(velocity));
   24550:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   24554:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
{
   24558:	460c      	mov	r4, r1
	tmc5161_writeInt(tmc5161, TMC5161_VMAX, abs(velocity));
   2455a:	2127      	movs	r1, #39	; 0x27
{
   2455c:	4605      	mov	r5, r0
	tmc5161_writeInt(tmc5161, TMC5161_VMAX, abs(velocity));
   2455e:	f7ff ff12 	bl	24386 <tmc5161_writeInt>
	// signdedness defines velocity mode direction bit in rampmode register
	tmc5161_writeInt(tmc5161, TMC5161_RAMPMODE, (velocity >= 0) ? TMC5161_MODE_VELPOS : TMC5161_MODE_VELNEG);
   24562:	2c00      	cmp	r4, #0
   24564:	4628      	mov	r0, r5
   24566:	bfa8      	it	ge
   24568:	2201      	movge	r2, #1
}
   2456a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc5161_writeInt(tmc5161, TMC5161_RAMPMODE, (velocity >= 0) ? TMC5161_MODE_VELPOS : TMC5161_MODE_VELNEG);
   2456e:	bfb8      	it	lt
   24570:	2202      	movlt	r2, #2
   24572:	2120      	movs	r1, #32
   24574:	f7ff bf07 	b.w	24386 <tmc5161_writeInt>

00024578 <tmc5161_right>:

void tmc5161_right(TMC5161TypeDef *tmc5161, uint32_t velocity)
{
	return tmc5161_rotate(tmc5161, velocity);
   24578:	f7ff bfe9 	b.w	2454e <tmc5161_rotate>

0002457c <tmc5161_left>:
}

void tmc5161_left(TMC5161TypeDef *tmc5161, uint32_t velocity)
{
	return tmc5161_rotate(tmc5161, -velocity);
   2457c:	4249      	negs	r1, r1
   2457e:	f7ff bfe6 	b.w	2454e <tmc5161_rotate>

00024582 <tmc5161_stop>:
}

void tmc5161_stop(TMC5161TypeDef *tmc5161)
{
	return tmc5161_rotate(tmc5161, 0);
   24582:	2100      	movs	r1, #0
   24584:	f7ff bfe3 	b.w	2454e <tmc5161_rotate>

00024588 <tmc5161_moveTo>:
}

void tmc5161_moveTo(TMC5161TypeDef *tmc5161, int32_t position, uint32_t velocity)
{
   24588:	b570      	push	{r4, r5, r6, lr}
   2458a:	4604      	mov	r4, r0
   2458c:	460d      	mov	r5, r1
   2458e:	4616      	mov	r6, r2
	tmc5161_writeInt(tmc5161, TMC5161_RAMPMODE, TMC5161_MODE_POSITION);
   24590:	2120      	movs	r1, #32
   24592:	2200      	movs	r2, #0
   24594:	f7ff fef7 	bl	24386 <tmc5161_writeInt>
	tmc5161_writeInt(tmc5161, TMC5161_VMAX, velocity); // Not written to register while in rampVelocity mode -> write copy when switching
   24598:	4632      	mov	r2, r6
   2459a:	4620      	mov	r0, r4
   2459c:	2127      	movs	r1, #39	; 0x27
   2459e:	f7ff fef2 	bl	24386 <tmc5161_writeInt>
	tmc5161_writeInt(tmc5161, TMC5161_XTARGET, position);
   245a2:	462a      	mov	r2, r5
   245a4:	4620      	mov	r0, r4
   245a6:	212d      	movs	r1, #45	; 0x2d
}
   245a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc5161_writeInt(tmc5161, TMC5161_XTARGET, position);
   245ac:	f7ff beeb 	b.w	24386 <tmc5161_writeInt>

000245b0 <tmc5161_moveBy>:

void tmc5161_moveBy(TMC5161TypeDef *tmc5161, int32_t *ticks, uint32_t velocity)
{
   245b0:	b570      	push	{r4, r5, r6, lr}
   245b2:	460c      	mov	r4, r1
	// determine actual position and add numbers of ticks to move
	*ticks += tmc5161_readInt(tmc5161, TMC5161_XACTUAL);
   245b4:	2121      	movs	r1, #33	; 0x21
{
   245b6:	4605      	mov	r5, r0
   245b8:	4616      	mov	r6, r2
	*ticks += tmc5161_readInt(tmc5161, TMC5161_XACTUAL);
   245ba:	f7ff fef2 	bl	243a2 <tmc5161_readInt>
   245be:	6821      	ldr	r1, [r4, #0]
   245c0:	4401      	add	r1, r0
   245c2:	6021      	str	r1, [r4, #0]

	tmc5161_moveTo(tmc5161, *ticks, velocity);
   245c4:	4632      	mov	r2, r6
   245c6:	4628      	mov	r0, r5
}
   245c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tmc5161_moveTo(tmc5161, *ticks, velocity);
   245cc:	f7ff bfdc 	b.w	24588 <tmc5161_moveTo>

000245d0 <tmc6100_readInt>:
extern uint8_t tmc6100_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int tmc6100_readInt(uint8_t motor, uint8_t address)
{
   245d0:	b538      	push	{r3, r4, r5, lr}
	// clear write bit
	address = TMC_ADDRESS(address);

	// write address
	tmc6100_readwriteByte(motor, address, false);
   245d2:	2200      	movs	r2, #0
   245d4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
   245d8:	4604      	mov	r4, r0
	tmc6100_readwriteByte(motor, address, false);
   245da:	f7f7 f804 	bl	1b5e6 <tmc6100_readwriteByte>

	// read data
	int value = tmc6100_readwriteByte(motor, 0, false);
   245de:	2200      	movs	r2, #0
   245e0:	4611      	mov	r1, r2
   245e2:	4620      	mov	r0, r4
   245e4:	f7f6 ffff 	bl	1b5e6 <tmc6100_readwriteByte>
	value <<= 8;
	value |= tmc6100_readwriteByte(motor, 0, false);
   245e8:	2200      	movs	r2, #0
   245ea:	4611      	mov	r1, r2
	value <<= 8;
   245ec:	0205      	lsls	r5, r0, #8
	value |= tmc6100_readwriteByte(motor, 0, false);
   245ee:	4620      	mov	r0, r4
   245f0:	f7f6 fff9 	bl	1b5e6 <tmc6100_readwriteByte>
	value <<= 8;
	value |= tmc6100_readwriteByte(motor, 0, false);
   245f4:	2200      	movs	r2, #0
   245f6:	4611      	mov	r1, r2
	value |= tmc6100_readwriteByte(motor, 0, false);
   245f8:	4305      	orrs	r5, r0
	value |= tmc6100_readwriteByte(motor, 0, false);
   245fa:	4620      	mov	r0, r4
   245fc:	f7f6 fff3 	bl	1b5e6 <tmc6100_readwriteByte>
	value <<= 8;
   24600:	022d      	lsls	r5, r5, #8
	value |= tmc6100_readwriteByte(motor, 0, false);
   24602:	4305      	orrs	r5, r0
	value <<= 8;
	value |= tmc6100_readwriteByte(motor, 0, true);
   24604:	2201      	movs	r2, #1
   24606:	2100      	movs	r1, #0
   24608:	4620      	mov	r0, r4
   2460a:	f7f6 ffec 	bl	1b5e6 <tmc6100_readwriteByte>
	value <<= 8;
   2460e:	022d      	lsls	r5, r5, #8

	return value;
}
   24610:	4328      	orrs	r0, r5
   24612:	bd38      	pop	{r3, r4, r5, pc}

00024614 <tmc6100_writeInt>:

void tmc6100_writeInt(uint8_t motor, uint8_t address, int value)
{
   24614:	b538      	push	{r3, r4, r5, lr}
	// write address
	tmc6100_readwriteByte(motor, address | TMC6100_WRITE_BIT, false);
   24616:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
   2461a:	4604      	mov	r4, r0
   2461c:	4615      	mov	r5, r2
	tmc6100_readwriteByte(motor, address | TMC6100_WRITE_BIT, false);
   2461e:	2200      	movs	r2, #0
   24620:	f7f6 ffe1 	bl	1b5e6 <tmc6100_readwriteByte>

	// write value
	tmc6100_readwriteByte(motor, 0xFF & (value>>24), false);
   24624:	0e29      	lsrs	r1, r5, #24
   24626:	2200      	movs	r2, #0
   24628:	4620      	mov	r0, r4
   2462a:	f7f6 ffdc 	bl	1b5e6 <tmc6100_readwriteByte>
	tmc6100_readwriteByte(motor, 0xFF & (value>>16), false);
   2462e:	f3c5 4107 	ubfx	r1, r5, #16, #8
   24632:	2200      	movs	r2, #0
   24634:	4620      	mov	r0, r4
   24636:	f7f6 ffd6 	bl	1b5e6 <tmc6100_readwriteByte>
	tmc6100_readwriteByte(motor, 0xFF & (value>>8), false);
   2463a:	f3c5 2107 	ubfx	r1, r5, #8, #8
   2463e:	2200      	movs	r2, #0
   24640:	4620      	mov	r0, r4
   24642:	f7f6 ffd0 	bl	1b5e6 <tmc6100_readwriteByte>
	tmc6100_readwriteByte(motor, 0xFF & (value>>0), true);
   24646:	b2e9      	uxtb	r1, r5
   24648:	4620      	mov	r0, r4
   2464a:	2201      	movs	r2, #1
}
   2464c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc6100_readwriteByte(motor, 0xFF & (value>>0), true);
   24650:	f7f6 bfc9 	b.w	1b5e6 <tmc6100_readwriteByte>

00024654 <tmc6200_readInt>:
extern uint8_t tmc6200_readwriteByte(uint8_t motor, uint8_t data, uint8_t lastTransfer);
// <= SPI wrapper

// spi access
int tmc6200_readInt(uint8_t motor, uint8_t address)
{
   24654:	b538      	push	{r3, r4, r5, lr}
	// clear write bit
	address = TMC_ADDRESS(address);

	// write address
	tmc6200_readwriteByte(motor, address, false);
   24656:	2200      	movs	r2, #0
   24658:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
   2465c:	4604      	mov	r4, r0
	tmc6200_readwriteByte(motor, address, false);
   2465e:	f7f7 f898 	bl	1b792 <tmc6200_readwriteByte>

	// read data
	int value = tmc6200_readwriteByte(motor, 0, false);
   24662:	2200      	movs	r2, #0
   24664:	4611      	mov	r1, r2
   24666:	4620      	mov	r0, r4
   24668:	f7f7 f893 	bl	1b792 <tmc6200_readwriteByte>
	value <<= 8;
	value |= tmc6200_readwriteByte(motor, 0, false);
   2466c:	2200      	movs	r2, #0
   2466e:	4611      	mov	r1, r2
	value <<= 8;
   24670:	0205      	lsls	r5, r0, #8
	value |= tmc6200_readwriteByte(motor, 0, false);
   24672:	4620      	mov	r0, r4
   24674:	f7f7 f88d 	bl	1b792 <tmc6200_readwriteByte>
	value <<= 8;
	value |= tmc6200_readwriteByte(motor, 0, false);
   24678:	2200      	movs	r2, #0
   2467a:	4611      	mov	r1, r2
	value |= tmc6200_readwriteByte(motor, 0, false);
   2467c:	4305      	orrs	r5, r0
	value |= tmc6200_readwriteByte(motor, 0, false);
   2467e:	4620      	mov	r0, r4
   24680:	f7f7 f887 	bl	1b792 <tmc6200_readwriteByte>
	value <<= 8;
   24684:	022d      	lsls	r5, r5, #8
	value |= tmc6200_readwriteByte(motor, 0, false);
   24686:	4305      	orrs	r5, r0
	value <<= 8;
	value |= tmc6200_readwriteByte(motor, 0, true);
   24688:	2201      	movs	r2, #1
   2468a:	2100      	movs	r1, #0
   2468c:	4620      	mov	r0, r4
   2468e:	f7f7 f880 	bl	1b792 <tmc6200_readwriteByte>
	value <<= 8;
   24692:	022d      	lsls	r5, r5, #8

	return value;
}
   24694:	4328      	orrs	r0, r5
   24696:	bd38      	pop	{r3, r4, r5, pc}

00024698 <tmc6200_writeInt>:

void tmc6200_writeInt(uint8_t motor, uint8_t address, int value)
{
   24698:	b538      	push	{r3, r4, r5, lr}
	// write address
	tmc6200_readwriteByte(motor, address | TMC6200_WRITE_BIT, false);
   2469a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
   2469e:	4604      	mov	r4, r0
   246a0:	4615      	mov	r5, r2
	tmc6200_readwriteByte(motor, address | TMC6200_WRITE_BIT, false);
   246a2:	2200      	movs	r2, #0
   246a4:	f7f7 f875 	bl	1b792 <tmc6200_readwriteByte>

	// write value
	tmc6200_readwriteByte(motor, 0xFF & (value>>24), false);
   246a8:	0e29      	lsrs	r1, r5, #24
   246aa:	2200      	movs	r2, #0
   246ac:	4620      	mov	r0, r4
   246ae:	f7f7 f870 	bl	1b792 <tmc6200_readwriteByte>
	tmc6200_readwriteByte(motor, 0xFF & (value>>16), false);
   246b2:	f3c5 4107 	ubfx	r1, r5, #16, #8
   246b6:	2200      	movs	r2, #0
   246b8:	4620      	mov	r0, r4
   246ba:	f7f7 f86a 	bl	1b792 <tmc6200_readwriteByte>
	tmc6200_readwriteByte(motor, 0xFF & (value>>8), false);
   246be:	f3c5 2107 	ubfx	r1, r5, #8, #8
   246c2:	2200      	movs	r2, #0
   246c4:	4620      	mov	r0, r4
   246c6:	f7f7 f864 	bl	1b792 <tmc6200_readwriteByte>
	tmc6200_readwriteByte(motor, 0xFF & (value>>0), true);
   246ca:	b2e9      	uxtb	r1, r5
   246cc:	4620      	mov	r0, r4
   246ce:	2201      	movs	r2, #1
}
   246d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc6200_readwriteByte(motor, 0xFF & (value>>0), true);
   246d4:	f7f7 b85d 	b.w	1b792 <tmc6200_readwriteByte>

000246d8 <tmc8461_esc_read>:
#include "TMC8461.h"

extern uint8_t tmc8461_readWrite(uint8_t channel, uint8_t data, uint8_t lastTransfer);

void tmc8461_esc_read(TMC8461TypeDef *tmc8461, uint16_t address)
{
   246d8:	b538      	push	{r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_esc->channel, address >> 5, false);
   246da:	6803      	ldr	r3, [r0, #0]
{
   246dc:	4605      	mov	r5, r0
   246de:	460c      	mov	r4, r1
	tmc8461_readWrite(tmc8461->config_esc->channel, address >> 5, false);
   246e0:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   246e4:	2200      	movs	r2, #0
   246e6:	f3c1 1147 	ubfx	r1, r1, #5, #8
   246ea:	f7f7 f9d7 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_esc->channel, (address << 3) | TMC8461_CMD_ADDR_EXT, false);
   246ee:	682b      	ldr	r3, [r5, #0]
   246f0:	00e1      	lsls	r1, r4, #3
   246f2:	f041 0106 	orr.w	r1, r1, #6
   246f6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   246fa:	2200      	movs	r2, #0
   246fc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24700:	f7f7 f9cc 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_READ_WAIT << 2), false);
   24704:	682b      	ldr	r3, [r5, #0]
   24706:	0a21      	lsrs	r1, r4, #8
   24708:	f021 011f 	bic.w	r1, r1, #31
   2470c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24710:	2200      	movs	r2, #0
   24712:	f041 010c 	orr.w	r1, r1, #12
   24716:	f7f7 f9c1 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_esc->channel, 0xFF, false);
   2471a:	682b      	ldr	r3, [r5, #0]
   2471c:	2200      	movs	r2, #0
   2471e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24722:	21ff      	movs	r1, #255	; 0xff
}
   24724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_esc->channel, 0xFF, false);
   24728:	f7f7 b9b8 	b.w	1ba9c <tmc8461_readWrite>

0002472c <tmc8461_esc_write>:

void tmc8461_esc_write(TMC8461TypeDef *tmc8461, uint16_t address)
{
   2472c:	b538      	push	{r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_esc->channel, address >> 5, false);
   2472e:	6803      	ldr	r3, [r0, #0]
{
   24730:	4605      	mov	r5, r0
   24732:	460c      	mov	r4, r1
	tmc8461_readWrite(tmc8461->config_esc->channel, address >> 5, false);
   24734:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24738:	2200      	movs	r2, #0
   2473a:	f3c1 1147 	ubfx	r1, r1, #5, #8
   2473e:	f7f7 f9ad 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_esc->channel, (address << 3) | TMC8461_CMD_ADDR_EXT, false);
   24742:	682b      	ldr	r3, [r5, #0]
   24744:	00e1      	lsls	r1, r4, #3
   24746:	f041 0106 	orr.w	r1, r1, #6
   2474a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   2474e:	2200      	movs	r2, #0
   24750:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24754:	f7f7 f9a2 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_WRITE << 2), false);
   24758:	682b      	ldr	r3, [r5, #0]
   2475a:	0a21      	lsrs	r1, r4, #8
   2475c:	f021 011f 	bic.w	r1, r1, #31
   24760:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24764:	2200      	movs	r2, #0
}
   24766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_WRITE << 2), false);
   2476a:	f041 0110 	orr.w	r1, r1, #16
   2476e:	f7f7 b995 	b.w	1ba9c <tmc8461_readWrite>

00024772 <tmc8461_mfc_read>:

void tmc8461_mfc_read(TMC8461TypeDef *tmc8461, uint16_t address)
{
   24772:	b538      	push	{r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_mfc->channel, address >> 5, false);
   24774:	6843      	ldr	r3, [r0, #4]
{
   24776:	4605      	mov	r5, r0
   24778:	460c      	mov	r4, r1
	tmc8461_readWrite(tmc8461->config_mfc->channel, address >> 5, false);
   2477a:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   2477e:	2200      	movs	r2, #0
   24780:	f3c1 1147 	ubfx	r1, r1, #5, #8
   24784:	f7f7 f98a 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_mfc->channel, (address << 3) | TMC8461_CMD_ADDR_EXT, false);
   24788:	686b      	ldr	r3, [r5, #4]
   2478a:	00e1      	lsls	r1, r4, #3
   2478c:	f041 0106 	orr.w	r1, r1, #6
   24790:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24794:	2200      	movs	r2, #0
   24796:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2479a:	f7f7 f97f 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_READ_WAIT << 2), false);
   2479e:	686b      	ldr	r3, [r5, #4]
   247a0:	0a21      	lsrs	r1, r4, #8
   247a2:	f021 011f 	bic.w	r1, r1, #31
   247a6:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   247aa:	2200      	movs	r2, #0
   247ac:	f041 010c 	orr.w	r1, r1, #12
   247b0:	f7f7 f974 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_mfc->channel, 0xFF, false);
   247b4:	686b      	ldr	r3, [r5, #4]
   247b6:	2200      	movs	r2, #0
   247b8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   247bc:	21ff      	movs	r1, #255	; 0xff
}
   247be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_mfc->channel, 0xFF, false);
   247c2:	f7f7 b96b 	b.w	1ba9c <tmc8461_readWrite>

000247c6 <tmc8461_mfc_write>:

void tmc8461_mfc_write(TMC8461TypeDef *tmc8461, uint16_t address)
{
   247c6:	b538      	push	{r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_mfc->channel, address >> 5, false);
   247c8:	6843      	ldr	r3, [r0, #4]
{
   247ca:	4605      	mov	r5, r0
   247cc:	460c      	mov	r4, r1
	tmc8461_readWrite(tmc8461->config_mfc->channel, address >> 5, false);
   247ce:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   247d2:	2200      	movs	r2, #0
   247d4:	f3c1 1147 	ubfx	r1, r1, #5, #8
   247d8:	f7f7 f960 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_mfc->channel, (address << 3) | TMC8461_CMD_ADDR_EXT, false);
   247dc:	686b      	ldr	r3, [r5, #4]
   247de:	00e1      	lsls	r1, r4, #3
   247e0:	f041 0106 	orr.w	r1, r1, #6
   247e4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   247e8:	2200      	movs	r2, #0
   247ea:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   247ee:	f7f7 f955 	bl	1ba9c <tmc8461_readWrite>
	tmc8461_readWrite(tmc8461->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_WRITE << 2), false);
   247f2:	686b      	ldr	r3, [r5, #4]
   247f4:	0a21      	lsrs	r1, r4, #8
   247f6:	f021 011f 	bic.w	r1, r1, #31
   247fa:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   247fe:	2200      	movs	r2, #0
}
   24800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8461_readWrite(tmc8461->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8461_CMD_WRITE << 2), false);
   24804:	f041 0110 	orr.w	r1, r1, #16
   24808:	f7f7 b948 	b.w	1ba9c <tmc8461_readWrite>

0002480c <tmc8461_esc_read_data>:

void tmc8461_esc_read_data(TMC8461TypeDef *tmc8461, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   2480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24810:	460f      	mov	r7, r1
	tmc8461_esc_read(tmc8461, address);
   24812:	4611      	mov	r1, r2
{
   24814:	461d      	mov	r5, r3
   24816:	4606      	mov	r6, r0
	tmc8461_esc_read(tmc8461, address);
   24818:	f7ff ff5e 	bl	246d8 <tmc8461_esc_read>

	for (uint16_t i = 0; i < len; i++)
   2481c:	2400      	movs	r4, #0
		data_ptr[i] = tmc8461_readWrite(tmc8461->config_esc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   2481e:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   24822:	42ac      	cmp	r4, r5
   24824:	d101      	bne.n	2482a <tmc8461_esc_read_data+0x1e>
}
   24826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_ptr[i] = tmc8461_readWrite(tmc8461->config_esc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   2482a:	45a0      	cmp	r8, r4
   2482c:	6833      	ldr	r3, [r6, #0]
   2482e:	bfcc      	ite	gt
   24830:	2200      	movgt	r2, #0
   24832:	2201      	movle	r2, #1
   24834:	4251      	negs	r1, r2
   24836:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   2483a:	b2c9      	uxtb	r1, r1
   2483c:	f7f7 f92e 	bl	1ba9c <tmc8461_readWrite>
   24840:	5538      	strb	r0, [r7, r4]
	for (uint16_t i = 0; i < len; i++)
   24842:	3401      	adds	r4, #1
   24844:	e7ed      	b.n	24822 <tmc8461_esc_read_data+0x16>

00024846 <tmc8461_esc_read_8>:

uint8_t tmc8461_esc_read_8(TMC8461TypeDef *tmc8461, uint16_t address)
{
   24846:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer = 0;
   24848:	2300      	movs	r3, #0
{
   2484a:	460a      	mov	r2, r1
	uint8_t buffer = 0;
   2484c:	f88d 3007 	strb.w	r3, [sp, #7]

	tmc8461_esc_read_data(tmc8461, &buffer, address, 1);
   24850:	f10d 0107 	add.w	r1, sp, #7
   24854:	2301      	movs	r3, #1
   24856:	f7ff ffd9 	bl	2480c <tmc8461_esc_read_data>

	return buffer;
}
   2485a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2485e:	b003      	add	sp, #12
   24860:	f85d fb04 	ldr.w	pc, [sp], #4

00024864 <tmc8461_esc_read_16>:

uint16_t tmc8461_esc_read_16(TMC8461TypeDef *tmc8461, uint16_t address)
{
   24864:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];

	tmc8461_esc_read_data(tmc8461, data, address, 2);
   24866:	2302      	movs	r3, #2
{
   24868:	460a      	mov	r2, r1
	tmc8461_esc_read_data(tmc8461, data, address, 2);
   2486a:	a901      	add	r1, sp, #4
   2486c:	f7ff ffce 	bl	2480c <tmc8461_esc_read_data>

	return _8_16(data[1], data[0]);
   24870:	f89d 0005 	ldrb.w	r0, [sp, #5]
   24874:	f89d 3004 	ldrb.w	r3, [sp, #4]
}
   24878:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   2487c:	b003      	add	sp, #12
   2487e:	f85d fb04 	ldr.w	pc, [sp], #4

00024882 <tmc8461_esc_read_32>:

uint32_t tmc8461_esc_read_32(TMC8461TypeDef *tmc8461, uint16_t address)
{
   24882:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[4];

	tmc8461_esc_read_data(tmc8461, data, address, 4);
   24884:	2304      	movs	r3, #4
{
   24886:	460a      	mov	r2, r1
	tmc8461_esc_read_data(tmc8461, data, address, 4);
   24888:	eb0d 0103 	add.w	r1, sp, r3
   2488c:	f7ff ffbe 	bl	2480c <tmc8461_esc_read_data>

	return _8_32(data[3], data[2], data[1], data[0]);
}
   24890:	9801      	ldr	r0, [sp, #4]
   24892:	b003      	add	sp, #12
   24894:	f85d fb04 	ldr.w	pc, [sp], #4

00024898 <tmc8461_esc_write_data>:

void tmc8461_esc_write_data(TMC8461TypeDef *tmc8461, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2489c:	460f      	mov	r7, r1
	tmc8461_esc_write(tmc8461, address);
   2489e:	4611      	mov	r1, r2
{
   248a0:	461d      	mov	r5, r3
   248a2:	4606      	mov	r6, r0
	tmc8461_esc_write(tmc8461, address);
   248a4:	f7ff ff42 	bl	2472c <tmc8461_esc_write>

	for(uint16_t i = 0; i < len; i++)
   248a8:	2400      	movs	r4, #0
		tmc8461_readWrite(tmc8461->config_esc->channel, data_ptr[i], (i < len - 1) ? false : true);
   248aa:	f105 38ff 	add.w	r8, r5, #4294967295
	for(uint16_t i = 0; i < len; i++)
   248ae:	42ac      	cmp	r4, r5
   248b0:	d101      	bne.n	248b6 <tmc8461_esc_write_data+0x1e>
}
   248b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc8461_readWrite(tmc8461->config_esc->channel, data_ptr[i], (i < len - 1) ? false : true);
   248b6:	6833      	ldr	r3, [r6, #0]
   248b8:	5d39      	ldrb	r1, [r7, r4]
   248ba:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   248be:	45a0      	cmp	r8, r4
   248c0:	bfcc      	ite	gt
   248c2:	2200      	movgt	r2, #0
   248c4:	2201      	movle	r2, #1
   248c6:	f7f7 f8e9 	bl	1ba9c <tmc8461_readWrite>
	for(uint16_t i = 0; i < len; i++)
   248ca:	3401      	adds	r4, #1
   248cc:	e7ef      	b.n	248ae <tmc8461_esc_write_data+0x16>

000248ce <tmc8461_esc_write_8>:

void tmc8461_esc_write_8(TMC8461TypeDef *tmc8461, uint16_t address, uint8_t value)
{
   248ce:	b507      	push	{r0, r1, r2, lr}
	tmc8461_esc_write_data(tmc8461, &value, address, 1);
   248d0:	2301      	movs	r3, #1
{
   248d2:	f88d 2007 	strb.w	r2, [sp, #7]
	tmc8461_esc_write_data(tmc8461, &value, address, 1);
   248d6:	460a      	mov	r2, r1
   248d8:	f10d 0107 	add.w	r1, sp, #7
   248dc:	f7ff ffdc 	bl	24898 <tmc8461_esc_write_data>
}
   248e0:	b003      	add	sp, #12
   248e2:	f85d fb04 	ldr.w	pc, [sp], #4

000248e6 <tmc8461_esc_write_16>:

void tmc8461_esc_write_16(TMC8461TypeDef *tmc8461, uint16_t address, uint16_t value)
{
   248e6:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];

	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	tmc8461_esc_write_data(tmc8461, data, address, 2);
   248e8:	2302      	movs	r3, #2
	data[0] = BYTE(value, 0);
   248ea:	f8ad 2004 	strh.w	r2, [sp, #4]
	tmc8461_esc_write_data(tmc8461, data, address, 2);
   248ee:	460a      	mov	r2, r1
   248f0:	a901      	add	r1, sp, #4
   248f2:	f7ff ffd1 	bl	24898 <tmc8461_esc_write_data>
}
   248f6:	b003      	add	sp, #12
   248f8:	f85d fb04 	ldr.w	pc, [sp], #4

000248fc <tmc8461_esc_write_32>:

void tmc8461_esc_write_32(TMC8461TypeDef *tmc8461, uint16_t address, uint32_t value)
{
   248fc:	b507      	push	{r0, r1, r2, lr}

	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);
	tmc8461_esc_write_data(tmc8461, data, address, 4);
   248fe:	2304      	movs	r3, #4
	data[0] = BYTE(value, 0);
   24900:	9201      	str	r2, [sp, #4]
	tmc8461_esc_write_data(tmc8461, data, address, 4);
   24902:	460a      	mov	r2, r1
   24904:	eb0d 0103 	add.w	r1, sp, r3
   24908:	f7ff ffc6 	bl	24898 <tmc8461_esc_write_data>
}
   2490c:	b003      	add	sp, #12
   2490e:	f85d fb04 	ldr.w	pc, [sp], #4

00024912 <tmc8461_mfc_read_data>:

void tmc8461_mfc_read_data(TMC8461TypeDef *tmc8461, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24916:	460f      	mov	r7, r1
	tmc8461_mfc_read(tmc8461, address);
   24918:	4611      	mov	r1, r2
{
   2491a:	461d      	mov	r5, r3
   2491c:	4606      	mov	r6, r0
	tmc8461_mfc_read(tmc8461, address);
   2491e:	f7ff ff28 	bl	24772 <tmc8461_mfc_read>

	for (uint16_t i = 0; i < len; i++)
   24922:	2400      	movs	r4, #0
		data_ptr[i] = tmc8461_readWrite(tmc8461->config_mfc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24924:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   24928:	42ac      	cmp	r4, r5
   2492a:	d101      	bne.n	24930 <tmc8461_mfc_read_data+0x1e>
}
   2492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_ptr[i] = tmc8461_readWrite(tmc8461->config_mfc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24930:	45a0      	cmp	r8, r4
   24932:	6873      	ldr	r3, [r6, #4]
   24934:	bfcc      	ite	gt
   24936:	2200      	movgt	r2, #0
   24938:	2201      	movle	r2, #1
   2493a:	4251      	negs	r1, r2
   2493c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24940:	b2c9      	uxtb	r1, r1
   24942:	f7f7 f8ab 	bl	1ba9c <tmc8461_readWrite>
   24946:	5538      	strb	r0, [r7, r4]
	for (uint16_t i = 0; i < len; i++)
   24948:	3401      	adds	r4, #1
   2494a:	e7ed      	b.n	24928 <tmc8461_mfc_read_data+0x16>

0002494c <tmc8461_mfc_read_32>:

void tmc8461_mfc_read_32(TMC8461TypeDef *tmc8461, uint16_t address, uint32_t *value)
{
   2494c:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[4];

	tmc8461_mfc_read_data(tmc8461, data, address, 4);
   2494e:	2304      	movs	r3, #4
{
   24950:	4614      	mov	r4, r2
	tmc8461_mfc_read_data(tmc8461, data, address, 4);
   24952:	460a      	mov	r2, r1
   24954:	eb0d 0103 	add.w	r1, sp, r3
   24958:	f7ff ffdb 	bl	24912 <tmc8461_mfc_read_data>

	*value = _8_32(data[3], data[2], data[1], data[0]);
   2495c:	9b01      	ldr	r3, [sp, #4]
   2495e:	6023      	str	r3, [r4, #0]
}
   24960:	b002      	add	sp, #8
   24962:	bd10      	pop	{r4, pc}

00024964 <tmc8461_mfc_read_64>:

void tmc8461_mfc_read_64(TMC8461TypeDef *tmc8461, uint16_t address, uint64_t *value)
{
   24964:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[8];

	tmc8461_mfc_read_data(tmc8461, data, address, 8);
   24966:	2308      	movs	r3, #8
{
   24968:	4614      	mov	r4, r2
	tmc8461_mfc_read_data(tmc8461, data, address, 8);
   2496a:	460a      	mov	r2, r1
   2496c:	4669      	mov	r1, sp
   2496e:	f7ff ffd0 	bl	24912 <tmc8461_mfc_read_data>

	*value = _8_64((uint64_t)data[7], (uint64_t)data[6], (uint64_t)data[5], (uint64_t)data[4], (uint64_t)data[3], (uint64_t)data[2], (uint64_t)data[1], (uint64_t)data[0]);
   24972:	e9dd 2300 	ldrd	r2, r3, [sp]
   24976:	e9c4 2300 	strd	r2, r3, [r4]
}
   2497a:	b002      	add	sp, #8
   2497c:	bd10      	pop	{r4, pc}

0002497e <tmc8461_mfc_read_auto>:

void tmc8461_mfc_read_auto(TMC8461TypeDef *tmc8461, uint16_t address, uint8_t *value)
{
   2497e:	b430      	push	{r4, r5}
   24980:	460c      	mov	r4, r1
	if(address == TMC8461_MFC_SPI_RX_DATA || address == TMC8461_MFC_SPI_TX_DATA || address == TMC8461_MFC_PWM4) {
   24982:	f024 0310 	bic.w	r3, r4, #16
   24986:	2b60      	cmp	r3, #96	; 0x60
{
   24988:	4605      	mov	r5, r0
   2498a:	4611      	mov	r1, r2
	if(address == TMC8461_MFC_SPI_RX_DATA || address == TMC8461_MFC_SPI_TX_DATA || address == TMC8461_MFC_PWM4) {
   2498c:	d002      	beq.n	24994 <tmc8461_mfc_read_auto+0x16>
   2498e:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
   24992:	d105      	bne.n	249a0 <tmc8461_mfc_read_auto+0x22>
		// 64 bit
		tmc8461_mfc_read_data(tmc8461, value, address, 8);
   24994:	2308      	movs	r3, #8
   24996:	4622      	mov	r2, r4
   24998:	4628      	mov	r0, r5
	} else {
		// 32 bit
		tmc8461_mfc_read_data(tmc8461, value, address, 4);
	}
}
   2499a:	bc30      	pop	{r4, r5}
		tmc8461_mfc_read_data(tmc8461, value, address, 4);
   2499c:	f7ff bfb9 	b.w	24912 <tmc8461_mfc_read_data>
   249a0:	2304      	movs	r3, #4
   249a2:	4622      	mov	r2, r4
   249a4:	e7f9      	b.n	2499a <tmc8461_mfc_read_auto+0x1c>

000249a6 <tmc8461_mfc_write_data>:

void tmc8461_mfc_write_data(TMC8461TypeDef *tmc8461, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   249a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249aa:	460f      	mov	r7, r1
	tmc8461_mfc_write(tmc8461, address);
   249ac:	4611      	mov	r1, r2
{
   249ae:	461d      	mov	r5, r3
   249b0:	4606      	mov	r6, r0
	tmc8461_mfc_write(tmc8461, address);
   249b2:	f7ff ff08 	bl	247c6 <tmc8461_mfc_write>

	for (uint16_t i = 0; i < len; i++)
   249b6:	2400      	movs	r4, #0
		tmc8461_readWrite(tmc8461->config_mfc->channel, data_ptr[i], (i < len - 1) ? false : true);
   249b8:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   249bc:	42ac      	cmp	r4, r5
   249be:	d101      	bne.n	249c4 <tmc8461_mfc_write_data+0x1e>
}
   249c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc8461_readWrite(tmc8461->config_mfc->channel, data_ptr[i], (i < len - 1) ? false : true);
   249c4:	6873      	ldr	r3, [r6, #4]
   249c6:	5d39      	ldrb	r1, [r7, r4]
   249c8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   249cc:	45a0      	cmp	r8, r4
   249ce:	bfcc      	ite	gt
   249d0:	2200      	movgt	r2, #0
   249d2:	2201      	movle	r2, #1
   249d4:	f7f7 f862 	bl	1ba9c <tmc8461_readWrite>
	for (uint16_t i = 0; i < len; i++)
   249d8:	3401      	adds	r4, #1
   249da:	e7ef      	b.n	249bc <tmc8461_mfc_write_data+0x16>

000249dc <tmc8461_mfc_write_32>:

void tmc8461_mfc_write_32(TMC8461TypeDef *tmc8461, uint16_t address, uint32_t value)
{
   249dc:	b507      	push	{r0, r1, r2, lr}
	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);

	tmc8461_mfc_write_data(tmc8461, data, address, 4);
   249de:	2304      	movs	r3, #4
	data[0] = BYTE(value, 0);
   249e0:	9201      	str	r2, [sp, #4]
	tmc8461_mfc_write_data(tmc8461, data, address, 4);
   249e2:	460a      	mov	r2, r1
   249e4:	eb0d 0103 	add.w	r1, sp, r3
   249e8:	f7ff ffdd 	bl	249a6 <tmc8461_mfc_write_data>
}
   249ec:	b003      	add	sp, #12
   249ee:	f85d fb04 	ldr.w	pc, [sp], #4

000249f2 <tmc8461_mfc_write_64>:

void tmc8461_mfc_write_64(TMC8461TypeDef *tmc8461, uint16_t address, uint64_t value)
{
   249f2:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[8];

	data[0] = BYTE(value, 0);
   249f4:	9200      	str	r2, [sp, #0]
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);
	data[4] = BYTE(value, 4);
	data[5] = BYTE(value, 5);
   249f6:	0a1a      	lsrs	r2, r3, #8
	data[4] = BYTE(value, 4);
   249f8:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = BYTE(value, 5);
   249fc:	f88d 2005 	strb.w	r2, [sp, #5]
	data[6] = BYTE(value, 6);
   24a00:	0c1a      	lsrs	r2, r3, #16
	data[7] = BYTE(value, 7);
   24a02:	0e1b      	lsrs	r3, r3, #24
	data[6] = BYTE(value, 6);
   24a04:	f88d 2006 	strb.w	r2, [sp, #6]
	data[7] = BYTE(value, 7);
   24a08:	f88d 3007 	strb.w	r3, [sp, #7]

	tmc8461_mfc_write_data(tmc8461, data, address, 8);
   24a0c:	460a      	mov	r2, r1
   24a0e:	2308      	movs	r3, #8
   24a10:	4669      	mov	r1, sp
   24a12:	f7ff ffc8 	bl	249a6 <tmc8461_mfc_write_data>
}
   24a16:	b003      	add	sp, #12
   24a18:	f85d fb04 	ldr.w	pc, [sp], #4

00024a1c <tmc8461_mfc_write_auto>:

void tmc8461_mfc_write_auto(TMC8461TypeDef *tmc8461, uint16_t address, uint8_t *value)
{
   24a1c:	b430      	push	{r4, r5}
   24a1e:	460c      	mov	r4, r1
	if(address == TMC8461_MFC_SPI_RX_DATA || address == TMC8461_MFC_SPI_TX_DATA || address == TMC8461_MFC_PWM4) {
   24a20:	f024 0310 	bic.w	r3, r4, #16
   24a24:	2b60      	cmp	r3, #96	; 0x60
{
   24a26:	4605      	mov	r5, r0
   24a28:	4611      	mov	r1, r2
	if(address == TMC8461_MFC_SPI_RX_DATA || address == TMC8461_MFC_SPI_TX_DATA || address == TMC8461_MFC_PWM4) {
   24a2a:	d002      	beq.n	24a32 <tmc8461_mfc_write_auto+0x16>
   24a2c:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
   24a30:	d105      	bne.n	24a3e <tmc8461_mfc_write_auto+0x22>
		// 64 bit
		tmc8461_mfc_write_data(tmc8461, value, address, 8);
   24a32:	2308      	movs	r3, #8
   24a34:	4622      	mov	r2, r4
   24a36:	4628      	mov	r0, r5
	} else {
		// 32 bit
		tmc8461_mfc_write_data(tmc8461, value, address, 4);
	}
}
   24a38:	bc30      	pop	{r4, r5}
		tmc8461_mfc_write_data(tmc8461, value, address, 4);
   24a3a:	f7ff bfb4 	b.w	249a6 <tmc8461_mfc_write_data>
   24a3e:	2304      	movs	r3, #4
   24a40:	4622      	mov	r2, r4
   24a42:	e7f9      	b.n	24a38 <tmc8461_mfc_write_auto+0x1c>

00024a44 <tmc8461_initConfig>:

void tmc8461_initConfig(TMC8461TypeDef *tmc8461, ConfigurationTypeDef *tmc8461_config_esc, ConfigurationTypeDef *tmc8461_config_mfc)
{
   24a44:	b510      	push	{r4, lr}
	tmc8461->config_esc = tmc8461_config_esc;
	tmc8461->config_mfc = tmc8461_config_mfc;
   24a46:	e9c0 1200 	strd	r1, r2, [r0]
{
   24a4a:	4604      	mov	r4, r0

	while(TMC8461_FIELD_READ(tmc8461, tmc8461_esc_read_16, TMC8461_ESC_PDI_CTRL, TMC8461_ESC_PDI_MODE_MASK, TMC8461_ESC_PDI_MODE_SHIFT) != TMC8461_PDI_SPI_SLAVE);
   24a4c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   24a50:	4620      	mov	r0, r4
   24a52:	f7ff ff07 	bl	24864 <tmc8461_esc_read_16>
   24a56:	b2c0      	uxtb	r0, r0
   24a58:	2805      	cmp	r0, #5
   24a5a:	d1f7      	bne.n	24a4c <tmc8461_initConfig+0x8>
	tmc8461_esc_write_16(tmc8461, TMC8461_ESC_AL_STATUS, FIELD_SET(TMC8461_EC_STATE_INIT, TMC8461_ESC_AL_ERROR_MASK, TMC8461_ESC_AL_ERROR_SHIFT, true));
   24a5c:	4620      	mov	r0, r4
   24a5e:	2211      	movs	r2, #17
   24a60:	f44f 7198 	mov.w	r1, #304	; 0x130
   24a64:	f7ff ff3f 	bl	248e6 <tmc8461_esc_write_16>
	tmc8461_esc_write_16(tmc8461, TMC8461_ESC_AL_CODE, 0x0000);
   24a68:	4620      	mov	r0, r4
   24a6a:	2200      	movs	r2, #0
   24a6c:	f44f 719a 	mov.w	r1, #308	; 0x134
   24a70:	f7ff ff39 	bl	248e6 <tmc8461_esc_write_16>
	tmc8461_esc_write_16(tmc8461, TMC8461_ESC_AL_EVENT_MASK_LO, 0xFF0E);
   24a74:	4620      	mov	r0, r4
   24a76:	f64f 720e 	movw	r2, #65294	; 0xff0e
}
   24a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tmc8461_esc_write_16(tmc8461, TMC8461_ESC_AL_EVENT_MASK_LO, 0xFF0E);
   24a7e:	f44f 7101 	mov.w	r1, #516	; 0x204
   24a82:	f7ff bf30 	b.w	248e6 <tmc8461_esc_write_16>

00024a86 <tmc8462_esc_read>:
#include "TMC8462.h"

extern uint8_t tmc8462_readWrite(uint8_t channel, uint8_t data, uint8_t lastTransfer);

void tmc8462_esc_read(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24a86:	b538      	push	{r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_esc->channel, address >> 5, false);
   24a88:	6803      	ldr	r3, [r0, #0]
{
   24a8a:	4605      	mov	r5, r0
   24a8c:	460c      	mov	r4, r1
	tmc8462_readWrite(tmc8462->config_esc->channel, address >> 5, false);
   24a8e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24a92:	2200      	movs	r2, #0
   24a94:	f3c1 1147 	ubfx	r1, r1, #5, #8
   24a98:	f7f7 f9b4 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_esc->channel, (address << 3) | TMC8462_CMD_ADDR_EXT, false);
   24a9c:	682b      	ldr	r3, [r5, #0]
   24a9e:	00e1      	lsls	r1, r4, #3
   24aa0:	f041 0106 	orr.w	r1, r1, #6
   24aa4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24aa8:	2200      	movs	r2, #0
   24aaa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24aae:	f7f7 f9a9 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_READ_WAIT << 2), false);
   24ab2:	682b      	ldr	r3, [r5, #0]
   24ab4:	0a21      	lsrs	r1, r4, #8
   24ab6:	f021 011f 	bic.w	r1, r1, #31
   24aba:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24abe:	2200      	movs	r2, #0
   24ac0:	f041 010c 	orr.w	r1, r1, #12
   24ac4:	f7f7 f99e 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_esc->channel, 0xFF, false);
   24ac8:	682b      	ldr	r3, [r5, #0]
   24aca:	2200      	movs	r2, #0
   24acc:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24ad0:	21ff      	movs	r1, #255	; 0xff
}
   24ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_esc->channel, 0xFF, false);
   24ad6:	f7f7 b995 	b.w	1be04 <tmc8462_readWrite>

00024ada <tmc8462_esc_write>:

void tmc8462_esc_write(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24ada:	b538      	push	{r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_esc->channel, address >> 5, false);
   24adc:	6803      	ldr	r3, [r0, #0]
{
   24ade:	4605      	mov	r5, r0
   24ae0:	460c      	mov	r4, r1
	tmc8462_readWrite(tmc8462->config_esc->channel, address >> 5, false);
   24ae2:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24ae6:	2200      	movs	r2, #0
   24ae8:	f3c1 1147 	ubfx	r1, r1, #5, #8
   24aec:	f7f7 f98a 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_esc->channel, (address << 3) | TMC8462_CMD_ADDR_EXT, false);
   24af0:	682b      	ldr	r3, [r5, #0]
   24af2:	00e1      	lsls	r1, r4, #3
   24af4:	f041 0106 	orr.w	r1, r1, #6
   24af8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24afc:	2200      	movs	r2, #0
   24afe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24b02:	f7f7 f97f 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_WRITE << 2), false);
   24b06:	682b      	ldr	r3, [r5, #0]
   24b08:	0a21      	lsrs	r1, r4, #8
   24b0a:	f021 011f 	bic.w	r1, r1, #31
   24b0e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b12:	2200      	movs	r2, #0
}
   24b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_esc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_WRITE << 2), false);
   24b18:	f041 0110 	orr.w	r1, r1, #16
   24b1c:	f7f7 b972 	b.w	1be04 <tmc8462_readWrite>

00024b20 <tmc8462_mfc_read>:

void tmc8462_mfc_read(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24b20:	b538      	push	{r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_mfc->channel, address >> 5, false);
   24b22:	6843      	ldr	r3, [r0, #4]
{
   24b24:	4605      	mov	r5, r0
   24b26:	460c      	mov	r4, r1
	tmc8462_readWrite(tmc8462->config_mfc->channel, address >> 5, false);
   24b28:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b2c:	2200      	movs	r2, #0
   24b2e:	f3c1 1147 	ubfx	r1, r1, #5, #8
   24b32:	f7f7 f967 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_mfc->channel, (address << 3) | TMC8462_CMD_ADDR_EXT, false);
   24b36:	686b      	ldr	r3, [r5, #4]
   24b38:	00e1      	lsls	r1, r4, #3
   24b3a:	f041 0106 	orr.w	r1, r1, #6
   24b3e:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b42:	2200      	movs	r2, #0
   24b44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24b48:	f7f7 f95c 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_READ_WAIT << 2), false);
   24b4c:	686b      	ldr	r3, [r5, #4]
   24b4e:	0a21      	lsrs	r1, r4, #8
   24b50:	f021 011f 	bic.w	r1, r1, #31
   24b54:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b58:	2200      	movs	r2, #0
   24b5a:	f041 010c 	orr.w	r1, r1, #12
   24b5e:	f7f7 f951 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_mfc->channel, 0xFF, false);
   24b62:	686b      	ldr	r3, [r5, #4]
   24b64:	2200      	movs	r2, #0
   24b66:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b6a:	21ff      	movs	r1, #255	; 0xff
}
   24b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_mfc->channel, 0xFF, false);
   24b70:	f7f7 b948 	b.w	1be04 <tmc8462_readWrite>

00024b74 <tmc8462_mfc_write>:

void tmc8462_mfc_write(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24b74:	b538      	push	{r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_mfc->channel, address >> 5, false);
   24b76:	6843      	ldr	r3, [r0, #4]
{
   24b78:	4605      	mov	r5, r0
   24b7a:	460c      	mov	r4, r1
	tmc8462_readWrite(tmc8462->config_mfc->channel, address >> 5, false);
   24b7c:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b80:	2200      	movs	r2, #0
   24b82:	f3c1 1147 	ubfx	r1, r1, #5, #8
   24b86:	f7f7 f93d 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_mfc->channel, (address << 3) | TMC8462_CMD_ADDR_EXT, false);
   24b8a:	686b      	ldr	r3, [r5, #4]
   24b8c:	00e1      	lsls	r1, r4, #3
   24b8e:	f041 0106 	orr.w	r1, r1, #6
   24b92:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24b96:	2200      	movs	r2, #0
   24b98:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   24b9c:	f7f7 f932 	bl	1be04 <tmc8462_readWrite>
	tmc8462_readWrite(tmc8462->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_WRITE << 2), false);
   24ba0:	686b      	ldr	r3, [r5, #4]
   24ba2:	0a21      	lsrs	r1, r4, #8
   24ba4:	f021 011f 	bic.w	r1, r1, #31
   24ba8:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24bac:	2200      	movs	r2, #0
}
   24bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tmc8462_readWrite(tmc8462->config_mfc->channel, ((address >> 8) & 0xE0) | (TMC8462_CMD_WRITE << 2), false);
   24bb2:	f041 0110 	orr.w	r1, r1, #16
   24bb6:	f7f7 b925 	b.w	1be04 <tmc8462_readWrite>

00024bba <tmc8462_esc_read_data>:

void tmc8462_esc_read_data(TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24bbe:	460f      	mov	r7, r1
	tmc8462_esc_read(tmc8462, address);
   24bc0:	4611      	mov	r1, r2
{
   24bc2:	461d      	mov	r5, r3
   24bc4:	4606      	mov	r6, r0
	tmc8462_esc_read(tmc8462, address);
   24bc6:	f7ff ff5e 	bl	24a86 <tmc8462_esc_read>

	for (uint16_t i = 0; i < len; i++)
   24bca:	2400      	movs	r4, #0
		data_ptr[i] = tmc8462_readWrite(tmc8462->config_esc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24bcc:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   24bd0:	42ac      	cmp	r4, r5
   24bd2:	d101      	bne.n	24bd8 <tmc8462_esc_read_data+0x1e>
}
   24bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_ptr[i] = tmc8462_readWrite(tmc8462->config_esc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24bd8:	45a0      	cmp	r8, r4
   24bda:	6833      	ldr	r3, [r6, #0]
   24bdc:	bfcc      	ite	gt
   24bde:	2200      	movgt	r2, #0
   24be0:	2201      	movle	r2, #1
   24be2:	4251      	negs	r1, r2
   24be4:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24be8:	b2c9      	uxtb	r1, r1
   24bea:	f7f7 f90b 	bl	1be04 <tmc8462_readWrite>
   24bee:	5538      	strb	r0, [r7, r4]
	for (uint16_t i = 0; i < len; i++)
   24bf0:	3401      	adds	r4, #1
   24bf2:	e7ed      	b.n	24bd0 <tmc8462_esc_read_data+0x16>

00024bf4 <tmc8462_esc_read_8>:

uint8_t tmc8462_esc_read_8(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24bf4:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer = 0;
   24bf6:	2300      	movs	r3, #0
{
   24bf8:	460a      	mov	r2, r1
	uint8_t buffer = 0;
   24bfa:	f88d 3007 	strb.w	r3, [sp, #7]

	tmc8462_esc_read_data(tmc8462, &buffer, address, 1);
   24bfe:	f10d 0107 	add.w	r1, sp, #7
   24c02:	2301      	movs	r3, #1
   24c04:	f7ff ffd9 	bl	24bba <tmc8462_esc_read_data>

	return buffer;
}
   24c08:	f89d 0007 	ldrb.w	r0, [sp, #7]
   24c0c:	b003      	add	sp, #12
   24c0e:	f85d fb04 	ldr.w	pc, [sp], #4

00024c12 <tmc8462_esc_read_16>:

uint16_t tmc8462_esc_read_16(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24c12:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];

	tmc8462_esc_read_data(tmc8462, data, address, 2);
   24c14:	2302      	movs	r3, #2
{
   24c16:	460a      	mov	r2, r1
	tmc8462_esc_read_data(tmc8462, data, address, 2);
   24c18:	a901      	add	r1, sp, #4
   24c1a:	f7ff ffce 	bl	24bba <tmc8462_esc_read_data>

	return _8_16(data[1], data[0]);
   24c1e:	f89d 0005 	ldrb.w	r0, [sp, #5]
   24c22:	f89d 3004 	ldrb.w	r3, [sp, #4]
}
   24c26:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   24c2a:	b003      	add	sp, #12
   24c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00024c30 <tmc8462_esc_read_32>:

uint32_t tmc8462_esc_read_32(TMC8462TypeDef *tmc8462, uint16_t address)
{
   24c30:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[4];

	tmc8462_esc_read_data(tmc8462, data, address, 4);
   24c32:	2304      	movs	r3, #4
{
   24c34:	460a      	mov	r2, r1
	tmc8462_esc_read_data(tmc8462, data, address, 4);
   24c36:	eb0d 0103 	add.w	r1, sp, r3
   24c3a:	f7ff ffbe 	bl	24bba <tmc8462_esc_read_data>

	return _8_32(data[3], data[2], data[1], data[0]);
}
   24c3e:	9801      	ldr	r0, [sp, #4]
   24c40:	b003      	add	sp, #12
   24c42:	f85d fb04 	ldr.w	pc, [sp], #4

00024c46 <tmc8462_esc_write_data>:

void tmc8462_esc_write_data(TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c4a:	460f      	mov	r7, r1
	tmc8462_esc_write(tmc8462, address);
   24c4c:	4611      	mov	r1, r2
{
   24c4e:	461d      	mov	r5, r3
   24c50:	4606      	mov	r6, r0
	tmc8462_esc_write(tmc8462, address);
   24c52:	f7ff ff42 	bl	24ada <tmc8462_esc_write>

	for(uint16_t i = 0; i < len; i++)
   24c56:	2400      	movs	r4, #0
		tmc8462_readWrite(tmc8462->config_esc->channel, data_ptr[i], (i < len - 1) ? false : true);
   24c58:	f105 38ff 	add.w	r8, r5, #4294967295
	for(uint16_t i = 0; i < len; i++)
   24c5c:	42ac      	cmp	r4, r5
   24c5e:	d101      	bne.n	24c64 <tmc8462_esc_write_data+0x1e>
}
   24c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc8462_readWrite(tmc8462->config_esc->channel, data_ptr[i], (i < len - 1) ? false : true);
   24c64:	6833      	ldr	r3, [r6, #0]
   24c66:	5d39      	ldrb	r1, [r7, r4]
   24c68:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24c6c:	45a0      	cmp	r8, r4
   24c6e:	bfcc      	ite	gt
   24c70:	2200      	movgt	r2, #0
   24c72:	2201      	movle	r2, #1
   24c74:	f7f7 f8c6 	bl	1be04 <tmc8462_readWrite>
	for(uint16_t i = 0; i < len; i++)
   24c78:	3401      	adds	r4, #1
   24c7a:	e7ef      	b.n	24c5c <tmc8462_esc_write_data+0x16>

00024c7c <tmc8462_esc_write_8>:

void tmc8462_esc_write_8(TMC8462TypeDef *tmc8462, uint16_t address, uint8_t value)
{
   24c7c:	b507      	push	{r0, r1, r2, lr}
	tmc8462_esc_write_data(tmc8462, &value, address, 1);
   24c7e:	2301      	movs	r3, #1
{
   24c80:	f88d 2007 	strb.w	r2, [sp, #7]
	tmc8462_esc_write_data(tmc8462, &value, address, 1);
   24c84:	460a      	mov	r2, r1
   24c86:	f10d 0107 	add.w	r1, sp, #7
   24c8a:	f7ff ffdc 	bl	24c46 <tmc8462_esc_write_data>
}
   24c8e:	b003      	add	sp, #12
   24c90:	f85d fb04 	ldr.w	pc, [sp], #4

00024c94 <tmc8462_esc_write_16>:

void tmc8462_esc_write_16(TMC8462TypeDef *tmc8462, uint16_t address, uint16_t value)
{
   24c94:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[2];

	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	tmc8462_esc_write_data(tmc8462, data, address, 2);
   24c96:	2302      	movs	r3, #2
	data[0] = BYTE(value, 0);
   24c98:	f8ad 2004 	strh.w	r2, [sp, #4]
	tmc8462_esc_write_data(tmc8462, data, address, 2);
   24c9c:	460a      	mov	r2, r1
   24c9e:	a901      	add	r1, sp, #4
   24ca0:	f7ff ffd1 	bl	24c46 <tmc8462_esc_write_data>
}
   24ca4:	b003      	add	sp, #12
   24ca6:	f85d fb04 	ldr.w	pc, [sp], #4

00024caa <tmc8462_esc_write_32>:

void tmc8462_esc_write_32(TMC8462TypeDef *tmc8462, uint16_t address, uint32_t value)
{
   24caa:	b507      	push	{r0, r1, r2, lr}

	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);
	tmc8462_esc_write_data(tmc8462, data, address, 4);
   24cac:	2304      	movs	r3, #4
	data[0] = BYTE(value, 0);
   24cae:	9201      	str	r2, [sp, #4]
	tmc8462_esc_write_data(tmc8462, data, address, 4);
   24cb0:	460a      	mov	r2, r1
   24cb2:	eb0d 0103 	add.w	r1, sp, r3
   24cb6:	f7ff ffc6 	bl	24c46 <tmc8462_esc_write_data>
}
   24cba:	b003      	add	sp, #12
   24cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00024cc0 <tmc8462_mfc_read_data>:

void tmc8462_mfc_read_data(TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24cc4:	460f      	mov	r7, r1
	tmc8462_mfc_read(tmc8462, address);
   24cc6:	4611      	mov	r1, r2
{
   24cc8:	461d      	mov	r5, r3
   24cca:	4606      	mov	r6, r0
	tmc8462_mfc_read(tmc8462, address);
   24ccc:	f7ff ff28 	bl	24b20 <tmc8462_mfc_read>

	for (uint16_t i = 0; i < len; i++)
   24cd0:	2400      	movs	r4, #0
		data_ptr[i] = tmc8462_readWrite(tmc8462->config_mfc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24cd2:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   24cd6:	42ac      	cmp	r4, r5
   24cd8:	d101      	bne.n	24cde <tmc8462_mfc_read_data+0x1e>
}
   24cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_ptr[i] = tmc8462_readWrite(tmc8462->config_mfc->channel, (i < len - 1) ? 0x00 : 0xFF, (i < len - 1) ? false : true);
   24cde:	45a0      	cmp	r8, r4
   24ce0:	6873      	ldr	r3, [r6, #4]
   24ce2:	bfcc      	ite	gt
   24ce4:	2200      	movgt	r2, #0
   24ce6:	2201      	movle	r2, #1
   24ce8:	4251      	negs	r1, r2
   24cea:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24cee:	b2c9      	uxtb	r1, r1
   24cf0:	f7f7 f888 	bl	1be04 <tmc8462_readWrite>
   24cf4:	5538      	strb	r0, [r7, r4]
	for (uint16_t i = 0; i < len; i++)
   24cf6:	3401      	adds	r4, #1
   24cf8:	e7ed      	b.n	24cd6 <tmc8462_mfc_read_data+0x16>

00024cfa <tmc8462_mfc_read_32>:

void tmc8462_mfc_read_32(TMC8462TypeDef *tmc8462, uint16_t address, uint32_t *value)
{
   24cfa:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[4];

	tmc8462_mfc_read_data(tmc8462, data, address, 4);
   24cfc:	2304      	movs	r3, #4
{
   24cfe:	4614      	mov	r4, r2
	tmc8462_mfc_read_data(tmc8462, data, address, 4);
   24d00:	460a      	mov	r2, r1
   24d02:	eb0d 0103 	add.w	r1, sp, r3
   24d06:	f7ff ffdb 	bl	24cc0 <tmc8462_mfc_read_data>

	*value = _8_32(data[3], data[2], data[1], data[0]);
   24d0a:	9b01      	ldr	r3, [sp, #4]
   24d0c:	6023      	str	r3, [r4, #0]
}
   24d0e:	b002      	add	sp, #8
   24d10:	bd10      	pop	{r4, pc}

00024d12 <tmc8462_mfc_read_64>:

void tmc8462_mfc_read_64(TMC8462TypeDef *tmc8462, uint16_t address, uint64_t *value)
{
   24d12:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[8];

	tmc8462_mfc_read_data(tmc8462, data, address, 8);
   24d14:	2308      	movs	r3, #8
{
   24d16:	4614      	mov	r4, r2
	tmc8462_mfc_read_data(tmc8462, data, address, 8);
   24d18:	460a      	mov	r2, r1
   24d1a:	4669      	mov	r1, sp
   24d1c:	f7ff ffd0 	bl	24cc0 <tmc8462_mfc_read_data>

	*value = _8_64((uint64_t)data[7], (uint64_t)data[6], (uint64_t)data[5], (uint64_t)data[4], (uint64_t)data[3], (uint64_t)data[2], (uint64_t)data[1], (uint64_t)data[0]);
   24d20:	e9dd 2300 	ldrd	r2, r3, [sp]
   24d24:	e9c4 2300 	strd	r2, r3, [r4]
}
   24d28:	b002      	add	sp, #8
   24d2a:	bd10      	pop	{r4, pc}

00024d2c <tmc8462_mfc_read_auto>:

void tmc8462_mfc_read_auto(TMC8462TypeDef *tmc8462, uint16_t address, uint8_t *value)
{
   24d2c:	b430      	push	{r4, r5}
   24d2e:	460c      	mov	r4, r1
	if(address == TMC8462_MFC_SPI_RX_DATA || address == TMC8462_MFC_SPI_TX_DATA || address == TMC8462_MFC_PWM4) {
   24d30:	f024 0310 	bic.w	r3, r4, #16
   24d34:	2b60      	cmp	r3, #96	; 0x60
{
   24d36:	4605      	mov	r5, r0
   24d38:	4611      	mov	r1, r2
	if(address == TMC8462_MFC_SPI_RX_DATA || address == TMC8462_MFC_SPI_TX_DATA || address == TMC8462_MFC_PWM4) {
   24d3a:	d002      	beq.n	24d42 <tmc8462_mfc_read_auto+0x16>
   24d3c:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
   24d40:	d105      	bne.n	24d4e <tmc8462_mfc_read_auto+0x22>
		// 64 bit
		tmc8462_mfc_read_data(tmc8462, value, address, 8);
   24d42:	2308      	movs	r3, #8
   24d44:	4622      	mov	r2, r4
   24d46:	4628      	mov	r0, r5
	} else {
		// 32 bit
		tmc8462_mfc_read_data(tmc8462, value, address, 4);
	}
}
   24d48:	bc30      	pop	{r4, r5}
		tmc8462_mfc_read_data(tmc8462, value, address, 4);
   24d4a:	f7ff bfb9 	b.w	24cc0 <tmc8462_mfc_read_data>
   24d4e:	2304      	movs	r3, #4
   24d50:	4622      	mov	r2, r4
   24d52:	e7f9      	b.n	24d48 <tmc8462_mfc_read_auto+0x1c>

00024d54 <tmc8462_mfc_write_data>:

void tmc8462_mfc_write_data(TMC8462TypeDef *tmc8462, uint8_t *data_ptr, uint16_t address, uint16_t len)
{
   24d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d58:	460f      	mov	r7, r1
	tmc8462_mfc_write(tmc8462, address);
   24d5a:	4611      	mov	r1, r2
{
   24d5c:	461d      	mov	r5, r3
   24d5e:	4606      	mov	r6, r0
	tmc8462_mfc_write(tmc8462, address);
   24d60:	f7ff ff08 	bl	24b74 <tmc8462_mfc_write>

	for (uint16_t i = 0; i < len; i++)
   24d64:	2400      	movs	r4, #0
		tmc8462_readWrite(tmc8462->config_mfc->channel, data_ptr[i], (i < len - 1) ? false : true);
   24d66:	f105 38ff 	add.w	r8, r5, #4294967295
	for (uint16_t i = 0; i < len; i++)
   24d6a:	42ac      	cmp	r4, r5
   24d6c:	d101      	bne.n	24d72 <tmc8462_mfc_write_data+0x1e>
}
   24d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmc8462_readWrite(tmc8462->config_mfc->channel, data_ptr[i], (i < len - 1) ? false : true);
   24d72:	6873      	ldr	r3, [r6, #4]
   24d74:	5d39      	ldrb	r1, [r7, r4]
   24d76:	f893 0210 	ldrb.w	r0, [r3, #528]	; 0x210
   24d7a:	45a0      	cmp	r8, r4
   24d7c:	bfcc      	ite	gt
   24d7e:	2200      	movgt	r2, #0
   24d80:	2201      	movle	r2, #1
   24d82:	f7f7 f83f 	bl	1be04 <tmc8462_readWrite>
	for (uint16_t i = 0; i < len; i++)
   24d86:	3401      	adds	r4, #1
   24d88:	e7ef      	b.n	24d6a <tmc8462_mfc_write_data+0x16>

00024d8a <tmc8462_mfc_write_32>:

void tmc8462_mfc_write_32(TMC8462TypeDef *tmc8462, uint16_t address, uint32_t value)
{
   24d8a:	b507      	push	{r0, r1, r2, lr}
	data[0] = BYTE(value, 0);
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);

	tmc8462_mfc_write_data(tmc8462, data, address, 4);
   24d8c:	2304      	movs	r3, #4
	data[0] = BYTE(value, 0);
   24d8e:	9201      	str	r2, [sp, #4]
	tmc8462_mfc_write_data(tmc8462, data, address, 4);
   24d90:	460a      	mov	r2, r1
   24d92:	eb0d 0103 	add.w	r1, sp, r3
   24d96:	f7ff ffdd 	bl	24d54 <tmc8462_mfc_write_data>
}
   24d9a:	b003      	add	sp, #12
   24d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00024da0 <tmc8462_mfc_write_64>:

void tmc8462_mfc_write_64(TMC8462TypeDef *tmc8462, uint16_t address, uint64_t value)
{
   24da0:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[8];

	data[0] = BYTE(value, 0);
   24da2:	9200      	str	r2, [sp, #0]
	data[1] = BYTE(value, 1);
	data[2] = BYTE(value, 2);
	data[3] = BYTE(value, 3);
	data[4] = BYTE(value, 4);
	data[5] = BYTE(value, 5);
   24da4:	0a1a      	lsrs	r2, r3, #8
	data[4] = BYTE(value, 4);
   24da6:	f88d 3004 	strb.w	r3, [sp, #4]
	data[5] = BYTE(value, 5);
   24daa:	f88d 2005 	strb.w	r2, [sp, #5]
	data[6] = BYTE(value, 6);
   24dae:	0c1a      	lsrs	r2, r3, #16
	data[7] = BYTE(value, 7);
   24db0:	0e1b      	lsrs	r3, r3, #24
	data[6] = BYTE(value, 6);
   24db2:	f88d 2006 	strb.w	r2, [sp, #6]
	data[7] = BYTE(value, 7);
   24db6:	f88d 3007 	strb.w	r3, [sp, #7]

	tmc8462_mfc_write_data(tmc8462, data, address, 8);
   24dba:	460a      	mov	r2, r1
   24dbc:	2308      	movs	r3, #8
   24dbe:	4669      	mov	r1, sp
   24dc0:	f7ff ffc8 	bl	24d54 <tmc8462_mfc_write_data>
}
   24dc4:	b003      	add	sp, #12
   24dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00024dca <tmc8462_mfc_write_auto>:

void tmc8462_mfc_write_auto(TMC8462TypeDef *tmc8462, uint16_t address, uint8_t *value)
{
   24dca:	b430      	push	{r4, r5}
   24dcc:	460c      	mov	r4, r1
	if(address == TMC8462_MFC_SPI_RX_DATA || address == TMC8462_MFC_SPI_TX_DATA || address == TMC8462_MFC_PWM4) {
   24dce:	f024 0310 	bic.w	r3, r4, #16
   24dd2:	2b60      	cmp	r3, #96	; 0x60
{
   24dd4:	4605      	mov	r5, r0
   24dd6:	4611      	mov	r1, r2
	if(address == TMC8462_MFC_SPI_RX_DATA || address == TMC8462_MFC_SPI_TX_DATA || address == TMC8462_MFC_PWM4) {
   24dd8:	d002      	beq.n	24de0 <tmc8462_mfc_write_auto+0x16>
   24dda:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
   24dde:	d105      	bne.n	24dec <tmc8462_mfc_write_auto+0x22>
		// 64 bit
		tmc8462_mfc_write_data(tmc8462, value, address, 8);
   24de0:	2308      	movs	r3, #8
   24de2:	4622      	mov	r2, r4
   24de4:	4628      	mov	r0, r5
	} else {
		// 32 bit
		tmc8462_mfc_write_data(tmc8462, value, address, 4);
	}
}
   24de6:	bc30      	pop	{r4, r5}
		tmc8462_mfc_write_data(tmc8462, value, address, 4);
   24de8:	f7ff bfb4 	b.w	24d54 <tmc8462_mfc_write_data>
   24dec:	2304      	movs	r3, #4
   24dee:	4622      	mov	r2, r4
   24df0:	e7f9      	b.n	24de6 <tmc8462_mfc_write_auto+0x1c>

00024df2 <tmc8462_initConfig>:

void tmc8462_initConfig(TMC8462TypeDef *tmc8462, ConfigurationTypeDef *tmc8462_config_esc, ConfigurationTypeDef *tmc8462_config_mfc)
{
   24df2:	b510      	push	{r4, lr}
	tmc8462->config_esc = tmc8462_config_esc;
	tmc8462->config_mfc = tmc8462_config_mfc;
   24df4:	e9c0 1200 	strd	r1, r2, [r0]
{
   24df8:	4604      	mov	r4, r0

	while(TMC8462_FIELD_READ(tmc8462, tmc8462_esc_read_16, TMC8462_ESC_PDI_CTRL, TMC8462_ESC_PDI_MODE_MASK, TMC8462_ESC_PDI_MODE_SHIFT) != TMC8462_PDI_SPI_SLAVE);
   24dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   24dfe:	4620      	mov	r0, r4
   24e00:	f7ff ff07 	bl	24c12 <tmc8462_esc_read_16>
   24e04:	b2c0      	uxtb	r0, r0
   24e06:	2805      	cmp	r0, #5
   24e08:	d1f7      	bne.n	24dfa <tmc8462_initConfig+0x8>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_STATUS, FIELD_SET(TMC8462_EC_STATE_INIT, TMC8462_ESC_AL_ERROR_MASK, TMC8462_ESC_AL_ERROR_SHIFT, true));
   24e0a:	4620      	mov	r0, r4
   24e0c:	2211      	movs	r2, #17
   24e0e:	f44f 7198 	mov.w	r1, #304	; 0x130
   24e12:	f7ff ff3f 	bl	24c94 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_CODE, 0x0000);
   24e16:	4620      	mov	r0, r4
   24e18:	2200      	movs	r2, #0
   24e1a:	f44f 719a 	mov.w	r1, #308	; 0x134
   24e1e:	f7ff ff39 	bl	24c94 <tmc8462_esc_write_16>
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_EVENT_MASK_LO, 0xFF0E);
   24e22:	4620      	mov	r0, r4
   24e24:	f64f 720e 	movw	r2, #65294	; 0xff0e
}
   24e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tmc8462_esc_write_16(tmc8462, TMC8462_ESC_AL_EVENT_MASK_LO, 0xFF0E);
   24e2c:	f44f 7101 	mov.w	r1, #516	; 0x204
   24e30:	f7ff bf30 	b.w	24c94 <tmc8462_esc_write_16>

00024e34 <tmcc160_init>:
// <= SPI wrapper

void tmcc160_init()
{
	// nothing to do here
}
   24e34:	4770      	bx	lr

00024e36 <tmcc160_periodicJob>:

void tmcc160_periodicJob(uint32_t actualSystick)
{
	// nothing to do here
	UNUSED(actualSystick);
}
   24e36:	4770      	bx	lr

00024e38 <tmcc160_delay>:

void tmcc160_delay(uint32_t nCount)
{
	while(nCount--)
   24e38:	3801      	subs	r0, #1
   24e3a:	d200      	bcs.n	24e3e <tmcc160_delay+0x6>
	{
		__NOP;
	}
}
   24e3c:	4770      	bx	lr
		__NOP;
   24e3e:	bf00      	nop
   24e40:	e7fa      	b.n	24e38 <tmcc160_delay>

00024e42 <tmcc160_default_spi_delay>:

void tmcc160_default_spi_delay()
{
	tmcc160_delay(1550);
   24e42:	f240 600e 	movw	r0, #1550	; 0x60e
   24e46:	f7ff bff7 	b.w	24e38 <tmcc160_delay>

00024e4a <tmcc160_writeInt>:
}

void tmcc160_writeInt(uint8_t address, int value)
{
   24e4a:	b510      	push	{r4, lr}
	tmcc160_spi_readwriteByte(address | 0x80, false);
   24e4c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
{
   24e50:	460c      	mov	r4, r1
	tmcc160_spi_readwriteByte(address | 0x80, false);
   24e52:	2100      	movs	r1, #0
   24e54:	f7f7 f91c 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0xFF & (value>>24), false);
   24e58:	2100      	movs	r1, #0
   24e5a:	0e20      	lsrs	r0, r4, #24
   24e5c:	f7f7 f918 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0xFF & (value>>16), false);
   24e60:	2100      	movs	r1, #0
   24e62:	f3c4 4007 	ubfx	r0, r4, #16, #8
   24e66:	f7f7 f913 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0xFF & (value>>8), false);
   24e6a:	2100      	movs	r1, #0
   24e6c:	f3c4 2007 	ubfx	r0, r4, #8, #8
   24e70:	f7f7 f90e 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0xFF & (value>>0), true);
   24e74:	b2e0      	uxtb	r0, r4
   24e76:	2101      	movs	r1, #1
}
   24e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tmcc160_spi_readwriteByte(0xFF & (value>>0), true);
   24e7c:	f7f7 b908 	b.w	1c090 <tmcc160_spi_readwriteByte>

00024e80 <tmcc160_readInt>:

int tmcc160_readInt(uint8_t address)
{
   24e80:	b510      	push	{r4, lr}
	// clear write bit
	address &= 0x7F;
   24e82:	f000 047f 	and.w	r4, r0, #127	; 0x7f

	tmcc160_spi_readwriteByte(address, false);
   24e86:	2100      	movs	r1, #0
   24e88:	4620      	mov	r0, r4
   24e8a:	f7f7 f901 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0, false);
   24e8e:	2100      	movs	r1, #0
   24e90:	4608      	mov	r0, r1
   24e92:	f7f7 f8fd 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0, false);
   24e96:	2100      	movs	r1, #0
   24e98:	4608      	mov	r0, r1
   24e9a:	f7f7 f8f9 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0, false);
   24e9e:	2100      	movs	r1, #0
   24ea0:	4608      	mov	r0, r1
   24ea2:	f7f7 f8f5 	bl	1c090 <tmcc160_spi_readwriteByte>
	tmcc160_spi_readwriteByte(0, true);
   24ea6:	2101      	movs	r1, #1
   24ea8:	2000      	movs	r0, #0
   24eaa:	f7f7 f8f1 	bl	1c090 <tmcc160_spi_readwriteByte>

	// delay needed!
	tmcc160_default_spi_delay();
   24eae:	f7ff ffc8 	bl	24e42 <tmcc160_default_spi_delay>

	tmcc160_spi_readwriteByte(address, false);
   24eb2:	2100      	movs	r1, #0
   24eb4:	4620      	mov	r0, r4
   24eb6:	f7f7 f8eb 	bl	1c090 <tmcc160_spi_readwriteByte>

	int value = tmcc160_spi_readwriteByte(0, false);
   24eba:	2100      	movs	r1, #0
   24ebc:	4608      	mov	r0, r1
   24ebe:	f7f7 f8e7 	bl	1c090 <tmcc160_spi_readwriteByte>
	value <<= 8;
	value |= tmcc160_spi_readwriteByte(0, false);
   24ec2:	2100      	movs	r1, #0
	value <<= 8;
   24ec4:	0204      	lsls	r4, r0, #8
	value |= tmcc160_spi_readwriteByte(0, false);
   24ec6:	4608      	mov	r0, r1
   24ec8:	f7f7 f8e2 	bl	1c090 <tmcc160_spi_readwriteByte>
	value <<= 8;
	value |= tmcc160_spi_readwriteByte(0, false);
   24ecc:	2100      	movs	r1, #0
	value |= tmcc160_spi_readwriteByte(0, false);
   24ece:	4304      	orrs	r4, r0
	value |= tmcc160_spi_readwriteByte(0, false);
   24ed0:	4608      	mov	r0, r1
   24ed2:	f7f7 f8dd 	bl	1c090 <tmcc160_spi_readwriteByte>
	value <<= 8;
   24ed6:	0224      	lsls	r4, r4, #8
	value |= tmcc160_spi_readwriteByte(0, false);
   24ed8:	4304      	orrs	r4, r0
	value <<= 8;
	value |= tmcc160_spi_readwriteByte(0, true);
   24eda:	2101      	movs	r1, #1
   24edc:	2000      	movs	r0, #0
   24ede:	f7f7 f8d7 	bl	1c090 <tmcc160_spi_readwriteByte>
	value <<= 8;
   24ee2:	0224      	lsls	r4, r4, #8

	return value;
}
   24ee4:	4320      	orrs	r0, r4
   24ee6:	bd10      	pop	{r4, pc}

00024ee8 <tmcc160_setTargetTorque_raw>:

void tmcc160_setTargetTorque_raw(int32_t targetTorque)
{
   24ee8:	4601      	mov	r1, r0
	tmcc160_writeInt(CURRENT_TARGET_REG_ADDR | 0x80, targetTorque);
   24eea:	20a3      	movs	r0, #163	; 0xa3
   24eec:	f7ff bfad 	b.w	24e4a <tmcc160_writeInt>

00024ef0 <tmcc160_getTargetTorque_raw>:
}

int32_t tmcc160_getTargetTorque_raw()
{
	return (int32_t) tmcc160_readInt(CURRENT_TARGET_REG_ADDR);
   24ef0:	2023      	movs	r0, #35	; 0x23
   24ef2:	f7ff bfc5 	b.w	24e80 <tmcc160_readInt>

00024ef6 <tmcc160_getActualTorque_raw>:
}

int32_t tmcc160_getActualTorque_raw()
{
	return (int32_t) tmcc160_readInt(CURRENT_ACTUAL_REG_ADDR);
   24ef6:	2022      	movs	r0, #34	; 0x22
   24ef8:	f7ff bfc2 	b.w	24e80 <tmcc160_readInt>

00024efc <tmcc160_getActualRampTorque_raw>:
}

int32_t tmcc160_getActualRampTorque_raw()
{
	// because this IC does not support a torque ramp!
	return tmcc160_getTargetTorque_raw();
   24efc:	f7ff bff8 	b.w	24ef0 <tmcc160_getTargetTorque_raw>

00024f00 <tmcc160_setTargetTorque_mA>:
}

// actual==raw motor current for this IC!
void tmcc160_setTargetTorque_mA(int32_t targetTorque)
{
	tmcc160_setTargetTorque_raw(targetTorque);
   24f00:	f7ff bff2 	b.w	24ee8 <tmcc160_setTargetTorque_raw>

00024f04 <tmcc160_getTargetTorque_mA>:
   24f04:	f7ff bff4 	b.w	24ef0 <tmcc160_getTargetTorque_raw>

00024f08 <tmcc160_getActualTorque_mA>:
	return tmcc160_getTargetTorque_raw();
}

int32_t tmcc160_getActualTorque_mA()
{
	return tmcc160_getActualTorque_raw();
   24f08:	f7ff bff5 	b.w	24ef6 <tmcc160_getActualTorque_raw>

00024f0c <tmcc160_getActualRampTorque_mA>:
   24f0c:	f7ff bff0 	b.w	24ef0 <tmcc160_getTargetTorque_raw>

00024f10 <tmcc160_setTargetVelocity>:
	// because this IC does not support a torque ramp!
	return tmcc160_getTargetTorque_mA();
}

void tmcc160_setTargetVelocity(int32_t targetVelocity)
{
   24f10:	4601      	mov	r1, r0
	tmcc160_writeInt(VELOCITY_TARGET_REG_ADDR | 0x80, targetVelocity);
   24f12:	20b3      	movs	r0, #179	; 0xb3
   24f14:	f7ff bf99 	b.w	24e4a <tmcc160_writeInt>

00024f18 <tmcc160_getTargetVelocity>:
}

int32_t tmcc160_getTargetVelocity()
{
	return (int32_t) tmcc160_readInt(VELOCITY_TARGET_REG_ADDR);
   24f18:	2033      	movs	r0, #51	; 0x33
   24f1a:	f7ff bfb1 	b.w	24e80 <tmcc160_readInt>

00024f1e <tmcc160_getActualVelocity>:
}

int32_t tmcc160_getActualVelocity()
{
	return (int32_t) tmcc160_readInt(VELOCITY_ACTUAL_REG_ADDR);
   24f1e:	2032      	movs	r0, #50	; 0x32
   24f20:	f7ff bfae 	b.w	24e80 <tmcc160_readInt>

00024f24 <tmcc160_getActualRampVelocity>:
}

int32_t tmcc160_getActualRampVelocity()
{
	return (int32_t) tmcc160_readInt(RAMP_ACTUAL_VELOCITY_REG_ADDR);
   24f24:	203c      	movs	r0, #60	; 0x3c
   24f26:	f7ff bfab 	b.w	24e80 <tmcc160_readInt>

00024f2a <tmcc160_setAbsolutTargetPosition>:
}

void tmcc160_setAbsolutTargetPosition(int32_t targetPosition)
{
   24f2a:	4601      	mov	r1, r0
	tmcc160_writeInt(POSITION_TARGET_ABS_REG_ADDR | 0x80, targetPosition);
   24f2c:	20c1      	movs	r0, #193	; 0xc1
   24f2e:	f7ff bf8c 	b.w	24e4a <tmcc160_writeInt>

00024f32 <tmcc160_setRelativeTargetPosition>:
}

void tmcc160_setRelativeTargetPosition(int32_t relativePosition)
{
   24f32:	4601      	mov	r1, r0
	tmcc160_writeInt(POSITION_TARGET_REL_REG_ADDR | 0x80,  relativePosition);
   24f34:	20c2      	movs	r0, #194	; 0xc2
   24f36:	f7ff bf88 	b.w	24e4a <tmcc160_writeInt>

00024f3a <tmcc160_getTargetPosition>:
}

int32_t tmcc160_getTargetPosition()
{
	return (int32_t) tmcc160_readInt(POSITION_TARGET_ABS_REG_ADDR);
   24f3a:	2041      	movs	r0, #65	; 0x41
   24f3c:	f7ff bfa0 	b.w	24e80 <tmcc160_readInt>

00024f40 <tmcc160_setActualPosition>:
}

void tmcc160_setActualPosition(int32_t actualPosition)
{
   24f40:	4601      	mov	r1, r0
	tmcc160_writeInt(POSITION_ACTUAL_REG_ADDR | 0x80, actualPosition);
   24f42:	20c0      	movs	r0, #192	; 0xc0
   24f44:	f7ff bf81 	b.w	24e4a <tmcc160_writeInt>

00024f48 <tmcc160_getActualPosition>:
}

int32_t tmcc160_getActualPosition()
{
	return (int32_t) tmcc160_readInt(POSITION_ACTUAL_REG_ADDR);
   24f48:	2040      	movs	r0, #64	; 0x40
   24f4a:	f7ff bf99 	b.w	24e80 <tmcc160_readInt>

00024f4e <tmcc160_getActualRampPosition>:
}

int32_t tmcc160_getActualRampPosition()
{
	// module does not support position ramp
	return tmcc160_getTargetPosition();
   24f4e:	f7ff bff4 	b.w	24f3a <tmcc160_getTargetPosition>
	...

00024f54 <LowLevelInit>:
********************************************************************/
void LowLevelInit(void)
{
  /* Initialization of the RCM module */    //***TEST_OK: Kann je nach Beschaltung des Reset-Pins zum Absturz führen
  /* RCM_RPFW: RSTFLTSEL=0 */
  RCM_RPFW &= (uint8)~(uint8)(RCM_RPFW_RSTFLTSEL(0x1F));
   24f54:	4b17      	ldr	r3, [pc, #92]	; (24fb4 <LowLevelInit+0x60>)
   24f56:	795a      	ldrb	r2, [r3, #5]
   24f58:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   24f5c:	715a      	strb	r2, [r3, #5]
  /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
  RCM_RPFC &= (uint8)~(uint8)(
   24f5e:	791a      	ldrb	r2, [r3, #4]
   24f60:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   24f64:	711a      	strb	r2, [r3, #4]
               RCM_RPFC_RSTFLTSS_MASK |
               RCM_RPFC_RSTFLTSRW(0x03)
              );
        /* Initialization of the FTFL_FlashConfig module */
  /* SIM_SCGC7: MPU=1 */
  SIM_SCGC7 |= SIM_SCGC7_MPU_MASK;
   24f66:	4a14      	ldr	r2, [pc, #80]	; (24fb8 <LowLevelInit+0x64>)
   24f68:	6813      	ldr	r3, [r2, #0]
   24f6a:	f043 0304 	orr.w	r3, r3, #4
   24f6e:	6013      	str	r3, [r2, #0]
        /* Initialization of the MPU module */

  //Turn off MPU (important e.g. for the USB stack to work properly)
  /* MPU_CESR: SPERR=0,VLD=0 */
  MPU_CESR &= (uint32)~(uint32)((MPU_CESR_SPERR(0x1F) | MPU_CESR_VLD_MASK));
   24f70:	4a12      	ldr	r2, [pc, #72]	; (24fbc <LowLevelInit+0x68>)
   24f72:	6813      	ldr	r3, [r2, #0]
   24f74:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
   24f78:	f023 0301 	bic.w	r3, r3, #1
   24f7c:	6013      	str	r3, [r2, #0]

      /* Initialization of the PMC module */
  /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
  PMC_LVDSC1 = (uint8)((PMC_LVDSC1 & (uint8)~(uint8)(
   24f7e:	4b10      	ldr	r3, [pc, #64]	; (24fc0 <LowLevelInit+0x6c>)
   24f80:	781a      	ldrb	r2, [r3, #0]
                PMC_LVDSC1_LVDIE_MASK |
                PMC_LVDSC1_LVDV(0x03)
               )) | (uint8)(
   24f82:	f002 028c 	and.w	r2, r2, #140	; 0x8c
  PMC_LVDSC1 = (uint8)((PMC_LVDSC1 & (uint8)~(uint8)(
   24f86:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   24f8a:	701a      	strb	r2, [r3, #0]
                PMC_LVDSC1_LVDACK_MASK |
                PMC_LVDSC1_LVDRE_MASK
               ));
  /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
  PMC_LVDSC2 = (uint8)((PMC_LVDSC2 & (uint8)~(uint8)(
   24f8c:	785a      	ldrb	r2, [r3, #1]
                PMC_LVDSC2_LVWIE_MASK |
                PMC_LVDSC2_LVWV(0x03)
               )) | (uint8)(
   24f8e:	f002 029c 	and.w	r2, r2, #156	; 0x9c
  PMC_LVDSC2 = (uint8)((PMC_LVDSC2 & (uint8)~(uint8)(
   24f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   24f96:	705a      	strb	r2, [r3, #1]
                PMC_LVDSC2_LVWACK_MASK
               ));
  /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
  PMC_REGSC &= (uint8)~(uint8)(
   24f98:	789a      	ldrb	r2, [r3, #2]
   24f9a:	f002 02e6 	and.w	r2, r2, #230	; 0xe6
   24f9e:	709a      	strb	r2, [r3, #2]
                PMC_REGSC_BGEN_MASK |
                PMC_REGSC_ACKISO_MASK |
                PMC_REGSC_BGBE_MASK
               );
  /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
  SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
   24fa0:	4a08      	ldr	r2, [pc, #32]	; (24fc4 <LowLevelInit+0x70>)
   24fa2:	2300      	movs	r3, #0
   24fa4:	7013      	strb	r3, [r2, #0]

  /* Common initialization of the CPU registers */
  /* NVICIP73: PRI73=0 (USB Interrupt)*/
  NVICIP73 = NVIC_IP_PRI73(0x00);
   24fa6:	4a08      	ldr	r2, [pc, #32]	; (24fc8 <LowLevelInit+0x74>)
   24fa8:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
  __asm ("msr basepri, %[input]"::[input] "r" (Level):);
   24fac:	f383 8811 	msr	BASEPRI, r3

  //Interrupt priority base setting
  Cpu_SetBASEPRI(0);
}
   24fb0:	4770      	bx	lr
   24fb2:	bf00      	nop
   24fb4:	4007f000 	.word	0x4007f000
   24fb8:	40048040 	.word	0x40048040
   24fbc:	4000d000 	.word	0x4000d000
   24fc0:	4007d000 	.word	0x4007d000
   24fc4:	4007e000 	.word	0x4007e000
   24fc8:	e000e100 	.word	0xe000e100

00024fcc <InitClocks>:
  SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
   24fcc:	4b2e      	ldr	r3, [pc, #184]	; (25088 <InitClocks+0xbc>)
   24fce:	f241 0138 	movw	r1, #4152	; 0x1038
   24fd2:	585a      	ldr	r2, [r3, r1]
   24fd4:	f442 5278 	orr.w	r2, r2, #15872	; 0x3e00
   24fd8:	505a      	str	r2, [r3, r1]
  if((MCG_S & 0x0C)==0x0C) return;
   24fda:	4a2c      	ldr	r2, [pc, #176]	; (2508c <InitClocks+0xc0>)
   24fdc:	7992      	ldrb	r2, [r2, #6]
   24fde:	f002 020c 	and.w	r2, r2, #12
   24fe2:	2a0c      	cmp	r2, #12
   24fe4:	d04f      	beq.n	25086 <InitClocks+0xba>
  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
   24fe6:	f241 0244 	movw	r2, #4164	; 0x1044
   24fea:	4929      	ldr	r1, [pc, #164]	; (25090 <InitClocks+0xc4>)
   24fec:	5099      	str	r1, [r3, r2]
  if((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U)
   24fee:	f503 3358 	add.w	r3, r3, #221184	; 0x36000
   24ff2:	789a      	ldrb	r2, [r3, #2]
   24ff4:	0711      	lsls	r1, r2, #28
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
   24ff6:	bf48      	it	mi
   24ff8:	789a      	ldrbmi	r2, [r3, #2]
  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
   24ffa:	4926      	ldr	r1, [pc, #152]	; (25094 <InitClocks+0xc8>)
    PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
   24ffc:	bf44      	itt	mi
   24ffe:	f042 0208 	orrmi.w	r2, r2, #8
   25002:	709a      	strbmi	r2, [r3, #2]
  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
   25004:	4b20      	ldr	r3, [pc, #128]	; (25088 <InitClocks+0xbc>)
   25006:	f241 0244 	movw	r2, #4164	; 0x1044
   2500a:	5099      	str	r1, [r3, r2]
  SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK|SIM_SOPT2_CLKOUTSEL(6); /* Select PLL as a clock source for various peripherals */
   2500c:	f241 0104 	movw	r1, #4100	; 0x1004
   25010:	585a      	ldr	r2, [r3, r1]
   25012:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   25016:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
   2501a:	505a      	str	r2, [r3, r1]
  SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various peripherals */
   2501c:	681a      	ldr	r2, [r3, #0]
   2501e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
   25022:	601a      	str	r2, [r3, #0]
  MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);
   25024:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
   25028:	2224      	movs	r2, #36	; 0x24
   2502a:	705a      	strb	r2, [r3, #1]
  OSC_CR = OSC_CR_ERCLKEN_MASK;
   2502c:	4a1a      	ldr	r2, [pc, #104]	; (25098 <InitClocks+0xcc>)
   2502e:	2180      	movs	r1, #128	; 0x80
   25030:	7011      	strb	r1, [r2, #0]
  MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x04) | MCG_C1_IRCLKEN_MASK);
   25032:	22a2      	movs	r2, #162	; 0xa2
   25034:	701a      	strb	r2, [r3, #0]
  MCG_C4 &= (uint8)~(uint8)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
   25036:	78da      	ldrb	r2, [r3, #3]
   25038:	f002 021f 	and.w	r2, r2, #31
   2503c:	70da      	strb	r2, [r3, #3]
  MCG_C5 = MCG_C5_PRDIV0(0x03);
   2503e:	2203      	movs	r2, #3
   25040:	711a      	strb	r2, [r3, #4]
  MCG_C6 = MCG_C6_VDIV0(0x00);
   25042:	2200      	movs	r2, #0
   25044:	715a      	strb	r2, [r3, #5]
  while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U); /* Check that the oscillator is running */
   25046:	799a      	ldrb	r2, [r3, #6]
   25048:	0792      	lsls	r2, r2, #30
   2504a:	d5fc      	bpl.n	25046 <InitClocks+0x7a>
  while((MCG_S & MCG_S_IREFST_MASK) != 0x00U);   /* Check that the source of the FLL reference clock is the external reference clock. */
   2504c:	799a      	ldrb	r2, [r3, #6]
   2504e:	06d0      	lsls	r0, r2, #27
   25050:	d4fc      	bmi.n	2504c <InitClocks+0x80>
  while((MCG_S & 0x0CU) != 0x08U);               /* Wait until external reference clock is selected as MCG output */
   25052:	4b0e      	ldr	r3, [pc, #56]	; (2508c <InitClocks+0xc0>)
   25054:	4619      	mov	r1, r3
   25056:	799a      	ldrb	r2, [r3, #6]
   25058:	f002 020c 	and.w	r2, r2, #12
   2505c:	2a08      	cmp	r2, #8
   2505e:	d1fa      	bne.n	25056 <InitClocks+0x8a>
  MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
   25060:	2240      	movs	r2, #64	; 0x40
   25062:	715a      	strb	r2, [r3, #5]
  while((MCG_S & 0x0CU) != 0x08U);              /* Wait until external reference clock is selected as MCG output */
   25064:	798b      	ldrb	r3, [r1, #6]
   25066:	f003 030c 	and.w	r3, r3, #12
   2506a:	2b08      	cmp	r3, #8
   2506c:	d1fa      	bne.n	25064 <InitClocks+0x98>
  while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U);   /* Wait until locked */
   2506e:	4b07      	ldr	r3, [pc, #28]	; (2508c <InitClocks+0xc0>)
   25070:	461a      	mov	r2, r3
   25072:	7999      	ldrb	r1, [r3, #6]
   25074:	0649      	lsls	r1, r1, #25
   25076:	d5fc      	bpl.n	25072 <InitClocks+0xa6>
  MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x04) | MCG_C1_IRCLKEN_MASK);
   25078:	2122      	movs	r1, #34	; 0x22
   2507a:	7019      	strb	r1, [r3, #0]
  while((MCG_S & 0x0CU) != 0x0CU);    /* Wait until output of the PLL is selected */
   2507c:	7993      	ldrb	r3, [r2, #6]
   2507e:	f003 030c 	and.w	r3, r3, #12
   25082:	2b0c      	cmp	r3, #12
   25084:	d1fa      	bne.n	2507c <InitClocks+0xb0>
}
   25086:	4770      	bx	lr
   25088:	40047000 	.word	0x40047000
   2508c:	40064000 	.word	0x40064000
   25090:	01330000 	.word	0x01330000
   25094:	01130000 	.word	0x01130000
   25098:	40065000 	.word	0x40065000

0002509c <Cpu_INT_NMIInterrupt>:
{
   2509c:	4668      	mov	r0, sp
   2509e:	f020 0107 	bic.w	r1, r0, #7
   250a2:	468d      	mov	sp, r1
   250a4:	b501      	push	{r0, lr}
}
   250a6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   250aa:	4685      	mov	sp, r0
   250ac:	4770      	bx	lr

000250ae <Cpu_Interrupt>:
{
   250ae:	4668      	mov	r0, sp
   250b0:	f020 0107 	bic.w	r1, r0, #7
   250b4:	468d      	mov	sp, r1
   250b6:	b501      	push	{r0, lr}
  PE_DEBUGHALT();
   250b8:	beff      	bkpt	0x00ff
}
   250ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   250be:	4685      	mov	sp, r0
   250c0:	4770      	bx	lr

000250c2 <Cpu_SetBASEPRI>:
  __asm ("msr basepri, %[input]"::[input] "r" (Level):);
   250c2:	f380 8811 	msr	BASEPRI, r0
}
   250c6:	4770      	bx	lr

000250c8 <Default_Handler>:
 **  Default interrupt handler
 **===========================================================================
 */
void Default_Handler(void)
{
	asm volatile ("bkpt");
   250c8:	be00      	bkpt	0x0000

	while(1);
   250ca:	e7fe      	b.n	250ca <Default_Handler+0x2>

000250cc <__init_hardware>:
 **  Reset handler
 **===========================================================================
 */
void __init_hardware(void)
{
	SCB_VTOR = (uint32)__vector_table; /* Set the interrupt vector table position */
   250cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   250d0:	4a08      	ldr	r2, [pc, #32]	; (250f4 <__init_hardware+0x28>)
   250d2:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	WDOG_CS2 = WDOG_CS2_CLK(0);
	WDOG_CS1 = WDOG_CS1_UPDATE_MASK;   //watchdog setting can be changed later

  #elif defined(MK20DN512) || defined(MK20DX256)
	 // Disable the Watchdog because it may reset the core before entering main().
	WDOG_UNLOCK = 0xC520;			// Write 0xC520 to the unlock register
   250d6:	4a08      	ldr	r2, [pc, #32]	; (250f8 <__init_hardware+0x2c>)
   250d8:	f24c 5320 	movw	r3, #50464	; 0xc520
   250dc:	81d3      	strh	r3, [r2, #14]
	WDOG_UNLOCK = 0xD928;			// Followed by 0xD928 to complete the unlock
   250de:	f64d 1328 	movw	r3, #55592	; 0xd928
   250e2:	81d3      	strh	r3, [r2, #14]
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN_MASK;	// Clear the WDOGEN bit to disable the watchdog
   250e4:	8813      	ldrh	r3, [r2, #0]
   250e6:	f023 0301 	bic.w	r3, r3, #1
   250ea:	041b      	lsls	r3, r3, #16
   250ec:	0c1b      	lsrs	r3, r3, #16
   250ee:	8013      	strh	r3, [r2, #0]
	#else
	#error "MCU sub-model not supported!"
	#endif
}
   250f0:	4770      	bx	lr
   250f2:	bf00      	nop
   250f4:	00008000 	.word	0x00008000
   250f8:	40052000 	.word	0x40052000

000250fc <enable_irq>:
     */
   // if(irq > 91)
        //printf("\nERR! Invalid IRQ value passed to enable irq function!\n");

    /* Determine which of the NVICISERs corresponds to the irq */
    div = irq/32;
   250fc:	2800      	cmp	r0, #0
   250fe:	4602      	mov	r2, r0
   25100:	bfb8      	it	lt
   25102:	f100 021f 	addlt.w	r2, r0, #31
   25106:	1152      	asrs	r2, r2, #5

    switch (div)
   25108:	2a01      	cmp	r2, #1
{
   2510a:	b510      	push	{r4, lr}
   2510c:	4b21      	ldr	r3, [pc, #132]	; (25194 <enable_irq+0x98>)
    switch (div)
   2510e:	d01b      	beq.n	25148 <enable_irq+0x4c>
   25110:	2a02      	cmp	r2, #2
   25112:	d02b      	beq.n	2516c <enable_irq+0x70>
   25114:	b98a      	cbnz	r2, 2513a <enable_irq+0x3e>
    {
    	case 0x0:
              NVICICPR0 |= 1 << (irq%32);
   25116:	4242      	negs	r2, r0
   25118:	f002 021f 	and.w	r2, r2, #31
   2511c:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
   25120:	f000 001f 	and.w	r0, r0, #31
   25124:	bf58      	it	pl
   25126:	4250      	negpl	r0, r2
   25128:	2201      	movs	r2, #1
   2512a:	fa02 f000 	lsl.w	r0, r2, r0
   2512e:	4301      	orrs	r1, r0
   25130:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
              NVICISER0 |= 1 << (irq%32);
   25134:	681a      	ldr	r2, [r3, #0]
   25136:	4310      	orrs	r0, r2
   25138:	6018      	str	r0, [r3, #0]
              NVICICPR2 |= 1 << (irq%32);
              NVICISER2 |= 1 << (irq%32);
              break;
    }
    // FISCHSUPPECHECK welche Prioritäten für welche Interrupts
    NVICIP88 = 0x03;	// PortB Prio3
   2513a:	4b16      	ldr	r3, [pc, #88]	; (25194 <enable_irq+0x98>)
   2513c:	2203      	movs	r2, #3
   2513e:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
    NVICIP64 = 0x03;	// FTM2 Prio3
   25142:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
}
   25146:	bd10      	pop	{r4, pc}
              NVICICPR1 |= 1 << (irq%32);
   25148:	4244      	negs	r4, r0
   2514a:	f004 041f 	and.w	r4, r4, #31
   2514e:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
   25152:	f000 001f 	and.w	r0, r0, #31
   25156:	bf58      	it	pl
   25158:	4260      	negpl	r0, r4
   2515a:	fa02 f000 	lsl.w	r0, r2, r0
   2515e:	4301      	orrs	r1, r0
   25160:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
              NVICISER1 |= 1 << (irq%32);
   25164:	685a      	ldr	r2, [r3, #4]
   25166:	4310      	orrs	r0, r2
   25168:	6058      	str	r0, [r3, #4]
              break;
   2516a:	e7e6      	b.n	2513a <enable_irq+0x3e>
              NVICICPR2 |= 1 << (irq%32);
   2516c:	4242      	negs	r2, r0
   2516e:	f002 021f 	and.w	r2, r2, #31
   25172:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
   25176:	f000 001f 	and.w	r0, r0, #31
   2517a:	bf58      	it	pl
   2517c:	4250      	negpl	r0, r2
   2517e:	2201      	movs	r2, #1
   25180:	fa02 f000 	lsl.w	r0, r2, r0
   25184:	4301      	orrs	r1, r0
   25186:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
              NVICISER2 |= 1 << (irq%32);
   2518a:	689a      	ldr	r2, [r3, #8]
   2518c:	4310      	orrs	r0, r2
   2518e:	6098      	str	r0, [r3, #8]
              break;
   25190:	e7d3      	b.n	2513a <enable_irq+0x3e>
   25192:	bf00      	nop
   25194:	e000e100 	.word	0xe000e100

00025198 <disable_irq>:
     * used.
     *
     * NOTE: If you are using the interrupt definitions from the header
     * file, you MUST SUBTRACT 16!!!
     */
    if(irq > 128)
   25198:	2880      	cmp	r0, #128	; 0x80
   2519a:	490f      	ldr	r1, [pc, #60]	; (251d8 <disable_irq+0x40>)
   2519c:	f000 021f 	and.w	r2, r0, #31
   251a0:	f04f 0301 	mov.w	r3, #1
   251a4:	dd03      	ble.n	251ae <disable_irq+0x16>
    {
      /* Set the ICER register accordingly */
      NVICICER3 = 1 << (irq%32);
   251a6:	4093      	lsls	r3, r2
   251a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
   251ac:	4770      	bx	lr
    }
    else if(irq > 64)
   251ae:	2840      	cmp	r0, #64	; 0x40
   251b0:	dd03      	ble.n	251ba <disable_irq+0x22>
    {
      /* Set the ICER register accordingly */
      NVICICER2 = 1 << (irq%32);
   251b2:	4093      	lsls	r3, r2
   251b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
   251b8:	4770      	bx	lr
    }
    else if(irq > 32)
   251ba:	2820      	cmp	r0, #32
   251bc:	dd03      	ble.n	251c6 <disable_irq+0x2e>
    {
      /* Set the ICER register accordingly */
      NVICICER1 = 1 << (irq%32);
   251be:	4093      	lsls	r3, r2
   251c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   251c4:	4770      	bx	lr
    }
    else
    {
      /* Set the ICER register accordingly */
      NVICICER0 = 1 << (irq%32);
   251c6:	4240      	negs	r0, r0
   251c8:	f000 001f 	and.w	r0, r0, #31
   251cc:	bf58      	it	pl
   251ce:	4242      	negpl	r2, r0
   251d0:	4093      	lsls	r3, r2
   251d2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
}
   251d6:	4770      	bx	lr
   251d8:	e000e100 	.word	0xe000e100

000251dc <set_irq_priority>:
     * used.
     *
     * NOTE: If you are using the interrupt definitions from the header
     * file, you MUST SUBTRACT 16!!!
     */
    if(irq > 32)
   251dc:	2820      	cmp	r0, #32
   251de:	dc01      	bgt.n	251e4 <set_irq_priority+0x8>
    {
        err = 1;
    }

    if(prio > 3)
   251e0:	2903      	cmp	r1, #3
   251e2:	dd00      	ble.n	251e6 <set_irq_priority+0xa>
        off = irq % 4;
        prio_reg = (uint32 *)((uint32)&NVIC_IP(div));
        /* Assign priority to IRQ */
        *prio_reg |= ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) ) << (off  * 8);
    }
}
   251e4:	4770      	bx	lr
        div = irq / 4;
   251e6:	2800      	cmp	r0, #0
   251e8:	4603      	mov	r3, r0
   251ea:	bfb8      	it	lt
   251ec:	1cc3      	addlt	r3, r0, #3
        off = irq % 4;
   251ee:	4242      	negs	r2, r0
        prio_reg = (uint32 *)((uint32)&NVIC_IP(div));
   251f0:	f3c3 0387 	ubfx	r3, r3, #2, #8
        off = irq % 4;
   251f4:	f002 0203 	and.w	r2, r2, #3
   251f8:	f000 0003 	and.w	r0, r0, #3
        prio_reg = (uint32 *)((uint32)&NVIC_IP(div));
   251fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
        off = irq % 4;
   25200:	bf58      	it	pl
   25202:	4250      	negpl	r0, r2
        prio_reg = (uint32 *)((uint32)&NVIC_IP(div));
   25204:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
        *prio_reg |= ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) ) << (off  * 8);
   25208:	0189      	lsls	r1, r1, #6
   2520a:	b2c0      	uxtb	r0, r0
   2520c:	b2c9      	uxtb	r1, r1
   2520e:	00c0      	lsls	r0, r0, #3
   25210:	fa01 f000 	lsl.w	r0, r1, r0
   25214:	6819      	ldr	r1, [r3, #0]
   25216:	4308      	orrs	r0, r1
   25218:	6018      	str	r0, [r3, #0]
}
   2521a:	4770      	bx	lr

0002521c <CDC1_Notify_Callback>:
*/
void CDC1_Notify_Callback(byte controller_ID, byte event_type, void *val)
{
  UNUSED(controller_ID);
  UNUSED(val);
  if(start_app == TRUE) {
   2521c:	4b07      	ldr	r3, [pc, #28]	; (2523c <CDC1_Notify_Callback+0x20>)
   2521e:	781a      	ldrb	r2, [r3, #0]
   25220:	2a01      	cmp	r2, #1
   25222:	b2d0      	uxtb	r0, r2
   25224:	d102      	bne.n	2522c <CDC1_Notify_Callback+0x10>
    if(event_type == USB_APP_CDC_CARRIER_ACTIVATED) {
   25226:	2922      	cmp	r1, #34	; 0x22
   25228:	d103      	bne.n	25232 <CDC1_Notify_Callback+0x16>
      start_transactions = TRUE;
   2522a:	7058      	strb	r0, [r3, #1]
    } else if(event_type == USB_APP_CDC_CARRIER_DEACTIVATED) {
      start_transactions = FALSE;
    }
  }
  start_transactions = TRUE; /* ??? see http://forums.freescale.com/t5/Freescale-MQX-trade-USB-Host/Cant-get-CDC-virtual-com-demo-to-work-with-VB2005-on-xp-sp3/m-p/92713#M302 */
   2522c:	2201      	movs	r2, #1
   2522e:	705a      	strb	r2, [r3, #1]
}
   25230:	4770      	bx	lr
    } else if(event_type == USB_APP_CDC_CARRIER_DEACTIVATED) {
   25232:	2921      	cmp	r1, #33	; 0x21
      start_transactions = FALSE;
   25234:	bf04      	itt	eq
   25236:	2200      	moveq	r2, #0
   25238:	705a      	strbeq	r2, [r3, #1]
   2523a:	e7f7      	b.n	2522c <CDC1_Notify_Callback+0x10>
   2523c:	1fff59dc 	.word	0x1fff59dc

00025240 <CDC1_App_Callback>:
{
   25240:	b570      	push	{r4, r5, r6, lr}
   25242:	4614      	mov	r4, r2
  if(event_type == USB_APP_BUS_RESET) {
   25244:	b911      	cbnz	r1, 2524c <CDC1_App_Callback+0xc>
    start_app = FALSE;
   25246:	4b1b      	ldr	r3, [pc, #108]	; (252b4 <CDC1_App_Callback+0x74>)
   25248:	7019      	strb	r1, [r3, #0]
}
   2524a:	bd70      	pop	{r4, r5, r6, pc}
  } else if(event_type == USB_APP_ENUM_COMPLETE) {
   2524c:	2902      	cmp	r1, #2
   2524e:	d103      	bne.n	25258 <CDC1_App_Callback+0x18>
    start_app = TRUE;
   25250:	4b18      	ldr	r3, [pc, #96]	; (252b4 <CDC1_App_Callback+0x74>)
   25252:	2201      	movs	r2, #1
   25254:	701a      	strb	r2, [r3, #0]
   25256:	e7f8      	b.n	2524a <CDC1_App_Callback+0xa>
  } else if((event_type == USB_APP_DATA_RECEIVED)&&(start_transactions==TRUE)) {
   25258:	2904      	cmp	r1, #4
   2525a:	d11b      	bne.n	25294 <CDC1_App_Callback+0x54>
   2525c:	4b15      	ldr	r3, [pc, #84]	; (252b4 <CDC1_App_Callback+0x74>)
   2525e:	785b      	ldrb	r3, [r3, #1]
   25260:	2b01      	cmp	r3, #1
   25262:	d1f2      	bne.n	2524a <CDC1_App_Callback+0xa>
    BytesToBeCopied = (USB_PACKET_SIZE)((dp_rcv->data_size > CDC1_DATA_BUFF_SIZE) ? CDC1_DATA_BUFF_SIZE:dp_rcv->data_size);
   25264:	8895      	ldrh	r5, [r2, #4]
   25266:	2d40      	cmp	r5, #64	; 0x40
   25268:	bf28      	it	cs
   2526a:	2540      	movcs	r5, #64	; 0x40
    for(index = 0; index<BytesToBeCopied ; index++) {
   2526c:	2300      	movs	r3, #0
   2526e:	b2da      	uxtb	r2, r3
   25270:	42aa      	cmp	r2, r5
   25272:	f103 0601 	add.w	r6, r3, #1
   25276:	d307      	bcc.n	25288 <CDC1_App_Callback+0x48>
    (void)USB_Class_CDC_Interface_DIC_Recv_Data(CONTROLLER_ID, NULL, 0); /* see http://eprints.utar.edu.my/143/1/BI-2011-0708672-1.pdf, page 131 */
   25278:	2300      	movs	r3, #0
}
   2527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)USB_Class_CDC_Interface_DIC_Recv_Data(CONTROLLER_ID, NULL, 0);
   2527e:	461a      	mov	r2, r3
   25280:	2102      	movs	r1, #2
   25282:	4618      	mov	r0, r3
   25284:	f000 bf44 	b.w	26110 <_usb_device_recv_data>
      if(Rx1_Put(dp_rcv->data_ptr[index])!=ERR_OK) {
   25288:	6823      	ldr	r3, [r4, #0]
   2528a:	5c98      	ldrb	r0, [r3, r2]
   2528c:	f000 f8c0 	bl	25410 <Rx1_Put>
   25290:	4633      	mov	r3, r6
   25292:	e7ec      	b.n	2526e <CDC1_App_Callback+0x2e>
  } else if((event_type == USB_APP_SEND_COMPLETE)&&(start_transactions==TRUE)) {
   25294:	2903      	cmp	r1, #3
   25296:	d106      	bne.n	252a6 <CDC1_App_Callback+0x66>
   25298:	4a06      	ldr	r2, [pc, #24]	; (252b4 <CDC1_App_Callback+0x74>)
   2529a:	7853      	ldrb	r3, [r2, #1]
   2529c:	2b01      	cmp	r3, #1
   2529e:	d1d4      	bne.n	2524a <CDC1_App_Callback+0xa>
    transactionOngoing = FALSE;
   252a0:	2300      	movs	r3, #0
   252a2:	7093      	strb	r3, [r2, #2]
   252a4:	e7e9      	b.n	2527a <CDC1_App_Callback+0x3a>
  } else if(event_type == USB_APP_ERROR) { /* detach? */
   252a6:	2905      	cmp	r1, #5
    start_app = FALSE;
   252a8:	bf01      	itttt	eq
   252aa:	4b02      	ldreq	r3, [pc, #8]	; (252b4 <CDC1_App_Callback+0x74>)
   252ac:	2200      	moveq	r2, #0
   252ae:	701a      	strbeq	r2, [r3, #0]
    start_transactions = FALSE;
   252b0:	705a      	strbeq	r2, [r3, #1]
}
   252b2:	e7ca      	b.n	2524a <CDC1_App_Callback+0xa>
   252b4:	1fff59dc 	.word	0x1fff59dc

000252b8 <CDC1_RecvChar>:
{
   252b8:	b510      	push	{r4, lr}
   252ba:	4604      	mov	r4, r0
  while(Rx1_Get(Chr)!=ERR_OK) {
   252bc:	4620      	mov	r0, r4
   252be:	f000 f8bf 	bl	25440 <Rx1_Get>
   252c2:	2800      	cmp	r0, #0
   252c4:	d1fa      	bne.n	252bc <CDC1_RecvChar+0x4>
}
   252c6:	bd10      	pop	{r4, pc}

000252c8 <CDC1_RunUsbEngine>:
** ===================================================================
*/
void CDC1_RunUsbEngine(void)
{
  /* not needed */
}
   252c8:	4770      	bx	lr

000252ca <CDC1_SendDataBlock>:
**         Sends a USB data block
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
byte CDC1_SendDataBlock(byte *data, word dataSize)
{
   252ca:	b510      	push	{r4, lr}
  uint8 res = ERR_OK;

  transactionOngoing = TRUE;
   252cc:	4c09      	ldr	r4, [pc, #36]	; (252f4 <CDC1_SendDataBlock+0x2a>)
{
   252ce:	4602      	mov	r2, r0
   252d0:	460b      	mov	r3, r1
  if(USB_Class_CDC_Interface_DIC_Send_Data(CONTROLLER_ID, data, dataSize)!=USB_OK) {
   252d2:	2000      	movs	r0, #0
  transactionOngoing = TRUE;
   252d4:	2101      	movs	r1, #1
   252d6:	70a1      	strb	r1, [r4, #2]
  if(USB_Class_CDC_Interface_DIC_Send_Data(CONTROLLER_ID, data, dataSize)!=USB_OK) {
   252d8:	f000 faee 	bl	258b8 <USB_Class_CDC_Send_Data>
   252dc:	4622      	mov	r2, r4
   252de:	b118      	cbz	r0, 252e8 <CDC1_SendDataBlock+0x1e>
    transactionOngoing = FALSE;
   252e0:	2300      	movs	r3, #0
   252e2:	70a3      	strb	r3, [r4, #2]
    return ERR_FAULT;
   252e4:	2012      	movs	r0, #18
  /* wait for transaction finish */
  while(transactionOngoing) { /* wait until transaction is finished */
    CDC1_RunUsbEngine();
  }
  return res;
}
   252e6:	bd10      	pop	{r4, pc}
  while(transactionOngoing) { /* wait until transaction is finished */
   252e8:	7893      	ldrb	r3, [r2, #2]
   252ea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   252ee:	2b00      	cmp	r3, #0
   252f0:	d1fa      	bne.n	252e8 <CDC1_SendDataBlock+0x1e>
   252f2:	e7f8      	b.n	252e6 <CDC1_SendDataBlock+0x1c>
   252f4:	1fff59dc 	.word	0x1fff59dc

000252f8 <CDC1_App_Task>:
**                           enumeration has been finished, error code
**                           otherwise.
** ===================================================================
*/
byte CDC1_App_Task(byte *txBuf, size_t txBufSize)
{
   252f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252fa:	4604      	mov	r4, r0
   252fc:	460f      	mov	r7, r1
  uint8 i, res;

  /* device is Kinetis K20D72 */
  CDC1_RunUsbEngine();
  /* call the periodic task function */
  USB_Class_CDC_Periodic_Task();
   252fe:	f000 fcf4 	bl	25cea <USB_Class_Periodic_Task>
  /* check whether enumeration is complete or not */
  if((start_app==TRUE) && (start_transactions==TRUE)) {
   25302:	4b0e      	ldr	r3, [pc, #56]	; (2533c <CDC1_App_Task+0x44>)
   25304:	781a      	ldrb	r2, [r3, #0]
   25306:	2a01      	cmp	r2, #1
   25308:	d116      	bne.n	25338 <CDC1_App_Task+0x40>
   2530a:	785b      	ldrb	r3, [r3, #1]
   2530c:	2b01      	cmp	r3, #1
   2530e:	d113      	bne.n	25338 <CDC1_App_Task+0x40>
    if(Tx1_NofElements()!=0) {
   25310:	f000 f900 	bl	25514 <Tx1_NofElements>
   25314:	b188      	cbz	r0, 2533a <CDC1_App_Task+0x42>
   25316:	2600      	movs	r6, #0
   25318:	b2f5      	uxtb	r5, r6
      i = 0;
      while(i<txBufSize && Tx1_Get(&txBuf[i])==ERR_OK) {
   2531a:	42af      	cmp	r7, r5
   2531c:	d805      	bhi.n	2532a <CDC1_App_Task+0x32>
        i++;
      }
      res = CDC1_SendDataBlock(txBuf, i);
   2531e:	4629      	mov	r1, r5
   25320:	4620      	mov	r0, r4
    } /* if */
    return ERR_OK;
  } else {
    return ERR_BUSOFF; /* USB bus not available yet */
  }
}
   25322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      res = CDC1_SendDataBlock(txBuf, i);
   25326:	f7ff bfd0 	b.w	252ca <CDC1_SendDataBlock>
      while(i<txBufSize && Tx1_Get(&txBuf[i])==ERR_OK) {
   2532a:	1960      	adds	r0, r4, r5
   2532c:	f000 f8d6 	bl	254dc <Tx1_Get>
   25330:	3601      	adds	r6, #1
   25332:	2800      	cmp	r0, #0
   25334:	d0f0      	beq.n	25318 <CDC1_App_Task+0x20>
   25336:	e7f2      	b.n	2531e <CDC1_App_Task+0x26>
    return ERR_BUSOFF; /* USB bus not available yet */
   25338:	200c      	movs	r0, #12
}
   2533a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2533c:	1fff59dc 	.word	0x1fff59dc

00025340 <CDC1_GetCharsInRxBuf>:
{
   25340:	b508      	push	{r3, lr}
  if(CDC1_App_Task(txBuf, sizeof(txBuf))!=ERR_OK) { /* call USB handler: if active, then this will empty the buffer */
   25342:	2140      	movs	r1, #64	; 0x40
   25344:	4803      	ldr	r0, [pc, #12]	; (25354 <CDC1_GetCharsInRxBuf+0x14>)
   25346:	f7ff ffd7 	bl	252f8 <CDC1_App_Task>
  return (word)Rx1_NofElements();
   2534a:	f000 f895 	bl	25478 <Rx1_NofElements>
}
   2534e:	b280      	uxth	r0, r0
   25350:	bd08      	pop	{r3, pc}
   25352:	bf00      	nop
   25354:	1fff59df 	.word	0x1fff59df

00025358 <CDC1_SendChar>:
{
   25358:	b538      	push	{r3, r4, r5, lr}
   2535a:	4605      	mov	r5, r0
  if(Tx1_Put(Chr)==ERR_TXFULL) { /* retry once, otherwise throw it away  */
   2535c:	f000 f8a6 	bl	254ac <Tx1_Put>
   25360:	280b      	cmp	r0, #11
   25362:	4604      	mov	r4, r0
   25364:	d109      	bne.n	2537a <CDC1_SendChar+0x22>
    if(CDC1_App_Task(txBuf, sizeof(txBuf))!=ERR_OK) { /* call USB handler: if active, then this will empty the buffer */
   25366:	4806      	ldr	r0, [pc, #24]	; (25380 <CDC1_SendChar+0x28>)
   25368:	2140      	movs	r1, #64	; 0x40
   2536a:	f7ff ffc5 	bl	252f8 <CDC1_App_Task>
   2536e:	b928      	cbnz	r0, 2537c <CDC1_SendChar+0x24>
      return Tx1_Put(Chr); /* retry. If buffer is still full, we will lose the character */
   25370:	4628      	mov	r0, r5
}
   25372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return Tx1_Put(Chr); /* retry. If buffer is still full, we will lose the character */
   25376:	f000 b899 	b.w	254ac <Tx1_Put>
  return ERR_OK;
   2537a:	2400      	movs	r4, #0
}
   2537c:	4620      	mov	r0, r4
   2537e:	bd38      	pop	{r3, r4, r5, pc}
   25380:	1fff5a1f 	.word	0x1fff5a1f

00025384 <CDC1_SendBlock>:
{
   25384:	b570      	push	{r4, r5, r6, lr}
   25386:	460c      	mov	r4, r1
   25388:	1e45      	subs	r5, r0, #1
  byte res = ERR_OK;
   2538a:	2600      	movs	r6, #0
  while(dataSize > 0) {
   2538c:	b90c      	cbnz	r4, 25392 <CDC1_SendBlock+0xe>
}
   2538e:	4630      	mov	r0, r6
   25390:	bd70      	pop	{r4, r5, r6, pc}
    if(CDC1_SendChar(*data)!=ERR_OK) {
   25392:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   25396:	f7ff ffdf 	bl	25358 <CDC1_SendChar>
    dataSize--; data++;
   2539a:	3c01      	subs	r4, #1
      res = ERR_TXFULL;
   2539c:	2800      	cmp	r0, #0
   2539e:	bf18      	it	ne
   253a0:	260b      	movne	r6, #11
    dataSize--; data++;
   253a2:	b2a4      	uxth	r4, r4
   253a4:	e7f2      	b.n	2538c <CDC1_SendBlock+0x8>

000253a6 <CDC1_SendString>:
{
   253a6:	b538      	push	{r3, r4, r5, lr}
   253a8:	1e44      	subs	r4, r0, #1
  byte res = ERR_OK;
   253aa:	2500      	movs	r5, #0
  while(*Chr != '\0') {
   253ac:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   253b0:	b908      	cbnz	r0, 253b6 <CDC1_SendString+0x10>
}
   253b2:	4628      	mov	r0, r5
   253b4:	bd38      	pop	{r3, r4, r5, pc}
    if(CDC1_SendChar(*Chr)!=ERR_OK) {
   253b6:	f7ff ffcf 	bl	25358 <CDC1_SendChar>
      res = ERR_TXFULL;
   253ba:	2800      	cmp	r0, #0
   253bc:	bf18      	it	ne
   253be:	250b      	movne	r5, #11
    Chr++;
   253c0:	e7f4      	b.n	253ac <CDC1_SendString+0x6>

000253c2 <CDC1_Init>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte CDC1_Init(void)
{
   253c2:	b507      	push	{r0, r1, r2, lr}
  uint_8 err;

  err = USB_Class_CDC_Init(CONTROLLER_ID, CDC1_App_Callback, NULL, CDC1_Notify_Callback, TRUE);
   253c4:	2301      	movs	r3, #1
   253c6:	2200      	movs	r2, #0
   253c8:	9300      	str	r3, [sp, #0]
   253ca:	4905      	ldr	r1, [pc, #20]	; (253e0 <CDC1_Init+0x1e>)
   253cc:	4b05      	ldr	r3, [pc, #20]	; (253e4 <CDC1_Init+0x22>)
   253ce:	4610      	mov	r0, r2
   253d0:	f000 fa1e 	bl	25810 <USB_Class_CDC_Init>
  if(err != USB_OK) {
   253d4:	2800      	cmp	r0, #0
    /* Error initializing USB-CDC Class */
    return ERR_FAILED;
  }
  return ERR_OK;
}
   253d6:	bf18      	it	ne
   253d8:	201b      	movne	r0, #27
   253da:	b003      	add	sp, #12
   253dc:	f85d fb04 	ldr.w	pc, [sp], #4
   253e0:	00025241 	.word	0x00025241
   253e4:	0002521d 	.word	0x0002521d

000253e8 <CDC1_PutBufferChecked>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte CDC1_PutBufferChecked(byte *buf, size_t bufSize)
{
   253e8:	b538      	push	{r3, r4, r5, lr}
   253ea:	460c      	mov	r4, r1
   253ec:	4605      	mov	r5, r0
  byte res;

  if(bufSize>CDC1_GetFreeInTxBuf()) { /* no room at the Inn... */
   253ee:	f000 f897 	bl	25520 <Tx1_NofFreeElements>
   253f2:	42a0      	cmp	r0, r4
   253f4:	d30a      	bcc.n	2540c <CDC1_PutBufferChecked+0x24>
   253f6:	442c      	add	r4, r5
    res = ERR_TXFULL;
  } else {
    res = ERR_OK;
   253f8:	2000      	movs	r0, #0
    while(bufSize>0 && res==ERR_OK) {
   253fa:	42a5      	cmp	r5, r4
   253fc:	d000      	beq.n	25400 <CDC1_PutBufferChecked+0x18>
   253fe:	b100      	cbz	r0, 25402 <CDC1_PutBufferChecked+0x1a>
      bufSize--;
      buf++;
    }
  }
  return res;
}
   25400:	bd38      	pop	{r3, r4, r5, pc}
      res = Tx1_Put(*buf);
   25402:	f815 0b01 	ldrb.w	r0, [r5], #1
   25406:	f000 f851 	bl	254ac <Tx1_Put>
      buf++;
   2540a:	e7f6      	b.n	253fa <CDC1_PutBufferChecked+0x12>
    res = ERR_TXFULL;
   2540c:	200b      	movs	r0, #11
   2540e:	e7f7      	b.n	25400 <CDC1_PutBufferChecked+0x18>

00025410 <Rx1_Put>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte Rx1_Put(Rx1_ElementType elem)
{
   25410:	b510      	push	{r4, lr}
  byte res = ERR_OK;
  Rx1_DEFINE_CRITICAL();

  Rx1_ENTER_CRITICAL();
  if(Rx1_inSize==Rx1_BUF_SIZE) {
   25412:	4a0a      	ldr	r2, [pc, #40]	; (2543c <Rx1_Put+0x2c>)
   25414:	7811      	ldrb	r1, [r2, #0]
   25416:	2940      	cmp	r1, #64	; 0x40
   25418:	d00e      	beq.n	25438 <Rx1_Put+0x28>
    res = ERR_TXFULL;
  } else {
    Rx1_buffer[Rx1_inIdx] = elem;
   2541a:	7853      	ldrb	r3, [r2, #1]
   2541c:	18d4      	adds	r4, r2, r3
    Rx1_inSize++;
    Rx1_inIdx++;
   2541e:	3301      	adds	r3, #1
   25420:	b2db      	uxtb	r3, r3
    if(Rx1_inIdx==Rx1_BUF_SIZE) {
   25422:	2b40      	cmp	r3, #64	; 0x40
    Rx1_buffer[Rx1_inIdx] = elem;
   25424:	70a0      	strb	r0, [r4, #2]
    Rx1_inSize++;
   25426:	f101 0101 	add.w	r1, r1, #1
   2542a:	f04f 0000 	mov.w	r0, #0
   2542e:	7011      	strb	r1, [r2, #0]
    Rx1_inIdx++;
   25430:	bf14      	ite	ne
   25432:	7053      	strbne	r3, [r2, #1]
      Rx1_inIdx = 0;
   25434:	7050      	strbeq	r0, [r2, #1]
    }
  }
  Rx1_EXIT_CRITICAL();
  return res;
}
   25436:	bd10      	pop	{r4, pc}
    res = ERR_TXFULL;
   25438:	200b      	movs	r0, #11
   2543a:	e7fc      	b.n	25436 <Rx1_Put+0x26>
   2543c:	1fff5a5f 	.word	0x1fff5a5f

00025440 <Rx1_Get>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte Rx1_Get(Rx1_ElementType *elemP)
{
   25440:	b510      	push	{r4, lr}
  byte res = ERR_OK;
  Rx1_DEFINE_CRITICAL();

  Rx1_ENTER_CRITICAL();
  if(Rx1_inSize==0) {
   25442:	4a0c      	ldr	r2, [pc, #48]	; (25474 <Rx1_Get+0x34>)
   25444:	7811      	ldrb	r1, [r2, #0]
   25446:	b191      	cbz	r1, 2546e <Rx1_Get+0x2e>
    res = ERR_RXEMPTY;
  } else {
    *elemP = Rx1_buffer[Rx1_outIdx];
   25448:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
   2544c:	18d4      	adds	r4, r2, r3
    Rx1_inSize--;
    Rx1_outIdx++;
   2544e:	3301      	adds	r3, #1
   25450:	b2db      	uxtb	r3, r3
    *elemP = Rx1_buffer[Rx1_outIdx];
   25452:	78a4      	ldrb	r4, [r4, #2]
   25454:	7004      	strb	r4, [r0, #0]
    if(Rx1_outIdx==Rx1_BUF_SIZE) {
   25456:	2b40      	cmp	r3, #64	; 0x40
    Rx1_inSize--;
   25458:	f101 31ff 	add.w	r1, r1, #4294967295
   2545c:	f04f 0000 	mov.w	r0, #0
   25460:	7011      	strb	r1, [r2, #0]
    Rx1_outIdx++;
   25462:	bf14      	ite	ne
   25464:	f882 3042 	strbne.w	r3, [r2, #66]	; 0x42
      Rx1_outIdx = 0;
   25468:	f882 0042 	strbeq.w	r0, [r2, #66]	; 0x42
    }
  }
  Rx1_EXIT_CRITICAL();
  return res;
}
   2546c:	bd10      	pop	{r4, pc}
    res = ERR_RXEMPTY;
   2546e:	200a      	movs	r0, #10
   25470:	e7fc      	b.n	2546c <Rx1_Get+0x2c>
   25472:	bf00      	nop
   25474:	1fff5a5f 	.word	0x1fff5a5f

00025478 <Rx1_NofElements>:
** ===================================================================
*/
Rx1_BufSizeType Rx1_NofElements(void)
{
  return Rx1_inSize;
}
   25478:	4b01      	ldr	r3, [pc, #4]	; (25480 <Rx1_NofElements+0x8>)
   2547a:	7818      	ldrb	r0, [r3, #0]
   2547c:	4770      	bx	lr
   2547e:	bf00      	nop
   25480:	1fff5a5f 	.word	0x1fff5a5f

00025484 <Rx1_NofFreeElements>:
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
Rx1_BufSizeType Rx1_NofFreeElements(void)
{
  return (Rx1_BufSizeType)(Rx1_BUF_SIZE-Rx1_inSize);
   25484:	4b02      	ldr	r3, [pc, #8]	; (25490 <Rx1_NofFreeElements+0xc>)
   25486:	7818      	ldrb	r0, [r3, #0]
   25488:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
}
   2548c:	b2c0      	uxtb	r0, r0
   2548e:	4770      	bx	lr
   25490:	1fff5a5f 	.word	0x1fff5a5f

00025494 <Rx1_Init>:
**     Returns     : Nothing
** ===================================================================
*/
void Rx1_Init(void)
{
  Rx1_inIdx = 0;
   25494:	4b03      	ldr	r3, [pc, #12]	; (254a4 <Rx1_Init+0x10>)
   25496:	2200      	movs	r2, #0
   25498:	705a      	strb	r2, [r3, #1]
  Rx1_outIdx = 0;
   2549a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  Rx1_inSize = 0;
   2549e:	701a      	strb	r2, [r3, #0]
}
   254a0:	4770      	bx	lr
   254a2:	bf00      	nop
   254a4:	1fff5a5f 	.word	0x1fff5a5f

000254a8 <Rx1_Clear>:
void Rx1_Clear(void)
{
  Rx1_DEFINE_CRITICAL();

  Rx1_ENTER_CRITICAL();
  Rx1_Init();
   254a8:	f7ff bff4 	b.w	25494 <Rx1_Init>

000254ac <Tx1_Put>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte Tx1_Put(Tx1_ElementType elem)
{
   254ac:	b510      	push	{r4, lr}
  byte res = ERR_OK;
  Tx1_DEFINE_CRITICAL();

  Tx1_ENTER_CRITICAL();
  if(Tx1_inSize==Tx1_BUF_SIZE) {
   254ae:	4a0a      	ldr	r2, [pc, #40]	; (254d8 <Tx1_Put+0x2c>)
   254b0:	7811      	ldrb	r1, [r2, #0]
   254b2:	2940      	cmp	r1, #64	; 0x40
   254b4:	d00e      	beq.n	254d4 <Tx1_Put+0x28>
    res = ERR_TXFULL;
  } else {
    Tx1_buffer[Tx1_inIdx] = elem;
   254b6:	7853      	ldrb	r3, [r2, #1]
   254b8:	18d4      	adds	r4, r2, r3
    Tx1_inSize++;
    Tx1_inIdx++;
   254ba:	3301      	adds	r3, #1
   254bc:	b2db      	uxtb	r3, r3
    if(Tx1_inIdx==Tx1_BUF_SIZE) {
   254be:	2b40      	cmp	r3, #64	; 0x40
    Tx1_buffer[Tx1_inIdx] = elem;
   254c0:	70a0      	strb	r0, [r4, #2]
    Tx1_inSize++;
   254c2:	f101 0101 	add.w	r1, r1, #1
   254c6:	f04f 0000 	mov.w	r0, #0
   254ca:	7011      	strb	r1, [r2, #0]
    Tx1_inIdx++;
   254cc:	bf14      	ite	ne
   254ce:	7053      	strbne	r3, [r2, #1]
      Tx1_inIdx = 0;
   254d0:	7050      	strbeq	r0, [r2, #1]
    }
  }
  Tx1_EXIT_CRITICAL();
  return res;
}
   254d2:	bd10      	pop	{r4, pc}
    res = ERR_TXFULL;
   254d4:	200b      	movs	r0, #11
   254d6:	e7fc      	b.n	254d2 <Tx1_Put+0x26>
   254d8:	1fff5aa2 	.word	0x1fff5aa2

000254dc <Tx1_Get>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte Tx1_Get(Tx1_ElementType *elemP)
{
   254dc:	b510      	push	{r4, lr}
  byte res = ERR_OK;
  Tx1_DEFINE_CRITICAL();

  Tx1_ENTER_CRITICAL();
  if(Tx1_inSize==0) {
   254de:	4a0c      	ldr	r2, [pc, #48]	; (25510 <Tx1_Get+0x34>)
   254e0:	7811      	ldrb	r1, [r2, #0]
   254e2:	b191      	cbz	r1, 2550a <Tx1_Get+0x2e>
    res = ERR_RXEMPTY;
  } else {
    *elemP = Tx1_buffer[Tx1_outIdx];
   254e4:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
   254e8:	18d4      	adds	r4, r2, r3
    Tx1_inSize--;
    Tx1_outIdx++;
   254ea:	3301      	adds	r3, #1
   254ec:	b2db      	uxtb	r3, r3
    *elemP = Tx1_buffer[Tx1_outIdx];
   254ee:	78a4      	ldrb	r4, [r4, #2]
   254f0:	7004      	strb	r4, [r0, #0]
    if(Tx1_outIdx==Tx1_BUF_SIZE) {
   254f2:	2b40      	cmp	r3, #64	; 0x40
    Tx1_inSize--;
   254f4:	f101 31ff 	add.w	r1, r1, #4294967295
   254f8:	f04f 0000 	mov.w	r0, #0
   254fc:	7011      	strb	r1, [r2, #0]
    Tx1_outIdx++;
   254fe:	bf14      	ite	ne
   25500:	f882 3042 	strbne.w	r3, [r2, #66]	; 0x42
      Tx1_outIdx = 0;
   25504:	f882 0042 	strbeq.w	r0, [r2, #66]	; 0x42
    }
  }
  Tx1_EXIT_CRITICAL();
  return res;
}
   25508:	bd10      	pop	{r4, pc}
    res = ERR_RXEMPTY;
   2550a:	200a      	movs	r0, #10
   2550c:	e7fc      	b.n	25508 <Tx1_Get+0x2c>
   2550e:	bf00      	nop
   25510:	1fff5aa2 	.word	0x1fff5aa2

00025514 <Tx1_NofElements>:
** ===================================================================
*/
Tx1_BufSizeType Tx1_NofElements(void)
{
  return Tx1_inSize;
}
   25514:	4b01      	ldr	r3, [pc, #4]	; (2551c <Tx1_NofElements+0x8>)
   25516:	7818      	ldrb	r0, [r3, #0]
   25518:	4770      	bx	lr
   2551a:	bf00      	nop
   2551c:	1fff5aa2 	.word	0x1fff5aa2

00025520 <Tx1_NofFreeElements>:
**         ---             - Number of elements in the buffer.
** ===================================================================
*/
Tx1_BufSizeType Tx1_NofFreeElements(void)
{
  return (Tx1_BufSizeType)(Tx1_BUF_SIZE-Tx1_inSize);
   25520:	4b02      	ldr	r3, [pc, #8]	; (2552c <Tx1_NofFreeElements+0xc>)
   25522:	7818      	ldrb	r0, [r3, #0]
   25524:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
}
   25528:	b2c0      	uxtb	r0, r0
   2552a:	4770      	bx	lr
   2552c:	1fff5aa2 	.word	0x1fff5aa2

00025530 <Tx1_Init>:
**     Returns     : Nothing
** ===================================================================
*/
void Tx1_Init(void)
{
  Tx1_inIdx = 0;
   25530:	4b03      	ldr	r3, [pc, #12]	; (25540 <Tx1_Init+0x10>)
   25532:	2200      	movs	r2, #0
   25534:	705a      	strb	r2, [r3, #1]
  Tx1_outIdx = 0;
   25536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  Tx1_inSize = 0;
   2553a:	701a      	strb	r2, [r3, #0]
}
   2553c:	4770      	bx	lr
   2553e:	bf00      	nop
   25540:	1fff5aa2 	.word	0x1fff5aa2

00025544 <Tx1_Clear>:
void Tx1_Clear(void)
{
  Tx1_DEFINE_CRITICAL();

  Tx1_ENTER_CRITICAL();
  Tx1_Init();
   25544:	f7ff bff4 	b.w	25530 <Tx1_Init>

00025548 <USB_Class_CDC_Service_Cic_Notify>:
 * Called by Lower layer when data on CIC Endpoint is sent
 *****************************************************************************/
void USB_Class_CDC_Service_Cic_Notify (
    PTR_USB_DEV_EVENT_STRUCT event  /* [IN] Pointer to USB Event Structure */
)
{
   25548:	b570      	push	{r4, r5, r6, lr}
   2554a:	4604      	mov	r4, r0
#if IMPLEMENT_QUEUING
    uint_8 index;
    uint_8 producer, consumer;
    USB_ENDPOINTS *usb_ep_data = (USB_ENDPOINTS *)
        USB_Desc_Get_Endpoints(event->controller_ID);
   2554c:	7800      	ldrb	r0, [r0, #0]
   2554e:	f001 f989 	bl	26864 <USB_Desc_Get_Endpoints>

    USB_CLASS_CDC_QUEUE queue;

    /* map the endpoint num to the index of the endpoint structure */
    for(index = 0; index < usb_ep_data->count; index++)
   25552:	f810 1b01 	ldrb.w	r1, [r0], #1
   25556:	2300      	movs	r3, #0
   25558:	b2da      	uxtb	r2, r3
   2555a:	4291      	cmp	r1, r2
   2555c:	d82b      	bhi.n	255b6 <USB_Class_CDC_Service_Cic_Notify+0x6e>
    {
        if(usb_ep_data->ep[index].ep_num == event->ep_num)
        break;
    }

    producer = g_cdc_ep[index].bin_producer;
   2555e:	4d1b      	ldr	r5, [pc, #108]	; (255cc <USB_Class_CDC_Service_Cic_Notify+0x84>)

    /* if there are no errors de-queue the queue and decrement the no. of
       transfers left, else send the same data again */
    if(event->errors == 0)
   25560:	7a21      	ldrb	r1, [r4, #8]
    producer = g_cdc_ep[index].bin_producer;
   25562:	2234      	movs	r2, #52	; 0x34
   25564:	fb02 5203 	mla	r2, r2, r3, r5
   25568:	78d6      	ldrb	r6, [r2, #3]
    if(event->errors == 0)
   2556a:	b911      	cbnz	r1, 25572 <USB_Class_CDC_Service_Cic_Notify+0x2a>
    {
        g_cdc_ep[index].bin_consumer++;
   2556c:	7891      	ldrb	r1, [r2, #2]
   2556e:	3101      	adds	r1, #1
   25570:	7091      	strb	r1, [r2, #2]
    }

    consumer = g_cdc_ep[index].bin_consumer;
   25572:	2234      	movs	r2, #52	; 0x34
   25574:	4353      	muls	r3, r2
   25576:	18ea      	adds	r2, r5, r3
   25578:	7890      	ldrb	r0, [r2, #2]

    if(consumer != producer)
   2557a:	4286      	cmp	r6, r0
   2557c:	d00c      	beq.n	25598 <USB_Class_CDC_Service_Cic_Notify+0x50>
    {/*if bin is not empty */

        queue = g_cdc_ep[index].queue[consumer%MAX_QUEUE_ELEMS];
   2557e:	f000 0203 	and.w	r2, r0, #3
   25582:	3304      	adds	r3, #4
   25584:	200c      	movs	r0, #12
   25586:	fb10 3002 	smlabb	r0, r0, r2, r3
   2558a:	1829      	adds	r1, r5, r0

        (void)USB_Class_Send_Data(queue.controller_ID, queue.channel,
   2558c:	5c28      	ldrb	r0, [r5, r0]
   2558e:	890b      	ldrh	r3, [r1, #8]
   25590:	684a      	ldr	r2, [r1, #4]
   25592:	7849      	ldrb	r1, [r1, #1]
   25594:	f000 fb94 	bl	25cc0 <USB_Class_Send_Data>
            queue.app_data.data_ptr, queue.app_data.data_size);
    }
#endif

    if(g_cdc_class_callback != NULL)
   25598:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   2559c:	b1a3      	cbz	r3, 255c8 <USB_Class_CDC_Service_Cic_Notify+0x80>
    {
        uint_8 event_type = USB_APP_SEND_COMPLETE;

        if(event->errors != 0)
   2559e:	7a22      	ldrb	r2, [r4, #8]
        {
            event_type = USB_APP_ERROR;
   255a0:	2a00      	cmp	r2, #0
        }
        g_cdc_class_callback(event->controller_ID, event_type,
            (uint_8*)(&(event->errors)));
   255a2:	4622      	mov	r2, r4
        g_cdc_class_callback(event->controller_ID, event_type,
   255a4:	bf08      	it	eq
   255a6:	2103      	moveq	r1, #3
    }
}
   255a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        g_cdc_class_callback(event->controller_ID, event_type,
   255ac:	f812 0b08 	ldrb.w	r0, [r2], #8
   255b0:	bf18      	it	ne
   255b2:	2105      	movne	r1, #5
   255b4:	4718      	bx	r3
        if(usb_ep_data->ep[index].ep_num == event->ep_num)
   255b6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   255ba:	1c5a      	adds	r2, r3, #1
   255bc:	5d46      	ldrb	r6, [r0, r5]
   255be:	7865      	ldrb	r5, [r4, #1]
   255c0:	42ae      	cmp	r6, r5
   255c2:	d0cc      	beq.n	2555e <USB_Class_CDC_Service_Cic_Notify+0x16>
   255c4:	4613      	mov	r3, r2
   255c6:	e7c7      	b.n	25558 <USB_Class_CDC_Service_Cic_Notify+0x10>
}
   255c8:	bd70      	pop	{r4, r5, r6, pc}
   255ca:	bf00      	nop
   255cc:	1fff5ae8 	.word	0x1fff5ae8

000255d0 <USB_Class_CDC_Event>:
void USB_Class_CDC_Event (
    uint_8 controller_ID,   /* [IN] Controller ID */
    uint_8 event,           /* [IN] Event Type */
    void* val               /* [OUT] Pointer to configuration Value */
)
{
   255d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255d4:	b085      	sub	sp, #20
   255d6:	460d      	mov	r5, r1
   255d8:	4690      	mov	r8, r2
   255da:	f88d 000f 	strb.w	r0, [sp, #15]
    uint_8 index;
    USB_ENDPOINTS *usb_ep_data = (USB_ENDPOINTS *)
        USB_Desc_Get_Endpoints(controller_ID);
   255de:	f001 f941 	bl	26864 <USB_Desc_Get_Endpoints>

    if(event == USB_APP_ENUM_COMPLETE)
   255e2:	2d02      	cmp	r5, #2
        USB_Desc_Get_Endpoints(controller_ID);
   255e4:	4606      	mov	r6, r0
    if(event == USB_APP_ENUM_COMPLETE)
   255e6:	d148      	bne.n	2567a <USB_Class_CDC_Event+0xaa>
            if(dev_class_ptr->class_type == 0x02/*CDC_CC*/)
                break;
            index_num +=dev_class_ptr->value[0];
        }
#else
		ep_count = usb_ep_data->count;
   255e8:	4604      	mov	r4, r0
#endif

		for(count=index_num; count<ep_count+index_num; count++)
   255ea:	2700      	movs	r7, #0
		ep_count = usb_ep_data->count;
   255ec:	f814 9b01 	ldrb.w	r9, [r4], #1
		for(count=index_num; count<ep_count+index_num; count++)
   255f0:	b2fb      	uxtb	r3, r7
   255f2:	4599      	cmp	r9, r3
   255f4:	f104 0405 	add.w	r4, r4, #5
   255f8:	d80f      	bhi.n	2561a <USB_Class_CDC_Event+0x4a>
   255fa:	2700      	movs	r7, #0
            /* register callback service for Non Control EndPoints */
            switch(ep_struct->type)
            {
#if CIC_NOTIF_ELEM_SUPPORT
                case USB_INTERRUPT_PIPE :
                    (void)_usb_device_register_service(controller_ID,
   255fc:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 256ac <USB_Class_CDC_Event+0xdc>
   25600:	4634      	mov	r4, r6
            (void)_usb_device_init_endpoint(&controller_ID, ep_struct->ep_num,
   25602:	46ba      	mov	sl, r7
        for(count=index_num; count<ep_count+index_num; count++)
   25604:	b2fb      	uxtb	r3, r7
   25606:	4599      	cmp	r9, r3
   25608:	d811      	bhi.n	2562e <USB_Class_CDC_Event+0x5e>
            g_cdc_ep[index].bin_consumer = 0x00;
            g_cdc_ep[index].bin_producer = 0x00;
        }
#endif
    }
    if(g_cdc_class_callback != NULL)
   2560a:	4b27      	ldr	r3, [pc, #156]	; (256a8 <USB_Class_CDC_Event+0xd8>)
   2560c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   25610:	2b00      	cmp	r3, #0
   25612:	d143      	bne.n	2569c <USB_Class_CDC_Event+0xcc>
    {
        g_cdc_class_callback(controller_ID, event, val);
    }
}
   25614:	b005      	add	sp, #20
   25616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(void)_usb_device_deinit_endpoint(&controller_ID,
   2561a:	f814 2c03 	ldrb.w	r2, [r4, #-3]
   2561e:	f814 1c05 	ldrb.w	r1, [r4, #-5]
   25622:	f10d 000f 	add.w	r0, sp, #15
   25626:	f001 f9d3 	bl	269d0 <_usb_device_deinit_endpoint>
		for(count=index_num; count<ep_count+index_num; count++)
   2562a:	3701      	adds	r7, #1
   2562c:	e7e0      	b.n	255f0 <USB_Class_CDC_Event+0x20>
            (void)_usb_device_init_endpoint(&controller_ID, ep_struct->ep_num,
   2562e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
   25632:	4432      	add	r2, r6
   25634:	78e3      	ldrb	r3, [r4, #3]
   25636:	8892      	ldrh	r2, [r2, #4]
   25638:	7861      	ldrb	r1, [r4, #1]
   2563a:	f8cd a004 	str.w	sl, [sp, #4]
   2563e:	78a0      	ldrb	r0, [r4, #2]
   25640:	9000      	str	r0, [sp, #0]
   25642:	f10d 000f 	add.w	r0, sp, #15
   25646:	f001 f9a1 	bl	2698c <_usb_device_init_endpoint>
            switch(ep_struct->type)
   2564a:	78a3      	ldrb	r3, [r4, #2]
   2564c:	2b03      	cmp	r3, #3
   2564e:	d105      	bne.n	2565c <USB_Class_CDC_Event+0x8c>
                    (void)_usb_device_register_service(controller_ID,
   25650:	7861      	ldrb	r1, [r4, #1]
   25652:	f89d 000f 	ldrb.w	r0, [sp, #15]
   25656:	465a      	mov	r2, fp
   25658:	f001 fa22 	bl	26aa0 <_usb_device_register_service>
                (ep_struct->direction << USB_COMPONENT_DIRECTION_SHIFT)),
   2565c:	78e3      	ldrb	r3, [r4, #3]
                (uint_8)(USB_STATUS_ENDPOINT | ep_struct->ep_num |
   2565e:	7861      	ldrb	r1, [r4, #1]
   25660:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
            (void)_usb_device_set_status(&controller_ID,
   25664:	f041 0110 	orr.w	r1, r1, #16
   25668:	2200      	movs	r2, #0
   2566a:	b2c9      	uxtb	r1, r1
   2566c:	f10d 000f 	add.w	r0, sp, #15
   25670:	f001 f9de 	bl	26a30 <_usb_device_set_status>
        for(count=index_num; count<ep_count+index_num; count++)
   25674:	3701      	adds	r7, #1
   25676:	3405      	adds	r4, #5
   25678:	e7c4      	b.n	25604 <USB_Class_CDC_Event+0x34>
    else if(event == USB_APP_BUS_RESET)
   2567a:	2d00      	cmp	r5, #0
   2567c:	d1c5      	bne.n	2560a <USB_Class_CDC_Event+0x3a>
        for(index = 0; index < usb_ep_data->count; index++)
   2567e:	7804      	ldrb	r4, [r0, #0]
   25680:	4b09      	ldr	r3, [pc, #36]	; (256a8 <USB_Class_CDC_Event+0xd8>)
   25682:	462a      	mov	r2, r5
            g_cdc_ep[index].bin_consumer = 0x00;
   25684:	4629      	mov	r1, r5
        for(index = 0; index < usb_ep_data->count; index++)
   25686:	b2d0      	uxtb	r0, r2
   25688:	4284      	cmp	r4, r0
   2568a:	f103 0334 	add.w	r3, r3, #52	; 0x34
   2568e:	d9bc      	bls.n	2560a <USB_Class_CDC_Event+0x3a>
            g_cdc_ep[index].bin_consumer = 0x00;
   25690:	f803 1c32 	strb.w	r1, [r3, #-50]
            g_cdc_ep[index].bin_producer = 0x00;
   25694:	f803 1c31 	strb.w	r1, [r3, #-49]
        for(index = 0; index < usb_ep_data->count; index++)
   25698:	3201      	adds	r2, #1
   2569a:	e7f4      	b.n	25686 <USB_Class_CDC_Event+0xb6>
        g_cdc_class_callback(controller_ID, event, val);
   2569c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   256a0:	4642      	mov	r2, r8
   256a2:	4629      	mov	r1, r5
   256a4:	4798      	blx	r3
}
   256a6:	e7b5      	b.n	25614 <USB_Class_CDC_Event+0x44>
   256a8:	1fff5ae8 	.word	0x1fff5ae8
   256ac:	00025549 	.word	0x00025549

000256b0 <USB_Other_Requests>:
    uint_8 controller_ID,           /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,/* [IN] Pointer to Setup Packet Received */
    uint_8_ptr *data,           /* [OUT] Pointer to Data Buffer to be sent */
    USB_PACKET_SIZE *size           /* [OUT] Size of Data buffer */
)
{
   256b0:	b4f0      	push	{r4, r5, r6, r7}
   256b2:	780d      	ldrb	r5, [r1, #0]
   256b4:	f005 0560 	and.w	r5, r5, #96	; 0x60
    uint_8 status = USBERR_INVALID_REQ_TYPE;
    if((setup_packet->request_type & USB_REQUEST_CLASS_MASK) ==
   256b8:	2d20      	cmp	r5, #32
{
   256ba:	461f      	mov	r7, r3
    if((setup_packet->request_type & USB_REQUEST_CLASS_MASK) ==
   256bc:	d135      	bne.n	2572a <USB_Other_Requests+0x7a>
    {
        /* class request so handle it here */
        status=USB_OK;

        /* call for class/subclass specific requests */
        switch(setup_packet->request)
   256be:	784d      	ldrb	r5, [r1, #1]
   256c0:	2d23      	cmp	r5, #35	; 0x23
   256c2:	d811      	bhi.n	256e8 <USB_Other_Requests+0x38>
   256c4:	2d1f      	cmp	r5, #31
   256c6:	d808      	bhi.n	256da <USB_Other_Requests+0x2a>
   256c8:	2d03      	cmp	r5, #3
   256ca:	d011      	beq.n	256f0 <USB_Other_Requests+0x40>
   256cc:	2d04      	cmp	r5, #4
   256ce:	d012      	beq.n	256f6 <USB_Other_Requests+0x46>
   256d0:	2d02      	cmp	r5, #2
   256d2:	d109      	bne.n	256e8 <USB_Other_Requests+0x38>
            status = g_vendor_req_callback(controller_ID, setup_packet, data,
            size);
        }
    }
    return status;
}
   256d4:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Set_Comm_Feature(controller_ID,
   256d6:	f000 b96b 	b.w	259b0 <USB_Class_CDC_PSTN_Set_Comm_Feature>
   256da:	3d21      	subs	r5, #33	; 0x21
   256dc:	2d02      	cmp	r5, #2
   256de:	d818      	bhi.n	25712 <USB_Other_Requests+0x62>
   256e0:	e8df f005 	tbb	[pc, r5]
   256e4:	1b13      	.short	0x1b13
   256e6:	1f          	.byte	0x1f
   256e7:	00          	.byte	0x00
                *size=0;
   256e8:	2000      	movs	r0, #0
   256ea:	8038      	strh	r0, [r7, #0]
}
   256ec:	bcf0      	pop	{r4, r5, r6, r7}
   256ee:	4770      	bx	lr
   256f0:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Get_Comm_Feature(controller_ID,
   256f2:	f000 b944 	b.w	2597e <USB_Class_CDC_PSTN_Get_Comm_Feature>
                *size = COMM_FEATURE_DATA_SIZE;
   256f6:	2502      	movs	r5, #2
   256f8:	801d      	strh	r5, [r3, #0]
                **data = 0x00; *(++(*data)) = 0x00;/* clear both feature bytes */
   256fa:	6815      	ldr	r5, [r2, #0]
   256fc:	2600      	movs	r6, #0
   256fe:	702e      	strb	r6, [r5, #0]
   25700:	6815      	ldr	r5, [r2, #0]
   25702:	1c6f      	adds	r7, r5, #1
   25704:	6017      	str	r7, [r2, #0]
   25706:	706e      	strb	r6, [r5, #1]
   25708:	e7e4      	b.n	256d4 <USB_Other_Requests+0x24>
                status = USB_Class_CDC_PSTN_Get_Line_Coding(controller_ID,
   2570a:	463b      	mov	r3, r7
}
   2570c:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Get_Line_Coding(controller_ID,
   2570e:	f000 b91b 	b.w	25948 <USB_Class_CDC_PSTN_Get_Line_Coding>
                status = USB_Class_CDC_PSTN_Set_Line_Coding(controller_ID,
   25712:	463b      	mov	r3, r7
}
   25714:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Set_Line_Coding(controller_ID,
   25716:	f000 b91f 	b.w	25958 <USB_Class_CDC_PSTN_Set_Line_Coding>
                status = USB_Class_CDC_PSTN_Set_Ctrl_Line_State(controller_ID,
   2571a:	463b      	mov	r3, r7
}
   2571c:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Set_Ctrl_Line_State(controller_ID,
   2571e:	f000 b96d 	b.w	259fc <USB_Class_CDC_PSTN_Set_Ctrl_Line_State>
                status = USB_Class_CDC_PSTN_Send_Break(controller_ID,
   25722:	463b      	mov	r3, r7
}
   25724:	bcf0      	pop	{r4, r5, r6, r7}
                status = USB_Class_CDC_PSTN_Send_Break(controller_ID,
   25726:	f000 b927 	b.w	25978 <USB_Class_CDC_PSTN_Send_Break>
    else if((setup_packet->request_type & USB_REQUEST_CLASS_MASK) ==
   2572a:	2d40      	cmp	r5, #64	; 0x40
   2572c:	d106      	bne.n	2573c <USB_Other_Requests+0x8c>
        if(g_vendor_req_callback != NULL)
   2572e:	4c04      	ldr	r4, [pc, #16]	; (25740 <USB_Other_Requests+0x90>)
   25730:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
   25734:	b114      	cbz	r4, 2573c <USB_Other_Requests+0x8c>
            status = g_vendor_req_callback(controller_ID, setup_packet, data,
   25736:	46a4      	mov	ip, r4
}
   25738:	bcf0      	pop	{r4, r5, r6, r7}
            status = g_vendor_req_callback(controller_ID, setup_packet, data,
   2573a:	4760      	bx	ip
    uint_8 status = USBERR_INVALID_REQ_TYPE;
   2573c:	20cd      	movs	r0, #205	; 0xcd
   2573e:	e7d5      	b.n	256ec <USB_Other_Requests+0x3c>
   25740:	1fff5ae8 	.word	0x1fff5ae8

00025744 <USB_Class_CDC_Service_Dic_Bulk_In>:
{
   25744:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25746:	4604      	mov	r4, r0
        USB_Desc_Get_Endpoints(event->controller_ID);
   25748:	7800      	ldrb	r0, [r0, #0]
   2574a:	f001 f88b 	bl	26864 <USB_Desc_Get_Endpoints>
    bulk_in_recv.data_ptr = event->buffer_ptr;
   2574e:	6863      	ldr	r3, [r4, #4]
   25750:	9300      	str	r3, [sp, #0]
    bulk_in_recv.data_size = event->len;
   25752:	7aa2      	ldrb	r2, [r4, #10]
   25754:	7a63      	ldrb	r3, [r4, #9]
   25756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2575a:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(index = 0; index < usb_ep_data->count; index++)
   2575e:	f810 1b01 	ldrb.w	r1, [r0], #1
   25762:	2300      	movs	r3, #0
   25764:	b2da      	uxtb	r2, r3
   25766:	4291      	cmp	r1, r2
   25768:	d828      	bhi.n	257bc <USB_Class_CDC_Service_Dic_Bulk_In+0x78>
    producer = g_cdc_ep[index].bin_producer;
   2576a:	4d1a      	ldr	r5, [pc, #104]	; (257d4 <USB_Class_CDC_Service_Dic_Bulk_In+0x90>)
    if(event->errors == 0)
   2576c:	7a21      	ldrb	r1, [r4, #8]
    producer = g_cdc_ep[index].bin_producer;
   2576e:	2234      	movs	r2, #52	; 0x34
   25770:	fb02 5203 	mla	r2, r2, r3, r5
   25774:	78d6      	ldrb	r6, [r2, #3]
    if(event->errors == 0)
   25776:	b911      	cbnz	r1, 2577e <USB_Class_CDC_Service_Dic_Bulk_In+0x3a>
        g_cdc_ep[index].bin_consumer++;
   25778:	7891      	ldrb	r1, [r2, #2]
   2577a:	3101      	adds	r1, #1
   2577c:	7091      	strb	r1, [r2, #2]
    consumer = g_cdc_ep[index].bin_consumer;
   2577e:	2234      	movs	r2, #52	; 0x34
   25780:	4353      	muls	r3, r2
   25782:	18ea      	adds	r2, r5, r3
   25784:	7890      	ldrb	r0, [r2, #2]
    if(consumer != producer)
   25786:	4286      	cmp	r6, r0
   25788:	d00c      	beq.n	257a4 <USB_Class_CDC_Service_Dic_Bulk_In+0x60>
        queue = g_cdc_ep[index].queue[consumer%MAX_QUEUE_ELEMS];
   2578a:	f000 0203 	and.w	r2, r0, #3
   2578e:	3304      	adds	r3, #4
   25790:	200c      	movs	r0, #12
   25792:	fb10 3002 	smlabb	r0, r0, r2, r3
   25796:	1829      	adds	r1, r5, r0
        (void)USB_Class_Send_Data(queue.controller_ID, queue.channel,
   25798:	5c28      	ldrb	r0, [r5, r0]
   2579a:	890b      	ldrh	r3, [r1, #8]
   2579c:	684a      	ldr	r2, [r1, #4]
   2579e:	7849      	ldrb	r1, [r1, #1]
   257a0:	f000 fa8e 	bl	25cc0 <USB_Class_Send_Data>
    if(g_cdc_class_callback != NULL)
   257a4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   257a8:	b133      	cbz	r3, 257b8 <USB_Class_CDC_Service_Dic_Bulk_In+0x74>
        if(event->errors != 0)
   257aa:	7a22      	ldrb	r2, [r4, #8]
   257ac:	7820      	ldrb	r0, [r4, #0]
   257ae:	b172      	cbz	r2, 257ce <USB_Class_CDC_Service_Dic_Bulk_In+0x8a>
            g_cdc_class_callback(event->controller_ID, USB_APP_ERROR,
   257b0:	f104 0208 	add.w	r2, r4, #8
   257b4:	2105      	movs	r1, #5
            g_cdc_class_callback(event->controller_ID, USB_APP_SEND_COMPLETE,
   257b6:	4798      	blx	r3
}
   257b8:	b002      	add	sp, #8
   257ba:	bd70      	pop	{r4, r5, r6, pc}
        if(usb_ep_data->ep[index].ep_num == event->ep_num)
   257bc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   257c0:	1c5a      	adds	r2, r3, #1
   257c2:	5d46      	ldrb	r6, [r0, r5]
   257c4:	7865      	ldrb	r5, [r4, #1]
   257c6:	42ae      	cmp	r6, r5
   257c8:	d0cf      	beq.n	2576a <USB_Class_CDC_Service_Dic_Bulk_In+0x26>
   257ca:	4613      	mov	r3, r2
   257cc:	e7ca      	b.n	25764 <USB_Class_CDC_Service_Dic_Bulk_In+0x20>
            g_cdc_class_callback(event->controller_ID, USB_APP_SEND_COMPLETE,
   257ce:	466a      	mov	r2, sp
   257d0:	2103      	movs	r1, #3
   257d2:	e7f0      	b.n	257b6 <USB_Class_CDC_Service_Dic_Bulk_In+0x72>
   257d4:	1fff5ae8 	.word	0x1fff5ae8

000257d8 <USB_Class_CDC_Service_Dic_Bulk_Out>:
{   APP_DATA_STRUCT bulk_out_recv;
   257d8:	b507      	push	{r0, r1, r2, lr}
    bulk_out_recv.data_ptr = event->buffer_ptr;
   257da:	6843      	ldr	r3, [r0, #4]
   257dc:	9300      	str	r3, [sp, #0]
    bulk_out_recv.data_size = event->len;
   257de:	7a43      	ldrb	r3, [r0, #9]
   257e0:	7a81      	ldrb	r1, [r0, #10]
   257e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   257e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(g_cdc_class_callback != NULL)
   257ea:	4b08      	ldr	r3, [pc, #32]	; (2580c <USB_Class_CDC_Service_Dic_Bulk_Out+0x34>)
   257ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
{   APP_DATA_STRUCT bulk_out_recv;
   257f0:	4602      	mov	r2, r0
    if(g_cdc_class_callback != NULL)
   257f2:	b12b      	cbz	r3, 25800 <USB_Class_CDC_Service_Dic_Bulk_Out+0x28>
        if(event->errors != 0)
   257f4:	7a11      	ldrb	r1, [r2, #8]
   257f6:	7800      	ldrb	r0, [r0, #0]
   257f8:	b129      	cbz	r1, 25806 <USB_Class_CDC_Service_Dic_Bulk_Out+0x2e>
            g_cdc_class_callback(event->controller_ID, USB_APP_ERROR,
   257fa:	3208      	adds	r2, #8
   257fc:	2105      	movs	r1, #5
            g_cdc_class_callback(event->controller_ID, USB_APP_DATA_RECEIVED,
   257fe:	4798      	blx	r3
}
   25800:	b003      	add	sp, #12
   25802:	f85d fb04 	ldr.w	pc, [sp], #4
            g_cdc_class_callback(event->controller_ID, USB_APP_DATA_RECEIVED,
   25806:	466a      	mov	r2, sp
   25808:	2104      	movs	r1, #4
   2580a:	e7f8      	b.n	257fe <USB_Class_CDC_Service_Dic_Bulk_Out+0x26>
   2580c:	1fff5ae8 	.word	0x1fff5ae8

00025810 <USB_Class_CDC_Init>:
	USB_CLASS_CALLBACK 		cdc_class_callback,  /* [IN] CDC Class Callback */
	USB_REQ_FUNC       		vendor_req_callback, /* [IN] Vendor Request Callback */
	USB_CLASS_CALLBACK 		pstn_callback,       /* [IN] PSTN Callback */
	uint_8            		bVregEn              /* Enables or disables internal regulator */
)
{
   25810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25814:	4607      	mov	r7, r0
   25816:	4689      	mov	r9, r1
   25818:	4690      	mov	r8, r2
   2581a:	469a      	mov	sl, r3
    uint_8 index,status = USB_OK;
    USB_ENDPOINTS *usb_ep_data =
        (USB_ENDPOINTS *)USB_Desc_Get_Endpoints(controller_ID);
   2581c:	f001 f822 	bl	26864 <USB_Desc_Get_Endpoints>
#ifndef COMPOSITE_DEV
    /* Initialize the device layer*/
    status = _usb_device_init(controller_ID, NULL,
   25820:	7802      	ldrb	r2, [r0, #0]
   25822:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   25826:	3201      	adds	r2, #1
        (USB_ENDPOINTS *)USB_Desc_Get_Endpoints(controller_ID);
   25828:	4605      	mov	r5, r0
    status = _usb_device_init(controller_ID, NULL,
   2582a:	b2d2      	uxtb	r2, r2
   2582c:	2100      	movs	r1, #0
   2582e:	4638      	mov	r0, r7
   25830:	f001 f892 	bl	26958 <_usb_device_init>
        (uint_8)(usb_ep_data->count+1), bVregEn);
    /* +1 is for Control Endpoint */

    if(status == USB_OK)
   25834:	4604      	mov	r4, r0
   25836:	b9c0      	cbnz	r0, 2586a <USB_Class_CDC_Init+0x5a>
    {
        /* Initialize the generic class functions */
        status = USB_Class_Init(controller_ID,USB_Class_CDC_Event,
   25838:	4914      	ldr	r1, [pc, #80]	; (2588c <USB_Class_CDC_Init+0x7c>)
   2583a:	4a15      	ldr	r2, [pc, #84]	; (25890 <USB_Class_CDC_Init+0x80>)
   2583c:	4e15      	ldr	r6, [pc, #84]	; (25894 <USB_Class_CDC_Init+0x84>)
   2583e:	4638      	mov	r0, r7
   25840:	f000 f97f 	bl	25b42 <USB_Class_Init>
            USB_Other_Requests);
#endif
#if IMPLEMENT_QUEUING
            for(index = 0; index < usb_ep_data->count; index++)
   25844:	f815 1b01 	ldrb.w	r1, [r5], #1
   25848:	46b3      	mov	fp, r6
            {
                g_cdc_ep[index].endpoint = usb_ep_data->ep[index].ep_num;
                g_cdc_ep[index].type = usb_ep_data->ep[index].type;
                g_cdc_ep[index].bin_consumer = 0x00;
   2584a:	4623      	mov	r3, r4
            for(index = 0; index < usb_ep_data->count; index++)
   2584c:	b2e2      	uxtb	r2, r4
   2584e:	4291      	cmp	r1, r2
   25850:	f105 0505 	add.w	r5, r5, #5
   25854:	f106 0634 	add.w	r6, r6, #52	; 0x34
   25858:	d80a      	bhi.n	25870 <USB_Class_CDC_Init+0x60>
                g_cdc_ep[index].bin_producer = 0x00;
            }
#endif
#if PSTN_SUBCLASS_NOTIF_SUPPORT
        /* Initialize the pstn subclass functions */
        status = USB_Class_CDC_Pstn_Init(controller_ID,pstn_callback);
   2585a:	4651      	mov	r1, sl
   2585c:	4638      	mov	r0, r7
   2585e:	f000 f86d 	bl	2593c <USB_Class_CDC_Pstn_Init>
#endif
        if(status == USB_OK)
   25862:	4604      	mov	r4, r0
   25864:	b908      	cbnz	r0, 2586a <USB_Class_CDC_Init+0x5a>
        {
           /* save the callback pointer */
           g_cdc_class_callback = cdc_class_callback;

           /* save the callback pointer */
           g_vendor_req_callback = vendor_req_callback;
   25866:	e9cb 9827 	strd	r9, r8, [fp, #156]	; 0x9c
        }
#ifndef COMPOSITE_DEV
    }
#endif
    return status;
}
   2586a:	4620      	mov	r0, r4
   2586c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                g_cdc_ep[index].endpoint = usb_ep_data->ep[index].ep_num;
   25870:	f815 2c05 	ldrb.w	r2, [r5, #-5]
   25874:	f806 2c34 	strb.w	r2, [r6, #-52]
                g_cdc_ep[index].type = usb_ep_data->ep[index].type;
   25878:	f815 2c04 	ldrb.w	r2, [r5, #-4]
   2587c:	f806 2c33 	strb.w	r2, [r6, #-51]
                g_cdc_ep[index].bin_consumer = 0x00;
   25880:	f806 3c32 	strb.w	r3, [r6, #-50]
                g_cdc_ep[index].bin_producer = 0x00;
   25884:	f806 3c31 	strb.w	r3, [r6, #-49]
            for(index = 0; index < usb_ep_data->count; index++)
   25888:	3401      	adds	r4, #1
   2588a:	e7df      	b.n	2584c <USB_Class_CDC_Init+0x3c>
   2588c:	000255d1 	.word	0x000255d1
   25890:	000256b1 	.word	0x000256b1
   25894:	1fff5ae8 	.word	0x1fff5ae8

00025898 <USB_Class_CDC_DeInit>:
 *****************************************************************************/
uint_8 USB_Class_CDC_DeInit
(
    uint_8 controller_ID              /* [IN] Controller ID */
)
{
   25898:	b508      	push	{r3, lr}
    uint_8 status = USB_OK;
#ifdef COMPOSITE_DEV
    UNUSED(controller_ID);
#endif
    /* save the callback pointer */
    g_cdc_class_callback = NULL;
   2589a:	4b06      	ldr	r3, [pc, #24]	; (258b4 <USB_Class_CDC_DeInit+0x1c>)
   2589c:	2200      	movs	r2, #0

    /* free the vendor request callback pointer */
    g_vendor_req_callback = NULL;
   2589e:	e9c3 2227 	strd	r2, r2, [r3, #156]	; 0x9c

#ifndef COMPOSITE_DEV
    /* call common class deinit function */
    status = USB_Class_DeInit(controller_ID);
   258a2:	f000 f9a1 	bl	25be8 <USB_Class_DeInit>

    if(status == USB_OK)
   258a6:	b918      	cbnz	r0, 258b0 <USB_Class_CDC_DeInit+0x18>
    /* Call device deinit function */
    	status = _usb_device_deinit();
#endif
    return status;
}
   258a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	status = _usb_device_deinit();
   258ac:	f001 b866 	b.w	2697c <_usb_device_deinit>
}
   258b0:	bd08      	pop	{r3, pc}
   258b2:	bf00      	nop
   258b4:	1fff5ae8 	.word	0x1fff5ae8

000258b8 <USB_Class_CDC_Send_Data>:
    uint_8 controller_ID,   /* [IN] Controller ID */
    uint_8 ep_num,          /* [IN] Endpoint Number */
    uint_8_ptr app_buff,    /* Pointer to Application Buffer */
    USB_PACKET_SIZE size    /* Size of Application Buffer */
)
{
   258b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   258bc:	460f      	mov	r7, r1
   258be:	4699      	mov	r9, r3
   258c0:	4606      	mov	r6, r0
   258c2:	4690      	mov	r8, r2
#if IMPLEMENT_QUEUING
    uint_8 index;
    uint_8 producer, consumer;

    USB_ENDPOINTS *usb_ep_data = (USB_ENDPOINTS *)
                                    USB_Desc_Get_Endpoints(controller_ID);
   258c4:	f000 ffce 	bl	26864 <USB_Desc_Get_Endpoints>

    /* map the endpoint num to the index of the endpoint structure */
    for(index = 0; index < usb_ep_data->count; index++)
   258c8:	f810 1904 	ldrb.w	r1, [r0], #-4
   258cc:	2300      	movs	r3, #0
   258ce:	b2dc      	uxtb	r4, r3
   258d0:	428c      	cmp	r4, r1
   258d2:	461a      	mov	r2, r3
   258d4:	d205      	bcs.n	258e2 <USB_Class_CDC_Send_Data+0x2a>
    {
        if(usb_ep_data->ep[index].ep_num == ep_num)
   258d6:	3301      	adds	r3, #1
   258d8:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   258dc:	5d04      	ldrb	r4, [r0, r4]
   258de:	42bc      	cmp	r4, r7
   258e0:	d1f5      	bne.n	258ce <USB_Class_CDC_Send_Data+0x16>
        {
            break;
        }
    }

    producer = g_cdc_ep[index].bin_producer;
   258e2:	4d15      	ldr	r5, [pc, #84]	; (25938 <USB_Class_CDC_Send_Data+0x80>)
   258e4:	2334      	movs	r3, #52	; 0x34
   258e6:	4353      	muls	r3, r2
   258e8:	18ea      	adds	r2, r5, r3
   258ea:	78d4      	ldrb	r4, [r2, #3]
    consumer = g_cdc_ep[index].bin_consumer;
   258ec:	7890      	ldrb	r0, [r2, #2]

    if(((uint_8)(producer - consumer)) != (uint_8)(MAX_QUEUE_ELEMS))
   258ee:	1a21      	subs	r1, r4, r0
   258f0:	b2c9      	uxtb	r1, r1
   258f2:	2904      	cmp	r1, #4
   258f4:	d01b      	beq.n	2592e <USB_Class_CDC_Send_Data+0x76>
        /* the bin is not full*/

        uint_8 queue_num = (uint_8)(producer % MAX_QUEUE_ELEMS);

        /* put all send request parameters in the endpoint data structure */
        g_cdc_ep[index].queue[queue_num].controller_ID = controller_ID;
   258f6:	f004 0103 	and.w	r1, r4, #3
        g_cdc_ep[index].queue[queue_num].channel = ep_num;
        g_cdc_ep[index].queue[queue_num].app_data.data_ptr = app_buff;
        g_cdc_ep[index].queue[queue_num].app_data.data_size = size;

        /* increment producer bin by 1*/
        g_cdc_ep[index].bin_producer = ++producer;
   258fa:	3401      	adds	r4, #1
   258fc:	b2e4      	uxtb	r4, r4
        g_cdc_ep[index].queue[queue_num].controller_ID = controller_ID;
   258fe:	f04f 0c0c 	mov.w	ip, #12
   25902:	fb0c 3301 	mla	r3, ip, r1, r3
        g_cdc_ep[index].bin_producer = ++producer;
   25906:	70d4      	strb	r4, [r2, #3]

        if((uint_8)(producer - consumer) == (uint_8)1)
   25908:	1a24      	subs	r4, r4, r0
        g_cdc_ep[index].queue[queue_num].controller_ID = controller_ID;
   2590a:	441d      	add	r5, r3
        if((uint_8)(producer - consumer) == (uint_8)1)
   2590c:	b2e4      	uxtb	r4, r4
   2590e:	2c01      	cmp	r4, #1
        g_cdc_ep[index].queue[queue_num].controller_ID = controller_ID;
   25910:	712e      	strb	r6, [r5, #4]
        g_cdc_ep[index].queue[queue_num].channel = ep_num;
   25912:	716f      	strb	r7, [r5, #5]
        g_cdc_ep[index].queue[queue_num].app_data.data_ptr = app_buff;
   25914:	f8c5 8008 	str.w	r8, [r5, #8]
        g_cdc_ep[index].queue[queue_num].app_data.data_size = size;
   25918:	f8a5 900c 	strh.w	r9, [r5, #12]
        if((uint_8)(producer - consumer) == (uint_8)1)
   2591c:	d10a      	bne.n	25934 <USB_Class_CDC_Send_Data+0x7c>
        {
#endif
            status = USB_Class_Send_Data(controller_ID, ep_num, app_buff,size);
   2591e:	464b      	mov	r3, r9
   25920:	4642      	mov	r2, r8
   25922:	4639      	mov	r1, r7
   25924:	4630      	mov	r0, r6
    {
        status = USBERR_DEVICE_BUSY;
    }
#endif
    return status;
}
   25926:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            status = USB_Class_Send_Data(controller_ID, ep_num, app_buff,size);
   2592a:	f000 b9c9 	b.w	25cc0 <USB_Class_Send_Data>
        status = USBERR_DEVICE_BUSY;
   2592e:	20c1      	movs	r0, #193	; 0xc1
}
   25930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint_8 status = USB_OK;
   25934:	2000      	movs	r0, #0
   25936:	e7fb      	b.n	25930 <USB_Class_CDC_Send_Data+0x78>
   25938:	1fff5ae8 	.word	0x1fff5ae8

0002593c <USB_Class_CDC_Pstn_Init>:
{
    uint_8 error = USB_OK;
    UNUSED (controller_ID);

    /* save input parameters */
    g_pstn_callback = callback;
   2593c:	4b01      	ldr	r3, [pc, #4]	; (25944 <USB_Class_CDC_Pstn_Init+0x8>)
    return error;
}
   2593e:	2000      	movs	r0, #0
    g_pstn_callback = callback;
   25940:	6019      	str	r1, [r3, #0]
}
   25942:	4770      	bx	lr
   25944:	1fff5b8c 	.word	0x1fff5b8c

00025948 <USB_Class_CDC_PSTN_Get_Line_Coding>:
    USB_PACKET_SIZE *size               /* [OUT] Pointer to Size of Data */
)
{
    uint_8 status;
    UNUSED (size);
    g_current_interface = (uint_8)setup_packet->index ;
   25948:	4b02      	ldr	r3, [pc, #8]	; (25954 <USB_Class_CDC_PSTN_Get_Line_Coding+0xc>)
   2594a:	7909      	ldrb	r1, [r1, #4]
   2594c:	7119      	strb	r1, [r3, #4]
    status = USB_Desc_Get_Line_Coding(controller_ID, g_current_interface,
   2594e:	f000 bf8d 	b.w	2686c <USB_Desc_Get_Line_Coding>
   25952:	bf00      	nop
   25954:	1fff5b8c 	.word	0x1fff5b8c

00025958 <USB_Class_CDC_PSTN_Set_Line_Coding>:
    uint_8 controller_ID,               /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,    /* [IN] Pointer to setup packet */
    uint_8_ptr *data,                   /* [OUT] Pointer to Data */
    USB_PACKET_SIZE *size               /* [OUT] Pointer to Size of Data */
)
{
   25958:	b507      	push	{r0, r1, r2, lr}
    uint_8 status;
    UNUSED(data);

    *size = 0;
   2595a:	2200      	movs	r2, #0
   2595c:	801a      	strh	r2, [r3, #0]

    g_current_interface = (uint_8)setup_packet->index ;
   2595e:	4b05      	ldr	r3, [pc, #20]	; (25974 <USB_Class_CDC_PSTN_Set_Line_Coding+0x1c>)
{
   25960:	9101      	str	r1, [sp, #4]
    status = USB_Desc_Set_Line_Coding(controller_ID, g_current_interface,
   25962:	aa01      	add	r2, sp, #4
    g_current_interface = (uint_8)setup_packet->index ;
   25964:	7909      	ldrb	r1, [r1, #4]
   25966:	7119      	strb	r1, [r3, #4]
    status = USB_Desc_Set_Line_Coding(controller_ID, g_current_interface,
   25968:	f000 ff8e 	bl	26888 <USB_Desc_Set_Line_Coding>
        (uint_8_ptr *)&setup_packet);

    return status;
}
   2596c:	b003      	add	sp, #12
   2596e:	f85d fb04 	ldr.w	pc, [sp], #4
   25972:	bf00      	nop
   25974:	1fff5b8c 	.word	0x1fff5b8c

00025978 <USB_Class_CDC_PSTN_Send_Break>:
    USB_PACKET_SIZE *size               /* [OUT] Pointer to Size of Data */
)
{
    UNUSED (controller_ID);
    UNUSED (data);
    *size = 0;
   25978:	2000      	movs	r0, #0
   2597a:	8018      	strh	r0, [r3, #0]

    g_break_duration = setup_packet->value;
    UNUSED(g_break_duration);

    return USB_OK;
}
   2597c:	4770      	bx	lr

0002597e <USB_Class_CDC_PSTN_Get_Comm_Feature>:
    uint_8 controller_ID,               /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,    /* [IN] Pointer to setup packet */
    uint_8_ptr *data,                   /* [OUT] Pointer to Data to send */
    USB_PACKET_SIZE *size               /* [OUT] Pointer to Size of Data */
)
{   uint_8 status;
   2597e:	b430      	push	{r4, r5}
   25980:	460c      	mov	r4, r1

    status = USB_OK;
    *size = COMM_FEATURE_DATA_SIZE;
   25982:	2102      	movs	r1, #2
   25984:	8019      	strh	r1, [r3, #0]
    g_current_interface = (uint_8)setup_packet->index ;
   25986:	7921      	ldrb	r1, [r4, #4]
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   25988:	8864      	ldrh	r4, [r4, #2]
    g_current_interface = (uint_8)setup_packet->index ;
   2598a:	4d08      	ldr	r5, [pc, #32]	; (259ac <USB_Class_CDC_PSTN_Get_Comm_Feature+0x2e>)
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   2598c:	2c01      	cmp	r4, #1
    g_current_interface = (uint_8)setup_packet->index ;
   2598e:	7129      	strb	r1, [r5, #4]
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   25990:	d102      	bne.n	25998 <USB_Class_CDC_PSTN_Get_Comm_Feature+0x1a>
    else
    {
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
    }
    return status;
}
   25992:	bc30      	pop	{r4, r5}
        status = USB_Desc_Get_Abstract_State(controller_ID,
   25994:	f000 bf8c 	b.w	268b0 <USB_Desc_Get_Abstract_State>
    else if(setup_packet->value == COUNTRY_SETTING_FEATURE)
   25998:	2c02      	cmp	r4, #2
   2599a:	d102      	bne.n	259a2 <USB_Class_CDC_PSTN_Get_Comm_Feature+0x24>
}
   2599c:	bc30      	pop	{r4, r5}
        status = USB_Desc_Get_Country_Setting(controller_ID,
   2599e:	f000 bf93 	b.w	268c8 <USB_Desc_Get_Country_Setting>
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
   259a2:	2000      	movs	r0, #0
}
   259a4:	bc30      	pop	{r4, r5}
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
   259a6:	8018      	strh	r0, [r3, #0]
}
   259a8:	4770      	bx	lr
   259aa:	bf00      	nop
   259ac:	1fff5b8c 	.word	0x1fff5b8c

000259b0 <USB_Class_CDC_PSTN_Set_Comm_Feature>:
    uint_8 controller_ID,               /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,    /* [IN] Pointer to setup packet */
    uint_8_ptr *data,                   /* [OUT] Pointer to Data */
    USB_PACKET_SIZE *size               /* [OUT] Pointer to Size of Data */
)
{
   259b0:	b430      	push	{r4, r5}
   259b2:	460c      	mov	r4, r1
    uint_8 status;
    status = USB_OK;
    *size = COMM_FEATURE_DATA_SIZE;
   259b4:	2102      	movs	r1, #2
   259b6:	8019      	strh	r1, [r3, #0]
    g_current_interface = (uint_8)setup_packet->index ;
   259b8:	7921      	ldrb	r1, [r4, #4]
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   259ba:	8864      	ldrh	r4, [r4, #2]
    g_current_interface = (uint_8)setup_packet->index ;
   259bc:	4d07      	ldr	r5, [pc, #28]	; (259dc <USB_Class_CDC_PSTN_Set_Comm_Feature+0x2c>)
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   259be:	2c01      	cmp	r4, #1
    g_current_interface = (uint_8)setup_packet->index ;
   259c0:	7129      	strb	r1, [r5, #4]
    if(setup_packet->value == ABSTRACT_STATE_FEATURE)
   259c2:	d102      	bne.n	259ca <USB_Class_CDC_PSTN_Set_Comm_Feature+0x1a>
    else
    {
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
    }
    return status;
}
   259c4:	bc30      	pop	{r4, r5}
        status = USB_Desc_Set_Abstract_State(controller_ID,
   259c6:	f000 bf8b 	b.w	268e0 <USB_Desc_Set_Abstract_State>
    else if(setup_packet->value == COUNTRY_SETTING_FEATURE)
   259ca:	2c02      	cmp	r4, #2
   259cc:	d102      	bne.n	259d4 <USB_Class_CDC_PSTN_Set_Comm_Feature+0x24>
}
   259ce:	bc30      	pop	{r4, r5}
        status = USB_Desc_Set_Country_Setting(controller_ID,
   259d0:	f000 bf98 	b.w	26904 <USB_Desc_Set_Country_Setting>
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
   259d4:	2000      	movs	r0, #0
}
   259d6:	bc30      	pop	{r4, r5}
        *size = 0; /* for Reserved/Invalid Feature Selector Value */
   259d8:	8018      	strh	r0, [r3, #0]
}
   259da:	4770      	bx	lr
   259dc:	1fff5b8c 	.word	0x1fff5b8c

000259e0 <USB_Class_CDC_PSTN_Send_Serial_State>:
void USB_Class_CDC_PSTN_Send_Serial_State (
    uint_8 controller_ID               /* [IN] Controller ID */
)
{
    /* update array for current interface */
    g_serial_state_buf[4] = g_current_interface;
   259e0:	4b04      	ldr	r3, [pc, #16]	; (259f4 <USB_Class_CDC_PSTN_Send_Serial_State+0x14>)
   259e2:	4a05      	ldr	r2, [pc, #20]	; (259f8 <USB_Class_CDC_PSTN_Send_Serial_State+0x18>)
   259e4:	7919      	ldrb	r1, [r3, #4]
    /* Lower byte of UART BITMAP */
    g_serial_state_buf[NOTIF_PACKET_SIZE+UART_BITMAP_SIZE-2] =
   259e6:	795b      	ldrb	r3, [r3, #5]
    g_serial_state_buf[4] = g_current_interface;
   259e8:	7111      	strb	r1, [r2, #4]
    g_serial_state_buf[NOTIF_PACKET_SIZE+UART_BITMAP_SIZE-2] =
   259ea:	7213      	strb	r3, [r2, #8]
        g_uart_bitmap._byte;
    (void)USB_Class_CDC_Interface_CIC_Send_Data(controller_ID,
   259ec:	2103      	movs	r1, #3
   259ee:	230a      	movs	r3, #10
   259f0:	f7ff bf62 	b.w	258b8 <USB_Class_CDC_Send_Data>
   259f4:	1fff5b8c 	.word	0x1fff5b8c
   259f8:	1fff0b54 	.word	0x1fff0b54

000259fc <USB_Class_CDC_PSTN_Set_Ctrl_Line_State>:
{
   259fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *size = 0;
   259fe:	2700      	movs	r7, #0
   25a00:	801f      	strh	r7, [r3, #0]
    g_dte_status = (uint_8)setup_packet->value ;
   25a02:	788b      	ldrb	r3, [r1, #2]
   25a04:	4d0c      	ldr	r5, [pc, #48]	; (25a38 <USB_Class_CDC_PSTN_Set_Ctrl_Line_State+0x3c>)
        CARRIER_ACTIVATION_CHECK) ? 1 : 0 ;
   25a06:	f3c3 0240 	ubfx	r2, r3, #1, #1
    g_dte_status = (uint_8)setup_packet->value ;
   25a0a:	71ab      	strb	r3, [r5, #6]
    g_uart_bitmap.Bitmap_Uart.bRxCarrier = (g_dte_status &
   25a0c:	f003 0302 	and.w	r3, r3, #2
   25a10:	f362 0300 	bfi	r3, r2, #0, #1
{
   25a14:	4604      	mov	r4, r0
    g_uart_bitmap.Bitmap_Uart.bRxCarrier = (g_dte_status &
   25a16:	716b      	strb	r3, [r5, #5]
    USB_Class_CDC_PSTN_Send_Serial_State(controller_ID);
   25a18:	f7ff ffe2 	bl	259e0 <USB_Class_CDC_PSTN_Send_Serial_State>
    if(g_pstn_callback != NULL)
   25a1c:	682e      	ldr	r6, [r5, #0]
   25a1e:	b146      	cbz	r6, 25a32 <USB_Class_CDC_PSTN_Set_Ctrl_Line_State+0x36>
        if(g_dte_status & CARRIER_ACTIVATION_CHECK)
   25a20:	79ab      	ldrb	r3, [r5, #6]
   25a22:	f013 0202 	ands.w	r2, r3, #2
            g_pstn_callback(controller_ID, USB_APP_CDC_CARRIER_ACTIVATED,
   25a26:	bf1a      	itte	ne
   25a28:	463a      	movne	r2, r7
   25a2a:	2122      	movne	r1, #34	; 0x22
            g_pstn_callback(controller_ID, USB_APP_CDC_CARRIER_DEACTIVATED,
   25a2c:	2121      	moveq	r1, #33	; 0x21
   25a2e:	4620      	mov	r0, r4
   25a30:	47b0      	blx	r6
}
   25a32:	2000      	movs	r0, #0
   25a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a36:	bf00      	nop
   25a38:	1fff5b8c 	.word	0x1fff5b8c

00025a3c <USB_Error_Service>:
void USB_Error_Service (
    PTR_USB_DEV_EVENT_STRUCT event /* [IN] Pointer to USB Event Structure */
)
{
    /* notify the application of the error */
    g_class_callback(event->controller_ID, USB_APP_ERROR,
   25a3c:	4b03      	ldr	r3, [pc, #12]	; (25a4c <USB_Error_Service+0x10>)
        (uint_8*)(&(event->errors)));
   25a3e:	4602      	mov	r2, r0
    g_class_callback(event->controller_ID, USB_APP_ERROR,
   25a40:	681b      	ldr	r3, [r3, #0]
   25a42:	f812 0b08 	ldrb.w	r0, [r2], #8
   25a46:	2105      	movs	r1, #5
   25a48:	4718      	bx	r3
   25a4a:	bf00      	nop
   25a4c:	1fff5b94 	.word	0x1fff5b94

00025a50 <USB_Suspend_Service>:
{
   25a50:	b570      	push	{r4, r5, r6, lr}
    (void)_usb_device_get_status(&(event->controller_ID),
   25a52:	4d09      	ldr	r5, [pc, #36]	; (25a78 <USB_Suspend_Service+0x28>)
{
   25a54:	4604      	mov	r4, r0
    (void)_usb_device_get_status(&(event->controller_ID),
   25a56:	1d2a      	adds	r2, r5, #4
   25a58:	2101      	movs	r1, #1
   25a5a:	f000 ffd1 	bl	26a00 <_usb_device_get_status>
    (void)_usb_device_set_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   25a5e:	2280      	movs	r2, #128	; 0x80
   25a60:	2101      	movs	r1, #1
   25a62:	4620      	mov	r0, r4
   25a64:	f000 ffe4 	bl	26a30 <_usb_device_set_status>
    g_class_callback(event->controller_ID, USB_APP_BUS_SUSPEND, NULL);
   25a68:	682b      	ldr	r3, [r5, #0]
   25a6a:	7820      	ldrb	r0, [r4, #0]
   25a6c:	2200      	movs	r2, #0
}
   25a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    g_class_callback(event->controller_ID, USB_APP_BUS_SUSPEND, NULL);
   25a72:	210a      	movs	r1, #10
   25a74:	4718      	bx	r3
   25a76:	bf00      	nop
   25a78:	1fff5b94 	.word	0x1fff5b94

00025a7c <USB_Resume_Service>:
{
   25a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    (void)_usb_device_get_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   25a7e:	2101      	movs	r1, #1
   25a80:	f10d 0207 	add.w	r2, sp, #7
{
   25a84:	4604      	mov	r4, r0
    (void)_usb_device_get_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   25a86:	f000 ffbb 	bl	26a00 <_usb_device_get_status>
    if(device_state == USB_STATE_SUSPEND)
   25a8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25a8e:	4d07      	ldr	r5, [pc, #28]	; (25aac <USB_Resume_Service+0x30>)
   25a90:	2b80      	cmp	r3, #128	; 0x80
   25a92:	d104      	bne.n	25a9e <USB_Resume_Service+0x22>
        (void)_usb_device_set_status(&(event->controller_ID),
   25a94:	792a      	ldrb	r2, [r5, #4]
   25a96:	2101      	movs	r1, #1
   25a98:	4620      	mov	r0, r4
   25a9a:	f000 ffc9 	bl	26a30 <_usb_device_set_status>
    g_class_callback(event->controller_ID, USB_APP_BUS_RESUME, NULL);
   25a9e:	682b      	ldr	r3, [r5, #0]
   25aa0:	7820      	ldrb	r0, [r4, #0]
   25aa2:	2200      	movs	r2, #0
   25aa4:	210b      	movs	r1, #11
   25aa6:	4798      	blx	r3
}
   25aa8:	b003      	add	sp, #12
   25aaa:	bd30      	pop	{r4, r5, pc}
   25aac:	1fff5b94 	.word	0x1fff5b94

00025ab0 <USB_Sof_Service>:
    sof_count = event->buffer_ptr[0];
   25ab0:	6843      	ldr	r3, [r0, #4]
    (void)_usb_device_set_status(&(event->controller_ID), USB_STATUS_SOF_COUNT,
   25ab2:	881a      	ldrh	r2, [r3, #0]
   25ab4:	ba52      	rev16	r2, r2
   25ab6:	b2d2      	uxtb	r2, r2
   25ab8:	2105      	movs	r1, #5
   25aba:	f000 bfb9 	b.w	26a30 <_usb_device_set_status>

00025abe <USB_Reset_Service>:
{
   25abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    err = _usb_device_deinit_endpoint(&(event->controller_ID),
   25ac0:	2201      	movs	r2, #1
    err = _usb_device_init_endpoint(&(event->controller_ID),
   25ac2:	2500      	movs	r5, #0
{
   25ac4:	4604      	mov	r4, r0
    err = _usb_device_init_endpoint(&(event->controller_ID),
   25ac6:	2601      	movs	r6, #1
    err = _usb_device_deinit_endpoint(&(event->controller_ID),
   25ac8:	2100      	movs	r1, #0
   25aca:	f000 ff81 	bl	269d0 <_usb_device_deinit_endpoint>
    err = _usb_device_init_endpoint(&(event->controller_ID),
   25ace:	4633      	mov	r3, r6
   25ad0:	4629      	mov	r1, r5
   25ad2:	e9cd 5600 	strd	r5, r6, [sp]
   25ad6:	2210      	movs	r2, #16
   25ad8:	4620      	mov	r0, r4
   25ada:	f000 ff57 	bl	2698c <_usb_device_init_endpoint>
    (void)_usb_device_deinit_endpoint(&(event->controller_ID),
   25ade:	462a      	mov	r2, r5
   25ae0:	4629      	mov	r1, r5
   25ae2:	4620      	mov	r0, r4
   25ae4:	f000 ff74 	bl	269d0 <_usb_device_deinit_endpoint>
    (void)_usb_device_init_endpoint(&(event->controller_ID),
   25ae8:	462b      	mov	r3, r5
   25aea:	4629      	mov	r1, r5
   25aec:	e9cd 5600 	strd	r5, r6, [sp]
   25af0:	2210      	movs	r2, #16
   25af2:	4620      	mov	r0, r4
   25af4:	f000 ff4a 	bl	2698c <_usb_device_init_endpoint>
    (void)_usb_device_set_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   25af8:	4631      	mov	r1, r6
   25afa:	2202      	movs	r2, #2
   25afc:	4620      	mov	r0, r4
   25afe:	f000 ff97 	bl	26a30 <_usb_device_set_status>
    (void)_usb_device_set_status(&(event->controller_ID), USB_STATUS_DEVICE,
   25b02:	4632      	mov	r2, r6
   25b04:	2106      	movs	r1, #6
   25b06:	4620      	mov	r0, r4
   25b08:	f000 ff92 	bl	26a30 <_usb_device_set_status>
    (void)_usb_device_set_status(&(event->controller_ID),
   25b0c:	462a      	mov	r2, r5
   25b0e:	2190      	movs	r1, #144	; 0x90
   25b10:	4620      	mov	r0, r4
   25b12:	f000 ff8d 	bl	26a30 <_usb_device_set_status>
    g_class_callback(event->controller_ID, USB_APP_BUS_RESET, NULL);
   25b16:	4b04      	ldr	r3, [pc, #16]	; (25b28 <USB_Reset_Service+0x6a>)
   25b18:	7820      	ldrb	r0, [r4, #0]
   25b1a:	681b      	ldr	r3, [r3, #0]
   25b1c:	462a      	mov	r2, r5
   25b1e:	4629      	mov	r1, r5
}
   25b20:	b002      	add	sp, #8
   25b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    g_class_callback(event->controller_ID, USB_APP_BUS_RESET, NULL);
   25b26:	4718      	bx	r3
   25b28:	1fff5b94 	.word	0x1fff5b94

00025b2c <USB_Stall_Service>:
    if(event->ep_num == CONTROL_ENDPOINT)
   25b2c:	7842      	ldrb	r2, [r0, #1]
   25b2e:	b93a      	cbnz	r2, 25b40 <USB_Stall_Service+0x14>
            (event->direction << USB_COMPONENT_DIRECTION_SHIFT)),
   25b30:	78c1      	ldrb	r1, [r0, #3]
   25b32:	01c9      	lsls	r1, r1, #7
            (uint_8)(USB_STATUS_ENDPOINT | CONTROL_ENDPOINT |
   25b34:	f041 0110 	orr.w	r1, r1, #16
        (void)_usb_device_set_status(&(event->controller_ID),
   25b38:	f001 0190 	and.w	r1, r1, #144	; 0x90
   25b3c:	f000 bf78 	b.w	26a30 <_usb_device_set_status>
}
   25b40:	4770      	bx	lr

00025b42 <USB_Class_Init>:
uint_8 USB_Class_Init (
    uint_8    controller_ID,                /* [IN] Controller ID */
    USB_CLASS_CALLBACK class_callback,      /* [IN] Class Callback */
    USB_REQ_FUNC       other_req_callback   /* [IN] Other Requests Callback */
)
{
   25b42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25b44:	460c      	mov	r4, r1
   25b46:	f88d 0007 	strb.w	r0, [sp, #7]
    uint_8 status = USB_Framework_Init(controller_ID,class_callback,
   25b4a:	f001 f9fd 	bl	26f48 <USB_Framework_Init>
        other_req_callback);

    /* save callback address */
    g_class_callback = class_callback;
   25b4e:	4d1f      	ldr	r5, [pc, #124]	; (25bcc <USB_Class_Init+0x8a>)
   25b50:	602c      	str	r4, [r5, #0]

    if(status == USB_OK)
   25b52:	4604      	mov	r4, r0
   25b54:	2800      	cmp	r0, #0
   25b56:	d136      	bne.n	25bc6 <USB_Class_Init+0x84>
    {
        /* Register all the services here */
        status |= _usb_device_register_service(controller_ID,
   25b58:	4a1d      	ldr	r2, [pc, #116]	; (25bd0 <USB_Class_Init+0x8e>)
   25b5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25b5e:	2110      	movs	r1, #16
   25b60:	f000 ff9e 	bl	26aa0 <_usb_device_register_service>
            USB_SERVICE_BUS_RESET, USB_Reset_Service);
        status |= _usb_device_register_service(controller_ID,
   25b64:	4a1b      	ldr	r2, [pc, #108]	; (25bd4 <USB_Class_Init+0x92>)
        status |= _usb_device_register_service(controller_ID,
   25b66:	4604      	mov	r4, r0
        status |= _usb_device_register_service(controller_ID,
   25b68:	2112      	movs	r1, #18
   25b6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25b6e:	f000 ff97 	bl	26aa0 <_usb_device_register_service>
            USB_SERVICE_SOF,USB_Sof_Service);
        status |= _usb_device_register_service(controller_ID,
   25b72:	4a19      	ldr	r2, [pc, #100]	; (25bd8 <USB_Class_Init+0x96>)
        status |= _usb_device_register_service(controller_ID,
   25b74:	4304      	orrs	r4, r0
        status |= _usb_device_register_service(controller_ID,
   25b76:	2114      	movs	r1, #20
   25b78:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25b7c:	f000 ff90 	bl	26aa0 <_usb_device_register_service>
        status |= _usb_device_register_service(controller_ID,
   25b80:	b2e4      	uxtb	r4, r4
            USB_SERVICE_SLEEP,USB_Suspend_Service);
        status |= _usb_device_register_service(controller_ID,
   25b82:	4a16      	ldr	r2, [pc, #88]	; (25bdc <USB_Class_Init+0x9a>)
        status |= _usb_device_register_service(controller_ID,
   25b84:	4304      	orrs	r4, r0
        status |= _usb_device_register_service(controller_ID,
   25b86:	2113      	movs	r1, #19
   25b88:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25b8c:	f000 ff88 	bl	26aa0 <_usb_device_register_service>
        status |= _usb_device_register_service(controller_ID,
   25b90:	b2e4      	uxtb	r4, r4
            USB_SERVICE_RESUME,USB_Resume_Service);
        status |= _usb_device_register_service(controller_ID,
   25b92:	4a13      	ldr	r2, [pc, #76]	; (25be0 <USB_Class_Init+0x9e>)
        status |= _usb_device_register_service(controller_ID,
   25b94:	4304      	orrs	r4, r0
        status |= _usb_device_register_service(controller_ID,
   25b96:	2117      	movs	r1, #23
   25b98:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25b9c:	f000 ff80 	bl	26aa0 <_usb_device_register_service>
        status |= _usb_device_register_service(controller_ID,
   25ba0:	b2e4      	uxtb	r4, r4
            USB_SERVICE_STALL,USB_Stall_Service);
        status |= _usb_device_register_service(controller_ID,
   25ba2:	4a10      	ldr	r2, [pc, #64]	; (25be4 <USB_Class_Init+0xa2>)
        status |= _usb_device_register_service(controller_ID,
   25ba4:	4304      	orrs	r4, r0
        status |= _usb_device_register_service(controller_ID,
   25ba6:	2116      	movs	r1, #22
   25ba8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25bac:	f000 ff78 	bl	26aa0 <_usb_device_register_service>
        status |= _usb_device_register_service(controller_ID,
   25bb0:	b2e4      	uxtb	r4, r4
        status |= _usb_device_register_service(controller_ID,
   25bb2:	4304      	orrs	r4, r0
            USB_SERVICE_ERROR,USB_Error_Service);

        /* set the device state as powered */
        (void)_usb_device_set_status(&controller_ID,
   25bb4:	2203      	movs	r2, #3
   25bb6:	2101      	movs	r1, #1
   25bb8:	f10d 0007 	add.w	r0, sp, #7
   25bbc:	f000 ff38 	bl	26a30 <_usb_device_set_status>
            USB_STATUS_DEVICE_STATE,USB_STATE_POWERED);
        g_device_state_before_suspend = USB_STATE_POWERED;
   25bc0:	2303      	movs	r3, #3
        status |= _usb_device_register_service(controller_ID,
   25bc2:	b2e4      	uxtb	r4, r4
        g_device_state_before_suspend = USB_STATE_POWERED;
   25bc4:	712b      	strb	r3, [r5, #4]
    }

    return status;
}
   25bc6:	4620      	mov	r0, r4
   25bc8:	b003      	add	sp, #12
   25bca:	bd30      	pop	{r4, r5, pc}
   25bcc:	1fff5b94 	.word	0x1fff5b94
   25bd0:	00025abf 	.word	0x00025abf
   25bd4:	00025ab1 	.word	0x00025ab1
   25bd8:	00025a51 	.word	0x00025a51
   25bdc:	00025a7d 	.word	0x00025a7d
   25be0:	00025b2d 	.word	0x00025b2d
   25be4:	00025a3d 	.word	0x00025a3d

00025be8 <USB_Class_DeInit>:
 *****************************************************************************/
uint_8 USB_Class_DeInit
(
    uint_8    controller_ID          /* [IN] Controller ID */
)
{
   25be8:	b513      	push	{r0, r1, r4, lr}
    uint_8 status = USB_OK;
    /* Free class_callback */
    g_class_callback = NULL;
   25bea:	4b1b      	ldr	r3, [pc, #108]	; (25c58 <USB_Class_DeInit+0x70>)
{
   25bec:	f88d 0007 	strb.w	r0, [sp, #7]
    g_class_callback = NULL;
   25bf0:	2200      	movs	r2, #0

    /* Unegister all the services here */
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_BUS_RESET);
   25bf2:	2110      	movs	r1, #16
   25bf4:	f10d 0007 	add.w	r0, sp, #7
    g_class_callback = NULL;
   25bf8:	601a      	str	r2, [r3, #0]
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_BUS_RESET);
   25bfa:	f000 ff53 	bl	26aa4 <_usb_device_unregister_service>
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SOF);
   25bfe:	2112      	movs	r1, #18
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_BUS_RESET);
   25c00:	4604      	mov	r4, r0
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SOF);
   25c02:	f10d 0007 	add.w	r0, sp, #7
   25c06:	f000 ff4d 	bl	26aa4 <_usb_device_unregister_service>
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SLEEP);
   25c0a:	2114      	movs	r1, #20
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SOF);
   25c0c:	4304      	orrs	r4, r0
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SLEEP);
   25c0e:	f10d 0007 	add.w	r0, sp, #7
   25c12:	f000 ff47 	bl	26aa4 <_usb_device_unregister_service>
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SOF);
   25c16:	b2e4      	uxtb	r4, r4
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SLEEP);
   25c18:	4304      	orrs	r4, r0
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_RESUME);
   25c1a:	2113      	movs	r1, #19
   25c1c:	f10d 0007 	add.w	r0, sp, #7
   25c20:	f000 ff40 	bl	26aa4 <_usb_device_unregister_service>
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_SLEEP);
   25c24:	b2e4      	uxtb	r4, r4
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_RESUME);
   25c26:	4304      	orrs	r4, r0
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_STALL);
   25c28:	2117      	movs	r1, #23
   25c2a:	f10d 0007 	add.w	r0, sp, #7
   25c2e:	f000 ff39 	bl	26aa4 <_usb_device_unregister_service>
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_RESUME);
   25c32:	b2e4      	uxtb	r4, r4
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_STALL);
   25c34:	4320      	orrs	r0, r4
   25c36:	b2c4      	uxtb	r4, r0
    status |= _usb_device_unregister_service(&controller_ID,USB_SERVICE_ERROR);
   25c38:	2116      	movs	r1, #22
   25c3a:	f10d 0007 	add.w	r0, sp, #7
   25c3e:	f000 ff31 	bl	26aa4 <_usb_device_unregister_service>
   25c42:	4320      	orrs	r0, r4

    if(status == USB_OK)
   25c44:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   25c48:	d103      	bne.n	25c52 <USB_Class_DeInit+0x6a>
        /* Call Framework deinit function */
        status = USB_Framework_DeInit(controller_ID);
   25c4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25c4e:	f001 f987 	bl	26f60 <USB_Framework_DeInit>

    return status;
}
   25c52:	b002      	add	sp, #8
   25c54:	bd10      	pop	{r4, pc}
   25c56:	bf00      	nop
   25c58:	1fff5b94 	.word	0x1fff5b94

00025c5c <USB_Class_Initiate_Resume>:
 * @return device_state
 ******************************************************************************/
uint_8 USB_Class_Initiate_Resume(
		uint_8           controller_ID /* [IN] Controller ID */
)
{
   25c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint_8 device_state, state;

  (void)_usb_device_get_status(&controller_ID, USB_STATUS_DEVICE_STATE,
   25c5e:	2101      	movs	r1, #1
{
   25c60:	f88d 0007 	strb.w	r0, [sp, #7]
  (void)_usb_device_get_status(&controller_ID, USB_STATUS_DEVICE_STATE,
   25c64:	f10d 020e 	add.w	r2, sp, #14
   25c68:	f10d 0007 	add.w	r0, sp, #7
   25c6c:	f000 fec8 	bl	26a00 <_usb_device_get_status>
  		&device_state);
  (void)_usb_device_get_status(&controller_ID, USB_STATUS_DEVICE, &state);
   25c70:	f10d 020f 	add.w	r2, sp, #15
   25c74:	2106      	movs	r1, #6
   25c76:	f10d 0007 	add.w	r0, sp, #7
   25c7a:	f000 fec1 	bl	26a00 <_usb_device_get_status>
  if((device_state == USB_STATE_SUSPEND) &&
   25c7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25c82:	2b80      	cmp	r3, #128	; 0x80
   25c84:	d118      	bne.n	25cb8 <USB_Class_Initiate_Resume+0x5c>
   25c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25c8a:	079b      	lsls	r3, r3, #30
   25c8c:	d514      	bpl.n	25cb8 <USB_Class_Initiate_Resume+0x5c>
      (state & REMOTE_WAKEUP_STATUS_MASK ) &&
      (USB_Frame_Remote_Wakeup(controller_ID) == TRUE))
   25c8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25c92:	f000 fde5 	bl	26860 <USB_Desc_Remote_Wakeup>
      (state & REMOTE_WAKEUP_STATUS_MASK ) &&
   25c96:	2801      	cmp	r0, #1
      (USB_Frame_Remote_Wakeup(controller_ID) == TRUE))
   25c98:	4604      	mov	r4, r0
      (state & REMOTE_WAKEUP_STATUS_MASK ) &&
   25c9a:	d10d      	bne.n	25cb8 <USB_Class_Initiate_Resume+0x5c>
  {
      DisableInterrupts;
   25c9c:	b672      	cpsid	i
		#endif
#else /* << EST */
		/* device is Kinetis K20D72 << EST */
#endif
  /* Resume the bus */
	_usb_device_assert_resume(&controller_ID);
   25c9e:	f10d 0007 	add.w	r0, sp, #7
   25ca2:	f000 fb23 	bl	262ec <_usb_device_assert_resume>

	device_state = USB_STATE_CONFIG;
   25ca6:	2200      	movs	r2, #0
      /* Set the device state in the Device Layer to DEFAULT */
      (void)_usb_device_set_status(&controller_ID, USB_STATUS_DEVICE_STATE,
   25ca8:	4621      	mov	r1, r4
   25caa:	f10d 0007 	add.w	r0, sp, #7
	device_state = USB_STATE_CONFIG;
   25cae:	f88d 200e 	strb.w	r2, [sp, #14]
      (void)_usb_device_set_status(&controller_ID, USB_STATUS_DEVICE_STATE,
   25cb2:	f000 febd 	bl	26a30 <_usb_device_set_status>
          USB_STATE_CONFIG);
      EnableInterrupts;;
   25cb6:	b662      	cpsie	i
	#if (defined _MCF51MM256_H) || (defined _MCF51JE256_H)
	usb_int_en();
	#endif
  }
  return device_state;
}
   25cb8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   25cbc:	b004      	add	sp, #16
   25cbe:	bd10      	pop	{r4, pc}

00025cc0 <USB_Class_Send_Data>:
    uint_8           controller_ID, /* [IN] Controller ID */
    uint_8           ep_num,        /* [IN] Endpoint number */
    uint_8_ptr       buff_ptr,      /* [IN] Buffer to send */
    USB_PACKET_SIZE  size           /* [IN] Length of the transfer */
)
{
   25cc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25cc2:	460c      	mov	r4, r1
   25cc4:	4615      	mov	r5, r2
   25cc6:	461e      	mov	r6, r3
   25cc8:	f88d 0007 	strb.w	r0, [sp, #7]

    uint_8 status = USB_OK;
    uint_8 device_state;

    device_state = USB_Class_Initiate_Resume(controller_ID);
   25ccc:	f7ff ffc6 	bl	25c5c <USB_Class_Initiate_Resume>

    if(device_state != USB_STATE_SUSPEND)
   25cd0:	2880      	cmp	r0, #128	; 0x80
   25cd2:	d008      	beq.n	25ce6 <USB_Class_Send_Data+0x26>
    {    /* if not suspended */
         status = _usb_device_send_data(&controller_ID, ep_num, buff_ptr, size);
   25cd4:	4633      	mov	r3, r6
   25cd6:	462a      	mov	r2, r5
   25cd8:	4621      	mov	r1, r4
   25cda:	f10d 0007 	add.w	r0, sp, #7
   25cde:	f000 faa5 	bl	2622c <_usb_device_send_data>
    }

    return status;
 }
   25ce2:	b002      	add	sp, #8
   25ce4:	bd70      	pop	{r4, r5, r6, pc}
    uint_8 status = USB_OK;
   25ce6:	2000      	movs	r0, #0
   25ce8:	e7fb      	b.n	25ce2 <USB_Class_Send_Data+0x22>

00025cea <USB_Class_Periodic_Task>:
void USB_Class_Periodic_Task (void)
{
#ifdef DELAYED_PROCESSING
    USB_Framework_Periodic_Task();
#endif
}
   25cea:	4770      	bx	lr

00025cec <USB_DCI_Validate_Param.constprop.0>:
    boolean odd        /* [IN] Odd or even buffer */
)
{
    uint_8 bdt_index = INVALID_BDT_INDEX;

    if(ep_num < MAX_SUPPORTED_ENDPOINTS)
   25cec:	2806      	cmp	r0, #6
   25cee:	d812      	bhi.n	25d16 <USB_DCI_Validate_Param.constprop.0+0x2a>
    {
        /* per endpoint 4 bdt_index -- 2 for recv 2 for send */
        bdt_index=(uint_8)((ep_num * 4) + (uint_8)odd);
   25cf0:	0080      	lsls	r0, r0, #2

        if(direction == USB_SEND)
   25cf2:	2901      	cmp	r1, #1
        bdt_index=(uint_8)((ep_num * 4) + (uint_8)odd);
   25cf4:	b2c0      	uxtb	r0, r0
        if(direction == USB_SEND)
   25cf6:	d101      	bne.n	25cfc <USB_DCI_Validate_Param.constprop.0+0x10>
        {
            bdt_index += 2;
   25cf8:	3002      	adds	r0, #2
   25cfa:	b2c0      	uxtb	r0, r0
{
    /* Get bdt index mapped to endpoint number-direction and odd/even buffer */
    uint_8 bdt_index = USB_DCI_Get_BDT_Index(ep_num, direction, odd);

    if((bdt_index  != INVALID_BDT_INDEX) &&
        (g_bdt_elem[TRANSFER_INDEX(bdt_index)].len ==
   25cfc:	4a07      	ldr	r2, [pc, #28]	; (25d1c <USB_DCI_Validate_Param.constprop.0+0x30>)
   25cfe:	f3c0 0347 	ubfx	r3, r0, #1, #8
   25d02:	2112      	movs	r1, #18
   25d04:	fb01 2303 	mla	r3, r1, r3, r2
    if((bdt_index  != INVALID_BDT_INDEX) &&
   25d08:	881a      	ldrh	r2, [r3, #0]
        (uint_16)UNINITIALISED_VAL))
    {
        /* Incase length in bdt_elem is uninitialised return invalid index */
        bdt_index = INVALID_BDT_INDEX;
   25d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25d0e:	429a      	cmp	r2, r3
   25d10:	bf08      	it	eq
   25d12:	20ff      	moveq	r0, #255	; 0xff
    }
    return bdt_index;
}
   25d14:	4770      	bx	lr
        bdt_index = INVALID_BDT_INDEX;
   25d16:	20ff      	movs	r0, #255	; 0xff
   25d18:	4770      	bx	lr
   25d1a:	bf00      	nop
   25d1c:	1fff5b9c 	.word	0x1fff5b9c

00025d20 <USB_DCI_Init>:
 *****************************************************************************/
uint_8 USB_DCI_Init (
    uint_8    controller_ID,   /* [IN] Controller ID */
    uint_8    bVregEn         /* Enables or disables internal regulator */
)
{
   25d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if !HIGH_SPEED_DEVICE
#if USB_USER_CONFIG_USE_STACK_INIT
	/* Select System Clock and Disable Weak Pull Downs */
	USB0_USBCTRL = 0x00;
   25d22:	4c31      	ldr	r4, [pc, #196]	; (25de8 <USB_DCI_Init+0xc8>)
#endif

	/* save the controller_ID for future use */
    g_dci_controller_Id = controller_ID;
   25d24:	4d31      	ldr	r5, [pc, #196]	; (25dec <USB_DCI_Init+0xcc>)
	USB0_USBCTRL = 0x00;
   25d26:	2700      	movs	r7, #0
   25d28:	f884 7100 	strb.w	r7, [r4, #256]	; 0x100
    uint_8_ptr start_addr,  /* [OUT] Buffer Start address */
    uint_32 count,          /* [IN] Count of Bytes */
    uint_8 val              /* [IN] Value to be set */
)
{
    (void)memset(start_addr, val, count);
   25d2c:	f44f 7210 	mov.w	r2, #576	; 0x240
    g_dci_controller_Id = controller_ID;
   25d30:	f885 0240 	strb.w	r0, [r5, #576]	; 0x240
{
   25d34:	460e      	mov	r6, r1
    (void)memset(start_addr, val, count);
   25d36:	4628      	mov	r0, r5
   25d38:	21ff      	movs	r1, #255	; 0xff
   25d3a:	f002 f80d 	bl	27d58 <memset>
    g_bdtmap = (BDTMAP *)((uint_32)g_Mem);
   25d3e:	4b2c      	ldr	r3, [pc, #176]	; (25df0 <USB_DCI_Init+0xd0>)
   25d40:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
    (void)memset(start_addr, val, count);
   25d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25d48:	4639      	mov	r1, r7
   25d4a:	4618      	mov	r0, r3
   25d4c:	f002 f804 	bl	27d58 <memset>
    USB0_USBTRC0 |= USB_USBTRC0_USBRESET_MASK;
   25d50:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   25d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   25d58:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
    while((USB0_USBTRC0 & USB_USBTRC0_USBRESET_MASK))
   25d5c:	4602      	mov	r2, r0
   25d5e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   25d62:	061b      	lsls	r3, r3, #24
   25d64:	d4fb      	bmi.n	25d5e <USB_DCI_Init+0x3e>
    g_trf_direction = USB_TRF_UNKNOWN;
   25d66:	4b23      	ldr	r3, [pc, #140]	; (25df4 <USB_DCI_Init+0xd4>)
   25d68:	21ff      	movs	r1, #255	; 0xff
   25d6a:	7019      	strb	r1, [r3, #0]
    USB0_USBTRC0 |= 0x40; /* undocumented bit???? */
   25d6c:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   25d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25d74:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
    if(bVregEn)
   25d78:	4b1f      	ldr	r3, [pc, #124]	; (25df8 <USB_DCI_Init+0xd8>)
    	SIM_SOPT1 |= SIM_SOPT1_USBREGEN_MASK;	// enable usb voltage regulator
   25d7a:	6819      	ldr	r1, [r3, #0]
    if(bVregEn)
   25d7c:	b386      	cbz	r6, 25de0 <USB_DCI_Init+0xc0>
    	SIM_SOPT1 |= SIM_SOPT1_USBREGEN_MASK;	// enable usb voltage regulator
   25d7e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    	SIM_SOPT1 &= ~SIM_SOPT1_USBREGEN_MASK;	// disable usb voltage regulator
   25d82:	6019      	str	r1, [r3, #0]
    USB0_BDTPAGE1 = (uint_8)(((uint_32)g_bdtmap >> 8)& 0xFE);
   25d84:	4b18      	ldr	r3, [pc, #96]	; (25de8 <USB_DCI_Init+0xc8>)
   25d86:	f3c2 2107 	ubfx	r1, r2, #8, #8
   25d8a:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
    USB0_BDTPAGE2 = (uint_8)((uint_32)g_bdtmap >> 16);
   25d8e:	f3c2 4107 	ubfx	r1, r2, #16, #8
    USB0_BDTPAGE3 = (uint_8)((uint_32)g_bdtmap >> 24);
   25d92:	0e12      	lsrs	r2, r2, #24
    USB0_BDTPAGE2 = (uint_8)((uint_32)g_bdtmap >> 16);
   25d94:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
    USB0_BDTPAGE3 = (uint_8)((uint_32)g_bdtmap >> 24);
   25d98:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    g_bdt_address = ((uint_32)g_bdtmap + BYTES_512);
   25d9c:	4a17      	ldr	r2, [pc, #92]	; (25dfc <USB_DCI_Init+0xdc>)
   25d9e:	f8c5 2248 	str.w	r2, [r5, #584]	; 0x248
    USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG_MASK;
   25da2:	2210      	movs	r2, #16
   25da4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    USB0_CTL = USB_CTL_USBENSOFEN_MASK; 	/* Enable USB module */
   25da8:	2201      	movs	r2, #1
   25daa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    USB0_ISTAT = INT_STAT_CLEAR_ALL;      	/* Clear USB interrupts*/
   25dae:	22bf      	movs	r2, #191	; 0xbf
   25db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    USB0_USBCTRL &= ~USB_USBCTRL_SUSP_MASK;
   25db4:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
   25db8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   25dbc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    USB0_INTEN |= USB_INTEN_USBRSTEN_MASK;
   25dc0:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
   25dc4:	f042 0201 	orr.w	r2, r2, #1
   25dc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    USB0_INTEN |= USB_INTEN_SLEEPEN_MASK;
   25dcc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
   25dd0:	f042 0210 	orr.w	r2, r2, #16
   25dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    USB0_OTGCTL = USB_OTGCTL_DPHIGH_MASK | USB_OTGCTL_OTGEN_MASK;
   25dd8:	2284      	movs	r2, #132	; 0x84
   25dda:	771a      	strb	r2, [r3, #28]
}
   25ddc:	2000      	movs	r0, #0
   25dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	SIM_SOPT1 &= ~SIM_SOPT1_USBREGEN_MASK;	// disable usb voltage regulator
   25de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   25de4:	e7cd      	b.n	25d82 <USB_DCI_Init+0x62>
   25de6:	bf00      	nop
   25de8:	40072000 	.word	0x40072000
   25dec:	1fff5b9c 	.word	0x1fff5b9c
   25df0:	1fff6800 	.word	0x1fff6800
   25df4:	1fff0b5e 	.word	0x1fff0b5e
   25df8:	40047000 	.word	0x40047000
   25dfc:	1fff6a00 	.word	0x1fff6a00

00025e00 <USB_DCI_DeInit>:
	USB0_USBTRC0 &= ~0x40;
   25e00:	4b0d      	ldr	r3, [pc, #52]	; (25e38 <USB_DCI_DeInit+0x38>)
   25e02:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   25e06:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   25e0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	USB0_ISTAT = INT_STAT_CLEAR_ALL;
   25e0e:	22bf      	movs	r2, #191	; 0xbf
   25e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	USB0_INTEN &= ~USB_INTEN_USBRSTEN_MASK;
   25e14:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
   25e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   25e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	USB0_CTL &= ~USB_CTL_USBENSOFEN_MASK;
   25e20:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
   25e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   25e28:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    USB0_OTGCTL &= ~(USB_OTGCTL_DPHIGH_MASK | USB_OTGCTL_OTGEN_MASK);
   25e2c:	7f1a      	ldrb	r2, [r3, #28]
   25e2e:	f002 027b 	and.w	r2, r2, #123	; 0x7b
   25e32:	771a      	strb	r2, [r3, #28]
}
   25e34:	2000      	movs	r0, #0
   25e36:	4770      	bx	lr
   25e38:	40072000 	.word	0x40072000

00025e3c <USB_DCI_Init_EndPoint>:
{
   25e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint_32 ep_ctrl[2] = {EP_OUT, EP_IN};
   25e40:	2304      	movs	r3, #4
   25e42:	2008      	movs	r0, #8
   25e44:	e9cd 0300 	strd	r0, r3, [sp]
    if(ep_ptr->size > MAX_EP_BUFFER_SIZE)
   25e48:	f8b1 3003 	ldrh.w	r3, [r1, #3]
    uint_8 ep_num = ep_ptr->ep_num;
   25e4c:	780e      	ldrb	r6, [r1, #0]
    uint_8 direction = ep_ptr->direction;
   25e4e:	788c      	ldrb	r4, [r1, #2]
    if(ep_ptr->size > MAX_EP_BUFFER_SIZE)
   25e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        ep_ptr->size = MAX_EP_BUFFER_SIZE;
   25e54:	bf81      	itttt	hi
   25e56:	2300      	movhi	r3, #0
   25e58:	70cb      	strbhi	r3, [r1, #3]
   25e5a:	2302      	movhi	r3, #2
   25e5c:	710b      	strbhi	r3, [r1, #4]
    if(ep_num < MAX_SUPPORTED_ENDPOINTS)
   25e5e:	2e06      	cmp	r6, #6
   25e60:	d875      	bhi.n	25f4e <USB_DCI_Init_EndPoint+0x112>
        bdt_index=(uint_8)((ep_num * 4) + (uint_8)odd);
   25e62:	00b0      	lsls	r0, r6, #2
   25e64:	b2c3      	uxtb	r3, r0
        if(direction == USB_SEND)
   25e66:	2c01      	cmp	r4, #1
            bdt_index += 2;
   25e68:	bf04      	itt	eq
   25e6a:	3302      	addeq	r3, #2
   25e6c:	b2db      	uxtbeq	r3, r3
       (g_bdt_elem[bdtelem_index].len != (uint_16)UNINITIALISED_VAL) ||
   25e6e:	4d39      	ldr	r5, [pc, #228]	; (25f54 <USB_DCI_Init_EndPoint+0x118>)
   25e70:	ea4f 0c53 	mov.w	ip, r3, lsr #1
   25e74:	2312      	movs	r3, #18
   25e76:	fb03 530c 	mla	r3, r3, ip, r5
    if((bdtmap_index  == INVALID_BDT_INDEX) ||
   25e7a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   25e7e:	f8b3 e000 	ldrh.w	lr, [r3]
   25e82:	45be      	cmp	lr, r7
   25e84:	d163      	bne.n	25f4e <USB_DCI_Init_EndPoint+0x112>
       (ep_ptr->type > USB_INTERRUPT_PIPE) ||
   25e86:	784f      	ldrb	r7, [r1, #1]
       (g_bdt_elem[bdtelem_index].len != (uint_16)UNINITIALISED_VAL) ||
   25e88:	2f03      	cmp	r7, #3
   25e8a:	d860      	bhi.n	25f4e <USB_DCI_Init_EndPoint+0x112>
       (ep_ptr->type > USB_INTERRUPT_PIPE) ||
   25e8c:	2c01      	cmp	r4, #1
   25e8e:	d85e      	bhi.n	25f4e <USB_DCI_Init_EndPoint+0x112>
    if(bdt_elem->bdtmap_index == (uint_8)UNINITIALISED_VAL)
   25e90:	f893 e00f 	ldrb.w	lr, [r3, #15]
   25e94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
        bdt_elem->bdtmap_index = 0;
   25e98:	bf04      	itt	eq
   25e9a:	f04f 0e00 	moveq.w	lr, #0
   25e9e:	f883 e00f 	strbeq.w	lr, [r3, #15]
    bdt_elem->len = (uint_16)ep_ptr->size;
   25ea2:	2312      	movs	r3, #18
   25ea4:	fb03 f30c 	mul.w	r3, r3, ip
   25ea8:	eb05 0803 	add.w	r8, r5, r3
   25eac:	f8b1 e003 	ldrh.w	lr, [r1, #3]
   25eb0:	f825 e003 	strh.w	lr, [r5, r3]
    bdt_elem->bdtmap_index &= 0x01;
   25eb4:	f898 300f 	ldrb.w	r3, [r8, #15]
    bdt_elem->flag = flag;
   25eb8:	f888 200e 	strb.w	r2, [r8, #14]
    bdt_elem->bdtmap_index |= ((direction << 1) | (ep_num << 2));
   25ebc:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    bdt_elem->bdtmap_index &= 0x01;
   25ec0:	f003 0301 	and.w	r3, r3, #1
    bdt_elem->bdtmap_index |= ((direction << 1) | (ep_num << 2));
   25ec4:	4303      	orrs	r3, r0
    temp = &g_bdtmap->ep_dsc[bdt_elem->bdtmap_index];
   25ec6:	f8d5 0244 	ldr.w	r0, [r5, #580]	; 0x244
    bdt_elem->addr = g_bdt_address;
   25eca:	f8d5 2248 	ldr.w	r2, [r5, #584]	; 0x248
   25ece:	f8c8 2002 	str.w	r2, [r8, #2]
    bdt_elem->bdtmap_index |= ((direction << 1) | (ep_num << 2));
   25ed2:	b2d9      	uxtb	r1, r3
   25ed4:	b25b      	sxtb	r3, r3
   25ed6:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
   25eda:	f888 100f 	strb.w	r1, [r8, #15]
    bdt_elem->type = ep_ptr->type;
   25ede:	f888 7011 	strb.w	r7, [r8, #17]
    bdt_elem->direction = direction;
   25ee2:	f888 4010 	strb.w	r4, [r8, #16]
    temp->cnt = SWAP16((uint_16)ep_ptr->size);
   25ee6:	f081 0101 	eor.w	r1, r1, #1
    temp->addr = SWAP32(g_bdt_address);
   25eea:	f8cc 2004 	str.w	r2, [ip, #4]
    temp->cnt = SWAP16((uint_16)ep_ptr->size);
   25eee:	f8ac e002 	strh.w	lr, [ip, #2]
    temp->Stat._byte = (_CPU | _DATA0 | _DTS);
   25ef2:	f04f 0c08 	mov.w	ip, #8
   25ef6:	f800 c033 	strb.w	ip, [r0, r3, lsl #3]
    temp->cnt = SWAP16((uint_16)ep_ptr->size);
   25efa:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
    temp->addr = SWAP32(g_bdt_address);
   25efe:	f8cc 2004 	str.w	r2, [ip, #4]
    temp->cnt = SWAP16((uint_16)ep_ptr->size);
   25f02:	f8ac e002 	strh.w	lr, [ip, #2]
    g_bdt_address += ep_ptr->size;
   25f06:	fa12 f28e 	uxtah	r2, r2, lr
    temp->Stat._byte = (_CPU | _DATA1 | _DTS);
   25f0a:	f04f 0c48 	mov.w	ip, #72	; 0x48
   25f0e:	f800 c031 	strb.w	ip, [r0, r1, lsl #3]
    g_bdt_address += ep_ptr->size;
   25f12:	f8c5 2248 	str.w	r2, [r5, #584]	; 0x248
    if(direction == USB_RECV)
   25f16:	b92c      	cbnz	r4, 25f24 <USB_DCI_Init_EndPoint+0xe8>
        temp->Stat._byte |= _SIE;
   25f18:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
   25f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25f20:	f800 2033 	strb.w	r2, [r0, r3, lsl #3]
    ep_ctrl[direction] |= ((ep_ptr->type != USB_ISOCHRONOUS_PIPE) ?
   25f24:	ab02      	add	r3, sp, #8
   25f26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    *((&USB0_ENDPT0) + (4 * ep_num)) |= ep_ctrl[direction];
   25f2a:	490b      	ldr	r1, [pc, #44]	; (25f58 <USB_DCI_Init_EndPoint+0x11c>)
    ep_ctrl[direction] |= ((ep_ptr->type != USB_ISOCHRONOUS_PIPE) ?
   25f2c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    *((&USB0_ENDPT0) + (4 * ep_num)) |= ep_ctrl[direction];
   25f30:	b236      	sxth	r6, r6
    ep_ctrl[direction] |= ((ep_ptr->type != USB_ISOCHRONOUS_PIPE) ?
   25f32:	2f01      	cmp	r7, #1
   25f34:	bf18      	it	ne
   25f36:	f043 0301 	orrne.w	r3, r3, #1
    *((&USB0_ENDPT0) + (4 * ep_num)) |= ep_ctrl[direction];
   25f3a:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
   25f3e:	4313      	orrs	r3, r2
   25f40:	b2db      	uxtb	r3, r3
   25f42:	f801 3026 	strb.w	r3, [r1, r6, lsl #2]
    return USB_OK;
   25f46:	2000      	movs	r0, #0
}
   25f48:	b002      	add	sp, #8
   25f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return USBERR_EP_INIT_FAILED;
   25f4e:	2095      	movs	r0, #149	; 0x95
   25f50:	e7fa      	b.n	25f48 <USB_DCI_Init_EndPoint+0x10c>
   25f52:	bf00      	nop
   25f54:	1fff5b9c 	.word	0x1fff5b9c
   25f58:	400720c0 	.word	0x400720c0

00025f5c <_usb_device_cancel_transfer>:
{
   25f5c:	4608      	mov	r0, r1
   25f5e:	b510      	push	{r4, lr}
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   25f60:	4611      	mov	r1, r2
   25f62:	f7ff fec3 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    if(bdt_index != INVALID_BDT_INDEX)
   25f66:	28ff      	cmp	r0, #255	; 0xff
    uint_8 bdtelem_index = (uint_8)TRANSFER_INDEX(bdt_index);
   25f68:	f3c0 0347 	ubfx	r3, r0, #1, #8
    if(bdt_index != INVALID_BDT_INDEX)
   25f6c:	d01a      	beq.n	25fa4 <_usb_device_cancel_transfer+0x48>
        P_BUFF_DSC buffer_dsc = &g_bdtmap->ep_dsc[bdt_elem->bdtmap_index];
   25f6e:	490e      	ldr	r1, [pc, #56]	; (25fa8 <_usb_device_cancel_transfer+0x4c>)
   25f70:	2012      	movs	r0, #18
   25f72:	fb00 1303 	mla	r3, r0, r3, r1
   25f76:	f8d1 2244 	ldr.w	r2, [r1, #580]	; 0x244
   25f7a:	7bd9      	ldrb	r1, [r3, #15]
        buffer_dsc->Stat._byte &= ~_SIE;
   25f7c:	f812 0031 	ldrb.w	r0, [r2, r1, lsl #3]
   25f80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   25f84:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
        buffer_dsc_alt->Stat._byte &= ~_SIE;
   25f88:	f081 0101 	eor.w	r1, r1, #1
   25f8c:	f812 0031 	ldrb.w	r0, [r2, r1, lsl #3]
   25f90:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   25f94:	f802 0031 	strb.w	r0, [r2, r1, lsl #3]
        bdt_elem->app_len = (USB_PACKET_SIZE)UNINITIALISED_VAL;
   25f98:	f04f 32ff 	mov.w	r2, #4294967295
   25f9c:	729a      	strb	r2, [r3, #10]
   25f9e:	72da      	strb	r2, [r3, #11]
        status = USB_OK;
   25fa0:	2000      	movs	r0, #0
}
   25fa2:	bd10      	pop	{r4, pc}
    uint_8 status= USBERR_UNKNOWN_ERROR;
   25fa4:	20c4      	movs	r0, #196	; 0xc4
   25fa6:	e7fc      	b.n	25fa2 <_usb_device_cancel_transfer+0x46>
   25fa8:	1fff5b9c 	.word	0x1fff5b9c

00025fac <USB_DCI_Deinit_EndPoint>:
{
   25fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25fae:	460c      	mov	r4, r1
   25fb0:	f88d 0007 	strb.w	r0, [sp, #7]
    uint_8 bdt_index = USB_DCI_Validate_Param (ep_num, direction,
   25fb4:	4611      	mov	r1, r2
   25fb6:	4620      	mov	r0, r4
{
   25fb8:	4616      	mov	r6, r2
    uint_8 bdt_index = USB_DCI_Validate_Param (ep_num, direction,
   25fba:	f7ff fe97 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    if(bdt_index  == INVALID_BDT_INDEX)
   25fbe:	28ff      	cmp	r0, #255	; 0xff
    uint_8 bdtelem_index = (uint_8)TRANSFER_INDEX(bdt_index);
   25fc0:	f3c0 0747 	ubfx	r7, r0, #1, #8
    if(bdt_index  == INVALID_BDT_INDEX)
   25fc4:	d01e      	beq.n	26004 <USB_DCI_Deinit_EndPoint+0x58>
    g_bdt_address -= (g_bdt_elem[bdtelem_index].len);
   25fc6:	2512      	movs	r5, #18
    USB_DCI_Cancel_Transfer(&controller_ID, ep_num, direction);
   25fc8:	4632      	mov	r2, r6
    g_bdt_address -= (g_bdt_elem[bdtelem_index].len);
   25fca:	437d      	muls	r5, r7
   25fcc:	4e0e      	ldr	r6, [pc, #56]	; (26008 <USB_DCI_Deinit_EndPoint+0x5c>)
    USB_DCI_Cancel_Transfer(&controller_ID, ep_num, direction);
   25fce:	4621      	mov	r1, r4
   25fd0:	f10d 0007 	add.w	r0, sp, #7
   25fd4:	f7ff ffc2 	bl	25f5c <_usb_device_cancel_transfer>
    g_bdt_address -= (g_bdt_elem[bdtelem_index].len);
   25fd8:	5b71      	ldrh	r1, [r6, r5]
   25fda:	f8d6 3248 	ldr.w	r3, [r6, #584]	; 0x248
   25fde:	1a5b      	subs	r3, r3, r1
   25fe0:	f8c6 3248 	str.w	r3, [r6, #584]	; 0x248
    *((&USB0_ENDPT0) + (4 * ep_num)) = EP_DISABLE;
   25fe4:	b224      	sxth	r4, r4
   25fe6:	4b09      	ldr	r3, [pc, #36]	; (2600c <USB_DCI_Deinit_EndPoint+0x60>)
    g_bdt_address -= (g_bdt_elem[bdtelem_index].len);
   25fe8:	1972      	adds	r2, r6, r5
    *((&USB0_ENDPT0) + (4 * ep_num)) = EP_DISABLE;
   25fea:	2000      	movs	r0, #0
   25fec:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
    g_bdt_elem[bdtelem_index].len = (uint_16)UNINITIALISED_VAL;
   25ff0:	f04f 33ff 	mov.w	r3, #4294967295
   25ff4:	5573      	strb	r3, [r6, r5]
    g_bdt_elem[bdtelem_index].addr = (uint_32)UNINITIALISED_VAL;
   25ff6:	7093      	strb	r3, [r2, #2]
    g_bdt_elem[bdtelem_index].len = (uint_16)UNINITIALISED_VAL;
   25ff8:	7053      	strb	r3, [r2, #1]
    g_bdt_elem[bdtelem_index].addr = (uint_32)UNINITIALISED_VAL;
   25ffa:	70d3      	strb	r3, [r2, #3]
   25ffc:	7113      	strb	r3, [r2, #4]
   25ffe:	7153      	strb	r3, [r2, #5]
}
   26000:	b003      	add	sp, #12
   26002:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return USBERR_EP_DEINIT_FAILED;
   26004:	2096      	movs	r0, #150	; 0x96
   26006:	e7fb      	b.n	26000 <USB_DCI_Deinit_EndPoint+0x54>
   26008:	1fff5b9c 	.word	0x1fff5b9c
   2600c:	400720c0 	.word	0x400720c0

00026010 <_usb_device_stall_endpoint>:
{
   26010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26014:	460c      	mov	r4, r1
   26016:	4607      	mov	r7, r0
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   26018:	4611      	mov	r1, r2
   2601a:	4620      	mov	r0, r4
{
   2601c:	4615      	mov	r5, r2
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   2601e:	f7ff fe65 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    bdt_index = bdt_elem->bdtmap_index;
   26022:	f8df 8030 	ldr.w	r8, [pc, #48]	; 26054 <_usb_device_stall_endpoint+0x44>
    P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   26026:	f3c0 0347 	ubfx	r3, r0, #1, #8
    bdt_index = bdt_elem->bdtmap_index;
   2602a:	2012      	movs	r0, #18
   2602c:	fb00 8303 	mla	r3, r0, r3, r8
   26030:	7bde      	ldrb	r6, [r3, #15]
	if(bdt_index != INVALID_BDT_INDEX)
   26032:	2eff      	cmp	r6, #255	; 0xff
   26034:	d00c      	beq.n	26050 <_usb_device_stall_endpoint+0x40>
        (void)USB_DCI_Cancel_Transfer(handle, endpoint_number, direction);
   26036:	462a      	mov	r2, r5
   26038:	4621      	mov	r1, r4
   2603a:	4638      	mov	r0, r7
   2603c:	f7ff ff8e 	bl	25f5c <_usb_device_cancel_transfer>
        g_bdtmap->ep_dsc[bdt_index].Stat._byte |= (_SIE | _BDTSTALL);
   26040:	f8d8 2244 	ldr.w	r2, [r8, #580]	; 0x244
   26044:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   26048:	f063 037b 	orn	r3, r3, #123	; 0x7b
   2604c:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
}
   26050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26054:	1fff5b9c 	.word	0x1fff5b9c

00026058 <_usb_device_read_setup_data>:
{
   26058:	b510      	push	{r4, lr}
   2605a:	4608      	mov	r0, r1
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_RECV,
   2605c:	2100      	movs	r1, #0
{
   2605e:	4614      	mov	r4, r2
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_RECV,
   26060:	f7ff fe44 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    addr = (uint_8_ptr)SWAP32(g_bdtmap->ep_dsc[bdt_index].addr);
   26064:	4a08      	ldr	r2, [pc, #32]	; (26088 <_usb_device_read_setup_data+0x30>)
    P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   26066:	f3c0 0047 	ubfx	r0, r0, #1, #8
    bdt_index = bdt_elem->bdtmap_index;
   2606a:	2112      	movs	r1, #18
   2606c:	fb01 2000 	mla	r0, r1, r0, r2
    addr = (uint_8_ptr)SWAP32(g_bdtmap->ep_dsc[bdt_index].addr);
   26070:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
   26074:	7bc2      	ldrb	r2, [r0, #15]
   26076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2607a:	685a      	ldr	r2, [r3, #4]
    (void)memcpy(buffer_ptr, addr, USB_SETUP_PKT_SIZE);
   2607c:	6813      	ldr	r3, [r2, #0]
   2607e:	6023      	str	r3, [r4, #0]
   26080:	6853      	ldr	r3, [r2, #4]
   26082:	6063      	str	r3, [r4, #4]
}
   26084:	bd10      	pop	{r4, pc}
   26086:	bf00      	nop
   26088:	1fff5b9c 	.word	0x1fff5b9c

0002608c <_usb_device_get_transfer_status>:
{
   2608c:	b510      	push	{r4, lr}
   2608e:	460c      	mov	r4, r1
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   26090:	4620      	mov	r0, r4
   26092:	4611      	mov	r1, r2
   26094:	f7ff fe2a 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
	if(bdt_index != INVALID_BDT_INDEX)
   26098:	28ff      	cmp	r0, #255	; 0xff
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   2609a:	4602      	mov	r2, r0
	if(bdt_index != INVALID_BDT_INDEX)
   2609c:	d01a      	beq.n	260d4 <_usb_device_get_transfer_status+0x48>
        uint_8 ep_control = (uint_8)(*((&USB0_ENDPT0)+4*endpoint_number));
   2609e:	4b10      	ldr	r3, [pc, #64]	; (260e0 <_usb_device_get_transfer_status+0x54>)
   260a0:	b224      	sxth	r4, r4
   260a2:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
        if((ep_control & (EP_IN|EP_OUT)) == EP_DISABLE)
   260a6:	f011 0f0c 	tst.w	r1, #12
        uint_8 ep_control = (uint_8)(*((&USB0_ENDPT0)+4*endpoint_number));
   260aa:	b2cb      	uxtb	r3, r1
        if((ep_control & (EP_IN|EP_OUT)) == EP_DISABLE)
   260ac:	d012      	beq.n	260d4 <_usb_device_get_transfer_status+0x48>
        else if((ep_control &  EPCTL_STALL) == EPCTL_STALL)
   260ae:	f013 0002 	ands.w	r0, r3, #2
   260b2:	d111      	bne.n	260d8 <_usb_device_get_transfer_status+0x4c>
        else if((g_bdtmap->ep_dsc[bdt_index].Stat.SieCtlBit.own == 1)
   260b4:	4b0b      	ldr	r3, [pc, #44]	; (260e4 <_usb_device_get_transfer_status+0x58>)
   260b6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   260ba:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   260be:	09c9      	lsrs	r1, r1, #7
   260c0:	d10c      	bne.n	260dc <_usb_device_get_transfer_status+0x50>
            || (g_bdtmap->ep_dsc[bdt_index ^ 1].Stat.SieCtlBit.own == 1))
   260c2:	f082 0201 	eor.w	r2, r2, #1
   260c6:	b2d2      	uxtb	r2, r2
   260c8:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   260cc:	09db      	lsrs	r3, r3, #7
            status = USB_STATUS_TRANSFER_IN_PROGRESS;
   260ce:	bf18      	it	ne
   260d0:	2003      	movne	r0, #3
}
   260d2:	bd10      	pop	{r4, pc}
    uint_8 status = USB_STATUS_DISABLED;
   260d4:	2005      	movs	r0, #5
   260d6:	e7fc      	b.n	260d2 <_usb_device_get_transfer_status+0x46>
            status = USB_STATUS_STALLED ;
   260d8:	2001      	movs	r0, #1
   260da:	e7fa      	b.n	260d2 <_usb_device_get_transfer_status+0x46>
            status = USB_STATUS_TRANSFER_IN_PROGRESS;
   260dc:	2003      	movs	r0, #3
   260de:	e7f8      	b.n	260d2 <_usb_device_get_transfer_status+0x46>
   260e0:	400720c0 	.word	0x400720c0
   260e4:	1fff5b9c 	.word	0x1fff5b9c

000260e8 <_usb_device_clear_data0_endpoint>:
{
   260e8:	b508      	push	{r3, lr}
	uint_8 bdt_index = USB_DCI_Validate_Param(endpoint_number, direction, USB_RAM_EVEN_BUFFER);
   260ea:	f7ff fdff 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
	bdt_index = bdt_elem->bdtmap_index;
   260ee:	4a07      	ldr	r2, [pc, #28]	; (2610c <_usb_device_clear_data0_endpoint+0x24>)
   260f0:	2312      	movs	r3, #18
	P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   260f2:	f3c0 0047 	ubfx	r0, r0, #1, #8
	bdt_index = bdt_elem->bdtmap_index;
   260f6:	fb03 2000 	mla	r0, r3, r0, r2
   260fa:	7bc3      	ldrb	r3, [r0, #15]
	if(bdt_index != INVALID_BDT_INDEX)
   260fc:	2bff      	cmp	r3, #255	; 0xff
		g_bdtmap->ep_dsc[bdt_index].Stat._byte = _DATA0;
   260fe:	bf1e      	ittt	ne
   26100:	f8d2 2244 	ldrne.w	r2, [r2, #580]	; 0x244
   26104:	2100      	movne	r1, #0
   26106:	f802 1033 	strbne.w	r1, [r2, r3, lsl #3]
}
   2610a:	bd08      	pop	{r3, pc}
   2610c:	1fff5b9c 	.word	0x1fff5b9c

00026110 <_usb_device_recv_data>:
{
   26110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26114:	4608      	mov	r0, r1
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_RECV, USB_RAM_EVEN_BUFFER);
   26116:	2100      	movs	r1, #0
{
   26118:	4690      	mov	r8, r2
   2611a:	461d      	mov	r5, r3
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_RECV, USB_RAM_EVEN_BUFFER);
   2611c:	f7ff fde6 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    bdt_index = bdt_elem->bdtmap_index;
   26120:	4c21      	ldr	r4, [pc, #132]	; (261a8 <_usb_device_recv_data+0x98>)
    P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   26122:	f3c0 0147 	ubfx	r1, r0, #1, #8
    bdt_index = bdt_elem->bdtmap_index;
   26126:	2012      	movs	r0, #18
   26128:	fb00 4101 	mla	r1, r0, r1, r4
   2612c:	7bce      	ldrb	r6, [r1, #15]
    if(bdt_index != INVALID_BDT_INDEX)
   2612e:	2eff      	cmp	r6, #255	; 0xff
   26130:	d038      	beq.n	261a4 <_usb_device_recv_data+0x94>
        if(bdt_elem->len != (uint_16)UNINITIALISED_VAL)
   26132:	880a      	ldrh	r2, [r1, #0]
   26134:	f64f 77ff 	movw	r7, #65535	; 0xffff
   26138:	b293      	uxth	r3, r2
   2613a:	42bb      	cmp	r3, r7
        P_BUFF_DSC buffer_dsc = &g_bdtmap->ep_dsc[bdt_index ^ 1];
   2613c:	f086 0001 	eor.w	r0, r6, #1
        if(bdt_elem->len != (uint_16)UNINITIALISED_VAL)
   26140:	d030      	beq.n	261a4 <_usb_device_recv_data+0x94>
        P_BUFF_DSC buffer_dsc = &g_bdtmap->ep_dsc[bdt_index ^ 1];
   26142:	f8d4 4244 	ldr.w	r4, [r4, #580]	; 0x244
            if(buffer_dsc->Stat.SieCtlBit.own == FALSE)
   26146:	f914 0030 	ldrsb.w	r0, [r4, r0, lsl #3]
   2614a:	2800      	cmp	r0, #0
   2614c:	db2a      	blt.n	261a4 <_usb_device_recv_data+0x94>
                if(size == 0)
   2614e:	b237      	sxth	r7, r6
   26150:	b985      	cbnz	r5, 26174 <_usb_device_recv_data+0x64>
                    buffer_dsc_alt->cnt = SWAP16(bdt_elem->len);
   26152:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
                    return USB_OK;
   26156:	4628      	mov	r0, r5
                    buffer_dsc_alt->cnt = SWAP16(bdt_elem->len);
   26158:	805a      	strh	r2, [r3, #2]
                    buffer_dsc_alt->addr = SWAP32(bdt_elem->addr);
   2615a:	f8d1 2002 	ldr.w	r2, [r1, #2]
   2615e:	605a      	str	r2, [r3, #4]
                        (buffer_dsc_alt->Stat.McuCtlBit.data << 6) |
   26160:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   26164:	f003 0340 	and.w	r3, r3, #64	; 0x40
                        _SIE | _DTS);
   26168:	f063 0377 	orn	r3, r3, #119	; 0x77
                    buffer_dsc_alt->Stat._byte = (uint_8)(
   2616c:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   26170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                bdt_elem->app_len = size;
   26174:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
                buffer_dsc_alt->cnt = SWAP16(size);
   26178:	42ab      	cmp	r3, r5
                bdt_elem->curr_offset = 0;
   2617a:	f04f 0000 	mov.w	r0, #0
                buffer_dsc_alt->cnt = SWAP16(size);
   2617e:	bf28      	it	cs
   26180:	462b      	movcs	r3, r5
                bdt_elem->app_len = size;
   26182:	814d      	strh	r5, [r1, #10]
                bdt_elem->app_buffer = buffer_ptr;
   26184:	f8c1 8006 	str.w	r8, [r1, #6]
                bdt_elem->curr_offset = 0;
   26188:	7308      	strb	r0, [r1, #12]
   2618a:	7348      	strb	r0, [r1, #13]
                buffer_dsc_alt->cnt = SWAP16(size);
   2618c:	8053      	strh	r3, [r2, #2]
                buffer_dsc_alt->addr = SWAP32((uint_32)buffer_ptr);
   2618e:	f8c2 8004 	str.w	r8, [r2, #4]
                    (buffer_dsc_alt->Stat.McuCtlBit.data << 6) |
   26192:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   26196:	f003 0340 	and.w	r3, r3, #64	; 0x40
                    _SIE | _DTS);
   2619a:	f063 0377 	orn	r3, r3, #119	; 0x77
                buffer_dsc_alt->Stat._byte = (uint_8)(
   2619e:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
                status = USB_OK;
   261a2:	e7e5      	b.n	26170 <_usb_device_recv_data+0x60>
    uint_8 status = USBERR_RX_FAILED;
   261a4:	2094      	movs	r0, #148	; 0x94
   261a6:	e7e3      	b.n	26170 <_usb_device_recv_data+0x60>
   261a8:	1fff5b9c 	.word	0x1fff5b9c

000261ac <_usb_device_unstall_endpoint>:
{
   261ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261b0:	460c      	mov	r4, r1
   261b2:	4606      	mov	r6, r0
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   261b4:	4611      	mov	r1, r2
   261b6:	4620      	mov	r0, r4
{
   261b8:	4615      	mov	r5, r2
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, direction,
   261ba:	f7ff fd97 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    bdt_index = bdt_elem->bdtmap_index;
   261be:	4919      	ldr	r1, [pc, #100]	; (26224 <_usb_device_unstall_endpoint+0x78>)
    P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   261c0:	f3c0 0347 	ubfx	r3, r0, #1, #8
    bdt_index = bdt_elem->bdtmap_index;
   261c4:	2012      	movs	r0, #18
   261c6:	fb00 1303 	mla	r3, r0, r3, r1
   261ca:	7bdf      	ldrb	r7, [r3, #15]
	if(bdt_index != INVALID_BDT_INDEX)
   261cc:	2fff      	cmp	r7, #255	; 0xff
   261ce:	d027      	beq.n	26220 <_usb_device_unstall_endpoint+0x74>
        volatile ENDPT0STR *endpoint = (volatile ENDPT0STR*)(&USB0_ENDPT0 + (4 * endpoint_number));
   261d0:	4815      	ldr	r0, [pc, #84]	; (26228 <_usb_device_unstall_endpoint+0x7c>)
   261d2:	fa0f fc84 	sxth.w	ip, r4
        if(endpoint_number != CONTROL_ENDPOINT)
   261d6:	b17c      	cbz	r4, 261f8 <_usb_device_unstall_endpoint+0x4c>
            endpt = (uint_8)((bdt_elem->type != USB_ISOCHRONOUS_PIPE) ?
   261d8:	f893 e011 	ldrb.w	lr, [r3, #17]
            endpoint->Byte |= endpt;
   261dc:	f810 302c 	ldrb.w	r3, [r0, ip, lsl #2]
    	    endpt |= (uint_8)(EP_CTL_DIS |
   261e0:	2d01      	cmp	r5, #1
   261e2:	bf0c      	ite	eq
   261e4:	2214      	moveq	r2, #20
   261e6:	2218      	movne	r2, #24
   261e8:	f1be 0f01 	cmp.w	lr, #1
   261ec:	bf18      	it	ne
   261ee:	f042 0201 	orrne.w	r2, r2, #1
            endpoint->Byte |= endpt;
   261f2:	4313      	orrs	r3, r2
   261f4:	f800 302c 	strb.w	r3, [r0, ip, lsl #2]
        endpoint->Bits.EP_STALL = 0;
   261f8:	f810 302c 	ldrb.w	r3, [r0, ip, lsl #2]
   261fc:	f36f 0341 	bfc	r3, #1, #1
   26200:	f800 302c 	strb.w	r3, [r0, ip, lsl #2]
        g_bdtmap->ep_dsc[bdt_index].Stat._byte = _DATA0;
   26204:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
   26208:	2200      	movs	r2, #0
   2620a:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
	    if(direction == USB_RECV)
   2620e:	b93d      	cbnz	r5, 26220 <_usb_device_unstall_endpoint+0x74>
	        USB_DCI_Recv_Data(handle, endpoint_number, NULL, 0);
   26210:	462b      	mov	r3, r5
   26212:	462a      	mov	r2, r5
   26214:	4621      	mov	r1, r4
   26216:	4630      	mov	r0, r6
}
   26218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	        USB_DCI_Recv_Data(handle, endpoint_number, NULL, 0);
   2621c:	f7ff bf78 	b.w	26110 <_usb_device_recv_data>
}
   26220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26224:	1fff5b9c 	.word	0x1fff5b9c
   26228:	400720c0 	.word	0x400720c0

0002622c <_usb_device_send_data>:
{
   2622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26230:	460f      	mov	r7, r1
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_SEND, USB_RAM_EVEN_BUFFER);
   26232:	4638      	mov	r0, r7
   26234:	2101      	movs	r1, #1
{
   26236:	4690      	mov	r8, r2
   26238:	461d      	mov	r5, r3
    uint_8 bdt_index = USB_DCI_Validate_Param (endpoint_number, USB_SEND, USB_RAM_EVEN_BUFFER);
   2623a:	f7ff fd57 	bl	25cec <USB_DCI_Validate_Param.constprop.0>
    if(bdt_index == INVALID_BDT_INDEX)
   2623e:	28ff      	cmp	r0, #255	; 0xff
    P_BDT_ELEM bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   26240:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if(bdt_index == INVALID_BDT_INDEX)
   26244:	d030      	beq.n	262a8 <_usb_device_send_data+0x7c>
    bdt_index = (uint_8)bdt_elem->bdtmap_index;
   26246:	4b19      	ldr	r3, [pc, #100]	; (262ac <_usb_device_send_data+0x80>)
   26248:	2212      	movs	r2, #18
   2624a:	fb02 3404 	mla	r4, r2, r4, r3
    buffer_dsc = &g_bdtmap->ep_dsc[bdt_index];
   2624e:	f8d3 6244 	ldr.w	r6, [r3, #580]	; 0x244
    bdt_index = (uint_8)bdt_elem->bdtmap_index;
   26252:	f894 c00f 	ldrb.w	ip, [r4, #15]
    if(!((buffer_dsc->Stat.SieCtlBit.own) ||/* For MCU: own is 0 */
   26256:	f916 303c 	ldrsb.w	r3, [r6, ip, lsl #3]
   2625a:	2b00      	cmp	r3, #0
   2625c:	4661      	mov	r1, ip
   2625e:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
   26262:	db21      	blt.n	262a8 <_usb_device_send_data+0x7c>
       (*(&USB0_ENDPT0 + (endpoint_number * 4)) & ENDPT_EP_STALL_MASK)))
   26264:	4812      	ldr	r0, [pc, #72]	; (262b0 <_usb_device_send_data+0x84>)
   26266:	b23b      	sxth	r3, r7
   26268:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
    if(!((buffer_dsc->Stat.SieCtlBit.own) ||/* For MCU: own is 0 */
   2626c:	f010 0002 	ands.w	r0, r0, #2
   26270:	d11a      	bne.n	262a8 <_usb_device_send_data+0x7c>
    if((bdt_elem->app_len - bdt_elem->curr_offset) > bdt_elem->len)
   26272:	8823      	ldrh	r3, [r4, #0]
        bdt_elem->app_len = size;
   26274:	8165      	strh	r5, [r4, #10]
   26276:	fa1f fe85 	uxth.w	lr, r5
        current_count = (uint_16)(bdt_elem->app_len - bdt_elem->curr_offset);
   2627a:	459e      	cmp	lr, r3
   2627c:	bfd8      	it	le
   2627e:	4673      	movle	r3, lr
        bdt_elem->app_buffer = buffer_ptr;
   26280:	f8c4 8006 	str.w	r8, [r4, #6]
        bdt_elem->curr_offset = 0;
   26284:	7320      	strb	r0, [r4, #12]
   26286:	7360      	strb	r0, [r4, #13]
    buffer_dsc->cnt = SWAP16(current_count);
   26288:	8053      	strh	r3, [r2, #2]
    buffer_dsc->addr = SWAP32((uint_32)buff_ptr);
   2628a:	f8c2 8004 	str.w	r8, [r2, #4]
        if(endpoint_number == CONTROL_ENDPOINT)
   2628e:	b927      	cbnz	r7, 2629a <_usb_device_send_data+0x6e>
            buffer_dsc->Stat._byte = (_SIE | _DATA1 | _DTS);
   26290:	23c8      	movs	r3, #200	; 0xc8
            buffer_dsc->Stat._byte = (uint_8)(
   26292:	f806 3031 	strb.w	r3, [r6, r1, lsl #3]
}
   26296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                (buffer_dsc->Stat.McuCtlBit.data << 6) |
   2629a:	f816 303c 	ldrb.w	r3, [r6, ip, lsl #3]
   2629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
                _SIE | _DTS);
   262a2:	f063 0377 	orn	r3, r3, #119	; 0x77
   262a6:	e7f4      	b.n	26292 <_usb_device_send_data+0x66>
        return USBERR_TX_FAILED;
   262a8:	2093      	movs	r0, #147	; 0x93
   262aa:	e7f4      	b.n	26296 <_usb_device_send_data+0x6a>
   262ac:	1fff5b9c 	.word	0x1fff5b9c
   262b0:	400720c0 	.word	0x400720c0

000262b4 <_usb_device_set_address>:
    USB0_ADDR = address;
   262b4:	4b03      	ldr	r3, [pc, #12]	; (262c4 <_usb_device_set_address+0x10>)
    _usb_device_set_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   262b6:	4804      	ldr	r0, [pc, #16]	; (262c8 <_usb_device_set_address+0x14>)
    USB0_ADDR = address;
   262b8:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
    _usb_device_set_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   262bc:	2201      	movs	r2, #1
   262be:	4611      	mov	r1, r2
   262c0:	f000 bbb6 	b.w	26a30 <_usb_device_set_status>
   262c4:	40072000 	.word	0x40072000
   262c8:	1fff5ddc 	.word	0x1fff5ddc

000262cc <_usb_device_shutdown>:
	USB0_CTL = 0;
   262cc:	4b05      	ldr	r3, [pc, #20]	; (262e4 <_usb_device_shutdown+0x18>)
	_usb_device_set_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   262ce:	4806      	ldr	r0, [pc, #24]	; (262e8 <_usb_device_shutdown+0x1c>)
	USB0_CTL = 0;
   262d0:	2200      	movs	r2, #0
   262d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	USB0_USBTRC0 = _USBRESET;
   262d6:	2280      	movs	r2, #128	; 0x80
   262d8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	_usb_device_set_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   262dc:	2101      	movs	r1, #1
   262de:	22ff      	movs	r2, #255	; 0xff
   262e0:	f000 bba6 	b.w	26a30 <_usb_device_set_status>
   262e4:	40072000 	.word	0x40072000
   262e8:	1fff5ddc 	.word	0x1fff5ddc

000262ec <_usb_device_assert_resume>:
{
   262ec:	b538      	push	{r3, r4, r5, lr}
    USB0_USBCTRL &= ~USB_USBCTRL_SUSP_MASK;
   262ee:	4c1a      	ldr	r4, [pc, #104]	; (26358 <_usb_device_assert_resume+0x6c>)
   262f0:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
   262f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   262f8:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    USB0_USBTRC0 &= ~USB_USBTRC0_USBRESMEN_MASK;
   262fc:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   26300:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   26304:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
    USB_DCI_WAKEUP
   26308:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
   2630c:	f042 0220 	orr.w	r2, r2, #32
   26310:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
   26314:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
   26318:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2631c:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
   26320:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
   26324:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   26328:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
    USB0_CTL |= USB_CTL_RESUME_MASK;   /* Start RESUME signaling and make SUSPEND bit 0*/
   2632c:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
   26330:	f042 0204 	orr.w	r2, r2, #4
   26334:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
   26338:	f644 6520 	movw	r5, #20000	; 0x4e20
       Watchdog_Reset();    /* Reset the COP */
   2633c:	3d01      	subs	r5, #1
   2633e:	b2ad      	uxth	r5, r5
   26340:	f000 feac 	bl	2709c <Watchdog_Reset>
    }while(delay_count);
   26344:	2d00      	cmp	r5, #0
   26346:	d1f9      	bne.n	2633c <_usb_device_assert_resume+0x50>
    USB0_CTL &= ~USB_CTL_RESUME_MASK;          /* Stop RESUME signalling */
   26348:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
   2634c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   26350:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
}
   26354:	bd38      	pop	{r3, r4, r5, pc}
   26356:	bf00      	nop
   26358:	40072000 	.word	0x40072000

0002635c <USB_ISR>:
{
   2635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint_8 v1 = USB0_ISTAT;
   26360:	4dd4      	ldr	r5, [pc, #848]	; (266b4 <USB_ISR+0x358>)
    event.controller_ID = g_dci_controller_Id;
   26362:	4cd5      	ldr	r4, [pc, #852]	; (266b8 <USB_ISR+0x35c>)
	uint_8 v1 = USB0_ISTAT;
   26364:	f895 7080 	ldrb.w	r7, [r5, #128]	; 0x80
	uint_8 v2 = USB0_INTEN;
   26368:	f895 3084 	ldrb.w	r3, [r5, #132]	; 0x84
    event.controller_ID = g_dci_controller_Id;
   2636c:	f894 2240 	ldrb.w	r2, [r4, #576]	; 0x240
    uint_8 stat = (uint_8)USB0_STAT;
   26370:	f895 6090 	ldrb.w	r6, [r5, #144]	; 0x90
{
   26374:	b085      	sub	sp, #20
    uint_8 intr_stat = (uint_8)(v1 & v2);
   26376:	401f      	ands	r7, r3
    uint_8 dev_state = USB_STATUS_UNKNOWN;
   26378:	23ff      	movs	r3, #255	; 0xff
   2637a:	f88d 3001 	strb.w	r3, [sp, #1]
    event.controller_ID = g_dci_controller_Id;
   2637e:	f88d 2004 	strb.w	r2, [sp, #4]
    event.ep_num = (uint_8)UNINITIALISED_VAL;
   26382:	f88d 3005 	strb.w	r3, [sp, #5]
    (void)_usb_device_get_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   26386:	2101      	movs	r1, #1
    event.setup = FALSE;
   26388:	2300      	movs	r3, #0
    (void)_usb_device_get_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   2638a:	f10d 0201 	add.w	r2, sp, #1
   2638e:	f504 7010 	add.w	r0, r4, #576	; 0x240
    event.setup = FALSE;
   26392:	f8ad 3006 	strh.w	r3, [sp, #6]
    event.buffer_ptr = NULL;
   26396:	9302      	str	r3, [sp, #8]
    event.errors = NO_ERRORS;
   26398:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.len = 0;
   2639c:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)_usb_device_get_status(&g_dci_controller_Id, USB_STATUS_DEVICE_STATE,
   263a0:	f000 fb2e 	bl	26a00 <_usb_device_get_status>
    if((USB0_USBTRC0 & USB_USBTRC0_USB_RESUME_INT_MASK) && (dev_state == USB_STATE_SUSPEND))
   263a4:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
   263a8:	07d9      	lsls	r1, r3, #31
    uint_8 stat = (uint_8)USB0_STAT;
   263aa:	b2f6      	uxtb	r6, r6
    if((USB0_USBTRC0 & USB_USBTRC0_USB_RESUME_INT_MASK) && (dev_state == USB_STATE_SUSPEND))
   263ac:	d50f      	bpl.n	263ce <USB_ISR+0x72>
   263ae:	f89d 3001 	ldrb.w	r3, [sp, #1]
   263b2:	2b80      	cmp	r3, #128	; 0x80
   263b4:	d10b      	bne.n	263ce <USB_ISR+0x72>
    	USB0_USBCTRL &= ~USB_USBCTRL_SUSP_MASK;
   263b6:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
   263ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   263be:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
        USB0_USBTRC0 &= ~USB_USBTRC0_USBRESMEN_MASK;
   263c2:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
   263c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   263ca:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
    if(SOF_TOKEN_FLAG(intr_stat))
   263ce:	077a      	lsls	r2, r7, #29
   263d0:	d513      	bpl.n	263fa <USB_ISR+0x9e>
		tmp1 = USB0_FRMNUMH;
   263d2:	4ab8      	ldr	r2, [pc, #736]	; (266b4 <USB_ISR+0x358>)
   263d4:	f892 10a4 	ldrb.w	r1, [r2, #164]	; 0xa4
		tmp3 = USB0_FRMNUML;
   263d8:	f892 30a0 	ldrb.w	r3, [r2, #160]	; 0xa0
        USB0_ISTAT = USB_ISTAT_SOFTOK_MASK;
   263dc:	2004      	movs	r0, #4
        sof_count = (uint_16)((tmp1 << tmp2) | tmp3);
   263de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        USB0_ISTAT = USB_ISTAT_SOFTOK_MASK;
   263e2:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
        (void)USB_Device_Call_Service(USB_SERVICE_SOF, &event);
   263e6:	eb0d 0100 	add.w	r1, sp, r0
        sof_count = (uint_16)((tmp1 << tmp2) | tmp3);
   263ea:	f8ad 3002 	strh.w	r3, [sp, #2]
        (void)USB_Device_Call_Service(USB_SERVICE_SOF, &event);
   263ee:	2012      	movs	r0, #18
        event.buffer_ptr = (uint_8_ptr)(&sof_count);
   263f0:	f10d 0302 	add.w	r3, sp, #2
   263f4:	9302      	str	r3, [sp, #8]
        (void)USB_Device_Call_Service(USB_SERVICE_SOF, &event);
   263f6:	f000 fb67 	bl	26ac8 <USB_Device_Call_Service>
    if(BUS_RESET_FLAG(intr_stat))
   263fa:	07fb      	lsls	r3, r7, #31
   263fc:	d54b      	bpl.n	26496 <USB_ISR+0x13a>
    	USB0_ISTAT = USB_ISTAT_USBRST_MASK;
   263fe:	4dad      	ldr	r5, [pc, #692]	; (266b4 <USB_ISR+0x358>)
    (void)memset(start_addr, val, count);
   26400:	48ad      	ldr	r0, [pc, #692]	; (266b8 <USB_ISR+0x35c>)
    	USB0_ISTAT = USB_ISTAT_USBRST_MASK;
   26402:	2301      	movs	r3, #1
	USB0_ERRSTAT = ERR_STAT_CLEAR_ALL;  /* clear USB error flag */
   26404:	26bf      	movs	r6, #191	; 0xbf
    	USB0_ISTAT = USB_ISTAT_USBRST_MASK;
   26406:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	USB0_ERRSTAT = ERR_STAT_CLEAR_ALL;  /* clear USB error flag */
   2640a:	f885 6088 	strb.w	r6, [r5, #136]	; 0x88
	USB0_CTL |= USB_CTL_ODDRST_MASK;                /* Reset to Even buffer */
   2640e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
	USB0_ADDR = 0;                       /* reset to default address */
   26412:	2700      	movs	r7, #0
	USB0_CTL |= USB_CTL_ODDRST_MASK;                /* Reset to Even buffer */
   26414:	f043 0302 	orr.w	r3, r3, #2
   26418:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
    (void)memset(start_addr, val, count);
   2641c:	f44f 7210 	mov.w	r2, #576	; 0x240
	USB0_ADDR = 0;                       /* reset to default address */
   26420:	f885 7098 	strb.w	r7, [r5, #152]	; 0x98
    (void)memset(start_addr, val, count);
   26424:	21ff      	movs	r1, #255	; 0xff
	USB0_USBCTRL = 0x00;
   26426:	f885 7100 	strb.w	r7, [r5, #256]	; 0x100
    (void)memset(start_addr, val, count);
   2642a:	f001 fc95 	bl	27d58 <memset>
   2642e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26432:	4639      	mov	r1, r7
   26434:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
   26438:	f001 fc8e 	bl	27d58 <memset>
	g_bdt_address = ((uint_32)g_bdtmap + BYTES_512);
   2643c:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
   26440:	f503 7300 	add.w	r3, r3, #512	; 0x200
   26444:	f8c4 3248 	str.w	r3, [r4, #584]	; 0x248
	g_trf_direction = USB_TRF_UNKNOWN;
   26448:	4b9c      	ldr	r3, [pc, #624]	; (266bc <USB_ISR+0x360>)
   2644a:	22ff      	movs	r2, #255	; 0xff
   2644c:	701a      	strb	r2, [r3, #0]
	USB0_CTL &= ~USB_CTL_ODDRST_MASK;
   2644e:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26452:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   26456:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
	USB0_USBTRC0 |= 0x40;             /* attach CFv1 core to USB bus */
   2645a:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
   2645e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26462:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
	USB0_INTEN = INTENB_BUS_RESET_VAL; /* Enable All Interrupts except RESUME */
   26466:	239f      	movs	r3, #159	; 0x9f
	USB0_ERREN = ERR_ENB_ENABLE_ALL;   /* Enable All Error Interrupts */
   26468:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
	USB0_INTEN = INTENB_BUS_RESET_VAL; /* Enable All Interrupts except RESUME */
   2646c:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
	USB0_CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
   26470:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26474:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26478:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
        (void)USB_Device_Call_Service(USB_SERVICE_BUS_RESET, &event);
   2647c:	a901      	add	r1, sp, #4
   2647e:	2010      	movs	r0, #16
   26480:	f000 fb22 	bl	26ac8 <USB_Device_Call_Service>
        USB0_CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
   26484:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26488:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2648c:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
}
   26490:	b005      	add	sp, #20
   26492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(TOKEN_COMPL_FLAG(intr_stat))
   26496:	073d      	lsls	r5, r7, #28
   26498:	f140 808b 	bpl.w	265b2 <USB_ISR+0x256>
    	USB0_ISTAT = USB_ISTAT_TOKDNE_MASK;
   2649c:	4b85      	ldr	r3, [pc, #532]	; (266b4 <USB_ISR+0x358>)
   2649e:	2208      	movs	r2, #8
        event.ep_num = (uint_8)((stat & ENDPOINT_NUMBER_MASK) >>
   264a0:	ea4f 1b16 	mov.w	fp, r6, lsr #4
    	USB0_ISTAT = USB_ISTAT_TOKDNE_MASK;
   264a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if(ep_num < MAX_SUPPORTED_ENDPOINTS)
   264a8:	f1bb 0f06 	cmp.w	fp, #6
    event->direction = (uint_8)((stat & ENDPOINT_DIRECTION_MASK) >>
   264ac:	f3c6 02c0 	ubfx	r2, r6, #3, #1
        event.ep_num = (uint_8)((stat & ENDPOINT_NUMBER_MASK) >>
   264b0:	f88d b005 	strb.w	fp, [sp, #5]
    event->direction = (uint_8)((stat & ENDPOINT_DIRECTION_MASK) >>
   264b4:	f88d 2007 	strb.w	r2, [sp, #7]
    if(ep_num < MAX_SUPPORTED_ENDPOINTS)
   264b8:	d84c      	bhi.n	26554 <USB_ISR+0x1f8>
    boolean odd = (boolean)((stat & 0x04) >> 2);
   264ba:	f3c6 0080 	ubfx	r0, r6, #2, #1
        bdt_index=(uint_8)((ep_num * 4) + (uint_8)odd);
   264be:	eb00 008b 	add.w	r0, r0, fp, lsl #2
        if(direction == USB_SEND)
   264c2:	b10a      	cbz	r2, 264c8 <USB_ISR+0x16c>
            bdt_index += 2;
   264c4:	3002      	adds	r0, #2
   264c6:	b2c0      	uxtb	r0, r0
    buffer_dsc = &g_bdtmap->ep_dsc[bdt_index];
   264c8:	f8d4 6244 	ldr.w	r6, [r4, #580]	; 0x244
    buffer_dsc_alt = &g_bdtmap->ep_dsc[bdt_index ^ 1];
   264cc:	eb06 03c0 	add.w	r3, r6, r0, lsl #3
    bdt_elem = &g_bdt_elem[TRANSFER_INDEX(bdt_index)];
   264d0:	f3c0 0547 	ubfx	r5, r0, #1, #8
    event->buffer_ptr = (uint_8_ptr)SWAP32(buffer_dsc->addr);
   264d4:	6859      	ldr	r1, [r3, #4]
    event->len = SWAP16(buffer_dsc->cnt);
   264d6:	885b      	ldrh	r3, [r3, #2]
   264d8:	f8ad 300d 	strh.w	r3, [sp, #13]
    bdt_elem->bdtmap_index = bdt_index;
   264dc:	2312      	movs	r3, #18
   264de:	fb03 4305 	mla	r3, r3, r5, r4
    event->buffer_ptr = (uint_8_ptr)SWAP32(buffer_dsc->addr);
   264e2:	9102      	str	r1, [sp, #8]
    bdt_index = (uint_8)(bdt_elem->bdtmap_index ^ 1);
   264e4:	f893 e00f 	ldrb.w	lr, [r3, #15]
   264e8:	f08e 0e01 	eor.w	lr, lr, #1
    bdt_elem->bdtmap_index = bdt_index;
   264ec:	f883 e00f 	strb.w	lr, [r3, #15]
    buffer_dsc_alt->Stat._byte = (uint_8)((buffer_dsc->Stat.McuCtlBit.data ^ 1) << 6);
   264f0:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    buffer_dsc_alt = &g_bdtmap->ep_dsc[bdt_index ^ 1];
   264f4:	f080 0801 	eor.w	r8, r0, #1
    buffer_dsc_alt->Stat._byte = (uint_8)((buffer_dsc->Stat.McuCtlBit.data ^ 1) << 6);
   264f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    buffer_dsc_alt = &g_bdtmap->ep_dsc[bdt_index ^ 1];
   264fc:	fa5f fa88 	uxtb.w	sl, r8
    buffer_dsc_alt->Stat._byte = (uint_8)((buffer_dsc->Stat.McuCtlBit.data ^ 1) << 6);
   26500:	f083 0301 	eor.w	r3, r3, #1
   26504:	019b      	lsls	r3, r3, #6
   26506:	f806 303a 	strb.w	r3, [r6, sl, lsl #3]
    if(event->direction == USB_SEND)
   2650a:	fa0f fc80 	sxth.w	ip, r0
   2650e:	46d0      	mov	r8, sl
   26510:	eb06 09ca 	add.w	r9, r6, sl, lsl #3
   26514:	2a00      	cmp	r2, #0
   26516:	f000 80d3 	beq.w	266c0 <USB_ISR+0x364>
            if(g_trf_direction == USB_RECV)
   2651a:	4a68      	ldr	r2, [pc, #416]	; (266bc <USB_ISR+0x360>)
   2651c:	7813      	ldrb	r3, [r2, #0]
   2651e:	ea5b 0b03 	orrs.w	fp, fp, r3
   26522:	d119      	bne.n	26558 <USB_ISR+0x1fc>
                g_trf_direction = USB_TRF_UNKNOWN;
   26524:	23ff      	movs	r3, #255	; 0xff
   26526:	7013      	strb	r3, [r2, #0]
                USB_DCI_Cancel_Transfer(&(event->controller_ID), (uint_8)CONTROL_ENDPOINT,
   26528:	4659      	mov	r1, fp
   2652a:	465a      	mov	r2, fp
   2652c:	a801      	add	r0, sp, #4
   2652e:	f7ff fd15 	bl	25f5c <_usb_device_cancel_transfer>
                buffer_dsc_alt->Stat._byte = _DATA0;
   26532:	f806 b03a 	strb.w	fp, [r6, sl, lsl #3]
                USB_DCI_Recv_Data(&(event->controller_ID),
   26536:	465b      	mov	r3, fp
   26538:	465a      	mov	r2, fp
   2653a:	4659      	mov	r1, fp
   2653c:	a801      	add	r0, sp, #4
   2653e:	f7ff fde7 	bl	26110 <_usb_device_recv_data>
        if( (g_trf_direction == USB_SEND) ||
   26542:	f89d 3005 	ldrb.w	r3, [sp, #5]
   26546:	b94b      	cbnz	r3, 2655c <USB_ISR+0x200>
    (void)USB_Device_Call_Service(event->ep_num, event);
   26548:	f89d 0005 	ldrb.w	r0, [sp, #5]
   2654c:	a901      	add	r1, sp, #4
   2654e:	f000 fabb 	bl	26ac8 <USB_Device_Call_Service>
    return;
   26552:	e027      	b.n	265a4 <USB_ISR+0x248>
    uint_8 bdt_index = INVALID_BDT_INDEX;
   26554:	20ff      	movs	r0, #255	; 0xff
   26556:	e7b7      	b.n	264c8 <USB_ISR+0x16c>
        if( (g_trf_direction == USB_SEND) ||
   26558:	2b01      	cmp	r3, #1
   2655a:	d1f2      	bne.n	26542 <USB_ISR+0x1e6>
            bdt_elem->curr_offset += event->len;
   2655c:	2312      	movs	r3, #18
   2655e:	fb03 4305 	mla	r3, r3, r5, r4
   26562:	f8bd 000d 	ldrh.w	r0, [sp, #13]
   26566:	899a      	ldrh	r2, [r3, #12]
   26568:	4402      	add	r2, r0
   2656a:	b291      	uxth	r1, r2
   2656c:	819a      	strh	r2, [r3, #12]
            if((bdt_elem->app_len > bdt_elem->curr_offset) ||
   2656e:	895a      	ldrh	r2, [r3, #10]
   26570:	4291      	cmp	r1, r2
   26572:	f080 808d 	bcs.w	26690 <USB_ISR+0x334>
    uint_8_ptr buff_ptr = bdt_elem->app_buffer + bdt_elem->curr_offset;
   26576:	2312      	movs	r3, #18
   26578:	fb03 4405 	mla	r4, r3, r5, r4
    if((bdt_elem->app_len - bdt_elem->curr_offset) > bdt_elem->len)
   2657c:	1a53      	subs	r3, r2, r1
    uint_8_ptr buff_ptr = bdt_elem->app_buffer + bdt_elem->curr_offset;
   2657e:	f8d4 0006 	ldr.w	r0, [r4, #6]
    if((bdt_elem->app_len - bdt_elem->curr_offset) > bdt_elem->len)
   26582:	8824      	ldrh	r4, [r4, #0]
   26584:	42a3      	cmp	r3, r4
    uint_8_ptr buff_ptr = bdt_elem->app_buffer + bdt_elem->curr_offset;
   26586:	4408      	add	r0, r1
        current_count = (uint_16)(bdt_elem->app_len - bdt_elem->curr_offset);
   26588:	bfd8      	it	le
   2658a:	b29c      	uxthle	r4, r3
    buffer_dsc->cnt = SWAP16(current_count);
   2658c:	f8a9 4002 	strh.w	r4, [r9, #2]
    buffer_dsc->addr = SWAP32((uint_32)buff_ptr);
   26590:	f8c9 0004 	str.w	r0, [r9, #4]
                    (buffer_dsc_alt->Stat.McuCtlBit.data) << 6) |
   26594:	f816 303a 	ldrb.w	r3, [r6, sl, lsl #3]
   26598:	f003 0340 	and.w	r3, r3, #64	; 0x40
                    _SIE | _DTS);
   2659c:	f063 0377 	orn	r3, r3, #119	; 0x77
                buffer_dsc_alt->Stat._byte = (uint_8)((
   265a0:	f806 3038 	strb.w	r3, [r6, r8, lsl #3]
        USB0_CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
   265a4:	4a43      	ldr	r2, [pc, #268]	; (266b4 <USB_ISR+0x358>)
   265a6:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
   265aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   265ae:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
    if(ERROR_FLAG(intr_stat))
   265b2:	07b8      	lsls	r0, r7, #30
   265b4:	d517      	bpl.n	265e6 <USB_ISR+0x28a>
    	USB0_ISTAT = USB_ISTAT_ERROR_MASK;
   265b6:	4c3f      	ldr	r4, [pc, #252]	; (266b4 <USB_ISR+0x358>)
   265b8:	2302      	movs	r3, #2
   265ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
		v1 = USB0_ERRSTAT;
   265be:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
		v2 = USB0_ERREN;
   265c2:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
       (void)USB_Device_Call_Service(USB_SERVICE_ERROR, &event);
   265c6:	a901      	add	r1, sp, #4
        event.errors = (uint_8)(v1 & v2);
   265c8:	4013      	ands	r3, r2
       (void)USB_Device_Call_Service(USB_SERVICE_ERROR, &event);
   265ca:	2016      	movs	r0, #22
        event.errors = (uint_8)(v1 & v2);
   265cc:	f88d 300c 	strb.w	r3, [sp, #12]
       (void)USB_Device_Call_Service(USB_SERVICE_ERROR, &event);
   265d0:	f000 fa7a 	bl	26ac8 <USB_Device_Call_Service>
       USB0_ERRSTAT = ERR_STAT_CLEAR_ALL;  /*clear all errors*/
   265d4:	23bf      	movs	r3, #191	; 0xbf
   265d6:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
       USB0_CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
   265da:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
   265de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   265e2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    if(SLEEP_FLAG(intr_stat))
   265e6:	06f9      	lsls	r1, r7, #27
   265e8:	d51c      	bpl.n	26624 <USB_ISR+0x2c8>
    	USB0_ISTAT = USB_ISTAT_RESUME_MASK;
   265ea:	4c32      	ldr	r4, [pc, #200]	; (266b4 <USB_ISR+0x358>)
   265ec:	2320      	movs	r3, #32
   265ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    	USB0_ISTAT = USB_ISTAT_SLEEP_MASK;
   265f2:	2310      	movs	r3, #16
   265f4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        (void)USB_Device_Call_Service(USB_SERVICE_SLEEP, &event);
   265f8:	a901      	add	r1, sp, #4
   265fa:	2014      	movs	r0, #20
   265fc:	f000 fa64 	bl	26ac8 <USB_Device_Call_Service>
        USB0_USBTRC0 |= USB_USBTRC0_USBRESMEN_MASK;
   26600:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   26604:	f043 0320 	orr.w	r3, r3, #32
   26608:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
        USB0_USBCTRL |= USB_USBCTRL_SUSP_MASK;
   2660c:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   26610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26614:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
        USB0_INTEN |= USB_INTEN_RESUMEEN_MASK;
   26618:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   2661c:	f043 0320 	orr.w	r3, r3, #32
   26620:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    if(RESUME_FLAG(intr_stat))
   26624:	06ba      	lsls	r2, r7, #26
   26626:	d50d      	bpl.n	26644 <USB_ISR+0x2e8>
    	USB0_ISTAT = USB_ISTAT_RESUME_MASK;
   26628:	4c22      	ldr	r4, [pc, #136]	; (266b4 <USB_ISR+0x358>)
   2662a:	2320      	movs	r3, #32
   2662c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        (void)USB_Device_Call_Service(USB_SERVICE_RESUME, &event);
   26630:	a901      	add	r1, sp, #4
   26632:	2013      	movs	r0, #19
   26634:	f000 fa48 	bl	26ac8 <USB_Device_Call_Service>
        USB0_INTEN &= ~USB_INTEN_RESUMEEN_MASK;
   26638:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   2663c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26640:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    if(STALL_FLAG(intr_stat))
   26644:	063b      	lsls	r3, r7, #24
   26646:	f57f af23 	bpl.w	26490 <USB_ISR+0x134>
        (void)_usb_device_get_status(&(event.controller_ID),
   2664a:	f10d 0202 	add.w	r2, sp, #2
        event.ep_num = (uint_8)UNINITIALISED_VAL;
   2664e:	23ff      	movs	r3, #255	; 0xff
        (void)_usb_device_get_status(&(event.controller_ID),
   26650:	2110      	movs	r1, #16
   26652:	a801      	add	r0, sp, #4
        event.ep_num = (uint_8)UNINITIALISED_VAL;
   26654:	f88d 3005 	strb.w	r3, [sp, #5]
        (void)_usb_device_get_status(&(event.controller_ID),
   26658:	f000 f9d2 	bl	26a00 <_usb_device_get_status>
        if(endp_status == USB_STATUS_STALLED)
   2665c:	f89d 3002 	ldrb.w	r3, [sp, #2]
        USB0_ISTAT = USB_ISTAT_STALL_MASK;
   26660:	4c14      	ldr	r4, [pc, #80]	; (266b4 <USB_ISR+0x358>)
        if(endp_status == USB_STATUS_STALLED)
   26662:	2b01      	cmp	r3, #1
            event.direction = USB_SEND;
   26664:	bf04      	itt	eq
   26666:	f88d 3007 	strbeq.w	r3, [sp, #7]
            event.ep_num = CONTROL_ENDPOINT;
   2666a:	2200      	moveq	r2, #0
        USB0_ISTAT = USB_ISTAT_STALL_MASK;
   2666c:	f04f 0380 	mov.w	r3, #128	; 0x80
            event.ep_num = CONTROL_ENDPOINT;
   26670:	bf08      	it	eq
   26672:	f88d 2005 	strbeq.w	r2, [sp, #5]
        (void)USB_Device_Call_Service(USB_SERVICE_STALL, &event);
   26676:	a901      	add	r1, sp, #4
        USB0_ISTAT = USB_ISTAT_STALL_MASK;
   26678:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        (void)USB_Device_Call_Service(USB_SERVICE_STALL, &event);
   2667c:	2017      	movs	r0, #23
   2667e:	f000 fa23 	bl	26ac8 <USB_Device_Call_Service>
        USB0_CTL &= ~USB_CTL_TXSUSPENDTOKENBUSY_MASK;
   26682:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
   26686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2668a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
   2668e:	e6ff      	b.n	26490 <USB_ISR+0x134>
            if((bdt_elem->app_len > bdt_elem->curr_offset) ||
   26690:	f8b3 c000 	ldrh.w	ip, [r3]
   26694:	b2c0      	uxtb	r0, r0
   26696:	4584      	cmp	ip, r0
   26698:	d103      	bne.n	266a2 <USB_ISR+0x346>
                 (((uint_8)event->len == bdt_elem->len) && (bdt_elem->flag == TRUE))
   2669a:	7b9b      	ldrb	r3, [r3, #14]
   2669c:	2b01      	cmp	r3, #1
   2669e:	f43f af6a 	beq.w	26576 <USB_ISR+0x21a>
                event->buffer_ptr = bdt_elem->app_buffer;
   266a2:	2312      	movs	r3, #18
   266a4:	fb03 4405 	mla	r4, r3, r5, r4
   266a8:	f8d4 3006 	ldr.w	r3, [r4, #6]
   266ac:	9302      	str	r3, [sp, #8]
                event->len = bdt_elem->curr_offset;
   266ae:	f8ad 100d 	strh.w	r1, [sp, #13]
   266b2:	e749      	b.n	26548 <USB_ISR+0x1ec>
   266b4:	40072000 	.word	0x40072000
   266b8:	1fff5b9c 	.word	0x1fff5b9c
   266bc:	1fff0b5e 	.word	0x1fff0b5e
        if(event->ep_num == CONTROL_ENDPOINT)
   266c0:	f1bb 0f00 	cmp.w	fp, #0
   266c4:	d10c      	bne.n	266e0 <USB_ISR+0x384>
            if(buffer_dsc->Stat.RecPid.pid == USB_SETUP_TOKEN)
   266c6:	f816 303c 	ldrb.w	r3, [r6, ip, lsl #3]
   266ca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
   266ce:	2b34      	cmp	r3, #52	; 0x34
   266d0:	4b2f      	ldr	r3, [pc, #188]	; (26790 <USB_ISR+0x434>)
   266d2:	d137      	bne.n	26744 <USB_ISR+0x3e8>
                event->setup = TRUE;
   266d4:	2201      	movs	r2, #1
   266d6:	f88d 2006 	strb.w	r2, [sp, #6]
                g_trf_direction = (uint_8)((uint_8)
   266da:	780a      	ldrb	r2, [r1, #0]
   266dc:	09d2      	lsrs	r2, r2, #7
   266de:	701a      	strb	r2, [r3, #0]
        if(bdt_elem->app_len != (USB_PACKET_SIZE)UNINITIALISED_VAL)
   266e0:	2212      	movs	r2, #18
   266e2:	fb02 4205 	mla	r2, r2, r5, r4
   266e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   266ea:	8953      	ldrh	r3, [r2, #10]
   266ec:	428b      	cmp	r3, r1
   266ee:	f102 0e08 	add.w	lr, r2, #8
   266f2:	f43f af29 	beq.w	26548 <USB_ISR+0x1ec>
            USB_PACKET_SIZE size = event->len;
   266f6:	f8bd c00d 	ldrh.w	ip, [sp, #13]
            bdt_elem->curr_offset += size;
   266fa:	8991      	ldrh	r1, [r2, #12]
   266fc:	4461      	add	r1, ip
   266fe:	8191      	strh	r1, [r2, #12]
               ( (size == bdt_elem->len) &&
   26700:	8812      	ldrh	r2, [r2, #0]
            if(
   26702:	4594      	cmp	ip, r2
            bdt_elem->curr_offset += size;
   26704:	b288      	uxth	r0, r1
            if(
   26706:	d101      	bne.n	2670c <USB_ISR+0x3b0>
               ( (size == bdt_elem->len) &&
   26708:	4283      	cmp	r3, r0
   2670a:	d80c      	bhi.n	26726 <USB_ISR+0x3ca>
               ) ||
   2670c:	b393      	cbz	r3, 26774 <USB_ISR+0x418>
                 (!(bdt_elem->app_len % bdt_elem->len)) &&
   2670e:	fbb3 f1f2 	udiv	r1, r3, r2
   26712:	fb02 3111 	mls	r1, r2, r1, r3
               ( (bdt_elem->app_len)&&
   26716:	b289      	uxth	r1, r1
   26718:	bb61      	cbnz	r1, 26774 <USB_ISR+0x418>
                 (bdt_elem->flag == TRUE)
   2671a:	2112      	movs	r1, #18
   2671c:	fb01 4105 	mla	r1, r1, r5, r4
                 (!(bdt_elem->app_len % bdt_elem->len)) &&
   26720:	7b89      	ldrb	r1, [r1, #14]
   26722:	2901      	cmp	r1, #1
   26724:	d126      	bne.n	26774 <USB_ISR+0x418>
                count = (uint_16)(((bdt_elem->app_len - bdt_elem->curr_offset)
   26726:	1a1b      	subs	r3, r3, r0
   26728:	4293      	cmp	r3, r2
   2672a:	bfd8      	it	le
   2672c:	b29a      	uxthle	r2, r3
				if(count == 0)
   2672e:	2312      	movs	r3, #18
					buffer_dsc_alt->addr = SWAP32(bdt_elem->addr);
   26730:	fb03 4405 	mla	r4, r3, r5, r4
				if(count == 0)
   26734:	b9c2      	cbnz	r2, 26768 <USB_ISR+0x40c>
					buffer_dsc_alt->addr = SWAP32(bdt_elem->addr);
   26736:	f8d4 3002 	ldr.w	r3, [r4, #2]
   2673a:	f8c9 3004 	str.w	r3, [r9, #4]
				    buffer_dsc_alt->cnt = SWAP16(count);
   2673e:	f8a9 2002 	strh.w	r2, [r9, #2]
   26742:	e727      	b.n	26594 <USB_ISR+0x238>
            else if(g_trf_direction == USB_SEND)
   26744:	781a      	ldrb	r2, [r3, #0]
   26746:	2a01      	cmp	r2, #1
   26748:	d1ca      	bne.n	266e0 <USB_ISR+0x384>
                g_trf_direction = USB_TRF_UNKNOWN;
   2674a:	21ff      	movs	r1, #255	; 0xff
   2674c:	7019      	strb	r1, [r3, #0]
                USB_DCI_Cancel_Transfer(&(event->controller_ID), (uint_8)CONTROL_ENDPOINT,
   2674e:	a801      	add	r0, sp, #4
   26750:	4659      	mov	r1, fp
   26752:	f7ff fc03 	bl	25f5c <_usb_device_cancel_transfer>
                buffer_dsc_alt->Stat._byte = _DATA0;
   26756:	f806 b03a 	strb.w	fp, [r6, sl, lsl #3]
                USB_DCI_Recv_Data(&(event->controller_ID),
   2675a:	465b      	mov	r3, fp
   2675c:	465a      	mov	r2, fp
   2675e:	4659      	mov	r1, fp
   26760:	a801      	add	r0, sp, #4
   26762:	f7ff fcd5 	bl	26110 <_usb_device_recv_data>
   26766:	e7bb      	b.n	266e0 <USB_ISR+0x384>
                    buffer_dsc_alt->addr = SWAP32((uint_32)(bdt_elem->app_buffer + bdt_elem->curr_offset));
   26768:	f8d4 3006 	ldr.w	r3, [r4, #6]
   2676c:	4418      	add	r0, r3
   2676e:	f8c9 0004 	str.w	r0, [r9, #4]
   26772:	e7e4      	b.n	2673e <USB_ISR+0x3e2>
                event->buffer_ptr = bdt_elem->app_buffer;
   26774:	2312      	movs	r3, #18
   26776:	fb03 4405 	mla	r4, r3, r5, r4
   2677a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   2677e:	9302      	str	r3, [sp, #8]
                bdt_elem->app_len = (USB_PACKET_SIZE)UNINITIALISED_VAL;
   26780:	f04f 33ff 	mov.w	r3, #4294967295
                event->len = bdt_elem->curr_offset;
   26784:	f8ad 000d 	strh.w	r0, [sp, #13]
                bdt_elem->app_len = (USB_PACKET_SIZE)UNINITIALISED_VAL;
   26788:	72a3      	strb	r3, [r4, #10]
   2678a:	72e3      	strb	r3, [r4, #11]
   2678c:	e6dc      	b.n	26548 <USB_ISR+0x1ec>
   2678e:	bf00      	nop
   26790:	1fff0b5e 	.word	0x1fff0b5e

00026794 <Clear_Mem>:
{
   26794:	4613      	mov	r3, r2
    (void)memset(start_addr, val, count);
   26796:	460a      	mov	r2, r1
   26798:	4619      	mov	r1, r3
   2679a:	f001 badd 	b.w	27d58 <memset>
   2679e:	bf00      	nop

000267a0 <USB_Desc_Get_Descriptor>:
     uint_8 str_num,         /* [IN] string index for string descriptor */
     uint_16 index,          /* [IN] string descriptor language Id */
     uint_8_ptr *descriptor, /* [OUT] output descriptor pointer */
     USB_PACKET_SIZE *size   /* [OUT] size of descriptor returned */
)
{
   267a0:	b530      	push	{r4, r5, lr}
     UNUSED (controller_ID);

    /* string descriptors are handled saperately */
    if(type == USB_STRING_DESCRIPTOR)
   267a2:	2903      	cmp	r1, #3
{
   267a4:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
   267a8:	4618      	mov	r0, r3
    if(type == USB_STRING_DESCRIPTOR)
   267aa:	d11d      	bne.n	267e8 <USB_Desc_Get_Descriptor+0x48>
    {
        if(index == 0)
   267ac:	b923      	cbnz	r3, 267b8 <USB_Desc_Get_Descriptor+0x18>
        {
            /* return the string and size of all languages */
            *descriptor = (uint_8_ptr) (unsigned long) g_languages.languages_supported_string;	// cast to unsigned long before properly casting to prevent gcc from complaining about cast from const to non-const
   267ae:	4b16      	ldr	r3, [pc, #88]	; (26808 <USB_Desc_Get_Descriptor+0x68>)
   267b0:	602b      	str	r3, [r5, #0]
            *size = g_languages.languages_supported_size;
   267b2:	2304      	movs	r3, #4
   267b4:	8023      	strh	r3, [r4, #0]
    {
        return USBERR_INVALID_REQ_TYPE;
    }

    return USB_OK;
}
   267b6:	bd30      	pop	{r4, r5, pc}
                if(index == g_languages.usb_language[lang_id].language_id)
   267b8:	f240 4309 	movw	r3, #1033	; 0x409
   267bc:	4298      	cmp	r0, r3
   267be:	d110      	bne.n	267e2 <USB_Desc_Get_Descriptor+0x42>
                    if(str_num < USB_MAX_STRING_DESCRIPTORS)
   267c0:	2a02      	cmp	r2, #2
   267c2:	f04f 0300 	mov.w	r3, #0
   267c6:	d80d      	bhi.n	267e4 <USB_Desc_Get_Descriptor+0x44>
            *descriptor = (uint_8_ptr) (unsigned long) g_languages.usb_language[lang_id].	// cast to unsigned long before properly casting to prevent gcc from complaining about cast from const to non-const
   267c8:	4910      	ldr	r1, [pc, #64]	; (2680c <USB_Desc_Get_Descriptor+0x6c>)
   267ca:	200c      	movs	r0, #12
   267cc:	fb00 1303 	mla	r3, r0, r3, r1
                                                lang_desc[lang_index];
   267d0:	68d9      	ldr	r1, [r3, #12]
                                                lang_desc_size[lang_index];
   267d2:	691b      	ldr	r3, [r3, #16]
                                                lang_desc[lang_index];
   267d4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
            *descriptor = (uint_8_ptr) (unsigned long) g_languages.usb_language[lang_id].	// cast to unsigned long before properly casting to prevent gcc from complaining about cast from const to non-const
   267d8:	6029      	str	r1, [r5, #0]
                                                lang_desc_size[lang_index];
   267da:	5c9b      	ldrb	r3, [r3, r2]
        *size = g_std_desc_size[type];
   267dc:	8023      	strh	r3, [r4, #0]
    return USB_OK;
   267de:	2000      	movs	r0, #0
   267e0:	e7e9      	b.n	267b6 <USB_Desc_Get_Descriptor+0x16>
            for(;lang_id< USB_MAX_LANGUAGES_SUPPORTED;lang_id++)
   267e2:	2301      	movs	r3, #1
            uint_8 lang_index=USB_MAX_LANGUAGES_SUPPORTED;
   267e4:	2201      	movs	r2, #1
   267e6:	e7ef      	b.n	267c8 <USB_Desc_Get_Descriptor+0x28>
    else if(type < USB_MAX_STD_DESCRIPTORS+1)
   267e8:	2907      	cmp	r1, #7
   267ea:	d901      	bls.n	267f0 <USB_Desc_Get_Descriptor+0x50>
        return USBERR_INVALID_REQ_TYPE;
   267ec:	20cd      	movs	r0, #205	; 0xcd
   267ee:	e7e2      	b.n	267b6 <USB_Desc_Get_Descriptor+0x16>
        *descriptor = (uint_8_ptr) (unsigned long) g_std_descriptors [type];	// cast to unsigned long before properly casting to prevent gcc from complaining about cast from const to non-const
   267f0:	4b06      	ldr	r3, [pc, #24]	; (2680c <USB_Desc_Get_Descriptor+0x6c>)
   267f2:	eb03 0281 	add.w	r2, r3, r1, lsl #2
   267f6:	6a12      	ldr	r2, [r2, #32]
   267f8:	602a      	str	r2, [r5, #0]
        if(*descriptor == NULL)
   267fa:	2a00      	cmp	r2, #0
   267fc:	d0f6      	beq.n	267ec <USB_Desc_Get_Descriptor+0x4c>
        *size = g_std_desc_size[type];
   267fe:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   26802:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
   26806:	e7e9      	b.n	267dc <USB_Desc_Get_Descriptor+0x3c>
   26808:	1fff0b5f 	.word	0x1fff0b5f
   2680c:	0002b10c 	.word	0x0002b10c

00026810 <USB_Desc_Get_Interface>:
      uint_8_ptr alt_interface  /* [OUT] output alternate interface */
)
{
    UNUSED (controller_ID);
    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   26810:	2901      	cmp	r1, #1
    {
        /* get alternate interface*/
        *alt_interface = g_alternate_interface[interface];
   26812:	bf9f      	itttt	ls
   26814:	4b03      	ldrls	r3, [pc, #12]	; (26824 <USB_Desc_Get_Interface+0x14>)
   26816:	5c5b      	ldrbls	r3, [r3, r1]
   26818:	7013      	strbls	r3, [r2, #0]
        return USB_OK;
   2681a:	2000      	movls	r0, #0
    }

    return USBERR_INVALID_REQ_TYPE;
   2681c:	bf88      	it	hi
   2681e:	20cd      	movhi	r0, #205	; 0xcd
}
   26820:	4770      	bx	lr
   26822:	bf00      	nop
   26824:	1fff5de8 	.word	0x1fff5de8

00026828 <USB_Desc_Set_Interface>:
      uint_8 alt_interface  /* [IN] input alternate interface */
)
{
    UNUSED (controller_ID);
    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   26828:	2901      	cmp	r1, #1
    {
        /* set alternate interface*/
        g_alternate_interface[interface]=alt_interface;
   2682a:	bf9d      	ittte	ls
   2682c:	4b02      	ldrls	r3, [pc, #8]	; (26838 <USB_Desc_Set_Interface+0x10>)
            return USB_OK;
   2682e:	2000      	movls	r0, #0
        g_alternate_interface[interface]=alt_interface;
   26830:	545a      	strbls	r2, [r3, r1]
    }

    return USBERR_INVALID_REQ_TYPE;
   26832:	20cd      	movhi	r0, #205	; 0xcd
}
   26834:	4770      	bx	lr
   26836:	bf00      	nop
   26838:	1fff5de8 	.word	0x1fff5de8

0002683c <USB_Desc_Valid_Configation>:
        }
        loop_index++;
    }

    return FALSE;
}
   2683c:	2901      	cmp	r1, #1
   2683e:	bf8c      	ite	hi
   26840:	2000      	movhi	r0, #0
   26842:	2001      	movls	r0, #1
   26844:	4770      	bx	lr

00026846 <USB_Desc_Valid_Interface>:
    UNUSED (controller_ID);

    /* check with only supported val right now */
    while(loop_index < USB_MAX_SUPPORTED_INTERFACES)
    {
        if(interface == g_alternate_interface[loop_index])
   26846:	4b05      	ldr	r3, [pc, #20]	; (2685c <USB_Desc_Valid_Interface+0x16>)
   26848:	781a      	ldrb	r2, [r3, #0]
   2684a:	428a      	cmp	r2, r1
   2684c:	d004      	beq.n	26858 <USB_Desc_Valid_Interface+0x12>
   2684e:	7858      	ldrb	r0, [r3, #1]
        {
            return TRUE;
   26850:	1a43      	subs	r3, r0, r1
   26852:	4258      	negs	r0, r3
   26854:	4158      	adcs	r0, r3
   26856:	4770      	bx	lr
   26858:	2001      	movs	r0, #1
        }
        loop_index++;
    }

    return FALSE;
}
   2685a:	4770      	bx	lr
   2685c:	1fff5de8 	.word	0x1fff5de8

00026860 <USB_Desc_Remote_Wakeup>:
      uint_8 controller_ID  /* [IN] Controller ID */
)
{
    UNUSED (controller_ID);
    return REMOTE_WAKEUP_SUPPORT;
}
   26860:	2000      	movs	r0, #0
   26862:	4770      	bx	lr

00026864 <USB_Desc_Get_Endpoints>:
      uint_8 controller_ID  /* [IN] Controller ID */
)
{
    UNUSED (controller_ID);
    return (void*) (unsigned long) &usb_desc_ep;	// cast to unsigned long before properly casting to prevent gcc from complaining about cast from const to non-const
}
   26864:	4800      	ldr	r0, [pc, #0]	; (26868 <USB_Desc_Get_Endpoints+0x4>)
   26866:	4770      	bx	lr
   26868:	0002b15c 	.word	0x0002b15c

0002686c <USB_Desc_Get_Line_Coding>:
    uint_8_ptr *coding_data     /* [OUT] Line Coding Data */
)
{
    UNUSED (controller_ID);
    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   2686c:	2901      	cmp	r1, #1
    {
        /* get line coding data*/
        *coding_data = g_line_coding[interface];
   2686e:	bf9f      	itttt	ls
   26870:	4b04      	ldrls	r3, [pc, #16]	; (26884 <USB_Desc_Get_Line_Coding+0x18>)
   26872:	ebc1 01c1 	rsbls	r1, r1, r1, lsl #3
   26876:	18c9      	addls	r1, r1, r3
        return USB_OK;
   26878:	2000      	movls	r0, #0
        *coding_data = g_line_coding[interface];
   2687a:	bf94      	ite	ls
   2687c:	6011      	strls	r1, [r2, #0]
    }

    return USBERR_INVALID_REQ_TYPE;
   2687e:	20cd      	movhi	r0, #205	; 0xcd
}
   26880:	4770      	bx	lr
   26882:	bf00      	nop
   26884:	1fff0b63 	.word	0x1fff0b63

00026888 <USB_Desc_Set_Line_Coding>:
{
    uint_8 count;
    UNUSED (controller_ID);

    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   26888:	2901      	cmp	r1, #1
   2688a:	d80d      	bhi.n	268a8 <USB_Desc_Set_Line_Coding+0x20>
   2688c:	4b07      	ldr	r3, [pc, #28]	; (268ac <USB_Desc_Set_Line_Coding+0x24>)
   2688e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   26892:	4419      	add	r1, r3
   26894:	2308      	movs	r3, #8
    {
        /* set line coding data*/
        for(count = 0; count < LINE_CODING_SIZE; count++)
        {
            g_line_coding[interface][count] = *((*coding_data +
   26896:	6810      	ldr	r0, [r2, #0]
   26898:	5cc0      	ldrb	r0, [r0, r3]
   2689a:	f801 0b01 	strb.w	r0, [r1], #1
        for(count = 0; count < LINE_CODING_SIZE; count++)
   2689e:	3301      	adds	r3, #1
   268a0:	2b0f      	cmp	r3, #15
   268a2:	d1f8      	bne.n	26896 <USB_Desc_Set_Line_Coding+0xe>
                                                USB_SETUP_PKT_SIZE) + count);
        }
        return USB_OK;
   268a4:	2000      	movs	r0, #0
   268a6:	4770      	bx	lr
    }

    return USBERR_INVALID_REQ_TYPE;
   268a8:	20cd      	movs	r0, #205	; 0xcd
}
   268aa:	4770      	bx	lr
   268ac:	1fff0b63 	.word	0x1fff0b63

000268b0 <USB_Desc_Get_Abstract_State>:
    uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
)
{
    UNUSED (controller_ID);
    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   268b0:	2901      	cmp	r1, #1
    {
        /* get line coding data*/
        *feature_data = g_abstract_state[interface];
   268b2:	bf9f      	itttt	ls
   268b4:	4b03      	ldrls	r3, [pc, #12]	; (268c4 <USB_Desc_Get_Abstract_State+0x14>)
   268b6:	eb03 0141 	addls.w	r1, r3, r1, lsl #1
        return USB_OK;
   268ba:	2000      	movls	r0, #0
        *feature_data = g_abstract_state[interface];
   268bc:	6011      	strls	r1, [r2, #0]
    }

    return USBERR_INVALID_REQ_TYPE;
   268be:	bf88      	it	hi
   268c0:	20cd      	movhi	r0, #205	; 0xcd
}
   268c2:	4770      	bx	lr
   268c4:	1fff5dea 	.word	0x1fff5dea

000268c8 <USB_Desc_Get_Country_Setting>:
    uint_8_ptr *feature_data    /* [OUT] Output Comm Feature Data */
)
{
    UNUSED (controller_ID);
    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   268c8:	2901      	cmp	r1, #1
    {
        /* get line coding data*/
        *feature_data = g_country_code[interface];
   268ca:	bf9f      	itttt	ls
   268cc:	4b03      	ldrls	r3, [pc, #12]	; (268dc <USB_Desc_Get_Country_Setting+0x14>)
   268ce:	eb03 0141 	addls.w	r1, r3, r1, lsl #1
        return USB_OK;
   268d2:	2000      	movls	r0, #0
        *feature_data = g_country_code[interface];
   268d4:	6011      	strls	r1, [r2, #0]
    }

    return USBERR_INVALID_REQ_TYPE;
   268d6:	bf88      	it	hi
   268d8:	20cd      	movhi	r0, #205	; 0xcd
}
   268da:	4770      	bx	lr
   268dc:	1fff5dee 	.word	0x1fff5dee

000268e0 <USB_Desc_Set_Abstract_State>:
{
    uint_8 count;
    UNUSED (controller_ID);

    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   268e0:	2901      	cmp	r1, #1
   268e2:	d80a      	bhi.n	268fa <USB_Desc_Set_Abstract_State+0x1a>
    {
        /* set Abstract State Feature*/
        for(count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
        {
            g_abstract_state[interface][count] = *(*feature_data + count);
   268e4:	6813      	ldr	r3, [r2, #0]
   268e6:	7818      	ldrb	r0, [r3, #0]
   268e8:	4b05      	ldr	r3, [pc, #20]	; (26900 <USB_Desc_Set_Abstract_State+0x20>)
   268ea:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   268ee:	7088      	strb	r0, [r1, #2]
   268f0:	6813      	ldr	r3, [r2, #0]
   268f2:	785b      	ldrb	r3, [r3, #1]
   268f4:	70cb      	strb	r3, [r1, #3]
        }
        return USB_OK;
   268f6:	2000      	movs	r0, #0
   268f8:	4770      	bx	lr
    }

    return USBERR_INVALID_REQ_TYPE;
   268fa:	20cd      	movs	r0, #205	; 0xcd
}
   268fc:	4770      	bx	lr
   268fe:	bf00      	nop
   26900:	1fff5de8 	.word	0x1fff5de8

00026904 <USB_Desc_Set_Country_Setting>:
{
    uint_8 count;
    UNUSED (controller_ID);

    /* if interface valid */
    if(interface < USB_MAX_SUPPORTED_INTERFACES)
   26904:	2901      	cmp	r1, #1
   26906:	d80a      	bhi.n	2691e <USB_Desc_Set_Country_Setting+0x1a>
    {
        for(count = 0; count < COMM_FEATURE_DATA_SIZE; count++)
        {
            g_country_code[interface][count] = *(*feature_data + count);
   26908:	6813      	ldr	r3, [r2, #0]
   2690a:	7818      	ldrb	r0, [r3, #0]
   2690c:	4b05      	ldr	r3, [pc, #20]	; (26924 <USB_Desc_Set_Country_Setting+0x20>)
   2690e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   26912:	7188      	strb	r0, [r1, #6]
   26914:	6813      	ldr	r3, [r2, #0]
   26916:	785b      	ldrb	r3, [r3, #1]
   26918:	71cb      	strb	r3, [r1, #7]
        }
        return USB_OK;
   2691a:	2000      	movs	r0, #0
   2691c:	4770      	bx	lr
    }

    return USBERR_INVALID_REQ_TYPE;
   2691e:	20cd      	movs	r0, #205	; 0xcd
}
   26920:	4770      	bx	lr
   26922:	bf00      	nop
   26924:	1fff5de8 	.word	0x1fff5de8

00026928 <USB_Device_Init_Params>:
 *****************************************************************************/
static void USB_Device_Init_Params(void)
{
    uint_8 loop_index=0;

    g_EPn= g_EPn_max; /* 1 control endpoint */
   26928:	4b09      	ldr	r3, [pc, #36]	; (26950 <USB_Device_Init_Params+0x28>)
   2692a:	785a      	ldrb	r2, [r3, #1]
   2692c:	701a      	strb	r2, [r3, #0]
    {
        #ifdef OTG_BUILD
         if(loop_index != (USB_STATUS_OTG-1)) /* Do not initialize the OTG status with 0xFFFF */
        #endif
         {
          g_usb_component_status[loop_index] = USB_STATUS_UNKNOWN;
   2692e:	22ff      	movs	r2, #255	; 0xff
   26930:	709a      	strb	r2, [r3, #2]
   26932:	70da      	strb	r2, [r3, #3]
   26934:	711a      	strb	r2, [r3, #4]
   26936:	715a      	strb	r2, [r3, #5]
   26938:	719a      	strb	r2, [r3, #6]
   2693a:	71da      	strb	r2, [r3, #7]
   2693c:	721a      	strb	r2, [r3, #8]
    }

    /* Initialize status of All Endpoints to USB_STATUS_DISABLED */
    for(loop_index = 0; loop_index < MAX_SUPPORTED_ENDPOINTS; loop_index++)
    {
        g_usb_ep_status[loop_index] = USB_STATUS_DISABLED;
   2693e:	2205      	movs	r2, #5
   26940:	725a      	strb	r2, [r3, #9]
   26942:	729a      	strb	r2, [r3, #10]
   26944:	72da      	strb	r2, [r3, #11]
   26946:	731a      	strb	r2, [r3, #12]
   26948:	735a      	strb	r2, [r3, #13]
   2694a:	739a      	strb	r2, [r3, #14]
   2694c:	73da      	strb	r2, [r3, #15]
    }
}
   2694e:	4770      	bx	lr
   26950:	1fff5df2 	.word	0x1fff5df2

00026954 <USB_NULL_CALLBACK>:
void USB_NULL_CALLBACK (PTR_USB_DEV_EVENT_STRUCT event)
{
	UNUSED(event);

	#if (defined(__CWCC__) || defined(__IAR_SYSTEMS_ICC__) || defined(__GNUC__))
		asm("nop");
   26954:	bf00      	nop
	#elif defined (__CC_ARM)
		__nop();
	#endif
}
   26956:	4770      	bx	lr

00026958 <_usb_device_init>:
    if((number_of_endpoints > MAX_SUPPORTED_ENDPOINTS) ||
   26958:	3a01      	subs	r2, #1
   2695a:	b2d2      	uxtb	r2, r2
   2695c:	2a06      	cmp	r2, #6
{
   2695e:	b508      	push	{r3, lr}
   26960:	4619      	mov	r1, r3
    if((number_of_endpoints > MAX_SUPPORTED_ENDPOINTS) ||
   26962:	d807      	bhi.n	26974 <_usb_device_init+0x1c>
    g_EPn_max = (uint_8)(number_of_endpoints - 1);
   26964:	4b04      	ldr	r3, [pc, #16]	; (26978 <_usb_device_init+0x20>)
   26966:	705a      	strb	r2, [r3, #1]
    USB_Device_Init_Params();
   26968:	f7ff ffde 	bl	26928 <USB_Device_Init_Params>
}
   2696c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return USB_DCI_Init(device_number, bVregEn);
   26970:	f7ff b9d6 	b.w	25d20 <USB_DCI_Init>
}
   26974:	2099      	movs	r0, #153	; 0x99
   26976:	bd08      	pop	{r3, pc}
   26978:	1fff5df2 	.word	0x1fff5df2

0002697c <_usb_device_deinit>:
	g_EPn_max = 0;
   2697c:	4b02      	ldr	r3, [pc, #8]	; (26988 <_usb_device_deinit+0xc>)
   2697e:	2200      	movs	r2, #0
   26980:	705a      	strb	r2, [r3, #1]
	return USB_DCI_DeInit();
   26982:	f7ff ba3d 	b.w	25e00 <USB_DCI_DeInit>
   26986:	bf00      	nop
   26988:	1fff5df2 	.word	0x1fff5df2

0002698c <_usb_device_init_endpoint>:
{
   2698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if((g_EPn == 0) && (endpoint_number != CONTROL_ENDPOINT))
   2698e:	4c0f      	ldr	r4, [pc, #60]	; (269cc <_usb_device_init_endpoint+0x40>)
   26990:	7825      	ldrb	r5, [r4, #0]
   26992:	b905      	cbnz	r5, 26996 <_usb_device_init_endpoint+0xa>
   26994:	b9c1      	cbnz	r1, 269c8 <_usb_device_init_endpoint+0x3c>
    ep_str.direction = direction;
   26996:	f88d 3002 	strb.w	r3, [sp, #2]
    ep_str.ep_num = endpoint_number;
   2699a:	f88d 1000 	strb.w	r1, [sp]
    ep_str.type = endpoint_type;
   2699e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ep_str.size = max_packet_size;
   269a2:	f8ad 2003 	strh.w	r2, [sp, #3]
    status = USB_DCI_Init_EndPoint(*((uint_8*)handle), &ep_str, flag);
   269a6:	7800      	ldrb	r0, [r0, #0]
   269a8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    ep_str.type = endpoint_type;
   269ac:	f88d 3001 	strb.w	r3, [sp, #1]
    status = USB_DCI_Init_EndPoint(*((uint_8*)handle), &ep_str, flag);
   269b0:	4669      	mov	r1, sp
   269b2:	f7ff fa43 	bl	25e3c <USB_DCI_Init_EndPoint>
    if((ep_str.ep_num != CONTROL_ENDPOINT) && (status == USB_OK))
   269b6:	f89d 3000 	ldrb.w	r3, [sp]
   269ba:	b11b      	cbz	r3, 269c4 <_usb_device_init_endpoint+0x38>
   269bc:	b910      	cbnz	r0, 269c4 <_usb_device_init_endpoint+0x38>
        g_EPn--;
   269be:	7823      	ldrb	r3, [r4, #0]
   269c0:	3b01      	subs	r3, #1
   269c2:	7023      	strb	r3, [r4, #0]
}
   269c4:	b003      	add	sp, #12
   269c6:	bd30      	pop	{r4, r5, pc}
        return USBERR_EP_INIT_FAILED;
   269c8:	2095      	movs	r0, #149	; 0x95
   269ca:	e7fb      	b.n	269c4 <_usb_device_init_endpoint+0x38>
   269cc:	1fff5df2 	.word	0x1fff5df2

000269d0 <_usb_device_deinit_endpoint>:
{
   269d0:	b538      	push	{r3, r4, r5, lr}
    if((g_EPn == g_EPn_max) && (endpoint_number != CONTROL_ENDPOINT))
   269d2:	4b0a      	ldr	r3, [pc, #40]	; (269fc <_usb_device_deinit_endpoint+0x2c>)
{
   269d4:	460d      	mov	r5, r1
    if((g_EPn == g_EPn_max) && (endpoint_number != CONTROL_ENDPOINT))
   269d6:	781c      	ldrb	r4, [r3, #0]
   269d8:	7859      	ldrb	r1, [r3, #1]
   269da:	428c      	cmp	r4, r1
   269dc:	461c      	mov	r4, r3
   269de:	d100      	bne.n	269e2 <_usb_device_deinit_endpoint+0x12>
   269e0:	b94d      	cbnz	r5, 269f6 <_usb_device_deinit_endpoint+0x26>
    status = USB_DCI_Deinit_EndPoint(*((uint_8*)handle), endpoint_number, direction);
   269e2:	7800      	ldrb	r0, [r0, #0]
   269e4:	4629      	mov	r1, r5
   269e6:	f7ff fae1 	bl	25fac <USB_DCI_Deinit_EndPoint>
    if((endpoint_number != CONTROL_ENDPOINT) && (status == USB_OK))
   269ea:	b11d      	cbz	r5, 269f4 <_usb_device_deinit_endpoint+0x24>
   269ec:	b910      	cbnz	r0, 269f4 <_usb_device_deinit_endpoint+0x24>
        g_EPn++;
   269ee:	7823      	ldrb	r3, [r4, #0]
   269f0:	3301      	adds	r3, #1
   269f2:	7023      	strb	r3, [r4, #0]
}
   269f4:	bd38      	pop	{r3, r4, r5, pc}
        return USBERR_EP_DEINIT_FAILED;
   269f6:	2096      	movs	r0, #150	; 0x96
   269f8:	e7fc      	b.n	269f4 <_usb_device_deinit_endpoint+0x24>
   269fa:	bf00      	nop
   269fc:	1fff5df2 	.word	0x1fff5df2

00026a00 <_usb_device_get_status>:
    if((component <= USB_STATUS_TEST_MODE) &&
   26a00:	1e4b      	subs	r3, r1, #1
   26a02:	2b06      	cmp	r3, #6
   26a04:	d805      	bhi.n	26a12 <_usb_device_get_status+0x12>
        *status = g_usb_component_status[component-1];
   26a06:	4b09      	ldr	r3, [pc, #36]	; (26a2c <_usb_device_get_status+0x2c>)
   26a08:	4419      	add	r1, r3
   26a0a:	784b      	ldrb	r3, [r1, #1]
        *status = g_usb_ep_status[ep_num];
   26a0c:	7013      	strb	r3, [r2, #0]
    return USB_OK;
   26a0e:	2000      	movs	r0, #0
        *status = g_usb_ep_status[ep_num];
   26a10:	4770      	bx	lr
    else if((component & USB_STATUS_ENDPOINT) &&
   26a12:	06cb      	lsls	r3, r1, #27
   26a14:	d507      	bpl.n	26a26 <_usb_device_get_status+0x26>
    uint_8 ep_num = (uint_8)(component & USB_STATUS_ENDPOINT_NUMBER_MASK);
   26a16:	f001 010f 	and.w	r1, r1, #15
    else if((component & USB_STATUS_ENDPOINT) &&
   26a1a:	2906      	cmp	r1, #6
   26a1c:	d803      	bhi.n	26a26 <_usb_device_get_status+0x26>
        *status = g_usb_ep_status[ep_num];
   26a1e:	4b03      	ldr	r3, [pc, #12]	; (26a2c <_usb_device_get_status+0x2c>)
   26a20:	4419      	add	r1, r3
   26a22:	7a4b      	ldrb	r3, [r1, #9]
   26a24:	e7f2      	b.n	26a0c <_usb_device_get_status+0xc>
        return USBERR_BAD_STATUS;
   26a26:	2082      	movs	r0, #130	; 0x82
}
   26a28:	4770      	bx	lr
   26a2a:	bf00      	nop
   26a2c:	1fff5df2 	.word	0x1fff5df2

00026a30 <_usb_device_set_status>:
{
   26a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a34:	4616      	mov	r6, r2
    if((component <= USB_STATUS_TEST_MODE) &&
   26a36:	1e4a      	subs	r2, r1, #1
   26a38:	2a06      	cmp	r2, #6
{
   26a3a:	4680      	mov	r8, r0
   26a3c:	460b      	mov	r3, r1
    if((component <= USB_STATUS_TEST_MODE) &&
   26a3e:	d805      	bhi.n	26a4c <_usb_device_set_status+0x1c>
        g_usb_component_status[component-1] = setting;
   26a40:	4916      	ldr	r1, [pc, #88]	; (26a9c <_usb_device_set_status+0x6c>)
   26a42:	440b      	add	r3, r1
   26a44:	705e      	strb	r6, [r3, #1]
    return USB_OK;
   26a46:	2000      	movs	r0, #0
}
   26a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((component & USB_STATUS_ENDPOINT) &&
   26a4c:	06ca      	lsls	r2, r1, #27
   26a4e:	d522      	bpl.n	26a96 <_usb_device_set_status+0x66>
    uint_8 ep_num = (uint_8)(component & USB_STATUS_ENDPOINT_NUMBER_MASK);
   26a50:	f001 050f 	and.w	r5, r1, #15
    else if((component & USB_STATUS_ENDPOINT) &&
   26a54:	2d06      	cmp	r5, #6
   26a56:	d81e      	bhi.n	26a96 <_usb_device_set_status+0x66>
        if(setting == USB_STATUS_STALLED)
   26a58:	2e01      	cmp	r6, #1
   26a5a:	4f10      	ldr	r7, [pc, #64]	; (26a9c <_usb_device_set_status+0x6c>)
        uint_8 direction =
   26a5c:	ea4f 14d1 	mov.w	r4, r1, lsr #7
        if(setting == USB_STATUS_STALLED)
   26a60:	d106      	bne.n	26a70 <_usb_device_set_status+0x40>
        	_usb_device_stall_endpoint(handle, ep_num, direction);
   26a62:	4622      	mov	r2, r4
   26a64:	4629      	mov	r1, r5
   26a66:	f7ff fad3 	bl	26010 <_usb_device_stall_endpoint>
        g_usb_ep_status[ep_num] = setting;
   26a6a:	443d      	add	r5, r7
   26a6c:	726e      	strb	r6, [r5, #9]
   26a6e:	e7ea      	b.n	26a46 <_usb_device_set_status+0x16>
        else if((setting == USB_STATUS_IDLE) &&
   26a70:	2e00      	cmp	r6, #0
   26a72:	d1fa      	bne.n	26a6a <_usb_device_set_status+0x3a>
            (g_usb_ep_status[ep_num] == USB_STATUS_STALLED))
   26a74:	197b      	adds	r3, r7, r5
        else if((setting == USB_STATUS_IDLE) &&
   26a76:	7a5b      	ldrb	r3, [r3, #9]
   26a78:	2b01      	cmp	r3, #1
   26a7a:	d1f6      	bne.n	26a6a <_usb_device_set_status+0x3a>
        	_usb_device_unstall_endpoint(handle, ep_num, direction);
   26a7c:	4622      	mov	r2, r4
   26a7e:	4629      	mov	r1, r5
   26a80:	f7ff fb94 	bl	261ac <_usb_device_unstall_endpoint>
            if(ep_num == CONTROL_ENDPOINT)
   26a84:	2d00      	cmp	r5, #0
   26a86:	d1f0      	bne.n	26a6a <_usb_device_set_status+0x3a>
                _usb_device_unstall_endpoint(handle, ep_num, direction);
   26a88:	f084 0201 	eor.w	r2, r4, #1
   26a8c:	4629      	mov	r1, r5
   26a8e:	4640      	mov	r0, r8
   26a90:	f7ff fb8c 	bl	261ac <_usb_device_unstall_endpoint>
   26a94:	e7e9      	b.n	26a6a <_usb_device_set_status+0x3a>
        return USBERR_BAD_STATUS;
   26a96:	2082      	movs	r0, #130	; 0x82
   26a98:	e7d6      	b.n	26a48 <_usb_device_set_status+0x18>
   26a9a:	bf00      	nop
   26a9c:	1fff5df2 	.word	0x1fff5df2

00026aa0 <_usb_device_register_service>:
}
   26aa0:	2000      	movs	r0, #0
   26aa2:	4770      	bx	lr

00026aa4 <_usb_device_unregister_service>:
    if(((event_endpoint  <= USB_SERVICE_MAX_EP) ||
   26aa4:	2906      	cmp	r1, #6
   26aa6:	d903      	bls.n	26ab0 <_usb_device_unregister_service+0xc>
   26aa8:	f1a1 0310 	sub.w	r3, r1, #16
   26aac:	2b07      	cmp	r3, #7
   26aae:	d807      	bhi.n	26ac0 <_usb_device_unregister_service+0x1c>
       (g_usb_CB[event_endpoint] != NULL))
   26ab0:	4b04      	ldr	r3, [pc, #16]	; (26ac4 <_usb_device_unregister_service+0x20>)
        ((event_endpoint < USB_SERVICE_MAX) && (event_endpoint >= USB_SERVICE_BUS_RESET))) &&
   26ab2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   26ab6:	2b00      	cmp	r3, #0
        return USB_OK;
   26ab8:	bf0c      	ite	eq
   26aba:	20c4      	moveq	r0, #196	; 0xc4
   26abc:	2000      	movne	r0, #0
   26abe:	4770      	bx	lr
        return USBERR_UNKNOWN_ERROR;
   26ac0:	20c4      	movs	r0, #196	; 0xc4
}
   26ac2:	4770      	bx	lr
   26ac4:	0002b184 	.word	0x0002b184

00026ac8 <USB_Device_Call_Service>:
{
   26ac8:	b510      	push	{r4, lr}
   26aca:	4604      	mov	r4, r0
    if(type == USB_SERVICE_BUS_RESET)
   26acc:	2c10      	cmp	r4, #16
{
   26ace:	4608      	mov	r0, r1
    if(type == USB_SERVICE_BUS_RESET)
   26ad0:	d101      	bne.n	26ad6 <USB_Device_Call_Service+0xe>
       USB_Device_Init_Params();
   26ad2:	f7ff ff29 	bl	26928 <USB_Device_Init_Params>
    if(g_usb_CB[type] != NULL)
   26ad6:	4b03      	ldr	r3, [pc, #12]	; (26ae4 <USB_Device_Call_Service+0x1c>)
   26ad8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   26adc:	b103      	cbz	r3, 26ae0 <USB_Device_Call_Service+0x18>
        g_usb_CB[type](event);
   26ade:	4798      	blx	r3
}
   26ae0:	2000      	movs	r0, #0
   26ae2:	bd10      	pop	{r4, pc}
   26ae4:	0002b184 	.word	0x0002b184

00026ae8 <USB_Strd_Req_Sync_Frame>:
    uint_8    controller_ID,            /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,    /* [IN] Setup packet received */
    uint_8_ptr *data,                   /* [OUT] Data to be send back */
    USB_PACKET_SIZE *size               /* [OUT] Size to be returned */
)
{
   26ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26aea:	4614      	mov	r4, r2
    uint_8 status;
	uint_8 device_status;

    UNUSED(setup_packet);
	*size = FRAME_SIZE;
   26aec:	2202      	movs	r2, #2
{
   26aee:	f88d 0007 	strb.w	r0, [sp, #7]
	*size = FRAME_SIZE;
   26af2:	801a      	strh	r2, [r3, #0]

	/* Get the frame number */
	status = _usb_device_get_status(&controller_ID, USB_STATUS_SOF_COUNT,
   26af4:	2105      	movs	r1, #5
   26af6:	f10d 020f 	add.w	r2, sp, #15
   26afa:	f10d 0007 	add.w	r0, sp, #7
   26afe:	f7ff ff7f 	bl	26a00 <_usb_device_get_status>
									&device_status);
	g_std_framework_data = (uint_16)device_status;
   26b02:	4b03      	ldr	r3, [pc, #12]	; (26b10 <USB_Strd_Req_Sync_Frame+0x28>)
   26b04:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26b08:	801a      	strh	r2, [r3, #0]
	*data = (uint_8_ptr)&g_std_framework_data;
   26b0a:	6023      	str	r3, [r4, #0]

	return status;
}
   26b0c:	b004      	add	sp, #16
   26b0e:	bd10      	pop	{r4, pc}
   26b10:	1fff5e04 	.word	0x1fff5e04

00026b14 <USB_Strd_Req_Get_Config>:
{
   26b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26b16:	4614      	mov	r4, r2
    *size = CONFIG_SIZE;
   26b18:	2201      	movs	r2, #1
{
   26b1a:	f88d 0007 	strb.w	r0, [sp, #7]
    *size = CONFIG_SIZE;
   26b1e:	801a      	strh	r2, [r3, #0]
    (void)_usb_device_get_status(&controller_ID, USB_STATUS_CURRENT_CONFIG, &device_status);
   26b20:	2104      	movs	r1, #4
   26b22:	f10d 020f 	add.w	r2, sp, #15
   26b26:	f10d 0007 	add.w	r0, sp, #7
   26b2a:	f7ff ff69 	bl	26a00 <_usb_device_get_status>
    g_std_framework_data = (uint_16)device_status;
   26b2e:	4b04      	ldr	r3, [pc, #16]	; (26b40 <USB_Strd_Req_Get_Config+0x2c>)
   26b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26b34:	801a      	strh	r2, [r3, #0]
}
   26b36:	2000      	movs	r0, #0
    *data = (uint_8_ptr)(&g_std_framework_data);
   26b38:	6023      	str	r3, [r4, #0]
}
   26b3a:	b004      	add	sp, #16
   26b3c:	bd10      	pop	{r4, pc}
   26b3e:	bf00      	nop
   26b40:	1fff5e04 	.word	0x1fff5e04

00026b44 <USB_Strd_Req_Set_Config>:
{
   26b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    *size = 0;
   26b46:	2500      	movs	r5, #0
   26b48:	801d      	strh	r5, [r3, #0]
    config_val = setup_packet->value;
   26b4a:	8849      	ldrh	r1, [r1, #2]
{
   26b4c:	f88d 0007 	strb.w	r0, [sp, #7]
    config_val = setup_packet->value;
   26b50:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(USB_Desc_Valid_Configation(controller_ID, config_val))
   26b54:	f7ff fe72 	bl	2683c <USB_Desc_Valid_Configation>
   26b58:	b310      	cbz	r0, 26ba0 <USB_Strd_Req_Set_Config+0x5c>
        if(!config_val)
   26b5a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        g_framework_callback(controller_ID,USB_APP_CONFIG_CHANGED,
   26b5e:	4e11      	ldr	r6, [pc, #68]	; (26ba4 <USB_Strd_Req_Set_Config+0x60>)
        status = _usb_device_set_status(&controller_ID, USB_STATUS_DEVICE_STATE,
   26b60:	fab2 f282 	clz	r2, r2
   26b64:	0952      	lsrs	r2, r2, #5
   26b66:	2101      	movs	r1, #1
   26b68:	f10d 0007 	add.w	r0, sp, #7
   26b6c:	f7ff ff60 	bl	26a30 <_usb_device_set_status>
        status = _usb_device_set_status(&controller_ID,
   26b70:	f89d 200e 	ldrb.w	r2, [sp, #14]
   26b74:	2104      	movs	r1, #4
   26b76:	f10d 0007 	add.w	r0, sp, #7
   26b7a:	f7ff ff59 	bl	26a30 <_usb_device_set_status>
        g_framework_callback(controller_ID,USB_APP_CONFIG_CHANGED,
   26b7e:	6873      	ldr	r3, [r6, #4]
   26b80:	f10d 020e 	add.w	r2, sp, #14
   26b84:	2101      	movs	r1, #1
        status = _usb_device_set_status(&controller_ID,
   26b86:	4604      	mov	r4, r0
        g_framework_callback(controller_ID,USB_APP_CONFIG_CHANGED,
   26b88:	f89d 0007 	ldrb.w	r0, [sp, #7]
   26b8c:	4798      	blx	r3
        g_framework_callback(controller_ID,USB_APP_ENUM_COMPLETE, NULL);
   26b8e:	6873      	ldr	r3, [r6, #4]
   26b90:	f89d 0007 	ldrb.w	r0, [sp, #7]
   26b94:	462a      	mov	r2, r5
   26b96:	2102      	movs	r1, #2
   26b98:	4798      	blx	r3
 }
   26b9a:	4620      	mov	r0, r4
   26b9c:	b004      	add	sp, #16
   26b9e:	bd70      	pop	{r4, r5, r6, pc}
    status = USB_STATUS_ERROR;
   26ba0:	2404      	movs	r4, #4
   26ba2:	e7fa      	b.n	26b9a <USB_Strd_Req_Set_Config+0x56>
   26ba4:	1fff5e04 	.word	0x1fff5e04

00026ba8 <USB_Strd_Req_Set_Address>:
{
   26ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    *size=0;
   26baa:	2500      	movs	r5, #0
{
   26bac:	460c      	mov	r4, r1
   26bae:	f88d 0007 	strb.w	r0, [sp, #7]
    *size=0;
   26bb2:	801d      	strh	r5, [r3, #0]
    (void)_usb_device_set_status(&controller_ID,
   26bb4:	2204      	movs	r2, #4
   26bb6:	2101      	movs	r1, #1
   26bb8:	f10d 0007 	add.w	r0, sp, #7
   26bbc:	f7ff ff38 	bl	26a30 <_usb_device_set_status>
    g_assigned_address = (uint_8)setup_packet->value;
   26bc0:	8862      	ldrh	r2, [r4, #2]
   26bc2:	4b02      	ldr	r3, [pc, #8]	; (26bcc <USB_Strd_Req_Set_Address+0x24>)
}
   26bc4:	4628      	mov	r0, r5
    g_assigned_address = (uint_8)setup_packet->value;
   26bc6:	721a      	strb	r2, [r3, #8]
}
   26bc8:	b003      	add	sp, #12
   26bca:	bd30      	pop	{r4, r5, pc}
   26bcc:	1fff5e04 	.word	0x1fff5e04

00026bd0 <USB_Strd_Req_Get_Descriptor>:
    uint_8    controller_ID,            /* [IN] Controller ID */
    USB_SETUP_STRUCT * setup_packet,    /* [IN] Setup packet received */
    uint_8_ptr *data,                   /* [OUT] Data to be send back */
    USB_PACKET_SIZE *size               /* [OUT] Size to be returned */
)
{
   26bd0:	b513      	push	{r0, r1, r4, lr}
    uint_8 type = USB_uint_16_high(setup_packet->value);
   26bd2:	884c      	ldrh	r4, [r1, #2]
		index = setup_packet->index;
		/*g_setup_pkt.lValue*/
		str_num = USB_uint_16_low(setup_packet->value);

	/* Call descriptor class to get descriptor */
	status = USB_Desc_Get_Descriptor(controller_ID, type, str_num, index, data, size);
   26bd4:	e9cd 2300 	strd	r2, r3, [sp]
   26bd8:	888b      	ldrh	r3, [r1, #4]
   26bda:	788a      	ldrb	r2, [r1, #2]
   26bdc:	0a21      	lsrs	r1, r4, #8
   26bde:	f7ff fddf 	bl	267a0 <USB_Desc_Get_Descriptor>

	return status;
}
   26be2:	b002      	add	sp, #8
   26be4:	bd10      	pop	{r4, pc}

00026be6 <USB_Strd_Req_Get_Status>:
{
   26be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26bea:	b086      	sub	sp, #24
   26bec:	4688      	mov	r8, r1
   26bee:	461d      	mov	r5, r3
	uint_8_ptr pu8ConfigDesc = NULL;
   26bf0:	2300      	movs	r3, #0
{
   26bf2:	f88d 000f 	strb.w	r0, [sp, #15]
	uint_8_ptr pu8ConfigDesc = NULL;
   26bf6:	9305      	str	r3, [sp, #20]
{
   26bf8:	4616      	mov	r6, r2
    uint_8 device_state = USB_STATE_POWERED;
   26bfa:	2303      	movs	r3, #3
    status = _usb_device_get_status(&controller_ID, USB_STATUS_DEVICE_STATE, &device_state);
   26bfc:	aa04      	add	r2, sp, #16
   26bfe:	2101      	movs	r1, #1
   26c00:	f10d 000f 	add.w	r0, sp, #15
    uint_8 device_state = USB_STATE_POWERED;
   26c04:	f88d 3010 	strb.w	r3, [sp, #16]
    status = _usb_device_get_status(&controller_ID, USB_STATUS_DEVICE_STATE, &device_state);
   26c08:	f7ff fefa 	bl	26a00 <_usb_device_get_status>
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_DEVICE)
   26c0c:	f898 7000 	ldrb.w	r7, [r8]
   26c10:	4c26      	ldr	r4, [pc, #152]	; (26cac <USB_Strd_Req_Get_Status+0xc6>)
   26c12:	f017 0703 	ands.w	r7, r7, #3
   26c16:	d128      	bne.n	26c6a <USB_Strd_Req_Get_Status+0x84>
         status = _usb_device_get_status(&controller_ID, USB_STATUS_DEVICE, &device_state1);
   26c18:	f10d 0211 	add.w	r2, sp, #17
   26c1c:	2106      	movs	r1, #6
   26c1e:	f10d 000f 	add.w	r0, sp, #15
   26c22:	f7ff feed 	bl	26a00 <_usb_device_get_status>
         g_std_framework_data &= GET_STATUS_DEVICE_MASK;
   26c26:	f89d 3011 	ldrb.w	r3, [sp, #17]
         status = USB_Desc_Get_Descriptor(controller_ID, USB_CONFIG_DESCRIPTOR,
   26c2a:	f89d 000f 	ldrb.w	r0, [sp, #15]
         g_std_framework_data &= GET_STATUS_DEVICE_MASK;
   26c2e:	f003 0303 	and.w	r3, r3, #3
   26c32:	8023      	strh	r3, [r4, #0]
         status = USB_Desc_Get_Descriptor(controller_ID, USB_CONFIG_DESCRIPTOR,
   26c34:	f10d 0312 	add.w	r3, sp, #18
   26c38:	9301      	str	r3, [sp, #4]
   26c3a:	ab05      	add	r3, sp, #20
   26c3c:	9300      	str	r3, [sp, #0]
   26c3e:	2102      	movs	r1, #2
   26c40:	463b      	mov	r3, r7
   26c42:	463a      	mov	r2, r7
   26c44:	f7ff fdac 	bl	267a0 <USB_Desc_Get_Descriptor>
		 if((pu8ConfigDesc[7] & SELF_POWERED) != 0)
   26c48:	9b05      	ldr	r3, [sp, #20]
			g_std_framework_data |= BYTE_SWAP16(0x0001);
   26c4a:	8821      	ldrh	r1, [r4, #0]
		 if((pu8ConfigDesc[7] & SELF_POWERED) != 0)
   26c4c:	79db      	ldrb	r3, [r3, #7]
   26c4e:	065b      	lsls	r3, r3, #25
			g_std_framework_data &= BYTE_SWAP16(~0x0001);
   26c50:	bf56      	itet	pl
   26c52:	f021 0101 	bicpl.w	r1, r1, #1
			g_std_framework_data |= BYTE_SWAP16(0x0001);
   26c56:	f041 0101 	orrmi.w	r1, r1, #1
			g_std_framework_data &= BYTE_SWAP16(~0x0001);
   26c5a:	b289      	uxthpl	r1, r1
   26c5c:	8021      	strh	r1, [r4, #0]
			*size = INTERFACE_STATUS_SIZE;
   26c5e:	2302      	movs	r3, #2
   26c60:	802b      	strh	r3, [r5, #0]
    *data = (uint_8_ptr)&g_std_framework_data;
   26c62:	6034      	str	r4, [r6, #0]
}
   26c64:	b006      	add	sp, #24
   26c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_INTERFACE)
   26c6a:	2f01      	cmp	r7, #1
   26c6c:	d109      	bne.n	26c82 <USB_Strd_Req_Get_Status+0x9c>
        if((device_state == USB_STATE_ADDRESS) && (interface > 0))
   26c6e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   26c72:	2b01      	cmp	r3, #1
   26c74:	d102      	bne.n	26c7c <USB_Strd_Req_Get_Status+0x96>
   26c76:	f898 3004 	ldrb.w	r3, [r8, #4]
   26c7a:	b9ab      	cbnz	r3, 26ca8 <USB_Strd_Req_Get_Status+0xc2>
        	g_std_framework_data = 0x0000;
   26c7c:	2300      	movs	r3, #0
   26c7e:	8023      	strh	r3, [r4, #0]
   26c80:	e7ed      	b.n	26c5e <USB_Strd_Req_Get_Status+0x78>
    else if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_ENDPOINT)
   26c82:	2f02      	cmp	r7, #2
   26c84:	d1ed      	bne.n	26c62 <USB_Strd_Req_Get_Status+0x7c>
			endpoint  = (uint_8)(((uint_8) setup_packet->index) |
   26c86:	f898 1004 	ldrb.w	r1, [r8, #4]
			status =  _usb_device_get_status(&controller_ID,
   26c8a:	f10d 0212 	add.w	r2, sp, #18
   26c8e:	f041 0110 	orr.w	r1, r1, #16
   26c92:	f10d 000f 	add.w	r0, sp, #15
   26c96:	f7ff feb3 	bl	26a00 <_usb_device_get_status>
			g_std_framework_data &= 0x0001;  /* LSB is for the HALT feature */
   26c9a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   26c9e:	f003 0301 	and.w	r3, r3, #1
   26ca2:	8023      	strh	r3, [r4, #0]
			*size = ENDP_STATUS_SIZE;
   26ca4:	802f      	strh	r7, [r5, #0]
   26ca6:	e7dc      	b.n	26c62 <USB_Strd_Req_Get_Status+0x7c>
        	 status = USBERR_INVALID_REQ_TYPE;
   26ca8:	20cd      	movs	r0, #205	; 0xcd
   26caa:	e7da      	b.n	26c62 <USB_Strd_Req_Get_Status+0x7c>
   26cac:	1fff5e04 	.word	0x1fff5e04

00026cb0 <USB_Strd_Req_Feature>:
{
   26cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    *size=0;
   26cb2:	2200      	movs	r2, #0
   26cb4:	801a      	strh	r2, [r3, #0]
    set_request = (uint_8)((setup_packet->request & USB_SET_REQUEST_MASK) >> 1 );
   26cb6:	780b      	ldrb	r3, [r1, #0]
   26cb8:	784d      	ldrb	r5, [r1, #1]
{
   26cba:	b085      	sub	sp, #20
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_DEVICE)
   26cbc:	f013 0303 	ands.w	r3, r3, #3
{
   26cc0:	460e      	mov	r6, r1
   26cc2:	f88d 0007 	strb.w	r0, [sp, #7]
    set_request = (uint_8)((setup_packet->request & USB_SET_REQUEST_MASK) >> 1 );
   26cc6:	f3c5 0540 	ubfx	r5, r5, #1, #1
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_DEVICE)
   26cca:	d132      	bne.n	26d32 <USB_Strd_Req_Feature+0x82>
		if(set_request == TRUE)
   26ccc:	884f      	ldrh	r7, [r1, #2]
   26cce:	b1ed      	cbz	r5, 26d0c <USB_Strd_Req_Feature+0x5c>
			if((setup_packet->value == DEVICE_FEATURE_REMOTE_WAKEUP) || (setup_packet->value == DEVICE_FEATURE_TEST_MODE))
   26cd0:	3f01      	subs	r7, #1
   26cd2:	2f01      	cmp	r7, #1
   26cd4:	d850      	bhi.n	26d78 <USB_Strd_Req_Feature+0xc8>
				status = _usb_device_get_status(&controller_ID, USB_STATUS_DEVICE, &device_status);
   26cd6:	f10d 020f 	add.w	r2, sp, #15
   26cda:	2106      	movs	r1, #6
   26cdc:	f10d 0007 	add.w	r0, sp, #7
   26ce0:	f7ff fe8e 	bl	26a00 <_usb_device_get_status>
				if(status == USB_OK)
   26ce4:	4604      	mov	r4, r0
   26ce6:	b970      	cbnz	r0, 26d06 <USB_Strd_Req_Feature+0x56>
					device_status |= (uint_16)(1 << (uint_8)setup_packet->value);
   26ce8:	78b3      	ldrb	r3, [r6, #2]
   26cea:	2201      	movs	r2, #1
   26cec:	409a      	lsls	r2, r3
   26cee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   26cf2:	431a      	orrs	r2, r3
   26cf4:	b2d2      	uxtb	r2, r2
                	status = _usb_device_set_status(&controller_ID, USB_STATUS_DEVICE, device_status);
   26cf6:	2106      	movs	r1, #6
   26cf8:	f10d 0007 	add.w	r0, sp, #7
                	device_status &= (uint_16)~(1 << (uint_8)setup_packet->value);
   26cfc:	f88d 200f 	strb.w	r2, [sp, #15]
                	status = _usb_device_set_status(&controller_ID, USB_STATUS_DEVICE, device_status);
   26d00:	f7ff fe96 	bl	26a30 <_usb_device_set_status>
   26d04:	4604      	mov	r4, r0
}
   26d06:	4620      	mov	r0, r4
   26d08:	b005      	add	sp, #20
   26d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	if(setup_packet->value == DEVICE_FEATURE_REMOTE_WAKEUP)
   26d0c:	2f01      	cmp	r7, #1
   26d0e:	d133      	bne.n	26d78 <USB_Strd_Req_Feature+0xc8>
        		status = _usb_device_get_status(&controller_ID, USB_STATUS_DEVICE, &device_status);
   26d10:	f10d 020f 	add.w	r2, sp, #15
   26d14:	2106      	movs	r1, #6
   26d16:	f10d 0007 	add.w	r0, sp, #7
   26d1a:	f7ff fe71 	bl	26a00 <_usb_device_get_status>
                if(status == USB_OK)
   26d1e:	4604      	mov	r4, r0
   26d20:	2800      	cmp	r0, #0
   26d22:	d1f0      	bne.n	26d06 <USB_Strd_Req_Feature+0x56>
                	device_status &= (uint_16)~(1 << (uint_8)setup_packet->value);
   26d24:	78b2      	ldrb	r2, [r6, #2]
   26d26:	4097      	lsls	r7, r2
   26d28:	f89d 200f 	ldrb.w	r2, [sp, #15]
   26d2c:	ea22 0207 	bic.w	r2, r2, r7
   26d30:	e7e1      	b.n	26cf6 <USB_Strd_Req_Feature+0x46>
    else if((setup_packet->request_type & USB_REQUEST_SRC_MASK) == USB_REQUEST_SRC_ENDPOINT)
   26d32:	2b02      	cmp	r3, #2
   26d34:	d120      	bne.n	26d78 <USB_Strd_Req_Feature+0xc8>
        epinfo = (uint_8)(setup_packet->index & 0x00FF);
   26d36:	7909      	ldrb	r1, [r1, #4]
   26d38:	f88d 100f 	strb.w	r1, [sp, #15]
	    status = _usb_device_set_status(&controller_ID, (uint_8)(epinfo|USB_STATUS_ENDPOINT), set_request);
   26d3c:	462a      	mov	r2, r5
   26d3e:	f041 0110 	orr.w	r1, r1, #16
   26d42:	f10d 0007 	add.w	r0, sp, #7
   26d46:	f7ff fe73 	bl	26a30 <_usb_device_set_status>
	    if(setup_packet->request == CLEAR_FEATURE)
   26d4a:	7873      	ldrb	r3, [r6, #1]
	    event = (uint_8)(set_request ? USB_APP_EP_STALLED : USB_APP_EP_UNSTALLED);
   26d4c:	f1c5 0508 	rsb	r5, r5, #8
	    if(setup_packet->request == CLEAR_FEATURE)
   26d50:	2b01      	cmp	r3, #1
	    status = _usb_device_set_status(&controller_ID, (uint_8)(epinfo|USB_STATUS_ENDPOINT), set_request);
   26d52:	4604      	mov	r4, r0
	    event = (uint_8)(set_request ? USB_APP_EP_STALLED : USB_APP_EP_UNSTALLED);
   26d54:	b2e9      	uxtb	r1, r5
	    if(setup_packet->request == CLEAR_FEATURE)
   26d56:	d107      	bne.n	26d68 <USB_Strd_Req_Feature+0xb8>
	         uint_8  epnum = epinfo & 0x0F;
   26d58:	f89d 000f 	ldrb.w	r0, [sp, #15]
	         _usb_device_clear_data0_endpoint(epnum,dir);
   26d5c:	09c1      	lsrs	r1, r0, #7
   26d5e:	f000 000f 	and.w	r0, r0, #15
   26d62:	f7ff f9c1 	bl	260e8 <_usb_device_clear_data0_endpoint>
	         event = USB_APP_EP_UNSTALLED;  // as far as the application is concerned, this is an UNSTALL.
   26d66:	2108      	movs	r1, #8
        g_framework_callback(controller_ID,event,(void*)&epinfo);
   26d68:	4b04      	ldr	r3, [pc, #16]	; (26d7c <USB_Strd_Req_Feature+0xcc>)
   26d6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   26d6e:	685b      	ldr	r3, [r3, #4]
   26d70:	f10d 020f 	add.w	r2, sp, #15
   26d74:	4798      	blx	r3
   26d76:	e7c6      	b.n	26d06 <USB_Strd_Req_Feature+0x56>
               status = USBERR_INVALID_REQ_TYPE;
   26d78:	24cd      	movs	r4, #205	; 0xcd
   26d7a:	e7c4      	b.n	26d06 <USB_Strd_Req_Feature+0x56>
   26d7c:	1fff5e04 	.word	0x1fff5e04

00026d80 <USB_Strd_Req_Set_Interface>:
{
   26d80:	b510      	push	{r4, lr}
    *size=0;
   26d82:	2400      	movs	r4, #0
   26d84:	801c      	strh	r4, [r3, #0]
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) != USB_REQUEST_SRC_INTERFACE)
   26d86:	780b      	ldrb	r3, [r1, #0]
   26d88:	f003 0303 	and.w	r3, r3, #3
   26d8c:	2b01      	cmp	r3, #1
   26d8e:	d105      	bne.n	26d9c <USB_Strd_Req_Set_Interface+0x1c>
    	status = USB_Desc_Set_Interface(controller_ID,(uint_8)setup_packet->index,
   26d90:	788a      	ldrb	r2, [r1, #2]
   26d92:	7909      	ldrb	r1, [r1, #4]
   26d94:	f7ff fd48 	bl	26828 <USB_Desc_Set_Interface>
   26d98:	4620      	mov	r0, r4
}
   26d9a:	bd10      	pop	{r4, pc}
        return USB_STATUS_ERROR;
   26d9c:	2004      	movs	r0, #4
   26d9e:	e7fc      	b.n	26d9a <USB_Strd_Req_Set_Interface+0x1a>

00026da0 <USB_Strd_Req_Get_Interface>:
{
   26da0:	b538      	push	{r3, r4, r5, lr}
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) != USB_REQUEST_SRC_INTERFACE)
   26da2:	780c      	ldrb	r4, [r1, #0]
   26da4:	f004 0403 	and.w	r4, r4, #3
   26da8:	2c01      	cmp	r4, #1
{
   26daa:	4615      	mov	r5, r2
    if((setup_packet->request_type & USB_REQUEST_SRC_MASK) != USB_REQUEST_SRC_INTERFACE)
   26dac:	d107      	bne.n	26dbe <USB_Strd_Req_Get_Interface+0x1e>
    	*size = INTERFACE_SIZE;
   26dae:	801c      	strh	r4, [r3, #0]
		status = USB_Desc_Get_Interface(controller_ID,(uint_8)setup_packet->index,
   26db0:	4c04      	ldr	r4, [pc, #16]	; (26dc4 <USB_Strd_Req_Get_Interface+0x24>)
   26db2:	7909      	ldrb	r1, [r1, #4]
   26db4:	4622      	mov	r2, r4
   26db6:	f7ff fd2b 	bl	26810 <USB_Desc_Get_Interface>
		*data = (uint_8_ptr)&g_std_framework_data;
   26dba:	602c      	str	r4, [r5, #0]
}
   26dbc:	bd38      	pop	{r3, r4, r5, pc}
        return USB_STATUS_ERROR;
   26dbe:	2004      	movs	r0, #4
   26dc0:	e7fc      	b.n	26dbc <USB_Strd_Req_Get_Interface+0x1c>
   26dc2:	bf00      	nop
   26dc4:	1fff5e04 	.word	0x1fff5e04

00026dc8 <USB_Control_Service_Handler.constprop.0>:
static void USB_Control_Service_Handler (
   26dc8:	b513      	push	{r0, r1, r4, lr}
    if(status == USBERR_INVALID_REQ_TYPE)
   26dca:	29cd      	cmp	r1, #205	; 0xcd
static void USB_Control_Service_Handler (
   26dcc:	f88d 0007 	strb.w	r0, [sp, #7]
    if(status == USBERR_INVALID_REQ_TYPE)
   26dd0:	d107      	bne.n	26de2 <USB_Control_Service_Handler.constprop.0+0x1a>
        (void)_usb_device_set_status(&controller_ID,
   26dd2:	2201      	movs	r2, #1
   26dd4:	2190      	movs	r1, #144	; 0x90
   26dd6:	f10d 0007 	add.w	r0, sp, #7
   26dda:	f7ff fe29 	bl	26a30 <_usb_device_set_status>
}
   26dde:	b002      	add	sp, #8
   26de0:	bd10      	pop	{r4, pc}
        if(*size > setup_packet->length)
   26de2:	490d      	ldr	r1, [pc, #52]	; (26e18 <USB_Control_Service_Handler.constprop.0+0x50>)
   26de4:	881c      	ldrh	r4, [r3, #0]
   26de6:	8a08      	ldrh	r0, [r1, #16]
        (void)USB_Class_Send_Data(controller_ID,
   26de8:	6812      	ldr	r2, [r2, #0]
        if(*size > setup_packet->length)
   26dea:	4284      	cmp	r4, r0
            *size = (USB_PACKET_SIZE)setup_packet->length;
   26dec:	bf88      	it	hi
   26dee:	8018      	strhhi	r0, [r3, #0]
   26df0:	460c      	mov	r4, r1
        (void)USB_Class_Send_Data(controller_ID,
   26df2:	881b      	ldrh	r3, [r3, #0]
   26df4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   26df8:	2100      	movs	r1, #0
   26dfa:	f7fe ff61 	bl	25cc0 <USB_Class_Send_Data>
        if((setup_packet->request_type & USB_DATA_DIREC_MASK) ==
   26dfe:	f994 300a 	ldrsb.w	r3, [r4, #10]
   26e02:	2b00      	cmp	r3, #0
   26e04:	daeb      	bge.n	26dde <USB_Control_Service_Handler.constprop.0+0x16>
            (void)_usb_device_recv_data(&controller_ID,
   26e06:	2300      	movs	r3, #0
   26e08:	461a      	mov	r2, r3
   26e0a:	4619      	mov	r1, r3
   26e0c:	f10d 0007 	add.w	r0, sp, #7
   26e10:	f7ff f97e 	bl	26110 <_usb_device_recv_data>
    return;
   26e14:	e7e3      	b.n	26dde <USB_Control_Service_Handler.constprop.0+0x16>
   26e16:	bf00      	nop
   26e18:	1fff5e04 	.word	0x1fff5e04

00026e1c <USB_Control_Service>:
{
   26e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26e1e:	4605      	mov	r5, r0
    uint_8    device_state = 0;
   26e20:	2600      	movs	r6, #0
    (void)_usb_device_get_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   26e22:	466a      	mov	r2, sp
   26e24:	2101      	movs	r1, #1
    uint_8    device_state = 0;
   26e26:	f88d 6000 	strb.w	r6, [sp]
    uint_8_ptr data = NULL;
   26e2a:	9601      	str	r6, [sp, #4]
    (void)_usb_device_get_status(&(event->controller_ID), USB_STATUS_DEVICE_STATE,
   26e2c:	f7ff fde8 	bl	26a00 <_usb_device_get_status>
    if(event->setup == TRUE)
   26e30:	78aa      	ldrb	r2, [r5, #2]
   26e32:	4c42      	ldr	r4, [pc, #264]	; (26f3c <USB_Control_Service+0x120>)
   26e34:	2a01      	cmp	r2, #1
   26e36:	d152      	bne.n	26ede <USB_Control_Service+0xc2>
        (void)memcpy(&g_setup_pkt, event->buffer_ptr, USB_SETUP_PKT_SIZE);
   26e38:	6868      	ldr	r0, [r5, #4]
   26e3a:	6803      	ldr	r3, [r0, #0]
   26e3c:	f8c4 300a 	str.w	r3, [r4, #10]
   26e40:	6843      	ldr	r3, [r0, #4]
        if((g_setup_pkt.request_type & USB_REQUEST_CLASS_MASK) ==
   26e42:	7aa0      	ldrb	r0, [r4, #10]
        (void)memcpy(&g_setup_pkt, event->buffer_ptr, USB_SETUP_PKT_SIZE);
   26e44:	f8c4 300e 	str.w	r3, [r4, #14]
        if((g_setup_pkt.request_type & USB_REQUEST_CLASS_MASK) ==
   26e48:	f010 0f60 	tst.w	r0, #96	; 0x60
        (void)memcpy(&g_setup_pkt, event->buffer_ptr, USB_SETUP_PKT_SIZE);
   26e4c:	f104 010a 	add.w	r1, r4, #10
        if((g_setup_pkt.request_type & USB_REQUEST_CLASS_MASK) ==
   26e50:	d11e      	bne.n	26e90 <USB_Control_Service+0x74>
            if(g_standard_request[g_setup_pkt.request] != NULL)
   26e52:	7ae2      	ldrb	r2, [r4, #11]
   26e54:	4b3a      	ldr	r3, [pc, #232]	; (26f40 <USB_Control_Service+0x124>)
   26e56:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   26e5a:	2c00      	cmp	r4, #0
   26e5c:	d06c      	beq.n	26f38 <USB_Control_Service+0x11c>
                if((device_state < USB_STATE_POWERED) &&
   26e5e:	f89d 0000 	ldrb.w	r0, [sp]
   26e62:	2802      	cmp	r0, #2
   26e64:	d868      	bhi.n	26f38 <USB_Control_Service+0x11c>
                    (g_validate_request[g_setup_pkt.request][device_state]
   26e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26e6a:	4413      	add	r3, r2
   26e6c:	4403      	add	r3, r0
                if((device_state < USB_STATE_POWERED) &&
   26e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
   26e72:	2b01      	cmp	r3, #1
   26e74:	d160      	bne.n	26f38 <USB_Control_Service+0x11c>
                    status = g_standard_request[g_setup_pkt.request]
   26e76:	f10d 0302 	add.w	r3, sp, #2
   26e7a:	aa01      	add	r2, sp, #4
                status = g_other_req_callback(event->controller_ID,
   26e7c:	7828      	ldrb	r0, [r5, #0]
   26e7e:	47a0      	blx	r4
   26e80:	4601      	mov	r1, r0
        USB_Control_Service_Handler(event->controller_ID,
   26e82:	7828      	ldrb	r0, [r5, #0]
   26e84:	f10d 0302 	add.w	r3, sp, #2
   26e88:	aa01      	add	r2, sp, #4
   26e8a:	f7ff ff9d 	bl	26dc8 <USB_Control_Service_Handler.constprop.0>
   26e8e:	e013      	b.n	26eb8 <USB_Control_Service+0x9c>
        g_setup_pkt.length = BYTE_SWAP16(g_setup_pkt.length);
   26e90:	8a23      	ldrh	r3, [r4, #16]
            size = (USB_PACKET_SIZE)g_setup_pkt.length;
   26e92:	f8ad 3002 	strh.w	r3, [sp, #2]
            if(size <= USB_OUT_PKT_SIZE) {
   26e96:	2b20      	cmp	r3, #32
   26e98:	d818      	bhi.n	26ecc <USB_Control_Service+0xb0>
            if( (size != 0) &&
   26e9a:	b17b      	cbz	r3, 26ebc <USB_Control_Service+0xa0>
   26e9c:	0602      	lsls	r2, r0, #24
   26e9e:	d40d      	bmi.n	26ebc <USB_Control_Service+0xa0>
                (void)memcpy(&ext_req_to_host_setup, &g_setup_pkt, USB_SETUP_PKT_SIZE);
   26ea0:	680a      	ldr	r2, [r1, #0]
   26ea2:	f8c4 2012 	str.w	r2, [r4, #18]
   26ea6:	684a      	ldr	r2, [r1, #4]
   26ea8:	f8c4 2016 	str.w	r2, [r4, #22]
                (void)_usb_device_recv_data(&(event->controller_ID),
   26eac:	4631      	mov	r1, r6
   26eae:	f104 021a 	add.w	r2, r4, #26
   26eb2:	4628      	mov	r0, r5
   26eb4:	f7ff f92c 	bl	26110 <_usb_device_recv_data>
}
   26eb8:	b002      	add	sp, #8
   26eba:	bd70      	pop	{r4, r5, r6, pc}
            else if(g_other_req_callback != NULL)/*call class/vendor request*/
   26ebc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   26ebe:	2c00      	cmp	r4, #0
   26ec0:	d03a      	beq.n	26f38 <USB_Control_Service+0x11c>
                status = g_other_req_callback(event->controller_ID,
   26ec2:	4920      	ldr	r1, [pc, #128]	; (26f44 <USB_Control_Service+0x128>)
   26ec4:	f10d 0302 	add.w	r3, sp, #2
   26ec8:	aa01      	add	r2, sp, #4
   26eca:	e7d7      	b.n	26e7c <USB_Control_Service+0x60>
                USB_Control_Service_Handler(event->controller_ID,
   26ecc:	782b      	ldrb	r3, [r5, #0]
   26ece:	f88d 3001 	strb.w	r3, [sp, #1]
        (void)_usb_device_set_status(&controller_ID,
   26ed2:	2190      	movs	r1, #144	; 0x90
   26ed4:	f10d 0001 	add.w	r0, sp, #1
    (void)_usb_device_set_status(&controller_ID, USB_STATUS_ADDRESS,
   26ed8:	f7ff fdaa 	bl	26a30 <_usb_device_set_status>
        return;
   26edc:	e7ec      	b.n	26eb8 <USB_Control_Service+0x9c>
    else if(device_state == USB_STATE_PENDING_ADDRESS)
   26ede:	f89d 3000 	ldrb.w	r3, [sp]
   26ee2:	2b04      	cmp	r3, #4
   26ee4:	d112      	bne.n	26f0c <USB_Control_Service+0xf0>
        (void)USB_Strd_Req_Assign_Address(event->controller_ID);
   26ee6:	782b      	ldrb	r3, [r5, #0]
    (void)_usb_device_set_address(&controller_ID, g_assigned_address);
   26ee8:	7a21      	ldrb	r1, [r4, #8]
   26eea:	f88d 3002 	strb.w	r3, [sp, #2]
   26eee:	f10d 0002 	add.w	r0, sp, #2
   26ef2:	f7ff f9df 	bl	262b4 <_usb_device_set_address>
    (void)_usb_device_set_status(&controller_ID,
   26ef6:	2201      	movs	r2, #1
   26ef8:	4611      	mov	r1, r2
   26efa:	f10d 0002 	add.w	r0, sp, #2
   26efe:	f7ff fd97 	bl	26a30 <_usb_device_set_status>
    (void)_usb_device_set_status(&controller_ID, USB_STATUS_ADDRESS,
   26f02:	7a22      	ldrb	r2, [r4, #8]
   26f04:	2103      	movs	r1, #3
   26f06:	f10d 0002 	add.w	r0, sp, #2
   26f0a:	e7e5      	b.n	26ed8 <USB_Control_Service+0xbc>
    else if( ((g_setup_pkt.request_type &
   26f0c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   26f10:	2b00      	cmp	r3, #0
   26f12:	dbd1      	blt.n	26eb8 <USB_Control_Service+0x9c>
            USB_DATA_DIREC_MASK) == USB_DATA_TO_DEVICE) &&
   26f14:	78eb      	ldrb	r3, [r5, #3]
   26f16:	2b00      	cmp	r3, #0
   26f18:	d1ce      	bne.n	26eb8 <USB_Control_Service+0x9c>
        if(g_other_req_callback != NULL)
   26f1a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   26f1c:	b166      	cbz	r6, 26f38 <USB_Control_Service+0x11c>
            size = (USB_PACKET_SIZE)(event->len + USB_SETUP_PKT_SIZE);
   26f1e:	f8b5 3009 	ldrh.w	r3, [r5, #9]
            status = g_other_req_callback(event->controller_ID,
   26f22:	7828      	ldrb	r0, [r5, #0]
            size = (USB_PACKET_SIZE)(event->len + USB_SETUP_PKT_SIZE);
   26f24:	3308      	adds	r3, #8
   26f26:	f8ad 3002 	strh.w	r3, [sp, #2]
            status = g_other_req_callback(event->controller_ID,
   26f2a:	aa01      	add	r2, sp, #4
   26f2c:	f10d 0302 	add.w	r3, sp, #2
   26f30:	f104 0112 	add.w	r1, r4, #18
   26f34:	47b0      	blx	r6
   26f36:	e7a3      	b.n	26e80 <USB_Control_Service+0x64>
    uint_8     status = USBERR_INVALID_REQ_TYPE;
   26f38:	21cd      	movs	r1, #205	; 0xcd
   26f3a:	e7a2      	b.n	26e82 <USB_Control_Service+0x66>
   26f3c:	1fff5e04 	.word	0x1fff5e04
   26f40:	0002b1e4 	.word	0x0002b1e4
   26f44:	1fff5e0e 	.word	0x1fff5e0e

00026f48 <USB_Framework_Init>:
    g_framework_callback = class_callback;
   26f48:	4b03      	ldr	r3, [pc, #12]	; (26f58 <USB_Framework_Init+0x10>)
   26f4a:	6059      	str	r1, [r3, #4]
    g_other_req_callback = other_req_callback;
   26f4c:	63da      	str	r2, [r3, #60]	; 0x3c
    error = _usb_device_register_service(controller_ID, USB_SERVICE_EP0,
   26f4e:	2100      	movs	r1, #0
   26f50:	4a02      	ldr	r2, [pc, #8]	; (26f5c <USB_Framework_Init+0x14>)
   26f52:	f7ff bda5 	b.w	26aa0 <_usb_device_register_service>
   26f56:	bf00      	nop
   26f58:	1fff5e04 	.word	0x1fff5e04
   26f5c:	00026e1d 	.word	0x00026e1d

00026f60 <USB_Framework_DeInit>:
{
   26f60:	b507      	push	{r0, r1, r2, lr}
    g_framework_callback = NULL;
   26f62:	4b06      	ldr	r3, [pc, #24]	; (26f7c <USB_Framework_DeInit+0x1c>)
{
   26f64:	f88d 0007 	strb.w	r0, [sp, #7]
    g_framework_callback = NULL;
   26f68:	2100      	movs	r1, #0
    error = _usb_device_unregister_service(&controller_ID, USB_SERVICE_EP0);
   26f6a:	f10d 0007 	add.w	r0, sp, #7
    g_framework_callback = NULL;
   26f6e:	6059      	str	r1, [r3, #4]
    g_other_req_callback = NULL;
   26f70:	63d9      	str	r1, [r3, #60]	; 0x3c
    error = _usb_device_unregister_service(&controller_ID, USB_SERVICE_EP0);
   26f72:	f7ff fd97 	bl	26aa4 <_usb_device_unregister_service>
}
   26f76:	b003      	add	sp, #12
   26f78:	f85d fb04 	ldr.w	pc, [sp], #4
   26f7c:	1fff5e04 	.word	0x1fff5e04

00026f80 <USB_Framework_Reset>:
}
   26f80:	2000      	movs	r0, #0
   26f82:	4770      	bx	lr

00026f84 <USB0_Init>:
*/
extern uint8 g_Mem[];
void USB0_Init(void)
{
  /* SIM_CLKDIV2: USBDIV=1,USBFRAC=0 */
  SIM_CLKDIV2 = (uint32)((SIM_CLKDIV2 & (uint32)~(uint32)(
   26f84:	4b35      	ldr	r3, [pc, #212]	; (2705c <USB0_Init+0xd8>)
   26f86:	f241 0148 	movw	r1, #4168	; 0x1048
   26f8a:	585a      	ldr	r2, [r3, r1]
   26f8c:	f022 020f 	bic.w	r2, r2, #15
   26f90:	f042 0202 	orr.w	r2, r2, #2
   26f94:	505a      	str	r2, [r3, r1]
                 SIM_CLKDIV2_USBFRAC_MASK
                )) | (uint32)(
                 SIM_CLKDIV2_USBDIV(0x01)
                ));
  /* SIM_SOPT2: USBSRC=1 */
  SIM_SOPT2 |= SIM_SOPT2_USBSRC_MASK;
   26f96:	f241 0104 	movw	r1, #4100	; 0x1004
   26f9a:	585a      	ldr	r2, [r3, r1]
   26f9c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   26fa0:	505a      	str	r2, [r3, r1]
  /* SIM_SCGC4: USBOTG=1 */
  SIM_SCGC4 |= SIM_SCGC4_USBOTG_MASK;
   26fa2:	f241 0134 	movw	r1, #4148	; 0x1034
   26fa6:	585a      	ldr	r2, [r3, r1]
   26fa8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   26fac:	505a      	str	r2, [r3, r1]
  /* USB0_CTL: ODDRST=1 */
  USB0_CTL |= USB_CTL_ODDRST_MASK;
   26fae:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
               USB_INTEN_ERROREN_MASK |
               USB_INTEN_USBRSTEN_MASK;
  /* USB0_ERREN: BTSERREN=0,??=0,DMAERREN=0,BTOERREN=0,DFN8EN=0,CRC16EN=0,CRC5EOFEN=0,PIDERREN=0 */
  USB0_ERREN = 0x00U;
  /* USB0_USBTRC0: USBRESET=0,??=1,USBRESMEN=1,??=0,??=0,??=0,SYNC_DET=0,USB_RESUME_INT=0 */
  USB0_USBTRC0 = (USB_USBTRC0_USBRESMEN_MASK | 0x40U);
   26fb2:	2160      	movs	r1, #96	; 0x60
  USB0_CTL |= USB_CTL_ODDRST_MASK;
   26fb4:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
   26fb8:	f042 0202 	orr.w	r2, r2, #2
   26fbc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  USB0_USBCTRL = (USB_USBCTRL_SUSP_MASK | USB_USBCTRL_PDE_MASK);
   26fc0:	22c0      	movs	r2, #192	; 0xc0
   26fc2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  USB0_OTGISTAT = USB_OTGISTAT_IDCHG_MASK |
   26fc6:	22ff      	movs	r2, #255	; 0xff
   26fc8:	741a      	strb	r2, [r3, #16]
  USB0_ISTAT = USB_ISTAT_STALL_MASK |
   26fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  USB0_ERRSTAT = USB_ERRSTAT_BTSERR_MASK |
   26fce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  USB0_INTEN = USB_INTEN_STALLEN_MASK |
   26fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  USB0_ERREN = 0x00U;
   26fd6:	2200      	movs	r2, #0
   26fd8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  USB0_USBTRC0 = (USB_USBTRC0_USBRESMEN_MASK | 0x40U);
   26fdc:	f883 110c 	strb.w	r1, [r3, #268]	; 0x10c
  USB0_ENDPT13 = 0x00U;
  /* USB0_ENDPT14: HOSTWOHUB=0,RETRYDIS=0,??=0,EPCTLDIS=0,EPRXEN=0,EPTXEN=0,EPSTALL=0,EPHSHK=0 */
  USB0_ENDPT14 = 0x00U;
  /* USB0_ENDPT15: HOSTWOHUB=0,RETRYDIS=0,??=0,EPCTLDIS=0,EPRXEN=0,EPTXEN=0,EPSTALL=0,EPHSHK=0 */
  USB0_ENDPT15 = 0x00U;
  USB0_BDTPAGE1 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x08) & 0xFEU);
   26fe0:	491f      	ldr	r1, [pc, #124]	; (27060 <USB0_Init+0xdc>)
  USB0_OTGICR = 0x00U;
   26fe2:	751a      	strb	r2, [r3, #20]
  USB0_BDTPAGE1 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x08) & 0xFEU);
   26fe4:	0a08      	lsrs	r0, r1, #8
   26fe6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  USB0_ADDR = USB_ADDR_ADDR(0x00);
   26fea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  USB0_ENDPT0 = 0x00U;
   26fee:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  USB0_ENDPT1 = 0x00U;
   26ff2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
  USB0_ENDPT2 = 0x00U;
   26ff6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  USB0_ENDPT3 = 0x00U;
   26ffa:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  USB0_ENDPT4 = 0x00U;
   26ffe:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  USB0_ENDPT5 = 0x00U;
   27002:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  USB0_ENDPT6 = 0x00U;
   27006:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  USB0_ENDPT7 = 0x00U;
   2700a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  USB0_ENDPT8 = 0x00U;
   2700e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  USB0_ENDPT9 = 0x00U;
   27012:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
  USB0_ENDPT10 = 0x00U;
   27016:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
  USB0_ENDPT11 = 0x00U;
   2701a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  USB0_ENDPT12 = 0x00U;
   2701e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  USB0_ENDPT13 = 0x00U;
   27022:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  USB0_ENDPT14 = 0x00U;
   27026:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  USB0_ENDPT15 = 0x00U;
   2702a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  USB0_BDTPAGE1 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x08) & 0xFEU);
   2702e:	f883 009c 	strb.w	r0, [r3, #156]	; 0x9c
  USB0_BDTPAGE2 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x10) & 0xFFU);
   27032:	f3c1 4007 	ubfx	r0, r1, #16, #8
  USB0_BDTPAGE3 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x18) & 0xFFU);
   27036:	0e09      	lsrs	r1, r1, #24
  USB0_BDTPAGE2 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x10) & 0xFFU);
   27038:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
  USB0_BDTPAGE3 = (uint8)((((uint32)((uint32)&g_Mem[0])) >> 0x18) & 0xFFU);
   2703c:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
  /* USB0_SOFTHLD: CNT=0 */
  USB0_SOFTHLD = USB_SOFTHLD_CNT(0x00);
   27040:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  /* USB0_OTGCTL: DPHIGH=0,??=0,DPLOW=0,DMLOW=0,??=0,OTGEN=0,??=0,??=0 */
  USB0_OTGCTL = 0x00U;
   27044:	771a      	strb	r2, [r3, #28]
  /* USB0_CONTROL: ??=0,??=0,??=0,DPPULLUPNONOTG=0,??=0,??=0,??=0,??=0 */
  USB0_CONTROL = 0x00U;
   27046:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  /* USB0_CTL: TXSUSPENDTOKENBUSY=0,HOSTMODEEN=0,ODDRST=0,USBENSOFEN=1 */
  USB0_CTL = (uint8)((USB0_CTL & (uint8)~(uint8)(
   2704a:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
              USB_CTL_TXSUSPENDTOKENBUSY_MASK |
              USB_CTL_HOSTMODEEN_MASK |
              USB_CTL_ODDRST_MASK
             )) | (uint8)(
   2704e:	f002 02d4 	and.w	r2, r2, #212	; 0xd4
  USB0_CTL = (uint8)((USB0_CTL & (uint8)~(uint8)(
   27052:	f042 0201 	orr.w	r2, r2, #1
   27056:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              USB_CTL_USBENSOFEN_MASK
             ));
}
   2705a:	4770      	bx	lr
   2705c:	40047000 	.word	0x40047000
   27060:	1fff6800 	.word	0x1fff6800

00027064 <USB1_usb_int_dis>:
** ===================================================================
*/
void USB1_usb_int_dis(void)
{
  /* Kinetis K20D72 */
  NVICISER1 = (1<<9);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
   27064:	4b02      	ldr	r3, [pc, #8]	; (27070 <USB1_usb_int_dis+0xc>)
   27066:	f44f 7200 	mov.w	r2, #512	; 0x200
   2706a:	605a      	str	r2, [r3, #4]
}
   2706c:	4770      	bx	lr
   2706e:	bf00      	nop
   27070:	e000e100 	.word	0xe000e100

00027074 <USB1_usb_int_en>:
** ===================================================================
*/
void USB1_usb_int_en(void)
{
  /* Kinetis K20D72 */
  NVICICPR2 = (1<<9);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
   27074:	4b03      	ldr	r3, [pc, #12]	; (27084 <USB1_usb_int_en+0x10>)
   27076:	f44f 7200 	mov.w	r2, #512	; 0x200
   2707a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  NVICISER2 = (1<<9);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
   2707e:	609a      	str	r2, [r3, #8]
}
   27080:	4770      	bx	lr
   27082:	bf00      	nop
   27084:	e000e100 	.word	0xe000e100

00027088 <USB1_Init>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
byte USB1_Init(void)
{
   27088:	b508      	push	{r3, lr}
  byte err;

  /* Initialize the USB interface */
  err = CDC1_Init();
   2708a:	f7fe f99a 	bl	253c2 <CDC1_Init>
  if(err != ERR_OK) {
   2708e:	b910      	cbnz	r0, 27096 <USB1_Init+0xe>
    /* Error initializing USB Class */
    return ERR_FAILED;
  }
  USB1_usb_int_en();
   27090:	f7ff fff0 	bl	27074 <USB1_usb_int_en>
  return ERR_OK;
}
   27094:	bd08      	pop	{r3, pc}
    return ERR_FAILED;
   27096:	201b      	movs	r0, #27
   27098:	e7fc      	b.n	27094 <USB1_Init+0xc>
   2709a:	bf00      	nop

0002709c <Watchdog_Reset>:
void Watchdog_Reset(void)
{
#if defined(MCU_MKL25Z4) || defined(MCU_MKL26Z4) || defined(MCU_MKL46Z4)
	(void)(RCM_SRS0 |= RCM_SRS0_WDOG_MASK);
#else
	(void)(WDOG_REFRESH = 0xA602, WDOG_REFRESH = 0xB480);
   2709c:	4b03      	ldr	r3, [pc, #12]	; (270ac <Watchdog_Reset+0x10>)
   2709e:	f24a 6202 	movw	r2, #42498	; 0xa602
   270a2:	819a      	strh	r2, [r3, #12]
   270a4:	f24b 4280 	movw	r2, #46208	; 0xb480
   270a8:	819a      	strh	r2, [r3, #12]
#endif
}
   270aa:	4770      	bx	lr
   270ac:	40052000 	.word	0x40052000
	...
   270c0:	eba2 0003 	sub.w	r0, r2, r3
   270c4:	4770      	bx	lr
   270c6:	bf00      	nop

000270c8 <strcmp>:
   270c8:	7802      	ldrb	r2, [r0, #0]
   270ca:	780b      	ldrb	r3, [r1, #0]
   270cc:	2a01      	cmp	r2, #1
   270ce:	bf28      	it	cs
   270d0:	429a      	cmpcs	r2, r3
   270d2:	d1f5      	bne.n	270c0 <Watchdog_Reset+0x24>
   270d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   270d8:	ea40 0401 	orr.w	r4, r0, r1
   270dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   270e0:	f06f 0c00 	mvn.w	ip, #0
   270e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   270e8:	b312      	cbz	r2, 27130 <strcmp+0x68>
   270ea:	ea80 0401 	eor.w	r4, r0, r1
   270ee:	f014 0f07 	tst.w	r4, #7
   270f2:	d16a      	bne.n	271ca <strcmp+0x102>
   270f4:	f000 0407 	and.w	r4, r0, #7
   270f8:	f020 0007 	bic.w	r0, r0, #7
   270fc:	f004 0503 	and.w	r5, r4, #3
   27100:	f021 0107 	bic.w	r1, r1, #7
   27104:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   27108:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   2710c:	f014 0f04 	tst.w	r4, #4
   27110:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   27114:	fa0c f405 	lsl.w	r4, ip, r5
   27118:	ea62 0204 	orn	r2, r2, r4
   2711c:	ea66 0604 	orn	r6, r6, r4
   27120:	d00a      	beq.n	27138 <strcmp+0x70>
   27122:	ea63 0304 	orn	r3, r3, r4
   27126:	4662      	mov	r2, ip
   27128:	ea67 0704 	orn	r7, r7, r4
   2712c:	4666      	mov	r6, ip
   2712e:	e003      	b.n	27138 <strcmp+0x70>
   27130:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   27134:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   27138:	fa82 f54c 	uadd8	r5, r2, ip
   2713c:	ea82 0406 	eor.w	r4, r2, r6
   27140:	faa4 f48c 	sel	r4, r4, ip
   27144:	bb6c      	cbnz	r4, 271a2 <strcmp+0xda>
   27146:	fa83 f54c 	uadd8	r5, r3, ip
   2714a:	ea83 0507 	eor.w	r5, r3, r7
   2714e:	faa5 f58c 	sel	r5, r5, ip
   27152:	b995      	cbnz	r5, 2717a <strcmp+0xb2>
   27154:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   27158:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   2715c:	fa82 f54c 	uadd8	r5, r2, ip
   27160:	ea82 0406 	eor.w	r4, r2, r6
   27164:	faa4 f48c 	sel	r4, r4, ip
   27168:	fa83 f54c 	uadd8	r5, r3, ip
   2716c:	ea83 0507 	eor.w	r5, r3, r7
   27170:	faa5 f58c 	sel	r5, r5, ip
   27174:	4325      	orrs	r5, r4
   27176:	d0db      	beq.n	27130 <strcmp+0x68>
   27178:	b99c      	cbnz	r4, 271a2 <strcmp+0xda>
   2717a:	ba2d      	rev	r5, r5
   2717c:	fab5 f485 	clz	r4, r5
   27180:	f024 0407 	bic.w	r4, r4, #7
   27184:	fa27 f104 	lsr.w	r1, r7, r4
   27188:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   2718c:	fa23 f304 	lsr.w	r3, r3, r4
   27190:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   27194:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   27198:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   2719c:	eba0 0001 	sub.w	r0, r0, r1
   271a0:	4770      	bx	lr
   271a2:	ba24      	rev	r4, r4
   271a4:	fab4 f484 	clz	r4, r4
   271a8:	f024 0407 	bic.w	r4, r4, #7
   271ac:	fa26 f104 	lsr.w	r1, r6, r4
   271b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   271b4:	fa22 f204 	lsr.w	r2, r2, r4
   271b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   271bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   271c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   271c4:	eba0 0001 	sub.w	r0, r0, r1
   271c8:	4770      	bx	lr
   271ca:	f014 0f03 	tst.w	r4, #3
   271ce:	d13c      	bne.n	2724a <strcmp+0x182>
   271d0:	f010 0403 	ands.w	r4, r0, #3
   271d4:	d128      	bne.n	27228 <strcmp+0x160>
   271d6:	f850 2b08 	ldr.w	r2, [r0], #8
   271da:	f851 3b08 	ldr.w	r3, [r1], #8
   271de:	fa82 f54c 	uadd8	r5, r2, ip
   271e2:	ea82 0503 	eor.w	r5, r2, r3
   271e6:	faa5 f58c 	sel	r5, r5, ip
   271ea:	b95d      	cbnz	r5, 27204 <strcmp+0x13c>
   271ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   271f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   271f4:	fa82 f54c 	uadd8	r5, r2, ip
   271f8:	ea82 0503 	eor.w	r5, r2, r3
   271fc:	faa5 f58c 	sel	r5, r5, ip
   27200:	2d00      	cmp	r5, #0
   27202:	d0e8      	beq.n	271d6 <strcmp+0x10e>
   27204:	ba2d      	rev	r5, r5
   27206:	fab5 f485 	clz	r4, r5
   2720a:	f024 0407 	bic.w	r4, r4, #7
   2720e:	fa23 f104 	lsr.w	r1, r3, r4
   27212:	fa22 f204 	lsr.w	r2, r2, r4
   27216:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   2721a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2721e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   27222:	eba0 0001 	sub.w	r0, r0, r1
   27226:	4770      	bx	lr
   27228:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   2722c:	f020 0003 	bic.w	r0, r0, #3
   27230:	f850 2b08 	ldr.w	r2, [r0], #8
   27234:	f021 0103 	bic.w	r1, r1, #3
   27238:	f851 3b08 	ldr.w	r3, [r1], #8
   2723c:	fa0c f404 	lsl.w	r4, ip, r4
   27240:	ea62 0204 	orn	r2, r2, r4
   27244:	ea63 0304 	orn	r3, r3, r4
   27248:	e7c9      	b.n	271de <strcmp+0x116>
   2724a:	f010 0403 	ands.w	r4, r0, #3
   2724e:	d01a      	beq.n	27286 <strcmp+0x1be>
   27250:	eba1 0104 	sub.w	r1, r1, r4
   27254:	f020 0003 	bic.w	r0, r0, #3
   27258:	07e4      	lsls	r4, r4, #31
   2725a:	f850 2b04 	ldr.w	r2, [r0], #4
   2725e:	d006      	beq.n	2726e <strcmp+0x1a6>
   27260:	d20f      	bcs.n	27282 <strcmp+0x1ba>
   27262:	788b      	ldrb	r3, [r1, #2]
   27264:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   27268:	1ae4      	subs	r4, r4, r3
   2726a:	d106      	bne.n	2727a <strcmp+0x1b2>
   2726c:	b12b      	cbz	r3, 2727a <strcmp+0x1b2>
   2726e:	78cb      	ldrb	r3, [r1, #3]
   27270:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   27274:	1ae4      	subs	r4, r4, r3
   27276:	d100      	bne.n	2727a <strcmp+0x1b2>
   27278:	b91b      	cbnz	r3, 27282 <strcmp+0x1ba>
   2727a:	4620      	mov	r0, r4
   2727c:	f85d 4b10 	ldr.w	r4, [sp], #16
   27280:	4770      	bx	lr
   27282:	f101 0104 	add.w	r1, r1, #4
   27286:	f850 2b04 	ldr.w	r2, [r0], #4
   2728a:	07cc      	lsls	r4, r1, #31
   2728c:	f021 0103 	bic.w	r1, r1, #3
   27290:	f851 3b04 	ldr.w	r3, [r1], #4
   27294:	d848      	bhi.n	27328 <strcmp+0x260>
   27296:	d224      	bcs.n	272e2 <strcmp+0x21a>
   27298:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   2729c:	fa82 f54c 	uadd8	r5, r2, ip
   272a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   272a4:	faa5 f58c 	sel	r5, r5, ip
   272a8:	d10a      	bne.n	272c0 <strcmp+0x1f8>
   272aa:	b965      	cbnz	r5, 272c6 <strcmp+0x1fe>
   272ac:	f851 3b04 	ldr.w	r3, [r1], #4
   272b0:	ea84 0402 	eor.w	r4, r4, r2
   272b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   272b8:	d10e      	bne.n	272d8 <strcmp+0x210>
   272ba:	f850 2b04 	ldr.w	r2, [r0], #4
   272be:	e7eb      	b.n	27298 <strcmp+0x1d0>
   272c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   272c4:	e055      	b.n	27372 <strcmp+0x2aa>
   272c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   272ca:	d14d      	bne.n	27368 <strcmp+0x2a0>
   272cc:	7808      	ldrb	r0, [r1, #0]
   272ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   272d2:	f1c0 0000 	rsb	r0, r0, #0
   272d6:	4770      	bx	lr
   272d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   272dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   272e0:	e047      	b.n	27372 <strcmp+0x2aa>
   272e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   272e6:	fa82 f54c 	uadd8	r5, r2, ip
   272ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   272ee:	faa5 f58c 	sel	r5, r5, ip
   272f2:	d10a      	bne.n	2730a <strcmp+0x242>
   272f4:	b965      	cbnz	r5, 27310 <strcmp+0x248>
   272f6:	f851 3b04 	ldr.w	r3, [r1], #4
   272fa:	ea84 0402 	eor.w	r4, r4, r2
   272fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   27302:	d10c      	bne.n	2731e <strcmp+0x256>
   27304:	f850 2b04 	ldr.w	r2, [r0], #4
   27308:	e7eb      	b.n	272e2 <strcmp+0x21a>
   2730a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2730e:	e030      	b.n	27372 <strcmp+0x2aa>
   27310:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   27314:	d128      	bne.n	27368 <strcmp+0x2a0>
   27316:	880b      	ldrh	r3, [r1, #0]
   27318:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2731c:	e029      	b.n	27372 <strcmp+0x2aa>
   2731e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   27322:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   27326:	e024      	b.n	27372 <strcmp+0x2aa>
   27328:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   2732c:	fa82 f54c 	uadd8	r5, r2, ip
   27330:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   27334:	faa5 f58c 	sel	r5, r5, ip
   27338:	d10a      	bne.n	27350 <strcmp+0x288>
   2733a:	b965      	cbnz	r5, 27356 <strcmp+0x28e>
   2733c:	f851 3b04 	ldr.w	r3, [r1], #4
   27340:	ea84 0402 	eor.w	r4, r4, r2
   27344:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   27348:	d109      	bne.n	2735e <strcmp+0x296>
   2734a:	f850 2b04 	ldr.w	r2, [r0], #4
   2734e:	e7eb      	b.n	27328 <strcmp+0x260>
   27350:	ea4f 6313 	mov.w	r3, r3, lsr #24
   27354:	e00d      	b.n	27372 <strcmp+0x2aa>
   27356:	f015 0fff 	tst.w	r5, #255	; 0xff
   2735a:	d105      	bne.n	27368 <strcmp+0x2a0>
   2735c:	680b      	ldr	r3, [r1, #0]
   2735e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   27362:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   27366:	e004      	b.n	27372 <strcmp+0x2aa>
   27368:	f04f 0000 	mov.w	r0, #0
   2736c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   27370:	4770      	bx	lr
   27372:	ba12      	rev	r2, r2
   27374:	ba1b      	rev	r3, r3
   27376:	fa82 f44c 	uadd8	r4, r2, ip
   2737a:	ea82 0403 	eor.w	r4, r2, r3
   2737e:	faa4 f58c 	sel	r5, r4, ip
   27382:	fab5 f485 	clz	r4, r5
   27386:	fa02 f204 	lsl.w	r2, r2, r4
   2738a:	fa03 f304 	lsl.w	r3, r3, r4
   2738e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   27392:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   27396:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   2739a:	4770      	bx	lr

0002739c <__aeabi_frsub>:
   2739c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   273a0:	e002      	b.n	273a8 <__addsf3>
   273a2:	bf00      	nop

000273a4 <__aeabi_fsub>:
   273a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000273a8 <__addsf3>:
   273a8:	0042      	lsls	r2, r0, #1
   273aa:	bf1f      	itttt	ne
   273ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   273b0:	ea92 0f03 	teqne	r2, r3
   273b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   273b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   273bc:	d06a      	beq.n	27494 <__addsf3+0xec>
   273be:	ea4f 6212 	mov.w	r2, r2, lsr #24
   273c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   273c6:	bfc1      	itttt	gt
   273c8:	18d2      	addgt	r2, r2, r3
   273ca:	4041      	eorgt	r1, r0
   273cc:	4048      	eorgt	r0, r1
   273ce:	4041      	eorgt	r1, r0
   273d0:	bfb8      	it	lt
   273d2:	425b      	neglt	r3, r3
   273d4:	2b19      	cmp	r3, #25
   273d6:	bf88      	it	hi
   273d8:	4770      	bxhi	lr
   273da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   273de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   273e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   273e6:	bf18      	it	ne
   273e8:	4240      	negne	r0, r0
   273ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   273ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   273f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   273f6:	bf18      	it	ne
   273f8:	4249      	negne	r1, r1
   273fa:	ea92 0f03 	teq	r2, r3
   273fe:	d03f      	beq.n	27480 <__addsf3+0xd8>
   27400:	f1a2 0201 	sub.w	r2, r2, #1
   27404:	fa41 fc03 	asr.w	ip, r1, r3
   27408:	eb10 000c 	adds.w	r0, r0, ip
   2740c:	f1c3 0320 	rsb	r3, r3, #32
   27410:	fa01 f103 	lsl.w	r1, r1, r3
   27414:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   27418:	d502      	bpl.n	27420 <__addsf3+0x78>
   2741a:	4249      	negs	r1, r1
   2741c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   27420:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   27424:	d313      	bcc.n	2744e <__addsf3+0xa6>
   27426:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   2742a:	d306      	bcc.n	2743a <__addsf3+0x92>
   2742c:	0840      	lsrs	r0, r0, #1
   2742e:	ea4f 0131 	mov.w	r1, r1, rrx
   27432:	f102 0201 	add.w	r2, r2, #1
   27436:	2afe      	cmp	r2, #254	; 0xfe
   27438:	d251      	bcs.n	274de <__addsf3+0x136>
   2743a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   2743e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   27442:	bf08      	it	eq
   27444:	f020 0001 	biceq.w	r0, r0, #1
   27448:	ea40 0003 	orr.w	r0, r0, r3
   2744c:	4770      	bx	lr
   2744e:	0049      	lsls	r1, r1, #1
   27450:	eb40 0000 	adc.w	r0, r0, r0
   27454:	3a01      	subs	r2, #1
   27456:	bf28      	it	cs
   27458:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   2745c:	d2ed      	bcs.n	2743a <__addsf3+0x92>
   2745e:	fab0 fc80 	clz	ip, r0
   27462:	f1ac 0c08 	sub.w	ip, ip, #8
   27466:	ebb2 020c 	subs.w	r2, r2, ip
   2746a:	fa00 f00c 	lsl.w	r0, r0, ip
   2746e:	bfaa      	itet	ge
   27470:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   27474:	4252      	neglt	r2, r2
   27476:	4318      	orrge	r0, r3
   27478:	bfbc      	itt	lt
   2747a:	40d0      	lsrlt	r0, r2
   2747c:	4318      	orrlt	r0, r3
   2747e:	4770      	bx	lr
   27480:	f092 0f00 	teq	r2, #0
   27484:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   27488:	bf06      	itte	eq
   2748a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   2748e:	3201      	addeq	r2, #1
   27490:	3b01      	subne	r3, #1
   27492:	e7b5      	b.n	27400 <__addsf3+0x58>
   27494:	ea4f 0341 	mov.w	r3, r1, lsl #1
   27498:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   2749c:	bf18      	it	ne
   2749e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   274a2:	d021      	beq.n	274e8 <__addsf3+0x140>
   274a4:	ea92 0f03 	teq	r2, r3
   274a8:	d004      	beq.n	274b4 <__addsf3+0x10c>
   274aa:	f092 0f00 	teq	r2, #0
   274ae:	bf08      	it	eq
   274b0:	4608      	moveq	r0, r1
   274b2:	4770      	bx	lr
   274b4:	ea90 0f01 	teq	r0, r1
   274b8:	bf1c      	itt	ne
   274ba:	2000      	movne	r0, #0
   274bc:	4770      	bxne	lr
   274be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   274c2:	d104      	bne.n	274ce <__addsf3+0x126>
   274c4:	0040      	lsls	r0, r0, #1
   274c6:	bf28      	it	cs
   274c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   274cc:	4770      	bx	lr
   274ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   274d2:	bf3c      	itt	cc
   274d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   274d8:	4770      	bxcc	lr
   274da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   274de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   274e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   274e6:	4770      	bx	lr
   274e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   274ec:	bf16      	itet	ne
   274ee:	4608      	movne	r0, r1
   274f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   274f4:	4601      	movne	r1, r0
   274f6:	0242      	lsls	r2, r0, #9
   274f8:	bf06      	itte	eq
   274fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   274fe:	ea90 0f01 	teqeq	r0, r1
   27502:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   27506:	4770      	bx	lr

00027508 <__aeabi_ui2f>:
   27508:	f04f 0300 	mov.w	r3, #0
   2750c:	e004      	b.n	27518 <__aeabi_i2f+0x8>
   2750e:	bf00      	nop

00027510 <__aeabi_i2f>:
   27510:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   27514:	bf48      	it	mi
   27516:	4240      	negmi	r0, r0
   27518:	ea5f 0c00 	movs.w	ip, r0
   2751c:	bf08      	it	eq
   2751e:	4770      	bxeq	lr
   27520:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   27524:	4601      	mov	r1, r0
   27526:	f04f 0000 	mov.w	r0, #0
   2752a:	e01c      	b.n	27566 <__aeabi_l2f+0x2a>

0002752c <__aeabi_ul2f>:
   2752c:	ea50 0201 	orrs.w	r2, r0, r1
   27530:	bf08      	it	eq
   27532:	4770      	bxeq	lr
   27534:	f04f 0300 	mov.w	r3, #0
   27538:	e00a      	b.n	27550 <__aeabi_l2f+0x14>
   2753a:	bf00      	nop

0002753c <__aeabi_l2f>:
   2753c:	ea50 0201 	orrs.w	r2, r0, r1
   27540:	bf08      	it	eq
   27542:	4770      	bxeq	lr
   27544:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   27548:	d502      	bpl.n	27550 <__aeabi_l2f+0x14>
   2754a:	4240      	negs	r0, r0
   2754c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27550:	ea5f 0c01 	movs.w	ip, r1
   27554:	bf02      	ittt	eq
   27556:	4684      	moveq	ip, r0
   27558:	4601      	moveq	r1, r0
   2755a:	2000      	moveq	r0, #0
   2755c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   27560:	bf08      	it	eq
   27562:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   27566:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   2756a:	fabc f28c 	clz	r2, ip
   2756e:	3a08      	subs	r2, #8
   27570:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   27574:	db10      	blt.n	27598 <__aeabi_l2f+0x5c>
   27576:	fa01 fc02 	lsl.w	ip, r1, r2
   2757a:	4463      	add	r3, ip
   2757c:	fa00 fc02 	lsl.w	ip, r0, r2
   27580:	f1c2 0220 	rsb	r2, r2, #32
   27584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   27588:	fa20 f202 	lsr.w	r2, r0, r2
   2758c:	eb43 0002 	adc.w	r0, r3, r2
   27590:	bf08      	it	eq
   27592:	f020 0001 	biceq.w	r0, r0, #1
   27596:	4770      	bx	lr
   27598:	f102 0220 	add.w	r2, r2, #32
   2759c:	fa01 fc02 	lsl.w	ip, r1, r2
   275a0:	f1c2 0220 	rsb	r2, r2, #32
   275a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   275a8:	fa21 f202 	lsr.w	r2, r1, r2
   275ac:	eb43 0002 	adc.w	r0, r3, r2
   275b0:	bf08      	it	eq
   275b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   275b6:	4770      	bx	lr

000275b8 <__aeabi_fmul>:
   275b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   275bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   275c0:	bf1e      	ittt	ne
   275c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   275c6:	ea92 0f0c 	teqne	r2, ip
   275ca:	ea93 0f0c 	teqne	r3, ip
   275ce:	d06f      	beq.n	276b0 <__aeabi_fmul+0xf8>
   275d0:	441a      	add	r2, r3
   275d2:	ea80 0c01 	eor.w	ip, r0, r1
   275d6:	0240      	lsls	r0, r0, #9
   275d8:	bf18      	it	ne
   275da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   275de:	d01e      	beq.n	2761e <__aeabi_fmul+0x66>
   275e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   275e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   275e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   275ec:	fba0 3101 	umull	r3, r1, r0, r1
   275f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   275f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   275f8:	bf3e      	ittt	cc
   275fa:	0049      	lslcc	r1, r1, #1
   275fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   27600:	005b      	lslcc	r3, r3, #1
   27602:	ea40 0001 	orr.w	r0, r0, r1
   27606:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   2760a:	2afd      	cmp	r2, #253	; 0xfd
   2760c:	d81d      	bhi.n	2764a <__aeabi_fmul+0x92>
   2760e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27612:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   27616:	bf08      	it	eq
   27618:	f020 0001 	biceq.w	r0, r0, #1
   2761c:	4770      	bx	lr
   2761e:	f090 0f00 	teq	r0, #0
   27622:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   27626:	bf08      	it	eq
   27628:	0249      	lsleq	r1, r1, #9
   2762a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   2762e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   27632:	3a7f      	subs	r2, #127	; 0x7f
   27634:	bfc2      	ittt	gt
   27636:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   2763a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   2763e:	4770      	bxgt	lr
   27640:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   27644:	f04f 0300 	mov.w	r3, #0
   27648:	3a01      	subs	r2, #1
   2764a:	dc5d      	bgt.n	27708 <__aeabi_fmul+0x150>
   2764c:	f112 0f19 	cmn.w	r2, #25
   27650:	bfdc      	itt	le
   27652:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   27656:	4770      	bxle	lr
   27658:	f1c2 0200 	rsb	r2, r2, #0
   2765c:	0041      	lsls	r1, r0, #1
   2765e:	fa21 f102 	lsr.w	r1, r1, r2
   27662:	f1c2 0220 	rsb	r2, r2, #32
   27666:	fa00 fc02 	lsl.w	ip, r0, r2
   2766a:	ea5f 0031 	movs.w	r0, r1, rrx
   2766e:	f140 0000 	adc.w	r0, r0, #0
   27672:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   27676:	bf08      	it	eq
   27678:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   2767c:	4770      	bx	lr
   2767e:	f092 0f00 	teq	r2, #0
   27682:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   27686:	bf02      	ittt	eq
   27688:	0040      	lsleq	r0, r0, #1
   2768a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   2768e:	3a01      	subeq	r2, #1
   27690:	d0f9      	beq.n	27686 <__aeabi_fmul+0xce>
   27692:	ea40 000c 	orr.w	r0, r0, ip
   27696:	f093 0f00 	teq	r3, #0
   2769a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   2769e:	bf02      	ittt	eq
   276a0:	0049      	lsleq	r1, r1, #1
   276a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   276a6:	3b01      	subeq	r3, #1
   276a8:	d0f9      	beq.n	2769e <__aeabi_fmul+0xe6>
   276aa:	ea41 010c 	orr.w	r1, r1, ip
   276ae:	e78f      	b.n	275d0 <__aeabi_fmul+0x18>
   276b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   276b4:	ea92 0f0c 	teq	r2, ip
   276b8:	bf18      	it	ne
   276ba:	ea93 0f0c 	teqne	r3, ip
   276be:	d00a      	beq.n	276d6 <__aeabi_fmul+0x11e>
   276c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   276c4:	bf18      	it	ne
   276c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   276ca:	d1d8      	bne.n	2767e <__aeabi_fmul+0xc6>
   276cc:	ea80 0001 	eor.w	r0, r0, r1
   276d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   276d4:	4770      	bx	lr
   276d6:	f090 0f00 	teq	r0, #0
   276da:	bf17      	itett	ne
   276dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   276e0:	4608      	moveq	r0, r1
   276e2:	f091 0f00 	teqne	r1, #0
   276e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   276ea:	d014      	beq.n	27716 <__aeabi_fmul+0x15e>
   276ec:	ea92 0f0c 	teq	r2, ip
   276f0:	d101      	bne.n	276f6 <__aeabi_fmul+0x13e>
   276f2:	0242      	lsls	r2, r0, #9
   276f4:	d10f      	bne.n	27716 <__aeabi_fmul+0x15e>
   276f6:	ea93 0f0c 	teq	r3, ip
   276fa:	d103      	bne.n	27704 <__aeabi_fmul+0x14c>
   276fc:	024b      	lsls	r3, r1, #9
   276fe:	bf18      	it	ne
   27700:	4608      	movne	r0, r1
   27702:	d108      	bne.n	27716 <__aeabi_fmul+0x15e>
   27704:	ea80 0001 	eor.w	r0, r0, r1
   27708:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   2770c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   27710:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   27714:	4770      	bx	lr
   27716:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   2771a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   2771e:	4770      	bx	lr

00027720 <__aeabi_fdiv>:
   27720:	f04f 0cff 	mov.w	ip, #255	; 0xff
   27724:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   27728:	bf1e      	ittt	ne
   2772a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   2772e:	ea92 0f0c 	teqne	r2, ip
   27732:	ea93 0f0c 	teqne	r3, ip
   27736:	d069      	beq.n	2780c <__aeabi_fdiv+0xec>
   27738:	eba2 0203 	sub.w	r2, r2, r3
   2773c:	ea80 0c01 	eor.w	ip, r0, r1
   27740:	0249      	lsls	r1, r1, #9
   27742:	ea4f 2040 	mov.w	r0, r0, lsl #9
   27746:	d037      	beq.n	277b8 <__aeabi_fdiv+0x98>
   27748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2774c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   27750:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   27754:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   27758:	428b      	cmp	r3, r1
   2775a:	bf38      	it	cc
   2775c:	005b      	lslcc	r3, r3, #1
   2775e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   27762:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   27766:	428b      	cmp	r3, r1
   27768:	bf24      	itt	cs
   2776a:	1a5b      	subcs	r3, r3, r1
   2776c:	ea40 000c 	orrcs.w	r0, r0, ip
   27770:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   27774:	bf24      	itt	cs
   27776:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   2777a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   2777e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   27782:	bf24      	itt	cs
   27784:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   27788:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   2778c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   27790:	bf24      	itt	cs
   27792:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   27796:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   2779a:	011b      	lsls	r3, r3, #4
   2779c:	bf18      	it	ne
   2779e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   277a2:	d1e0      	bne.n	27766 <__aeabi_fdiv+0x46>
   277a4:	2afd      	cmp	r2, #253	; 0xfd
   277a6:	f63f af50 	bhi.w	2764a <__aeabi_fmul+0x92>
   277aa:	428b      	cmp	r3, r1
   277ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   277b0:	bf08      	it	eq
   277b2:	f020 0001 	biceq.w	r0, r0, #1
   277b6:	4770      	bx	lr
   277b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   277bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   277c0:	327f      	adds	r2, #127	; 0x7f
   277c2:	bfc2      	ittt	gt
   277c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   277c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   277cc:	4770      	bxgt	lr
   277ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   277d2:	f04f 0300 	mov.w	r3, #0
   277d6:	3a01      	subs	r2, #1
   277d8:	e737      	b.n	2764a <__aeabi_fmul+0x92>
   277da:	f092 0f00 	teq	r2, #0
   277de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   277e2:	bf02      	ittt	eq
   277e4:	0040      	lsleq	r0, r0, #1
   277e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   277ea:	3a01      	subeq	r2, #1
   277ec:	d0f9      	beq.n	277e2 <__aeabi_fdiv+0xc2>
   277ee:	ea40 000c 	orr.w	r0, r0, ip
   277f2:	f093 0f00 	teq	r3, #0
   277f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   277fa:	bf02      	ittt	eq
   277fc:	0049      	lsleq	r1, r1, #1
   277fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   27802:	3b01      	subeq	r3, #1
   27804:	d0f9      	beq.n	277fa <__aeabi_fdiv+0xda>
   27806:	ea41 010c 	orr.w	r1, r1, ip
   2780a:	e795      	b.n	27738 <__aeabi_fdiv+0x18>
   2780c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   27810:	ea92 0f0c 	teq	r2, ip
   27814:	d108      	bne.n	27828 <__aeabi_fdiv+0x108>
   27816:	0242      	lsls	r2, r0, #9
   27818:	f47f af7d 	bne.w	27716 <__aeabi_fmul+0x15e>
   2781c:	ea93 0f0c 	teq	r3, ip
   27820:	f47f af70 	bne.w	27704 <__aeabi_fmul+0x14c>
   27824:	4608      	mov	r0, r1
   27826:	e776      	b.n	27716 <__aeabi_fmul+0x15e>
   27828:	ea93 0f0c 	teq	r3, ip
   2782c:	d104      	bne.n	27838 <__aeabi_fdiv+0x118>
   2782e:	024b      	lsls	r3, r1, #9
   27830:	f43f af4c 	beq.w	276cc <__aeabi_fmul+0x114>
   27834:	4608      	mov	r0, r1
   27836:	e76e      	b.n	27716 <__aeabi_fmul+0x15e>
   27838:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   2783c:	bf18      	it	ne
   2783e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   27842:	d1ca      	bne.n	277da <__aeabi_fdiv+0xba>
   27844:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   27848:	f47f af5c 	bne.w	27704 <__aeabi_fmul+0x14c>
   2784c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   27850:	f47f af3c 	bne.w	276cc <__aeabi_fmul+0x114>
   27854:	e75f      	b.n	27716 <__aeabi_fmul+0x15e>
   27856:	bf00      	nop

00027858 <__aeabi_f2iz>:
   27858:	ea4f 0240 	mov.w	r2, r0, lsl #1
   2785c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   27860:	d30f      	bcc.n	27882 <__aeabi_f2iz+0x2a>
   27862:	f04f 039e 	mov.w	r3, #158	; 0x9e
   27866:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   2786a:	d90d      	bls.n	27888 <__aeabi_f2iz+0x30>
   2786c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   27870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   27874:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   27878:	fa23 f002 	lsr.w	r0, r3, r2
   2787c:	bf18      	it	ne
   2787e:	4240      	negne	r0, r0
   27880:	4770      	bx	lr
   27882:	f04f 0000 	mov.w	r0, #0
   27886:	4770      	bx	lr
   27888:	f112 0f61 	cmn.w	r2, #97	; 0x61
   2788c:	d101      	bne.n	27892 <__aeabi_f2iz+0x3a>
   2788e:	0242      	lsls	r2, r0, #9
   27890:	d105      	bne.n	2789e <__aeabi_f2iz+0x46>
   27892:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   27896:	bf08      	it	eq
   27898:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   2789c:	4770      	bx	lr
   2789e:	f04f 0000 	mov.w	r0, #0
   278a2:	4770      	bx	lr

000278a4 <__aeabi_f2uiz>:
   278a4:	0042      	lsls	r2, r0, #1
   278a6:	d20e      	bcs.n	278c6 <__aeabi_f2uiz+0x22>
   278a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   278ac:	d30b      	bcc.n	278c6 <__aeabi_f2uiz+0x22>
   278ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
   278b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   278b6:	d409      	bmi.n	278cc <__aeabi_f2uiz+0x28>
   278b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   278bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   278c0:	fa23 f002 	lsr.w	r0, r3, r2
   278c4:	4770      	bx	lr
   278c6:	f04f 0000 	mov.w	r0, #0
   278ca:	4770      	bx	lr
   278cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   278d0:	d101      	bne.n	278d6 <__aeabi_f2uiz+0x32>
   278d2:	0242      	lsls	r2, r0, #9
   278d4:	d102      	bne.n	278dc <__aeabi_f2uiz+0x38>
   278d6:	f04f 30ff 	mov.w	r0, #4294967295
   278da:	4770      	bx	lr
   278dc:	f04f 0000 	mov.w	r0, #0
   278e0:	4770      	bx	lr
   278e2:	bf00      	nop

000278e4 <__aeabi_ldivmod>:
   278e4:	b97b      	cbnz	r3, 27906 <__aeabi_ldivmod+0x22>
   278e6:	b972      	cbnz	r2, 27906 <__aeabi_ldivmod+0x22>
   278e8:	2900      	cmp	r1, #0
   278ea:	bfbe      	ittt	lt
   278ec:	2000      	movlt	r0, #0
   278ee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   278f2:	e006      	blt.n	27902 <__aeabi_ldivmod+0x1e>
   278f4:	bf08      	it	eq
   278f6:	2800      	cmpeq	r0, #0
   278f8:	bf1c      	itt	ne
   278fa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   278fe:	f04f 30ff 	movne.w	r0, #4294967295
   27902:	f000 b99f 	b.w	27c44 <__aeabi_idiv0>
   27906:	f1ad 0c08 	sub.w	ip, sp, #8
   2790a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2790e:	2900      	cmp	r1, #0
   27910:	db09      	blt.n	27926 <__aeabi_ldivmod+0x42>
   27912:	2b00      	cmp	r3, #0
   27914:	db1a      	blt.n	2794c <__aeabi_ldivmod+0x68>
   27916:	f000 f835 	bl	27984 <__udivmoddi4>
   2791a:	f8dd e004 	ldr.w	lr, [sp, #4]
   2791e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27922:	b004      	add	sp, #16
   27924:	4770      	bx	lr
   27926:	4240      	negs	r0, r0
   27928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2792c:	2b00      	cmp	r3, #0
   2792e:	db1b      	blt.n	27968 <__aeabi_ldivmod+0x84>
   27930:	f000 f828 	bl	27984 <__udivmoddi4>
   27934:	f8dd e004 	ldr.w	lr, [sp, #4]
   27938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2793c:	b004      	add	sp, #16
   2793e:	4240      	negs	r0, r0
   27940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27944:	4252      	negs	r2, r2
   27946:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2794a:	4770      	bx	lr
   2794c:	4252      	negs	r2, r2
   2794e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   27952:	f000 f817 	bl	27984 <__udivmoddi4>
   27956:	f8dd e004 	ldr.w	lr, [sp, #4]
   2795a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2795e:	b004      	add	sp, #16
   27960:	4240      	negs	r0, r0
   27962:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   27966:	4770      	bx	lr
   27968:	4252      	negs	r2, r2
   2796a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2796e:	f000 f809 	bl	27984 <__udivmoddi4>
   27972:	f8dd e004 	ldr.w	lr, [sp, #4]
   27976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2797a:	b004      	add	sp, #16
   2797c:	4252      	negs	r2, r2
   2797e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   27982:	4770      	bx	lr

00027984 <__udivmoddi4>:
   27984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27988:	9e08      	ldr	r6, [sp, #32]
   2798a:	460d      	mov	r5, r1
   2798c:	4604      	mov	r4, r0
   2798e:	468e      	mov	lr, r1
   27990:	2b00      	cmp	r3, #0
   27992:	f040 8082 	bne.w	27a9a <__udivmoddi4+0x116>
   27996:	428a      	cmp	r2, r1
   27998:	4617      	mov	r7, r2
   2799a:	d946      	bls.n	27a2a <__udivmoddi4+0xa6>
   2799c:	fab2 f282 	clz	r2, r2
   279a0:	b14a      	cbz	r2, 279b6 <__udivmoddi4+0x32>
   279a2:	f1c2 0120 	rsb	r1, r2, #32
   279a6:	fa05 f302 	lsl.w	r3, r5, r2
   279aa:	fa20 f101 	lsr.w	r1, r0, r1
   279ae:	4097      	lsls	r7, r2
   279b0:	ea41 0e03 	orr.w	lr, r1, r3
   279b4:	4094      	lsls	r4, r2
   279b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   279ba:	0c23      	lsrs	r3, r4, #16
   279bc:	fbbe fcf8 	udiv	ip, lr, r8
   279c0:	b2b9      	uxth	r1, r7
   279c2:	fb08 ee1c 	mls	lr, r8, ip, lr
   279c6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   279ca:	fb0c f001 	mul.w	r0, ip, r1
   279ce:	4298      	cmp	r0, r3
   279d0:	d90a      	bls.n	279e8 <__udivmoddi4+0x64>
   279d2:	18fb      	adds	r3, r7, r3
   279d4:	f10c 35ff 	add.w	r5, ip, #4294967295
   279d8:	f080 8116 	bcs.w	27c08 <__udivmoddi4+0x284>
   279dc:	4298      	cmp	r0, r3
   279de:	f240 8113 	bls.w	27c08 <__udivmoddi4+0x284>
   279e2:	f1ac 0c02 	sub.w	ip, ip, #2
   279e6:	443b      	add	r3, r7
   279e8:	1a1b      	subs	r3, r3, r0
   279ea:	b2a4      	uxth	r4, r4
   279ec:	fbb3 f0f8 	udiv	r0, r3, r8
   279f0:	fb08 3310 	mls	r3, r8, r0, r3
   279f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   279f8:	fb00 f101 	mul.w	r1, r0, r1
   279fc:	42a1      	cmp	r1, r4
   279fe:	d909      	bls.n	27a14 <__udivmoddi4+0x90>
   27a00:	193c      	adds	r4, r7, r4
   27a02:	f100 33ff 	add.w	r3, r0, #4294967295
   27a06:	f080 8101 	bcs.w	27c0c <__udivmoddi4+0x288>
   27a0a:	42a1      	cmp	r1, r4
   27a0c:	f240 80fe 	bls.w	27c0c <__udivmoddi4+0x288>
   27a10:	3802      	subs	r0, #2
   27a12:	443c      	add	r4, r7
   27a14:	1a64      	subs	r4, r4, r1
   27a16:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   27a1a:	2100      	movs	r1, #0
   27a1c:	b11e      	cbz	r6, 27a26 <__udivmoddi4+0xa2>
   27a1e:	40d4      	lsrs	r4, r2
   27a20:	2300      	movs	r3, #0
   27a22:	e9c6 4300 	strd	r4, r3, [r6]
   27a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27a2a:	b902      	cbnz	r2, 27a2e <__udivmoddi4+0xaa>
   27a2c:	deff      	udf	#255	; 0xff
   27a2e:	fab2 f282 	clz	r2, r2
   27a32:	2a00      	cmp	r2, #0
   27a34:	d14f      	bne.n	27ad6 <__udivmoddi4+0x152>
   27a36:	1bcb      	subs	r3, r1, r7
   27a38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   27a3c:	fa1f f887 	uxth.w	r8, r7
   27a40:	2101      	movs	r1, #1
   27a42:	fbb3 fcfe 	udiv	ip, r3, lr
   27a46:	0c25      	lsrs	r5, r4, #16
   27a48:	fb0e 331c 	mls	r3, lr, ip, r3
   27a4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   27a50:	fb08 f30c 	mul.w	r3, r8, ip
   27a54:	42ab      	cmp	r3, r5
   27a56:	d907      	bls.n	27a68 <__udivmoddi4+0xe4>
   27a58:	197d      	adds	r5, r7, r5
   27a5a:	f10c 30ff 	add.w	r0, ip, #4294967295
   27a5e:	d202      	bcs.n	27a66 <__udivmoddi4+0xe2>
   27a60:	42ab      	cmp	r3, r5
   27a62:	f200 80e7 	bhi.w	27c34 <__udivmoddi4+0x2b0>
   27a66:	4684      	mov	ip, r0
   27a68:	1aed      	subs	r5, r5, r3
   27a6a:	b2a3      	uxth	r3, r4
   27a6c:	fbb5 f0fe 	udiv	r0, r5, lr
   27a70:	fb0e 5510 	mls	r5, lr, r0, r5
   27a74:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   27a78:	fb08 f800 	mul.w	r8, r8, r0
   27a7c:	45a0      	cmp	r8, r4
   27a7e:	d907      	bls.n	27a90 <__udivmoddi4+0x10c>
   27a80:	193c      	adds	r4, r7, r4
   27a82:	f100 33ff 	add.w	r3, r0, #4294967295
   27a86:	d202      	bcs.n	27a8e <__udivmoddi4+0x10a>
   27a88:	45a0      	cmp	r8, r4
   27a8a:	f200 80d7 	bhi.w	27c3c <__udivmoddi4+0x2b8>
   27a8e:	4618      	mov	r0, r3
   27a90:	eba4 0408 	sub.w	r4, r4, r8
   27a94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   27a98:	e7c0      	b.n	27a1c <__udivmoddi4+0x98>
   27a9a:	428b      	cmp	r3, r1
   27a9c:	d908      	bls.n	27ab0 <__udivmoddi4+0x12c>
   27a9e:	2e00      	cmp	r6, #0
   27aa0:	f000 80af 	beq.w	27c02 <__udivmoddi4+0x27e>
   27aa4:	2100      	movs	r1, #0
   27aa6:	e9c6 0500 	strd	r0, r5, [r6]
   27aaa:	4608      	mov	r0, r1
   27aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27ab0:	fab3 f183 	clz	r1, r3
   27ab4:	2900      	cmp	r1, #0
   27ab6:	d14b      	bne.n	27b50 <__udivmoddi4+0x1cc>
   27ab8:	42ab      	cmp	r3, r5
   27aba:	d302      	bcc.n	27ac2 <__udivmoddi4+0x13e>
   27abc:	4282      	cmp	r2, r0
   27abe:	f200 80b7 	bhi.w	27c30 <__udivmoddi4+0x2ac>
   27ac2:	1a84      	subs	r4, r0, r2
   27ac4:	eb65 0303 	sbc.w	r3, r5, r3
   27ac8:	2001      	movs	r0, #1
   27aca:	469e      	mov	lr, r3
   27acc:	2e00      	cmp	r6, #0
   27ace:	d0aa      	beq.n	27a26 <__udivmoddi4+0xa2>
   27ad0:	e9c6 4e00 	strd	r4, lr, [r6]
   27ad4:	e7a7      	b.n	27a26 <__udivmoddi4+0xa2>
   27ad6:	f1c2 0c20 	rsb	ip, r2, #32
   27ada:	fa01 f302 	lsl.w	r3, r1, r2
   27ade:	4097      	lsls	r7, r2
   27ae0:	fa20 f00c 	lsr.w	r0, r0, ip
   27ae4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   27ae8:	fa21 fc0c 	lsr.w	ip, r1, ip
   27aec:	4318      	orrs	r0, r3
   27aee:	fbbc f1fe 	udiv	r1, ip, lr
   27af2:	0c05      	lsrs	r5, r0, #16
   27af4:	fb0e cc11 	mls	ip, lr, r1, ip
   27af8:	fa1f f887 	uxth.w	r8, r7
   27afc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   27b00:	fb01 f308 	mul.w	r3, r1, r8
   27b04:	42ab      	cmp	r3, r5
   27b06:	fa04 f402 	lsl.w	r4, r4, r2
   27b0a:	d909      	bls.n	27b20 <__udivmoddi4+0x19c>
   27b0c:	197d      	adds	r5, r7, r5
   27b0e:	f101 3cff 	add.w	ip, r1, #4294967295
   27b12:	f080 808b 	bcs.w	27c2c <__udivmoddi4+0x2a8>
   27b16:	42ab      	cmp	r3, r5
   27b18:	f240 8088 	bls.w	27c2c <__udivmoddi4+0x2a8>
   27b1c:	3902      	subs	r1, #2
   27b1e:	443d      	add	r5, r7
   27b20:	1aeb      	subs	r3, r5, r3
   27b22:	b285      	uxth	r5, r0
   27b24:	fbb3 f0fe 	udiv	r0, r3, lr
   27b28:	fb0e 3310 	mls	r3, lr, r0, r3
   27b2c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   27b30:	fb00 f308 	mul.w	r3, r0, r8
   27b34:	42ab      	cmp	r3, r5
   27b36:	d907      	bls.n	27b48 <__udivmoddi4+0x1c4>
   27b38:	197d      	adds	r5, r7, r5
   27b3a:	f100 3cff 	add.w	ip, r0, #4294967295
   27b3e:	d271      	bcs.n	27c24 <__udivmoddi4+0x2a0>
   27b40:	42ab      	cmp	r3, r5
   27b42:	d96f      	bls.n	27c24 <__udivmoddi4+0x2a0>
   27b44:	3802      	subs	r0, #2
   27b46:	443d      	add	r5, r7
   27b48:	1aeb      	subs	r3, r5, r3
   27b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   27b4e:	e778      	b.n	27a42 <__udivmoddi4+0xbe>
   27b50:	f1c1 0c20 	rsb	ip, r1, #32
   27b54:	408b      	lsls	r3, r1
   27b56:	fa22 f70c 	lsr.w	r7, r2, ip
   27b5a:	431f      	orrs	r7, r3
   27b5c:	fa20 f40c 	lsr.w	r4, r0, ip
   27b60:	fa05 f301 	lsl.w	r3, r5, r1
   27b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   27b68:	fa25 f50c 	lsr.w	r5, r5, ip
   27b6c:	431c      	orrs	r4, r3
   27b6e:	0c23      	lsrs	r3, r4, #16
   27b70:	fbb5 f9fe 	udiv	r9, r5, lr
   27b74:	fa1f f887 	uxth.w	r8, r7
   27b78:	fb0e 5519 	mls	r5, lr, r9, r5
   27b7c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   27b80:	fb09 fa08 	mul.w	sl, r9, r8
   27b84:	45aa      	cmp	sl, r5
   27b86:	fa02 f201 	lsl.w	r2, r2, r1
   27b8a:	fa00 f301 	lsl.w	r3, r0, r1
   27b8e:	d908      	bls.n	27ba2 <__udivmoddi4+0x21e>
   27b90:	197d      	adds	r5, r7, r5
   27b92:	f109 30ff 	add.w	r0, r9, #4294967295
   27b96:	d247      	bcs.n	27c28 <__udivmoddi4+0x2a4>
   27b98:	45aa      	cmp	sl, r5
   27b9a:	d945      	bls.n	27c28 <__udivmoddi4+0x2a4>
   27b9c:	f1a9 0902 	sub.w	r9, r9, #2
   27ba0:	443d      	add	r5, r7
   27ba2:	eba5 050a 	sub.w	r5, r5, sl
   27ba6:	b2a4      	uxth	r4, r4
   27ba8:	fbb5 f0fe 	udiv	r0, r5, lr
   27bac:	fb0e 5510 	mls	r5, lr, r0, r5
   27bb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   27bb4:	fb00 f808 	mul.w	r8, r0, r8
   27bb8:	45a0      	cmp	r8, r4
   27bba:	d907      	bls.n	27bcc <__udivmoddi4+0x248>
   27bbc:	193c      	adds	r4, r7, r4
   27bbe:	f100 35ff 	add.w	r5, r0, #4294967295
   27bc2:	d22d      	bcs.n	27c20 <__udivmoddi4+0x29c>
   27bc4:	45a0      	cmp	r8, r4
   27bc6:	d92b      	bls.n	27c20 <__udivmoddi4+0x29c>
   27bc8:	3802      	subs	r0, #2
   27bca:	443c      	add	r4, r7
   27bcc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   27bd0:	eba4 0408 	sub.w	r4, r4, r8
   27bd4:	fba0 8902 	umull	r8, r9, r0, r2
   27bd8:	454c      	cmp	r4, r9
   27bda:	46c6      	mov	lr, r8
   27bdc:	464d      	mov	r5, r9
   27bde:	d319      	bcc.n	27c14 <__udivmoddi4+0x290>
   27be0:	d016      	beq.n	27c10 <__udivmoddi4+0x28c>
   27be2:	b15e      	cbz	r6, 27bfc <__udivmoddi4+0x278>
   27be4:	ebb3 020e 	subs.w	r2, r3, lr
   27be8:	eb64 0405 	sbc.w	r4, r4, r5
   27bec:	fa04 fc0c 	lsl.w	ip, r4, ip
   27bf0:	40ca      	lsrs	r2, r1
   27bf2:	ea4c 0202 	orr.w	r2, ip, r2
   27bf6:	40cc      	lsrs	r4, r1
   27bf8:	e9c6 2400 	strd	r2, r4, [r6]
   27bfc:	2100      	movs	r1, #0
   27bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27c02:	4631      	mov	r1, r6
   27c04:	4630      	mov	r0, r6
   27c06:	e70e      	b.n	27a26 <__udivmoddi4+0xa2>
   27c08:	46ac      	mov	ip, r5
   27c0a:	e6ed      	b.n	279e8 <__udivmoddi4+0x64>
   27c0c:	4618      	mov	r0, r3
   27c0e:	e701      	b.n	27a14 <__udivmoddi4+0x90>
   27c10:	4543      	cmp	r3, r8
   27c12:	d2e6      	bcs.n	27be2 <__udivmoddi4+0x25e>
   27c14:	ebb8 0e02 	subs.w	lr, r8, r2
   27c18:	eb69 0507 	sbc.w	r5, r9, r7
   27c1c:	3801      	subs	r0, #1
   27c1e:	e7e0      	b.n	27be2 <__udivmoddi4+0x25e>
   27c20:	4628      	mov	r0, r5
   27c22:	e7d3      	b.n	27bcc <__udivmoddi4+0x248>
   27c24:	4660      	mov	r0, ip
   27c26:	e78f      	b.n	27b48 <__udivmoddi4+0x1c4>
   27c28:	4681      	mov	r9, r0
   27c2a:	e7ba      	b.n	27ba2 <__udivmoddi4+0x21e>
   27c2c:	4661      	mov	r1, ip
   27c2e:	e777      	b.n	27b20 <__udivmoddi4+0x19c>
   27c30:	4608      	mov	r0, r1
   27c32:	e74b      	b.n	27acc <__udivmoddi4+0x148>
   27c34:	f1ac 0c02 	sub.w	ip, ip, #2
   27c38:	443d      	add	r5, r7
   27c3a:	e715      	b.n	27a68 <__udivmoddi4+0xe4>
   27c3c:	3802      	subs	r0, #2
   27c3e:	443c      	add	r4, r7
   27c40:	e726      	b.n	27a90 <__udivmoddi4+0x10c>
   27c42:	bf00      	nop

00027c44 <__aeabi_idiv0>:
   27c44:	4770      	bx	lr
   27c46:	bf00      	nop

00027c48 <__thumb_startup>:
  .section .text.__thumb_startup
  .weak __thumb_startup
  .type __thumb_startup, %function
__thumb_startup:
/* Call the C hardware init function (which also has to switch off the watchdog) */
  bl  __init_hardware
   27c48:	f7fd fa40 	bl	250cc <__init_hardware>

/* Copy the data segment initializers from flash to SRAM: */
  movs r1, #0
   27c4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
   27c4e:	e003      	b.n	27c58 <LoopCopyDataInit>

00027c50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =___ROM_AT
   27c50:	4b0a      	ldr	r3, [pc, #40]	; (27c7c <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
   27c52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
   27c54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
   27c56:	3104      	adds	r1, #4

00027c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
   27c58:	4809      	ldr	r0, [pc, #36]	; (27c80 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
   27c5a:	4b0a      	ldr	r3, [pc, #40]	; (27c84 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
   27c5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
   27c5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
   27c60:	d3f6      	bcc.n	27c50 <CopyDataInit>
  ldr r2, =__START_BSS
   27c62:	4a09      	ldr	r2, [pc, #36]	; (27c88 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
   27c64:	e002      	b.n	27c6c <LoopFillZerobss>

00027c66 <FillZerobss>:

/* Zero fill the bss segment: */
FillZerobss:
  movs r3, #0
   27c66:	2300      	movs	r3, #0
  str r3, [r2]
   27c68:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
   27c6a:	3204      	adds	r2, #4

00027c6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = __END_BSS
   27c6c:	4b07      	ldr	r3, [pc, #28]	; (27c8c <LoopFillZerobss+0x20>)
  cmp r2, r3
   27c6e:	429a      	cmp	r2, r3
  bcc FillZerobss
   27c70:	d3f9      	bcc.n	27c66 <FillZerobss>
/* Call the application's entry point: */
  bl main
   27c72:	f000 f80d 	bl	27c90 <main>
  blx r0   /*Call the startup code of the application (address returned by the main() function of the boot loader)*/
   27c76:	4780      	blx	r0
  bx lr
   27c78:	4770      	bx	lr
   27c7a:	0000      	.short	0x0000
  ldr r3, =___ROM_AT
   27c7c:	0002b27c 	.word	0x0002b27c
  ldr r0, =_sdata
   27c80:	1fff0008 	.word	0x1fff0008
  ldr r3, =_edata
   27c84:	1fff1074 	.word	0x1fff1074
  ldr r2, =__START_BSS
   27c88:	1fff1200 	.word	0x1fff1200
  ldr r3, = __END_BSS
   27c8c:	1fff6c24 	.word	0x1fff6c24

00027c90 <main>:


int main(void) {
   27c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	init_reg();
   27c92:	f7f6 f901 	bl	1de98 <init_reg>

	// ===== ABN encoder test drive =====

	// Init encoder (mode 0)
	tmc4671_writeInt(0, TMC4671_MODE_RAMP_MODE_MOTION, 0x00000008); // @suppress("Invalid arguments")
   27c96:	2208      	movs	r2, #8
   27c98:	2163      	movs	r1, #99	; 0x63
   27c9a:	2000      	movs	r0, #0
   27c9c:	f7fa ffac 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_PHI_E_PHI_M_OFFSET, 0x00000000); // @suppress("Invalid arguments")
   27ca0:	2200      	movs	r2, #0
   27ca2:	4610      	mov	r0, r2
   27ca4:	2129      	movs	r1, #41	; 0x29
   27ca6:	f7fa ffa7 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PHI_E_SELECTION, 0x00000001); // @suppress("Invalid arguments")
   27caa:	2201      	movs	r2, #1
   27cac:	2152      	movs	r1, #82	; 0x52
   27cae:	2000      	movs	r0, #0
   27cb0:	f7fa ffa2 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_PHI_E_EXT, 0x00000000); // @suppress("Invalid arguments")
   27cb4:	2200      	movs	r2, #0
   27cb6:	4610      	mov	r0, r2
   27cb8:	211c      	movs	r1, #28
   27cba:	f7fa ff9d 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_UQ_UD_EXT, 0x000007D0);
   27cbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   27cc2:	2124      	movs	r1, #36	; 0x24
   27cc4:	2000      	movs	r0, #0
   27cc6:	f7fa ff97 	bl	22bf8 <tmc4671_writeInt>
	wait(1000);
   27cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   27cce:	f7f4 fb37 	bl	1c340 <wait>
	tmc4671_writeInt(0, TMC4671_ABN_DECODER_COUNT, 0x00000000);
   27cd2:	2200      	movs	r2, #0
   27cd4:	4610      	mov	r0, r2
   27cd6:	2127      	movs	r1, #39	; 0x27
   27cd8:	f7fa ff8e 	bl	22bf8 <tmc4671_writeInt>

	// Feedback selection
	tmc4671_writeInt(0, TMC4671_PHI_E_SELECTION, 0x00000003);
   27cdc:	2203      	movs	r2, #3
   27cde:	2152      	movs	r1, #82	; 0x52
   27ce0:	2000      	movs	r0, #0
   27ce2:	f7fa ff89 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_VELOCITY_SELECTION, 0x00000009);
   27ce6:	2209      	movs	r2, #9
   27ce8:	2150      	movs	r1, #80	; 0x50
   27cea:	2000      	movs	r0, #0
   27cec:	f7fa ff84 	bl	22bf8 <tmc4671_writeInt>

	// Switch to position mode
	tmc4671_writeInt(0, TMC4671_PID_POSITION_TARGET, 0x00000000);
   27cf0:	2200      	movs	r2, #0
   27cf2:	4610      	mov	r0, r2
   27cf4:	2168      	movs	r1, #104	; 0x68
   27cf6:	f7fa ff7f 	bl	22bf8 <tmc4671_writeInt>
	tmc4671_writeInt(0, TMC4671_MODE_RAMP_MODE_MOTION, 0x00000003);
   27cfa:	2203      	movs	r2, #3
   27cfc:	2163      	movs	r1, #99	; 0x63
   27cfe:	2000      	movs	r0, #0
   27d00:	f7fa ff7a 	bl	22bf8 <tmc4671_writeInt>
		enc[0] = ( current_pos & 0xFF000000 ) >> 24;
		enc[1] = ( current_pos & 0x00FF0000 ) >> 16;
		enc[2] = ( current_pos & 0x0000FF00 ) >> 8;
		enc[3] = ( current_pos & 0x000000FF ) ;

		HAL.USB->txN(enc,4);
   27d04:	4d13      	ldr	r5, [pc, #76]	; (27d54 <main+0xc4>)
		current_pos = tmc4671_readInt(0, TMC4671_PID_POSITION_ACTUAL);
   27d06:	216b      	movs	r1, #107	; 0x6b
   27d08:	2000      	movs	r0, #0
   27d0a:	f7fa ff53 	bl	22bb4 <tmc4671_readInt>
		HAL.USB->txN(enc,4);
   27d0e:	696c      	ldr	r4, [r5, #20]
   27d10:	2104      	movs	r1, #4
   27d12:	ba00      	rev	r0, r0
   27d14:	6923      	ldr	r3, [r4, #16]
		enc[0] = ( current_pos & 0xFF000000 ) >> 24;
   27d16:	9001      	str	r0, [sp, #4]
		HAL.USB->txN(enc,4);
   27d18:	eb0d 0001 	add.w	r0, sp, r1
   27d1c:	4798      	blx	r3

		if(HAL.USB->rxN(pos_target,4)){
   27d1e:	6963      	ldr	r3, [r4, #20]
   27d20:	2104      	movs	r1, #4
   27d22:	4668      	mov	r0, sp
   27d24:	4798      	blx	r3
   27d26:	b188      	cbz	r0, 27d4c <main+0xbc>
			target = ( pos_target[0] << 24 ) + ( pos_target[1] << 16 ) + ( pos_target[2] << 8 ) + pos_target[3];  // position target
   27d28:	f89d 3001 	ldrb.w	r3, [sp, #1]
   27d2c:	f89d 2000 	ldrb.w	r2, [sp]
   27d30:	041b      	lsls	r3, r3, #16
   27d32:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   27d36:	f89d 2002 	ldrb.w	r2, [sp, #2]
   27d3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   27d3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
			tmc4671_writeInt(0, TMC4671_PID_POSITION_TARGET, target);  //
   27d42:	2168      	movs	r1, #104	; 0x68
   27d44:	441a      	add	r2, r3
   27d46:	2000      	movs	r0, #0
   27d48:	f7fa ff56 	bl	22bf8 <tmc4671_writeInt>
		}

		wait(1);
   27d4c:	2001      	movs	r0, #1
   27d4e:	f7f4 faf7 	bl	1c340 <wait>
		current_pos = tmc4671_readInt(0, TMC4671_PID_POSITION_ACTUAL);
   27d52:	e7d8      	b.n	27d06 <main+0x76>
   27d54:	00029d1c 	.word	0x00029d1c

00027d58 <memset>:
   27d58:	b4f0      	push	{r4, r5, r6, r7}
   27d5a:	0786      	lsls	r6, r0, #30
   27d5c:	d046      	beq.n	27dec <memset+0x94>
   27d5e:	1e54      	subs	r4, r2, #1
   27d60:	2a00      	cmp	r2, #0
   27d62:	d03c      	beq.n	27dde <memset+0x86>
   27d64:	b2ca      	uxtb	r2, r1
   27d66:	4603      	mov	r3, r0
   27d68:	e001      	b.n	27d6e <memset+0x16>
   27d6a:	3c01      	subs	r4, #1
   27d6c:	d337      	bcc.n	27dde <memset+0x86>
   27d6e:	f803 2b01 	strb.w	r2, [r3], #1
   27d72:	079d      	lsls	r5, r3, #30
   27d74:	d1f9      	bne.n	27d6a <memset+0x12>
   27d76:	2c03      	cmp	r4, #3
   27d78:	d92a      	bls.n	27dd0 <memset+0x78>
   27d7a:	b2cd      	uxtb	r5, r1
   27d7c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   27d80:	2c0f      	cmp	r4, #15
   27d82:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   27d86:	d934      	bls.n	27df2 <memset+0x9a>
   27d88:	f1a4 0210 	sub.w	r2, r4, #16
   27d8c:	f022 0c0f 	bic.w	ip, r2, #15
   27d90:	f103 0720 	add.w	r7, r3, #32
   27d94:	0916      	lsrs	r6, r2, #4
   27d96:	4467      	add	r7, ip
   27d98:	f103 0210 	add.w	r2, r3, #16
   27d9c:	e942 5504 	strd	r5, r5, [r2, #-16]
   27da0:	e942 5502 	strd	r5, r5, [r2, #-8]
   27da4:	3210      	adds	r2, #16
   27da6:	42ba      	cmp	r2, r7
   27da8:	d1f8      	bne.n	27d9c <memset+0x44>
   27daa:	1c72      	adds	r2, r6, #1
   27dac:	f014 0f0c 	tst.w	r4, #12
   27db0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   27db4:	f004 060f 	and.w	r6, r4, #15
   27db8:	d013      	beq.n	27de2 <memset+0x8a>
   27dba:	1f33      	subs	r3, r6, #4
   27dbc:	f023 0303 	bic.w	r3, r3, #3
   27dc0:	3304      	adds	r3, #4
   27dc2:	4413      	add	r3, r2
   27dc4:	f842 5b04 	str.w	r5, [r2], #4
   27dc8:	4293      	cmp	r3, r2
   27dca:	d1fb      	bne.n	27dc4 <memset+0x6c>
   27dcc:	f006 0403 	and.w	r4, r6, #3
   27dd0:	b12c      	cbz	r4, 27dde <memset+0x86>
   27dd2:	b2ca      	uxtb	r2, r1
   27dd4:	441c      	add	r4, r3
   27dd6:	f803 2b01 	strb.w	r2, [r3], #1
   27dda:	429c      	cmp	r4, r3
   27ddc:	d1fb      	bne.n	27dd6 <memset+0x7e>
   27dde:	bcf0      	pop	{r4, r5, r6, r7}
   27de0:	4770      	bx	lr
   27de2:	4634      	mov	r4, r6
   27de4:	4613      	mov	r3, r2
   27de6:	2c00      	cmp	r4, #0
   27de8:	d1f3      	bne.n	27dd2 <memset+0x7a>
   27dea:	e7f8      	b.n	27dde <memset+0x86>
   27dec:	4614      	mov	r4, r2
   27dee:	4603      	mov	r3, r0
   27df0:	e7c1      	b.n	27d76 <memset+0x1e>
   27df2:	461a      	mov	r2, r3
   27df4:	4626      	mov	r6, r4
   27df6:	e7e0      	b.n	27dba <memset+0x62>

00027df8 <register_fini>:
   27df8:	4b02      	ldr	r3, [pc, #8]	; (27e04 <register_fini+0xc>)
   27dfa:	b113      	cbz	r3, 27e02 <register_fini+0xa>
   27dfc:	4802      	ldr	r0, [pc, #8]	; (27e08 <register_fini+0x10>)
   27dfe:	f000 b805 	b.w	27e0c <atexit>
   27e02:	4770      	bx	lr
   27e04:	00000000 	.word	0x00000000
   27e08:	00027e19 	.word	0x00027e19

00027e0c <atexit>:
   27e0c:	2300      	movs	r3, #0
   27e0e:	4601      	mov	r1, r0
   27e10:	461a      	mov	r2, r3
   27e12:	4618      	mov	r0, r3
   27e14:	f000 b81a 	b.w	27e4c <__register_exitproc>

00027e18 <__libc_fini_array>:
   27e18:	b538      	push	{r3, r4, r5, lr}
   27e1a:	4b08      	ldr	r3, [pc, #32]	; (27e3c <__libc_fini_array+0x24>)
   27e1c:	4d08      	ldr	r5, [pc, #32]	; (27e40 <__libc_fini_array+0x28>)
   27e1e:	1b5b      	subs	r3, r3, r5
   27e20:	109c      	asrs	r4, r3, #2
   27e22:	d007      	beq.n	27e34 <__libc_fini_array+0x1c>
   27e24:	3b04      	subs	r3, #4
   27e26:	441d      	add	r5, r3
   27e28:	3c01      	subs	r4, #1
   27e2a:	f855 3904 	ldr.w	r3, [r5], #-4
   27e2e:	4798      	blx	r3
   27e30:	2c00      	cmp	r4, #0
   27e32:	d1f9      	bne.n	27e28 <__libc_fini_array+0x10>
   27e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27e38:	f003 ba10 	b.w	2b25c <_fini>
   27e3c:	0002b27c 	.word	0x0002b27c
   27e40:	0002b278 	.word	0x0002b278

00027e44 <__retarget_lock_acquire_recursive>:
   27e44:	4770      	bx	lr
   27e46:	bf00      	nop

00027e48 <__retarget_lock_release_recursive>:
   27e48:	4770      	bx	lr
   27e4a:	bf00      	nop

00027e4c <__register_exitproc>:
   27e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e50:	f8df a080 	ldr.w	sl, [pc, #128]	; 27ed4 <__register_exitproc+0x88>
   27e54:	4606      	mov	r6, r0
   27e56:	f8da 0000 	ldr.w	r0, [sl]
   27e5a:	4698      	mov	r8, r3
   27e5c:	460f      	mov	r7, r1
   27e5e:	4691      	mov	r9, r2
   27e60:	f7ff fff0 	bl	27e44 <__retarget_lock_acquire_recursive>
   27e64:	4b1a      	ldr	r3, [pc, #104]	; (27ed0 <__register_exitproc+0x84>)
   27e66:	681b      	ldr	r3, [r3, #0]
   27e68:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   27e6c:	b324      	cbz	r4, 27eb8 <__register_exitproc+0x6c>
   27e6e:	6865      	ldr	r5, [r4, #4]
   27e70:	2d1f      	cmp	r5, #31
   27e72:	dc26      	bgt.n	27ec2 <__register_exitproc+0x76>
   27e74:	b95e      	cbnz	r6, 27e8e <__register_exitproc+0x42>
   27e76:	1cab      	adds	r3, r5, #2
   27e78:	3501      	adds	r5, #1
   27e7a:	f8da 0000 	ldr.w	r0, [sl]
   27e7e:	6065      	str	r5, [r4, #4]
   27e80:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
   27e84:	f7ff ffe0 	bl	27e48 <__retarget_lock_release_recursive>
   27e88:	2000      	movs	r0, #0
   27e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27e8e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   27e92:	2101      	movs	r1, #1
   27e94:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   27e98:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   27e9c:	40a9      	lsls	r1, r5
   27e9e:	430a      	orrs	r2, r1
   27ea0:	2e02      	cmp	r6, #2
   27ea2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   27ea6:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   27eaa:	d1e4      	bne.n	27e76 <__register_exitproc+0x2a>
   27eac:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   27eb0:	4319      	orrs	r1, r3
   27eb2:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
   27eb6:	e7de      	b.n	27e76 <__register_exitproc+0x2a>
   27eb8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   27ebc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   27ec0:	e7d5      	b.n	27e6e <__register_exitproc+0x22>
   27ec2:	f8da 0000 	ldr.w	r0, [sl]
   27ec6:	f7ff ffbf 	bl	27e48 <__retarget_lock_release_recursive>
   27eca:	f04f 30ff 	mov.w	r0, #4294967295
   27ece:	e7dc      	b.n	27e8a <__register_exitproc+0x3e>
   27ed0:	0002b24c 	.word	0x0002b24c
   27ed4:	1fff1070 	.word	0x1fff1070

00027ed8 <tmc2041_defaultRegisterResetState>:
   27ed8:	00000006 00000000 00000000 00000000     ................
	...
   27f98:	00071703 00000000 00000000 00000000     ................
	...
   28018:	00071703 00000000 00000000 00000000     ................
	...
   28088:	000101d5 00000000 00000000 00000000     ................
	...
   280c8:	000101d5 00000000 00000000 00000000     ................

000280d8 <tmc2130_defaultRegisterResetState>:
	...
   28118:	00071703 00000000 00000000 00000000     ................
	...
   28288:	000101d5 00000000 00000000 00000000     ................
	...

000282d8 <tmc2160_defaultRegisterResetState>:
	...
   28318:	00070a03 00000000 00000000 00000000     ................
	...
   28488:	10410153 00000000 00000000 00000000     S.A.............
   28498:	c40c001e 00000000 00000000 00000000     ................
	...

000284d8 <tmc2208_defaultRegisterResetState>:
   284d8:	00000041 00000000 00000000 00000000     A...............
	...
   28518:	00071703 00000014 00000000 00000000     ................
	...
   28688:	10000053 00000000 00000000 00000000     S...............
   28698:	c10d0024 00000000 00000000 00000000     $...............
	...

000286d8 <tmc2209_defaultRegisterResetState>:
   286d8:	00000040 00000000 00000000 00000000     @...............
	...
   28718:	00071703 00000014 00000000 00000000     ................
	...
   28888:	10000053 00000000 00000000 00000000     S...............
   28898:	c10d0024 00000000 00000000 00000000     $...............
	...

000288d8 <tmc2225_defaultRegisterResetState>:
   288d8:	000000c1 00000000 00000000 00000000     ................
	...
   28918:	00071703 00000014 00000000 00000000     ................
	...
   28a88:	10000053 00000000 00000000 00000000     S...............
   28a98:	c00d0024 00000000 00000000 00000000     $...............
	...

00028ad8 <tmc2590_defaultRegisterResetState>:
   28ad8:	10000000 00000000 00000000 00000000     ................
   28ae8:	00091935 000a0000 000d0505 000ef040     5...........@...

00028af8 <tmc4330_defaultRegisterResetState>:
	...
   28b38:	00040001 00000000 00000000 00000000     ................
	...
   28b78:	00000001 00000000 00000000 00000000     ................
	...

00028cf8 <tmc4331_defaultRegisterResetState>:
	...
   28d38:	00040001 00000000 00000000 00000000     ................
	...
   28d78:	00000001 00000000 00000000 00000000     ................
	...

00028ef8 <tmc4361_defaultRegisterResetState>:
	...
   28f38:	00040001 00000000 00000000 00000000     ................
	...
   28f78:	00000001 00000000 00000000 00000000     ................
	...

000290f8 <tmc4361A_defaultRegisterResetState>:
	...
   29138:	00040001 00000000 00000000 00000000     ................
	...
   29178:	00000001 00000000 00000000 00000000     ................
	...

000292f8 <tmc5041_defaultRegisterResetState>:
	...
   293b8:	00071703 00000000 00ffffff 00000000     ................
	...
   29438:	00071703 00000000 00ffffff 00000000     ................
	...
   29478:	aaaab554 4a9554aa 24492929 10104222     T....T.J))I$"B..
   29488:	fbffffff b5bb777d 49295556 00404222     ....}w..VU)I"B@.
   29498:	ffff8056 00f70000 00000000 00000000     V...............
   294a8:	000101d5 00000000 00000000 00000000     ................
	...
   294e8:	000101d5 00000000 00000000 00000000     ................

000294f8 <tmc5062_defaultRegisterResetState>:
	...
   295b8:	00071703 00000000 00ffffff 00000000     ................
	...
   295e0:	00010000 00000000 00000000 00000000     ................
	...
   29638:	00071703 00000000 00ffffff 00000000     ................
	...
   29660:	00010000 00000000 00000000 00000000     ................
	...
   296a8:	000101d5 00000000 00000000 00000000     ................
	...
   296e8:	000101d5 00000000 00000000 00000000     ................

000296f8 <tmc5072_defaultRegisterResetState>:
	...
   297b8:	00071703 00000000 00ffffff 00000000     ................
	...
   297e0:	00010000 00000000 00000000 00000000     ................
	...
   29838:	00071703 00000000 00ffffff 00000000     ................
	...
   29860:	00010000 00000000 00000000 00000000     ................
	...
   298a8:	000101d5 00000000 00000000 00000000     ................
	...
   298e8:	000101d5 00000000 00000000 00000000     ................

000298f8 <tmc5130_defaultRegisterResetState>:
	...
   29938:	00071703 00000000 00000000 00000000     ................
	...
   299e0:	00010000 00000000 00000000 00000000     ................
	...
   29aa8:	000101d5 00000000 00000000 00000000     ................
	...

00029af8 <tmc5161_defaultRegisterResetState>:
   29af8:	00000008 00000000 00000000 00000000     ................
	...
   29b1c:	00010c0c 00080200 00000000 00000000     ................
	...
   29b38:	00070a03 0000000a 00000000 00000000     ................
	...
   29b64:	00000001 00000000 00000000 00000000     ................
	...
   29be0:	00010000 00000000 00000000 00000000     ................
	...
   29ca8:	00410153 00000000 00000000 00000000     S.A.............
   29cb8:	c40c001e 00000000 00000000 00000000     ................
	...

00029cf8 <hwid_map.7364>:
   29cf8:	00000001 00000000 00000000 00000000     ................
   29d08:	00000002 00000000 00000000              ............

00029d14 <IOFunctions>:
   29d14:	1fff0078 1fff01b0                       x.......

00029d1c <HAL>:
   29d1c:	0001c8c9 0001c815 0001c835 00029d14     ........5.......
   29d2c:	1fff09d8 1fff0a04 1fff0a48 1fff0a28     ........H...(...
   29d3c:	1fff0a7c 1fff0abc 1fff0ae0 1fff0b08     |...............

00029d4c <adc0_mux>:
   29d4c:	                                         ...

00029d4f <adc1_mux>:
   29d4f:	00030100                                 .....

00029d54 <init_ch1>:
   29d54:	00000002 00014b31 00000004 00011215     ....1K..........
   29d64:	00000005 00018cd1 00000006 00015a51     ............QZ..
   29d74:	00000007 00017aa9 00000009 00013379     .....z......y3..
   29d84:	0000000a 000104d1 0000000b 00011f7d     ............}...
   29d94:	0000000d 000139ad 0000000f 0000fcfd     .....9..........
   29da4:	00000010 0001a191 00000012 0001b385     ................
   29db4:	00000019 000169c1 0000001a 0001bb65     .....i......e...
   29dc4:	0000001b 0001becd 000000ff 00008971     ............q...

00029dd4 <init_ch2>:
   29dd4:	00000001 0000f1e5 00000003 0000abfd     ................
   29de4:	00000004 00009c45 00000005 00009565     ....E.......e...
   29df4:	00000006 0000c013 00000008 0000cb57     ............W...
   29e04:	00000007 0000cfe5 00000012 0000d907     ................
   29e14:	0000000d 0000e4a9 00000009 0001c1f9     ................
   29e24:	00000013 0001b601 0000000a 0001b7ad     ................
   29e34:	0000000b 0000bbe5                       ........

00029e3c <sqrttable>:
   29e3c:	1b161000 2a272320 3532302d 3d3b3937     .... #'*-02579;=
   29e4c:	45434140 4c4b4947 5351504e 59575654     @ACEGIKLNPQSTVWY
   29e5c:	5e5d5b5a 63626160 68676665 6d6c6b6a     Z[]^`abcefghjklm
   29e6c:	7271706e 76757473 7a797877 7e7d7c7b     npqrstuvwxyz{|}~
   29e7c:	82818080 86858483 8a898887 8e8d8c8b     ................
   29e8c:	9190908f 95949392 98979696 9b9b9a99     ................
   29e9c:	9f9e9d9c a2a1a0a0 a5a4a3a3 a8a7a7a6     ................
   29eac:	abaaaaa9 aeadadac b1b0b0af b4b3b2b2     ................
   29ebc:	b7b6b5b5 b9b9b8b7 bcbbbbba bfbebdbd     ................
   29ecc:	c1c1c0c0 c4c3c3c2 c7c6c5c5 c9c9c8c7     ................
   29edc:	cccbcbca cececdcc d1d0d0cf d3d3d2d1     ................
   29eec:	d6d5d4d4 d8d7d7d6 dadad9d9 dddcdbdb     ................
   29efc:	dfdededd e1e1e0e0 e3e3e2e2 e6e5e5e4     ................
   29f0c:	e8e7e7e6 eaeae9e8 ececebeb eeeeeded     ................
   29f1c:	f1f0f0ef f3f2f2f1 f5f4f4f3 f7f6f6f5     ................
   29f2c:	f9f8f8f7 fbfafaf9 fdfcfcfb fffefefd     ................

00029f3c <tmc2041_defaultRegisterAccess>:
   29f3c:	02012103 00000013 00000000 00000000     .!..............
	...
   29f6c:	00000002 00000000 00000000 00000000     ................
	...
   29f8c:	00000002 00000000 00000000 00000000     ................
	...
   29fa4:	01010000 01000203 00000000 00000000     ................
   29fb4:	01010000 01000203 00000000               .............

00029fc1 <tmc2130_defaultRegisterAccess>:
   29fc1:	00002103 00000001 00000000 00000000     .!..............
   29fd1:	02010202 00000202 00000000 00000000     ................
	...
   29fed:	00000300 02000000 00000000 00000000     ................
	...
   2a021:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
   2a031:	01020142 00000000 00000000 00000000     B...............
   2a041:	                                         ...

0002a044 <tmc2130_RegisterConstants>:
   2a044:	00000060 aaaab554 00000061 4a9554aa     `...T...a....T.J
   2a054:	00000062 24492929 00000063 10104222     b...))I$c..."B..
   2a064:	00000064 fbffffff 00000065 b5bb777d     d.......e...}w..
   2a074:	00000066 49295556 00000067 00404222     f...VU)Ig..."B@.
   2a084:	00000068 ffff8056 00000069 00f70000     h...V...i.......
   2a094:	00000070 00050480                       p.......

0002a09c <tmc2160_defaultRegisterAccess>:
   2a09c:	02012303 01020223 02424242 00000001     .#..#...BBB.....
   2a0ac:	02010202 00000202 00000000 00000000     ................
   2a0bc:	02010303 02020202 02020002 00000302     ................
   2a0cc:	02000000 00012303 23020303 00000201     .....#.....#....
	...
   2a0fc:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
   2a10c:	01010102 00000000 00000000 00000000     ................

0002a11c <tmc2160_RegisterConstants>:
   2a11c:	00000008 00000000 00000009 00000000     ................
   2a12c:	0000000a 00000000 00000060 aaaab554     ........`...T...
   2a13c:	00000061 4a9554aa 00000062 24492929     a....T.Jb...))I$
   2a14c:	00000063 10104222 00000064 fbffffff     c..."B..d.......
   2a15c:	00000065 b5bb777d 00000066 49295556     e...}w..f...VU)I
   2a16c:	00000067 00404222 00000068 ffff8056     g..."B@.h...V...
   2a17c:	00000069 00f70000                       i.......

0002a184 <tmc2208_defaultRegisterAccess>:
   2a184:	02012303 03010102 00000000 00000000     .#..............
   2a194:	02010202 00000000 00000000 00000000     ................
   2a1a4:	00020000 00000000 00000000 00000000     ................
	...
   2a1c4:	00020102 00000000 00000000 00000000     ................
	...
   2a1ec:	01010000 01000003 00010103 00000000     ................
	...

0002a204 <tmc2209_defaultRegisterAccess>:
   2a204:	02012303 03010102 00000000 00000000     .#..............
   2a214:	02010202 00000002 00000000 00000000     ................
   2a224:	00020000 00000000 00000000 00000000     ................
	...
   2a244:	00020102 00000000 00000000 00000000     ................
	...
   2a26c:	01010000 01000003 00010103 00000000     ................
	...

0002a284 <tmc2224_defaultRegisterAccess>:
   2a284:	02010303 03010102 00000000 00000000     ................
   2a294:	02010202 00000000 00000000 00000000     ................
   2a2a4:	00020000 00000000 00000000 00000000     ................
	...
   2a2ec:	01010000 01000003 00010103 00000000     ................
	...

0002a304 <tmc2224_defaultRegisterResetState>:
   2a304:	00000141 00000000 00000000 00000000     A...............
	...
   2a344:	00001f00 00000014 00000000 00000000     ................
	...
   2a4b4:	10000053 00000000 00000000 00000000     S...............
   2a4c4:	c10d0024 00000000 00000000 00000000     $...............
	...

0002a504 <tmc2225_defaultRegisterAccess>:
   2a504:	02012303 03010102 00000000 00000000     .#..............
   2a514:	02010202 00000000 00000000 00000000     ................
   2a524:	00020000 00000000 00000000 00000000     ................
	...
   2a544:	00020102 00000000 00000000 00000000     ................
	...
   2a56c:	01010000 01000003 00010103 00000000     ................
	...

0002a584 <tmc2590_defaultRegisterAccess>:
   2a584:	00000002 02020202                       ........

0002a58c <tmc2660_defaultRegisterAccess>:
   2a58c:	00000002 02020202                       ........

0002a594 <tmc2660_defaultRegisterResetState>:
	...
   2a5a4:	00091935 000a0000 000d0505 000ef040     5...........@...

0002a5b4 <tmc4330_defaultRegisterAccess>:
   2a5b4:	03030343 43000300 43430003 01130303     C......C..CC....
   2a5c4:	03430303 03000303 00000000 43030043     ..C.........C..C
   2a5d4:	01010303 03030303 03030303 03030303     ................
   2a5e4:	03034303 03030303 03030303 03030303     .C..............
   2a5f4:	03030303 03030303 03030303 03000303     ................
   2a604:	42131303 42420013 13130342 02021302     ...B..BBB.......
   2a614:	02420202 00010100 01010202 00000000     ..B.............
   2a624:	42424242 42424242 01010142 01420202     BBBBBBBBB.....B.

0002a634 <tmc4331_defaultRegisterAccess>:
   2a634:	03030343 00430303 43430000 01130303     C.....C...CC....
   2a644:	03430303 43030303 03030303 43030300     ..C....C.......C
   2a654:	01010303 03030303 03030303 03030303     ................
   2a664:	03034303 03130303 03030303 03030303     .C..............
   2a674:	03030303 03030303 03030303 03000303     ................
	...
   2a694:	00420202 02000000 00000000 01011313     ..B.............
   2a6a4:	42424242 42424242 53010142 01420013     BBBBBBBBB..S..B.

0002a6b4 <tmc4361_defaultRegisterAccess>:
   2a6b4:	03030343 43430303 43430303 01130303     C.....CC..CC....
   2a6c4:	03430303 43030303 03030303 43030343     ..C....C....C..C
   2a6d4:	01010303 03030303 03030303 03030303     ................
   2a6e4:	03034303 03030303 03030303 03030303     .C..............
   2a6f4:	03030303 03030303 03030303 03030303     ................
   2a704:	42131303 42420213 13130342 02021302     ...B..BBB.......
   2a714:	02420202 02010100 01010202 01010202     ..B.............
   2a724:	42424242 42424242 53010142 01420253     BBBBBBBBB..SS.B.

0002a734 <tmc4361A_defaultRegisterAccess>:
   2a734:	03030343 43430303 43430303 01230303     C.....CC..CC..#.
   2a744:	03430303 03030303 03030303 43030343     ..C.........C..C
   2a754:	01010303 03030303 03030303 03030303     ................
   2a764:	03034303 03130303 03030303 03030303     .C..............
   2a774:	03030303 03030303 03030303 03030303     ................
   2a784:	42131303 42420213 13130342 02021302     ...B..BBB.......
   2a794:	02420202 02010100 01010202 01010202     ..B.............
   2a7a4:	42424242 42424242 13011342 01420213     BBBBBBBBB.....B.

0002a7b4 <tmc4361A_RegisterConstants>:
   2a7b4:	00000053 ffffffff 00000056 00a000a0     S.......V.......
   2a7c4:	00000057 00f00000 00000058 00000190     W.......X.......
   2a7d4:	00000062 00ffffff 00000070 aaaab554     b.......p...T...
   2a7e4:	00000071 4a9554aa 00000072 24492929     q....T.Jr...))I$
   2a7f4:	00000073 10104222 00000074 fbffffff     s..."B..t.......
   2a804:	00000075 b5bb777d 00000076 49295556     u...}w..v...VU)I
   2a814:	00000077 00404222 00000078 ffff8056     w..."B@.x...V...
   2a824:	0000007e 00f70000                       ~.......

0002a82c <tmc5031_defaultRegisterAccess>:
   2a82c:	02010103 00000207 00000000 00000000     ................
   2a83c:	00000102 00000000 00000102 00000000     ................
   2a84c:	02010303 02020202 02020202 00000302     ................
   2a85c:	02020202 00010103 01020303 00000001     ................
   2a86c:	02010303 02020202 02020202 00000302     ................
   2a87c:	02020202 00010103 01020303 00000001     ................
   2a88c:	02020202 02020202 01010202 01020203     ................
   2a89c:	02020202 02020202 01010202 01020203     ................

0002a8ac <tmc5031_defaultRegisterResetState>:
	...
   2a96c:	00071703 00000000 00ffffff 00000000     ................
	...
   2a994:	00010000 00000000 00000000 00000000     ................
	...
   2a9ec:	00071703 00000000 00ffffff 00000000     ................
	...
   2aa14:	00010000 00000000 00000000 00000000     ................
	...
   2aa2c:	aaaab554 4a9554aa 24492929 10104222     T....T.J))I$"B..
   2aa3c:	fbffffff b5bb777d 49295556 00404222     ....}w..VU)I"B@.
   2aa4c:	ffff8056 00f70000 00000000 00000000     V...............
   2aa5c:	000101d5 00000000 00000000 00000000     ................
   2aa6c:	aaaab554 4a9554aa 24492929 10104222     T....T.J))I$"B..
   2aa7c:	fbffffff b5bb777d 49295556 00404222     ....}w..VU)I"B@.
   2aa8c:	ffff8056 00f70000 00000000 00000000     V...............
   2aa9c:	000101d5 00000000 00000000 00000000     ................
   2aaac:	00000000                                 .....

0002aab1 <tmc5041_defaultRegisterAccess>:
   2aab1:	02000103 00000201 00000000 00000000     ................
   2aac1:	00000102 00000000 00000102 00000000     ................
   2aad1:	02010303 02020202 02020002 00000302     ................
   2aae1:	00020202 00010103 00000000 00000000     ................
   2aaf1:	02010303 02020202 02020002 00000302     ................
   2ab01:	00020202 00010103 00000000 00000000     ................
   2ab11:	02020202 02020202 01010202 01000203     ................
	...
   2ab29:	01010000 01000203                        ...........

0002ab34 <tmc5062_defaultRegisterAccess>:
   2ab34:	02010103 00000207 00000000 00000000     ................
   2ab44:	00000102 00000000 00000102 00000000     ................
   2ab54:	02010303 02020202 02020202 00000302     ................
   2ab64:	02020202 00010103 01020303 00000001     ................
   2ab74:	02010303 02020202 02020202 00000302     ................
   2ab84:	02020202 00010103 01020303 00000001     ................
   2ab94:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
   2aba4:	42424242 42424242 01014242 01020203     BBBBBBBBBB......

0002abb4 <tmc5062_RegisterConstants>:
   2abb4:	00000060 aaaab554 00000061 4a9554aa     `...T...a....T.J
   2abc4:	00000062 24492929 00000063 10104222     b...))I$c..."B..
   2abd4:	00000064 fbffffff 00000065 b5bb777d     d.......e...}w..
   2abe4:	00000066 49295556 00000067 00404222     f...VU)Ig..."B@.
   2abf4:	00000068 ffff8056 00000069 00f70000     h...V...i.......
   2ac04:	00000070 aaaab554 00000071 4a9554aa     p...T...q....T.J
   2ac14:	00000072 24492929 00000073 10104222     r...))I$s..."B..
   2ac24:	00000074 fbffffff 00000075 b5bb777d     t.......u...}w..
   2ac34:	00000076 49295556 00000077 00404222     v...VU)Iw..."B@.
   2ac44:	00000078 ffff8056 00000079 00f70000     x...V...y.......
   2ac54:	00000000                                 .....

0002ac59 <tmc5072_defaultRegisterAccess>:
   2ac59:	02010103 00000213 00000000 00000000     ................
   2ac69:	00000102 00000000 00000102 00000000     ................
   2ac79:	02010303 02020202 02020002 00000302     ................
   2ac89:	02020202 00010103 01020303 00000001     ................
   2ac99:	02010303 02020202 02020002 00000302     ................
   2aca9:	02020202 00010103 01020303 00000001     ................
   2acb9:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
	...
   2acd1:	01010000 01020203                        ...........

0002acdc <tmc5072_RegisterConstants>:
   2acdc:	00000060 aaaab554 00000061 4a9554aa     `...T...a....T.J
   2acec:	00000062 24492929 00000063 10104222     b...))I$c..."B..
   2acfc:	00000064 fbffffff 00000065 b5bb777d     d.......e...}w..
   2ad0c:	00000066 49295556 00000067 00404222     f...VU)Ig..."B@.
   2ad1c:	00000068 ffff8056 00000069 00f70000     h...V...i.......
   2ad2c:	00000000                                 .....

0002ad31 <tmc5130_defaultRegisterAccess>:
   2ad31:	02012103 00000213 00000000 00000000     .!..............
   2ad41:	02010202 00000202 00000000 00000000     ................
   2ad51:	02010303 02020202 02020002 00000302     ................
   2ad61:	02000000 00012103 21020303 00000001     .....!.....!....
	...
   2ad91:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
   2ada1:	01020142 00000000 00000000 00000000     B...............
   2adb1:	                                         ...

0002adb4 <tmc5130_RegisterConstants>:
   2adb4:	00000060 aaaab554 00000061 4a9554aa     `...T...a....T.J
   2adc4:	00000062 24492929 00000063 10104222     b...))I$c..."B..
   2add4:	00000064 fbffffff 00000065 b5bb777d     d.......e...}w..
   2ade4:	00000066 49295556 00000067 00404222     f...VU)Ig..."B@.
   2adf4:	00000068 ffff8056 00000069 00f70000     h...V...i.......
   2ae04:	00000070 00050480                       p.......

0002ae0c <tmc5160_defaultRegisterAccess>:
   2ae0c:	02010703 01020207 02020201 00000001     ................
   2ae1c:	02010202 00000202 00000000 00000000     ................
   2ae2c:	02010303 02020202 02020002 00000302     ................
   2ae3c:	02000000 00010703 07020303 00000201     ................
	...
   2ae6c:	02020202 02020202 01010202 01020203     ................
   2ae7c:	01010102 00000000 00000000 00000000     ................

0002ae8c <tmc5160_defaultRegisterResetState>:
   2ae8c:	00000008 00000000 00000000 00000000     ................
	...
   2aeb0:	00010606 00080400 00000000 00000000     ................
	...
   2aecc:	00070a03 0000000a 00000000 00000000     ................
	...
   2aef8:	00000001 00000000 00000000 00000000     ................
	...
   2af74:	00010000 00000000 00000000 00000000     ................
	...
   2b00c:	aaaab554 4a9554aa 24492929 10104222     T....T.J))I$"B..
   2b01c:	fbffffff b5bb777d 49295556 00404222     ....}w..VU)I"B@.
   2b02c:	ffff8056 00f70000 00000000 00000000     V...............
   2b03c:	00410153 00000000 00000000 00000000     S.A.............
   2b04c:	c40c001e 00000000 00000000 00000000     ................
	...

0002b08c <tmc5161_defaultRegisterAccess>:
   2b08c:	02011303 01020213 02020201 00000001     ................
   2b09c:	02010202 00000202 00000000 00000000     ................
   2b0ac:	02010303 02020202 02020002 00000302     ................
   2b0bc:	02000000 00011303 13020303 00000201     ................
	...
   2b0ec:	42424242 42424242 01014242 01020203     BBBBBBBBBB......
   2b0fc:	01010142 00000000 00000000 00000000     B...............

0002b10c <g_languages>:
   2b10c:	1fff0b5f 00000004 00000409 0002b170     _...........p...
   2b11c:	0002b180 00000000 00000000 00000000     ................

0002b12c <g_std_descriptors>:
   2b12c:	00000000 1fff0c36 1fff0bf3 00000000     ....6...........
	...

0002b14c <g_std_desc_size>:
   2b14c:	00120000 00000043 00000000 00000000     ....C...........

0002b15c <usb_desc_ep>:
   2b15c:	01020103 02020010 03001000 00100103     ................

0002b16c <g_valid_config_values>:
   2b16c:	00000100                                ....

0002b170 <g_string_descriptors>:
   2b170:	1fff0b5f 1fff0bb9 1fff0b93 1fff0b71     _...........q...

0002b180 <g_string_desc_size>:
   2b180:	22263a04                                .:&"

0002b184 <g_usb_CB>:
   2b184:	00026e1d 00025745 000257d9 00025549     .n..EW...W..IU..
   2b194:	00026955 00026955 00026955 00026955     Ui..Ui..Ui..Ui..
   2b1a4:	00026955 00026955 00026955 00026955     Ui..Ui..Ui..Ui..
   2b1b4:	00026955 00026955 00026955 00026955     Ui..Ui..Ui..Ui..
   2b1c4:	00025abf 00025a51 00025ab1 00025a7d     .Z..QZ...Z..}Z..
   2b1d4:	00025a51 00026955 00025a3d 00025b2d     QZ..Ui..=Z..-[..

0002b1e4 <g_standard_request>:
   2b1e4:	00026be7 00026cb1 00000000 00026cb1     .k...l.......l..
   2b1f4:	00000000 00026ba9 00026bd1 00000000     .....k...k......
   2b204:	00026b15 00026b45 00026da1 00026d81     .k..Ek...m...m..
   2b214:	00026ae9                                .j..

0002b218 <g_validate_request>:
   2b218:	01000101 00000001 00010100 00000000     ................
   2b228:	01010101 00000001 01000101 00010001     ................
   2b238:	00000100 43000001 3000444d 56323130     .......CMD.0012V
   2b248:	00373033                                307.

0002b24c <_global_impure_ptr>:
   2b24c:	1fff0c48                                H...

0002b250 <_init>:
   2b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b252:	bf00      	nop
   2b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b256:	bc08      	pop	{r3}
   2b258:	469e      	mov	lr, r3
   2b25a:	4770      	bx	lr

0002b25c <_fini>:
   2b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b25e:	bf00      	nop
   2b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b262:	bc08      	pop	{r3}
   2b264:	469e      	mov	lr, r3
   2b266:	4770      	bx	lr
