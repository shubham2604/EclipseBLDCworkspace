   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC5160_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	getMeasuredSpeed:
  23              	.LVL0:
  24              	.LFB17:
  25              		.file 1 "boards/TMC5160_eval.c"
   1:boards/TMC5160_eval.c **** #include "Board.h"
   2:boards/TMC5160_eval.c **** #include "tmc/ic/TMC5160/TMC5160.h"
   3:boards/TMC5160_eval.c **** 
   4:boards/TMC5160_eval.c **** #define ERRORS_VM        (1<<0)
   5:boards/TMC5160_eval.c **** #define ERRORS_VM_UNDER  (1<<1)
   6:boards/TMC5160_eval.c **** #define ERRORS_VM_OVER   (1<<2)
   7:boards/TMC5160_eval.c **** 
   8:boards/TMC5160_eval.c **** #define VM_MIN         50   // VM[V/10] min
   9:boards/TMC5160_eval.c **** #define VM_MAX         660  // VM[V/10] max
  10:boards/TMC5160_eval.c **** 
  11:boards/TMC5160_eval.c **** #define DEFAULT_MOTOR  0
  12:boards/TMC5160_eval.c **** 
  13:boards/TMC5160_eval.c **** #define TMC5160_TIMEOUT 50 // UART Timeout in ms
  14:boards/TMC5160_eval.c **** 
  15:boards/TMC5160_eval.c **** static bool vMaxModified = false;
  16:boards/TMC5160_eval.c **** //static uint32_t vMax		   = 1;
  17:boards/TMC5160_eval.c **** 
  18:boards/TMC5160_eval.c **** static bool uart_mode = false;
  19:boards/TMC5160_eval.c **** 
  20:boards/TMC5160_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
  21:boards/TMC5160_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  22:boards/TMC5160_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  23:boards/TMC5160_eval.c **** static uint32_t stop(uint8_t motor);
  24:boards/TMC5160_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  25:boards/TMC5160_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  26:boards/TMC5160_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  27:boards/TMC5160_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  28:boards/TMC5160_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  29:boards/TMC5160_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  30:boards/TMC5160_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value);
  31:boards/TMC5160_eval.c **** 
  32:boards/TMC5160_eval.c **** void tmc5160_writeDatagram(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint
  33:boards/TMC5160_eval.c **** void tmc5160_writeInt(uint8_t motor, uint8_t address, int value);
  34:boards/TMC5160_eval.c **** int tmc5160_readInt(uint8_t motor, uint8_t address);
  35:boards/TMC5160_eval.c **** static void writeDatagram_spi(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, u
  36:boards/TMC5160_eval.c **** static int32_t readInt_spi(uint8_t motor, uint8_t address);
  37:boards/TMC5160_eval.c **** static void writeDatagram_uart(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, 
  38:boards/TMC5160_eval.c **** static int32_t readInt_uart(uint8_t motor, uint8_t address);
  39:boards/TMC5160_eval.c **** 
  40:boards/TMC5160_eval.c **** static void init_comm(TMC_Board_Comm_Mode mode);
  41:boards/TMC5160_eval.c **** 
  42:boards/TMC5160_eval.c **** static void periodicJob(uint32_t tick);
  43:boards/TMC5160_eval.c **** static void checkErrors(uint32_t tick);
  44:boards/TMC5160_eval.c **** static void deInit(void);
  45:boards/TMC5160_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  46:boards/TMC5160_eval.c **** 
  47:boards/TMC5160_eval.c **** static uint8_t reset();
  48:boards/TMC5160_eval.c **** static void enableDriver(DriverState state);
  49:boards/TMC5160_eval.c **** 
  50:boards/TMC5160_eval.c **** static UART_Config *TMC5160_UARTChannel;
  51:boards/TMC5160_eval.c **** static SPIChannelTypeDef *TMC5160_SPIChannel;
  52:boards/TMC5160_eval.c **** static TMC5160TypeDef TMC5160;
  53:boards/TMC5160_eval.c **** static ConfigurationTypeDef *TMC5160_config;
  54:boards/TMC5160_eval.c **** 
  55:boards/TMC5160_eval.c **** // Translate motor number to TMC5130TypeDef
  56:boards/TMC5160_eval.c **** // When using multiple ICs you can map them here
  57:boards/TMC5160_eval.c **** //static inline TMC5160TypeDef *motorToIC(uint8_t motor)
  58:boards/TMC5160_eval.c **** //{
  59:boards/TMC5160_eval.c **** //	UNUSED(motor);
  60:boards/TMC5160_eval.c **** //
  61:boards/TMC5160_eval.c **** //	return &TMC5160;
  62:boards/TMC5160_eval.c **** //}
  63:boards/TMC5160_eval.c **** //
  64:boards/TMC5160_eval.c **** //// Translate channel number to SPI channel
  65:boards/TMC5160_eval.c **** //// When using multiple ICs you can map them here
  66:boards/TMC5160_eval.c **** //static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  67:boards/TMC5160_eval.c **** //{
  68:boards/TMC5160_eval.c **** //	UNUSED(channel);
  69:boards/TMC5160_eval.c **** //
  70:boards/TMC5160_eval.c **** //	return TMC5160_SPIChannel;
  71:boards/TMC5160_eval.c **** //}
  72:boards/TMC5160_eval.c **** //
  73:boards/TMC5160_eval.c **** //// SPI Wrapper for API
  74:boards/TMC5160_eval.c **** //void tmc5160_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  75:boards/TMC5160_eval.c **** //{
  76:boards/TMC5160_eval.c **** //	// Map the channel to the corresponding SPI channel
  77:boards/TMC5160_eval.c **** //	channelToSPI(channel)->readWriteArray(data, length);
  78:boards/TMC5160_eval.c **** //}
  79:boards/TMC5160_eval.c **** 
  80:boards/TMC5160_eval.c **** void tmc5160_writeDatagram(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, uint
  81:boards/TMC5160_eval.c **** {
  82:boards/TMC5160_eval.c **** 	if(uart_mode)
  83:boards/TMC5160_eval.c **** 		writeDatagram_uart(motor, address, x1, x2, x3, x4);
  84:boards/TMC5160_eval.c **** 	else
  85:boards/TMC5160_eval.c **** 		writeDatagram_spi(motor, address, x1, x2, x3, x4);
  86:boards/TMC5160_eval.c **** }
  87:boards/TMC5160_eval.c **** 
  88:boards/TMC5160_eval.c **** void tmc5160_writeInt(uint8_t motor, uint8_t address, int value)
  89:boards/TMC5160_eval.c **** {
  90:boards/TMC5160_eval.c **** 	tmc5160_writeDatagram(motor, address, 0xFF & (value>>24), 0xFF & (value>>16), 0xFF & (value>>8), 0
  91:boards/TMC5160_eval.c **** }
  92:boards/TMC5160_eval.c **** 
  93:boards/TMC5160_eval.c **** int tmc5160_readInt(uint8_t motor, uint8_t address)
  94:boards/TMC5160_eval.c **** {
  95:boards/TMC5160_eval.c **** 	int32_t r = 0;
  96:boards/TMC5160_eval.c **** 	if(uart_mode)
  97:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
  98:boards/TMC5160_eval.c **** 	else
  99:boards/TMC5160_eval.c **** 		r = readInt_spi(motor, address);
 100:boards/TMC5160_eval.c **** 	return r;
 101:boards/TMC5160_eval.c **** }
 102:boards/TMC5160_eval.c **** 
 103:boards/TMC5160_eval.c **** static void writeDatagram_spi(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, u
 104:boards/TMC5160_eval.c **** {
 105:boards/TMC5160_eval.c **** 	UNUSED(motor);
 106:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 107:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(address|0x80, false);
 108:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x1, false);
 109:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x2, false);
 110:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x3, false);
 111:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x4, true);
 112:boards/TMC5160_eval.c **** 
 113:boards/TMC5160_eval.c **** 	int value = x1;
 114:boards/TMC5160_eval.c **** 	value <<= 8;
 115:boards/TMC5160_eval.c **** 	value |= x2;
 116:boards/TMC5160_eval.c **** 	value <<= 8;
 117:boards/TMC5160_eval.c **** 	value |= x3;
 118:boards/TMC5160_eval.c **** 	value <<= 8;
 119:boards/TMC5160_eval.c **** 	value |= x4;
 120:boards/TMC5160_eval.c **** 
 121:boards/TMC5160_eval.c **** 	TMC5160_config->shadowRegister[address] = value;
 122:boards/TMC5160_eval.c **** }
 123:boards/TMC5160_eval.c **** 
 124:boards/TMC5160_eval.c **** static int32_t readInt_spi(uint8_t motor, uint8_t address)
 125:boards/TMC5160_eval.c **** {
 126:boards/TMC5160_eval.c **** 	UNUSED(motor);
 127:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 128:boards/TMC5160_eval.c **** 
 129:boards/TMC5160_eval.c **** 	// Register not readable -> shadow register copy
 130:boards/TMC5160_eval.c **** 	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
 131:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 132:boards/TMC5160_eval.c **** 
 133:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(address, false);
 134:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 135:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 136:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 137:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, true);
 138:boards/TMC5160_eval.c **** 
 139:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(address, false);
 140:boards/TMC5160_eval.c **** 	int value = TMC5160_SPIChannel->readWrite(0, false);
 141:boards/TMC5160_eval.c **** 	value <<= 8;
 142:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 143:boards/TMC5160_eval.c **** 	value <<=	8;
 144:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 145:boards/TMC5160_eval.c **** 	value <<= 8;
 146:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, true);
 147:boards/TMC5160_eval.c **** 
 148:boards/TMC5160_eval.c **** 	return value;
 149:boards/TMC5160_eval.c **** }
 150:boards/TMC5160_eval.c **** 
 151:boards/TMC5160_eval.c **** static void writeDatagram_uart(uint8_t motor, uint8_t address, uint8_t x1, uint8_t x2, uint8_t x3, 
 152:boards/TMC5160_eval.c **** {
 153:boards/TMC5160_eval.c **** 
 154:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 155:boards/TMC5160_eval.c **** 	UNUSED(motor);
 156:boards/TMC5160_eval.c **** 	uint8_t writeData[8];
 157:boards/TMC5160_eval.c **** 
 158:boards/TMC5160_eval.c **** 	writeData[0] = 0x05;                         // Sync byte
 159:boards/TMC5160_eval.c **** 	writeData[1] = 0x00;                         // Slave address
 160:boards/TMC5160_eval.c **** 	writeData[2] = address | TMC5160_WRITE_BIT;  // Register address with write bit set
 161:boards/TMC5160_eval.c **** 	writeData[3] = x1;                           // Register Data
 162:boards/TMC5160_eval.c **** 	writeData[4] = x2;                           // Register Data
 163:boards/TMC5160_eval.c **** 	writeData[5] = x3;                           // Register Data
 164:boards/TMC5160_eval.c **** 	writeData[6] = x4;                           // Register Data
 165:boards/TMC5160_eval.c **** 	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
 166:boards/TMC5160_eval.c **** 
 167:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.clearBuffers();
 168:boards/TMC5160_eval.c **** 	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
 169:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 170:boards/TMC5160_eval.c **** 
 171:boards/TMC5160_eval.c **** 	/* Workaround: Give the UART time to send. Otherwise another write/readRegister can do clearBuffer
 172:boards/TMC5160_eval.c **** 	 * before we're done. This currently is an issue with the IDE when using the Register browser and 
 173:boards/TMC5160_eval.c **** 	 * periodic refresh of values gets requested right after the write request.
 174:boards/TMC5160_eval.c **** 	 */
 175:boards/TMC5160_eval.c **** 	wait(2);
 176:boards/TMC5160_eval.c **** 
 177:boards/TMC5160_eval.c **** 	TMC5160_config->shadowRegister[address] = _8_32(x1, x2, x3, x4);
 178:boards/TMC5160_eval.c **** }
 179:boards/TMC5160_eval.c **** 
 180:boards/TMC5160_eval.c **** static int32_t readInt_uart(uint8_t motor, uint8_t address)
 181:boards/TMC5160_eval.c **** {
 182:boards/TMC5160_eval.c **** 	UNUSED(motor);
 183:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 184:boards/TMC5160_eval.c **** 	uint8_t readData[8], dataRequest[4];
 185:boards/TMC5160_eval.c **** 	uint32_t timeout;
 186:boards/TMC5160_eval.c **** 
 187:boards/TMC5160_eval.c **** 	if(!TMC_IS_READABLE(TMC5160.registerAccess[address]))
 188:boards/TMC5160_eval.c **** 	{	// Register not readable - shadowRegister copy
 189:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 190:boards/TMC5160_eval.c **** 	}
 191:boards/TMC5160_eval.c **** 
 192:boards/TMC5160_eval.c **** 	dataRequest[0] = 0x05;                         // Sync byte
 193:boards/TMC5160_eval.c **** 	dataRequest[1] = 0x00;                         // Slave address
 194:boards/TMC5160_eval.c **** 	dataRequest[2] = address;                      // Register address
 195:boards/TMC5160_eval.c **** 	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
 196:boards/TMC5160_eval.c **** 
 197:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.clearBuffers();
 198:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.txN(dataRequest, ARRAY_SIZE(dataRequest));
 199:boards/TMC5160_eval.c **** 
 200:boards/TMC5160_eval.c **** 	// Wait for reply with timeout limit
 201:boards/TMC5160_eval.c **** 	timeout = systick_getTick();
 202:boards/TMC5160_eval.c **** 	while(TMC5160_UARTChannel->rxtx.bytesAvailable() < ARRAY_SIZE(readData))
 203:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 204:boards/TMC5160_eval.c **** 			return -1;
 205:boards/TMC5160_eval.c **** 
 206:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.rxN(readData, ARRAY_SIZE(readData));
 207:boards/TMC5160_eval.c **** 	// Check if the received data is correct (CRC, Sync, Slave address, Register address)
 208:boards/TMC5160_eval.c **** 	// todo CHECK 2: Only keep CRC check? Should be sufficient for wrong transmissions (LH) #1
 209:boards/TMC5160_eval.c **** 	if(readData[7] != tmc_CRC8(readData, 7, 1) || readData[0] != 0x05 || readData[1] != 0xFF || readDa
 210:boards/TMC5160_eval.c **** 		return -1;
 211:boards/TMC5160_eval.c **** 
 212:boards/TMC5160_eval.c **** 	return _8_32(readData[3], readData[4], readData[5], readData[6]);
 213:boards/TMC5160_eval.c **** }
 214:boards/TMC5160_eval.c **** 
 215:boards/TMC5160_eval.c **** typedef struct
 216:boards/TMC5160_eval.c **** {
 217:boards/TMC5160_eval.c **** 	IOPinTypeDef  *REFL_UC;
 218:boards/TMC5160_eval.c **** 	IOPinTypeDef  *REFR_UC;
 219:boards/TMC5160_eval.c **** 	IOPinTypeDef  *DRV_ENN_CFG6;
 220:boards/TMC5160_eval.c **** 	IOPinTypeDef  *ENCA_DCIN_CFG5;
 221:boards/TMC5160_eval.c **** 	IOPinTypeDef  *ENCB_DCEN_CFG4;
 222:boards/TMC5160_eval.c **** 	IOPinTypeDef  *ENCN_DCO;
 223:boards/TMC5160_eval.c **** 	IOPinTypeDef  *SD_MODE;
 224:boards/TMC5160_eval.c **** 	IOPinTypeDef  *SPI_MODE;
 225:boards/TMC5160_eval.c **** 	IOPinTypeDef  *SWN_DIAG0;
 226:boards/TMC5160_eval.c **** 	IOPinTypeDef  *SWP_DIAG1;
 227:boards/TMC5160_eval.c **** } PinsTypeDef;
 228:boards/TMC5160_eval.c **** 
 229:boards/TMC5160_eval.c **** static PinsTypeDef Pins;
 230:boards/TMC5160_eval.c **** 
 231:boards/TMC5160_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
 232:boards/TMC5160_eval.c **** {
 233:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 234:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 235:boards/TMC5160_eval.c **** 
 236:boards/TMC5160_eval.c **** 	vMaxModified = true;
 237:boards/TMC5160_eval.c **** 
 238:boards/TMC5160_eval.c **** 	// set absolute velocity, independant from direction
 239:boards/TMC5160_eval.c **** 	tmc5160_writeInt(motor, TMC5160_VMAX, abs(velocity));
 240:boards/TMC5160_eval.c **** 
 241:boards/TMC5160_eval.c **** 	// signdedness defines velocity mode direction bit in rampmode register
 242:boards/TMC5160_eval.c **** 	tmc5160_writeDatagram(motor, TMC5160_RAMPMODE, 0, 0, 0, (velocity >= 0)? 1 : 2);
 243:boards/TMC5160_eval.c **** 
 244:boards/TMC5160_eval.c **** 	return TMC_ERROR_NONE;
 245:boards/TMC5160_eval.c **** }
 246:boards/TMC5160_eval.c **** 
 247:boards/TMC5160_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 248:boards/TMC5160_eval.c **** {
 249:boards/TMC5160_eval.c **** 	return rotate(motor, velocity);
 250:boards/TMC5160_eval.c **** }
 251:boards/TMC5160_eval.c **** 
 252:boards/TMC5160_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 253:boards/TMC5160_eval.c **** {
 254:boards/TMC5160_eval.c **** 	return rotate(motor, -velocity);
 255:boards/TMC5160_eval.c **** }
 256:boards/TMC5160_eval.c **** 
 257:boards/TMC5160_eval.c **** static uint32_t stop(uint8_t motor)
 258:boards/TMC5160_eval.c **** {
 259:boards/TMC5160_eval.c **** 	return rotate(motor, 0);
 260:boards/TMC5160_eval.c **** }
 261:boards/TMC5160_eval.c **** 
 262:boards/TMC5160_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 263:boards/TMC5160_eval.c **** {
 264:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 265:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 266:boards/TMC5160_eval.c **** 
 267:boards/TMC5160_eval.c **** 	if(vMaxModified)
 268:boards/TMC5160_eval.c **** 	{
 269:boards/TMC5160_eval.c **** 		tmc5160_writeInt(motor, TMC5160_VMAX, TMC5160_config->shadowRegister[TMC5160_VMAX]);
 270:boards/TMC5160_eval.c **** 		vMaxModified = false;
 271:boards/TMC5160_eval.c **** 	}
 272:boards/TMC5160_eval.c **** 
 273:boards/TMC5160_eval.c **** 	// set position
 274:boards/TMC5160_eval.c **** 	tmc5160_writeInt(motor, TMC5160_XTARGET, position);
 275:boards/TMC5160_eval.c **** 
 276:boards/TMC5160_eval.c **** 	// change to positioning mode
 277:boards/TMC5160_eval.c **** 	tmc5160_writeDatagram(motor, TMC5160_RAMPMODE, 0, 0, 0, 0);
 278:boards/TMC5160_eval.c **** 
 279:boards/TMC5160_eval.c **** 	return TMC_ERROR_NONE;
 280:boards/TMC5160_eval.c **** }
 281:boards/TMC5160_eval.c **** 
 282:boards/TMC5160_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 283:boards/TMC5160_eval.c **** {
 284:boards/TMC5160_eval.c **** 	// determine actual position and add numbers of ticks to move
 285:boards/TMC5160_eval.c **** 	*ticks = tmc5160_readInt(motor, TMC5160_XACTUAL) + *ticks;
 286:boards/TMC5160_eval.c **** 
 287:boards/TMC5160_eval.c **** 	return moveTo(motor, *ticks);
 288:boards/TMC5160_eval.c **** }
 289:boards/TMC5160_eval.c **** 
 290:boards/TMC5160_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 291:boards/TMC5160_eval.c **** {
 292:boards/TMC5160_eval.c **** 	uint32_t buffer;
 293:boards/TMC5160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 294:boards/TMC5160_eval.c **** 
 295:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 296:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 297:boards/TMC5160_eval.c **** 
 298:boards/TMC5160_eval.c **** 	switch(type)
 299:boards/TMC5160_eval.c **** 	{
 300:boards/TMC5160_eval.c **** 	case 0:
 301:boards/TMC5160_eval.c **** 		// Target position
 302:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 303:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XTARGET);
 304:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 305:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XTARGET, *value);
 306:boards/TMC5160_eval.c **** 		}
 307:boards/TMC5160_eval.c **** 		break;
 308:boards/TMC5160_eval.c **** 	case 1:
 309:boards/TMC5160_eval.c **** 		// Actual position
 310:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 311:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XACTUAL);
 312:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 313:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XACTUAL, *value);
 314:boards/TMC5160_eval.c **** 		}
 315:boards/TMC5160_eval.c **** 		break;
 316:boards/TMC5160_eval.c **** 	case 2:
 317:boards/TMC5160_eval.c **** 		// Target speed
 318:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 319:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VMAX);
 320:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 321:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 322:boards/TMC5160_eval.c **** 			vMaxModified = true;
 323:boards/TMC5160_eval.c **** 		}
 324:boards/TMC5160_eval.c **** 		break;
 325:boards/TMC5160_eval.c **** 	case 3:
 326:boards/TMC5160_eval.c **** 		// Actual speed
 327:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 328:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VACTUAL);
 329:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 330:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 331:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 332:boards/TMC5160_eval.c **** 		}
 333:boards/TMC5160_eval.c **** 		break;
 334:boards/TMC5160_eval.c **** 	case 4:
 335:boards/TMC5160_eval.c **** 		// Maximum speed
 336:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 337:boards/TMC5160_eval.c **** 			*value = TMC5160_config->shadowRegister[TMC5160_VMAX];
 338:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 339:boards/TMC5160_eval.c **** 			TMC5160_config->shadowRegister[TMC5160_VMAX] = abs(*value);
 340:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 341:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 342:boards/TMC5160_eval.c **** 		}
 343:boards/TMC5160_eval.c **** 		break;
 344:boards/TMC5160_eval.c **** 	case 5:
 345:boards/TMC5160_eval.c **** 		// Maximum acceleration
 346:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 347:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_AMAX);
 348:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 349:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_AMAX, *value);
 350:boards/TMC5160_eval.c **** 		}
 351:boards/TMC5160_eval.c **** 		break;
 352:boards/TMC5160_eval.c **** 	case 6:
 353:boards/TMC5160_eval.c **** 		// Maximum current
 354:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 355:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
 356:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 357:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, *value);
 358:boards/TMC5160_eval.c **** 		}
 359:boards/TMC5160_eval.c **** 		break;
 360:boards/TMC5160_eval.c **** 	case 7:
 361:boards/TMC5160_eval.c **** 		// Standby current
 362:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 363:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
 364:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 365:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, *value)
 366:boards/TMC5160_eval.c **** 		}
 367:boards/TMC5160_eval.c **** 		break;
 368:boards/TMC5160_eval.c **** 	case 8:
 369:boards/TMC5160_eval.c **** 		// Position reached flag
 370:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 371:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_POSITION_REACHED_MASK, TMC5160_POSI
 372:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 373:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 374:boards/TMC5160_eval.c **** 		}
 375:boards/TMC5160_eval.c **** 		break;
 376:boards/TMC5160_eval.c **** 	case 10:
 377:boards/TMC5160_eval.c **** 		// Right endstop
 378:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 379:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_R_MASK, TMC5160_STATUS
 380:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 381:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 382:boards/TMC5160_eval.c **** 		}
 383:boards/TMC5160_eval.c **** 		break;
 384:boards/TMC5160_eval.c **** 	case 11:
 385:boards/TMC5160_eval.c **** 		// Left endstop
 386:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 387:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_L_MASK, TMC5160_STATUS
 388:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 389:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 390:boards/TMC5160_eval.c **** 		}
 391:boards/TMC5160_eval.c **** 		break;
 392:boards/TMC5160_eval.c **** 	case 12:
 393:boards/TMC5160_eval.c **** 		// Automatic right stop
 394:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 395:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_EN
 396:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 397:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_ENABLE_SH
 398:boards/TMC5160_eval.c **** 		}
 399:boards/TMC5160_eval.c **** 		break;
 400:boards/TMC5160_eval.c **** 	case 13:
 401:boards/TMC5160_eval.c **** 		// Automatic left stop
 402:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 403:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_EN
 404:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 405:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_ENABLE_SH
 406:boards/TMC5160_eval.c **** 		}
 407:boards/TMC5160_eval.c **** 		break;
 408:boards/TMC5160_eval.c **** 	case 14:
 409:boards/TMC5160_eval.c **** 		// SW_MODE Register
 410:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 411:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_SWMODE);
 412:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 413:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_SWMODE, *value);
 414:boards/TMC5160_eval.c **** 		}
 415:boards/TMC5160_eval.c **** 		break;
 416:boards/TMC5160_eval.c **** 	case 15:
 417:boards/TMC5160_eval.c **** 		// Acceleration A1
 418:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 419:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_A1);
 420:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 421:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_A1, *value);
 422:boards/TMC5160_eval.c **** 		}
 423:boards/TMC5160_eval.c **** 		break;
 424:boards/TMC5160_eval.c **** 	case 16:
 425:boards/TMC5160_eval.c **** 		// Velocity V1
 426:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 427:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_V1);
 428:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 429:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_V1, *value);
 430:boards/TMC5160_eval.c **** 		}
 431:boards/TMC5160_eval.c **** 		break;
 432:boards/TMC5160_eval.c **** 	case 17:
 433:boards/TMC5160_eval.c **** 		// Maximum Deceleration
 434:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 435:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_DMAX);
 436:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 437:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_DMAX, *value);
 438:boards/TMC5160_eval.c **** 		}
 439:boards/TMC5160_eval.c **** 		break;
 440:boards/TMC5160_eval.c **** 	case 18:
 441:boards/TMC5160_eval.c **** 		// Deceleration D1
 442:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 443:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_D1);
 444:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 445:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_D1, *value);
 446:boards/TMC5160_eval.c **** 		}
 447:boards/TMC5160_eval.c **** 		break;
 448:boards/TMC5160_eval.c **** 	case 19:
 449:boards/TMC5160_eval.c **** 		// Velocity VSTART
 450:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 451:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTART);
 452:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 453:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VSTART, *value);
 454:boards/TMC5160_eval.c **** 		}
 455:boards/TMC5160_eval.c **** 		break;
 456:boards/TMC5160_eval.c **** 	case 20:
 457:boards/TMC5160_eval.c **** 		// Velocity VSTOP
 458:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 459:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTOP);
 460:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 461:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VSTOP, *value);
 462:boards/TMC5160_eval.c **** 		}
 463:boards/TMC5160_eval.c **** 		break;
 464:boards/TMC5160_eval.c **** 	case 21:
 465:boards/TMC5160_eval.c **** 		// Waiting time after ramp down
 466:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 467:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_TZEROWAIT);
 468:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 469:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TZEROWAIT, *value);
 470:boards/TMC5160_eval.c **** 		}
 471:boards/TMC5160_eval.c **** 		break;
 472:boards/TMC5160_eval.c **** 	case 23:
 473:boards/TMC5160_eval.c **** 		// Speed threshold for high speed mode
 474:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 475:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_THIGH);
 476:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
 477:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 478:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((*value)? *value:1));
 479:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
 480:boards/TMC5160_eval.c **** 		}
 481:boards/TMC5160_eval.c **** 		break;
 482:boards/TMC5160_eval.c **** 	case 24:
 483:boards/TMC5160_eval.c **** 		// Minimum speed for switching to dcStep
 484:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 485:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VDCMIN);
 486:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 487:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VDCMIN, *value);
 488:boards/TMC5160_eval.c **** 		}
 489:boards/TMC5160_eval.c **** 		break;
 490:boards/TMC5160_eval.c **** 	case 27:
 491:boards/TMC5160_eval.c **** 		// High speed chopper mode
 492:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 493:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHI
 494:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 495:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHIFT, *va
 496:boards/TMC5160_eval.c **** 		}
 497:boards/TMC5160_eval.c **** 		break;
 498:boards/TMC5160_eval.c **** 	case 28:
 499:boards/TMC5160_eval.c **** 		// High speed fullstep mode
 500:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 501:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT
 502:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 503:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT, *valu
 504:boards/TMC5160_eval.c **** 		}
 505:boards/TMC5160_eval.c **** 		break;
 506:boards/TMC5160_eval.c **** 	case 29:
 507:boards/TMC5160_eval.c **** 		// Measured Speed
 508:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 509:boards/TMC5160_eval.c **** 			*value = TMC5160.velocity;
 510:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 511:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 512:boards/TMC5160_eval.c **** 		}
 513:boards/TMC5160_eval.c **** 		break;
 514:boards/TMC5160_eval.c **** 	case 33:
 515:boards/TMC5160_eval.c **** 		// Analog I Scale
 516:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 517:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_
 518:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 519:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_SHIFT, 
 520:boards/TMC5160_eval.c **** 		}
 521:boards/TMC5160_eval.c **** 		break;
 522:boards/TMC5160_eval.c **** 	case 34:
 523:boards/TMC5160_eval.c **** 		// Internal RSense
 524:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 525:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT)
 526:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 527:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT, *value
 528:boards/TMC5160_eval.c **** 		}
 529:boards/TMC5160_eval.c **** 		break;
 530:boards/TMC5160_eval.c **** 	case 140:
 531:boards/TMC5160_eval.c **** 		// Microstep Resolution
 532:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 533:boards/TMC5160_eval.c **** 			*value = 0x100 >> TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SH
 534:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 535:boards/TMC5160_eval.c **** 			switch(*value)
 536:boards/TMC5160_eval.c **** 			{
 537:boards/TMC5160_eval.c **** 				case 1:    *value = 8;   break;
 538:boards/TMC5160_eval.c **** 				case 2:    *value = 7;   break;
 539:boards/TMC5160_eval.c **** 				case 4:    *value = 6;   break;
 540:boards/TMC5160_eval.c **** 				case 8:    *value = 5;   break;
 541:boards/TMC5160_eval.c **** 				case 16:   *value = 4;   break;
 542:boards/TMC5160_eval.c **** 				case 32:   *value = 3;   break;
 543:boards/TMC5160_eval.c **** 				case 64:   *value = 2;   break;
 544:boards/TMC5160_eval.c **** 				case 128:  *value = 1;   break;
 545:boards/TMC5160_eval.c **** 				case 256:  *value = 0;   break;
 546:boards/TMC5160_eval.c **** 				default:   *value = -1;  break;
 547:boards/TMC5160_eval.c **** 			}
 548:boards/TMC5160_eval.c **** 
 549:boards/TMC5160_eval.c **** 			if(*value != -1)
 550:boards/TMC5160_eval.c **** 			{
 551:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SHIFT, *value);
 552:boards/TMC5160_eval.c **** 			}
 553:boards/TMC5160_eval.c **** 			else
 554:boards/TMC5160_eval.c **** 			{
 555:boards/TMC5160_eval.c **** 				errors |= TMC_ERROR_VALUE;
 556:boards/TMC5160_eval.c **** 			}
 557:boards/TMC5160_eval.c **** 		}
 558:boards/TMC5160_eval.c **** 		break;
 559:boards/TMC5160_eval.c **** 	case 162:
 560:boards/TMC5160_eval.c **** 		// Chopper blank time
 561:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 562:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
 563:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 564:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, *value);
 565:boards/TMC5160_eval.c **** 		}
 566:boards/TMC5160_eval.c **** 		break;
 567:boards/TMC5160_eval.c **** 	case 163:
 568:boards/TMC5160_eval.c **** 		// Constant TOff Mode
 569:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 570:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT);
 571:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 572:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT, *value);
 573:boards/TMC5160_eval.c **** 		}
 574:boards/TMC5160_eval.c **** 		break;
 575:boards/TMC5160_eval.c **** 	case 164:
 576:boards/TMC5160_eval.c **** 		// Disable fast decay comparator
 577:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 578:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT
 579:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 580:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT, *valu
 581:boards/TMC5160_eval.c **** 		}
 582:boards/TMC5160_eval.c **** 		break;
 583:boards/TMC5160_eval.c **** 	case 165:
 584:boards/TMC5160_eval.c **** 		// Chopper hysteresis end / fast decay time
 585:boards/TMC5160_eval.c **** 		buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
 586:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 587:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 588:boards/TMC5160_eval.c **** 			{
 589:boards/TMC5160_eval.c **** 				*value = (buffer >> TMC5160_HEND_SHIFT) & TMC5160_HEND_MASK;
 590:boards/TMC5160_eval.c **** 			}
 591:boards/TMC5160_eval.c **** 			else
 592:boards/TMC5160_eval.c **** 			{
 593:boards/TMC5160_eval.c **** 				*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> TMC5160_TFD_ALL_SHIFT) & TMC5160_TFD_ALL_
 594:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 595:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 596:boards/TMC5160_eval.c **** 			}
 597:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 598:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_CHOPCONF) & (1<<14))
 599:boards/TMC5160_eval.c **** 			{
 600:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HEND_MASK, TMC5160_HEND_SHIFT, *value);
 601:boards/TMC5160_eval.c **** 			}
 602:boards/TMC5160_eval.c **** 			else
 603:boards/TMC5160_eval.c **** 			{
 604:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TFD_3_MASK, TMC5160_TFD_3_SHIFT, (*value 
 605:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TFD_ALL_MASK, TMC5160_TFD_ALL_SHIFT, *val
 606:boards/TMC5160_eval.c **** 			}
 607:boards/TMC5160_eval.c **** 		}
 608:boards/TMC5160_eval.c **** 		break;
 609:boards/TMC5160_eval.c **** 	case 166:
 610:boards/TMC5160_eval.c **** 		// Chopper hysteresis start / sine wave offset
 611:boards/TMC5160_eval.c **** 		buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
 612:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 613:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 614:boards/TMC5160_eval.c **** 			{
 615:boards/TMC5160_eval.c **** 				*value = (buffer >> TMC5160_HSTRT_SHIFT) & TMC5160_HSTRT_MASK;
 616:boards/TMC5160_eval.c **** 			}
 617:boards/TMC5160_eval.c **** 			else
 618:boards/TMC5160_eval.c **** 			{
 619:boards/TMC5160_eval.c **** 				*value = (buffer >> TMC5160_OFFSET_SHIFT) & TMC5160_OFFSET_MASK;
 620:boards/TMC5160_eval.c **** 				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
 621:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 622:boards/TMC5160_eval.c **** 			}
 623:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 624:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 625:boards/TMC5160_eval.c **** 			{
 626:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_HSTRT_MASK, TMC5160_HSTRT_SHIFT, *value);
 627:boards/TMC5160_eval.c **** 			}
 628:boards/TMC5160_eval.c **** 			else
 629:boards/TMC5160_eval.c **** 			{
 630:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_OFFSET_MASK, TMC5160_OFFSET_SHIFT, *value
 631:boards/TMC5160_eval.c **** 			}
 632:boards/TMC5160_eval.c **** 		}
 633:boards/TMC5160_eval.c **** 		break;
 634:boards/TMC5160_eval.c **** 	case 167:
 635:boards/TMC5160_eval.c **** 		// Chopper off time
 636:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 637:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
 638:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 639:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, *value);
 640:boards/TMC5160_eval.c **** 		}
 641:boards/TMC5160_eval.c **** 		break;
 642:boards/TMC5160_eval.c **** 	case 168:
 643:boards/TMC5160_eval.c **** 		// smartEnergy current minimum (SEIMIN)
 644:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 645:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
 646:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 647:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, *value)
 648:boards/TMC5160_eval.c **** 		}
 649:boards/TMC5160_eval.c **** 		break;
 650:boards/TMC5160_eval.c **** 	case 169:
 651:boards/TMC5160_eval.c **** 		// smartEnergy current down step
 652:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 653:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
 654:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 655:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, *value);
 656:boards/TMC5160_eval.c **** 		}
 657:boards/TMC5160_eval.c **** 		break;
 658:boards/TMC5160_eval.c **** 	case 170:
 659:boards/TMC5160_eval.c **** 		// smartEnergy hysteresis
 660:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 661:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
 662:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 663:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, *value);
 664:boards/TMC5160_eval.c **** 		}
 665:boards/TMC5160_eval.c **** 		break;
 666:boards/TMC5160_eval.c **** 	case 171:
 667:boards/TMC5160_eval.c **** 		// smartEnergy current up step
 668:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 669:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT);
 670:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 671:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT, *value);
 672:boards/TMC5160_eval.c **** 		}
 673:boards/TMC5160_eval.c **** 		break;
 674:boards/TMC5160_eval.c **** 	case 172:
 675:boards/TMC5160_eval.c **** 		// smartEnergy hysteresis start
 676:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 677:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT);
 678:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 679:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT, *value);
 680:boards/TMC5160_eval.c **** 		}
 681:boards/TMC5160_eval.c **** 		break;
 682:boards/TMC5160_eval.c **** 	case 173:
 683:boards/TMC5160_eval.c **** 		// stallGuard2 filter enable
 684:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 685:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT);
 686:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 687:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT, *value);
 688:boards/TMC5160_eval.c **** 		}
 689:boards/TMC5160_eval.c **** 		break;
 690:boards/TMC5160_eval.c **** 	case 174:
 691:boards/TMC5160_eval.c **** 		// stallGuard2 threshold
 692:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 693:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
 694:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 695:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 696:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, *value);
 697:boards/TMC5160_eval.c **** 		}
 698:boards/TMC5160_eval.c **** 		break;
 699:boards/TMC5160_eval.c **** 	case 180:
 700:boards/TMC5160_eval.c **** 		// smartEnergy actual current
 701:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 702:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_CS_ACTUAL_MASK, TMC5160_CS_ACTUAL_
 703:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 704:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 705:boards/TMC5160_eval.c **** 		}
 706:boards/TMC5160_eval.c **** 		break;
 707:boards/TMC5160_eval.c **** 	case 181:
 708:boards/TMC5160_eval.c **** 		// smartEnergy stall velocity
 709:boards/TMC5160_eval.c **** 		//this function sort of doubles with 182 but is necessary to allow cross chip compliance
 710:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 711:boards/TMC5160_eval.c **** 			if(TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT))
 712:boards/TMC5160_eval.c **** 			{
 713:boards/TMC5160_eval.c **** 				buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
 714:boards/TMC5160_eval.c **** 				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 715:boards/TMC5160_eval.c **** 			}
 716:boards/TMC5160_eval.c **** 			else
 717:boards/TMC5160_eval.c **** 			{
 718:boards/TMC5160_eval.c **** 				*value = 0;
 719:boards/TMC5160_eval.c **** 			}
 720:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 721:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT, (*value
 722:boards/TMC5160_eval.c **** 
 723:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 724:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 725:boards/TMC5160_eval.c **** 		}
 726:boards/TMC5160_eval.c **** 		break;
 727:boards/TMC5160_eval.c **** 	case 182:
 728:boards/TMC5160_eval.c **** 		// smartEnergy threshold speed
 729:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 730:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
 731:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 732:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 733:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 734:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 735:boards/TMC5160_eval.c **** 		}
 736:boards/TMC5160_eval.c **** 		break;
 737:boards/TMC5160_eval.c **** 	case 184:
 738:boards/TMC5160_eval.c **** 		// Random TOff mode
 739:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 740:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT);
 741:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 742:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT, *value);
 743:boards/TMC5160_eval.c **** 		}
 744:boards/TMC5160_eval.c **** 		break;
 745:boards/TMC5160_eval.c **** 	case 185:
 746:boards/TMC5160_eval.c **** 		// Chopper synchronization
 747:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 748:boards/TMC5160_eval.c **** 			*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> 20) & 0x0F;
 749:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 750:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
 751:boards/TMC5160_eval.c **** 			buffer &= ~(0x0F<<20);
 752:boards/TMC5160_eval.c **** 			buffer |= (*value & 0x0F) << 20;
 753:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_CHOPCONF,buffer);
 754:boards/TMC5160_eval.c **** 		}
 755:boards/TMC5160_eval.c **** 		break;
 756:boards/TMC5160_eval.c **** 	case 186:
 757:boards/TMC5160_eval.c **** 		// PWM threshold speed
 758:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 759:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TPWMTHRS);
 760:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 761:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 762:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 763:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TPWMTHRS, *value);
 764:boards/TMC5160_eval.c **** 		}
 765:boards/TMC5160_eval.c **** 		break;
 766:boards/TMC5160_eval.c **** 	case 187:
 767:boards/TMC5160_eval.c **** 		// PWM gradient
 768:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 769:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIF
 770:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 771:boards/TMC5160_eval.c **** 			// Set gradient
 772:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIFT, *val
 773:boards/TMC5160_eval.c **** 			// Enable/disable stealthChop accordingly
 774:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_EN_PWM_MODE_MASK, TMC5160_EN_PWM_MODE_SHIFT, 
 775:boards/TMC5160_eval.c **** 		}
 776:boards/TMC5160_eval.c **** 		break;
 777:boards/TMC5160_eval.c **** 	case 188:
 778:boards/TMC5160_eval.c **** 		// PWM amplitude
 779:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 780:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_OFS_MASK, TMC5160_PWM_OFS_SHIFT)
 781:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 782:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_GLOBAL_SCALER_MASK, TMC5160_GLOBAL_SCALER_S
 783:boards/TMC5160_eval.c **** 		}
 784:boards/TMC5160_eval.c **** 		break;
 785:boards/TMC5160_eval.c **** 	case 191:
 786:boards/TMC5160_eval.c **** 		// PWM frequency
 787:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 788:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIF
 789:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 790:boards/TMC5160_eval.c **** 			if(*value >= 0 && *value < 4)
 791:boards/TMC5160_eval.c **** 			{
 792:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIFT, *va
 793:boards/TMC5160_eval.c **** 			}
 794:boards/TMC5160_eval.c **** 			else
 795:boards/TMC5160_eval.c **** 			{
 796:boards/TMC5160_eval.c **** 				errors |= TMC_ERROR_VALUE;
 797:boards/TMC5160_eval.c **** 			}
 798:boards/TMC5160_eval.c **** 		}
 799:boards/TMC5160_eval.c **** 		break;
 800:boards/TMC5160_eval.c **** 	case 192:
 801:boards/TMC5160_eval.c **** 		// PWM autoscale
 802:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 803:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTO
 804:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 805:boards/TMC5160_eval.c **** 			if(*value >= 0 && *value < 2)
 806:boards/TMC5160_eval.c **** 			{
 807:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTOSCALE_
 808:boards/TMC5160_eval.c **** 			}
 809:boards/TMC5160_eval.c **** 			else
 810:boards/TMC5160_eval.c **** 			{
 811:boards/TMC5160_eval.c **** 				errors |= TMC_ERROR_VALUE;
 812:boards/TMC5160_eval.c **** 			}
 813:boards/TMC5160_eval.c **** 		}
 814:boards/TMC5160_eval.c **** 		break;
 815:boards/TMC5160_eval.c **** 	case 204:
 816:boards/TMC5160_eval.c **** 		// Freewheeling mode
 817:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 818:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SH
 819:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 820:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SHIFT, *v
 821:boards/TMC5160_eval.c **** 		}
 822:boards/TMC5160_eval.c **** 		break;
 823:boards/TMC5160_eval.c **** 	case 206:
 824:boards/TMC5160_eval.c **** 		// Load value
 825:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 826:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_SG_RESULT_MASK, TMC5160_SG_RESULT_
 827:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 828:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_TYPE;
 829:boards/TMC5160_eval.c **** 		}
 830:boards/TMC5160_eval.c **** 		break;
 831:boards/TMC5160_eval.c **** 	case 209:
 832:boards/TMC5160_eval.c **** 		// Encoder position
 833:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 834:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XENC);
 835:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 836:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XENC, *value);
 837:boards/TMC5160_eval.c **** 		}
 838:boards/TMC5160_eval.c **** 		break;
 839:boards/TMC5160_eval.c **** 	case 210:
 840:boards/TMC5160_eval.c **** 		// Encoder Resolution
 841:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 842:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_ENC_CONST);
 843:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 844:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_ENC_CONST, *value);
 845:boards/TMC5160_eval.c **** 		}
 846:boards/TMC5160_eval.c **** 		break;
 847:boards/TMC5160_eval.c **** 	default:
 848:boards/TMC5160_eval.c **** 		errors |= TMC_ERROR_TYPE;
 849:boards/TMC5160_eval.c **** 		break;
 850:boards/TMC5160_eval.c **** 	}
 851:boards/TMC5160_eval.c **** 	return errors;
 852:boards/TMC5160_eval.c **** }
 853:boards/TMC5160_eval.c **** 
 854:boards/TMC5160_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 855:boards/TMC5160_eval.c **** {
 856:boards/TMC5160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 857:boards/TMC5160_eval.c **** }
 858:boards/TMC5160_eval.c **** 
 859:boards/TMC5160_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 860:boards/TMC5160_eval.c **** {
 861:boards/TMC5160_eval.c **** 	return handleParameter(READ, motor, type, value);
 862:boards/TMC5160_eval.c **** }
 863:boards/TMC5160_eval.c **** 
 864:boards/TMC5160_eval.c **** static uint32_t getMeasuredSpeed(uint8_t motor, int32_t *value)
 865:boards/TMC5160_eval.c **** {
  26              		.loc 1 865 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 866:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
  31              		.loc 1 866 2 view .LVU1
  32              		.loc 1 866 4 is_stmt 0 view .LVU2
  33 0000 18B9     		cbnz	r0, .L3
 867:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 868:boards/TMC5160_eval.c **** 
 869:boards/TMC5160_eval.c **** 	*value = TMC5160.velocity;
  34              		.loc 1 869 2 is_stmt 1 view .LVU3
  35              		.loc 1 869 18 is_stmt 0 view .LVU4
  36 0002 034B     		ldr	r3, .L4
  37              		.loc 1 869 9 view .LVU5
  38 0004 1B68     		ldr	r3, [r3]
  39 0006 0B60     		str	r3, [r1]
 870:boards/TMC5160_eval.c **** 
 871:boards/TMC5160_eval.c **** 	return TMC_ERROR_NONE;
  40              		.loc 1 871 2 is_stmt 1 view .LVU6
  41              		.loc 1 871 9 is_stmt 0 view .LVU7
  42 0008 7047     		bx	lr
  43              	.L3:
 867:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
  44              		.loc 1 867 10 view .LVU8
  45 000a 0820     		movs	r0, #8
  46              	.LVL1:
 872:boards/TMC5160_eval.c **** }
  47              		.loc 1 872 1 view .LVU9
  48 000c 7047     		bx	lr
  49              	.L5:
  50 000e 00BF     		.align	2
  51              	.L4:
  52 0010 00000000 		.word	.LANCHOR0
  53              		.cfi_endproc
  54              	.LFE17:
  56              		.align	1
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu softvfp
  62              	checkErrors:
  63              	.LVL2:
  64              	.LFB21:
 873:boards/TMC5160_eval.c **** 
 874:boards/TMC5160_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 875:boards/TMC5160_eval.c **** {
 876:boards/TMC5160_eval.c **** 	UNUSED(motor);
 877:boards/TMC5160_eval.c **** 	tmc5160_writeInt(DEFAULT_MOTOR, address, value);
 878:boards/TMC5160_eval.c **** }
 879:boards/TMC5160_eval.c **** 
 880:boards/TMC5160_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 881:boards/TMC5160_eval.c **** {
 882:boards/TMC5160_eval.c **** 	UNUSED(motor);
 883:boards/TMC5160_eval.c **** 	*value = tmc5160_readInt(DEFAULT_MOTOR, address);
 884:boards/TMC5160_eval.c **** }
 885:boards/TMC5160_eval.c **** 
 886:boards/TMC5160_eval.c **** static void periodicJob(uint32_t tick)
 887:boards/TMC5160_eval.c **** {
 888:boards/TMC5160_eval.c **** 	for(int motor = 0; motor < TMC5160_MOTORS; motor++)
 889:boards/TMC5160_eval.c **** 	{
 890:boards/TMC5160_eval.c **** 		tmc5160_periodicJob(motor, tick, &TMC5160, TMC5160_config);
 891:boards/TMC5160_eval.c **** 	}
 892:boards/TMC5160_eval.c **** }
 893:boards/TMC5160_eval.c **** 
 894:boards/TMC5160_eval.c **** static void checkErrors(uint32_t tick)
 895:boards/TMC5160_eval.c **** {
  65              		.loc 1 895 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
 896:boards/TMC5160_eval.c **** 	UNUSED(tick);
  70              		.loc 1 896 2 view .LVU11
 897:boards/TMC5160_eval.c **** 	Evalboards.ch1.errors = 0;
  71              		.loc 1 897 2 view .LVU12
  72              		.loc 1 897 24 is_stmt 0 view .LVU13
  73 0014 014B     		ldr	r3, .L7
  74 0016 0022     		movs	r2, #0
  75 0018 9A60     		str	r2, [r3, #8]
 898:boards/TMC5160_eval.c **** }
  76              		.loc 1 898 1 view .LVU14
  77 001a 7047     		bx	lr
  78              	.L8:
  79              		.align	2
  80              	.L7:
  81 001c 00000000 		.word	Evalboards
  82              		.cfi_endproc
  83              	.LFE21:
  85              		.align	1
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	deInit:
  92              	.LFB23:
 899:boards/TMC5160_eval.c **** 
 900:boards/TMC5160_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 901:boards/TMC5160_eval.c **** {
 902:boards/TMC5160_eval.c **** 	uint32_t buffer;
 903:boards/TMC5160_eval.c **** 	uint32_t errors = 0;
 904:boards/TMC5160_eval.c **** 
 905:boards/TMC5160_eval.c **** 	UNUSED(motor);
 906:boards/TMC5160_eval.c **** 
 907:boards/TMC5160_eval.c **** 	switch(type)
 908:boards/TMC5160_eval.c **** 	{
 909:boards/TMC5160_eval.c **** 	case 0:  // simulate reference switches, set high to support external ref swiches
 910:boards/TMC5160_eval.c **** 		/*
 911:boards/TMC5160_eval.c **** 		 * The the TMC5160 ref switch input is pulled high by external resistor an can be pulled low eith
 912:boards/TMC5160_eval.c **** 		 * this µC or external signal. To use external signal make sure the signals from µC are high or
 913:boards/TMC5160_eval.c **** 		 */
 914:boards/TMC5160_eval.c **** 		if(!(*value & ~3))
 915:boards/TMC5160_eval.c **** 		{
 916:boards/TMC5160_eval.c **** 			if(*value & (1<<0))
 917:boards/TMC5160_eval.c **** 			{
 918:boards/TMC5160_eval.c **** 				HAL.IOs->config->toInput(Pins.REFR_UC); // pull up -> set it to floating causes high
 919:boards/TMC5160_eval.c **** 			}
 920:boards/TMC5160_eval.c **** 			else
 921:boards/TMC5160_eval.c **** 			{
 922:boards/TMC5160_eval.c **** 				HAL.IOs->config->toOutput(Pins.REFR_UC);
 923:boards/TMC5160_eval.c **** 				HAL.IOs->config->setLow(Pins.REFR_UC);
 924:boards/TMC5160_eval.c **** 			}
 925:boards/TMC5160_eval.c **** 
 926:boards/TMC5160_eval.c **** 			if(*value & (1<<1))
 927:boards/TMC5160_eval.c **** 			{
 928:boards/TMC5160_eval.c **** 				HAL.IOs->config->toInput(Pins.REFL_UC); // pull up -> set it to floating causes high
 929:boards/TMC5160_eval.c **** 			}
 930:boards/TMC5160_eval.c **** 			else
 931:boards/TMC5160_eval.c **** 			{
 932:boards/TMC5160_eval.c **** 				HAL.IOs->config->toOutput(Pins.REFL_UC);
 933:boards/TMC5160_eval.c **** 				HAL.IOs->config->setLow(Pins.REFL_UC);
 934:boards/TMC5160_eval.c **** 			}
 935:boards/TMC5160_eval.c **** 		}
 936:boards/TMC5160_eval.c **** 		else
 937:boards/TMC5160_eval.c **** 		{
 938:boards/TMC5160_eval.c **** 			errors |= TMC_ERROR_VALUE;
 939:boards/TMC5160_eval.c **** 		}
 940:boards/TMC5160_eval.c **** 		break;
 941:boards/TMC5160_eval.c **** //	case 1:  // set analogue current duty
 942:boards/TMC5160_eval.c **** //		/*
 943:boards/TMC5160_eval.c **** //		 * Current will be defined by analogue *value voltage or current signal. In any case this funct
 944:boards/TMC5160_eval.c **** //		 * will generate a analogue voltage by PWM for up to 50% duty and a switch for the other 50%.
 945:boards/TMC5160_eval.c **** //		 * The reference voltage will be AIN_REF = VCC_IO * *value/20000 with *value = {0..20000}
 946:boards/TMC5160_eval.c **** //		 */
 947:boards/TMC5160_eval.c **** //
 948:boards/TMC5160_eval.c **** //		buffer = (uint32_t) *value;
 949:boards/TMC5160_eval.c **** //
 950:boards/TMC5160_eval.c **** //		if(buffer <= 20000)
 951:boards/TMC5160_eval.c **** //		{
 952:boards/TMC5160_eval.c **** //			if(buffer > 10000)HAL.IOs->config->setHigh(Pins.AIN_REF_SW);
 953:boards/TMC5160_eval.c **** //			else HAL.IOs->config->setLow(Pins.AIN_REF_SW);
 954:boards/TMC5160_eval.c **** //
 955:boards/TMC5160_eval.c **** //			Timer.setDuty(buffer%10001);
 956:boards/TMC5160_eval.c **** //		}
 957:boards/TMC5160_eval.c **** //		else errors |= TMC_ERROR_VALUE;
 958:boards/TMC5160_eval.c **** //		break;
 959:boards/TMC5160_eval.c **** 	case 2:  // Use internal clock
 960:boards/TMC5160_eval.c **** 		/*
 961:boards/TMC5160_eval.c **** 		 * Internel clock will be enabled by calling this function with a *value != 0 and unpower and rep
 962:boards/TMC5160_eval.c **** 		 */
 963:boards/TMC5160_eval.c **** 		if(*value)
 964:boards/TMC5160_eval.c **** 		{
 965:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
 966:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
 967:boards/TMC5160_eval.c **** 		}
 968:boards/TMC5160_eval.c **** 		else
 969:boards/TMC5160_eval.c **** 		{
 970:boards/TMC5160_eval.c **** 			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
 971:boards/TMC5160_eval.c **** 		}
 972:boards/TMC5160_eval.c **** 		break;
 973:boards/TMC5160_eval.c **** 	case 3: // Write/Read SD_MODE pin
 974:boards/TMC5160_eval.c **** 		if(motor)
 975:boards/TMC5160_eval.c **** 		{	// Write
 976:boards/TMC5160_eval.c **** 			// Use Bit 0 here explicitly to allow extension of the UF for more pins if ever needed
 977:boards/TMC5160_eval.c **** 			if(*value & 0x00000001)
 978:boards/TMC5160_eval.c **** 				HAL.IOs->config->setHigh(Pins.SD_MODE);
 979:boards/TMC5160_eval.c **** 			else
 980:boards/TMC5160_eval.c **** 				HAL.IOs->config->setLow(Pins.SD_MODE);
 981:boards/TMC5160_eval.c **** 		}
 982:boards/TMC5160_eval.c **** 		else
 983:boards/TMC5160_eval.c **** 		{	// Read
 984:boards/TMC5160_eval.c **** 			*value = (HAL.IOs->config->isHigh(Pins.SD_MODE))? 1:0;
 985:boards/TMC5160_eval.c **** 		}
 986:boards/TMC5160_eval.c **** 		break;
 987:boards/TMC5160_eval.c **** 	case 4:  // set or release/read ENCB_[DCEN_CFG4]
 988:boards/TMC5160_eval.c **** 		switch(buffer = *value)
 989:boards/TMC5160_eval.c **** 		{
 990:boards/TMC5160_eval.c **** 		case 0:
 991:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 992:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
 993:boards/TMC5160_eval.c **** 			break;
 994:boards/TMC5160_eval.c **** 		case 1:
 995:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
 996:boards/TMC5160_eval.c **** 			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
 997:boards/TMC5160_eval.c **** 			break;
 998:boards/TMC5160_eval.c **** 		default:
 999:boards/TMC5160_eval.c **** 			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
1000:boards/TMC5160_eval.c **** 			buffer = HAL.IOs->config->isHigh(Pins.ENCB_DCEN_CFG4);;
1001:boards/TMC5160_eval.c **** 			break;
1002:boards/TMC5160_eval.c **** 		}
1003:boards/TMC5160_eval.c **** 		*value = buffer;
1004:boards/TMC5160_eval.c **** 		break;
1005:boards/TMC5160_eval.c **** 	case 5:  // read interrupt pin SWN_DIAG0
1006:boards/TMC5160_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.SWN_DIAG0))? 1:0;
1007:boards/TMC5160_eval.c **** 		break;
1008:boards/TMC5160_eval.c **** 	case 6:  // read interrupt pin SWP_DIAG1
1009:boards/TMC5160_eval.c **** 		*value = (HAL.IOs->config->isHigh(Pins.SWP_DIAG1))? 1:0;
1010:boards/TMC5160_eval.c **** 		break;
1011:boards/TMC5160_eval.c **** //	case 7:  // enable single wire interface (SWSEL)
1012:boards/TMC5160_eval.c **** //			if(*value == 1) HAL.IOs->config->setHigh(Pins.SWSEL);
1013:boards/TMC5160_eval.c **** //			else HAL.IOs->config->setLow(Pins.SWSEL);
1014:boards/TMC5160_eval.c **** //		break;
1015:boards/TMC5160_eval.c **** 	case 8: // Enable UART mode
1016:boards/TMC5160_eval.c **** 		uart_mode = ((*value & 1) == 1);
1017:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
1018:boards/TMC5160_eval.c **** 		break;
1019:boards/TMC5160_eval.c **** 	case 9: // Switch between internal (0) / external (1) clock
1020:boards/TMC5160_eval.c **** 		if(*value == 1) {
1021:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
1022:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
1023:boards/TMC5160_eval.c **** 		} else {
1024:boards/TMC5160_eval.c **** 			HAL.IOs->config->reset(&HAL.IOs->pins->CLK16);
1025:boards/TMC5160_eval.c **** 		}
1026:boards/TMC5160_eval.c **** 		break;
1027:boards/TMC5160_eval.c **** 	case 252:
1028:boards/TMC5160_eval.c **** 		if(*value)
1029:boards/TMC5160_eval.c **** 		{
1030:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(Pins.ENCB_DCEN_CFG4);
1031:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
1032:boards/TMC5160_eval.c **** 		}
1033:boards/TMC5160_eval.c **** 		else
1034:boards/TMC5160_eval.c **** 		{
1035:boards/TMC5160_eval.c **** 			HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
1036:boards/TMC5160_eval.c **** 		}
1037:boards/TMC5160_eval.c **** 		break;
1038:boards/TMC5160_eval.c **** 	default:
1039:boards/TMC5160_eval.c **** 		errors |= TMC_ERROR_TYPE;
1040:boards/TMC5160_eval.c **** 		break;
1041:boards/TMC5160_eval.c **** 	}
1042:boards/TMC5160_eval.c **** 	return errors;
1043:boards/TMC5160_eval.c **** }
1044:boards/TMC5160_eval.c **** 
1045:boards/TMC5160_eval.c **** static void deInit(void)
1046:boards/TMC5160_eval.c **** {
  93              		.loc 1 1046 1 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
1047:boards/TMC5160_eval.c **** 	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
  97              		.loc 1 1047 2 view .LVU16
  98              		.loc 1 1047 5 is_stmt 0 view .LVU17
  99 0020 234B     		ldr	r3, .L10
1046:boards/TMC5160_eval.c **** 	HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
 100              		.loc 1 1046 1 view .LVU18
 101 0022 70B5     		push	{r4, r5, r6, lr}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 4, -16
 105              		.cfi_offset 5, -12
 106              		.cfi_offset 6, -8
 107              		.cfi_offset 14, -4
 108              		.loc 1 1047 5 view .LVU19
 109 0024 DD68     		ldr	r5, [r3, #12]
 110              		.loc 1 1047 2 view .LVU20
 111 0026 234C     		ldr	r4, .L10+4
 112              		.loc 1 1047 17 view .LVU21
 113 0028 2B68     		ldr	r3, [r5]
 114              		.loc 1 1047 2 view .LVU22
 115 002a D4F89802 		ldr	r0, [r4, #664]
 116 002e 9B69     		ldr	r3, [r3, #24]
 117 0030 9847     		blx	r3
 118              	.LVL3:
1048:boards/TMC5160_eval.c **** 	HAL.IOs->config->setLow(Pins.SD_MODE);
 119              		.loc 1 1048 2 is_stmt 1 view .LVU23
 120              		.loc 1 1048 17 is_stmt 0 view .LVU24
 121 0032 2B68     		ldr	r3, [r5]
 122              		.loc 1 1048 2 view .LVU25
 123 0034 D4F8A802 		ldr	r0, [r4, #680]
 124 0038 9B69     		ldr	r3, [r3, #24]
 125 003a 9847     		blx	r3
 126              	.LVL4:
1049:boards/TMC5160_eval.c **** 	HAL.IOs->config->setLow(Pins.SPI_MODE);
 127              		.loc 1 1049 2 is_stmt 1 view .LVU26
 128              		.loc 1 1049 17 is_stmt 0 view .LVU27
 129 003c 2B68     		ldr	r3, [r5]
 130              		.loc 1 1049 2 view .LVU28
 131 003e D4F8AC02 		ldr	r0, [r4, #684]
 132 0042 9B69     		ldr	r3, [r3, #24]
 133 0044 9847     		blx	r3
 134              	.LVL5:
1050:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.ENCA_DCIN_CFG5);
 135              		.loc 1 1050 2 is_stmt 1 view .LVU29
 136              		.loc 1 1050 17 is_stmt 0 view .LVU30
 137 0046 2B68     		ldr	r3, [r5]
 138              		.loc 1 1050 2 view .LVU31
 139 0048 D4F89C02 		ldr	r0, [r4, #668]
 140 004c 9B68     		ldr	r3, [r3, #8]
 141 004e 9847     		blx	r3
 142              	.LVL6:
1051:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.ENCB_DCEN_CFG4);
 143              		.loc 1 1051 2 is_stmt 1 view .LVU32
 144              		.loc 1 1051 17 is_stmt 0 view .LVU33
 145 0050 2B68     		ldr	r3, [r5]
 146              		.loc 1 1051 2 view .LVU34
 147 0052 D4F8A002 		ldr	r0, [r4, #672]
 148 0056 9B68     		ldr	r3, [r3, #8]
 149 0058 9847     		blx	r3
 150              	.LVL7:
1052:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.ENCN_DCO);
 151              		.loc 1 1052 2 is_stmt 1 view .LVU35
 152              		.loc 1 1052 17 is_stmt 0 view .LVU36
 153 005a 2B68     		ldr	r3, [r5]
 154              		.loc 1 1052 2 view .LVU37
 155 005c D4F8A402 		ldr	r0, [r4, #676]
 156 0060 9B68     		ldr	r3, [r3, #8]
 157 0062 9847     		blx	r3
 158              	.LVL8:
1053:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.REFL_UC);
 159              		.loc 1 1053 2 is_stmt 1 view .LVU38
 160              		.loc 1 1053 17 is_stmt 0 view .LVU39
 161 0064 2B68     		ldr	r3, [r5]
 162              		.loc 1 1053 2 view .LVU40
 163 0066 D4F89002 		ldr	r0, [r4, #656]
 164 006a 9B68     		ldr	r3, [r3, #8]
 165 006c 9847     		blx	r3
 166              	.LVL9:
1054:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.REFR_UC);
 167              		.loc 1 1054 2 is_stmt 1 view .LVU41
 168              		.loc 1 1054 17 is_stmt 0 view .LVU42
 169 006e 2B68     		ldr	r3, [r5]
 170              		.loc 1 1054 2 view .LVU43
 171 0070 D4F89402 		ldr	r0, [r4, #660]
 172 0074 9B68     		ldr	r3, [r3, #8]
 173 0076 9847     		blx	r3
 174              	.LVL10:
1055:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.SWN_DIAG0);
 175              		.loc 1 1055 2 is_stmt 1 view .LVU44
 176              		.loc 1 1055 17 is_stmt 0 view .LVU45
 177 0078 2B68     		ldr	r3, [r5]
 178              		.loc 1 1055 2 view .LVU46
 179 007a D4F8B002 		ldr	r0, [r4, #688]
 180 007e 9B68     		ldr	r3, [r3, #8]
 181 0080 9847     		blx	r3
 182              	.LVL11:
1056:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.SWP_DIAG1);
 183              		.loc 1 1056 2 is_stmt 1 view .LVU47
 184              		.loc 1 1056 17 is_stmt 0 view .LVU48
 185 0082 2B68     		ldr	r3, [r5]
 186              		.loc 1 1056 2 view .LVU49
 187 0084 D4F8B402 		ldr	r0, [r4, #692]
 188 0088 9B68     		ldr	r3, [r3, #8]
 189 008a 9847     		blx	r3
 190              	.LVL12:
1057:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.DRV_ENN_CFG6);
 191              		.loc 1 1057 2 is_stmt 1 view .LVU50
 192              		.loc 1 1057 17 is_stmt 0 view .LVU51
 193 008c 2B68     		ldr	r3, [r5]
 194              		.loc 1 1057 2 view .LVU52
 195 008e D4F89802 		ldr	r0, [r4, #664]
 196 0092 9B68     		ldr	r3, [r3, #8]
 197 0094 9847     		blx	r3
 198              	.LVL13:
1058:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.SD_MODE);
 199              		.loc 1 1058 2 is_stmt 1 view .LVU53
 200              		.loc 1 1058 17 is_stmt 0 view .LVU54
 201 0096 2B68     		ldr	r3, [r5]
 202              		.loc 1 1058 2 view .LVU55
 203 0098 D4F8A802 		ldr	r0, [r4, #680]
 204 009c 9B68     		ldr	r3, [r3, #8]
 205 009e 9847     		blx	r3
 206              	.LVL14:
1059:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.SPI_MODE);
 207              		.loc 1 1059 2 is_stmt 1 view .LVU56
 208              		.loc 1 1059 17 is_stmt 0 view .LVU57
 209 00a0 2B68     		ldr	r3, [r5]
 210              		.loc 1 1059 2 view .LVU58
 211 00a2 D4F8AC02 		ldr	r0, [r4, #684]
 212 00a6 9B68     		ldr	r3, [r3, #8]
1060:boards/TMC5160_eval.c **** };
 213              		.loc 1 1060 1 view .LVU59
 214 00a8 BDE87040 		pop	{r4, r5, r6, lr}
 215              	.LCFI1:
 216              		.cfi_restore 14
 217              		.cfi_restore 6
 218              		.cfi_restore 5
 219              		.cfi_restore 4
 220              		.cfi_def_cfa_offset 0
1059:boards/TMC5160_eval.c **** 	HAL.IOs->config->reset(Pins.SPI_MODE);
 221              		.loc 1 1059 2 view .LVU60
 222 00ac 1847     		bx	r3	@ indirect register sibling call
 223              	.LVL15:
 224              	.L11:
 225 00ae 00BF     		.align	2
 226              	.L10:
 227 00b0 00000000 		.word	HAL
 228 00b4 00000000 		.word	.LANCHOR0
 229              		.cfi_endproc
 230              	.LFE23:
 232              		.align	1
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	periodicJob:
 239              	.LVL16:
 240              	.LFB20:
 887:boards/TMC5160_eval.c **** 	for(int motor = 0; motor < TMC5160_MOTORS; motor++)
 241              		.loc 1 887 1 is_stmt 1 view -0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 888:boards/TMC5160_eval.c **** 	{
 246              		.loc 1 888 2 view .LVU62
 247              	.LBB3:
 888:boards/TMC5160_eval.c **** 	{
 248              		.loc 1 888 6 view .LVU63
 888:boards/TMC5160_eval.c **** 	{
 249              		.loc 1 888 21 view .LVU64
 890:boards/TMC5160_eval.c **** 	}
 250              		.loc 1 890 3 view .LVU65
 251 00b8 034A     		ldr	r2, .L13
 252              	.LBE3:
 887:boards/TMC5160_eval.c **** 	for(int motor = 0; motor < TMC5160_MOTORS; motor++)
 253              		.loc 1 887 1 is_stmt 0 view .LVU66
 254 00ba 0146     		mov	r1, r0
 255              	.LBB4:
 890:boards/TMC5160_eval.c **** 	}
 256              		.loc 1 890 3 view .LVU67
 257 00bc D2F8B832 		ldr	r3, [r2, #696]
 258 00c0 0020     		movs	r0, #0
 259              	.LVL17:
 890:boards/TMC5160_eval.c **** 	}
 260              		.loc 1 890 3 view .LVU68
 261 00c2 FFF7FEBF 		b	tmc5160_periodicJob
 262              	.LVL18:
 263              	.L14:
 890:boards/TMC5160_eval.c **** 	}
 264              		.loc 1 890 3 view .LVU69
 265 00c6 00BF     		.align	2
 266              	.L13:
 267 00c8 00000000 		.word	.LANCHOR0
 268              	.LBE4:
 269              		.cfi_endproc
 270              	.LFE20:
 272              		.align	1
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	restore:
 279              	.LFB25:
1061:boards/TMC5160_eval.c **** 
1062:boards/TMC5160_eval.c **** static uint8_t reset()
1063:boards/TMC5160_eval.c **** {
1064:boards/TMC5160_eval.c **** 	if(!tmc5160_readInt(0, TMC5160_VACTUAL))
1065:boards/TMC5160_eval.c **** 		tmc5160_reset(TMC5160_config);
1066:boards/TMC5160_eval.c **** 
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFL_UC);
1068:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
1069:boards/TMC5160_eval.c **** 
1070:boards/TMC5160_eval.c **** 	return 1;
1071:boards/TMC5160_eval.c **** }
1072:boards/TMC5160_eval.c **** 
1073:boards/TMC5160_eval.c **** static uint8_t restore()
1074:boards/TMC5160_eval.c **** {
 280              		.loc 1 1074 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
1075:boards/TMC5160_eval.c **** 	return tmc5160_restore(TMC5160_config);
 285              		.loc 1 1075 2 view .LVU71
 286              		.loc 1 1075 9 is_stmt 0 view .LVU72
 287 00cc 024B     		ldr	r3, .L16
 288 00ce D3F8B802 		ldr	r0, [r3, #696]
 289 00d2 FFF7FEBF 		b	tmc5160_restore
 290              	.LVL19:
 291              	.L17:
 292 00d6 00BF     		.align	2
 293              	.L16:
 294 00d8 00000000 		.word	.LANCHOR0
 295              		.cfi_endproc
 296              	.LFE25:
 298              		.align	1
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu softvfp
 304              	readInt_spi.isra.0:
 305              	.LVL20:
 306              	.LFB30:
 124:boards/TMC5160_eval.c **** {
 307              		.loc 1 124 16 is_stmt 1 view -0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 126:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 311              		.loc 1 126 2 view .LVU74
 127:boards/TMC5160_eval.c **** 
 312              		.loc 1 127 2 view .LVU75
 124:boards/TMC5160_eval.c **** {
 313              		.loc 1 124 16 is_stmt 0 view .LVU76
 314 00dc 38B5     		push	{r3, r4, r5, lr}
 315              	.LCFI2:
 316              		.cfi_def_cfa_offset 16
 317              		.cfi_offset 3, -16
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 5, -8
 320              		.cfi_offset 14, -4
 130:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 321              		.loc 1 130 6 view .LVU77
 322 00de 284C     		ldr	r4, .L21
 127:boards/TMC5160_eval.c **** 
 323              		.loc 1 127 10 view .LVU78
 324 00e0 00F07F05 		and	r5, r0, #127
 325              	.LVL21:
 130:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 326              		.loc 1 130 2 is_stmt 1 view .LVU79
 130:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 327              		.loc 1 130 6 is_stmt 0 view .LVU80
 328 00e4 6319     		adds	r3, r4, r5
 130:boards/TMC5160_eval.c **** 		return TMC5160_config->shadowRegister[address];
 329              		.loc 1 130 4 view .LVU81
 330 00e6 93F80C32 		ldrb	r3, [r3, #524]	@ zero_extendqisi2
 331 00ea DB07     		lsls	r3, r3, #31
 332 00ec 05D4     		bmi	.L19
 131:boards/TMC5160_eval.c **** 
 333              		.loc 1 131 3 is_stmt 1 view .LVU82
 131:boards/TMC5160_eval.c **** 
 334              		.loc 1 131 40 is_stmt 0 view .LVU83
 335 00ee D4F8B802 		ldr	r0, [r4, #696]
 336 00f2 00EB8505 		add	r5, r0, r5, lsl #2
 337              	.LVL22:
 131:boards/TMC5160_eval.c **** 
 338              		.loc 1 131 40 view .LVU84
 339 00f6 6868     		ldr	r0, [r5, #4]
 340              	.L18:
 149:boards/TMC5160_eval.c **** 
 341              		.loc 1 149 1 view .LVU85
 342 00f8 38BD     		pop	{r3, r4, r5, pc}
 343              	.LVL23:
 344              	.L19:
 133:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 345              		.loc 1 133 2 is_stmt 1 view .LVU86
 133:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 346              		.loc 1 133 20 is_stmt 0 view .LVU87
 347 00fa D4F8BC32 		ldr	r3, [r4, #700]
 133:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 348              		.loc 1 133 2 view .LVU88
 349 00fe 0021     		movs	r1, #0
 350 0100 9B68     		ldr	r3, [r3, #8]
 351 0102 2846     		mov	r0, r5
 352 0104 9847     		blx	r3
 353              	.LVL24:
 134:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 354              		.loc 1 134 2 is_stmt 1 view .LVU89
 134:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 355              		.loc 1 134 20 is_stmt 0 view .LVU90
 356 0106 D4F8BC32 		ldr	r3, [r4, #700]
 134:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 357              		.loc 1 134 2 view .LVU91
 358 010a 0021     		movs	r1, #0
 359 010c 9B68     		ldr	r3, [r3, #8]
 360 010e 0846     		mov	r0, r1
 361 0110 9847     		blx	r3
 362              	.LVL25:
 135:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 363              		.loc 1 135 2 is_stmt 1 view .LVU92
 135:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 364              		.loc 1 135 20 is_stmt 0 view .LVU93
 365 0112 D4F8BC32 		ldr	r3, [r4, #700]
 135:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, false);
 366              		.loc 1 135 2 view .LVU94
 367 0116 0021     		movs	r1, #0
 368 0118 9B68     		ldr	r3, [r3, #8]
 369 011a 0846     		mov	r0, r1
 370 011c 9847     		blx	r3
 371              	.LVL26:
 136:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, true);
 372              		.loc 1 136 2 is_stmt 1 view .LVU95
 136:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, true);
 373              		.loc 1 136 20 is_stmt 0 view .LVU96
 374 011e D4F8BC32 		ldr	r3, [r4, #700]
 136:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(0, true);
 375              		.loc 1 136 2 view .LVU97
 376 0122 0021     		movs	r1, #0
 377 0124 9B68     		ldr	r3, [r3, #8]
 378 0126 0846     		mov	r0, r1
 379 0128 9847     		blx	r3
 380              	.LVL27:
 137:boards/TMC5160_eval.c **** 
 381              		.loc 1 137 2 is_stmt 1 view .LVU98
 137:boards/TMC5160_eval.c **** 
 382              		.loc 1 137 20 is_stmt 0 view .LVU99
 383 012a D4F8BC32 		ldr	r3, [r4, #700]
 137:boards/TMC5160_eval.c **** 
 384              		.loc 1 137 2 view .LVU100
 385 012e 0121     		movs	r1, #1
 386 0130 9B68     		ldr	r3, [r3, #8]
 387 0132 0020     		movs	r0, #0
 388 0134 9847     		blx	r3
 389              	.LVL28:
 139:boards/TMC5160_eval.c **** 	int value = TMC5160_SPIChannel->readWrite(0, false);
 390              		.loc 1 139 2 is_stmt 1 view .LVU101
 139:boards/TMC5160_eval.c **** 	int value = TMC5160_SPIChannel->readWrite(0, false);
 391              		.loc 1 139 20 is_stmt 0 view .LVU102
 392 0136 D4F8BC32 		ldr	r3, [r4, #700]
 139:boards/TMC5160_eval.c **** 	int value = TMC5160_SPIChannel->readWrite(0, false);
 393              		.loc 1 139 2 view .LVU103
 394 013a 0021     		movs	r1, #0
 395 013c 9B68     		ldr	r3, [r3, #8]
 396 013e 2846     		mov	r0, r5
 397 0140 9847     		blx	r3
 398              	.LVL29:
 140:boards/TMC5160_eval.c **** 	value <<= 8;
 399              		.loc 1 140 2 is_stmt 1 view .LVU104
 140:boards/TMC5160_eval.c **** 	value <<= 8;
 400              		.loc 1 140 32 is_stmt 0 view .LVU105
 401 0142 D4F8BC32 		ldr	r3, [r4, #700]
 140:boards/TMC5160_eval.c **** 	value <<= 8;
 402              		.loc 1 140 14 view .LVU106
 403 0146 0021     		movs	r1, #0
 404 0148 9B68     		ldr	r3, [r3, #8]
 405 014a 0846     		mov	r0, r1
 406 014c 9847     		blx	r3
 407              	.LVL30:
 141:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 408              		.loc 1 141 2 is_stmt 1 view .LVU107
 142:boards/TMC5160_eval.c **** 	value <<=	8;
 409              		.loc 1 142 29 is_stmt 0 view .LVU108
 410 014e D4F8BC32 		ldr	r3, [r4, #700]
 142:boards/TMC5160_eval.c **** 	value <<=	8;
 411              		.loc 1 142 11 view .LVU109
 412 0152 0021     		movs	r1, #0
 413 0154 9B68     		ldr	r3, [r3, #8]
 141:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 414              		.loc 1 141 8 view .LVU110
 415 0156 0502     		lsls	r5, r0, #8
 416              	.LVL31:
 142:boards/TMC5160_eval.c **** 	value <<=	8;
 417              		.loc 1 142 2 is_stmt 1 view .LVU111
 142:boards/TMC5160_eval.c **** 	value <<=	8;
 418              		.loc 1 142 11 is_stmt 0 view .LVU112
 419 0158 0846     		mov	r0, r1
 420 015a 9847     		blx	r3
 421              	.LVL32:
 144:boards/TMC5160_eval.c **** 	value <<= 8;
 422              		.loc 1 144 29 view .LVU113
 423 015c D4F8BC32 		ldr	r3, [r4, #700]
 144:boards/TMC5160_eval.c **** 	value <<= 8;
 424              		.loc 1 144 11 view .LVU114
 425 0160 0021     		movs	r1, #0
 426 0162 9B68     		ldr	r3, [r3, #8]
 142:boards/TMC5160_eval.c **** 	value <<=	8;
 427              		.loc 1 142 8 view .LVU115
 428 0164 0543     		orrs	r5, r5, r0
 429              	.LVL33:
 143:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 430              		.loc 1 143 2 is_stmt 1 view .LVU116
 144:boards/TMC5160_eval.c **** 	value <<= 8;
 431              		.loc 1 144 11 is_stmt 0 view .LVU117
 432 0166 0846     		mov	r0, r1
 433 0168 9847     		blx	r3
 434              	.LVL34:
 146:boards/TMC5160_eval.c **** 
 435              		.loc 1 146 29 view .LVU118
 436 016a D4F8BC32 		ldr	r3, [r4, #700]
 143:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, false);
 437              		.loc 1 143 8 view .LVU119
 438 016e 2D02     		lsls	r5, r5, #8
 439              	.LVL35:
 144:boards/TMC5160_eval.c **** 	value <<= 8;
 440              		.loc 1 144 2 is_stmt 1 view .LVU120
 144:boards/TMC5160_eval.c **** 	value <<= 8;
 441              		.loc 1 144 8 is_stmt 0 view .LVU121
 442 0170 0543     		orrs	r5, r5, r0
 443              	.LVL36:
 145:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, true);
 444              		.loc 1 145 2 is_stmt 1 view .LVU122
 146:boards/TMC5160_eval.c **** 
 445              		.loc 1 146 11 is_stmt 0 view .LVU123
 446 0172 9B68     		ldr	r3, [r3, #8]
 447 0174 0121     		movs	r1, #1
 448 0176 0020     		movs	r0, #0
 449 0178 9847     		blx	r3
 450              	.LVL37:
 145:boards/TMC5160_eval.c **** 	value |= TMC5160_SPIChannel->readWrite(0, true);
 451              		.loc 1 145 8 view .LVU124
 452 017a 2D02     		lsls	r5, r5, #8
 453              	.LVL38:
 146:boards/TMC5160_eval.c **** 
 454              		.loc 1 146 2 is_stmt 1 view .LVU125
 146:boards/TMC5160_eval.c **** 
 455              		.loc 1 146 8 is_stmt 0 view .LVU126
 456 017c 2843     		orrs	r0, r0, r5
 457              	.LVL39:
 148:boards/TMC5160_eval.c **** }
 458              		.loc 1 148 2 is_stmt 1 view .LVU127
 148:boards/TMC5160_eval.c **** }
 459              		.loc 1 148 9 is_stmt 0 view .LVU128
 460 017e BBE7     		b	.L18
 461              	.L22:
 462              		.align	2
 463              	.L21:
 464 0180 00000000 		.word	.LANCHOR0
 465              		.cfi_endproc
 466              	.LFE30:
 468              		.align	1
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 472              		.fpu softvfp
 474              	enableDriver:
 475              	.LVL40:
 476              	.LFB26:
1076:boards/TMC5160_eval.c **** }
1077:boards/TMC5160_eval.c **** 
1078:boards/TMC5160_eval.c **** static void enableDriver(DriverState state)
1079:boards/TMC5160_eval.c **** {
 477              		.loc 1 1079 1 is_stmt 1 view -0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              		@ link register save eliminated.
1080:boards/TMC5160_eval.c **** 	if(state == DRIVER_USE_GLOBAL_ENABLE)
 482              		.loc 1 1080 2 view .LVU130
 483              		.loc 1 1080 4 is_stmt 0 view .LVU131
 484 0184 0228     		cmp	r0, #2
1081:boards/TMC5160_eval.c **** 		state = Evalboards.driverEnable;
 485              		.loc 1 1081 3 is_stmt 1 view .LVU132
 486              		.loc 1 1081 9 is_stmt 0 view .LVU133
 487 0186 04BF     		itt	eq
 488 0188 0C4B     		ldreq	r3, .L28
 489 018a 93F8F000 		ldrbeq	r0, [r3, #240]	@ zero_extendqisi2
 490              	.LVL41:
1082:boards/TMC5160_eval.c **** 
1083:boards/TMC5160_eval.c **** 	if(state ==  DRIVER_DISABLE)
 491              		.loc 1 1083 2 is_stmt 1 view .LVU134
 492              		.loc 1 1083 4 is_stmt 0 view .LVU135
 493 018e 38B9     		cbnz	r0, .L25
1084:boards/TMC5160_eval.c **** 		HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
 494              		.loc 1 1084 3 is_stmt 1 view .LVU136
 495              		.loc 1 1084 6 is_stmt 0 view .LVU137
 496 0190 0B4B     		ldr	r3, .L28+4
 497              		.loc 1 1084 10 view .LVU138
 498 0192 DB68     		ldr	r3, [r3, #12]
 499              		.loc 1 1084 18 view .LVU139
 500 0194 1B68     		ldr	r3, [r3]
 501              		.loc 1 1084 3 view .LVU140
 502 0196 5B69     		ldr	r3, [r3, #20]
 503              	.L27:
 504              	.LBB7:
 505              	.LBB8:
1085:boards/TMC5160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
1086:boards/TMC5160_eval.c **** 		HAL.IOs->config->setLow(Pins.DRV_ENN_CFG6);
 506              		.loc 1 1086 3 view .LVU141
 507 0198 0A4A     		ldr	r2, .L28+8
 508 019a D2F89802 		ldr	r0, [r2, #664]
 509 019e 1847     		bx	r3	@ indirect register sibling call
 510              	.LVL42:
 511              	.L25:
 512              		.loc 1 1086 3 view .LVU142
 513              	.LBE8:
 514              	.LBE7:
1085:boards/TMC5160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 515              		.loc 1 1085 7 is_stmt 1 view .LVU143
1085:boards/TMC5160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 516              		.loc 1 1085 9 is_stmt 0 view .LVU144
 517 01a0 0128     		cmp	r0, #1
 518 01a2 09D1     		bne	.L23
1085:boards/TMC5160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 519              		.loc 1 1085 49 discriminator 1 view .LVU145
 520 01a4 054B     		ldr	r3, .L28
1085:boards/TMC5160_eval.c **** 	else if((state == DRIVER_ENABLE) && (Evalboards.driverEnable == DRIVER_ENABLE))
 521              		.loc 1 1085 35 discriminator 1 view .LVU146
 522 01a6 93F8F030 		ldrb	r3, [r3, #240]	@ zero_extendqisi2
 523 01aa 012B     		cmp	r3, #1
 524 01ac 04D1     		bne	.L23
 525              	.LBB10:
 526              	.LBI7:
1078:boards/TMC5160_eval.c **** {
 527              		.loc 1 1078 13 is_stmt 1 view .LVU147
 528              	.LVL43:
 529              	.LBB9:
 530              		.loc 1 1086 3 view .LVU148
 531              		.loc 1 1086 6 is_stmt 0 view .LVU149
 532 01ae 044B     		ldr	r3, .L28+4
 533              		.loc 1 1086 10 view .LVU150
 534 01b0 DB68     		ldr	r3, [r3, #12]
 535              		.loc 1 1086 18 view .LVU151
 536 01b2 1B68     		ldr	r3, [r3]
 537              		.loc 1 1086 3 view .LVU152
 538 01b4 9B69     		ldr	r3, [r3, #24]
 539 01b6 EFE7     		b	.L27
 540              	.LVL44:
 541              	.L23:
 542              		.loc 1 1086 3 view .LVU153
 543              	.LBE9:
 544              	.LBE10:
1087:boards/TMC5160_eval.c **** }
 545              		.loc 1 1087 1 view .LVU154
 546 01b8 7047     		bx	lr
 547              	.L29:
 548 01ba 00BF     		.align	2
 549              	.L28:
 550 01bc 00000000 		.word	Evalboards
 551 01c0 00000000 		.word	HAL
 552 01c4 00000000 		.word	.LANCHOR0
 553              		.cfi_endproc
 554              	.LFE26:
 556              		.align	1
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu softvfp
 562              	init_comm:
 563              	.LVL45:
 564              	.LFB27:
1088:boards/TMC5160_eval.c **** 
1089:boards/TMC5160_eval.c **** static void init_comm(TMC_Board_Comm_Mode mode)
1090:boards/TMC5160_eval.c **** {
 565              		.loc 1 1090 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
1091:boards/TMC5160_eval.c **** 	static TMC_Board_Comm_Mode old = TMC_COMM_SPI;
 569              		.loc 1 1091 2 view .LVU156
1092:boards/TMC5160_eval.c **** 	switch(mode) {
 570              		.loc 1 1092 2 view .LVU157
 571 01c8 0128     		cmp	r0, #1
1090:boards/TMC5160_eval.c **** 	static TMC_Board_Comm_Mode old = TMC_COMM_SPI;
 572              		.loc 1 1090 1 is_stmt 0 view .LVU158
 573 01ca 70B5     		push	{r4, r5, r6, lr}
 574              	.LCFI3:
 575              		.cfi_def_cfa_offset 16
 576              		.cfi_offset 4, -16
 577              		.cfi_offset 5, -12
 578              		.cfi_offset 6, -8
 579              		.cfi_offset 14, -4
 580 01cc 0F4E     		ldr	r6, .L34
 581 01ce 104C     		ldr	r4, .L34+4
1090:boards/TMC5160_eval.c **** 	static TMC_Board_Comm_Mode old = TMC_COMM_SPI;
 582              		.loc 1 1090 1 view .LVU159
 583 01d0 0546     		mov	r5, r0
 584              		.loc 1 1092 2 view .LVU160
 585 01d2 07D1     		bne	.L31
 586              	.LBB13:
 587              	.LBI13:
1089:boards/TMC5160_eval.c **** {
 588              		.loc 1 1089 13 is_stmt 1 view .LVU161
 589              	.LVL46:
 590              	.LBB14:
1093:boards/TMC5160_eval.c **** 	case TMC_COMM_UART:
1094:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel = HAL.UART;
 591              		.loc 1 1094 3 view .LVU162
 592              		.loc 1 1094 28 is_stmt 0 view .LVU163
 593 01d4 F36A     		ldr	r3, [r6, #44]
 594              		.loc 1 1094 23 view .LVU164
 595 01d6 C4F8C032 		str	r3, [r4, #704]
1095:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.init();
 596              		.loc 1 1095 3 is_stmt 1 view .LVU165
 597 01da 5B68     		ldr	r3, [r3, #4]
 598 01dc 9847     		blx	r3
 599              	.LVL47:
1096:boards/TMC5160_eval.c **** 		old = TMC_COMM_UART;
 600              		.loc 1 1096 3 view .LVU166
 601              		.loc 1 1096 7 is_stmt 0 view .LVU167
 602 01de 84F8C452 		strb	r5, [r4, #708]
1097:boards/TMC5160_eval.c **** 		break;
 603              		.loc 1 1097 3 is_stmt 1 view .LVU168
 604              	.LVL48:
 605              	.L30:
 606              		.loc 1 1097 3 is_stmt 0 view .LVU169
 607              	.LBE14:
 608              	.LBE13:
1098:boards/TMC5160_eval.c **** 	case TMC_COMM_SPI:
1099:boards/TMC5160_eval.c **** 	case TMC_COMM_WLAN: // unused
1100:boards/TMC5160_eval.c **** 	default:
1101:boards/TMC5160_eval.c **** 		if(old == TMC_COMM_UART)
1102:boards/TMC5160_eval.c **** 			TMC5160_UARTChannel->rxtx.deInit();
1103:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel = &HAL.SPI->ch1;
1104:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
1105:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
1106:boards/TMC5160_eval.c **** 		break;
1107:boards/TMC5160_eval.c **** 	}
1108:boards/TMC5160_eval.c **** }
 609              		.loc 1 1108 1 view .LVU170
 610 01e2 70BD     		pop	{r4, r5, r6, pc}
 611              	.LVL49:
 612              	.L31:
1101:boards/TMC5160_eval.c **** 			TMC5160_UARTChannel->rxtx.deInit();
 613              		.loc 1 1101 3 is_stmt 1 view .LVU171
1101:boards/TMC5160_eval.c **** 			TMC5160_UARTChannel->rxtx.deInit();
 614              		.loc 1 1101 5 is_stmt 0 view .LVU172
 615 01e4 94F8C432 		ldrb	r3, [r4, #708]	@ zero_extendqisi2
 616 01e8 012B     		cmp	r3, #1
 617 01ea 03D1     		bne	.L33
1102:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel = &HAL.SPI->ch1;
 618              		.loc 1 1102 4 is_stmt 1 view .LVU173
1102:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel = &HAL.SPI->ch1;
 619              		.loc 1 1102 29 is_stmt 0 view .LVU174
 620 01ec D4F8C032 		ldr	r3, [r4, #704]
1102:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel = &HAL.SPI->ch1;
 621              		.loc 1 1102 4 view .LVU175
 622 01f0 9B68     		ldr	r3, [r3, #8]
 623 01f2 9847     		blx	r3
 624              	.LVL50:
 625              	.L33:
1103:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 626              		.loc 1 1103 3 is_stmt 1 view .LVU176
1104:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
 627              		.loc 1 1104 37 is_stmt 0 view .LVU177
 628 01f4 F368     		ldr	r3, [r6, #12]
1103:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 629              		.loc 1 1103 28 view .LVU178
 630 01f6 3269     		ldr	r2, [r6, #16]
1104:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
 631              		.loc 1 1104 29 view .LVU179
 632 01f8 5B68     		ldr	r3, [r3, #4]
1103:boards/TMC5160_eval.c **** 		TMC5160_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 633              		.loc 1 1103 22 view .LVU180
 634 01fa C4F8BC22 		str	r2, [r4, #700]
1104:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
 635              		.loc 1 1104 3 is_stmt 1 view .LVU181
1104:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
 636              		.loc 1 1104 29 is_stmt 0 view .LVU182
 637 01fe 03F53273 		add	r3, r3, #712
1104:boards/TMC5160_eval.c **** 		old = TMC_COMM_SPI;
 638              		.loc 1 1104 27 view .LVU183
 639 0202 5360     		str	r3, [r2, #4]
1105:boards/TMC5160_eval.c **** 		break;
 640              		.loc 1 1105 3 is_stmt 1 view .LVU184
1105:boards/TMC5160_eval.c **** 		break;
 641              		.loc 1 1105 7 is_stmt 0 view .LVU185
 642 0204 0023     		movs	r3, #0
 643 0206 84F8C432 		strb	r3, [r4, #708]
1106:boards/TMC5160_eval.c **** 	}
 644              		.loc 1 1106 3 is_stmt 1 view .LVU186
 645              		.loc 1 1108 1 is_stmt 0 view .LVU187
 646 020a EAE7     		b	.L30
 647              	.L35:
 648              		.align	2
 649              	.L34:
 650 020c 00000000 		.word	HAL
 651 0210 00000000 		.word	.LANCHOR0
 652              		.cfi_endproc
 653              	.LFE27:
 655              		.align	1
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu softvfp
 661              	userFunction:
 662              	.LVL51:
 663              	.LFB22:
 901:boards/TMC5160_eval.c **** 	uint32_t buffer;
 664              		.loc 1 901 1 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 902:boards/TMC5160_eval.c **** 	uint32_t errors = 0;
 668              		.loc 1 902 2 view .LVU189
 903:boards/TMC5160_eval.c **** 
 669              		.loc 1 903 2 view .LVU190
 905:boards/TMC5160_eval.c **** 
 670              		.loc 1 905 2 view .LVU191
 907:boards/TMC5160_eval.c **** 	{
 671              		.loc 1 907 2 view .LVU192
 672 0214 0928     		cmp	r0, #9
 901:boards/TMC5160_eval.c **** 	uint32_t buffer;
 673              		.loc 1 901 1 is_stmt 0 view .LVU193
 674 0216 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 675              	.LCFI4:
 676              		.cfi_def_cfa_offset 24
 677              		.cfi_offset 3, -24
 678              		.cfi_offset 4, -20
 679              		.cfi_offset 5, -16
 680              		.cfi_offset 6, -12
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 901:boards/TMC5160_eval.c **** 	uint32_t buffer;
 683              		.loc 1 901 1 view .LVU194
 684 0218 0C46     		mov	r4, r1
 685 021a 1546     		mov	r5, r2
 907:boards/TMC5160_eval.c **** 	{
 686              		.loc 1 907 2 view .LVU195
 687 021c 08D8     		bhi	.L37
 688 021e 0928     		cmp	r0, #9
 689 0220 09D8     		bhi	.L61
 690 0222 DFE800F0 		tbb	[pc, r0]
 691              	.LVL52:
 692              	.L40:
 693 0226 0A       		.byte	(.L47-.L40)/2
 694 0227 08       		.byte	(.L61-.L40)/2
 695 0228 34       		.byte	(.L46-.L40)/2
 696 0229 46       		.byte	(.L45-.L40)/2
 697 022a 5C       		.byte	(.L44-.L40)/2
 698 022b 7D       		.byte	(.L43-.L40)/2
 699 022c 8A       		.byte	(.L42-.L40)/2
 700 022d 08       		.byte	(.L61-.L40)/2
 701 022e 92       		.byte	(.L41-.L40)/2
 702 022f 9B       		.byte	(.L39-.L40)/2
 703              		.p2align 1
 704              	.L37:
 907:boards/TMC5160_eval.c **** 	{
 705              		.loc 1 907 2 view .LVU196
 706 0230 FC28     		cmp	r0, #252
 707 0232 00F0A380 		beq	.L48
 708              	.LVL53:
 709              	.L61:
 907:boards/TMC5160_eval.c **** 	{
 710              		.loc 1 907 2 view .LVU197
 711 0236 0424     		movs	r4, #4
 712 0238 18E0     		b	.L36
 713              	.L47:
 914:boards/TMC5160_eval.c **** 		{
 714              		.loc 1 914 3 is_stmt 1 view .LVU198
 914:boards/TMC5160_eval.c **** 		{
 715              		.loc 1 914 8 is_stmt 0 view .LVU199
 716 023a 2A68     		ldr	r2, [r5]
 914:boards/TMC5160_eval.c **** 		{
 717              		.loc 1 914 5 view .LVU200
 718 023c 32F00303 		bics	r3, r2, #3
 719 0240 40F0AD80 		bne	.L62
 916:boards/TMC5160_eval.c **** 			{
 720              		.loc 1 916 4 is_stmt 1 view .LVU201
 721 0244 574B     		ldr	r3, .L71
 722 0246 584E     		ldr	r6, .L71+4
 723 0248 DF68     		ldr	r7, [r3, #12]
 724 024a D6F89402 		ldr	r0, [r6, #660]
 725              	.LVL54:
 916:boards/TMC5160_eval.c **** 			{
 726              		.loc 1 916 4 is_stmt 0 view .LVU202
 727 024e 3B68     		ldr	r3, [r7]
 916:boards/TMC5160_eval.c **** 			{
 728              		.loc 1 916 6 view .LVU203
 729 0250 D207     		lsls	r2, r2, #31
 730 0252 0DD5     		bpl	.L49
 918:boards/TMC5160_eval.c **** 			}
 731              		.loc 1 918 5 is_stmt 1 view .LVU204
 732 0254 1B69     		ldr	r3, [r3, #16]
 733              	.LVL55:
 734              	.L64:
 923:boards/TMC5160_eval.c **** 			}
 735              		.loc 1 923 5 is_stmt 0 view .LVU205
 736 0256 9847     		blx	r3
 737              	.LVL56:
 926:boards/TMC5160_eval.c **** 			{
 738              		.loc 1 926 4 is_stmt 1 view .LVU206
 926:boards/TMC5160_eval.c **** 			{
 739              		.loc 1 926 14 is_stmt 0 view .LVU207
 740 0258 2C68     		ldr	r4, [r5]
 741 025a 3B68     		ldr	r3, [r7]
 742 025c D6F89002 		ldr	r0, [r6, #656]
 926:boards/TMC5160_eval.c **** 			{
 743              		.loc 1 926 6 view .LVU208
 744 0260 14F00204 		ands	r4, r4, #2
 745 0264 0BD0     		beq	.L51
 928:boards/TMC5160_eval.c **** 			}
 746              		.loc 1 928 5 is_stmt 1 view .LVU209
 747 0266 1B69     		ldr	r3, [r3, #16]
 748              	.L66:
 966:boards/TMC5160_eval.c **** 		}
 749              		.loc 1 966 4 is_stmt 0 view .LVU210
 750 0268 9847     		blx	r3
 751              	.LVL57:
 752              	.L68:
 903:boards/TMC5160_eval.c **** 
 753              		.loc 1 903 11 view .LVU211
 754 026a 0024     		movs	r4, #0
 755              	.LVL58:
 756              	.L36:
1043:boards/TMC5160_eval.c **** 
 757              		.loc 1 1043 1 view .LVU212
 758 026c 2046     		mov	r0, r4
 759 026e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 760              	.LVL59:
 761              	.L49:
 922:boards/TMC5160_eval.c **** 				HAL.IOs->config->setLow(Pins.REFR_UC);
 762              		.loc 1 922 5 is_stmt 1 view .LVU213
 763 0270 DB68     		ldr	r3, [r3, #12]
 764 0272 9847     		blx	r3
 765              	.LVL60:
 923:boards/TMC5160_eval.c **** 			}
 766              		.loc 1 923 5 view .LVU214
 923:boards/TMC5160_eval.c **** 			}
 767              		.loc 1 923 20 is_stmt 0 view .LVU215
 768 0274 3B68     		ldr	r3, [r7]
 923:boards/TMC5160_eval.c **** 			}
 769              		.loc 1 923 5 view .LVU216
 770 0276 D6F89402 		ldr	r0, [r6, #660]
 771 027a 9B69     		ldr	r3, [r3, #24]
 772 027c EBE7     		b	.L64
 773              	.L51:
 932:boards/TMC5160_eval.c **** 				HAL.IOs->config->setLow(Pins.REFL_UC);
 774              		.loc 1 932 5 is_stmt 1 view .LVU217
 775 027e DB68     		ldr	r3, [r3, #12]
 776 0280 9847     		blx	r3
 777              	.LVL61:
 933:boards/TMC5160_eval.c **** 			}
 778              		.loc 1 933 5 view .LVU218
 933:boards/TMC5160_eval.c **** 			}
 779              		.loc 1 933 20 is_stmt 0 view .LVU219
 780 0282 3B68     		ldr	r3, [r7]
 933:boards/TMC5160_eval.c **** 			}
 781              		.loc 1 933 5 view .LVU220
 782 0284 D6F89002 		ldr	r0, [r6, #656]
 783 0288 9B69     		ldr	r3, [r3, #24]
 784              	.L69:
1035:boards/TMC5160_eval.c **** 		}
 785              		.loc 1 1035 4 view .LVU221
 786 028a 9847     		blx	r3
 787              	.LVL62:
 788 028c EEE7     		b	.L36
 789              	.LVL63:
 790              	.L46:
 963:boards/TMC5160_eval.c **** 		{
 791              		.loc 1 963 3 is_stmt 1 view .LVU222
 792 028e 454B     		ldr	r3, .L71
 963:boards/TMC5160_eval.c **** 		{
 793              		.loc 1 963 5 is_stmt 0 view .LVU223
 794 0290 2C68     		ldr	r4, [r5]
 795 0292 DE68     		ldr	r6, [r3, #12]
 796 0294 D6E90030 		ldrd	r3, r0, [r6]
 797              	.LVL64:
 963:boards/TMC5160_eval.c **** 		{
 798              		.loc 1 963 5 view .LVU224
 799 0298 00F5F470 		add	r0, r0, #488
 800 029c 3CB1     		cbz	r4, .L52
 965:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
 801              		.loc 1 965 4 is_stmt 1 view .LVU225
 802 029e DB68     		ldr	r3, [r3, #12]
 803 02a0 9847     		blx	r3
 804              	.LVL65:
 966:boards/TMC5160_eval.c **** 		}
 805              		.loc 1 966 4 view .LVU226
 966:boards/TMC5160_eval.c **** 		}
 806              		.loc 1 966 19 is_stmt 0 view .LVU227
 807 02a2 D6E90030 		ldrd	r3, r0, [r6]
 808              	.L67:
 966:boards/TMC5160_eval.c **** 		}
 809              		.loc 1 966 4 view .LVU228
 810 02a6 9B69     		ldr	r3, [r3, #24]
 811 02a8 00F5F470 		add	r0, r0, #488
 812 02ac DCE7     		b	.L66
 813              	.LVL66:
 814              	.L52:
 970:boards/TMC5160_eval.c **** 		}
 815              		.loc 1 970 4 is_stmt 1 view .LVU229
 816 02ae 9B68     		ldr	r3, [r3, #8]
 817 02b0 EBE7     		b	.L69
 818              	.LVL67:
 819              	.L45:
 974:boards/TMC5160_eval.c **** 		{	// Write
 820              		.loc 1 974 3 view .LVU230
 821 02b2 3D4B     		ldr	r3, .L71+4
 822 02b4 D3F8A802 		ldr	r0, [r3, #680]
 823              	.LVL68:
 974:boards/TMC5160_eval.c **** 		{	// Write
 824              		.loc 1 974 3 is_stmt 0 view .LVU231
 825 02b8 3A4B     		ldr	r3, .L71
 826 02ba DB68     		ldr	r3, [r3, #12]
 827 02bc 1B68     		ldr	r3, [r3]
 974:boards/TMC5160_eval.c **** 		{	// Write
 828              		.loc 1 974 5 view .LVU232
 829 02be 39B1     		cbz	r1, .L53
 977:boards/TMC5160_eval.c **** 				HAL.IOs->config->setHigh(Pins.SD_MODE);
 830              		.loc 1 977 4 is_stmt 1 view .LVU233
 977:boards/TMC5160_eval.c **** 				HAL.IOs->config->setHigh(Pins.SD_MODE);
 831              		.loc 1 977 14 is_stmt 0 view .LVU234
 832 02c0 2C68     		ldr	r4, [r5]
 977:boards/TMC5160_eval.c **** 				HAL.IOs->config->setHigh(Pins.SD_MODE);
 833              		.loc 1 977 6 view .LVU235
 834 02c2 14F00104 		ands	r4, r4, #1
 835 02c6 01D0     		beq	.L54
 978:boards/TMC5160_eval.c **** 			else
 836              		.loc 1 978 5 is_stmt 1 view .LVU236
 837 02c8 5B69     		ldr	r3, [r3, #20]
 838 02ca CDE7     		b	.L66
 839              	.L54:
 980:boards/TMC5160_eval.c **** 		}
 840              		.loc 1 980 5 view .LVU237
 841 02cc 9B69     		ldr	r3, [r3, #24]
 842 02ce DCE7     		b	.L69
 843              	.L53:
 984:boards/TMC5160_eval.c **** 		}
 844              		.loc 1 984 4 view .LVU238
 984:boards/TMC5160_eval.c **** 		}
 845              		.loc 1 984 14 is_stmt 0 view .LVU239
 846 02d0 5B6A     		ldr	r3, [r3, #36]
 847 02d2 9847     		blx	r3
 848              	.LVL69:
 984:boards/TMC5160_eval.c **** 		}
 849              		.loc 1 984 55 view .LVU240
 850 02d4 0038     		subs	r0, r0, #0
 851 02d6 18BF     		it	ne
 852 02d8 0120     		movne	r0, #1
 984:boards/TMC5160_eval.c **** 		}
 853              		.loc 1 984 11 view .LVU241
 854 02da 2860     		str	r0, [r5]
 855 02dc C6E7     		b	.L36
 856              	.LVL70:
 857              	.L44:
 988:boards/TMC5160_eval.c **** 		{
 858              		.loc 1 988 3 is_stmt 1 view .LVU242
 859 02de 314B     		ldr	r3, .L71
 860 02e0 314E     		ldr	r6, .L71+4
 861 02e2 DF68     		ldr	r7, [r3, #12]
 988:boards/TMC5160_eval.c **** 		{
 862              		.loc 1 988 19 is_stmt 0 view .LVU243
 863 02e4 2C68     		ldr	r4, [r5]
 864              	.LVL71:
 988:boards/TMC5160_eval.c **** 		{
 865              		.loc 1 988 19 view .LVU244
 866 02e6 3B68     		ldr	r3, [r7]
 867 02e8 D6F8A002 		ldr	r0, [r6, #672]
 868              	.LVL72:
 988:boards/TMC5160_eval.c **** 		{
 869              		.loc 1 988 19 view .LVU245
 870 02ec 54B1     		cbz	r4, .L55
 871 02ee 012C     		cmp	r4, #1
 872 02f0 11D0     		beq	.L56
 999:boards/TMC5160_eval.c **** 			buffer = HAL.IOs->config->isHigh(Pins.ENCB_DCEN_CFG4);;
 873              		.loc 1 999 4 is_stmt 1 view .LVU246
 874 02f2 1B69     		ldr	r3, [r3, #16]
 875 02f4 9847     		blx	r3
 876              	.LVL73:
1000:boards/TMC5160_eval.c **** 			break;
 877              		.loc 1 1000 4 view .LVU247
1000:boards/TMC5160_eval.c **** 			break;
 878              		.loc 1 1000 28 is_stmt 0 view .LVU248
 879 02f6 3B68     		ldr	r3, [r7]
1000:boards/TMC5160_eval.c **** 			break;
 880              		.loc 1 1000 13 view .LVU249
 881 02f8 D6F8A002 		ldr	r0, [r6, #672]
 882 02fc 5B6A     		ldr	r3, [r3, #36]
 883 02fe 9847     		blx	r3
 884              	.LVL74:
 885 0300 0446     		mov	r4, r0
 886              	.LVL75:
1000:boards/TMC5160_eval.c **** 			break;
 887              		.loc 1 1000 58 is_stmt 1 view .LVU250
1001:boards/TMC5160_eval.c **** 		}
 888              		.loc 1 1001 4 view .LVU251
 889 0302 06E0     		b	.L58
 890              	.LVL76:
 891              	.L55:
 991:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
 892              		.loc 1 991 4 view .LVU252
 893 0304 DB68     		ldr	r3, [r3, #12]
 894 0306 9847     		blx	r3
 895              	.LVL77:
 992:boards/TMC5160_eval.c **** 			break;
 896              		.loc 1 992 4 view .LVU253
 992:boards/TMC5160_eval.c **** 			break;
 897              		.loc 1 992 19 is_stmt 0 view .LVU254
 898 0308 3B68     		ldr	r3, [r7]
 992:boards/TMC5160_eval.c **** 			break;
 899              		.loc 1 992 4 view .LVU255
 900 030a 9B69     		ldr	r3, [r3, #24]
 901              	.L65:
 996:boards/TMC5160_eval.c **** 			break;
 902              		.loc 1 996 4 view .LVU256
 903 030c D6F8A002 		ldr	r0, [r6, #672]
 904 0310 9847     		blx	r3
 905              	.LVL78:
 997:boards/TMC5160_eval.c **** 		default:
 906              		.loc 1 997 4 is_stmt 1 view .LVU257
 907              	.L58:
1003:boards/TMC5160_eval.c **** 		break;
 908              		.loc 1 1003 3 view .LVU258
1003:boards/TMC5160_eval.c **** 		break;
 909              		.loc 1 1003 10 is_stmt 0 view .LVU259
 910 0312 2C60     		str	r4, [r5]
1004:boards/TMC5160_eval.c **** 	case 5:  // read interrupt pin SWN_DIAG0
 911              		.loc 1 1004 3 is_stmt 1 view .LVU260
 912 0314 A9E7     		b	.L68
 913              	.LVL79:
 914              	.L56:
 995:boards/TMC5160_eval.c **** 			HAL.IOs->config->setHigh(Pins.ENCB_DCEN_CFG4);
 915              		.loc 1 995 4 view .LVU261
 916 0316 DB68     		ldr	r3, [r3, #12]
 917 0318 9847     		blx	r3
 918              	.LVL80:
 996:boards/TMC5160_eval.c **** 			break;
 919              		.loc 1 996 4 view .LVU262
 996:boards/TMC5160_eval.c **** 			break;
 920              		.loc 1 996 19 is_stmt 0 view .LVU263
 921 031a 3B68     		ldr	r3, [r7]
 996:boards/TMC5160_eval.c **** 			break;
 922              		.loc 1 996 4 view .LVU264
 923 031c 5B69     		ldr	r3, [r3, #20]
 924 031e F5E7     		b	.L65
 925              	.LVL81:
 926              	.L43:
1006:boards/TMC5160_eval.c **** 		break;
 927              		.loc 1 1006 3 is_stmt 1 view .LVU265
1006:boards/TMC5160_eval.c **** 		break;
 928              		.loc 1 1006 16 is_stmt 0 view .LVU266
 929 0320 204B     		ldr	r3, .L71
1006:boards/TMC5160_eval.c **** 		break;
 930              		.loc 1 1006 13 view .LVU267
 931 0322 214A     		ldr	r2, .L71+4
1006:boards/TMC5160_eval.c **** 		break;
 932              		.loc 1 1006 20 view .LVU268
 933 0324 DB68     		ldr	r3, [r3, #12]
1006:boards/TMC5160_eval.c **** 		break;
 934              		.loc 1 1006 13 view .LVU269
 935 0326 D2F8B002 		ldr	r0, [r2, #688]
 936              	.LVL82:
1006:boards/TMC5160_eval.c **** 		break;
 937              		.loc 1 1006 28 view .LVU270
 938 032a 1B68     		ldr	r3, [r3]
1006:boards/TMC5160_eval.c **** 		break;
 939              		.loc 1 1006 13 view .LVU271
 940 032c 5B6A     		ldr	r3, [r3, #36]
 941              	.L70:
1009:boards/TMC5160_eval.c **** 		break;
 942              		.loc 1 1009 13 view .LVU272
 943 032e 9847     		blx	r3
 944              	.LVL83:
1009:boards/TMC5160_eval.c **** 		break;
 945              		.loc 1 1009 56 view .LVU273
 946 0330 0038     		subs	r0, r0, #0
 947 0332 18BF     		it	ne
 948 0334 0120     		movne	r0, #1
1009:boards/TMC5160_eval.c **** 		break;
 949              		.loc 1 1009 10 view .LVU274
 950 0336 2860     		str	r0, [r5]
1010:boards/TMC5160_eval.c **** //	case 7:  // enable single wire interface (SWSEL)
 951              		.loc 1 1010 3 is_stmt 1 view .LVU275
 952 0338 97E7     		b	.L68
 953              	.LVL84:
 954              	.L42:
1009:boards/TMC5160_eval.c **** 		break;
 955              		.loc 1 1009 3 view .LVU276
1009:boards/TMC5160_eval.c **** 		break;
 956              		.loc 1 1009 16 is_stmt 0 view .LVU277
 957 033a 1A4B     		ldr	r3, .L71
1009:boards/TMC5160_eval.c **** 		break;
 958              		.loc 1 1009 13 view .LVU278
 959 033c 1A4A     		ldr	r2, .L71+4
1009:boards/TMC5160_eval.c **** 		break;
 960              		.loc 1 1009 20 view .LVU279
 961 033e DB68     		ldr	r3, [r3, #12]
1009:boards/TMC5160_eval.c **** 		break;
 962              		.loc 1 1009 13 view .LVU280
 963 0340 D2F8B402 		ldr	r0, [r2, #692]
 964              	.LVL85:
1009:boards/TMC5160_eval.c **** 		break;
 965              		.loc 1 1009 28 view .LVU281
 966 0344 1B68     		ldr	r3, [r3]
1009:boards/TMC5160_eval.c **** 		break;
 967              		.loc 1 1009 13 view .LVU282
 968 0346 5B6A     		ldr	r3, [r3, #36]
 969 0348 F1E7     		b	.L70
 970              	.LVL86:
 971              	.L41:
1016:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 972              		.loc 1 1016 3 is_stmt 1 view .LVU283
1016:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 973              		.loc 1 1016 29 is_stmt 0 view .LVU284
 974 034a 2868     		ldr	r0, [r5]
 975              	.LVL87:
1016:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 976              		.loc 1 1016 13 view .LVU285
 977 034c 164B     		ldr	r3, .L71+4
1016:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 978              		.loc 1 1016 29 view .LVU286
 979 034e 00F00100 		and	r0, r0, #1
1016:boards/TMC5160_eval.c **** 		init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 980              		.loc 1 1016 13 view .LVU287
 981 0352 83F8C502 		strb	r0, [r3, #709]
1017:boards/TMC5160_eval.c **** 		break;
 982              		.loc 1 1017 3 is_stmt 1 view .LVU288
 983 0356 FFF737FF 		bl	init_comm
 984              	.LVL88:
1018:boards/TMC5160_eval.c **** 	case 9: // Switch between internal (0) / external (1) clock
 985              		.loc 1 1018 3 view .LVU289
 986 035a 86E7     		b	.L68
 987              	.LVL89:
 988              	.L39:
1020:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
 989              		.loc 1 1020 3 view .LVU290
 990 035c 114B     		ldr	r3, .L71
1020:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
 991              		.loc 1 1020 5 is_stmt 0 view .LVU291
 992 035e 2A68     		ldr	r2, [r5]
 993 0360 DC68     		ldr	r4, [r3, #12]
 994 0362 D4E90030 		ldrd	r3, r0, [r4]
 995              	.LVL90:
1020:boards/TMC5160_eval.c **** 			HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
 996              		.loc 1 1020 5 view .LVU292
 997 0366 012A     		cmp	r2, #1
 998 0368 00F5F470 		add	r0, r0, #488
 999 036c 04D1     		bne	.L59
1021:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
 1000              		.loc 1 1021 4 is_stmt 1 view .LVU293
 1001 036e DB68     		ldr	r3, [r3, #12]
 1002 0370 9847     		blx	r3
 1003              	.LVL91:
1022:boards/TMC5160_eval.c **** 		} else {
 1004              		.loc 1 1022 4 view .LVU294
1022:boards/TMC5160_eval.c **** 		} else {
 1005              		.loc 1 1022 19 is_stmt 0 view .LVU295
 1006 0372 D4E90030 		ldrd	r3, r0, [r4]
 1007 0376 96E7     		b	.L67
 1008              	.LVL92:
 1009              	.L59:
1024:boards/TMC5160_eval.c **** 		}
 1010              		.loc 1 1024 4 is_stmt 1 view .LVU296
 1011 0378 9B68     		ldr	r3, [r3, #8]
 1012 037a 75E7     		b	.L66
 1013              	.LVL93:
 1014              	.L48:
1028:boards/TMC5160_eval.c **** 		{
 1015              		.loc 1 1028 3 view .LVU297
 1016 037c 094B     		ldr	r3, .L71
 1017 037e 0A4E     		ldr	r6, .L71+4
 1018 0380 DF68     		ldr	r7, [r3, #12]
1028:boards/TMC5160_eval.c **** 		{
 1019              		.loc 1 1028 5 is_stmt 0 view .LVU298
 1020 0382 1468     		ldr	r4, [r2]
 1021 0384 3B68     		ldr	r3, [r7]
 1022 0386 D6F8A002 		ldr	r0, [r6, #672]
 1023              	.LVL94:
1028:boards/TMC5160_eval.c **** 		{
 1024              		.loc 1 1028 5 view .LVU299
 1025 038a 34B1     		cbz	r4, .L60
1030:boards/TMC5160_eval.c **** 			HAL.IOs->config->setLow(Pins.ENCB_DCEN_CFG4);
 1026              		.loc 1 1030 4 is_stmt 1 view .LVU300
 1027 038c DB68     		ldr	r3, [r3, #12]
 1028 038e 9847     		blx	r3
 1029              	.LVL95:
1031:boards/TMC5160_eval.c **** 		}
 1030              		.loc 1 1031 4 view .LVU301
1031:boards/TMC5160_eval.c **** 		}
 1031              		.loc 1 1031 19 is_stmt 0 view .LVU302
 1032 0390 3B68     		ldr	r3, [r7]
1031:boards/TMC5160_eval.c **** 		}
 1033              		.loc 1 1031 4 view .LVU303
 1034 0392 D6F8A002 		ldr	r0, [r6, #672]
 1035 0396 9B69     		ldr	r3, [r3, #24]
 1036 0398 66E7     		b	.L66
 1037              	.LVL96:
 1038              	.L60:
1035:boards/TMC5160_eval.c **** 		}
 1039              		.loc 1 1035 4 is_stmt 1 view .LVU304
 1040 039a 1B69     		ldr	r3, [r3, #16]
 1041 039c 75E7     		b	.L69
 1042              	.LVL97:
 1043              	.L62:
 938:boards/TMC5160_eval.c **** 		}
 1044              		.loc 1 938 11 is_stmt 0 view .LVU305
 1045 039e 1024     		movs	r4, #16
 1046              	.LVL98:
1042:boards/TMC5160_eval.c **** }
 1047              		.loc 1 1042 2 is_stmt 1 view .LVU306
1042:boards/TMC5160_eval.c **** }
 1048              		.loc 1 1042 9 is_stmt 0 view .LVU307
 1049 03a0 64E7     		b	.L36
 1050              	.L72:
 1051 03a2 00BF     		.align	2
 1052              	.L71:
 1053 03a4 00000000 		.word	HAL
 1054 03a8 00000000 		.word	.LANCHOR0
 1055              		.cfi_endproc
 1056              	.LFE22:
 1058              		.align	1
 1059              		.syntax unified
 1060              		.thumb
 1061              		.thumb_func
 1062              		.fpu softvfp
 1064              	readInt_uart.isra.0:
 1065              	.LVL99:
 1066              	.LFB34:
 180:boards/TMC5160_eval.c **** {
 1067              		.loc 1 180 16 is_stmt 1 view -0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 16
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 182:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 1071              		.loc 1 182 2 view .LVU309
 183:boards/TMC5160_eval.c **** 	uint8_t readData[8], dataRequest[4];
 1072              		.loc 1 183 2 view .LVU310
 180:boards/TMC5160_eval.c **** {
 1073              		.loc 1 180 16 is_stmt 0 view .LVU311
 1074 03ac 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 1075              	.LCFI5:
 1076              		.cfi_def_cfa_offset 32
 1077              		.cfi_offset 4, -16
 1078              		.cfi_offset 5, -12
 1079              		.cfi_offset 6, -8
 1080              		.cfi_offset 14, -4
 187:boards/TMC5160_eval.c **** 	{	// Register not readable - shadowRegister copy
 1081              		.loc 1 187 6 view .LVU312
 1082 03ae 2C4B     		ldr	r3, .L80
 183:boards/TMC5160_eval.c **** 	uint8_t readData[8], dataRequest[4];
 1083              		.loc 1 183 10 view .LVU313
 1084 03b0 00F07F04 		and	r4, r0, #127
 1085              	.LVL100:
 184:boards/TMC5160_eval.c **** 	uint32_t timeout;
 1086              		.loc 1 184 2 is_stmt 1 view .LVU314
 185:boards/TMC5160_eval.c **** 
 1087              		.loc 1 185 2 view .LVU315
 187:boards/TMC5160_eval.c **** 	{	// Register not readable - shadowRegister copy
 1088              		.loc 1 187 2 view .LVU316
 187:boards/TMC5160_eval.c **** 	{	// Register not readable - shadowRegister copy
 1089              		.loc 1 187 6 is_stmt 0 view .LVU317
 1090 03b4 1A19     		adds	r2, r3, r4
 1091 03b6 1D46     		mov	r5, r3
 187:boards/TMC5160_eval.c **** 	{	// Register not readable - shadowRegister copy
 1092              		.loc 1 187 4 view .LVU318
 1093 03b8 92F80C22 		ldrb	r2, [r2, #524]	@ zero_extendqisi2
 1094 03bc 12F0010F 		tst	r2, #1
 1095 03c0 06D1     		bne	.L74
 189:boards/TMC5160_eval.c **** 	}
 1096              		.loc 1 189 3 is_stmt 1 view .LVU319
 189:boards/TMC5160_eval.c **** 	}
 1097              		.loc 1 189 40 is_stmt 0 view .LVU320
 1098 03c2 D3F8B802 		ldr	r0, [r3, #696]
 1099 03c6 00EB8404 		add	r4, r0, r4, lsl #2
 1100              	.LVL101:
 189:boards/TMC5160_eval.c **** 	}
 1101              		.loc 1 189 40 view .LVU321
 1102 03ca 6068     		ldr	r0, [r4, #4]
 1103              	.L73:
 213:boards/TMC5160_eval.c **** 
 1104              		.loc 1 213 1 view .LVU322
 1105 03cc 04B0     		add	sp, sp, #16
 1106              	.LCFI6:
 1107              		.cfi_remember_state
 1108              		.cfi_def_cfa_offset 16
 1109              		@ sp needed
 1110 03ce 70BD     		pop	{r4, r5, r6, pc}
 1111              	.LVL102:
 1112              	.L74:
 1113              	.LCFI7:
 1114              		.cfi_restore_state
 192:boards/TMC5160_eval.c **** 	dataRequest[1] = 0x00;                         // Slave address
 1115              		.loc 1 192 2 is_stmt 1 view .LVU323
 193:boards/TMC5160_eval.c **** 	dataRequest[2] = address;                      // Register address
 1116              		.loc 1 193 2 view .LVU324
 195:boards/TMC5160_eval.c **** 
 1117              		.loc 1 195 19 is_stmt 0 view .LVU325
 1118 03d0 0122     		movs	r2, #1
 192:boards/TMC5160_eval.c **** 	dataRequest[1] = 0x00;                         // Slave address
 1119              		.loc 1 192 17 view .LVU326
 1120 03d2 0523     		movs	r3, #5
 195:boards/TMC5160_eval.c **** 
 1121              		.loc 1 195 19 view .LVU327
 1122 03d4 0321     		movs	r1, #3
 1123 03d6 01A8     		add	r0, sp, #4
 192:boards/TMC5160_eval.c **** 	dataRequest[1] = 0x00;                         // Slave address
 1124              		.loc 1 192 17 view .LVU328
 1125 03d8 ADF80430 		strh	r3, [sp, #4]	@ movhi
 194:boards/TMC5160_eval.c **** 	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
 1126              		.loc 1 194 2 is_stmt 1 view .LVU329
 194:boards/TMC5160_eval.c **** 	dataRequest[3] = tmc_CRC8(dataRequest, 3, 1);  // Cyclic redundancy check
 1127              		.loc 1 194 17 is_stmt 0 view .LVU330
 1128 03dc 8DF80640 		strb	r4, [sp, #6]
 195:boards/TMC5160_eval.c **** 
 1129              		.loc 1 195 2 is_stmt 1 view .LVU331
 195:boards/TMC5160_eval.c **** 
 1130              		.loc 1 195 19 is_stmt 0 view .LVU332
 1131 03e0 FFF7FEFF 		bl	tmc_CRC8
 1132              	.LVL103:
 197:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.txN(dataRequest, ARRAY_SIZE(dataRequest));
 1133              		.loc 1 197 27 view .LVU333
 1134 03e4 D5F8C032 		ldr	r3, [r5, #704]
 195:boards/TMC5160_eval.c **** 
 1135              		.loc 1 195 17 view .LVU334
 1136 03e8 8DF80700 		strb	r0, [sp, #7]
 197:boards/TMC5160_eval.c **** 	TMC5160_UARTChannel->rxtx.txN(dataRequest, ARRAY_SIZE(dataRequest));
 1137              		.loc 1 197 2 is_stmt 1 view .LVU335
 1138 03ec DB69     		ldr	r3, [r3, #28]
 1139 03ee 9847     		blx	r3
 1140              	.LVL104:
 198:boards/TMC5160_eval.c **** 
 1141              		.loc 1 198 2 view .LVU336
 198:boards/TMC5160_eval.c **** 
 1142              		.loc 1 198 27 is_stmt 0 view .LVU337
 1143 03f0 D5F8C032 		ldr	r3, [r5, #704]
 198:boards/TMC5160_eval.c **** 
 1144              		.loc 1 198 2 view .LVU338
 1145 03f4 0421     		movs	r1, #4
 1146 03f6 5B69     		ldr	r3, [r3, #20]
 1147 03f8 0DEB0100 		add	r0, sp, r1
 1148 03fc 9847     		blx	r3
 1149              	.LVL105:
 201:boards/TMC5160_eval.c **** 	while(TMC5160_UARTChannel->rxtx.bytesAvailable() < ARRAY_SIZE(readData))
 1150              		.loc 1 201 2 is_stmt 1 view .LVU339
 201:boards/TMC5160_eval.c **** 	while(TMC5160_UARTChannel->rxtx.bytesAvailable() < ARRAY_SIZE(readData))
 1151              		.loc 1 201 12 is_stmt 0 view .LVU340
 1152 03fe FFF7FEFF 		bl	systick_getTick
 1153              	.LVL106:
 1154 0402 0646     		mov	r6, r0
 1155              	.LVL107:
 202:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 1156              		.loc 1 202 2 is_stmt 1 view .LVU341
 1157              	.L76:
 202:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 1158              		.loc 1 202 7 view .LVU342
 202:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 1159              		.loc 1 202 33 is_stmt 0 view .LVU343
 1160 0404 D5F8C032 		ldr	r3, [r5, #704]
 202:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 1161              		.loc 1 202 8 view .LVU344
 1162 0408 1B6A     		ldr	r3, [r3, #32]
 1163 040a 9847     		blx	r3
 1164              	.LVL108:
 202:boards/TMC5160_eval.c **** 		if(timeSince(timeout) > TMC5160_TIMEOUT) // Timeout
 1165              		.loc 1 202 7 view .LVU345
 1166 040c 0728     		cmp	r0, #7
 1167 040e 1FD9     		bls	.L77
 206:boards/TMC5160_eval.c **** 	// Check if the received data is correct (CRC, Sync, Slave address, Register address)
 1168              		.loc 1 206 2 is_stmt 1 view .LVU346
 206:boards/TMC5160_eval.c **** 	// Check if the received data is correct (CRC, Sync, Slave address, Register address)
 1169              		.loc 1 206 27 is_stmt 0 view .LVU347
 1170 0410 D5F8C032 		ldr	r3, [r5, #704]
 206:boards/TMC5160_eval.c **** 	// Check if the received data is correct (CRC, Sync, Slave address, Register address)
 1171              		.loc 1 206 2 view .LVU348
 1172 0414 0821     		movs	r1, #8
 1173 0416 9B69     		ldr	r3, [r3, #24]
 1174 0418 0DEB0100 		add	r0, sp, r1
 1175 041c 9847     		blx	r3
 1176              	.LVL109:
 209:boards/TMC5160_eval.c **** 		return -1;
 1177              		.loc 1 209 2 is_stmt 1 view .LVU349
 209:boards/TMC5160_eval.c **** 		return -1;
 1178              		.loc 1 209 20 is_stmt 0 view .LVU350
 1179 041e 0122     		movs	r2, #1
 1180 0420 0721     		movs	r1, #7
 1181 0422 02A8     		add	r0, sp, #8
 209:boards/TMC5160_eval.c **** 		return -1;
 1182              		.loc 1 209 13 view .LVU351
 1183 0424 9DF80F50 		ldrb	r5, [sp, #15]	@ zero_extendqisi2
 209:boards/TMC5160_eval.c **** 		return -1;
 1184              		.loc 1 209 20 view .LVU352
 1185 0428 FFF7FEFF 		bl	tmc_CRC8
 1186              	.LVL110:
 209:boards/TMC5160_eval.c **** 		return -1;
 1187              		.loc 1 209 4 view .LVU353
 1188 042c 8542     		cmp	r5, r0
 1189 042e 14D1     		bne	.L78
 209:boards/TMC5160_eval.c **** 		return -1;
 1190              		.loc 1 209 45 view .LVU354
 1191 0430 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 1192 0434 052B     		cmp	r3, #5
 1193 0436 10D1     		bne	.L78
 209:boards/TMC5160_eval.c **** 		return -1;
 1194              		.loc 1 209 68 view .LVU355
 1195 0438 9DF80930 		ldrb	r3, [sp, #9]	@ zero_extendqisi2
 1196 043c FF2B     		cmp	r3, #255
 1197 043e 0CD1     		bne	.L78
 209:boards/TMC5160_eval.c **** 		return -1;
 1198              		.loc 1 209 91 view .LVU356
 1199 0440 9DF80A30 		ldrb	r3, [sp, #10]	@ zero_extendqisi2
 1200 0444 A342     		cmp	r3, r4
 1201 0446 08D1     		bne	.L78
 212:boards/TMC5160_eval.c **** }
 1202              		.loc 1 212 2 is_stmt 1 view .LVU357
 1203 0448 DDF80B00 		ldr	r0, [sp, #11]	@ unaligned
 1204 044c 00BA     		rev	r0, r0
 212:boards/TMC5160_eval.c **** }
 1205              		.loc 1 212 9 is_stmt 0 view .LVU358
 1206 044e BDE7     		b	.L73
 1207              	.L77:
 203:boards/TMC5160_eval.c **** 			return -1;
 1208              		.loc 1 203 3 is_stmt 1 view .LVU359
 203:boards/TMC5160_eval.c **** 			return -1;
 1209              		.loc 1 203 6 is_stmt 0 view .LVU360
 1210 0450 3046     		mov	r0, r6
 1211 0452 FFF7FEFF 		bl	timeSince
 1212              	.LVL111:
 203:boards/TMC5160_eval.c **** 			return -1;
 1213              		.loc 1 203 5 view .LVU361
 1214 0456 3228     		cmp	r0, #50
 1215 0458 D4D9     		bls	.L76
 1216              	.L78:
 204:boards/TMC5160_eval.c **** 
 1217              		.loc 1 204 11 view .LVU362
 1218 045a 4FF0FF30 		mov	r0, #-1
 1219 045e B5E7     		b	.L73
 1220              	.L81:
 1221              		.align	2
 1222              	.L80:
 1223 0460 00000000 		.word	.LANCHOR0
 1224              		.cfi_endproc
 1225              	.LFE34:
 1227              		.align	1
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1231              		.fpu softvfp
 1233              	tmc5160_readInt.constprop.0:
 1234              	.LVL112:
 1235              	.LFB36:
  93:boards/TMC5160_eval.c **** {
 1236              		.loc 1 93 5 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
  95:boards/TMC5160_eval.c **** 	if(uart_mode)
 1241              		.loc 1 95 2 view .LVU364
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 1242              		.loc 1 96 2 view .LVU365
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 1243              		.loc 1 96 5 is_stmt 0 view .LVU366
 1244 0464 024B     		ldr	r3, .L84
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 1245              		.loc 1 96 4 view .LVU367
 1246 0466 93F8C532 		ldrb	r3, [r3, #709]	@ zero_extendqisi2
 1247 046a 03B1     		cbz	r3, .L83
  97:boards/TMC5160_eval.c **** 	else
 1248              		.loc 1 97 3 is_stmt 1 view .LVU368
  97:boards/TMC5160_eval.c **** 	else
 1249              		.loc 1 97 7 is_stmt 0 view .LVU369
 1250 046c 9EE7     		b	readInt_uart.isra.0
 1251              	.LVL113:
 1252              	.L83:
  99:boards/TMC5160_eval.c **** 	return r;
 1253              		.loc 1 99 3 is_stmt 1 view .LVU370
  99:boards/TMC5160_eval.c **** 	return r;
 1254              		.loc 1 99 7 is_stmt 0 view .LVU371
 1255 046e 35E6     		b	readInt_spi.isra.0
 1256              	.LVL114:
 1257              	.L85:
  99:boards/TMC5160_eval.c **** 	return r;
 1258              		.loc 1 99 7 view .LVU372
 1259              		.align	2
 1260              	.L84:
 1261 0470 00000000 		.word	.LANCHOR0
 1262              		.cfi_endproc
 1263              	.LFE36:
 1265              		.align	1
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu softvfp
 1271              	reset:
 1272              	.LFB24:
1063:boards/TMC5160_eval.c **** 	if(!tmc5160_readInt(0, TMC5160_VACTUAL))
 1273              		.loc 1 1063 1 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
1064:boards/TMC5160_eval.c **** 		tmc5160_reset(TMC5160_config);
 1277              		.loc 1 1064 2 view .LVU374
1063:boards/TMC5160_eval.c **** 	if(!tmc5160_readInt(0, TMC5160_VACTUAL))
 1278              		.loc 1 1063 1 is_stmt 0 view .LVU375
 1279 0474 38B5     		push	{r3, r4, r5, lr}
 1280              	.LCFI8:
 1281              		.cfi_def_cfa_offset 16
 1282              		.cfi_offset 3, -16
 1283              		.cfi_offset 4, -12
 1284              		.cfi_offset 5, -8
 1285              		.cfi_offset 14, -4
1064:boards/TMC5160_eval.c **** 		tmc5160_reset(TMC5160_config);
 1286              		.loc 1 1064 6 view .LVU376
 1287 0476 2220     		movs	r0, #34
 1288 0478 FFF7F4FF 		bl	tmc5160_readInt.constprop.0
 1289              	.LVL115:
 1290 047c 094C     		ldr	r4, .L88
1064:boards/TMC5160_eval.c **** 		tmc5160_reset(TMC5160_config);
 1291              		.loc 1 1064 4 view .LVU377
 1292 047e 18B9     		cbnz	r0, .L87
1065:boards/TMC5160_eval.c **** 
 1293              		.loc 1 1065 3 is_stmt 1 view .LVU378
 1294 0480 D4F8B802 		ldr	r0, [r4, #696]
 1295 0484 FFF7FEFF 		bl	tmc5160_reset
 1296              	.LVL116:
 1297              	.L87:
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1298              		.loc 1 1067 2 view .LVU379
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1299              		.loc 1 1067 5 is_stmt 0 view .LVU380
 1300 0488 074B     		ldr	r3, .L88+4
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1301              		.loc 1 1067 2 view .LVU381
 1302 048a D4F89002 		ldr	r0, [r4, #656]
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1303              		.loc 1 1067 5 view .LVU382
 1304 048e DD68     		ldr	r5, [r3, #12]
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1305              		.loc 1 1067 17 view .LVU383
 1306 0490 2B68     		ldr	r3, [r5]
1067:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 1307              		.loc 1 1067 2 view .LVU384
 1308 0492 1B69     		ldr	r3, [r3, #16]
 1309 0494 9847     		blx	r3
 1310              	.LVL117:
1068:boards/TMC5160_eval.c **** 
 1311              		.loc 1 1068 2 is_stmt 1 view .LVU385
1068:boards/TMC5160_eval.c **** 
 1312              		.loc 1 1068 17 is_stmt 0 view .LVU386
 1313 0496 2B68     		ldr	r3, [r5]
1068:boards/TMC5160_eval.c **** 
 1314              		.loc 1 1068 2 view .LVU387
 1315 0498 D4F89402 		ldr	r0, [r4, #660]
 1316 049c 1B69     		ldr	r3, [r3, #16]
 1317 049e 9847     		blx	r3
 1318              	.LVL118:
1070:boards/TMC5160_eval.c **** }
 1319              		.loc 1 1070 2 is_stmt 1 view .LVU388
1071:boards/TMC5160_eval.c **** 
 1320              		.loc 1 1071 1 is_stmt 0 view .LVU389
 1321 04a0 0120     		movs	r0, #1
 1322 04a2 38BD     		pop	{r3, r4, r5, pc}
 1323              	.L89:
 1324              		.align	2
 1325              	.L88:
 1326 04a4 00000000 		.word	.LANCHOR0
 1327 04a8 00000000 		.word	HAL
 1328              		.cfi_endproc
 1329              	.LFE24:
 1331              		.align	1
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1335              		.fpu softvfp
 1337              	readRegister:
 1338              	.LVL119:
 1339              	.LFB19:
 881:boards/TMC5160_eval.c **** 	UNUSED(motor);
 1340              		.loc 1 881 1 is_stmt 1 view -0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 882:boards/TMC5160_eval.c **** 	*value = tmc5160_readInt(DEFAULT_MOTOR, address);
 1344              		.loc 1 882 2 view .LVU391
 883:boards/TMC5160_eval.c **** }
 1345              		.loc 1 883 2 view .LVU392
 881:boards/TMC5160_eval.c **** 	UNUSED(motor);
 1346              		.loc 1 881 1 is_stmt 0 view .LVU393
 1347 04ac 10B5     		push	{r4, lr}
 1348              	.LCFI9:
 1349              		.cfi_def_cfa_offset 8
 1350              		.cfi_offset 4, -8
 1351              		.cfi_offset 14, -4
 883:boards/TMC5160_eval.c **** }
 1352              		.loc 1 883 11 view .LVU394
 1353 04ae 0846     		mov	r0, r1
 1354              	.LVL120:
 881:boards/TMC5160_eval.c **** 	UNUSED(motor);
 1355              		.loc 1 881 1 view .LVU395
 1356 04b0 1446     		mov	r4, r2
 883:boards/TMC5160_eval.c **** }
 1357              		.loc 1 883 11 view .LVU396
 1358 04b2 FFF7D7FF 		bl	tmc5160_readInt.constprop.0
 1359              	.LVL121:
 883:boards/TMC5160_eval.c **** }
 1360              		.loc 1 883 9 view .LVU397
 1361 04b6 2060     		str	r0, [r4]
 884:boards/TMC5160_eval.c **** 
 1362              		.loc 1 884 1 view .LVU398
 1363 04b8 10BD     		pop	{r4, pc}
 884:boards/TMC5160_eval.c **** 
 1364              		.loc 1 884 1 view .LVU399
 1365              		.cfi_endproc
 1366              	.LFE19:
 1368              		.align	1
 1369              		.global	tmc5160_writeDatagram
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1373              		.fpu softvfp
 1375              	tmc5160_writeDatagram:
 1376              	.LVL122:
 1377              	.LFB1:
  81:boards/TMC5160_eval.c **** 	if(uart_mode)
 1378              		.loc 1 81 1 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 8, pretend = 0, frame = 8
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
  82:boards/TMC5160_eval.c **** 		writeDatagram_uart(motor, address, x1, x2, x3, x4);
 1382              		.loc 1 82 2 view .LVU401
  81:boards/TMC5160_eval.c **** 	if(uart_mode)
 1383              		.loc 1 81 1 is_stmt 0 view .LVU402
 1384 04ba 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1385              	.LCFI10:
 1386              		.cfi_def_cfa_offset 48
 1387              		.cfi_offset 4, -36
 1388              		.cfi_offset 5, -32
 1389              		.cfi_offset 6, -28
 1390              		.cfi_offset 7, -24
 1391              		.cfi_offset 8, -20
 1392              		.cfi_offset 9, -16
 1393              		.cfi_offset 10, -12
 1394              		.cfi_offset 11, -8
 1395              		.cfi_offset 14, -4
  82:boards/TMC5160_eval.c **** 		writeDatagram_uart(motor, address, x1, x2, x3, x4);
 1396              		.loc 1 82 5 view .LVU403
 1397 04be 394D     		ldr	r5, .L96
  81:boards/TMC5160_eval.c **** 	if(uart_mode)
 1398              		.loc 1 81 1 view .LVU404
 1399 04c0 9DF83040 		ldrb	r4, [sp, #48]	@ zero_extendqisi2
  82:boards/TMC5160_eval.c **** 		writeDatagram_uart(motor, address, x1, x2, x3, x4);
 1400              		.loc 1 82 4 view .LVU405
 1401 04c4 95F8C5A2 		ldrb	r10, [r5, #709]	@ zero_extendqisi2
  81:boards/TMC5160_eval.c **** 	if(uart_mode)
 1402              		.loc 1 81 1 view .LVU406
 1403 04c8 9DF83470 		ldrb	r7, [sp, #52]	@ zero_extendqisi2
 1404 04cc 9046     		mov	r8, r2
 1405 04ce 1E46     		mov	r6, r3
 1406 04d0 01F07F09 		and	r9, r1, #127
 1407 04d4 41F08000 		orr	r0, r1, #128
 1408              	.LVL123:
  81:boards/TMC5160_eval.c **** 	if(uart_mode)
 1409              		.loc 1 81 1 view .LVU407
 1410 04d8 AB46     		mov	fp, r5
  82:boards/TMC5160_eval.c **** 		writeDatagram_uart(motor, address, x1, x2, x3, x4);
 1411              		.loc 1 82 4 view .LVU408
 1412 04da BAF1000F 		cmp	r10, #0
 1413 04de 37D0     		beq	.L92
  83:boards/TMC5160_eval.c **** 	else
 1414              		.loc 1 83 3 is_stmt 1 view .LVU409
 1415              	.LVL124:
 1416              	.LBB20:
 1417              	.LBI20:
 151:boards/TMC5160_eval.c **** {
 1418              		.loc 1 151 13 view .LVU410
 1419              	.LBB21:
 154:boards/TMC5160_eval.c **** 	UNUSED(motor);
 1420              		.loc 1 154 2 view .LVU411
 155:boards/TMC5160_eval.c **** 	uint8_t writeData[8];
 1421              		.loc 1 155 2 view .LVU412
 156:boards/TMC5160_eval.c **** 
 1422              		.loc 1 156 2 view .LVU413
 158:boards/TMC5160_eval.c **** 	writeData[1] = 0x00;                         // Slave address
 1423              		.loc 1 158 2 view .LVU414
 159:boards/TMC5160_eval.c **** 	writeData[2] = address | TMC5160_WRITE_BIT;  // Register address with write bit set
 1424              		.loc 1 159 2 view .LVU415
 158:boards/TMC5160_eval.c **** 	writeData[1] = 0x00;                         // Slave address
 1425              		.loc 1 158 15 is_stmt 0 view .LVU416
 1426 04e0 0523     		movs	r3, #5
 1427              	.LVL125:
 160:boards/TMC5160_eval.c **** 	writeData[3] = x1;                           // Register Data
 1428              		.loc 1 160 15 view .LVU417
 1429 04e2 8DF80200 		strb	r0, [sp, #2]
 161:boards/TMC5160_eval.c **** 	writeData[4] = x2;                           // Register Data
 1430              		.loc 1 161 15 view .LVU418
 1431 04e6 8DF80320 		strb	r2, [sp, #3]
 165:boards/TMC5160_eval.c **** 
 1432              		.loc 1 165 17 view .LVU419
 1433 04ea 0721     		movs	r1, #7
 1434              	.LVL126:
 165:boards/TMC5160_eval.c **** 
 1435              		.loc 1 165 17 view .LVU420
 1436 04ec 0122     		movs	r2, #1
 1437              	.LVL127:
 165:boards/TMC5160_eval.c **** 
 1438              		.loc 1 165 17 view .LVU421
 1439 04ee 6846     		mov	r0, sp
 158:boards/TMC5160_eval.c **** 	writeData[1] = 0x00;                         // Slave address
 1440              		.loc 1 158 15 view .LVU422
 1441 04f0 ADF80030 		strh	r3, [sp]	@ movhi
 160:boards/TMC5160_eval.c **** 	writeData[3] = x1;                           // Register Data
 1442              		.loc 1 160 2 is_stmt 1 view .LVU423
 161:boards/TMC5160_eval.c **** 	writeData[4] = x2;                           // Register Data
 1443              		.loc 1 161 2 view .LVU424
 162:boards/TMC5160_eval.c **** 	writeData[5] = x3;                           // Register Data
 1444              		.loc 1 162 2 view .LVU425
 162:boards/TMC5160_eval.c **** 	writeData[5] = x3;                           // Register Data
 1445              		.loc 1 162 15 is_stmt 0 view .LVU426
 1446 04f4 8DF80460 		strb	r6, [sp, #4]
 163:boards/TMC5160_eval.c **** 	writeData[6] = x4;                           // Register Data
 1447              		.loc 1 163 2 is_stmt 1 view .LVU427
 163:boards/TMC5160_eval.c **** 	writeData[6] = x4;                           // Register Data
 1448              		.loc 1 163 15 is_stmt 0 view .LVU428
 1449 04f8 8DF80540 		strb	r4, [sp, #5]
 164:boards/TMC5160_eval.c **** 	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
 1450              		.loc 1 164 2 is_stmt 1 view .LVU429
 164:boards/TMC5160_eval.c **** 	writeData[7] = tmc_CRC8(writeData, 7, 1);    // Cyclic redundancy check
 1451              		.loc 1 164 15 is_stmt 0 view .LVU430
 1452 04fc 8DF80670 		strb	r7, [sp, #6]
 165:boards/TMC5160_eval.c **** 
 1453              		.loc 1 165 2 is_stmt 1 view .LVU431
 165:boards/TMC5160_eval.c **** 
 1454              		.loc 1 165 17 is_stmt 0 view .LVU432
 1455 0500 FFF7FEFF 		bl	tmc_CRC8
 1456              	.LVL128:
 167:boards/TMC5160_eval.c **** 	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
 1457              		.loc 1 167 27 view .LVU433
 1458 0504 D5F8C032 		ldr	r3, [r5, #704]
 165:boards/TMC5160_eval.c **** 
 1459              		.loc 1 165 15 view .LVU434
 1460 0508 8DF80700 		strb	r0, [sp, #7]
 167:boards/TMC5160_eval.c **** 	for(uint32_t i = 0; i < ARRAY_SIZE(writeData); i++)
 1461              		.loc 1 167 2 is_stmt 1 view .LVU435
 1462 050c DB69     		ldr	r3, [r3, #28]
 1463 050e 9847     		blx	r3
 1464              	.LVL129:
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1465              		.loc 1 168 2 view .LVU436
 1466              	.LBB22:
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1467              		.loc 1 168 6 view .LVU437
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1468              		.loc 1 168 22 view .LVU438
 1469 0510 6D46     		mov	r5, sp
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1470              		.loc 1 168 15 is_stmt 0 view .LVU439
 1471 0512 4FF0000A 		mov	r10, #0
 1472              	.LVL130:
 1473              	.L93:
 169:boards/TMC5160_eval.c **** 
 1474              		.loc 1 169 3 is_stmt 1 view .LVU440
 169:boards/TMC5160_eval.c **** 
 1475              		.loc 1 169 28 is_stmt 0 view .LVU441
 1476 0516 DBF8C032 		ldr	r3, [fp, #704]
 169:boards/TMC5160_eval.c **** 
 1477              		.loc 1 169 3 view .LVU442
 1478 051a 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 1479 051e DB68     		ldr	r3, [r3, #12]
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1480              		.loc 1 168 50 view .LVU443
 1481 0520 0AF1010A 		add	r10, r10, #1
 1482              	.LVL131:
 169:boards/TMC5160_eval.c **** 
 1483              		.loc 1 169 3 view .LVU444
 1484 0524 9847     		blx	r3
 1485              	.LVL132:
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1486              		.loc 1 168 49 is_stmt 1 view .LVU445
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1487              		.loc 1 168 22 view .LVU446
 168:boards/TMC5160_eval.c **** 		TMC5160_UARTChannel->rxtx.tx(writeData[i]);
 1488              		.loc 1 168 2 is_stmt 0 view .LVU447
 1489 0526 BAF1080F 		cmp	r10, #8
 1490 052a F4D1     		bne	.L93
 1491              	.LBE22:
 175:boards/TMC5160_eval.c **** 
 1492              		.loc 1 175 2 is_stmt 1 view .LVU448
 1493 052c 0220     		movs	r0, #2
 1494 052e FFF7FEFF 		bl	wait
 1495              	.LVL133:
 177:boards/TMC5160_eval.c **** }
 1496              		.loc 1 177 2 view .LVU449
 177:boards/TMC5160_eval.c **** }
 1497              		.loc 1 177 42 is_stmt 0 view .LVU450
 1498 0532 DBF8B832 		ldr	r3, [fp, #696]
 177:boards/TMC5160_eval.c **** }
 1499              		.loc 1 177 44 view .LVU451
 1500 0536 47EA0424 		orr	r4, r7, r4, lsl #8
 1501              	.LVL134:
 177:boards/TMC5160_eval.c **** }
 1502              		.loc 1 177 42 view .LVU452
 1503 053a 03EB8909 		add	r9, r3, r9, lsl #2
 177:boards/TMC5160_eval.c **** }
 1504              		.loc 1 177 44 view .LVU453
 1505 053e 44EA0646 		orr	r6, r4, r6, lsl #16
 1506              	.LVL135:
 177:boards/TMC5160_eval.c **** }
 1507              		.loc 1 177 44 view .LVU454
 1508 0542 46EA0866 		orr	r6, r6, r8, lsl #24
 177:boards/TMC5160_eval.c **** }
 1509              		.loc 1 177 42 view .LVU455
 1510 0546 C9F80460 		str	r6, [r9, #4]
 1511              	.LVL136:
 1512              	.L91:
 177:boards/TMC5160_eval.c **** }
 1513              		.loc 1 177 42 view .LVU456
 1514              	.LBE21:
 1515              	.LBE20:
  86:boards/TMC5160_eval.c **** 
 1516              		.loc 1 86 1 view .LVU457
 1517 054a 03B0     		add	sp, sp, #12
 1518              	.LCFI11:
 1519              		.cfi_remember_state
 1520              		.cfi_def_cfa_offset 36
 1521              		@ sp needed
 1522 054c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1523              	.LVL137:
 1524              	.L92:
 1525              	.LCFI12:
 1526              		.cfi_restore_state
  85:boards/TMC5160_eval.c **** }
 1527              		.loc 1 85 3 is_stmt 1 view .LVU458
 1528              	.LBB23:
 1529              	.LBI23:
 103:boards/TMC5160_eval.c **** {
 1530              		.loc 1 103 13 view .LVU459
 1531              	.LBB24:
 105:boards/TMC5160_eval.c **** 	address = TMC_ADDRESS(address);
 1532              		.loc 1 105 2 view .LVU460
 106:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(address|0x80, false);
 1533              		.loc 1 106 2 view .LVU461
 107:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x1, false);
 1534              		.loc 1 107 2 view .LVU462
 107:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x1, false);
 1535              		.loc 1 107 20 is_stmt 0 view .LVU463
 1536 0550 D5F8BC32 		ldr	r3, [r5, #700]
 1537              	.LVL138:
 107:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x1, false);
 1538              		.loc 1 107 2 view .LVU464
 1539 0554 5146     		mov	r1, r10
 1540              	.LVL139:
 107:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x1, false);
 1541              		.loc 1 107 2 view .LVU465
 1542 0556 9B68     		ldr	r3, [r3, #8]
 1543 0558 9847     		blx	r3
 1544              	.LVL140:
 108:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x2, false);
 1545              		.loc 1 108 2 is_stmt 1 view .LVU466
 108:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x2, false);
 1546              		.loc 1 108 20 is_stmt 0 view .LVU467
 1547 055a D5F8BC32 		ldr	r3, [r5, #700]
 108:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x2, false);
 1548              		.loc 1 108 2 view .LVU468
 1549 055e 5146     		mov	r1, r10
 1550 0560 9B68     		ldr	r3, [r3, #8]
 1551 0562 4046     		mov	r0, r8
 1552 0564 9847     		blx	r3
 1553              	.LVL141:
 109:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x3, false);
 1554              		.loc 1 109 2 is_stmt 1 view .LVU469
 109:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x3, false);
 1555              		.loc 1 109 20 is_stmt 0 view .LVU470
 1556 0566 D5F8BC32 		ldr	r3, [r5, #700]
 109:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x3, false);
 1557              		.loc 1 109 2 view .LVU471
 1558 056a 5146     		mov	r1, r10
 1559 056c 9B68     		ldr	r3, [r3, #8]
 1560 056e 3046     		mov	r0, r6
 1561 0570 9847     		blx	r3
 1562              	.LVL142:
 110:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x4, true);
 1563              		.loc 1 110 2 is_stmt 1 view .LVU472
 110:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x4, true);
 1564              		.loc 1 110 20 is_stmt 0 view .LVU473
 1565 0572 D5F8BC32 		ldr	r3, [r5, #700]
 110:boards/TMC5160_eval.c **** 	TMC5160_SPIChannel->readWrite(x4, true);
 1566              		.loc 1 110 2 view .LVU474
 1567 0576 5146     		mov	r1, r10
 1568 0578 9B68     		ldr	r3, [r3, #8]
 1569 057a 2046     		mov	r0, r4
 1570 057c 9847     		blx	r3
 1571              	.LVL143:
 111:boards/TMC5160_eval.c **** 
 1572              		.loc 1 111 2 is_stmt 1 view .LVU475
 111:boards/TMC5160_eval.c **** 
 1573              		.loc 1 111 20 is_stmt 0 view .LVU476
 1574 057e D5F8BC32 		ldr	r3, [r5, #700]
 111:boards/TMC5160_eval.c **** 
 1575              		.loc 1 111 2 view .LVU477
 1576 0582 0121     		movs	r1, #1
 1577 0584 9B68     		ldr	r3, [r3, #8]
 1578 0586 3846     		mov	r0, r7
 1579 0588 9847     		blx	r3
 1580              	.LVL144:
 113:boards/TMC5160_eval.c **** 	value <<= 8;
 1581              		.loc 1 113 2 is_stmt 1 view .LVU478
 114:boards/TMC5160_eval.c **** 	value |= x2;
 1582              		.loc 1 114 2 view .LVU479
 115:boards/TMC5160_eval.c **** 	value <<= 8;
 1583              		.loc 1 115 2 view .LVU480
 121:boards/TMC5160_eval.c **** }
 1584              		.loc 1 121 42 is_stmt 0 view .LVU481
 1585 058a D5F8B832 		ldr	r3, [r5, #696]
 115:boards/TMC5160_eval.c **** 	value <<= 8;
 1586              		.loc 1 115 8 view .LVU482
 1587 058e 46EA0826 		orr	r6, r6, r8, lsl #8
 1588              	.LVL145:
 116:boards/TMC5160_eval.c **** 	value |= x3;
 1589              		.loc 1 116 2 is_stmt 1 view .LVU483
 117:boards/TMC5160_eval.c **** 	value <<= 8;
 1590              		.loc 1 117 2 view .LVU484
 117:boards/TMC5160_eval.c **** 	value <<= 8;
 1591              		.loc 1 117 8 is_stmt 0 view .LVU485
 1592 0592 44EA0624 		orr	r4, r4, r6, lsl #8
 1593              	.LVL146:
 118:boards/TMC5160_eval.c **** 	value |= x4;
 1594              		.loc 1 118 2 is_stmt 1 view .LVU486
 119:boards/TMC5160_eval.c **** 
 1595              		.loc 1 119 2 view .LVU487
 121:boards/TMC5160_eval.c **** }
 1596              		.loc 1 121 2 view .LVU488
 121:boards/TMC5160_eval.c **** }
 1597              		.loc 1 121 42 is_stmt 0 view .LVU489
 1598 0596 03EB8909 		add	r9, r3, r9, lsl #2
 119:boards/TMC5160_eval.c **** 
 1599              		.loc 1 119 8 view .LVU490
 1600 059a 47EA0424 		orr	r4, r7, r4, lsl #8
 1601              	.LVL147:
 121:boards/TMC5160_eval.c **** }
 1602              		.loc 1 121 42 view .LVU491
 1603 059e C9F80440 		str	r4, [r9, #4]
 1604              	.LVL148:
 121:boards/TMC5160_eval.c **** }
 1605              		.loc 1 121 42 view .LVU492
 1606              	.LBE24:
 1607              	.LBE23:
  86:boards/TMC5160_eval.c **** 
 1608              		.loc 1 86 1 view .LVU493
 1609 05a2 D2E7     		b	.L91
 1610              	.L97:
 1611              		.align	2
 1612              	.L96:
 1613 05a4 00000000 		.word	.LANCHOR0
 1614              		.cfi_endproc
 1615              	.LFE1:
 1617              		.align	1
 1618              		.global	tmc5160_writeInt
 1619              		.syntax unified
 1620              		.thumb
 1621              		.thumb_func
 1622              		.fpu softvfp
 1624              	tmc5160_writeInt:
 1625              	.LVL149:
 1626              	.LFB2:
  89:boards/TMC5160_eval.c **** 	tmc5160_writeDatagram(motor, address, 0xFF & (value>>24), 0xFF & (value>>16), 0xFF & (value>>8), 0
 1627              		.loc 1 89 1 is_stmt 1 view -0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
  90:boards/TMC5160_eval.c **** }
 1631              		.loc 1 90 2 view .LVU495
  89:boards/TMC5160_eval.c **** 	tmc5160_writeDatagram(motor, address, 0xFF & (value>>24), 0xFF & (value>>16), 0xFF & (value>>8), 0
 1632              		.loc 1 89 1 is_stmt 0 view .LVU496
 1633 05a8 07B5     		push	{r0, r1, r2, lr}
 1634              	.LCFI13:
 1635              		.cfi_def_cfa_offset 16
 1636              		.cfi_offset 14, -4
  90:boards/TMC5160_eval.c **** }
 1637              		.loc 1 90 2 view .LVU497
 1638 05aa D3B2     		uxtb	r3, r2
 1639 05ac 0193     		str	r3, [sp, #4]
 1640 05ae C2F30723 		ubfx	r3, r2, #8, #8
 1641 05b2 0093     		str	r3, [sp]
 1642 05b4 C2F30743 		ubfx	r3, r2, #16, #8
 1643 05b8 120E     		lsrs	r2, r2, #24
 1644              	.LVL150:
  90:boards/TMC5160_eval.c **** }
 1645              		.loc 1 90 2 view .LVU498
 1646 05ba FFF7FEFF 		bl	tmc5160_writeDatagram
 1647              	.LVL151:
  91:boards/TMC5160_eval.c **** 
 1648              		.loc 1 91 1 view .LVU499
 1649 05be 03B0     		add	sp, sp, #12
 1650              	.LCFI14:
 1651              		.cfi_def_cfa_offset 4
 1652              		@ sp needed
 1653 05c0 5DF804FB 		ldr	pc, [sp], #4
 1654              		.cfi_endproc
 1655              	.LFE2:
 1657              		.align	1
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu softvfp
 1663              	writeRegister:
 1664              	.LVL152:
 1665              	.LFB18:
 875:boards/TMC5160_eval.c **** 	UNUSED(motor);
 1666              		.loc 1 875 1 is_stmt 1 view -0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 876:boards/TMC5160_eval.c **** 	tmc5160_writeInt(DEFAULT_MOTOR, address, value);
 1671              		.loc 1 876 2 view .LVU501
 877:boards/TMC5160_eval.c **** }
 1672              		.loc 1 877 2 view .LVU502
 1673 05c4 0020     		movs	r0, #0
 1674              	.LVL153:
 877:boards/TMC5160_eval.c **** }
 1675              		.loc 1 877 2 is_stmt 0 view .LVU503
 1676 05c6 FFF7FEBF 		b	tmc5160_writeInt
 1677              	.LVL154:
 877:boards/TMC5160_eval.c **** }
 1678              		.loc 1 877 2 view .LVU504
 1679              		.cfi_endproc
 1680              	.LFE18:
 1682              		.align	1
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu softvfp
 1688              	moveTo:
 1689              	.LVL155:
 1690              	.LFB12:
 263:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1691              		.loc 1 263 1 is_stmt 1 view -0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 264:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 1695              		.loc 1 264 2 view .LVU506
 263:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1696              		.loc 1 263 1 is_stmt 0 view .LVU507
 1697 05ca 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1698              	.LCFI15:
 1699              		.cfi_def_cfa_offset 24
 1700              		.cfi_offset 4, -16
 1701              		.cfi_offset 5, -12
 1702              		.cfi_offset 6, -8
 1703              		.cfi_offset 14, -4
 263:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1704              		.loc 1 263 1 view .LVU508
 1705 05cc 0D46     		mov	r5, r1
 264:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 1706              		.loc 1 264 4 view .LVU509
 1707 05ce 0446     		mov	r4, r0
 1708 05d0 E8B9     		cbnz	r0, .L103
 267:boards/TMC5160_eval.c **** 	{
 1709              		.loc 1 267 2 is_stmt 1 view .LVU510
 267:boards/TMC5160_eval.c **** 	{
 1710              		.loc 1 267 5 is_stmt 0 view .LVU511
 1711 05d2 104E     		ldr	r6, .L107
 267:boards/TMC5160_eval.c **** 	{
 1712              		.loc 1 267 4 view .LVU512
 1713 05d4 96F8C632 		ldrb	r3, [r6, #710]	@ zero_extendqisi2
 1714 05d8 43B1     		cbz	r3, .L102
 269:boards/TMC5160_eval.c **** 		vMaxModified = false;
 1715              		.loc 1 269 3 is_stmt 1 view .LVU513
 269:boards/TMC5160_eval.c **** 		vMaxModified = false;
 1716              		.loc 1 269 71 is_stmt 0 view .LVU514
 1717 05da D6F8B832 		ldr	r3, [r6, #696]
 269:boards/TMC5160_eval.c **** 		vMaxModified = false;
 1718              		.loc 1 269 3 view .LVU515
 1719 05de 2721     		movs	r1, #39
 1720              	.LVL156:
 269:boards/TMC5160_eval.c **** 		vMaxModified = false;
 1721              		.loc 1 269 3 view .LVU516
 1722 05e0 D3F8A020 		ldr	r2, [r3, #160]
 1723 05e4 FFF7FEFF 		bl	tmc5160_writeInt
 1724              	.LVL157:
 270:boards/TMC5160_eval.c **** 	}
 1725              		.loc 1 270 3 is_stmt 1 view .LVU517
 270:boards/TMC5160_eval.c **** 	}
 1726              		.loc 1 270 16 is_stmt 0 view .LVU518
 1727 05e8 86F8C642 		strb	r4, [r6, #710]
 1728              	.L102:
 274:boards/TMC5160_eval.c **** 
 1729              		.loc 1 274 2 is_stmt 1 view .LVU519
 277:boards/TMC5160_eval.c **** 
 1730              		.loc 1 277 2 is_stmt 0 view .LVU520
 1731 05ec 0024     		movs	r4, #0
 274:boards/TMC5160_eval.c **** 
 1732              		.loc 1 274 2 view .LVU521
 1733 05ee 2A46     		mov	r2, r5
 1734 05f0 2D21     		movs	r1, #45
 1735 05f2 0020     		movs	r0, #0
 1736 05f4 FFF7FEFF 		bl	tmc5160_writeInt
 1737              	.LVL158:
 277:boards/TMC5160_eval.c **** 
 1738              		.loc 1 277 2 is_stmt 1 view .LVU522
 1739 05f8 2046     		mov	r0, r4
 1740 05fa CDE90044 		strd	r4, r4, [sp]
 1741 05fe 2346     		mov	r3, r4
 1742 0600 2246     		mov	r2, r4
 1743 0602 2021     		movs	r1, #32
 1744 0604 FFF7FEFF 		bl	tmc5160_writeDatagram
 1745              	.LVL159:
 279:boards/TMC5160_eval.c **** }
 1746              		.loc 1 279 2 view .LVU523
 279:boards/TMC5160_eval.c **** }
 1747              		.loc 1 279 9 is_stmt 0 view .LVU524
 1748 0608 2046     		mov	r0, r4
 1749              	.L100:
 280:boards/TMC5160_eval.c **** 
 1750              		.loc 1 280 1 view .LVU525
 1751 060a 02B0     		add	sp, sp, #8
 1752              	.LCFI16:
 1753              		.cfi_remember_state
 1754              		.cfi_def_cfa_offset 16
 1755              		@ sp needed
 1756 060c 70BD     		pop	{r4, r5, r6, pc}
 1757              	.LVL160:
 1758              	.L103:
 1759              	.LCFI17:
 1760              		.cfi_restore_state
 265:boards/TMC5160_eval.c **** 
 1761              		.loc 1 265 10 view .LVU526
 1762 060e 0820     		movs	r0, #8
 1763              	.LVL161:
 265:boards/TMC5160_eval.c **** 
 1764              		.loc 1 265 10 view .LVU527
 1765 0610 FBE7     		b	.L100
 1766              	.L108:
 1767 0612 00BF     		.align	2
 1768              	.L107:
 1769 0614 00000000 		.word	.LANCHOR0
 1770              		.cfi_endproc
 1771              	.LFE12:
 1773              		.align	1
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1777              		.fpu softvfp
 1779              	moveBy:
 1780              	.LVL162:
 1781              	.LFB13:
 283:boards/TMC5160_eval.c **** 	// determine actual position and add numbers of ticks to move
 1782              		.loc 1 283 1 is_stmt 1 view -0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 285:boards/TMC5160_eval.c **** 
 1786              		.loc 1 285 2 view .LVU529
 283:boards/TMC5160_eval.c **** 	// determine actual position and add numbers of ticks to move
 1787              		.loc 1 283 1 is_stmt 0 view .LVU530
 1788 0618 38B5     		push	{r3, r4, r5, lr}
 1789              	.LCFI18:
 1790              		.cfi_def_cfa_offset 16
 1791              		.cfi_offset 3, -16
 1792              		.cfi_offset 4, -12
 1793              		.cfi_offset 5, -8
 1794              		.cfi_offset 14, -4
 283:boards/TMC5160_eval.c **** 	// determine actual position and add numbers of ticks to move
 1795              		.loc 1 283 1 view .LVU531
 1796 061a 0C46     		mov	r4, r1
 1797 061c 0546     		mov	r5, r0
 285:boards/TMC5160_eval.c **** 
 1798              		.loc 1 285 11 view .LVU532
 1799 061e 2120     		movs	r0, #33
 1800              	.LVL163:
 285:boards/TMC5160_eval.c **** 
 1801              		.loc 1 285 11 view .LVU533
 1802 0620 FFF720FF 		bl	tmc5160_readInt.constprop.0
 1803              	.LVL164:
 285:boards/TMC5160_eval.c **** 
 1804              		.loc 1 285 51 view .LVU534
 1805 0624 2168     		ldr	r1, [r4]
 1806 0626 0144     		add	r1, r1, r0
 285:boards/TMC5160_eval.c **** 
 1807              		.loc 1 285 9 view .LVU535
 1808 0628 2160     		str	r1, [r4]
 287:boards/TMC5160_eval.c **** }
 1809              		.loc 1 287 2 is_stmt 1 view .LVU536
 287:boards/TMC5160_eval.c **** }
 1810              		.loc 1 287 9 is_stmt 0 view .LVU537
 1811 062a 2846     		mov	r0, r5
 288:boards/TMC5160_eval.c **** 
 1812              		.loc 1 288 1 view .LVU538
 1813 062c BDE83840 		pop	{r3, r4, r5, lr}
 1814              	.LCFI19:
 1815              		.cfi_restore 14
 1816              		.cfi_restore 5
 1817              		.cfi_restore 4
 1818              		.cfi_restore 3
 1819              		.cfi_def_cfa_offset 0
 1820              	.LVL165:
 287:boards/TMC5160_eval.c **** }
 1821              		.loc 1 287 9 view .LVU539
 1822 0630 CBE7     		b	moveTo
 1823              	.LVL166:
 1824              		.cfi_endproc
 1825              	.LFE13:
 1827              		.align	1
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1831              		.fpu softvfp
 1833              	rotate:
 1834              	.LVL167:
 1835              	.LFB8:
 232:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1836              		.loc 1 232 1 is_stmt 1 view -0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 233:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 1840              		.loc 1 233 2 view .LVU541
 232:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1841              		.loc 1 232 1 is_stmt 0 view .LVU542
 1842 0632 37B5     		push	{r0, r1, r2, r4, r5, lr}
 1843              	.LCFI20:
 1844              		.cfi_def_cfa_offset 24
 1845              		.cfi_offset 4, -12
 1846              		.cfi_offset 5, -8
 1847              		.cfi_offset 14, -4
 232:boards/TMC5160_eval.c **** 	if(motor >= TMC5160_MOTORS)
 1848              		.loc 1 232 1 view .LVU543
 1849 0634 0D46     		mov	r5, r1
 233:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 1850              		.loc 1 233 4 view .LVU544
 1851 0636 0446     		mov	r4, r0
 1852 0638 C8B9     		cbnz	r0, .L113
 1853              	.LVL168:
 1854              	.LBB27:
 1855              	.LBI27:
 231:boards/TMC5160_eval.c **** {
 1856              		.loc 1 231 17 is_stmt 1 view .LVU545
 1857              	.LBB28:
 236:boards/TMC5160_eval.c **** 
 1858              		.loc 1 236 2 view .LVU546
 236:boards/TMC5160_eval.c **** 
 1859              		.loc 1 236 15 is_stmt 0 view .LVU547
 1860 063a 0E4B     		ldr	r3, .L115
 1861 063c 0122     		movs	r2, #1
 1862 063e 83F8C622 		strb	r2, [r3, #710]
 239:boards/TMC5160_eval.c **** 
 1863              		.loc 1 239 2 is_stmt 1 view .LVU548
 1864 0642 81EAE172 		eor	r2, r1, r1, asr #31
 1865 0646 A2EBE172 		sub	r2, r2, r1, asr #31
 1866 064a 2721     		movs	r1, #39
 1867              	.LVL169:
 239:boards/TMC5160_eval.c **** 
 1868              		.loc 1 239 2 is_stmt 0 view .LVU549
 1869 064c FFF7FEFF 		bl	tmc5160_writeInt
 1870              	.LVL170:
 242:boards/TMC5160_eval.c **** 
 1871              		.loc 1 242 2 is_stmt 1 view .LVU550
 1872 0650 002D     		cmp	r5, #0
 1873 0652 ACBF     		ite	ge
 1874 0654 0123     		movge	r3, #1
 1875 0656 0223     		movlt	r3, #2
 1876 0658 CDE90043 		strd	r4, r3, [sp]
 1877 065c 2046     		mov	r0, r4
 1878 065e 2346     		mov	r3, r4
 1879 0660 2246     		mov	r2, r4
 1880 0662 2021     		movs	r1, #32
 1881 0664 FFF7FEFF 		bl	tmc5160_writeDatagram
 1882              	.LVL171:
 244:boards/TMC5160_eval.c **** }
 1883              		.loc 1 244 2 view .LVU551
 242:boards/TMC5160_eval.c **** 
 1884              		.loc 1 242 2 is_stmt 0 view .LVU552
 1885 0668 2046     		mov	r0, r4
 1886              	.L110:
 1887              	.LBE28:
 1888              	.LBE27:
 245:boards/TMC5160_eval.c **** 
 1889              		.loc 1 245 1 view .LVU553
 1890 066a 03B0     		add	sp, sp, #12
 1891              	.LCFI21:
 1892              		.cfi_remember_state
 1893              		.cfi_def_cfa_offset 12
 1894              		@ sp needed
 1895 066c 30BD     		pop	{r4, r5, pc}
 1896              	.LVL172:
 1897              	.L113:
 1898              	.LCFI22:
 1899              		.cfi_restore_state
 234:boards/TMC5160_eval.c **** 
 1900              		.loc 1 234 10 view .LVU554
 1901 066e 0820     		movs	r0, #8
 1902              	.LVL173:
 234:boards/TMC5160_eval.c **** 
 1903              		.loc 1 234 10 view .LVU555
 1904 0670 FBE7     		b	.L110
 1905              	.L116:
 1906 0672 00BF     		.align	2
 1907              	.L115:
 1908 0674 00000000 		.word	.LANCHOR0
 1909              		.cfi_endproc
 1910              	.LFE8:
 1912              		.align	1
 1913              		.syntax unified
 1914              		.thumb
 1915              		.thumb_func
 1916              		.fpu softvfp
 1918              	stop:
 1919              	.LVL174:
 1920              	.LFB11:
 258:boards/TMC5160_eval.c **** 	return rotate(motor, 0);
 1921              		.loc 1 258 1 is_stmt 1 view -0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 259:boards/TMC5160_eval.c **** }
 1926              		.loc 1 259 2 view .LVU557
 259:boards/TMC5160_eval.c **** }
 1927              		.loc 1 259 9 is_stmt 0 view .LVU558
 1928 0678 0021     		movs	r1, #0
 1929 067a DAE7     		b	rotate
 1930              	.LVL175:
 259:boards/TMC5160_eval.c **** }
 1931              		.loc 1 259 9 view .LVU559
 1932              		.cfi_endproc
 1933              	.LFE11:
 1935              		.align	1
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu softvfp
 1941              	left:
 1942              	.LVL176:
 1943              	.LFB10:
 253:boards/TMC5160_eval.c **** 	return rotate(motor, -velocity);
 1944              		.loc 1 253 1 is_stmt 1 view -0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              		@ link register save eliminated.
 254:boards/TMC5160_eval.c **** }
 1949              		.loc 1 254 2 view .LVU561
 254:boards/TMC5160_eval.c **** }
 1950              		.loc 1 254 9 is_stmt 0 view .LVU562
 1951 067c 4942     		rsbs	r1, r1, #0
 1952              	.LVL177:
 254:boards/TMC5160_eval.c **** }
 1953              		.loc 1 254 9 view .LVU563
 1954 067e D8E7     		b	rotate
 1955              	.LVL178:
 254:boards/TMC5160_eval.c **** }
 1956              		.loc 1 254 9 view .LVU564
 1957              		.cfi_endproc
 1958              	.LFE10:
 1960              		.align	1
 1961              		.syntax unified
 1962              		.thumb
 1963              		.thumb_func
 1964              		.fpu softvfp
 1966              	right:
 1967              	.LVL179:
 1968              	.LFB9:
 248:boards/TMC5160_eval.c **** 	return rotate(motor, velocity);
 1969              		.loc 1 248 1 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
 249:boards/TMC5160_eval.c **** }
 1974              		.loc 1 249 2 view .LVU566
 249:boards/TMC5160_eval.c **** }
 1975              		.loc 1 249 9 is_stmt 0 view .LVU567
 1976 0680 D7E7     		b	rotate
 1977              	.LVL180:
 249:boards/TMC5160_eval.c **** }
 1978              		.loc 1 249 9 view .LVU568
 1979              		.cfi_endproc
 1980              	.LFE9:
 1982              		.align	1
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1986              		.fpu softvfp
 1988              	handleParameter:
 1989              	.LVL181:
 1990              	.LFB14:
 291:boards/TMC5160_eval.c **** 	uint32_t buffer;
 1991              		.loc 1 291 1 is_stmt 1 view -0
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 0
 1994              		@ frame_needed = 0, uses_anonymous_args = 0
 292:boards/TMC5160_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 1995              		.loc 1 292 2 view .LVU570
 293:boards/TMC5160_eval.c **** 
 1996              		.loc 1 293 2 view .LVU571
 295:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 1997              		.loc 1 295 2 view .LVU572
 291:boards/TMC5160_eval.c **** 	uint32_t buffer;
 1998              		.loc 1 291 1 is_stmt 0 view .LVU573
 1999 0682 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2000              	.LCFI23:
 2001              		.cfi_def_cfa_offset 24
 2002              		.cfi_offset 3, -24
 2003              		.cfi_offset 4, -20
 2004              		.cfi_offset 5, -16
 2005              		.cfi_offset 6, -12
 2006              		.cfi_offset 7, -8
 2007              		.cfi_offset 14, -4
 291:boards/TMC5160_eval.c **** 	uint32_t buffer;
 2008              		.loc 1 291 1 view .LVU574
 2009 0684 0646     		mov	r6, r0
 2010 0686 1D46     		mov	r5, r3
 295:boards/TMC5160_eval.c **** 		return TMC_ERROR_MOTOR;
 2011              		.loc 1 295 4 view .LVU575
 2012 0688 0029     		cmp	r1, #0
 2013 068a 40F0E085 		bne	.L263
 298:boards/TMC5160_eval.c **** 	{
 2014              		.loc 1 298 2 is_stmt 1 view .LVU576
 2015 068e 222A     		cmp	r2, #34
 2016 0690 74D8     		bhi	.L122
 2017 0692 222A     		cmp	r2, #34
 2018 0694 00F2E185 		bhi	.L265
 2019 0698 DFE812F0 		tbh	[pc, r2, lsl #1]
 2020              	.LVL182:
 2021              	.L154:
 2022 069c 7800     		.2byte	(.L181-.L154)/2
 2023 069e 8600     		.2byte	(.L180-.L154)/2
 2024 06a0 9400     		.2byte	(.L179-.L154)/2
 2025 06a2 A900     		.2byte	(.L178-.L154)/2
 2026 06a4 B800     		.2byte	(.L177-.L154)/2
 2027 06a6 D600     		.2byte	(.L176-.L154)/2
 2028 06a8 E400     		.2byte	(.L175-.L154)/2
 2029 06aa FC00     		.2byte	(.L174-.L154)/2
 2030 06ac 1301     		.2byte	(.L173-.L154)/2
 2031 06ae DF05     		.2byte	(.L265-.L154)/2
 2032 06b0 1E01     		.2byte	(.L172-.L154)/2
 2033 06b2 2C01     		.2byte	(.L171-.L154)/2
 2034 06b4 3801     		.2byte	(.L170-.L154)/2
 2035 06b6 5001     		.2byte	(.L169-.L154)/2
 2036 06b8 6701     		.2byte	(.L168-.L154)/2
 2037 06ba 7501     		.2byte	(.L167-.L154)/2
 2038 06bc 8301     		.2byte	(.L166-.L154)/2
 2039 06be 9101     		.2byte	(.L165-.L154)/2
 2040 06c0 9F01     		.2byte	(.L164-.L154)/2
 2041 06c2 AD01     		.2byte	(.L163-.L154)/2
 2042 06c4 BB01     		.2byte	(.L162-.L154)/2
 2043 06c6 C901     		.2byte	(.L161-.L154)/2
 2044 06c8 DF05     		.2byte	(.L265-.L154)/2
 2045 06ca D701     		.2byte	(.L160-.L154)/2
 2046 06cc FB01     		.2byte	(.L159-.L154)/2
 2047 06ce DF05     		.2byte	(.L265-.L154)/2
 2048 06d0 DF05     		.2byte	(.L265-.L154)/2
 2049 06d2 0E02     		.2byte	(.L158-.L154)/2
 2050 06d4 2602     		.2byte	(.L157-.L154)/2
 2051 06d6 3E02     		.2byte	(.L156-.L154)/2
 2052 06d8 DF05     		.2byte	(.L265-.L154)/2
 2053 06da DF05     		.2byte	(.L265-.L154)/2
 2054 06dc DF05     		.2byte	(.L265-.L154)/2
 2055 06de 4602     		.2byte	(.L155-.L154)/2
 2056 06e0 5D02     		.2byte	(.L153-.L154)/2
 2057              		.p2align 1
 2058              	.L182:
 298:boards/TMC5160_eval.c **** 	{
 2059              		.loc 1 298 2 is_stmt 0 view .LVU577
 2060 06e2 8C3A     		subs	r2, r2, #140
 2061              	.LVL183:
 298:boards/TMC5160_eval.c **** 	{
 2062              		.loc 1 298 2 view .LVU578
 2063 06e4 462A     		cmp	r2, #70
 2064 06e6 00F2B585 		bhi	.L264
 2065 06ea DFE812F0 		tbh	[pc, r2, lsl #1]
 2066              	.L125:
 2067 06ee 4C02     		.2byte	(.L152-.L125)/2
 2068 06f0 B305     		.2byte	(.L264-.L125)/2
 2069 06f2 B305     		.2byte	(.L264-.L125)/2
 2070 06f4 B305     		.2byte	(.L264-.L125)/2
 2071 06f6 B305     		.2byte	(.L264-.L125)/2
 2072 06f8 B305     		.2byte	(.L264-.L125)/2
 2073 06fa B305     		.2byte	(.L264-.L125)/2
 2074 06fc B305     		.2byte	(.L264-.L125)/2
 2075 06fe B305     		.2byte	(.L264-.L125)/2
 2076 0700 B305     		.2byte	(.L264-.L125)/2
 2077 0702 B305     		.2byte	(.L264-.L125)/2
 2078 0704 B305     		.2byte	(.L264-.L125)/2
 2079 0706 B305     		.2byte	(.L264-.L125)/2
 2080 0708 B305     		.2byte	(.L264-.L125)/2
 2081 070a B305     		.2byte	(.L264-.L125)/2
 2082 070c B305     		.2byte	(.L264-.L125)/2
 2083 070e B305     		.2byte	(.L264-.L125)/2
 2084 0710 B305     		.2byte	(.L264-.L125)/2
 2085 0712 B305     		.2byte	(.L264-.L125)/2
 2086 0714 B305     		.2byte	(.L264-.L125)/2
 2087 0716 B305     		.2byte	(.L264-.L125)/2
 2088 0718 B305     		.2byte	(.L264-.L125)/2
 2089 071a 9802     		.2byte	(.L151-.L125)/2
 2090 071c B002     		.2byte	(.L150-.L125)/2
 2091 071e C802     		.2byte	(.L149-.L125)/2
 2092 0720 E002     		.2byte	(.L148-.L125)/2
 2093 0722 2C03     		.2byte	(.L147-.L125)/2
 2094 0724 6303     		.2byte	(.L146-.L125)/2
 2095 0726 7A03     		.2byte	(.L145-.L125)/2
 2096 0728 9303     		.2byte	(.L144-.L125)/2
 2097 072a AB03     		.2byte	(.L143-.L125)/2
 2098 072c C303     		.2byte	(.L142-.L125)/2
 2099 072e DB03     		.2byte	(.L141-.L125)/2
 2100 0730 F203     		.2byte	(.L140-.L125)/2
 2101 0732 0A04     		.2byte	(.L139-.L125)/2
 2102 0734 B305     		.2byte	(.L264-.L125)/2
 2103 0736 B305     		.2byte	(.L264-.L125)/2
 2104 0738 B305     		.2byte	(.L264-.L125)/2
 2105 073a B305     		.2byte	(.L264-.L125)/2
 2106 073c B305     		.2byte	(.L264-.L125)/2
 2107 073e 2904     		.2byte	(.L138-.L125)/2
 2108 0740 3404     		.2byte	(.L137-.L125)/2
 2109 0742 7104     		.2byte	(.L136-.L125)/2
 2110 0744 B305     		.2byte	(.L264-.L125)/2
 2111 0746 9704     		.2byte	(.L135-.L125)/2
 2112 0748 B104     		.2byte	(.L134-.L125)/2
 2113 074a CB04     		.2byte	(.L133-.L125)/2
 2114 074c F104     		.2byte	(.L132-.L125)/2
 2115 074e 1805     		.2byte	(.L131-.L125)/2
 2116 0750 B305     		.2byte	(.L264-.L125)/2
 2117 0752 B305     		.2byte	(.L264-.L125)/2
 2118 0754 2E05     		.2byte	(.L130-.L125)/2
 2119 0756 4D05     		.2byte	(.L129-.L125)/2
 2120 0758 B305     		.2byte	(.L264-.L125)/2
 2121 075a B305     		.2byte	(.L264-.L125)/2
 2122 075c B305     		.2byte	(.L264-.L125)/2
 2123 075e B305     		.2byte	(.L264-.L125)/2
 2124 0760 B305     		.2byte	(.L264-.L125)/2
 2125 0762 B305     		.2byte	(.L264-.L125)/2
 2126 0764 B305     		.2byte	(.L264-.L125)/2
 2127 0766 B305     		.2byte	(.L264-.L125)/2
 2128 0768 B305     		.2byte	(.L264-.L125)/2
 2129 076a B305     		.2byte	(.L264-.L125)/2
 2130 076c B305     		.2byte	(.L264-.L125)/2
 2131 076e 6B05     		.2byte	(.L128-.L125)/2
 2132 0770 B305     		.2byte	(.L264-.L125)/2
 2133 0772 8505     		.2byte	(.L127-.L125)/2
 2134 0774 B305     		.2byte	(.L264-.L125)/2
 2135 0776 B305     		.2byte	(.L264-.L125)/2
 2136 0778 9005     		.2byte	(.L126-.L125)/2
 2137 077a A005     		.2byte	(.L124-.L125)/2
 2138              	.LVL184:
 2139              		.p2align 1
 2140              	.L122:
 298:boards/TMC5160_eval.c **** 	{
 2141              		.loc 1 298 2 view .LVU579
 2142 077c 02F17403 		add	r3, r2, #116
 2143              	.LVL185:
 298:boards/TMC5160_eval.c **** 	{
 2144              		.loc 1 298 2 view .LVU580
 2145 0780 DBB2     		uxtb	r3, r3
 2146 0782 462B     		cmp	r3, #70
 2147 0784 ADD9     		bls	.L182
 2148 0786 0424     		movs	r4, #4
 2149              	.LVL186:
 2150              	.L120:
 852:boards/TMC5160_eval.c **** 
 2151              		.loc 1 852 1 view .LVU581
 2152 0788 2046     		mov	r0, r4
 2153 078a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2154              	.LVL187:
 2155              	.L181:
 302:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XTARGET);
 2156              		.loc 1 302 3 is_stmt 1 view .LVU582
 302:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XTARGET);
 2157              		.loc 1 302 5 is_stmt 0 view .LVU583
 2158 078c 28B9     		cbnz	r0, .L183
 303:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2159              		.loc 1 303 4 is_stmt 1 view .LVU584
 303:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2160              		.loc 1 303 13 is_stmt 0 view .LVU585
 2161 078e 2D20     		movs	r0, #45
 2162              	.LVL188:
 303:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2163              		.loc 1 303 13 view .LVU586
 2164 0790 FFF768FE 		bl	tmc5160_readInt.constprop.0
 2165              	.LVL189:
 293:boards/TMC5160_eval.c **** 
 2166              		.loc 1 293 11 view .LVU587
 2167 0794 3446     		mov	r4, r6
 303:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2168              		.loc 1 303 11 view .LVU588
 2169 0796 2860     		str	r0, [r5]
 2170 0798 F6E7     		b	.L120
 2171              	.LVL190:
 2172              	.L183:
 304:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XTARGET, *value);
 2173              		.loc 1 304 10 is_stmt 1 view .LVU589
 305:boards/TMC5160_eval.c **** 		}
 2174              		.loc 1 305 4 view .LVU590
 2175 079a 2A68     		ldr	r2, [r5]
 2176              	.LVL191:
 305:boards/TMC5160_eval.c **** 		}
 2177              		.loc 1 305 4 is_stmt 0 view .LVU591
 2178 079c 2D21     		movs	r1, #45
 2179              	.LVL192:
 305:boards/TMC5160_eval.c **** 		}
 2180              		.loc 1 305 4 view .LVU592
 2181 079e 0020     		movs	r0, #0
 2182              	.LVL193:
 305:boards/TMC5160_eval.c **** 		}
 2183              		.loc 1 305 4 view .LVU593
 2184 07a0 FFF7FEFF 		bl	tmc5160_writeInt
 2185              	.LVL194:
 293:boards/TMC5160_eval.c **** 
 2186              		.loc 1 293 11 view .LVU594
 2187 07a4 0024     		movs	r4, #0
 2188 07a6 EFE7     		b	.L120
 2189              	.LVL195:
 2190              	.L180:
 310:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XACTUAL);
 2191              		.loc 1 310 3 is_stmt 1 view .LVU595
 310:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XACTUAL);
 2192              		.loc 1 310 5 is_stmt 0 view .LVU596
 2193 07a8 28B9     		cbnz	r0, .L184
 311:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2194              		.loc 1 311 4 is_stmt 1 view .LVU597
 311:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2195              		.loc 1 311 13 is_stmt 0 view .LVU598
 2196 07aa 2120     		movs	r0, #33
 2197              	.LVL196:
 311:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2198              		.loc 1 311 13 view .LVU599
 2199 07ac FFF75AFE 		bl	tmc5160_readInt.constprop.0
 2200              	.LVL197:
 293:boards/TMC5160_eval.c **** 
 2201              		.loc 1 293 11 view .LVU600
 2202 07b0 3446     		mov	r4, r6
 311:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2203              		.loc 1 311 11 view .LVU601
 2204 07b2 2860     		str	r0, [r5]
 2205 07b4 E8E7     		b	.L120
 2206              	.LVL198:
 2207              	.L184:
 312:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XACTUAL, *value);
 2208              		.loc 1 312 10 is_stmt 1 view .LVU602
 313:boards/TMC5160_eval.c **** 		}
 2209              		.loc 1 313 4 view .LVU603
 2210 07b6 2A68     		ldr	r2, [r5]
 2211              	.LVL199:
 313:boards/TMC5160_eval.c **** 		}
 2212              		.loc 1 313 4 is_stmt 0 view .LVU604
 2213 07b8 2121     		movs	r1, #33
 2214              	.LVL200:
 313:boards/TMC5160_eval.c **** 		}
 2215              		.loc 1 313 4 view .LVU605
 2216 07ba 0020     		movs	r0, #0
 2217              	.LVL201:
 313:boards/TMC5160_eval.c **** 		}
 2218              		.loc 1 313 4 view .LVU606
 2219 07bc FFF7FEFF 		bl	tmc5160_writeInt
 2220              	.LVL202:
 293:boards/TMC5160_eval.c **** 
 2221              		.loc 1 293 11 view .LVU607
 2222 07c0 0024     		movs	r4, #0
 2223 07c2 E1E7     		b	.L120
 2224              	.LVL203:
 2225              	.L179:
 318:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VMAX);
 2226              		.loc 1 318 3 is_stmt 1 view .LVU608
 318:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VMAX);
 2227              		.loc 1 318 5 is_stmt 0 view .LVU609
 2228 07c4 28B9     		cbnz	r0, .L185
 319:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2229              		.loc 1 319 4 is_stmt 1 view .LVU610
 319:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2230              		.loc 1 319 13 is_stmt 0 view .LVU611
 2231 07c6 2720     		movs	r0, #39
 2232              	.LVL204:
 319:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2233              		.loc 1 319 13 view .LVU612
 2234 07c8 FFF74CFE 		bl	tmc5160_readInt.constprop.0
 2235              	.LVL205:
 293:boards/TMC5160_eval.c **** 
 2236              		.loc 1 293 11 view .LVU613
 2237 07cc 3446     		mov	r4, r6
 319:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2238              		.loc 1 319 11 view .LVU614
 2239 07ce 2860     		str	r0, [r5]
 2240 07d0 DAE7     		b	.L120
 2241              	.LVL206:
 2242              	.L185:
 320:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2243              		.loc 1 320 10 is_stmt 1 view .LVU615
 321:boards/TMC5160_eval.c **** 			vMaxModified = true;
 2244              		.loc 1 321 4 view .LVU616
 2245 07d2 2A68     		ldr	r2, [r5]
 2246              	.LVL207:
 321:boards/TMC5160_eval.c **** 			vMaxModified = true;
 2247              		.loc 1 321 4 is_stmt 0 view .LVU617
 2248 07d4 002A     		cmp	r2, #0
 2249 07d6 B8BF     		it	lt
 2250 07d8 5242     		rsblt	r2, r2, #0
 2251 07da 2721     		movs	r1, #39
 2252              	.LVL208:
 321:boards/TMC5160_eval.c **** 			vMaxModified = true;
 2253              		.loc 1 321 4 view .LVU618
 2254 07dc 0020     		movs	r0, #0
 2255              	.LVL209:
 321:boards/TMC5160_eval.c **** 			vMaxModified = true;
 2256              		.loc 1 321 4 view .LVU619
 2257 07de FFF7FEFF 		bl	tmc5160_writeInt
 2258              	.LVL210:
 322:boards/TMC5160_eval.c **** 		}
 2259              		.loc 1 322 4 is_stmt 1 view .LVU620
 322:boards/TMC5160_eval.c **** 		}
 2260              		.loc 1 322 17 is_stmt 0 view .LVU621
 2261 07e2 B34B     		ldr	r3, .L285
 2262 07e4 0122     		movs	r2, #1
 2263 07e6 83F8C622 		strb	r2, [r3, #710]
 293:boards/TMC5160_eval.c **** 
 2264              		.loc 1 293 11 view .LVU622
 2265 07ea 0024     		movs	r4, #0
 2266 07ec CCE7     		b	.L120
 2267              	.LVL211:
 2268              	.L178:
 327:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VACTUAL);
 2269              		.loc 1 327 3 is_stmt 1 view .LVU623
 327:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VACTUAL);
 2270              		.loc 1 327 5 is_stmt 0 view .LVU624
 2271 07ee 0028     		cmp	r0, #0
 2272 07f0 40F03685 		bne	.L266
 328:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 2273              		.loc 1 328 4 is_stmt 1 view .LVU625
 328:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 2274              		.loc 1 328 13 is_stmt 0 view .LVU626
 2275 07f4 2220     		movs	r0, #34
 2276              	.LVL212:
 328:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 24);
 2277              		.loc 1 328 13 view .LVU627
 2278 07f6 FFF735FE 		bl	tmc5160_readInt.constprop.0
 2279              	.LVL213:
 329:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2280              		.loc 1 329 4 is_stmt 1 view .LVU628
 329:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2281              		.loc 1 329 13 is_stmt 0 view .LVU629
 2282 07fa 10F40003 		ands	r3, r0, #8388608
 2283 07fe 18BF     		it	ne
 2284 0800 4FF07F43 		movne	r3, #-16777216
 2285 0804 1843     		orrs	r0, r0, r3
 329:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2286              		.loc 1 329 11 view .LVU630
 2287 0806 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2288              		.loc 1 293 11 view .LVU631
 2289 0808 3446     		mov	r4, r6
 2290 080a BDE7     		b	.L120
 2291              	.LVL214:
 2292              	.L177:
 336:boards/TMC5160_eval.c **** 			*value = TMC5160_config->shadowRegister[TMC5160_VMAX];
 2293              		.loc 1 336 3 is_stmt 1 view .LVU632
 2294 080c A84B     		ldr	r3, .L285
 2295 080e D3F8B822 		ldr	r2, [r3, #696]
 2296              	.LVL215:
 336:boards/TMC5160_eval.c **** 			*value = TMC5160_config->shadowRegister[TMC5160_VMAX];
 2297              		.loc 1 336 5 is_stmt 0 view .LVU633
 2298 0812 20B9     		cbnz	r0, .L187
 337:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2299              		.loc 1 337 4 is_stmt 1 view .LVU634
 337:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2300              		.loc 1 337 43 is_stmt 0 view .LVU635
 2301 0814 D2F8A030 		ldr	r3, [r2, #160]
 337:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2302              		.loc 1 337 11 view .LVU636
 2303 0818 2B60     		str	r3, [r5]
 293:boards/TMC5160_eval.c **** 
 2304              		.loc 1 293 11 view .LVU637
 2305 081a 0446     		mov	r4, r0
 2306 081c B4E7     		b	.L120
 2307              	.L187:
 338:boards/TMC5160_eval.c **** 			TMC5160_config->shadowRegister[TMC5160_VMAX] = abs(*value);
 2308              		.loc 1 338 10 is_stmt 1 view .LVU638
 339:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 2309              		.loc 1 339 4 view .LVU639
 339:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 2310              		.loc 1 339 51 is_stmt 0 view .LVU640
 2311 081e 2B68     		ldr	r3, [r5]
 2312 0820 002B     		cmp	r3, #0
 2313 0822 B8BF     		it	lt
 2314 0824 5B42     		rsblt	r3, r3, #0
 339:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 2315              		.loc 1 339 49 view .LVU641
 2316 0826 C2F8A030 		str	r3, [r2, #160]
 340:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2317              		.loc 1 340 4 is_stmt 1 view .LVU642
 340:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2318              		.loc 1 340 7 is_stmt 0 view .LVU643
 2319 082a 2020     		movs	r0, #32
 2320              	.LVL216:
 340:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2321              		.loc 1 340 7 view .LVU644
 2322 082c FFF71AFE 		bl	tmc5160_readInt.constprop.0
 2323              	.LVL217:
 340:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2324              		.loc 1 340 7 view .LVU645
 2325 0830 0446     		mov	r4, r0
 340:boards/TMC5160_eval.c **** 				tmc5160_writeInt(motor, TMC5160_VMAX, abs(*value));
 2326              		.loc 1 340 6 view .LVU646
 2327 0832 08B1     		cbz	r0, .L188
 2328              	.L230:
 293:boards/TMC5160_eval.c **** 
 2329              		.loc 1 293 11 view .LVU647
 2330 0834 0024     		movs	r4, #0
 2331 0836 A7E7     		b	.L120
 2332              	.L188:
 341:boards/TMC5160_eval.c **** 		}
 2333              		.loc 1 341 5 is_stmt 1 view .LVU648
 2334 0838 2A68     		ldr	r2, [r5]
 2335 083a 002A     		cmp	r2, #0
 2336 083c B8BF     		it	lt
 2337 083e 5242     		rsblt	r2, r2, #0
 2338 0840 2721     		movs	r1, #39
 2339 0842 FFF7FEFF 		bl	tmc5160_writeInt
 2340              	.LVL218:
 2341 0846 9FE7     		b	.L120
 2342              	.LVL219:
 2343              	.L176:
 346:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_AMAX);
 2344              		.loc 1 346 3 view .LVU649
 346:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_AMAX);
 2345              		.loc 1 346 5 is_stmt 0 view .LVU650
 2346 0848 28B9     		cbnz	r0, .L189
 347:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2347              		.loc 1 347 4 is_stmt 1 view .LVU651
 347:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2348              		.loc 1 347 13 is_stmt 0 view .LVU652
 2349 084a 2620     		movs	r0, #38
 2350              	.LVL220:
 347:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2351              		.loc 1 347 13 view .LVU653
 2352 084c FFF70AFE 		bl	tmc5160_readInt.constprop.0
 2353              	.LVL221:
 293:boards/TMC5160_eval.c **** 
 2354              		.loc 1 293 11 view .LVU654
 2355 0850 3446     		mov	r4, r6
 347:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2356              		.loc 1 347 11 view .LVU655
 2357 0852 2860     		str	r0, [r5]
 2358 0854 98E7     		b	.L120
 2359              	.LVL222:
 2360              	.L189:
 348:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_AMAX, *value);
 2361              		.loc 1 348 10 is_stmt 1 view .LVU656
 349:boards/TMC5160_eval.c **** 		}
 2362              		.loc 1 349 4 view .LVU657
 2363 0856 2A68     		ldr	r2, [r5]
 2364              	.LVL223:
 349:boards/TMC5160_eval.c **** 		}
 2365              		.loc 1 349 4 is_stmt 0 view .LVU658
 2366 0858 2621     		movs	r1, #38
 2367              	.LVL224:
 349:boards/TMC5160_eval.c **** 		}
 2368              		.loc 1 349 4 view .LVU659
 2369 085a 0020     		movs	r0, #0
 2370              	.LVL225:
 349:boards/TMC5160_eval.c **** 		}
 2371              		.loc 1 349 4 view .LVU660
 2372 085c FFF7FEFF 		bl	tmc5160_writeInt
 2373              	.LVL226:
 293:boards/TMC5160_eval.c **** 
 2374              		.loc 1 293 11 view .LVU661
 2375 0860 0024     		movs	r4, #0
 2376 0862 91E7     		b	.L120
 2377              	.LVL227:
 2378              	.L175:
 354:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
 2379              		.loc 1 354 3 is_stmt 1 view .LVU662
 355:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2380              		.loc 1 355 13 is_stmt 0 view .LVU663
 2381 0864 1020     		movs	r0, #16
 2382              	.LVL228:
 354:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
 2383              		.loc 1 354 5 view .LVU664
 2384 0866 36B9     		cbnz	r6, .L190
 355:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2385              		.loc 1 355 4 is_stmt 1 view .LVU665
 355:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2386              		.loc 1 355 13 is_stmt 0 view .LVU666
 2387 0868 FFF7FCFD 		bl	tmc5160_readInt.constprop.0
 2388              	.LVL229:
 355:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2389              		.loc 1 355 13 view .LVU667
 2390 086c C0F30420 		ubfx	r0, r0, #8, #5
 355:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2391              		.loc 1 355 11 view .LVU668
 2392 0870 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2393              		.loc 1 293 11 view .LVU669
 2394 0872 3446     		mov	r4, r6
 2395 0874 88E7     		b	.L120
 2396              	.LVL230:
 2397              	.L190:
 356:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, *value);
 2398              		.loc 1 356 10 is_stmt 1 view .LVU670
 357:boards/TMC5160_eval.c **** 		}
 2399              		.loc 1 357 4 view .LVU671
 2400 0876 FFF7F5FD 		bl	tmc5160_readInt.constprop.0
 2401              	.LVL231:
 357:boards/TMC5160_eval.c **** 		}
 2402              		.loc 1 357 4 is_stmt 0 view .LVU672
 2403 087a 2B68     		ldr	r3, [r5]
 2404 087c 1B02     		lsls	r3, r3, #8
 2405 087e 03F4F853 		and	r3, r3, #7936
 2406 0882 20F4F852 		bic	r2, r0, #7936
 2407 0886 1A43     		orrs	r2, r2, r3
 2408 0888 1021     		movs	r1, #16
 2409 088a 0020     		movs	r0, #0
 2410 088c FFF7FEFF 		bl	tmc5160_writeInt
 2411              	.LVL232:
 293:boards/TMC5160_eval.c **** 
 2412              		.loc 1 293 11 view .LVU673
 2413 0890 0024     		movs	r4, #0
 2414 0892 79E7     		b	.L120
 2415              	.LVL233:
 2416              	.L174:
 362:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
 2417              		.loc 1 362 3 is_stmt 1 view .LVU674
 363:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2418              		.loc 1 363 13 is_stmt 0 view .LVU675
 2419 0894 1020     		movs	r0, #16
 2420              	.LVL234:
 362:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
 2421              		.loc 1 362 5 view .LVU676
 2422 0896 36B9     		cbnz	r6, .L191
 363:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2423              		.loc 1 363 4 is_stmt 1 view .LVU677
 363:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2424              		.loc 1 363 13 is_stmt 0 view .LVU678
 2425 0898 FFF7E4FD 		bl	tmc5160_readInt.constprop.0
 2426              	.LVL235:
 363:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2427              		.loc 1 363 13 view .LVU679
 2428 089c 00F01F00 		and	r0, r0, #31
 363:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2429              		.loc 1 363 11 view .LVU680
 2430 08a0 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2431              		.loc 1 293 11 view .LVU681
 2432 08a2 3446     		mov	r4, r6
 2433 08a4 70E7     		b	.L120
 2434              	.LVL236:
 2435              	.L191:
 364:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, *value)
 2436              		.loc 1 364 10 is_stmt 1 view .LVU682
 365:boards/TMC5160_eval.c **** 		}
 2437              		.loc 1 365 4 view .LVU683
 2438 08a6 FFF7DDFD 		bl	tmc5160_readInt.constprop.0
 2439              	.LVL237:
 365:boards/TMC5160_eval.c **** 		}
 2440              		.loc 1 365 4 is_stmt 0 view .LVU684
 2441 08aa 2A68     		ldr	r2, [r5]
 2442 08ac 20F01F00 		bic	r0, r0, #31
 2443 08b0 02F01F02 		and	r2, r2, #31
 2444 08b4 0243     		orrs	r2, r2, r0
 2445 08b6 1021     		movs	r1, #16
 2446 08b8 0020     		movs	r0, #0
 2447 08ba FFF7FEFF 		bl	tmc5160_writeInt
 2448              	.LVL238:
 293:boards/TMC5160_eval.c **** 
 2449              		.loc 1 293 11 view .LVU685
 2450 08be 0024     		movs	r4, #0
 2451 08c0 62E7     		b	.L120
 2452              	.LVL239:
 2453              	.L173:
 370:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_POSITION_REACHED_MASK, TMC5160_POSI
 2454              		.loc 1 370 3 is_stmt 1 view .LVU686
 370:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_POSITION_REACHED_MASK, TMC5160_POSI
 2455              		.loc 1 370 5 is_stmt 0 view .LVU687
 2456 08c2 0028     		cmp	r0, #0
 2457 08c4 40F0CF84 		bne	.L268
 371:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2458              		.loc 1 371 4 is_stmt 1 view .LVU688
 371:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2459              		.loc 1 371 13 is_stmt 0 view .LVU689
 2460 08c8 3520     		movs	r0, #53
 2461              	.LVL240:
 371:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2462              		.loc 1 371 13 view .LVU690
 2463 08ca FFF7CBFD 		bl	tmc5160_readInt.constprop.0
 2464              	.LVL241:
 371:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2465              		.loc 1 371 13 view .LVU691
 2466 08ce C0F34020 		ubfx	r0, r0, #9, #1
 371:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2467              		.loc 1 371 11 view .LVU692
 2468 08d2 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2469              		.loc 1 293 11 view .LVU693
 2470 08d4 3446     		mov	r4, r6
 2471 08d6 57E7     		b	.L120
 2472              	.LVL242:
 2473              	.L172:
 378:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_R_MASK, TMC5160_STATUS
 2474              		.loc 1 378 3 is_stmt 1 view .LVU694
 378:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_R_MASK, TMC5160_STATUS
 2475              		.loc 1 378 5 is_stmt 0 view .LVU695
 2476 08d8 0028     		cmp	r0, #0
 2477 08da 40F0C784 		bne	.L269
 379:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2478              		.loc 1 379 4 is_stmt 1 view .LVU696
 379:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2479              		.loc 1 379 14 is_stmt 0 view .LVU697
 2480 08de 3520     		movs	r0, #53
 2481              	.LVL243:
 379:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2482              		.loc 1 379 14 view .LVU698
 2483 08e0 FFF7C0FD 		bl	tmc5160_readInt.constprop.0
 2484              	.LVL244:
 379:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2485              		.loc 1 379 13 view .LVU699
 2486 08e4 10F0020F 		tst	r0, #2
 2487 08e8 0CBF     		ite	eq
 2488 08ea 0123     		moveq	r3, #1
 2489 08ec 0023     		movne	r3, #0
 379:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2490              		.loc 1 379 11 view .LVU700
 2491 08ee 2B60     		str	r3, [r5]
 293:boards/TMC5160_eval.c **** 
 2492              		.loc 1 293 11 view .LVU701
 2493 08f0 3446     		mov	r4, r6
 2494 08f2 49E7     		b	.L120
 2495              	.LVL245:
 2496              	.L171:
 386:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_L_MASK, TMC5160_STATUS
 2497              		.loc 1 386 3 is_stmt 1 view .LVU702
 386:boards/TMC5160_eval.c **** 			*value = !TMC5160_FIELD_READ(motor, TMC5160_RAMPSTAT, TMC5160_STATUS_STOP_L_MASK, TMC5160_STATUS
 2498              		.loc 1 386 5 is_stmt 0 view .LVU703
 2499 08f4 0028     		cmp	r0, #0
 2500 08f6 40F0BC84 		bne	.L270
 387:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2501              		.loc 1 387 4 is_stmt 1 view .LVU704
 387:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2502              		.loc 1 387 14 is_stmt 0 view .LVU705
 2503 08fa 3520     		movs	r0, #53
 2504              	.LVL246:
 387:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2505              		.loc 1 387 14 view .LVU706
 2506 08fc FFF7B2FD 		bl	tmc5160_readInt.constprop.0
 2507              	.LVL247:
 387:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2508              		.loc 1 387 11 view .LVU707
 2509 0900 C043     		mvns	r0, r0
 2510 0902 00F00100 		and	r0, r0, #1
 2511 0906 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2512              		.loc 1 293 11 view .LVU708
 2513 0908 3446     		mov	r4, r6
 2514 090a 3DE7     		b	.L120
 2515              	.LVL248:
 2516              	.L170:
 394:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_EN
 2517              		.loc 1 394 3 is_stmt 1 view .LVU709
 395:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2518              		.loc 1 395 13 is_stmt 0 view .LVU710
 2519 090c 3420     		movs	r0, #52
 2520              	.LVL249:
 394:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_EN
 2521              		.loc 1 394 5 view .LVU711
 2522 090e 36B9     		cbnz	r6, .L192
 395:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2523              		.loc 1 395 4 is_stmt 1 view .LVU712
 395:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2524              		.loc 1 395 13 is_stmt 0 view .LVU713
 2525 0910 FFF7A8FD 		bl	tmc5160_readInt.constprop.0
 2526              	.LVL250:
 395:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2527              		.loc 1 395 13 view .LVU714
 2528 0914 C0F34000 		ubfx	r0, r0, #1, #1
 395:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2529              		.loc 1 395 11 view .LVU715
 2530 0918 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2531              		.loc 1 293 11 view .LVU716
 2532 091a 3446     		mov	r4, r6
 2533 091c 34E7     		b	.L120
 2534              	.LVL251:
 2535              	.L192:
 396:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_R_ENABLE_MASK, TMC5160_STOP_R_ENABLE_SH
 2536              		.loc 1 396 10 is_stmt 1 view .LVU717
 397:boards/TMC5160_eval.c **** 		}
 2537              		.loc 1 397 4 view .LVU718
 2538 091e FFF7A1FD 		bl	tmc5160_readInt.constprop.0
 2539              	.LVL252:
 397:boards/TMC5160_eval.c **** 		}
 2540              		.loc 1 397 4 is_stmt 0 view .LVU719
 2541 0922 2B68     		ldr	r3, [r5]
 2542 0924 5B00     		lsls	r3, r3, #1
 2543 0926 03F00203 		and	r3, r3, #2
 2544 092a 20F00202 		bic	r2, r0, #2
 2545 092e 1A43     		orrs	r2, r2, r3
 2546 0930 3421     		movs	r1, #52
 2547 0932 0020     		movs	r0, #0
 2548 0934 FFF7FEFF 		bl	tmc5160_writeInt
 2549              	.LVL253:
 293:boards/TMC5160_eval.c **** 
 2550              		.loc 1 293 11 view .LVU720
 2551 0938 0024     		movs	r4, #0
 2552 093a 25E7     		b	.L120
 2553              	.LVL254:
 2554              	.L169:
 402:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_EN
 2555              		.loc 1 402 3 is_stmt 1 view .LVU721
 403:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2556              		.loc 1 403 13 is_stmt 0 view .LVU722
 2557 093c 3420     		movs	r0, #52
 2558              	.LVL255:
 402:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_EN
 2559              		.loc 1 402 5 view .LVU723
 2560 093e 36B9     		cbnz	r6, .L193
 403:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2561              		.loc 1 403 4 is_stmt 1 view .LVU724
 403:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2562              		.loc 1 403 13 is_stmt 0 view .LVU725
 2563 0940 FFF790FD 		bl	tmc5160_readInt.constprop.0
 2564              	.LVL256:
 403:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2565              		.loc 1 403 13 view .LVU726
 2566 0944 00F00100 		and	r0, r0, #1
 403:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2567              		.loc 1 403 11 view .LVU727
 2568 0948 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2569              		.loc 1 293 11 view .LVU728
 2570 094a 3446     		mov	r4, r6
 2571 094c 1CE7     		b	.L120
 2572              	.LVL257:
 2573              	.L193:
 404:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_STOP_L_ENABLE_MASK, TMC5160_STOP_L_ENABLE_SH
 2574              		.loc 1 404 10 is_stmt 1 view .LVU729
 405:boards/TMC5160_eval.c **** 		}
 2575              		.loc 1 405 4 view .LVU730
 2576 094e FFF789FD 		bl	tmc5160_readInt.constprop.0
 2577              	.LVL258:
 405:boards/TMC5160_eval.c **** 		}
 2578              		.loc 1 405 4 is_stmt 0 view .LVU731
 2579 0952 2A68     		ldr	r2, [r5]
 2580 0954 20F00100 		bic	r0, r0, #1
 2581 0958 02F00102 		and	r2, r2, #1
 2582 095c 0243     		orrs	r2, r2, r0
 2583 095e 3421     		movs	r1, #52
 2584 0960 0020     		movs	r0, #0
 2585 0962 FFF7FEFF 		bl	tmc5160_writeInt
 2586              	.LVL259:
 293:boards/TMC5160_eval.c **** 
 2587              		.loc 1 293 11 view .LVU732
 2588 0966 0024     		movs	r4, #0
 2589 0968 0EE7     		b	.L120
 2590              	.LVL260:
 2591              	.L168:
 410:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_SWMODE);
 2592              		.loc 1 410 3 is_stmt 1 view .LVU733
 410:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_SWMODE);
 2593              		.loc 1 410 5 is_stmt 0 view .LVU734
 2594 096a 28B9     		cbnz	r0, .L194
 411:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2595              		.loc 1 411 4 is_stmt 1 view .LVU735
 411:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2596              		.loc 1 411 13 is_stmt 0 view .LVU736
 2597 096c 3420     		movs	r0, #52
 2598              	.LVL261:
 411:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2599              		.loc 1 411 13 view .LVU737
 2600 096e FFF779FD 		bl	tmc5160_readInt.constprop.0
 2601              	.LVL262:
 293:boards/TMC5160_eval.c **** 
 2602              		.loc 1 293 11 view .LVU738
 2603 0972 3446     		mov	r4, r6
 411:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2604              		.loc 1 411 11 view .LVU739
 2605 0974 2860     		str	r0, [r5]
 2606 0976 07E7     		b	.L120
 2607              	.LVL263:
 2608              	.L194:
 412:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_SWMODE, *value);
 2609              		.loc 1 412 10 is_stmt 1 view .LVU740
 413:boards/TMC5160_eval.c **** 		}
 2610              		.loc 1 413 4 view .LVU741
 2611 0978 2A68     		ldr	r2, [r5]
 2612              	.LVL264:
 413:boards/TMC5160_eval.c **** 		}
 2613              		.loc 1 413 4 is_stmt 0 view .LVU742
 2614 097a 3421     		movs	r1, #52
 2615              	.LVL265:
 413:boards/TMC5160_eval.c **** 		}
 2616              		.loc 1 413 4 view .LVU743
 2617 097c 0020     		movs	r0, #0
 2618              	.LVL266:
 413:boards/TMC5160_eval.c **** 		}
 2619              		.loc 1 413 4 view .LVU744
 2620 097e FFF7FEFF 		bl	tmc5160_writeInt
 2621              	.LVL267:
 293:boards/TMC5160_eval.c **** 
 2622              		.loc 1 293 11 view .LVU745
 2623 0982 0024     		movs	r4, #0
 2624 0984 00E7     		b	.L120
 2625              	.LVL268:
 2626              	.L167:
 418:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_A1);
 2627              		.loc 1 418 3 is_stmt 1 view .LVU746
 418:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_A1);
 2628              		.loc 1 418 5 is_stmt 0 view .LVU747
 2629 0986 28B9     		cbnz	r0, .L195
 419:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2630              		.loc 1 419 4 is_stmt 1 view .LVU748
 419:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2631              		.loc 1 419 13 is_stmt 0 view .LVU749
 2632 0988 2420     		movs	r0, #36
 2633              	.LVL269:
 419:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2634              		.loc 1 419 13 view .LVU750
 2635 098a FFF76BFD 		bl	tmc5160_readInt.constprop.0
 2636              	.LVL270:
 293:boards/TMC5160_eval.c **** 
 2637              		.loc 1 293 11 view .LVU751
 2638 098e 3446     		mov	r4, r6
 419:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2639              		.loc 1 419 11 view .LVU752
 2640 0990 2860     		str	r0, [r5]
 2641 0992 F9E6     		b	.L120
 2642              	.LVL271:
 2643              	.L195:
 420:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_A1, *value);
 2644              		.loc 1 420 10 is_stmt 1 view .LVU753
 421:boards/TMC5160_eval.c **** 		}
 2645              		.loc 1 421 4 view .LVU754
 2646 0994 2A68     		ldr	r2, [r5]
 2647              	.LVL272:
 421:boards/TMC5160_eval.c **** 		}
 2648              		.loc 1 421 4 is_stmt 0 view .LVU755
 2649 0996 2421     		movs	r1, #36
 2650              	.LVL273:
 421:boards/TMC5160_eval.c **** 		}
 2651              		.loc 1 421 4 view .LVU756
 2652 0998 0020     		movs	r0, #0
 2653              	.LVL274:
 421:boards/TMC5160_eval.c **** 		}
 2654              		.loc 1 421 4 view .LVU757
 2655 099a FFF7FEFF 		bl	tmc5160_writeInt
 2656              	.LVL275:
 293:boards/TMC5160_eval.c **** 
 2657              		.loc 1 293 11 view .LVU758
 2658 099e 0024     		movs	r4, #0
 2659 09a0 F2E6     		b	.L120
 2660              	.LVL276:
 2661              	.L166:
 426:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_V1);
 2662              		.loc 1 426 3 is_stmt 1 view .LVU759
 426:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_V1);
 2663              		.loc 1 426 5 is_stmt 0 view .LVU760
 2664 09a2 28B9     		cbnz	r0, .L196
 427:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2665              		.loc 1 427 4 is_stmt 1 view .LVU761
 427:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2666              		.loc 1 427 13 is_stmt 0 view .LVU762
 2667 09a4 2520     		movs	r0, #37
 2668              	.LVL277:
 427:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2669              		.loc 1 427 13 view .LVU763
 2670 09a6 FFF75DFD 		bl	tmc5160_readInt.constprop.0
 2671              	.LVL278:
 293:boards/TMC5160_eval.c **** 
 2672              		.loc 1 293 11 view .LVU764
 2673 09aa 3446     		mov	r4, r6
 427:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2674              		.loc 1 427 11 view .LVU765
 2675 09ac 2860     		str	r0, [r5]
 2676 09ae EBE6     		b	.L120
 2677              	.LVL279:
 2678              	.L196:
 428:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_V1, *value);
 2679              		.loc 1 428 10 is_stmt 1 view .LVU766
 429:boards/TMC5160_eval.c **** 		}
 2680              		.loc 1 429 4 view .LVU767
 2681 09b0 2A68     		ldr	r2, [r5]
 2682              	.LVL280:
 429:boards/TMC5160_eval.c **** 		}
 2683              		.loc 1 429 4 is_stmt 0 view .LVU768
 2684 09b2 2521     		movs	r1, #37
 2685              	.LVL281:
 429:boards/TMC5160_eval.c **** 		}
 2686              		.loc 1 429 4 view .LVU769
 2687 09b4 0020     		movs	r0, #0
 2688              	.LVL282:
 429:boards/TMC5160_eval.c **** 		}
 2689              		.loc 1 429 4 view .LVU770
 2690 09b6 FFF7FEFF 		bl	tmc5160_writeInt
 2691              	.LVL283:
 293:boards/TMC5160_eval.c **** 
 2692              		.loc 1 293 11 view .LVU771
 2693 09ba 0024     		movs	r4, #0
 2694 09bc E4E6     		b	.L120
 2695              	.LVL284:
 2696              	.L165:
 434:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_DMAX);
 2697              		.loc 1 434 3 is_stmt 1 view .LVU772
 434:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_DMAX);
 2698              		.loc 1 434 5 is_stmt 0 view .LVU773
 2699 09be 28B9     		cbnz	r0, .L197
 435:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2700              		.loc 1 435 4 is_stmt 1 view .LVU774
 435:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2701              		.loc 1 435 13 is_stmt 0 view .LVU775
 2702 09c0 2820     		movs	r0, #40
 2703              	.LVL285:
 435:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2704              		.loc 1 435 13 view .LVU776
 2705 09c2 FFF74FFD 		bl	tmc5160_readInt.constprop.0
 2706              	.LVL286:
 293:boards/TMC5160_eval.c **** 
 2707              		.loc 1 293 11 view .LVU777
 2708 09c6 3446     		mov	r4, r6
 435:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2709              		.loc 1 435 11 view .LVU778
 2710 09c8 2860     		str	r0, [r5]
 2711 09ca DDE6     		b	.L120
 2712              	.LVL287:
 2713              	.L197:
 436:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_DMAX, *value);
 2714              		.loc 1 436 10 is_stmt 1 view .LVU779
 437:boards/TMC5160_eval.c **** 		}
 2715              		.loc 1 437 4 view .LVU780
 2716 09cc 2A68     		ldr	r2, [r5]
 2717              	.LVL288:
 437:boards/TMC5160_eval.c **** 		}
 2718              		.loc 1 437 4 is_stmt 0 view .LVU781
 2719 09ce 2821     		movs	r1, #40
 2720              	.LVL289:
 437:boards/TMC5160_eval.c **** 		}
 2721              		.loc 1 437 4 view .LVU782
 2722 09d0 0020     		movs	r0, #0
 2723              	.LVL290:
 437:boards/TMC5160_eval.c **** 		}
 2724              		.loc 1 437 4 view .LVU783
 2725 09d2 FFF7FEFF 		bl	tmc5160_writeInt
 2726              	.LVL291:
 293:boards/TMC5160_eval.c **** 
 2727              		.loc 1 293 11 view .LVU784
 2728 09d6 0024     		movs	r4, #0
 2729 09d8 D6E6     		b	.L120
 2730              	.LVL292:
 2731              	.L164:
 442:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_D1);
 2732              		.loc 1 442 3 is_stmt 1 view .LVU785
 442:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_D1);
 2733              		.loc 1 442 5 is_stmt 0 view .LVU786
 2734 09da 28B9     		cbnz	r0, .L198
 443:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2735              		.loc 1 443 4 is_stmt 1 view .LVU787
 443:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2736              		.loc 1 443 13 is_stmt 0 view .LVU788
 2737 09dc 2A20     		movs	r0, #42
 2738              	.LVL293:
 443:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2739              		.loc 1 443 13 view .LVU789
 2740 09de FFF741FD 		bl	tmc5160_readInt.constprop.0
 2741              	.LVL294:
 293:boards/TMC5160_eval.c **** 
 2742              		.loc 1 293 11 view .LVU790
 2743 09e2 3446     		mov	r4, r6
 443:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2744              		.loc 1 443 11 view .LVU791
 2745 09e4 2860     		str	r0, [r5]
 2746 09e6 CFE6     		b	.L120
 2747              	.LVL295:
 2748              	.L198:
 444:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_D1, *value);
 2749              		.loc 1 444 10 is_stmt 1 view .LVU792
 445:boards/TMC5160_eval.c **** 		}
 2750              		.loc 1 445 4 view .LVU793
 2751 09e8 2A68     		ldr	r2, [r5]
 2752              	.LVL296:
 445:boards/TMC5160_eval.c **** 		}
 2753              		.loc 1 445 4 is_stmt 0 view .LVU794
 2754 09ea 2A21     		movs	r1, #42
 2755              	.LVL297:
 445:boards/TMC5160_eval.c **** 		}
 2756              		.loc 1 445 4 view .LVU795
 2757 09ec 0020     		movs	r0, #0
 2758              	.LVL298:
 445:boards/TMC5160_eval.c **** 		}
 2759              		.loc 1 445 4 view .LVU796
 2760 09ee FFF7FEFF 		bl	tmc5160_writeInt
 2761              	.LVL299:
 293:boards/TMC5160_eval.c **** 
 2762              		.loc 1 293 11 view .LVU797
 2763 09f2 0024     		movs	r4, #0
 2764 09f4 C8E6     		b	.L120
 2765              	.LVL300:
 2766              	.L163:
 450:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTART);
 2767              		.loc 1 450 3 is_stmt 1 view .LVU798
 450:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTART);
 2768              		.loc 1 450 5 is_stmt 0 view .LVU799
 2769 09f6 28B9     		cbnz	r0, .L199
 451:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2770              		.loc 1 451 4 is_stmt 1 view .LVU800
 451:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2771              		.loc 1 451 13 is_stmt 0 view .LVU801
 2772 09f8 2320     		movs	r0, #35
 2773              	.LVL301:
 451:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2774              		.loc 1 451 13 view .LVU802
 2775 09fa FFF733FD 		bl	tmc5160_readInt.constprop.0
 2776              	.LVL302:
 293:boards/TMC5160_eval.c **** 
 2777              		.loc 1 293 11 view .LVU803
 2778 09fe 3446     		mov	r4, r6
 451:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2779              		.loc 1 451 11 view .LVU804
 2780 0a00 2860     		str	r0, [r5]
 2781 0a02 C1E6     		b	.L120
 2782              	.LVL303:
 2783              	.L199:
 452:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VSTART, *value);
 2784              		.loc 1 452 10 is_stmt 1 view .LVU805
 453:boards/TMC5160_eval.c **** 		}
 2785              		.loc 1 453 4 view .LVU806
 2786 0a04 2A68     		ldr	r2, [r5]
 2787              	.LVL304:
 453:boards/TMC5160_eval.c **** 		}
 2788              		.loc 1 453 4 is_stmt 0 view .LVU807
 2789 0a06 2321     		movs	r1, #35
 2790              	.LVL305:
 453:boards/TMC5160_eval.c **** 		}
 2791              		.loc 1 453 4 view .LVU808
 2792 0a08 0020     		movs	r0, #0
 2793              	.LVL306:
 453:boards/TMC5160_eval.c **** 		}
 2794              		.loc 1 453 4 view .LVU809
 2795 0a0a FFF7FEFF 		bl	tmc5160_writeInt
 2796              	.LVL307:
 293:boards/TMC5160_eval.c **** 
 2797              		.loc 1 293 11 view .LVU810
 2798 0a0e 0024     		movs	r4, #0
 2799 0a10 BAE6     		b	.L120
 2800              	.LVL308:
 2801              	.L162:
 458:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTOP);
 2802              		.loc 1 458 3 is_stmt 1 view .LVU811
 458:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VSTOP);
 2803              		.loc 1 458 5 is_stmt 0 view .LVU812
 2804 0a12 28B9     		cbnz	r0, .L200
 459:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2805              		.loc 1 459 4 is_stmt 1 view .LVU813
 459:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2806              		.loc 1 459 13 is_stmt 0 view .LVU814
 2807 0a14 2B20     		movs	r0, #43
 2808              	.LVL309:
 459:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2809              		.loc 1 459 13 view .LVU815
 2810 0a16 FFF725FD 		bl	tmc5160_readInt.constprop.0
 2811              	.LVL310:
 293:boards/TMC5160_eval.c **** 
 2812              		.loc 1 293 11 view .LVU816
 2813 0a1a 3446     		mov	r4, r6
 459:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2814              		.loc 1 459 11 view .LVU817
 2815 0a1c 2860     		str	r0, [r5]
 2816 0a1e B3E6     		b	.L120
 2817              	.LVL311:
 2818              	.L200:
 460:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VSTOP, *value);
 2819              		.loc 1 460 10 is_stmt 1 view .LVU818
 461:boards/TMC5160_eval.c **** 		}
 2820              		.loc 1 461 4 view .LVU819
 2821 0a20 2A68     		ldr	r2, [r5]
 2822              	.LVL312:
 461:boards/TMC5160_eval.c **** 		}
 2823              		.loc 1 461 4 is_stmt 0 view .LVU820
 2824 0a22 2B21     		movs	r1, #43
 2825              	.LVL313:
 461:boards/TMC5160_eval.c **** 		}
 2826              		.loc 1 461 4 view .LVU821
 2827 0a24 0020     		movs	r0, #0
 2828              	.LVL314:
 461:boards/TMC5160_eval.c **** 		}
 2829              		.loc 1 461 4 view .LVU822
 2830 0a26 FFF7FEFF 		bl	tmc5160_writeInt
 2831              	.LVL315:
 293:boards/TMC5160_eval.c **** 
 2832              		.loc 1 293 11 view .LVU823
 2833 0a2a 0024     		movs	r4, #0
 2834 0a2c ACE6     		b	.L120
 2835              	.LVL316:
 2836              	.L161:
 466:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_TZEROWAIT);
 2837              		.loc 1 466 3 is_stmt 1 view .LVU824
 466:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_TZEROWAIT);
 2838              		.loc 1 466 5 is_stmt 0 view .LVU825
 2839 0a2e 28B9     		cbnz	r0, .L201
 467:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2840              		.loc 1 467 4 is_stmt 1 view .LVU826
 467:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2841              		.loc 1 467 13 is_stmt 0 view .LVU827
 2842 0a30 2C20     		movs	r0, #44
 2843              	.LVL317:
 467:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2844              		.loc 1 467 13 view .LVU828
 2845 0a32 FFF717FD 		bl	tmc5160_readInt.constprop.0
 2846              	.LVL318:
 293:boards/TMC5160_eval.c **** 
 2847              		.loc 1 293 11 view .LVU829
 2848 0a36 3446     		mov	r4, r6
 467:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2849              		.loc 1 467 11 view .LVU830
 2850 0a38 2860     		str	r0, [r5]
 2851 0a3a A5E6     		b	.L120
 2852              	.LVL319:
 2853              	.L201:
 468:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TZEROWAIT, *value);
 2854              		.loc 1 468 10 is_stmt 1 view .LVU831
 469:boards/TMC5160_eval.c **** 		}
 2855              		.loc 1 469 4 view .LVU832
 2856 0a3c 2A68     		ldr	r2, [r5]
 2857              	.LVL320:
 469:boards/TMC5160_eval.c **** 		}
 2858              		.loc 1 469 4 is_stmt 0 view .LVU833
 2859 0a3e 2C21     		movs	r1, #44
 2860              	.LVL321:
 469:boards/TMC5160_eval.c **** 		}
 2861              		.loc 1 469 4 view .LVU834
 2862 0a40 0020     		movs	r0, #0
 2863              	.LVL322:
 469:boards/TMC5160_eval.c **** 		}
 2864              		.loc 1 469 4 view .LVU835
 2865 0a42 FFF7FEFF 		bl	tmc5160_writeInt
 2866              	.LVL323:
 293:boards/TMC5160_eval.c **** 
 2867              		.loc 1 293 11 view .LVU836
 2868 0a46 0024     		movs	r4, #0
 2869 0a48 9EE6     		b	.L120
 2870              	.LVL324:
 2871              	.L160:
 474:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_THIGH);
 2872              		.loc 1 474 3 is_stmt 1 view .LVU837
 2873 0a4a 1A4C     		ldr	r4, .L285+4
 474:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_THIGH);
 2874              		.loc 1 474 5 is_stmt 0 view .LVU838
 2875 0a4c 78B9     		cbnz	r0, .L202
 475:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
 2876              		.loc 1 475 4 is_stmt 1 view .LVU839
 475:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
 2877              		.loc 1 475 13 is_stmt 0 view .LVU840
 2878 0a4e 1520     		movs	r0, #21
 2879              	.LVL325:
 475:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((buffer)? buffer : 1));
 2880              		.loc 1 475 13 view .LVU841
 2881 0a50 FFF708FD 		bl	tmc5160_readInt.constprop.0
 2882              	.LVL326:
 476:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2883              		.loc 1 476 4 is_stmt 1 view .LVU842
 476:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2884              		.loc 1 476 13 is_stmt 0 view .LVU843
 2885 0a54 0128     		cmp	r0, #1
 2886 0a56 38BF     		it	cc
 2887 0a58 0120     		movcc	r0, #1
 2888              	.LVL327:
 476:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2889              		.loc 1 476 13 view .LVU844
 2890 0a5a 4FF08073 		mov	r3, #16777216
 2891 0a5e B3FBF0F0 		udiv	r0, r3, r0
 476:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2892              		.loc 1 476 11 view .LVU845
 2893 0a62 A042     		cmp	r0, r4
 2894 0a64 94BF     		ite	ls
 2895 0a66 2860     		strls	r0, [r5]
 2896 0a68 2C60     		strhi	r4, [r5]
 293:boards/TMC5160_eval.c **** 
 2897              		.loc 1 293 11 view .LVU846
 2898 0a6a 3446     		mov	r4, r6
 2899 0a6c 8CE6     		b	.L120
 2900              	.LVL328:
 2901              	.L202:
 477:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1 << 24) / ((*value)? *value:1));
 2902              		.loc 1 477 10 is_stmt 1 view .LVU847
 478:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
 2903              		.loc 1 478 4 view .LVU848
 478:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
 2904              		.loc 1 478 13 is_stmt 0 view .LVU849
 2905 0a6e 2B68     		ldr	r3, [r5]
 2906 0a70 002B     		cmp	r3, #0
 2907 0a72 08BF     		it	eq
 2908 0a74 0123     		moveq	r3, #1
 2909 0a76 4FF08072 		mov	r2, #16777216
 2910              	.LVL329:
 478:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
 2911              		.loc 1 478 13 view .LVU850
 2912 0a7a 92FBF3F2 		sdiv	r2, r2, r3
 2913 0a7e A242     		cmp	r2, r4
 2914 0a80 A8BF     		it	ge
 2915 0a82 2246     		movge	r2, r4
 478:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_THIGH, *value);
 2916              		.loc 1 478 11 view .LVU851
 2917 0a84 2A60     		str	r2, [r5]
 479:boards/TMC5160_eval.c **** 		}
 2918              		.loc 1 479 4 is_stmt 1 view .LVU852
 2919 0a86 1521     		movs	r1, #21
 2920              	.LVL330:
 479:boards/TMC5160_eval.c **** 		}
 2921              		.loc 1 479 4 is_stmt 0 view .LVU853
 2922 0a88 0020     		movs	r0, #0
 2923              	.LVL331:
 479:boards/TMC5160_eval.c **** 		}
 2924              		.loc 1 479 4 view .LVU854
 2925 0a8a FFF7FEFF 		bl	tmc5160_writeInt
 2926              	.LVL332:
 293:boards/TMC5160_eval.c **** 
 2927              		.loc 1 293 11 view .LVU855
 2928 0a8e 0024     		movs	r4, #0
 2929 0a90 7AE6     		b	.L120
 2930              	.LVL333:
 2931              	.L159:
 484:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VDCMIN);
 2932              		.loc 1 484 3 is_stmt 1 view .LVU856
 484:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_VDCMIN);
 2933              		.loc 1 484 5 is_stmt 0 view .LVU857
 2934 0a92 28B9     		cbnz	r0, .L204
 485:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2935              		.loc 1 485 4 is_stmt 1 view .LVU858
 485:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2936              		.loc 1 485 13 is_stmt 0 view .LVU859
 2937 0a94 3320     		movs	r0, #51
 2938              	.LVL334:
 485:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2939              		.loc 1 485 13 view .LVU860
 2940 0a96 FFF7E5FC 		bl	tmc5160_readInt.constprop.0
 2941              	.LVL335:
 293:boards/TMC5160_eval.c **** 
 2942              		.loc 1 293 11 view .LVU861
 2943 0a9a 3446     		mov	r4, r6
 485:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2944              		.loc 1 485 11 view .LVU862
 2945 0a9c 2860     		str	r0, [r5]
 2946 0a9e 73E6     		b	.L120
 2947              	.LVL336:
 2948              	.L204:
 486:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_VDCMIN, *value);
 2949              		.loc 1 486 10 is_stmt 1 view .LVU863
 487:boards/TMC5160_eval.c **** 		}
 2950              		.loc 1 487 4 view .LVU864
 2951 0aa0 2A68     		ldr	r2, [r5]
 2952              	.LVL337:
 487:boards/TMC5160_eval.c **** 		}
 2953              		.loc 1 487 4 is_stmt 0 view .LVU865
 2954 0aa2 3321     		movs	r1, #51
 2955              	.LVL338:
 487:boards/TMC5160_eval.c **** 		}
 2956              		.loc 1 487 4 view .LVU866
 2957 0aa4 0020     		movs	r0, #0
 2958              	.LVL339:
 487:boards/TMC5160_eval.c **** 		}
 2959              		.loc 1 487 4 view .LVU867
 2960 0aa6 FFF7FEFF 		bl	tmc5160_writeInt
 2961              	.LVL340:
 293:boards/TMC5160_eval.c **** 
 2962              		.loc 1 293 11 view .LVU868
 2963 0aaa 0024     		movs	r4, #0
 2964 0aac 6CE6     		b	.L120
 2965              	.L286:
 2966 0aae 00BF     		.align	2
 2967              	.L285:
 2968 0ab0 00000000 		.word	.LANCHOR0
 2969 0ab4 FFFF0F00 		.word	1048575
 2970              	.LVL341:
 2971              	.L158:
 492:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHI
 2972              		.loc 1 492 3 is_stmt 1 view .LVU869
 493:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2973              		.loc 1 493 13 is_stmt 0 view .LVU870
 2974 0ab8 6C20     		movs	r0, #108
 2975              	.LVL342:
 492:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHI
 2976              		.loc 1 492 5 view .LVU871
 2977 0aba 36B9     		cbnz	r6, .L205
 493:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2978              		.loc 1 493 4 is_stmt 1 view .LVU872
 493:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2979              		.loc 1 493 13 is_stmt 0 view .LVU873
 2980 0abc FFF7D2FC 		bl	tmc5160_readInt.constprop.0
 2981              	.LVL343:
 493:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2982              		.loc 1 493 13 view .LVU874
 2983 0ac0 C0F3C040 		ubfx	r0, r0, #19, #1
 493:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 2984              		.loc 1 493 11 view .LVU875
 2985 0ac4 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 2986              		.loc 1 293 11 view .LVU876
 2987 0ac6 3446     		mov	r4, r6
 2988 0ac8 5EE6     		b	.L120
 2989              	.LVL344:
 2990              	.L205:
 494:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHCHM_MASK, TMC5160_VHIGHCHM_SHIFT, *va
 2991              		.loc 1 494 10 is_stmt 1 view .LVU877
 495:boards/TMC5160_eval.c **** 		}
 2992              		.loc 1 495 4 view .LVU878
 2993 0aca FFF7CBFC 		bl	tmc5160_readInt.constprop.0
 2994              	.LVL345:
 495:boards/TMC5160_eval.c **** 		}
 2995              		.loc 1 495 4 is_stmt 0 view .LVU879
 2996 0ace 2B68     		ldr	r3, [r5]
 2997 0ad0 DB04     		lsls	r3, r3, #19
 2998 0ad2 03F40023 		and	r3, r3, #524288
 2999 0ad6 20F40022 		bic	r2, r0, #524288
 3000 0ada 1A43     		orrs	r2, r2, r3
 3001 0adc 6C21     		movs	r1, #108
 3002 0ade 0020     		movs	r0, #0
 3003 0ae0 FFF7FEFF 		bl	tmc5160_writeInt
 3004              	.LVL346:
 293:boards/TMC5160_eval.c **** 
 3005              		.loc 1 293 11 view .LVU880
 3006 0ae4 0024     		movs	r4, #0
 3007 0ae6 4FE6     		b	.L120
 3008              	.LVL347:
 3009              	.L157:
 500:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT
 3010              		.loc 1 500 3 is_stmt 1 view .LVU881
 501:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3011              		.loc 1 501 13 is_stmt 0 view .LVU882
 3012 0ae8 6C20     		movs	r0, #108
 3013              	.LVL348:
 500:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT
 3014              		.loc 1 500 5 view .LVU883
 3015 0aea 36B9     		cbnz	r6, .L206
 501:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3016              		.loc 1 501 4 is_stmt 1 view .LVU884
 501:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3017              		.loc 1 501 13 is_stmt 0 view .LVU885
 3018 0aec FFF7BAFC 		bl	tmc5160_readInt.constprop.0
 3019              	.LVL349:
 501:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3020              		.loc 1 501 13 view .LVU886
 3021 0af0 C0F38040 		ubfx	r0, r0, #18, #1
 501:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3022              		.loc 1 501 11 view .LVU887
 3023 0af4 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3024              		.loc 1 293 11 view .LVU888
 3025 0af6 3446     		mov	r4, r6
 3026 0af8 46E6     		b	.L120
 3027              	.LVL350:
 3028              	.L206:
 502:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_VHIGHFS_MASK, TMC5160_VHIGHFS_SHIFT, *valu
 3029              		.loc 1 502 10 is_stmt 1 view .LVU889
 503:boards/TMC5160_eval.c **** 		}
 3030              		.loc 1 503 4 view .LVU890
 3031 0afa FFF7B3FC 		bl	tmc5160_readInt.constprop.0
 3032              	.LVL351:
 503:boards/TMC5160_eval.c **** 		}
 3033              		.loc 1 503 4 is_stmt 0 view .LVU891
 3034 0afe 2B68     		ldr	r3, [r5]
 3035 0b00 9B04     		lsls	r3, r3, #18
 3036 0b02 03F48023 		and	r3, r3, #262144
 3037 0b06 20F48022 		bic	r2, r0, #262144
 3038 0b0a 1A43     		orrs	r2, r2, r3
 3039 0b0c 6C21     		movs	r1, #108
 3040 0b0e 0020     		movs	r0, #0
 3041 0b10 FFF7FEFF 		bl	tmc5160_writeInt
 3042              	.LVL352:
 293:boards/TMC5160_eval.c **** 
 3043              		.loc 1 293 11 view .LVU892
 3044 0b14 0024     		movs	r4, #0
 3045 0b16 37E6     		b	.L120
 3046              	.LVL353:
 3047              	.L156:
 508:boards/TMC5160_eval.c **** 			*value = TMC5160.velocity;
 3048              		.loc 1 508 3 is_stmt 1 view .LVU893
 508:boards/TMC5160_eval.c **** 			*value = TMC5160.velocity;
 3049              		.loc 1 508 5 is_stmt 0 view .LVU894
 3050 0b18 0028     		cmp	r0, #0
 3051 0b1a 40F0AD83 		bne	.L272
 509:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3052              		.loc 1 509 4 is_stmt 1 view .LVU895
 509:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3053              		.loc 1 509 20 is_stmt 0 view .LVU896
 3054 0b1e B54B     		ldr	r3, .L287
 509:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3055              		.loc 1 509 11 view .LVU897
 3056 0b20 1B68     		ldr	r3, [r3]
 3057 0b22 2B60     		str	r3, [r5]
 293:boards/TMC5160_eval.c **** 
 3058              		.loc 1 293 11 view .LVU898
 3059 0b24 0446     		mov	r4, r0
 3060 0b26 2FE6     		b	.L120
 3061              	.L155:
 516:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_
 3062              		.loc 1 516 3 is_stmt 1 view .LVU899
 516:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_
 3063              		.loc 1 516 5 is_stmt 0 view .LVU900
 3064 0b28 30B9     		cbnz	r0, .L207
 517:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3065              		.loc 1 517 4 is_stmt 1 view .LVU901
 517:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3066              		.loc 1 517 13 is_stmt 0 view .LVU902
 3067 0b2a FFF79BFC 		bl	tmc5160_readInt.constprop.0
 3068              	.LVL354:
 517:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3069              		.loc 1 517 13 view .LVU903
 3070 0b2e 00F00100 		and	r0, r0, #1
 517:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3071              		.loc 1 517 11 view .LVU904
 3072 0b32 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3073              		.loc 1 293 11 view .LVU905
 3074 0b34 3446     		mov	r4, r6
 3075 0b36 27E6     		b	.L120
 3076              	.LVL355:
 3077              	.L207:
 518:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_RECALIBRATE_MASK, TMC5160_RECALIBRATE_SHIFT, 
 3078              		.loc 1 518 10 is_stmt 1 view .LVU906
 519:boards/TMC5160_eval.c **** 		}
 3079              		.loc 1 519 4 view .LVU907
 3080 0b38 0020     		movs	r0, #0
 3081              	.LVL356:
 519:boards/TMC5160_eval.c **** 		}
 3082              		.loc 1 519 4 is_stmt 0 view .LVU908
 3083 0b3a FFF793FC 		bl	tmc5160_readInt.constprop.0
 3084              	.LVL357:
 519:boards/TMC5160_eval.c **** 		}
 3085              		.loc 1 519 4 view .LVU909
 3086 0b3e 2A68     		ldr	r2, [r5]
 3087 0b40 20F00100 		bic	r0, r0, #1
 3088 0b44 0021     		movs	r1, #0
 3089 0b46 02F00102 		and	r2, r2, #1
 3090 0b4a 0243     		orrs	r2, r2, r0
 3091 0b4c 0846     		mov	r0, r1
 3092 0b4e FFF7FEFF 		bl	tmc5160_writeInt
 3093              	.LVL358:
 293:boards/TMC5160_eval.c **** 
 3094              		.loc 1 293 11 view .LVU910
 3095 0b52 0024     		movs	r4, #0
 3096 0b54 18E6     		b	.L120
 3097              	.LVL359:
 3098              	.L153:
 524:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT)
 3099              		.loc 1 524 3 is_stmt 1 view .LVU911
 524:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT)
 3100              		.loc 1 524 5 is_stmt 0 view .LVU912
 3101 0b56 30B9     		cbnz	r0, .L208
 525:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3102              		.loc 1 525 4 is_stmt 1 view .LVU913
 525:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3103              		.loc 1 525 13 is_stmt 0 view .LVU914
 3104 0b58 FFF784FC 		bl	tmc5160_readInt.constprop.0
 3105              	.LVL360:
 525:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3106              		.loc 1 525 13 view .LVU915
 3107 0b5c C0F34000 		ubfx	r0, r0, #1, #1
 525:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3108              		.loc 1 525 11 view .LVU916
 3109 0b60 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3110              		.loc 1 293 11 view .LVU917
 3111 0b62 3446     		mov	r4, r6
 3112 0b64 10E6     		b	.L120
 3113              	.LVL361:
 3114              	.L208:
 526:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_GCONF, TMC5160_REFR_DIR_MASK, TMC5160_REFR_DIR_SHIFT, *value
 3115              		.loc 1 526 10 is_stmt 1 view .LVU918
 527:boards/TMC5160_eval.c **** 		}
 3116              		.loc 1 527 4 view .LVU919
 3117 0b66 0020     		movs	r0, #0
 3118              	.LVL362:
 527:boards/TMC5160_eval.c **** 		}
 3119              		.loc 1 527 4 is_stmt 0 view .LVU920
 3120 0b68 FFF77CFC 		bl	tmc5160_readInt.constprop.0
 3121              	.LVL363:
 527:boards/TMC5160_eval.c **** 		}
 3122              		.loc 1 527 4 view .LVU921
 3123 0b6c 2B68     		ldr	r3, [r5]
 3124 0b6e 5B00     		lsls	r3, r3, #1
 3125 0b70 03F00203 		and	r3, r3, #2
 3126 0b74 20F00202 		bic	r2, r0, #2
 3127 0b78 0021     		movs	r1, #0
 3128 0b7a 1A43     		orrs	r2, r2, r3
 3129 0b7c 0846     		mov	r0, r1
 3130 0b7e FFF7FEFF 		bl	tmc5160_writeInt
 3131              	.LVL364:
 293:boards/TMC5160_eval.c **** 
 3132              		.loc 1 293 11 view .LVU922
 3133 0b82 0024     		movs	r4, #0
 3134 0b84 00E6     		b	.L120
 3135              	.LVL365:
 3136              	.L152:
 532:boards/TMC5160_eval.c **** 			*value = 0x100 >> TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SH
 3137              		.loc 1 532 3 is_stmt 1 view .LVU923
 532:boards/TMC5160_eval.c **** 			*value = 0x100 >> TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_MRES_MASK, TMC5160_MRES_SH
 3138              		.loc 1 532 5 is_stmt 0 view .LVU924
 3139 0b86 56B9     		cbnz	r6, .L209
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3140              		.loc 1 533 4 is_stmt 1 view .LVU925
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3141              		.loc 1 533 22 is_stmt 0 view .LVU926
 3142 0b88 6C20     		movs	r0, #108
 3143              	.LVL366:
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3144              		.loc 1 533 22 view .LVU927
 3145 0b8a FFF76BFC 		bl	tmc5160_readInt.constprop.0
 3146              	.LVL367:
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3147              		.loc 1 533 22 view .LVU928
 3148 0b8e C0F30363 		ubfx	r3, r0, #24, #4
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3149              		.loc 1 533 19 view .LVU929
 3150 0b92 4FF48070 		mov	r0, #256
 3151 0b96 1841     		asrs	r0, r0, r3
 533:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3152              		.loc 1 533 11 view .LVU930
 3153 0b98 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3154              		.loc 1 293 11 view .LVU931
 3155 0b9a 3446     		mov	r4, r6
 3156 0b9c F4E5     		b	.L120
 3157              	.LVL368:
 3158              	.L209:
 534:boards/TMC5160_eval.c **** 			switch(*value)
 3159              		.loc 1 534 10 is_stmt 1 view .LVU932
 535:boards/TMC5160_eval.c **** 			{
 3160              		.loc 1 535 4 view .LVU933
 535:boards/TMC5160_eval.c **** 			{
 3161              		.loc 1 535 11 is_stmt 0 view .LVU934
 3162 0b9e 2B68     		ldr	r3, [r5]
 3163 0ba0 102B     		cmp	r3, #16
 3164 0ba2 34D0     		beq	.L210
 3165 0ba4 0ADC     		bgt	.L211
 3166 0ba6 013B     		subs	r3, r3, #1
 3167 0ba8 072B     		cmp	r3, #7
 3168 0baa 0ED8     		bhi	.L212
 3169 0bac 072B     		cmp	r3, #7
 3170 0bae 0CD8     		bhi	.L212
 3171 0bb0 DFE803F0 		tbb	[pc, r3]
 3172              	.L214:
 3173 0bb4 15       		.byte	(.L217-.L214)/2
 3174 0bb5 27       		.byte	(.L216-.L214)/2
 3175 0bb6 0B       		.byte	(.L212-.L214)/2
 3176 0bb7 29       		.byte	(.L215-.L214)/2
 3177 0bb8 0B       		.byte	(.L212-.L214)/2
 3178 0bb9 0B       		.byte	(.L212-.L214)/2
 3179 0bba 0B       		.byte	(.L212-.L214)/2
 3180 0bbb 2B       		.byte	(.L213-.L214)/2
 3181              		.p2align 1
 3182              	.L211:
 3183 0bbc 802B     		cmp	r3, #128
 3184 0bbe 2CD0     		beq	.L218
 3185 0bc0 08DC     		bgt	.L219
 3186 0bc2 202B     		cmp	r3, #32
 3187 0bc4 25D0     		beq	.L220
 3188 0bc6 402B     		cmp	r3, #64
 3189 0bc8 25D0     		beq	.L221
 3190              	.L212:
 546:boards/TMC5160_eval.c **** 			}
 3191              		.loc 1 546 16 is_stmt 1 view .LVU935
 546:boards/TMC5160_eval.c **** 			}
 3192              		.loc 1 546 23 is_stmt 0 view .LVU936
 3193 0bca 4FF0FF33 		mov	r3, #-1
 3194 0bce 2B60     		str	r3, [r5]
 546:boards/TMC5160_eval.c **** 			}
 3195              		.loc 1 546 30 is_stmt 1 view .LVU937
 549:boards/TMC5160_eval.c **** 			{
 3196              		.loc 1 549 4 view .LVU938
 555:boards/TMC5160_eval.c **** 			}
 3197              		.loc 1 555 12 is_stmt 0 view .LVU939
 3198 0bd0 1024     		movs	r4, #16
 3199 0bd2 D9E5     		b	.L120
 3200              	.L219:
 555:boards/TMC5160_eval.c **** 			}
 3201              		.loc 1 555 12 view .LVU940
 3202 0bd4 B3F5807F 		cmp	r3, #256
 3203 0bd8 F7D1     		bne	.L212
 545:boards/TMC5160_eval.c **** 				default:   *value = -1;  break;
 3204              		.loc 1 545 16 is_stmt 1 view .LVU941
 545:boards/TMC5160_eval.c **** 				default:   *value = -1;  break;
 3205              		.loc 1 545 23 is_stmt 0 view .LVU942
 3206 0bda 0023     		movs	r3, #0
 3207 0bdc 00E0     		b	.L284
 3208              	.L217:
 537:boards/TMC5160_eval.c **** 				case 2:    *value = 7;   break;
 3209              		.loc 1 537 16 is_stmt 1 view .LVU943
 537:boards/TMC5160_eval.c **** 				case 2:    *value = 7;   break;
 3210              		.loc 1 537 23 is_stmt 0 view .LVU944
 3211 0bde 0823     		movs	r3, #8
 3212              	.L284:
 545:boards/TMC5160_eval.c **** 				default:   *value = -1;  break;
 3213              		.loc 1 545 23 view .LVU945
 3214 0be0 2B60     		str	r3, [r5]
 545:boards/TMC5160_eval.c **** 				default:   *value = -1;  break;
 3215              		.loc 1 545 30 is_stmt 1 view .LVU946
 549:boards/TMC5160_eval.c **** 			{
 3216              		.loc 1 549 4 view .LVU947
 551:boards/TMC5160_eval.c **** 			}
 3217              		.loc 1 551 5 view .LVU948
 3218 0be2 6C20     		movs	r0, #108
 3219              	.LVL369:
 551:boards/TMC5160_eval.c **** 			}
 3220              		.loc 1 551 5 is_stmt 0 view .LVU949
 3221 0be4 FFF73EFC 		bl	tmc5160_readInt.constprop.0
 3222              	.LVL370:
 551:boards/TMC5160_eval.c **** 			}
 3223              		.loc 1 551 5 view .LVU950
 3224 0be8 2B68     		ldr	r3, [r5]
 3225 0bea 1B06     		lsls	r3, r3, #24
 3226 0bec 03F07063 		and	r3, r3, #251658240
 3227 0bf0 20F07062 		bic	r2, r0, #251658240
 3228 0bf4 1A43     		orrs	r2, r2, r3
 3229 0bf6 6C21     		movs	r1, #108
 3230 0bf8 0020     		movs	r0, #0
 3231 0bfa FFF7FEFF 		bl	tmc5160_writeInt
 3232              	.LVL371:
 293:boards/TMC5160_eval.c **** 
 3233              		.loc 1 293 11 view .LVU951
 3234 0bfe 0024     		movs	r4, #0
 3235 0c00 C2E5     		b	.L120
 3236              	.LVL372:
 3237              	.L216:
 538:boards/TMC5160_eval.c **** 				case 4:    *value = 6;   break;
 3238              		.loc 1 538 16 is_stmt 1 view .LVU952
 538:boards/TMC5160_eval.c **** 				case 4:    *value = 6;   break;
 3239              		.loc 1 538 23 is_stmt 0 view .LVU953
 3240 0c02 0723     		movs	r3, #7
 3241 0c04 ECE7     		b	.L284
 3242              	.L215:
 539:boards/TMC5160_eval.c **** 				case 8:    *value = 5;   break;
 3243              		.loc 1 539 16 is_stmt 1 view .LVU954
 539:boards/TMC5160_eval.c **** 				case 8:    *value = 5;   break;
 3244              		.loc 1 539 23 is_stmt 0 view .LVU955
 3245 0c06 0623     		movs	r3, #6
 3246 0c08 EAE7     		b	.L284
 3247              	.L213:
 540:boards/TMC5160_eval.c **** 				case 16:   *value = 4;   break;
 3248              		.loc 1 540 16 is_stmt 1 view .LVU956
 540:boards/TMC5160_eval.c **** 				case 16:   *value = 4;   break;
 3249              		.loc 1 540 23 is_stmt 0 view .LVU957
 3250 0c0a 0523     		movs	r3, #5
 3251 0c0c E8E7     		b	.L284
 3252              	.L210:
 541:boards/TMC5160_eval.c **** 				case 32:   *value = 3;   break;
 3253              		.loc 1 541 16 is_stmt 1 view .LVU958
 541:boards/TMC5160_eval.c **** 				case 32:   *value = 3;   break;
 3254              		.loc 1 541 23 is_stmt 0 view .LVU959
 3255 0c0e 0423     		movs	r3, #4
 3256 0c10 E6E7     		b	.L284
 3257              	.L220:
 542:boards/TMC5160_eval.c **** 				case 64:   *value = 2;   break;
 3258              		.loc 1 542 16 is_stmt 1 view .LVU960
 542:boards/TMC5160_eval.c **** 				case 64:   *value = 2;   break;
 3259              		.loc 1 542 23 is_stmt 0 view .LVU961
 3260 0c12 0323     		movs	r3, #3
 3261 0c14 E4E7     		b	.L284
 3262              	.L221:
 543:boards/TMC5160_eval.c **** 				case 128:  *value = 1;   break;
 3263              		.loc 1 543 16 is_stmt 1 view .LVU962
 543:boards/TMC5160_eval.c **** 				case 128:  *value = 1;   break;
 3264              		.loc 1 543 23 is_stmt 0 view .LVU963
 3265 0c16 0223     		movs	r3, #2
 3266 0c18 E2E7     		b	.L284
 3267              	.L218:
 544:boards/TMC5160_eval.c **** 				case 256:  *value = 0;   break;
 3268              		.loc 1 544 16 is_stmt 1 view .LVU964
 544:boards/TMC5160_eval.c **** 				case 256:  *value = 0;   break;
 3269              		.loc 1 544 23 is_stmt 0 view .LVU965
 3270 0c1a 0123     		movs	r3, #1
 3271 0c1c E0E7     		b	.L284
 3272              	.L151:
 561:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
 3273              		.loc 1 561 3 is_stmt 1 view .LVU966
 562:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3274              		.loc 1 562 13 is_stmt 0 view .LVU967
 3275 0c1e 6C20     		movs	r0, #108
 3276              	.LVL373:
 561:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
 3277              		.loc 1 561 5 view .LVU968
 3278 0c20 36B9     		cbnz	r6, .L224
 562:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3279              		.loc 1 562 4 is_stmt 1 view .LVU969
 562:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3280              		.loc 1 562 13 is_stmt 0 view .LVU970
 3281 0c22 FFF71FFC 		bl	tmc5160_readInt.constprop.0
 3282              	.LVL374:
 562:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3283              		.loc 1 562 13 view .LVU971
 3284 0c26 C0F3C130 		ubfx	r0, r0, #15, #2
 562:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3285              		.loc 1 562 11 view .LVU972
 3286 0c2a 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3287              		.loc 1 293 11 view .LVU973
 3288 0c2c 3446     		mov	r4, r6
 3289 0c2e ABE5     		b	.L120
 3290              	.LVL375:
 3291              	.L224:
 563:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, *value);
 3292              		.loc 1 563 10 is_stmt 1 view .LVU974
 564:boards/TMC5160_eval.c **** 		}
 3293              		.loc 1 564 4 view .LVU975
 3294 0c30 FFF718FC 		bl	tmc5160_readInt.constprop.0
 3295              	.LVL376:
 564:boards/TMC5160_eval.c **** 		}
 3296              		.loc 1 564 4 is_stmt 0 view .LVU976
 3297 0c34 2B68     		ldr	r3, [r5]
 3298 0c36 DB03     		lsls	r3, r3, #15
 3299 0c38 03F4C033 		and	r3, r3, #98304
 3300 0c3c 20F4C032 		bic	r2, r0, #98304
 3301 0c40 1A43     		orrs	r2, r2, r3
 3302 0c42 6C21     		movs	r1, #108
 3303 0c44 0020     		movs	r0, #0
 3304 0c46 FFF7FEFF 		bl	tmc5160_writeInt
 3305              	.LVL377:
 293:boards/TMC5160_eval.c **** 
 3306              		.loc 1 293 11 view .LVU977
 3307 0c4a 0024     		movs	r4, #0
 3308 0c4c 9CE5     		b	.L120
 3309              	.LVL378:
 3310              	.L150:
 569:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT);
 3311              		.loc 1 569 3 is_stmt 1 view .LVU978
 570:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3312              		.loc 1 570 13 is_stmt 0 view .LVU979
 3313 0c4e 6C20     		movs	r0, #108
 3314              	.LVL379:
 569:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT);
 3315              		.loc 1 569 5 view .LVU980
 3316 0c50 36B9     		cbnz	r6, .L225
 570:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3317              		.loc 1 570 4 is_stmt 1 view .LVU981
 570:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3318              		.loc 1 570 13 is_stmt 0 view .LVU982
 3319 0c52 FFF707FC 		bl	tmc5160_readInt.constprop.0
 3320              	.LVL380:
 570:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3321              		.loc 1 570 13 view .LVU983
 3322 0c56 C0F38030 		ubfx	r0, r0, #14, #1
 570:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3323              		.loc 1 570 11 view .LVU984
 3324 0c5a 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3325              		.loc 1 293 11 view .LVU985
 3326 0c5c 3446     		mov	r4, r6
 3327 0c5e 93E5     		b	.L120
 3328              	.LVL381:
 3329              	.L225:
 571:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_CHM_MASK, TMC5160_CHM_SHIFT, *value);
 3330              		.loc 1 571 10 is_stmt 1 view .LVU986
 572:boards/TMC5160_eval.c **** 		}
 3331              		.loc 1 572 4 view .LVU987
 3332 0c60 FFF700FC 		bl	tmc5160_readInt.constprop.0
 3333              	.LVL382:
 572:boards/TMC5160_eval.c **** 		}
 3334              		.loc 1 572 4 is_stmt 0 view .LVU988
 3335 0c64 2B68     		ldr	r3, [r5]
 3336 0c66 9B03     		lsls	r3, r3, #14
 3337 0c68 03F48043 		and	r3, r3, #16384
 3338 0c6c 20F48042 		bic	r2, r0, #16384
 3339 0c70 1A43     		orrs	r2, r2, r3
 3340 0c72 6C21     		movs	r1, #108
 3341 0c74 0020     		movs	r0, #0
 3342 0c76 FFF7FEFF 		bl	tmc5160_writeInt
 3343              	.LVL383:
 293:boards/TMC5160_eval.c **** 
 3344              		.loc 1 293 11 view .LVU989
 3345 0c7a 0024     		movs	r4, #0
 3346 0c7c 84E5     		b	.L120
 3347              	.LVL384:
 3348              	.L149:
 577:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT
 3349              		.loc 1 577 3 is_stmt 1 view .LVU990
 578:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3350              		.loc 1 578 13 is_stmt 0 view .LVU991
 3351 0c7e 6C20     		movs	r0, #108
 3352              	.LVL385:
 577:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT
 3353              		.loc 1 577 5 view .LVU992
 3354 0c80 36B9     		cbnz	r6, .L226
 578:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3355              		.loc 1 578 4 is_stmt 1 view .LVU993
 578:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3356              		.loc 1 578 13 is_stmt 0 view .LVU994
 3357 0c82 FFF7EFFB 		bl	tmc5160_readInt.constprop.0
 3358              	.LVL386:
 578:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3359              		.loc 1 578 13 view .LVU995
 3360 0c86 C0F30030 		ubfx	r0, r0, #12, #1
 578:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3361              		.loc 1 578 11 view .LVU996
 3362 0c8a 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3363              		.loc 1 293 11 view .LVU997
 3364 0c8c 3446     		mov	r4, r6
 3365 0c8e 7BE5     		b	.L120
 3366              	.LVL387:
 3367              	.L226:
 579:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_DISFDCC_MASK, TMC5160_DISFDCC_SHIFT, *valu
 3368              		.loc 1 579 10 is_stmt 1 view .LVU998
 580:boards/TMC5160_eval.c **** 		}
 3369              		.loc 1 580 4 view .LVU999
 3370 0c90 FFF7E8FB 		bl	tmc5160_readInt.constprop.0
 3371              	.LVL388:
 580:boards/TMC5160_eval.c **** 		}
 3372              		.loc 1 580 4 is_stmt 0 view .LVU1000
 3373 0c94 2B68     		ldr	r3, [r5]
 3374 0c96 1B03     		lsls	r3, r3, #12
 3375 0c98 03F48053 		and	r3, r3, #4096
 3376 0c9c 20F48052 		bic	r2, r0, #4096
 3377 0ca0 1A43     		orrs	r2, r2, r3
 3378 0ca2 6C21     		movs	r1, #108
 3379 0ca4 0020     		movs	r0, #0
 3380 0ca6 FFF7FEFF 		bl	tmc5160_writeInt
 3381              	.LVL389:
 293:boards/TMC5160_eval.c **** 
 3382              		.loc 1 293 11 view .LVU1001
 3383 0caa 0024     		movs	r4, #0
 3384 0cac 6CE5     		b	.L120
 3385              	.LVL390:
 3386              	.L148:
 585:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3387              		.loc 1 585 3 is_stmt 1 view .LVU1002
 585:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3388              		.loc 1 585 12 is_stmt 0 view .LVU1003
 3389 0cae 6C20     		movs	r0, #108
 3390              	.LVL391:
 585:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3391              		.loc 1 585 12 view .LVU1004
 3392 0cb0 FFF7D8FB 		bl	tmc5160_readInt.constprop.0
 3393              	.LVL392:
 585:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3394              		.loc 1 585 12 view .LVU1005
 3395 0cb4 0746     		mov	r7, r0
 3396              	.LVL393:
 586:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 3397              		.loc 1 586 3 is_stmt 1 view .LVU1006
 586:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 3398              		.loc 1 586 5 is_stmt 0 view .LVU1007
 3399 0cb6 C6B9     		cbnz	r6, .L227
 587:boards/TMC5160_eval.c **** 			{
 3400              		.loc 1 587 4 is_stmt 1 view .LVU1008
 587:boards/TMC5160_eval.c **** 			{
 3401              		.loc 1 587 6 is_stmt 0 view .LVU1009
 3402 0cb8 10F48044 		ands	r4, r0, #16384
 3403 0cbc 05D0     		beq	.L228
 589:boards/TMC5160_eval.c **** 			}
 3404              		.loc 1 589 5 is_stmt 1 view .LVU1010
 589:boards/TMC5160_eval.c **** 			}
 3405              		.loc 1 589 22 is_stmt 0 view .LVU1011
 3406 0cbe C709     		lsrs	r7, r0, #7
 589:boards/TMC5160_eval.c **** 			}
 3407              		.loc 1 589 45 view .LVU1012
 3408 0cc0 07F4F067 		and	r7, r7, #1920
 589:boards/TMC5160_eval.c **** 			}
 3409              		.loc 1 589 12 view .LVU1013
 3410 0cc4 2F60     		str	r7, [r5]
 293:boards/TMC5160_eval.c **** 
 3411              		.loc 1 293 11 view .LVU1014
 3412 0cc6 3446     		mov	r4, r6
 3413 0cc8 5EE5     		b	.L120
 3414              	.L228:
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3415              		.loc 1 593 5 is_stmt 1 view .LVU1015
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3416              		.loc 1 593 15 is_stmt 0 view .LVU1016
 3417 0cca 6C20     		movs	r0, #108
 3418              	.LVL394:
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3419              		.loc 1 593 15 view .LVU1017
 3420 0ccc FFF7CAFB 		bl	tmc5160_readInt.constprop.0
 3421              	.LVL395:
 594:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3422              		.loc 1 594 7 view .LVU1018
 3423 0cd0 17F00B0F 		tst	r7, #11
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3424              		.loc 1 593 56 view .LVU1019
 3425 0cd4 4FEA2010 		asr	r0, r0, #4
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3426              		.loc 1 593 82 view .LVU1020
 3427 0cd8 00F07000 		and	r0, r0, #112
 594:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3428              		.loc 1 594 5 is_stmt 1 view .LVU1021
 594:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3429              		.loc 1 594 7 is_stmt 0 view .LVU1022
 3430 0cdc 01D1     		bne	.L229
 593:boards/TMC5160_eval.c **** 				if(buffer & TMC5160_TFD_3_SHIFT)
 3431              		.loc 1 593 12 view .LVU1023
 3432 0cde 2860     		str	r0, [r5]
 3433 0ce0 A8E5     		b	.L230
 3434              	.L229:
 595:boards/TMC5160_eval.c **** 			}
 3435              		.loc 1 595 6 is_stmt 1 view .LVU1024
 595:boards/TMC5160_eval.c **** 			}
 3436              		.loc 1 595 13 is_stmt 0 view .LVU1025
 3437 0ce2 40F00800 		orr	r0, r0, #8
 3438 0ce6 2860     		str	r0, [r5]
 3439 0ce8 4EE5     		b	.L120
 3440              	.LVL396:
 3441              	.L227:
 597:boards/TMC5160_eval.c **** 			if(tmc5160_readInt(motor, TMC5160_CHOPCONF) & (1<<14))
 3442              		.loc 1 597 10 is_stmt 1 view .LVU1026
 598:boards/TMC5160_eval.c **** 			{
 3443              		.loc 1 598 4 view .LVU1027
 598:boards/TMC5160_eval.c **** 			{
 3444              		.loc 1 598 7 is_stmt 0 view .LVU1028
 3445 0cea 6C20     		movs	r0, #108
 3446              	.LVL397:
 598:boards/TMC5160_eval.c **** 			{
 3447              		.loc 1 598 7 view .LVU1029
 3448 0cec FFF7BAFB 		bl	tmc5160_readInt.constprop.0
 3449              	.LVL398:
 598:boards/TMC5160_eval.c **** 			{
 3450              		.loc 1 598 6 view .LVU1030
 3451 0cf0 10F48044 		ands	r4, r0, #16384
 600:boards/TMC5160_eval.c **** 			}
 3452              		.loc 1 600 5 view .LVU1031
 3453 0cf4 4FF06C00 		mov	r0, #108
 598:boards/TMC5160_eval.c **** 			{
 3454              		.loc 1 598 6 view .LVU1032
 3455 0cf8 0ED0     		beq	.L231
 600:boards/TMC5160_eval.c **** 			}
 3456              		.loc 1 600 5 is_stmt 1 view .LVU1033
 3457 0cfa FFF7B3FB 		bl	tmc5160_readInt.constprop.0
 3458              	.LVL399:
 3459 0cfe 2B68     		ldr	r3, [r5]
 3460 0d00 DB01     		lsls	r3, r3, #7
 3461 0d02 03F4F063 		and	r3, r3, #1920
 3462 0d06 20F4F062 		bic	r2, r0, #1920
 3463 0d0a 1A43     		orrs	r2, r2, r3
 3464 0d0c 6C21     		movs	r1, #108
 3465 0d0e 0020     		movs	r0, #0
 3466 0d10 FFF7FEFF 		bl	tmc5160_writeInt
 3467              	.LVL400:
 293:boards/TMC5160_eval.c **** 
 3468              		.loc 1 293 11 is_stmt 0 view .LVU1034
 3469 0d14 0024     		movs	r4, #0
 3470 0d16 37E5     		b	.L120
 3471              	.L231:
 604:boards/TMC5160_eval.c **** 				TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TFD_ALL_MASK, TMC5160_TFD_ALL_SHIFT, *val
 3472              		.loc 1 604 5 is_stmt 1 view .LVU1035
 3473 0d18 FFF7A4FB 		bl	tmc5160_readInt.constprop.0
 3474              	.LVL401:
 3475 0d1c 6C21     		movs	r1, #108
 3476 0d1e 20F40062 		bic	r2, r0, #2048
 3477 0d22 2046     		mov	r0, r4
 3478 0d24 FFF7FEFF 		bl	tmc5160_writeInt
 3479              	.LVL402:
 605:boards/TMC5160_eval.c **** 			}
 3480              		.loc 1 605 5 view .LVU1036
 3481 0d28 6C20     		movs	r0, #108
 3482 0d2a FFF79BFB 		bl	tmc5160_readInt.constprop.0
 3483              	.LVL403:
 3484 0d2e 2B68     		ldr	r3, [r5]
 3485 0d30 1B01     		lsls	r3, r3, #4
 3486 0d32 03F07003 		and	r3, r3, #112
 3487 0d36 20F07002 		bic	r2, r0, #112
 3488 0d3a 1A43     		orrs	r2, r2, r3
 3489 0d3c 6C21     		movs	r1, #108
 3490 0d3e 2046     		mov	r0, r4
 3491 0d40 FFF7FEFF 		bl	tmc5160_writeInt
 3492              	.LVL404:
 3493 0d44 20E5     		b	.L120
 3494              	.LVL405:
 3495              	.L147:
 611:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3496              		.loc 1 611 3 view .LVU1037
 611:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3497              		.loc 1 611 12 is_stmt 0 view .LVU1038
 3498 0d46 6C20     		movs	r0, #108
 3499              	.LVL406:
 611:boards/TMC5160_eval.c **** 		if(readWrite == READ) {
 3500              		.loc 1 611 12 view .LVU1039
 3501 0d48 FFF78CFB 		bl	tmc5160_readInt.constprop.0
 3502              	.LVL407:
 612:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 3503              		.loc 1 612 3 is_stmt 1 view .LVU1040
 3504 0d4c 00F48044 		and	r4, r0, #16384
 612:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 3505              		.loc 1 612 5 is_stmt 0 view .LVU1041
 3506 0d50 8EB9     		cbnz	r6, .L232
 613:boards/TMC5160_eval.c **** 			{
 3507              		.loc 1 613 4 is_stmt 1 view .LVU1042
 613:boards/TMC5160_eval.c **** 			{
 3508              		.loc 1 613 6 is_stmt 0 view .LVU1043
 3509 0d52 2CB1     		cbz	r4, .L233
 615:boards/TMC5160_eval.c **** 			}
 3510              		.loc 1 615 5 is_stmt 1 view .LVU1044
 615:boards/TMC5160_eval.c **** 			}
 3511              		.loc 1 615 22 is_stmt 0 view .LVU1045
 3512 0d54 0009     		lsrs	r0, r0, #4
 3513              	.LVL408:
 615:boards/TMC5160_eval.c **** 			}
 3514              		.loc 1 615 46 view .LVU1046
 3515 0d56 00F07000 		and	r0, r0, #112
 615:boards/TMC5160_eval.c **** 			}
 3516              		.loc 1 615 12 view .LVU1047
 3517 0d5a 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3518              		.loc 1 293 11 view .LVU1048
 3519 0d5c 3446     		mov	r4, r6
 3520 0d5e 13E5     		b	.L120
 3521              	.LVL409:
 3522              	.L233:
 619:boards/TMC5160_eval.c **** 				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
 3523              		.loc 1 619 5 is_stmt 1 view .LVU1049
 619:boards/TMC5160_eval.c **** 				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
 3524              		.loc 1 619 22 is_stmt 0 view .LVU1050
 3525 0d60 C309     		lsrs	r3, r0, #7
 620:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3526              		.loc 1 620 7 view .LVU1051
 3527 0d62 0205     		lsls	r2, r0, #20
 619:boards/TMC5160_eval.c **** 				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
 3528              		.loc 1 619 47 view .LVU1052
 3529 0d64 03F4F063 		and	r3, r3, #1920
 620:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3530              		.loc 1 620 5 is_stmt 1 view .LVU1053
 620:boards/TMC5160_eval.c **** 					*value |= 1<<3; // MSB wird zu value dazugefügt
 3531              		.loc 1 620 7 is_stmt 0 view .LVU1054
 3532 0d68 01D4     		bmi	.L234
 619:boards/TMC5160_eval.c **** 				if(buffer & (1 << TMC5160_TFD_3_SHIFT))
 3533              		.loc 1 619 12 view .LVU1055
 3534 0d6a 2B60     		str	r3, [r5]
 3535 0d6c 62E5     		b	.L230
 3536              	.L234:
 621:boards/TMC5160_eval.c **** 			}
 3537              		.loc 1 621 6 is_stmt 1 view .LVU1056
 621:boards/TMC5160_eval.c **** 			}
 3538              		.loc 1 621 13 is_stmt 0 view .LVU1057
 3539 0d6e 43F00803 		orr	r3, r3, #8
 3540 0d72 2B60     		str	r3, [r5]
 3541 0d74 08E5     		b	.L120
 3542              	.L232:
 623:boards/TMC5160_eval.c **** 			if(buffer & (1 << TMC5160_CHM_SHIFT))
 3543              		.loc 1 623 10 is_stmt 1 view .LVU1058
 624:boards/TMC5160_eval.c **** 			{
 3544              		.loc 1 624 4 view .LVU1059
 626:boards/TMC5160_eval.c **** 			}
 3545              		.loc 1 626 5 is_stmt 0 view .LVU1060
 3546 0d76 6C20     		movs	r0, #108
 3547              	.LVL410:
 624:boards/TMC5160_eval.c **** 			{
 3548              		.loc 1 624 6 view .LVU1061
 3549 0d78 74B1     		cbz	r4, .L235
 626:boards/TMC5160_eval.c **** 			}
 3550              		.loc 1 626 5 is_stmt 1 view .LVU1062
 3551 0d7a FFF773FB 		bl	tmc5160_readInt.constprop.0
 3552              	.LVL411:
 3553 0d7e 2B68     		ldr	r3, [r5]
 3554 0d80 1B01     		lsls	r3, r3, #4
 3555 0d82 03F07003 		and	r3, r3, #112
 3556 0d86 20F07002 		bic	r2, r0, #112
 3557 0d8a 1A43     		orrs	r2, r2, r3
 3558 0d8c 6C21     		movs	r1, #108
 3559 0d8e 0020     		movs	r0, #0
 3560 0d90 FFF7FEFF 		bl	tmc5160_writeInt
 3561              	.LVL412:
 293:boards/TMC5160_eval.c **** 
 3562              		.loc 1 293 11 is_stmt 0 view .LVU1063
 3563 0d94 0024     		movs	r4, #0
 3564 0d96 F7E4     		b	.L120
 3565              	.L235:
 630:boards/TMC5160_eval.c **** 			}
 3566              		.loc 1 630 5 is_stmt 1 view .LVU1064
 3567 0d98 FFF764FB 		bl	tmc5160_readInt.constprop.0
 3568              	.LVL413:
 3569 0d9c 2B68     		ldr	r3, [r5]
 3570 0d9e DB01     		lsls	r3, r3, #7
 3571 0da0 03F4F063 		and	r3, r3, #1920
 3572 0da4 20F4F062 		bic	r2, r0, #1920
 3573 0da8 1A43     		orrs	r2, r2, r3
 3574 0daa 6C21     		movs	r1, #108
 3575 0dac 2046     		mov	r0, r4
 3576 0dae FFF7FEFF 		bl	tmc5160_writeInt
 3577              	.LVL414:
 3578 0db2 E9E4     		b	.L120
 3579              	.LVL415:
 3580              	.L146:
 636:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
 3581              		.loc 1 636 3 view .LVU1065
 637:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3582              		.loc 1 637 13 is_stmt 0 view .LVU1066
 3583 0db4 6C20     		movs	r0, #108
 3584              	.LVL416:
 636:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
 3585              		.loc 1 636 5 view .LVU1067
 3586 0db6 36B9     		cbnz	r6, .L236
 637:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3587              		.loc 1 637 4 is_stmt 1 view .LVU1068
 637:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3588              		.loc 1 637 13 is_stmt 0 view .LVU1069
 3589 0db8 FFF754FB 		bl	tmc5160_readInt.constprop.0
 3590              	.LVL417:
 637:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3591              		.loc 1 637 13 view .LVU1070
 3592 0dbc 00F00F00 		and	r0, r0, #15
 637:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3593              		.loc 1 637 11 view .LVU1071
 3594 0dc0 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3595              		.loc 1 293 11 view .LVU1072
 3596 0dc2 3446     		mov	r4, r6
 3597 0dc4 E0E4     		b	.L120
 3598              	.LVL418:
 3599              	.L236:
 638:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, *value);
 3600              		.loc 1 638 10 is_stmt 1 view .LVU1073
 639:boards/TMC5160_eval.c **** 		}
 3601              		.loc 1 639 4 view .LVU1074
 3602 0dc6 FFF74DFB 		bl	tmc5160_readInt.constprop.0
 3603              	.LVL419:
 639:boards/TMC5160_eval.c **** 		}
 3604              		.loc 1 639 4 is_stmt 0 view .LVU1075
 3605 0dca 2A68     		ldr	r2, [r5]
 3606 0dcc 20F00F00 		bic	r0, r0, #15
 3607 0dd0 02F00F02 		and	r2, r2, #15
 3608 0dd4 0243     		orrs	r2, r2, r0
 3609 0dd6 6C21     		movs	r1, #108
 3610 0dd8 0020     		movs	r0, #0
 3611 0dda FFF7FEFF 		bl	tmc5160_writeInt
 3612              	.LVL420:
 293:boards/TMC5160_eval.c **** 
 3613              		.loc 1 293 11 view .LVU1076
 3614 0dde 0024     		movs	r4, #0
 3615 0de0 D2E4     		b	.L120
 3616              	.LVL421:
 3617              	.L145:
 644:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
 3618              		.loc 1 644 3 is_stmt 1 view .LVU1077
 645:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3619              		.loc 1 645 13 is_stmt 0 view .LVU1078
 3620 0de2 6D20     		movs	r0, #109
 3621              	.LVL422:
 644:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
 3622              		.loc 1 644 5 view .LVU1079
 3623 0de4 46B9     		cbnz	r6, .L237
 645:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3624              		.loc 1 645 4 is_stmt 1 view .LVU1080
 645:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3625              		.loc 1 645 13 is_stmt 0 view .LVU1081
 3626 0de6 FFF73DFB 		bl	tmc5160_readInt.constprop.0
 3627              	.LVL423:
 645:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3628              		.loc 1 645 13 view .LVU1082
 3629 0dea C0F3C030 		ubfx	r0, r0, #15, #1
 645:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3630              		.loc 1 645 11 view .LVU1083
 3631 0dee 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3632              		.loc 1 293 11 view .LVU1084
 3633 0df0 3446     		mov	r4, r6
 3634 0df2 C9E4     		b	.L120
 3635              	.L288:
 3636              		.align	2
 3637              	.L287:
 3638 0df4 00000000 		.word	.LANCHOR0
 3639              	.LVL424:
 3640              	.L237:
 646:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, *value)
 3641              		.loc 1 646 10 is_stmt 1 view .LVU1085
 647:boards/TMC5160_eval.c **** 		}
 3642              		.loc 1 647 4 view .LVU1086
 3643 0df8 FFF734FB 		bl	tmc5160_readInt.constprop.0
 3644              	.LVL425:
 647:boards/TMC5160_eval.c **** 		}
 3645              		.loc 1 647 4 is_stmt 0 view .LVU1087
 3646 0dfc 2B68     		ldr	r3, [r5]
 3647 0dfe DB03     		lsls	r3, r3, #15
 3648 0e00 9BB2     		uxth	r3, r3
 3649 0e02 20F40042 		bic	r2, r0, #32768
 3650 0e06 1A43     		orrs	r2, r2, r3
 3651 0e08 6D21     		movs	r1, #109
 3652 0e0a 0020     		movs	r0, #0
 3653 0e0c FFF7FEFF 		bl	tmc5160_writeInt
 3654              	.LVL426:
 293:boards/TMC5160_eval.c **** 
 3655              		.loc 1 293 11 view .LVU1088
 3656 0e10 0024     		movs	r4, #0
 3657 0e12 B9E4     		b	.L120
 3658              	.LVL427:
 3659              	.L144:
 652:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
 3660              		.loc 1 652 3 is_stmt 1 view .LVU1089
 653:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3661              		.loc 1 653 13 is_stmt 0 view .LVU1090
 3662 0e14 6D20     		movs	r0, #109
 3663              	.LVL428:
 652:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
 3664              		.loc 1 652 5 view .LVU1091
 3665 0e16 36B9     		cbnz	r6, .L238
 653:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3666              		.loc 1 653 4 is_stmt 1 view .LVU1092
 653:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3667              		.loc 1 653 13 is_stmt 0 view .LVU1093
 3668 0e18 FFF724FB 		bl	tmc5160_readInt.constprop.0
 3669              	.LVL429:
 653:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3670              		.loc 1 653 13 view .LVU1094
 3671 0e1c C0F34130 		ubfx	r0, r0, #13, #2
 653:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3672              		.loc 1 653 11 view .LVU1095
 3673 0e20 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3674              		.loc 1 293 11 view .LVU1096
 3675 0e22 3446     		mov	r4, r6
 3676 0e24 B0E4     		b	.L120
 3677              	.LVL430:
 3678              	.L238:
 654:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, *value);
 3679              		.loc 1 654 10 is_stmt 1 view .LVU1097
 655:boards/TMC5160_eval.c **** 		}
 3680              		.loc 1 655 4 view .LVU1098
 3681 0e26 FFF71DFB 		bl	tmc5160_readInt.constprop.0
 3682              	.LVL431:
 655:boards/TMC5160_eval.c **** 		}
 3683              		.loc 1 655 4 is_stmt 0 view .LVU1099
 3684 0e2a 2B68     		ldr	r3, [r5]
 3685 0e2c 5B03     		lsls	r3, r3, #13
 3686 0e2e 03F4C043 		and	r3, r3, #24576
 3687 0e32 20F4C042 		bic	r2, r0, #24576
 3688 0e36 1A43     		orrs	r2, r2, r3
 3689 0e38 6D21     		movs	r1, #109
 3690 0e3a 0020     		movs	r0, #0
 3691 0e3c FFF7FEFF 		bl	tmc5160_writeInt
 3692              	.LVL432:
 293:boards/TMC5160_eval.c **** 
 3693              		.loc 1 293 11 view .LVU1100
 3694 0e40 0024     		movs	r4, #0
 3695 0e42 A1E4     		b	.L120
 3696              	.LVL433:
 3697              	.L143:
 660:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
 3698              		.loc 1 660 3 is_stmt 1 view .LVU1101
 661:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3699              		.loc 1 661 13 is_stmt 0 view .LVU1102
 3700 0e44 6D20     		movs	r0, #109
 3701              	.LVL434:
 660:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
 3702              		.loc 1 660 5 view .LVU1103
 3703 0e46 36B9     		cbnz	r6, .L239
 661:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3704              		.loc 1 661 4 is_stmt 1 view .LVU1104
 661:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3705              		.loc 1 661 13 is_stmt 0 view .LVU1105
 3706 0e48 FFF70CFB 		bl	tmc5160_readInt.constprop.0
 3707              	.LVL435:
 661:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3708              		.loc 1 661 13 view .LVU1106
 3709 0e4c C0F30320 		ubfx	r0, r0, #8, #4
 661:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3710              		.loc 1 661 11 view .LVU1107
 3711 0e50 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3712              		.loc 1 293 11 view .LVU1108
 3713 0e52 3446     		mov	r4, r6
 3714 0e54 98E4     		b	.L120
 3715              	.LVL436:
 3716              	.L239:
 662:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, *value);
 3717              		.loc 1 662 10 is_stmt 1 view .LVU1109
 663:boards/TMC5160_eval.c **** 		}
 3718              		.loc 1 663 4 view .LVU1110
 3719 0e56 FFF705FB 		bl	tmc5160_readInt.constprop.0
 3720              	.LVL437:
 663:boards/TMC5160_eval.c **** 		}
 3721              		.loc 1 663 4 is_stmt 0 view .LVU1111
 3722 0e5a 2B68     		ldr	r3, [r5]
 3723 0e5c 1B02     		lsls	r3, r3, #8
 3724 0e5e 03F47063 		and	r3, r3, #3840
 3725 0e62 20F47062 		bic	r2, r0, #3840
 3726 0e66 1A43     		orrs	r2, r2, r3
 3727 0e68 6D21     		movs	r1, #109
 3728 0e6a 0020     		movs	r0, #0
 3729 0e6c FFF7FEFF 		bl	tmc5160_writeInt
 3730              	.LVL438:
 293:boards/TMC5160_eval.c **** 
 3731              		.loc 1 293 11 view .LVU1112
 3732 0e70 0024     		movs	r4, #0
 3733 0e72 89E4     		b	.L120
 3734              	.LVL439:
 3735              	.L142:
 668:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT);
 3736              		.loc 1 668 3 is_stmt 1 view .LVU1113
 669:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3737              		.loc 1 669 13 is_stmt 0 view .LVU1114
 3738 0e74 6D20     		movs	r0, #109
 3739              	.LVL440:
 668:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT);
 3740              		.loc 1 668 5 view .LVU1115
 3741 0e76 36B9     		cbnz	r6, .L240
 669:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3742              		.loc 1 669 4 is_stmt 1 view .LVU1116
 669:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3743              		.loc 1 669 13 is_stmt 0 view .LVU1117
 3744 0e78 FFF7F4FA 		bl	tmc5160_readInt.constprop.0
 3745              	.LVL441:
 669:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3746              		.loc 1 669 13 view .LVU1118
 3747 0e7c C0F34110 		ubfx	r0, r0, #5, #2
 669:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3748              		.loc 1 669 11 view .LVU1119
 3749 0e80 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3750              		.loc 1 293 11 view .LVU1120
 3751 0e82 3446     		mov	r4, r6
 3752 0e84 80E4     		b	.L120
 3753              	.LVL442:
 3754              	.L240:
 670:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEUP_MASK, TMC5160_SEUP_SHIFT, *value);
 3755              		.loc 1 670 10 is_stmt 1 view .LVU1121
 671:boards/TMC5160_eval.c **** 		}
 3756              		.loc 1 671 4 view .LVU1122
 3757 0e86 FFF7EDFA 		bl	tmc5160_readInt.constprop.0
 3758              	.LVL443:
 671:boards/TMC5160_eval.c **** 		}
 3759              		.loc 1 671 4 is_stmt 0 view .LVU1123
 3760 0e8a 2B68     		ldr	r3, [r5]
 3761 0e8c 5B01     		lsls	r3, r3, #5
 3762 0e8e 03F06003 		and	r3, r3, #96
 3763 0e92 20F06002 		bic	r2, r0, #96
 3764 0e96 1A43     		orrs	r2, r2, r3
 3765 0e98 6D21     		movs	r1, #109
 3766 0e9a 0020     		movs	r0, #0
 3767 0e9c FFF7FEFF 		bl	tmc5160_writeInt
 3768              	.LVL444:
 293:boards/TMC5160_eval.c **** 
 3769              		.loc 1 293 11 view .LVU1124
 3770 0ea0 0024     		movs	r4, #0
 3771 0ea2 71E4     		b	.L120
 3772              	.LVL445:
 3773              	.L141:
 676:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT);
 3774              		.loc 1 676 3 is_stmt 1 view .LVU1125
 677:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3775              		.loc 1 677 13 is_stmt 0 view .LVU1126
 3776 0ea4 6D20     		movs	r0, #109
 3777              	.LVL446:
 676:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT);
 3778              		.loc 1 676 5 view .LVU1127
 3779 0ea6 36B9     		cbnz	r6, .L241
 677:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3780              		.loc 1 677 4 is_stmt 1 view .LVU1128
 677:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3781              		.loc 1 677 13 is_stmt 0 view .LVU1129
 3782 0ea8 FFF7DCFA 		bl	tmc5160_readInt.constprop.0
 3783              	.LVL447:
 677:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3784              		.loc 1 677 13 view .LVU1130
 3785 0eac 00F00F00 		and	r0, r0, #15
 677:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3786              		.loc 1 677 11 view .LVU1131
 3787 0eb0 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3788              		.loc 1 293 11 view .LVU1132
 3789 0eb2 3446     		mov	r4, r6
 3790 0eb4 68E4     		b	.L120
 3791              	.LVL448:
 3792              	.L241:
 678:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SEMIN_MASK, TMC5160_SEMIN_SHIFT, *value);
 3793              		.loc 1 678 10 is_stmt 1 view .LVU1133
 679:boards/TMC5160_eval.c **** 		}
 3794              		.loc 1 679 4 view .LVU1134
 3795 0eb6 FFF7D5FA 		bl	tmc5160_readInt.constprop.0
 3796              	.LVL449:
 679:boards/TMC5160_eval.c **** 		}
 3797              		.loc 1 679 4 is_stmt 0 view .LVU1135
 3798 0eba 2A68     		ldr	r2, [r5]
 3799 0ebc 20F00F00 		bic	r0, r0, #15
 3800 0ec0 02F00F02 		and	r2, r2, #15
 3801 0ec4 0243     		orrs	r2, r2, r0
 3802 0ec6 6D21     		movs	r1, #109
 3803 0ec8 0020     		movs	r0, #0
 3804 0eca FFF7FEFF 		bl	tmc5160_writeInt
 3805              	.LVL450:
 293:boards/TMC5160_eval.c **** 
 3806              		.loc 1 293 11 view .LVU1136
 3807 0ece 0024     		movs	r4, #0
 3808 0ed0 5AE4     		b	.L120
 3809              	.LVL451:
 3810              	.L140:
 684:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT);
 3811              		.loc 1 684 3 is_stmt 1 view .LVU1137
 685:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3812              		.loc 1 685 13 is_stmt 0 view .LVU1138
 3813 0ed2 6D20     		movs	r0, #109
 3814              	.LVL452:
 684:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT);
 3815              		.loc 1 684 5 view .LVU1139
 3816 0ed4 36B9     		cbnz	r6, .L242
 685:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3817              		.loc 1 685 4 is_stmt 1 view .LVU1140
 685:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3818              		.loc 1 685 13 is_stmt 0 view .LVU1141
 3819 0ed6 FFF7C5FA 		bl	tmc5160_readInt.constprop.0
 3820              	.LVL453:
 685:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3821              		.loc 1 685 13 view .LVU1142
 3822 0eda C0F30060 		ubfx	r0, r0, #24, #1
 685:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3823              		.loc 1 685 11 view .LVU1143
 3824 0ede 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3825              		.loc 1 293 11 view .LVU1144
 3826 0ee0 3446     		mov	r4, r6
 3827 0ee2 51E4     		b	.L120
 3828              	.LVL454:
 3829              	.L242:
 686:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SFILT_MASK, TMC5160_SFILT_SHIFT, *value);
 3830              		.loc 1 686 10 is_stmt 1 view .LVU1145
 687:boards/TMC5160_eval.c **** 		}
 3831              		.loc 1 687 4 view .LVU1146
 3832 0ee4 FFF7BEFA 		bl	tmc5160_readInt.constprop.0
 3833              	.LVL455:
 687:boards/TMC5160_eval.c **** 		}
 3834              		.loc 1 687 4 is_stmt 0 view .LVU1147
 3835 0ee8 2B68     		ldr	r3, [r5]
 3836 0eea 1B06     		lsls	r3, r3, #24
 3837 0eec 03F08073 		and	r3, r3, #16777216
 3838 0ef0 20F08072 		bic	r2, r0, #16777216
 3839 0ef4 1A43     		orrs	r2, r2, r3
 3840 0ef6 6D21     		movs	r1, #109
 3841 0ef8 0020     		movs	r0, #0
 3842 0efa FFF7FEFF 		bl	tmc5160_writeInt
 3843              	.LVL456:
 293:boards/TMC5160_eval.c **** 
 3844              		.loc 1 293 11 view .LVU1148
 3845 0efe 0024     		movs	r4, #0
 3846 0f00 42E4     		b	.L120
 3847              	.LVL457:
 3848              	.L139:
 692:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
 3849              		.loc 1 692 3 is_stmt 1 view .LVU1149
 693:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 3850              		.loc 1 693 13 is_stmt 0 view .LVU1150
 3851 0f02 6D20     		movs	r0, #109
 3852              	.LVL458:
 692:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
 3853              		.loc 1 692 5 view .LVU1151
 3854 0f04 6EB9     		cbnz	r6, .L243
 693:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 3855              		.loc 1 693 4 is_stmt 1 view .LVU1152
 693:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 3856              		.loc 1 693 13 is_stmt 0 view .LVU1153
 3857 0f06 FFF7ADFA 		bl	tmc5160_readInt.constprop.0
 3858              	.LVL459:
 693:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 3859              		.loc 1 693 13 view .LVU1154
 3860 0f0a 0314     		asrs	r3, r0, #16
 694:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3861              		.loc 1 694 13 view .LVU1155
 3862 0f0c 13F04003 		ands	r3, r3, #64
 693:boards/TMC5160_eval.c **** 			*value = CAST_Sn_TO_S32(*value, 7);
 3863              		.loc 1 693 13 view .LVU1156
 3864 0f10 C0F30640 		ubfx	r0, r0, #16, #7
 694:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3865              		.loc 1 694 4 is_stmt 1 view .LVU1157
 694:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3866              		.loc 1 694 13 is_stmt 0 view .LVU1158
 3867 0f14 18BF     		it	ne
 3868 0f16 6FF07F03 		mvnne	r3, #127
 3869 0f1a 1843     		orrs	r0, r0, r3
 694:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3870              		.loc 1 694 11 view .LVU1159
 3871 0f1c 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3872              		.loc 1 293 11 view .LVU1160
 3873 0f1e 3446     		mov	r4, r6
 3874 0f20 32E4     		b	.L120
 3875              	.LVL460:
 3876              	.L243:
 695:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, *value);
 3877              		.loc 1 695 10 is_stmt 1 view .LVU1161
 696:boards/TMC5160_eval.c **** 		}
 3878              		.loc 1 696 4 view .LVU1162
 3879 0f22 FFF79FFA 		bl	tmc5160_readInt.constprop.0
 3880              	.LVL461:
 696:boards/TMC5160_eval.c **** 		}
 3881              		.loc 1 696 4 is_stmt 0 view .LVU1163
 3882 0f26 2B68     		ldr	r3, [r5]
 3883 0f28 1B04     		lsls	r3, r3, #16
 3884 0f2a 03F4FE03 		and	r3, r3, #8323072
 3885 0f2e 20F4FE02 		bic	r2, r0, #8323072
 3886 0f32 1A43     		orrs	r2, r2, r3
 3887 0f34 6D21     		movs	r1, #109
 3888 0f36 0020     		movs	r0, #0
 3889 0f38 FFF7FEFF 		bl	tmc5160_writeInt
 3890              	.LVL462:
 293:boards/TMC5160_eval.c **** 
 3891              		.loc 1 293 11 view .LVU1164
 3892 0f3c 0024     		movs	r4, #0
 3893 0f3e 23E4     		b	.L120
 3894              	.LVL463:
 3895              	.L138:
 701:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_CS_ACTUAL_MASK, TMC5160_CS_ACTUAL_
 3896              		.loc 1 701 3 is_stmt 1 view .LVU1165
 701:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_CS_ACTUAL_MASK, TMC5160_CS_ACTUAL_
 3897              		.loc 1 701 5 is_stmt 0 view .LVU1166
 3898 0f40 002E     		cmp	r6, #0
 3899 0f42 40F09C81 		bne	.L274
 702:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3900              		.loc 1 702 4 is_stmt 1 view .LVU1167
 702:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3901              		.loc 1 702 13 is_stmt 0 view .LVU1168
 3902 0f46 6F20     		movs	r0, #111
 3903              	.LVL464:
 702:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3904              		.loc 1 702 13 view .LVU1169
 3905 0f48 FFF78CFA 		bl	tmc5160_readInt.constprop.0
 3906              	.LVL465:
 702:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3907              		.loc 1 702 13 view .LVU1170
 3908 0f4c C0F30440 		ubfx	r0, r0, #16, #5
 702:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 3909              		.loc 1 702 11 view .LVU1171
 3910 0f50 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 3911              		.loc 1 293 11 view .LVU1172
 3912 0f52 3446     		mov	r4, r6
 3913 0f54 18E4     		b	.L120
 3914              	.LVL466:
 3915              	.L137:
 710:boards/TMC5160_eval.c **** 			if(TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT))
 3916              		.loc 1 710 3 is_stmt 1 view .LVU1173
 711:boards/TMC5160_eval.c **** 			{
 3917              		.loc 1 711 7 is_stmt 0 view .LVU1174
 3918 0f56 3420     		movs	r0, #52
 3919              	.LVL467:
 710:boards/TMC5160_eval.c **** 			if(TMC5160_FIELD_READ(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT))
 3920              		.loc 1 710 5 view .LVU1175
 3921 0f58 C6B9     		cbnz	r6, .L245
 711:boards/TMC5160_eval.c **** 			{
 3922              		.loc 1 711 4 is_stmt 1 view .LVU1176
 711:boards/TMC5160_eval.c **** 			{
 3923              		.loc 1 711 7 is_stmt 0 view .LVU1177
 3924 0f5a FFF783FA 		bl	tmc5160_readInt.constprop.0
 3925              	.LVL468:
 711:boards/TMC5160_eval.c **** 			{
 3926              		.loc 1 711 6 view .LVU1178
 3927 0f5e 4305     		lsls	r3, r0, #21
 3928 0f60 10D5     		bpl	.L246
 713:boards/TMC5160_eval.c **** 				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 3929              		.loc 1 713 5 is_stmt 1 view .LVU1179
 713:boards/TMC5160_eval.c **** 				*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 3930              		.loc 1 713 14 is_stmt 0 view .LVU1180
 3931 0f62 1420     		movs	r0, #20
 3932 0f64 FFF77EFA 		bl	tmc5160_readInt.constprop.0
 3933              	.LVL469:
 714:boards/TMC5160_eval.c **** 			}
 3934              		.loc 1 714 5 is_stmt 1 view .LVU1181
 714:boards/TMC5160_eval.c **** 			}
 3935              		.loc 1 714 14 is_stmt 0 view .LVU1182
 3936 0f68 0128     		cmp	r0, #1
 3937 0f6a 38BF     		it	cc
 3938 0f6c 0120     		movcc	r0, #1
 3939              	.LVL470:
 714:boards/TMC5160_eval.c **** 			}
 3940              		.loc 1 714 14 view .LVU1183
 3941 0f6e 4FF08073 		mov	r3, #16777216
 3942 0f72 B3FBF0F0 		udiv	r0, r3, r0
 714:boards/TMC5160_eval.c **** 			}
 3943              		.loc 1 714 12 view .LVU1184
 3944 0f76 C84B     		ldr	r3, .L289
 3945 0f78 9842     		cmp	r0, r3
 3946 0f7a 94BF     		ite	ls
 3947 0f7c 2860     		strls	r0, [r5]
 3948 0f7e 2B60     		strhi	r3, [r5]
 293:boards/TMC5160_eval.c **** 
 3949              		.loc 1 293 11 view .LVU1185
 3950 0f80 3446     		mov	r4, r6
 3951 0f82 01E4     		b	.L120
 3952              	.L246:
 718:boards/TMC5160_eval.c **** 			}
 3953              		.loc 1 718 5 is_stmt 1 view .LVU1186
 718:boards/TMC5160_eval.c **** 			}
 3954              		.loc 1 718 12 is_stmt 0 view .LVU1187
 3955 0f84 2E60     		str	r6, [r5]
 293:boards/TMC5160_eval.c **** 
 3956              		.loc 1 293 11 view .LVU1188
 3957 0f86 3446     		mov	r4, r6
 3958 0f88 FFF7FEBB 		b	.L120
 3959              	.LVL471:
 3960              	.L245:
 720:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_SWMODE, TMC5160_SG_STOP_MASK, TMC5160_SG_STOP_SHIFT, (*value
 3961              		.loc 1 720 10 is_stmt 1 view .LVU1189
 721:boards/TMC5160_eval.c **** 
 3962              		.loc 1 721 4 view .LVU1190
 3963 0f8c FFF76AFA 		bl	tmc5160_readInt.constprop.0
 3964              	.LVL472:
 721:boards/TMC5160_eval.c **** 
 3965              		.loc 1 721 4 is_stmt 0 view .LVU1191
 3966 0f90 2B68     		ldr	r3, [r5]
 3967 0f92 002B     		cmp	r3, #0
 3968 0f94 18BF     		it	ne
 3969 0f96 4FF48063 		movne	r3, #1024
 3970 0f9a 20F48062 		bic	r2, r0, #1024
 3971 0f9e 1A43     		orrs	r2, r2, r3
 3972 0fa0 3421     		movs	r1, #52
 3973 0fa2 0020     		movs	r0, #0
 3974 0fa4 FFF7FEFF 		bl	tmc5160_writeInt
 3975              	.LVL473:
 723:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 3976              		.loc 1 723 4 is_stmt 1 view .LVU1192
 723:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 3977              		.loc 1 723 13 is_stmt 0 view .LVU1193
 3978 0fa8 2B68     		ldr	r3, [r5]
 3979 0faa 002B     		cmp	r3, #0
 3980 0fac 08BF     		it	eq
 3981 0fae 0123     		moveq	r3, #1
 3982 0fb0 4FF08072 		mov	r2, #16777216
 3983 0fb4 92FBF3F2 		sdiv	r2, r2, r3
 3984 0fb8 B74B     		ldr	r3, .L289
 3985 0fba 9A42     		cmp	r2, r3
 3986 0fbc A8BF     		it	ge
 3987 0fbe 1A46     		movge	r2, r3
 723:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 3988              		.loc 1 723 11 view .LVU1194
 3989 0fc0 2A60     		str	r2, [r5]
 724:boards/TMC5160_eval.c **** 		}
 3990              		.loc 1 724 4 is_stmt 1 view .LVU1195
 3991 0fc2 1421     		movs	r1, #20
 3992 0fc4 0020     		movs	r0, #0
 3993 0fc6 FFF7FEFF 		bl	tmc5160_writeInt
 3994              	.LVL474:
 293:boards/TMC5160_eval.c **** 
 3995              		.loc 1 293 11 is_stmt 0 view .LVU1196
 3996 0fca 0024     		movs	r4, #0
 3997 0fcc FFF7DCBB 		b	.L120
 3998              	.LVL475:
 3999              	.L136:
 729:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
 4000              		.loc 1 729 3 is_stmt 1 view .LVU1197
 4001 0fd0 B14C     		ldr	r4, .L289
 729:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TCOOLTHRS);
 4002              		.loc 1 729 5 is_stmt 0 view .LVU1198
 4003 0fd2 86B9     		cbnz	r6, .L249
 730:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4004              		.loc 1 730 4 is_stmt 1 view .LVU1199
 730:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4005              		.loc 1 730 13 is_stmt 0 view .LVU1200
 4006 0fd4 1420     		movs	r0, #20
 4007              	.LVL476:
 730:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4008              		.loc 1 730 13 view .LVU1201
 4009 0fd6 FFF745FA 		bl	tmc5160_readInt.constprop.0
 4010              	.LVL477:
 731:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4011              		.loc 1 731 4 is_stmt 1 view .LVU1202
 731:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4012              		.loc 1 731 13 is_stmt 0 view .LVU1203
 4013 0fda 0128     		cmp	r0, #1
 4014 0fdc 38BF     		it	cc
 4015 0fde 0120     		movcc	r0, #1
 4016              	.LVL478:
 731:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4017              		.loc 1 731 13 view .LVU1204
 4018 0fe0 4FF08073 		mov	r3, #16777216
 4019 0fe4 B3FBF0F0 		udiv	r0, r3, r0
 731:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4020              		.loc 1 731 11 view .LVU1205
 4021 0fe8 A042     		cmp	r0, r4
 4022 0fea 94BF     		ite	ls
 4023 0fec 2860     		strls	r0, [r5]
 4024 0fee 2C60     		strhi	r4, [r5]
 293:boards/TMC5160_eval.c **** 
 4025              		.loc 1 293 11 view .LVU1206
 4026 0ff0 3446     		mov	r4, r6
 4027 0ff2 FFF7C9BB 		b	.L120
 4028              	.LVL479:
 4029              	.L249:
 732:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 4030              		.loc 1 732 10 is_stmt 1 view .LVU1207
 733:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 4031              		.loc 1 733 4 view .LVU1208
 733:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 4032              		.loc 1 733 13 is_stmt 0 view .LVU1209
 4033 0ff6 2B68     		ldr	r3, [r5]
 4034 0ff8 002B     		cmp	r3, #0
 4035 0ffa 08BF     		it	eq
 4036 0ffc 0123     		moveq	r3, #1
 4037 0ffe 4FF08072 		mov	r2, #16777216
 4038 1002 92FBF3F2 		sdiv	r2, r2, r3
 4039 1006 A242     		cmp	r2, r4
 4040 1008 A8BF     		it	ge
 4041 100a 2246     		movge	r2, r4
 733:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TCOOLTHRS, *value);
 4042              		.loc 1 733 11 view .LVU1210
 4043 100c 2A60     		str	r2, [r5]
 734:boards/TMC5160_eval.c **** 		}
 4044              		.loc 1 734 4 is_stmt 1 view .LVU1211
 4045 100e 1421     		movs	r1, #20
 4046              	.LVL480:
 734:boards/TMC5160_eval.c **** 		}
 4047              		.loc 1 734 4 is_stmt 0 view .LVU1212
 4048 1010 0020     		movs	r0, #0
 4049              	.LVL481:
 734:boards/TMC5160_eval.c **** 		}
 4050              		.loc 1 734 4 view .LVU1213
 4051 1012 FFF7FEFF 		bl	tmc5160_writeInt
 4052              	.LVL482:
 293:boards/TMC5160_eval.c **** 
 4053              		.loc 1 293 11 view .LVU1214
 4054 1016 0024     		movs	r4, #0
 4055 1018 FFF7B6BB 		b	.L120
 4056              	.LVL483:
 4057              	.L135:
 739:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT);
 4058              		.loc 1 739 3 is_stmt 1 view .LVU1215
 740:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4059              		.loc 1 740 13 is_stmt 0 view .LVU1216
 4060 101c 6C20     		movs	r0, #108
 4061              	.LVL484:
 739:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT);
 4062              		.loc 1 739 5 view .LVU1217
 4063 101e 3EB9     		cbnz	r6, .L251
 740:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4064              		.loc 1 740 4 is_stmt 1 view .LVU1218
 740:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4065              		.loc 1 740 13 is_stmt 0 view .LVU1219
 4066 1020 FFF720FA 		bl	tmc5160_readInt.constprop.0
 4067              	.LVL485:
 740:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4068              		.loc 1 740 13 view .LVU1220
 4069 1024 C0F34030 		ubfx	r0, r0, #13, #1
 740:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4070              		.loc 1 740 11 view .LVU1221
 4071 1028 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4072              		.loc 1 293 11 view .LVU1222
 4073 102a 3446     		mov	r4, r6
 4074 102c FFF7ACBB 		b	.L120
 4075              	.LVL486:
 4076              	.L251:
 741:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_CHOPCONF, TMC5160_RNDTF_MASK, TMC5160_RNDTF_SHIFT, *value);
 4077              		.loc 1 741 10 is_stmt 1 view .LVU1223
 742:boards/TMC5160_eval.c **** 		}
 4078              		.loc 1 742 4 view .LVU1224
 4079 1030 FFF718FA 		bl	tmc5160_readInt.constprop.0
 4080              	.LVL487:
 742:boards/TMC5160_eval.c **** 		}
 4081              		.loc 1 742 4 is_stmt 0 view .LVU1225
 4082 1034 2B68     		ldr	r3, [r5]
 4083 1036 5B03     		lsls	r3, r3, #13
 4084 1038 03F40053 		and	r3, r3, #8192
 4085 103c 20F40052 		bic	r2, r0, #8192
 4086 1040 1A43     		orrs	r2, r2, r3
 4087 1042 6C21     		movs	r1, #108
 4088 1044 0020     		movs	r0, #0
 4089 1046 FFF7FEFF 		bl	tmc5160_writeInt
 4090              	.LVL488:
 293:boards/TMC5160_eval.c **** 
 4091              		.loc 1 293 11 view .LVU1226
 4092 104a 0024     		movs	r4, #0
 4093 104c FFF79CBB 		b	.L120
 4094              	.LVL489:
 4095              	.L134:
 747:boards/TMC5160_eval.c **** 			*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> 20) & 0x0F;
 4096              		.loc 1 747 3 is_stmt 1 view .LVU1227
 748:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4097              		.loc 1 748 14 is_stmt 0 view .LVU1228
 4098 1050 6C20     		movs	r0, #108
 4099              	.LVL490:
 747:boards/TMC5160_eval.c **** 			*value = (tmc5160_readInt(motor, TMC5160_CHOPCONF) >> 20) & 0x0F;
 4100              		.loc 1 747 5 view .LVU1229
 4101 1052 3EB9     		cbnz	r6, .L252
 748:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4102              		.loc 1 748 4 is_stmt 1 view .LVU1230
 748:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4103              		.loc 1 748 14 is_stmt 0 view .LVU1231
 4104 1054 FFF706FA 		bl	tmc5160_readInt.constprop.0
 4105              	.LVL491:
 748:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4106              		.loc 1 748 62 view .LVU1232
 4107 1058 C0F30350 		ubfx	r0, r0, #20, #4
 748:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4108              		.loc 1 748 11 view .LVU1233
 4109 105c 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4110              		.loc 1 293 11 view .LVU1234
 4111 105e 3446     		mov	r4, r6
 4112 1060 FFF792BB 		b	.L120
 4113              	.LVL492:
 4114              	.L252:
 749:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_CHOPCONF);
 4115              		.loc 1 749 10 is_stmt 1 view .LVU1235
 750:boards/TMC5160_eval.c **** 			buffer &= ~(0x0F<<20);
 4116              		.loc 1 750 4 view .LVU1236
 750:boards/TMC5160_eval.c **** 			buffer &= ~(0x0F<<20);
 4117              		.loc 1 750 13 is_stmt 0 view .LVU1237
 4118 1064 FFF7FEF9 		bl	tmc5160_readInt.constprop.0
 4119              	.LVL493:
 751:boards/TMC5160_eval.c **** 			buffer |= (*value & 0x0F) << 20;
 4120              		.loc 1 751 4 is_stmt 1 view .LVU1238
 752:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_CHOPCONF,buffer);
 4121              		.loc 1 752 30 is_stmt 0 view .LVU1239
 4122 1068 2B68     		ldr	r3, [r5]
 4123 106a 1B05     		lsls	r3, r3, #20
 751:boards/TMC5160_eval.c **** 			buffer |= (*value & 0x0F) << 20;
 4124              		.loc 1 751 11 view .LVU1240
 4125 106c 20F47002 		bic	r2, r0, #15728640
 4126              	.LVL494:
 752:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_CHOPCONF,buffer);
 4127              		.loc 1 752 4 is_stmt 1 view .LVU1241
 753:boards/TMC5160_eval.c **** 		}
 4128              		.loc 1 753 4 view .LVU1242
 752:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_CHOPCONF,buffer);
 4129              		.loc 1 752 30 is_stmt 0 view .LVU1243
 4130 1070 03F47003 		and	r3, r3, #15728640
 753:boards/TMC5160_eval.c **** 		}
 4131              		.loc 1 753 4 view .LVU1244
 4132 1074 1A43     		orrs	r2, r2, r3
 4133              	.LVL495:
 753:boards/TMC5160_eval.c **** 		}
 4134              		.loc 1 753 4 view .LVU1245
 4135 1076 6C21     		movs	r1, #108
 4136 1078 0020     		movs	r0, #0
 4137 107a FFF7FEFF 		bl	tmc5160_writeInt
 4138              	.LVL496:
 293:boards/TMC5160_eval.c **** 
 4139              		.loc 1 293 11 view .LVU1246
 4140 107e 0024     		movs	r4, #0
 4141 1080 FFF782BB 		b	.L120
 4142              	.LVL497:
 4143              	.L133:
 758:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TPWMTHRS);
 4144              		.loc 1 758 3 is_stmt 1 view .LVU1247
 4145 1084 844C     		ldr	r4, .L289
 758:boards/TMC5160_eval.c **** 			buffer = tmc5160_readInt(motor, TMC5160_TPWMTHRS);
 4146              		.loc 1 758 5 is_stmt 0 view .LVU1248
 4147 1086 86B9     		cbnz	r6, .L253
 759:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4148              		.loc 1 759 4 is_stmt 1 view .LVU1249
 759:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4149              		.loc 1 759 13 is_stmt 0 view .LVU1250
 4150 1088 1320     		movs	r0, #19
 4151              	.LVL498:
 759:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((buffer)? buffer:1));
 4152              		.loc 1 759 13 view .LVU1251
 4153 108a FFF7EBF9 		bl	tmc5160_readInt.constprop.0
 4154              	.LVL499:
 760:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4155              		.loc 1 760 4 is_stmt 1 view .LVU1252
 760:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4156              		.loc 1 760 13 is_stmt 0 view .LVU1253
 4157 108e 0128     		cmp	r0, #1
 4158 1090 38BF     		it	cc
 4159 1092 0120     		movcc	r0, #1
 4160              	.LVL500:
 760:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4161              		.loc 1 760 13 view .LVU1254
 4162 1094 4FF08073 		mov	r3, #16777216
 4163 1098 B3FBF0F0 		udiv	r0, r3, r0
 760:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4164              		.loc 1 760 11 view .LVU1255
 4165 109c A042     		cmp	r0, r4
 4166 109e 94BF     		ite	ls
 4167 10a0 2860     		strls	r0, [r5]
 4168 10a2 2C60     		strhi	r4, [r5]
 293:boards/TMC5160_eval.c **** 
 4169              		.loc 1 293 11 view .LVU1256
 4170 10a4 3446     		mov	r4, r6
 4171 10a6 FFF76FBB 		b	.L120
 4172              	.LVL501:
 4173              	.L253:
 761:boards/TMC5160_eval.c **** 			*value = MIN(0xFFFFF, (1<<24) / ((*value)? *value:1));
 4174              		.loc 1 761 10 is_stmt 1 view .LVU1257
 762:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TPWMTHRS, *value);
 4175              		.loc 1 762 4 view .LVU1258
 762:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TPWMTHRS, *value);
 4176              		.loc 1 762 13 is_stmt 0 view .LVU1259
 4177 10aa 2B68     		ldr	r3, [r5]
 4178 10ac 002B     		cmp	r3, #0
 4179 10ae 08BF     		it	eq
 4180 10b0 0123     		moveq	r3, #1
 4181 10b2 4FF08072 		mov	r2, #16777216
 4182 10b6 92FBF3F2 		sdiv	r2, r2, r3
 4183 10ba A242     		cmp	r2, r4
 4184 10bc A8BF     		it	ge
 4185 10be 2246     		movge	r2, r4
 762:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_TPWMTHRS, *value);
 4186              		.loc 1 762 11 view .LVU1260
 4187 10c0 2A60     		str	r2, [r5]
 763:boards/TMC5160_eval.c **** 		}
 4188              		.loc 1 763 4 is_stmt 1 view .LVU1261
 4189 10c2 1321     		movs	r1, #19
 4190              	.LVL502:
 763:boards/TMC5160_eval.c **** 		}
 4191              		.loc 1 763 4 is_stmt 0 view .LVU1262
 4192 10c4 0020     		movs	r0, #0
 4193              	.LVL503:
 763:boards/TMC5160_eval.c **** 		}
 4194              		.loc 1 763 4 view .LVU1263
 4195 10c6 FFF7FEFF 		bl	tmc5160_writeInt
 4196              	.LVL504:
 293:boards/TMC5160_eval.c **** 
 4197              		.loc 1 293 11 view .LVU1264
 4198 10ca 0024     		movs	r4, #0
 4199 10cc FFF75CBB 		b	.L120
 4200              	.LVL505:
 4201              	.L132:
 768:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIF
 4202              		.loc 1 768 3 is_stmt 1 view .LVU1265
 769:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4203              		.loc 1 769 13 is_stmt 0 view .LVU1266
 4204 10d0 7020     		movs	r0, #112
 4205              	.LVL506:
 768:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_GRAD_MASK, TMC5160_PWM_GRAD_SHIF
 4206              		.loc 1 768 5 view .LVU1267
 4207 10d2 3EB9     		cbnz	r6, .L255
 769:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4208              		.loc 1 769 4 is_stmt 1 view .LVU1268
 769:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4209              		.loc 1 769 13 is_stmt 0 view .LVU1269
 4210 10d4 FFF7C6F9 		bl	tmc5160_readInt.constprop.0
 4211              	.LVL507:
 769:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4212              		.loc 1 769 13 view .LVU1270
 4213 10d8 C0F30720 		ubfx	r0, r0, #8, #8
 769:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4214              		.loc 1 769 11 view .LVU1271
 4215 10dc 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4216              		.loc 1 293 11 view .LVU1272
 4217 10de 3446     		mov	r4, r6
 4218 10e0 FFF752BB 		b	.L120
 4219              	.LVL508:
 4220              	.L255:
 770:boards/TMC5160_eval.c **** 			// Set gradient
 4221              		.loc 1 770 10 is_stmt 1 view .LVU1273
 772:boards/TMC5160_eval.c **** 			// Enable/disable stealthChop accordingly
 4222              		.loc 1 772 4 view .LVU1274
 4223 10e4 FFF7BEF9 		bl	tmc5160_readInt.constprop.0
 4224              	.LVL509:
 772:boards/TMC5160_eval.c **** 			// Enable/disable stealthChop accordingly
 4225              		.loc 1 772 4 is_stmt 0 view .LVU1275
 4226 10e8 2B68     		ldr	r3, [r5]
 4227 10ea 1B02     		lsls	r3, r3, #8
 4228 10ec 9BB2     		uxth	r3, r3
 4229 10ee 20F47F42 		bic	r2, r0, #65280
 4230 10f2 1A43     		orrs	r2, r2, r3
 4231 10f4 7021     		movs	r1, #112
 4232 10f6 0020     		movs	r0, #0
 4233 10f8 FFF7FEFF 		bl	tmc5160_writeInt
 4234              	.LVL510:
 774:boards/TMC5160_eval.c **** 		}
 4235              		.loc 1 774 4 is_stmt 1 view .LVU1276
 4236 10fc 0020     		movs	r0, #0
 4237 10fe FFF7B1F9 		bl	tmc5160_readInt.constprop.0
 4238              	.LVL511:
 4239 1102 2B68     		ldr	r3, [r5]
 4240 1104 002B     		cmp	r3, #0
 4241 1106 20F00402 		bic	r2, r0, #4
 4242 110a 18BF     		it	ne
 4243 110c 0423     		movne	r3, #4
 4244 110e 0021     		movs	r1, #0
 4245 1110 1A43     		orrs	r2, r2, r3
 4246 1112 0846     		mov	r0, r1
 4247 1114 FFF7FEFF 		bl	tmc5160_writeInt
 4248              	.LVL512:
 293:boards/TMC5160_eval.c **** 
 4249              		.loc 1 293 11 is_stmt 0 view .LVU1277
 4250 1118 0024     		movs	r4, #0
 4251 111a FFF735BB 		b	.L120
 4252              	.LVL513:
 4253              	.L131:
 779:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_OFS_MASK, TMC5160_PWM_OFS_SHIFT)
 4254              		.loc 1 779 3 is_stmt 1 view .LVU1278
 780:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4255              		.loc 1 780 13 is_stmt 0 view .LVU1279
 4256 111e 7020     		movs	r0, #112
 4257              	.LVL514:
 779:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_OFS_MASK, TMC5160_PWM_OFS_SHIFT)
 4258              		.loc 1 779 5 view .LVU1280
 4259 1120 36B9     		cbnz	r6, .L257
 780:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4260              		.loc 1 780 4 is_stmt 1 view .LVU1281
 780:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4261              		.loc 1 780 13 is_stmt 0 view .LVU1282
 4262 1122 FFF79FF9 		bl	tmc5160_readInt.constprop.0
 4263              	.LVL515:
 780:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4264              		.loc 1 780 13 view .LVU1283
 4265 1126 C0B2     		uxtb	r0, r0
 780:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4266              		.loc 1 780 11 view .LVU1284
 4267 1128 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4268              		.loc 1 293 11 view .LVU1285
 4269 112a 3446     		mov	r4, r6
 4270 112c FFF72CBB 		b	.L120
 4271              	.LVL516:
 4272              	.L257:
 781:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_GLOBAL_SCALER_MASK, TMC5160_GLOBAL_SCALER_S
 4273              		.loc 1 781 10 is_stmt 1 view .LVU1286
 782:boards/TMC5160_eval.c **** 		}
 4274              		.loc 1 782 4 view .LVU1287
 4275 1130 FFF798F9 		bl	tmc5160_readInt.constprop.0
 4276              	.LVL517:
 782:boards/TMC5160_eval.c **** 		}
 4277              		.loc 1 782 4 is_stmt 0 view .LVU1288
 4278 1134 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 4279 1136 20F0FF00 		bic	r0, r0, #255
 4280 113a 0243     		orrs	r2, r2, r0
 4281 113c 7021     		movs	r1, #112
 4282 113e 0020     		movs	r0, #0
 4283 1140 FFF7FEFF 		bl	tmc5160_writeInt
 4284              	.LVL518:
 293:boards/TMC5160_eval.c **** 
 4285              		.loc 1 293 11 view .LVU1289
 4286 1144 0024     		movs	r4, #0
 4287 1146 FFF71FBB 		b	.L120
 4288              	.LVL519:
 4289              	.L130:
 787:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIF
 4290              		.loc 1 787 3 is_stmt 1 view .LVU1290
 787:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_FREQ_MASK, TMC5160_PWM_FREQ_SHIF
 4291              		.loc 1 787 5 is_stmt 0 view .LVU1291
 4292 114a 46B9     		cbnz	r6, .L258
 788:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4293              		.loc 1 788 4 is_stmt 1 view .LVU1292
 788:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4294              		.loc 1 788 13 is_stmt 0 view .LVU1293
 4295 114c 7020     		movs	r0, #112
 4296              	.LVL520:
 788:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4297              		.loc 1 788 13 view .LVU1294
 4298 114e FFF789F9 		bl	tmc5160_readInt.constprop.0
 4299              	.LVL521:
 788:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4300              		.loc 1 788 13 view .LVU1295
 4301 1152 C0F30140 		ubfx	r0, r0, #16, #2
 788:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4302              		.loc 1 788 11 view .LVU1296
 4303 1156 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4304              		.loc 1 293 11 view .LVU1297
 4305 1158 3446     		mov	r4, r6
 4306 115a FFF715BB 		b	.L120
 4307              	.LVL522:
 4308              	.L258:
 789:boards/TMC5160_eval.c **** 			if(*value >= 0 && *value < 4)
 4309              		.loc 1 789 10 is_stmt 1 view .LVU1298
 790:boards/TMC5160_eval.c **** 			{
 4310              		.loc 1 790 4 view .LVU1299
 790:boards/TMC5160_eval.c **** 			{
 4311              		.loc 1 790 6 is_stmt 0 view .LVU1300
 4312 115e 2B68     		ldr	r3, [r5]
 4313 1160 032B     		cmp	r3, #3
 4314 1162 00F28F80 		bhi	.L280
 792:boards/TMC5160_eval.c **** 			}
 4315              		.loc 1 792 5 is_stmt 1 view .LVU1301
 4316 1166 7020     		movs	r0, #112
 4317              	.LVL523:
 792:boards/TMC5160_eval.c **** 			}
 4318              		.loc 1 792 5 is_stmt 0 view .LVU1302
 4319 1168 FFF77CF9 		bl	tmc5160_readInt.constprop.0
 4320              	.LVL524:
 792:boards/TMC5160_eval.c **** 			}
 4321              		.loc 1 792 5 view .LVU1303
 4322 116c 2B68     		ldr	r3, [r5]
 4323 116e 1B04     		lsls	r3, r3, #16
 4324 1170 03F44033 		and	r3, r3, #196608
 4325 1174 20F44032 		bic	r2, r0, #196608
 4326 1178 1A43     		orrs	r2, r2, r3
 4327 117a 7021     		movs	r1, #112
 4328 117c 0020     		movs	r0, #0
 4329 117e FFF7FEFF 		bl	tmc5160_writeInt
 4330              	.LVL525:
 293:boards/TMC5160_eval.c **** 
 4331              		.loc 1 293 11 view .LVU1304
 4332 1182 0024     		movs	r4, #0
 4333 1184 FFF700BB 		b	.L120
 4334              	.LVL526:
 4335              	.L129:
 802:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTO
 4336              		.loc 1 802 3 is_stmt 1 view .LVU1305
 802:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_PWM_AUTOSCALE_MASK, TMC5160_PWM_AUTO
 4337              		.loc 1 802 5 is_stmt 0 view .LVU1306
 4338 1188 46B9     		cbnz	r6, .L259
 803:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4339              		.loc 1 803 4 is_stmt 1 view .LVU1307
 803:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4340              		.loc 1 803 13 is_stmt 0 view .LVU1308
 4341 118a 7020     		movs	r0, #112
 4342              	.LVL527:
 803:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4343              		.loc 1 803 13 view .LVU1309
 4344 118c FFF76AF9 		bl	tmc5160_readInt.constprop.0
 4345              	.LVL528:
 803:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4346              		.loc 1 803 13 view .LVU1310
 4347 1190 C0F38040 		ubfx	r0, r0, #18, #1
 803:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4348              		.loc 1 803 11 view .LVU1311
 4349 1194 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4350              		.loc 1 293 11 view .LVU1312
 4351 1196 3446     		mov	r4, r6
 4352 1198 FFF7F6BA 		b	.L120
 4353              	.LVL529:
 4354              	.L259:
 804:boards/TMC5160_eval.c **** 			if(*value >= 0 && *value < 2)
 4355              		.loc 1 804 10 is_stmt 1 view .LVU1313
 805:boards/TMC5160_eval.c **** 			{
 4356              		.loc 1 805 4 view .LVU1314
 805:boards/TMC5160_eval.c **** 			{
 4357              		.loc 1 805 6 is_stmt 0 view .LVU1315
 4358 119c 2B68     		ldr	r3, [r5]
 4359 119e 012B     		cmp	r3, #1
 4360 11a0 73D8     		bhi	.L281
 807:boards/TMC5160_eval.c **** 			}
 4361              		.loc 1 807 5 is_stmt 1 view .LVU1316
 4362 11a2 7020     		movs	r0, #112
 4363              	.LVL530:
 807:boards/TMC5160_eval.c **** 			}
 4364              		.loc 1 807 5 is_stmt 0 view .LVU1317
 4365 11a4 FFF75EF9 		bl	tmc5160_readInt.constprop.0
 4366              	.LVL531:
 807:boards/TMC5160_eval.c **** 			}
 4367              		.loc 1 807 5 view .LVU1318
 4368 11a8 2B68     		ldr	r3, [r5]
 4369 11aa 9B04     		lsls	r3, r3, #18
 4370 11ac 03F48023 		and	r3, r3, #262144
 4371 11b0 20F48022 		bic	r2, r0, #262144
 4372 11b4 1A43     		orrs	r2, r2, r3
 4373 11b6 7021     		movs	r1, #112
 4374 11b8 0020     		movs	r0, #0
 4375 11ba FFF7FEFF 		bl	tmc5160_writeInt
 4376              	.LVL532:
 293:boards/TMC5160_eval.c **** 
 4377              		.loc 1 293 11 view .LVU1319
 4378 11be 0024     		movs	r4, #0
 4379 11c0 FFF7E2BA 		b	.L120
 4380              	.LVL533:
 4381              	.L128:
 817:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SH
 4382              		.loc 1 817 3 is_stmt 1 view .LVU1320
 818:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4383              		.loc 1 818 13 is_stmt 0 view .LVU1321
 4384 11c4 7020     		movs	r0, #112
 4385              	.LVL534:
 817:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SH
 4386              		.loc 1 817 5 view .LVU1322
 4387 11c6 3EB9     		cbnz	r6, .L260
 818:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4388              		.loc 1 818 4 is_stmt 1 view .LVU1323
 818:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4389              		.loc 1 818 13 is_stmt 0 view .LVU1324
 4390 11c8 FFF74CF9 		bl	tmc5160_readInt.constprop.0
 4391              	.LVL535:
 818:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4392              		.loc 1 818 13 view .LVU1325
 4393 11cc C0F30150 		ubfx	r0, r0, #20, #2
 818:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4394              		.loc 1 818 11 view .LVU1326
 4395 11d0 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4396              		.loc 1 293 11 view .LVU1327
 4397 11d2 3446     		mov	r4, r6
 4398 11d4 FFF7D8BA 		b	.L120
 4399              	.LVL536:
 4400              	.L260:
 819:boards/TMC5160_eval.c **** 			TMC5160_FIELD_UPDATE(motor, TMC5160_PWMCONF, TMC5160_FREEWHEEL_MASK, TMC5160_FREEWHEEL_SHIFT, *v
 4401              		.loc 1 819 10 is_stmt 1 view .LVU1328
 820:boards/TMC5160_eval.c **** 		}
 4402              		.loc 1 820 4 view .LVU1329
 4403 11d8 FFF744F9 		bl	tmc5160_readInt.constprop.0
 4404              	.LVL537:
 820:boards/TMC5160_eval.c **** 		}
 4405              		.loc 1 820 4 is_stmt 0 view .LVU1330
 4406 11dc 2B68     		ldr	r3, [r5]
 4407 11de 1B05     		lsls	r3, r3, #20
 4408 11e0 03F44013 		and	r3, r3, #3145728
 4409 11e4 20F44012 		bic	r2, r0, #3145728
 4410 11e8 1A43     		orrs	r2, r2, r3
 4411 11ea 7021     		movs	r1, #112
 4412 11ec 0020     		movs	r0, #0
 4413 11ee FFF7FEFF 		bl	tmc5160_writeInt
 4414              	.LVL538:
 293:boards/TMC5160_eval.c **** 
 4415              		.loc 1 293 11 view .LVU1331
 4416 11f2 0024     		movs	r4, #0
 4417 11f4 FFF7C8BA 		b	.L120
 4418              	.LVL539:
 4419              	.L127:
 825:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_SG_RESULT_MASK, TMC5160_SG_RESULT_
 4420              		.loc 1 825 3 is_stmt 1 view .LVU1332
 825:boards/TMC5160_eval.c **** 			*value = TMC5160_FIELD_READ(motor, TMC5160_DRVSTATUS, TMC5160_SG_RESULT_MASK, TMC5160_SG_RESULT_
 4421              		.loc 1 825 5 is_stmt 0 view .LVU1333
 4422 11f8 002E     		cmp	r6, #0
 4423 11fa 49D1     		bne	.L282
 826:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4424              		.loc 1 826 4 is_stmt 1 view .LVU1334
 826:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4425              		.loc 1 826 13 is_stmt 0 view .LVU1335
 4426 11fc 6F20     		movs	r0, #111
 4427              	.LVL540:
 826:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4428              		.loc 1 826 13 view .LVU1336
 4429 11fe FFF731F9 		bl	tmc5160_readInt.constprop.0
 4430              	.LVL541:
 826:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4431              		.loc 1 826 13 view .LVU1337
 4432 1202 C0F30900 		ubfx	r0, r0, #0, #10
 826:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4433              		.loc 1 826 11 view .LVU1338
 4434 1206 2860     		str	r0, [r5]
 293:boards/TMC5160_eval.c **** 
 4435              		.loc 1 293 11 view .LVU1339
 4436 1208 3446     		mov	r4, r6
 4437 120a FFF7BDBA 		b	.L120
 4438              	.LVL542:
 4439              	.L126:
 833:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XENC);
 4440              		.loc 1 833 3 is_stmt 1 view .LVU1340
 833:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_XENC);
 4441              		.loc 1 833 5 is_stmt 0 view .LVU1341
 4442 120e 36B9     		cbnz	r6, .L261
 834:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4443              		.loc 1 834 4 is_stmt 1 view .LVU1342
 834:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4444              		.loc 1 834 13 is_stmt 0 view .LVU1343
 4445 1210 3920     		movs	r0, #57
 4446              	.LVL543:
 834:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4447              		.loc 1 834 13 view .LVU1344
 4448 1212 FFF727F9 		bl	tmc5160_readInt.constprop.0
 4449              	.LVL544:
 293:boards/TMC5160_eval.c **** 
 4450              		.loc 1 293 11 view .LVU1345
 4451 1216 3446     		mov	r4, r6
 834:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4452              		.loc 1 834 11 view .LVU1346
 4453 1218 2860     		str	r0, [r5]
 4454 121a FFF7B5BA 		b	.L120
 4455              	.LVL545:
 4456              	.L261:
 835:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_XENC, *value);
 4457              		.loc 1 835 10 is_stmt 1 view .LVU1347
 836:boards/TMC5160_eval.c **** 		}
 4458              		.loc 1 836 4 view .LVU1348
 4459 121e 2A68     		ldr	r2, [r5]
 4460 1220 3921     		movs	r1, #57
 4461              	.LVL546:
 836:boards/TMC5160_eval.c **** 		}
 4462              		.loc 1 836 4 is_stmt 0 view .LVU1349
 4463 1222 0020     		movs	r0, #0
 4464              	.LVL547:
 836:boards/TMC5160_eval.c **** 		}
 4465              		.loc 1 836 4 view .LVU1350
 4466 1224 FFF7FEFF 		bl	tmc5160_writeInt
 4467              	.LVL548:
 293:boards/TMC5160_eval.c **** 
 4468              		.loc 1 293 11 view .LVU1351
 4469 1228 0024     		movs	r4, #0
 4470 122a FFF7ADBA 		b	.L120
 4471              	.LVL549:
 4472              	.L124:
 841:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_ENC_CONST);
 4473              		.loc 1 841 3 is_stmt 1 view .LVU1352
 841:boards/TMC5160_eval.c **** 			*value = tmc5160_readInt(motor, TMC5160_ENC_CONST);
 4474              		.loc 1 841 5 is_stmt 0 view .LVU1353
 4475 122e 36B9     		cbnz	r6, .L262
 842:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4476              		.loc 1 842 4 is_stmt 1 view .LVU1354
 842:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4477              		.loc 1 842 13 is_stmt 0 view .LVU1355
 4478 1230 3A20     		movs	r0, #58
 4479              	.LVL550:
 842:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4480              		.loc 1 842 13 view .LVU1356
 4481 1232 FFF717F9 		bl	tmc5160_readInt.constprop.0
 4482              	.LVL551:
 293:boards/TMC5160_eval.c **** 
 4483              		.loc 1 293 11 view .LVU1357
 4484 1236 3446     		mov	r4, r6
 842:boards/TMC5160_eval.c **** 		} else if(readWrite == WRITE) {
 4485              		.loc 1 842 11 view .LVU1358
 4486 1238 2860     		str	r0, [r5]
 4487 123a FFF7A5BA 		b	.L120
 4488              	.LVL552:
 4489              	.L262:
 843:boards/TMC5160_eval.c **** 			tmc5160_writeInt(motor, TMC5160_ENC_CONST, *value);
 4490              		.loc 1 843 10 is_stmt 1 view .LVU1359
 844:boards/TMC5160_eval.c **** 		}
 4491              		.loc 1 844 4 view .LVU1360
 4492 123e 2A68     		ldr	r2, [r5]
 4493 1240 3A21     		movs	r1, #58
 4494              	.LVL553:
 844:boards/TMC5160_eval.c **** 		}
 4495              		.loc 1 844 4 is_stmt 0 view .LVU1361
 4496 1242 0020     		movs	r0, #0
 4497              	.LVL554:
 844:boards/TMC5160_eval.c **** 		}
 4498              		.loc 1 844 4 view .LVU1362
 4499 1244 FFF7FEFF 		bl	tmc5160_writeInt
 4500              	.LVL555:
 293:boards/TMC5160_eval.c **** 
 4501              		.loc 1 293 11 view .LVU1363
 4502 1248 0024     		movs	r4, #0
 4503 124a FFF79DBA 		b	.L120
 4504              	.LVL556:
 4505              	.L263:
 296:boards/TMC5160_eval.c **** 
 4506              		.loc 1 296 10 view .LVU1364
 4507 124e 0824     		movs	r4, #8
 4508 1250 FFF79ABA 		b	.L120
 4509              	.LVL557:
 4510              	.L264:
 298:boards/TMC5160_eval.c **** 	{
 4511              		.loc 1 298 2 view .LVU1365
 4512 1254 0424     		movs	r4, #4
 4513 1256 FFF797BA 		b	.L120
 4514              	.LVL558:
 4515              	.L265:
 298:boards/TMC5160_eval.c **** 	{
 4516              		.loc 1 298 2 view .LVU1366
 4517 125a 0424     		movs	r4, #4
 4518 125c FFF794BA 		b	.L120
 4519              	.L266:
 331:boards/TMC5160_eval.c **** 		}
 4520              		.loc 1 331 11 view .LVU1367
 4521 1260 0424     		movs	r4, #4
 4522 1262 FFF791BA 		b	.L120
 4523              	.L268:
 4524 1266 0424     		movs	r4, #4
 4525 1268 FFF78EBA 		b	.L120
 4526              	.L269:
 4527 126c 0424     		movs	r4, #4
 4528 126e FFF78BBA 		b	.L120
 4529              	.L270:
 4530 1272 0424     		movs	r4, #4
 4531 1274 FFF788BA 		b	.L120
 4532              	.L272:
 4533 1278 0424     		movs	r4, #4
 4534 127a FFF785BA 		b	.L120
 4535              	.LVL559:
 4536              	.L274:
 331:boards/TMC5160_eval.c **** 		}
 4537              		.loc 1 331 11 view .LVU1368
 4538 127e 0424     		movs	r4, #4
 4539 1280 FFF782BA 		b	.L120
 4540              	.L280:
 796:boards/TMC5160_eval.c **** 			}
 4541              		.loc 1 796 12 view .LVU1369
 4542 1284 1024     		movs	r4, #16
 4543 1286 FFF77FBA 		b	.L120
 4544              	.L281:
 796:boards/TMC5160_eval.c **** 			}
 4545              		.loc 1 796 12 view .LVU1370
 4546 128a 1024     		movs	r4, #16
 4547 128c FFF77CBA 		b	.L120
 4548              	.L282:
 331:boards/TMC5160_eval.c **** 		}
 4549              		.loc 1 331 11 view .LVU1371
 4550 1290 0424     		movs	r4, #4
 4551              	.LVL560:
 331:boards/TMC5160_eval.c **** 		}
 4552              		.loc 1 331 11 view .LVU1372
 4553 1292 FFF779BA 		b	.L120
 4554              	.L290:
 4555 1296 00BF     		.align	2
 4556              	.L289:
 4557 1298 FFFF0F00 		.word	1048575
 4558              		.cfi_endproc
 4559              	.LFE14:
 4561              		.align	1
 4562              		.syntax unified
 4563              		.thumb
 4564              		.thumb_func
 4565              		.fpu softvfp
 4567              	SAP:
 4568              	.LVL561:
 4569              	.LFB15:
 855:boards/TMC5160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 4570              		.loc 1 855 1 is_stmt 1 view -0
 4571              		.cfi_startproc
 4572              		@ args = 0, pretend = 0, frame = 8
 4573              		@ frame_needed = 0, uses_anonymous_args = 0
 856:boards/TMC5160_eval.c **** }
 4574              		.loc 1 856 2 view .LVU1374
 855:boards/TMC5160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 4575              		.loc 1 855 1 is_stmt 0 view .LVU1375
 4576 129c 07B5     		push	{r0, r1, r2, lr}
 4577              	.LCFI24:
 4578              		.cfi_def_cfa_offset 16
 4579              		.cfi_offset 14, -4
 855:boards/TMC5160_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 4580              		.loc 1 855 1 view .LVU1376
 4581 129e 0192     		str	r2, [sp, #4]
 856:boards/TMC5160_eval.c **** }
 4582              		.loc 1 856 9 view .LVU1377
 4583 12a0 01AB     		add	r3, sp, #4
 4584 12a2 0246     		mov	r2, r0
 4585              	.LVL562:
 856:boards/TMC5160_eval.c **** }
 4586              		.loc 1 856 9 view .LVU1378
 4587 12a4 0120     		movs	r0, #1
 4588              	.LVL563:
 856:boards/TMC5160_eval.c **** }
 4589              		.loc 1 856 9 view .LVU1379
 4590 12a6 FFF7ECF9 		bl	handleParameter
 4591              	.LVL564:
 857:boards/TMC5160_eval.c **** 
 4592              		.loc 1 857 1 view .LVU1380
 4593 12aa 03B0     		add	sp, sp, #12
 4594              	.LCFI25:
 4595              		.cfi_def_cfa_offset 4
 4596              		@ sp needed
 4597 12ac 5DF804FB 		ldr	pc, [sp], #4
 4598              		.cfi_endproc
 4599              	.LFE15:
 4601              		.align	1
 4602              		.syntax unified
 4603              		.thumb
 4604              		.thumb_func
 4605              		.fpu softvfp
 4607              	GAP:
 4608              	.LVL565:
 4609              	.LFB16:
 860:boards/TMC5160_eval.c **** 	return handleParameter(READ, motor, type, value);
 4610              		.loc 1 860 1 is_stmt 1 view -0
 4611              		.cfi_startproc
 4612              		@ args = 0, pretend = 0, frame = 0
 4613              		@ frame_needed = 0, uses_anonymous_args = 0
 4614              		@ link register save eliminated.
 861:boards/TMC5160_eval.c **** }
 4615              		.loc 1 861 2 view .LVU1382
 860:boards/TMC5160_eval.c **** 	return handleParameter(READ, motor, type, value);
 4616              		.loc 1 860 1 is_stmt 0 view .LVU1383
 4617 12b0 1346     		mov	r3, r2
 861:boards/TMC5160_eval.c **** }
 4618              		.loc 1 861 9 view .LVU1384
 4619 12b2 0246     		mov	r2, r0
 4620              	.LVL566:
 861:boards/TMC5160_eval.c **** }
 4621              		.loc 1 861 9 view .LVU1385
 4622 12b4 0020     		movs	r0, #0
 4623              	.LVL567:
 861:boards/TMC5160_eval.c **** }
 4624              		.loc 1 861 9 view .LVU1386
 4625 12b6 FFF7E4B9 		b	handleParameter
 4626              	.LVL568:
 861:boards/TMC5160_eval.c **** }
 4627              		.loc 1 861 9 view .LVU1387
 4628              		.cfi_endproc
 4629              	.LFE16:
 4631              		.align	1
 4632              		.global	tmc5160_readInt
 4633              		.syntax unified
 4634              		.thumb
 4635              		.thumb_func
 4636              		.fpu softvfp
 4638              	tmc5160_readInt:
 4639              	.LVL569:
 4640              	.LFB3:
  94:boards/TMC5160_eval.c **** 	int32_t r = 0;
 4641              		.loc 1 94 1 is_stmt 1 view -0
 4642              		.cfi_startproc
 4643              		@ args = 0, pretend = 0, frame = 0
 4644              		@ frame_needed = 0, uses_anonymous_args = 0
 4645              		@ link register save eliminated.
  95:boards/TMC5160_eval.c **** 	if(uart_mode)
 4646              		.loc 1 95 2 view .LVU1389
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 4647              		.loc 1 96 2 view .LVU1390
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 4648              		.loc 1 96 5 is_stmt 0 view .LVU1391
 4649 12ba 044B     		ldr	r3, .L295
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 4650              		.loc 1 96 4 view .LVU1392
 4651 12bc 93F8C532 		ldrb	r3, [r3, #709]	@ zero_extendqisi2
  94:boards/TMC5160_eval.c **** 	int32_t r = 0;
 4652              		.loc 1 94 1 view .LVU1393
 4653 12c0 0846     		mov	r0, r1
 4654              	.LVL570:
  96:boards/TMC5160_eval.c **** 		r = readInt_uart(motor, address);
 4655              		.loc 1 96 4 view .LVU1394
 4656 12c2 0BB1     		cbz	r3, .L294
  97:boards/TMC5160_eval.c **** 	else
 4657              		.loc 1 97 3 is_stmt 1 view .LVU1395
  97:boards/TMC5160_eval.c **** 	else
 4658              		.loc 1 97 7 is_stmt 0 view .LVU1396
 4659 12c4 FFF772B8 		b	readInt_uart.isra.0
 4660              	.LVL571:
 4661              	.L294:
  99:boards/TMC5160_eval.c **** 	return r;
 4662              		.loc 1 99 3 is_stmt 1 view .LVU1397
  99:boards/TMC5160_eval.c **** 	return r;
 4663              		.loc 1 99 7 is_stmt 0 view .LVU1398
 4664 12c8 FEF708BF 		b	readInt_spi.isra.0
 4665              	.LVL572:
 4666              	.L296:
  99:boards/TMC5160_eval.c **** 	return r;
 4667              		.loc 1 99 7 view .LVU1399
 4668              		.align	2
 4669              	.L295:
 4670 12cc 00000000 		.word	.LANCHOR0
 4671              		.cfi_endproc
 4672              	.LFE3:
 4674              		.align	1
 4675              		.global	TMC5160_init
 4676              		.syntax unified
 4677              		.thumb
 4678              		.thumb_func
 4679              		.fpu softvfp
 4681              	TMC5160_init:
 4682              	.LFB28:
1109:boards/TMC5160_eval.c **** 
1110:boards/TMC5160_eval.c **** void TMC5160_init(void)
1111:boards/TMC5160_eval.c **** {
 4683              		.loc 1 1111 1 is_stmt 1 view -0
 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 0
 4686              		@ frame_needed = 0, uses_anonymous_args = 0
1112:boards/TMC5160_eval.c **** 	tmc5160_initConfig(&TMC5160);
 4687              		.loc 1 1112 2 view .LVU1401
1111:boards/TMC5160_eval.c **** 	tmc5160_initConfig(&TMC5160);
 4688              		.loc 1 1111 1 is_stmt 0 view .LVU1402
 4689 12d0 38B5     		push	{r3, r4, r5, lr}
 4690              	.LCFI26:
 4691              		.cfi_def_cfa_offset 16
 4692              		.cfi_offset 3, -16
 4693              		.cfi_offset 4, -12
 4694              		.cfi_offset 5, -8
 4695              		.cfi_offset 14, -4
 4696              		.loc 1 1112 2 view .LVU1403
 4697 12d2 544C     		ldr	r4, .L298
 4698 12d4 2046     		mov	r0, r4
 4699 12d6 FFF7FEFF 		bl	tmc5160_initConfig
 4700              	.LVL573:
1113:boards/TMC5160_eval.c **** 
1114:boards/TMC5160_eval.c **** 	Pins.DRV_ENN_CFG6    = &HAL.IOs->pins->DIO0;
 4701              		.loc 1 1114 2 is_stmt 1 view .LVU1404
 4702              		.loc 1 1114 29 is_stmt 0 view .LVU1405
 4703 12da 534B     		ldr	r3, .L298+4
 4704 12dc DD68     		ldr	r5, [r3, #12]
 4705              		.loc 1 1114 33 view .LVU1406
 4706 12de 6B68     		ldr	r3, [r5, #4]
1115:boards/TMC5160_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
 4707              		.loc 1 1115 25 view .LVU1407
 4708 12e0 03F18802 		add	r2, r3, #136
 4709              		.loc 1 1115 23 view .LVU1408
 4710 12e4 C4F8A422 		str	r2, [r4, #676]
1116:boards/TMC5160_eval.c **** 	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO2;
 4711              		.loc 1 1116 25 view .LVU1409
 4712 12e8 03F1A802 		add	r2, r3, #168
 4713              		.loc 1 1116 23 view .LVU1410
 4714 12ec C4F89C22 		str	r2, [r4, #668]
1117:boards/TMC5160_eval.c **** 	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO3;
 4715              		.loc 1 1117 25 view .LVU1411
 4716 12f0 03F1C802 		add	r2, r3, #200
 4717              		.loc 1 1117 23 view .LVU1412
 4718 12f4 C4F8A022 		str	r2, [r4, #672]
1118:boards/TMC5160_eval.c **** 	Pins.REFL_UC         = &HAL.IOs->pins->DIO6;
 4719              		.loc 1 1118 25 view .LVU1413
 4720 12f8 03F59472 		add	r2, r3, #296
 4721              		.loc 1 1118 23 view .LVU1414
 4722 12fc C4F89022 		str	r2, [r4, #656]
1119:boards/TMC5160_eval.c **** 	Pins.REFR_UC         = &HAL.IOs->pins->DIO7;
 4723              		.loc 1 1119 25 view .LVU1415
 4724 1300 03F5A472 		add	r2, r3, #328
 4725              		.loc 1 1119 23 view .LVU1416
 4726 1304 C4F89422 		str	r2, [r4, #660]
1120:boards/TMC5160_eval.c **** 	Pins.SD_MODE         = &HAL.IOs->pins->DIO9;
 4727              		.loc 1 1120 25 view .LVU1417
 4728 1308 03F5C472 		add	r2, r3, #392
 4729              		.loc 1 1120 23 view .LVU1418
 4730 130c C4F8A822 		str	r2, [r4, #680]
1121:boards/TMC5160_eval.c **** 	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
 4731              		.loc 1 1121 25 view .LVU1419
 4732 1310 03F5E472 		add	r2, r3, #456
1114:boards/TMC5160_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
 4733              		.loc 1 1114 25 view .LVU1420
 4734 1314 03F16800 		add	r0, r3, #104
 4735              		.loc 1 1121 23 view .LVU1421
 4736 1318 C4F8AC22 		str	r2, [r4, #684]
1122:boards/TMC5160_eval.c **** 	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
 4737              		.loc 1 1122 25 view .LVU1422
 4738 131c 03F56A72 		add	r2, r3, #936
1123:boards/TMC5160_eval.c **** 	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
 4739              		.loc 1 1123 25 view .LVU1423
 4740 1320 03F57273 		add	r3, r3, #968
 4741              		.loc 1 1123 23 view .LVU1424
 4742 1324 C4F8B032 		str	r3, [r4, #688]
1124:boards/TMC5160_eval.c **** 
1125:boards/TMC5160_eval.c **** 	HAL.IOs->config->toOutput(Pins.DRV_ENN_CFG6);
 4743              		.loc 1 1125 17 view .LVU1425
 4744 1328 2B68     		ldr	r3, [r5]
1122:boards/TMC5160_eval.c **** 	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
 4745              		.loc 1 1122 23 view .LVU1426
 4746 132a C4F8B422 		str	r2, [r4, #692]
 4747              		.loc 1 1125 2 view .LVU1427
 4748 132e DB68     		ldr	r3, [r3, #12]
1114:boards/TMC5160_eval.c **** 	Pins.ENCN_DCO        = &HAL.IOs->pins->DIO1;
 4749              		.loc 1 1114 23 view .LVU1428
 4750 1330 C4F89802 		str	r0, [r4, #664]
1115:boards/TMC5160_eval.c **** 	Pins.ENCA_DCIN_CFG5  = &HAL.IOs->pins->DIO2;
 4751              		.loc 1 1115 2 is_stmt 1 view .LVU1429
1116:boards/TMC5160_eval.c **** 	Pins.ENCB_DCEN_CFG4  = &HAL.IOs->pins->DIO3;
 4752              		.loc 1 1116 2 view .LVU1430
1117:boards/TMC5160_eval.c **** 	Pins.REFL_UC         = &HAL.IOs->pins->DIO6;
 4753              		.loc 1 1117 2 view .LVU1431
1118:boards/TMC5160_eval.c **** 	Pins.REFR_UC         = &HAL.IOs->pins->DIO7;
 4754              		.loc 1 1118 2 view .LVU1432
1119:boards/TMC5160_eval.c **** 	Pins.SD_MODE         = &HAL.IOs->pins->DIO9;
 4755              		.loc 1 1119 2 view .LVU1433
1120:boards/TMC5160_eval.c **** 	Pins.SPI_MODE        = &HAL.IOs->pins->DIO11;
 4756              		.loc 1 1120 2 view .LVU1434
1121:boards/TMC5160_eval.c **** 	Pins.SWP_DIAG1       = &HAL.IOs->pins->DIO15;
 4757              		.loc 1 1121 2 view .LVU1435
1122:boards/TMC5160_eval.c **** 	Pins.SWN_DIAG0       = &HAL.IOs->pins->DIO16;
 4758              		.loc 1 1122 2 view .LVU1436
1123:boards/TMC5160_eval.c **** 
 4759              		.loc 1 1123 2 view .LVU1437
 4760              		.loc 1 1125 2 view .LVU1438
 4761 1334 9847     		blx	r3
 4762              	.LVL574:
1126:boards/TMC5160_eval.c **** 	HAL.IOs->config->toOutput(Pins.SD_MODE);
 4763              		.loc 1 1126 2 view .LVU1439
 4764              		.loc 1 1126 17 is_stmt 0 view .LVU1440
 4765 1336 2B68     		ldr	r3, [r5]
 4766              		.loc 1 1126 2 view .LVU1441
 4767 1338 D4F8A802 		ldr	r0, [r4, #680]
 4768 133c DB68     		ldr	r3, [r3, #12]
 4769 133e 9847     		blx	r3
 4770              	.LVL575:
1127:boards/TMC5160_eval.c **** 	HAL.IOs->config->toOutput(Pins.SPI_MODE);
 4771              		.loc 1 1127 2 is_stmt 1 view .LVU1442
 4772              		.loc 1 1127 17 is_stmt 0 view .LVU1443
 4773 1340 2B68     		ldr	r3, [r5]
 4774              		.loc 1 1127 2 view .LVU1444
 4775 1342 D4F8AC02 		ldr	r0, [r4, #684]
 4776 1346 DB68     		ldr	r3, [r3, #12]
 4777 1348 9847     		blx	r3
 4778              	.LVL576:
1128:boards/TMC5160_eval.c **** 
1129:boards/TMC5160_eval.c **** 	HAL.IOs->config->setHigh(Pins.DRV_ENN_CFG6);
 4779              		.loc 1 1129 2 is_stmt 1 view .LVU1445
 4780              		.loc 1 1129 17 is_stmt 0 view .LVU1446
 4781 134a 2B68     		ldr	r3, [r5]
 4782              		.loc 1 1129 2 view .LVU1447
 4783 134c D4F89802 		ldr	r0, [r4, #664]
 4784 1350 5B69     		ldr	r3, [r3, #20]
 4785 1352 9847     		blx	r3
 4786              	.LVL577:
1130:boards/TMC5160_eval.c **** 	HAL.IOs->config->setLow(Pins.SD_MODE);
 4787              		.loc 1 1130 2 is_stmt 1 view .LVU1448
 4788              		.loc 1 1130 17 is_stmt 0 view .LVU1449
 4789 1354 2B68     		ldr	r3, [r5]
 4790              		.loc 1 1130 2 view .LVU1450
 4791 1356 D4F8A802 		ldr	r0, [r4, #680]
 4792 135a 9B69     		ldr	r3, [r3, #24]
 4793 135c 9847     		blx	r3
 4794              	.LVL578:
1131:boards/TMC5160_eval.c **** 	HAL.IOs->config->setHigh(Pins.SPI_MODE);
 4795              		.loc 1 1131 2 is_stmt 1 view .LVU1451
 4796              		.loc 1 1131 17 is_stmt 0 view .LVU1452
 4797 135e 2B68     		ldr	r3, [r5]
 4798              		.loc 1 1131 2 view .LVU1453
 4799 1360 D4F8AC02 		ldr	r0, [r4, #684]
 4800 1364 5B69     		ldr	r3, [r3, #20]
 4801 1366 9847     		blx	r3
 4802              	.LVL579:
1132:boards/TMC5160_eval.c **** 
1133:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.ENCN_DCO);
 4803              		.loc 1 1133 2 is_stmt 1 view .LVU1454
 4804              		.loc 1 1133 17 is_stmt 0 view .LVU1455
 4805 1368 2B68     		ldr	r3, [r5]
 4806              		.loc 1 1133 2 view .LVU1456
 4807 136a D4F8A402 		ldr	r0, [r4, #676]
 4808 136e 1B69     		ldr	r3, [r3, #16]
 4809 1370 9847     		blx	r3
 4810              	.LVL580:
1134:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.ENCB_DCEN_CFG4);
 4811              		.loc 1 1134 2 is_stmt 1 view .LVU1457
 4812              		.loc 1 1134 17 is_stmt 0 view .LVU1458
 4813 1372 2B68     		ldr	r3, [r5]
 4814              		.loc 1 1134 2 view .LVU1459
 4815 1374 D4F8A002 		ldr	r0, [r4, #672]
 4816 1378 1B69     		ldr	r3, [r3, #16]
 4817 137a 9847     		blx	r3
 4818              	.LVL581:
1135:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.ENCA_DCIN_CFG5);
 4819              		.loc 1 1135 2 is_stmt 1 view .LVU1460
 4820              		.loc 1 1135 17 is_stmt 0 view .LVU1461
 4821 137c 2B68     		ldr	r3, [r5]
 4822              		.loc 1 1135 2 view .LVU1462
 4823 137e D4F89C02 		ldr	r0, [r4, #668]
 4824 1382 1B69     		ldr	r3, [r3, #16]
 4825 1384 9847     		blx	r3
 4826              	.LVL582:
1136:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.SWN_DIAG0);
 4827              		.loc 1 1136 2 is_stmt 1 view .LVU1463
 4828              		.loc 1 1136 17 is_stmt 0 view .LVU1464
 4829 1386 2B68     		ldr	r3, [r5]
 4830              		.loc 1 1136 2 view .LVU1465
 4831 1388 D4F8B002 		ldr	r0, [r4, #688]
 4832 138c 1B69     		ldr	r3, [r3, #16]
 4833 138e 9847     		blx	r3
 4834              	.LVL583:
1137:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.SWP_DIAG1);
 4835              		.loc 1 1137 2 is_stmt 1 view .LVU1466
 4836              		.loc 1 1137 17 is_stmt 0 view .LVU1467
 4837 1390 2B68     		ldr	r3, [r5]
 4838              		.loc 1 1137 2 view .LVU1468
 4839 1392 D4F8B402 		ldr	r0, [r4, #692]
 4840 1396 1B69     		ldr	r3, [r3, #16]
 4841 1398 9847     		blx	r3
 4842              	.LVL584:
1138:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFL_UC);
 4843              		.loc 1 1138 2 is_stmt 1 view .LVU1469
 4844              		.loc 1 1138 17 is_stmt 0 view .LVU1470
 4845 139a 2B68     		ldr	r3, [r5]
 4846              		.loc 1 1138 2 view .LVU1471
 4847 139c D4F89002 		ldr	r0, [r4, #656]
 4848 13a0 1B69     		ldr	r3, [r3, #16]
 4849 13a2 9847     		blx	r3
 4850              	.LVL585:
1139:boards/TMC5160_eval.c **** 	HAL.IOs->config->toInput(Pins.REFR_UC);
 4851              		.loc 1 1139 2 is_stmt 1 view .LVU1472
 4852              		.loc 1 1139 17 is_stmt 0 view .LVU1473
 4853 13a4 2B68     		ldr	r3, [r5]
 4854              		.loc 1 1139 2 view .LVU1474
 4855 13a6 D4F89402 		ldr	r0, [r4, #660]
 4856 13aa 1B69     		ldr	r3, [r3, #16]
 4857 13ac 9847     		blx	r3
 4858              	.LVL586:
1140:boards/TMC5160_eval.c **** 
1141:boards/TMC5160_eval.c **** 	// Disable CLK output -> use internal 12 MHz clock
1142:boards/TMC5160_eval.c **** 	// Switchable via user function
1143:boards/TMC5160_eval.c **** //	HAL.IOs->config->toOutput(&HAL.IOs->pins->CLK16);
1144:boards/TMC5160_eval.c **** //	HAL.IOs->config->setLow(&HAL.IOs->pins->CLK16);
1145:boards/TMC5160_eval.c **** 
1146:boards/TMC5160_eval.c **** 	init_comm((uart_mode) ? TMC_COMM_UART : TMC_COMM_SPI);
 4859              		.loc 1 1146 2 is_stmt 1 view .LVU1475
 4860 13ae 94F8C502 		ldrb	r0, [r4, #709]	@ zero_extendqisi2
 4861 13b2 FEF709FF 		bl	init_comm
 4862              	.LVL587:
1147:boards/TMC5160_eval.c **** 
1148:boards/TMC5160_eval.c **** 	TMC5160_config = Evalboards.ch1.config;
 4863              		.loc 1 1148 2 view .LVU1476
 4864              		.loc 1 1148 33 is_stmt 0 view .LVU1477
 4865 13b6 1D4B     		ldr	r3, .L298+8
1149:boards/TMC5160_eval.c **** 
1150:boards/TMC5160_eval.c **** 	Evalboards.ch1.config->reset        = reset;
 4866              		.loc 1 1150 38 view .LVU1478
 4867 13b8 1D49     		ldr	r1, .L298+12
1148:boards/TMC5160_eval.c **** 
 4868              		.loc 1 1148 33 view .LVU1479
 4869 13ba 9A69     		ldr	r2, [r3, #24]
1148:boards/TMC5160_eval.c **** 
 4870              		.loc 1 1148 17 view .LVU1480
 4871 13bc C4F8B822 		str	r2, [r4, #696]
 4872              		.loc 1 1150 2 is_stmt 1 view .LVU1481
 4873              		.loc 1 1150 38 is_stmt 0 view .LVU1482
 4874 13c0 C2F80412 		str	r1, [r2, #516]
1151:boards/TMC5160_eval.c **** 	Evalboards.ch1.config->restore      = restore;
 4875              		.loc 1 1151 2 is_stmt 1 view .LVU1483
 4876              		.loc 1 1151 38 is_stmt 0 view .LVU1484
 4877 13c4 1B49     		ldr	r1, .L298+16
 4878 13c6 C2F80812 		str	r1, [r2, #520]
1152:boards/TMC5160_eval.c **** 	Evalboards.ch1.config->state        = CONFIG_RESET;
 4879              		.loc 1 1152 2 is_stmt 1 view .LVU1485
1153:boards/TMC5160_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 4880              		.loc 1 1153 2 view .LVU1486
1152:boards/TMC5160_eval.c **** 	Evalboards.ch1.config->state        = CONFIG_RESET;
 4881              		.loc 1 1152 38 is_stmt 0 view .LVU1487
 4882 13ca 0121     		movs	r1, #1
 4883 13cc 1180     		strh	r1, [r2]	@ movhi
1154:boards/TMC5160_eval.c **** 
1155:boards/TMC5160_eval.c **** 	Evalboards.ch1.rotate               = rotate;
 4884              		.loc 1 1155 2 is_stmt 1 view .LVU1488
 4885              		.loc 1 1155 38 is_stmt 0 view .LVU1489
 4886 13ce 1A4A     		ldr	r2, .L298+20
 4887 13d0 5A62     		str	r2, [r3, #36]
1156:boards/TMC5160_eval.c **** 	Evalboards.ch1.right                = right;
 4888              		.loc 1 1156 2 is_stmt 1 view .LVU1490
 4889              		.loc 1 1156 38 is_stmt 0 view .LVU1491
 4890 13d2 1A4A     		ldr	r2, .L298+24
 4891 13d4 1A62     		str	r2, [r3, #32]
1157:boards/TMC5160_eval.c **** 	Evalboards.ch1.left                 = left;
 4892              		.loc 1 1157 2 is_stmt 1 view .LVU1492
 4893              		.loc 1 1157 38 is_stmt 0 view .LVU1493
 4894 13d6 1A4A     		ldr	r2, .L298+28
 4895 13d8 DA61     		str	r2, [r3, #28]
1158:boards/TMC5160_eval.c **** 	Evalboards.ch1.stop                 = stop;
 4896              		.loc 1 1158 2 is_stmt 1 view .LVU1494
 4897              		.loc 1 1158 38 is_stmt 0 view .LVU1495
 4898 13da 1A4A     		ldr	r2, .L298+32
 4899 13dc 9A62     		str	r2, [r3, #40]
1159:boards/TMC5160_eval.c **** 	Evalboards.ch1.GAP                  = GAP;
 4900              		.loc 1 1159 2 is_stmt 1 view .LVU1496
 4901              		.loc 1 1159 38 is_stmt 0 view .LVU1497
 4902 13de 1A4A     		ldr	r2, .L298+36
 4903 13e0 DA63     		str	r2, [r3, #60]
1160:boards/TMC5160_eval.c **** 	Evalboards.ch1.SAP                  = SAP;
 4904              		.loc 1 1160 2 is_stmt 1 view .LVU1498
 4905              		.loc 1 1160 38 is_stmt 0 view .LVU1499
 4906 13e2 1A4A     		ldr	r2, .L298+40
 4907 13e4 9A63     		str	r2, [r3, #56]
1161:boards/TMC5160_eval.c **** 	Evalboards.ch1.moveTo               = moveTo;
 4908              		.loc 1 1161 2 is_stmt 1 view .LVU1500
 4909              		.loc 1 1161 38 is_stmt 0 view .LVU1501
 4910 13e6 1A4A     		ldr	r2, .L298+44
 4911 13e8 DA62     		str	r2, [r3, #44]
1162:boards/TMC5160_eval.c **** 	Evalboards.ch1.moveBy               = moveBy;
 4912              		.loc 1 1162 2 is_stmt 1 view .LVU1502
 4913              		.loc 1 1162 38 is_stmt 0 view .LVU1503
 4914 13ea 1A4A     		ldr	r2, .L298+48
 4915 13ec 1A63     		str	r2, [r3, #48]
1163:boards/TMC5160_eval.c **** 	Evalboards.ch1.writeRegister        = writeRegister;
 4916              		.loc 1 1163 2 is_stmt 1 view .LVU1504
 4917              		.loc 1 1163 38 is_stmt 0 view .LVU1505
 4918 13ee 1A4A     		ldr	r2, .L298+52
 4919 13f0 DA64     		str	r2, [r3, #76]
1164:boards/TMC5160_eval.c **** 	Evalboards.ch1.readRegister         = readRegister;
 4920              		.loc 1 1164 2 is_stmt 1 view .LVU1506
 4921              		.loc 1 1164 38 is_stmt 0 view .LVU1507
 4922 13f2 1A4A     		ldr	r2, .L298+56
 4923 13f4 9A64     		str	r2, [r3, #72]
1165:boards/TMC5160_eval.c **** 	Evalboards.ch1.periodicJob          = periodicJob;
 4924              		.loc 1 1165 2 is_stmt 1 view .LVU1508
 4925              		.loc 1 1165 38 is_stmt 0 view .LVU1509
 4926 13f6 1A4A     		ldr	r2, .L298+60
 4927 13f8 9A65     		str	r2, [r3, #88]
1166:boards/TMC5160_eval.c **** 	Evalboards.ch1.userFunction         = userFunction;
 4928              		.loc 1 1166 2 is_stmt 1 view .LVU1510
 4929              		.loc 1 1166 38 is_stmt 0 view .LVU1511
 4930 13fa 1A4A     		ldr	r2, .L298+64
 4931 13fc 5A65     		str	r2, [r3, #84]
1167:boards/TMC5160_eval.c **** 	Evalboards.ch1.getMeasuredSpeed     = getMeasuredSpeed;
 4932              		.loc 1 1167 2 is_stmt 1 view .LVU1512
 4933              		.loc 1 1167 38 is_stmt 0 view .LVU1513
 4934 13fe 1A4A     		ldr	r2, .L298+68
 4935 1400 1A65     		str	r2, [r3, #80]
1168:boards/TMC5160_eval.c **** 	Evalboards.ch1.enableDriver         = enableDriver;
 4936              		.loc 1 1168 2 is_stmt 1 view .LVU1514
 4937              		.loc 1 1168 38 is_stmt 0 view .LVU1515
 4938 1402 1A4A     		ldr	r2, .L298+72
 4939 1404 5A66     		str	r2, [r3, #100]
1169:boards/TMC5160_eval.c **** 	Evalboards.ch1.checkErrors          = checkErrors;
 4940              		.loc 1 1169 2 is_stmt 1 view .LVU1516
 4941              		.loc 1 1169 38 is_stmt 0 view .LVU1517
 4942 1406 1A4A     		ldr	r2, .L298+76
 4943 1408 1A66     		str	r2, [r3, #96]
1170:boards/TMC5160_eval.c **** 	Evalboards.ch1.numberOfMotors       = TMC5160_MOTORS;
 4944              		.loc 1 1170 2 is_stmt 1 view .LVU1518
 4945              		.loc 1 1170 38 is_stmt 0 view .LVU1519
 4946 140a 1975     		strb	r1, [r3, #20]
1171:boards/TMC5160_eval.c **** 	Evalboards.ch1.VMMin                = VM_MIN;
 4947              		.loc 1 1171 2 is_stmt 1 view .LVU1520
1172:boards/TMC5160_eval.c **** 	Evalboards.ch1.VMMax                = VM_MAX;
 4948              		.loc 1 1172 38 is_stmt 0 view .LVU1521
 4949 140c 4FF42572 		mov	r2, #660
 4950 1410 3221     		movs	r1, #50
 4951 1412 C3E90321 		strd	r2, r1, [r3, #12]
1173:boards/TMC5160_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4952              		.loc 1 1173 2 is_stmt 1 view .LVU1522
 4953              		.loc 1 1173 38 is_stmt 0 view .LVU1523
 4954 1416 174A     		ldr	r2, .L298+80
 4955 1418 DA65     		str	r2, [r3, #92]
1174:boards/TMC5160_eval.c **** 
1175:boards/TMC5160_eval.c **** 	enableDriver(DRIVER_USE_GLOBAL_ENABLE);
 4956              		.loc 1 1175 2 is_stmt 1 view .LVU1524
 4957 141a 0220     		movs	r0, #2
1176:boards/TMC5160_eval.c **** };
 4958              		.loc 1 1176 1 is_stmt 0 view .LVU1525
 4959 141c BDE83840 		pop	{r3, r4, r5, lr}
 4960              	.LCFI27:
 4961              		.cfi_restore 14
 4962              		.cfi_restore 5
 4963              		.cfi_restore 4
 4964              		.cfi_restore 3
 4965              		.cfi_def_cfa_offset 0
1175:boards/TMC5160_eval.c **** };
 4966              		.loc 1 1175 2 view .LVU1526
 4967 1420 FEF7B0BE 		b	enableDriver
 4968              	.LVL588:
 4969              	.L299:
 4970              		.align	2
 4971              	.L298:
 4972 1424 00000000 		.word	.LANCHOR0
 4973 1428 00000000 		.word	HAL
 4974 142c 00000000 		.word	Evalboards
 4975 1430 00000000 		.word	reset
 4976 1434 00000000 		.word	restore
 4977 1438 00000000 		.word	rotate
 4978 143c 00000000 		.word	right
 4979 1440 00000000 		.word	left
 4980 1444 00000000 		.word	stop
 4981 1448 00000000 		.word	GAP
 4982 144c 00000000 		.word	SAP
 4983 1450 00000000 		.word	moveTo
 4984 1454 00000000 		.word	moveBy
 4985 1458 00000000 		.word	writeRegister
 4986 145c 00000000 		.word	readRegister
 4987 1460 00000000 		.word	periodicJob
 4988 1464 00000000 		.word	userFunction
 4989 1468 00000000 		.word	getMeasuredSpeed
 4990 146c 00000000 		.word	enableDriver
 4991 1470 00000000 		.word	checkErrors
 4992 1474 00000000 		.word	deInit
 4993              		.cfi_endproc
 4994              	.LFE28:
 4996              		.comm	TMCMotionController,532,4
 4997              		.comm	TMCDriver,532,4
 4998              		.comm	Evalboards,244,4
 4999              		.comm	VitalSignsMonitor,20,4
 5000              		.comm	hwid,1,1
 5001              		.comm	HAL,48,4
 5002              		.comm	UART,40,4
 5003              		.comm	Timer,16,4
 5004              		.comm	WLAN,36,4
 5005              		.comm	RS232,36,4
 5006              		.comm	LEDs,28,4
 5007              		.comm	USB,36,4
 5008              		.comm	uart0_interrupt,1,1
 5009              		.comm	ADCs,32,4
 5010              		.comm	SPI,44,4
 5011              		.comm	IOMap,2088,4
 5012              		.comm	IOs,52,4
 5013              		.comm	Cpu,8,4
 5014              		.bss
 5015              		.align	2
 5016              		.set	.LANCHOR0,. + 0
 5019              	TMC5160:
 5020 0000 00000000 		.space	656
 5020      00000000 
 5020      00000000 
 5020      00000000 
 5020      00000000 
 5023              	Pins:
 5024 0290 00000000 		.space	40
 5024      00000000 
 5024      00000000 
 5024      00000000 
 5024      00000000 
 5027              	TMC5160_config:
 5028 02b8 00000000 		.space	4
 5031              	TMC5160_SPIChannel:
 5032 02bc 00000000 		.space	4
 5035              	TMC5160_UARTChannel:
 5036 02c0 00000000 		.space	4
 5039              	old.7815:
 5040 02c4 00       		.space	1
 5043              	uart_mode:
 5044 02c5 00       		.space	1
 5047              	vMaxModified:
 5048 02c6 00       		.space	1
 5049 02c7 00       		.space	1
 5052              	ADCValue:
 5053 02c8 00000000 		.space	12
 5053      00000000 
 5053      00000000 
 5054              		.text
 5055              	.Letext0:
 5056              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 5057              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 5058              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 5059              		.file 5 "TMC-API/tmc/helpers/Types.h"
 5060              		.file 6 "TMC-API/tmc/helpers/Config.h"
 5061              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 5062              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 5063              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 5064              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 5065              		.file 11 "TMC-API/tmc/helpers/API_Header.h"
 5066              		.file 12 "hal/Landungsbruecke/freescale/MK20D10.h"
 5067              		.file 13 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 5068              		.file 14 "./hal/Landungsbruecke/freescale/Cpu.h"
 5069              		.file 15 "./hal/IOs.h"
 5070              		.file 16 "./hal/IOMap.h"
 5071              		.file 17 "./hal/SPI.h"
 5072              		.file 18 "./hal/ADCs.h"
 5073              		.file 19 "./hal/RXTX.h"
 5074              		.file 20 "./hal/USB.h"
 5075              		.file 21 "./hal/LEDs.h"
 5076              		.file 22 "./hal/RS232.h"
 5077              		.file 23 "./hal/WLAN.h"
 5078              		.file 24 "./hal/Timer.h"
 5079              		.file 25 "./hal/UART.h"
 5080              		.file 26 "./hal/HAL.h"
 5081              		.file 27 "./tmc/VitalSignsMonitor.h"
 5082              		.file 28 "boards/Board.h"
 5083              		.file 29 "boards/TMCDriver.h"
 5084              		.file 30 "boards/TMCMotionController.h"
 5085              		.file 31 "TMC-API/tmc/ic/TMC5160/TMC5160.h"
 5086              		.file 32 "TMC-API/tmc/helpers/CRC.h"
 5087              		.file 33 "./hal/SysTick.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC5160_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:22     .text:00000000 getMeasuredSpeed
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:52     .text:00000010 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:56     .text:00000014 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:62     .text:00000014 checkErrors
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:81     .text:0000001c $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:85     .text:00000020 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:91     .text:00000020 deInit
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:227    .text:000000b0 $d
                            *COM*:00000030 HAL
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:232    .text:000000b8 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:238    .text:000000b8 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:267    .text:000000c8 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:272    .text:000000cc $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:278    .text:000000cc restore
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:294    .text:000000d8 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:298    .text:000000dc $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:304    .text:000000dc readInt_spi.isra.0
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:464    .text:00000180 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:468    .text:00000184 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:474    .text:00000184 enableDriver
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:550    .text:000001bc $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:556    .text:000001c8 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:562    .text:000001c8 init_comm
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:650    .text:0000020c $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:655    .text:00000214 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:661    .text:00000214 userFunction
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:693    .text:00000226 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:703    .text:00000230 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1053   .text:000003a4 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1058   .text:000003ac $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1064   .text:000003ac readInt_uart.isra.0
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1223   .text:00000460 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1227   .text:00000464 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1233   .text:00000464 tmc5160_readInt.constprop.0
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1261   .text:00000470 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1265   .text:00000474 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1271   .text:00000474 reset
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1326   .text:000004a4 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1331   .text:000004ac $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1337   .text:000004ac readRegister
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1375   .text:000004ba tmc5160_writeDatagram
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1613   .text:000005a4 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1617   .text:000005a8 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1624   .text:000005a8 tmc5160_writeInt
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1663   .text:000005c4 writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1688   .text:000005ca moveTo
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1769   .text:00000614 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1773   .text:00000618 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1779   .text:00000618 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1833   .text:00000632 rotate
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1908   .text:00000674 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1912   .text:00000678 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1918   .text:00000678 stop
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1941   .text:0000067c left
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1966   .text:00000680 right
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:1988   .text:00000682 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2022   .text:0000069c $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2057   .text:000006e2 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2067   .text:000006ee $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2139   .text:0000077c $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2968   .text:00000ab0 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:2974   .text:00000ab8 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:3173   .text:00000bb4 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:3181   .text:00000bbc $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:3638   .text:00000df4 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:3643   .text:00000df8 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4557   .text:00001298 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4561   .text:0000129c $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4567   .text:0000129c SAP
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4607   .text:000012b0 GAP
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4638   .text:000012ba tmc5160_readInt
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4670   .text:000012cc $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4674   .text:000012d0 $t
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4681   .text:000012d0 TMC5160_init
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:4972   .text:00001424 $d
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000014 VitalSignsMonitor
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000010 Timer
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5015   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5019   .bss:00000000 TMC5160
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5023   .bss:00000290 Pins
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5027   .bss:000002b8 TMC5160_config
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5031   .bss:000002bc TMC5160_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5035   .bss:000002c0 TMC5160_UARTChannel
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5039   .bss:000002c4 old.7815
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5043   .bss:000002c5 uart_mode
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5047   .bss:000002c6 vMaxModified
C:\Users\Shubham\AppData\Local\Temp\ccBQhLJw.s:5052   .bss:000002c8 ADCValue

UNDEFINED SYMBOLS
tmc5160_periodicJob
tmc5160_restore
tmc_CRC8
systick_getTick
timeSince
tmc5160_reset
wait
tmc5160_initConfig
