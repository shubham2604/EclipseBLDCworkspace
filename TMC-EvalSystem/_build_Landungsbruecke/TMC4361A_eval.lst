   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"TMC4361A_eval.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.arch armv7e-m
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	checkErrors:
  23              	.LVL0:
  24              	.LFB18:
  25              		.file 1 "boards/TMC4361A_eval.c"
   1:boards/TMC4361A_eval.c **** #include "Board.h"
   2:boards/TMC4361A_eval.c **** #include "tmc/BoardAssignment.h"
   3:boards/TMC4361A_eval.c **** #include "tmc/ic/TMC4361A/TMC4361A.h"
   4:boards/TMC4361A_eval.c **** #include "tmc/ic/TMC2660/TMC2660_Macros.h"
   5:boards/TMC4361A_eval.c **** #include "tmc/ic/TMC2130/TMC2130.h"
   6:boards/TMC4361A_eval.c **** #include "tmc/ic/TMC2160/TMC2160.h"
   7:boards/TMC4361A_eval.c **** 
   8:boards/TMC4361A_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity);
   9:boards/TMC4361A_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity);
  10:boards/TMC4361A_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity);
  11:boards/TMC4361A_eval.c **** static uint32_t stop(uint8_t motor);
  12:boards/TMC4361A_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position);
  13:boards/TMC4361A_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks);
  14:boards/TMC4361A_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value);
  15:boards/TMC4361A_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value);
  16:boards/TMC4361A_eval.c **** 
  17:boards/TMC4361A_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value);
  18:boards/TMC4361A_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value);
  19:boards/TMC4361A_eval.c **** 
  20:boards/TMC4361A_eval.c **** static void periodicJob(uint32_t tick);
  21:boards/TMC4361A_eval.c **** static void checkErrors(uint32_t tick);
  22:boards/TMC4361A_eval.c **** static void deInit(void);
  23:boards/TMC4361A_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value);
  24:boards/TMC4361A_eval.c **** static uint8_t reset();
  25:boards/TMC4361A_eval.c **** static uint8_t restore();
  26:boards/TMC4361A_eval.c **** 
  27:boards/TMC4361A_eval.c **** typedef struct
  28:boards/TMC4361A_eval.c **** {
  29:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *TARGET_REACHED;
  30:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *NRST;
  31:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *FREEZE;
  32:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *START;
  33:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *HOME_REF;
  34:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *STOP_R;
  35:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *STOP_L;
  36:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *INTR;
  37:boards/TMC4361A_eval.c **** 	IOPinTypeDef  *STANDBY_CLK;
  38:boards/TMC4361A_eval.c **** } PinsTypeDef;
  39:boards/TMC4361A_eval.c **** 
  40:boards/TMC4361A_eval.c **** static PinsTypeDef Pins;
  41:boards/TMC4361A_eval.c **** 
  42:boards/TMC4361A_eval.c **** static SPIChannelTypeDef *TMC4361A_SPIChannel;
  43:boards/TMC4361A_eval.c **** static TMC4361ATypeDef TMC4361A;
  44:boards/TMC4361A_eval.c **** 
  45:boards/TMC4361A_eval.c **** static uint32_t vmax_position = 0;
  46:boards/TMC4361A_eval.c **** 
  47:boards/TMC4361A_eval.c **** // Translate motor number to TMC4361ATypeDef
  48:boards/TMC4361A_eval.c **** // When using multiple ICs you can map them here
  49:boards/TMC4361A_eval.c **** static inline TMC4361ATypeDef *motorToIC(uint8_t motor)
  50:boards/TMC4361A_eval.c **** {
  51:boards/TMC4361A_eval.c **** 	UNUSED(motor);
  52:boards/TMC4361A_eval.c **** 
  53:boards/TMC4361A_eval.c **** 	return &TMC4361A;
  54:boards/TMC4361A_eval.c **** }
  55:boards/TMC4361A_eval.c **** 
  56:boards/TMC4361A_eval.c **** // Translate channel number to SPI channel
  57:boards/TMC4361A_eval.c **** // When using multiple ICs you can map them here
  58:boards/TMC4361A_eval.c **** static inline SPIChannelTypeDef *channelToSPI(uint8_t channel)
  59:boards/TMC4361A_eval.c **** {
  60:boards/TMC4361A_eval.c **** 	UNUSED(channel);
  61:boards/TMC4361A_eval.c **** 
  62:boards/TMC4361A_eval.c **** 	return TMC4361A_SPIChannel;
  63:boards/TMC4361A_eval.c **** }
  64:boards/TMC4361A_eval.c **** 
  65:boards/TMC4361A_eval.c **** // => SPI Wrapper
  66:boards/TMC4361A_eval.c **** void tmc4361A_readWriteArray(uint8_t channel, uint8_t *data, size_t length)
  67:boards/TMC4361A_eval.c **** {
  68:boards/TMC4361A_eval.c **** 	channelToSPI(channel)->readWriteArray(data, length);
  69:boards/TMC4361A_eval.c **** }
  70:boards/TMC4361A_eval.c **** // <= SPI Wrapper
  71:boards/TMC4361A_eval.c **** 
  72:boards/TMC4361A_eval.c **** // Route the generic cover function to the TMC4361A function
  73:boards/TMC4361A_eval.c **** // This also provides the TMC4361ATypeDef, which the generic
  74:boards/TMC4361A_eval.c **** // cover function doesn't know.
  75:boards/TMC4361A_eval.c **** static void tmc4361A_fullCover(uint8_t *data, size_t length)
  76:boards/TMC4361A_eval.c **** {
  77:boards/TMC4361A_eval.c **** 	tmc4361A_readWriteCover(&TMC4361A, data, length);
  78:boards/TMC4361A_eval.c **** }
  79:boards/TMC4361A_eval.c **** 
  80:boards/TMC4361A_eval.c **** // The cover function emulates the SPI readWrite function
  81:boards/TMC4361A_eval.c **** static uint8_t tmc4361A_cover(uint8_t data, uint8_t lastTransfer)
  82:boards/TMC4361A_eval.c **** {
  83:boards/TMC4361A_eval.c **** 	static uint64_t coverIn = 0;     // read from squirrel
  84:boards/TMC4361A_eval.c **** 	static uint64_t coverOut = 0;    // write to squirrel
  85:boards/TMC4361A_eval.c **** 	static uint8_t coverLength = 0;  // data to be written
  86:boards/TMC4361A_eval.c **** 
  87:boards/TMC4361A_eval.c **** 	uint8_t out = 0; // return value of this function
  88:boards/TMC4361A_eval.c **** 
  89:boards/TMC4361A_eval.c **** 	// buffer outgoing data
  90:boards/TMC4361A_eval.c **** 	coverOut <<= 8;    // shift left by one byte to make room for the next byte
  91:boards/TMC4361A_eval.c **** 	coverOut |= data;  // add new byte to be written
  92:boards/TMC4361A_eval.c **** 	coverLength++;     // count outgoing bytes
  93:boards/TMC4361A_eval.c **** 
  94:boards/TMC4361A_eval.c **** 	// return read and buffered byte to be returned
  95:boards/TMC4361A_eval.c **** 	out = coverIn >> 56;  // output last received byte
  96:boards/TMC4361A_eval.c **** 	coverIn <<= 8;        // shift by one byte to read this next time
  97:boards/TMC4361A_eval.c **** 
  98:boards/TMC4361A_eval.c **** 	if(lastTransfer)
  99:boards/TMC4361A_eval.c **** 	{
 100:boards/TMC4361A_eval.c **** 		/* Write data to cover register(s). The lower 4 bytes go into the cover low register,
 101:boards/TMC4361A_eval.c **** 		 * the higher 4 bytes, if present, go into the cover high register.
 102:boards/TMC4361A_eval.c **** 		 * The datagram needs to be sent twice, otherwise the read buffer will be delayed by
 103:boards/TMC4361A_eval.c **** 		 * one read/write datagram.
 104:boards/TMC4361A_eval.c **** 		 */
 105:boards/TMC4361A_eval.c **** 
 106:boards/TMC4361A_eval.c **** 		// Send the buffered datagram & wait a bit before continuing so the 4361 can complete the datagra
 107:boards/TMC4361A_eval.c **** 		// measured delay between COVER_LOW transmission and COVER_DONE flag: ~90Âµs -> 1 ms more than en
 108:boards/TMC4361A_eval.c **** 		// todo CHECK 3: Delay measurement only done on TMC4361, not 4361A - make sure the required delay
 109:boards/TMC4361A_eval.c **** 		if(coverLength > 4)
 110:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_HIGH_WR, coverOut >> 32);
 111:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
 112:boards/TMC4361A_eval.c **** 		wait(1);
 113:boards/TMC4361A_eval.c **** 
 114:boards/TMC4361A_eval.c **** 		// Trigger a re-send by writing the low register again
 115:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
 116:boards/TMC4361A_eval.c **** 
 117:boards/TMC4361A_eval.c **** 		// Read the reply
 118:boards/TMC4361A_eval.c **** 		coverIn = 0;
 119:boards/TMC4361A_eval.c **** 		if(coverLength > 4)
 120:boards/TMC4361A_eval.c **** 			coverIn |= (uint64_t) tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_HIGH_RD) << 32;
 121:boards/TMC4361A_eval.c **** 		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
 122:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 123:boards/TMC4361A_eval.c **** 
 124:boards/TMC4361A_eval.c **** 		// Clear write buffer
 125:boards/TMC4361A_eval.c **** 		coverOut = 0;
 126:boards/TMC4361A_eval.c **** 		coverLength=0;
 127:boards/TMC4361A_eval.c **** 	}
 128:boards/TMC4361A_eval.c **** 
 129:boards/TMC4361A_eval.c **** 	return out; // return buffered read byte
 130:boards/TMC4361A_eval.c **** }
 131:boards/TMC4361A_eval.c **** 
 132:boards/TMC4361A_eval.c **** // => Functions forwarded to API
 133:boards/TMC4361A_eval.c **** static uint32_t rotate(uint8_t motor, int32_t velocity)
 134:boards/TMC4361A_eval.c **** {
 135:boards/TMC4361A_eval.c **** 	UNUSED(motor);
 136:boards/TMC4361A_eval.c **** 	tmc4361A_rotate(motorToIC(motor), velocity);
 137:boards/TMC4361A_eval.c **** 
 138:boards/TMC4361A_eval.c **** 	return 0;
 139:boards/TMC4361A_eval.c **** }
 140:boards/TMC4361A_eval.c **** 
 141:boards/TMC4361A_eval.c **** static uint32_t right(uint8_t motor, int32_t velocity)
 142:boards/TMC4361A_eval.c **** {
 143:boards/TMC4361A_eval.c **** 	rotate(motor, velocity);
 144:boards/TMC4361A_eval.c **** 
 145:boards/TMC4361A_eval.c **** 	return 0;
 146:boards/TMC4361A_eval.c **** }
 147:boards/TMC4361A_eval.c **** 
 148:boards/TMC4361A_eval.c **** static uint32_t left(uint8_t motor, int32_t velocity)
 149:boards/TMC4361A_eval.c **** {
 150:boards/TMC4361A_eval.c **** 	rotate(motor, -velocity);
 151:boards/TMC4361A_eval.c **** 
 152:boards/TMC4361A_eval.c **** 	return 0;
 153:boards/TMC4361A_eval.c **** }
 154:boards/TMC4361A_eval.c **** 
 155:boards/TMC4361A_eval.c **** static uint32_t stop(uint8_t motor)
 156:boards/TMC4361A_eval.c **** {
 157:boards/TMC4361A_eval.c **** 	rotate(motor, 0);
 158:boards/TMC4361A_eval.c **** 
 159:boards/TMC4361A_eval.c **** 	return 0;
 160:boards/TMC4361A_eval.c **** }
 161:boards/TMC4361A_eval.c **** 
 162:boards/TMC4361A_eval.c **** static uint32_t moveTo(uint8_t motor, int32_t position)
 163:boards/TMC4361A_eval.c **** {
 164:boards/TMC4361A_eval.c **** 	tmc4361A_moveTo(motorToIC(motor), position, vmax_position);
 165:boards/TMC4361A_eval.c **** 
 166:boards/TMC4361A_eval.c **** 	return 0;
 167:boards/TMC4361A_eval.c **** }
 168:boards/TMC4361A_eval.c **** 
 169:boards/TMC4361A_eval.c **** static uint32_t moveBy(uint8_t motor, int32_t *ticks)
 170:boards/TMC4361A_eval.c **** {
 171:boards/TMC4361A_eval.c **** 	tmc4361A_moveBy(motorToIC(motor), ticks, vmax_position);
 172:boards/TMC4361A_eval.c **** 
 173:boards/TMC4361A_eval.c **** 	return 0;
 174:boards/TMC4361A_eval.c **** }
 175:boards/TMC4361A_eval.c **** // <= Functions forwarded to API
 176:boards/TMC4361A_eval.c **** 
 177:boards/TMC4361A_eval.c **** static uint32_t handleParameter(uint8_t readWrite, uint8_t motor, uint8_t type, int32_t *value)
 178:boards/TMC4361A_eval.c **** {
 179:boards/TMC4361A_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 180:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 181:boards/TMC4361A_eval.c **** 
 182:boards/TMC4361A_eval.c **** 	if(motor >= TMC4361A_MOTORS)
 183:boards/TMC4361A_eval.c **** 		return TMC_ERROR_MOTOR;
 184:boards/TMC4361A_eval.c **** 
 185:boards/TMC4361A_eval.c **** 	switch(type)
 186:boards/TMC4361A_eval.c **** 	{
 187:boards/TMC4361A_eval.c **** 	case 0:
 188:boards/TMC4361A_eval.c **** 		// Target position
 189:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 190:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_X_TARGET);
 191:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 192:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_X_TARGET, *value);
 193:boards/TMC4361A_eval.c **** 		}
 194:boards/TMC4361A_eval.c **** 		break;
 195:boards/TMC4361A_eval.c **** 	case 1:
 196:boards/TMC4361A_eval.c **** 		// Actual position
 197:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 198:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_XACTUAL);
 199:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 200:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_XACTUAL, *value);
 201:boards/TMC4361A_eval.c **** 		}
 202:boards/TMC4361A_eval.c **** 		break;
 203:boards/TMC4361A_eval.c **** 	case 2:
 204:boards/TMC4361A_eval.c **** 		// Target speed
 205:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 206:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 207:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 208:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(*value));
 209:boards/TMC4361A_eval.c **** 		}
 210:boards/TMC4361A_eval.c **** 		break;
 211:boards/TMC4361A_eval.c **** 	case 3:
 212:boards/TMC4361A_eval.c **** 		// Actual speed
 213:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 214:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VACTUAL);
 215:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 216:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_TYPE;
 217:boards/TMC4361A_eval.c **** 		}
 218:boards/TMC4361A_eval.c **** 		break;
 219:boards/TMC4361A_eval.c **** 	case 4:
 220:boards/TMC4361A_eval.c **** 		// Maximum speed
 221:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 222:boards/TMC4361A_eval.c **** 			*value = vmax_position;
 223:boards/TMC4361A_eval.c **** 			//*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 224:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 225:boards/TMC4361A_eval.c **** 			vmax_position = *value;
 226:boards/TMC4361A_eval.c **** 			// Write VMAX if already in position mode
 227:boards/TMC4361A_eval.c **** 			if(tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE) & TMC4361A_RAMP_POSITION)
 228:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 229:boards/TMC4361A_eval.c **** 		}
 230:boards/TMC4361A_eval.c **** 		break;
 231:boards/TMC4361A_eval.c **** 	case 5:
 232:boards/TMC4361A_eval.c **** 		// Maximum acceleration
 233:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 234:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_AMAX)>>2;
 235:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 236:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 237:boards/TMC4361A_eval.c **** 			{
 238:boards/TMC4361A_eval.c **** 				errors |= TMC_ERROR_VALUE;
 239:boards/TMC4361A_eval.c **** 			}
 240:boards/TMC4361A_eval.c **** 			else
 241:boards/TMC4361A_eval.c **** 			{
 242:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_AMAX, *value<<2);
 243:boards/TMC4361A_eval.c **** 			}
 244:boards/TMC4361A_eval.c **** 		}
 245:boards/TMC4361A_eval.c **** 		break;
 246:boards/TMC4361A_eval.c **** 	case 8:
 247:boards/TMC4361A_eval.c **** 		// Position reached flag
 248:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 249:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_STATUS) & (1<<0))? 1:0;
 250:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 251:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_TYPE;
 252:boards/TMC4361A_eval.c **** 		break;
 253:boards/TMC4361A_eval.c **** 	case 14:
 254:boards/TMC4361A_eval.c **** 		// Ramp type
 255:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 256:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE)<<1;
 257:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 258:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_RAMPMODE, (*value) ? TMC4361A_RAMP_SSHAPE : TMC4361
 259:boards/TMC4361A_eval.c **** 		}
 260:boards/TMC4361A_eval.c **** 		break;
 261:boards/TMC4361A_eval.c **** 	case 15:
 262:boards/TMC4361A_eval.c **** 		// Velocity VSTART
 263:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 264:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTART);
 265:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 266:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTART, *value);
 267:boards/TMC4361A_eval.c **** 		}
 268:boards/TMC4361A_eval.c **** 		break;
 269:boards/TMC4361A_eval.c **** 	case 16:
 270:boards/TMC4361A_eval.c **** 		// Acceleration AStart
 271:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 272:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ASTART)>>2;
 273:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 274:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 275:boards/TMC4361A_eval.c **** 			{
 276:boards/TMC4361A_eval.c **** 				errors |= TMC_ERROR_VALUE;
 277:boards/TMC4361A_eval.c **** 			}
 278:boards/TMC4361A_eval.c **** 			else
 279:boards/TMC4361A_eval.c **** 			{
 280:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_ASTART, *value<<2);
 281:boards/TMC4361A_eval.c **** 			}
 282:boards/TMC4361A_eval.c **** 		}
 283:boards/TMC4361A_eval.c **** 		break;
 284:boards/TMC4361A_eval.c **** 	case 17:
 285:boards/TMC4361A_eval.c **** 		// Maximum Deceleration
 286:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 287:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DMAX)>>2;
 288:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 289:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 290:boards/TMC4361A_eval.c **** 			{
 291:boards/TMC4361A_eval.c **** 				errors |= TMC_ERROR_VALUE;
 292:boards/TMC4361A_eval.c **** 			}
 293:boards/TMC4361A_eval.c **** 			else
 294:boards/TMC4361A_eval.c **** 			{
 295:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DMAX, *value<<2);
 296:boards/TMC4361A_eval.c **** 			}
 297:boards/TMC4361A_eval.c **** 		}
 298:boards/TMC4361A_eval.c **** 		break;
 299:boards/TMC4361A_eval.c **** 	case 18:
 300:boards/TMC4361A_eval.c **** 		// Velocity VBreak
 301:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 302:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VBREAK);
 303:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 304:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VBREAK, *value);
 305:boards/TMC4361A_eval.c **** 		}
 306:boards/TMC4361A_eval.c **** 		break;
 307:boards/TMC4361A_eval.c **** 	case 19:
 308:boards/TMC4361A_eval.c **** 		// Deceleration DFinal
 309:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 310:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DFINAL) >> 2;
 311:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 312:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 313:boards/TMC4361A_eval.c **** 			{
 314:boards/TMC4361A_eval.c **** 				errors |= TMC_ERROR_VALUE;
 315:boards/TMC4361A_eval.c **** 			}
 316:boards/TMC4361A_eval.c **** 			else
 317:boards/TMC4361A_eval.c **** 			{
 318:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DFINAL, *value<<2);
 319:boards/TMC4361A_eval.c **** 			}
 320:boards/TMC4361A_eval.c **** 		}
 321:boards/TMC4361A_eval.c **** 		break;
 322:boards/TMC4361A_eval.c **** 	case 20:
 323:boards/TMC4361A_eval.c **** 		// Velocity VSTOP
 324:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 325:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTOP);
 326:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 327:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTOP, *value);
 328:boards/TMC4361A_eval.c **** 		}
 329:boards/TMC4361A_eval.c **** 		break;
 330:boards/TMC4361A_eval.c **** 	case 21:
 331:boards/TMC4361A_eval.c **** 		// Deceleration DStop
 332:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 333:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DSTOP);
 334:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 335:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 336:boards/TMC4361A_eval.c **** 			{
 337:boards/TMC4361A_eval.c **** 				errors |= TMC_ERROR_VALUE;
 338:boards/TMC4361A_eval.c **** 			}
 339:boards/TMC4361A_eval.c **** 			else
 340:boards/TMC4361A_eval.c **** 			{
 341:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_DSTOP, *value);
 342:boards/TMC4361A_eval.c **** 			}
 343:boards/TMC4361A_eval.c **** 		}
 344:boards/TMC4361A_eval.c **** 		break;
 345:boards/TMC4361A_eval.c **** 	case 22:
 346:boards/TMC4361A_eval.c **** 		// Bow 1
 347:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 348:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW1);
 349:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 350:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW1, *value);
 351:boards/TMC4361A_eval.c **** 		}
 352:boards/TMC4361A_eval.c **** 		break;
 353:boards/TMC4361A_eval.c **** 	case 23:
 354:boards/TMC4361A_eval.c **** 		// Bow 2
 355:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 356:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW2);
 357:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 358:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW2, *value);
 359:boards/TMC4361A_eval.c **** 		}
 360:boards/TMC4361A_eval.c **** 		break;
 361:boards/TMC4361A_eval.c **** 	case 24:
 362:boards/TMC4361A_eval.c **** 		// Bow 3
 363:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 364:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW3);
 365:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 366:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW3, *value);
 367:boards/TMC4361A_eval.c **** 		}
 368:boards/TMC4361A_eval.c **** 		break;
 369:boards/TMC4361A_eval.c **** 	case 25:
 370:boards/TMC4361A_eval.c **** 		// Bow 4
 371:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 372:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW4);
 373:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 374:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW4, *value);
 375:boards/TMC4361A_eval.c **** 		}
 376:boards/TMC4361A_eval.c **** 		break;
 377:boards/TMC4361A_eval.c **** 	case 26:
 378:boards/TMC4361A_eval.c **** 		// Virtual stop left
 379:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 380:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT);
 381:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 382:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT, *value);
 383:boards/TMC4361A_eval.c **** 		}
 384:boards/TMC4361A_eval.c **** 		break;
 385:boards/TMC4361A_eval.c **** 	case 27:
 386:boards/TMC4361A_eval.c **** 		// Virtual stop right
 387:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 388:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT);
 389:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 390:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT, *value);
 391:boards/TMC4361A_eval.c **** 		}
 392:boards/TMC4361A_eval.c **** 		break;
 393:boards/TMC4361A_eval.c **** 	case 108:
 394:boards/TMC4361A_eval.c **** 		// CL Gamma VMin
 395:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 396:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR);		// read from shadow regis
 397:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 398:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR, *value);
 399:boards/TMC4361A_eval.c **** 		}
 400:boards/TMC4361A_eval.c **** 		break;
 401:boards/TMC4361A_eval.c **** 	case 109:
 402:boards/TMC4361A_eval.c **** 		// CL Gamma VMax
 403:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 404:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VADD_EMF); 	// read from shadow register
 405:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 406:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VADD_EMF, *value);
 407:boards/TMC4361A_eval.c **** 		}
 408:boards/TMC4361A_eval.c **** 		break;
 409:boards/TMC4361A_eval.c **** 	case 110:
 410:boards/TMC4361A_eval.c **** 		// CL maximum Gamma
 411:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 412:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) >> 16;
 413:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 414:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x000001FF;
 415:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
 416:boards/TMC4361A_eval.c **** 		}
 417:boards/TMC4361A_eval.c **** 		break;
 418:boards/TMC4361A_eval.c **** 	case 111:
 419:boards/TMC4361A_eval.c **** 		// CL beta
 420:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 421:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) & 0xFF;
 422:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 423:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x00FF0000;
 424:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
 425:boards/TMC4361A_eval.c **** 		}
 426:boards/TMC4361A_eval.c **** 		break;
 427:boards/TMC4361A_eval.c **** 	case 112:
 428:boards/TMC4361A_eval.c **** 		// CL offset
 429:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 430:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_OFFSET);
 431:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 432:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_OFFSET, *value);
 433:boards/TMC4361A_eval.c **** 		}
 434:boards/TMC4361A_eval.c **** 		break;
 435:boards/TMC4361A_eval.c **** 	case 113:
 436:boards/TMC4361A_eval.c **** 		// CL current minimum
 437:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 438:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
 439:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 440:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<0);
 441:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 0;
 442:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 443:boards/TMC4361A_eval.c **** 		}
 444:boards/TMC4361A_eval.c **** 		break;
 445:boards/TMC4361A_eval.c **** 	case 114:
 446:boards/TMC4361A_eval.c **** 		// CL current maximum
 447:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 448:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 8) & 0xFF;
 449:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 450:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<8);
 451:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 8;
 452:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 453:boards/TMC4361A_eval.c **** 		}
 454:boards/TMC4361A_eval.c **** 		break;
 455:boards/TMC4361A_eval.c **** 	case 115:
 456:boards/TMC4361A_eval.c **** 		// CL correction velocity P
 457:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 458:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_P_WR];
 459:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 460:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_P_WR, *value);
 461:boards/TMC4361A_eval.c **** 		}
 462:boards/TMC4361A_eval.c **** 		break;
 463:boards/TMC4361A_eval.c **** 	case 116:
 464:boards/TMC4361A_eval.c **** 		// CL correction velocity I
 465:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 466:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_I_WR];
 467:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 468:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_I_WR, *value);
 469:boards/TMC4361A_eval.c **** 		}
 470:boards/TMC4361A_eval.c **** 		break;
 471:boards/TMC4361A_eval.c **** 	case 117:
 472:boards/TMC4361A_eval.c **** 		// CL correction velocity I clipping
 473:boards/TMC4361A_eval.c **** 		// todo AP 3: same register as in AP 116 and 115? (BS) #1
 474:boards/TMC4361A_eval.c **** 		// (JE) : probably register TMC4361_PID_I_CLIP_WR ?
 475:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 476:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 0;
 477:boards/TMC4361A_eval.c **** 			*value &= 0x7FFF;
 478:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 479:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR];
 480:boards/TMC4361A_eval.c **** 			uvalue &= ~(0x7FFF << 0);
 481:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x7FFF) << 0;
 482:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 483:boards/TMC4361A_eval.c **** 		}
 484:boards/TMC4361A_eval.c **** 		break;
 485:boards/TMC4361A_eval.c **** 	case 118:
 486:boards/TMC4361A_eval.c **** 		// CL correction velocity DV clock
 487:boards/TMC4361A_eval.c **** 		// todo AP 3: same register as in AP 116 and 115? (BS) #2
 488:boards/TMC4361A_eval.c **** 		// (JE) probably register TMC4361_PID_I_CLIP_WR?
 489:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 490:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 16;
 491:boards/TMC4361A_eval.c **** 			*value &= 0xFF;
 492:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 493:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR];
 494:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 16);
 495:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 496:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 497:boards/TMC4361A_eval.c **** 		}
 498:boards/TMC4361A_eval.c **** 		break;
 499:boards/TMC4361A_eval.c **** 	case 119:
 500:boards/TMC4361A_eval.c **** 		// CL correction velocity DV clipping
 501:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 502:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR);
 503:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 504:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR, *value);
 505:boards/TMC4361A_eval.c **** 		}
 506:boards/TMC4361A_eval.c **** 		break;
 507:boards/TMC4361A_eval.c **** 	case 120:
 508:boards/TMC4361A_eval.c **** 		// CL upscale delay
 509:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 510:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY);
 511:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 512:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY, *value);
 513:boards/TMC4361A_eval.c **** 		}
 514:boards/TMC4361A_eval.c **** 		break;
 515:boards/TMC4361A_eval.c **** 	case 121:
 516:boards/TMC4361A_eval.c **** 		// CL Downscale delay
 517:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 518:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY);
 519:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 520:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY, *value);
 521:boards/TMC4361A_eval.c **** 		}
 522:boards/TMC4361A_eval.c **** 		break;
 523:boards/TMC4361A_eval.c **** 	case 124:
 524:boards/TMC4361A_eval.c **** 		// CL Correction Position P
 525:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 526:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR);
 527:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 528:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR, *value);
 529:boards/TMC4361A_eval.c **** 		}
 530:boards/TMC4361A_eval.c **** 		break;
 531:boards/TMC4361A_eval.c **** 	case 125:
 532:boards/TMC4361A_eval.c **** 		// CL max. correction tolerance
 533:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 534:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR);
 535:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 536:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR, *value);
 537:boards/TMC4361A_eval.c **** 		}
 538:boards/TMC4361A_eval.c **** 		break;
 539:boards/TMC4361A_eval.c **** 	case 126:
 540:boards/TMC4361A_eval.c **** 		// CL start up
 541:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 542:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 16) & 0xFF;
 543:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 544:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<16);
 545:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 546:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 547:boards/TMC4361A_eval.c **** 		}
 548:boards/TMC4361A_eval.c **** 		break;
 549:boards/TMC4361A_eval.c **** 	case 129: // todo AP 2: merge AP 129 with AP 133? #1
 550:boards/TMC4361A_eval.c **** 		// Closed Loop Flag
 551:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 552:boards/TMC4361A_eval.c **** 			// Read for closed loop flag is implemented as AP 133
 553:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 554:boards/TMC4361A_eval.c **** 			//Closed loop on/off
 555:boards/TMC4361A_eval.c **** 			if(*value)
 556:boards/TMC4361A_eval.c **** 			{
 557:boards/TMC4361A_eval.c **** 				*value = tmc4361A_calibrateClosedLoop(motorToIC(motor), 1);
 558:boards/TMC4361A_eval.c **** 				if(!*value)
 559:boards/TMC4361A_eval.c **** 					errors |= TMC_ERROR_NOT_DONE;
 560:boards/TMC4361A_eval.c **** 			}
 561:boards/TMC4361A_eval.c **** 			else
 562:boards/TMC4361A_eval.c **** 			{
 563:boards/TMC4361A_eval.c **** 				uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
 564:boards/TMC4361A_eval.c **** 				uvalue 	&= ~(1<<22); // closed loop
 565:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_IN_CONF, uvalue);
 566:boards/TMC4361A_eval.c **** 			}
 567:boards/TMC4361A_eval.c **** 		}
 568:boards/TMC4361A_eval.c **** 		break;
 569:boards/TMC4361A_eval.c **** 	case 132:
 570:boards/TMC4361A_eval.c **** 		// Measured Encoder Speed
 571:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 572:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_V_ENC_RD);
 573:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 574:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_TYPE;
 575:boards/TMC4361A_eval.c **** 		break;
 576:boards/TMC4361A_eval.c **** 	case 133: // todo AP 2: merge AP 129 with AP 133? #2
 577:boards/TMC4361A_eval.c **** 		// Closed Loop Init Flag
 578:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 579:boards/TMC4361A_eval.c **** 			uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
 580:boards/TMC4361A_eval.c **** 			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
 581:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 582:boards/TMC4361A_eval.c **** 			// Write for closed loop flag is implemented as AP 129
 583:boards/TMC4361A_eval.c **** 		}
 584:boards/TMC4361A_eval.c **** 		break;
 585:boards/TMC4361A_eval.c **** 	case 134:
 586:boards/TMC4361A_eval.c **** 		// todo AP XML 2: Split this into read-only Encoder deviation and write-only CL_TR_TOLERANCE? Hav
 587:boards/TMC4361A_eval.c **** 		// Encoder deviation
 588:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 589:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_RD);
 590:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 591:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TR_TOLERANCE_WR, *value);
 592:boards/TMC4361A_eval.c **** 		}
 593:boards/TMC4361A_eval.c **** 		break;
 594:boards/TMC4361A_eval.c **** 	case 136:
 595:boards/TMC4361A_eval.c **** 		// Encoder Velocity Delay
 596:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 597:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
 598:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 599:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 600:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 0);
 601:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 0;
 602:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 603:boards/TMC4361A_eval.c **** 		}
 604:boards/TMC4361A_eval.c **** 		break;
 605:boards/TMC4361A_eval.c **** 	case 137:
 606:boards/TMC4361A_eval.c **** 		// Encoder Velocity Filter
 607:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 608:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
 609:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 610:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 611:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xF << 8);
 612:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 8;
 613:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 614:boards/TMC4361A_eval.c **** 		}
 615:boards/TMC4361A_eval.c **** 		break;
 616:boards/TMC4361A_eval.c **** 	case 138:
 617:boards/TMC4361A_eval.c **** 		// Filter Update Time
 618:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 619:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
 620:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 621:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 622:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 16);
 623:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0FF) << 16;
 624:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 625:boards/TMC4361A_eval.c **** 		}
 626:boards/TMC4361A_eval.c **** 		break;
 627:boards/TMC4361A_eval.c **** 	case 200:
 628:boards/TMC4361A_eval.c **** 		// Boost current
 629:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 630:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
 631:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 632:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<0);
 633:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 0;
 634:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 635:boards/TMC4361A_eval.c **** 		}
 636:boards/TMC4361A_eval.c **** 		break;
 637:boards/TMC4361A_eval.c **** 	case 209:
 638:boards/TMC4361A_eval.c **** 		// Encoder position
 639:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 640:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS);
 641:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 642:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS, *value);
 643:boards/TMC4361A_eval.c **** 		}
 644:boards/TMC4361A_eval.c **** 		break;
 645:boards/TMC4361A_eval.c **** 	case 212:
 646:boards/TMC4361A_eval.c **** 		// Maximum encoder deviation
 647:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 648:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_SCALE_VALUES]; // todo CHECK 3: shouldn't this
 649:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 650:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_TOL_WR, *value);
 651:boards/TMC4361A_eval.c **** 		}
 652:boards/TMC4361A_eval.c **** 		break;
 653:boards/TMC4361A_eval.c **** 	case 214:
 654:boards/TMC4361A_eval.c **** 		// Power Down Delay
 655:boards/TMC4361A_eval.c **** 		if(readWrite == READ) {
 656:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_STDBY_DELAY);
 657:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 658:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_STDBY_DELAY, *value*160000);
 659:boards/TMC4361A_eval.c **** 		}
 660:boards/TMC4361A_eval.c **** 		break;
 661:boards/TMC4361A_eval.c **** 	default:
 662:boards/TMC4361A_eval.c **** 		errors |= TMC_ERROR_TYPE;
 663:boards/TMC4361A_eval.c **** 		break;
 664:boards/TMC4361A_eval.c **** 	}
 665:boards/TMC4361A_eval.c **** 	return errors;
 666:boards/TMC4361A_eval.c **** }
 667:boards/TMC4361A_eval.c **** 
 668:boards/TMC4361A_eval.c **** static uint32_t SAP(uint8_t type, uint8_t motor, int32_t value)
 669:boards/TMC4361A_eval.c **** {
 670:boards/TMC4361A_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 671:boards/TMC4361A_eval.c **** }
 672:boards/TMC4361A_eval.c **** 
 673:boards/TMC4361A_eval.c **** static uint32_t GAP(uint8_t type, uint8_t motor, int32_t *value)
 674:boards/TMC4361A_eval.c **** {
 675:boards/TMC4361A_eval.c **** 	return handleParameter(READ, motor, type, value);
 676:boards/TMC4361A_eval.c **** }
 677:boards/TMC4361A_eval.c **** 
 678:boards/TMC4361A_eval.c **** static void writeRegister(uint8_t motor, uint8_t address, int32_t value)
 679:boards/TMC4361A_eval.c **** {
 680:boards/TMC4361A_eval.c **** 	// Notify driver shadows about register changes made via cover
 681:boards/TMC4361A_eval.c **** 	static int32_t high;
 682:boards/TMC4361A_eval.c **** 	switch(address) {
 683:boards/TMC4361A_eval.c **** 	case TMC4361A_COVER_HIGH_WR:
 684:boards/TMC4361A_eval.c **** 		high = value;
 685:boards/TMC4361A_eval.c **** 		break;
 686:boards/TMC4361A_eval.c **** 	case TMC4361A_COVER_LOW_WR:
 687:boards/TMC4361A_eval.c **** 		if(Evalboards.ch2.id == ID_TMC2660) // TMC2660 -> 20 bit registers, 8 bit address
 688:boards/TMC4361A_eval.c **** 			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
 689:boards/TMC4361A_eval.c **** 		else // All other drivers -> 32 bit registers, 8 bit address
 690:boards/TMC4361A_eval.c **** 			Evalboards.ch2.writeRegister(motor, TMC_ADDRESS(high), value);
 691:boards/TMC4361A_eval.c **** 		break;
 692:boards/TMC4361A_eval.c **** 	case TMC4361A_SCALE_VALUES:
 693:boards/TMC4361A_eval.c **** 		/* Only possible with IHOLD and only with TMC2130 and TMC2160, since write-only registers changed
 694:boards/TMC4361A_eval.c **** 		 * the TMC43XX (not via cover datagrams) are impossible to track.
 695:boards/TMC4361A_eval.c **** 		 */
 696:boards/TMC4361A_eval.c **** 		switch(Evalboards.ch2.id) {
 697:boards/TMC4361A_eval.c **** 		case ID_TMC2130:
 698:boards/TMC4361A_eval.c **** 			TMC2130_FIELD_UPDATE((TMC2130TypeDef *)Evalboards.ch2.type, TMC2130_IHOLD_IRUN, TMC2130_IHOLD_MA
 699:boards/TMC4361A_eval.c **** 			break;
 700:boards/TMC4361A_eval.c **** 		case ID_TMC2160:
 701:boards/TMC4361A_eval.c **** 			TMC2160_FIELD_UPDATE((TMC2160TypeDef *)Evalboards.ch2.type, TMC2160_IHOLD_IRUN, TMC2160_IHOLD_MA
 702:boards/TMC4361A_eval.c **** 			break;
 703:boards/TMC4361A_eval.c **** 		}
 704:boards/TMC4361A_eval.c **** 		break;
 705:boards/TMC4361A_eval.c **** 	}
 706:boards/TMC4361A_eval.c **** 	tmc4361A_writeInt(motorToIC(motor), address, value);
 707:boards/TMC4361A_eval.c **** }
 708:boards/TMC4361A_eval.c **** 
 709:boards/TMC4361A_eval.c **** static void readRegister(uint8_t motor, uint8_t address, int32_t *value)
 710:boards/TMC4361A_eval.c **** {
 711:boards/TMC4361A_eval.c **** 	*value	= tmc4361A_readInt(motorToIC(motor), address);
 712:boards/TMC4361A_eval.c **** }
 713:boards/TMC4361A_eval.c **** 
 714:boards/TMC4361A_eval.c **** static void periodicJob(uint32_t tick)
 715:boards/TMC4361A_eval.c **** {
 716:boards/TMC4361A_eval.c **** 	tmc4361A_periodicJob(&TMC4361A, tick);
 717:boards/TMC4361A_eval.c **** }
 718:boards/TMC4361A_eval.c **** 
 719:boards/TMC4361A_eval.c **** static void checkErrors(uint32_t tick)
 720:boards/TMC4361A_eval.c **** {
  26              		.loc 1 720 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 721:boards/TMC4361A_eval.c **** 	UNUSED(tick);
  31              		.loc 1 721 2 view .LVU1
 722:boards/TMC4361A_eval.c **** 	Evalboards.ch1.errors = 0;
  32              		.loc 1 722 2 view .LVU2
  33              		.loc 1 722 24 is_stmt 0 view .LVU3
  34 0000 014B     		ldr	r3, .L2
  35 0002 0022     		movs	r2, #0
  36 0004 9A60     		str	r2, [r3, #8]
 723:boards/TMC4361A_eval.c **** }
  37              		.loc 1 723 1 view .LVU4
  38 0006 7047     		bx	lr
  39              	.L3:
  40              		.align	2
  41              	.L2:
  42 0008 00000000 		.word	Evalboards
  43              		.cfi_endproc
  44              	.LFE18:
  46              		.align	1
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	deInit:
  53              	.LFB20:
 724:boards/TMC4361A_eval.c **** 
 725:boards/TMC4361A_eval.c **** static uint32_t userFunction(uint8_t type, uint8_t motor, int32_t *value)
 726:boards/TMC4361A_eval.c **** {
 727:boards/TMC4361A_eval.c **** 	uint32_t errors = 0;
 728:boards/TMC4361A_eval.c **** 
 729:boards/TMC4361A_eval.c **** 	switch(type)
 730:boards/TMC4361A_eval.c **** 	{
 731:boards/TMC4361A_eval.c **** 	case 0:	// simulate left/right reference switches, set high to support external ref swiches
 732:boards/TMC4361A_eval.c **** 		/*
 733:boards/TMC4361A_eval.c **** 		 * The the TMC4361 ref switch input is pulled high by external resistor an can be pulled low eith
 734:boards/TMC4361A_eval.c **** 		 * this ÂµC or external signal. To use external signal make sure the signals from ÂµC are high or
 735:boards/TMC4361A_eval.c **** 		 */
 736:boards/TMC4361A_eval.c **** 		if(!(*value & ~3))
 737:boards/TMC4361A_eval.c **** 		{
 738:boards/TMC4361A_eval.c **** 			if(*value & (1<<0))
 739:boards/TMC4361A_eval.c **** 			{
 740:boards/TMC4361A_eval.c **** 				HAL.IOs->config->toInput(Pins.STOP_R); // pull up -> set it to floating causes high
 741:boards/TMC4361A_eval.c **** 			}
 742:boards/TMC4361A_eval.c **** 			else
 743:boards/TMC4361A_eval.c **** 			{
 744:boards/TMC4361A_eval.c **** 				HAL.IOs->config->toOutput(Pins.STOP_R);
 745:boards/TMC4361A_eval.c **** 				HAL.IOs->config->setLow(Pins.STOP_R);
 746:boards/TMC4361A_eval.c **** 			}
 747:boards/TMC4361A_eval.c **** 
 748:boards/TMC4361A_eval.c **** 			if(*value & (1<<1))
 749:boards/TMC4361A_eval.c **** 			{
 750:boards/TMC4361A_eval.c **** 				HAL.IOs->config->toInput(Pins.STOP_L); // pull up -> set it to floating causes high
 751:boards/TMC4361A_eval.c **** 			}
 752:boards/TMC4361A_eval.c **** 			else
 753:boards/TMC4361A_eval.c **** 			{
 754:boards/TMC4361A_eval.c **** 				HAL.IOs->config->toOutput(Pins.STOP_L);
 755:boards/TMC4361A_eval.c **** 				HAL.IOs->config->setLow(Pins.STOP_L);
 756:boards/TMC4361A_eval.c **** 			}
 757:boards/TMC4361A_eval.c **** 		}
 758:boards/TMC4361A_eval.c **** 		//else TMCL.reply->Status = REPLY_INVALID_VALUE;
 759:boards/TMC4361A_eval.c **** 		break;
 760:boards/TMC4361A_eval.c **** 	case 1:	// simulate reference switche HOME_REF, set high to support external ref swiches
 761:boards/TMC4361A_eval.c **** 		/*
 762:boards/TMC4361A_eval.c **** 		 * The the TMC43x1 ref switch input is pulled high by external resistor an can be pulled low eith
 763:boards/TMC4361A_eval.c **** 		 * this ÂµC or external signal. To use external signal make sure the signals from ÂµC are high or
 764:boards/TMC4361A_eval.c **** 		 */
 765:boards/TMC4361A_eval.c **** 		if(*value)
 766:boards/TMC4361A_eval.c **** 		{
 767:boards/TMC4361A_eval.c **** 			HAL.IOs->config->toInput(Pins.HOME_REF); // pull up -> set it to floating causes high
 768:boards/TMC4361A_eval.c **** 		}
 769:boards/TMC4361A_eval.c **** 		else
 770:boards/TMC4361A_eval.c **** 		{
 771:boards/TMC4361A_eval.c **** 			HAL.IOs->config->toOutput(Pins.HOME_REF);
 772:boards/TMC4361A_eval.c **** 			HAL.IOs->config->setLow(Pins.HOME_REF);
 773:boards/TMC4361A_eval.c **** 		}
 774:boards/TMC4361A_eval.c **** 		break;
 775:boards/TMC4361A_eval.c **** 	case 2:	// simulate reference switche FREEZE, set high to support external ref swiches
 776:boards/TMC4361A_eval.c **** 		/*
 777:boards/TMC4361A_eval.c **** 		 * The the TMC43x1 ref switch input is pulled high by external resistor an can be pulled low eith
 778:boards/TMC4361A_eval.c **** 		 * this ÂµC or external signal. To use external signal make sure the signals from ÂµC are high or
 779:boards/TMC4361A_eval.c **** 		 */
 780:boards/TMC4361A_eval.c **** 
 781:boards/TMC4361A_eval.c **** 		if(*value)
 782:boards/TMC4361A_eval.c **** 		{
 783:boards/TMC4361A_eval.c **** 			HAL.IOs->config->toInput(Pins.FREEZE); // pull up -> set it to floating causes high
 784:boards/TMC4361A_eval.c **** 		}
 785:boards/TMC4361A_eval.c **** 		else
 786:boards/TMC4361A_eval.c **** 		{
 787:boards/TMC4361A_eval.c **** 			HAL.IOs->config->toOutput(Pins.FREEZE);
 788:boards/TMC4361A_eval.c **** 			HAL.IOs->config->setLow(Pins.FREEZE);
 789:boards/TMC4361A_eval.c **** 		}
 790:boards/TMC4361A_eval.c **** 		break;
 791:boards/TMC4361A_eval.c **** 	case 3:
 792:boards/TMC4361A_eval.c **** 		*value = tmc4361A_calibrateClosedLoop(motorToIC(motor), 1);
 793:boards/TMC4361A_eval.c **** 		if(!*value)
 794:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_NOT_DONE;
 795:boards/TMC4361A_eval.c **** 		break;
 796:boards/TMC4361A_eval.c **** 	case 255:
 797:boards/TMC4361A_eval.c **** 		Evalboards.ch2.config->reset();
 798:boards/TMC4361A_eval.c **** 		Evalboards.ch1.config->reset();
 799:boards/TMC4361A_eval.c **** 		break;
 800:boards/TMC4361A_eval.c **** 	default:
 801:boards/TMC4361A_eval.c **** 		errors |= TMC_ERROR_TYPE;
 802:boards/TMC4361A_eval.c **** 		break;
 803:boards/TMC4361A_eval.c **** 	}
 804:boards/TMC4361A_eval.c **** 	return errors;
 805:boards/TMC4361A_eval.c **** }
 806:boards/TMC4361A_eval.c **** 
 807:boards/TMC4361A_eval.c **** static void deInit(void)
 808:boards/TMC4361A_eval.c **** {
  54              		.loc 1 808 1 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
 809:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setLow(Pins.NRST);
  58              		.loc 1 809 2 view .LVU6
 808:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setLow(Pins.NRST);
  59              		.loc 1 808 1 is_stmt 0 view .LVU7
  60 000c 70B5     		push	{r4, r5, r6, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 16
  63              		.cfi_offset 4, -16
  64              		.cfi_offset 5, -12
  65              		.cfi_offset 6, -8
  66              		.cfi_offset 14, -4
  67              		.loc 1 809 5 view .LVU8
  68 000e 184E     		ldr	r6, .L5
  69              		.loc 1 809 2 view .LVU9
  70 0010 184C     		ldr	r4, .L5+4
  71              		.loc 1 809 5 view .LVU10
  72 0012 F568     		ldr	r5, [r6, #12]
  73              		.loc 1 809 2 view .LVU11
  74 0014 6068     		ldr	r0, [r4, #4]
  75              		.loc 1 809 17 view .LVU12
  76 0016 2B68     		ldr	r3, [r5]
  77              		.loc 1 809 2 view .LVU13
  78 0018 9B69     		ldr	r3, [r3, #24]
  79 001a 9847     		blx	r3
  80              	.LVL1:
 810:boards/TMC4361A_eval.c **** 
 811:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.STOP_L);
  81              		.loc 1 811 2 is_stmt 1 view .LVU14
  82              		.loc 1 811 17 is_stmt 0 view .LVU15
  83 001c 2B68     		ldr	r3, [r5]
  84              		.loc 1 811 2 view .LVU16
  85 001e A069     		ldr	r0, [r4, #24]
  86 0020 9B68     		ldr	r3, [r3, #8]
  87 0022 9847     		blx	r3
  88              	.LVL2:
 812:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.STOP_R);
  89              		.loc 1 812 2 is_stmt 1 view .LVU17
  90              		.loc 1 812 17 is_stmt 0 view .LVU18
  91 0024 2B68     		ldr	r3, [r5]
  92              		.loc 1 812 2 view .LVU19
  93 0026 6069     		ldr	r0, [r4, #20]
  94 0028 9B68     		ldr	r3, [r3, #8]
  95 002a 9847     		blx	r3
  96              	.LVL3:
 813:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.HOME_REF);
  97              		.loc 1 813 2 is_stmt 1 view .LVU20
  98              		.loc 1 813 17 is_stmt 0 view .LVU21
  99 002c 2B68     		ldr	r3, [r5]
 100              		.loc 1 813 2 view .LVU22
 101 002e 2069     		ldr	r0, [r4, #16]
 102 0030 9B68     		ldr	r3, [r3, #8]
 103 0032 9847     		blx	r3
 104              	.LVL4:
 814:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.START);
 105              		.loc 1 814 2 is_stmt 1 view .LVU23
 106              		.loc 1 814 17 is_stmt 0 view .LVU24
 107 0034 2B68     		ldr	r3, [r5]
 108              		.loc 1 814 2 view .LVU25
 109 0036 E068     		ldr	r0, [r4, #12]
 110 0038 9B68     		ldr	r3, [r3, #8]
 111 003a 9847     		blx	r3
 112              	.LVL5:
 815:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.FREEZE);
 113              		.loc 1 815 2 is_stmt 1 view .LVU26
 114              		.loc 1 815 17 is_stmt 0 view .LVU27
 115 003c 2B68     		ldr	r3, [r5]
 116              		.loc 1 815 2 view .LVU28
 117 003e A068     		ldr	r0, [r4, #8]
 118 0040 9B68     		ldr	r3, [r3, #8]
 119 0042 9847     		blx	r3
 120              	.LVL6:
 816:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.STANDBY_CLK);
 121              		.loc 1 816 2 is_stmt 1 view .LVU29
 122              		.loc 1 816 17 is_stmt 0 view .LVU30
 123 0044 2B68     		ldr	r3, [r5]
 124              		.loc 1 816 2 view .LVU31
 125 0046 206A     		ldr	r0, [r4, #32]
 126 0048 9B68     		ldr	r3, [r3, #8]
 127 004a 9847     		blx	r3
 128              	.LVL7:
 817:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.INTR);
 129              		.loc 1 817 2 is_stmt 1 view .LVU32
 130              		.loc 1 817 17 is_stmt 0 view .LVU33
 131 004c 2B68     		ldr	r3, [r5]
 132              		.loc 1 817 2 view .LVU34
 133 004e E069     		ldr	r0, [r4, #28]
 134 0050 9B68     		ldr	r3, [r3, #8]
 135 0052 9847     		blx	r3
 136              	.LVL8:
 818:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.TARGET_REACHED);
 137              		.loc 1 818 2 is_stmt 1 view .LVU35
 138              		.loc 1 818 17 is_stmt 0 view .LVU36
 139 0054 2B68     		ldr	r3, [r5]
 140              		.loc 1 818 2 view .LVU37
 141 0056 2068     		ldr	r0, [r4]
 142 0058 9B68     		ldr	r3, [r3, #8]
 143 005a 9847     		blx	r3
 144              	.LVL9:
 819:boards/TMC4361A_eval.c **** 	HAL.IOs->config->reset(Pins.NRST);
 145              		.loc 1 819 2 is_stmt 1 view .LVU38
 146              		.loc 1 819 17 is_stmt 0 view .LVU39
 147 005c 2B68     		ldr	r3, [r5]
 148              		.loc 1 819 2 view .LVU40
 149 005e 6068     		ldr	r0, [r4, #4]
 150 0060 9B68     		ldr	r3, [r3, #8]
 151 0062 9847     		blx	r3
 152              	.LVL10:
 820:boards/TMC4361A_eval.c **** 
 821:boards/TMC4361A_eval.c **** 	HAL.SPI->ch2.reset();
 153              		.loc 1 821 2 is_stmt 1 view .LVU41
 154              		.loc 1 821 14 is_stmt 0 view .LVU42
 155 0064 3369     		ldr	r3, [r6, #16]
 822:boards/TMC4361A_eval.c **** }
 156              		.loc 1 822 1 view .LVU43
 157 0066 BDE87040 		pop	{r4, r5, r6, lr}
 158              	.LCFI1:
 159              		.cfi_restore 14
 160              		.cfi_restore 6
 161              		.cfi_restore 5
 162              		.cfi_restore 4
 163              		.cfi_def_cfa_offset 0
 821:boards/TMC4361A_eval.c **** }
 164              		.loc 1 821 2 view .LVU44
 165 006a 5B6A     		ldr	r3, [r3, #36]
 166 006c 1847     		bx	r3	@ indirect register sibling call
 167              	.LVL11:
 168              	.L6:
 169 006e 00BF     		.align	2
 170              	.L5:
 171 0070 00000000 		.word	HAL
 172 0074 00000000 		.word	.LANCHOR0
 173              		.cfi_endproc
 174              	.LFE20:
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	tmc4361A_fullCover:
 183              	.LVL12:
 184              	.LFB4:
  76:boards/TMC4361A_eval.c **** 	tmc4361A_readWriteCover(&TMC4361A, data, length);
 185              		.loc 1 76 1 is_stmt 1 view -0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
  77:boards/TMC4361A_eval.c **** }
 190              		.loc 1 77 2 view .LVU46
  76:boards/TMC4361A_eval.c **** 	tmc4361A_readWriteCover(&TMC4361A, data, length);
 191              		.loc 1 76 1 is_stmt 0 view .LVU47
 192 0078 0A46     		mov	r2, r1
  77:boards/TMC4361A_eval.c **** }
 193              		.loc 1 77 2 view .LVU48
 194 007a 0146     		mov	r1, r0
 195              	.LVL13:
  77:boards/TMC4361A_eval.c **** }
 196              		.loc 1 77 2 view .LVU49
 197 007c 0148     		ldr	r0, .L8
 198              	.LVL14:
  77:boards/TMC4361A_eval.c **** }
 199              		.loc 1 77 2 view .LVU50
 200 007e FFF7FEBF 		b	tmc4361A_readWriteCover
 201              	.LVL15:
 202              	.L9:
  77:boards/TMC4361A_eval.c **** }
 203              		.loc 1 77 2 view .LVU51
 204 0082 00BF     		.align	2
 205              	.L8:
 206 0084 24000000 		.word	.LANCHOR0+36
 207              		.cfi_endproc
 208              	.LFE4:
 210              		.align	1
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu softvfp
 216              	userFunction:
 217              	.LVL16:
 218              	.LFB19:
 726:boards/TMC4361A_eval.c **** 	uint32_t errors = 0;
 219              		.loc 1 726 1 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 727:boards/TMC4361A_eval.c **** 
 223              		.loc 1 727 2 view .LVU53
 729:boards/TMC4361A_eval.c **** 	{
 224              		.loc 1 729 2 view .LVU54
 225 0088 0328     		cmp	r0, #3
 726:boards/TMC4361A_eval.c **** 	uint32_t errors = 0;
 226              		.loc 1 726 1 is_stmt 0 view .LVU55
 227 008a 70B5     		push	{r4, r5, r6, lr}
 228              	.LCFI2:
 229              		.cfi_def_cfa_offset 16
 230              		.cfi_offset 4, -16
 231              		.cfi_offset 5, -12
 232              		.cfi_offset 6, -8
 233              		.cfi_offset 14, -4
 726:boards/TMC4361A_eval.c **** 	uint32_t errors = 0;
 234              		.loc 1 726 1 view .LVU56
 235 008c 1446     		mov	r4, r2
 729:boards/TMC4361A_eval.c **** 	{
 236              		.loc 1 729 2 view .LVU57
 237 008e 06D8     		bhi	.L11
 238 0090 0138     		subs	r0, r0, #1
 239              	.LVL17:
 729:boards/TMC4361A_eval.c **** 	{
 240              		.loc 1 729 2 view .LVU58
 241 0092 0228     		cmp	r0, #2
 242 0094 08D8     		bhi	.L12
 243 0096 DFE800F0 		tbb	[pc, r0]
 244              	.L14:
 245 009a 2B       		.byte	(.L16-.L14)/2
 246 009b 3A       		.byte	(.L15-.L14)/2
 247 009c 48       		.byte	(.L13-.L14)/2
 248              	.LVL18:
 249 009d 00       		.p2align 1
 250              	.L11:
 729:boards/TMC4361A_eval.c **** 	{
 251              		.loc 1 729 2 view .LVU59
 252 009e FF28     		cmp	r0, #255
 253 00a0 4CD0     		beq	.L17
 254 00a2 0424     		movs	r4, #4
 255              	.LVL19:
 256              	.L10:
 805:boards/TMC4361A_eval.c **** 
 257              		.loc 1 805 1 view .LVU60
 258 00a4 2046     		mov	r0, r4
 259 00a6 70BD     		pop	{r4, r5, r6, pc}
 260              	.LVL20:
 261              	.L12:
 736:boards/TMC4361A_eval.c **** 		{
 262              		.loc 1 736 3 is_stmt 1 view .LVU61
 736:boards/TMC4361A_eval.c **** 		{
 263              		.loc 1 736 8 is_stmt 0 view .LVU62
 264 00a8 1268     		ldr	r2, [r2]
 265              	.LVL21:
 736:boards/TMC4361A_eval.c **** 		{
 266              		.loc 1 736 5 view .LVU63
 267 00aa 32F00303 		bics	r3, r2, #3
 268 00ae 10D1     		bne	.L27
 738:boards/TMC4361A_eval.c **** 			{
 269              		.loc 1 738 4 is_stmt 1 view .LVU64
 270 00b0 284B     		ldr	r3, .L31
 271 00b2 294D     		ldr	r5, .L31+4
 272 00b4 DE68     		ldr	r6, [r3, #12]
 273 00b6 6869     		ldr	r0, [r5, #20]
 274 00b8 3368     		ldr	r3, [r6]
 738:boards/TMC4361A_eval.c **** 			{
 275              		.loc 1 738 6 is_stmt 0 view .LVU65
 276 00ba D207     		lsls	r2, r2, #31
 277 00bc 0BD5     		bpl	.L20
 740:boards/TMC4361A_eval.c **** 			}
 278              		.loc 1 740 5 is_stmt 1 view .LVU66
 279 00be 1B69     		ldr	r3, [r3, #16]
 280              	.LVL22:
 281              	.L26:
 745:boards/TMC4361A_eval.c **** 			}
 282              		.loc 1 745 5 is_stmt 0 view .LVU67
 283 00c0 9847     		blx	r3
 284              	.LVL23:
 748:boards/TMC4361A_eval.c **** 			{
 285              		.loc 1 748 4 is_stmt 1 view .LVU68
 748:boards/TMC4361A_eval.c **** 			{
 286              		.loc 1 748 14 is_stmt 0 view .LVU69
 287 00c2 2468     		ldr	r4, [r4]
 288              	.LVL24:
 748:boards/TMC4361A_eval.c **** 			{
 289              		.loc 1 748 14 view .LVU70
 290 00c4 3268     		ldr	r2, [r6]
 291 00c6 A869     		ldr	r0, [r5, #24]
 748:boards/TMC4361A_eval.c **** 			{
 292              		.loc 1 748 6 view .LVU71
 293 00c8 14F00204 		ands	r4, r4, #2
 294 00cc 09D0     		beq	.L22
 750:boards/TMC4361A_eval.c **** 			}
 295              		.loc 1 750 5 is_stmt 1 view .LVU72
 296 00ce 1369     		ldr	r3, [r2, #16]
 297              	.L29:
 783:boards/TMC4361A_eval.c **** 		}
 298              		.loc 1 783 4 is_stmt 0 view .LVU73
 299 00d0 9847     		blx	r3
 300              	.LVL25:
 301              	.L27:
 799:boards/TMC4361A_eval.c **** 	default:
 302              		.loc 1 799 3 is_stmt 1 view .LVU74
 727:boards/TMC4361A_eval.c **** 
 303              		.loc 1 727 11 is_stmt 0 view .LVU75
 304 00d2 0024     		movs	r4, #0
 799:boards/TMC4361A_eval.c **** 	default:
 305              		.loc 1 799 3 view .LVU76
 306 00d4 E6E7     		b	.L10
 307              	.LVL26:
 308              	.L20:
 744:boards/TMC4361A_eval.c **** 				HAL.IOs->config->setLow(Pins.STOP_R);
 309              		.loc 1 744 5 is_stmt 1 view .LVU77
 310 00d6 DB68     		ldr	r3, [r3, #12]
 311 00d8 9847     		blx	r3
 312              	.LVL27:
 745:boards/TMC4361A_eval.c **** 			}
 313              		.loc 1 745 5 view .LVU78
 745:boards/TMC4361A_eval.c **** 			}
 314              		.loc 1 745 20 is_stmt 0 view .LVU79
 315 00da 3368     		ldr	r3, [r6]
 745:boards/TMC4361A_eval.c **** 			}
 316              		.loc 1 745 5 view .LVU80
 317 00dc 6869     		ldr	r0, [r5, #20]
 318 00de 9B69     		ldr	r3, [r3, #24]
 319 00e0 EEE7     		b	.L26
 320              	.LVL28:
 321              	.L22:
 754:boards/TMC4361A_eval.c **** 				HAL.IOs->config->setLow(Pins.STOP_L);
 322              		.loc 1 754 5 is_stmt 1 view .LVU81
 323 00e2 D368     		ldr	r3, [r2, #12]
 324 00e4 9847     		blx	r3
 325              	.LVL29:
 755:boards/TMC4361A_eval.c **** 			}
 326              		.loc 1 755 5 view .LVU82
 755:boards/TMC4361A_eval.c **** 			}
 327              		.loc 1 755 20 is_stmt 0 view .LVU83
 328 00e6 3368     		ldr	r3, [r6]
 755:boards/TMC4361A_eval.c **** 			}
 329              		.loc 1 755 5 view .LVU84
 330 00e8 A869     		ldr	r0, [r5, #24]
 331 00ea 9B69     		ldr	r3, [r3, #24]
 332              	.L28:
 788:boards/TMC4361A_eval.c **** 		}
 333              		.loc 1 788 4 view .LVU85
 334 00ec 9847     		blx	r3
 335              	.LVL30:
 336 00ee D9E7     		b	.L10
 337              	.LVL31:
 338              	.L16:
 765:boards/TMC4361A_eval.c **** 		{
 339              		.loc 1 765 3 is_stmt 1 view .LVU86
 340 00f0 184B     		ldr	r3, .L31
 341 00f2 194D     		ldr	r5, .L31+4
 342 00f4 DE68     		ldr	r6, [r3, #12]
 765:boards/TMC4361A_eval.c **** 		{
 343              		.loc 1 765 5 is_stmt 0 view .LVU87
 344 00f6 1468     		ldr	r4, [r2]
 345 00f8 2869     		ldr	r0, [r5, #16]
 346 00fa 3368     		ldr	r3, [r6]
 347 00fc 0CB1     		cbz	r4, .L23
 348              	.L30:
 783:boards/TMC4361A_eval.c **** 		}
 349              		.loc 1 783 4 is_stmt 1 view .LVU88
 350 00fe 1B69     		ldr	r3, [r3, #16]
 351 0100 E6E7     		b	.L29
 352              	.L23:
 771:boards/TMC4361A_eval.c **** 			HAL.IOs->config->setLow(Pins.HOME_REF);
 353              		.loc 1 771 4 view .LVU89
 354 0102 DB68     		ldr	r3, [r3, #12]
 355 0104 9847     		blx	r3
 356              	.LVL32:
 772:boards/TMC4361A_eval.c **** 		}
 357              		.loc 1 772 4 view .LVU90
 772:boards/TMC4361A_eval.c **** 		}
 358              		.loc 1 772 19 is_stmt 0 view .LVU91
 359 0106 3368     		ldr	r3, [r6]
 772:boards/TMC4361A_eval.c **** 		}
 360              		.loc 1 772 4 view .LVU92
 361 0108 2869     		ldr	r0, [r5, #16]
 362 010a 9B69     		ldr	r3, [r3, #24]
 363 010c EEE7     		b	.L28
 364              	.LVL33:
 365              	.L15:
 781:boards/TMC4361A_eval.c **** 		{
 366              		.loc 1 781 3 is_stmt 1 view .LVU93
 367 010e 114B     		ldr	r3, .L31
 368 0110 114D     		ldr	r5, .L31+4
 369 0112 DE68     		ldr	r6, [r3, #12]
 781:boards/TMC4361A_eval.c **** 		{
 370              		.loc 1 781 5 is_stmt 0 view .LVU94
 371 0114 1468     		ldr	r4, [r2]
 372 0116 3368     		ldr	r3, [r6]
 373 0118 A868     		ldr	r0, [r5, #8]
 374 011a 002C     		cmp	r4, #0
 375 011c EFD1     		bne	.L30
 787:boards/TMC4361A_eval.c **** 			HAL.IOs->config->setLow(Pins.FREEZE);
 376              		.loc 1 787 4 is_stmt 1 view .LVU95
 377 011e DB68     		ldr	r3, [r3, #12]
 378 0120 9847     		blx	r3
 379              	.LVL34:
 788:boards/TMC4361A_eval.c **** 		}
 380              		.loc 1 788 4 view .LVU96
 788:boards/TMC4361A_eval.c **** 		}
 381              		.loc 1 788 19 is_stmt 0 view .LVU97
 382 0122 3368     		ldr	r3, [r6]
 788:boards/TMC4361A_eval.c **** 		}
 383              		.loc 1 788 4 view .LVU98
 384 0124 A868     		ldr	r0, [r5, #8]
 385 0126 9B69     		ldr	r3, [r3, #24]
 386 0128 E0E7     		b	.L28
 387              	.LVL35:
 388              	.L13:
 792:boards/TMC4361A_eval.c **** 		if(!*value)
 389              		.loc 1 792 3 is_stmt 1 view .LVU99
 390              	.LBB211:
 391              	.LBI211:
  49:boards/TMC4361A_eval.c **** {
 392              		.loc 1 49 32 view .LVU100
  49:boards/TMC4361A_eval.c **** {
 393              		.loc 1 49 32 is_stmt 0 view .LVU101
 394              	.LBE211:
  51:boards/TMC4361A_eval.c **** 
 395              		.loc 1 51 2 is_stmt 1 view .LVU102
  53:boards/TMC4361A_eval.c **** }
 396              		.loc 1 53 2 view .LVU103
 792:boards/TMC4361A_eval.c **** 		if(!*value)
 397              		.loc 1 792 12 is_stmt 0 view .LVU104
 398 012a 0C48     		ldr	r0, .L31+8
 399 012c 0121     		movs	r1, #1
 400              	.LVL36:
 792:boards/TMC4361A_eval.c **** 		if(!*value)
 401              		.loc 1 792 12 view .LVU105
 402 012e FFF7FEFF 		bl	tmc4361A_calibrateClosedLoop
 403              	.LVL37:
 792:boards/TMC4361A_eval.c **** 		if(!*value)
 404              		.loc 1 792 10 view .LVU106
 405 0132 2060     		str	r0, [r4]
 793:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_NOT_DONE;
 406              		.loc 1 793 3 is_stmt 1 view .LVU107
 793:boards/TMC4361A_eval.c **** 			errors |= TMC_ERROR_NOT_DONE;
 407              		.loc 1 793 5 is_stmt 0 view .LVU108
 408 0134 0028     		cmp	r0, #0
 409 0136 CCD1     		bne	.L27
 794:boards/TMC4361A_eval.c **** 		break;
 410              		.loc 1 794 11 view .LVU109
 411 0138 2024     		movs	r4, #32
 412              	.LVL38:
 804:boards/TMC4361A_eval.c **** }
 413              		.loc 1 804 2 is_stmt 1 view .LVU110
 804:boards/TMC4361A_eval.c **** }
 414              		.loc 1 804 9 is_stmt 0 view .LVU111
 415 013a B3E7     		b	.L10
 416              	.LVL39:
 417              	.L17:
 797:boards/TMC4361A_eval.c **** 		Evalboards.ch1.config->reset();
 418              		.loc 1 797 3 is_stmt 1 view .LVU112
 797:boards/TMC4361A_eval.c **** 		Evalboards.ch1.config->reset();
 419              		.loc 1 797 17 is_stmt 0 view .LVU113
 420 013c 084C     		ldr	r4, .L31+12
 797:boards/TMC4361A_eval.c **** 		Evalboards.ch1.config->reset();
 421              		.loc 1 797 24 view .LVU114
 422 013e D4F89030 		ldr	r3, [r4, #144]
 797:boards/TMC4361A_eval.c **** 		Evalboards.ch1.config->reset();
 423              		.loc 1 797 3 view .LVU115
 424 0142 D3F80432 		ldr	r3, [r3, #516]
 425 0146 9847     		blx	r3
 426              	.LVL40:
 798:boards/TMC4361A_eval.c **** 		break;
 427              		.loc 1 798 3 is_stmt 1 view .LVU116
 798:boards/TMC4361A_eval.c **** 		break;
 428              		.loc 1 798 24 is_stmt 0 view .LVU117
 429 0148 A369     		ldr	r3, [r4, #24]
 798:boards/TMC4361A_eval.c **** 		break;
 430              		.loc 1 798 3 view .LVU118
 431 014a D3F80432 		ldr	r3, [r3, #516]
 432 014e 9847     		blx	r3
 433              	.LVL41:
 434 0150 BFE7     		b	.L27
 435              	.L32:
 436 0152 00BF     		.align	2
 437              	.L31:
 438 0154 00000000 		.word	HAL
 439 0158 00000000 		.word	.LANCHOR0
 440 015c 24000000 		.word	.LANCHOR0+36
 441 0160 00000000 		.word	Evalboards
 442              		.cfi_endproc
 443              	.LFE19:
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	periodicJob:
 452              	.LVL42:
 453              	.LFB17:
 715:boards/TMC4361A_eval.c **** 	tmc4361A_periodicJob(&TMC4361A, tick);
 454              		.loc 1 715 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 716:boards/TMC4361A_eval.c **** }
 459              		.loc 1 716 2 view .LVU120
 715:boards/TMC4361A_eval.c **** 	tmc4361A_periodicJob(&TMC4361A, tick);
 460              		.loc 1 715 1 is_stmt 0 view .LVU121
 461 0164 0146     		mov	r1, r0
 716:boards/TMC4361A_eval.c **** }
 462              		.loc 1 716 2 view .LVU122
 463 0166 0148     		ldr	r0, .L34
 464              	.LVL43:
 716:boards/TMC4361A_eval.c **** }
 465              		.loc 1 716 2 view .LVU123
 466 0168 FFF7FEBF 		b	tmc4361A_periodicJob
 467              	.LVL44:
 468              	.L35:
 716:boards/TMC4361A_eval.c **** }
 469              		.loc 1 716 2 view .LVU124
 470              		.align	2
 471              	.L34:
 472 016c 24000000 		.word	.LANCHOR0+36
 473              		.cfi_endproc
 474              	.LFE17:
 476              		.align	1
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu softvfp
 482              	readRegister:
 483              	.LVL45:
 484              	.LFB16:
 710:boards/TMC4361A_eval.c **** 	*value	= tmc4361A_readInt(motorToIC(motor), address);
 485              		.loc 1 710 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 711:boards/TMC4361A_eval.c **** }
 489              		.loc 1 711 2 view .LVU126
 490              	.LBB212:
 491              	.LBI212:
  49:boards/TMC4361A_eval.c **** {
 492              		.loc 1 49 32 view .LVU127
  49:boards/TMC4361A_eval.c **** {
 493              		.loc 1 49 32 is_stmt 0 view .LVU128
 494              	.LBE212:
  51:boards/TMC4361A_eval.c **** 
 495              		.loc 1 51 2 is_stmt 1 view .LVU129
  53:boards/TMC4361A_eval.c **** }
 496              		.loc 1 53 2 view .LVU130
 710:boards/TMC4361A_eval.c **** 	*value	= tmc4361A_readInt(motorToIC(motor), address);
 497              		.loc 1 710 1 is_stmt 0 view .LVU131
 498 0170 10B5     		push	{r4, lr}
 499              	.LCFI3:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 711:boards/TMC4361A_eval.c **** }
 503              		.loc 1 711 11 view .LVU132
 504 0172 0348     		ldr	r0, .L37
 505              	.LVL46:
 710:boards/TMC4361A_eval.c **** 	*value	= tmc4361A_readInt(motorToIC(motor), address);
 506              		.loc 1 710 1 view .LVU133
 507 0174 1446     		mov	r4, r2
 711:boards/TMC4361A_eval.c **** }
 508              		.loc 1 711 11 view .LVU134
 509 0176 FFF7FEFF 		bl	tmc4361A_readInt
 510              	.LVL47:
 711:boards/TMC4361A_eval.c **** }
 511              		.loc 1 711 9 view .LVU135
 512 017a 2060     		str	r0, [r4]
 712:boards/TMC4361A_eval.c **** 
 513              		.loc 1 712 1 view .LVU136
 514 017c 10BD     		pop	{r4, pc}
 515              	.LVL48:
 516              	.L38:
 712:boards/TMC4361A_eval.c **** 
 517              		.loc 1 712 1 view .LVU137
 518 017e 00BF     		.align	2
 519              	.L37:
 520 0180 24000000 		.word	.LANCHOR0+36
 521              		.cfi_endproc
 522              	.LFE16:
 524              		.align	1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu softvfp
 530              	writeRegister:
 531              	.LVL49:
 532              	.LFB15:
 679:boards/TMC4361A_eval.c **** 	// Notify driver shadows about register changes made via cover
 533              		.loc 1 679 1 is_stmt 1 view -0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 681:boards/TMC4361A_eval.c **** 	switch(address) {
 537              		.loc 1 681 2 view .LVU139
 682:boards/TMC4361A_eval.c **** 	case TMC4361A_COVER_HIGH_WR:
 538              		.loc 1 682 2 view .LVU140
 539 0184 6C29     		cmp	r1, #108
 679:boards/TMC4361A_eval.c **** 	// Notify driver shadows about register changes made via cover
 540              		.loc 1 679 1 is_stmt 0 view .LVU141
 541 0186 70B5     		push	{r4, r5, r6, lr}
 542              	.LCFI4:
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 4, -16
 545              		.cfi_offset 5, -12
 546              		.cfi_offset 6, -8
 547              		.cfi_offset 14, -4
 679:boards/TMC4361A_eval.c **** 	// Notify driver shadows about register changes made via cover
 548              		.loc 1 679 1 view .LVU142
 549 0188 0D46     		mov	r5, r1
 550 018a 1446     		mov	r4, r2
 682:boards/TMC4361A_eval.c **** 	case TMC4361A_COVER_HIGH_WR:
 551              		.loc 1 682 2 view .LVU143
 552 018c 23D0     		beq	.L40
 553 018e 6D29     		cmp	r1, #109
 554 0190 17D0     		beq	.L41
 555 0192 0629     		cmp	r1, #6
 556 0194 18D1     		bne	.L43
 696:boards/TMC4361A_eval.c **** 		case ID_TMC2130:
 557              		.loc 1 696 3 is_stmt 1 view .LVU144
 696:boards/TMC4361A_eval.c **** 		case ID_TMC2130:
 558              		.loc 1 696 24 is_stmt 0 view .LVU145
 559 0196 214B     		ldr	r3, .L48
 560 0198 93F87C20 		ldrb	r2, [r3, #124]	@ zero_extendqisi2
 561              	.LVL50:
 696:boards/TMC4361A_eval.c **** 		case ID_TMC2130:
 562              		.loc 1 696 24 view .LVU146
 563 019c 032A     		cmp	r2, #3
 564 019e 2DD0     		beq	.L45
 565 01a0 0B2A     		cmp	r2, #11
 566 01a2 11D1     		bne	.L43
 701:boards/TMC4361A_eval.c **** 			break;
 567              		.loc 1 701 4 is_stmt 1 view .LVU147
 568 01a4 9E6F     		ldr	r6, [r3, #120]
 569 01a6 1021     		movs	r1, #16
 570              	.LVL51:
 701:boards/TMC4361A_eval.c **** 			break;
 571              		.loc 1 701 4 is_stmt 0 view .LVU148
 572 01a8 3046     		mov	r0, r6
 573              	.LVL52:
 701:boards/TMC4361A_eval.c **** 			break;
 574              		.loc 1 701 4 view .LVU149
 575 01aa FFF7FEFF 		bl	tmc2160_readInt
 576              	.LVL53:
 577 01ae C4F30462 		ubfx	r2, r4, #24, #5
 578 01b2 20F01F00 		bic	r0, r0, #31
 579 01b6 0243     		orrs	r2, r2, r0
 580 01b8 1021     		movs	r1, #16
 581 01ba 3046     		mov	r0, r6
 582 01bc FFF7FEFF 		bl	tmc2160_writeInt
 583              	.LVL54:
 702:boards/TMC4361A_eval.c **** 		}
 584              		.loc 1 702 4 is_stmt 1 view .LVU150
 585 01c0 02E0     		b	.L43
 586              	.LVL55:
 587              	.L41:
 684:boards/TMC4361A_eval.c **** 		break;
 588              		.loc 1 684 3 view .LVU151
 684:boards/TMC4361A_eval.c **** 		break;
 589              		.loc 1 684 8 is_stmt 0 view .LVU152
 590 01c2 174B     		ldr	r3, .L48+4
 591 01c4 C3F8BC22 		str	r2, [r3, #700]
 685:boards/TMC4361A_eval.c **** 	case TMC4361A_COVER_LOW_WR:
 592              		.loc 1 685 3 is_stmt 1 view .LVU153
 593              	.LVL56:
 594              	.L43:
 706:boards/TMC4361A_eval.c **** }
 595              		.loc 1 706 2 view .LVU154
 596              	.LBB213:
 597              	.LBI213:
  49:boards/TMC4361A_eval.c **** {
 598              		.loc 1 49 32 view .LVU155
  49:boards/TMC4361A_eval.c **** {
 599              		.loc 1 49 32 is_stmt 0 view .LVU156
 600              	.LBE213:
  51:boards/TMC4361A_eval.c **** 
 601              		.loc 1 51 2 is_stmt 1 view .LVU157
  53:boards/TMC4361A_eval.c **** }
 602              		.loc 1 53 2 view .LVU158
 706:boards/TMC4361A_eval.c **** }
 603              		.loc 1 706 2 is_stmt 0 view .LVU159
 604 01c8 2246     		mov	r2, r4
 605 01ca 2946     		mov	r1, r5
 606 01cc 1548     		ldr	r0, .L48+8
 707:boards/TMC4361A_eval.c **** 
 607              		.loc 1 707 1 view .LVU160
 608 01ce BDE87040 		pop	{r4, r5, r6, lr}
 609              	.LCFI5:
 610              		.cfi_remember_state
 611              		.cfi_restore 14
 612              		.cfi_restore 6
 613              		.cfi_restore 5
 614              		.cfi_restore 4
 615              		.cfi_def_cfa_offset 0
 616              	.LVL57:
 706:boards/TMC4361A_eval.c **** }
 617              		.loc 1 706 2 view .LVU161
 618 01d2 FFF7FEBF 		b	tmc4361A_writeInt
 619              	.LVL58:
 620              	.L40:
 621              	.LCFI6:
 622              		.cfi_restore_state
 687:boards/TMC4361A_eval.c **** 			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
 623              		.loc 1 687 3 is_stmt 1 view .LVU162
 624 01d6 1149     		ldr	r1, .L48
 625              	.LVL59:
 687:boards/TMC4361A_eval.c **** 			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
 626              		.loc 1 687 3 is_stmt 0 view .LVU163
 627 01d8 D1F8C430 		ldr	r3, [r1, #196]
 687:boards/TMC4361A_eval.c **** 			Evalboards.ch2.writeRegister(motor, TMC2660_ADDRESS(value), TMC2660_VALUE(value));
 628              		.loc 1 687 5 view .LVU164
 629 01dc 91F87C10 		ldrb	r1, [r1, #124]	@ zero_extendqisi2
 630 01e0 0129     		cmp	r1, #1
 688:boards/TMC4361A_eval.c **** 		else // All other drivers -> 32 bit registers, 8 bit address
 631              		.loc 1 688 4 is_stmt 1 view .LVU165
 690:boards/TMC4361A_eval.c **** 		break;
 632              		.loc 1 690 40 is_stmt 0 view .LVU166
 633 01e2 19BF     		ittee	ne
 634 01e4 0E49     		ldrne	r1, .L48+4
 635 01e6 D1F8BC12 		ldrne	r1, [r1, #700]
 688:boards/TMC4361A_eval.c **** 		else // All other drivers -> 32 bit registers, 8 bit address
 636              		.loc 1 688 4 view .LVU167
 637 01ea C2F31302 		ubfxeq	r2, r2, #0, #20
 638              	.LVL60:
 688:boards/TMC4361A_eval.c **** 		else // All other drivers -> 32 bit registers, 8 bit address
 639              		.loc 1 688 4 view .LVU168
 640 01ee C4F30251 		ubfxeq	r1, r4, #20, #3
 690:boards/TMC4361A_eval.c **** 		break;
 641              		.loc 1 690 4 is_stmt 1 view .LVU169
 642 01f2 18BF     		it	ne
 643 01f4 01F07F01 		andne	r1, r1, #127
 644 01f8 9847     		blx	r3
 645              	.LVL61:
 690:boards/TMC4361A_eval.c **** 		break;
 646              		.loc 1 690 4 is_stmt 0 view .LVU170
 647 01fa E5E7     		b	.L43
 648              	.LVL62:
 649              	.L45:
 698:boards/TMC4361A_eval.c **** 			break;
 650              		.loc 1 698 4 is_stmt 1 view .LVU171
 651 01fc 9E6F     		ldr	r6, [r3, #120]
 652 01fe 1021     		movs	r1, #16
 653              	.LVL63:
 698:boards/TMC4361A_eval.c **** 			break;
 654              		.loc 1 698 4 is_stmt 0 view .LVU172
 655 0200 3046     		mov	r0, r6
 656              	.LVL64:
 698:boards/TMC4361A_eval.c **** 			break;
 657              		.loc 1 698 4 view .LVU173
 658 0202 FFF7FEFF 		bl	tmc2130_readInt
 659              	.LVL65:
 660 0206 C4F30462 		ubfx	r2, r4, #24, #5
 661 020a 20F01F00 		bic	r0, r0, #31
 662 020e 0243     		orrs	r2, r2, r0
 663 0210 1021     		movs	r1, #16
 664 0212 3046     		mov	r0, r6
 665 0214 FFF7FEFF 		bl	tmc2130_writeInt
 666              	.LVL66:
 699:boards/TMC4361A_eval.c **** 		case ID_TMC2160:
 667              		.loc 1 699 4 is_stmt 1 view .LVU174
 668 0218 D6E7     		b	.L43
 669              	.L49:
 670 021a 00BF     		.align	2
 671              	.L48:
 672 021c 00000000 		.word	Evalboards
 673 0220 00000000 		.word	.LANCHOR0
 674 0224 24000000 		.word	.LANCHOR0+36
 675              		.cfi_endproc
 676              	.LFE15:
 678              		.align	1
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu softvfp
 684              	moveBy:
 685              	.LVL67:
 686              	.LFB11:
 170:boards/TMC4361A_eval.c **** 	tmc4361A_moveBy(motorToIC(motor), ticks, vmax_position);
 687              		.loc 1 170 1 view -0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 171:boards/TMC4361A_eval.c **** 
 691              		.loc 1 171 2 view .LVU176
 692              	.LBB214:
 693              	.LBI214:
  49:boards/TMC4361A_eval.c **** {
 694              		.loc 1 49 32 view .LVU177
  49:boards/TMC4361A_eval.c **** {
 695              		.loc 1 49 32 is_stmt 0 view .LVU178
 696              	.LBE214:
  51:boards/TMC4361A_eval.c **** 
 697              		.loc 1 51 2 is_stmt 1 view .LVU179
  53:boards/TMC4361A_eval.c **** }
 698              		.loc 1 53 2 view .LVU180
 170:boards/TMC4361A_eval.c **** 	tmc4361A_moveBy(motorToIC(motor), ticks, vmax_position);
 699              		.loc 1 170 1 is_stmt 0 view .LVU181
 700 0228 08B5     		push	{r3, lr}
 701              	.LCFI7:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 3, -8
 704              		.cfi_offset 14, -4
 171:boards/TMC4361A_eval.c **** 
 705              		.loc 1 171 2 view .LVU182
 706 022a 0448     		ldr	r0, .L51
 707              	.LVL68:
 171:boards/TMC4361A_eval.c **** 
 708              		.loc 1 171 2 view .LVU183
 709 022c D0F8C022 		ldr	r2, [r0, #704]
 710 0230 2430     		adds	r0, r0, #36
 711 0232 FFF7FEFF 		bl	tmc4361A_moveBy
 712              	.LVL69:
 173:boards/TMC4361A_eval.c **** }
 713              		.loc 1 173 2 is_stmt 1 view .LVU184
 174:boards/TMC4361A_eval.c **** // <= Functions forwarded to API
 714              		.loc 1 174 1 is_stmt 0 view .LVU185
 715 0236 0020     		movs	r0, #0
 716 0238 08BD     		pop	{r3, pc}
 717              	.L52:
 718 023a 00BF     		.align	2
 719              	.L51:
 720 023c 00000000 		.word	.LANCHOR0
 721              		.cfi_endproc
 722              	.LFE11:
 724              		.align	1
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu softvfp
 730              	moveTo:
 731              	.LVL70:
 732              	.LFB10:
 163:boards/TMC4361A_eval.c **** 	tmc4361A_moveTo(motorToIC(motor), position, vmax_position);
 733              		.loc 1 163 1 is_stmt 1 view -0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 164:boards/TMC4361A_eval.c **** 
 737              		.loc 1 164 2 view .LVU187
 738              	.LBB215:
 739              	.LBI215:
  49:boards/TMC4361A_eval.c **** {
 740              		.loc 1 49 32 view .LVU188
  49:boards/TMC4361A_eval.c **** {
 741              		.loc 1 49 32 is_stmt 0 view .LVU189
 742              	.LBE215:
  51:boards/TMC4361A_eval.c **** 
 743              		.loc 1 51 2 is_stmt 1 view .LVU190
  53:boards/TMC4361A_eval.c **** }
 744              		.loc 1 53 2 view .LVU191
 163:boards/TMC4361A_eval.c **** 	tmc4361A_moveTo(motorToIC(motor), position, vmax_position);
 745              		.loc 1 163 1 is_stmt 0 view .LVU192
 746 0240 08B5     		push	{r3, lr}
 747              	.LCFI8:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
 164:boards/TMC4361A_eval.c **** 
 751              		.loc 1 164 2 view .LVU193
 752 0242 0448     		ldr	r0, .L54
 753              	.LVL71:
 164:boards/TMC4361A_eval.c **** 
 754              		.loc 1 164 2 view .LVU194
 755 0244 D0F8C022 		ldr	r2, [r0, #704]
 756 0248 2430     		adds	r0, r0, #36
 757 024a FFF7FEFF 		bl	tmc4361A_moveTo
 758              	.LVL72:
 166:boards/TMC4361A_eval.c **** }
 759              		.loc 1 166 2 is_stmt 1 view .LVU195
 167:boards/TMC4361A_eval.c **** 
 760              		.loc 1 167 1 is_stmt 0 view .LVU196
 761 024e 0020     		movs	r0, #0
 762 0250 08BD     		pop	{r3, pc}
 763              	.L55:
 764 0252 00BF     		.align	2
 765              	.L54:
 766 0254 00000000 		.word	.LANCHOR0
 767              		.cfi_endproc
 768              	.LFE10:
 770              		.align	1
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu softvfp
 776              	handleParameter:
 777              	.LVL73:
 778              	.LFB12:
 178:boards/TMC4361A_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 779              		.loc 1 178 1 is_stmt 1 view -0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 783              		.loc 1 179 2 view .LVU198
 180:boards/TMC4361A_eval.c **** 
 784              		.loc 1 180 2 view .LVU199
 182:boards/TMC4361A_eval.c **** 		return TMC_ERROR_MOTOR;
 785              		.loc 1 182 2 view .LVU200
 178:boards/TMC4361A_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 786              		.loc 1 178 1 is_stmt 0 view .LVU201
 787 0258 70B5     		push	{r4, r5, r6, lr}
 788              	.LCFI9:
 789              		.cfi_def_cfa_offset 16
 790              		.cfi_offset 4, -16
 791              		.cfi_offset 5, -12
 792              		.cfi_offset 6, -8
 793              		.cfi_offset 14, -4
 178:boards/TMC4361A_eval.c **** 	uint32_t errors = TMC_ERROR_NONE;
 794              		.loc 1 178 1 view .LVU202
 795 025a 0546     		mov	r5, r0
 796 025c 1E46     		mov	r6, r3
 182:boards/TMC4361A_eval.c **** 		return TMC_ERROR_MOTOR;
 797              		.loc 1 182 4 view .LVU203
 798 025e 0C46     		mov	r4, r1
 799 0260 0029     		cmp	r1, #0
 800 0262 40F08783 		bne	.L158
 185:boards/TMC4361A_eval.c **** 	{
 801              		.loc 1 185 2 is_stmt 1 view .LVU204
 802 0266 8A2A     		cmp	r2, #138
 803 0268 4BD8     		bhi	.L58
 804 026a 6B2A     		cmp	r2, #107
 805 026c 03D8     		bhi	.L59
 806 026e 1B2A     		cmp	r2, #27
 807 0270 26D9     		bls	.L181
 808 0272 0425     		movs	r5, #4
 809 0274 50E0     		b	.L56
 810              	.L59:
 811 0276 6C3A     		subs	r2, r2, #108
 812              	.LVL74:
 185:boards/TMC4361A_eval.c **** 	{
 813              		.loc 1 185 2 is_stmt 0 view .LVU205
 814 0278 1E2A     		cmp	r2, #30
 815 027a 00F27D83 		bhi	.L160
 816 027e DFE812F0 		tbh	[pc, r2, lsl #1]
 817              	.LVL75:
 818              	.L62:
 819 0282 A701     		.2byte	(.L85-.L62)/2
 820 0284 B501     		.2byte	(.L84-.L62)/2
 821 0286 C301     		.2byte	(.L83-.L62)/2
 822 0288 D801     		.2byte	(.L82-.L62)/2
 823 028a EE01     		.2byte	(.L81-.L62)/2
 824 028c FC01     		.2byte	(.L80-.L62)/2
 825 028e 1002     		.2byte	(.L79-.L62)/2
 826 0290 2702     		.2byte	(.L78-.L62)/2
 827 0292 3502     		.2byte	(.L77-.L62)/2
 828 0294 4302     		.2byte	(.L76-.L62)/2
 829 0296 5A02     		.2byte	(.L75-.L62)/2
 830 0298 7002     		.2byte	(.L74-.L62)/2
 831 029a 7E02     		.2byte	(.L73-.L62)/2
 832 029c 8C02     		.2byte	(.L72-.L62)/2
 833 029e 7B03     		.2byte	(.L160-.L62)/2
 834 02a0 7B03     		.2byte	(.L160-.L62)/2
 835 02a2 9A02     		.2byte	(.L71-.L62)/2
 836 02a4 A802     		.2byte	(.L70-.L62)/2
 837 02a6 B602     		.2byte	(.L69-.L62)/2
 838 02a8 7B03     		.2byte	(.L160-.L62)/2
 839 02aa 7B03     		.2byte	(.L160-.L62)/2
 840 02ac CE02     		.2byte	(.L68-.L62)/2
 841 02ae 7B03     		.2byte	(.L160-.L62)/2
 842 02b0 7B03     		.2byte	(.L160-.L62)/2
 843 02b2 EA02     		.2byte	(.L67-.L62)/2
 844 02b4 F302     		.2byte	(.L66-.L62)/2
 845 02b6 0003     		.2byte	(.L65-.L62)/2
 846 02b8 7B03     		.2byte	(.L160-.L62)/2
 847 02ba 0E03     		.2byte	(.L64-.L62)/2
 848 02bc 2203     		.2byte	(.L63-.L62)/2
 849 02be 3803     		.2byte	(.L61-.L62)/2
 850              		.p2align 1
 851              	.L181:
 185:boards/TMC4361A_eval.c **** 	{
 852              		.loc 1 185 2 view .LVU206
 853 02c0 1B2A     		cmp	r2, #27
 854 02c2 00F25B83 		bhi	.L161
 855 02c6 DFE812F0 		tbh	[pc, r2, lsl #1]
 856              	.LVL76:
 857              	.L87:
 858 02ca 2E00     		.2byte	(.L107-.L87)/2
 859 02cc 3C00     		.2byte	(.L106-.L87)/2
 860 02ce 4A00     		.2byte	(.L105-.L87)/2
 861 02d0 5C00     		.2byte	(.L104-.L87)/2
 862 02d2 6500     		.2byte	(.L103-.L87)/2
 863 02d4 8100     		.2byte	(.L102-.L87)/2
 864 02d6 5903     		.2byte	(.L161-.L87)/2
 865 02d8 5903     		.2byte	(.L161-.L87)/2
 866 02da 9500     		.2byte	(.L101-.L87)/2
 867 02dc 5903     		.2byte	(.L161-.L87)/2
 868 02de 5903     		.2byte	(.L161-.L87)/2
 869 02e0 5903     		.2byte	(.L161-.L87)/2
 870 02e2 5903     		.2byte	(.L161-.L87)/2
 871 02e4 5903     		.2byte	(.L161-.L87)/2
 872 02e6 A000     		.2byte	(.L100-.L87)/2
 873 02e8 B300     		.2byte	(.L99-.L87)/2
 874 02ea C100     		.2byte	(.L98-.L87)/2
 875 02ec D500     		.2byte	(.L97-.L87)/2
 876 02ee E900     		.2byte	(.L96-.L87)/2
 877 02f0 F700     		.2byte	(.L95-.L87)/2
 878 02f2 0B01     		.2byte	(.L94-.L87)/2
 879 02f4 1901     		.2byte	(.L93-.L87)/2
 880 02f6 2B01     		.2byte	(.L92-.L87)/2
 881 02f8 3901     		.2byte	(.L91-.L87)/2
 882 02fa 4701     		.2byte	(.L90-.L87)/2
 883 02fc 5501     		.2byte	(.L89-.L87)/2
 884 02fe 6301     		.2byte	(.L88-.L87)/2
 885 0300 7501     		.2byte	(.L86-.L87)/2
 886              		.p2align 1
 887              	.L58:
 185:boards/TMC4361A_eval.c **** 	{
 888              		.loc 1 185 2 view .LVU207
 889 0302 D42A     		cmp	r2, #212
 890 0304 00F01983 		beq	.L108
 891 0308 08D8     		bhi	.L109
 892 030a C82A     		cmp	r2, #200
 893 030c 00F0B581 		beq	.L80
 894 0310 D12A     		cmp	r2, #209
 895 0312 00F00483 		beq	.L110
 896 0316 0425     		movs	r5, #4
 897              	.LVL77:
 898              	.L56:
 666:boards/TMC4361A_eval.c **** 
 899              		.loc 1 666 1 view .LVU208
 900 0318 2846     		mov	r0, r5
 901 031a 70BD     		pop	{r4, r5, r6, pc}
 902              	.LVL78:
 903              	.L109:
 185:boards/TMC4361A_eval.c **** 	{
 904              		.loc 1 185 2 view .LVU209
 905 031c D62A     		cmp	r2, #214
 906 031e 00F01983 		beq	.L111
 907 0322 0425     		movs	r5, #4
 908 0324 F8E7     		b	.L56
 909              	.LVL79:
 910              	.L107:
 189:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_X_TARGET);
 911              		.loc 1 189 3 is_stmt 1 view .LVU210
 189:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_X_TARGET);
 912              		.loc 1 189 5 is_stmt 0 view .LVU211
 913 0326 28B9     		cbnz	r0, .L112
 190:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 914              		.loc 1 190 4 is_stmt 1 view .LVU212
 915              	.LBB216:
 916              	.LBI216:
  49:boards/TMC4361A_eval.c **** {
 917              		.loc 1 49 32 view .LVU213
 918              	.LVL80:
  49:boards/TMC4361A_eval.c **** {
 919              		.loc 1 49 32 is_stmt 0 view .LVU214
 920              	.LBE216:
  51:boards/TMC4361A_eval.c **** 
 921              		.loc 1 51 2 is_stmt 1 view .LVU215
  53:boards/TMC4361A_eval.c **** }
 922              		.loc 1 53 2 view .LVU216
 190:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 923              		.loc 1 190 13 is_stmt 0 view .LVU217
 924 0328 A048     		ldr	r0, .L182
 925              	.LVL81:
 190:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 926              		.loc 1 190 13 view .LVU218
 927 032a 3721     		movs	r1, #55
 928              	.LVL82:
 190:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 929              		.loc 1 190 13 view .LVU219
 930 032c FFF7FEFF 		bl	tmc4361A_readInt
 931              	.LVL83:
 190:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 932              		.loc 1 190 11 view .LVU220
 933 0330 3060     		str	r0, [r6]
 934 0332 F1E7     		b	.L56
 935              	.LVL84:
 936              	.L112:
 191:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_X_TARGET, *value);
 937              		.loc 1 191 10 is_stmt 1 view .LVU221
 192:boards/TMC4361A_eval.c **** 		}
 938              		.loc 1 192 4 view .LVU222
 939              	.LBB217:
 940              	.LBI217:
  49:boards/TMC4361A_eval.c **** {
 941              		.loc 1 49 32 view .LVU223
  49:boards/TMC4361A_eval.c **** {
 942              		.loc 1 49 32 is_stmt 0 view .LVU224
 943              	.LBE217:
  51:boards/TMC4361A_eval.c **** 
 944              		.loc 1 51 2 is_stmt 1 view .LVU225
  53:boards/TMC4361A_eval.c **** }
 945              		.loc 1 53 2 view .LVU226
 192:boards/TMC4361A_eval.c **** 		}
 946              		.loc 1 192 4 is_stmt 0 view .LVU227
 947 0334 3268     		ldr	r2, [r6]
 948              	.LVL85:
 192:boards/TMC4361A_eval.c **** 		}
 949              		.loc 1 192 4 view .LVU228
 950 0336 9D48     		ldr	r0, .L182
 951              	.LVL86:
 192:boards/TMC4361A_eval.c **** 		}
 952              		.loc 1 192 4 view .LVU229
 953 0338 3721     		movs	r1, #55
 954              	.LVL87:
 192:boards/TMC4361A_eval.c **** 		}
 955              		.loc 1 192 4 view .LVU230
 956 033a FFF7FEFF 		bl	tmc4361A_writeInt
 957              	.LVL88:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 958              		.loc 1 179 11 view .LVU231
 959 033e 0025     		movs	r5, #0
 960 0340 EAE7     		b	.L56
 961              	.LVL89:
 962              	.L106:
 197:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_XACTUAL);
 963              		.loc 1 197 3 is_stmt 1 view .LVU232
 197:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_XACTUAL);
 964              		.loc 1 197 5 is_stmt 0 view .LVU233
 965 0342 28B9     		cbnz	r0, .L113
 198:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 966              		.loc 1 198 4 is_stmt 1 view .LVU234
 967              	.LBB218:
 968              	.LBI218:
  49:boards/TMC4361A_eval.c **** {
 969              		.loc 1 49 32 view .LVU235
 970              	.LVL90:
  49:boards/TMC4361A_eval.c **** {
 971              		.loc 1 49 32 is_stmt 0 view .LVU236
 972              	.LBE218:
  51:boards/TMC4361A_eval.c **** 
 973              		.loc 1 51 2 is_stmt 1 view .LVU237
  53:boards/TMC4361A_eval.c **** }
 974              		.loc 1 53 2 view .LVU238
 198:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 975              		.loc 1 198 13 is_stmt 0 view .LVU239
 976 0344 9948     		ldr	r0, .L182
 977              	.LVL91:
 198:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 978              		.loc 1 198 13 view .LVU240
 979 0346 2121     		movs	r1, #33
 980              	.LVL92:
 198:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 981              		.loc 1 198 13 view .LVU241
 982 0348 FFF7FEFF 		bl	tmc4361A_readInt
 983              	.LVL93:
 198:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 984              		.loc 1 198 11 view .LVU242
 985 034c 3060     		str	r0, [r6]
 986 034e E3E7     		b	.L56
 987              	.LVL94:
 988              	.L113:
 199:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_XACTUAL, *value);
 989              		.loc 1 199 10 is_stmt 1 view .LVU243
 200:boards/TMC4361A_eval.c **** 		}
 990              		.loc 1 200 4 view .LVU244
 991              	.LBB219:
 992              	.LBI219:
  49:boards/TMC4361A_eval.c **** {
 993              		.loc 1 49 32 view .LVU245
  49:boards/TMC4361A_eval.c **** {
 994              		.loc 1 49 32 is_stmt 0 view .LVU246
 995              	.LBE219:
  51:boards/TMC4361A_eval.c **** 
 996              		.loc 1 51 2 is_stmt 1 view .LVU247
  53:boards/TMC4361A_eval.c **** }
 997              		.loc 1 53 2 view .LVU248
 200:boards/TMC4361A_eval.c **** 		}
 998              		.loc 1 200 4 is_stmt 0 view .LVU249
 999 0350 3268     		ldr	r2, [r6]
 1000              	.LVL95:
 200:boards/TMC4361A_eval.c **** 		}
 1001              		.loc 1 200 4 view .LVU250
 1002 0352 9648     		ldr	r0, .L182
 1003              	.LVL96:
 200:boards/TMC4361A_eval.c **** 		}
 1004              		.loc 1 200 4 view .LVU251
 1005 0354 2121     		movs	r1, #33
 1006              	.LVL97:
 200:boards/TMC4361A_eval.c **** 		}
 1007              		.loc 1 200 4 view .LVU252
 1008 0356 FFF7FEFF 		bl	tmc4361A_writeInt
 1009              	.LVL98:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1010              		.loc 1 179 11 view .LVU253
 1011 035a 0025     		movs	r5, #0
 1012 035c DCE7     		b	.L56
 1013              	.LVL99:
 1014              	.L105:
 205:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 1015              		.loc 1 205 3 is_stmt 1 view .LVU254
 205:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 1016              		.loc 1 205 5 is_stmt 0 view .LVU255
 1017 035e 30B9     		cbnz	r0, .L114
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1018              		.loc 1 206 4 is_stmt 1 view .LVU256
 1019              	.LBB220:
 1020              	.LBI220:
  49:boards/TMC4361A_eval.c **** {
 1021              		.loc 1 49 32 view .LVU257
 1022              	.LVL100:
  49:boards/TMC4361A_eval.c **** {
 1023              		.loc 1 49 32 is_stmt 0 view .LVU258
 1024              	.LBE220:
  51:boards/TMC4361A_eval.c **** 
 1025              		.loc 1 51 2 is_stmt 1 view .LVU259
  53:boards/TMC4361A_eval.c **** }
 1026              		.loc 1 53 2 view .LVU260
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1027              		.loc 1 206 13 is_stmt 0 view .LVU261
 1028 0360 9248     		ldr	r0, .L182
 1029              	.LVL101:
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1030              		.loc 1 206 13 view .LVU262
 1031 0362 2421     		movs	r1, #36
 1032              	.LVL102:
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1033              		.loc 1 206 13 view .LVU263
 1034 0364 FFF7FEFF 		bl	tmc4361A_readInt
 1035              	.LVL103:
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1036              		.loc 1 206 63 view .LVU264
 1037 0368 0012     		asrs	r0, r0, #8
 206:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1038              		.loc 1 206 11 view .LVU265
 1039 036a 3060     		str	r0, [r6]
 1040 036c D4E7     		b	.L56
 1041              	.LVL104:
 1042              	.L114:
 207:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(*value));
 1043              		.loc 1 207 10 is_stmt 1 view .LVU266
 208:boards/TMC4361A_eval.c **** 		}
 1044              		.loc 1 208 4 view .LVU267
 1045              	.LBB221:
 1046              	.LBI221:
  49:boards/TMC4361A_eval.c **** {
 1047              		.loc 1 49 32 view .LVU268
  49:boards/TMC4361A_eval.c **** {
 1048              		.loc 1 49 32 is_stmt 0 view .LVU269
 1049              	.LBE221:
  51:boards/TMC4361A_eval.c **** 
 1050              		.loc 1 51 2 is_stmt 1 view .LVU270
  53:boards/TMC4361A_eval.c **** }
 1051              		.loc 1 53 2 view .LVU271
 208:boards/TMC4361A_eval.c **** 		}
 1052              		.loc 1 208 4 is_stmt 0 view .LVU272
 1053 036e 3068     		ldr	r0, [r6]
 1054              	.LVL105:
 208:boards/TMC4361A_eval.c **** 		}
 1055              		.loc 1 208 4 view .LVU273
 1056 0370 FFF7FEFF 		bl	tmc4361A_discardVelocityDecimals
 1057              	.LVL106:
 208:boards/TMC4361A_eval.c **** 		}
 1058              		.loc 1 208 4 view .LVU274
 1059 0374 2421     		movs	r1, #36
 1060 0376 0246     		mov	r2, r0
 1061 0378 8C48     		ldr	r0, .L182
 1062 037a FFF7FEFF 		bl	tmc4361A_writeInt
 1063              	.LVL107:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1064              		.loc 1 179 11 view .LVU275
 1065 037e 0025     		movs	r5, #0
 1066 0380 CAE7     		b	.L56
 1067              	.LVL108:
 1068              	.L104:
 213:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VACTUAL);
 1069              		.loc 1 213 3 is_stmt 1 view .LVU276
 213:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VACTUAL);
 1070              		.loc 1 213 5 is_stmt 0 view .LVU277
 1071 0382 0028     		cmp	r0, #0
 1072 0384 40F0FC82 		bne	.L162
 214:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1073              		.loc 1 214 4 is_stmt 1 view .LVU278
 1074              	.LBB222:
 1075              	.LBI222:
  49:boards/TMC4361A_eval.c **** {
 1076              		.loc 1 49 32 view .LVU279
 1077              	.LVL109:
  49:boards/TMC4361A_eval.c **** {
 1078              		.loc 1 49 32 is_stmt 0 view .LVU280
 1079              	.LBE222:
  51:boards/TMC4361A_eval.c **** 
 1080              		.loc 1 51 2 is_stmt 1 view .LVU281
  53:boards/TMC4361A_eval.c **** }
 1081              		.loc 1 53 2 view .LVU282
 214:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1082              		.loc 1 214 13 is_stmt 0 view .LVU283
 1083 0388 8848     		ldr	r0, .L182
 1084              	.LVL110:
 214:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1085              		.loc 1 214 13 view .LVU284
 1086 038a 2221     		movs	r1, #34
 1087              	.LVL111:
 214:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1088              		.loc 1 214 13 view .LVU285
 1089 038c FFF7FEFF 		bl	tmc4361A_readInt
 1090              	.LVL112:
 214:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1091              		.loc 1 214 11 view .LVU286
 1092 0390 3060     		str	r0, [r6]
 1093 0392 C1E7     		b	.L56
 1094              	.LVL113:
 1095              	.L103:
 221:boards/TMC4361A_eval.c **** 			*value = vmax_position;
 1096              		.loc 1 221 3 is_stmt 1 view .LVU287
 1097 0394 864C     		ldr	r4, .L182+4
 221:boards/TMC4361A_eval.c **** 			*value = vmax_position;
 1098              		.loc 1 221 5 is_stmt 0 view .LVU288
 1099 0396 18B9     		cbnz	r0, .L115
 222:boards/TMC4361A_eval.c **** 			//*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 1100              		.loc 1 222 4 is_stmt 1 view .LVU289
 222:boards/TMC4361A_eval.c **** 			//*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VMAX) >> 8;
 1101              		.loc 1 222 11 is_stmt 0 view .LVU290
 1102 0398 D4F8C032 		ldr	r3, [r4, #704]
 1103 039c 3360     		str	r3, [r6]
 1104 039e BBE7     		b	.L56
 1105              	.L115:
 224:boards/TMC4361A_eval.c **** 			vmax_position = *value;
 1106              		.loc 1 224 10 is_stmt 1 view .LVU291
 225:boards/TMC4361A_eval.c **** 			// Write VMAX if already in position mode
 1107              		.loc 1 225 4 view .LVU292
 225:boards/TMC4361A_eval.c **** 			// Write VMAX if already in position mode
 1108              		.loc 1 225 18 is_stmt 0 view .LVU293
 1109 03a0 3368     		ldr	r3, [r6]
 1110 03a2 C4F8C032 		str	r3, [r4, #704]
 227:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 1111              		.loc 1 227 4 is_stmt 1 view .LVU294
 1112              	.LBB223:
 1113              	.LBI223:
  49:boards/TMC4361A_eval.c **** {
 1114              		.loc 1 49 32 view .LVU295
 1115              	.LVL114:
  49:boards/TMC4361A_eval.c **** {
 1116              		.loc 1 49 32 is_stmt 0 view .LVU296
 1117              	.LBE223:
  51:boards/TMC4361A_eval.c **** 
 1118              		.loc 1 51 2 is_stmt 1 view .LVU297
  53:boards/TMC4361A_eval.c **** }
 1119              		.loc 1 53 2 view .LVU298
 227:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 1120              		.loc 1 227 7 is_stmt 0 view .LVU299
 1121 03a6 2021     		movs	r1, #32
 1122              	.LVL115:
 227:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 1123              		.loc 1 227 7 view .LVU300
 1124 03a8 04F12400 		add	r0, r4, #36
 1125              	.LVL116:
 227:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 1126              		.loc 1 227 7 view .LVU301
 1127 03ac FFF7FEFF 		bl	tmc4361A_readInt
 1128              	.LVL117:
 227:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_VMAX, tmc4361A_discardVelocityDecimals(vmax_positi
 1129              		.loc 1 227 6 view .LVU302
 1130 03b0 4207     		lsls	r2, r0, #29
 1131 03b2 40F13F82 		bpl	.L116
 228:boards/TMC4361A_eval.c **** 		}
 1132              		.loc 1 228 5 is_stmt 1 view .LVU303
 1133              	.LBB224:
 1134              	.LBI224:
  49:boards/TMC4361A_eval.c **** {
 1135              		.loc 1 49 32 view .LVU304
 1136              	.LVL118:
  49:boards/TMC4361A_eval.c **** {
 1137              		.loc 1 49 32 is_stmt 0 view .LVU305
 1138              	.LBE224:
  51:boards/TMC4361A_eval.c **** 
 1139              		.loc 1 51 2 is_stmt 1 view .LVU306
  53:boards/TMC4361A_eval.c **** }
 1140              		.loc 1 53 2 view .LVU307
 228:boards/TMC4361A_eval.c **** 		}
 1141              		.loc 1 228 5 is_stmt 0 view .LVU308
 1142 03b6 D4F8C002 		ldr	r0, [r4, #704]
 1143 03ba FFF7FEFF 		bl	tmc4361A_discardVelocityDecimals
 1144              	.LVL119:
 1145 03be 2421     		movs	r1, #36
 1146 03c0 0246     		mov	r2, r0
 1147 03c2 6018     		adds	r0, r4, r1
 1148 03c4 FFF7FEFF 		bl	tmc4361A_writeInt
 1149              	.LVL120:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1150              		.loc 1 179 11 view .LVU309
 1151 03c8 0025     		movs	r5, #0
 1152 03ca A5E7     		b	.L56
 1153              	.LVL121:
 1154              	.L102:
 233:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_AMAX)>>2;
 1155              		.loc 1 233 3 is_stmt 1 view .LVU310
 233:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_AMAX)>>2;
 1156              		.loc 1 233 5 is_stmt 0 view .LVU311
 1157 03cc 30B9     		cbnz	r0, .L117
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1158              		.loc 1 234 4 is_stmt 1 view .LVU312
 1159              	.LBB225:
 1160              	.LBI225:
  49:boards/TMC4361A_eval.c **** {
 1161              		.loc 1 49 32 view .LVU313
 1162              	.LVL122:
  49:boards/TMC4361A_eval.c **** {
 1163              		.loc 1 49 32 is_stmt 0 view .LVU314
 1164              	.LBE225:
  51:boards/TMC4361A_eval.c **** 
 1165              		.loc 1 51 2 is_stmt 1 view .LVU315
  53:boards/TMC4361A_eval.c **** }
 1166              		.loc 1 53 2 view .LVU316
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1167              		.loc 1 234 13 is_stmt 0 view .LVU317
 1168 03ce 7748     		ldr	r0, .L182
 1169              	.LVL123:
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1170              		.loc 1 234 13 view .LVU318
 1171 03d0 2821     		movs	r1, #40
 1172              	.LVL124:
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1173              		.loc 1 234 13 view .LVU319
 1174 03d2 FFF7FEFF 		bl	tmc4361A_readInt
 1175              	.LVL125:
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1176              		.loc 1 234 62 view .LVU320
 1177 03d6 8010     		asrs	r0, r0, #2
 234:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1178              		.loc 1 234 11 view .LVU321
 1179 03d8 3060     		str	r0, [r6]
 1180 03da 9DE7     		b	.L56
 1181              	.LVL126:
 1182              	.L117:
 235:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 1183              		.loc 1 235 10 is_stmt 1 view .LVU322
 236:boards/TMC4361A_eval.c **** 			{
 1184              		.loc 1 236 4 view .LVU323
 236:boards/TMC4361A_eval.c **** 			{
 1185              		.loc 1 236 7 is_stmt 0 view .LVU324
 1186 03dc 3268     		ldr	r2, [r6]
 1187              	.LVL127:
 236:boards/TMC4361A_eval.c **** 			{
 1188              		.loc 1 236 14 view .LVU325
 1189 03de 950D     		lsrs	r5, r2, #22
 1190 03e0 AD05     		lsls	r5, r5, #22
 236:boards/TMC4361A_eval.c **** 			{
 1191              		.loc 1 236 6 view .LVU326
 1192 03e2 002D     		cmp	r5, #0
 1193 03e4 40F0CE82 		bne	.L163
 242:boards/TMC4361A_eval.c **** 			}
 1194              		.loc 1 242 5 is_stmt 1 view .LVU327
 1195              	.LBB226:
 1196              	.LBI226:
  49:boards/TMC4361A_eval.c **** {
 1197              		.loc 1 49 32 view .LVU328
 1198              	.LVL128:
  49:boards/TMC4361A_eval.c **** {
 1199              		.loc 1 49 32 is_stmt 0 view .LVU329
 1200              	.LBE226:
  51:boards/TMC4361A_eval.c **** 
 1201              		.loc 1 51 2 is_stmt 1 view .LVU330
  53:boards/TMC4361A_eval.c **** }
 1202              		.loc 1 53 2 view .LVU331
 242:boards/TMC4361A_eval.c **** 			}
 1203              		.loc 1 242 5 is_stmt 0 view .LVU332
 1204 03e8 7048     		ldr	r0, .L182
 1205              	.LVL129:
 242:boards/TMC4361A_eval.c **** 			}
 1206              		.loc 1 242 5 view .LVU333
 1207 03ea 9200     		lsls	r2, r2, #2
 1208 03ec 2821     		movs	r1, #40
 1209              	.LVL130:
 242:boards/TMC4361A_eval.c **** 			}
 1210              		.loc 1 242 5 view .LVU334
 1211 03ee FFF7FEFF 		bl	tmc4361A_writeInt
 1212              	.LVL131:
 1213 03f2 91E7     		b	.L56
 1214              	.LVL132:
 1215              	.L101:
 248:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_STATUS) & (1<<0))? 1:0;
 1216              		.loc 1 248 3 is_stmt 1 view .LVU335
 248:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_STATUS) & (1<<0))? 1:0;
 1217              		.loc 1 248 5 is_stmt 0 view .LVU336
 1218 03f4 0028     		cmp	r0, #0
 1219 03f6 40F0C782 		bne	.L164
 249:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 1220              		.loc 1 249 4 is_stmt 1 view .LVU337
 1221              	.LBB227:
 1222              	.LBI227:
  49:boards/TMC4361A_eval.c **** {
 1223              		.loc 1 49 32 view .LVU338
 1224              	.LVL133:
  49:boards/TMC4361A_eval.c **** {
 1225              		.loc 1 49 32 is_stmt 0 view .LVU339
 1226              	.LBE227:
  51:boards/TMC4361A_eval.c **** 
 1227              		.loc 1 51 2 is_stmt 1 view .LVU340
  53:boards/TMC4361A_eval.c **** }
 1228              		.loc 1 53 2 view .LVU341
 249:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 1229              		.loc 1 249 14 is_stmt 0 view .LVU342
 1230 03fa 6C48     		ldr	r0, .L182
 1231              	.LVL134:
 249:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 1232              		.loc 1 249 14 view .LVU343
 1233 03fc 0F21     		movs	r1, #15
 1234              	.LVL135:
 249:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 1235              		.loc 1 249 14 view .LVU344
 1236 03fe FFF7FEFF 		bl	tmc4361A_readInt
 1237              	.LVL136:
 249:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 1238              		.loc 1 249 11 view .LVU345
 1239 0402 00F00100 		and	r0, r0, #1
 1240 0406 3060     		str	r0, [r6]
 1241 0408 86E7     		b	.L56
 1242              	.LVL137:
 1243              	.L100:
 255:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE)<<1;
 1244              		.loc 1 255 3 is_stmt 1 view .LVU346
 255:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_RAMPMODE)<<1;
 1245              		.loc 1 255 5 is_stmt 0 view .LVU347
 1246 040a 30B9     		cbnz	r0, .L118
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1247              		.loc 1 256 4 is_stmt 1 view .LVU348
 1248              	.LBB228:
 1249              	.LBI228:
  49:boards/TMC4361A_eval.c **** {
 1250              		.loc 1 49 32 view .LVU349
 1251              	.LVL138:
  49:boards/TMC4361A_eval.c **** {
 1252              		.loc 1 49 32 is_stmt 0 view .LVU350
 1253              	.LBE228:
  51:boards/TMC4361A_eval.c **** 
 1254              		.loc 1 51 2 is_stmt 1 view .LVU351
  53:boards/TMC4361A_eval.c **** }
 1255              		.loc 1 53 2 view .LVU352
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1256              		.loc 1 256 13 is_stmt 0 view .LVU353
 1257 040c 6748     		ldr	r0, .L182
 1258              	.LVL139:
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1259              		.loc 1 256 13 view .LVU354
 1260 040e 2021     		movs	r1, #32
 1261              	.LVL140:
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1262              		.loc 1 256 13 view .LVU355
 1263 0410 FFF7FEFF 		bl	tmc4361A_readInt
 1264              	.LVL141:
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1265              		.loc 1 256 66 view .LVU356
 1266 0414 4000     		lsls	r0, r0, #1
 256:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1267              		.loc 1 256 11 view .LVU357
 1268 0416 3060     		str	r0, [r6]
 1269 0418 7EE7     		b	.L56
 1270              	.LVL142:
 1271              	.L118:
 257:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_RAMPMODE, (*value) ? TMC4361A_RAMP_SSHAPE : TMC4361
 1272              		.loc 1 257 10 is_stmt 1 view .LVU358
 258:boards/TMC4361A_eval.c **** 		}
 1273              		.loc 1 258 4 view .LVU359
 1274              	.LBB229:
 1275              	.LBI229:
  49:boards/TMC4361A_eval.c **** {
 1276              		.loc 1 49 32 view .LVU360
  49:boards/TMC4361A_eval.c **** {
 1277              		.loc 1 49 32 is_stmt 0 view .LVU361
 1278              	.LBE229:
  51:boards/TMC4361A_eval.c **** 
 1279              		.loc 1 51 2 is_stmt 1 view .LVU362
  53:boards/TMC4361A_eval.c **** }
 1280              		.loc 1 53 2 view .LVU363
 258:boards/TMC4361A_eval.c **** 		}
 1281              		.loc 1 258 4 is_stmt 0 view .LVU364
 1282 041a 3368     		ldr	r3, [r6]
 1283 041c 6348     		ldr	r0, .L182
 1284              	.LVL143:
 258:boards/TMC4361A_eval.c **** 		}
 1285              		.loc 1 258 4 view .LVU365
 1286 041e 002B     		cmp	r3, #0
 1287 0420 14BF     		ite	ne
 1288 0422 0222     		movne	r2, #2
 1289              	.LVL144:
 258:boards/TMC4361A_eval.c **** 		}
 1290              		.loc 1 258 4 view .LVU366
 1291 0424 0122     		moveq	r2, #1
 1292 0426 2021     		movs	r1, #32
 1293              	.LVL145:
 258:boards/TMC4361A_eval.c **** 		}
 1294              		.loc 1 258 4 view .LVU367
 1295 0428 FFF7FEFF 		bl	tmc4361A_writeInt
 1296              	.LVL146:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1297              		.loc 1 179 11 view .LVU368
 1298 042c 0025     		movs	r5, #0
 1299 042e 73E7     		b	.L56
 1300              	.LVL147:
 1301              	.L99:
 263:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTART);
 1302              		.loc 1 263 3 is_stmt 1 view .LVU369
 263:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTART);
 1303              		.loc 1 263 5 is_stmt 0 view .LVU370
 1304 0430 28B9     		cbnz	r0, .L120
 264:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1305              		.loc 1 264 4 is_stmt 1 view .LVU371
 1306              	.LBB230:
 1307              	.LBI230:
  49:boards/TMC4361A_eval.c **** {
 1308              		.loc 1 49 32 view .LVU372
 1309              	.LVL148:
  49:boards/TMC4361A_eval.c **** {
 1310              		.loc 1 49 32 is_stmt 0 view .LVU373
 1311              	.LBE230:
  51:boards/TMC4361A_eval.c **** 
 1312              		.loc 1 51 2 is_stmt 1 view .LVU374
  53:boards/TMC4361A_eval.c **** }
 1313              		.loc 1 53 2 view .LVU375
 264:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1314              		.loc 1 264 13 is_stmt 0 view .LVU376
 1315 0432 5E48     		ldr	r0, .L182
 1316              	.LVL149:
 264:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1317              		.loc 1 264 13 view .LVU377
 1318 0434 2521     		movs	r1, #37
 1319              	.LVL150:
 264:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1320              		.loc 1 264 13 view .LVU378
 1321 0436 FFF7FEFF 		bl	tmc4361A_readInt
 1322              	.LVL151:
 264:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1323              		.loc 1 264 11 view .LVU379
 1324 043a 3060     		str	r0, [r6]
 1325 043c 6CE7     		b	.L56
 1326              	.LVL152:
 1327              	.L120:
 265:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTART, *value);
 1328              		.loc 1 265 10 is_stmt 1 view .LVU380
 266:boards/TMC4361A_eval.c **** 		}
 1329              		.loc 1 266 4 view .LVU381
 1330              	.LBB231:
 1331              	.LBI231:
  49:boards/TMC4361A_eval.c **** {
 1332              		.loc 1 49 32 view .LVU382
  49:boards/TMC4361A_eval.c **** {
 1333              		.loc 1 49 32 is_stmt 0 view .LVU383
 1334              	.LBE231:
  51:boards/TMC4361A_eval.c **** 
 1335              		.loc 1 51 2 is_stmt 1 view .LVU384
  53:boards/TMC4361A_eval.c **** }
 1336              		.loc 1 53 2 view .LVU385
 266:boards/TMC4361A_eval.c **** 		}
 1337              		.loc 1 266 4 is_stmt 0 view .LVU386
 1338 043e 3268     		ldr	r2, [r6]
 1339              	.LVL153:
 266:boards/TMC4361A_eval.c **** 		}
 1340              		.loc 1 266 4 view .LVU387
 1341 0440 5A48     		ldr	r0, .L182
 1342              	.LVL154:
 266:boards/TMC4361A_eval.c **** 		}
 1343              		.loc 1 266 4 view .LVU388
 1344 0442 2521     		movs	r1, #37
 1345              	.LVL155:
 266:boards/TMC4361A_eval.c **** 		}
 1346              		.loc 1 266 4 view .LVU389
 1347 0444 FFF7FEFF 		bl	tmc4361A_writeInt
 1348              	.LVL156:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1349              		.loc 1 179 11 view .LVU390
 1350 0448 0025     		movs	r5, #0
 1351 044a 65E7     		b	.L56
 1352              	.LVL157:
 1353              	.L98:
 271:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ASTART)>>2;
 1354              		.loc 1 271 3 is_stmt 1 view .LVU391
 271:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ASTART)>>2;
 1355              		.loc 1 271 5 is_stmt 0 view .LVU392
 1356 044c 30B9     		cbnz	r0, .L121
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1357              		.loc 1 272 4 is_stmt 1 view .LVU393
 1358              	.LBB232:
 1359              	.LBI232:
  49:boards/TMC4361A_eval.c **** {
 1360              		.loc 1 49 32 view .LVU394
 1361              	.LVL158:
  49:boards/TMC4361A_eval.c **** {
 1362              		.loc 1 49 32 is_stmt 0 view .LVU395
 1363              	.LBE232:
  51:boards/TMC4361A_eval.c **** 
 1364              		.loc 1 51 2 is_stmt 1 view .LVU396
  53:boards/TMC4361A_eval.c **** }
 1365              		.loc 1 53 2 view .LVU397
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1366              		.loc 1 272 13 is_stmt 0 view .LVU398
 1367 044e 5748     		ldr	r0, .L182
 1368              	.LVL159:
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1369              		.loc 1 272 13 view .LVU399
 1370 0450 2A21     		movs	r1, #42
 1371              	.LVL160:
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1372              		.loc 1 272 13 view .LVU400
 1373 0452 FFF7FEFF 		bl	tmc4361A_readInt
 1374              	.LVL161:
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1375              		.loc 1 272 64 view .LVU401
 1376 0456 8010     		asrs	r0, r0, #2
 272:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1377              		.loc 1 272 11 view .LVU402
 1378 0458 3060     		str	r0, [r6]
 1379 045a 5DE7     		b	.L56
 1380              	.LVL162:
 1381              	.L121:
 273:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 1382              		.loc 1 273 10 is_stmt 1 view .LVU403
 274:boards/TMC4361A_eval.c **** 			{
 1383              		.loc 1 274 4 view .LVU404
 274:boards/TMC4361A_eval.c **** 			{
 1384              		.loc 1 274 7 is_stmt 0 view .LVU405
 1385 045c 3268     		ldr	r2, [r6]
 1386              	.LVL163:
 274:boards/TMC4361A_eval.c **** 			{
 1387              		.loc 1 274 14 view .LVU406
 1388 045e 950D     		lsrs	r5, r2, #22
 1389 0460 AD05     		lsls	r5, r5, #22
 274:boards/TMC4361A_eval.c **** 			{
 1390              		.loc 1 274 6 view .LVU407
 1391 0462 002D     		cmp	r5, #0
 1392 0464 40F09282 		bne	.L166
 280:boards/TMC4361A_eval.c **** 			}
 1393              		.loc 1 280 5 is_stmt 1 view .LVU408
 1394              	.LBB233:
 1395              	.LBI233:
  49:boards/TMC4361A_eval.c **** {
 1396              		.loc 1 49 32 view .LVU409
 1397              	.LVL164:
  49:boards/TMC4361A_eval.c **** {
 1398              		.loc 1 49 32 is_stmt 0 view .LVU410
 1399              	.LBE233:
  51:boards/TMC4361A_eval.c **** 
 1400              		.loc 1 51 2 is_stmt 1 view .LVU411
  53:boards/TMC4361A_eval.c **** }
 1401              		.loc 1 53 2 view .LVU412
 280:boards/TMC4361A_eval.c **** 			}
 1402              		.loc 1 280 5 is_stmt 0 view .LVU413
 1403 0468 5048     		ldr	r0, .L182
 1404              	.LVL165:
 280:boards/TMC4361A_eval.c **** 			}
 1405              		.loc 1 280 5 view .LVU414
 1406 046a 9200     		lsls	r2, r2, #2
 1407 046c 2A21     		movs	r1, #42
 1408              	.LVL166:
 280:boards/TMC4361A_eval.c **** 			}
 1409              		.loc 1 280 5 view .LVU415
 1410 046e FFF7FEFF 		bl	tmc4361A_writeInt
 1411              	.LVL167:
 1412 0472 51E7     		b	.L56
 1413              	.LVL168:
 1414              	.L97:
 286:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DMAX)>>2;
 1415              		.loc 1 286 3 is_stmt 1 view .LVU416
 286:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DMAX)>>2;
 1416              		.loc 1 286 5 is_stmt 0 view .LVU417
 1417 0474 30B9     		cbnz	r0, .L122
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1418              		.loc 1 287 4 is_stmt 1 view .LVU418
 1419              	.LBB234:
 1420              	.LBI234:
  49:boards/TMC4361A_eval.c **** {
 1421              		.loc 1 49 32 view .LVU419
 1422              	.LVL169:
  49:boards/TMC4361A_eval.c **** {
 1423              		.loc 1 49 32 is_stmt 0 view .LVU420
 1424              	.LBE234:
  51:boards/TMC4361A_eval.c **** 
 1425              		.loc 1 51 2 is_stmt 1 view .LVU421
  53:boards/TMC4361A_eval.c **** }
 1426              		.loc 1 53 2 view .LVU422
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1427              		.loc 1 287 13 is_stmt 0 view .LVU423
 1428 0476 4D48     		ldr	r0, .L182
 1429              	.LVL170:
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1430              		.loc 1 287 13 view .LVU424
 1431 0478 2921     		movs	r1, #41
 1432              	.LVL171:
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1433              		.loc 1 287 13 view .LVU425
 1434 047a FFF7FEFF 		bl	tmc4361A_readInt
 1435              	.LVL172:
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1436              		.loc 1 287 62 view .LVU426
 1437 047e 8010     		asrs	r0, r0, #2
 287:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1438              		.loc 1 287 11 view .LVU427
 1439 0480 3060     		str	r0, [r6]
 1440 0482 49E7     		b	.L56
 1441              	.LVL173:
 1442              	.L122:
 288:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 1443              		.loc 1 288 10 is_stmt 1 view .LVU428
 289:boards/TMC4361A_eval.c **** 			{
 1444              		.loc 1 289 4 view .LVU429
 289:boards/TMC4361A_eval.c **** 			{
 1445              		.loc 1 289 7 is_stmt 0 view .LVU430
 1446 0484 3268     		ldr	r2, [r6]
 1447              	.LVL174:
 289:boards/TMC4361A_eval.c **** 			{
 1448              		.loc 1 289 14 view .LVU431
 1449 0486 950D     		lsrs	r5, r2, #22
 1450 0488 AD05     		lsls	r5, r5, #22
 289:boards/TMC4361A_eval.c **** 			{
 1451              		.loc 1 289 6 view .LVU432
 1452 048a 002D     		cmp	r5, #0
 1453 048c 40F08082 		bne	.L167
 295:boards/TMC4361A_eval.c **** 			}
 1454              		.loc 1 295 5 is_stmt 1 view .LVU433
 1455              	.LBB235:
 1456              	.LBI235:
  49:boards/TMC4361A_eval.c **** {
 1457              		.loc 1 49 32 view .LVU434
 1458              	.LVL175:
  49:boards/TMC4361A_eval.c **** {
 1459              		.loc 1 49 32 is_stmt 0 view .LVU435
 1460              	.LBE235:
  51:boards/TMC4361A_eval.c **** 
 1461              		.loc 1 51 2 is_stmt 1 view .LVU436
  53:boards/TMC4361A_eval.c **** }
 1462              		.loc 1 53 2 view .LVU437
 295:boards/TMC4361A_eval.c **** 			}
 1463              		.loc 1 295 5 is_stmt 0 view .LVU438
 1464 0490 4648     		ldr	r0, .L182
 1465              	.LVL176:
 295:boards/TMC4361A_eval.c **** 			}
 1466              		.loc 1 295 5 view .LVU439
 1467 0492 9200     		lsls	r2, r2, #2
 1468 0494 2921     		movs	r1, #41
 1469              	.LVL177:
 295:boards/TMC4361A_eval.c **** 			}
 1470              		.loc 1 295 5 view .LVU440
 1471 0496 FFF7FEFF 		bl	tmc4361A_writeInt
 1472              	.LVL178:
 1473 049a 3DE7     		b	.L56
 1474              	.LVL179:
 1475              	.L96:
 301:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VBREAK);
 1476              		.loc 1 301 3 is_stmt 1 view .LVU441
 301:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VBREAK);
 1477              		.loc 1 301 5 is_stmt 0 view .LVU442
 1478 049c 28B9     		cbnz	r0, .L123
 302:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1479              		.loc 1 302 4 is_stmt 1 view .LVU443
 1480              	.LBB236:
 1481              	.LBI236:
  49:boards/TMC4361A_eval.c **** {
 1482              		.loc 1 49 32 view .LVU444
 1483              	.LVL180:
  49:boards/TMC4361A_eval.c **** {
 1484              		.loc 1 49 32 is_stmt 0 view .LVU445
 1485              	.LBE236:
  51:boards/TMC4361A_eval.c **** 
 1486              		.loc 1 51 2 is_stmt 1 view .LVU446
  53:boards/TMC4361A_eval.c **** }
 1487              		.loc 1 53 2 view .LVU447
 302:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1488              		.loc 1 302 13 is_stmt 0 view .LVU448
 1489 049e 4348     		ldr	r0, .L182
 1490              	.LVL181:
 302:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1491              		.loc 1 302 13 view .LVU449
 1492 04a0 2721     		movs	r1, #39
 1493              	.LVL182:
 302:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1494              		.loc 1 302 13 view .LVU450
 1495 04a2 FFF7FEFF 		bl	tmc4361A_readInt
 1496              	.LVL183:
 302:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1497              		.loc 1 302 11 view .LVU451
 1498 04a6 3060     		str	r0, [r6]
 1499 04a8 36E7     		b	.L56
 1500              	.LVL184:
 1501              	.L123:
 303:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VBREAK, *value);
 1502              		.loc 1 303 10 is_stmt 1 view .LVU452
 304:boards/TMC4361A_eval.c **** 		}
 1503              		.loc 1 304 4 view .LVU453
 1504              	.LBB237:
 1505              	.LBI237:
  49:boards/TMC4361A_eval.c **** {
 1506              		.loc 1 49 32 view .LVU454
  49:boards/TMC4361A_eval.c **** {
 1507              		.loc 1 49 32 is_stmt 0 view .LVU455
 1508              	.LBE237:
  51:boards/TMC4361A_eval.c **** 
 1509              		.loc 1 51 2 is_stmt 1 view .LVU456
  53:boards/TMC4361A_eval.c **** }
 1510              		.loc 1 53 2 view .LVU457
 304:boards/TMC4361A_eval.c **** 		}
 1511              		.loc 1 304 4 is_stmt 0 view .LVU458
 1512 04aa 3268     		ldr	r2, [r6]
 1513              	.LVL185:
 304:boards/TMC4361A_eval.c **** 		}
 1514              		.loc 1 304 4 view .LVU459
 1515 04ac 3F48     		ldr	r0, .L182
 1516              	.LVL186:
 304:boards/TMC4361A_eval.c **** 		}
 1517              		.loc 1 304 4 view .LVU460
 1518 04ae 2721     		movs	r1, #39
 1519              	.LVL187:
 304:boards/TMC4361A_eval.c **** 		}
 1520              		.loc 1 304 4 view .LVU461
 1521 04b0 FFF7FEFF 		bl	tmc4361A_writeInt
 1522              	.LVL188:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1523              		.loc 1 179 11 view .LVU462
 1524 04b4 0025     		movs	r5, #0
 1525 04b6 2FE7     		b	.L56
 1526              	.LVL189:
 1527              	.L95:
 309:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DFINAL) >> 2;
 1528              		.loc 1 309 3 is_stmt 1 view .LVU463
 309:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DFINAL) >> 2;
 1529              		.loc 1 309 5 is_stmt 0 view .LVU464
 1530 04b8 30B9     		cbnz	r0, .L124
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1531              		.loc 1 310 4 is_stmt 1 view .LVU465
 1532              	.LBB238:
 1533              	.LBI238:
  49:boards/TMC4361A_eval.c **** {
 1534              		.loc 1 49 32 view .LVU466
 1535              	.LVL190:
  49:boards/TMC4361A_eval.c **** {
 1536              		.loc 1 49 32 is_stmt 0 view .LVU467
 1537              	.LBE238:
  51:boards/TMC4361A_eval.c **** 
 1538              		.loc 1 51 2 is_stmt 1 view .LVU468
  53:boards/TMC4361A_eval.c **** }
 1539              		.loc 1 53 2 view .LVU469
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1540              		.loc 1 310 13 is_stmt 0 view .LVU470
 1541 04ba 3C48     		ldr	r0, .L182
 1542              	.LVL191:
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1543              		.loc 1 310 13 view .LVU471
 1544 04bc 2B21     		movs	r1, #43
 1545              	.LVL192:
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1546              		.loc 1 310 13 view .LVU472
 1547 04be FFF7FEFF 		bl	tmc4361A_readInt
 1548              	.LVL193:
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1549              		.loc 1 310 65 view .LVU473
 1550 04c2 8010     		asrs	r0, r0, #2
 310:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1551              		.loc 1 310 11 view .LVU474
 1552 04c4 3060     		str	r0, [r6]
 1553 04c6 27E7     		b	.L56
 1554              	.LVL194:
 1555              	.L124:
 311:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 1556              		.loc 1 311 10 is_stmt 1 view .LVU475
 312:boards/TMC4361A_eval.c **** 			{
 1557              		.loc 1 312 4 view .LVU476
 312:boards/TMC4361A_eval.c **** 			{
 1558              		.loc 1 312 7 is_stmt 0 view .LVU477
 1559 04c8 3268     		ldr	r2, [r6]
 1560              	.LVL195:
 312:boards/TMC4361A_eval.c **** 			{
 1561              		.loc 1 312 14 view .LVU478
 1562 04ca 950D     		lsrs	r5, r2, #22
 1563 04cc AD05     		lsls	r5, r5, #22
 312:boards/TMC4361A_eval.c **** 			{
 1564              		.loc 1 312 6 view .LVU479
 1565 04ce 002D     		cmp	r5, #0
 1566 04d0 40F06082 		bne	.L168
 318:boards/TMC4361A_eval.c **** 			}
 1567              		.loc 1 318 5 is_stmt 1 view .LVU480
 1568              	.LBB239:
 1569              	.LBI239:
  49:boards/TMC4361A_eval.c **** {
 1570              		.loc 1 49 32 view .LVU481
 1571              	.LVL196:
  49:boards/TMC4361A_eval.c **** {
 1572              		.loc 1 49 32 is_stmt 0 view .LVU482
 1573              	.LBE239:
  51:boards/TMC4361A_eval.c **** 
 1574              		.loc 1 51 2 is_stmt 1 view .LVU483
  53:boards/TMC4361A_eval.c **** }
 1575              		.loc 1 53 2 view .LVU484
 318:boards/TMC4361A_eval.c **** 			}
 1576              		.loc 1 318 5 is_stmt 0 view .LVU485
 1577 04d4 3548     		ldr	r0, .L182
 1578              	.LVL197:
 318:boards/TMC4361A_eval.c **** 			}
 1579              		.loc 1 318 5 view .LVU486
 1580 04d6 9200     		lsls	r2, r2, #2
 1581 04d8 2B21     		movs	r1, #43
 1582              	.LVL198:
 318:boards/TMC4361A_eval.c **** 			}
 1583              		.loc 1 318 5 view .LVU487
 1584 04da FFF7FEFF 		bl	tmc4361A_writeInt
 1585              	.LVL199:
 1586 04de 1BE7     		b	.L56
 1587              	.LVL200:
 1588              	.L94:
 324:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTOP);
 1589              		.loc 1 324 3 is_stmt 1 view .LVU488
 324:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VSTOP);
 1590              		.loc 1 324 5 is_stmt 0 view .LVU489
 1591 04e0 28B9     		cbnz	r0, .L125
 325:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1592              		.loc 1 325 4 is_stmt 1 view .LVU490
 1593              	.LBB240:
 1594              	.LBI240:
  49:boards/TMC4361A_eval.c **** {
 1595              		.loc 1 49 32 view .LVU491
 1596              	.LVL201:
  49:boards/TMC4361A_eval.c **** {
 1597              		.loc 1 49 32 is_stmt 0 view .LVU492
 1598              	.LBE240:
  51:boards/TMC4361A_eval.c **** 
 1599              		.loc 1 51 2 is_stmt 1 view .LVU493
  53:boards/TMC4361A_eval.c **** }
 1600              		.loc 1 53 2 view .LVU494
 325:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1601              		.loc 1 325 13 is_stmt 0 view .LVU495
 1602 04e2 3248     		ldr	r0, .L182
 1603              	.LVL202:
 325:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1604              		.loc 1 325 13 view .LVU496
 1605 04e4 2621     		movs	r1, #38
 1606              	.LVL203:
 325:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1607              		.loc 1 325 13 view .LVU497
 1608 04e6 FFF7FEFF 		bl	tmc4361A_readInt
 1609              	.LVL204:
 325:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1610              		.loc 1 325 11 view .LVU498
 1611 04ea 3060     		str	r0, [r6]
 1612 04ec 14E7     		b	.L56
 1613              	.LVL205:
 1614              	.L125:
 326:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VSTOP, *value);
 1615              		.loc 1 326 10 is_stmt 1 view .LVU499
 327:boards/TMC4361A_eval.c **** 		}
 1616              		.loc 1 327 4 view .LVU500
 1617              	.LBB241:
 1618              	.LBI241:
  49:boards/TMC4361A_eval.c **** {
 1619              		.loc 1 49 32 view .LVU501
  49:boards/TMC4361A_eval.c **** {
 1620              		.loc 1 49 32 is_stmt 0 view .LVU502
 1621              	.LBE241:
  51:boards/TMC4361A_eval.c **** 
 1622              		.loc 1 51 2 is_stmt 1 view .LVU503
  53:boards/TMC4361A_eval.c **** }
 1623              		.loc 1 53 2 view .LVU504
 327:boards/TMC4361A_eval.c **** 		}
 1624              		.loc 1 327 4 is_stmt 0 view .LVU505
 1625 04ee 3268     		ldr	r2, [r6]
 1626              	.LVL206:
 327:boards/TMC4361A_eval.c **** 		}
 1627              		.loc 1 327 4 view .LVU506
 1628 04f0 2E48     		ldr	r0, .L182
 1629              	.LVL207:
 327:boards/TMC4361A_eval.c **** 		}
 1630              		.loc 1 327 4 view .LVU507
 1631 04f2 2621     		movs	r1, #38
 1632              	.LVL208:
 327:boards/TMC4361A_eval.c **** 		}
 1633              		.loc 1 327 4 view .LVU508
 1634 04f4 FFF7FEFF 		bl	tmc4361A_writeInt
 1635              	.LVL209:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1636              		.loc 1 179 11 view .LVU509
 1637 04f8 0025     		movs	r5, #0
 1638 04fa 0DE7     		b	.L56
 1639              	.LVL210:
 1640              	.L93:
 332:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DSTOP);
 1641              		.loc 1 332 3 is_stmt 1 view .LVU510
 332:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_DSTOP);
 1642              		.loc 1 332 5 is_stmt 0 view .LVU511
 1643 04fc 28B9     		cbnz	r0, .L126
 333:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1644              		.loc 1 333 4 is_stmt 1 view .LVU512
 1645              	.LBB242:
 1646              	.LBI242:
  49:boards/TMC4361A_eval.c **** {
 1647              		.loc 1 49 32 view .LVU513
 1648              	.LVL211:
  49:boards/TMC4361A_eval.c **** {
 1649              		.loc 1 49 32 is_stmt 0 view .LVU514
 1650              	.LBE242:
  51:boards/TMC4361A_eval.c **** 
 1651              		.loc 1 51 2 is_stmt 1 view .LVU515
  53:boards/TMC4361A_eval.c **** }
 1652              		.loc 1 53 2 view .LVU516
 333:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1653              		.loc 1 333 13 is_stmt 0 view .LVU517
 1654 04fe 2B48     		ldr	r0, .L182
 1655              	.LVL212:
 333:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1656              		.loc 1 333 13 view .LVU518
 1657 0500 2C21     		movs	r1, #44
 1658              	.LVL213:
 333:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1659              		.loc 1 333 13 view .LVU519
 1660 0502 FFF7FEFF 		bl	tmc4361A_readInt
 1661              	.LVL214:
 333:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1662              		.loc 1 333 11 view .LVU520
 1663 0506 3060     		str	r0, [r6]
 1664 0508 06E7     		b	.L56
 1665              	.LVL215:
 1666              	.L126:
 334:boards/TMC4361A_eval.c **** 			if(*value & ~0x3FFFFF)
 1667              		.loc 1 334 10 is_stmt 1 view .LVU521
 335:boards/TMC4361A_eval.c **** 			{
 1668              		.loc 1 335 4 view .LVU522
 335:boards/TMC4361A_eval.c **** 			{
 1669              		.loc 1 335 7 is_stmt 0 view .LVU523
 1670 050a 3268     		ldr	r2, [r6]
 1671              	.LVL216:
 335:boards/TMC4361A_eval.c **** 			{
 1672              		.loc 1 335 14 view .LVU524
 1673 050c 950D     		lsrs	r5, r2, #22
 1674 050e AD05     		lsls	r5, r5, #22
 335:boards/TMC4361A_eval.c **** 			{
 1675              		.loc 1 335 6 view .LVU525
 1676 0510 002D     		cmp	r5, #0
 1677 0512 40F04182 		bne	.L169
 341:boards/TMC4361A_eval.c **** 			}
 1678              		.loc 1 341 5 is_stmt 1 view .LVU526
 1679              	.LBB243:
 1680              	.LBI243:
  49:boards/TMC4361A_eval.c **** {
 1681              		.loc 1 49 32 view .LVU527
 1682              	.LVL217:
  49:boards/TMC4361A_eval.c **** {
 1683              		.loc 1 49 32 is_stmt 0 view .LVU528
 1684              	.LBE243:
  51:boards/TMC4361A_eval.c **** 
 1685              		.loc 1 51 2 is_stmt 1 view .LVU529
  53:boards/TMC4361A_eval.c **** }
 1686              		.loc 1 53 2 view .LVU530
 341:boards/TMC4361A_eval.c **** 			}
 1687              		.loc 1 341 5 is_stmt 0 view .LVU531
 1688 0516 2548     		ldr	r0, .L182
 1689              	.LVL218:
 341:boards/TMC4361A_eval.c **** 			}
 1690              		.loc 1 341 5 view .LVU532
 1691 0518 2C21     		movs	r1, #44
 1692              	.LVL219:
 341:boards/TMC4361A_eval.c **** 			}
 1693              		.loc 1 341 5 view .LVU533
 1694 051a FFF7FEFF 		bl	tmc4361A_writeInt
 1695              	.LVL220:
 1696 051e FBE6     		b	.L56
 1697              	.LVL221:
 1698              	.L92:
 347:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW1);
 1699              		.loc 1 347 3 is_stmt 1 view .LVU534
 347:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW1);
 1700              		.loc 1 347 5 is_stmt 0 view .LVU535
 1701 0520 28B9     		cbnz	r0, .L127
 348:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1702              		.loc 1 348 4 is_stmt 1 view .LVU536
 1703              	.LBB244:
 1704              	.LBI244:
  49:boards/TMC4361A_eval.c **** {
 1705              		.loc 1 49 32 view .LVU537
 1706              	.LVL222:
  49:boards/TMC4361A_eval.c **** {
 1707              		.loc 1 49 32 is_stmt 0 view .LVU538
 1708              	.LBE244:
  51:boards/TMC4361A_eval.c **** 
 1709              		.loc 1 51 2 is_stmt 1 view .LVU539
  53:boards/TMC4361A_eval.c **** }
 1710              		.loc 1 53 2 view .LVU540
 348:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1711              		.loc 1 348 13 is_stmt 0 view .LVU541
 1712 0522 2248     		ldr	r0, .L182
 1713              	.LVL223:
 348:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1714              		.loc 1 348 13 view .LVU542
 1715 0524 2D21     		movs	r1, #45
 1716              	.LVL224:
 348:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1717              		.loc 1 348 13 view .LVU543
 1718 0526 FFF7FEFF 		bl	tmc4361A_readInt
 1719              	.LVL225:
 348:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1720              		.loc 1 348 11 view .LVU544
 1721 052a 3060     		str	r0, [r6]
 1722 052c F4E6     		b	.L56
 1723              	.LVL226:
 1724              	.L127:
 349:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW1, *value);
 1725              		.loc 1 349 10 is_stmt 1 view .LVU545
 350:boards/TMC4361A_eval.c **** 		}
 1726              		.loc 1 350 4 view .LVU546
 1727              	.LBB245:
 1728              	.LBI245:
  49:boards/TMC4361A_eval.c **** {
 1729              		.loc 1 49 32 view .LVU547
  49:boards/TMC4361A_eval.c **** {
 1730              		.loc 1 49 32 is_stmt 0 view .LVU548
 1731              	.LBE245:
  51:boards/TMC4361A_eval.c **** 
 1732              		.loc 1 51 2 is_stmt 1 view .LVU549
  53:boards/TMC4361A_eval.c **** }
 1733              		.loc 1 53 2 view .LVU550
 350:boards/TMC4361A_eval.c **** 		}
 1734              		.loc 1 350 4 is_stmt 0 view .LVU551
 1735 052e 3268     		ldr	r2, [r6]
 1736              	.LVL227:
 350:boards/TMC4361A_eval.c **** 		}
 1737              		.loc 1 350 4 view .LVU552
 1738 0530 1E48     		ldr	r0, .L182
 1739              	.LVL228:
 350:boards/TMC4361A_eval.c **** 		}
 1740              		.loc 1 350 4 view .LVU553
 1741 0532 2D21     		movs	r1, #45
 1742              	.LVL229:
 350:boards/TMC4361A_eval.c **** 		}
 1743              		.loc 1 350 4 view .LVU554
 1744 0534 FFF7FEFF 		bl	tmc4361A_writeInt
 1745              	.LVL230:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1746              		.loc 1 179 11 view .LVU555
 1747 0538 0025     		movs	r5, #0
 1748 053a EDE6     		b	.L56
 1749              	.LVL231:
 1750              	.L91:
 355:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW2);
 1751              		.loc 1 355 3 is_stmt 1 view .LVU556
 355:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW2);
 1752              		.loc 1 355 5 is_stmt 0 view .LVU557
 1753 053c 28B9     		cbnz	r0, .L128
 356:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1754              		.loc 1 356 4 is_stmt 1 view .LVU558
 1755              	.LBB246:
 1756              	.LBI246:
  49:boards/TMC4361A_eval.c **** {
 1757              		.loc 1 49 32 view .LVU559
 1758              	.LVL232:
  49:boards/TMC4361A_eval.c **** {
 1759              		.loc 1 49 32 is_stmt 0 view .LVU560
 1760              	.LBE246:
  51:boards/TMC4361A_eval.c **** 
 1761              		.loc 1 51 2 is_stmt 1 view .LVU561
  53:boards/TMC4361A_eval.c **** }
 1762              		.loc 1 53 2 view .LVU562
 356:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1763              		.loc 1 356 13 is_stmt 0 view .LVU563
 1764 053e 1B48     		ldr	r0, .L182
 1765              	.LVL233:
 356:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1766              		.loc 1 356 13 view .LVU564
 1767 0540 2E21     		movs	r1, #46
 1768              	.LVL234:
 356:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1769              		.loc 1 356 13 view .LVU565
 1770 0542 FFF7FEFF 		bl	tmc4361A_readInt
 1771              	.LVL235:
 356:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1772              		.loc 1 356 11 view .LVU566
 1773 0546 3060     		str	r0, [r6]
 1774 0548 E6E6     		b	.L56
 1775              	.LVL236:
 1776              	.L128:
 357:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW2, *value);
 1777              		.loc 1 357 10 is_stmt 1 view .LVU567
 358:boards/TMC4361A_eval.c **** 		}
 1778              		.loc 1 358 4 view .LVU568
 1779              	.LBB247:
 1780              	.LBI247:
  49:boards/TMC4361A_eval.c **** {
 1781              		.loc 1 49 32 view .LVU569
  49:boards/TMC4361A_eval.c **** {
 1782              		.loc 1 49 32 is_stmt 0 view .LVU570
 1783              	.LBE247:
  51:boards/TMC4361A_eval.c **** 
 1784              		.loc 1 51 2 is_stmt 1 view .LVU571
  53:boards/TMC4361A_eval.c **** }
 1785              		.loc 1 53 2 view .LVU572
 358:boards/TMC4361A_eval.c **** 		}
 1786              		.loc 1 358 4 is_stmt 0 view .LVU573
 1787 054a 3268     		ldr	r2, [r6]
 1788              	.LVL237:
 358:boards/TMC4361A_eval.c **** 		}
 1789              		.loc 1 358 4 view .LVU574
 1790 054c 1748     		ldr	r0, .L182
 1791              	.LVL238:
 358:boards/TMC4361A_eval.c **** 		}
 1792              		.loc 1 358 4 view .LVU575
 1793 054e 2E21     		movs	r1, #46
 1794              	.LVL239:
 358:boards/TMC4361A_eval.c **** 		}
 1795              		.loc 1 358 4 view .LVU576
 1796 0550 FFF7FEFF 		bl	tmc4361A_writeInt
 1797              	.LVL240:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1798              		.loc 1 179 11 view .LVU577
 1799 0554 0025     		movs	r5, #0
 1800 0556 DFE6     		b	.L56
 1801              	.LVL241:
 1802              	.L90:
 363:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW3);
 1803              		.loc 1 363 3 is_stmt 1 view .LVU578
 363:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW3);
 1804              		.loc 1 363 5 is_stmt 0 view .LVU579
 1805 0558 28B9     		cbnz	r0, .L129
 364:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1806              		.loc 1 364 4 is_stmt 1 view .LVU580
 1807              	.LBB248:
 1808              	.LBI248:
  49:boards/TMC4361A_eval.c **** {
 1809              		.loc 1 49 32 view .LVU581
 1810              	.LVL242:
  49:boards/TMC4361A_eval.c **** {
 1811              		.loc 1 49 32 is_stmt 0 view .LVU582
 1812              	.LBE248:
  51:boards/TMC4361A_eval.c **** 
 1813              		.loc 1 51 2 is_stmt 1 view .LVU583
  53:boards/TMC4361A_eval.c **** }
 1814              		.loc 1 53 2 view .LVU584
 364:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1815              		.loc 1 364 13 is_stmt 0 view .LVU585
 1816 055a 1448     		ldr	r0, .L182
 1817              	.LVL243:
 364:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1818              		.loc 1 364 13 view .LVU586
 1819 055c 2F21     		movs	r1, #47
 1820              	.LVL244:
 364:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1821              		.loc 1 364 13 view .LVU587
 1822 055e FFF7FEFF 		bl	tmc4361A_readInt
 1823              	.LVL245:
 364:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1824              		.loc 1 364 11 view .LVU588
 1825 0562 3060     		str	r0, [r6]
 1826 0564 D8E6     		b	.L56
 1827              	.LVL246:
 1828              	.L129:
 365:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW3, *value);
 1829              		.loc 1 365 10 is_stmt 1 view .LVU589
 366:boards/TMC4361A_eval.c **** 		}
 1830              		.loc 1 366 4 view .LVU590
 1831              	.LBB249:
 1832              	.LBI249:
  49:boards/TMC4361A_eval.c **** {
 1833              		.loc 1 49 32 view .LVU591
  49:boards/TMC4361A_eval.c **** {
 1834              		.loc 1 49 32 is_stmt 0 view .LVU592
 1835              	.LBE249:
  51:boards/TMC4361A_eval.c **** 
 1836              		.loc 1 51 2 is_stmt 1 view .LVU593
  53:boards/TMC4361A_eval.c **** }
 1837              		.loc 1 53 2 view .LVU594
 366:boards/TMC4361A_eval.c **** 		}
 1838              		.loc 1 366 4 is_stmt 0 view .LVU595
 1839 0566 3268     		ldr	r2, [r6]
 1840              	.LVL247:
 366:boards/TMC4361A_eval.c **** 		}
 1841              		.loc 1 366 4 view .LVU596
 1842 0568 1048     		ldr	r0, .L182
 1843              	.LVL248:
 366:boards/TMC4361A_eval.c **** 		}
 1844              		.loc 1 366 4 view .LVU597
 1845 056a 2F21     		movs	r1, #47
 1846              	.LVL249:
 366:boards/TMC4361A_eval.c **** 		}
 1847              		.loc 1 366 4 view .LVU598
 1848 056c FFF7FEFF 		bl	tmc4361A_writeInt
 1849              	.LVL250:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1850              		.loc 1 179 11 view .LVU599
 1851 0570 0025     		movs	r5, #0
 1852 0572 D1E6     		b	.L56
 1853              	.LVL251:
 1854              	.L89:
 371:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW4);
 1855              		.loc 1 371 3 is_stmt 1 view .LVU600
 371:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_BOW4);
 1856              		.loc 1 371 5 is_stmt 0 view .LVU601
 1857 0574 28B9     		cbnz	r0, .L130
 372:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1858              		.loc 1 372 4 is_stmt 1 view .LVU602
 1859              	.LBB250:
 1860              	.LBI250:
  49:boards/TMC4361A_eval.c **** {
 1861              		.loc 1 49 32 view .LVU603
 1862              	.LVL252:
  49:boards/TMC4361A_eval.c **** {
 1863              		.loc 1 49 32 is_stmt 0 view .LVU604
 1864              	.LBE250:
  51:boards/TMC4361A_eval.c **** 
 1865              		.loc 1 51 2 is_stmt 1 view .LVU605
  53:boards/TMC4361A_eval.c **** }
 1866              		.loc 1 53 2 view .LVU606
 372:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1867              		.loc 1 372 13 is_stmt 0 view .LVU607
 1868 0576 0D48     		ldr	r0, .L182
 1869              	.LVL253:
 372:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1870              		.loc 1 372 13 view .LVU608
 1871 0578 3021     		movs	r1, #48
 1872              	.LVL254:
 372:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1873              		.loc 1 372 13 view .LVU609
 1874 057a FFF7FEFF 		bl	tmc4361A_readInt
 1875              	.LVL255:
 372:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1876              		.loc 1 372 11 view .LVU610
 1877 057e 3060     		str	r0, [r6]
 1878 0580 CAE6     		b	.L56
 1879              	.LVL256:
 1880              	.L130:
 373:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_BOW4, *value);
 1881              		.loc 1 373 10 is_stmt 1 view .LVU611
 374:boards/TMC4361A_eval.c **** 		}
 1882              		.loc 1 374 4 view .LVU612
 1883              	.LBB251:
 1884              	.LBI251:
  49:boards/TMC4361A_eval.c **** {
 1885              		.loc 1 49 32 view .LVU613
  49:boards/TMC4361A_eval.c **** {
 1886              		.loc 1 49 32 is_stmt 0 view .LVU614
 1887              	.LBE251:
  51:boards/TMC4361A_eval.c **** 
 1888              		.loc 1 51 2 is_stmt 1 view .LVU615
  53:boards/TMC4361A_eval.c **** }
 1889              		.loc 1 53 2 view .LVU616
 374:boards/TMC4361A_eval.c **** 		}
 1890              		.loc 1 374 4 is_stmt 0 view .LVU617
 1891 0582 3268     		ldr	r2, [r6]
 1892              	.LVL257:
 374:boards/TMC4361A_eval.c **** 		}
 1893              		.loc 1 374 4 view .LVU618
 1894 0584 0948     		ldr	r0, .L182
 1895              	.LVL258:
 374:boards/TMC4361A_eval.c **** 		}
 1896              		.loc 1 374 4 view .LVU619
 1897 0586 3021     		movs	r1, #48
 1898              	.LVL259:
 374:boards/TMC4361A_eval.c **** 		}
 1899              		.loc 1 374 4 view .LVU620
 1900 0588 FFF7FEFF 		bl	tmc4361A_writeInt
 1901              	.LVL260:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1902              		.loc 1 179 11 view .LVU621
 1903 058c 0025     		movs	r5, #0
 1904 058e C3E6     		b	.L56
 1905              	.LVL261:
 1906              	.L88:
 379:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT);
 1907              		.loc 1 379 3 is_stmt 1 view .LVU622
 379:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT);
 1908              		.loc 1 379 5 is_stmt 0 view .LVU623
 1909 0590 28B9     		cbnz	r0, .L131
 380:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1910              		.loc 1 380 4 is_stmt 1 view .LVU624
 1911              	.LBB252:
 1912              	.LBI252:
  49:boards/TMC4361A_eval.c **** {
 1913              		.loc 1 49 32 view .LVU625
 1914              	.LVL262:
  49:boards/TMC4361A_eval.c **** {
 1915              		.loc 1 49 32 is_stmt 0 view .LVU626
 1916              	.LBE252:
  51:boards/TMC4361A_eval.c **** 
 1917              		.loc 1 51 2 is_stmt 1 view .LVU627
  53:boards/TMC4361A_eval.c **** }
 1918              		.loc 1 53 2 view .LVU628
 380:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1919              		.loc 1 380 13 is_stmt 0 view .LVU629
 1920 0592 0648     		ldr	r0, .L182
 1921              	.LVL263:
 380:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1922              		.loc 1 380 13 view .LVU630
 1923 0594 3321     		movs	r1, #51
 1924              	.LVL264:
 380:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1925              		.loc 1 380 13 view .LVU631
 1926 0596 FFF7FEFF 		bl	tmc4361A_readInt
 1927              	.LVL265:
 380:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1928              		.loc 1 380 11 view .LVU632
 1929 059a 3060     		str	r0, [r6]
 1930 059c BCE6     		b	.L56
 1931              	.LVL266:
 1932              	.L131:
 381:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_LEFT, *value);
 1933              		.loc 1 381 10 is_stmt 1 view .LVU633
 382:boards/TMC4361A_eval.c **** 		}
 1934              		.loc 1 382 4 view .LVU634
 1935              	.LBB253:
 1936              	.LBI253:
  49:boards/TMC4361A_eval.c **** {
 1937              		.loc 1 49 32 view .LVU635
  49:boards/TMC4361A_eval.c **** {
 1938              		.loc 1 49 32 is_stmt 0 view .LVU636
 1939              	.LBE253:
  51:boards/TMC4361A_eval.c **** 
 1940              		.loc 1 51 2 is_stmt 1 view .LVU637
  53:boards/TMC4361A_eval.c **** }
 1941              		.loc 1 53 2 view .LVU638
 382:boards/TMC4361A_eval.c **** 		}
 1942              		.loc 1 382 4 is_stmt 0 view .LVU639
 1943 059e 3268     		ldr	r2, [r6]
 1944              	.LVL267:
 382:boards/TMC4361A_eval.c **** 		}
 1945              		.loc 1 382 4 view .LVU640
 1946 05a0 0248     		ldr	r0, .L182
 1947              	.LVL268:
 382:boards/TMC4361A_eval.c **** 		}
 1948              		.loc 1 382 4 view .LVU641
 1949 05a2 3321     		movs	r1, #51
 1950              	.LVL269:
 382:boards/TMC4361A_eval.c **** 		}
 1951              		.loc 1 382 4 view .LVU642
 1952 05a4 FFF7FEFF 		bl	tmc4361A_writeInt
 1953              	.LVL270:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 1954              		.loc 1 179 11 view .LVU643
 1955 05a8 0025     		movs	r5, #0
 1956 05aa B5E6     		b	.L56
 1957              	.L183:
 1958              		.align	2
 1959              	.L182:
 1960 05ac 24000000 		.word	.LANCHOR0+36
 1961 05b0 00000000 		.word	.LANCHOR0
 1962              	.LVL271:
 1963              	.L86:
 387:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT);
 1964              		.loc 1 387 3 is_stmt 1 view .LVU644
 387:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT);
 1965              		.loc 1 387 5 is_stmt 0 view .LVU645
 1966 05b4 28B9     		cbnz	r0, .L132
 388:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1967              		.loc 1 388 4 is_stmt 1 view .LVU646
 1968              	.LBB254:
 1969              	.LBI254:
  49:boards/TMC4361A_eval.c **** {
 1970              		.loc 1 49 32 view .LVU647
 1971              	.LVL272:
  49:boards/TMC4361A_eval.c **** {
 1972              		.loc 1 49 32 is_stmt 0 view .LVU648
 1973              	.LBE254:
  51:boards/TMC4361A_eval.c **** 
 1974              		.loc 1 51 2 is_stmt 1 view .LVU649
  53:boards/TMC4361A_eval.c **** }
 1975              		.loc 1 53 2 view .LVU650
 388:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1976              		.loc 1 388 13 is_stmt 0 view .LVU651
 1977 05b6 A048     		ldr	r0, .L184
 1978              	.LVL273:
 388:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1979              		.loc 1 388 13 view .LVU652
 1980 05b8 3421     		movs	r1, #52
 1981              	.LVL274:
 388:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1982              		.loc 1 388 13 view .LVU653
 1983 05ba FFF7FEFF 		bl	tmc4361A_readInt
 1984              	.LVL275:
 388:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 1985              		.loc 1 388 11 view .LVU654
 1986 05be 3060     		str	r0, [r6]
 1987 05c0 AAE6     		b	.L56
 1988              	.LVL276:
 1989              	.L132:
 389:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_VIRT_STOP_RIGHT, *value);
 1990              		.loc 1 389 10 is_stmt 1 view .LVU655
 390:boards/TMC4361A_eval.c **** 		}
 1991              		.loc 1 390 4 view .LVU656
 1992              	.LBB255:
 1993              	.LBI255:
  49:boards/TMC4361A_eval.c **** {
 1994              		.loc 1 49 32 view .LVU657
  49:boards/TMC4361A_eval.c **** {
 1995              		.loc 1 49 32 is_stmt 0 view .LVU658
 1996              	.LBE255:
  51:boards/TMC4361A_eval.c **** 
 1997              		.loc 1 51 2 is_stmt 1 view .LVU659
  53:boards/TMC4361A_eval.c **** }
 1998              		.loc 1 53 2 view .LVU660
 390:boards/TMC4361A_eval.c **** 		}
 1999              		.loc 1 390 4 is_stmt 0 view .LVU661
 2000 05c2 3268     		ldr	r2, [r6]
 2001              	.LVL277:
 390:boards/TMC4361A_eval.c **** 		}
 2002              		.loc 1 390 4 view .LVU662
 2003 05c4 9C48     		ldr	r0, .L184
 2004              	.LVL278:
 390:boards/TMC4361A_eval.c **** 		}
 2005              		.loc 1 390 4 view .LVU663
 2006 05c6 3421     		movs	r1, #52
 2007              	.LVL279:
 390:boards/TMC4361A_eval.c **** 		}
 2008              		.loc 1 390 4 view .LVU664
 2009 05c8 FFF7FEFF 		bl	tmc4361A_writeInt
 2010              	.LVL280:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2011              		.loc 1 179 11 view .LVU665
 2012 05cc 0025     		movs	r5, #0
 2013 05ce A3E6     		b	.L56
 2014              	.LVL281:
 2015              	.L85:
 395:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR);		// read from shadow regis
 2016              		.loc 1 395 3 is_stmt 1 view .LVU666
 395:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR);		// read from shadow regis
 2017              		.loc 1 395 5 is_stmt 0 view .LVU667
 2018 05d0 28B9     		cbnz	r0, .L133
 396:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2019              		.loc 1 396 4 is_stmt 1 view .LVU668
 2020              	.LBB256:
 2021              	.LBI256:
  49:boards/TMC4361A_eval.c **** {
 2022              		.loc 1 49 32 view .LVU669
 2023              	.LVL282:
  49:boards/TMC4361A_eval.c **** {
 2024              		.loc 1 49 32 is_stmt 0 view .LVU670
 2025              	.LBE256:
  51:boards/TMC4361A_eval.c **** 
 2026              		.loc 1 51 2 is_stmt 1 view .LVU671
  53:boards/TMC4361A_eval.c **** }
 2027              		.loc 1 53 2 view .LVU672
 396:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2028              		.loc 1 396 13 is_stmt 0 view .LVU673
 2029 05d2 9948     		ldr	r0, .L184
 2030              	.LVL283:
 396:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2031              		.loc 1 396 13 view .LVU674
 2032 05d4 6021     		movs	r1, #96
 2033              	.LVL284:
 396:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2034              		.loc 1 396 13 view .LVU675
 2035 05d6 FFF7FEFF 		bl	tmc4361A_readInt
 2036              	.LVL285:
 396:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2037              		.loc 1 396 11 view .LVU676
 2038 05da 3060     		str	r0, [r6]
 2039 05dc 9CE6     		b	.L56
 2040              	.LVL286:
 2041              	.L133:
 397:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMIN_EMF_WR, *value);
 2042              		.loc 1 397 10 is_stmt 1 view .LVU677
 398:boards/TMC4361A_eval.c **** 		}
 2043              		.loc 1 398 4 view .LVU678
 2044              	.LBB257:
 2045              	.LBI257:
  49:boards/TMC4361A_eval.c **** {
 2046              		.loc 1 49 32 view .LVU679
  49:boards/TMC4361A_eval.c **** {
 2047              		.loc 1 49 32 is_stmt 0 view .LVU680
 2048              	.LBE257:
  51:boards/TMC4361A_eval.c **** 
 2049              		.loc 1 51 2 is_stmt 1 view .LVU681
  53:boards/TMC4361A_eval.c **** }
 2050              		.loc 1 53 2 view .LVU682
 398:boards/TMC4361A_eval.c **** 		}
 2051              		.loc 1 398 4 is_stmt 0 view .LVU683
 2052 05de 3268     		ldr	r2, [r6]
 2053 05e0 9548     		ldr	r0, .L184
 2054              	.LVL287:
 398:boards/TMC4361A_eval.c **** 		}
 2055              		.loc 1 398 4 view .LVU684
 2056 05e2 6021     		movs	r1, #96
 2057              	.LVL288:
 398:boards/TMC4361A_eval.c **** 		}
 2058              		.loc 1 398 4 view .LVU685
 2059 05e4 FFF7FEFF 		bl	tmc4361A_writeInt
 2060              	.LVL289:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2061              		.loc 1 179 11 view .LVU686
 2062 05e8 0025     		movs	r5, #0
 2063 05ea 95E6     		b	.L56
 2064              	.LVL290:
 2065              	.L84:
 403:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VADD_EMF); 	// read from shadow register
 2066              		.loc 1 403 3 is_stmt 1 view .LVU687
 403:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_VADD_EMF); 	// read from shadow register
 2067              		.loc 1 403 5 is_stmt 0 view .LVU688
 2068 05ec 28B9     		cbnz	r0, .L134
 404:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2069              		.loc 1 404 4 is_stmt 1 view .LVU689
 2070              	.LBB258:
 2071              	.LBI258:
  49:boards/TMC4361A_eval.c **** {
 2072              		.loc 1 49 32 view .LVU690
 2073              	.LVL291:
  49:boards/TMC4361A_eval.c **** {
 2074              		.loc 1 49 32 is_stmt 0 view .LVU691
 2075              	.LBE258:
  51:boards/TMC4361A_eval.c **** 
 2076              		.loc 1 51 2 is_stmt 1 view .LVU692
  53:boards/TMC4361A_eval.c **** }
 2077              		.loc 1 53 2 view .LVU693
 404:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2078              		.loc 1 404 13 is_stmt 0 view .LVU694
 2079 05ee 9248     		ldr	r0, .L184
 2080              	.LVL292:
 404:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2081              		.loc 1 404 13 view .LVU695
 2082 05f0 6121     		movs	r1, #97
 2083              	.LVL293:
 404:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2084              		.loc 1 404 13 view .LVU696
 2085 05f2 FFF7FEFF 		bl	tmc4361A_readInt
 2086              	.LVL294:
 404:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2087              		.loc 1 404 11 view .LVU697
 2088 05f6 3060     		str	r0, [r6]
 2089 05f8 8EE6     		b	.L56
 2090              	.LVL295:
 2091              	.L134:
 405:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VADD_EMF, *value);
 2092              		.loc 1 405 10 is_stmt 1 view .LVU698
 406:boards/TMC4361A_eval.c **** 		}
 2093              		.loc 1 406 4 view .LVU699
 2094              	.LBB259:
 2095              	.LBI259:
  49:boards/TMC4361A_eval.c **** {
 2096              		.loc 1 49 32 view .LVU700
  49:boards/TMC4361A_eval.c **** {
 2097              		.loc 1 49 32 is_stmt 0 view .LVU701
 2098              	.LBE259:
  51:boards/TMC4361A_eval.c **** 
 2099              		.loc 1 51 2 is_stmt 1 view .LVU702
  53:boards/TMC4361A_eval.c **** }
 2100              		.loc 1 53 2 view .LVU703
 406:boards/TMC4361A_eval.c **** 		}
 2101              		.loc 1 406 4 is_stmt 0 view .LVU704
 2102 05fa 3268     		ldr	r2, [r6]
 2103 05fc 8E48     		ldr	r0, .L184
 2104              	.LVL296:
 406:boards/TMC4361A_eval.c **** 		}
 2105              		.loc 1 406 4 view .LVU705
 2106 05fe 6121     		movs	r1, #97
 2107              	.LVL297:
 406:boards/TMC4361A_eval.c **** 		}
 2108              		.loc 1 406 4 view .LVU706
 2109 0600 FFF7FEFF 		bl	tmc4361A_writeInt
 2110              	.LVL298:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2111              		.loc 1 179 11 view .LVU707
 2112 0604 0025     		movs	r5, #0
 2113 0606 87E6     		b	.L56
 2114              	.LVL299:
 2115              	.L83:
 411:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) >> 16;
 2116              		.loc 1 411 3 is_stmt 1 view .LVU708
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2117              		.loc 1 412 13 is_stmt 0 view .LVU709
 2118 0608 8B48     		ldr	r0, .L184
 2119              	.LVL300:
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2120              		.loc 1 412 13 view .LVU710
 2121 060a 1C21     		movs	r1, #28
 2122              	.LVL301:
 411:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) >> 16;
 2123              		.loc 1 411 5 view .LVU711
 2124 060c 25B9     		cbnz	r5, .L135
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2125              		.loc 1 412 4 is_stmt 1 view .LVU712
 2126              	.LBB260:
 2127              	.LBI260:
  49:boards/TMC4361A_eval.c **** {
 2128              		.loc 1 49 32 view .LVU713
 2129              	.LVL302:
  49:boards/TMC4361A_eval.c **** {
 2130              		.loc 1 49 32 is_stmt 0 view .LVU714
 2131              	.LBE260:
  51:boards/TMC4361A_eval.c **** 
 2132              		.loc 1 51 2 is_stmt 1 view .LVU715
  53:boards/TMC4361A_eval.c **** }
 2133              		.loc 1 53 2 view .LVU716
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2134              		.loc 1 412 13 is_stmt 0 view .LVU717
 2135 060e FFF7FEFF 		bl	tmc4361A_readInt
 2136              	.LVL303:
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2137              		.loc 1 412 66 view .LVU718
 2138 0612 0014     		asrs	r0, r0, #16
 412:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2139              		.loc 1 412 11 view .LVU719
 2140 0614 3060     		str	r0, [r6]
 2141 0616 7FE6     		b	.L56
 2142              	.LVL304:
 2143              	.L135:
 413:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x000001FF;
 2144              		.loc 1 413 10 is_stmt 1 view .LVU720
 414:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
 2145              		.loc 1 414 4 view .LVU721
 2146              	.LBB261:
 2147              	.LBI261:
  49:boards/TMC4361A_eval.c **** {
 2148              		.loc 1 49 32 view .LVU722
  49:boards/TMC4361A_eval.c **** {
 2149              		.loc 1 49 32 is_stmt 0 view .LVU723
 2150              	.LBE261:
  51:boards/TMC4361A_eval.c **** 
 2151              		.loc 1 51 2 is_stmt 1 view .LVU724
  53:boards/TMC4361A_eval.c **** }
 2152              		.loc 1 53 2 view .LVU725
 414:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
 2153              		.loc 1 414 13 is_stmt 0 view .LVU726
 2154 0618 FFF7FEFF 		bl	tmc4361A_readInt
 2155              	.LVL305:
 415:boards/TMC4361A_eval.c **** 		}
 2156              		.loc 1 415 4 is_stmt 1 view .LVU727
 2157              	.LBB262:
 2158              	.LBI262:
  49:boards/TMC4361A_eval.c **** {
 2159              		.loc 1 49 32 view .LVU728
  49:boards/TMC4361A_eval.c **** {
 2160              		.loc 1 49 32 is_stmt 0 view .LVU729
 2161              	.LBE262:
  51:boards/TMC4361A_eval.c **** 
 2162              		.loc 1 51 2 is_stmt 1 view .LVU730
  53:boards/TMC4361A_eval.c **** }
 2163              		.loc 1 53 2 view .LVU731
 415:boards/TMC4361A_eval.c **** 		}
 2164              		.loc 1 415 74 is_stmt 0 view .LVU732
 2165 061c 3268     		ldr	r2, [r6]
 414:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value<<16));
 2166              		.loc 1 414 11 view .LVU733
 2167 061e C0F30800 		ubfx	r0, r0, #0, #9
 2168              	.LVL306:
 415:boards/TMC4361A_eval.c **** 		}
 2169              		.loc 1 415 4 view .LVU734
 2170 0622 40EA0242 		orr	r2, r0, r2, lsl #16
 2171 0626 1C21     		movs	r1, #28
 2172 0628 8348     		ldr	r0, .L184
 2173 062a FFF7FEFF 		bl	tmc4361A_writeInt
 2174              	.LVL307:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2175              		.loc 1 179 11 view .LVU735
 2176 062e 0025     		movs	r5, #0
 2177 0630 72E6     		b	.L56
 2178              	.LVL308:
 2179              	.L82:
 420:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) & 0xFF;
 2180              		.loc 1 420 3 is_stmt 1 view .LVU736
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2181              		.loc 1 421 13 is_stmt 0 view .LVU737
 2182 0632 8148     		ldr	r0, .L184
 2183              	.LVL309:
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2184              		.loc 1 421 13 view .LVU738
 2185 0634 1C21     		movs	r1, #28
 2186              	.LVL310:
 420:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_BETA) & 0xFF;
 2187              		.loc 1 420 5 view .LVU739
 2188 0636 25B9     		cbnz	r5, .L136
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2189              		.loc 1 421 4 is_stmt 1 view .LVU740
 2190              	.LBB263:
 2191              	.LBI263:
  49:boards/TMC4361A_eval.c **** {
 2192              		.loc 1 49 32 view .LVU741
 2193              	.LVL311:
  49:boards/TMC4361A_eval.c **** {
 2194              		.loc 1 49 32 is_stmt 0 view .LVU742
 2195              	.LBE263:
  51:boards/TMC4361A_eval.c **** 
 2196              		.loc 1 51 2 is_stmt 1 view .LVU743
  53:boards/TMC4361A_eval.c **** }
 2197              		.loc 1 53 2 view .LVU744
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2198              		.loc 1 421 13 is_stmt 0 view .LVU745
 2199 0638 FFF7FEFF 		bl	tmc4361A_readInt
 2200              	.LVL312:
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2201              		.loc 1 421 66 view .LVU746
 2202 063c C0B2     		uxtb	r0, r0
 421:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2203              		.loc 1 421 11 view .LVU747
 2204 063e 3060     		str	r0, [r6]
 2205 0640 6AE6     		b	.L56
 2206              	.LVL313:
 2207              	.L136:
 422:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor),  TMC4361A_CL_BETA) & 0x00FF0000;
 2208              		.loc 1 422 10 is_stmt 1 view .LVU748
 423:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
 2209              		.loc 1 423 4 view .LVU749
 2210              	.LBB264:
 2211              	.LBI264:
  49:boards/TMC4361A_eval.c **** {
 2212              		.loc 1 49 32 view .LVU750
  49:boards/TMC4361A_eval.c **** {
 2213              		.loc 1 49 32 is_stmt 0 view .LVU751
 2214              	.LBE264:
  51:boards/TMC4361A_eval.c **** 
 2215              		.loc 1 51 2 is_stmt 1 view .LVU752
  53:boards/TMC4361A_eval.c **** }
 2216              		.loc 1 53 2 view .LVU753
 423:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
 2217              		.loc 1 423 13 is_stmt 0 view .LVU754
 2218 0642 FFF7FEFF 		bl	tmc4361A_readInt
 2219              	.LVL314:
 424:boards/TMC4361A_eval.c **** 		}
 2220              		.loc 1 424 4 is_stmt 1 view .LVU755
 2221              	.LBB265:
 2222              	.LBI265:
  49:boards/TMC4361A_eval.c **** {
 2223              		.loc 1 49 32 view .LVU756
  49:boards/TMC4361A_eval.c **** {
 2224              		.loc 1 49 32 is_stmt 0 view .LVU757
 2225              	.LBE265:
  51:boards/TMC4361A_eval.c **** 
 2226              		.loc 1 51 2 is_stmt 1 view .LVU758
  53:boards/TMC4361A_eval.c **** }
 2227              		.loc 1 53 2 view .LVU759
 424:boards/TMC4361A_eval.c **** 		}
 2228              		.loc 1 424 75 is_stmt 0 view .LVU760
 2229 0646 3268     		ldr	r2, [r6]
 423:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_BETA, uvalue | (*value & 0x1FF));
 2230              		.loc 1 423 11 view .LVU761
 2231 0648 00F47F00 		and	r0, r0, #16711680
 2232              	.LVL315:
 424:boards/TMC4361A_eval.c **** 		}
 2233              		.loc 1 424 75 view .LVU762
 2234 064c C2F30802 		ubfx	r2, r2, #0, #9
 424:boards/TMC4361A_eval.c **** 		}
 2235              		.loc 1 424 4 view .LVU763
 2236 0650 0243     		orrs	r2, r2, r0
 2237 0652 1C21     		movs	r1, #28
 2238 0654 7848     		ldr	r0, .L184
 2239              	.LVL316:
 424:boards/TMC4361A_eval.c **** 		}
 2240              		.loc 1 424 4 view .LVU764
 2241 0656 FFF7FEFF 		bl	tmc4361A_writeInt
 2242              	.LVL317:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2243              		.loc 1 179 11 view .LVU765
 2244 065a 0025     		movs	r5, #0
 2245 065c 5CE6     		b	.L56
 2246              	.LVL318:
 2247              	.L81:
 429:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_OFFSET);
 2248              		.loc 1 429 3 is_stmt 1 view .LVU766
 429:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_OFFSET);
 2249              		.loc 1 429 5 is_stmt 0 view .LVU767
 2250 065e 28B9     		cbnz	r0, .L137
 430:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2251              		.loc 1 430 4 is_stmt 1 view .LVU768
 2252              	.LBB266:
 2253              	.LBI266:
  49:boards/TMC4361A_eval.c **** {
 2254              		.loc 1 49 32 view .LVU769
 2255              	.LVL319:
  49:boards/TMC4361A_eval.c **** {
 2256              		.loc 1 49 32 is_stmt 0 view .LVU770
 2257              	.LBE266:
  51:boards/TMC4361A_eval.c **** 
 2258              		.loc 1 51 2 is_stmt 1 view .LVU771
  53:boards/TMC4361A_eval.c **** }
 2259              		.loc 1 53 2 view .LVU772
 430:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2260              		.loc 1 430 13 is_stmt 0 view .LVU773
 2261 0660 7548     		ldr	r0, .L184
 2262              	.LVL320:
 430:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2263              		.loc 1 430 13 view .LVU774
 2264 0662 5921     		movs	r1, #89
 2265              	.LVL321:
 430:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2266              		.loc 1 430 13 view .LVU775
 2267 0664 FFF7FEFF 		bl	tmc4361A_readInt
 2268              	.LVL322:
 430:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2269              		.loc 1 430 11 view .LVU776
 2270 0668 3060     		str	r0, [r6]
 2271 066a 55E6     		b	.L56
 2272              	.LVL323:
 2273              	.L137:
 431:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_OFFSET, *value);
 2274              		.loc 1 431 10 is_stmt 1 view .LVU777
 432:boards/TMC4361A_eval.c **** 		}
 2275              		.loc 1 432 4 view .LVU778
 2276              	.LBB267:
 2277              	.LBI267:
  49:boards/TMC4361A_eval.c **** {
 2278              		.loc 1 49 32 view .LVU779
  49:boards/TMC4361A_eval.c **** {
 2279              		.loc 1 49 32 is_stmt 0 view .LVU780
 2280              	.LBE267:
  51:boards/TMC4361A_eval.c **** 
 2281              		.loc 1 51 2 is_stmt 1 view .LVU781
  53:boards/TMC4361A_eval.c **** }
 2282              		.loc 1 53 2 view .LVU782
 432:boards/TMC4361A_eval.c **** 		}
 2283              		.loc 1 432 4 is_stmt 0 view .LVU783
 2284 066c 3268     		ldr	r2, [r6]
 2285 066e 7248     		ldr	r0, .L184
 2286              	.LVL324:
 432:boards/TMC4361A_eval.c **** 		}
 2287              		.loc 1 432 4 view .LVU784
 2288 0670 5921     		movs	r1, #89
 2289              	.LVL325:
 432:boards/TMC4361A_eval.c **** 		}
 2290              		.loc 1 432 4 view .LVU785
 2291 0672 FFF7FEFF 		bl	tmc4361A_writeInt
 2292              	.LVL326:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2293              		.loc 1 179 11 view .LVU786
 2294 0676 0025     		movs	r5, #0
 2295 0678 4EE6     		b	.L56
 2296              	.LVL327:
 2297              	.L80:
 437:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
 2298              		.loc 1 437 3 is_stmt 1 view .LVU787
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2299              		.loc 1 438 72 is_stmt 0 view .LVU788
 2300 067a 6F48     		ldr	r0, .L184
 2301              	.LVL328:
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2302              		.loc 1 438 72 view .LVU789
 2303 067c 0621     		movs	r1, #6
 2304              	.LVL329:
 437:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 0) & 0xFF;
 2305              		.loc 1 437 5 view .LVU790
 2306 067e 25B9     		cbnz	r5, .L138
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2307              		.loc 1 438 4 is_stmt 1 view .LVU791
 2308              	.LBB268:
 2309              	.LBI268:
  49:boards/TMC4361A_eval.c **** {
 2310              		.loc 1 49 32 view .LVU792
 2311              	.LVL330:
  49:boards/TMC4361A_eval.c **** {
 2312              		.loc 1 49 32 is_stmt 0 view .LVU793
 2313              	.LBE268:
  51:boards/TMC4361A_eval.c **** 
 2314              		.loc 1 51 2 is_stmt 1 view .LVU794
  53:boards/TMC4361A_eval.c **** }
 2315              		.loc 1 53 2 view .LVU795
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2316              		.loc 1 438 72 is_stmt 0 view .LVU796
 2317 0680 FFF7FEFF 		bl	tmc4361A_readInt
 2318              	.LVL331:
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2319              		.loc 1 438 78 view .LVU797
 2320 0684 C0B2     		uxtb	r0, r0
 438:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2321              		.loc 1 438 11 view .LVU798
 2322 0686 3060     		str	r0, [r6]
 2323 0688 46E6     		b	.L56
 2324              	.LVL332:
 2325              	.L138:
 439:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<0);
 2326              		.loc 1 439 10 is_stmt 1 view .LVU799
 440:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 0;
 2327              		.loc 1 440 4 view .LVU800
 2328              	.LBB269:
 2329              	.LBI269:
  49:boards/TMC4361A_eval.c **** {
 2330              		.loc 1 49 32 view .LVU801
  49:boards/TMC4361A_eval.c **** {
 2331              		.loc 1 49 32 is_stmt 0 view .LVU802
 2332              	.LBE269:
  51:boards/TMC4361A_eval.c **** 
 2333              		.loc 1 51 2 is_stmt 1 view .LVU803
  53:boards/TMC4361A_eval.c **** }
 2334              		.loc 1 53 2 view .LVU804
 440:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 0;
 2335              		.loc 1 440 13 is_stmt 0 view .LVU805
 2336 068a FFF7FEFF 		bl	tmc4361A_readInt
 2337              	.LVL333:
 441:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2338              		.loc 1 441 30 view .LVU806
 2339 068e 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 440:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 0;
 2340              		.loc 1 440 11 view .LVU807
 2341 0690 20F0FF00 		bic	r0, r0, #255
 2342              	.LVL334:
 441:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2343              		.loc 1 441 4 is_stmt 1 view .LVU808
 442:boards/TMC4361A_eval.c **** 		}
 2344              		.loc 1 442 4 view .LVU809
 2345              	.LBB270:
 2346              	.LBI270:
  49:boards/TMC4361A_eval.c **** {
 2347              		.loc 1 49 32 view .LVU810
  49:boards/TMC4361A_eval.c **** {
 2348              		.loc 1 49 32 is_stmt 0 view .LVU811
 2349              	.LBE270:
  51:boards/TMC4361A_eval.c **** 
 2350              		.loc 1 51 2 is_stmt 1 view .LVU812
  53:boards/TMC4361A_eval.c **** }
 2351              		.loc 1 53 2 view .LVU813
 442:boards/TMC4361A_eval.c **** 		}
 2352              		.loc 1 442 4 is_stmt 0 view .LVU814
 2353 0694 0243     		orrs	r2, r2, r0
 2354 0696 0621     		movs	r1, #6
 2355 0698 6748     		ldr	r0, .L184
 2356              	.LVL335:
 442:boards/TMC4361A_eval.c **** 		}
 2357              		.loc 1 442 4 view .LVU815
 2358 069a FFF7FEFF 		bl	tmc4361A_writeInt
 2359              	.LVL336:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2360              		.loc 1 179 11 view .LVU816
 2361 069e 0025     		movs	r5, #0
 2362 06a0 3AE6     		b	.L56
 2363              	.LVL337:
 2364              	.L79:
 447:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 8) & 0xFF;
 2365              		.loc 1 447 3 is_stmt 1 view .LVU817
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2366              		.loc 1 448 14 is_stmt 0 view .LVU818
 2367 06a2 6548     		ldr	r0, .L184
 2368              	.LVL338:
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2369              		.loc 1 448 14 view .LVU819
 2370 06a4 0621     		movs	r1, #6
 2371              	.LVL339:
 447:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 8) & 0xFF;
 2372              		.loc 1 447 5 view .LVU820
 2373 06a6 2DB9     		cbnz	r5, .L139
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2374              		.loc 1 448 4 is_stmt 1 view .LVU821
 2375              	.LBB271:
 2376              	.LBI271:
  49:boards/TMC4361A_eval.c **** {
 2377              		.loc 1 49 32 view .LVU822
 2378              	.LVL340:
  49:boards/TMC4361A_eval.c **** {
 2379              		.loc 1 49 32 is_stmt 0 view .LVU823
 2380              	.LBE271:
  51:boards/TMC4361A_eval.c **** 
 2381              		.loc 1 51 2 is_stmt 1 view .LVU824
  53:boards/TMC4361A_eval.c **** }
 2382              		.loc 1 53 2 view .LVU825
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2383              		.loc 1 448 14 is_stmt 0 view .LVU826
 2384 06a8 FFF7FEFF 		bl	tmc4361A_readInt
 2385              	.LVL341:
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2386              		.loc 1 448 78 view .LVU827
 2387 06ac C0F30720 		ubfx	r0, r0, #8, #8
 448:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2388              		.loc 1 448 11 view .LVU828
 2389 06b0 3060     		str	r0, [r6]
 2390 06b2 31E6     		b	.L56
 2391              	.LVL342:
 2392              	.L139:
 449:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<8);
 2393              		.loc 1 449 10 is_stmt 1 view .LVU829
 450:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 8;
 2394              		.loc 1 450 4 view .LVU830
 2395              	.LBB272:
 2396              	.LBI272:
  49:boards/TMC4361A_eval.c **** {
 2397              		.loc 1 49 32 view .LVU831
  49:boards/TMC4361A_eval.c **** {
 2398              		.loc 1 49 32 is_stmt 0 view .LVU832
 2399              	.LBE272:
  51:boards/TMC4361A_eval.c **** 
 2400              		.loc 1 51 2 is_stmt 1 view .LVU833
  53:boards/TMC4361A_eval.c **** }
 2401              		.loc 1 53 2 view .LVU834
 450:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 8;
 2402              		.loc 1 450 13 is_stmt 0 view .LVU835
 2403 06b4 FFF7FEFF 		bl	tmc4361A_readInt
 2404              	.LVL343:
 451:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2405              		.loc 1 451 30 view .LVU836
 2406 06b8 3368     		ldr	r3, [r6]
 2407 06ba 1B02     		lsls	r3, r3, #8
 450:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 8;
 2408              		.loc 1 450 11 view .LVU837
 2409 06bc 20F47F42 		bic	r2, r0, #65280
 2410              	.LVL344:
 451:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2411              		.loc 1 451 4 is_stmt 1 view .LVU838
 452:boards/TMC4361A_eval.c **** 		}
 2412              		.loc 1 452 4 view .LVU839
 2413              	.LBB273:
 2414              	.LBI273:
  49:boards/TMC4361A_eval.c **** {
 2415              		.loc 1 49 32 view .LVU840
  49:boards/TMC4361A_eval.c **** {
 2416              		.loc 1 49 32 is_stmt 0 view .LVU841
 2417              	.LBE273:
  51:boards/TMC4361A_eval.c **** 
 2418              		.loc 1 51 2 is_stmt 1 view .LVU842
  53:boards/TMC4361A_eval.c **** }
 2419              		.loc 1 53 2 view .LVU843
 451:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2420              		.loc 1 451 30 is_stmt 0 view .LVU844
 2421 06c0 9BB2     		uxth	r3, r3
 452:boards/TMC4361A_eval.c **** 		}
 2422              		.loc 1 452 4 view .LVU845
 2423 06c2 5D48     		ldr	r0, .L184
 2424 06c4 1A43     		orrs	r2, r2, r3
 2425              	.LVL345:
 452:boards/TMC4361A_eval.c **** 		}
 2426              		.loc 1 452 4 view .LVU846
 2427 06c6 0621     		movs	r1, #6
 2428 06c8 FFF7FEFF 		bl	tmc4361A_writeInt
 2429              	.LVL346:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2430              		.loc 1 179 11 view .LVU847
 2431 06cc 0025     		movs	r5, #0
 2432 06ce 23E6     		b	.L56
 2433              	.LVL347:
 2434              	.L78:
 457:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_P_WR];
 2435              		.loc 1 457 3 is_stmt 1 view .LVU848
 457:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_P_WR];
 2436              		.loc 1 457 5 is_stmt 0 view .LVU849
 2437 06d0 28B9     		cbnz	r0, .L140
 458:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2438              		.loc 1 458 4 is_stmt 1 view .LVU850
 458:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2439              		.loc 1 458 21 is_stmt 0 view .LVU851
 2440 06d2 5A4B     		ldr	r3, .L184+4
 458:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2441              		.loc 1 458 44 view .LVU852
 2442 06d4 5B6A     		ldr	r3, [r3, #36]
 2443 06d6 D3F86C31 		ldr	r3, [r3, #364]
 458:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2444              		.loc 1 458 11 view .LVU853
 2445 06da 3360     		str	r3, [r6]
 2446 06dc 1CE6     		b	.L56
 2447              	.L140:
 459:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_P_WR, *value);
 2448              		.loc 1 459 10 is_stmt 1 view .LVU854
 460:boards/TMC4361A_eval.c **** 		}
 2449              		.loc 1 460 4 view .LVU855
 2450              	.LBB274:
 2451              	.LBI274:
  49:boards/TMC4361A_eval.c **** {
 2452              		.loc 1 49 32 view .LVU856
 2453              	.LVL348:
  49:boards/TMC4361A_eval.c **** {
 2454              		.loc 1 49 32 is_stmt 0 view .LVU857
 2455              	.LBE274:
  51:boards/TMC4361A_eval.c **** 
 2456              		.loc 1 51 2 is_stmt 1 view .LVU858
  53:boards/TMC4361A_eval.c **** }
 2457              		.loc 1 53 2 view .LVU859
 460:boards/TMC4361A_eval.c **** 		}
 2458              		.loc 1 460 4 is_stmt 0 view .LVU860
 2459 06de 3268     		ldr	r2, [r6]
 2460 06e0 5548     		ldr	r0, .L184
 2461              	.LVL349:
 460:boards/TMC4361A_eval.c **** 		}
 2462              		.loc 1 460 4 view .LVU861
 2463 06e2 5A21     		movs	r1, #90
 2464              	.LVL350:
 460:boards/TMC4361A_eval.c **** 		}
 2465              		.loc 1 460 4 view .LVU862
 2466 06e4 FFF7FEFF 		bl	tmc4361A_writeInt
 2467              	.LVL351:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2468              		.loc 1 179 11 view .LVU863
 2469 06e8 0025     		movs	r5, #0
 2470 06ea 15E6     		b	.L56
 2471              	.LVL352:
 2472              	.L77:
 465:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_I_WR];
 2473              		.loc 1 465 3 is_stmt 1 view .LVU864
 465:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_CL_VMAX_CALC_I_WR];
 2474              		.loc 1 465 5 is_stmt 0 view .LVU865
 2475 06ec 28B9     		cbnz	r0, .L141
 466:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2476              		.loc 1 466 4 is_stmt 1 view .LVU866
 466:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2477              		.loc 1 466 21 is_stmt 0 view .LVU867
 2478 06ee 534B     		ldr	r3, .L184+4
 466:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2479              		.loc 1 466 44 view .LVU868
 2480 06f0 5B6A     		ldr	r3, [r3, #36]
 2481 06f2 D3F87031 		ldr	r3, [r3, #368]
 466:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2482              		.loc 1 466 11 view .LVU869
 2483 06f6 3360     		str	r3, [r6]
 2484 06f8 0EE6     		b	.L56
 2485              	.L141:
 467:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_VMAX_CALC_I_WR, *value);
 2486              		.loc 1 467 10 is_stmt 1 view .LVU870
 468:boards/TMC4361A_eval.c **** 		}
 2487              		.loc 1 468 4 view .LVU871
 2488              	.LBB275:
 2489              	.LBI275:
  49:boards/TMC4361A_eval.c **** {
 2490              		.loc 1 49 32 view .LVU872
 2491              	.LVL353:
  49:boards/TMC4361A_eval.c **** {
 2492              		.loc 1 49 32 is_stmt 0 view .LVU873
 2493              	.LBE275:
  51:boards/TMC4361A_eval.c **** 
 2494              		.loc 1 51 2 is_stmt 1 view .LVU874
  53:boards/TMC4361A_eval.c **** }
 2495              		.loc 1 53 2 view .LVU875
 468:boards/TMC4361A_eval.c **** 		}
 2496              		.loc 1 468 4 is_stmt 0 view .LVU876
 2497 06fa 3268     		ldr	r2, [r6]
 2498 06fc 4E48     		ldr	r0, .L184
 2499              	.LVL354:
 468:boards/TMC4361A_eval.c **** 		}
 2500              		.loc 1 468 4 view .LVU877
 2501 06fe 5B21     		movs	r1, #91
 2502              	.LVL355:
 468:boards/TMC4361A_eval.c **** 		}
 2503              		.loc 1 468 4 view .LVU878
 2504 0700 FFF7FEFF 		bl	tmc4361A_writeInt
 2505              	.LVL356:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2506              		.loc 1 179 11 view .LVU879
 2507 0704 0025     		movs	r5, #0
 2508 0706 07E6     		b	.L56
 2509              	.LVL357:
 2510              	.L76:
 475:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 0;
 2511              		.loc 1 475 3 is_stmt 1 view .LVU880
 2512 0708 4C48     		ldr	r0, .L184+4
 2513              	.LVL358:
 475:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 0;
 2514              		.loc 1 475 3 is_stmt 0 view .LVU881
 2515 070a 436A     		ldr	r3, [r0, #36]
 2516 070c D3F87031 		ldr	r3, [r3, #368]
 475:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 0;
 2517              		.loc 1 475 5 view .LVU882
 2518 0710 1DB9     		cbnz	r5, .L142
 476:boards/TMC4361A_eval.c **** 			*value &= 0x7FFF;
 2519              		.loc 1 476 4 is_stmt 1 view .LVU883
 477:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2520              		.loc 1 477 4 view .LVU884
 477:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2521              		.loc 1 477 11 is_stmt 0 view .LVU885
 2522 0712 C3F30E03 		ubfx	r3, r3, #0, #15
 2523 0716 3360     		str	r3, [r6]
 2524 0718 FEE5     		b	.L56
 2525              	.L142:
 478:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR];
 2526              		.loc 1 478 10 is_stmt 1 view .LVU886
 479:boards/TMC4361A_eval.c **** 			uvalue &= ~(0x7FFF << 0);
 2527              		.loc 1 479 4 view .LVU887
 2528              	.LVL359:
 480:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x7FFF) << 0;
 2529              		.loc 1 480 4 view .LVU888
 481:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 2530              		.loc 1 481 32 is_stmt 0 view .LVU889
 2531 071a 3268     		ldr	r2, [r6]
 480:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x7FFF) << 0;
 2532              		.loc 1 480 11 view .LVU890
 2533 071c 23F4FF43 		bic	r3, r3, #32640
 2534              	.LVL360:
 480:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x7FFF) << 0;
 2535              		.loc 1 480 11 view .LVU891
 2536 0720 23F07F03 		bic	r3, r3, #127
 2537              	.LVL361:
 481:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 2538              		.loc 1 481 4 is_stmt 1 view .LVU892
 482:boards/TMC4361A_eval.c **** 		}
 2539              		.loc 1 482 4 view .LVU893
 2540              	.LBB276:
 2541              	.LBI276:
  49:boards/TMC4361A_eval.c **** {
 2542              		.loc 1 49 32 view .LVU894
  49:boards/TMC4361A_eval.c **** {
 2543              		.loc 1 49 32 is_stmt 0 view .LVU895
 2544              	.LBE276:
  51:boards/TMC4361A_eval.c **** 
 2545              		.loc 1 51 2 is_stmt 1 view .LVU896
  53:boards/TMC4361A_eval.c **** }
 2546              		.loc 1 53 2 view .LVU897
 481:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 2547              		.loc 1 481 32 is_stmt 0 view .LVU898
 2548 0724 C2F30E02 		ubfx	r2, r2, #0, #15
 2549              	.LVL362:
 482:boards/TMC4361A_eval.c **** 		}
 2550              		.loc 1 482 4 view .LVU899
 2551 0728 1A43     		orrs	r2, r2, r3
 2552 072a 5B21     		movs	r1, #91
 2553              	.LVL363:
 482:boards/TMC4361A_eval.c **** 		}
 2554              		.loc 1 482 4 view .LVU900
 2555 072c 2430     		adds	r0, r0, #36
 2556 072e FFF7FEFF 		bl	tmc4361A_writeInt
 2557              	.LVL364:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2558              		.loc 1 179 11 view .LVU901
 2559 0732 0025     		movs	r5, #0
 2560 0734 F0E5     		b	.L56
 2561              	.LVL365:
 2562              	.L75:
 489:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 16;
 2563              		.loc 1 489 3 is_stmt 1 view .LVU902
 2564 0736 4148     		ldr	r0, .L184+4
 2565              	.LVL366:
 489:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 16;
 2566              		.loc 1 489 3 is_stmt 0 view .LVU903
 2567 0738 436A     		ldr	r3, [r0, #36]
 2568 073a D3F87021 		ldr	r2, [r3, #368]
 489:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR] >> 16;
 2569              		.loc 1 489 5 view .LVU904
 2570 073e 1DB9     		cbnz	r5, .L143
 490:boards/TMC4361A_eval.c **** 			*value &= 0xFF;
 2571              		.loc 1 490 4 is_stmt 1 view .LVU905
 491:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2572              		.loc 1 491 4 view .LVU906
 491:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2573              		.loc 1 491 11 is_stmt 0 view .LVU907
 2574 0740 C2F30742 		ubfx	r2, r2, #16, #8
 2575 0744 3260     		str	r2, [r6]
 2576 0746 E7E5     		b	.L56
 2577              	.L143:
 492:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_PID_I_WR];
 2578              		.loc 1 492 10 is_stmt 1 view .LVU908
 493:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 16);
 2579              		.loc 1 493 4 view .LVU909
 2580              	.LVL367:
 494:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 2581              		.loc 1 494 4 view .LVU910
 495:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 2582              		.loc 1 495 30 is_stmt 0 view .LVU911
 2583 0748 3368     		ldr	r3, [r6]
 2584 074a 1B04     		lsls	r3, r3, #16
 2585 074c 03F47F03 		and	r3, r3, #16711680
 494:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 2586              		.loc 1 494 11 view .LVU912
 2587 0750 22F47F02 		bic	r2, r2, #16711680
 2588              	.LVL368:
 495:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_I_WR, uvalue);
 2589              		.loc 1 495 4 is_stmt 1 view .LVU913
 496:boards/TMC4361A_eval.c **** 		}
 2590              		.loc 1 496 4 view .LVU914
 2591              	.LBB277:
 2592              	.LBI277:
  49:boards/TMC4361A_eval.c **** {
 2593              		.loc 1 49 32 view .LVU915
  49:boards/TMC4361A_eval.c **** {
 2594              		.loc 1 49 32 is_stmt 0 view .LVU916
 2595              	.LBE277:
  51:boards/TMC4361A_eval.c **** 
 2596              		.loc 1 51 2 is_stmt 1 view .LVU917
  53:boards/TMC4361A_eval.c **** }
 2597              		.loc 1 53 2 view .LVU918
 496:boards/TMC4361A_eval.c **** 		}
 2598              		.loc 1 496 4 is_stmt 0 view .LVU919
 2599 0754 1A43     		orrs	r2, r2, r3
 2600              	.LVL369:
 496:boards/TMC4361A_eval.c **** 		}
 2601              		.loc 1 496 4 view .LVU920
 2602 0756 5B21     		movs	r1, #91
 2603              	.LVL370:
 496:boards/TMC4361A_eval.c **** 		}
 2604              		.loc 1 496 4 view .LVU921
 2605 0758 2430     		adds	r0, r0, #36
 2606 075a FFF7FEFF 		bl	tmc4361A_writeInt
 2607              	.LVL371:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2608              		.loc 1 179 11 view .LVU922
 2609 075e 0025     		movs	r5, #0
 2610 0760 DAE5     		b	.L56
 2611              	.LVL372:
 2612              	.L74:
 501:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR);
 2613              		.loc 1 501 3 is_stmt 1 view .LVU923
 501:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR);
 2614              		.loc 1 501 5 is_stmt 0 view .LVU924
 2615 0762 28B9     		cbnz	r0, .L144
 502:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2616              		.loc 1 502 4 is_stmt 1 view .LVU925
 2617              	.LBB278:
 2618              	.LBI278:
  49:boards/TMC4361A_eval.c **** {
 2619              		.loc 1 49 32 view .LVU926
 2620              	.LVL373:
  49:boards/TMC4361A_eval.c **** {
 2621              		.loc 1 49 32 is_stmt 0 view .LVU927
 2622              	.LBE278:
  51:boards/TMC4361A_eval.c **** 
 2623              		.loc 1 51 2 is_stmt 1 view .LVU928
  53:boards/TMC4361A_eval.c **** }
 2624              		.loc 1 53 2 view .LVU929
 502:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2625              		.loc 1 502 13 is_stmt 0 view .LVU930
 2626 0764 3448     		ldr	r0, .L184
 2627              	.LVL374:
 502:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2628              		.loc 1 502 13 view .LVU931
 2629 0766 5E21     		movs	r1, #94
 2630              	.LVL375:
 502:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2631              		.loc 1 502 13 view .LVU932
 2632 0768 FFF7FEFF 		bl	tmc4361A_readInt
 2633              	.LVL376:
 502:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2634              		.loc 1 502 11 view .LVU933
 2635 076c 3060     		str	r0, [r6]
 2636 076e D3E5     		b	.L56
 2637              	.LVL377:
 2638              	.L144:
 503:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_PID_DV_CLIP_WR, *value);
 2639              		.loc 1 503 10 is_stmt 1 view .LVU934
 504:boards/TMC4361A_eval.c **** 		}
 2640              		.loc 1 504 4 view .LVU935
 2641              	.LBB279:
 2642              	.LBI279:
  49:boards/TMC4361A_eval.c **** {
 2643              		.loc 1 49 32 view .LVU936
  49:boards/TMC4361A_eval.c **** {
 2644              		.loc 1 49 32 is_stmt 0 view .LVU937
 2645              	.LBE279:
  51:boards/TMC4361A_eval.c **** 
 2646              		.loc 1 51 2 is_stmt 1 view .LVU938
  53:boards/TMC4361A_eval.c **** }
 2647              		.loc 1 53 2 view .LVU939
 504:boards/TMC4361A_eval.c **** 		}
 2648              		.loc 1 504 4 is_stmt 0 view .LVU940
 2649 0770 3268     		ldr	r2, [r6]
 2650 0772 3148     		ldr	r0, .L184
 2651              	.LVL378:
 504:boards/TMC4361A_eval.c **** 		}
 2652              		.loc 1 504 4 view .LVU941
 2653 0774 5E21     		movs	r1, #94
 2654              	.LVL379:
 504:boards/TMC4361A_eval.c **** 		}
 2655              		.loc 1 504 4 view .LVU942
 2656 0776 FFF7FEFF 		bl	tmc4361A_writeInt
 2657              	.LVL380:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2658              		.loc 1 179 11 view .LVU943
 2659 077a 0025     		movs	r5, #0
 2660 077c CCE5     		b	.L56
 2661              	.LVL381:
 2662              	.L73:
 509:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY);
 2663              		.loc 1 509 3 is_stmt 1 view .LVU944
 509:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY);
 2664              		.loc 1 509 5 is_stmt 0 view .LVU945
 2665 077e 28B9     		cbnz	r0, .L145
 510:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2666              		.loc 1 510 4 is_stmt 1 view .LVU946
 2667              	.LBB280:
 2668              	.LBI280:
  49:boards/TMC4361A_eval.c **** {
 2669              		.loc 1 49 32 view .LVU947
 2670              	.LVL382:
  49:boards/TMC4361A_eval.c **** {
 2671              		.loc 1 49 32 is_stmt 0 view .LVU948
 2672              	.LBE280:
  51:boards/TMC4361A_eval.c **** 
 2673              		.loc 1 51 2 is_stmt 1 view .LVU949
  53:boards/TMC4361A_eval.c **** }
 2674              		.loc 1 53 2 view .LVU950
 510:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2675              		.loc 1 510 13 is_stmt 0 view .LVU951
 2676 0780 2D48     		ldr	r0, .L184
 2677              	.LVL383:
 510:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2678              		.loc 1 510 13 view .LVU952
 2679 0782 1821     		movs	r1, #24
 2680              	.LVL384:
 510:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2681              		.loc 1 510 13 view .LVU953
 2682 0784 FFF7FEFF 		bl	tmc4361A_readInt
 2683              	.LVL385:
 510:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2684              		.loc 1 510 11 view .LVU954
 2685 0788 3060     		str	r0, [r6]
 2686 078a C5E5     		b	.L56
 2687              	.LVL386:
 2688              	.L145:
 511:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_UPSCALE_DELAY, *value);
 2689              		.loc 1 511 10 is_stmt 1 view .LVU955
 512:boards/TMC4361A_eval.c **** 		}
 2690              		.loc 1 512 4 view .LVU956
 2691              	.LBB281:
 2692              	.LBI281:
  49:boards/TMC4361A_eval.c **** {
 2693              		.loc 1 49 32 view .LVU957
  49:boards/TMC4361A_eval.c **** {
 2694              		.loc 1 49 32 is_stmt 0 view .LVU958
 2695              	.LBE281:
  51:boards/TMC4361A_eval.c **** 
 2696              		.loc 1 51 2 is_stmt 1 view .LVU959
  53:boards/TMC4361A_eval.c **** }
 2697              		.loc 1 53 2 view .LVU960
 512:boards/TMC4361A_eval.c **** 		}
 2698              		.loc 1 512 4 is_stmt 0 view .LVU961
 2699 078c 3268     		ldr	r2, [r6]
 2700 078e 2A48     		ldr	r0, .L184
 2701              	.LVL387:
 512:boards/TMC4361A_eval.c **** 		}
 2702              		.loc 1 512 4 view .LVU962
 2703 0790 1821     		movs	r1, #24
 2704              	.LVL388:
 512:boards/TMC4361A_eval.c **** 		}
 2705              		.loc 1 512 4 view .LVU963
 2706 0792 FFF7FEFF 		bl	tmc4361A_writeInt
 2707              	.LVL389:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2708              		.loc 1 179 11 view .LVU964
 2709 0796 0025     		movs	r5, #0
 2710 0798 BEE5     		b	.L56
 2711              	.LVL390:
 2712              	.L72:
 517:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY);
 2713              		.loc 1 517 3 is_stmt 1 view .LVU965
 517:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY);
 2714              		.loc 1 517 5 is_stmt 0 view .LVU966
 2715 079a 28B9     		cbnz	r0, .L146
 518:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2716              		.loc 1 518 4 is_stmt 1 view .LVU967
 2717              	.LBB282:
 2718              	.LBI282:
  49:boards/TMC4361A_eval.c **** {
 2719              		.loc 1 49 32 view .LVU968
 2720              	.LVL391:
  49:boards/TMC4361A_eval.c **** {
 2721              		.loc 1 49 32 is_stmt 0 view .LVU969
 2722              	.LBE282:
  51:boards/TMC4361A_eval.c **** 
 2723              		.loc 1 51 2 is_stmt 1 view .LVU970
  53:boards/TMC4361A_eval.c **** }
 2724              		.loc 1 53 2 view .LVU971
 518:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2725              		.loc 1 518 13 is_stmt 0 view .LVU972
 2726 079c 2648     		ldr	r0, .L184
 2727              	.LVL392:
 518:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2728              		.loc 1 518 13 view .LVU973
 2729 079e 1921     		movs	r1, #25
 2730              	.LVL393:
 518:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2731              		.loc 1 518 13 view .LVU974
 2732 07a0 FFF7FEFF 		bl	tmc4361A_readInt
 2733              	.LVL394:
 518:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2734              		.loc 1 518 11 view .LVU975
 2735 07a4 3060     		str	r0, [r6]
 2736 07a6 B7E5     		b	.L56
 2737              	.LVL395:
 2738              	.L146:
 519:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DOWNSCALE_DELAY, *value);
 2739              		.loc 1 519 10 is_stmt 1 view .LVU976
 520:boards/TMC4361A_eval.c **** 		}
 2740              		.loc 1 520 4 view .LVU977
 2741              	.LBB283:
 2742              	.LBI283:
  49:boards/TMC4361A_eval.c **** {
 2743              		.loc 1 49 32 view .LVU978
  49:boards/TMC4361A_eval.c **** {
 2744              		.loc 1 49 32 is_stmt 0 view .LVU979
 2745              	.LBE283:
  51:boards/TMC4361A_eval.c **** 
 2746              		.loc 1 51 2 is_stmt 1 view .LVU980
  53:boards/TMC4361A_eval.c **** }
 2747              		.loc 1 53 2 view .LVU981
 520:boards/TMC4361A_eval.c **** 		}
 2748              		.loc 1 520 4 is_stmt 0 view .LVU982
 2749 07a8 3268     		ldr	r2, [r6]
 2750 07aa 2348     		ldr	r0, .L184
 2751              	.LVL396:
 520:boards/TMC4361A_eval.c **** 		}
 2752              		.loc 1 520 4 view .LVU983
 2753 07ac 1921     		movs	r1, #25
 2754              	.LVL397:
 520:boards/TMC4361A_eval.c **** 		}
 2755              		.loc 1 520 4 view .LVU984
 2756 07ae FFF7FEFF 		bl	tmc4361A_writeInt
 2757              	.LVL398:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2758              		.loc 1 179 11 view .LVU985
 2759 07b2 0025     		movs	r5, #0
 2760 07b4 B0E5     		b	.L56
 2761              	.LVL399:
 2762              	.L71:
 525:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR);
 2763              		.loc 1 525 3 is_stmt 1 view .LVU986
 525:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR);
 2764              		.loc 1 525 5 is_stmt 0 view .LVU987
 2765 07b6 28B9     		cbnz	r0, .L147
 526:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2766              		.loc 1 526 4 is_stmt 1 view .LVU988
 2767              	.LBB284:
 2768              	.LBI284:
  49:boards/TMC4361A_eval.c **** {
 2769              		.loc 1 49 32 view .LVU989
 2770              	.LVL400:
  49:boards/TMC4361A_eval.c **** {
 2771              		.loc 1 49 32 is_stmt 0 view .LVU990
 2772              	.LBE284:
  51:boards/TMC4361A_eval.c **** 
 2773              		.loc 1 51 2 is_stmt 1 view .LVU991
  53:boards/TMC4361A_eval.c **** }
 2774              		.loc 1 53 2 view .LVU992
 526:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2775              		.loc 1 526 13 is_stmt 0 view .LVU993
 2776 07b8 1F48     		ldr	r0, .L184
 2777              	.LVL401:
 526:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2778              		.loc 1 526 13 view .LVU994
 2779 07ba 5C21     		movs	r1, #92
 2780              	.LVL402:
 526:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2781              		.loc 1 526 13 view .LVU995
 2782 07bc FFF7FEFF 		bl	tmc4361A_readInt
 2783              	.LVL403:
 526:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2784              		.loc 1 526 11 view .LVU996
 2785 07c0 3060     		str	r0, [r6]
 2786 07c2 A9E5     		b	.L56
 2787              	.LVL404:
 2788              	.L147:
 527:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_DELTA_P_WR, *value);
 2789              		.loc 1 527 10 is_stmt 1 view .LVU997
 528:boards/TMC4361A_eval.c **** 		}
 2790              		.loc 1 528 4 view .LVU998
 2791              	.LBB285:
 2792              	.LBI285:
  49:boards/TMC4361A_eval.c **** {
 2793              		.loc 1 49 32 view .LVU999
  49:boards/TMC4361A_eval.c **** {
 2794              		.loc 1 49 32 is_stmt 0 view .LVU1000
 2795              	.LBE285:
  51:boards/TMC4361A_eval.c **** 
 2796              		.loc 1 51 2 is_stmt 1 view .LVU1001
  53:boards/TMC4361A_eval.c **** }
 2797              		.loc 1 53 2 view .LVU1002
 528:boards/TMC4361A_eval.c **** 		}
 2798              		.loc 1 528 4 is_stmt 0 view .LVU1003
 2799 07c4 3268     		ldr	r2, [r6]
 2800 07c6 1C48     		ldr	r0, .L184
 2801              	.LVL405:
 528:boards/TMC4361A_eval.c **** 		}
 2802              		.loc 1 528 4 view .LVU1004
 2803 07c8 5C21     		movs	r1, #92
 2804              	.LVL406:
 528:boards/TMC4361A_eval.c **** 		}
 2805              		.loc 1 528 4 view .LVU1005
 2806 07ca FFF7FEFF 		bl	tmc4361A_writeInt
 2807              	.LVL407:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2808              		.loc 1 179 11 view .LVU1006
 2809 07ce 0025     		movs	r5, #0
 2810 07d0 A2E5     		b	.L56
 2811              	.LVL408:
 2812              	.L70:
 533:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR);
 2813              		.loc 1 533 3 is_stmt 1 view .LVU1007
 533:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR);
 2814              		.loc 1 533 5 is_stmt 0 view .LVU1008
 2815 07d2 28B9     		cbnz	r0, .L148
 534:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2816              		.loc 1 534 4 is_stmt 1 view .LVU1009
 2817              	.LBB286:
 2818              	.LBI286:
  49:boards/TMC4361A_eval.c **** {
 2819              		.loc 1 49 32 view .LVU1010
 2820              	.LVL409:
  49:boards/TMC4361A_eval.c **** {
 2821              		.loc 1 49 32 is_stmt 0 view .LVU1011
 2822              	.LBE286:
  51:boards/TMC4361A_eval.c **** 
 2823              		.loc 1 51 2 is_stmt 1 view .LVU1012
  53:boards/TMC4361A_eval.c **** }
 2824              		.loc 1 53 2 view .LVU1013
 534:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2825              		.loc 1 534 13 is_stmt 0 view .LVU1014
 2826 07d4 1848     		ldr	r0, .L184
 2827              	.LVL410:
 534:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2828              		.loc 1 534 13 view .LVU1015
 2829 07d6 5F21     		movs	r1, #95
 2830              	.LVL411:
 534:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2831              		.loc 1 534 13 view .LVU1016
 2832 07d8 FFF7FEFF 		bl	tmc4361A_readInt
 2833              	.LVL412:
 534:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2834              		.loc 1 534 11 view .LVU1017
 2835 07dc 3060     		str	r0, [r6]
 2836 07de 9BE5     		b	.L56
 2837              	.LVL413:
 2838              	.L148:
 535:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TOLERANCE_WR, *value);
 2839              		.loc 1 535 10 is_stmt 1 view .LVU1018
 536:boards/TMC4361A_eval.c **** 		}
 2840              		.loc 1 536 4 view .LVU1019
 2841              	.LBB287:
 2842              	.LBI287:
  49:boards/TMC4361A_eval.c **** {
 2843              		.loc 1 49 32 view .LVU1020
  49:boards/TMC4361A_eval.c **** {
 2844              		.loc 1 49 32 is_stmt 0 view .LVU1021
 2845              	.LBE287:
  51:boards/TMC4361A_eval.c **** 
 2846              		.loc 1 51 2 is_stmt 1 view .LVU1022
  53:boards/TMC4361A_eval.c **** }
 2847              		.loc 1 53 2 view .LVU1023
 536:boards/TMC4361A_eval.c **** 		}
 2848              		.loc 1 536 4 is_stmt 0 view .LVU1024
 2849 07e0 3268     		ldr	r2, [r6]
 2850 07e2 1548     		ldr	r0, .L184
 2851              	.LVL414:
 536:boards/TMC4361A_eval.c **** 		}
 2852              		.loc 1 536 4 view .LVU1025
 2853 07e4 5F21     		movs	r1, #95
 2854              	.LVL415:
 536:boards/TMC4361A_eval.c **** 		}
 2855              		.loc 1 536 4 view .LVU1026
 2856 07e6 FFF7FEFF 		bl	tmc4361A_writeInt
 2857              	.LVL416:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2858              		.loc 1 179 11 view .LVU1027
 2859 07ea 0025     		movs	r5, #0
 2860 07ec 94E5     		b	.L56
 2861              	.LVL417:
 2862              	.L69:
 541:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 16) & 0xFF;
 2863              		.loc 1 541 3 is_stmt 1 view .LVU1028
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2864              		.loc 1 542 14 is_stmt 0 view .LVU1029
 2865 07ee 1248     		ldr	r0, .L184
 2866              	.LVL418:
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2867              		.loc 1 542 14 view .LVU1030
 2868 07f0 0621     		movs	r1, #6
 2869              	.LVL419:
 541:boards/TMC4361A_eval.c **** 			*value = (tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) >> 16) & 0xFF;
 2870              		.loc 1 541 5 view .LVU1031
 2871 07f2 2DB9     		cbnz	r5, .L149
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2872              		.loc 1 542 4 is_stmt 1 view .LVU1032
 2873              	.LBB288:
 2874              	.LBI288:
  49:boards/TMC4361A_eval.c **** {
 2875              		.loc 1 49 32 view .LVU1033
 2876              	.LVL420:
  49:boards/TMC4361A_eval.c **** {
 2877              		.loc 1 49 32 is_stmt 0 view .LVU1034
 2878              	.LBE288:
  51:boards/TMC4361A_eval.c **** 
 2879              		.loc 1 51 2 is_stmt 1 view .LVU1035
  53:boards/TMC4361A_eval.c **** }
 2880              		.loc 1 53 2 view .LVU1036
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2881              		.loc 1 542 14 is_stmt 0 view .LVU1037
 2882 07f4 FFF7FEFF 		bl	tmc4361A_readInt
 2883              	.LVL421:
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2884              		.loc 1 542 79 view .LVU1038
 2885 07f8 C0F30740 		ubfx	r0, r0, #16, #8
 542:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 2886              		.loc 1 542 11 view .LVU1039
 2887 07fc 3060     		str	r0, [r6]
 2888 07fe 8BE5     		b	.L56
 2889              	.LVL422:
 2890              	.L149:
 543:boards/TMC4361A_eval.c **** 			uvalue = tmc4361A_readInt(motorToIC(motor), TMC4361A_SCALE_VALUES) & ~(0xFF<<16);
 2891              		.loc 1 543 10 is_stmt 1 view .LVU1040
 544:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 2892              		.loc 1 544 4 view .LVU1041
 2893              	.LBB289:
 2894              	.LBI289:
  49:boards/TMC4361A_eval.c **** {
 2895              		.loc 1 49 32 view .LVU1042
  49:boards/TMC4361A_eval.c **** {
 2896              		.loc 1 49 32 is_stmt 0 view .LVU1043
 2897              	.LBE289:
  51:boards/TMC4361A_eval.c **** 
 2898              		.loc 1 51 2 is_stmt 1 view .LVU1044
  53:boards/TMC4361A_eval.c **** }
 2899              		.loc 1 53 2 view .LVU1045
 544:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 2900              		.loc 1 544 13 is_stmt 0 view .LVU1046
 2901 0800 FFF7FEFF 		bl	tmc4361A_readInt
 2902              	.LVL423:
 545:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2903              		.loc 1 545 30 view .LVU1047
 2904 0804 3368     		ldr	r3, [r6]
 2905 0806 1B04     		lsls	r3, r3, #16
 544:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0xFF) << 16;
 2906              		.loc 1 544 11 view .LVU1048
 2907 0808 20F47F02 		bic	r2, r0, #16711680
 2908              	.LVL424:
 545:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2909              		.loc 1 545 4 is_stmt 1 view .LVU1049
 546:boards/TMC4361A_eval.c **** 		}
 2910              		.loc 1 546 4 view .LVU1050
 2911              	.LBB290:
 2912              	.LBI290:
  49:boards/TMC4361A_eval.c **** {
 2913              		.loc 1 49 32 view .LVU1051
  49:boards/TMC4361A_eval.c **** {
 2914              		.loc 1 49 32 is_stmt 0 view .LVU1052
 2915              	.LBE290:
  51:boards/TMC4361A_eval.c **** 
 2916              		.loc 1 51 2 is_stmt 1 view .LVU1053
  53:boards/TMC4361A_eval.c **** }
 2917              		.loc 1 53 2 view .LVU1054
 545:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_SCALE_VALUES, uvalue);
 2918              		.loc 1 545 30 is_stmt 0 view .LVU1055
 2919 080c 03F47F03 		and	r3, r3, #16711680
 546:boards/TMC4361A_eval.c **** 		}
 2920              		.loc 1 546 4 view .LVU1056
 2921 0810 0948     		ldr	r0, .L184
 2922 0812 1A43     		orrs	r2, r2, r3
 2923              	.LVL425:
 546:boards/TMC4361A_eval.c **** 		}
 2924              		.loc 1 546 4 view .LVU1057
 2925 0814 0621     		movs	r1, #6
 2926 0816 FFF7FEFF 		bl	tmc4361A_writeInt
 2927              	.LVL426:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2928              		.loc 1 179 11 view .LVU1058
 2929 081a 0025     		movs	r5, #0
 2930 081c 7CE5     		b	.L56
 2931              	.LVL427:
 2932              	.L68:
 551:boards/TMC4361A_eval.c **** 			// Read for closed loop flag is implemented as AP 133
 2933              		.loc 1 551 3 is_stmt 1 view .LVU1059
 551:boards/TMC4361A_eval.c **** 			// Read for closed loop flag is implemented as AP 133
 2934              		.loc 1 551 5 is_stmt 0 view .LVU1060
 2935 081e 48B1     		cbz	r0, .L116
 553:boards/TMC4361A_eval.c **** 			//Closed loop on/off
 2936              		.loc 1 553 10 is_stmt 1 view .LVU1061
 555:boards/TMC4361A_eval.c **** 			{
 2937              		.loc 1 555 4 view .LVU1062
 555:boards/TMC4361A_eval.c **** 			{
 2938              		.loc 1 555 6 is_stmt 0 view .LVU1063
 2939 0820 3568     		ldr	r5, [r6]
 2940 0822 6DB1     		cbz	r5, .L150
 557:boards/TMC4361A_eval.c **** 				if(!*value)
 2941              		.loc 1 557 5 is_stmt 1 view .LVU1064
 2942              	.LBB291:
 2943              	.LBI291:
  49:boards/TMC4361A_eval.c **** {
 2944              		.loc 1 49 32 view .LVU1065
 2945              	.LVL428:
  49:boards/TMC4361A_eval.c **** {
 2946              		.loc 1 49 32 is_stmt 0 view .LVU1066
 2947              	.LBE291:
  51:boards/TMC4361A_eval.c **** 
 2948              		.loc 1 51 2 is_stmt 1 view .LVU1067
  53:boards/TMC4361A_eval.c **** }
 2949              		.loc 1 53 2 view .LVU1068
 557:boards/TMC4361A_eval.c **** 				if(!*value)
 2950              		.loc 1 557 14 is_stmt 0 view .LVU1069
 2951 0824 0448     		ldr	r0, .L184
 2952              	.LVL429:
 557:boards/TMC4361A_eval.c **** 				if(!*value)
 2953              		.loc 1 557 14 view .LVU1070
 2954 0826 0121     		movs	r1, #1
 2955              	.LVL430:
 557:boards/TMC4361A_eval.c **** 				if(!*value)
 2956              		.loc 1 557 14 view .LVU1071
 2957 0828 FFF7FEFF 		bl	tmc4361A_calibrateClosedLoop
 2958              	.LVL431:
 557:boards/TMC4361A_eval.c **** 				if(!*value)
 2959              		.loc 1 557 12 view .LVU1072
 2960 082c 3060     		str	r0, [r6]
 558:boards/TMC4361A_eval.c **** 					errors |= TMC_ERROR_NOT_DONE;
 2961              		.loc 1 558 5 is_stmt 1 view .LVU1073
 558:boards/TMC4361A_eval.c **** 					errors |= TMC_ERROR_NOT_DONE;
 2962              		.loc 1 558 7 is_stmt 0 view .LVU1074
 2963 082e 0028     		cmp	r0, #0
 2964 0830 00F0B480 		beq	.L170
 2965              	.LVL432:
 2966              	.L116:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 2967              		.loc 1 179 11 view .LVU1075
 2968 0834 0025     		movs	r5, #0
 2969 0836 6FE5     		b	.L56
 2970              	.L185:
 2971              		.align	2
 2972              	.L184:
 2973 0838 24000000 		.word	.LANCHOR0+36
 2974 083c 00000000 		.word	.LANCHOR0
 2975              	.LVL433:
 2976              	.L150:
 563:boards/TMC4361A_eval.c **** 				uvalue 	&= ~(1<<22); // closed loop
 2977              		.loc 1 563 5 is_stmt 1 view .LVU1076
 2978              	.LBB292:
 2979              	.LBI292:
  49:boards/TMC4361A_eval.c **** {
 2980              		.loc 1 49 32 view .LVU1077
  49:boards/TMC4361A_eval.c **** {
 2981              		.loc 1 49 32 is_stmt 0 view .LVU1078
 2982              	.LBE292:
  51:boards/TMC4361A_eval.c **** 
 2983              		.loc 1 51 2 is_stmt 1 view .LVU1079
  53:boards/TMC4361A_eval.c **** }
 2984              		.loc 1 53 2 view .LVU1080
 563:boards/TMC4361A_eval.c **** 				uvalue 	&= ~(1<<22); // closed loop
 2985              		.loc 1 563 15 is_stmt 0 view .LVU1081
 2986 0840 0721     		movs	r1, #7
 2987              	.LVL434:
 563:boards/TMC4361A_eval.c **** 				uvalue 	&= ~(1<<22); // closed loop
 2988              		.loc 1 563 15 view .LVU1082
 2989 0842 5848     		ldr	r0, .L186
 2990              	.LVL435:
 563:boards/TMC4361A_eval.c **** 				uvalue 	&= ~(1<<22); // closed loop
 2991              		.loc 1 563 15 view .LVU1083
 2992 0844 FFF7FEFF 		bl	tmc4361A_readInt
 2993              	.LVL436:
 564:boards/TMC4361A_eval.c **** 				tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_IN_CONF, uvalue);
 2994              		.loc 1 564 5 is_stmt 1 view .LVU1084
 565:boards/TMC4361A_eval.c **** 			}
 2995              		.loc 1 565 5 view .LVU1085
 2996              	.LBB293:
 2997              	.LBI293:
  49:boards/TMC4361A_eval.c **** {
 2998              		.loc 1 49 32 view .LVU1086
  49:boards/TMC4361A_eval.c **** {
 2999              		.loc 1 49 32 is_stmt 0 view .LVU1087
 3000              	.LBE293:
  51:boards/TMC4361A_eval.c **** 
 3001              		.loc 1 51 2 is_stmt 1 view .LVU1088
  53:boards/TMC4361A_eval.c **** }
 3002              		.loc 1 53 2 view .LVU1089
 565:boards/TMC4361A_eval.c **** 			}
 3003              		.loc 1 565 5 is_stmt 0 view .LVU1090
 3004 0848 0721     		movs	r1, #7
 3005 084a 20F48002 		bic	r2, r0, #4194304
 3006              	.LVL437:
 565:boards/TMC4361A_eval.c **** 			}
 3007              		.loc 1 565 5 view .LVU1091
 3008 084e 5548     		ldr	r0, .L186
 3009 0850 FFF7FEFF 		bl	tmc4361A_writeInt
 3010              	.LVL438:
 565:boards/TMC4361A_eval.c **** 			}
 3011              		.loc 1 565 5 view .LVU1092
 3012 0854 60E5     		b	.L56
 3013              	.LVL439:
 3014              	.L67:
 571:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_V_ENC_RD);
 3015              		.loc 1 571 3 is_stmt 1 view .LVU1093
 571:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_V_ENC_RD);
 3016              		.loc 1 571 5 is_stmt 0 view .LVU1094
 3017 0856 0028     		cmp	r0, #0
 3018 0858 40F0A280 		bne	.L171
 572:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 3019              		.loc 1 572 4 is_stmt 1 view .LVU1095
 3020              	.LBB294:
 3021              	.LBI294:
  49:boards/TMC4361A_eval.c **** {
 3022              		.loc 1 49 32 view .LVU1096
 3023              	.LVL440:
  49:boards/TMC4361A_eval.c **** {
 3024              		.loc 1 49 32 is_stmt 0 view .LVU1097
 3025              	.LBE294:
  51:boards/TMC4361A_eval.c **** 
 3026              		.loc 1 51 2 is_stmt 1 view .LVU1098
  53:boards/TMC4361A_eval.c **** }
 3027              		.loc 1 53 2 view .LVU1099
 572:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 3028              		.loc 1 572 13 is_stmt 0 view .LVU1100
 3029 085c 5148     		ldr	r0, .L186
 3030              	.LVL441:
 572:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 3031              		.loc 1 572 13 view .LVU1101
 3032 085e 6521     		movs	r1, #101
 3033              	.LVL442:
 572:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 3034              		.loc 1 572 13 view .LVU1102
 3035 0860 FFF7FEFF 		bl	tmc4361A_readInt
 3036              	.LVL443:
 572:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE)
 3037              		.loc 1 572 11 view .LVU1103
 3038 0864 3060     		str	r0, [r6]
 3039 0866 57E5     		b	.L56
 3040              	.LVL444:
 3041              	.L66:
 578:boards/TMC4361A_eval.c **** 			uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
 3042              		.loc 1 578 3 is_stmt 1 view .LVU1104
 578:boards/TMC4361A_eval.c **** 			uvalue 	= tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_IN_CONF);
 3043              		.loc 1 578 5 is_stmt 0 view .LVU1105
 3044 0868 0028     		cmp	r0, #0
 3045 086a E3D1     		bne	.L116
 579:boards/TMC4361A_eval.c **** 			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
 3046              		.loc 1 579 4 is_stmt 1 view .LVU1106
 3047              	.LBB295:
 3048              	.LBI295:
  49:boards/TMC4361A_eval.c **** {
 3049              		.loc 1 49 32 view .LVU1107
 3050              	.LVL445:
  49:boards/TMC4361A_eval.c **** {
 3051              		.loc 1 49 32 is_stmt 0 view .LVU1108
 3052              	.LBE295:
  51:boards/TMC4361A_eval.c **** 
 3053              		.loc 1 51 2 is_stmt 1 view .LVU1109
  53:boards/TMC4361A_eval.c **** }
 3054              		.loc 1 53 2 view .LVU1110
 579:boards/TMC4361A_eval.c **** 			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
 3055              		.loc 1 579 14 is_stmt 0 view .LVU1111
 3056 086c 4D48     		ldr	r0, .L186
 3057              	.LVL446:
 579:boards/TMC4361A_eval.c **** 			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
 3058              		.loc 1 579 14 view .LVU1112
 3059 086e 0721     		movs	r1, #7
 3060              	.LVL447:
 579:boards/TMC4361A_eval.c **** 			*value = (((uvalue >> 22) & 3) == 1) ? 1 : 0;
 3061              		.loc 1 579 14 view .LVU1113
 3062 0870 FFF7FEFF 		bl	tmc4361A_readInt
 3063              	.LVL448:
 580:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3064              		.loc 1 580 4 is_stmt 1 view .LVU1114
 580:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3065              		.loc 1 580 30 is_stmt 0 view .LVU1115
 3066 0874 C0F38150 		ubfx	r0, r0, #22, #2
 3067              	.LVL449:
 580:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3068              		.loc 1 580 45 view .LVU1116
 3069 0878 431E     		subs	r3, r0, #1
 3070 087a 5842     		rsbs	r0, r3, #0
 3071 087c 5841     		adcs	r0, r0, r3
 580:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3072              		.loc 1 580 11 view .LVU1117
 3073 087e 3060     		str	r0, [r6]
 3074 0880 4AE5     		b	.L56
 3075              	.LVL450:
 3076              	.L65:
 588:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_RD);
 3077              		.loc 1 588 3 is_stmt 1 view .LVU1118
 588:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_RD);
 3078              		.loc 1 588 5 is_stmt 0 view .LVU1119
 3079 0882 28B9     		cbnz	r0, .L151
 589:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3080              		.loc 1 589 4 is_stmt 1 view .LVU1120
 3081              	.LBB296:
 3082              	.LBI296:
  49:boards/TMC4361A_eval.c **** {
 3083              		.loc 1 49 32 view .LVU1121
 3084              	.LVL451:
  49:boards/TMC4361A_eval.c **** {
 3085              		.loc 1 49 32 is_stmt 0 view .LVU1122
 3086              	.LBE296:
  51:boards/TMC4361A_eval.c **** 
 3087              		.loc 1 51 2 is_stmt 1 view .LVU1123
  53:boards/TMC4361A_eval.c **** }
 3088              		.loc 1 53 2 view .LVU1124
 589:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3089              		.loc 1 589 13 is_stmt 0 view .LVU1125
 3090 0884 4748     		ldr	r0, .L186
 3091              	.LVL452:
 589:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3092              		.loc 1 589 13 view .LVU1126
 3093 0886 5221     		movs	r1, #82
 3094              	.LVL453:
 589:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3095              		.loc 1 589 13 view .LVU1127
 3096 0888 FFF7FEFF 		bl	tmc4361A_readInt
 3097              	.LVL454:
 589:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3098              		.loc 1 589 11 view .LVU1128
 3099 088c 3060     		str	r0, [r6]
 3100 088e 43E5     		b	.L56
 3101              	.LVL455:
 3102              	.L151:
 590:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_CL_TR_TOLERANCE_WR, *value);
 3103              		.loc 1 590 10 is_stmt 1 view .LVU1129
 591:boards/TMC4361A_eval.c **** 		}
 3104              		.loc 1 591 4 view .LVU1130
 3105              	.LBB297:
 3106              	.LBI297:
  49:boards/TMC4361A_eval.c **** {
 3107              		.loc 1 49 32 view .LVU1131
  49:boards/TMC4361A_eval.c **** {
 3108              		.loc 1 49 32 is_stmt 0 view .LVU1132
 3109              	.LBE297:
  51:boards/TMC4361A_eval.c **** 
 3110              		.loc 1 51 2 is_stmt 1 view .LVU1133
  53:boards/TMC4361A_eval.c **** }
 3111              		.loc 1 53 2 view .LVU1134
 591:boards/TMC4361A_eval.c **** 		}
 3112              		.loc 1 591 4 is_stmt 0 view .LVU1135
 3113 0890 3268     		ldr	r2, [r6]
 3114 0892 4448     		ldr	r0, .L186
 3115              	.LVL456:
 591:boards/TMC4361A_eval.c **** 		}
 3116              		.loc 1 591 4 view .LVU1136
 3117 0894 5221     		movs	r1, #82
 3118              	.LVL457:
 591:boards/TMC4361A_eval.c **** 		}
 3119              		.loc 1 591 4 view .LVU1137
 3120 0896 FFF7FEFF 		bl	tmc4361A_writeInt
 3121              	.LVL458:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3122              		.loc 1 179 11 view .LVU1138
 3123 089a 0025     		movs	r5, #0
 3124 089c 3CE5     		b	.L56
 3125              	.LVL459:
 3126              	.L64:
 596:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
 3127              		.loc 1 596 3 is_stmt 1 view .LVU1139
 3128 089e 4248     		ldr	r0, .L186+4
 3129              	.LVL460:
 596:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
 3130              		.loc 1 596 3 is_stmt 0 view .LVU1140
 3131 08a0 436A     		ldr	r3, [r0, #36]
 3132 08a2 D3F89021 		ldr	r2, [r3, #400]
 596:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 0) &  0xFF;
 3133              		.loc 1 596 5 view .LVU1141
 3134 08a6 15B9     		cbnz	r5, .L152
 597:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3135              		.loc 1 597 4 is_stmt 1 view .LVU1142
 597:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3136              		.loc 1 597 80 is_stmt 0 view .LVU1143
 3137 08a8 D2B2     		uxtb	r2, r2
 597:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3138              		.loc 1 597 11 view .LVU1144
 3139 08aa 3260     		str	r2, [r6]
 3140 08ac 34E5     		b	.L56
 3141              	.L152:
 598:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 3142              		.loc 1 598 10 is_stmt 1 view .LVU1145
 599:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 0);
 3143              		.loc 1 599 4 view .LVU1146
 3144              	.LVL461:
 600:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 0;
 3145              		.loc 1 600 4 view .LVU1147
 601:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3146              		.loc 1 601 30 is_stmt 0 view .LVU1148
 3147 08ae 3368     		ldr	r3, [r6]
 600:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 0;
 3148              		.loc 1 600 11 view .LVU1149
 3149 08b0 22F0FF02 		bic	r2, r2, #255
 3150              	.LVL462:
 601:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3151              		.loc 1 601 4 is_stmt 1 view .LVU1150
 602:boards/TMC4361A_eval.c **** 		}
 3152              		.loc 1 602 4 view .LVU1151
 3153              	.LBB298:
 3154              	.LBI298:
  49:boards/TMC4361A_eval.c **** {
 3155              		.loc 1 49 32 view .LVU1152
  49:boards/TMC4361A_eval.c **** {
 3156              		.loc 1 49 32 is_stmt 0 view .LVU1153
 3157              	.LBE298:
  51:boards/TMC4361A_eval.c **** 
 3158              		.loc 1 51 2 is_stmt 1 view .LVU1154
  53:boards/TMC4361A_eval.c **** }
 3159              		.loc 1 53 2 view .LVU1155
 601:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3160              		.loc 1 601 30 is_stmt 0 view .LVU1156
 3161 08b4 03F00F03 		and	r3, r3, #15
 3162              	.LVL463:
 602:boards/TMC4361A_eval.c **** 		}
 3163              		.loc 1 602 4 view .LVU1157
 3164 08b8 1A43     		orrs	r2, r2, r3
 3165              	.LVL464:
 602:boards/TMC4361A_eval.c **** 		}
 3166              		.loc 1 602 4 view .LVU1158
 3167 08ba 6321     		movs	r1, #99
 3168              	.LVL465:
 602:boards/TMC4361A_eval.c **** 		}
 3169              		.loc 1 602 4 view .LVU1159
 3170 08bc 2430     		adds	r0, r0, #36
 3171 08be FFF7FEFF 		bl	tmc4361A_writeInt
 3172              	.LVL466:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3173              		.loc 1 179 11 view .LVU1160
 3174 08c2 0025     		movs	r5, #0
 3175 08c4 28E5     		b	.L56
 3176              	.LVL467:
 3177              	.L63:
 607:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
 3178              		.loc 1 607 3 is_stmt 1 view .LVU1161
 3179 08c6 3848     		ldr	r0, .L186+4
 3180              	.LVL468:
 607:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
 3181              		.loc 1 607 3 is_stmt 0 view .LVU1162
 3182 08c8 436A     		ldr	r3, [r0, #36]
 3183 08ca D3F89021 		ldr	r2, [r3, #400]
 607:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 8) &  0xF;
 3184              		.loc 1 607 5 view .LVU1163
 3185 08ce 1DB9     		cbnz	r5, .L153
 608:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3186              		.loc 1 608 4 is_stmt 1 view .LVU1164
 608:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3187              		.loc 1 608 80 is_stmt 0 view .LVU1165
 3188 08d0 C2F30322 		ubfx	r2, r2, #8, #4
 608:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3189              		.loc 1 608 11 view .LVU1166
 3190 08d4 3260     		str	r2, [r6]
 3191 08d6 1FE5     		b	.L56
 3192              	.L153:
 609:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 3193              		.loc 1 609 10 is_stmt 1 view .LVU1167
 610:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xF << 8);
 3194              		.loc 1 610 4 view .LVU1168
 3195              	.LVL469:
 611:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 8;
 3196              		.loc 1 611 4 view .LVU1169
 612:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3197              		.loc 1 612 30 is_stmt 0 view .LVU1170
 3198 08d8 3368     		ldr	r3, [r6]
 3199 08da 1B02     		lsls	r3, r3, #8
 3200 08dc 03F47063 		and	r3, r3, #3840
 611:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0F) << 8;
 3201              		.loc 1 611 11 view .LVU1171
 3202 08e0 22F47062 		bic	r2, r2, #3840
 3203              	.LVL470:
 612:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3204              		.loc 1 612 4 is_stmt 1 view .LVU1172
 613:boards/TMC4361A_eval.c **** 		}
 3205              		.loc 1 613 4 view .LVU1173
 3206              	.LBB299:
 3207              	.LBI299:
  49:boards/TMC4361A_eval.c **** {
 3208              		.loc 1 49 32 view .LVU1174
  49:boards/TMC4361A_eval.c **** {
 3209              		.loc 1 49 32 is_stmt 0 view .LVU1175
 3210              	.LBE299:
  51:boards/TMC4361A_eval.c **** 
 3211              		.loc 1 51 2 is_stmt 1 view .LVU1176
  53:boards/TMC4361A_eval.c **** }
 3212              		.loc 1 53 2 view .LVU1177
 613:boards/TMC4361A_eval.c **** 		}
 3213              		.loc 1 613 4 is_stmt 0 view .LVU1178
 3214 08e4 1A43     		orrs	r2, r2, r3
 3215              	.LVL471:
 613:boards/TMC4361A_eval.c **** 		}
 3216              		.loc 1 613 4 view .LVU1179
 3217 08e6 6321     		movs	r1, #99
 3218              	.LVL472:
 613:boards/TMC4361A_eval.c **** 		}
 3219              		.loc 1 613 4 view .LVU1180
 3220 08e8 2430     		adds	r0, r0, #36
 3221 08ea FFF7FEFF 		bl	tmc4361A_writeInt
 3222              	.LVL473:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3223              		.loc 1 179 11 view .LVU1181
 3224 08ee 0025     		movs	r5, #0
 3225 08f0 12E5     		b	.L56
 3226              	.LVL474:
 3227              	.L61:
 618:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
 3228              		.loc 1 618 3 is_stmt 1 view .LVU1182
 3229 08f2 2D48     		ldr	r0, .L186+4
 3230              	.LVL475:
 618:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
 3231              		.loc 1 618 3 is_stmt 0 view .LVU1183
 3232 08f4 436A     		ldr	r3, [r0, #36]
 3233 08f6 D3F89021 		ldr	r2, [r3, #400]
 618:boards/TMC4361A_eval.c **** 			*value = (TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR] >> 16) &  0xFF;
 3234              		.loc 1 618 5 view .LVU1184
 3235 08fa 1DB9     		cbnz	r5, .L154
 619:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3236              		.loc 1 619 4 is_stmt 1 view .LVU1185
 619:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3237              		.loc 1 619 81 is_stmt 0 view .LVU1186
 3238 08fc C2F30742 		ubfx	r2, r2, #16, #8
 619:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3239              		.loc 1 619 11 view .LVU1187
 3240 0900 3260     		str	r2, [r6]
 3241 0902 09E5     		b	.L56
 3242              	.L154:
 620:boards/TMC4361A_eval.c **** 			uvalue = TMC4361A.config->shadowRegister[TMC4361A_ENC_VMEAN_WAIT_WR];
 3243              		.loc 1 620 10 is_stmt 1 view .LVU1188
 621:boards/TMC4361A_eval.c **** 			uvalue &= ~(0xFF << 16);
 3244              		.loc 1 621 4 view .LVU1189
 3245              	.LVL476:
 622:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0FF) << 16;
 3246              		.loc 1 622 4 view .LVU1190
 623:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3247              		.loc 1 623 31 is_stmt 0 view .LVU1191
 3248 0904 3368     		ldr	r3, [r6]
 3249 0906 1B04     		lsls	r3, r3, #16
 3250 0908 03F47F03 		and	r3, r3, #16711680
 622:boards/TMC4361A_eval.c **** 			uvalue |= (*value & 0x0FF) << 16;
 3251              		.loc 1 622 11 view .LVU1192
 3252 090c 22F47F02 		bic	r2, r2, #16711680
 3253              	.LVL477:
 623:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_VMEAN_WAIT_WR, uvalue);
 3254              		.loc 1 623 4 is_stmt 1 view .LVU1193
 624:boards/TMC4361A_eval.c **** 		}
 3255              		.loc 1 624 4 view .LVU1194
 3256              	.LBB300:
 3257              	.LBI300:
  49:boards/TMC4361A_eval.c **** {
 3258              		.loc 1 49 32 view .LVU1195
  49:boards/TMC4361A_eval.c **** {
 3259              		.loc 1 49 32 is_stmt 0 view .LVU1196
 3260              	.LBE300:
  51:boards/TMC4361A_eval.c **** 
 3261              		.loc 1 51 2 is_stmt 1 view .LVU1197
  53:boards/TMC4361A_eval.c **** }
 3262              		.loc 1 53 2 view .LVU1198
 624:boards/TMC4361A_eval.c **** 		}
 3263              		.loc 1 624 4 is_stmt 0 view .LVU1199
 3264 0910 1A43     		orrs	r2, r2, r3
 3265              	.LVL478:
 624:boards/TMC4361A_eval.c **** 		}
 3266              		.loc 1 624 4 view .LVU1200
 3267 0912 6321     		movs	r1, #99
 3268              	.LVL479:
 624:boards/TMC4361A_eval.c **** 		}
 3269              		.loc 1 624 4 view .LVU1201
 3270 0914 2430     		adds	r0, r0, #36
 3271 0916 FFF7FEFF 		bl	tmc4361A_writeInt
 3272              	.LVL480:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3273              		.loc 1 179 11 view .LVU1202
 3274 091a 0025     		movs	r5, #0
 3275 091c FCE4     		b	.L56
 3276              	.LVL481:
 3277              	.L110:
 639:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS);
 3278              		.loc 1 639 3 is_stmt 1 view .LVU1203
 639:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_ENC_POS);
 3279              		.loc 1 639 5 is_stmt 0 view .LVU1204
 3280 091e 28B9     		cbnz	r0, .L155
 640:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3281              		.loc 1 640 4 is_stmt 1 view .LVU1205
 3282              	.LBB301:
 3283              	.LBI301:
  49:boards/TMC4361A_eval.c **** {
 3284              		.loc 1 49 32 view .LVU1206
 3285              	.LVL482:
  49:boards/TMC4361A_eval.c **** {
 3286              		.loc 1 49 32 is_stmt 0 view .LVU1207
 3287              	.LBE301:
  51:boards/TMC4361A_eval.c **** 
 3288              		.loc 1 51 2 is_stmt 1 view .LVU1208
  53:boards/TMC4361A_eval.c **** }
 3289              		.loc 1 53 2 view .LVU1209
 640:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3290              		.loc 1 640 13 is_stmt 0 view .LVU1210
 3291 0920 2048     		ldr	r0, .L186
 3292              	.LVL483:
 640:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3293              		.loc 1 640 13 view .LVU1211
 3294 0922 5021     		movs	r1, #80
 3295              	.LVL484:
 640:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3296              		.loc 1 640 13 view .LVU1212
 3297 0924 FFF7FEFF 		bl	tmc4361A_readInt
 3298              	.LVL485:
 640:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3299              		.loc 1 640 11 view .LVU1213
 3300 0928 3060     		str	r0, [r6]
 3301 092a F5E4     		b	.L56
 3302              	.LVL486:
 3303              	.L155:
 641:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS, *value);
 3304              		.loc 1 641 10 is_stmt 1 view .LVU1214
 642:boards/TMC4361A_eval.c **** 		}
 3305              		.loc 1 642 4 view .LVU1215
 3306              	.LBB302:
 3307              	.LBI302:
  49:boards/TMC4361A_eval.c **** {
 3308              		.loc 1 49 32 view .LVU1216
  49:boards/TMC4361A_eval.c **** {
 3309              		.loc 1 49 32 is_stmt 0 view .LVU1217
 3310              	.LBE302:
  51:boards/TMC4361A_eval.c **** 
 3311              		.loc 1 51 2 is_stmt 1 view .LVU1218
  53:boards/TMC4361A_eval.c **** }
 3312              		.loc 1 53 2 view .LVU1219
 642:boards/TMC4361A_eval.c **** 		}
 3313              		.loc 1 642 4 is_stmt 0 view .LVU1220
 3314 092c 1A68     		ldr	r2, [r3]
 3315              	.LVL487:
 642:boards/TMC4361A_eval.c **** 		}
 3316              		.loc 1 642 4 view .LVU1221
 3317 092e 1D48     		ldr	r0, .L186
 3318              	.LVL488:
 642:boards/TMC4361A_eval.c **** 		}
 3319              		.loc 1 642 4 view .LVU1222
 3320 0930 5021     		movs	r1, #80
 3321              	.LVL489:
 642:boards/TMC4361A_eval.c **** 		}
 3322              		.loc 1 642 4 view .LVU1223
 3323 0932 FFF7FEFF 		bl	tmc4361A_writeInt
 3324              	.LVL490:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3325              		.loc 1 179 11 view .LVU1224
 3326 0936 2546     		mov	r5, r4
 3327 0938 EEE4     		b	.L56
 3328              	.LVL491:
 3329              	.L108:
 647:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_SCALE_VALUES]; // todo CHECK 3: shouldn't this
 3330              		.loc 1 647 3 is_stmt 1 view .LVU1225
 647:boards/TMC4361A_eval.c **** 			*value = TMC4361A.config->shadowRegister[TMC4361A_SCALE_VALUES]; // todo CHECK 3: shouldn't this
 3331              		.loc 1 647 5 is_stmt 0 view .LVU1226
 3332 093a 20B9     		cbnz	r0, .L156
 648:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3333              		.loc 1 648 4 is_stmt 1 view .LVU1227
 648:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3334              		.loc 1 648 21 is_stmt 0 view .LVU1228
 3335 093c 1A4B     		ldr	r3, .L186+4
 3336              	.LVL492:
 648:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3337              		.loc 1 648 44 view .LVU1229
 3338 093e 5B6A     		ldr	r3, [r3, #36]
 3339 0940 DB69     		ldr	r3, [r3, #28]
 648:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3340              		.loc 1 648 11 view .LVU1230
 3341 0942 3360     		str	r3, [r6]
 3342 0944 E8E4     		b	.L56
 3343              	.LVL493:
 3344              	.L156:
 649:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_ENC_POS_DEV_TOL_WR, *value);
 3345              		.loc 1 649 10 is_stmt 1 view .LVU1231
 650:boards/TMC4361A_eval.c **** 		}
 3346              		.loc 1 650 4 view .LVU1232
 3347              	.LBB303:
 3348              	.LBI303:
  49:boards/TMC4361A_eval.c **** {
 3349              		.loc 1 49 32 view .LVU1233
  49:boards/TMC4361A_eval.c **** {
 3350              		.loc 1 49 32 is_stmt 0 view .LVU1234
 3351              	.LBE303:
  51:boards/TMC4361A_eval.c **** 
 3352              		.loc 1 51 2 is_stmt 1 view .LVU1235
  53:boards/TMC4361A_eval.c **** }
 3353              		.loc 1 53 2 view .LVU1236
 650:boards/TMC4361A_eval.c **** 		}
 3354              		.loc 1 650 4 is_stmt 0 view .LVU1237
 3355 0946 1A68     		ldr	r2, [r3]
 3356              	.LVL494:
 650:boards/TMC4361A_eval.c **** 		}
 3357              		.loc 1 650 4 view .LVU1238
 3358 0948 1648     		ldr	r0, .L186
 3359              	.LVL495:
 650:boards/TMC4361A_eval.c **** 		}
 3360              		.loc 1 650 4 view .LVU1239
 3361 094a 5321     		movs	r1, #83
 3362              	.LVL496:
 650:boards/TMC4361A_eval.c **** 		}
 3363              		.loc 1 650 4 view .LVU1240
 3364 094c FFF7FEFF 		bl	tmc4361A_writeInt
 3365              	.LVL497:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3366              		.loc 1 179 11 view .LVU1241
 3367 0950 2546     		mov	r5, r4
 3368 0952 E1E4     		b	.L56
 3369              	.LVL498:
 3370              	.L111:
 655:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_STDBY_DELAY);
 3371              		.loc 1 655 3 is_stmt 1 view .LVU1242
 655:boards/TMC4361A_eval.c **** 			*value = tmc4361A_readInt(motorToIC(motor), TMC4361A_STDBY_DELAY);
 3372              		.loc 1 655 5 is_stmt 0 view .LVU1243
 3373 0954 28B9     		cbnz	r0, .L157
 656:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3374              		.loc 1 656 4 is_stmt 1 view .LVU1244
 3375              	.LBB304:
 3376              	.LBI304:
  49:boards/TMC4361A_eval.c **** {
 3377              		.loc 1 49 32 view .LVU1245
 3378              	.LVL499:
  49:boards/TMC4361A_eval.c **** {
 3379              		.loc 1 49 32 is_stmt 0 view .LVU1246
 3380              	.LBE304:
  51:boards/TMC4361A_eval.c **** 
 3381              		.loc 1 51 2 is_stmt 1 view .LVU1247
  53:boards/TMC4361A_eval.c **** }
 3382              		.loc 1 53 2 view .LVU1248
 656:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3383              		.loc 1 656 13 is_stmt 0 view .LVU1249
 3384 0956 1348     		ldr	r0, .L186
 3385              	.LVL500:
 656:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3386              		.loc 1 656 13 view .LVU1250
 3387 0958 1521     		movs	r1, #21
 3388              	.LVL501:
 656:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3389              		.loc 1 656 13 view .LVU1251
 3390 095a FFF7FEFF 		bl	tmc4361A_readInt
 3391              	.LVL502:
 656:boards/TMC4361A_eval.c **** 		} else if(readWrite == WRITE) {
 3392              		.loc 1 656 11 view .LVU1252
 3393 095e 3060     		str	r0, [r6]
 3394 0960 DAE4     		b	.L56
 3395              	.LVL503:
 3396              	.L157:
 657:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(motorToIC(motor), TMC4361A_STDBY_DELAY, *value*160000);
 3397              		.loc 1 657 10 is_stmt 1 view .LVU1253
 658:boards/TMC4361A_eval.c **** 		}
 3398              		.loc 1 658 4 view .LVU1254
 3399              	.LBB305:
 3400              	.LBI305:
  49:boards/TMC4361A_eval.c **** {
 3401              		.loc 1 49 32 view .LVU1255
  49:boards/TMC4361A_eval.c **** {
 3402              		.loc 1 49 32 is_stmt 0 view .LVU1256
 3403              	.LBE305:
  51:boards/TMC4361A_eval.c **** 
 3404              		.loc 1 51 2 is_stmt 1 view .LVU1257
  53:boards/TMC4361A_eval.c **** }
 3405              		.loc 1 53 2 view .LVU1258
 658:boards/TMC4361A_eval.c **** 		}
 3406              		.loc 1 658 4 is_stmt 0 view .LVU1259
 3407 0962 1B68     		ldr	r3, [r3]
 3408              	.LVL504:
 658:boards/TMC4361A_eval.c **** 		}
 3409              		.loc 1 658 4 view .LVU1260
 3410 0964 114A     		ldr	r2, .L186+8
 3411              	.LVL505:
 658:boards/TMC4361A_eval.c **** 		}
 3412              		.loc 1 658 4 view .LVU1261
 3413 0966 0F48     		ldr	r0, .L186
 3414              	.LVL506:
 658:boards/TMC4361A_eval.c **** 		}
 3415              		.loc 1 658 4 view .LVU1262
 3416 0968 5A43     		muls	r2, r3, r2
 3417 096a 1521     		movs	r1, #21
 3418              	.LVL507:
 658:boards/TMC4361A_eval.c **** 		}
 3419              		.loc 1 658 4 view .LVU1263
 3420 096c FFF7FEFF 		bl	tmc4361A_writeInt
 3421              	.LVL508:
 179:boards/TMC4361A_eval.c **** 	uint32_t uvalue;
 3422              		.loc 1 179 11 view .LVU1264
 3423 0970 2546     		mov	r5, r4
 3424 0972 D1E4     		b	.L56
 3425              	.LVL509:
 3426              	.L158:
 183:boards/TMC4361A_eval.c **** 
 3427              		.loc 1 183 10 view .LVU1265
 3428 0974 0825     		movs	r5, #8
 3429 0976 CFE4     		b	.L56
 3430              	.LVL510:
 3431              	.L160:
 185:boards/TMC4361A_eval.c **** 	{
 3432              		.loc 1 185 2 view .LVU1266
 3433 0978 0425     		movs	r5, #4
 3434 097a CDE4     		b	.L56
 3435              	.LVL511:
 3436              	.L161:
 185:boards/TMC4361A_eval.c **** 	{
 3437              		.loc 1 185 2 view .LVU1267
 3438 097c 0425     		movs	r5, #4
 3439 097e CBE4     		b	.L56
 3440              	.L162:
 216:boards/TMC4361A_eval.c **** 		}
 3441              		.loc 1 216 11 view .LVU1268
 3442 0980 0425     		movs	r5, #4
 3443 0982 C9E4     		b	.L56
 3444              	.LVL512:
 3445              	.L163:
 238:boards/TMC4361A_eval.c **** 			}
 3446              		.loc 1 238 12 view .LVU1269
 3447 0984 1025     		movs	r5, #16
 3448 0986 C7E4     		b	.L56
 3449              	.LVL513:
 3450              	.L164:
 216:boards/TMC4361A_eval.c **** 		}
 3451              		.loc 1 216 11 view .LVU1270
 3452 0988 0425     		movs	r5, #4
 3453 098a C5E4     		b	.L56
 3454              	.LVL514:
 3455              	.L166:
 238:boards/TMC4361A_eval.c **** 			}
 3456              		.loc 1 238 12 view .LVU1271
 3457 098c 1025     		movs	r5, #16
 3458 098e C3E4     		b	.L56
 3459              	.L167:
 238:boards/TMC4361A_eval.c **** 			}
 3460              		.loc 1 238 12 view .LVU1272
 3461 0990 1025     		movs	r5, #16
 3462 0992 C1E4     		b	.L56
 3463              	.L168:
 238:boards/TMC4361A_eval.c **** 			}
 3464              		.loc 1 238 12 view .LVU1273
 3465 0994 1025     		movs	r5, #16
 3466 0996 BFE4     		b	.L56
 3467              	.L169:
 238:boards/TMC4361A_eval.c **** 			}
 3468              		.loc 1 238 12 view .LVU1274
 3469 0998 1025     		movs	r5, #16
 3470 099a BDE4     		b	.L56
 3471              	.LVL515:
 3472              	.L170:
 559:boards/TMC4361A_eval.c **** 			}
 3473              		.loc 1 559 13 view .LVU1275
 3474 099c 2025     		movs	r5, #32
 3475 099e BBE4     		b	.L56
 3476              	.LVL516:
 3477              	.L171:
 216:boards/TMC4361A_eval.c **** 		}
 3478              		.loc 1 216 11 view .LVU1276
 3479 09a0 0425     		movs	r5, #4
 3480              	.LVL517:
 216:boards/TMC4361A_eval.c **** 		}
 3481              		.loc 1 216 11 view .LVU1277
 3482 09a2 B9E4     		b	.L56
 3483              	.L187:
 3484              		.align	2
 3485              	.L186:
 3486 09a4 24000000 		.word	.LANCHOR0+36
 3487 09a8 00000000 		.word	.LANCHOR0
 3488 09ac 00710200 		.word	160000
 3489              		.cfi_endproc
 3490              	.LFE12:
 3492              		.align	1
 3493              		.syntax unified
 3494              		.thumb
 3495              		.thumb_func
 3496              		.fpu softvfp
 3498              	SAP:
 3499              	.LVL518:
 3500              	.LFB13:
 669:boards/TMC4361A_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3501              		.loc 1 669 1 is_stmt 1 view -0
 3502              		.cfi_startproc
 3503              		@ args = 0, pretend = 0, frame = 8
 3504              		@ frame_needed = 0, uses_anonymous_args = 0
 670:boards/TMC4361A_eval.c **** }
 3505              		.loc 1 670 2 view .LVU1279
 669:boards/TMC4361A_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3506              		.loc 1 669 1 is_stmt 0 view .LVU1280
 3507 09b0 07B5     		push	{r0, r1, r2, lr}
 3508              	.LCFI10:
 3509              		.cfi_def_cfa_offset 16
 3510              		.cfi_offset 14, -4
 669:boards/TMC4361A_eval.c **** 	return handleParameter(WRITE, motor, type, &value);
 3511              		.loc 1 669 1 view .LVU1281
 3512 09b2 0192     		str	r2, [sp, #4]
 670:boards/TMC4361A_eval.c **** }
 3513              		.loc 1 670 9 view .LVU1282
 3514 09b4 01AB     		add	r3, sp, #4
 3515 09b6 0246     		mov	r2, r0
 3516              	.LVL519:
 670:boards/TMC4361A_eval.c **** }
 3517              		.loc 1 670 9 view .LVU1283
 3518 09b8 0120     		movs	r0, #1
 3519              	.LVL520:
 670:boards/TMC4361A_eval.c **** }
 3520              		.loc 1 670 9 view .LVU1284
 3521 09ba FFF74DFC 		bl	handleParameter
 3522              	.LVL521:
 671:boards/TMC4361A_eval.c **** 
 3523              		.loc 1 671 1 view .LVU1285
 3524 09be 03B0     		add	sp, sp, #12
 3525              	.LCFI11:
 3526              		.cfi_def_cfa_offset 4
 3527              		@ sp needed
 3528 09c0 5DF804FB 		ldr	pc, [sp], #4
 3529              		.cfi_endproc
 3530              	.LFE13:
 3532              		.align	1
 3533              		.syntax unified
 3534              		.thumb
 3535              		.thumb_func
 3536              		.fpu softvfp
 3538              	GAP:
 3539              	.LVL522:
 3540              	.LFB14:
 674:boards/TMC4361A_eval.c **** 	return handleParameter(READ, motor, type, value);
 3541              		.loc 1 674 1 is_stmt 1 view -0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 0
 3544              		@ frame_needed = 0, uses_anonymous_args = 0
 3545              		@ link register save eliminated.
 675:boards/TMC4361A_eval.c **** }
 3546              		.loc 1 675 2 view .LVU1287
 674:boards/TMC4361A_eval.c **** 	return handleParameter(READ, motor, type, value);
 3547              		.loc 1 674 1 is_stmt 0 view .LVU1288
 3548 09c4 1346     		mov	r3, r2
 675:boards/TMC4361A_eval.c **** }
 3549              		.loc 1 675 9 view .LVU1289
 3550 09c6 0246     		mov	r2, r0
 3551              	.LVL523:
 675:boards/TMC4361A_eval.c **** }
 3552              		.loc 1 675 9 view .LVU1290
 3553 09c8 0020     		movs	r0, #0
 3554              	.LVL524:
 675:boards/TMC4361A_eval.c **** }
 3555              		.loc 1 675 9 view .LVU1291
 3556 09ca 45E4     		b	handleParameter
 3557              	.LVL525:
 675:boards/TMC4361A_eval.c **** }
 3558              		.loc 1 675 9 view .LVU1292
 3559              		.cfi_endproc
 3560              	.LFE14:
 3562              		.align	1
 3563              		.syntax unified
 3564              		.thumb
 3565              		.thumb_func
 3566              		.fpu softvfp
 3568              	stop:
 3569              	.LVL526:
 3570              	.LFB9:
 156:boards/TMC4361A_eval.c **** 	rotate(motor, 0);
 3571              		.loc 1 156 1 is_stmt 1 view -0
 3572              		.cfi_startproc
 3573              		@ args = 0, pretend = 0, frame = 0
 3574              		@ frame_needed = 0, uses_anonymous_args = 0
 157:boards/TMC4361A_eval.c **** 
 3575              		.loc 1 157 2 view .LVU1294
 3576              	.LBB306:
 3577              	.LBI306:
 133:boards/TMC4361A_eval.c **** {
 3578              		.loc 1 133 17 view .LVU1295
 3579              	.LBB307:
 135:boards/TMC4361A_eval.c **** 	tmc4361A_rotate(motorToIC(motor), velocity);
 3580              		.loc 1 135 2 view .LVU1296
 136:boards/TMC4361A_eval.c **** 
 3581              		.loc 1 136 2 view .LVU1297
 3582              	.LBB308:
 3583              	.LBI308:
  49:boards/TMC4361A_eval.c **** {
 3584              		.loc 1 49 32 view .LVU1298
  49:boards/TMC4361A_eval.c **** {
 3585              		.loc 1 49 32 is_stmt 0 view .LVU1299
 3586              	.LBE308:
 3587              	.LBE307:
 3588              	.LBE306:
  51:boards/TMC4361A_eval.c **** 
 3589              		.loc 1 51 2 is_stmt 1 view .LVU1300
  53:boards/TMC4361A_eval.c **** }
 3590              		.loc 1 53 2 view .LVU1301
 156:boards/TMC4361A_eval.c **** 	rotate(motor, 0);
 3591              		.loc 1 156 1 is_stmt 0 view .LVU1302
 3592 09cc 08B5     		push	{r3, lr}
 3593              	.LCFI12:
 3594              		.cfi_def_cfa_offset 8
 3595              		.cfi_offset 3, -8
 3596              		.cfi_offset 14, -4
 3597              	.LBB310:
 3598              	.LBB309:
 136:boards/TMC4361A_eval.c **** 
 3599              		.loc 1 136 2 view .LVU1303
 3600 09ce 0348     		ldr	r0, .L191
 3601              	.LVL527:
 136:boards/TMC4361A_eval.c **** 
 3602              		.loc 1 136 2 view .LVU1304
 3603 09d0 0021     		movs	r1, #0
 3604 09d2 FFF7FEFF 		bl	tmc4361A_rotate
 3605              	.LVL528:
 138:boards/TMC4361A_eval.c **** }
 3606              		.loc 1 138 2 is_stmt 1 view .LVU1305
 138:boards/TMC4361A_eval.c **** }
 3607              		.loc 1 138 2 is_stmt 0 view .LVU1306
 3608              	.LBE309:
 3609              	.LBE310:
 159:boards/TMC4361A_eval.c **** }
 3610              		.loc 1 159 2 is_stmt 1 view .LVU1307
 160:boards/TMC4361A_eval.c **** 
 3611              		.loc 1 160 1 is_stmt 0 view .LVU1308
 3612 09d6 0020     		movs	r0, #0
 3613 09d8 08BD     		pop	{r3, pc}
 3614              	.L192:
 3615 09da 00BF     		.align	2
 3616              	.L191:
 3617 09dc 24000000 		.word	.LANCHOR0+36
 3618              		.cfi_endproc
 3619              	.LFE9:
 3621              		.align	1
 3622              		.syntax unified
 3623              		.thumb
 3624              		.thumb_func
 3625              		.fpu softvfp
 3627              	left:
 3628              	.LVL529:
 3629              	.LFB8:
 149:boards/TMC4361A_eval.c **** 	rotate(motor, -velocity);
 3630              		.loc 1 149 1 is_stmt 1 view -0
 3631              		.cfi_startproc
 3632              		@ args = 0, pretend = 0, frame = 0
 3633              		@ frame_needed = 0, uses_anonymous_args = 0
 150:boards/TMC4361A_eval.c **** 
 3634              		.loc 1 150 2 view .LVU1310
 3635              	.LBB311:
 3636              	.LBI311:
 133:boards/TMC4361A_eval.c **** {
 3637              		.loc 1 133 17 view .LVU1311
 3638              	.LBB312:
 135:boards/TMC4361A_eval.c **** 	tmc4361A_rotate(motorToIC(motor), velocity);
 3639              		.loc 1 135 2 view .LVU1312
 136:boards/TMC4361A_eval.c **** 
 3640              		.loc 1 136 2 view .LVU1313
 3641              	.LBB313:
 3642              	.LBI313:
  49:boards/TMC4361A_eval.c **** {
 3643              		.loc 1 49 32 view .LVU1314
  49:boards/TMC4361A_eval.c **** {
 3644              		.loc 1 49 32 is_stmt 0 view .LVU1315
 3645              	.LBE313:
 3646              	.LBE312:
 3647              	.LBE311:
  51:boards/TMC4361A_eval.c **** 
 3648              		.loc 1 51 2 is_stmt 1 view .LVU1316
  53:boards/TMC4361A_eval.c **** }
 3649              		.loc 1 53 2 view .LVU1317
 149:boards/TMC4361A_eval.c **** 	rotate(motor, -velocity);
 3650              		.loc 1 149 1 is_stmt 0 view .LVU1318
 3651 09e0 08B5     		push	{r3, lr}
 3652              	.LCFI13:
 3653              		.cfi_def_cfa_offset 8
 3654              		.cfi_offset 3, -8
 3655              		.cfi_offset 14, -4
 3656              	.LBB315:
 3657              	.LBB314:
 136:boards/TMC4361A_eval.c **** 
 3658              		.loc 1 136 2 view .LVU1319
 3659 09e2 0348     		ldr	r0, .L194
 3660              	.LVL530:
 136:boards/TMC4361A_eval.c **** 
 3661              		.loc 1 136 2 view .LVU1320
 3662 09e4 4942     		rsbs	r1, r1, #0
 3663              	.LVL531:
 136:boards/TMC4361A_eval.c **** 
 3664              		.loc 1 136 2 view .LVU1321
 3665 09e6 FFF7FEFF 		bl	tmc4361A_rotate
 3666              	.LVL532:
 138:boards/TMC4361A_eval.c **** }
 3667              		.loc 1 138 2 is_stmt 1 view .LVU1322
 138:boards/TMC4361A_eval.c **** }
 3668              		.loc 1 138 2 is_stmt 0 view .LVU1323
 3669              	.LBE314:
 3670              	.LBE315:
 152:boards/TMC4361A_eval.c **** }
 3671              		.loc 1 152 2 is_stmt 1 view .LVU1324
 153:boards/TMC4361A_eval.c **** 
 3672              		.loc 1 153 1 is_stmt 0 view .LVU1325
 3673 09ea 0020     		movs	r0, #0
 3674 09ec 08BD     		pop	{r3, pc}
 3675              	.L195:
 3676 09ee 00BF     		.align	2
 3677              	.L194:
 3678 09f0 24000000 		.word	.LANCHOR0+36
 3679              		.cfi_endproc
 3680              	.LFE8:
 3682              		.align	1
 3683              		.syntax unified
 3684              		.thumb
 3685              		.thumb_func
 3686              		.fpu softvfp
 3688              	right:
 3689              	.LVL533:
 3690              	.LFB7:
 142:boards/TMC4361A_eval.c **** 	rotate(motor, velocity);
 3691              		.loc 1 142 1 is_stmt 1 view -0
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 0
 3694              		@ frame_needed = 0, uses_anonymous_args = 0
 143:boards/TMC4361A_eval.c **** 
 3695              		.loc 1 143 2 view .LVU1327
 3696              	.LBB319:
 3697              	.LBI319:
 133:boards/TMC4361A_eval.c **** {
 3698              		.loc 1 133 17 view .LVU1328
 3699              	.LBB320:
 135:boards/TMC4361A_eval.c **** 	tmc4361A_rotate(motorToIC(motor), velocity);
 3700              		.loc 1 135 2 view .LVU1329
 136:boards/TMC4361A_eval.c **** 
 3701              		.loc 1 136 2 view .LVU1330
 3702              	.LBB321:
 3703              	.LBI321:
  49:boards/TMC4361A_eval.c **** {
 3704              		.loc 1 49 32 view .LVU1331
  49:boards/TMC4361A_eval.c **** {
 3705              		.loc 1 49 32 is_stmt 0 view .LVU1332
 3706              	.LBE321:
 3707              	.LBE320:
 3708              	.LBE319:
  51:boards/TMC4361A_eval.c **** 
 3709              		.loc 1 51 2 is_stmt 1 view .LVU1333
  53:boards/TMC4361A_eval.c **** }
 3710              		.loc 1 53 2 view .LVU1334
 142:boards/TMC4361A_eval.c **** 	rotate(motor, velocity);
 3711              		.loc 1 142 1 is_stmt 0 view .LVU1335
 3712 09f4 08B5     		push	{r3, lr}
 3713              	.LCFI14:
 3714              		.cfi_def_cfa_offset 8
 3715              		.cfi_offset 3, -8
 3716              		.cfi_offset 14, -4
 3717              	.LBB323:
 3718              	.LBB322:
 136:boards/TMC4361A_eval.c **** 
 3719              		.loc 1 136 2 view .LVU1336
 3720 09f6 0248     		ldr	r0, .L197
 3721              	.LVL534:
 136:boards/TMC4361A_eval.c **** 
 3722              		.loc 1 136 2 view .LVU1337
 3723 09f8 FFF7FEFF 		bl	tmc4361A_rotate
 3724              	.LVL535:
 138:boards/TMC4361A_eval.c **** }
 3725              		.loc 1 138 2 is_stmt 1 view .LVU1338
 138:boards/TMC4361A_eval.c **** }
 3726              		.loc 1 138 2 is_stmt 0 view .LVU1339
 3727              	.LBE322:
 3728              	.LBE323:
 145:boards/TMC4361A_eval.c **** }
 3729              		.loc 1 145 2 is_stmt 1 view .LVU1340
 146:boards/TMC4361A_eval.c **** 
 3730              		.loc 1 146 1 is_stmt 0 view .LVU1341
 3731 09fc 0020     		movs	r0, #0
 3732 09fe 08BD     		pop	{r3, pc}
 3733              	.L198:
 3734              		.align	2
 3735              	.L197:
 3736 0a00 24000000 		.word	.LANCHOR0+36
 3737              		.cfi_endproc
 3738              	.LFE7:
 3740              		.align	1
 3741              		.syntax unified
 3742              		.thumb
 3743              		.thumb_func
 3744              		.fpu softvfp
 3746              	restore:
 3747              	.LFB22:
 823:boards/TMC4361A_eval.c **** 
 824:boards/TMC4361A_eval.c **** static uint8_t reset()
 825:boards/TMC4361A_eval.c **** {
 826:boards/TMC4361A_eval.c **** 	// Pulse the low-active hardware reset pin
 827:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setLow(Pins.NRST);
 828:boards/TMC4361A_eval.c **** 	wait(1);
 829:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.NRST);
 830:boards/TMC4361A_eval.c **** 
 831:boards/TMC4361A_eval.c **** 	tmc4361A_reset(&TMC4361A);
 832:boards/TMC4361A_eval.c **** 
 833:boards/TMC4361A_eval.c **** 	return 1;
 834:boards/TMC4361A_eval.c **** }
 835:boards/TMC4361A_eval.c **** 
 836:boards/TMC4361A_eval.c **** static uint8_t restore()
 837:boards/TMC4361A_eval.c **** {
 3748              		.loc 1 837 1 is_stmt 1 view -0
 3749              		.cfi_startproc
 3750              		@ args = 0, pretend = 0, frame = 0
 3751              		@ frame_needed = 0, uses_anonymous_args = 0
 838:boards/TMC4361A_eval.c **** 	// Pulse the low-active hardware reset pin
 839:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setLow(Pins.NRST);
 3752              		.loc 1 839 2 view .LVU1343
 837:boards/TMC4361A_eval.c **** 	// Pulse the low-active hardware reset pin
 3753              		.loc 1 837 1 is_stmt 0 view .LVU1344
 3754 0a04 38B5     		push	{r3, r4, r5, lr}
 3755              	.LCFI15:
 3756              		.cfi_def_cfa_offset 16
 3757              		.cfi_offset 3, -16
 3758              		.cfi_offset 4, -12
 3759              		.cfi_offset 5, -8
 3760              		.cfi_offset 14, -4
 3761              		.loc 1 839 5 view .LVU1345
 3762 0a06 0A4B     		ldr	r3, .L200
 3763              		.loc 1 839 2 view .LVU1346
 3764 0a08 0A4C     		ldr	r4, .L200+4
 3765              		.loc 1 839 5 view .LVU1347
 3766 0a0a DD68     		ldr	r5, [r3, #12]
 3767              		.loc 1 839 2 view .LVU1348
 3768 0a0c 6068     		ldr	r0, [r4, #4]
 3769              		.loc 1 839 17 view .LVU1349
 3770 0a0e 2B68     		ldr	r3, [r5]
 3771              		.loc 1 839 2 view .LVU1350
 3772 0a10 9B69     		ldr	r3, [r3, #24]
 3773 0a12 9847     		blx	r3
 3774              	.LVL536:
 840:boards/TMC4361A_eval.c **** 	wait(1);
 3775              		.loc 1 840 2 is_stmt 1 view .LVU1351
 3776 0a14 0120     		movs	r0, #1
 3777 0a16 FFF7FEFF 		bl	wait
 3778              	.LVL537:
 841:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.NRST);
 3779              		.loc 1 841 2 view .LVU1352
 3780              		.loc 1 841 17 is_stmt 0 view .LVU1353
 3781 0a1a 2B68     		ldr	r3, [r5]
 3782              		.loc 1 841 2 view .LVU1354
 3783 0a1c 6068     		ldr	r0, [r4, #4]
 3784 0a1e 5B69     		ldr	r3, [r3, #20]
 3785 0a20 9847     		blx	r3
 3786              	.LVL538:
 842:boards/TMC4361A_eval.c **** 
 843:boards/TMC4361A_eval.c **** 	tmc4361A_restore(&TMC4361A);
 3787              		.loc 1 843 2 is_stmt 1 view .LVU1355
 3788 0a22 04F12400 		add	r0, r4, #36
 3789 0a26 FFF7FEFF 		bl	tmc4361A_restore
 3790              	.LVL539:
 844:boards/TMC4361A_eval.c **** 
 845:boards/TMC4361A_eval.c **** 	return 1;
 3791              		.loc 1 845 2 view .LVU1356
 846:boards/TMC4361A_eval.c **** }
 3792              		.loc 1 846 1 is_stmt 0 view .LVU1357
 3793 0a2a 0120     		movs	r0, #1
 3794 0a2c 38BD     		pop	{r3, r4, r5, pc}
 3795              	.L201:
 3796 0a2e 00BF     		.align	2
 3797              	.L200:
 3798 0a30 00000000 		.word	HAL
 3799 0a34 00000000 		.word	.LANCHOR0
 3800              		.cfi_endproc
 3801              	.LFE22:
 3803              		.align	1
 3804              		.syntax unified
 3805              		.thumb
 3806              		.thumb_func
 3807              		.fpu softvfp
 3809              	reset:
 3810              	.LFB21:
 825:boards/TMC4361A_eval.c **** 	// Pulse the low-active hardware reset pin
 3811              		.loc 1 825 1 is_stmt 1 view -0
 3812              		.cfi_startproc
 3813              		@ args = 0, pretend = 0, frame = 0
 3814              		@ frame_needed = 0, uses_anonymous_args = 0
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3815              		.loc 1 827 2 view .LVU1359
 825:boards/TMC4361A_eval.c **** 	// Pulse the low-active hardware reset pin
 3816              		.loc 1 825 1 is_stmt 0 view .LVU1360
 3817 0a38 38B5     		push	{r3, r4, r5, lr}
 3818              	.LCFI16:
 3819              		.cfi_def_cfa_offset 16
 3820              		.cfi_offset 3, -16
 3821              		.cfi_offset 4, -12
 3822              		.cfi_offset 5, -8
 3823              		.cfi_offset 14, -4
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3824              		.loc 1 827 5 view .LVU1361
 3825 0a3a 0A4B     		ldr	r3, .L203
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3826              		.loc 1 827 2 view .LVU1362
 3827 0a3c 0A4C     		ldr	r4, .L203+4
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3828              		.loc 1 827 5 view .LVU1363
 3829 0a3e DD68     		ldr	r5, [r3, #12]
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3830              		.loc 1 827 2 view .LVU1364
 3831 0a40 6068     		ldr	r0, [r4, #4]
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3832              		.loc 1 827 17 view .LVU1365
 3833 0a42 2B68     		ldr	r3, [r5]
 827:boards/TMC4361A_eval.c **** 	wait(1);
 3834              		.loc 1 827 2 view .LVU1366
 3835 0a44 9B69     		ldr	r3, [r3, #24]
 3836 0a46 9847     		blx	r3
 3837              	.LVL540:
 828:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.NRST);
 3838              		.loc 1 828 2 is_stmt 1 view .LVU1367
 3839 0a48 0120     		movs	r0, #1
 3840 0a4a FFF7FEFF 		bl	wait
 3841              	.LVL541:
 829:boards/TMC4361A_eval.c **** 
 3842              		.loc 1 829 2 view .LVU1368
 829:boards/TMC4361A_eval.c **** 
 3843              		.loc 1 829 17 is_stmt 0 view .LVU1369
 3844 0a4e 2B68     		ldr	r3, [r5]
 829:boards/TMC4361A_eval.c **** 
 3845              		.loc 1 829 2 view .LVU1370
 3846 0a50 6068     		ldr	r0, [r4, #4]
 3847 0a52 5B69     		ldr	r3, [r3, #20]
 3848 0a54 9847     		blx	r3
 3849              	.LVL542:
 831:boards/TMC4361A_eval.c **** 
 3850              		.loc 1 831 2 is_stmt 1 view .LVU1371
 3851 0a56 04F12400 		add	r0, r4, #36
 3852 0a5a FFF7FEFF 		bl	tmc4361A_reset
 3853              	.LVL543:
 833:boards/TMC4361A_eval.c **** }
 3854              		.loc 1 833 2 view .LVU1372
 834:boards/TMC4361A_eval.c **** 
 3855              		.loc 1 834 1 is_stmt 0 view .LVU1373
 3856 0a5e 0120     		movs	r0, #1
 3857 0a60 38BD     		pop	{r3, r4, r5, pc}
 3858              	.L204:
 3859 0a62 00BF     		.align	2
 3860              	.L203:
 3861 0a64 00000000 		.word	HAL
 3862 0a68 00000000 		.word	.LANCHOR0
 3863              		.cfi_endproc
 3864              	.LFE21:
 3866              		.align	1
 3867              		.syntax unified
 3868              		.thumb
 3869              		.thumb_func
 3870              		.fpu softvfp
 3872              	tmc4361A_cover:
 3873              	.LVL544:
 3874              	.LFB5:
  82:boards/TMC4361A_eval.c **** 	static uint64_t coverIn = 0;     // read from squirrel
 3875              		.loc 1 82 1 is_stmt 1 view -0
 3876              		.cfi_startproc
 3877              		@ args = 0, pretend = 0, frame = 0
 3878              		@ frame_needed = 0, uses_anonymous_args = 0
  83:boards/TMC4361A_eval.c **** 	static uint64_t coverOut = 0;    // write to squirrel
 3879              		.loc 1 83 2 view .LVU1375
  84:boards/TMC4361A_eval.c **** 	static uint8_t coverLength = 0;  // data to be written
 3880              		.loc 1 84 2 view .LVU1376
  85:boards/TMC4361A_eval.c **** 
 3881              		.loc 1 85 2 view .LVU1377
  87:boards/TMC4361A_eval.c **** 
 3882              		.loc 1 87 2 view .LVU1378
  90:boards/TMC4361A_eval.c **** 	coverOut |= data;  // add new byte to be written
 3883              		.loc 1 90 2 view .LVU1379
  91:boards/TMC4361A_eval.c **** 	coverLength++;     // count outgoing bytes
 3884              		.loc 1 91 2 view .LVU1380
  82:boards/TMC4361A_eval.c **** 	static uint64_t coverIn = 0;     // read from squirrel
 3885              		.loc 1 82 1 is_stmt 0 view .LVU1381
 3886 0a6c F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3887              	.LCFI17:
 3888              		.cfi_def_cfa_offset 24
 3889              		.cfi_offset 3, -24
 3890              		.cfi_offset 4, -20
 3891              		.cfi_offset 5, -16
 3892              		.cfi_offset 6, -12
 3893              		.cfi_offset 7, -8
 3894              		.cfi_offset 14, -4
  90:boards/TMC4361A_eval.c **** 	coverOut |= data;  // add new byte to be written
 3895              		.loc 1 90 11 view .LVU1382
 3896 0a6e 334C     		ldr	r4, .L212
 3897 0a70 D4E9B232 		ldrd	r3, r2, [r4, #712]
 3898 0a74 1202     		lsls	r2, r2, #8
  91:boards/TMC4361A_eval.c **** 	coverLength++;     // count outgoing bytes
 3899              		.loc 1 91 11 view .LVU1383
 3900 0a76 40EA0320 		orr	r0, r0, r3, lsl #8
 3901              	.LVL545:
  90:boards/TMC4361A_eval.c **** 	coverOut |= data;  // add new byte to be written
 3902              		.loc 1 90 11 view .LVU1384
 3903 0a7a 42EA1362 		orr	r2, r2, r3, lsr #24
  91:boards/TMC4361A_eval.c **** 	coverLength++;     // count outgoing bytes
 3904              		.loc 1 91 11 view .LVU1385
 3905 0a7e C4E9B202 		strd	r0, r2, [r4, #712]
  92:boards/TMC4361A_eval.c **** 
 3906              		.loc 1 92 2 is_stmt 1 view .LVU1386
  95:boards/TMC4361A_eval.c **** 	coverIn <<= 8;        // shift by one byte to read this next time
 3907              		.loc 1 95 16 is_stmt 0 view .LVU1387
 3908 0a82 D4E9B660 		ldrd	r6, r0, [r4, #728]
  92:boards/TMC4361A_eval.c **** 
 3909              		.loc 1 92 13 view .LVU1388
 3910 0a86 94F8D032 		ldrb	r3, [r4, #720]	@ zero_extendqisi2
  95:boards/TMC4361A_eval.c **** 	coverIn <<= 8;        // shift by one byte to read this next time
 3911              		.loc 1 95 6 view .LVU1389
 3912 0a8a 050E     		lsrs	r5, r0, #24
  92:boards/TMC4361A_eval.c **** 
 3913              		.loc 1 92 13 view .LVU1390
 3914 0a8c 0133     		adds	r3, r3, #1
  96:boards/TMC4361A_eval.c **** 
 3915              		.loc 1 96 10 view .LVU1391
 3916 0a8e 0002     		lsls	r0, r0, #8
 3917 0a90 40EA1660 		orr	r0, r0, r6, lsr #24
  92:boards/TMC4361A_eval.c **** 
 3918              		.loc 1 92 13 view .LVU1392
 3919 0a94 DBB2     		uxtb	r3, r3
  96:boards/TMC4361A_eval.c **** 
 3920              		.loc 1 96 10 view .LVU1393
 3921 0a96 3602     		lsls	r6, r6, #8
 3922 0a98 C4E9B660 		strd	r6, r0, [r4, #728]
  92:boards/TMC4361A_eval.c **** 
 3923              		.loc 1 92 13 view .LVU1394
 3924 0a9c 84F8D032 		strb	r3, [r4, #720]
  95:boards/TMC4361A_eval.c **** 	coverIn <<= 8;        // shift by one byte to read this next time
 3925              		.loc 1 95 2 is_stmt 1 view .LVU1395
 3926              	.LVL546:
  96:boards/TMC4361A_eval.c **** 
 3927              		.loc 1 96 2 view .LVU1396
  98:boards/TMC4361A_eval.c **** 	{
 3928              		.loc 1 98 2 view .LVU1397
  98:boards/TMC4361A_eval.c **** 	{
 3929              		.loc 1 98 4 is_stmt 0 view .LVU1398
 3930 0aa0 0029     		cmp	r1, #0
 3931 0aa2 49D0     		beq	.L206
 109:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_HIGH_WR, coverOut >> 32);
 3932              		.loc 1 109 3 is_stmt 1 view .LVU1399
 109:boards/TMC4361A_eval.c **** 			tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_HIGH_WR, coverOut >> 32);
 3933              		.loc 1 109 5 is_stmt 0 view .LVU1400
 3934 0aa4 042B     		cmp	r3, #4
 3935 0aa6 04D9     		bls	.L207
 110:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
 3936              		.loc 1 110 4 is_stmt 1 view .LVU1401
 3937 0aa8 6D21     		movs	r1, #109
 3938              	.LVL547:
 110:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(&TMC4361A, TMC4361A_COVER_LOW_WR, coverOut & 0xFFFFFFFF);
 3939              		.loc 1 110 4 is_stmt 0 view .LVU1402
 3940 0aaa 04F12400 		add	r0, r4, #36
 3941 0aae FFF7FEFF 		bl	tmc4361A_writeInt
 3942              	.LVL548:
 3943              	.L207:
 3944              	.LBB326:
 3945              	.LBI326:
  81:boards/TMC4361A_eval.c **** {
 3946              		.loc 1 81 16 is_stmt 1 view .LVU1403
 3947              	.LBB327:
 111:boards/TMC4361A_eval.c **** 		wait(1);
 3948              		.loc 1 111 3 view .LVU1404
 3949 0ab2 D4F8C822 		ldr	r2, [r4, #712]
 3950 0ab6 2248     		ldr	r0, .L212+4
 3951 0ab8 6C21     		movs	r1, #108
 3952 0aba FFF7FEFF 		bl	tmc4361A_writeInt
 3953              	.LVL549:
 112:boards/TMC4361A_eval.c **** 
 3954              		.loc 1 112 3 view .LVU1405
 3955 0abe 0120     		movs	r0, #1
 3956 0ac0 FFF7FEFF 		bl	wait
 3957              	.LVL550:
 115:boards/TMC4361A_eval.c **** 
 3958              		.loc 1 115 3 view .LVU1406
 3959 0ac4 D4F8C822 		ldr	r2, [r4, #712]
 3960 0ac8 1D48     		ldr	r0, .L212+4
 3961 0aca 6C21     		movs	r1, #108
 3962 0acc FFF7FEFF 		bl	tmc4361A_writeInt
 3963              	.LVL551:
 118:boards/TMC4361A_eval.c **** 		if(coverLength > 4)
 3964              		.loc 1 118 3 view .LVU1407
 118:boards/TMC4361A_eval.c **** 		if(coverLength > 4)
 3965              		.loc 1 118 11 is_stmt 0 view .LVU1408
 3966 0ad0 0023     		movs	r3, #0
 3967 0ad2 0022     		movs	r2, #0
 3968 0ad4 C4E9B623 		strd	r2, [r4, #728]
 119:boards/TMC4361A_eval.c **** 			coverIn |= (uint64_t) tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_HIGH_RD) << 32;
 3969              		.loc 1 119 3 is_stmt 1 view .LVU1409
 119:boards/TMC4361A_eval.c **** 			coverIn |= (uint64_t) tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_HIGH_RD) << 32;
 3970              		.loc 1 119 5 is_stmt 0 view .LVU1410
 3971 0ad8 94F8D032 		ldrb	r3, [r4, #720]	@ zero_extendqisi2
 3972 0adc 042B     		cmp	r3, #4
 3973 0ade 08D9     		bls	.L208
 120:boards/TMC4361A_eval.c **** 		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
 3974              		.loc 1 120 4 is_stmt 1 view .LVU1411
 120:boards/TMC4361A_eval.c **** 		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
 3975              		.loc 1 120 26 is_stmt 0 view .LVU1412
 3976 0ae0 1748     		ldr	r0, .L212+4
 3977 0ae2 6F21     		movs	r1, #111
 3978 0ae4 FFF7FEFF 		bl	tmc4361A_readInt
 3979              	.LVL552:
 120:boards/TMC4361A_eval.c **** 		coverIn |= tmc4361A_readInt(&TMC4361A, TMC4361A_COVER_DRV_LOW_RD);
 3980              		.loc 1 120 12 view .LVU1413
 3981 0ae8 D4F8DC32 		ldr	r3, [r4, #732]
 3982 0aec 0343     		orrs	r3, r3, r0
 3983 0aee C4F8DC32 		str	r3, [r4, #732]
 3984              	.L208:
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 3985              		.loc 1 121 3 is_stmt 1 view .LVU1414
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 3986              		.loc 1 121 14 is_stmt 0 view .LVU1415
 3987 0af2 6E21     		movs	r1, #110
 3988 0af4 1248     		ldr	r0, .L212+4
 3989 0af6 FFF7FEFF 		bl	tmc4361A_readInt
 3990              	.LVL553:
 122:boards/TMC4361A_eval.c **** 
 3991              		.loc 1 122 3 is_stmt 1 view .LVU1416
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 3992              		.loc 1 121 11 is_stmt 0 view .LVU1417
 3993 0afa D4E9B623 		ldrd	r2, r3, [r4, #728]
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 3994              		.loc 1 121 14 view .LVU1418
 3995 0afe C717     		asrs	r7, r0, #31
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 3996              		.loc 1 121 11 view .LVU1419
 3997 0b00 1043     		orrs	r0, r0, r2
 122:boards/TMC4361A_eval.c **** 
 3998              		.loc 1 122 17 view .LVU1420
 3999 0b02 94F8D022 		ldrb	r2, [r4, #720]	@ zero_extendqisi2
 4000 0b06 C2F10802 		rsb	r2, r2, #8
 122:boards/TMC4361A_eval.c **** 
 4001              		.loc 1 122 31 view .LVU1421
 4002 0b0a D200     		lsls	r2, r2, #3
 122:boards/TMC4361A_eval.c **** 
 4003              		.loc 1 122 11 view .LVU1422
 4004 0b0c A2F12006 		sub	r6, r2, #32
 121:boards/TMC4361A_eval.c **** 		coverIn <<= (8-coverLength) * 8; // Shift the highest byte of the reply to the highest byte of th
 4005              		.loc 1 121 11 view .LVU1423
 4006 0b10 3B43     		orrs	r3, r3, r7
 122:boards/TMC4361A_eval.c **** 
 4007              		.loc 1 122 11 view .LVU1424
 4008 0b12 C2F12001 		rsb	r1, r2, #32
 4009 0b16 9340     		lsls	r3, r3, r2
 4010 0b18 00FA06F6 		lsl	r6, r0, r6
 4011 0b1c 20FA01F1 		lsr	r1, r0, r1
 4012 0b20 3343     		orrs	r3, r3, r6
 4013 0b22 0B43     		orrs	r3, r3, r1
 4014 0b24 9040     		lsls	r0, r0, r2
 4015 0b26 C4E9B603 		strd	r0, r3, [r4, #728]
 125:boards/TMC4361A_eval.c **** 		coverLength=0;
 4016              		.loc 1 125 3 is_stmt 1 view .LVU1425
 125:boards/TMC4361A_eval.c **** 		coverLength=0;
 4017              		.loc 1 125 12 is_stmt 0 view .LVU1426
 4018 0b2a 0022     		movs	r2, #0
 4019 0b2c 0023     		movs	r3, #0
 4020 0b2e C4E9B223 		strd	r2, [r4, #712]
 126:boards/TMC4361A_eval.c **** 	}
 4021              		.loc 1 126 3 is_stmt 1 view .LVU1427
 126:boards/TMC4361A_eval.c **** 	}
 4022              		.loc 1 126 14 is_stmt 0 view .LVU1428
 4023 0b32 0023     		movs	r3, #0
 4024 0b34 84F8D032 		strb	r3, [r4, #720]
 4025              	.L206:
 126:boards/TMC4361A_eval.c **** 	}
 4026              		.loc 1 126 14 view .LVU1429
 4027              	.LBE327:
 4028              	.LBE326:
 129:boards/TMC4361A_eval.c **** }
 4029              		.loc 1 129 2 is_stmt 1 view .LVU1430
 130:boards/TMC4361A_eval.c **** 
 4030              		.loc 1 130 1 is_stmt 0 view .LVU1431
 4031 0b38 2846     		mov	r0, r5
 4032 0b3a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4033              	.LVL554:
 4034              	.L213:
 130:boards/TMC4361A_eval.c **** 
 4035              		.loc 1 130 1 view .LVU1432
 4036              		.align	2
 4037              	.L212:
 4038 0b3c 00000000 		.word	.LANCHOR0
 4039 0b40 24000000 		.word	.LANCHOR0+36
 4040              		.cfi_endproc
 4041              	.LFE5:
 4043              		.align	1
 4044              		.syntax unified
 4045              		.thumb
 4046              		.thumb_func
 4047              		.fpu softvfp
 4049              	configCallback:
 4050              	.LVL555:
 4051              	.LFB23:
 847:boards/TMC4361A_eval.c **** 
 848:boards/TMC4361A_eval.c **** static void configCallback(TMC4361ATypeDef *tmc4361A, ConfigState state)
 849:boards/TMC4361A_eval.c **** {
 4052              		.loc 1 849 1 is_stmt 1 view -0
 4053              		.cfi_startproc
 4054              		@ args = 0, pretend = 0, frame = 0
 4055              		@ frame_needed = 0, uses_anonymous_args = 0
 850:boards/TMC4361A_eval.c **** 	uint8_t driver, dataLength;
 4056              		.loc 1 850 2 view .LVU1434
 851:boards/TMC4361A_eval.c **** 	uint32_t value;
 4057              		.loc 1 851 2 view .LVU1435
 852:boards/TMC4361A_eval.c **** 
 853:boards/TMC4361A_eval.c **** 	// Setup SPI
 854:boards/TMC4361A_eval.c **** 	switch(Evalboards.ch2.id)
 4058              		.loc 1 854 2 view .LVU1436
 849:boards/TMC4361A_eval.c **** 	uint8_t driver, dataLength;
 4059              		.loc 1 849 1 is_stmt 0 view .LVU1437
 4060 0b44 70B5     		push	{r4, r5, r6, lr}
 4061              	.LCFI18:
 4062              		.cfi_def_cfa_offset 16
 4063              		.cfi_offset 4, -16
 4064              		.cfi_offset 5, -12
 4065              		.cfi_offset 6, -8
 4066              		.cfi_offset 14, -4
 4067              		.loc 1 854 23 view .LVU1438
 4068 0b46 1A4D     		ldr	r5, .L220
 4069 0b48 95F87C30 		ldrb	r3, [r5, #124]	@ zero_extendqisi2
 4070              		.loc 1 854 2 view .LVU1439
 4071 0b4c 012B     		cmp	r3, #1
 849:boards/TMC4361A_eval.c **** 	uint8_t driver, dataLength;
 4072              		.loc 1 849 1 view .LVU1440
 4073 0b4e 0446     		mov	r4, r0
 4074 0b50 0E46     		mov	r6, r1
 4075              		.loc 1 854 2 view .LVU1441
 4076 0b52 25D0     		beq	.L217
 855:boards/TMC4361A_eval.c **** 	{
 856:boards/TMC4361A_eval.c **** 	case ID_TMC2130:
 857:boards/TMC4361A_eval.c **** 		driver = 0x0C;
 858:boards/TMC4361A_eval.c **** 		dataLength = 0;
 4077              		.loc 1 858 14 view .LVU1442
 4078 0b54 032B     		cmp	r3, #3
 4079 0b56 15BF     		itete	ne
 4080 0b58 2823     		movne	r3, #40
 4081 0b5a 0023     		moveq	r3, #0
 4082 0b5c 0F22     		movne	r2, #15
 4083 0b5e 0C22     		moveq	r2, #12
 4084              	.L215:
 4085              	.LVL556:
 859:boards/TMC4361A_eval.c **** 		break;
 860:boards/TMC4361A_eval.c **** 	case ID_TMC2660:
 861:boards/TMC4361A_eval.c **** 		driver = 0x0B;
 862:boards/TMC4361A_eval.c **** 		dataLength = 0;
 863:boards/TMC4361A_eval.c **** 		break;
 864:boards/TMC4361A_eval.c **** 	default:
 865:boards/TMC4361A_eval.c **** 		driver = 0x0F;
 866:boards/TMC4361A_eval.c **** 		dataLength = 40;
 867:boards/TMC4361A_eval.c **** 		break;
 868:boards/TMC4361A_eval.c **** 	}
 869:boards/TMC4361A_eval.c **** 	value = 0x44400040 | (dataLength << 13) | (driver << 0);
 4086              		.loc 1 869 2 is_stmt 1 view .LVU1443
 870:boards/TMC4361A_eval.c **** 	tmc4361A_writeInt(tmc4361A, TMC4361A_SPIOUT_CONF, value);
 4087              		.loc 1 870 2 view .LVU1444
 869:boards/TMC4361A_eval.c **** 	tmc4361A_writeInt(tmc4361A, TMC4361A_SPIOUT_CONF, value);
 4088              		.loc 1 869 42 is_stmt 0 view .LVU1445
 4089 0b60 42EA4332 		orr	r2, r2, r3, lsl #13
 4090              	.LVL557:
 4091              		.loc 1 870 2 view .LVU1446
 4092 0b64 42F08842 		orr	r2, r2, #1140850688
 4093 0b68 42F04012 		orr	r2, r2, #4194368
 4094 0b6c 0421     		movs	r1, #4
 4095              	.LVL558:
 4096              		.loc 1 870 2 view .LVU1447
 4097 0b6e 2046     		mov	r0, r4
 4098              	.LVL559:
 4099              		.loc 1 870 2 view .LVU1448
 4100 0b70 FFF7FEFF 		bl	tmc4361A_writeInt
 4101              	.LVL560:
 871:boards/TMC4361A_eval.c **** 
 872:boards/TMC4361A_eval.c **** 	// Reset/Restore driver
 873:boards/TMC4361A_eval.c **** 	if(state == CONFIG_RESET)
 4102              		.loc 1 873 2 is_stmt 1 view .LVU1449
 4103              		.loc 1 873 4 is_stmt 0 view .LVU1450
 4104 0b74 012E     		cmp	r6, #1
 4105 0b76 16D1     		bne	.L216
 4106              	.LVL561:
 4107              	.LBB330:
 4108              	.LBI330:
 848:boards/TMC4361A_eval.c **** {
 4109              		.loc 1 848 13 is_stmt 1 view .LVU1451
 4110              	.LBB331:
 874:boards/TMC4361A_eval.c **** 	{
 875:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(tmc4361A, TMC4361A_CURRENT_CONF, 0x00000003);
 4111              		.loc 1 875 3 view .LVU1452
 4112 0b78 0322     		movs	r2, #3
 4113 0b7a 0521     		movs	r1, #5
 4114 0b7c 2046     		mov	r0, r4
 4115 0b7e FFF7FEFF 		bl	tmc4361A_writeInt
 4116              	.LVL562:
 876:boards/TMC4361A_eval.c **** 		tmc4361A_writeInt(tmc4361A, TMC4361A_SCALE_VALUES, 0x00000000);
 4117              		.loc 1 876 3 view .LVU1453
 4118 0b82 0022     		movs	r2, #0
 4119 0b84 0621     		movs	r1, #6
 4120 0b86 2046     		mov	r0, r4
 4121 0b88 FFF7FEFF 		bl	tmc4361A_writeInt
 4122              	.LVL563:
 877:boards/TMC4361A_eval.c **** 		tmc4361A_fillShadowRegisters(tmc4361A);
 4123              		.loc 1 877 3 view .LVU1454
 4124 0b8c 2046     		mov	r0, r4
 4125 0b8e FFF7FEFF 		bl	tmc4361A_fillShadowRegisters
 4126              	.LVL564:
 878:boards/TMC4361A_eval.c **** 		Evalboards.ch2.config->reset();
 4127              		.loc 1 878 3 view .LVU1455
 4128              		.loc 1 878 24 is_stmt 0 view .LVU1456
 4129 0b92 D5F89030 		ldr	r3, [r5, #144]
 4130              		.loc 1 878 3 view .LVU1457
 4131 0b96 D3F80432 		ldr	r3, [r3, #516]
 4132              	.LVL565:
 4133              	.L219:
 4134              		.loc 1 878 3 view .LVU1458
 4135              	.LBE331:
 4136              	.LBE330:
 879:boards/TMC4361A_eval.c **** 	}
 880:boards/TMC4361A_eval.c **** 	else
 881:boards/TMC4361A_eval.c **** 		Evalboards.ch2.config->restore();
 882:boards/TMC4361A_eval.c **** }
 4137              		.loc 1 882 1 view .LVU1459
 4138 0b9a BDE87040 		pop	{r4, r5, r6, lr}
 4139              	.LCFI19:
 4140              		.cfi_remember_state
 4141              		.cfi_restore 14
 4142              		.cfi_restore 6
 4143              		.cfi_restore 5
 4144              		.cfi_restore 4
 4145              		.cfi_def_cfa_offset 0
 4146              	.LVL566:
 881:boards/TMC4361A_eval.c **** }
 4147              		.loc 1 881 3 view .LVU1460
 4148 0b9e 1847     		bx	r3
 4149              	.LVL567:
 4150              	.L217:
 4151              	.LCFI20:
 4152              		.cfi_restore_state
 854:boards/TMC4361A_eval.c **** 	{
 4153              		.loc 1 854 2 view .LVU1461
 4154 0ba0 0023     		movs	r3, #0
 4155 0ba2 0B22     		movs	r2, #11
 4156 0ba4 DCE7     		b	.L215
 4157              	.LVL568:
 4158              	.L216:
 881:boards/TMC4361A_eval.c **** }
 4159              		.loc 1 881 3 is_stmt 1 view .LVU1462
 881:boards/TMC4361A_eval.c **** }
 4160              		.loc 1 881 24 is_stmt 0 view .LVU1463
 4161 0ba6 D5F89030 		ldr	r3, [r5, #144]
 881:boards/TMC4361A_eval.c **** }
 4162              		.loc 1 881 3 view .LVU1464
 4163 0baa D3F80832 		ldr	r3, [r3, #520]
 4164 0bae F4E7     		b	.L219
 4165              	.L221:
 4166              		.align	2
 4167              	.L220:
 4168 0bb0 00000000 		.word	Evalboards
 4169              		.cfi_endproc
 4170              	.LFE23:
 4172              		.align	1
 4173              		.syntax unified
 4174              		.thumb
 4175              		.thumb_func
 4176              		.fpu softvfp
 4178              	rotate:
 4179              	.LFB30:
 4180              		.cfi_startproc
 4181              		@ args = 0, pretend = 0, frame = 0
 4182              		@ frame_needed = 0, uses_anonymous_args = 0
 4183 0bb4 08B5     		push	{r3, lr}
 4184              	.LCFI21:
 4185              		.cfi_def_cfa_offset 8
 4186              		.cfi_offset 3, -8
 4187              		.cfi_offset 14, -4
 4188 0bb6 0248     		ldr	r0, .L223
 4189 0bb8 FFF7FEFF 		bl	tmc4361A_rotate
 4190 0bbc 0020     		movs	r0, #0
 4191 0bbe 08BD     		pop	{r3, pc}
 4192              	.L224:
 4193              		.align	2
 4194              	.L223:
 4195 0bc0 24000000 		.word	.LANCHOR0+36
 4196              		.cfi_endproc
 4197              	.LFE30:
 4199              		.align	1
 4200              		.global	tmc4361A_readWriteArray
 4201              		.syntax unified
 4202              		.thumb
 4203              		.thumb_func
 4204              		.fpu softvfp
 4206              	tmc4361A_readWriteArray:
 4207              	.LVL569:
 4208              	.LFB3:
  67:boards/TMC4361A_eval.c **** 	channelToSPI(channel)->readWriteArray(data, length);
 4209              		.loc 1 67 1 is_stmt 1 view -0
 4210              		.cfi_startproc
 4211              		@ args = 0, pretend = 0, frame = 0
 4212              		@ frame_needed = 0, uses_anonymous_args = 0
 4213              		@ link register save eliminated.
  68:boards/TMC4361A_eval.c **** }
 4214              		.loc 1 68 2 view .LVU1466
 4215              	.LBB332:
 4216              	.LBI332:
  58:boards/TMC4361A_eval.c **** {
 4217              		.loc 1 58 34 view .LVU1467
 4218              	.LBB333:
  60:boards/TMC4361A_eval.c **** 
 4219              		.loc 1 60 2 view .LVU1468
  62:boards/TMC4361A_eval.c **** }
 4220              		.loc 1 62 2 view .LVU1469
  62:boards/TMC4361A_eval.c **** }
 4221              		.loc 1 62 9 is_stmt 0 view .LVU1470
 4222 0bc4 034B     		ldr	r3, .L226
 4223              	.LBE333:
 4224              	.LBE332:
  68:boards/TMC4361A_eval.c **** }
 4225              		.loc 1 68 23 view .LVU1471
 4226 0bc6 D3F8E032 		ldr	r3, [r3, #736]
  67:boards/TMC4361A_eval.c **** 	channelToSPI(channel)->readWriteArray(data, length);
 4227              		.loc 1 67 1 view .LVU1472
 4228 0bca 0846     		mov	r0, r1
 4229              	.LVL570:
  68:boards/TMC4361A_eval.c **** }
 4230              		.loc 1 68 2 view .LVU1473
 4231 0bcc DB68     		ldr	r3, [r3, #12]
 4232 0bce 1146     		mov	r1, r2
 4233              	.LVL571:
  68:boards/TMC4361A_eval.c **** }
 4234              		.loc 1 68 2 view .LVU1474
 4235 0bd0 1847     		bx	r3	@ indirect register sibling call
 4236              	.LVL572:
 4237              	.L227:
  68:boards/TMC4361A_eval.c **** }
 4238              		.loc 1 68 2 view .LVU1475
 4239 0bd2 00BF     		.align	2
 4240              	.L226:
 4241 0bd4 00000000 		.word	.LANCHOR0
 4242              		.cfi_endproc
 4243              	.LFE3:
 4245              		.align	1
 4246              		.global	TMC4361A_init
 4247              		.syntax unified
 4248              		.thumb
 4249              		.thumb_func
 4250              		.fpu softvfp
 4252              	TMC4361A_init:
 4253              	.LFB24:
 883:boards/TMC4361A_eval.c **** 
 884:boards/TMC4361A_eval.c **** void TMC4361A_init(void)
 885:boards/TMC4361A_eval.c **** {
 4254              		.loc 1 885 1 is_stmt 1 view -0
 4255              		.cfi_startproc
 4256              		@ args = 0, pretend = 0, frame = 0
 4257              		@ frame_needed = 0, uses_anonymous_args = 0
 886:boards/TMC4361A_eval.c **** 	tmc4361A_init(&TMC4361A, 0, Evalboards.ch1.config, &tmc4361A_defaultRegisterResetState[0]);
 4258              		.loc 1 886 2 view .LVU1477
 885:boards/TMC4361A_eval.c **** 	tmc4361A_init(&TMC4361A, 0, Evalboards.ch1.config, &tmc4361A_defaultRegisterResetState[0]);
 4259              		.loc 1 885 1 is_stmt 0 view .LVU1478
 4260 0bd8 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4261              	.LCFI22:
 4262              		.cfi_def_cfa_offset 24
 4263              		.cfi_offset 3, -24
 4264              		.cfi_offset 4, -20
 4265              		.cfi_offset 5, -16
 4266              		.cfi_offset 6, -12
 4267              		.cfi_offset 7, -8
 4268              		.cfi_offset 14, -4
 4269              		.loc 1 886 2 view .LVU1479
 4270 0bda 4C4C     		ldr	r4, .L229
 4271 0bdc 4C4D     		ldr	r5, .L229+4
 4272 0bde 4D4B     		ldr	r3, .L229+8
 4273 0be0 AA69     		ldr	r2, [r5, #24]
 887:boards/TMC4361A_eval.c **** 	tmc4361A_setCallback(&TMC4361A, configCallback);
 888:boards/TMC4361A_eval.c **** 
 889:boards/TMC4361A_eval.c **** 	Pins.STANDBY_CLK     = &HAL.IOs->pins->DIO4;
 4274              		.loc 1 889 29 view .LVU1480
 4275 0be2 4D4F     		ldr	r7, .L229+12
 886:boards/TMC4361A_eval.c **** 	tmc4361A_setCallback(&TMC4361A, configCallback);
 4276              		.loc 1 886 2 view .LVU1481
 4277 0be4 04F12406 		add	r6, r4, #36
 4278 0be8 3046     		mov	r0, r6
 4279 0bea 0021     		movs	r1, #0
 4280 0bec FFF7FEFF 		bl	tmc4361A_init
 4281              	.LVL573:
 887:boards/TMC4361A_eval.c **** 	tmc4361A_setCallback(&TMC4361A, configCallback);
 4282              		.loc 1 887 2 is_stmt 1 view .LVU1482
 4283 0bf0 4A49     		ldr	r1, .L229+16
 4284 0bf2 3046     		mov	r0, r6
 4285 0bf4 FFF7FEFF 		bl	tmc4361A_setCallback
 4286              	.LVL574:
 4287              		.loc 1 889 2 view .LVU1483
 4288              		.loc 1 889 29 is_stmt 0 view .LVU1484
 4289 0bf8 FE68     		ldr	r6, [r7, #12]
 4290              		.loc 1 889 33 view .LVU1485
 4291 0bfa 7368     		ldr	r3, [r6, #4]
 4292              		.loc 1 889 25 view .LVU1486
 4293 0bfc 03F1E802 		add	r2, r3, #232
 4294              		.loc 1 889 23 view .LVU1487
 4295 0c00 2262     		str	r2, [r4, #32]
 890:boards/TMC4361A_eval.c **** 	Pins.INTR            = &HAL.IOs->pins->DIO5;
 4296              		.loc 1 890 2 is_stmt 1 view .LVU1488
 4297              		.loc 1 890 25 is_stmt 0 view .LVU1489
 4298 0c02 03F58472 		add	r2, r3, #264
 4299              		.loc 1 890 23 view .LVU1490
 4300 0c06 E261     		str	r2, [r4, #28]
 891:boards/TMC4361A_eval.c **** 	Pins.STOP_L          = &HAL.IOs->pins->DIO12;
 4301              		.loc 1 891 2 is_stmt 1 view .LVU1491
 4302              		.loc 1 891 25 is_stmt 0 view .LVU1492
 4303 0c08 03F55272 		add	r2, r3, #840
 4304              		.loc 1 891 23 view .LVU1493
 4305 0c0c A261     		str	r2, [r4, #24]
 892:boards/TMC4361A_eval.c **** 	Pins.STOP_R          = &HAL.IOs->pins->DIO13;
 4306              		.loc 1 892 2 is_stmt 1 view .LVU1494
 4307              		.loc 1 892 25 is_stmt 0 view .LVU1495
 4308 0c0e 03F55A72 		add	r2, r3, #872
 4309              		.loc 1 892 23 view .LVU1496
 4310 0c12 6261     		str	r2, [r4, #20]
 893:boards/TMC4361A_eval.c **** 	Pins.HOME_REF        = &HAL.IOs->pins->DIO14;
 4311              		.loc 1 893 2 is_stmt 1 view .LVU1497
 4312              		.loc 1 893 25 is_stmt 0 view .LVU1498
 4313 0c14 03F56272 		add	r2, r3, #904
 4314              		.loc 1 893 23 view .LVU1499
 4315 0c18 2261     		str	r2, [r4, #16]
 894:boards/TMC4361A_eval.c **** 	Pins.START           = &HAL.IOs->pins->DIO15;
 4316              		.loc 1 894 2 is_stmt 1 view .LVU1500
 4317              		.loc 1 894 25 is_stmt 0 view .LVU1501
 4318 0c1a 03F56A72 		add	r2, r3, #936
 895:boards/TMC4361A_eval.c **** 	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
 896:boards/TMC4361A_eval.c **** 	Pins.NRST            = &HAL.IOs->pins->DIO17;
 4319              		.loc 1 896 25 view .LVU1502
 4320 0c1e 03F57A70 		add	r0, r3, #1000
 894:boards/TMC4361A_eval.c **** 	Pins.START           = &HAL.IOs->pins->DIO15;
 4321              		.loc 1 894 23 view .LVU1503
 4322 0c22 E260     		str	r2, [r4, #12]
 895:boards/TMC4361A_eval.c **** 	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
 4323              		.loc 1 895 2 is_stmt 1 view .LVU1504
 895:boards/TMC4361A_eval.c **** 	Pins.FREEZE          = &HAL.IOs->pins->DIO16;
 4324              		.loc 1 895 25 is_stmt 0 view .LVU1505
 4325 0c24 03F57272 		add	r2, r3, #968
 897:boards/TMC4361A_eval.c **** 	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
 4326              		.loc 1 897 25 view .LVU1506
 4327 0c28 03F58163 		add	r3, r3, #1032
 4328              		.loc 1 897 23 view .LVU1507
 4329 0c2c 2360     		str	r3, [r4]
 898:boards/TMC4361A_eval.c **** 
 899:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.NRST);
 4330              		.loc 1 899 17 view .LVU1508
 4331 0c2e 3368     		ldr	r3, [r6]
 895:boards/TMC4361A_eval.c **** 	Pins.NRST            = &HAL.IOs->pins->DIO17;
 4332              		.loc 1 895 23 view .LVU1509
 4333 0c30 A260     		str	r2, [r4, #8]
 896:boards/TMC4361A_eval.c **** 	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
 4334              		.loc 1 896 2 is_stmt 1 view .LVU1510
 4335              		.loc 1 899 2 is_stmt 0 view .LVU1511
 4336 0c32 DB68     		ldr	r3, [r3, #12]
 896:boards/TMC4361A_eval.c **** 	Pins.TARGET_REACHED  = &HAL.IOs->pins->DIO18;
 4337              		.loc 1 896 23 view .LVU1512
 4338 0c34 6060     		str	r0, [r4, #4]
 897:boards/TMC4361A_eval.c **** 
 4339              		.loc 1 897 2 is_stmt 1 view .LVU1513
 4340              		.loc 1 899 2 view .LVU1514
 4341 0c36 9847     		blx	r3
 4342              	.LVL575:
 900:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.STOP_L);
 4343              		.loc 1 900 2 view .LVU1515
 4344              		.loc 1 900 17 is_stmt 0 view .LVU1516
 4345 0c38 3368     		ldr	r3, [r6]
 4346              		.loc 1 900 2 view .LVU1517
 4347 0c3a A069     		ldr	r0, [r4, #24]
 4348 0c3c DB68     		ldr	r3, [r3, #12]
 4349 0c3e 9847     		blx	r3
 4350              	.LVL576:
 901:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.STOP_R);
 4351              		.loc 1 901 2 is_stmt 1 view .LVU1518
 4352              		.loc 1 901 17 is_stmt 0 view .LVU1519
 4353 0c40 3368     		ldr	r3, [r6]
 4354              		.loc 1 901 2 view .LVU1520
 4355 0c42 6069     		ldr	r0, [r4, #20]
 4356 0c44 DB68     		ldr	r3, [r3, #12]
 4357 0c46 9847     		blx	r3
 4358              	.LVL577:
 902:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.HOME_REF);
 4359              		.loc 1 902 2 is_stmt 1 view .LVU1521
 4360              		.loc 1 902 17 is_stmt 0 view .LVU1522
 4361 0c48 3368     		ldr	r3, [r6]
 4362              		.loc 1 902 2 view .LVU1523
 4363 0c4a 2069     		ldr	r0, [r4, #16]
 4364 0c4c DB68     		ldr	r3, [r3, #12]
 4365 0c4e 9847     		blx	r3
 4366              	.LVL578:
 903:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.START);
 4367              		.loc 1 903 2 is_stmt 1 view .LVU1524
 4368              		.loc 1 903 17 is_stmt 0 view .LVU1525
 4369 0c50 3368     		ldr	r3, [r6]
 4370              		.loc 1 903 2 view .LVU1526
 4371 0c52 E068     		ldr	r0, [r4, #12]
 4372 0c54 DB68     		ldr	r3, [r3, #12]
 4373 0c56 9847     		blx	r3
 4374              	.LVL579:
 904:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toOutput(Pins.FREEZE);
 4375              		.loc 1 904 2 is_stmt 1 view .LVU1527
 4376              		.loc 1 904 17 is_stmt 0 view .LVU1528
 4377 0c58 3368     		ldr	r3, [r6]
 4378              		.loc 1 904 2 view .LVU1529
 4379 0c5a A068     		ldr	r0, [r4, #8]
 4380 0c5c DB68     		ldr	r3, [r3, #12]
 4381 0c5e 9847     		blx	r3
 4382              	.LVL580:
 905:boards/TMC4361A_eval.c **** 
 906:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.NRST);
 4383              		.loc 1 906 2 is_stmt 1 view .LVU1530
 4384              		.loc 1 906 17 is_stmt 0 view .LVU1531
 4385 0c60 3368     		ldr	r3, [r6]
 4386              		.loc 1 906 2 view .LVU1532
 4387 0c62 6068     		ldr	r0, [r4, #4]
 4388 0c64 5B69     		ldr	r3, [r3, #20]
 4389 0c66 9847     		blx	r3
 4390              	.LVL581:
 907:boards/TMC4361A_eval.c **** 
 908:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.STOP_L);
 4391              		.loc 1 908 2 is_stmt 1 view .LVU1533
 4392              		.loc 1 908 17 is_stmt 0 view .LVU1534
 4393 0c68 3368     		ldr	r3, [r6]
 4394              		.loc 1 908 2 view .LVU1535
 4395 0c6a A069     		ldr	r0, [r4, #24]
 4396 0c6c 5B69     		ldr	r3, [r3, #20]
 4397 0c6e 9847     		blx	r3
 4398              	.LVL582:
 909:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.STOP_R);
 4399              		.loc 1 909 2 is_stmt 1 view .LVU1536
 4400              		.loc 1 909 17 is_stmt 0 view .LVU1537
 4401 0c70 3368     		ldr	r3, [r6]
 4402              		.loc 1 909 2 view .LVU1538
 4403 0c72 6069     		ldr	r0, [r4, #20]
 4404 0c74 5B69     		ldr	r3, [r3, #20]
 4405 0c76 9847     		blx	r3
 4406              	.LVL583:
 910:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.HOME_REF);
 4407              		.loc 1 910 2 is_stmt 1 view .LVU1539
 4408              		.loc 1 910 17 is_stmt 0 view .LVU1540
 4409 0c78 3368     		ldr	r3, [r6]
 4410              		.loc 1 910 2 view .LVU1541
 4411 0c7a 2069     		ldr	r0, [r4, #16]
 4412 0c7c 5B69     		ldr	r3, [r3, #20]
 4413 0c7e 9847     		blx	r3
 4414              	.LVL584:
 911:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.START);
 4415              		.loc 1 911 2 is_stmt 1 view .LVU1542
 4416              		.loc 1 911 17 is_stmt 0 view .LVU1543
 4417 0c80 3368     		ldr	r3, [r6]
 4418              		.loc 1 911 2 view .LVU1544
 4419 0c82 E068     		ldr	r0, [r4, #12]
 4420 0c84 5B69     		ldr	r3, [r3, #20]
 4421 0c86 9847     		blx	r3
 4422              	.LVL585:
 912:boards/TMC4361A_eval.c **** 	HAL.IOs->config->setHigh(Pins.FREEZE);
 4423              		.loc 1 912 2 is_stmt 1 view .LVU1545
 4424              		.loc 1 912 17 is_stmt 0 view .LVU1546
 4425 0c88 3368     		ldr	r3, [r6]
 4426              		.loc 1 912 2 view .LVU1547
 4427 0c8a A068     		ldr	r0, [r4, #8]
 4428 0c8c 5B69     		ldr	r3, [r3, #20]
 4429 0c8e 9847     		blx	r3
 4430              	.LVL586:
 913:boards/TMC4361A_eval.c **** 
 914:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toInput(Pins.STANDBY_CLK);
 4431              		.loc 1 914 2 is_stmt 1 view .LVU1548
 4432              		.loc 1 914 17 is_stmt 0 view .LVU1549
 4433 0c90 3368     		ldr	r3, [r6]
 4434              		.loc 1 914 2 view .LVU1550
 4435 0c92 206A     		ldr	r0, [r4, #32]
 4436 0c94 1B69     		ldr	r3, [r3, #16]
 4437 0c96 9847     		blx	r3
 4438              	.LVL587:
 915:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toInput(Pins.INTR);
 4439              		.loc 1 915 2 is_stmt 1 view .LVU1551
 4440              		.loc 1 915 17 is_stmt 0 view .LVU1552
 4441 0c98 3368     		ldr	r3, [r6]
 4442              		.loc 1 915 2 view .LVU1553
 4443 0c9a E069     		ldr	r0, [r4, #28]
 4444 0c9c 1B69     		ldr	r3, [r3, #16]
 4445 0c9e 9847     		blx	r3
 4446              	.LVL588:
 916:boards/TMC4361A_eval.c **** 	HAL.IOs->config->toInput(Pins.TARGET_REACHED);
 4447              		.loc 1 916 2 is_stmt 1 view .LVU1554
 4448              		.loc 1 916 17 is_stmt 0 view .LVU1555
 4449 0ca0 3368     		ldr	r3, [r6]
 4450              		.loc 1 916 2 view .LVU1556
 4451 0ca2 2068     		ldr	r0, [r4]
 4452 0ca4 1B69     		ldr	r3, [r3, #16]
 4453 0ca6 9847     		blx	r3
 4454              	.LVL589:
 917:boards/TMC4361A_eval.c **** 
 918:boards/TMC4361A_eval.c **** 	TMC4361A_SPIChannel = &HAL.SPI->ch1;
 4455              		.loc 1 918 2 is_stmt 1 view .LVU1557
 919:boards/TMC4361A_eval.c **** 	TMC4361A_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 4456              		.loc 1 919 29 is_stmt 0 view .LVU1558
 4457 0ca8 7368     		ldr	r3, [r6, #4]
 918:boards/TMC4361A_eval.c **** 	TMC4361A_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 4458              		.loc 1 918 28 view .LVU1559
 4459 0caa 3A69     		ldr	r2, [r7, #16]
 920:boards/TMC4361A_eval.c **** 
 921:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->state        = CONFIG_RESET;
 922:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 923:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->reset        = reset;
 4460              		.loc 1 923 38 view .LVU1560
 4461 0cac 1C49     		ldr	r1, .L229+20
 918:boards/TMC4361A_eval.c **** 	TMC4361A_SPIChannel->CSN = &HAL.IOs->pins->SPI1_CSN;
 4462              		.loc 1 918 22 view .LVU1561
 4463 0cae C4F8E022 		str	r2, [r4, #736]
 919:boards/TMC4361A_eval.c **** 
 4464              		.loc 1 919 2 is_stmt 1 view .LVU1562
 919:boards/TMC4361A_eval.c **** 
 4465              		.loc 1 919 29 is_stmt 0 view .LVU1563
 4466 0cb2 03F53273 		add	r3, r3, #712
 919:boards/TMC4361A_eval.c **** 
 4467              		.loc 1 919 27 view .LVU1564
 4468 0cb6 5360     		str	r3, [r2, #4]
 921:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 4469              		.loc 1 921 2 is_stmt 1 view .LVU1565
 921:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 4470              		.loc 1 921 16 is_stmt 0 view .LVU1566
 4471 0cb8 AB69     		ldr	r3, [r5, #24]
 922:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->reset        = reset;
 4472              		.loc 1 922 2 is_stmt 1 view .LVU1567
 921:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 4473              		.loc 1 921 38 is_stmt 0 view .LVU1568
 4474 0cba 0122     		movs	r2, #1
 4475              		.loc 1 923 38 view .LVU1569
 4476 0cbc C3F80412 		str	r1, [r3, #516]
 924:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->restore      = restore;
 4477              		.loc 1 924 38 view .LVU1570
 4478 0cc0 1849     		ldr	r1, .L229+24
 921:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->configIndex  = 0;
 4479              		.loc 1 921 38 view .LVU1571
 4480 0cc2 1A80     		strh	r2, [r3]	@ movhi
 923:boards/TMC4361A_eval.c **** 	Evalboards.ch1.config->restore      = restore;
 4481              		.loc 1 923 2 is_stmt 1 view .LVU1572
 4482              		.loc 1 924 2 view .LVU1573
 4483              		.loc 1 924 38 is_stmt 0 view .LVU1574
 4484 0cc4 C3F80812 		str	r1, [r3, #520]
 925:boards/TMC4361A_eval.c **** 
 926:boards/TMC4361A_eval.c **** 	Evalboards.ch1.cover                = tmc4361A_cover;
 4485              		.loc 1 926 2 is_stmt 1 view .LVU1575
 4486              		.loc 1 926 38 is_stmt 0 view .LVU1576
 4487 0cc8 174B     		ldr	r3, .L229+28
 4488 0cca AB66     		str	r3, [r5, #104]
 927:boards/TMC4361A_eval.c **** 	Evalboards.ch1.rotate               = rotate;
 4489              		.loc 1 927 2 is_stmt 1 view .LVU1577
 4490              		.loc 1 927 38 is_stmt 0 view .LVU1578
 4491 0ccc 174B     		ldr	r3, .L229+32
 4492 0cce 6B62     		str	r3, [r5, #36]
 928:boards/TMC4361A_eval.c **** 	Evalboards.ch1.right                = right;
 4493              		.loc 1 928 2 is_stmt 1 view .LVU1579
 4494              		.loc 1 928 38 is_stmt 0 view .LVU1580
 4495 0cd0 174B     		ldr	r3, .L229+36
 4496 0cd2 2B62     		str	r3, [r5, #32]
 929:boards/TMC4361A_eval.c **** 	Evalboards.ch1.left                 = left;
 4497              		.loc 1 929 2 is_stmt 1 view .LVU1581
 4498              		.loc 1 929 38 is_stmt 0 view .LVU1582
 4499 0cd4 174B     		ldr	r3, .L229+40
 4500 0cd6 EB61     		str	r3, [r5, #28]
 930:boards/TMC4361A_eval.c **** 	Evalboards.ch1.stop                 = stop;
 4501              		.loc 1 930 2 is_stmt 1 view .LVU1583
 4502              		.loc 1 930 38 is_stmt 0 view .LVU1584
 4503 0cd8 174B     		ldr	r3, .L229+44
 4504 0cda AB62     		str	r3, [r5, #40]
 931:boards/TMC4361A_eval.c **** 	Evalboards.ch1.GAP                  = GAP;
 4505              		.loc 1 931 2 is_stmt 1 view .LVU1585
 4506              		.loc 1 931 38 is_stmt 0 view .LVU1586
 4507 0cdc 174B     		ldr	r3, .L229+48
 4508 0cde EB63     		str	r3, [r5, #60]
 932:boards/TMC4361A_eval.c **** 	Evalboards.ch1.SAP                  = SAP;
 4509              		.loc 1 932 2 is_stmt 1 view .LVU1587
 4510              		.loc 1 932 38 is_stmt 0 view .LVU1588
 4511 0ce0 174B     		ldr	r3, .L229+52
 4512 0ce2 AB63     		str	r3, [r5, #56]
 933:boards/TMC4361A_eval.c **** 	Evalboards.ch1.moveTo               = moveTo;
 4513              		.loc 1 933 2 is_stmt 1 view .LVU1589
 4514              		.loc 1 933 38 is_stmt 0 view .LVU1590
 4515 0ce4 174B     		ldr	r3, .L229+56
 4516 0ce6 EB62     		str	r3, [r5, #44]
 934:boards/TMC4361A_eval.c **** 	Evalboards.ch1.moveBy               = moveBy;
 4517              		.loc 1 934 2 is_stmt 1 view .LVU1591
 4518              		.loc 1 934 38 is_stmt 0 view .LVU1592
 4519 0ce8 174B     		ldr	r3, .L229+60
 4520 0cea 2B63     		str	r3, [r5, #48]
 935:boards/TMC4361A_eval.c **** 	Evalboards.ch1.writeRegister        = writeRegister;
 4521              		.loc 1 935 2 is_stmt 1 view .LVU1593
 4522              		.loc 1 935 38 is_stmt 0 view .LVU1594
 4523 0cec 174B     		ldr	r3, .L229+64
 4524 0cee EB64     		str	r3, [r5, #76]
 936:boards/TMC4361A_eval.c **** 	Evalboards.ch1.readRegister         = readRegister;
 4525              		.loc 1 936 2 is_stmt 1 view .LVU1595
 4526              		.loc 1 936 38 is_stmt 0 view .LVU1596
 4527 0cf0 174B     		ldr	r3, .L229+68
 4528 0cf2 AB64     		str	r3, [r5, #72]
 937:boards/TMC4361A_eval.c **** 	Evalboards.ch1.periodicJob          = periodicJob;
 4529              		.loc 1 937 2 is_stmt 1 view .LVU1597
 4530              		.loc 1 937 38 is_stmt 0 view .LVU1598
 4531 0cf4 174B     		ldr	r3, .L229+72
 4532 0cf6 AB65     		str	r3, [r5, #88]
 938:boards/TMC4361A_eval.c **** 	Evalboards.ch1.userFunction         = userFunction;
 4533              		.loc 1 938 2 is_stmt 1 view .LVU1599
 4534              		.loc 1 938 38 is_stmt 0 view .LVU1600
 4535 0cf8 174B     		ldr	r3, .L229+76
 4536 0cfa 6B65     		str	r3, [r5, #84]
 939:boards/TMC4361A_eval.c **** 	Evalboards.ch1.checkErrors          = checkErrors;
 4537              		.loc 1 939 2 is_stmt 1 view .LVU1601
 4538              		.loc 1 939 38 is_stmt 0 view .LVU1602
 4539 0cfc 174B     		ldr	r3, .L229+80
 4540 0cfe 2B66     		str	r3, [r5, #96]
 940:boards/TMC4361A_eval.c **** 	Evalboards.ch1.numberOfMotors       = TMC4361A_MOTORS;
 4541              		.loc 1 940 2 is_stmt 1 view .LVU1603
 941:boards/TMC4361A_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4542              		.loc 1 941 38 is_stmt 0 view .LVU1604
 4543 0d00 174B     		ldr	r3, .L229+84
 4544 0d02 EB65     		str	r3, [r5, #92]
 942:boards/TMC4361A_eval.c **** 
 943:boards/TMC4361A_eval.c **** 	// Provide the cover function to the driver channel
 944:boards/TMC4361A_eval.c **** 	Evalboards.ch1.fullCover            = tmc4361A_fullCover;
 4545              		.loc 1 944 38 view .LVU1605
 4546 0d04 174B     		ldr	r3, .L229+88
 940:boards/TMC4361A_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4547              		.loc 1 940 38 view .LVU1606
 4548 0d06 2A75     		strb	r2, [r5, #20]
 941:boards/TMC4361A_eval.c **** 	Evalboards.ch1.deInit               = deInit;
 4549              		.loc 1 941 2 is_stmt 1 view .LVU1607
 4550              		.loc 1 944 2 view .LVU1608
 4551              		.loc 1 944 38 is_stmt 0 view .LVU1609
 4552 0d08 EB66     		str	r3, [r5, #108]
 945:boards/TMC4361A_eval.c **** };
 4553              		.loc 1 945 1 view .LVU1610
 4554 0d0a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4555              	.L230:
 4556              		.align	2
 4557              	.L229:
 4558 0d0c 00000000 		.word	.LANCHOR0
 4559 0d10 00000000 		.word	Evalboards
 4560 0d14 00000000 		.word	.LANCHOR1
 4561 0d18 00000000 		.word	HAL
 4562 0d1c 00000000 		.word	configCallback
 4563 0d20 00000000 		.word	reset
 4564 0d24 00000000 		.word	restore
 4565 0d28 00000000 		.word	tmc4361A_cover
 4566 0d2c 00000000 		.word	rotate
 4567 0d30 00000000 		.word	right
 4568 0d34 00000000 		.word	left
 4569 0d38 00000000 		.word	stop
 4570 0d3c 00000000 		.word	GAP
 4571 0d40 00000000 		.word	SAP
 4572 0d44 00000000 		.word	moveTo
 4573 0d48 00000000 		.word	moveBy
 4574 0d4c 00000000 		.word	writeRegister
 4575 0d50 00000000 		.word	readRegister
 4576 0d54 00000000 		.word	periodicJob
 4577 0d58 00000000 		.word	userFunction
 4578 0d5c 00000000 		.word	checkErrors
 4579 0d60 00000000 		.word	deInit
 4580 0d64 00000000 		.word	tmc4361A_fullCover
 4581              		.cfi_endproc
 4582              	.LFE24:
 4584              		.comm	IdState,40,4
 4585              		.comm	TMCMotionController,532,4
 4586              		.comm	TMCDriver,532,4
 4587              		.comm	Evalboards,244,4
 4588              		.comm	VitalSignsMonitor,20,4
 4589              		.comm	hwid,1,1
 4590              		.comm	HAL,48,4
 4591              		.comm	UART,40,4
 4592              		.comm	Timer,16,4
 4593              		.comm	WLAN,36,4
 4594              		.comm	RS232,36,4
 4595              		.comm	LEDs,28,4
 4596              		.comm	USB,36,4
 4597              		.comm	uart0_interrupt,1,1
 4598              		.comm	ADCs,32,4
 4599              		.comm	SPI,44,4
 4600              		.comm	IOMap,2088,4
 4601              		.comm	IOs,52,4
 4602              		.comm	Cpu,8,4
 4603              		.section	.rodata
 4604              		.align	2
 4605              		.set	.LANCHOR1,. + 0
 4608              	tmc4361A_defaultRegisterResetState:
 4609 0000 00000000 		.word	0
 4610 0004 00000000 		.word	0
 4611 0008 00000000 		.word	0
 4612 000c 00000000 		.word	0
 4613 0010 00000000 		.word	0
 4614 0014 00000000 		.word	0
 4615 0018 00000000 		.word	0
 4616 001c 00000000 		.word	0
 4617 0020 00000000 		.word	0
 4618 0024 00000000 		.word	0
 4619 0028 00000000 		.word	0
 4620 002c 00000000 		.word	0
 4621 0030 00000000 		.word	0
 4622 0034 00000000 		.word	0
 4623 0038 00000000 		.word	0
 4624 003c 00000000 		.word	0
 4625 0040 01000400 		.word	262145
 4626 0044 00000000 		.word	0
 4627 0048 00000000 		.word	0
 4628 004c 00000000 		.word	0
 4629 0050 00000000 		.word	0
 4630 0054 00000000 		.word	0
 4631 0058 00000000 		.word	0
 4632 005c 00000000 		.word	0
 4633 0060 00000000 		.word	0
 4634 0064 00000000 		.word	0
 4635 0068 00000000 		.word	0
 4636 006c 00000000 		.word	0
 4637 0070 00000000 		.word	0
 4638 0074 00000000 		.word	0
 4639 0078 00000000 		.word	0
 4640 007c 00000000 		.word	0
 4641 0080 01000000 		.word	1
 4642 0084 00000000 		.word	0
 4643 0088 00000000 		.word	0
 4644 008c 00000000 		.word	0
 4645 0090 00000000 		.word	0
 4646 0094 00000000 		.word	0
 4647 0098 00000000 		.word	0
 4648 009c 00000000 		.word	0
 4649 00a0 00000000 		.word	0
 4650 00a4 00000000 		.word	0
 4651 00a8 00000000 		.word	0
 4652 00ac 00000000 		.word	0
 4653 00b0 00000000 		.word	0
 4654 00b4 00000000 		.word	0
 4655 00b8 00000000 		.word	0
 4656 00bc 00000000 		.word	0
 4657 00c0 00000000 		.word	0
 4658 00c4 00000000 		.word	0
 4659 00c8 00000000 		.word	0
 4660 00cc 00000000 		.word	0
 4661 00d0 00000000 		.word	0
 4662 00d4 00000000 		.word	0
 4663 00d8 00000000 		.word	0
 4664 00dc 00000000 		.word	0
 4665 00e0 00000000 		.word	0
 4666 00e4 00000000 		.word	0
 4667 00e8 00000000 		.word	0
 4668 00ec 00000000 		.word	0
 4669 00f0 00000000 		.word	0
 4670 00f4 00000000 		.word	0
 4671 00f8 00000000 		.word	0
 4672 00fc 00000000 		.word	0
 4673 0100 00000000 		.word	0
 4674 0104 00000000 		.word	0
 4675 0108 00000000 		.word	0
 4676 010c 00000000 		.word	0
 4677 0110 00000000 		.word	0
 4678 0114 00000000 		.word	0
 4679 0118 00000000 		.word	0
 4680 011c 00000000 		.word	0
 4681 0120 00000000 		.word	0
 4682 0124 00000000 		.word	0
 4683 0128 00000000 		.word	0
 4684 012c 00000000 		.word	0
 4685 0130 00000000 		.word	0
 4686 0134 00000000 		.word	0
 4687 0138 00000000 		.word	0
 4688 013c 00000000 		.word	0
 4689 0140 00000000 		.word	0
 4690 0144 00000000 		.word	0
 4691 0148 00000000 		.word	0
 4692 014c 00000000 		.word	0
 4693 0150 00000000 		.word	0
 4694 0154 00000000 		.word	0
 4695 0158 00000000 		.word	0
 4696 015c 00000000 		.word	0
 4697 0160 00000000 		.word	0
 4698 0164 00000000 		.word	0
 4699 0168 00000000 		.word	0
 4700 016c 00000000 		.word	0
 4701 0170 00000000 		.word	0
 4702 0174 00000000 		.word	0
 4703 0178 00000000 		.word	0
 4704 017c 00000000 		.word	0
 4705 0180 00000000 		.word	0
 4706 0184 00000000 		.word	0
 4707 0188 00000000 		.word	0
 4708 018c 00000000 		.word	0
 4709 0190 00000000 		.word	0
 4710 0194 00000000 		.word	0
 4711 0198 00000000 		.word	0
 4712 019c 00000000 		.word	0
 4713 01a0 00000000 		.word	0
 4714 01a4 00000000 		.word	0
 4715 01a8 00000000 		.word	0
 4716 01ac 00000000 		.word	0
 4717 01b0 00000000 		.word	0
 4718 01b4 00000000 		.word	0
 4719 01b8 00000000 		.word	0
 4720 01bc 00000000 		.word	0
 4721 01c0 00000000 		.word	0
 4722 01c4 00000000 		.word	0
 4723 01c8 00000000 		.word	0
 4724 01cc 00000000 		.word	0
 4725 01d0 00000000 		.word	0
 4726 01d4 00000000 		.word	0
 4727 01d8 00000000 		.word	0
 4728 01dc 00000000 		.word	0
 4729 01e0 00000000 		.word	0
 4730 01e4 00000000 		.word	0
 4731 01e8 00000000 		.word	0
 4732 01ec 00000000 		.word	0
 4733 01f0 00000000 		.word	0
 4734 01f4 00000000 		.word	0
 4735 01f8 00000000 		.word	0
 4736 01fc 00000000 		.word	0
 4737              		.bss
 4738              		.align	3
 4739              		.set	.LANCHOR0,. + 0
 4742              	Pins:
 4743 0000 00000000 		.space	36
 4743      00000000 
 4743      00000000 
 4743      00000000 
 4743      00000000 
 4746              	TMC4361A:
 4747 0024 00000000 		.space	664
 4747      00000000 
 4747      00000000 
 4747      00000000 
 4747      00000000 
 4750              	high.7877:
 4751 02bc 00000000 		.space	4
 4754              	vmax_position:
 4755 02c0 00000000 		.space	4
 4756 02c4 00000000 		.space	4
 4759              	coverOut.7777:
 4760 02c8 00000000 		.space	8
 4760      00000000 
 4763              	coverLength.7778:
 4764 02d0 00       		.space	1
 4765 02d1 00000000 		.space	7
 4765      000000
 4768              	coverIn.7776:
 4769 02d8 00000000 		.space	8
 4769      00000000 
 4772              	TMC4361A_SPIChannel:
 4773 02e0 00000000 		.space	4
 4776              	ADCValue:
 4777 02e4 00000000 		.space	12
 4777      00000000 
 4777      00000000 
 4778              		.text
 4779              	.Letext0:
 4780              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 4781              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4782              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4783              		.file 5 "TMC-API/tmc/helpers/Types.h"
 4784              		.file 6 "TMC-API/tmc/helpers/Config.h"
 4785              		.file 7 "TMC-API/tmc/helpers/RegisterAccess.h"
 4786              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4787              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 4788              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4789              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 4790              		.file 12 "TMC-API/tmc/helpers/API_Header.h"
 4791              		.file 13 "hal/Landungsbruecke/freescale/MK20D10.h"
 4792              		.file 14 "./hal/Landungsbruecke/freescale/USB_CDC/PE_Types.h"
 4793              		.file 15 "./hal/Landungsbruecke/freescale/Cpu.h"
 4794              		.file 16 "./hal/IOs.h"
 4795              		.file 17 "./hal/IOMap.h"
 4796              		.file 18 "./hal/SPI.h"
 4797              		.file 19 "./hal/ADCs.h"
 4798              		.file 20 "./hal/RXTX.h"
 4799              		.file 21 "./hal/USB.h"
 4800              		.file 22 "./hal/LEDs.h"
 4801              		.file 23 "./hal/RS232.h"
 4802              		.file 24 "./hal/WLAN.h"
 4803              		.file 25 "./hal/Timer.h"
 4804              		.file 26 "./hal/UART.h"
 4805              		.file 27 "./hal/HAL.h"
 4806              		.file 28 "./tmc/VitalSignsMonitor.h"
 4807              		.file 29 "boards/Board.h"
 4808              		.file 30 "boards/TMCDriver.h"
 4809              		.file 31 "boards/TMCMotionController.h"
 4810              		.file 32 "./tmc/BoardAssignment.h"
 4811              		.file 33 "TMC-API/tmc/ic/TMC4361A/TMC4361A.h"
 4812              		.file 34 "TMC-API/tmc/ic/TMC2130/TMC2130.h"
 4813              		.file 35 "TMC-API/tmc/ic/TMC2160/TMC2160.h"
 4814              		.file 36 "./hal/SysTick.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TMC4361A_eval.c
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:15     .text:00000000 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:22     .text:00000000 checkErrors
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:42     .text:00000008 $d
                            *COM*:000000f4 Evalboards
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:46     .text:0000000c $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:52     .text:0000000c deInit
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:171    .text:00000070 $d
                            *COM*:00000030 HAL
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:176    .text:00000078 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:182    .text:00000078 tmc4361A_fullCover
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:206    .text:00000084 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:210    .text:00000088 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:216    .text:00000088 userFunction
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:245    .text:0000009a $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:438    .text:00000154 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:445    .text:00000164 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:451    .text:00000164 periodicJob
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:472    .text:0000016c $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:476    .text:00000170 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:482    .text:00000170 readRegister
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:520    .text:00000180 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:524    .text:00000184 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:530    .text:00000184 writeRegister
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:672    .text:0000021c $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:678    .text:00000228 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:684    .text:00000228 moveBy
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:720    .text:0000023c $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:724    .text:00000240 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:730    .text:00000240 moveTo
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:766    .text:00000254 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:770    .text:00000258 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:776    .text:00000258 handleParameter
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:819    .text:00000282 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:850    .text:000002c0 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:858    .text:000002ca $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:886    .text:00000302 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:1960   .text:000005ac $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:1966   .text:000005b4 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:2973   .text:00000838 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:2986   .text:00000840 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3486   .text:000009a4 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3492   .text:000009b0 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3498   .text:000009b0 SAP
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3538   .text:000009c4 GAP
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3568   .text:000009cc stop
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3617   .text:000009dc $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3621   .text:000009e0 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3627   .text:000009e0 left
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3678   .text:000009f0 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3682   .text:000009f4 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3688   .text:000009f4 right
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3736   .text:00000a00 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3740   .text:00000a04 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3746   .text:00000a04 restore
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3798   .text:00000a30 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3803   .text:00000a38 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3809   .text:00000a38 reset
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3861   .text:00000a64 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3866   .text:00000a6c $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:3872   .text:00000a6c tmc4361A_cover
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4038   .text:00000b3c $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4043   .text:00000b44 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4049   .text:00000b44 configCallback
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4168   .text:00000bb0 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4172   .text:00000bb4 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4178   .text:00000bb4 rotate
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4195   .text:00000bc0 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4199   .text:00000bc4 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4206   .text:00000bc4 tmc4361A_readWriteArray
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4241   .text:00000bd4 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4245   .text:00000bd8 $t
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4252   .text:00000bd8 TMC4361A_init
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4558   .text:00000d0c $d
                            *COM*:00000028 IdState
                            *COM*:00000214 TMCMotionController
                            *COM*:00000214 TMCDriver
                            *COM*:00000014 VitalSignsMonitor
                            *COM*:00000001 hwid
                            *COM*:00000028 UART
                            *COM*:00000010 Timer
                            *COM*:00000024 WLAN
                            *COM*:00000024 RS232
                            *COM*:0000001c LEDs
                            *COM*:00000024 USB
                            *COM*:00000001 uart0_interrupt
                            *COM*:00000020 ADCs
                            *COM*:0000002c SPI
                            *COM*:00000828 IOMap
                            *COM*:00000034 IOs
                            *COM*:00000008 Cpu
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4604   .rodata:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4608   .rodata:00000000 tmc4361A_defaultRegisterResetState
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4738   .bss:00000000 $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4742   .bss:00000000 Pins
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4746   .bss:00000024 TMC4361A
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4750   .bss:000002bc high.7877
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4754   .bss:000002c0 vmax_position
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4759   .bss:000002c8 coverOut.7777
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4763   .bss:000002d0 coverLength.7778
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4768   .bss:000002d8 coverIn.7776
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4772   .bss:000002e0 TMC4361A_SPIChannel
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:4776   .bss:000002e4 ADCValue
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:249    .text:0000009d $d
C:\Users\Shubham\AppData\Local\Temp\ccUNjQLu.s:249    .text:0000009e $t

UNDEFINED SYMBOLS
tmc4361A_readWriteCover
tmc4361A_calibrateClosedLoop
tmc4361A_periodicJob
tmc4361A_readInt
tmc2160_readInt
tmc2160_writeInt
tmc4361A_writeInt
tmc2130_readInt
tmc2130_writeInt
tmc4361A_moveBy
tmc4361A_moveTo
tmc4361A_discardVelocityDecimals
tmc4361A_rotate
wait
tmc4361A_restore
tmc4361A_reset
tmc4361A_fillShadowRegisters
tmc4361A_init
tmc4361A_setCallback
